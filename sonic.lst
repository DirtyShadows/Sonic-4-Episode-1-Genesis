00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	'_inc\s2_constants.asm'
00000000                            ;--------------------------------------------------------------------------------------------
00000000                            ; some constants and variables of this code and other constants of sonic 2 used in this code
00000000                            ;--------------------------------------------------------------------------------------------
00000000                            
00000000                            ; files
00000000                            Nem_LevelIcons					equ	Level_Icons
00000000                            Eni_MenuBg						equ MapEng_MenuBack
00000000                            ArtNem_FontStuff				equ	Nem_MenuFont
00000000                            ArtNem_1P2PWins					equ Nem_1P2PWins
00000000                            MapEng_MenuBack					equ	Menu_Mappings
00000000                            MapEng_Options					equ	Eni_MenuBox
00000000                            MapUnc_Sonic					equ	Map_Sonic
00000000                            Obj38_MapUnc_1DBE4				equ	Map_obj38
00000000                            byte_1DBD6						equ	Ani_obj38
00000000                            ArtUnc_Sonic					equ	Art_Sonic
00000000                            MapRUnc_Sonic					equ	SonicDynPLC
00000000                            Load_Sprites					equ ObjPosLoad
00000000                            ; ===========================================================================
00000000                            ; routines
00000000                            JmpTo_PlayMusic					equ	PlaySound
00000000                            Play_Sfx						equ	PlaySound_Special	
00000000                            PlayMusic						equ	PlaySound
00000000                            JmpTo_PlaySoundStereo			equ	PlaySound_Special
00000000                            WaitForVint						equ	DelayProgram
00000000                            JmpTo2_Dynamic_Normal			equ	Dynamic_Menu
00000000                            Anim_SonicMilesBG				equ	Sonic_Miles_Frame_Select
00000000                            level_select_cheat				equ	Code_Level_Select
00000000                            continues_cheat					equ	Code_Continues
00000000                            CheckCheats						equ	Menu_Code_Test
00000000                            JmpTo_PlaneMapToVRAM			equ	ShowVDPGraphics
00000000                            PlaneMapToVRAM					equ	ShowVDPGraphics
00000000                            Player_ResetAirTimer			equ	ResumeMusic
00000000                            RunObjects						equ	ObjectsLoad
00000000                            Sonic_InputAcceleration_Path	equ	Sonic_Move
00000000                            SingleObjectLoad				equ	SingleObjLoad
00000000                            S1SingleObjectLoad				equ	SingleObjLoad2
00000000                            CalcRoomInFront					equ	Sonic_WalkSpeed
00000000                            AnglePos						equ	Sonic_AnglePos
00000000                            ObjectMove						equ	SpeedToPos
00000000                            ObjectMoveAndFall				equ	ObjectFall
00000000                            KillSonic						equ	KillCharacter
00000000                            CheckGameOver					equ	GameOver
00000000                            Sonic_CheckFloor				equ	Sonic_HitFloor
00000000                            checkleftceilingdist			equ	loc_14FD6
00000000                            CheckCeilingDist				equ	Sonic_DontRunOnWalls
00000000                            checkleftwalldist				equ	Sonic_HitWall
00000000                            CheckRightCeilingDist			equ	sub_14E50
00000000                            CheckRightWallDist				equ	sub_14EB4
00000000                            CalcRoomOverHead				equ	sub_14D48
00000000                            ChkFloorEdge					equ	ObjHitFloor
00000000                            ChkFloorEdge_Part2				equ	ObjHitFloor2
00000000                            Sonic_HitFloor2					equ	loc_13772
00000000                            Sonic_HitCeiling2				equ	loc_13758
00000000                            Sonic_HitRightWall				equ loc_1373E
00000000                            ObjCheckFloorDist				equ ObjHitFloor
00000000                            loc_1B02C						equ	loc_13726
00000000                            Sonic_HitCeilingAndWalls		equ loc_136E2
00000000                            Sonic_HitFloorS2				equ	loc_136B4
00000000                            Sonic_DoLevelCollision			equ	Sonic_Floor
00000000                            ; ===========================================================================
00000000                            ; constants
00000000 =00000091                  Level_Select_Menu_snd			=	$0091
00000000 =00000091                  MusID_Options					=	$0091
00000000 =000000BF                  SndID_ContinueJingle			=	$00BF
00000000 =000000F7                  Emerald_Snd						=	$00F7
00000000 =000000B5                  Ring_Snd						=	$00B5
00000000 =000000E0                  Volume_Down						=	$00E0
00000000 =000000E4                  Stop_Sound						=	$00E4
00000000                            
00000000 =00000014                  PalID_Menu						=	$14
00000000 =00000081                  MusID_2PResult					=	$81
00000000                            
00000000 =0000000C                  GameModeID_Level				=	$0C
00000000 =00000000                  GameModeID_SegaScreen			=	$00
00000000 =00000010                  GameModeID_SpecialStage			=	$10
00000000 =00000020                  GameModeID_2PResults			=	$20
00000000 =00000020                  GameModeID_2PLevelSelect		=	$20
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Controller Buttons
00000000                            ;
00000000                            ; Buttons bit numbers
00000000 =00000000                  button_up:                      EQU     0
00000000 =00000001                  button_down:                    EQU     1
00000000 =00000002                  button_left:                    EQU     2
00000000 =00000003                  button_right:                   EQU     3
00000000 =00000004                  button_B:                       EQU     4
00000000 =00000005                  button_C:                       EQU     5
00000000 =00000006                  button_A:                       EQU     6
00000000 =00000007                  button_start:                   EQU     7
00000000                            ; Buttons masks (1 << x == pow(2, x))
00000000 =00000001                  button_up_mask:                 EQU     1<<button_up    ; $01
00000000 =00000002                  button_down_mask:               EQU     1<<button_down  ; $02
00000000 =00000004                  button_left_mask:               EQU     1<<button_left  ; $04
00000000 =00000008                  button_right_mask:              EQU     1<<button_right ; $08
00000000 =00000010                  button_B_mask:                  EQU     1<<button_B     ; $10
00000000 =00000020                  button_C_mask:                  EQU     1<<button_C     ; $20
00000000 =00000040                  button_A_mask:                  EQU     1<<button_A     ; $40
00000000 =00000080                  button_start_mask:              EQU     1<<button_start ; $80
00000000                            
00000000                            
00000000 =00000000                  VsRSID_Act						equ	0
00000000 =00000001                  VsRSID_Zone						equ	1
00000000 =00000002                  VsRSID_Game						equ	2
00000000 =00000003                  VsRSID_SS						equ	3
00000000 =00000004                  VsRSID_SSZone					equ	4
00000000                            
00000000 =00000090                  ObjID_HUD						equ	$90
00000000 =00000040                  id2								equ	$40
00000000                            
00000000 =00000000                  id equ                      0 ; object ID (if you change this, change insn1op and insn2op in s2.macrosetup.asm, if you still use them)
00000000 =00000001                  render_flags equ		  1 ; bitfield ; bit 7 = onscreen flag, bit 0 = x mirror, bit 1 = y mirror, bit 2 = coordinate system
00000000 =00000002                  art_tile equ		  2 ; and 3 ; start of sprite's art
00000000 =00000004                  mappings equ		  4 ; and 5 and 6 and 7
00000000 =00000008                  x_pos equ			  8 ; and 9 ... some objects use $A and $B as well when extra precision is required (see ObjectMove) ... for screen-space objects this is called x_pixel instead
00000000 =0000000A                  x_sub equ			 $A
00000000 =0000000C                  y_pos equ			 $C ; and $D ... some objects use $E and $F as well when extra precision is required ... screen-space objects use y_pixel instead
00000000 =0000000E                  y_sub equ			 $E
00000000 =00000018                  priority equ		$18 ; 0 = front
00000000 =00000023                  width_pixels equ		$23
00000000 =0000001A                  mapping_frame equ		$1A
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by most objects:
00000000 =00000010                  x_vel equ			$10 ; and $11 ; horizontal velocity
00000000 =00000012                  y_vel equ			$12 ; and $13 ; vertical velocity
00000000 =00000016                  y_radius equ		$16 ; collision width / 2
00000000 =00000017                  x_radius equ		$17 ; collision height / 2
00000000 =0000001B                  anim_frame equ		$1B
00000000 =0000001C                  anim equ			$1C
00000000 =0000001D                  next_anim equ		$1D
00000000 =0000001E                  anim_frame_duration equ	$1E
00000000 =00000022                  status equ		$22 ; note: exact meaning depends on the object... for sonic/tails: bit 0: leftfacing. bit 1: inair. bit 2: spinning. bit 3: onobject. bit 4: rolljumping. bit 5: pushing. bit 6: underwater.
00000000 =00000024                  routine equ		$24
00000000 =00000025                  routine_secondary equ	$25
00000000 =00000026                  angle equ			$26 ; angle about the zequ0 axis (360 degrees equ 256)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by many objects but NOT sonic/tails:
00000000 =00000020                  collision_flags equ	$20
00000000 =00000021                  collision_property equ	$21
00000000 =00000014                  respawn_index equ		$14
00000000 =00000028                  subtype equ		$28
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions specific to sonic/tails (Obj01, Obj02, and ObjDB):
00000000                            ; note: $1F, $20, and $21 are unused and available
00000000 =00000020                  inertia equ		$20 ; and $15 ; directionless representation of speed... not updated in the air
00000000 =00000031                  flip_angle equ		$31 ; angle about the xequ0 axis (360 degrees equ 256) (twist/tumble)
00000000 =00000028                  air_left equ		$28
00000000 =00000035                  flip_turned equ		$35 ; 0 for normal, 1 to invert flipping (it's a 180 degree rotation about the axis of Sonic's spine, so he stays in the same position but looks turned around)
00000000 =0000002A                  obj_control equ		$2A ; 0 for normal, 1 for hanging or for resting on a flipper, $81 for going through CNZ/OOZ/MTZ tubes or stopped in CNZ cages or stoppers or flying if Tails
00000000 =0000002B                  status_secondary equ	$2B
00000000 =00000033                  flips_remaining equ	$33 ; number of flip revolutions remaining
00000000 =00000034                  flip_speed equ		$34 ; number of flip revolutions per frame / 256
00000000 =0000002E                  move_lock equ		$2E ; and $2F ; horizontal control lock, counts down to 0
00000000 =00000030                  invulnerable_time equ	$30 ; and $31 ; time remaining until you stop blinking
00000000 =00000032                  invincibility_time equ	$32 ; and $33 ; remaining
00000000 =00000034                  speedshoes_time equ	$34 ; and $35 ; remaining
00000000 =00000036                  next_tilt equ		$36 ; angle on ground in front of sprite
00000000 =00000037                  tilt equ			$37 ; angle on ground
00000000 =00000038                  stick_to_convex equ	$38 ; 0 for normal, 1 to make Sonic stick to convex surfaces like the rotating discs in Sonic 1 and 3 (unused in Sonic 2 but fully functional)
00000000 =00000039                  spindash_flag equ		$39 ; 0 for normal, 1 for charging a spindash or forced rolling
00000000 =0000003A                  spindash_counter equ	$3A ; and $3B
00000000 =0000003C                  jumping equ		$3C
00000000 =0000003D                  interact equ		$3D ; RAM address of the last object Sonic stood on, minus $FFFFB000 and divided by $40
00000000 =0000003E                  layer equ			$3E ; collision plane, track switching...
00000000 =0000003F                  layer_plus equ		$3F ; always same as layer+1 ?? used for collision somehow
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by several objects but NOT sonic/tails:
00000000 =0000000A                  y_pixel equ		2+x_pos ; and 3+x_pos ; y coordinate for objects using screen-space coordinate system
00000000 =00000008                  x_pixel equ		x_pos ; and 1+x_pos ; x coordinate for objects using screen-space coordinate system
00000000 =0000003E                  parent equ		$3E ; and $3F ; address of object that owns or spawned this one, if applicable
00000000 =00000020                  NumberOfZones equ $20
00000000                            ; TODO: $2C is often parent instead (see LoadChildObject); consider defining parent2 = $2C and changing some objoff_2Cs to that
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by some/most bosses:
00000000 =0000000A                  boss_subtype		= $A
00000000 =00000014                  boss_invulnerable_time	= $14
00000000 =0000001A                  boss_sine_count		= $1A	; mapping_frame
00000000 =00000026                  boss_routine		= $26	; angle
00000000 =0000002C                  boss_defeated		= $2C
00000000 =00000032                  boss_hitcount2		= $32
00000000 =00000038                  boss_hurt_sonic		= $38	; flag set by collision response routine when sonic has just been hurt (by boss?)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; when childsprites are activated (i.e. bit #6 of render_flags set)
00000000 =0000000B                  mainspr_mapframe	= $B
00000000 =0000000E                  mainspr_width		= $E
00000000 =0000000F                  mainspr_childsprites 	= $F	; amount of child sprites
00000000 =00000014                  mainspr_height		= $14
00000000 =00000010                  sub2_x_pos		= $10	; x_vel
00000000 =00000012                  sub2_y_pos		= $12	; y_vel
00000000 =00000015                  sub2_mapframe		= $15
00000000 =00000016                  sub3_x_pos		= $16	; y_radius
00000000 =00000018                  sub3_y_pos		= $18	; priority
00000000 =0000001B                  sub3_mapframe		= $1B	; anim_frame
00000000 =0000001C                  sub4_x_pos		= $1C	; anim
00000000 =0000001E                  sub4_y_pos		= $1E	; anim_frame_duration
00000000 =00000021                  sub4_mapframe		= $21	; collision_property
00000000 =00000022                  sub5_x_pos		= $22	; status
00000000 =00000024                  sub5_y_pos		= $24	; routine
00000000 =00000027                  sub5_mapframe		= $27
00000000 =00000028                  sub6_x_pos		= $28	; subtype
00000000 =0000002A                  sub6_y_pos		= $2A
00000000 =0000002D                  sub6_mapframe		= $2D
00000000 =0000002E                  sub7_x_pos		= $2E
00000000 =00000030                  sub7_y_pos		= $30
00000000 =00000033                  sub7_mapframe		= $33
00000000 =00000034                  sub8_x_pos		= $34
00000000 =00000036                  sub8_y_pos		= $36
00000000 =00000039                  sub8_mapframe		= $39
00000000 =0000003A                  sub9_x_pos		= $3A
00000000 =0000003C                  sub9_y_pos		= $3C
00000000 =0000003F                  sub9_mapframe		= $3F
00000000 =00000006                  next_subspr		= $6
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; unknown or inconsistently used offsets that are not applicable to sonic/tails:
00000000                            ; (provided because rearrangement of the above values sometimes requires making space in here too)
00000000 =0000000A                  objoff_A equ		2+x_pos ; note: x_pos can be 4 bytes, but sometimes the last 2 bytes of x_pos are used for other unrelated things
00000000 =0000000B                  objoff_B equ		3+x_pos
00000000 =0000000E                  objoff_E equ		2+y_pos
00000000 =0000000F                  objoff_F equ		3+y_pos
00000000 =00000014                  objoff_14 equ		$14
00000000 =00000015                  objoff_15 equ		$15
00000000 =0000001F                  objoff_1F equ		$1F
00000000 =00000027                  objoff_27 equ		$27
00000000 =00000028                  objoff_28 equ		$28 ; overlaps subtype, but a few objects use it for other things anyway
00000000 =00000029                  objoff_29 equ $29
00000000 =0000002A                  objoff_2A equ $2A
00000000 =0000002B                  objoff_2B equ $2B
00000000 =0000002C                  objoff_2C equ $2C
00000000 =0000002D                  objoff_2D equ $2D
00000000 =0000002E                  objoff_2E equ $2E
00000000 =0000002F                  objoff_2F equ $2F
00000000 =00000030                  objoff_30 equ $30
00000000 =00000031                  objoff_31 equ $31
00000000 =00000032                  objoff_32 equ $32
00000000 =00000033                  objoff_33 equ $33
00000000 =00000034                  objoff_34 equ $34
00000000 =00000035                  objoff_35 equ $35
00000000 =00000036                  objoff_36 equ $36
00000000 =00000037                  objoff_37 equ $37
00000000 =00000038                  objoff_38 equ $38
00000000 =00000039                  objoff_39 equ $39
00000000 =0000003A                  objoff_3A equ $3A
00000000 =0000003B                  objoff_3B equ $3B
00000000 =0000003C                  objoff_3C equ $3C
00000000 =0000003D                  objoff_3D equ $3D
00000000 =0000003E                  objoff_3E equ $3E
00000000 =0000003F                  objoff_3F equ $3F
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; property of all objects:
00000000 =00000040                  object_size =           $40 ; the size of an object
00000000 =00000040                  next_object =           object_size
00000000                            
00000000 =00A130F1                  SRAM_access_flag =		$A130F1
00000000                            
00000000 =00000000                  __ = $00
00000000 =00000010                  _0 = $10
00000000 =00000011                  _1 = $11
00000000 =00000012                  _2 = $12
00000000 =0000001E                  _A = $1E
00000000 =0000001F                  _B = $1F
00000000 =00000020                  _C = $20
00000000 =00000021                  _D = $21
00000000 =00000022                  _E = $22    
00000000 =00000023                  _F = $23
00000000 =00000024                  _G = $24
00000000 =00000025                  _H = $25
00000000 =00000026                  _I = $26
00000000 =00000027                  _J = $27
00000000 =00000028                  _K = $28
00000000 =00000029                  _L = $29
00000000 =0000002A                  _M = $2A
00000000 =0000002B                  _N = $2B
00000000 =0000002C                  _O = $2C
00000000 =0000002D                  _P = $2D
00000000 =0000002E                  _Q = $2E
00000000 =0000002F                  _R = $2F
00000000 =00000030                  _S = $30
00000000 =00000031                  _T = $31
00000000 =00000032                  _U = $32
00000000 =00000033                  _V = $33
00000000 =00000034                  _W = $34
00000000 =00000035                  _X = $35
00000000 =00000036                  _Y = $36
00000000 =00000037                  _Z = $37
00000000 =0000001A                  _st = $1A
00000000                            
00000000                            ; ===========================================================================
00000000                            ; variables and flags
00000000 =00C00004                  VDP_control_port				equ	$C00004
00000000 =FFFF0000                  Chunk_Table						equ	$FFFF0000
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot			equ	$FFFFC8FC
00000000 =FFFFD000                  MainCharacter					equ	$FFFFD000
00000000 =FFFFD000                  VSResults_HUD					equ	$FFFFD000
00000000 =FFFFC800                  VDP_Command_Buffer				equ	$FFFFC800
00000000 =FFFFF700                  Camera_X_pos					equ	$FFFFF700
00000000 =FFFFF704                  Camera_Y_pos					equ	$FFFFF704
00000000 =FFFFF708                  Camera_BG_X_pos					equ	$FFFFF708 ; word
00000000 =FFFFF70C                  Camera_BG_Y_pos 				equ $FFFFF70C	; word
00000000 =FFFFF710                  Camera_BG2_X_pos 				equ $FFFFF710	; word
00000000 =FFFFF714                  Camera_BG2_Y_pos 				equ $FFFFF714	; word
00000000 =FFFFF718                  Camera_BG3_X_pos 				equ $FFFFF718	; word
00000000 =FFFFF71C                  Camera_BG3_Y_pos 				equ $FFFFF71C	; word
00000000 =FFFFF600                  Game_Mode						equ	$FFFFF600
00000000 =FFFFF60C                  VDP_Reg1_val					equ	$FFFFF60C
00000000 =FFFFF605                  Ctrl_1_Press					equ	$FFFFF605
00000000 =FFFFF614                  Demo_Time_left					equ	$FFFFF614
00000000 =FFFFF61A                  Vscroll_Factor					equ	$FFFFF61A
00000000 =FFFFF62A                  Vint_routine					equ	$FFFFF62A
00000000 =FFFFF680                  Plc_Buffer						equ	$FFFFF680
00000000 =FFFFF711                  Level_started_flag				equ	$FFFFF711
00000000 =FFFFFF94                  Reverse_gravity_flag 			equ	$FFFFFF94
00000000 =FFFFFE0C                  Vint_runcount					equ	$FFFFFE0C
00000000 =FFFFFE10                  Current_ZoneAndAct				equ	$FFFFFE10
00000000 =FFFFFE10                  Current_Zone_2P					equ	$FFFFFE10
00000000 =FFFFFE11                  Current_Act						equ	$FFFFFE11
00000000 =FFFFFE11                  Current_Act_2P					equ	$FFFFFE11
00000000 =FFFFFE12                  Life_count						equ	$FFFFFE12
00000000 =FFFFFE16                  Current_Special_Stage			equ	$FFFFFE16
00000000 =FFFFFE18                  Continue_count					equ	$FFFFFE18
00000000 =FFFFFE19                  Super_Sonic_flag				equ $FFFFFE19
00000000 =FFFFFE20                  Ring_count						equ	$FFFFFE20
00000000 =FFFFFE22                  Timer							equ	$FFFFFE22
00000000 =FFFFFE22                  Timer_minute_word				equ	$FFFFFE22
00000000 =FFFFFE24                  Timer_second					equ	$FFFFFE24
00000000 =FFFFFE25                  Timer_frame						equ	$FFFFFE25
00000000 =FFFFFE26                  Score							equ	$FFFFFE26
00000000 =FFFFFE30                  Last_star_pole_hit				equ	$FFFFFE30
00000000 =FFFFFE32                  Saved_x_pos						equ	 $FFFFFE32
00000000 =FFFFFE34                  Saved_y_pos						equ	 $FFFFFE34
00000000 =FFFFFE36                  Saved_Ring_count				equ	 $FFFFFE36
00000000 =FFFFFE38                  Saved_Timer						equ	 $FFFFFE38
00000000 =FFFFFE3C                  Saved_art_tile					equ	 $FFFFFE3C
00000000 =FFFFFE3E                  Saved_layer						equ	 $FFFFFE3E
00000000 =FFFFFE57                  Emeralds_flag					equ	$FFFFFE57
00000000 =FFFFFEC2                  Game_Over_2P					equ	$FFFFFEC2
00000000 =FFFFFF80                  LevSel_HoldTimer				equ	$FFFFFF80
00000000                            ;Level_select_zone				equ	$FFFFFF81
00000000 =FFFFFF84                  Sound_test_sound				equ	$FFFFFF84
00000000 =FFFFFF74                  Options_menu_box				equ	$FFFFFF74
00000000 =FFFFFF90                  Results_Screen_2P				equ	$FFFFFF90
00000000 =FFFFFF92                  SS_Total_Won					equ	$FFFFFF92
00000000 =FFFFFF96                  Monitors_Broken					equ	$FFFFFF96
00000000 =FFFFFF98                  Rings_Collected					equ	$FFFFFF98
00000000 =FFFFFFA8                  Results_Data_2P					equ	$FFFFFFA8
00000000 =FFFFFFA8                  EHZ_Results_2P					equ	$FFFFFFA8
00000000 =FFFFFFAE                  MCZ_Results_2P					equ	$FFFFFFAE
00000000 =FFFFFFB4                  CNZ_Results_2P					equ	$FFFFFFB4
00000000 =FFFFFFBA                  SS_Results_2P					equ	$FFFFFFBA
00000000 =FFFFFFD0                  Level_select_flag				equ	$FFFFFFD0
00000000 =FFFFFFD1                  Slow_Motion_Flag				equ	$FFFFFFD1
00000000 =FFFFFFD4                  Correct_cheat_entries			equ	$FFFFFFD4 
00000000 =FFFFFFD6                  Correct_cheat_entries_2 		equ	$FFFFFFD6 ; for 14 continues or 7 emeralds codes
00000000 =FFFFFFDA                  Debug_Mode_Flag					equ	$FFFFFFDA
00000000 =FFFFFFF8                  Graphics_Flags					equ	$FFFFFFF8
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            	include	'#macros\equates.asm'
00000000                            
00000000                            ; Variaveis para selecionar qual letra dos Title Cards devem ser carregadas para
00000000                            ; a VRAM
00000000 =00000004                  TC_A                    equ  $0004
00000000 =00000404                  TC_B                    equ  $0404
00000000 =00000804                  TC_C                    equ  $0804
00000000 =00000C04                  TC_D                    equ  $0C04
00000000 =00001004                  TC_F                    equ  $1004
00000000 =00001404                  TC_G                    equ  $1404
00000000 =00001804                  TC_H                    equ  $1804
00000000 =00001C02                  TC_I                    equ  $1C02
00000000 =00001E04                  TC_J                    equ  $1E04
00000000 =00002204                  TC_K                    equ  $2204
00000000 =00002604                  TC_L                    equ  $2604
00000000 =00002A06                  TC_M                    equ  $2A06
00000000 =00003004                  TC_P                    equ  $3004
00000000 =00003404                  TC_Q                    equ  $3404
00000000 =00003804                  TC_R                    equ  $3804
00000000 =00003C04                  TC_S                    equ  $3C04
00000000 =00004004                  TC_T                    equ  $4004
00000000 =00004404                  TC_U                    equ  $4404
00000000 =00004804                  TC_V                    equ  $4804
00000000 =00004C06                  TC_W                    equ  $4C06
00000000 =00005204                  TC_X                    equ  $5204
00000000 =00005604                  TC_Y                    equ  $5604  
00000000 =00005A02                  TCpt                    equ  $5A02   ; "." 
00000000 =0000FFFF                  TC_Break                equ  $FFFF
00000000                            
00000000                            
00000000 =00000080                  Start	= $80
00000000 =00000070                  ABC	= $70
00000000 =00000040                  A	= $40
00000000 =00000020                  C	= $20
00000000 =00000010                  B	= $10
00000000 =00000008                  Right	= $08
00000000 =00000004                  Left	= $04
00000000 =00000002                  Down	= $02
00000000 =00000001                  Up	= $01
00000000 =000000CD                  Option_Select_Sfx equ $CD 
00000000                            
00000000                            
00000000 =FFFF8000                  Level_Layout 			equ $FFFF8000
00000000 =FFFF8080                  Level_BG_Layout 		equ $FFFF8080
00000000 =FFFF9000                  Block_Table 			equ $FFFF9000
00000000 =FFFFF796                  Collision_addr  		equ $FFFFF796
00000000 =FFFFFE10                  Zone_Id					equ $FFFFFE10	;	Check wich Zone should be activated now
00000000 =FFFFFE11                  Act_Id					equ $FFFFFE11	;	Check wich Act should be activated now (Act 1, Act 2, Act 3 or Act 4)
00000000 =FFFFFF88                  Game_Mode_Ram			equ $FFFFFF88	;	Game Mode/Difficulty (Original, Harder or Expert)
00000000 =FFFFFFB0                  PlaylistType			equ	$FFFFFFB0	;	Fixed Playlist Type (A, B or C)
00000000 =FFFFFF76                  Player_option			equ $FFFFFF76	;	Who you choose on Options? (0-> Sonic, 1-> Tails, 2-> Knuckles)
00000000 =FFFFFFAB                  Current_Character		equ $FFFFFFAB	;	0 -> Sonic, 1 -> Tails, 2 -> Knuckles
00000000 =FFFFFFF6                  Knuckles_Gliding_Flag	equ $FFFFFFF6	;	Address to store Knuckles Gliding information
00000000 =FFFFFFF7                  Unknown_Flag			equ $FFFFFFF7	;	Unknown Flag used on some climb functions on the Knuckles code
00000000                            
00000000                            ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00000000                            ; Equates section - Names for variables.
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; size variables - you'll get an informational error if you need to change these...
00000000                            ; they are all in units of bytes
00000000 =00FFF000                  Sound_Driver_RAM equ $FFF000
00000000 =00002F00                  Size_of_DAC_samples =		$2F00
00000000 =00006174                  Size_of_SEGA_sound =		$6174
00000000 =00000F64                  Size_of_Snd_driver_guess =	$F64 ; approximate post-compressed size of the Z80 sound driver
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; RAM variables
00000000 =FFFF0000                  RAM_Start		equ $FFFF0000 
00000000 =FFFF0000                  Metablock_Table		equ $FFFF0000 
00000000 =FFFF8000                  Level_Layout			equ $FFFF8000 
00000000 =FFFF9000                  Block_Table			equ $FFFF9000 
00000000 =FFFFAA00                  Decomp_Buffer			equ $FFFFAA00 
00000000 =FFFFAC00                  Sprite_Table_Input 		equ $FFFFAC00 ; in custom format before being converted and stored in Sprite_Table/Sprite_Table_2
00000000 =FFFFD000                  Object_RAM			equ $FFFFD000 ; through $FFFFD5FF
00000000 =FFFFD040                  Sidekick			equ $FFFFD040 ; second object (Tails in a Sonic and Tails game)
00000000 =FFFFD000                  Tails_Tails			equ $FFFFD000 ; address of the Tail's Tails object
00000000 =FFFFD1C0                  Sonic_Dust			equ $FFFFD1C0 
00000000 =FFFFD140                  Tails_Dust			equ $FFFFD140 
00000000                            
00000000 =FFFFD000                  PNT_Buffer			equ $FFFFD000 ; in special stage
00000000 =FFFFD600                  Primary_Collision		equ $FFFFD600 
00000000 =FFFFD700                  Horiz_Scroll_Buf_2		equ $FFFFD700 ; in special stage
00000000 =FFFFD900                  Secondary_Collision		equ $FFFFD900 
00000000 =FFFFDD00                  Sprite_Table_2		equ $FFFFDD00 ; Sprite attribute table buffer for the bottom split screen in 2-player mode
00000000 =FFFFCC00                  Horiz_Scroll_Buf		equ $FFFFCC00 
00000000 =FFFFCA00                  Sonic_Stat_Record_Buf		equ $FFFFCA00
00000000 =FFFFCB00                  Sonic_Pos_Record_Buf		equ $FFFFCB00
00000000 =FFFFE600                  Tails_Pos_Record_Buf		equ $FFFFE600
00000000 =FFFFCE00                  Ring_Positions		equ $FFFFCE00
00000000 =FFFFF700                  Camera_RAM			equ $FFFFF700
00000000                            ;Camera_X_pos			equ $FFFFEE00
00000000                            ;Camera_Y_pos			equ $FFFFEE04
00000000 =FFFFE726                  Camera_Max_Y_pos		equ $FFFFE726
00000000 =FFFFF728                  Camera_Min_X_pos		equ $FFFFF728
00000000 =FFFFF72A                  Camera_Max_X_pos		equ $FFFFF72A
00000000 =FFFFF72C                  Camera_Min_Y_pos		equ $FFFFF72C
00000000 =FFFFF72E                  Camera_Max_Y_pos_now		equ $FFFFF72E ; was "Camera_max_scroll_spd"...
00000000 =FFFFF7A8                  Sonic_Pos_Record_Index	equ $FFFFF7A8 ; into Sonic_Pos_Record_Buf and Sonic_Stat_Record_Buf
00000000 =FFFFF736                  Tails_Pos_Record_Index	equ $FFFFF736 ; into Tails_Pos_Record_Buf
00000000 =FFFFF73E                  Camera_Y_pos_bias		equ $FFFFF73E ; added to y position for lookup/lookdown, $60 is center
00000000 =FFFFEEDA                  Camera_Y_pos_bias_2P		equ $FFFFEEDA ; for Tails
00000000 =FFFFF742                  Dynamic_Resize_Routine	equ $FFFFF742
00000000 =FFFFEEF8                  Tails_Min_X_pos		equ $FFFFEEF8
00000000 =FFFFEEFA                  Tails_Max_X_pos		equ $FFFFEEFA
00000000 =FFFFEEFE                  Tails_Max_Y_pos		equ $FFFFEEFE
00000000                            
00000000 =FFFFFA00                  Underwater_palette_2 		equ $FFFFFA00 ; not sure what it's used for but it's only used when there's water
00000000 =FFFFFA80                  Underwater_palette 		equ $FFFFFA80 ; main palette for underwater parts of the screen
00000000 =FFFFFAE0                  Underwater_palette_line4 	equ $FFFFFAE0
00000000                            
00000000 =FFFFF600                  Game_Mode			equ $FFFFF600 ; 1 byte ; see GameModesArray (master level trigger, Mstr_Lvl_Trigger)
00000000 =FFFFF602                  Ctrl_1_Logical		equ $FFFFF602 ; 2 bytes
00000000 =FFFFF602                  Ctrl_1_Held_Logical		equ $FFFFF602 ; 1 byte
00000000 =FFFFF603                  Ctrl_1_Press_Logical		equ $FFFFF603 ; 1 byte
00000000 =FFFFF604                  Ctrl_1			equ $FFFFF604 ; 2 bytes
00000000 =FFFFF604                  Ctrl_1_Held			equ $FFFFF604 ; 1 byte ; (pressed and held were switched around before)
00000000 =FFFFF605                  Ctrl_1_Press			equ $FFFFF605 ; 1 byte
00000000 =FFFFF606                  Ctrl_2			equ $FFFFF606 ; 2 bytes
00000000 =FFFFF606                  Ctrl_2_Held			equ $FFFFF606 ; 1 byte
00000000 =FFFFF607                  Ctrl_2_Press			equ $FFFFF607 ; 1 byte
00000000 =FFFFF614                  Demo_Time_left		equ $FFFFF614 ; 2 bytes
00000000                            
00000000 =FFFFF624                  Hint_counter_reserve		equ $FFFFF624 ; Must contain a VDP command word, preferably a write to register $0A. Executed every V-INT.
00000000 =FFFFF62A                  Delay_Time			equ $FFFFF62A ; number of frames to delay the game
00000000 =FFFFF636                  RNG_seed			equ $FFFFF636 ; used for random number generation
00000000 =FFFFF63A                  Game_paused			equ $FFFFF63A
00000000 =FFFFF640                  DMA_data_thunk		equ $FFFFF640 ; Used as a RAM holder for the final DMA command word. Data will NOT be preserved across V-INTs, so consider this space reserved.
00000000                            
00000000 =FFFFF646                  Water_Level_1			equ $FFFFF646
00000000 =FFFFF648                  Water_Level_2			equ $FFFFF648
00000000 =FFFFF64A                  Water_Level_3			equ $FFFFF64A
00000000 =FFFFF64D                  Water_routine			equ $FFFFF64D
00000000 =FFFFF64E                  Water_move			equ $FFFFF64E
00000000 =FFFFF64C                  Water_on			equ $FFFFF64C ; is set based on Water_flag
00000000 =FFFFF650                  New_Water_Level		equ $FFFFF650
00000000 =FFFFF652                  Water_change_speed		equ $FFFFF652
00000000 =FFFFF65E                  Palette_frame_count		equ $FFFFF65E
00000000 =FFFFF65F                  Super_Sonic_palette		equ $FFFFF65F
00000000 =FFFFF66A                  Ctrl_2_Logical		equ $FFFFF66A ; 2 bytes
00000000 =FFFFF66A                  Ctrl_2_Held_Logical		equ $FFFFF66A ; 1 byte
00000000 =FFFFF66B                  Ctrl_2_Press_Logical		equ $FFFFF66B ; 1 byte
00000000 =FFFFC903                  Sonic_Look_delay_counter 	equ $FFFFC903 ; 2 bytes
00000000 =FFFFF66E                  Tails_Look_delay_counter 	equ $FFFFF66E ; 2 bytes
00000000 =FFFFF670                  Super_Sonic_frame_count	equ $FFFFF670
00000000 =FFFFF680                  Plc_Buffer			equ $FFFFF680 ; Pattern load queue
00000000                            
00000000 =FFFFF700                  Misc_Variables		equ $FFFFF700
00000000                            
00000000                            ; extra variables for the second player (CPU) in 1-player mode
00000000 =FFFFF702                  Tails_control_counter		equ $FFFFF702 ; how long until the CPU takes control
00000000 =FFFFF704                  Tails_respawn_counter		equ $FFFFF704
00000000 =FFFFF708                  Tails_CPU_routine	equ $FFFFF708
00000000 =FFFFF70A                  Tails_CPU_target_x		equ $FFFFF70A
00000000 =FFFFF70C                  Tails_CPU_target_y		equ $FFFFF70C
00000000 =FFFFF70E                  Tails_interact_ID		equ $FFFFF70E ; object ID of last object stood on
00000000                            
00000000 =FFFFF711                  Level_started_flag		equ $FFFFF711
00000000 =FFFFF71A                  CNZ_Bumper_routine		equ $FFFFF71A
00000000 =FFFFF745                  Dirty_flag			equ $FFFFF745 ; if whole screen needs to redraw
00000000 =FFFFFFA4                  Transforming_Flag equ	$FFFFFFA4
00000000 =FFFFF760                  Sonic_top_speed		equ $FFFFF760
00000000 =FFFFF762                  Sonic_acceleration		equ $FFFFF762
00000000 =FFFFF764                  Sonic_deceleration		equ $FFFFF764
00000000 =FFFFF76C                  Obj_placement_routine		equ $FFFFF76C
00000000 =FFFFF770                  Obj_load_addr_0		equ $FFFFF770
00000000 =FFFFF774                  Obj_load_addr_1		equ $FFFFF774
00000000 =FFFFF778                  Obj_load_addr_2		equ $FFFFF778
00000000 =FFFFF77C                  Obj_load_addr_3		equ $FFFFF77C
00000000 =FFFFF790                  Demo_button_index		equ $FFFFF790 ; index into button press demo data, for player 1
00000000 =FFFFF792                  Demo_press_counter		equ $FFFFF792 ; frames remaining until next button press, for player 1
00000000 =FFFFF732                  Demo_button_index_2P		equ $FFFFF732 ; index into button press demo data, for player 2
00000000 =FFFFF734                  Demo_press_counter_2P		equ $FFFFF734 ; frames remaining until next button press, for player 2
00000000 =FFFFF796                  Collision_addr		equ $FFFFF796
00000000 =FFFFF7AA                  Current_Boss_ID		equ $FFFFF7AA
00000000 =FFFFF7CC                  Control_Locked		equ $FFFFF7CC
00000000 =FFFFF7D0                  Chain_Bonus_counter		equ $FFFFF7D0 ; counts up when you destroy things that give points, resets when you touch the ground
00000000 =FFFFF7D2                  Bonus_Countdown_1		equ $FFFFF7D2 ; level results time bonus or special stage sonic ring bonus
00000000 =FFFFF7D4                  Bonus_Countdown_2		equ $FFFFF7D4 ; level results ring bonus or special stage tails ring bonus
00000000 =FFFFF7D6                  Update_Bonus_score		equ $FFFFF7D6
00000000 =FFFFF7DA                  Camera_X_pos_coarse		equ $FFFFF7DA ; (Camera_X_pos - 128) / 256
00000000                            
00000000 =FFFFF800                  Sprite_Table			equ $FFFFF800 ; Sprite attribute table buffer
00000000                            
00000000 =FFFFFB00                  Normal_palette		equ $FFFFFB00
00000000 =FFFFFB20                  Normal_palette_line2		equ $FFFFFB20
00000000 =FFFFFB40                  Normal_palette_line3		equ $FFFFFB40
00000000 =FFFFFB60                  Normal_palette_line4		equ $FFFFFB60
00000000 =FFFFFB80                  Second_palette		equ $FFFFFB80
00000000 =FFFFFBA0                  Second_palette_line2		equ $FFFFFBA0
00000000 =FFFFFBC0                  Second_palette_line3		equ $FFFFFBC0
00000000 =FFFFFBE0                  Second_palette_line4		equ $FFFFFBE0
00000000                            
00000000 =FFFFFC00                  Object_Respawn_Table		equ $FFFFFC00
00000000 =FFFFFE00                  System_Stack			equ $FFFFFE00
00000000 =FFFFFE02                  Level_Inactive_flag 		equ $FFFFFE02 ; (2 bytes)
00000000 =FFFFFE04                  Timer_frames			equ $FFFFFE04 ; (2 bytes)
00000000 =FFFFFE06                  Debug_object			equ $FFFFFE06
00000000 =FFFFFE08                  Debug_placement_mode		equ $FFFFFE08
00000000 =FFFFFE10                  Current_ZoneAndAct		equ $FFFFFE10 ; 2 bytes
00000000 =FFFFFE10                  Current_Zone			equ $FFFFFE10 ; 1 byte
00000000 =FFFFFE11                  Current_Act			equ $FFFFFE11 ; 1 byte
00000000 =FFFFFE12                  Life_count			equ $FFFFFE12 
00000000 =FFFFFE16                  Current_Special_Stage		equ $FFFFFE16
00000000 =FFFFFE18                  Continue_count		equ $FFFFFE18
00000000 =FFFFFE19                  Super_Sonic_flag		equ $FFFFFE19
00000000 =FFFFFE1A                  Time_Over_flag		equ $FFFFFE1A
00000000 =FFFFFE1B                  Extra_life_flags		equ $FFFFFE1B
00000000                            
00000000                            ; If set, the respective HUD element will be updated.
00000000 =FFFFFE1C                  Update_HUD_lives		equ $FFFFFE1C
00000000 =FFFFFE1D                  Update_HUD_rings		equ $FFFFFE1D
00000000 =FFFFFE1E                  Update_HUD_timer		equ $FFFFFE1E
00000000 =FFFFFE1F                  Update_HUD_score		equ $FFFFFE1F
00000000                            
00000000 =FFFFFE20                  Ring_count			equ $FFFFFE20 ; 2 bytes
00000000 =FFFFFE22                  Timer				equ $FFFFFE22 ; 4 bytes
00000000 =FFFFFE22                  Timer_minute_word		equ $FFFFFE22 ; 2 bytes
00000000 =FFFFFE23                  Timer_minute			equ $FFFFFE23 ; 1 byte
00000000 =FFFFFE24                  Timer_second			equ $FFFFFE24 ; 1 byte
00000000 =FFFFFE25                  Timer_centisecond		equ $FFFFFE25 ; 1 byte
00000000 =FFFFFE26                  Score				equ $FFFFFE26 ; 4 bytes
00000000 =FFFFFE30                  Last_star_pole_hit		equ $FFFFFE30 ; 1 byte -- max activated starpole ID in this act
00000000                            
00000000 =FFFFFE31                  Saved_Last_star_pole_hit	equ $FFFFFE31
00000000 =FFFFFE32                  Saved_x_pos			equ $FFFFFE32
00000000 =FFFFFE34                  Saved_y_pos			equ $FFFFFE34
00000000 =FFFFFE36                  Saved_Ring_count		equ $FFFFFE36
00000000 =FFFFFE38                  Saved_Timer			equ $FFFFFE38
00000000 =FFFFFE3C                  Saved_art_tile		equ $FFFFFE3C
00000000 =FFFFFE3E                  Saved_layer			equ $FFFFFE3E
00000000 =FFFFFE40                  Saved_Camera_X_pos		equ $FFFFFE40
00000000 =FFFFFE42                  Saved_Camera_Y_pos		equ $FFFFFE42
00000000 =FFFFFE50                  Saved_Water_Level		equ $FFFFFE50
00000000 =FFFFFE52                  Saved_Water_routine		equ $FFFFFE52
00000000 =FFFFFE53                  Saved_Water_move		equ $FFFFFE53
00000000 =FFFFFE54                  Saved_Extra_life_flags	equ $FFFFFE54
00000000 =FFFFFE55                  Saved_Extra_life_flags_2P	equ $FFFFFE55
00000000 =FFFFFE56                  Saved_Camera_Max_Y_pos	equ $FFFFFE56
00000000 =FFFFFE58                  Saved_Dynamic_Resize_Routine	equ $FFFFFE58
00000000                            
00000000 =FFFFFEA0                  Logspike_anim_counter		equ $FFFFFEA0
00000000 =FFFFFEA1                  Logspike_anim_frame		equ $FFFFFEA1
00000000 =FFFFFEA2                  Rings_anim_counter		equ $FFFFFEA2
00000000 =FFFFFEA3                  Rings_anim_frame		equ $FFFFFEA3
00000000 =FFFFFEA4                  Unknown_anim_counter		equ $FFFFFEA4 ; I think this was $FFFFFEC4 in the alpha
00000000 =FFFFFEA5                  Unknown_anim_frame		equ $FFFFFEA5
00000000 =FFFFFEA6                  Ring_spill_anim_counter	equ $FFFFFEA6 ; scattered rings
00000000 =FFFFFEA7                  Ring_spill_anim_frame		equ $FFFFFEA7
00000000 =FFFFFEA8                  Ring_spill_anim_accum		equ $FFFFFEA8
00000000                            
00000000                            ; values for the second player (some of these only apply to 2-player games)
00000000 =FFFFFEC0                  Tails_top_speed		equ $FFFFFEC0 ; Tails_max_vel
00000000 =FFFFFEC2                  Tails_acceleration		equ $FFFFFEC2
00000000 =FFFFFEC4                  Tails_deceleration		equ $FFFFFEC4
00000000 =FFFFFEC6                  Life_count_2P			equ $FFFFFEC6
00000000 =FFFFFEC7                  Extra_life_flags_2P		equ $FFFFFEC7
00000000 =FFFFFEC8                  Update_HUD_lives_2P		equ $FFFFFEC8
00000000 =FFFFFEC9                  Update_HUD_rings_2P		equ $FFFFFEC9
00000000 =FFFFFECA                  Update_HUD_timer_2P		equ $FFFFFECA
00000000 =FFFFFECB                  Update_HUD_score_2P		equ $FFFFFECB ; mostly unused
00000000 =FFFFFECC                  Time_Over_flag_2P		equ $FFFFFECC
00000000 =FFFFFED0                  Ring_count_2P			equ $FFFFFED0
00000000 =FFFFFED2                  Timer_2P			equ $FFFFFED2 ; 4 bytes
00000000 =FFFFFED2                  Timer_minute_word_2P		equ $FFFFFED2 ; 2 bytes
00000000 =FFFFFED3                  Timer_minute_2P		equ $FFFFFED3 ; 1 byte
00000000 =FFFFFED4                  Timer_second_2P		equ $FFFFFED4 ; 1 byte
00000000 =FFFFFED5                  Timer_centisecond_2P		equ $FFFFFED5 ; 1 byte
00000000 =FFFFFED6                  Score_2P			equ $FFFFFED6
00000000 =FFFFFEE0                  Last_star_pole_hit_2P		equ $FFFFFEE0
00000000                            
00000000 =FFFFFEE1                  Saved_Last_star_pole_hit_2P	equ $FFFFFEE1
00000000 =FFFFFEE2                  Saved_x_pos_2P		equ $FFFFFEE2
00000000 =FFFFFEE4                  Saved_y_pos_2P		equ $FFFFFEE4
00000000 =FFFFFEE6                  Saved_Ring_count_2P		equ $FFFFFEE6
00000000 =FFFFFEE8                  Saved_Timer_2P		equ $FFFFFEE8
00000000 =FFFFFEEC                  Saved_art_tile_2P		equ $FFFFFEEC
00000000 =FFFFFEEE                  Saved_layer_2P		equ $FFFFFEEE
00000000                            
00000000 =FFFFFF74                  Two_player_items		equ $FFFFFF74
00000000 =FFFFFF82                  Level_select_zone		equ $FFFFFF82
00000000 =FFFFFF84                  Sound_test_sound		equ $FFFFFF84
00000000 =FFFFFF86                  Title_screen_option		equ $FFFFFF86
00000000 =FFFFFF8A                  Two_player_mode_copy		equ $FFFFFF8A
00000000 =FFFFFF90                  Level_Music			equ $FFFFFF90
00000000 =FFFFFFB0                  Got_Emerald			equ $FFFFFFB0
00000000 =FFFFFFB1                  Emerald_count			equ $FFFFFFB1
00000000 =FFFFFFB2                  Got_Emeralds_array		equ $FFFFFFB2 ; 7 bytes
00000000 =FFFFFFC0                  Next_Extra_life_score		equ $FFFFFFC0
00000000 =FFFFFFC4                  Next_Extra_life_score_2P	equ $FFFFFFC4
00000000 =FFFFFFC8                  Level_Has_Signpost		equ $FFFFFFC8 ; 1 byte ; 1 = signpost, 0 = boss or nothing
00000000 =FFFFFFD4                  Correct_cheat_entries		equ $FFFFFFD4
00000000 =FFFFFFD6                  Correct_cheat_entries_2	equ $FFFFFFD6 ; for 14 continues or 7 emeralds codes
00000000 =FFFFFF88                  Two_player_mode		equ $FFFFFF88 ; flag (0 for main game)
00000000                            
00000000                            ; Values in these variables are passed to the sound driver during V-INT.
00000000                            ; They use a playlist index, not a sound test index.
00000000 =00FFF003                  Music_Pause   = Sound_Driver_RAM+$003
00000000 =00FFF00A                  Music_to_play = Sound_Driver_RAM+$00A
00000000 =00FFF00B                  SFX_to_play   = Sound_Driver_RAM+$00B ; normal
00000000 =00FFF00C                  SFX_to_play_2 = Sound_Driver_RAM+$00C ; alternating stereo
00000000 =00FFF00C                  Music_to_play_2	= Sound_Driver_RAM+$00C ; alternate (higher priority?) slot
00000000                            
00000000 =FFFFFFF0                  Demo_mode_flag		equ $FFFFFFF0 ; 1 if a demo is playing (2 bytes)
00000000 =FFFFFFF2                  Demo_number			equ $FFFFFFF2 ; which demo will play next (2 bytes)
00000000 =FFFFFFF8                  Graphics_Flags		equ $FFFFFFF8 ; misc. bitfield
00000000 =FFFFFFFC                  Checksum_fourcc		equ $FFFFFFFC ; (4 bytes)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; VDP addressses
00000000 =00C00000                  VDP_data_port =			$C00000 ; (8=r/w, 16=r/w)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Z80 addresses
00000000 =00A00000                  Z80_RAM =			$A00000 ; start of Z80 RAM
00000000 =00A02000                  Z80_RAM_End =			$A02000 ; end of non-reserved Z80 RAM
00000000 =00A10001                  Z80_Version =			$A10001
00000000 =00A10002                  Z80_Port_1_Data =		$A10002
00000000 =00A10008                  Z80_Port_1_Control =		$A10008
00000000 =00A1000A                  Z80_Port_2_Control =		$A1000A
00000000 =00A1000C                  Z80_Expansion_Control =		$A1000C
00000000 =00A11100                  Z80_Bus_Request =		$A11100
00000000 =00A11200                  Z80_Reset =			$A11200
00000000                            
00000000 =00A14000                  Security_Addr =			$A14000
00000000 =00A14000                  Security_Addr =			$A14000
00000000                            	include	'#macros\asm68kfix.asm'
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            	endm
00000000                            	include	'#macros\misc.asm'
00000000 =FFFFFFBC                  Water_Flag                    equ       $FFFFFFBC  ; if the level has water
00000000                            ; Extracted from S1hackingStudio by VladikComper
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to set VRAM write access
00000000                            ; Arguments:	1 - raw VRAM offset
00000000                            ;		2 - register to write access bitfield in (Optional)
00000000                            ; -------------------------------------------------------------
00000000                            vram	macro
00000000                            	if (narg=1)
00000000                            		move.l	#($40000000+((\1&$3FFF)<<16)+((\1&$C000)>>14)),($C00004).l
00000000                            	else
00000000                            		move.l	#($40000000+((\1&$3FFF)<<16)+((\1&$C000)>>14)),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to raise an error in vectors
00000000                            ; Arguments:	1 - error number
00000000                            ;		2 - branch location
00000000                            ;		3 - if exists, adds 2 to stack pointer
00000000                            ; -------------------------------------------------------------
00000000                            raise	macro
00000000                            	move.b	#\1,($FFFFFC44).w
00000000                            	if narg=3
00000000                            		addq.l	#2,2(sp)
00000000                            	endc
00000000                            	bra.s	\2
00000000                            	endm
00000000                            	endm
00000000                            	include	'(Mercury) Fixes.asm'
00000000                            ; ELECTIVE MODS
00000000                            ; ================================================================================
00000000                            
00000000 =00000000                  Revision: = 0
00000000                            ; Name: Wall Jump
00000000                            ; Function: Gives Sonic a Wall Jump ability
00000000                            ; Date: 2011-02-02 (Feb), 2011-02-03 (Feb), 2011-02-05 (Feb)
00000000                            ; Depends On: Constants, Macros
00000000 =00000001                  WallJumpActive: = 1
00000000                            
00000000                            ; Name: Move Lamppost VRAM
00000000                            ; Function: Moves the Lamppost tiles in VRAM to allow for things like dust or the Insta-Shield to fit instead.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  MoveLamppostVRAM: = 1
00000000                            
00000000                            ; Name: UseDMAQueue
00000000                            ; Function: Uses a DMA queue to load Sonic's art, freeing RAM and allowing Spin Dash dust or the Insta-Shield to function.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by (various)
00000000 =00000001                  UseDMAQueue: = 1
00000000                            
00000000                            ; Name: Spin Dash
00000000                            ; Function: Enables the Sonic 2 Spin Dash
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by (various)
00000000 =00000001                  SpinDashActive: = 1
00000000 =00000001                  	SpinDashDustActive: = SpinDashActive*MoveLamppostVRAM*UseDMAQueue*1	; activates animated dust sprite when Spin Dashing
00000000 =00000001                  	SpinDashSFXActive: = SpinDashActive*1	; activates the correct Spin Dash SFX instead of the roll sound
00000000 =00000001                  	SpinDashCancel: = SpinDashActive*1	; makes Sonic stop Spin Dashing if the A/B/C button is let up for long enough
00000000 =00000001                  	SpinDashNoRevDown: = SpinDashActive*1	; makes the Spin Dash not rev down as long as A/B/C button is held down
00000000 =00000001                  	SpinDashCameraLag: = SpinDashActive*1	; makes the camera lag behind when Sonic launches
00000000                            ; Notes: You should also apply the following fixes to avoid bugs: Walking In Air Fix, Pushing While Walking Fix, High Speed Camera Fix, Caterkiller Fix
00000000                            
00000000                            ; Name: Dash CD
00000000                            ; Function: Enables the Sonic CD Dash (aka Super Peel Out).
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  DashCDActive: = 1
00000000                            
00000000                            ; Name: Balance CD
00000000                            ; Function: Uses the Sonic CD balancing sprites (forward and back) instead of Sonic 1's.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  BalanceCDActive: = 1
00000000                            
00000000                            ; Name: Insta-Shield
00000000                            ; Function: Enables the Sonic 3/K Insta-Shield.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000000                  InstaShieldActive: = 0
00000000                            ; Notes: Not yet functional
00000000                            
00000000                            ; Name: Simple Cheat Entry
00000000                            ; Function: Enters Level Select, Debug Mode, Slow Mo, and extended Sound Test cheats automatically upon U,D,L,R,A,Start
00000000                            ; Date: 2011-02-05 (Feb)
00000000 =00000001                  SimpleCheatEntry: = 1
00000000                            
00000000                            ; Name: Monitor Art Optimise
00000000                            ; Function: Shuffles the Monitor Art in order to free 8 free tiles (useful for modding HUD)
00000000                            ; Date: 2011-02-09 (Feb)
00000000 =00000001                  MonitorArtOptimise: = 1
00000000                            
00000000                            ; Name: HUD Centiseconds
00000000                            ; Function: Adds Sonic CD-style centiseconds to the HUD
00000000                            ; Date: 2011-02-05 (Feb), 2011-02-07 (Feb), 2011-02-09 (Feb)
00000000 =00000001                  HUDCentiseconds: = MonitorArtOptimise*1
00000000                            
00000000                            ; Name: Chunks In ROM
00000000                            ; Function: Loads Chunks (256x256) directly from ROM, freeing a huge amount of RAM ($0000-$A3FF)
00000000                            ; Date: 2011-02-05 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by FraGag
00000000 =00000001                  ChunksInROM: = 1
00000000                            
00000000                            ; Name: Blocks In ROM
00000000                            ; Function: Similar to "Chunks In ROM" only with Blocks (16x16), freeing a huge amount of RAM ($B000-$C7FF)
00000000                            ; Date: 2011-04-19 (Apr)
00000000 =00000001                  BlocksInROM: = 1
00000000                            
00000000                            ; Name: HUD Has Leading Zeroes
00000000                            ; Function: Gives Rings, Score and Lives leading zeroes (i.e. 001 as opposed to 1)
00000000                            ; Date: 2011-02-09 (Feb)
00000000                            ; Thanks to: Markey Jester
00000000 =00000000                  HUDHasLeadingZeroes: = 0
00000000                            
00000000                            ; Name: TIME/RINGS Flash Fix
00000000                            ; Function: Makes TIME and RINGS words in the HUD flash under the correct circumstances
00000000                            ; Date: 2011-02-07 (Feb), 2011-02-08 (Feb)
00000000                            ; Thanks To: 
00000000 =00000001                  TimeRingsFlashFix: = 1
00000000 =00000001                  	TimeRingsFlashFixNotRed: = TimeRingsFlashFix*1	; when true, "TIME" and "RINGS" will flash on and off instead of flashing red. Useful when changing palettes.
00000000                            
00000000                            ; Name: Dynamic Special Stage Walls 
00000000                            ; Function: Dynamically loads the wall art in the Special Stages to free VRAM (for things like the HUD)
00000000                            ; Date: 2011-02-05 (Feb), 2011-02-06 (Feb), 2011-02-07 (Feb)
00000000 =00000000                  DynamicSpecialStageWalls: = 0
00000000                            
00000000                            ; Name: HUD In Special Stage
00000000                            ; Function: Adds HUD to Special Stage. Also useful for adding a decreasing time limit to Special Stage
00000000                            ; Date: 2011-02-05 (Feb), 2011-02-06 (Feb), 2011-02-07 (Feb), 2011-02-08 (Feb)
00000000                            ; Depends On: Dynamic Special Stage Walls
00000000 =00000000                  HUDInSpecialStage: = DynamicSpecialStageWalls*1
00000000 =00000000                  	HUDInSpecialStageType: = 0	; 0=normal; 1=score not shown; 2=score & time not shown; 3=rings only
00000000                            	
00000000                            ; Name: Time Limit in Special Stage
00000000                            ; Function: If HUDInSpecialStage is active, the Special Stage has a working 9:59 time limit anyway, but this makes it a decreasing one with custom values
00000000                            ; Date: 2011-02-08 (Feb)
00000000                            ; Depends On: Dynamic Special Stage Walls, HUD In Special Stage, Time Rings Flash Fix
00000000 =00000000                  TimeLimitInSpecialStage: = HUDInSpecialStage*TimeRingsFlashFix*1
00000000 =00001E00                  	TimeLimitInSpecialStagePinch: = $00001E00	; "pinch" threshold that time must reach in order to trigger "TIME" to flash. Format: $000MSSCC
00000000 =00010000                  	TimeLimitInSpecialStageStart: = $00010000	; time on the clock to start with when Special Stage is entered. Format: $000MSSCC
00000000                            		;IMPORTANT! TimeLimitInSpecialStageStart must always end in 00,
00000000                            
00000000                            ; Name: Title Screen Palette Fix
00000000                            ; Function: Uses the proper GHZ palette on the Title Screen
00000000                            ; Date: 2011-02-07 (Feb)
00000000 =00000001                  TitleScreenPaletteFix: = 1
00000000                            
00000000                            ; Name: Special Stage Jump Fix
00000000                            ; Function: Gives Sonic variable jump height in the Special Stage to be more fair and consistent with the rest of the game
00000000                            ; Date: 2011-02-07 (Feb)
00000000 =00000001                  SpecialStageJumpFix: = 1
00000000                            
00000000                            ; Name: Warm Palette Mod
00000000                            ; Function: Gives the game a Chaotix-like shine that helps mask the palette changes and update the look
00000000                            ; Date: 2011-02-07 (Feb)
00000000 =00000000                  WarmPaletteMod: = 0
00000000                            ; Notes: Not yet functional.
00000000                            
00000000                            ; Name: Shield Art Mod
00000000                            ; Function: Attempts to improve the look of the shield.
00000000                            ; Date: 2011-02-12 (Feb)
00000000 =00000001                  ShieldArtMod: = 1	; set to 1 to simply make the mirroring less obvious; set to 2 to make it solid, smooth and more like Chaotix's shield art.
00000000                            	; It's not recommended to set this to 2 unless Warm Palette Mod is on.
00000000                            
00000000                            ; Name: Sonic CD Roll Jump
00000000                            ; Function: Makes the Roll Jump work like Sonic CD (Sonic can still control his horizontal trajectory). Frees up a status bit for Sonic.
00000000                            ; Date: 2011-02-09 (Feb)
00000000 =00000001                  SonicCDRollJump: = 1
00000000                            
00000000                            ; Name: Rebound Mod
00000000                            ; Function: Makes rebounding from enemies/monitors after rolling off a cliff onto them function the same as if they were jumped on - the rebound is cut short if the jump button is released.
00000000                            ; Date: 2011-02-12 (Feb)
00000000 =00000001                  ReboundMod: = 1
00000000                            
00000000                            ; Name: Enable Press Start Button Message
00000000                            ; Function: Makes the "Press Start Button" message appear correctly on the Title Screen
00000000                            ; Date: 2011-02-09 (Feb)
00000000 =00000001                  EnablePSBMessage: = 1
00000000                            
00000000                            ; Name: Limit LZ Block Rising Speed
00000000                            ; Function: Limits the rising speed of blocks in LZ so that Sonic can jump off them more comfortably.
00000000                            ; Date: 2011-02-10 (Feb)
00000000 =00000001                  LimitLZBlockRisingSpeed: = 1
00000000                            
00000000                            ; Name: Speed Up Score Tally
00000000                            ; Function: Allows the player to hold a button to speed up the score tally
00000000                            ; Date: 2011-02-10 (Feb)
00000000 =00000001                  SpeedUpScoreTally: = 1
00000000                            
00000000                            ; Name: Spike SFX Fix
00000000                            ; Function: Makes the proper sound effect play when Sonic is harmed by Spikes/LZ Harpoons.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  SpikeSFXFix: = 1
00000000                            
00000000                            ; Name: Rolling Turn Around Fix
00000000                            ; Function: Prevents Sonic from turning around while rolling (which without this fix could be abused to roll in place forever).
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  RollingTurnAroundFix: = 1
00000000                            
00000000                            ; Name: Scroll Delay
00000000                            ; Function: Adds a delay before the screen begins to scroll when looking up and down. This is essential if adding the Spin Dash or Super Peel Out.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by shobiz
00000000 =00000001                  ScrollDelay: = 1
00000000 =00000078                  	ScrollDelayTime: = 120	; number of steps before the screen starts to scroll.
00000000                            	
00000000                            ; Name: Look Shift Fix
00000000                            ; Function: Fixing the looking up/down camera shift so that it stops at zone boundaries, preventing a delay when returning to the neutral position.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  LookShiftFix: = 1
00000000                            
00000000                            ; Name: Spike Fix
00000000                            ; Function: Prevents spikes from harming Sonic while he's flashing.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by FraGag
00000000 =00000001                  SpikeFix: = 1
00000000                            
00000000                            ; Name: Caterkiller Fix
00000000                            ; Function: Makes it safe to roll into the caterkiller from the front at high speeds without fear of being hurt some times and not others.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  CaterkillerFix: = 1
00000000                            
00000000                            ; Name: Custom Demo Delay
00000000                            ; Function: Makes it possible to customise how long the Title Screen waits before going to a demo.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000001                  CustomDemoDelay: = 1
00000000 =00000280                  	CustomDemoDelayTime: = $280	; delay until demo is played; default is $178; use -1 for never (will return to Sega Screen eventually, though).
00000000                            
00000000                            ; Name: Orbinaut Animation Tweak
00000000                            ; Function: Makes Orbinaut "notice" Sonic at a closer range so that it's more likely to happen onscreen, and "get angry" quicker.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000001                  OrbinautAnimationTweak: = 1
00000000 =00000080                  	OrbinautAnimationTweakRange: = $80	; horizontal range in pixels at which Sonic is noticed by the Orbinaut
00000000 =00000008                  	OrbinautAnimationTweakSpeed: = $8	; animation speed of the Orbinaut's "getting angry" animation
00000000                            	
00000000                            ; Name: SLZ Orbinaut Behaviour Mod
00000000                            ; Function: Makes the SLZ Orbinauts beatable by giving them behaviour similar to Sonic 4's.
00000000                            ; Date: 2011-03-06 (Mar)
00000000 =00000001                  SLZOrbinautBehaviourMod: = 1
00000000                            	
00000000                            ; Name: Newtron Behaviour Tweak
00000000                            ; Function: Slightly alters the behaviour of Newtrons.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000003                  NewtronBehaviourTweak: = 3
00000000                            	; set to 1 to make red-blue Newtrons vulnerable after they finish appearing but before they land
00000000                            	; set to 2 to make yellow-green Newtrons reappear once Sonic leaves the vicinity and returns
00000000                            	; set to 3 for both of the above
00000000                            
00000000                            ; Name: Lost Rings Flash
00000000                            ; Function: Makes Lost Rings flash before they disappear.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000001                  LostRingsFlash: = 1
00000000 =00000050                  	LostRingsFlashTime: = 80	; number of steps of life the rings need to have left before they start to flash.
00000000                            	
00000000                            ; Name: FZ Boss Invuln Mod
00000000                            ; Function: Allows you to customise the number of steps the FZ Boss's invulnerability lasts.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000001                  FZBossInvulnMod: = 1
00000000 =00000020                  	FZBossInvulnModTime: = $20	; default is $64.
00000000                            
00000000                            ; Name: Disable Speed Cap
00000000                            ; Function: Disables the speed cap in the air and on the ground.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000003                  DisableSpeedCap: = 3
00000000                            	; set to 1 to remove ground speed cap
00000000                            	; set to 2 to remove air speed cap
00000000                            	; set to 3 for both of the above
00000000                            	
00000000                            ; Name: Giant Ring Art Loads With End Sign
00000000                            ; Function: Makes the Giant Ring art load when End Sign's does, avoiding some issues.
00000000                            ; Date: 2011-03-03 (Mar)
00000000                            ; Depends On: MZ2 Layout Fix
00000000 =00000001                  GiantRingArtLoadsWithEndSign: = 1
00000000                            
00000000                            ; Name: Special Stage Index Increases Only If Won
00000000                            ; Function: Makes the Special Stage index not increase when you fail the stage, allowing you to practise the stages more easily because next time you enter one it'll be the same one you failed last time.
00000000                            ; Date: 2011-03-09 (Mar)
00000000 =00000001                  SpecialStageIndexIncreasesOnlyIfWon: = 1
00000000                            
00000000                            ; Name: Special Stages Still Appear With All Emeralds
00000000                            ; Function: Makes the Special Stages still accessible even once all emeralds are collected. Of course more emeralds aren't possible to be collected; they are replaced with Continues, making use of the unused 1-up item in the Special Stages.
00000000                            ; Date: 2011-03-09 (Mar)
00000000 =00000001                  SpecialStagesStillAppearWithAllEmeralds: = 1
00000000                            	
00000000                            ; Name: Giant Rings In SBZ
00000000                            ; Function: Adds Giant Rings (and therefore extra shots at the Special Stage) to SBZ1 and SBZ2.
00000000                            ; Date: 2011-03-03 (Mar)
00000000                            ; Modifies: levels\sbz2.bin, objpos\sbz1.bin, objpos\sbz1 (JP1).bin, objpos\sbz2.bin
00000000 =00000001                  GiantRingsInSBZ: = GiantRingArtLoadsWithEndSign*1
00000000 =000004DA                  	GiantRingsInSBZArtLoc1: = $4DA	; originally $400, this is where the Giant Ring art is loaded into VRAM
00000000 =00000568                  	GiantRingsInSBZArtLoc2: = $568	; originally $518, this is where the SBZ Crumbling Floor art is loaded into VRAM
00000000 =000003A0                  	GiantRingsInSBZArtLoc3: = $3A0	; originally $400, this is where the SBZ Eggman art is loaded into VRAM
00000000 =000004C0                  	GiantRingsInSBZArtLoc4: = $4C0	; originally $4A0, this is where the SBZ Eggman Switch art is loaded into VRAM
00000000                            
00000000                            ; Name: Padding Active
00000000                            ; Function: Pads the ROM with a value until it reaches a certain number of megs
00000000                            ; Date: 2011-02-27 (Feb)
00000000 =00000001                  PaddingActive: = 1
00000000 =000000FF                  	PaddingValue: = $FF
00000000 =00000001                  	PaddingMegs: = 1
00000000                            	
00000000                            ; Name: Quarterloop Fix
00000000                            ; Function: Makes Sonic behave better when running back down quarterloops by using Sonic 2's code.
00000000                            ; Date: 2011-03-15 (Mar)
00000000 =00000001                  QuarterloopFix: = 1
00000000                            
00000000                            ; Name: Magnetic Rings
00000000                            ; Function: Gives Rings ability to be attracted to Sonic while he has a Shield.
00000000                            ; Date: 2011-03-24 (Mar)
00000000 =00000001                  MagneticRings: = 1
00000000                            
00000000                            ; Name:  Rings Bounce At Zone Bottom
00000000                            ; Function: Rings will bounce off of the bottom boundary of the Zone, making SYZ boss more fair.
00000000                            ; Date: 2011-04-19 (Apr)
00000000 =00000001                  RingsBounceAtZoneBottom: = 1
00000000                            
00000000                            ; PERMANENT MODS
00000000                            ; ================================================================================
00000000                            
00000000                            ; Name: Continue Sonic Art Fix
00000000                            ; Function: Fixes some incorrect pixels in Sonic's Continue screen sprite.
00000000                            ; Date: 2011-02-02 (Feb)
00000000                            ; Modifies: artnem\Continue Screen Sonic.bin
00000000                            
00000000                            ; Name: GHZ3 Wall Solidity
00000000                            ; Function: Fixes a wall object in GHZ3 after the Lamppost that was set to be solid. (It was, of course, solid for a reason: to fix a bug with the platform right next to it. However, the platform could be moved to the right by 16 pixels to solve the problem, too, so that's what I did.)
00000000                            ; Date: 2011-02-02 (Feb)
00000000                            ; Modifies: objpos\GHZ3 (JP1).bin
00000000                            
00000000                            ; Name: Special Stage Cloud Fix
00000000                            ; Function: Fixed the base special stage palette so that the clouds wouldn't flicker when it first fades in, plus altered the fading palette to not have ugly clashing purples
00000000                            ; Date: 2011-02-06 (Feb)
00000000                            ; Modifies: palette\Cycle - Special Stage 1.bin, palette\Special Stage.bin
00000000                            
00000000                            ; Name: Roller Art Fix
00000000                            ; Function: Fixes garbled Roller tiles in SYZ
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: inc\Pattern Load Cues.bin
00000000                            
00000000                            ; Name: Sonic Shoe Stripe Fix
00000000                            ; Function: Adds stripe to Sonic's shoe for the sprites it's missing in (using Sonic 2's tiles)
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: artunc\Sonic.bin
00000000                            
00000000                            ; Name: Sonic Roll Frame Fix
00000000                            ; Function: Changes Sonic's frame immediately when he rolls up in order to fix flickering while in S-Tunnels (and potentially elsewhere)
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: _incObj\Sonic Roll.asm
00000000                            
00000000                            ; Name: Hedgehog E Fix
00000000                            ; Function: Very minor pixel edit to "THE HEDGEHOG" on Title Screen to fix the inconsistent E's
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: artnem\Title Screen Foreground.bin
00000000                            
00000000                            ; Name: GHZ2 Spring Fix
00000000                            ; Function: Fixes a backward Spring in GHZ2
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: objpos\GHZ2.bin
00000000                            
00000000                            ; Name: Top Boundary Fix
00000000                            ; Function: Prevents Sonic from dying when he passes the top boundary while hurt
00000000                            ; Date: 2011-02-08 (Feb)
00000000                            ; Modifies: _incObj\Sonic (part 2).asm
00000000                            
00000000                            ; Name: Hurt Splash Fix
00000000                            ; Function: Fixes the missing splash when Sonic hits the water surface while hurt
00000000                            ; Date: 2011-02-08 (Feb)
00000000                            ; Modifies: _incObj\Sonic (part 2).asm
00000000                            
00000000                            ; Name: Pushing While Walking Fix
00000000                            ; Function: Fixes the bug that makes Sonic use his pushing animation while walking away from walls
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Modifies: _incObj\Sonic Animate.asm
00000000                            
00000000                            ; Name: Walking In Air Fix
00000000                            ; Function: Fixes the bug that makes Sonic incorrectly use his walking animation when near solids.
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Modifies: _incObj\sub SolidObject.asm, _incObj\26 Monitor.asm, sonic.asm
00000000                            
00000000                            ; Name: Screen Scroll While Rolling Fix
00000000                            ; Function: Fixes the bug that prevents the screen from scrolling back to neutral while Sonic is rolling.
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Modifies: _incObj\Sonic RollSpeed.asm
00000000                            
00000000                            ; Name: Ducking Size Fix
00000000                            ; Function: Makes Sonic's hitbox the correct size in regards to solids when he is ducking
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Modifies: _incObj\sub SolidObject.asm, _incObj\sub ReactToItem.asm, sonic.asm
00000000                            
00000000                            ; Name: Exit DLE In Special Stage And Title
00000000                            ; Function: Prevents the DLE from running while on the Title Screen and in the Special Stage, preventing serious problems.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _inc\DynamicLevelEvents.asm
00000000                            
00000000                            ; Name: Clear Control Lock When Jump
00000000                            ; Function: Clears control lock when Sonic jumps, preventing it from lingering when he lands again and causing a frustrating lag in input.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\Sonic Jump.asm
00000000                            
00000000                            ; Name: Debug Improvements
00000000                            ; Function: Makes a slew of improvements to Debug Mode. Sonic's speed and "atop object" flag are cleared when turning into an item, plus rings/monitors can be placed even after collecting one.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\Debug Mode.asm
00000000                            
00000000                            ; Name: SBZ3 Obj Fixes
00000000                            ; Function: Fixes the missing platform from SBZ3 and also prevents Sonic from falling through the floor near beginning of the level.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: objpos\SBZ3.bin
00000000                            
00000000                            ; Name: SBZ3 Button PLC Fix
00000000                            ; Function: Trades the order in which the harpoon and button load their art in order to prevent garbled button art at SBZ3 start.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _inc\Pattern Load Cues.asm
00000000                            
00000000                            ; Name: Demo Playback Fix
00000000                            ; Function: Fixes an issue that makes demo playback interpret the button being held for more than one frame as continual new presses of the button.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _inc\MoveSonicInDemo.asm
00000000                            ; Thanks To: FraGag
00000000                            
00000000                            ; Name: Hidden Bonus Points Fix
00000000                            ; Function: Makes the 100pt Hidden Bonuses actually give Sonic 100pts.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\7D Hidden Bonuses.asm
00000000                            ; Thanks To: Sonic Retro How-To by 1337Rooster
00000000                            
00000000                            ; Name: Speed Shoes Work Underwater
00000000                            ; Function: Makes Speed Shoes work correctly when underwater. It's now safe to place them in LZ/SBZ3.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\2E Monitor Content Power-Up.asm, _incObj\Sonic Display.asm, _incObj\Sonic Water.asm
00000000                            
00000000                            ; Name: Sega Sound Fix
00000000                            ; Function: Fixes the Sega sound at game start so that it won't garble when code is added to the ROM. Also allows the player to skip it with the Start Button.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: sonic.asm
00000000                            ; Thanks To: Sonic Retro How-To by Puto
00000000                            
00000000                            ; Name: Remove Speed Shoes At Signpost Fix
00000000                            ; Function: Removes Speed Shoes when Sonic passes the Signpost so the Level Clear jingle won't play sped up.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\3A Got Through Card.asm
00000000                            
00000000                            ; Name: Game/Time Over Timing Fix
00000000                            ; Function: Makes the Game/Time Over message display a consistent amount of time after Sonic dies, rather than waiting for him fall past the top/bottom of the entire zone.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\Sonic (part 2).asm
00000000                            
00000000                            ; Name: Game Over When Drowning Fix
00000000                            ; Function: Fixes a bug that caused the Title Screen background to stop scrolling after Sonic gets a Game Over from drowning.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: sonic.asm
00000000                            
00000000                            ; Name: High Speed Camera Fix
00000000                            ; Function: Fixes problems with camera not catching up at high speeds, as well preventing Sonic from dying in these situations (notably in the S-tunnels in GHZ1 and GHZ3).
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\Sonic LevelBound.asm, _inc\DynamicLevelEvents.asm
00000000                            
00000000                            ; Name: Shield/Invincibility Positioning Fix
00000000                            ; Function: Correctly positions the Shield/Invincibility sprites when balancing on ledges.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\38 Shield and Invincibility.asm
00000000                            
00000000                            ; Name: Eggman Art Fix
00000000                            ; Function: Fixes Eggman's mappings so that his moustache isn't cut off.
00000000                            ; Date: 2011-02-12 (Feb)
00000000                            ; Modifies: _maps\Eggman.asm
00000000                            
00000000                            ; Name: Lives Over/Underflow Fix
00000000                            ; Function: Prevents life count from over-/underflowing when 1 is added/subtracted.
00000000                            ; Date: 2011-02-12 (Feb)
00000000                            ; Modifies: _incObj\09 Sonic in Special Stage.asm, _incObj\25 & 37 Rings.asm, _incObj\2E Monitor Content Power-Up.asm, _incObj\Sonic (part 2).asm, sonic.asm
00000000                            
00000000                            ; Name: SLZ Solidity Fix
00000000                            ; Function: Fixes goofy solidity in SLZ that allows Sonic to fall through the tops of some 256x256 metatiles.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: map256\SLZ.bin, map256_u\SLZ.bin
00000000                            
00000000                            ; Name: SLZ Staircase Fix
00000000                            ; Function: Fixes some staircases in SLZ2 to that they aren't 1 pixel higher than the ground, stopping Sonic short.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: objpos\SLZ2.bin
00000000                            
00000000                            ; Name: SLZ Pylons Fix
00000000                            ; Function: Removes the SLZ pylons from the object layout files and instead loads them manually when the zone starts. This allows them to appear even when respawning at a Lamppost.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: objpos\SLZ1.bin, objpos\SLZ2.bin, objpos\SLZ3.bin
00000000                            
00000000                            ; Name: FZ Boss Hitcount Fix
00000000                            ; Function: Prevents an underflow glitch when hitting Robotnik an extra time.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: _incObj\85 Boss - Final.asm
00000000                            
00000000                            ; Name: FZ Falling Fix
00000000                            ; Function: Prevents Sonic from falling off after defeating Robotnik by adding an invisible wall.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: map256\SBZ.bin, map256\SBZ (JP1).bin, map256_u\SBZ.bin, map256_u\SBZ (JP1).bin, map16\SBZ.bin, map16_u\SBZ.bin, collide\SBZ.bin
00000000                            
00000000                            ; Name: MZ2 Layout Fix
00000000                            ; Function: Moves the End Sign further right so the level won't feel so truncated.
00000000                            ; Date: 2011-03-03 (Mar)
00000000                            ; Depends On: Exit DLE In Special Stage And Title
00000000                            ; Modifies: levels\mz2.bin, objpos\mz2.bin, misc\Level Size Array.bin
00000000                            
00000000                            ; Name: LZ After End Sign PLC Bugfix
00000000                            ; Function: Fixes bug that sometimes crashes the game if roll and look down after passing End Sign in LZ1 and LZ2
00000000                            ; Date: 2011-03-08 (Mar)
00000000                            ; Thanks To: Sonic Retro How-To by FraGag
00000000                            
00000000                            ; Name: Low End Signs Fix
00000000                            ; Function: Some End Signs would be a little too low. This fixes them.
00000000                            ; Date: 2011-03-15 (Mar)
00000000                            ; Modifies: objpos\SYZ1.bin, objpos\LZ (JP1).bin, objpos\LZ1.bin, objpos\SBZ1 (JP1).bin, objpos\SBZ2.bin
00000000                            
00000000                            ; Name: Monitor Art Mod
00000000                            ; Function: Fixes Robotnik art and adds stripe to Speed Shoes.
00000000                            ; Date: 2011-03-15 (Mar)
00000000                            ; Modifies: artnem\Monitors.bin, artnem\(Mercury) Monitors (optimised).bin
00000000                            
00000000                            ; Name: GHZ Mountain Fix
00000000                            ; Function: Fixes a tile in the GHZ mountain background that's always bothered me - it makes it looks like there's hold in the biggest peaks.
00000000                            ; Date: 2011-04-19 (Apr)
00000000                            ; Modifies: map256\GHZ.bin, map256_U\GHZ.bin
00000000                            
00000000                            ; VARIABLES
00000000                            ; ================================================================================
00000000                            
00000000                            
00000000 =FFFFFEB0                  v_spindashsfx1:	= $FFFFFEB0
00000000 =FFFFFEB1                  v_spindashsfx2:	= v_spindashsfx1+1
00000000 =FFFFFEB2                  v_spindashsfx3:	= v_spindashsfx1+2
00000000                            	
00000000 =FFFFFEB3                  v_cameralag:	= $FFFFFEB3	; camera lag after launching Spin Dash (1 byte)
00000000                            
00000000 =FFFFFEBE                  v_scrolldelay:	= $FFFFFEBE	; scroll delay timer
00000000                            
00000000 =FFFFFE25                  v_centstep:	= $FFFFFE25	; value used to increment centiseconds
00000000                            
00000000                            ; CONSTANTS
00000000                            ; ================================================================================
00000000                            
00000000                            ; Sonic Status Bits
00000000 =00000000                  staFacing:	equ 0
00000000 =00000001                  staAir:		equ 1
00000000 =00000002                  staSpin:	equ 2
00000000 =00000003                  staOnObj:	equ 3
00000000 =00000004                  staRollJump:	equ 4
00000000 =00000005                  staPush:	equ 5
00000000 =00000006                  staWater:	equ 6
00000000                            
00000000 =00000001                  staDash:	equ 1
00000000                            
00000000 =00000000                  staSpinDash:	equ 0
00000000                            
00000000                            ; Sonic OST Bytes
00000000 =0000002C                  obWallJump:	equ $2C	; Wall Jump flag
00000000                            			; $2D reserved, as well
00000000 =00000030                  obInvuln:	equ $30	; Invulnerable (blinking) timer
00000000                            			; $31 reserved as well
00000000 =00000032                  obInvinc:	equ $32	; Invincibility timer
00000000                            			; $33 reserved as well
00000000 =00000034                  obShoes:	equ $34	; Speed Shoes timer
00000000                            			; $35 reserved as well
00000000                            			
00000000 =00000036                  obFrontAngle:	equ $36
00000000 =00000037                  obRearAngle:	equ $37
00000000                            			
00000000 =00000038                  obOnWheel:	equ $38	; on convex wheel flag
00000000                            
00000000 =00000039                  obStatus2:	equ $39	; status for abilities such as Spin Dash
00000000                            
00000000 =0000003A                  obRevSpeed:	equ $3A	; rev speed for Spin Dash or Dash
00000000                            			; $3B reserved as well
00000000                            
00000000 =0000003A                  obRestartTimer:	equ $3A ; level restart timer
00000000 =0000003C                  obJumping:	equ $3C	; jumping flag
00000000 =0000003D                  obPlatformID:	equ $3D	; ost slot of the object Sonic's on top of
00000000 =0000003E                  obLRLock:	equ $3E	; flag for preventing left and right input
00000000                            
00000000                            ; SFX
00000000                            ; ================================================================================
00000000                            
00000000 =000000D1                  sfx_SpinDash:	equ $D1
00000000                            
00000000                            ; MACROS
00000000                            ; ================================================================================
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Store a VRAM address in d0
00000000                            ; input: 16-bit VRAM address
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAMd0:	macro loc
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; SpriteMap macro usage
00000000                            ; l = left coordinate
00000000                            ; t = top coordinate
00000000                            ; w = width (in tiles)
00000000                            ; h = height (in tiles)
00000000                            ; x = horizontal mirroring 1=yes 0=no
00000000                            ; y = vertical mirroring 1=yes 0=no
00000000                            ; pri = priority 1=always on top
00000000                            ; pal = palette index (0...3)
00000000                            ; ind = starting tile index
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            SpriteMap:	macro	l, t, w, h, x, y, pri, pal, ind
00000000                            		dc.b	t
00000000                            		dc.b	(h-1)|((w-1)<<2)
00000000                            		dc.b	(pri<<7)|(pal<<5)|(y<<4)|(x<<3)|(ind>>8)
00000000                            		dc.b	ind&0xFF
00000000                            		dc.b	l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DynPLC macro usage
00000000                            ; n = number of tiles
00000000                            ; i = starting tile index
00000000                            ; o = offset (optional), i.e. Art_SonicSpinDash-Art_Sonic
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            DynPLC:		macro	n, i, o
00000000                            		if (narg=2)
00000000                            		dc.b	((n-1)<<4)|(i>>8)
00000000                            		dc.b	i&$FF
00000000                            		else
00000000                            		dc.b	((n-1)<<4)|((i+((o)>>5))>>8)
00000000                            		dc.b	(i+((o)>>5))&$FF
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            	include	'Variables.asm'
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	= $FFFFFC00		; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	= $FFFFFC40		; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_pcbuffer      = $FFFFFC44     	; stores PC on error (4 bytes)
00000000 =FFFFFC48                  v_errortype:	= $FFFFFC48		; error type
00000000                            
00000000                            
00000000 =00FF0000                  v_256x256:	=   $FF0000		; 256x256 tile mappings ($A400 bytes)
00000000                            
00000000                            
00000000 =FFFF9C00                  Kos_decomp_buffer =  $FFFF9C00  	; $1000 bytes	; each module in a KosM archive is decompressed here and then DMAed to VRAM
00000000                            
00000000 =FFFFAC00                  v_spritequeue:	= $FFFFAC00		; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:	= $FFFFB000		; 16x16 tile mappings
00000000 =FFFFC800                  v_sgfx_buffer:	= $FFFFC800		; buffered Sonic graphics ($18 cells) ($300 bytes)     +++(only $100 now)
00000000 =FFFFC8FC                  v_vdp_buffer_slot = $FFFFC8FC    	; (2 bytes)
00000000 =FFFFC900                  v_ngfx_buffer:	= $FFFFC900		; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFCB00                  v_tracksonic:	= $FFFFCB00		; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_scrolltable:	= $FFFFCC00		; scrolling table data ($400 bytes)
00000000                            		; $CF80 to $D000 seems to be unsused , it only needs $380 bytes to cover the whole screen
00000000                            
00000000 =FFFFD000                  v_objspace:	= $FFFFD000		; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	= v_objspace		; object variable space for Sonic ($40 bytes)
00000000                            ;v_shieldobj:    = v_objspace+$180
00000000                            ;v_dustobj:      = v_objspace+$1C0
00000000                            ;v_homingattackobj = v_objspace+$300
00000000 =FFFFD800                  v_lvlobjspace:	= $FFFFD800		; level object variable space ($1800 bytes)
00000000                            
00000000 =FFFFF000                  v_lvllayout:	= $FFFFF000		; layout is read from rom now, this contains pointers to the location of level layouts on ROM now 			; level and background layouts ($400 bytes)
00000000 =FFFFFC10                  v_screenposy_last   = $FFFFFC10   	; S3K Object manager
00000000 =FFFFFC14                  v_screenposx_coarse = $FFFFFC14   	;         ''
00000000 =FFFFFC18                  v_screenposy_coarse = $FFFFFC18   	;         ''
00000000 =FFFFC900                  v_objstate:	= $FFFFC900		; object state list ($300 bytes)
00000000                            
00000000 =FFFFCC00                  v_variables        = v_objstate+$300
00000000                            ;v_statspeed        = v_variables+$0     ;  speed stat
00000000                            ;v_stataccel        = v_variables+$1     ;  acceleration stat
00000000                            ;v_statjump         = v_variables+$2     ;  jump stat
00000000                            ;v_brokenmonitors1  = v_variables+$3     ;  which monitors are broken in current act, first byte
00000000                            ;v_brokenmonitors2  = v_variables+$4     ;  which monitors are broken in current act, second byte
00000000                            ;v_brokenmonitors3  = v_variables+$5     ;  which monitors are broken in current act, third byte
00000000                            ;v_actflags         = v_variables+$6     ;  flags in the current act to be saved to sram
00000000                            ;v_levselpage       = v_variables+$7     ;  which page of the pause menu is selected
00000000                            ;v_a_ability        = v_variables+$8     ; ability assigned to button A
00000000                            ;v_b_ability        = v_variables+$9     ; ability assigned to button B
00000000                            ;v_c_ability        = v_variables+$A     ; ability assigned to button C
00000000                            ;v_equippedshoes    = v_variables+$B
00000000                            ;v_equippeditem1    = v_variables+$C
00000000                            ;v_equippeditem2    = v_variables+$D
00000000                            ;v_equippedemerald  = v_variables+$E
00000000                            
00000000                            ;v_activeeffects = v_variables+$F		; number of currently active effects
00000000                            ;ItemEffects     = v_variables+$10      	; current active effects (byte)& empty byte & time left (word), 16 slots ($40 bytes)
00000000                            ; --------------------------------------------------------------------------
00000000                            ; Inventory items and abilities
00000000                            ;v_inventory     = v_variables+$40
00000000                            
00000000                            ;v_inv_items     = v_inventory+$0
00000000                            ;v_inv_shield    = v_inv_items+$0                                      
00000000                            ;v_inv_invinc    = v_inv_items+$1
00000000                            ;v_inv_shoes     = v_inv_items+$2
00000000                            ;v_inv_key       = v_inv_items+$3
00000000                            ;v_inv_test      = v_inv_items+$4
00000000                            ;v_inv_bomb      = v_inv_items+$5
00000000                            ;v_inv_eshield   = v_inv_items+$6     	; electric shields
00000000                            ;v_inv_fshield   = v_inv_items+$7     	; fire shields
00000000                            
00000000                            ;v_shoe_items    = v_inventory+$20
00000000                            ;v_shoe_default  = v_shoe_items+$0
00000000                            ;v_shoe_runners  = v_shoe_items+$1
00000000                            ;v_shoe_spring   = v_shoe_items+$2
00000000                            ;v_shoe_spikeproof = v_shoe_items+$3
00000000                            
00000000                            ;v_item_items    = v_inventory+$40
00000000                            ;v_item_goggles  = v_item_items+$0
00000000                            ;v_item_itemsaver = v_item_items+$1
00000000                            ;v_item_speedbracelet = v_item_items+$2
00000000                            
00000000                            ;v_abil_items    = v_inventory+$60
00000000                            ;v_abil_none     = v_abil_items+$0
00000000                            ;v_abil_spindash = v_abil_items+$1
00000000                            ;v_abil_jumpdash = v_abil_items+$2
00000000                            ;v_abil_homing   = v_abil_items+$3
00000000                            ;v_abil_doublejump1 = v_abil_items+$4
00000000                            ;v_abil_doublejump2 = v_abil_items+$5
00000000                            ;v_abil_lightdash = v_abil_items+$6
00000000                            ;v_abil_down     = v_abil_items+$7
00000000                            ;v_abil_peelout  = v_abil_items+$8
00000000                            ;v_abil_walljump = v_abil_items+$9
00000000                            ;v_abil_insta    = v_abil_items+$A        ; instashield
00000000                            ; --------------------------------------------------------------------------
00000000                            
00000000 =FFFFF460                  Kos_decomp_queue_count =	$FFFFF460  ; word 		; the number of pieces of data on the queue. Sign bit set indicates a decompression is in progress
00000000 =FFFFF462                  Kos_decomp_stored_registers =	$FFFFF462  ; $28 bytes 		; allows decompression to be spread over multiple frames
00000000 =FFFFF48A                  Kos_decomp_stored_SR =		$FFFFF48A  ; word
00000000 =FFFFF48C                  Kos_decomp_bookmark =		$FFFFF48C  ; long 		; the address within the Kosinski queue processor at which processing is to be resumed
00000000 =FFFFF490                  Kos_description_field =		$FFFFF490  ; word 		; used by the Kosinski queue processor the same way the stack is used by the normal Kosinski decompression routine
00000000 =FFFFF492                  Kos_decomp_queue =		$FFFFF492  ; $20 bytes 		; 2 longwords per entry, first is source location and second is decompression location
00000000 =FFFFF492                  Kos_decomp_source =		$FFFFF492  ; long 		; the compressed data location for the first entry in the queue
00000000 =FFFFF496                  Kos_decomp_destination =	$FFFFF496  ; long 		; the decompression location for the first entry in the queue
00000000 =FFFFF4B0                  Kos_modules_left =		$FFFFF4B0  ; byte 		; the number of modules left to decompresses. Sign bit set indicates a module is being decompressed/has been decompressed
00000000 =FFFFF4B2                  Kos_last_module_size =		$FFFFF4B2  ; word 		; the uncompressed size of the last module in words. All other modules are $800 words
00000000 =FFFFF4B4                  Kos_module_queue =		$FFFFF4B4  ; $18 bytes 		; 6 bytes per entry, first longword is source location and next word is VRAM destination
00000000 =FFFFF4B4                  Kos_module_source =		$FFFFF4B4  ; long 		; the compressed data location for the first module in the queue
00000000 =FFFFF4CC                  Kos_module_destination =	$FFFFF4CC  ; word 		; the VRAM destination for the first module in the queue
00000000                            
00000000                            ;v_worldmap_X	= $FFFFF49E		; current level's left boundary position in world map squares (1 byte)
00000000                            ;v_worldmap_Y	= $FFFFF49F		; current level's top boundary position in world map squares  (1 byte)
00000000                            ;v_worldmap		= $FFFFF4A0		; $160 bytes, 1 bit for each square of the 80x35 map that has been visited		
00000000                            
00000000 =FFFFF600                  v_gamemode:		= $FFFFF600		; game mode (00=Sega			; 04=Title			; 08=Demo			; 0C=Level			; 10=SS			; 14=Cont			; 18=End			; 1C=Credit			; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	= $FFFFF602		; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	= $FFFFF603		; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	= $FFFFF604		; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	= $FFFFF605		; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	= $FFFFF60C		; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	= $FFFFF614		; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	= $FFFFF616		; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgposy_dup:	= $FFFFF618		; background position y (duplicate) (2 bytes)
00000000                            
00000000 =FFFFF61A                  v_scrposx_dup:	= $FFFFF61A		; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgposx_dup:	= $FFFFF61C		; background position x (duplicate) (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	= $FFFFF624		; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	= $FFFFF625		; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	= $FFFFF626		; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	= $FFFFF627		; palette fading - number of colours
00000000 =FFFFF62A                  v_vbla_routine:	= $FFFFF62A		; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	= $FFFFF62C		; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	= $FFFFF632		; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	= $FFFFF634		; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	= $FFFFF636		; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:	= $FFFFF63A		; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	= $FFFFF640		; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	= $FFFFF644		; flag set to change palette during HBlank (0000 = no			; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	= $FFFFF646		; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	= $FFFFF648		; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	= $FFFFF64A		; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:	= $FFFFF64C		; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	= $FFFFF64D		; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	= $FFFFF64E		; water palette state when water is above/below the screen (00 = partly/all dry			; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	= $FFFFF650		; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	= $FFFFF680		; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	= $FFFFF6E0		; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	= $FFFFF6F8		; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	= $FFFFF700		; screen position x (2 bytes)   (Plane A)
00000000 =FFFFF704                  v_screenposy:	= $FFFFF704		; screen position y (2 bytes)   (Plane A)
00000000                            
00000000 =FFFFF708                  v_bgposx:	= $FFFFF708		; background position x (2 bytes)   (Plane B)
00000000 =FFFFF70C                  v_bgposy:	= $FFFFF70C		; background position y (2 bytes)   (Plane B)
00000000                            
00000000 =FFFFF720                  v_limitleft1:	= $FFFFF720		; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	= $FFFFF722		; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	= $FFFFF724		; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	= $FFFFF726		; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	= $FFFFF728		; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	= $FFFFF72A		; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	= $FFFFF72C		; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	= $FFFFF72E		; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	= $FFFFF732		; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	= $FFFFF73A		; screen shift as Sonic moves horizontally
00000000                            
00000000 =FFFFF73E                  v_lookshift:	= $FFFFF73E		; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	= $FFFFF742		; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	= $FFFFF744		; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF754                  v_bgscroll1:	= $FFFFF754		; background scrolling variable 1
00000000 =FFFFF756                  v_bgscroll2:	= $FFFFF756		; background scrolling variable 2
00000000 =FFFFF758                  v_bgscroll3:	= $FFFFF758		; background scrolling variable 3
00000000 =FFFFF75C                  f_bgscrollvert:	= $FFFFF75C		; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	= $FFFFF760		; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	= $FFFFF762		; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	= $FFFFF764		; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	= $FFFFF766		; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	= $FFFFF767		; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	= $FFFFF768		; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	= $FFFFF76C		; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	= $FFFFF76E		; ObjPosLoad - screen variable
00000000 =FFFFF76E                  v_screenposx_last = v_opl_screen
00000000 =FFFFF770                  v_opl_data:	= $FFFFF770		; ObjPosLoad - data buffer ($10 bytes)
00000000 =FFFFF770                  Obj_load_addr_right = v_opl_data
00000000 =FFFFF774                  Obj_load_addr_left  = v_opl_data+4
00000000 =FFFFF778                  Obj_respawn_index_right = v_opl_data+8
00000000 =FFFFF77C                  Obj_respawn_index_left  = v_opl_data+$0C
00000000                            
00000000 =FFFFF780                  v_ssangle:	= $FFFFF780		; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	= $FFFFF782		; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	= $FFFFF790		; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	= $FFFFF792		; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	= $FFFFF794		; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	= $FFFFF796		; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	= $FFFFF79A		; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	= $FFFFF79C		; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	= $FFFFF7A4		; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	= $FFFFF7A7		; status of boss and prison capsule (01 = boss defeated			; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	= $FFFFF7A8		; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	= $FFFFF7A9		; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	= $FFFFF7AA		; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	= $FFFFF7AC		; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	= $FFFFF7AD		; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	= $FFFFF7AE		; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	= $FFFFF7AF		; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	= $FFFFF7B0		; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	= $FFFFF7B1		; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	= $FFFFF7B2		; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	= $FFFFF7B3		; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	= $FFFFF7B4		; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	= $FFFFF7B5		; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	= $FFFFF7B6		; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	= $FFFFF7B7		; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	= $FFFFF7B8		; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	= $FFFFF7B9		; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	= $FFFFF7BA		; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	= $FFFFF7BB		; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	= $FFFFF7BE		; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	= $FFFFF7C0		; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:	= $FFFFF7C1		; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	= $FFFFF7C7		; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	= $FFFFF7C8		; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	= $FFFFF7C9		; LZ water tunnels (00 = enabled			; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	= $FFFFF7CA		; flag set to lock controls apart from jumping         if $FF, Obj01_Modes routines are not run. Sonic freezes and other objects can control his moving manually. This is used in SBZ transporters for example. If this flag is $01, the above applies and the TouchResponse isn't run. Sonic doesn't react to rings or harmful objects anymore.
00000000 =FFFFF7CB                  v_obj6B:	= $FFFFF7CB		; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	= $FFFFF7CC		; flag set to lock controls during ending sequence     if clear, v_jpadhold1(what buttons are pressed) is sent to v_jpadhold2(what buttons the sonic object sees), if set you can send your own buttons to v_jpadhold2
00000000 =FFFFF7CD                  f_bigring:	= $FFFFF7CD		; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	= $FFFFF7D0		; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	= $FFFFF7D2		; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	= $FFFFF7D4		; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	= $FFFFF7D6		; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	= $FFFFF7D7		; routine counter for Sonic in the ending sequence
00000000 =FFFFF7E0                  f_switch:	= $FFFFF7E0		; flags set when Sonic stands on a switch ($10 bytes)
00000000                            
00000000 =FFFFF800                  v_sprites:	= $FFFFF800		; sprite table ($200 bytes)
00000000 =FFFFFA00                  v_pal0_wat:	= $FFFFFA00		; duplicate palette data - underwater ($80 bytes)
00000000 =FFFFFA80                  v_pal0_dry:	= $FFFFFA80		; duplicate palette data - main ($80 bytes)
00000000 =FFFFFB00                  v_pal1_wat:	= $FFFFFB00		; palette data - underwater ($80 bytes)
00000000 =FFFFFB80                  v_pal1_dry:	= $FFFFFB80		; palette data - main ($80 bytes)
00000000                            
00000000                            
00000000                            
00000000 =FFFFFC00                  v_actstates	= $FFFFFC00		; 4 bytes of saved data per act ($A0 bytes, will expand when more zones added)
00000000                            
00000000                            
00000000                            ; stack goes from FE00 backwards, seems like leaving $100 bytes for it would be safe????
00000000                            
00000000 =FFFFFE02                  f_restart:	= $FFFFFE02		; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	= $FFFFFE04		; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	= v_framecount+1	; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	= $FFFFFE06		; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	= $FFFFFE08		; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	= $FFFFFE0A		; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	= $FFFFFE0B		; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	= $FFFFFE0C		; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	= v_vbla_count+2 	; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	= v_vbla_word+1		; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		= $FFFFFE10		; current zone number
00000000 =FFFFFE11                  v_act:		= $FFFFFE11		; current act number
00000000 =FFFFFE12                  v_lives:	= $FFFFFE12		; number of lives
00000000 =FFFFFE14                  v_air:		= $FFFFFE14		; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	= v_air+1		; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	= $FFFFFE16		; last special stage number
00000000 =FFFFFE18                  v_continues:	= $FFFFFE18		; number of continues
00000000 =FFFFFE1A                  f_timeover:	= $FFFFFE1A		; time over flag
00000000 =FFFFFE1B                  v_lifecount:	= $FFFFFE1B		; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	= $FFFFFE1C		; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	= $FFFFFE1D		; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	= $FFFFFE1E		; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	= $FFFFFE1F		; score counter update flag
00000000 =FFFFFE20                  v_rings:	= $FFFFFE20		; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	= v_rings+1		; low byte for rings
00000000 =FFFFFE22                  v_time:		= $FFFFFE22		; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	= $FFFFFE23		; time - minutes
00000000 =FFFFFE24                  v_timesec:	= $FFFFFE24		; time - seconds
00000000 =FFFFFE25                  v_timecent:	= $FFFFFE25		; time - centiseconds
00000000 =FFFFFE26                  v_score:	= $FFFFFE26		; score (4 bytes)
00000000 =FFFFFE2A                  v_shield:	= $FFFFFE2A		; shield status (00 = no			; 01 = yes)
00000000 =FFFFFE2B                  v_invinc:	= $FFFFFE2B		; invinciblity status (00 = no			; 01 = yes) bit 7 set when instashield active
00000000 =FFFFFE2C                  v_shoes:	= $FFFFFE2C		; speed shoes status (00 = no			; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	= $FFFFFE30		; number of the last lamppost you hit ($FF means switching between acts)
00000000 =FFFFFE32                  v_lamp_xpos:	= v_lastlamp+2		; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	= v_lastlamp+4		; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	= v_lastlamp+6		; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	= v_lastlamp+8		; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	= v_lastlamp+$C		; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:= v_lastlamp+$E		; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	= v_lastlamp+$10 	; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	= v_lastlamp+$12 	; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	= v_lastlamp+$20 	; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	= v_lastlamp+$22 	; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	= v_lastlamp+$23 	; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	= v_lastlamp+$24 	; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:		= $FFFFFE57		; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:		= $FFFFFE58		; which individual emeralds you have (00 = no			; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	= $FFFFFE5E		; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	= $FFFFFEC0		; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	= $FFFFFEC1		; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	= $FFFFFEC2		; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	= $FFFFFEC3		; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	= $FFFFFEC4		; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	= $FFFFFEC5		; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	= $FFFFFEC6		; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	= $FFFFFEC7		; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:		= $FFFFFEC8		; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEF0                  v_limittopdb:	= $FFFFFEF0		; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	= $FFFFFEF2		; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000                            ; boss animation array from ported sonic 2 bosses
00000000 =FFFFFEF4                  Boss_AnimationArray:= $FFFFFEF4	; up to $10 bytes			; 2 bytes per entry
00000000 =FFFFFF04                  unk_F750:       = $FFFFFF04
00000000 =FFFFFF04                  Boss_X_pos:		= $FFFFFF04   	; Boss_MoveObject reads a long, but all other places in the game use only the high word
00000000 =FFFFFF08                  Boss_Y_pos:		= $FFFFFF08	; same here
00000000 =FFFFFF0C                  Boss_X_vel:		= $FFFFFF0C
00000000 =FFFFFF0E                  Boss_Y_vel:		= $FFFFFF0E
00000000 =FFFFFF3E                  unk_F75C:		= $FFFFFF3E	; used by mtz boss, only seems to use 2 bytes
00000000                            
00000000                            			; ^^^ can use values between here vvv not FF30 on though, vblank uses it
00000000                            
00000000                            
00000000                            ;v_monitorlocations: = $FFFFFF40    	; array of monitor x positions ($30 bytes)
00000000                            
00000000                            ;v_wassfxspindash: = $FFFFFF70   	; +++ is 1 if the last sound played was the spin dash
00000000                            ;v_timersfxspindash: = $FFFFFF71 	; +++ timer for spin dash rev
00000000                            ;v_pitchsfxspindash: = $FFFFFF72 	; +++ spindash sfx pitch increase
00000000 =FFFFFF73                  v_vscrolldelay  = $FFFFFF73 
00000000 =FFFFFF74                  v_hscrolldelay: = $FFFFFF74     	; +++ something to do with the spin dash and horizontal scrolling
00000000 =FFFFFF76                  f_dontstopmusic: = $FFFFFF76    	; +++ let music continue from last act
00000000 =FFFFFF77                  v_popuptimer	= $FFFFFF77			; how long the popup timer can be onscreen
00000000                            
00000000                            			; ^^^ can use values between here vvv
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	= $FFFFFF80			; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	= $FFFFFF82			; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	= $FFFFFF84			; level select - sound selected (2 bytes)
00000000 =FFFFFF86                  v_levelselnofade  = $FFFFFF86   	; +++ pause menu, don't fade when redrawing text
00000000                            ;v_airjumpcount:    = $FFFFFF88    	; +++ times jumped in the air, for double jump
00000000                            ;v_jumpdashcount:   = $FFFFFF89    	; +++ times jump dashed
00000000                            ;f_supersonic       = $FFFFFF8A    	; +++ has sonic turned Super Sonic?
00000000                            ;v_supersonicpal    = $FFFFFF8B    	; +++ has super sonic palette value
00000000                            ;v_supersonicpalframe  = $FFFFFF8C 	; +++ has super sonic palette frame (2 bytes)
00000000                            ;v_supersonicpaltimer  = $FFFFFF8E 	; +++ has super sonic palette timer
00000000                            ;v_supersonicframecount = $FFFFFF8F	; +++ frame counter for ring countdown
00000000 =FFFFFF90                  v_lastmusic        = $FFFFFF90    	; save music to be restored after drowning countdown etc.
00000000                            ;v_homingdistance   = $FFFFFF92    	; distance between closest object and sonic (2 bytes)
00000000                            ;v_homingtarget     = $FFFFFF94    	; object number that is closest to sonic
00000000                            ;v_homingtimer      = $FFFFFF95    	; frames that sonic can home on an object for (light dash only ATM)
00000000                            ;v_justwalljumped   = $FFFFFF96    	; if just wall jumped, don't run double jump code
00000000                            ;v_Deform_Temp_Value = $FFFFFF98		; GHZ uses this to save last frame's ripple data rom location (2 bytes)
00000000                            ;H_int_jump      = $FFFFFF9A     	; 6 bytes 			; contains an instruction to jump to the H-int handler
00000000                            ;H_int_addr      = $FFFFFFA0     	; long
00000000                            ;v_teleportin	= $FFFFFFA4			; set when sonic needs to beam into the new level
00000000                            
00000000                            			; ^^^ can use values between here vvv
00000000                            
00000000                            ;v_lamp_xspeed:   = $FFFFFFB2    	; +++ saved x speed when moving between acts     (2 bytes)
00000000                            ;v_lamp_yspeed:   = $FFFFFFB4    	; +++ saved y speed when moving between acts     (2 bytes)
00000000                            ;v_lamp_inertia:  = $FFFFFFB6    	; +++ saved inertia when moving between acts     (2 bytes)
00000000                            ;v_lamp_anim:     = $FFFFFFB8    	; +++ saved animation when moving between acts   (2 byte)
00000000                            ;v_lamp_roll:     = $FFFFFFBA    	; +++ saved rolling when moving between acts     (1 byte)
00000000                            ;v_lamp_dir:      = $FFFFFFBB    	; +++ saved direction when moving between acts   (1 byte)
00000000                            ;v_drumkit        = $FFFFFFBC    	; +++ drumkit used by current song
00000000                            ;v_currentsong:   = $FFFFFFBD    	; +++ the music currently playing
00000000                            ;v_musicpitch:    = $FFFFFFBE    	; +++ adjust music pitch by this amount
00000000                            ;v_palmuscounter  = $FFFFFFBF    	; +++ counts up to 5 then runs UpdateMusic twice
00000000 =FFFFFFC0                  v_scorecopy:	= $FFFFFFC0		; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	= $FFFFFFC0		; points required for an extra life (4 bytes) (JP1 only)
00000000                            ;f_levselcheat:	= $FFFFFFE0		; level select cheat flag
00000000                            ;f_slomocheat:	= $FFFFFFE1		; slow motion & frame advance cheat flag
00000000                            ;Slow_Motion_Flag      equ $FFFFFFE1
00000000                            ;f_debugcheat:	= $FFFFFFE2		; debug mode cheat flag
00000000                            ;Debug_Mode_Flag       equ $FFFFFFE2
00000000                            ;f_creditscheat:	= $FFFFFFE3		; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	= $FFFFFFE4		; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	= $FFFFFFE6		; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000                            			; ^^^ can use values between here vvv
00000000                            
00000000 =FFFFFFF0                  f_demo:			= $FFFFFFF0		; demo mode flag (0 = no			; 1 = yes			; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:		= $FFFFFFF2		; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	= $FFFFFFF4		; credits index number (2 bytes)
00000000 =FFFFFFF6                  v_layer:        = $FFFFFFF6     	; The bit in the 16x16 entries in the 128x128 block mappings to check for top solidity. Is either $C (for the default collision layer), or $E (for the alternate collision layer).
00000000 =FFFFFFF7                  v_layerplus     = $FFFFFFF7     	; The bit in the 16x16 entries in the 128x128 block mappings to check for left/right/bottom solidity. Is either $D (for the default collision layer), or $F (for the alternate collision layer).
00000000 =FFFFFFF8                  v_megadrive:	= $FFFFFFF8		; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	= $FFFFFFFA		; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:			= $FFFFFFFC		; 'init' text string (4 bytes)
00000000                            
00000000                            ; ===========================================================================
00000000                            ; Pause Menu Memory Locations (only used when in menu, otherwise the 256x256 tiles go here)
00000000                            ; ===========================================================================
00000000                            
00000000                            ;v_menufg        =   $FFFF0000
00000000                            ;v_menubg        =   $FFFF08C0
00000000                            ;v_sndtsttilemap =   $FFFF1180
00000000                            ;v_sndtsttemp    =   $FFFF1A40
00000000                            
00000000                            ;v_vucounter     = $FFFF1FEE     	; amount on vu meter (10 1 byte slots)
00000000                            
00000000                            
00000000                            ;v_menuslots     = $FFFF1FFA     	; number of slots on equip screen (or debug screen)
00000000                            ;v_menuequipslot = $FFFF1FFB     	; which slot is being selected (1 byte)
00000000                            ;v_menupagestate = $FFFF1FFC     	; 00-select page, 01-select slot, 02-select inv item (1 byte)
00000000                            ;FirstDrawnItem  = $FFFF1FFD     	; when inventory scrolls, which number in inv array is at the top of the list (1 byte)
00000000                            ;NumberOfItems   = $FFFF1FFE     	; total number of items currently held in the inventory (2 bytes)
00000000                            ;CurrentInventoryArray  = $FFFF2000 	; all inventory items to draw (?? bytes)
00000000                            
00000000                            
00000000                            ;v_menu_fgX		= $FFFF3000
00000000                            ;v_menu_bgX		= $FFFF3002
00000000                            ;v_menu_fgY		= $FFFF3004
00000000                            ;v_menu_bgY		= $FFFF3006
00000000                            
00000000                            ;v_mapbuffer =   $FFFF3010			; map screen graphics are buffered here before sending to VRAM
00000000                            
00000000                            ;v_mappointerobj	= $FFFFD400			; $40 bytes, 'you are here' object on map screen
00000000                            
00000000                            ;	if DynamicSpecialStageWalls=1	;Mercury Dynamic Special Stage Walls
00000000 =FFFFF784                  v_ssangleprev:	= $FFFFF784	; previous Special Stage angle (1 byte)
00000000                            ;	endc	;	;Mercury Dynamic Special Stage Walls
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; The high word of d6 after a SolidObject call is a bitfield
00000000                            ; with the following meaning:
00000000 =00000000                  p1_touch_side_bit   = 0
00000000 =00000000                  p2_touch_side_bit   = p1_touch_side_bit + 1
00000000                            
00000000 =00000001                  p1_touch_side       = 1<<p1_touch_side_bit
00000000 =00000001                  p2_touch_side       = 1<<p2_touch_side_bit
00000000                            
00000000 =00000001                  touch_side_mask     = p1_touch_side|p2_touch_side
00000000                            
00000000 =00000000                  p1_touch_bottom_bit = p1_touch_side_bit + pushing_bit_delta
00000000 =00000000                  p2_touch_bottom_bit = p1_touch_bottom_bit + 1
00000000                            
00000000 =00000001                  p1_touch_bottom     = 1<<p1_touch_bottom_bit
00000000 =00000001                  p2_touch_bottom     = 1<<p2_touch_bottom_bit
00000000                            
00000000 =00000001                  touch_bottom_mask   = p1_touch_bottom|p2_touch_bottom
00000000                            
00000000 =00000000                  p1_touch_top_bit   = p1_touch_bottom_bit + pushing_bit_delta
00000000 =00000000                  p2_touch_top_bit   = p1_touch_top_bit + 1
00000000                            
00000000 =00000001                  p1_touch_top       = 1<<p1_touch_top_bit
00000000 =00000001                  p2_touch_top       = 1<<p2_touch_top_bit
00000000                            
00000000 =00000001                  touch_top_mask     = p1_touch_top|p2_touch_top
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Bits 3-6 of an object's status after a SolidObject call is a
00000000                            ; bitfield with the following meaning:
00000000 =00000003                  p1_standing_bit   = 3
00000000 =00000003                  p2_standing_bit   = p1_standing_bit + 1
00000000                            
00000000 =00000008                  p1_standing       = 1<<p1_standing_bit
00000000 =00000008                  p2_standing       = 1<<p2_standing_bit
00000000                            
00000000 =00000002                  pushing_bit_delta = 2
00000000 =00000003                  p1_pushing_bit    = p1_standing_bit + pushing_bit_delta
00000000 =00000003                  p2_pushing_bit    = p1_pushing_bit + 1
00000000                            
00000000 =00000008                  p1_pushing        = 1<<p1_pushing_bit
00000000 =00000008                  p2_pushing        = 1<<p2_pushing_bit
00000000                            
00000000                            
00000000 =00000008                  standing_mask     = p1_standing|p2_standing
00000000 =00000008                  pushing_mask      = p1_pushing|p2_pushing
00000000 =00000008                  pushing_mask      = p1_pushing|p2_pushing
00000000                            	include	'Constants.asm'
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_ABZ:		equ 7
00000000                            
00000000                            ; Colours
00000000 =00000000                  cBlack:		equ $000		; colour black
00000000 =00000EEE                  cWhite:		equ $EEE		; colour white
00000000 =00000E00                  cBlue:		equ $E00		; colour blue
00000000 =000000E0                  cGreen:		equ $0E0		; colour green
00000000 =0000000E                  cRed:		equ $00E		; colour red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; colour yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; colour aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; colour magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000014                  obInertia:	equ $14	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000023                  obWidth:	equ width_pixels	; width/2
00000000 =00000018                  obPriority:	equ priority	; sprite stack priority -- 0 is front
00000000 =00000019                  obActWid:	equ $19	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000014                  obRespawnNo:	equ respawn_index	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000                            bgm_GHZ:	equ ((Music81-MusicIndex)/4)+$81
00000000                            bgm_LZ:		equ ((Music82-MusicIndex)/4)+$81
00000000                            bgm_MZ:		equ ((Music83-MusicIndex)/4)+$81
00000000                            bgm_SLZ:	equ ((Music84-MusicIndex)/4)+$81
00000000                            bgm_SYZ:	equ ((Music85-MusicIndex)/4)+$81
00000000                            bgm_SBZ:	equ ((Music86-MusicIndex)/4)+$81
00000000                            bgm_Invincible:	equ ((Music87-MusicIndex)/4)+$81
00000000                            bgm_ExtraLife:	equ ((Music88-MusicIndex)/4)+$81
00000000                            bgm_SS:		equ ((Music89-MusicIndex)/4)+$81
00000000                            bgm_Title:	equ ((Music8A-MusicIndex)/4)+$81
00000000                            bgm_Ending:	equ ((Music8B-MusicIndex)/4)+$81
00000000                            bgm_Boss:	equ ((Music8C-MusicIndex)/4)+$81
00000000                            bgm_FZ:		equ ((Music8D-MusicIndex)/4)+$81
00000000                            bgm_GotThrough:	equ ((Music23-MusicIndex)/4)+$23
00000000                            bgm_GameOver:	equ ((Music8F-MusicIndex)/4)+$81
00000000                            bgm_Continue:	equ ((Music90-MusicIndex)/4)+$81
00000000                            bgm_Credits:	equ ((Music91-MusicIndex)/4)+$81
00000000                            bgm_Drowning:	equ ((Music92-MusicIndex)/4)+$81
00000000                            bgm_Emerald:	equ ((Music93-MusicIndex)/4)+$81
00000000                            
00000000                            ; Sound effects
00000000                            sfx_Jump:	equ ((SoundA0-SoundIndex)/4)+$A0
00000000                            sfx_Lamppost:	equ ((SoundA1-SoundIndex)/4)+$A0
00000000                            sfx_A2:		equ ((SoundA2-SoundIndex)/4)+$A0
00000000                            sfx_Death:	equ ((SoundA3-SoundIndex)/4)+$A0
00000000                            sfx_Skid:	equ ((SoundA4-SoundIndex)/4)+$A0
00000000                            sfx_A5:		equ ((SoundA5-SoundIndex)/4)+$A0
00000000                            sfx_HitSpikes:	equ ((SoundA6-SoundIndex)/4)+$A0
00000000                            sfx_Push:	equ ((SoundA7-SoundIndex)/4)+$A0
00000000                            sfx_SSGoal:	equ ((SoundA8-SoundIndex)/4)+$A0
00000000                            sfx_SSItem:	equ ((SoundA9-SoundIndex)/4)+$A0
00000000                            sfx_Splash:	equ ((SoundAA-SoundIndex)/4)+$A0
00000000                            sfx_AB:		equ ((SoundAB-SoundIndex)/4)+$A0
00000000                            sfx_HitBoss:	equ ((SoundAC-SoundIndex)/4)+$A0
00000000                            sfx_Bubble:	equ ((SoundAD-SoundIndex)/4)+$A0
00000000                            sfx_Fireball:	equ ((SoundAE-SoundIndex)/4)+$A0
00000000                            sfx_Shield:	equ ((SoundAF-SoundIndex)/4)+$A0
00000000                            sfx_Saw:	equ ((SoundB0-SoundIndex)/4)+$A0
00000000                            sfx_Electric:	equ ((SoundB1-SoundIndex)/4)+$A0
00000000                            sfx_Drown:	equ ((SoundB2-SoundIndex)/4)+$A0
00000000                            sfx_Flamethrower:equ ((SoundB3-SoundIndex)/4)+$A0
00000000                            sfx_Bumper:	equ ((SoundB4-SoundIndex)/4)+$A0
00000000                            sfx_Ring:	equ ((SoundB5-SoundIndex)/4)+$A0
00000000                            sfx_SpikesMove:	equ ((SoundB6-SoundIndex)/4)+$A0
00000000                            sfx_Rumbling:	equ ((SoundB7-SoundIndex)/4)+$A0
00000000                            sfx_B8:		equ ((SoundB8-SoundIndex)/4)+$A0
00000000                            sfx_Collapse:	equ ((SoundB9-SoundIndex)/4)+$A0
00000000                            sfx_SSGlass:	equ ((SoundBA-SoundIndex)/4)+$A0
00000000                            sfx_Door:	equ ((SoundBB-SoundIndex)/4)+$A0
00000000                            sfx_Teleport:	equ ((SoundBC-SoundIndex)/4)+$A0
00000000                            sfx_ChainStomp:	equ ((SoundBD-SoundIndex)/4)+$A0
00000000                            sfx_Roll:	equ ((SoundBE-SoundIndex)/4)+$A0
00000000                            sfx_Continue:	equ ((SoundBF-SoundIndex)/4)+$A0
00000000                            sfx_Basaran:	equ ((SoundC0-SoundIndex)/4)+$A0
00000000                            sfx_BreakItem:	equ ((SoundC1-SoundIndex)/4)+$A0
00000000                            sfx_Warning:	equ ((SoundC2-SoundIndex)/4)+$A0
00000000                            sfx_GiantRing:	equ ((SoundC3-SoundIndex)/4)+$A0
00000000                            sfx_Bomb:	equ ((SoundC4-SoundIndex)/4)+$A0
00000000                            sfx_Cash:	equ ((SoundC5-SoundIndex)/4)+$A0
00000000                            sfx_RingLoss:	equ ((SoundC6-SoundIndex)/4)+$A0
00000000                            sfx_ChainRise:	equ ((SoundC7-SoundIndex)/4)+$A0
00000000                            sfx_Burning:	equ ((SoundC8-SoundIndex)/4)+$A0
00000000                            sfx_Bonus:	equ ((SoundC9-SoundIndex)/4)+$A0
00000000                            sfx_EnterSS:	equ ((SoundCA-SoundIndex)/4)+$A0
00000000                            sfx_WallSmash:	equ ((SoundCB-SoundIndex)/4)+$A0
00000000                            sfx_Spring:	equ ((SoundCC-SoundIndex)/4)+$A0
00000000                            sfx_Switch:	equ ((SoundCD-SoundIndex)/4)+$A0
00000000                            sfx_RingLeft:	equ ((SoundCE-SoundIndex)/4)+$A0
00000000                            sfx_Signpost:	equ ((SoundCF-SoundIndex)/4)+$A0
00000000 =000000D0                  sfx_Waterfall:	equ $D0
00000000 =000000D0                  sfx_Waterfall:	equ $D0
00000000                            	include	'Macros.asm'
00000000 =FFFFF602                  SonicControl	equ	$FFFFF602
00000000 =FFFFF604                  Joypad		equ	$FFFFF604
00000000                            
00000000 =00000000                  Held		equ	0
00000000 =00000001                  Press		equ	1
00000000                            
00000000 =00000007                  iStart		equ 	7
00000000 =00000006                  iA		equ 	6
00000000 =00000005                  iC		equ 	5
00000000 =00000004                  iB		equ 	4
00000000 =00000003                  iRight		equ 	3
00000000 =00000002                  iLeft		equ 	2
00000000 =00000001                  iDown		equ 	1
00000000 =00000000                  iUp		equ 	0
00000000                            
00000000 =00000080                  MaskStart		equ 	1<<7
00000000 =00000040                  MaskA		equ 	1<<6
00000000 =00000020                  MaskC		equ 	1<<5
00000000 =00000010                  MaskB		equ 	1<<4
00000000 =00000008                  MaskRight		equ 	1<<3
00000000 =00000004                  MaskLeft		equ 	1<<2
00000000 =00000002                  MaskDown		equ 	1<<1
00000000 =00000001                  MaskUp		equ 	1
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to check button presses
00000000                            ; Arguments:	1 - buttons to check
00000000                            ;		2 - bitfield to check
00000000                            ; -------------------------------------------------------------
00000000                            tpress	macro
00000000                            	move.b	(\2+1),d0
00000000                            	andi.b	#\1,d0
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to check if buttons are held
00000000                            ; Arguments:	1 - buttons to check
00000000                            ;		2 - bitfield to check
00000000                            ; -------------------------------------------------------------
00000000                            theld	macro
00000000                            	move.b	\2,d0
00000000                            	andi.b	#\1,d0
00000000                            	endm
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),($C00004).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		bsr.w	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            @wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,($A11100).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            		
00000000                            stopZ80a:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            obRange:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.w	exit		; if object moves out of range, branch
00000000                            		endm
00000000                            
00000000                            obRanges:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.s	exit		; if object moves out of range, branch
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine (leave blank to not terminate)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate
00000000                            		move.w	#track,d0
00000000                            		if (narg=1)
00000000                            		jsr	(PlaySound).l
00000000                            		else
00000000                            		jmp	(PlaySound).l
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate
00000000                            		move.w	#track,d0
00000000                            		if (narg=1)
00000000                            		jsr	(PlaySound_Special).l
00000000                            		else
00000000                            		jmp	(PlaySound_Special).l
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            		
00000000                            waitYM		macro
00000000                            @wait\@:	move.b	($A04000).l,d2
00000000                            		btst	#7,d2
00000000                            		bne.s	@wait\@
00000000                            		endm
00000000                            		
00000000                            ; =============================================================
00000000                            ; Macro to raise an error in vectors
00000000                            ; Arguments:	1 - error number
00000000                            ;		2 - branch location
00000000                            ;		3 - if exists, adds 2 to stack pointer
00000000                            ; -------------------------------------------------------------
00000000                            raise	macro
00000000                            	move.b	#\1,($FFFFFC44).w
00000000                            	if narg=3
00000000                            		addq.l	#2,2(sp)
00000000                            	endc
00000000                            	bra.s	\2
00000000                            	endm	
00000000                            	
00000000                            	
00000000                            Kos_RunBitStream	macro
00000000                            	dbf	d2,@skip\@
00000000                            	moveq	#7,d2
00000000                            	move.b	d1,d0
00000000                            	swap	d3
00000000                            	bpl.s	@skip\@
00000000                            	move.b  (a0)+,d0                        ; get desc. bitfield
00000000                            	move.b  (a0)+,d1                        ;
00000000                            	move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
00000000                            	move.b  (a4,d1.w),d1                    ;
00000000                            @skip\@:
00000000                            	endm
00000000                            	
00000000                            	
00000000                            ; fills a region of 68k RAM with 0 (4 bytes at a time)
00000000                            clearRAM macro addr,length,number
00000000                            ;    if length&3
00000000                            ;	fatal "clearRAM len must be divisible by 4, but was length"
00000000                             ;   endif
00000000                            	lea	(addr).w,a1
00000000                            	moveq	#0,d0
00000000                            	move.w	#number,number>>2-1(length),d1
00000000                            @loop:	move.l	d0,(a1)+
00000000                            	dbf	d1,@loop
00000000                                endm
00000000                            	
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; change an objects status in the respawn table
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            obMarkGone      macro
00000000                            ;        if S3KObjectManager=1
00000000                            		moveq	#0,d0
00000000                                            move.w	respawn_index(a0),d0	; get address in respawn table
00000000                            	        beq.s	@dontremember		; if it's zero, don't remember object
00000000                            	        movea.w	d0,a2	; load address into a2
00000000                            	        bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again           
00000000                                        @dontremember:
00000000                            
00000000                             ;       else
00000000                            ;		lea	(v_objstate).w,a2
00000000                            ;		moveq	#0,d0
00000000                            ;		move.b	obRespawnNo(a0),d0
00000000                            ;		bclr	#7,2(a2,d0.w)
00000000                             ;       endif
00000000                                            endm
00000000                                            endm
00000000                            ; ===========================================================================
00000000                            
00000000                            ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00000000                            ; ASSEMBLY OPTIONS:
00000000                            
00000000 =00000001                  padToPowerOfTwo = 1
00000000                            ;	| If 1, pads the end of the rom to the next power of two bytes (for real hardware)
00000000                            
00000000 =00000001                  PCMDC equ 1 ; PCM Driver with music compressed?
00000000                            ; 0 = no
00000000                            ; 1 = yes
00000000                            
00000000 =00000000                  SegaSoundGF64 = 0  ;it´s a bonus :) (default: disabled) [GF64]
00000000                            ;0 - Normal sega sound
00000000                            ;1 - "SEGA!" scream
00000000                            ;2 - "Seeeegaaaaa" for a ytp
00000000                            ;S3Dacs = 1  ;Sonic 3k DAC Samples (Highly Recommended that you turn it on) ; Both S1 and S2 samples are included with the S3K samples in this hack
00000000                            ;0 - Off (Normal S2 Samples)
00000000                            ;1 - On
00000000                            ;2 - Full DAC Table From S3K (Not Supported yet so sorry...)
00000000 =00000001                  TitleScreenPaletteFix = 1
00000000 =00000000                  ChaotixJumpSND = 0
00000000 =00000000                  ChaotixSkidSND = 0
00000000 =00000000                  OldTitleCards = 0
00000000 =00000000                  SonicCDRollJump = 0
00000000 =00000001                  skipChecksumCheck equ 1
00000000                            ;	| If 1, disables the unnecessary (and slow) bootup checksum calculation
00000000 =00000000                  Useoldsounddriver = 0
00000000 =00000001                  zeroOffsetOptimization = 1
00000000                            ;	| If 1, makes a handful of zero-offset instructions smaller
00000000                            ;
00000000 =00000001                  assembleZ80SoundDriver = 1
00000000                            ;	| If 1, the Z80 sound driver is assembled with the rest of the rom
00000000                            ;	| If 0, the Z80 sound driver is incbind (less flexible)
00000000 =00000001                  DebuggingFeatures = 1	; 1 Enables Debugger , 0 Disables Debugger
00000000 =00000001                  HUDCentiseconds = 1
00000000 =00000000                  S2Obj34TitleCards = 0
00000000 =00000001                  UnusedCode equ 1	; compile the unused codes?
00000000                            ; 0 = no
00000000                            ; 1 = yes
00000000 =00000001                  HUDHasLeadingZeroes = 1
00000000                            ; property of all objects:
00000000 =0000003D                  obPlatformID:	equ $3D
00000000 =00000040                  next_object =		$40 ; the size of an object
00000000                            ;subtype =		$28
00000000                            
00000000 =FFFFCF80                  MusicStack	equ	$FFFFCF80
00000000 =FFFFCF90                  SoundStack	equ	$FFFFCF90
00000000 =FFFFCFA0                  AdvanceStack	equ	$FFFFCFA0
00000000 =FFFFCFB0                  ControlStack	equ	$FFFFCFB0
00000000 =FFFFF015                  v_palmuscounter  equ $FFFFF015	; counts up to 5 then runs UpdateMusic twice
00000000                            ;Sprite_Table_Input =	Sprite_Table_Input
00000000                            
00000000 =000001FF                  Max_Rings = 511 ; default. maximum number possible is 759
00000000                            ;    if Max_Rings > 759
00000000                            ;    fatal "Maximum number of rings possible is 759"
00000000                            ;    endif
00000000                            
00000000 =00000400                  Rings_Space = (Max_Rings+1)*2
00000000                            ;Ring_Positions =		($FFFFE800)
00000000 =FFFFD200                  Ring_start_addr_ROM =   (Ring_Positions+Rings_Space)
00000000 =FFFFD204                  Ring_end_addr_ROM =        (Ring_Positions+Rings_Space+4)
00000000 =FFFFD208                  Ring_start_addr_ROM_P2 =    (Ring_Positions+Rings_Space+8)
00000000 =FFFFD20C                  Ring_end_addr_ROM_P2 =    (Ring_Positions+Rings_Space+12)
00000000 =FFFFD210                  Ring_free_RAM_start =       (Ring_Positions+Rings_Space+16)
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =FFFFF640                  v_vdp_buffer2:	= $FFFFF640	; VDP instruction buffer (2 bytes)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            ;
00000000                            ;writeVRAM:	macro
00000000                            ;		lea	(vdp_control_port).l,a5
00000000                            ;		move.l	#$94000000,(a5)
00000000                            ;		move.l	#$96000000,(a5)
00000000                            ;		move.w	#$9700,(a5)
00000000                            ;		move.w	#$4000,(a5)
00000000                            ;		move.w	#$80,(v_vdp_buffer2).w
00000000                            ;		move.w	(v_vdp_buffer2).w,(a5)
00000000                            ;		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ;writeCRAM:	macro
00000000                            ;		lea	(vdp_control_port).l,a5
00000000                            ;		move.l	#$94000000,(a5)
00000000                            ;		move.l	#$96000000,(a5)
00000000                            ;		move.w	#$9700,(a5)
00000000                            ;		move.w	#$C000,(a5)
00000000                            ;		move.w	#$80,(v_vdp_buffer2).w
00000000                            ;		move.w	(v_vdp_buffer2).w,(a5)
00000000                            ;		endm
00000000                            
00000000                            ; =======================================================
00000000                            ; Dynamic Event Engine Equates
00000000                            ; =======================================================
00000000                            
00000000                            ; Zone Equates
00000000                            
00000000 =FFFFFE10                  ZONE                            equ     $FFFFFE10
00000000 =00000000                  ZONE_GHZ1                       equ     $0000
00000000 =00000001                  ZONE_GHZ2                       equ     $0001
00000000 =00000002                  ZONE_GHZ3                       equ     $0002
00000000 =00000200                  ZONE_MZ1                        equ     $0200
00000000 =00000201                  ZONE_MZ2                        equ     $0201
00000000 =00000202                  ZONE_MZ3                        equ     $0202
00000000 =00000400                  ZONE_SYZ1                       equ     $0400
00000000 =00000401                  ZONE_SYZ2                       equ     $0401
00000000 =00000402                  ZONE_SYZ3                       equ     $0402
00000000 =00000100                  ZONE_LZ1                        equ     $0100
00000000 =00000101                  ZONE_LZ2                        equ     $0101
00000000 =00000102                  ZONE_LZ3                        equ     $0102
00000000 =00000300                  ZONE_SLZ1                       equ     $0300
00000000 =00000301                  ZONE_SLZ2                       equ     $0301
00000000 =00000302                  ZONE_SLZ3                       equ     $0302
00000000 =00000500                  ZONE_SBZ1                       equ     $0500
00000000 =00000501                  ZONE_SBZ2                       equ     $0501
00000000 =00000103                  ZONE_SBZ3                       equ     $0103
00000000 =00000502                  ZONE_FZ                         equ     $0502
00000000                            
00000000                            ; Other Equates
00000000                            
00000000 =FFFFF700                  CamX                            equ     $FFFFF700
00000000 =FFFFF704                  CamY                            equ     $FFFFF704
00000000 =FFFFD008                  SonX                            equ     $FFFFD008
00000000 =FFFFD00C                  SonY                            equ     $FFFFD00C
00000000                            
00000000 =FFFFFFBE                  palcheck                        equ     $FFFFFFBE
00000000 =FFFFFFEA                  MusicChk                        equ     $FFFFFFEA
00000000                            
00000000 =FFFFFFC6                  SonicKilled                     equ     $FFFFFFC6
00000000                            
00000000 =00000004                  BitMapXpos    equ    4
00000000 =00000002                  BitMapYpos    equ    2
00000000 =00000100                  BitMapWidth    equ    256
00000000 =00000080                  BitMapHeight    equ    128
00000000 =00000010                  BitMapCellHeight    equ    (BitMapHeight/8)
00000000 =00000020                  BitMapCellWidth    equ    (BitMapWidth/8)
00000000 =00002000                  WallPalBits    equ    $2000
00000000 =00000040                  MapRowWidth    equ    64
00000000 =00008000                  bitmapaddr    equ $8000
00000000 =0000C000                  scrollAaddr    equ    $C000
00000000 =0000D800                  spriteaddr    equ    $D800
00000000 =0000DC00                  hscrolladdr    equ    $DC00
00000000 =0000E000                  scrollBaddr    equ    $E000
00000000 =0000F000                  windowaddr    equ    $F000
00000000 =00000000                  DMA_ByteInc    equ    $0
00000000 =00000002                  DMA_Length1    equ    $2
00000000 =00000004                  DMA_Length2    equ    $4
00000000 =00000006                  DMA_SrcAdr1    equ    $6
00000000 =00000008                  DMA_SrcAdr2    equ    $8
00000000 =0000000A                  DMA_SrcAdr3    equ    $A
00000000 =0000000C                  DMA_DMAenbl    equ    $C
00000000 =0000000E                  DMA_DstAdr1    equ    $E
00000000 =00000010                  DMA_DstAdr2    equ    $10
00000000 =00000012                  DMA_DMADisbl    equ    $12
00000000 =00A04000                  SNDADD          EQU     $A04000
00000000 =00A04001                  SNDDAT          EQU     $A04001
00000000 =00A10008                  CNTLA           EQU     $A10008
00000000 =00A1000A                  CNTLB           EQU     $A1000A
00000000 =00A1000C                  CNTLC           EQU     $A1000C
00000000 =00A10009                  CNTLAW          EQU     $A10009
00000000 =00A1000B                  CNTLBW          EQU     $A1000B
00000000 =00A10009                  CNTLCW          EQU     $A10009
00000000 =00A1000D                  PPCNTL          EQU     $A1000D
00000000 =00A10007                  PPDATA          EQU     $A10007
00000000 =00A11100                  BUSREQ          EQU     $A11100
00000000 =00A11200                  BUSRES          EQU     $A11200
00000000 =00A00000                  Z80RAM          EQU     $A00000
00000000 =00C00000                  VDATA           EQU     $C00000
00000000 =00C00004                  VCTRL           EQU     $C00004
00000000 =00000004                  palid_GHZ 		EQU 4
00000000 =00000001                  palid_Title 	EQU 1
00000000                            SetVdpRegister  MACRO
00000000                                    MOVE.W  #$8000|(\1<<8)|\2,VCTRL; check out the SEGA manual
00000000                                    ENDM
00000000                            SetVdpRegisterCode      MACRO
00000000                                    and.w   #$00ff,\2              ; Mask off high part
00000000                                    or.w    #$8000|(\1<<8),\2
00000000                                    move.w  \2,VCTRL
00000000                                    ENDM
00000000                            AutoIncrement   MACRO
00000000                                    SetVdpRegister  15,\1
00000000                                    ENDM
00000000                            VramWrtAddr  MACRO
00000000                                    MOVE.L  #$40000000|((\1&$3fff)<<16)|((\1>>14)&3),\2
00000000                                    ENDM
00000000                            VSramWrtAddr  MACRO
00000000                                    MOVE.L  #$40000010|((\1&$3fff)<<16)|((\1>>14)&3),\2
00000000                                    ENDM
00000000                            CramWrtAddr  MACRO
00000000                                    MOVE.L  #$C0000000|((\1&$3fff)<<16)|((\1>>14)&3),\2
00000000                                    ENDM
00000000                            CalcVramWrtAddrCode MACRO
00000000                                    move.w  \1,\2          ; Copy for lower 14 bits
00000000                                    and.l   #$3fff,\2      ; mask
00000000                                    lsl.l   #8,\2
00000000                                    lsl.l   #8,\2          ; Shift up
00000000                                    or.l    #$40000000,\2  ; Set bit that tells VDP it's a VRAM WRITE
00000000                                    lsr.l   #8,\1
00000000                                    lsr.l   #6,\1          ; Shift down 14 bits
00000000                                    and.l   #$3,\1
00000000                                    or.l    \1,\2          ; and combine
00000000                            	endm
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            
00000000                            binclude macro    filedir
00000000                            	incbin	\filedir
00000000                            	endm
00000000                            setROMBank    macro    page,range        ; page = 0-63 (16MB) 512KB pages useable
00000000                                                    ; range = $A130F1 = $0-$7FFFF not writable
00000000                            
00000000                                    if range=$80000
00000000                                    move.b  #page,($A130F3).l    ; range = $A130F3 = $80000-$FFFFF
00000000                                    endif
00000000                                    if range=$100000
00000000                                    move.b  #page,($A130F5).l    ; range = $A130F5 = $100000-$17FFFF
00000000                                    endif
00000000                                    if range=$180000
00000000                                    move.b  #page,($A130F7).l    ; range = $A130F7 = $180000-$1FFFFF
00000000                                    endif
00000000                                    if range=$200000
00000000                                    move.b  #page,($A130F9).l    ; range = $A130F9 = $200000-$27FFFF
00000000                                    endif
00000000                                    if range=$280000
00000000                                    move.b  #page,($A130FB).l    ; range = $A130FB = $280000-$2FFFFF
00000000                                    endif
00000000                                    if range=$300000
00000000                                    move.b  #page,($A130FD).l    ; range = $A130FD = $300000-$37FFFF
00000000                                    endif
00000000                                    if range=$380000
00000000                                    move.b  #page,($A130FF).l    ; range = $A130FF = $380000-$3FFFFF
00000000                                    endif
00000000                                    endm
00000000                            ; we don"t want AS padding out dc.b instructions
00000000                            	; we don"t need to generate anything for a listing file
00000000                            	; we don"t need warnings about privileged instructions
00000000                            		
00000000                            		include "sonic1.macrosetup.asm"
00000000                            ; 1-arg instruction that's self-patching to remove 0-offset optimization
00000000                            insn1op	 macro oper,x
00000000                            	  if (substr("x",0,2)<>"0(") && (substr("x",0,3)<>"ID(")
00000000                            		!oper	x
00000000                            	  else
00000000                            		!oper	1+x
00000000                            		!org	*-1
00000000                            		!dc.b	0
00000000                            	  endif
00000000                            	 endm
00000000                            
00000000                            ; 2-arg instruction that's self-patching to remove 0-offset optimization
00000000                            insn2op	 macro oper,x,y
00000000                            	  if (substr("x",0,2)<>"0(") && (substr("x",0,3)<>"ID(")
00000000                            		  if (substr("y",0,2)<>"0(") && (substr("y",0,3)<>"ID(")
00000000                            			!oper	x,y
00000000                            		  else
00000000                            			!oper	x,1+y
00000000                            			!org	*-1
00000000                            			!dc.b	0
00000000                            		  endif
00000000                            	  else
00000000                            		if substr("y",0,1)<>"D"
00000000                            		  if (substr("y",0,2)<>"0(") && (substr("y",0,3)<>"ID(")
00000000                            start:
00000000                            			!oper	1+x,y
00000000                            end:
00000000                            			!org	start+3
00000000                            			!dc.b	0
00000000                            			!org	end
00000000                            		  else
00000000                            			!oper	1+x,1+y
00000000                            			!org	*-3
00000000                            			!dc.b	0
00000000                            			!org	*+1
00000000                            			!dc.b	0
00000000                            		  endif
00000000                            		else
00000000                            			!oper	1+x,y
00000000                            			!org	*-1
00000000                            			!dc.b	0
00000000                            		endif
00000000                            	  endif
00000000                            	 endm
00000000                            
00000000                            	; instructions that were used with 0(a#) syntax
00000000                            	; defined to assemble as they originally did
00000000                            _move	macro
00000000                            		insn2op move.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _add	macro
00000000                            		insn2op add.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _addq	macro
00000000                            		insn2op addq.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _cmp	macro
00000000                            		insn2op cmp.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _cmpi	macro
00000000                            		insn2op cmpi.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _clr	macro
00000000                            		insn1op clr.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _tst	macro
00000000                            		insn1op tst.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            	endm
00000000                            		
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstrError, ZeroDivideError, CHKExceptionError, TRAPVError
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViolation, TraceError, LineAEmulation, LineFEmulation
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000060 0000 0000 0000 0000 0000+  		dc.l SpuriousException, ErrorTrap, ErrorTrap, ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM, ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l TrapVector, TrapVector, TrapVector, TrapVector
00000090 0000 0000 0000 0000 0000+  		dc.l TrapVector, TrapVector, TrapVector, TrapVector
000000A0 0000 0000 0000 0000 0000+  		dc.l TrapVector, TrapVector, TrapVector, TrapVector
000000B0 0000 0000 0000 0000 0000+  		dc.l TrapVector, TrapVector, TrapVector, TrapVector
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3230+  Date:		dc.b '(C)SEGA 2012.SEP' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG  4 EP.1        ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG  4 EP.1        ' ; International name
00000180 474D 2030 3030 3032 3130+  		dc.b 'GM 00002109-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 5241 F820                  SRAMSupport:	dc.l $5241F820		; change to $5241F820 (NOT $5241E020) to create SRAM
000001B4 0020 0001                  		dc.l $200001		; SRAM start
000001B8 0020 03FF                  		dc.l $2003FF		; SRAM end
000001BC 5241                               dc.b    'RA'    ; external ram
000001BE F8                                 dc.b    $F8    ; don't clear + odd bytes
000001BF 20                                 dc.b    $20    ; sram
000001C0                            ExRAMAddr:
000001C0 0020 0001 0020 3FFF                dc.l    $200001, $203FFF; start, end
000001C8 2020 2020 2020 2020 2020+  ModemSupport	dc.b '            '	; Modem support
000001D4 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
00000208 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000218                            
00000218                            ; ===========================================================================
00000218                            
00000218                            ErrorTrap:
00000218 4E71                       		nop
0000021A 4E71                       		nop
0000021C 60FA                       		bra.s	ErrorTrap
0000021E                            
0000021E                            EntryPoint:
0000021E 4FF8 FE00                  		lea	($FFFFFE00).w,sp
00000222 4AB9 00A1 0008             		tst.l	($A10008).l
00000228 6600                       		bne.s	PortA_Ok
0000022A 4A79 00A1 000C             		tst.w	($A1000C).l
00000230                            		
00000230                            PortA_Ok:
00000230 6600 0000                  		bne.w	PortC_Ok	; in case of a soft reset
00000234 4BFA 0000                  		lea	InitArray(pc),a5
00000238 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000023C 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000240 1029 EF01                  		move.b	$A10001-$A11100(a1),d0
00000244 0200 000F                  		andi.b	#$F,d0
00000248 6700                       		beq.s	SkipSecurity
0000024A 237C 5345 4741 2F00        		move.l	#'SEGA',$A14000-$A11100(a1)
00000252                            
00000252                            SkipSecurity:
00000252 3014                       		move.w	(a4),d0
00000254 7000                       		moveq	#0,d0
00000256 2C40                       		movea.l	d0,a6
00000258 4E66                       		move.l	a6,usp
0000025A 7200                       		moveq   #VDPInitValues_End-VDPInitValues-1,d1 ; run the following loop $18 times
0000025C                            
0000025C                            VDPInitLoop:
0000025C 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
0000025E 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000260 DA47                       		add.w	d7,d5		; next register
00000262 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000266 289D                       		move.l	(a5)+,(a4)
00000268 3680                       		move.w	d0,(a3)		; clear	the screen
0000026A 3287                       		move.w	d7,(a1)		; stop the Z80
0000026C 3487                       		move.w	d7,(a2)		; reset	the Z80
0000026E                            
0000026E                            WaitForZ80:
0000026E 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000270 66FC                       		bne.s	WaitForZ80	; if not, branch
00000272 7400                       		moveq	#Z80StartupCodeEnd-Z80StartupCodeBegin-1,d2
00000274                            
00000274                            Z80InitLoop:
00000274 10DD                       		move.b	(a5)+,(a0)+
00000276 51CA FFFC                  		dbf	d2,Z80InitLoop
0000027A 3480                       		move.w	d0,(a2)
0000027C 3280                       		move.w	d0,(a1)		; start	the Z80
0000027E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000280                            
00000280                            ClrRAMLoop:
00000280 2D00                       		move.l	d0,-(a6)
00000282 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000286 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
00000288 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000028A 761F                       		moveq	#$1F,d3
0000028C                            
0000028C                            ClrCRAMLoop:
0000028C 2680                       		move.l	d0,(a3)
0000028E 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000292 289D                       		move.l	(a5)+,(a4)
00000294 7813                       		moveq	#$13,d4
00000296                            
00000296                            ClrVDPStuff:
00000296 2680                       		move.l	d0,(a3)
00000298 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000029C 7A00                       		moveq   #PSGInitValues_End-PSGInitValues-1,d5
0000029E                            
0000029E                            PSGInitLoop:
0000029E 175D 0011                  		move.b	(a5)+,$11(a3)
000002A2 51CD FFFA                  		dbf	d5,PSGInitLoop
000002A6 3480                       		move.w	d0,(a2)
000002A8 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
000002AC 46FC 2700                  		disable_ints	; set the sr
000002B0                            
000002B0                            PortC_Ok:
000002B0                            ;		bra.w	GameProgram
000002B0                            
000002B0                            ;Init_SkipPowerOn:
000002B0 6000 0000                  		bra.w	Test_LockOn
000002B4                            		
000002B4                            ;Z80StartupCodeBegin: ; loc_2CA:
000002B4                            ;    if (*)+$26 < $10000
000002B4                            ; 
000002B4                            ;    else ; due to an address range limitation I could work around but don't think is worth doing so:
000002B4                            ;	message "Warning: using pre-assembled Z80 startup code."
000002B4                            ;    	dc.w $AF01,$D91F,$1127,$0021,$2600,$F977,$EDB0,$DDE1,$FDE1,$ED47,$ED4F,$D1E1,$F108,$D9C1,$D1E1,$F1F9,$F3ED,$5636,$E9E9
000002B4                            ;    endif
000002B4                            ; ===========================================================================
000002B4 8000                       InitArray:	dc.w $8000		; VDP register start number
000002B6 3FFF                       		dc.w $3FFF		; size of RAM/4
000002B8 0100                       		dc.w $100		; VDP register diff
000002BA                            
000002BA 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
000002BE 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002C2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002C6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002CA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002CE                            VDPInitValues:  ; values for VDP registers
000002CE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002CF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002D0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002D1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002D2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002D3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002D4 00                         		dc.b 0
000002D5 00                         		dc.b 0
000002D6 00                         		dc.b 0
000002D7 00                         		dc.b 0
000002D8 FF                         		dc.b $FF
000002D9 00                         		dc.b 0
000002DA 81                         		dc.b $81
000002DB 37                         		dc.b $37
000002DC 00                         		dc.b 0
000002DD 01                         		dc.b 1
000002DE 01                         		dc.b 1
000002DF 00                         		dc.b 0
000002E0 00                         		dc.b 0
000002E1 FF                         		dc.b $FF
000002E2 FF                         		dc.b $FF
000002E3 00                         		dc.b 0
000002E4 00                         		dc.b 0
000002E5 80                         		dc.b $80
000002E6                            VDPInitValues_End:
000002E6 4000 0080                  		dc.l $40000080
000002EA                            	;	dc.b $AF
000002EA                            	;	dc.b 1
000002EA                            	;	dc.b $D9
000002EA                            	;	dc.b $1F
000002EA                            	;	dc.b $11
000002EA                            	;	dc.b $27
000002EA                            	;	dc.b 0
000002EA                            	;	dc.b $21
000002EA                            	;	dc.b $26
000002EA                            	;	dc.b 0
000002EA                            	;	dc.b $F9
000002EA                            	;	dc.b $77
000002EA                            	;	dc.b $ED
000002EA                            	;	dc.b $B0
000002EA                            	;	dc.b $DD
000002EA                            	;	dc.b $E1
000002EA                            	;	dc.b $FD
000002EA                            	;	dc.b $E1
000002EA                            	;	dc.b $ED
000002EA                            	;	dc.b $47
000002EA                            	;	dc.b $ED
000002EA                            	;	dc.b $4F
000002EA                            	;	dc.b $D1
000002EA                            	;	dc.b $E1
000002EA                            	;	dc.b $F1
000002EA                            	;	dc.b 8
000002EA                            	;	dc.b $D9
000002EA                            	;	dc.b $C1
000002EA                            	;	dc.b $D1
000002EA                            	;	dc.b $E1
000002EA                            	;	dc.b $F1
000002EA                            	;	dc.b $F9
000002EA                            	;	dc.b $F3
000002EA                            	;	dc.b $ED
000002EA                            	;	dc.b $56
000002EA                            	;	dc.b $36
000002EA                            	;	dc.b $E9
000002EA                            	;	dc.b $E9
000002EA                            ;		dc.l $81048F02
000002EA                            ;		dc.l $C0000000
000002EA                            ;		dc.l $40000010
000002EA                            ;		dc.b $9F
000002EA                            ;		dc.b $BF
000002EA                            ;		dc.b $DF
000002EA                            ;		dc.b $FF
000002EA                            
000002EA                            ;		dc.b $AF,  1,$D9,$1F,$11,$27,  0,$21,$26,  0,$F9,$77,$ED,$B0,$DD,$E1; 0	; Z80 instructions
000002EA                            ;		dc.b $FD,$E1,$ED,$47,$ED,$4F,$D1,$E1,$F1,  8,$D9,$C1,$D1,$E1,$F1,$F9; 16
000002EA                            ;		dc.b $F3,$ED,$56,$36,$E9,$E9; 32
000002EA                            
000002EA                            Z80StartupCodeBegin: ; loc_2CA:
000002EA                            ;    if (*)+$26 < $10000
000002EA                            ;    CPU Z80 ; start compiling Z80 code
000002EA                            ;    phase 0 ; pretend we're at address 0
000002EA                            ;	xor     a	; clear a to 0
000002EA                            ;	ld      bc,((Z80_RAM_End-Z80_RAM)-zStartupCodeEndLoc)-1 ; prepare to loop this many times
000002EA                            ;	ld      de,zStartupCodeEndLoc+1	; initial destination address
000002EA                            ;	ld      hl,zStartupCodeEndLoc	; initial source address
000002EA                            ;	ld      sp,hl	; set the address the stack starts at
000002EA                            ;	ld      (hl),a	; set first byte of the stack to 0
000002EA                            ;	ldir    	; loop to fill the stack (entire remaining available Z80 RAM) with 0
000002EA                            ;	pop     ix	; clear ix
000002EA                            ;	pop     iy	; clear iy
000002EA                            ;	ld      i,a	; clear i
000002EA                            ;	ld      r,a	; clear r
000002EA                            ;	pop     de	; clear de
000002EA                            ;	pop     hl	; clear hl
000002EA                            ;	pop     af	; clear af
000002EA                            ;	ex      af,af'	; swap af with af'
000002EA                            ;	exx		; swap bc/de/hl with their shadow registers too
000002EA                            ;	pop     bc	; clear bc
000002EA                            ;	pop     de	; clear de
000002EA                            ;	pop     hl	; clear hl
000002EA                            ;	pop     af	; clear af
000002EA                            ;	ld      sp,hl	; clear sp
000002EA                            ;	di      	; clear iff1 (for interrupt handler)
000002EA                            ;	im      1	; interrupt handling mode = 1
000002EA                            ;	ld      (hl),0E9H ; replace the first instruction with a jump to itself
000002EA                            ;	jp      (hl)      ; jump to the first instruction (to stay there forever)
000002EA                            ;    zStartupCodeEndLoc:
000002EA                            ;    dephase ; stop pretending
000002EA                            ;    CPU 68000	; switch back to 68000 code
000002EA                            ;    padding off ; unfortunately our flags got reset so we have to set them again...
000002EA                            ;    listing off
000002EA                            ;    supmode on
000002EA                            ;    else ; due to an address range limitation I could work around but don't think is worth doing so:
000002EA                            ;	message "Warning: using pre-assembled Z80 startup code."
000002EA AF01 D91F 1127 0021 2600+      	dc.w $AF01,$D91F,$1127,$0021,$2600,$F977,$EDB0,$DDE1,$FDE1,$ED47,$ED4F,$D1E1,$F108,$D9C1,$D1E1,$F1F9,$F3ED,$5636,$E9E9
00000310                            ;    endif
00000310                            Z80StartupCodeEnd:
00000310                            
00000310 8104                       	dc.w	$8104	; value for VDP display mode
00000312 8F02                       	dc.w	$8F02	; value for VDP increment
00000314 C000 0000                  	dc.l	$C0000000	; value for CRAM write mode
00000318 4000 0010                  	dc.l	$40000010	; unknown (VSRAM?)
0000031C                            
0000031C                            PSGInitValues:
0000031C 9FBF DFFF                          dc.b    $9F,$BF,$DF,$FF ; values for PSG channel volumes
00000320                            PSGInitValues_End:
00000320                            ; ===========================================================================
00000320                            
00000320                            Test_LockOn:
00000320                            ;		tst.w	($C00004).l
00000320                            ;		move.w	#$4EF9,($FFFFFFF0).w	; machine code for jmp
00000320                            ;		move.l	#VDPInitLoop,($FFFFFFF2).w
00000320                            ;		move.w	#$4EF9,($FFFFFFF6).w
00000320                            ;		move.l	#PSGInitLoop,($FFFFFFF8).w
00000320                            
00000320                            GameProgram:
00000320                                   ;move.b  #2,($A130F1).l ; should this be used?
00000320                                    ;move.b  #1,($A130F3).l
00000320                                    ;move.b  #2,($A130F5).l
00000320                                    ;move.b  #3,($A130F7).l
00000320                                    ;move.b  #4,($A130F9).l
00000320                                    ;move.b  #5,($A130FB).l
00000320                                    ;move.b  #6,($A130FD).l
00000320                                    ;move.b  #7,($A130FF).l
00000320 4A79 00C0 0004             		tst.w	($C00004).l
00000326 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000032E 6700                       		beq.s	CheckSumCheck
00000330 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w	; has checksum routine already run?
00000338 6700 0000                  		beq.w	GameInit				; if yes, branch
0000033C                            
0000033C                            CheckSumCheck:
0000033C 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000340 7E00                       		moveq	#0,d7
00000342 3C3C 007F                  		move.w	#$7F,d6
00000346                            
00000346                            loc_348:
00000346 2CC7                       		move.l	d7,(a6)+
00000348 51CE FFFC                  		dbf	d6,loc_348
0000034C 1039 00A1 0001             		move.b	($A10001).l,d0
00000352 0200 00C0                  		andi.b	#$C0,d0
00000356 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035A 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000362                            
00000362                            GameInit:
00000362 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000368 7E00                       		moveq	#0,d7
0000036A 3C3C 3F7F                  		move.w	#$3F7F,d6
0000036E                            
0000036E                            GameClrRAM:
0000036E 2CC7                       		move.l	d7,(a6)+
00000370 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000374                            ;		bsr.w	DetectPAL
00000374 6100 0000                  		bsr.w	VDPSetupGame
00000378 6100 0000                  		bsr.w	JmpTo_SoundDriverLoad
0000037C 6100 0000                  		bsr.w	JoypadInit
00000380 4EB9 0000 0000             		jsr	(loadlivesLS).l
00000386 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000038C                            
0000038C                            MainGameLoop:
0000038C 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
00000390 0240 007C                  		andi.w	#$7C,d0
00000394 207B 0000                  		move.l	GameModeArray(pc,d0.w),a0	; same system of the Sonic 3 GameMode
00000398 4E90                       		jsr	(a0)							; jump to apt location in ROM
0000039A 60F0                       		bra.s	MainGameLoop
0000039C                            ; ===========================================================================
0000039C                            ;dword_62A8E:	dc.l $D8D0027		; DATA XREF: ROM:loc_62A54r
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C 0000 0000                  		dc.l	SegaScreen	; Sega Screen ($00)
000003A0                            ; ===========================================================================
000003A0 0000 0000                  		dc.l	TitleScreen	; Title	Screen ($04)
000003A4                            ; ===========================================================================
000003A4 0000 0000                  		dc.l	Level		; Demo Mode ($08)
000003A8                            ; ===========================================================================
000003A8 0000 0000                  		dc.l	Level		; Normal Level ($0C)
000003AC                            ; ===========================================================================
000003AC 0000 0000                  		dc.l	SpecialStage	; Special Stage	($10)
000003B0                            ; ===========================================================================
000003B0 0000 0000                  		dc.l	JumpToSegaScreen	; Back to SEGA screen. Was continue ($14)
000003B4                            ; ===========================================================================
000003B4 0000 0000                  		dc.l	EndingSequence	; End of game sequence ($18)
000003B8                            ; ===========================================================================
000003B8 0000 0000                  		dc.l	Credits		; Credits ($1C)
000003BC                            ; ===========================================================================
000003BC 0000 0000                  		dc.l	JumpToSegaScreen	; Splash ($20)
000003C0                            ; ===========================================================================
000003C0 0000 0000                  		dc.l	SplashScreen2	; Sonic Team Splash ($24)
000003C4                            ; ===========================================================================
000003C4 0000 0000                  		dc.l	JumpToSegaScreen	; Basic select character screen ($28)
000003C8                            ; ===========================================================================
000003C8 0000 0000                  		dc.l	MenuScreen		; Options Menu ($2C)
000003CC                            ; ===========================================================================
000003CC 0000 0000                  		dc.l	SSRGScreen	; Sonic Retro/SSRG Splash ($30)
000003D0                            ; ===========================================================================
000003D0 0000 0000                  		dc.l	JumpToSegaScreen	; Sonic Retro/SSRG Splash ($34)
000003D4                            ; ===========================================================================
000003D4 0000 0000                  		dc.l	MenuScreen	; LevelSelect S2 ($38)
000003D8                            ; ===========================================================================
000003D8 0000 0000                  		dc.l	DAC_Player	; DAC Player ($3C)
000003DC                            ; ===========================================================================
000003DC 4E75                       		rts	
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            JumpToSegaScreen:
000003DE 11FC 0000 F600             		move.b	#0,($FFFFF600).w
000003E4 4E75                       		rts
000003E6                            
000003E6                            ;JumpToLevelSelect:
000003E6                            ;		jmp	Level_Select_Menu
000003E6                            ;		rts
000003E6                            ;CheckSumError:
000003E6                            ;		bsr.w	VDPSetupGame
000003E6                            ;		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003E6                            ;		moveq	#$3F,d7
000003E6                            ;
000003E6                            ;CheckSum_Red:
000003E6                            ;		move.w	#$E,($C00000).l	; fill screen with colour red
000003E6                            ;		dbf	d7,CheckSum_Red	; repeat $3F more times
000003E6                            ;
000003E6                            ;CheckSum_Loop:
000003E6                            ;		bra.s	CheckSum_Loop
000003E6                            
000003E6                            ; ===========================================================================
000003E6                            ; New error handler code (debugger) courtesy of Flamewing
000003E6                            	include "DebuggerBlob.asm"
000003E6                            ; These get called from the binary blob. Do not edit them, or move them
000003E6                            ; relative to the binary blobs below.
000003E6 4EF9 0000 0000             	jmp	(KosDec).l
000003EC 4EF9 0000 0000             	jmp	(EniDec).l
000003F2                            
000003F2                            ; This is the terminal code and graphics, plus the disassembler and the plane
000003F2                            ; mappings for the debugger.
000003F2                            	incbin "_debugger/Part1.bin"
00001C9A                            
00001C9A =00000000                  WHITE EQU 0<<13
00001C9A =00002000                  BLUE  EQU 1<<13
00001C9A =00004000                  RED   EQU 2<<13
00001C9A =00006000                  GREEN EQU 3<<13
00001C9A                            ; Strings are word arrays: length followed by characters. You can change the
00001C9A                            ; length, but do NOT change the number of characters! The wasted space is the
00001C9A                            ; price to pay for a binary blob...
00001C9A                            ; The high byte of each word used for a character is the palette line to use:
00001C9A                            HackerName:
00001C9A 000B                       	dc.w 11
00001C9C 0059 006F 0075 0072 0020+  	dc.w WHITE|'Y',	 WHITE|'o',	 WHITE|'u',	 WHITE|'r',	 WHITE|' ',	 WHITE|'N'
00001CA8 0061 006D 0065 0020 0020   	dc.w WHITE|'a',	 WHITE|'m',	 WHITE|'e',	 WHITE|' ',	 WHITE|' '
00001CB2                            	even
00001CB2                            EMailmsg:
00001CB2 0021                       	dc.w 33
00001CB4 2079 206F 2075 2072 202E+  	dc.w BLUE|'y',	BLUE|'o',	BLUE|'u',	BLUE|'r',	BLUE|'.',	BLUE|'e'
00001CC0 206D 2061 2069 206C 2040+  	dc.w BLUE|'m',	BLUE|'a',	BLUE|'i',	BLUE|'l',	BLUE|'@',	BLUE|'s'
00001CCC 2065 2072 2076 2065 2072+  	dc.w BLUE|'e',	BLUE|'r',	BLUE|'v',	BLUE|'e',	BLUE|'r',	BLUE|'.'
00001CD8 2064 206F 206D 2061 2069+  	dc.w BLUE|'d',	BLUE|'o',	BLUE|'m',	BLUE|'a',	BLUE|'i',	BLUE|'n'
00001CE4 2020 2020 2020 2020 2020+  	dc.w BLUE|' ',	BLUE|' ',	BLUE|' ',	BLUE|' ',	BLUE|' ',	BLUE|' '
00001CF0 2020 2020 2020             	dc.w BLUE|' ',	BLUE|' ',	BLUE|' '
00001CF6                            	even
00001CF6                            
00001CF6                            ; Do not move or add padding between the code that follows. The debugger is
00001CF6                            ; split into these many parts because asm68k sucks.
00001CF6                            BusErrorMsg:
00001CF6                            	incbin "_debugger/Part2.bin"
000021A0                            
000021A0                            BusError:
000021A0                            	incbin "_debugger/Part3.bin"
000021BA                            
000021BA                            AddressError:
000021BA                            	incbin "_debugger/Part4.bin"
000021D4                            
000021D4                            TraceError:
000021D4                            	incbin "_debugger/Part5.bin"
000021F0                            
000021F0                            SpuriousException:
000021F0                            	incbin "_debugger/Part6.bin"
0000220C                            
0000220C                            ZeroDivideError:
0000220C                            	incbin "_debugger/Part7.bin"
0000222C                            
0000222C                            CHKExceptionError:
0000222C                            	incbin "_debugger/Part8.bin"
0000224C                            
0000224C                            TRAPVError:
0000224C                            	incbin "_debugger/Part9.bin"
0000226C                            
0000226C                            IllegalInstrError:
0000226C                            	incbin "_debugger/PartA.bin"
00002288                            
00002288                            PrivilegeViolation:
00002288                            	incbin "_debugger/PartB.bin"
000022A4                            
000022A4                            LineAEmulation:
000022A4                            	incbin "_debugger/PartC.bin"
000022C0                            
000022C0                            LineFEmulation:
000022C0                            	incbin "_debugger/PartD.bin"
000022DC                            
000022DC                            TrapVector:
000022DC                            	incbin "_debugger/PartE.bin"
00002352                            
00002352                            ; Edit this to something sensible. One suggestion is the SVN revision.
00002352                            RevisionNumber:
00002352 0001                       	dc.w	1
00002354                            	incbin "_debugger/PartF.bin"
000029AC                            
000029AC                            
000029AC                            
000029AC                            ; ===========================================================================
000029AC                            
000029AC                            ;Art_NewText:	incbin	#artunc\menutextnew.bin	; text used in error messages
000029AC                            ;		even
000029AC                            
000029AC                            ; =============== S U B R O U T I N E =======================================
000029AC                            
000029AC                            HudUpdateAlways:
000029AC 0C38 0004 F600             		cmpi.b	#$4,(Game_Mode).w
000029B2 6F00                       		ble.s	loc_hud_noupdate
000029B4                            ;		cmpi.b	#$2C,(Game_Mode).w
000029B4                            ;		beq.s	loc_B64_2
000029B4                            ;		tst.b	(Update_HUD_timer).w
000029B4                            ;		beq.w	loc_B64_2
000029B4 11FC 0080 FE1C             		move.b	#-$80,(Update_HUD_Lives).w
000029BA                            ;		bcc.w	loc_B64_2
000029BA                            loc_hud_noupdate:
000029BA 4E75                       		rts
000029BC                            
000029BC                            ; =============== S U B R O U T I N E =======================================
000029BC                            
000029BC                            ; End of function DetectPAL
000029BC                            
000029BC                            ; ===========================================================================
000029BC                            
000029BC                            loc_B10:				; XREF: Vectors
000029BC 4E71                       		nop
000029BE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000029C2 4A38 F62A                  		tst.b	($FFFFF62A).w
000029C6 6700 0000                  		beq.w	VBlank_Sub00
000029CA                            ;		bcc.w	go2
000029CA                            		
000029CA 3039 00C0 0004             go2:	move.w	($C00004).l,d0
000029D0 0240 0008                  		andi.w	#8,d0
000029D4 67F4                       		beq.s	go2
000029D6 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000029E0 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000029E8 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
000029EE 6700                       		beq.s	loc_B42
000029F0 303C 0700                  		move.w	#$700,d0
000029F4                            loc_B3E:
000029F4 51C8 FFFE                  		dbf	d0,loc_B3E
000029F8                            loc_B42:
000029F8 1038 F62A                  		move.b	($FFFFF62A).w,d0
000029FC 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00002A02 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00002A08 0240 003E                  		andi.w	#$3E,d0
00002A0C 303B 0000                  		move.w	VBlank_Routines(pc,d0.w),d0
00002A10 4EBB 0000                  		jsr	VBlank_Routines(pc,d0.w)
00002A14                            
00002A14                            loc_B5E:				; XREF: loc_B88
00002A14 4E71                       		nop
00002A16                            loc_B64:                               ; CODE XREF: ROM:00004846j
00002A16                                                                    ; ROM:00004854j
00002A16 4EB8 29AC                  		jsr		HudUpdateAlways
00002A1A 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00002A1E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00002A22 4E73                       		rte	
00002A24                            ; ===========================================================================
00002A24                            
00002A24                            
00002A24                            
00002A24                            
00002A24                            VBlank_Routines:
00002A24 0000                       		dc.w VBlank_Sub00-VBlank_Routines ; $00
00002A26 0000                       		dc.w VBlank_Sub02-VBlank_Routines ; $02
00002A28 0000                       		dc.w VBlank_Sub04-VBlank_Routines ; $04
00002A2A 0000                       		dc.w VBlank_Sub06-VBlank_Routines ; $06
00002A2C 0000                       		dc.w VBlank_Sub08-VBlank_Routines ; $08
00002A2E 0000                       		dc.w VBlank_Sub0A-VBlank_Routines ; $0A
00002A30 0000                       		dc.w VBlank_Sub0C-VBlank_Routines ; $0C
00002A32 0000                       		dc.w VBlank_Sub0E-VBlank_Routines ; $0E
00002A34 0000                       		dc.w VBlank_Sub10-VBlank_Routines ; $10
00002A36 0000                       		dc.w VBlank_Sub12-VBlank_Routines ; $12
00002A38 0000                       		dc.w VBlank_Sub14-VBlank_Routines ; $14
00002A3A 0000                       		dc.w VBlank_Sub16-VBlank_Routines ; $16
00002A3C 0000                       		dc.w VBlank_Sub0C-VBlank_Routines ; $18
00002A3E                            ; ===========================================================================
00002A3E                            
00002A3E                            ;loc_B88:				; XREF: VBlank; VBlank_Routines
00002A3E                            VBlank_Sub00:
00002A3E 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w	; is mode pre-Level?
00002A44 6700                       		beq.s	loc_B9A			; if yes, branch
00002A46 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w	; is mode Level?
00002A4C 6600 FFC6                  		bne.w	loc_B5E			; if yes, branch
00002A50                            
00002A50                            loc_B9A:
00002A50 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	; is level LZ ?
00002A56 6600 FFBC                  		bne.w	loc_B5E			; if not, branch
00002A5A 3039 00C0 0004             		move.w	($C00004).l,d0
00002A60 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00002A66 6700                       		beq.s	loc_BBA			; if not, branch
00002A68 303C 0700                  		move.w	#$700,d0
00002A6C 51C8 FFFE                  		dbf	d0,*			; delay processor
00002A70                            
00002A70                            loc_BBA:
00002A70 31FC 0001 F644             		move.w	#1,($FFFFF644).w	; enable HBlank
00002A76                            ;		move.w	#$100,($A11100).l
00002A76                            ;
00002A76                            ;loc_BC8:
00002A76                            ;		btst	#0,($A11100).l
00002A76                            ;		bne.s	loc_BC8
00002A76 4A38 F64E                  		tst.b	($FFFFF64E).w		; is water above the top of the screen?
00002A7A 6600                       		bne.s	loc_BFE			; if yes, branch
00002A7C 4BF9 00C0 0004             		lea	($C00004).l,a5
00002A82 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002A88 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002A8E 3ABC 977F                  		move.w	#$977F,(a5)
00002A92 3ABC C000                  		move.w	#$C000,(a5)
00002A96 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002A9C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002AA0 6000                       		bra.s	loc_C22
00002AA2                            ; ===========================================================================
00002AA2                            
00002AA2                            loc_BFE:				; XREF: loc_BC8
00002AA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00002AA8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002AAE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00002AB4 3ABC 977F                  		move.w	#$977F,(a5)
00002AB8 3ABC C000                  		move.w	#$C000,(a5)
00002ABC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002AC2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002AC6                            
00002AC6                            loc_C22:				; XREF: loc_BC8
00002AC6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00002ACA                            ;		move.w	#0,($A11100).l
00002ACA 6000 FF48                  		bra.w	loc_B5E
00002ACE                            ; ===========================================================================
00002ACE                            
00002ACE                            ;loc_C32:
00002ACE                            VBlank_Sub02:				; XREF: VBlank_Routines
00002ACE 6100 0000                  		bsr.w	sub_106E
00002AD2                            
00002AD2                            ;loc_F9A:
00002AD2                            VBlank_Sub14:				; XREF: VBlank_Routines
00002AD2 4A78 FC20                  		tst.w	($FFFFFC20).w
00002AD6 6700 0000                  		beq.w	locret_C42
00002ADA 5378 FC20                  		subq.w	#1,($FFFFFC20).w
00002ADE                            
00002ADE                            locret_C42:
00002ADE 4E75                       		rts	
00002AE0                            ; ===========================================================================
00002AE0                            
00002AE0                            ;loc_C44:
00002AE0                            VBlank_Sub04:				; XREF: VBlank_Routines
00002AE0 6100 0000                  		bsr.w	sub_106E
00002AE4 4EB9 0000 0000             		jsr	sub_6886
00002AEA 6100 0000                  		bsr.w	sub_1642
00002AEE 4A78 FC20                  		tst.w	($FFFFFC20).w		; is there time	left on	the demo?
00002AF2 6700 0000                  		beq.w	locret_C5C		; if time is over, branch
00002AF6 5378 FC20                  		subq.w	#1,($FFFFFC20).w	; subtract 1 from time left
00002AFA                            
00002AFA                            locret_C5C:
00002AFA 4E75                       		rts	
00002AFC                            ; ===========================================================================
00002AFC                            
00002AFC                            ;loc_C5E:
00002AFC                            VBlank_Sub06:				; XREF: VBlank_Routines
00002AFC 6100 0000                  		bsr.w	sub_106E
00002B00 4E75                       		rts
00002B02                            ; ===========================================================================
00002B02                            
00002B02                            ;loc_C64:
00002B02                            VBlank_Sub10:				; XREF: VBlank_Routines
00002B02 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00002B08 6700 0000                  		beq.w	VBlank_Sub0A		; if yes, branch
00002B0C                            
00002B0C                            ;loc_C5E:
00002B0C                            VBlank_Sub08:				; XREF: VBlank_Routines
00002B0C                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002B0C                            ;
00002B0C                            ;loc_C76:
00002B0C                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002B0C                            ;		bne.s	loc_C76		; if not, branch
00002B0C 6100 0000                  		bsr.w	ReadJoypads
00002B10 4A38 F64E                  		tst.b	($FFFFF64E).w
00002B14 6600                       		bne.s	loc_CB0
00002B16 4BF9 00C0 0004             		lea	($C00004).l,a5
00002B1C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002B22 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002B28 3ABC 977F                  		move.w	#$977F,(a5)
00002B2C 3ABC C000                  		move.w	#$C000,(a5)
00002B30 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002B36 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002B3A 6000                       		bra.s	loc_CD4
00002B3C                            ; ===========================================================================
00002B3C                            
00002B3C                            loc_CB0:				; XREF: loc_C76
00002B3C 4BF9 00C0 0004             		lea	($C00004).l,a5
00002B42 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002B48 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00002B4E 3ABC 977F                  		move.w	#$977F,(a5)
00002B52 3ABC C000                  		move.w	#$C000,(a5)
00002B56 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002B5C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002B60                            
00002B60                            loc_CD4:				; XREF: loc_C76
00002B60 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00002B64 4BF9 00C0 0004             		lea	($C00004).l,a5
00002B6A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002B70 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002B76 3ABC 977F                  		move.w	#$977F,(a5)
00002B7A 3ABC 7C00                  		move.w	#$7C00,(a5)
00002B7E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002B84 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002B88 4BF9 00C0 0004             		lea	($C00004).l,a5
00002B8E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002B94 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002B9A 3ABC 977F                  		move.w	#$977F,(a5)
00002B9E 3ABC 7800                  		move.w	#$7800,(a5)
00002BA2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002BA8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002BAC 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00002BB2                            
00002BB2                            loc_D50:
00002BB2                            ;		move.w	#0,($A11100).l
00002BB2 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00002BB8 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00002BBE 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00002BC4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00002BCA 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00002BD0 6400                       		bcc.s	Demo_Time
00002BD2 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00002BD8 588F                       		addq.l	#4,sp
00002BDA 6000 FE3A                  		bra.w	loc_B64
00002BDE                            
00002BDE                            ; ---------------------------------------------------------------------------
00002BDE                            ; Subroutine to	run a demo for an amount of time
00002BDE                            ; ---------------------------------------------------------------------------
00002BDE                            
00002BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BDE                            
00002BDE                            
00002BDE                            Demo_Time:				; XREF: loc_D50; HBlank
00002BDE 4EB9 0000 0000             		jsr	LoadTilesAsYouMove
00002BE4 4EB9 0000 0000             		jsr	AniArt_Load
00002BEA 4EB9 0000 0000             		jsr	HudUpdate
00002BF0 6100 0000                  		bsr.w	sub_165E
00002BF4 4A78 FC20                  		tst.w	($FFFFFC20).w	; is there time	left on	the demo?
00002BF8 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00002BFC 5378 FC20                  		subq.w	#1,($FFFFFC20).w ; subtract 1 from time	left
00002C00                            
00002C00                            Demo_TimeEnd:
00002C00 4E75                       		rts	
00002C02                            ; End of function Demo_Time
00002C02                            
00002C02                            ; ===========================================================================
00002C02                            
00002C02                            ;loc_DA6:
00002C02                            VBlank_Sub0A:				; XREF: VBlank_Routines
00002C02                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002C02                            ;
00002C02                            ;loc_DAE:
00002C02                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002C02                            ;		bne.s	loc_DAE		; if not, branch
00002C02 6100 0000                  		bsr.w	ReadJoypads
00002C06 4BF9 00C0 0004             		lea	($C00004).l,a5
00002C0C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002C12 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002C18 3ABC 977F                  		move.w	#$977F,(a5)
00002C1C 3ABC C000                  		move.w	#$C000,(a5)
00002C20 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002C26 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002C2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00002C30 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002C36 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002C3C 3ABC 977F                  		move.w	#$977F,(a5)
00002C40 3ABC 7800                  		move.w	#$7800,(a5)
00002C44 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002C4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002C4E 4BF9 00C0 0004             		lea	($C00004).l,a5
00002C54 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002C5A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002C60 3ABC 977F                  		move.w	#$977F,(a5)
00002C64 3ABC 7C00                  		move.w	#$7C00,(a5)
00002C68 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002C6E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002C72                            ;		move.w	#0,($A11100).l
00002C72 4EB9 0000 0000             		jsr	PalCycle_SS
00002C78 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00002C7E 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00002C84 6400                       		bcc.s	@update
00002C86 6000 0000                  		bra.w	locret_E70
00002C8A                            		
00002C8A                            	@update:
00002C8A 4EB9 0000 0000             		jsr	SS_LoadWalls
00002C90                            ;		jsr	HUDUpdate
00002C90                            		
00002C90                            loc_E64:
00002C90 4A78 FC20                  		tst.w	($FFFFFC20).w
00002C94 6700 0000                  		beq.w	locret_E70
00002C98 5378 FC20                  		subq.w	#1,($FFFFFC20).w
00002C9C                            
00002C9C                            locret_E70:
00002C9C 4E75                       		rts	
00002C9E                            ; ===========================================================================
00002C9E                            
00002C9E                            ;loc_E72:
00002C9E                            VBlank_Sub0C:				; XREF: VBlank_Routines
00002C9E                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002C9E                            ;
00002C9E                            ;loc_E7A:
00002C9E                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002C9E                            ;		bne.s	loc_E7A		; if not, branch
00002C9E 6100 0000                  		bsr.w	ReadJoypads
00002CA2 4A38 F64E                  		tst.b	($FFFFF64E).w
00002CA6 6600                       		bne.s	loc_EB4
00002CA8 4BF9 00C0 0004             		lea	($C00004).l,a5
00002CAE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002CB4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002CBA 3ABC 977F                  		move.w	#$977F,(a5)
00002CBE 3ABC C000                  		move.w	#$C000,(a5)
00002CC2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002CC8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002CCC 6000                       		bra.s	loc_ED8
00002CCE                            ; ===========================================================================
00002CCE                            
00002CCE                            loc_EB4:				; XREF: loc_E7A
00002CCE 4BF9 00C0 0004             		lea	($C00004).l,a5
00002CD4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002CDA 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00002CE0 3ABC 977F                  		move.w	#$977F,(a5)
00002CE4 3ABC C000                  		move.w	#$C000,(a5)
00002CE8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002CEE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002CF2                            
00002CF2                            loc_ED8:				; XREF: loc_E7A
00002CF2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00002CF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00002CFC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002D02 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002D08                            
00002D08                            loc_EEE:
00002D08 3ABC 977F                  		move.w	#$977F,(a5)
00002D0C 3ABC 7C00                  		move.w	#$7C00,(a5)
00002D10 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002D16 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002D1A 4BF9 00C0 0004             		lea	($C00004).l,a5
00002D20 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002D26 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002D2C 3ABC 977F                  		move.w	#$977F,(a5)
00002D30 3ABC 7800                  		move.w	#$7800,(a5)
00002D34 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002D3A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002D3E 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00002D44                            
00002D44                            loc_F54:
00002D44                            ;		move.w	#0,($A11100).l	; start	the Z80
00002D44 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00002D4A 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00002D50 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00002D56 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00002D5C 4EB9 0000 0000             		jsr	LoadTilesAsYouMove
00002D62 4EB9 0000 0000             		jsr	AniArt_Load
00002D68 4EB9 0000 0000             		jsr	HudUpdate
00002D6E 6100 0000                  		bsr.w	sub_1642
00002D72 4E75                       		rts	
00002D74                            ; ===========================================================================
00002D74                            
00002D74                            ;loc_F8A:
00002D74                            VBlank_Sub0E:				; XREF: VBlank_Routines
00002D74 6100 0000                  		bsr.w	sub_106E
00002D78 5238 F628                  		addq.b	#1,($FFFFF628).w
00002D7C 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00002D82 4E75                       		rts	
00002D84                            ; ===========================================================================
00002D84                            
00002D84                            ;loc_F9A:
00002D84                            VBlank_Sub12:				; XREF: VBlank_Routines
00002D84 6100 0000                  		bsr.w	sub_106E
00002D88 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00002D8C 6000 0000                  		bra.w	sub_1642
00002D90                            ; ===========================================================================
00002D90                            
00002D90                            ;loc_FA6:
00002D90                            VBlank_Sub16:				; XREF: VBlank_Routines
00002D90                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002D90                            ;
00002D90                            ;loc_FAE:
00002D90                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002D90                            ;		bne.s	loc_FAE		; if not, branch
00002D90 6100 0000                  		bsr.w	ReadJoypads
00002D94 4BF9 00C0 0004             		lea	($C00004).l,a5
00002D9A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002DA0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002DA6 3ABC 977F                  		move.w	#$977F,(a5)
00002DAA 3ABC C000                  		move.w	#$C000,(a5)
00002DAE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002DB4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002DB8 4BF9 00C0 0004             		lea	($C00004).l,a5
00002DBE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002DC4 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002DCA 3ABC 977F                  		move.w	#$977F,(a5)
00002DCE 3ABC 7800                  		move.w	#$7800,(a5)
00002DD2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002DD8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002DDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00002DE2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002DE8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002DEE 3ABC 977F                  		move.w	#$977F,(a5)
00002DF2 3ABC 7C00                  		move.w	#$7C00,(a5)
00002DF6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002DFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002E00                            ;		move.w	#0,($A11100).l	; start	the Z80
00002E00 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00002E06                            ;		jsr	sub_1642
00002E06                            loc_1060:
00002E06 4A78 FC20                  		tst.w	($FFFFFC20).w
00002E0A 6700 0000                  		beq.w	locret_106C
00002E0E 5378 FC20                  		subq.w	#1,($FFFFFC20).w
00002E12                            
00002E12                            locret_106C:
00002E12 4E75                       		rts	
00002E14                            
00002E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002E14                            
00002E14                            
00002E14                            sub_106E:				; XREF: VBlank_Sub02; et al
00002E14                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002E14                            ;
00002E14                            ;loc_1076:
00002E14                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002E14                            ;		bne.s	loc_1076	; if not, branch
00002E14 6100 0000                  		bsr.w	ReadJoypads
00002E18 4A38 F64E                  		tst.b	($FFFFF64E).w
00002E1C 6600                       		bne.s	loc_10B0
00002E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00002E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002E2A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002E30 3ABC 977F                  		move.w	#$977F,(a5)
00002E34 3ABC C000                  		move.w	#$C000,(a5)
00002E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002E42 6000                       		bra.s	loc_10D4
00002E44                            ; ===========================================================================
00002E44                            
00002E44                            loc_10B0:				; XREF: sub_106E
00002E44 4BF9 00C0 0004             		lea	($C00004).l,a5
00002E4A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002E50 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00002E56 3ABC 977F                  		move.w	#$977F,(a5)
00002E5A 3ABC C000                  		move.w	#$C000,(a5)
00002E5E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002E64 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002E68                            
00002E68                            loc_10D4:				; XREF: sub_106E
00002E68 4BF9 00C0 0004             		lea	($C00004).l,a5
00002E6E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002E74 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002E7A 3ABC 977F                  		move.w	#$977F,(a5)
00002E7E 3ABC 7800                  		move.w	#$7800,(a5)
00002E82 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002E88 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002E8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00002E92 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002E98 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002E9E 3ABC 977F                  		move.w	#$977F,(a5)
00002EA2 3ABC 7C00                  		move.w	#$7C00,(a5)
00002EA6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002EAC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002EB0                            ;		move.w	#0,($A11100).l	; start	the Z80
00002EB0 4E75                       		rts
00002EB2                            ; End of function sub_106E
00002EB2                            
00002EB2                            ; ---------------------------------------------------------------------------
00002EB2                            ; Subroutine to	move pallets from the RAM to CRAM
00002EB2                            ; ---------------------------------------------------------------------------
00002EB2                            
00002EB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EB2                            
00002EB2                            
00002EB2                            PalToCRAM:
00002EB2 46FC 2700                  		disable_ints
00002EB6 4A78 F644                  		tst.w	($FFFFF644).w
00002EBA 6700                       		beq.s	locret_119C
00002EBC 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00002EC2 48E7 00C0                  		movem.l	a0-a1,-(sp)
00002EC6 43F9 00C0 0000             		lea	($C00000).l,a1
00002ECC 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00002ED0 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00002ED8                            		rept 32
00002ED8                            		move.l	(a0)+,(a1)	; move palette to CRAM (all 64 colors at once)
00002ED8 2298 2298 2298 2298 2298+  		endr
00002F18 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00002F1E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00002F22 4A38 F64F                  		tst.b	($FFFFF64F).w
00002F26 6600                       		bne.s	loc_119E
00002F28                            
00002F28                            locret_119C:
00002F28 4E73                       		rte	
00002F2A                            ; ===========================================================================
00002F2A                            
00002F2A                            loc_119E:				; XREF: PalToCRAM
00002F2A 4238 F64F                  		clr.b	($FFFFF64F).w
00002F2E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00002F32 4EB8 2BDE                  		jsr	Demo_Time
00002F36 4E71                       		nop
00002F38                            loc_4862:                               ; CODE XREF: ROM:00004846j
00002F38 4EB8 29AC                  		jsr		HudUpdateAlways
00002F3C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00002F40 4E73                       		rte		
00002F42                            ; End of function PalToCRAM
00002F42                            
00002F42                            ; ---------------------------------------------------------------------------
00002F42                            ; Subroutine to	initialise joypads
00002F42                            ; ---------------------------------------------------------------------------
00002F42                            
00002F42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F42                            
00002F42                            
00002F42                            JoypadInit:				; XREF: GameClrRAM
00002F42 33FC 0100 00A1 1100 0839+  		stopZ80 ; stop the Z80
00002F54                            
00002F54                            Joypad_WaitZ80:
00002F54 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00002F5C 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00002F5E 7040                       		moveq	#$40,d0
00002F60 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00002F66 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00002F6C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00002F72                            ;		jsr	sndDriverInput
00002F72 33FC 0000 00A1 1100        		startZ80	; start	the Z80
00002F7A 4E75                       		rts	
00002F7C                            ; End of function JoypadInit
00002F7C                            
00002F7C                            ; ---------------------------------------------------------------------------
00002F7C                            ; Subroutine to read joypad input, and send it to the RAM
00002F7C                            ; ---------------------------------------------------------------------------
00002F7C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002F7C                            
00002F7C                            ; sub_111C:
00002F7C                            ReadJoypads:
00002F7C 41F8 F604                  	lea	(Ctrl_1).w,a0	; address where joypad states are written
00002F80 43F9 00A1 0003             	lea	(Z80_Port_1_Data+1).l,a1	; first joypad port
00002F86 0810 0006                  	btst	#button_A,(a0)	; was button A held
00002F8A 6700                       	beq.s	Game_no_reset			; if not, branch
00002F8C 0810 0004                  	btst	#button_B,(a0)	; was button B held 
00002F90 6700                       	beq.s	Game_no_reset			; if not, branch
00002F92 0810 0005                  	btst	#button_C,(a0)	; was button C held 
00002F96 6700                       	beq.s	Game_no_reset			; if not, branch
00002F98 0810 0007                  	btst	#7,(a0) ; was Start button held?
00002F9C 6700                       	beq.s	Game_no_reset	; if not, branch
00002F9E 4EF8 021E                  	jmp		EntryPoint
00002FA2                            
00002FA2                            Game_no_reset:	
00002FA2 6100                       	bsr.s	Joypad_Read		; do the first joypad
00002FA4 5449                       	addq.w	#2,a1			; do the second joypad
00002FA6                            ; End of function ReadJoypads
00002FA6                            
00002FA6                            
00002FA6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002FA6                            
00002FA6                            ; sub_112A:
00002FA6                            Joypad_Read:
00002FA6 12BC 0000                  	move.b	#0,(a1)
00002FAA 4E71                       	nop
00002FAC 4E71                       	nop
00002FAE 1011                       	move.b	(a1),d0
00002FB0 E508                       	lsl.b	#2,d0
00002FB2 0200 00C0                  	andi.b	#$C0,d0
00002FB6 12BC 0040                  	move.b	#$40,(a1)
00002FBA 4E71                       	nop
00002FBC 4E71                       	nop
00002FBE 1211                       	move.b	(a1),d1
00002FC0 0201 003F                  	andi.b	#$3F,d1
00002FC4 8001                       	or.b	d1,d0
00002FC6 4600                       	not.b	d0
00002FC8 1210                       	move.b	(a0),d1
00002FCA B101                       	eor.b	d0,d1
00002FCC 10C0                       	move.b	d0,(a0)+
00002FCE C200                       	and.b	d0,d1
00002FD0 10C1                       	move.b	d1,(a0)+
00002FD2 4E75                       	rts
00002FD4                            ; End of function Joypad_Read
00002FD4                            
00002FD4                            
00002FD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002FD4                            
00002FD4                            
00002FD4                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00002FD4 41F9 00C0 0004             		lea	($C00004).l,a0
00002FDA 43F9 00C0 0000             		lea	($C00000).l,a1
00002FE0 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00002FE6 7E12                       		moveq	#$12,d7
00002FE8                            
00002FE8                            VDP_Loop:
00002FE8 309A                       		move.w	(a2)+,(a0)
00002FEA 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00002FEE 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00002FF4 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00002FF8 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00002FFE 7000                       		moveq	#0,d0
00003000 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000300A 3280                       		move.w	d0,(a1)
0000300C 3280                       		move.w	d0,(a1)
0000300E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l
00003018 3E3C 003F                  		move.w	#$3F,d7	
0000301C                            
0000301C                            VDP_ClrCRAM:
0000301C 3280                       		move.w	d0,(a1)
0000301E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00003022                            
00003022 42B8 F616                  		clr.l	($FFFFF616).w
00003026 42B8 F61A                  		clr.l	($FFFFF61A).w
0000302A 2F01                       		move.l	d1,-(sp)
0000302C 4BF9 00C0 0004             		lea	($C00004).l,a5
00003032 3ABC 8F01                  		move.w	#$8F01,(a5)
00003036 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000303C 3ABC 9780                  		move.w	#$9780,(a5)
00003040 2ABC 4000 0080             		move.l	#$40000080,(a5)
00003046 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000304E                            
0000304E                            loc_128E:
0000304E 3215                       		move.w	(a5),d1
00003050 0801 0001                  		btst	#1,d1
00003054 66F8                       		bne.s	loc_128E
00003056                            
00003056 3ABC 8F02                  		move.w	#$8F02,(a5)
0000305A 221F                       		move.l	(sp)+,d1
0000305C 4E75                       		rts	
0000305E                            ; End of function VDPSetupGame
0000305E                            
0000305E                            ; ===========================================================================
0000305E 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
00003060 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
00003062 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00003064 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00003066 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00003068 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
0000306A 8600                       		dc.w $8600		; unused
0000306C 8700                       		dc.w $8700		; set background colour (palette entry 0)
0000306E 8800                       		dc.w $8800		; unused
00003070 8900                       		dc.w $8900		; unused
00003072 8A00                       		dc.w $8A00		; default H.interrupt register
00003074 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00003076 8C81                       		dc.w $8C81		; 40-cell display mode
00003078 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
0000307A 8E00                       		dc.w $8E00		; unused
0000307C 8F02                       		dc.w $8F02		; set VDP increment size
0000307E 9001                       		dc.w $9001		; 64-cell hscroll size
00003080 9100                       		dc.w $9100		; window horizontal position
00003082 9200                       		dc.w $9200		; window vertical position
00003084                            
00003084                            ; ---------------------------------------------------------------------------
00003084                            ; Subroutine to	clear the screen
00003084                            ; ---------------------------------------------------------------------------
00003084                            
00003084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003084                            
00003084                            
00003084                            ClearScreen:
00003084 4BF9 00C0 0004             		lea	($C00004).l,a5
0000308A 3ABC 8F01                  		move.w	#$8F01,(a5)
0000308E 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00003094 3ABC 9780                  		move.w	#$9780,(a5)
00003098 2ABC 4000 0083             		move.l	#$40000083,(a5)
0000309E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000030A6                            
000030A6                            loc_12E6:
000030A6 3215                       		move.w	(a5),d1
000030A8 0801 0001                  		btst	#1,d1
000030AC 66F8                       		bne.s	loc_12E6
000030AE                            
000030AE 3ABC 8F02                  		move.w	#$8F02,(a5)
000030B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000030B8 3ABC 8F01                  		move.w	#$8F01,(a5)
000030BC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000030C2 3ABC 9780                  		move.w	#$9780,(a5)
000030C6 2ABC 6000 0083             		move.l	#$60000083,(a5)
000030CC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000030D4                            
000030D4                            loc_1314:
000030D4 3215                       		move.w	(a5),d1
000030D6 0801 0001                  		btst	#1,d1
000030DA 66F8                       		bne.s	loc_1314
000030DC                            
000030DC 3ABC 8F02                  		move.w	#$8F02,(a5)
000030E0 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
000030E8 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
000030F0 43F8 F800                  		lea	(Sprite_Table).w,a1
000030F4 7000                       		moveq	#0,d0
000030F6 323C 00A0                  		move.w	#$A0,d1
000030FA                            
000030FA                            loc_133A:
000030FA 22C0                       		move.l	d0,(a1)+
000030FC 51C9 FFFC                  		dbf	d1,loc_133A
00003100                            
00003100 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003104 7000                       		moveq	#0,d0
00003106 323C 0100                  		move.w	#$100,d1
0000310A                            
0000310A                            loc_134A:
0000310A 22C0                       		move.l	d0,(a1)+
0000310C 51C9 FFFC                  		dbf	d1,loc_134A
00003110 4E75                       		rts	
00003112                            ; End of function ClearScreen
00003112                            
00003112                            JmpTo_SoundDriverLoad: 
00003112 4E71                       	nop
00003114 4EF9 0000 0000             	jmp	(SoundDriverLoad).l
0000311A                            
0000311A                            SoundDriverLoad_Routine:
0000311A                            	include	"s1sounddriver.asm"
0000311A                            ; ---------------------------------------------------------------------------
0000311A                            ; Subroutine to	load the sound driver
0000311A                            ; ---------------------------------------------------------------------------
0000311A                            
0000311A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000311A                            
0000311A                            
0000311A                            SoundDriverLoad:            ; XREF: GameClrRAM; TitleScreen
0000311A                            LoadZ80drv:
0000311A 4E71                       		nop
0000311C 33FC 0100 00A1 1100        		move.w	#$100,(z80_bus_request).l
00003124 33FC 0100 00A1 1200        		resetZ80
0000312C 41F9 0000 01A4             		lea		(RomEndLoc).l,a0
00003132 2010                       		move.l	(a0),d0
00003134 5280                       		addq.l	#1,d0
00003136 2040                       		movea.l	d0,a0
00003138 43F9 00A0 0000             		lea	($A00000).l,a1
0000313E 4EB9 0000 0000             		jsr   (KosDec).l
00003144                            ; 		lea	(DriverResetData).l,a0
00003144                            ;		lea	($A01C8A).l,a1									; z80 ram start of variables (A01C00 in older version)
00003144                            ;		move.w	#DriverResetDataEnd-DriverResetData,d0
00003144                             
00003144                            ;DriverResetDataLoadLoop:
00003144                            ;		move.b	(a0)+,(a1)+
00003144                            ;		dbf	d0,DriverResetDataLoadLoop
00003144 0839 0000 00C0 0005        	btst	#0,($C00005).l	; check video mode
0000314C 56F9 00A0 1C02             		sne		($A01C02).l          					; set PAL mode flag 
00003152                            
00003152 33FC 0000 00A1 1200        		resetZ80a
0000315A 4E71                       		nop
0000315C 4E71                       		nop	
0000315E 4E71                       		nop	
00003160 4E71                       		nop	
00003162 33FC 0100 00A1 1200        		resetZ80
0000316A 33FC 0000 00A1 1100        		startZ80
00003172 4E75                       		rts
00003174                            ; End of function SoundDriverLoad
00003174                             
00003174                            DriverResetData:
00003174 0000 0000 0000 0000 0000+  		dc.b	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00003184                            DriverResetDataEnd:
00003184                            ;End of function SoundDriverLoad
00003184                            ; ---------------------------------------------------------------------------
00003184                            ; Subroutines to control Mega PCM
00003184                            ; ---------------------------------------------------------------------------
00003184                            
00003184                            ;Z80_RAM			equ	$A00000
00003184 =00001FFC                  MegaPCM_InputFlag	equ	$1FFC  
00003184 =00001FFD                  MegaPCM_Mode		equ	$1FFD
00003184 =00001FFE                  MegaPCM_DAC_Number_2	equ	$1FFE
00003184 =00001FFF                  MegaPCM_DAC_Number	equ	$1FFF
00003184                            
00003184                            ; ---------------------------------------------------------------------------
00003184                            PlaySample:
00003184 47F9 00A0 0000             	lea	Z80_RAM,a3
0000318A 33FC 0100 00A1 1100 0839+  	stopz80
0000319C 177C 0001 1FFC             	move.b	#1,MegaPCM_InputFlag(a3)
000031A2 1740 1FFF                  	move.b	d0,MegaPCM_DAC_Number(a3)
000031A6 33FC 0000 00A1 1100        	startZ80
000031AE 4E75                       	rts
000031B0                            
000031B0                            ; ---------------------------------------------------------------------------
000031B0                            PlaySample_2:
000031B0 47F9 00A0 0000             	lea	Z80_RAM,a3
000031B6 33FC 0100 00A1 1100 0839+  	stopZ80
000031C8 177C 0001 1FFC             	move.b	#1,MegaPCM_InputFlag(a3)
000031CE 1740 1FFE                  	move.b	d0,MegaPCM_DAC_Number_2(a3)
000031D2 33FC 0000 00A1 1100        	startZ80
000031DA 4E75                       	rts
000031DC                            
000031DC                            ; ---------------------------------------------------------------------------
000031DC                            Set_MegaPCM_Mode:
000031DC 47F9 00A0 0000             	lea	Z80_RAM,a3
000031E2 33FC 0100 00A1 1100 0839+  	stopZ80
000031F4 177C 0001 1FFC             	move.b	#1,MegaPCM_InputFlag(a3)
000031FA 1740 1FFD                  	move.b	d0,MegaPCM_Mode(a3)
000031FE 33FC 0000 00A1 1100        	startZ80
00003206 4E75                       	rts
00003206 4E75                       	rts
00003208 4E75                       	rts
0000320A                            
0000320A                            
0000320A                            ; ---------------------------------------------------------------------------
0000320A                            ; Subroutine to play a DAC sample
0000320A                            ; ---------------------------------------------------------------------------
0000320A                            
0000320A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000320A                            
0000320A                            
0000320A                            PlayDAC:
0000320A 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00003210 4E75                       		rts	
00003212                            ; End of function PlayDAC
00003212                            
00003212                            ; ---------------------------------------------------------------------------
00003212                            ; Subroutine to	load the PCM sound driver
00003212                            ; ---------------------------------------------------------------------------
00003212                            
00003212                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003212                            
00003212                            
00003212                            ;PCMDriverLoad: ; XREF: GameClrRAM; TitleScreen
00003212                            ;		move.w #0,($A11200).l
00003212                            ;		move.w #$100,($A11100).l ; stop the Z80
00003212                            ;		move.w #$100,($A11200).l ; reset the Z80
00003212                            
00003212                            ;		stopZ80
00003212                            ;		lea (Z802),a0		; load sound driver
00003212                            ;		lea ($A00000).l,a1
00003212                            ;		move.w #Z802End-Z802,d1
00003212                            
00003212                            ;LoadDriver:
00003212                            ;		move.b (a0)+,(a1)+
00003212                            ;		dbf d1,LoadDriver
00003212                            ;		move.b #$01,($FFFFFFFF).w	; set PCM Driver flag
00003212                            ;		rts
00003212                            
00003212                            ;Z802:
00003212                            ;	if PCMDC=1
00003212                            ;		incbin sound\driver\pcmdC.bin
00003212                            ;	else
00003212                            ;		incbin sound\driver\pcmd.bin
00003212                            ;	endif
00003212                            ;		even
00003212                            		
00003212                            ;Z802End:
00003212                            ;		rts
00003212                            ; End of function PCMDriverLoad
00003212                            
00003212                            ; ---------------------------------------------------------------------------
00003212                            ; Subroutine to	play a sound or	music track
00003212                            ; ---------------------------------------------------------------------------
00003212                            
00003212                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003212                            
00003212                            
00003212                            PlaySound:
00003212 0C40 00FB                  		cmpi.w	#$FB,d0
00003216 6D00                       		blt.s	PlayNotSpecialFlag
00003218 6200                       		bhi.s	TestForNormalSpeed
0000321A 303C 0008                  		move	#8,d0
0000321E 4EF9 0000 0000             		jmp	SetTempo
00003224                             
00003224                            TestForNormalSpeed:
00003224 0C40 00FC                  		cmpi.w	#$FC,d0
00003228 6600                       		bne.s	PlayNotSpecialFlag
0000322A 4240                       		clr.w	d0
0000322C 4EF9 0000 0000             		jmp	SetTempo
00003232                             
00003232                            PlayNotSpecialFlag:
00003232 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0000323A                             
0000323A                            PlaySoundZ80NotStopped:
0000323A 0839 0000 00A1 1100        		btst	#0,($A11100).l
00003242 66F6                       		bne.s	PlaySoundZ80NotStopped	; loop until it says it's stopped
00003244 13C0 00A0 1C0A             		move.b	d0,($A01C0A).l
0000324A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00003252 4E75                       		rts
00003254                            ; End of function PlaySound
00003254                             
00003254                            ; ---------------------------------------------------------------------------
00003254                            ; Exclusive sound/music subroutine
00003254                            ; ---------------------------------------------------------------------------
00003254                             
00003254                             
00003254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003254                             
00003254                             
00003254                             
00003254                            PlaySound_Ex:
00003254 4A28 0004                  		tst.b	4(A0)
00003258 6A00                       		bpl.s	SkipPlaySound_Special
0000325A                            
0000325A                            ; ---------------------------------------------------------------------------
0000325A                            ; Unused sound/music subroutine
0000325A                            ; ---------------------------------------------------------------------------
0000325A                             
0000325A                            PlaySound_Unk:
0000325A 4E71                       		nop
0000325C                            ; ---------------------------------------------------------------------------
0000325C                            ; Subroutine to	play a special sound/music (FB-FF)
0000325C                            ; ---------------------------------------------------------------------------
0000325C                             
0000325C                            PlaySound_Special:
0000325C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00003264                             
00003264                            PlaySound_SpecialZ80NotStopped:
00003264 0839 0000 00A1 1100        		btst	#0,($A11100).l
0000326C 66F6                       		bne.s	PlaySound_SpecialZ80NotStopped
0000326E B039 00A0 1C0B             		cmp.b	($A01C0B).l,d0
00003274 6700                       		beq.s	PlaySound_Special1
00003276 4A39 00A0 1C0B             		tst.b	($A01C0B).l
0000327C 6600                       		bne.s	PlaySound_Special0
0000327E 13C0 00A0 1C0B             		move.b	d0,($A01C0B).l
00003284 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000328C 4E75                       		rts
0000328E                             
0000328E                            PlaySound_Special0:
0000328E 13C0 00A0 1C0C             		move.b	d0,($A01C0C).l
00003294                             
00003294                            PlaySound_Special1:
00003294 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000329C                             
0000329C                            SkipPlaySound_Special:
0000329C 4E75                       		rts
0000329E                            ; End of function PlaySound_Special
0000329E                             
0000329E                            ; ---------------------------------------------------------------------------
0000329E                            ; Subroutine to change the music tempo
0000329E                            ; ---------------------------------------------------------------------------
0000329E                             
0000329E                            SetTempo:
0000329E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
000032A6                             
000032A6                            SetTempoZ80NotStopped:
000032A6 0839 0000 00A1 1100        		btst	#0,($A11100).l
000032AE 66F6                       		bne.s	SetTempoZ80NotStopped
000032B0 13C0 00A0 1C08             		move.b	D0,($A01C08).l
000032B6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000032BE 4E75                       		rts
000032C0                            
000032C0                            
000032C0                            ; -------------------------------------------------------------------------
000032C0                            ; Pause Game Module new beta pause code below
000032C0                            ; -------------------------------------------------------------------------
000032C0                            
000032C0 =FFFFD040                  obj_Pause = $FFFFD040
000032C0                            
000032C0                            ;PauseGame:				; XREF: Level_MainLoop; et al
000032C0                            ;	tst.b	$FFFFF605		; is Start button pressed?
000032C0                            ;	bpl	NoPause			; if not, branch
000032C0                            ;	cmpi.b	#6,$FFFFD024		; is Sonic dying?
000032C0                            ;	bcc	NoPause			; if yes, branch
000032C0                            ;	tst.b	$FFFFD080		; are Title Cards or Level Results being processed?
000032C0                            ;	bne	NoPause			; if yes, branch
000032C0                            ;	tst.w	$FFFFD130 ; has title card sequence finished?
000032C0                            ;	bne	NoPause	; if not, branch
000032C0                            ;	tst.w	$FFFFD5C0
000032C0                            ;	bne	NoPause
000032C0                            	; Prepare to pause the game
000032C0                            ;	move.w	#1,($FFFFF63A).w	; freeze time
000032C0                            ;	move.b	#1,($FFFFF003).w	; pause music
000032C0                            ;	move.b	$FFFFD1C0,obj_Pause+$1F		; ++ hide spin dust object
000032C0                            ;	sf.b	$FFFFD1C0
000032C0                            
000032C0                            	; Load Pause art
000032C0                            ;	move.b	#$10,($FFFFF62A).w	; synchronize
000032C0                            ;	jsr	DelayProgram		;
000032C0                            ;	jsr	Pause_LoadBGArt
000032C0                            
000032C0                            ;	lea	obj_Pause,a0		; load pause menu object
000032C0                            ;	jsr	Obj04		; run its code
000032C0                            ;	jsr	DisplaySprite		; add it to the sprites list
000032C0                            ;	jsr	SaveSpriteList		;
000032C0                            
000032C0                            ;Pause_Loop:
000032C0                            	; Main display & processing stuff
000032C0                            ;	move.b	#$10,($FFFFF62A).w	; was $10, normal is 8, $C
000032C0                            ;	jsr	DelayProgram		; render frame
000032C0                            ;	jsr	RunPLC_RAM
000032C0                            ;	lea	obj_Pause,a0		; load pause menu object
000032C0                            ;	jsr	Obj04		; run its code
000032C0                            ;	jsr	LoadSpriteList
000032C0                            ;	jsr	BuildSprites
000032C0                            
000032C0                            	; Check if tha game should be unpaused
000032C0                            ;	tst.b	$FFFFF605		; was Start pressed?
000032C0                            ;	bpl.s	Pause_Loop		; if not, branch     
000032C0                            
000032C0                            ;	move.b	obj_Pause+$1F,$FFFFD1C0	; ++ display spin dust object 
000032C0                            	
000032C0                            	; Kill "PAUSE" objecto
000032C0                            ;	lea	obj_Pause,a0
000032C0                            ;	jsr	DeleteObject
000032C0                            
000032C0                            ;	jsr	sub_F2F8
000032C0                            ;	tst.w	($FFFFFE08).w
000032C0                            ;	bne.s	@0
000032C0                            ;	cmpi.b	#6,($FFFFD024).w
000032C0                            ;	bcc.s	@1
000032C0                            ;@0	jsr	DeformBgLayer
000032C0                            ;@1
000032C0                            
000032C0                            ; ============================================================================
000032C0                            
000032C0                            ;Unpause:
000032C0                            ;		moveq	#0,d0
000032C0                            ;		move.b	($FFFFFFBA).w,d0
000032C0                            ;		add.b	d0,d0
000032C0                            ;		move.w	Pause_Index(pc,d0.w),d1
000032C0                            ;		jmp	Pause_Index(pc,d1.w)
000032C0                            ; ===========================================================================
000032C0                            ;Pause_Index:	dc.w Pause_UnpauseFin-Pause_Index
000032C0                            ;		dc.w Pause_Unpause_3-Pause_Index
000032C0                            ;		dc.w Pause_GotoTitle-Pause_Index
000032C0                            ;Pause_GotoTitle:
000032C0                            ;		move.b	#4,($FFFFF600).w
000032C0                            ;		nop
000032C0                            ;		jmp		Pause_UnpauseFin
000032C0                            ;Pause_Unpause_3:
000032C0                            ;	move.w	#1,($FFFFFE02).w ; restart level
000032C0                            		
000032C0                            ;Pause_UnpauseFin:
000032C0                            ;	move.b	#$80,($FFFFF003).w
000032C0                            ;	move.w	#0,($FFFFF63A).w
000032C0                            
000032C0                            ;NoPause	rts
000032C0                            
000032C0                            ; ===============================================================
000032C0                            
000032C0                            ;Pause_LoadBGArt:
000032C0                            ;		move.l	#Unc_PauseMenuBG,d1			        ; Call for Regular Shield Art
000032C0                            ;		move.w	#$BF80,d2			        ; Load Art from this location (VRAM location*20)
000032C0                            ;								; In this case, VRAM = $541*20
000032C0                            ;		move.w	#$40,d3
000032C0                            ;		jsr	(QueueDMATransfer).l
000032C0                            ;		rts
000032C0                            
000032C0                            
000032C0                            ; ---------------------------------------------------------------
000032C0                            ; Subroutine to save sprite list
000032C0                            ; ---------------------------------------------------------------
000032C0                            
000032C0                            SaveSpriteList:
000032C0 41F8 D070                  	lea	obj_Pause+$30,a0
000032C4 43F8 AC00                  	lea	$FFFFAC00,a1
000032C8 30D1                       	move.w	(a1),(a0)+		; save layer 0
000032CA 30E9 0080                  	move.w	$80(a1),(a0)+		; save layer 1
000032CE 30E9 0100                  	move.w	$100(a1),(a0)+		; save layer 2
000032D2 30E9 0180                  	move.w	$180(a1),(a0)+		; save layer 3
000032D6 30E9 0200                  	move.w	$200(a1),(a0)+		; save layer 4
000032DA 30E9 0280                  	move.w	$280(a1),(a0)+		; save layer 5
000032DE 30E9 0300                  	move.w	$300(a1),(a0)+		; save layer 6
000032E2 30E9 0380                  	move.w	$380(a1),(a0)+		; save layer 7
000032E6 4E75                       	rts
000032E8                            
000032E8                            ; ---------------------------------------------------------------
000032E8                            ; Subroutine to load sprite list
000032E8                            ; ---------------------------------------------------------------
000032E8                            
000032E8                            LoadSpriteList:
000032E8 41F8 D070                  	lea	obj_Pause+$30,a0
000032EC 43F8 AC00                  	lea	$FFFFAC00,a1
000032F0 3298                       	move.w	(a0)+,(a1)		; load layer 0
000032F2 3358 0080                  	move.w	(a0)+,$80(a1)		; load layer 1
000032F6 3358 0100                  	move.w	(a0)+,$100(a1)		; load layer 2
000032FA 3358 0180                  	move.w	(a0)+,$180(a1)		; load layer 3
000032FE 3358 0200                  	move.w	(a0)+,$200(a1)		; load layer 4
00003302 3358 0280                  	move.w	(a0)+,$280(a1)		; load layer 5
00003306 3358 0300                  	move.w	(a0)+,$300(a1)		; load layer 6
0000330A 3358 0380                  	move.w	(a0)+,$380(a1)		; load layer 7
0000330E 4E75                       	rts
00003310                            
00003310                            ; ---------------------------------------------------------------------------
00003310                            ; Improved subroutine to	pause the game imported from Sonic 3K (edited)
00003310                            ; ---------------------------------------------------------------------------
00003310                            		
00003310                            ; =============== S U B R O U T I N E =======================================
00003310                            
00003310                            
00003310                            PauseGame:
00003310 4E71                       		nop
00003312 0C38 0018 F600             		cmpi.b	#$18,(Game_Mode).w
00003318 6D00                       		blt.s	Pause_Main
0000331A 4E75                       		rts
0000331C                            ; ---------------------------------------------------------------------------
0000331C                            
0000331C                            Pause_Main:
0000331C 4A78 D130                  		tst.w	($FFFFD130).w ; has title card sequence finished?
00003320 6600 0000                  		bne.w	Pause_Unpause	; if not, branch
00003324 4A78 D5C0                  		tst.w	($FFFFD5C0).w
00003328 6600 0000                  		bne.w	Pause_Unpause	
0000332C 4A38 FE12                  		tst.b	($FFFFFE12).w
00003330 6700 0000                  		beq.w	Pause_Unpause
00003334 4A78 F63A                  		tst.w	($FFFFF63A).w
00003338 6600                       		bne.s	Pause_Main2
0000333A 1038 F605                  		move.b	($FFFFF605).w,d0
0000333E 0200 0080                  		andi.b	#$80,d0	; is Start pressed?
00003342 6700 0000                  		beq.w	Pause_NoPause	; if not, branch
00003346                            		;jsr		Pause_LoadBGArt
00003346                            Pause_Main2:
00003346 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000334C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00003354                             
00003354                            PauseGameZ80NotStopped:
00003354 0839 0000 00A1 1100        		btst	#0,($A11100).l
0000335C 66F6                       		bne.s	PauseGameZ80NotStopped
0000335E 13FC 0001 00A0 1C10        		move.b	#1,($A01C10).l
00003366 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000336E                             
0000336E                            PauseGameLoop:
0000336E                            		
0000336E 11FC 0010 F62A             			move.b	#$10,($FFFFF62A).w	; synchronize
00003374 4EB9 0000 0000             	jsr	DelayProgram		;
0000337A 4EB9 0000 0000             	jsr	Pause_LoadBGArt
00003380                            
00003380 41F8 D040                  	lea	obj_Pause,a0		; load pause menu object
00003384 4EB9 0000 0000             	jsr	Obj04		; run its code
0000338A 4EB9 0000 0000             	jsr	DisplaySprite		; add it to the sprites list
00003390 4EB8 32C0                  	jsr	SaveSpriteList	
00003394                            Pause_Loop:
00003394 11FC 0010 F62A             	move.b	#$10,($FFFFF62A).w	; was $10, normal is 8, $C
0000339A 4EB9 0000 0000             	jsr	DelayProgram		; render frame
000033A0 4EB9 0000 0000             	jsr	RunPLC_RAM
000033A6 41F8 D040                  	lea	obj_Pause,a0		; load pause menu object
000033AA 4EB9 0000 0000             	jsr	Obj04		; run its code
000033B0 4EB8 32E8                  	jsr	LoadSpriteList
000033B4 4EB9 0000 0000             	jsr	BuildSprites
000033BA                            Pause_GotoTitle:		
000033BA 4A38 FFD1                  		tst.b	(slow_motion_flag).w
000033BE 6700 0000                  		beq.w	Pause_NoSlowMo
000033C2 0838 0006 F605             		btst	#6,($FFFFF605).w
000033C8 6700 0000                  		beq.w	Pause_ChkFrameAdvance	; branch if A isn't pressed
000033CC 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000033D2 4E71                       		nop
000033D4 6000                       		bra.s	Pause_ResumeMusic
000033D6                            		
000033D6                            ; ---------------------------------------------------------------------------
000033D6                            
000033D6                            Pause_ChkFrameAdvance:
000033D6 0838 0004 F604             		btst	#4,($FFFFF604).w
000033DC 6600 0000                  		bne.w	Pause_FrameAdvance	; branch if B is held
000033E0 0838 0005 F605             		btst	#5,($FFFFF605).w
000033E6 6600 0000                  		bne.w	Pause_FrameAdvance	; branch if C is pressed
000033EA                            
000033EA                            Pause_NoSlowMo:
000033EA                            		;cmpi.b	#$E,($FFFFFE10).w
000033EA                            		;bcs.s	Pause_ChkStart	; if the zone is below ALZ
000033EA                            		;cmpi.b	#$12,($FFFFFE10).w
000033EA                            		;bhi.s	Pause_ChkStart	; if the zone is above EMZ
000033EA 4A38 FF70                  		tst.b	($FFFFFF70).w
000033EE 6A00                       		bpl.s	Pause_ChkStart
000033F0 0838 0004 F605             		btst	#4,($FFFFF605).w
000033F6 6700                       		beq.s	Pause_ChkStart
000033F8                            ;		move.b	#$C0,($FFFFF600).w	; If in time attack mode, go back to 2P menu if B is pressed
000033F8 6000                       		bra.s	Pause_ResumeMusic
000033FA                            ; ---------------------------------------------------------------------------
000033FA                            
000033FA                            Pause_ChkStart:
000033FA 1038 F605                  		move.b	($FFFFF605).w,d0
000033FE 0200 0080                  		andi.b	#$80,d0
00003402 6790                       		beq.s	Pause_Loop
00003404                            
00003404                            Pause_ResumeMusic:
00003404 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0000340C                             
0000340C                            Pause_ChkStartZ80NotStopped:
0000340C 0839 0000 00A1 1100        		btst	#0,($A11100).l
00003414 66F6                       		bne.s	Pause_ChkStartZ80NotStopped
00003416 13FC 0080 00A0 1C10        		move.b	#$80,($A01C10).l
0000341E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00003426                            
00003426                            Pause_Unpause:
00003426 7000                       		moveq	#0,d0
00003428 1038 D05A                  		move.b	($FFFFD040+mapping_frame).w,d0
0000342C D000                       		add.b	d0,d0
0000342E 323B 0000                  		move.w	Pause_Index(pc,d0.w),d1
00003432 4EFB 1000                  		jmp	Pause_Index(pc,d1.w)
00003436                            ; ===========================================================================
00003436 0000                       Pause_Index:	dc.w Pause_UnpauseFin-Pause_Index
00003438 0000                       		dc.w Pause_Unpause_3-Pause_Index
0000343A 0000                       		dc.w Pause_Reset-Pause_Index
0000343C                            
0000343C                            ;		jmp		Pause_UnpauseFin
0000343C                            Pause_Reset:
0000343C 11FC 0000 F600             		move.b	#0,(Game_Mode).w
00003442 4EF8 0362                  		jmp		GameInit
00003446                            Pause_Unpause_3:
00003446 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000344C                            ;		jmp		Pause_UnpauseFin
0000344C                            		
0000344C                            ;Pause_Unpause_4:
0000344C                            ;		move.b	#0,($FFFFF600).w
0000344C                            ;		nop
0000344C                            ;		bra.w	Pause_ResumeMusic
0000344C                            Pause_UnpauseFin:
0000344C 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w
00003452 41F9 FFFF D040             		lea	($FFFFD040).l,a0
00003458 4EB9 0000 0000             		jsr	DeleteObject
0000345E                            Pause_NoPause:
0000345E 4E75                       		rts
00003460                            ; ---------------------------------------------------------------------------
00003460                            
00003460                            Pause_FrameAdvance:
00003460 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00003466 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0000346E                             
0000346E                            Pause_SlowMoZ80NotStopped:
0000346E 0839 0000 00A1 1100        		btst	#0,($A11100).l
00003476 66F6                       		bne.s	Pause_SlowMoZ80NotStopped
00003478 13FC 0080 00A0 1C10        		move.b	#$80,($A01C10).l
00003480 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00003488 4E75                       		rts	; advance by a single frame
0000348A                            		
0000348A                            ;Pause_GotoTitle2:
0000348A                            ;		move.b	#4,($FFFFF600).w
0000348A                            ;		nop
0000348A                            ;		bra.s	Pause_ResumeMusic
0000348A                            ; End of function Pause_Game
0000348A                            Pause_LoadBGArt:
0000348A 223C 0000 0000             		move.l	#Unc_PauseMenuBG,d1			        ; Call for Regular Shield Art
00003490 343C BF80                  		move.w	#$BF80,d2			        ; Load Art from this location (VRAM location*20)
00003494                            								; In this case, VRAM = $541*20
00003494 363C 0040                  		move.w	#$40,d3
00003498 4EB9 0000 0000             		jsr	(QueueDMATransfer).l
0000349E 4E75                       		rts
000034A0                            
000034A0                            ; ---------------------------------------------------------------------------
000034A0                            ; Subroutine to	display	patterns via the VDP
000034A0                            ; ---------------------------------------------------------------------------
000034A0                            
000034A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034A0                            
000034A0                            
000034A0                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000034A0 4DF9 00C0 0000             		lea	($C00000).l,a6
000034A6 283C 0080 0000             		move.l	#$800000,d4	; $800000
000034AC                            
000034AC                            loc_142C:
000034AC 2D40 0004                  		move.l	d0,VDP_control_port-VDP_data_port(a6)
000034B0 3601                       		move.w	d1,d3
000034B2                            
000034B2                            loc_1432:
000034B2 3C99                       		move.w	(a1)+,(a6)
000034B4 51CB FFFC                  		dbf	d3,loc_1432
000034B8 D084                       		add.l	d4,d0
000034BA 51CA FFF0                  		dbf	d2,loc_142C
000034BE 4E75                       		rts	
000034C0                            ; End of function ShowVDPGraphics
000034C0                            
000034C0                            ; =============== S U B	R O U T	I N E =======================================
000034C0                            
000034C0                            
000034C0                            ShowVDPGraphics2:				  ; ...
000034C0 4DF9 00C0 0000             		lea	($C00000).l,a6
000034C6 283C 0100 0000             		move.l	#$1000000,d4
000034CC                            
000034CC                            loc_301144:					  ; ...
000034CC 2D40 0004                  		move.l	d0,4(a6)
000034D0 3601                       		move.w	d1,d3
000034D2                            
000034D2                            loc_30114A:					  ; ...
000034D2 3C99                       		move.w	(a1)+,(a6)
000034D4 51CB FFFC                  		dbf	d3,loc_30114A
000034D8 D084                       		add.l	d4,d0
000034DA 51CA FFF0                  		dbf	d2,loc_301144
000034DE 4E75                       		rts
000034E0                            ; End of function ShowVDPGraphics2
000034E0                            
000034E0                            ; ---------------------------------------------------------------------------
000034E0                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
000034E0                            ; to be issued the next time ProcessDMAQueue is called.
000034E0                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
000034E0                            ; by issuing the commands (this subroutine DOES check for overflow)
000034E0                            ; ---------------------------------------------------------------------------
000034E0                            
000034E0                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000034E0                            
000034E0                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
000034E0                            QueueDMATransfer:
000034E0 2278 C8FC                  	movea.l	(VDP_Command_Buffer_Slot).w,a1
000034E4 B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
000034E8 6700                       	beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
000034EA                            
000034EA                            	; piece together some VDP commands and store them for later...
000034EA 303C 9300                  	move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
000034EE 1003                       	move.b	d3,d0
000034F0 32C0                       	move.w	d0,(a1)+ ; store command
000034F2                            
000034F2 303C 9400                  	move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
000034F6 E04B                       	lsr.w	#8,d3
000034F8 1003                       	move.b	d3,d0
000034FA 32C0                       	move.w	d0,(a1)+ ; store command
000034FC                            
000034FC 303C 9500                  	move.w	#$9500,d0 ; command to specify source address & $0001FE
00003500 E289                       	lsr.l	#1,d1
00003502 1001                       	move.b	d1,d0
00003504 32C0                       	move.w	d0,(a1)+ ; store command
00003506                            
00003506 303C 9600                  	move.w	#$9600,d0 ; command to specify source address & $01FE00
0000350A E089                       	lsr.l	#8,d1
0000350C 1001                       	move.b	d1,d0
0000350E 32C0                       	move.w	d0,(a1)+ ; store command
00003510                            
00003510 303C 9700                  	move.w	#$9700,d0 ; command to specify source address & $FE0000
00003514 E089                       	lsr.l	#8,d1
00003516 1001                       	move.b	d1,d0
00003518 32C0                       	move.w	d0,(a1)+ ; store command
0000351A                            
0000351A 0282 0000 FFFF             	andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
00003520 E58A                       	lsl.l	#2,d2
00003522 E44A                       	lsr.w	#2,d2
00003524 4842                       	swap	d2
00003526 0082 4000 0080             	ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
0000352C 22C2                       	move.l	d2,(a1)+ ; store command
0000352E                            
0000352E 21C9 C8FC                  	move.l	a1,(VDP_Command_Buffer_Slot).w ; set the next free slot address
00003532 B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
00003536 6700                       	beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00003538 32BC 0000                  	move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
0000353C                            ; return_14AA:
0000353C                            QueueDMATransfer_Done:
0000353C 4E75                       	rts
0000353E                            ; End of function QueueDMATransfer
0000353E                            
0000353E                            
0000353E                            ; ---------------------------------------------------------------------------
0000353E                            ; Subroutine for issuing all VDP commands that were queued
0000353E                            ; (by earlier calls to QueueDMATransfer)
0000353E                            ; Resets the queue when it's done
0000353E                            ; ---------------------------------------------------------------------------
0000353E                            
0000353E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000353E                            
0000353E                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
0000353E                            ProcessDMAQueue:
0000353E 4BF9 00C0 0004             	lea	(VDP_control_port).l,a5
00003544 43F8 C800                  	lea	(VDP_Command_Buffer).w,a1
00003548                            ; loc_14B6:
00003548                            ProcessDMAQueue_Loop:
00003548 3019                       	move.w	(a1)+,d0
0000354A 6700                       	beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
0000354C                            	; issue a set of VDP commands...
0000354C 3A80                       	move.w	d0,(a5)		; transfer length
0000354E 3A99                       	move.w	(a1)+,(a5)	; transfer length
00003550 3A99                       	move.w	(a1)+,(a5)	; source address
00003552 3A99                       	move.w	(a1)+,(a5)	; source address
00003554 3A99                       	move.w	(a1)+,(a5)	; source address
00003556 3A99                       	move.w	(a1)+,(a5)	; destination
00003558 3A99                       	move.w	(a1)+,(a5)	; destination
0000355A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000355E 66E8                       	bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00003560                            ; loc_14CE:
00003560                            ProcessDMAQueue_Done:
00003560 31FC 0000 C800             	move.w	#0,(VDP_Command_Buffer).w
00003566 21FC FFFF C800 C8FC        	move.l	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
0000356E 4E75                       	rts
00003570                            ; End of function ProcessDMAQueue
00003570                            
00003570                            ; ---------------------------------------------------------------------------
00003570                            ; Subroutine to load uncompressed art
00003570                            ; ---------------------------------------------------------------------------
00003570                            
00003570                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003570                            
00003570                            
00003570                            LoadUncArt:
00003570 43F9 00C0 0000             		lea	($C00000), a1		;Mover VDP Control a "a1"
00003576                            
00003576                            LoadArt_Loop:
00003576 229A                       		move.l	(a2)+, (a1)		;$xxxxxxxx	<- linea a procesar
00003578 229A                       		move.l	(a2)+, (a1)
0000357A 229A                       		move.l	(a2)+, (a1)
0000357C 229A                       		move.l	(a2)+, (a1)
0000357E 229A                       		move.l	(a2)+, (a1)
00003580 229A                       		move.l	(a2)+, (a1)
00003582 229A                       		move.l	(a2)+, (a1)
00003584 229A                       		move.l	(a2)+, (a1)
00003586 51C8 FFEE                  		dbf	d0, LoadArt_Loop	;Repetir los pasos del d0
0000358A 4E75                       		rts
0000358C                            
0000358C                            ;====================================================================================
0000358C                            
0000358C                            
0000358C                            ; ---------------------------------------------------------------------------
0000358C                            ; Nemesis decompression	algorithm
0000358C                            ; ---------------------------------------------------------------------------
0000358C                            
0000358C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000358C                            
0000358C                            
0000358C                            ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
0000358C                            
0000358C                            
0000358C                            ; ------------------------------------------------------------------------------
0000358C                            ; Nemesis decompression routine
0000358C                            ; ------------------------------------------------------------------------------
0000358C                            ; Optimized by vladikcomper
0000358C                            ; ------------------------------------------------------------------------------
0000358C                             
0000358C                            NemDec_RAM:
0000358C 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
00003590 47FA 0000                          lea     NemDec_WriteRowToRAM(pc),a3
00003594 6000                               bra.s   NemDec_Main
00003596                             
00003596                            ; ------------------------------------------------------------------------------
00003596                            NemDec:
00003596 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
0000359A 49F9 00C0 0000                     lea     $C00000,a4              ; load VDP Data Port    
000035A0 47FA 0000                          lea     NemDec_WriteRowToVDP(pc),a3
000035A4                             
000035A4                            NemDec_Main:
000035A4 43F8 AA00                          lea     $FFFFAA00,a1            ; load Nemesis decompression buffer
000035A8 3418                               move.w  (a0)+,d2                ; get number of patterns
000035AA 6A00                               bpl.s   @0                      ; are we in Mode 0?
000035AC 47EB 000A                          lea     $A(a3),a3               ; if not, use Mode 1
000035B0 E74A                       @0      lsl.w   #3,d2
000035B2 3A42                               movea.w d2,a5
000035B4 7607                               moveq   #7,d3
000035B6 7400                               moveq   #0,d2
000035B8 7800                               moveq   #0,d4
000035BA 6100 0000                          bsr.w   NemDec4
000035BE 1A18                               move.b  (a0)+,d5                ; get first byte of compressed data
000035C0 E145                               asl.w   #8,d5                   ; shift up by a byte
000035C2 1A18                               move.b  (a0)+,d5                ; get second byte of compressed data
000035C4 3C3C 0010                          move.w  #$10,d6                 ; set initial shift value
000035C8 6100                               bsr.s   NemDec2
000035CA 4CDF 7BFF                          movem.l (sp)+,d0-a1/a3-a6
000035CE 4E75                               rts
000035D0                             
000035D0                            ; ---------------------------------------------------------------------------
000035D0                            ; Part of the Nemesis decompressor, processes the actual compressed data
000035D0                            ; ---------------------------------------------------------------------------
000035D0                             
000035D0                            NemDec2:
000035D0 3E06                               move.w  d6,d7
000035D2 5147                               subq.w  #8,d7                   ; get shift value
000035D4 3205                               move.w  d5,d1
000035D6 EE69                               lsr.w   d7,d1                   ; shift so that high bit of the code is in bit position 7
000035D8 0C01 00FC                          cmpi.b  #%11111100,d1           ; are the high 6 bits set?
000035DC 6400                               bcc.s   NemDec_InlineData       ; if they are, it signifies inline data
000035DE 0241 00FF                          andi.w  #$FF,d1
000035E2 D241                               add.w   d1,d1
000035E4 9C31 1000                          sub.b   (a1,d1.w),d6            ; ~~ subtract from shift value so that the next code is read next time around
000035E8 0C46 0009                          cmpi.w  #9,d6                   ; does a new byte need to be read?
000035EC 6400                               bcc.s   @0                      ; if not, branch
000035EE 5046                               addq.w  #8,d6
000035F0 E145                               asl.w   #8,d5
000035F2 1A18                               move.b  (a0)+,d5                ; read next byte
000035F4 1231 1001                  @0      move.b  1(a1,d1.w),d1
000035F8 3001                               move.w  d1,d0
000035FA 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
000035FE 0240 00F0                          andi.w  #$F0,d0
00003602                             
00003602                            NemDec_GetRepeatCount:
00003602 E848                               lsr.w   #4,d0                   ; get repeat count
00003604                             
00003604                            NemDec_WritePixel:
00003604 E98C                               lsl.l   #4,d4                   ; shift up by a nybble
00003606 8801                               or.b    d1,d4                   ; write pixel
00003608 51CB 0000                          dbf     d3,NemDec_WritePixelLoop; ~~
0000360C 4ED3                               jmp     (a3)                    ; otherwise, write the row to its destination
0000360E                            ; ---------------------------------------------------------------------------
0000360E                             
0000360E                            NemDec3:
0000360E 7800                               moveq   #0,d4                   ; reset row
00003610 7607                               moveq   #7,d3                   ; reset nybble counter
00003612                             
00003612                            NemDec_WritePixelLoop:
00003612 51C8 FFF0                          dbf     d0,NemDec_WritePixel
00003616 60B8                               bra.s   NemDec2
00003618                            ; ---------------------------------------------------------------------------
00003618                             
00003618                            NemDec_InlineData:
00003618 5D46                               subq.w  #6,d6                   ; 6 bits needed to signal inline data
0000361A 0C46 0009                          cmpi.w  #9,d6
0000361E 6400                               bcc.s   @0
00003620 5046                               addq.w  #8,d6
00003622 E145                               asl.w   #8,d5
00003624 1A18                               move.b  (a0)+,d5
00003626 5F46                       @0      subq.w  #7,d6                   ; and 7 bits needed for the inline data itself
00003628 3205                               move.w  d5,d1
0000362A EC69                               lsr.w   d6,d1                   ; shift so that low bit of the code is in bit position 0
0000362C 3001                               move.w  d1,d0
0000362E 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
00003632 0240 0070                          andi.w  #$70,d0                 ; high nybble is repeat count for pixel
00003636 0C46 0009                          cmpi.w  #9,d6
0000363A 64C6                               bcc.s   NemDec_GetRepeatCount
0000363C 5046                               addq.w  #8,d6
0000363E E145                               asl.w   #8,d5
00003640 1A18                               move.b  (a0)+,d5
00003642 60BE                               bra.s   NemDec_GetRepeatCount
00003644                             
00003644                            ; ---------------------------------------------------------------------------
00003644                            ; Subroutines to output decompressed entry
00003644                            ; Selected depending on current decompression mode
00003644                            ; ---------------------------------------------------------------------------
00003644                             
00003644                            NemDec_WriteRowToVDP:
00003644                            loc_1502:
00003644 2884                               move.l  d4,(a4)                 ; write 8-pixel row
00003646 534D                               subq.w  #1,a5
00003648 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
0000364A 66C2                               bne.s   NemDec3                 ; if not, branch
0000364C 4E75                               rts
0000364E                            ; ---------------------------------------------------------------------------
0000364E                             
0000364E                            NemDec_WriteRowToVDP_XOR:
0000364E B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
00003650 2882                               move.l  d2,(a4)                 ; and write the result
00003652 534D                               subq.w  #1,a5
00003654 380D                               move.w  a5,d4
00003656 66B6                               bne.s   NemDec3
00003658 4E75                               rts
0000365A                            ; ---------------------------------------------------------------------------
0000365A                             
0000365A                            NemDec_WriteRowToRAM:
0000365A 28C4                               move.l  d4,(a4)+                ; write 8-pixel row
0000365C 534D                               subq.w  #1,a5
0000365E 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00003660 66AC                               bne.s   NemDec3                 ; if not, branch
00003662 4E75                               rts
00003664                            ; ---------------------------------------------------------------------------
00003664                             
00003664                            NemDec_WriteRowToRAM_XOR:
00003664 B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
00003666 28C2                               move.l  d2,(a4)+                ; and write the result
00003668 534D                               subq.w  #1,a5
0000366A 380D                               move.w  a5,d4
0000366C 66A0                               bne.s   NemDec3
0000366E 4E75                               rts
00003670                             
00003670                            ; ---------------------------------------------------------------------------
00003670                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00003670                            ; ---------------------------------------------------------------------------
00003670                             
00003670                            NemDec4:
00003670 1018                               move.b  (a0)+,d0                ; read first byte
00003672                             
00003672                            @ChkEnd:
00003672 0C00 00FF                          cmpi.b  #$FF,d0                 ; has the end of the code table description been reached?
00003676 6600                               bne.s   @NewPalIndex            ; if not, branch
00003678 4E75                               rts
0000367A                            ; ---------------------------------------------------------------------------
0000367A                             
0000367A                            @NewPalIndex:
0000367A 3E00                               move.w  d0,d7
0000367C                             
0000367C                            @ItemLoop:
0000367C 1018                               move.b  (a0)+,d0                ; read next byte
0000367E 6BF2                               bmi.s   @ChkEnd                 ; ~~
00003680 1200                               move.b  d0,d1
00003682 0247 000F                          andi.w  #$F,d7                  ; get palette index
00003686 0241 0070                          andi.w  #$70,d1                 ; get repeat count for palette index
0000368A 8E41                               or.w    d1,d7                   ; combine the two
0000368C 0240 000F                          andi.w  #$F,d0                  ; get the length of the code in bits
00003690 1200                               move.b  d0,d1
00003692 E149                               lsl.w   #8,d1
00003694 8E41                               or.w    d1,d7                   ; combine with palette index and repeat count to form code table entry
00003696 7208                               moveq   #8,d1
00003698 9240                               sub.w   d0,d1                   ; is the code 8 bits long?
0000369A 6600                               bne.s   @ItemShortCode          ; if not, a bit of extra processing is needed
0000369C 1018                               move.b  (a0)+,d0                ; get code
0000369E D040                               add.w   d0,d0                   ; each code gets a word-sized entry in the table
000036A0 3387 0000                          move.w  d7,(a1,d0.w)            ; store the entry for the code
000036A4 60D6                               bra.s   @ItemLoop               ; repeat
000036A6                            ; ---------------------------------------------------------------------------
000036A6                             
000036A6                            @ItemShortCode:
000036A6 1018                               move.b  (a0)+,d0                ; get code
000036A8 E368                               lsl.w   d1,d0                   ; shift so that high bit is in bit position 7
000036AA D040                               add.w   d0,d0                   ; get index into code table
000036AC 7A01                               moveq   #1,d5
000036AE E36D                               lsl.w   d1,d5
000036B0 5345                               subq.w  #1,d5                   ; d5 = 2^d1 - 1
000036B2 4DF1 0000                          lea     (a1,d0.w),a6            ; ~~
000036B6                             
000036B6                            @ItemShortCodeLoop:
000036B6 3CC7                               move.w  d7,(a6)+                ; ~~ store entry
000036B8 51CD FFFC                          dbf     d5,@ItemShortCodeLoop   ; repeat for required number of entries
000036BC 60BE                               bra.s   @ItemLoop
000036BE                            
000036BE                            ; ---------------------------------------------------------------------------
000036BE                            ; Subroutine to load the art for the animals for the current zone
000036BE                            ; ---------------------------------------------------------------------------
000036BE                             
000036BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036BE                             
000036BE                             
000036BE                            LoadAnimalPLC:
000036BE 7000                       		moveq	#0,d0
000036C0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000036C4 0C40 0007                  		cmpi.w	#7,d0
000036C8 6400                       		bhs.s	LoadAnimalPLC_New
000036CA 0640 0015                  		addi.w	#$15,d0
000036CE 6000                       		bra.s	LoadPLC
000036D0                            ; ---------------------------------------------------------------------------
000036D0                             
000036D0                            LoadAnimalPLC_New:
000036D0 5F40                       		subi.w	#7,d0
000036D2                            		; multiply d0 by 3
000036D2 3200                       		move.w	d0,d1
000036D4 D040                       		add.w	d0,d0
000036D6 D041                       		add.w	d1,d0
000036D8                            		; add $22 (this is the index of the animal PLC for the first added zone)
000036D8 0640 0022                  		addi.w	#$22,d0
000036DC                            		; bra.s	LoadPLC
000036DC                            ; End of function LoadAnimalPLC
000036DC                            
000036DC                            ; =============== S U B R O U T I N E =======================================
000036DC                            
000036DC                            
000036DC                            Load_PLC_Raw:
000036DC 45F8 F680                  		lea	($FFFFF680).w,a2
000036E0                            
000036E0                            @findFreeSlot:
000036E0 4A92                       		tst.l	(a2)
000036E2 6700                       		beq.s	@getPieceCount
000036E4 5C4A                       		addq.w	#6,a2
000036E6 60F8                       		bra.s	@findFreeSlot
000036E8                            ; ---------------------------------------------------------------------------
000036E8                            
000036E8                            @getPieceCount:
000036E8 3019                       		move.w	(a1)+,d0
000036EA 6B00                       		bmi.s	@done
000036EC                            
000036EC                            @queuePieces:
000036EC 24D9                       		move.l	(a1)+,(a2)+
000036EE 34D9                       		move.w	(a1)+,(a2)+
000036F0 51C8 FFFA                  		dbf	d0,@queuePieces
000036F4                            
000036F4                            @done:
000036F4 4E75                       		rts
000036F6                            ; End of function Load_PLC_Raw
000036F6                            
000036F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036F6                            
000036F6                            LoadPLC:
000036F6 48E7 0060                  		movem.l	a1-a2,-(sp)
000036FA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00003700 D040                       		add.w	d0,d0
00003702 3031 0000                  		move.w	(a1,d0.w),d0
00003706 43F1 0000                  		lea	(a1,d0.w),a1
0000370A 45F8 F680                  		lea	($FFFFF680).w,a2
0000370E                            
0000370E                            loc_1598:
0000370E 4A92                       		tst.l	(a2)
00003710 6700                       		beq.s	loc_15A0
00003712 5C4A                       		addq.w	#6,a2
00003714 60F8                       		bra.s	loc_1598
00003716                            ; ===========================================================================
00003716                            
00003716                            loc_15A0:				; XREF: LoadPLC
00003716 3019                       		move.w	(a1)+,d0
00003718 6B00                       		bmi.s	loc_15AC
0000371A                            
0000371A                            loc_15A4:
0000371A 24D9                       		move.l	(a1)+,(a2)+
0000371C 34D9                       		move.w	(a1)+,(a2)+
0000371E 51C8 FFFA                  		dbf	d0,loc_15A4
00003722                            
00003722                            loc_15AC:
00003722 4CDF 0600                  		movem.l	(sp)+,a1-a2
00003726 4E75                       		rts	
00003728                            ; End of function LoadPLC
00003728                            
00003728                            
00003728                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003728                            
00003728                            
00003728                            LoadPLC2:
00003728 48E7 0060                  		movem.l	a1-a2,-(sp)
0000372C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00003732 D040                       		add.w	d0,d0
00003734 3031 0000                  		move.w	(a1,d0.w),d0
00003738 43F1 0000                  		lea	(a1,d0.w),a1
0000373C 6100                       		bsr.s	ClearPLC
0000373E 45F8 F680                  		lea	($FFFFF680).w,a2
00003742 3019                       		move.w	(a1)+,d0
00003744 6B00                       		bmi.s	loc_15D8
00003746                            
00003746                            loc_15D0:
00003746 24D9                       		move.l	(a1)+,(a2)+
00003748 34D9                       		move.w	(a1)+,(a2)+
0000374A 51C8 FFFA                  		dbf	d0,loc_15D0
0000374E                            
0000374E                            loc_15D8:
0000374E 4CDF 0600                  		movem.l	(sp)+,a1-a2
00003752 4E75                       		rts	
00003754                            ; End of function LoadPLC2
00003754                            
00003754                            ; ---------------------------------------------------------------------------
00003754                            ; Subroutines to load pattern load cues
00003754                            
00003754                            ; input:
00003754                            ;	d0 = pattern load cue number
00003754                            ; ---------------------------------------------------------------------------
00003754                            
00003754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003754                            
00003754                            
00003754 =000036F6                  AddPLC	=	LoadPLC
00003754                            ; End of function AddPLC
00003754                            
00003754                            
00003754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003754                            
00003754                            
00003754 =00003728                  NewPLC	=	LoadPLC2
00003754                            ; End of function NewPLC
00003754                            
00003754                            ; ---------------------------------------------------------------------------
00003754                            ; Subroutine to	clear the pattern load cues
00003754                            ; ---------------------------------------------------------------------------
00003754                            
00003754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003754                            
00003754                            
00003754                            ClearPLC:				; XREF: LoadPLC2
00003754 45F8 F680                  		lea	($FFFFF680).w,a2
00003758 701F                       		moveq	#$1F,d0
0000375A                            
0000375A                            ClearPLC_Loop:
0000375A 429A                       		clr.l	(a2)+
0000375C 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00003760 4E75                       		rts	
00003762                            ; End of function ClearPLC
00003762                            
00003762                            ; ---------------------------------------------------------------------------
00003762                            ; Subroutine to	use graphics listed in a pattern load cue
00003762                            ; ---------------------------------------------------------------------------
00003762                            
00003762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003762                            
00003762                            
00003762                            RunPLC_RAM:				; XREF: Pal_FadeTo
00003762 4AB8 F680                  		tst.l	($FFFFF680).w
00003766 6700                       		beq.s	locret_1640
00003768 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000376C 6600                       		bne.s	locret_1640
0000376E 2078 F680                  		movea.l	($FFFFF680).w,a0
00003772 47FA FED0                  		lea	loc_1502(pc),a3
00003776 4E71                       		nop
00003778 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000377C 3418                       		move.w	(a0)+,d2
0000377E 6A00                       		bpl.s	loc_160E
00003780 D6FC 000A                  		adda.w	#$A,a3
00003784                            
00003784                            loc_160E:
00003784 0242 7FFF                  		andi.w	#$7FFF,d2
00003788 4EB8 3670                  		jsr	NemDec4
0000378C 1A18                       		move.b	(a0)+,d5
0000378E E145                       		asl.w	#8,d5
00003790 1A18                       		move.b	(a0)+,d5
00003792 7C10                       		moveq	#$10,d6
00003794 7000                       		moveq	#0,d0
00003796 21C8 F680                  		move.l	a0,($FFFFF680).w
0000379A 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000379E 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000037A2 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000037A6 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000037AA 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000037AE 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000037B2 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
000037B6                            
000037B6                            locret_1640:
000037B6 4E75                       		rts	
000037B8                            ; End of function RunPLC_RAM
000037B8                            
000037B8                            
000037B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037B8                            
000037B8                            
000037B8                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000037B8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000037BC 6700 0000                  		beq.w	locret_16DA
000037C0 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000037C6 7000                       		moveq	#0,d0
000037C8 3038 F684                  		move.w	($FFFFF684).w,d0
000037CC 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000037D2 6000                       		bra.s	loc_1676
000037D4                            ; End of function sub_1642
000037D4                            
000037D4                            
000037D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037D4                            
000037D4                            
000037D4                            sub_165E:				; XREF: Demo_Time
000037D4 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000037D8 6700                       		beq.s	locret_16DA
000037DA 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000037E0 7000                       		moveq	#0,d0
000037E2 3038 F684                  		move.w	($FFFFF684).w,d0
000037E6 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000037EC                            
000037EC                            loc_1676:				; XREF: sub_1642
000037EC 49F9 00C0 0004             		lea	($C00004).l,a4
000037F2 E588                       		lsl.l	#2,d0
000037F4 E448                       		lsr.w	#2,d0
000037F6 0040 4000                  		ori.w	#$4000,d0
000037FA 4840                       		swap	d0
000037FC 2880                       		move.l	d0,(a4)
000037FE 594C                       		subq.w	#4,a4
00003800 2078 F680                  		movea.l	($FFFFF680).w,a0
00003804 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00003808 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000380C 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00003810 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00003814 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00003818 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
0000381C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00003820                            
00003820                            loc_16AA:				; XREF: sub_165E
00003820 3A7C 0008                  		movea.w	#8,a5
00003824 4EB8 360E                  		jsr	NemDec3
00003828 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
0000382C 6700                       		beq.s	loc_16DC
0000382E 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00003832 66EC                       		bne.s	loc_16AA
00003834 21C8 F680                  		move.l	a0,($FFFFF680).w
00003838 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000383C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00003840 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00003844 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00003848 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000384C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00003850                            
00003850                            locret_16DA:				; XREF: sub_1642
00003850 4E75                       		rts	
00003852                            ; ===========================================================================
00003852                            
00003852                            loc_16DC:                       ; XREF: sub_165E
00003852 41F8 F680                                  lea     ($FFFFF680).w,a0
00003856 43E8 0006                                  lea     6(a0),a1
0000385A 700E                                       moveq   #$E,d0          ; do $F cues
0000385C                            
0000385C                            loc_16E2:                               ; XREF: sub_165E
0000385C 20D9                                       move.l  (a1)+,(a0)+
0000385E 30D9                                       move.w  (a1)+,(a0)+
00003860 51C8 FFFA                                  dbf     d0,loc_16E2
00003864                                            
00003864 7000                                       moveq   #0,d0
00003866 20C0                                       move.l  d0,(a0)+        ; clear the last cue to avoid overcopying it
00003868 30C0                                       move.w  d0,(a0)+        ;
0000386A 4E75                                       rts
0000386C                            ; End of function sub_165E
0000386C                            
0000386C                            ; ---------------------------------------------------------------------------
0000386C                            ; Subroutine to	execute	the pattern load cue
0000386C                            ; ---------------------------------------------------------------------------
0000386C                            
0000386C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000386C                            
0000386C                            
0000386C                            RunPLC_ROM:
0000386C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00003872 D040                       		add.w	d0,d0
00003874 3031 0000                  		move.w	(a1,d0.w),d0
00003878 43F1 0000                  		lea	(a1,d0.w),a1
0000387C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000387E                            
0000387E                            RunPLC_Loop:
0000387E 2059                       		movea.l	(a1)+,a0	; get art pointer
00003880 7000                       		moveq	#0,d0
00003882 3019                       		move.w	(a1)+,d0	; get VRAM address
00003884 E588                       		lsl.l	#2,d0		; divide address by $20
00003886 E448                       		lsr.w	#2,d0
00003888 0040 4000                  		ori.w	#$4000,d0
0000388C 4840                       		swap	d0
0000388E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00003894 4EB8 3596                  		jsr	NemDec		; decompress
00003898 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000389C 4E75                       		rts	
0000389E                            ; End of function RunPLC_ROM
0000389E                            
0000389E                            ; ---------------------------------------------------------------------------
0000389E                            ; Enigma decompression algorithm
0000389E                            ; ---------------------------------------------------------------------------
0000389E                            
0000389E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000389E                            
0000389E                            
0000389E                            EniDec:
0000389E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000038A2 3640                       		movea.w	d0,a3
000038A4 1018                       		move.b	(a0)+,d0
000038A6 4880                       		ext.w	d0
000038A8 3A40                       		movea.w	d0,a5
000038AA 1818                       		move.b	(a0)+,d4
000038AC E70C                       		lsl.b	#3,d4
000038AE 3458                       		movea.w	(a0)+,a2
000038B0 D4CB                       		adda.w	a3,a2
000038B2 3858                       		movea.w	(a0)+,a4
000038B4 D8CB                       		adda.w	a3,a4
000038B6 1A18                       		move.b	(a0)+,d5
000038B8 E145                       		asl.w	#8,d5
000038BA 1A18                       		move.b	(a0)+,d5
000038BC 7C10                       		moveq	#$10,d6
000038BE                            
000038BE                            loc_173E:				; XREF: loc_1768
000038BE 7007                       		moveq	#7,d0
000038C0 3E06                       		move.w	d6,d7
000038C2 9E40                       		sub.w	d0,d7
000038C4 3205                       		move.w	d5,d1
000038C6 EE69                       		lsr.w	d7,d1
000038C8 0241 007F                  		andi.w	#$7F,d1
000038CC 3401                       		move.w	d1,d2
000038CE 0C41 0040                  		cmpi.w	#$40,d1
000038D2 6400                       		bcc.s	loc_1758
000038D4 7006                       		moveq	#6,d0
000038D6 E24A                       		lsr.w	#1,d2
000038D8                            
000038D8                            loc_1758:
000038D8 4EB9 0000 0000             		jsr	sub_188C
000038DE 0242 000F                  		andi.w	#$F,d2
000038E2 E849                       		lsr.w	#4,d1
000038E4 D241                       		add.w	d1,d1
000038E6 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
000038EA                            ; End of function EniDec
000038EA                            
000038EA                            ; ===========================================================================
000038EA                            
000038EA                            loc_1768:				; XREF: loc_17B4
000038EA 32CA                       		move.w	a2,(a1)+
000038EC 524A                       		addq.w	#1,a2
000038EE 51CA FFFA                  		dbf	d2,loc_1768
000038F2 60CA                       		bra.s	loc_173E
000038F4                            ; ===========================================================================
000038F4                            
000038F4                            loc_1772:				; XREF: loc_17B4
000038F4 32CC                       		move.w	a4,(a1)+
000038F6 51CA FFFC                  		dbf	d2,loc_1772
000038FA 60C2                       		bra.s	loc_173E
000038FC                            ; ===========================================================================
000038FC                            
000038FC                            loc_177A:				; XREF: loc_17B4
000038FC 4EB9 0000 0000             		jsr	loc_17DC
00003902                            
00003902                            loc_177E:
00003902 32C1                       		move.w	d1,(a1)+
00003904 51CA FFFC                  		dbf	d2,loc_177E
00003908 60B4                       		bra.s	loc_173E
0000390A                            ; ===========================================================================
0000390A                            
0000390A                            loc_1786:				; XREF: loc_17B4
0000390A 4EB9 0000 0000             		jsr	loc_17DC
00003910                            
00003910                            loc_178A:
00003910 32C1                       		move.w	d1,(a1)+
00003912 5241                       		addq.w	#1,d1
00003914 51CA FFFA                  		dbf	d2,loc_178A
00003918 60A4                       		bra.s	loc_173E
0000391A                            ; ===========================================================================
0000391A                            
0000391A                            loc_1794:				; XREF: loc_17B4
0000391A 4EB9 0000 0000             		jsr	loc_17DC
00003920                            
00003920                            loc_1798:
00003920 32C1                       		move.w	d1,(a1)+
00003922 5341                       		subq.w	#1,d1
00003924 51CA FFFA                  		dbf	d2,loc_1798
00003928 6094                       		bra.s	loc_173E
0000392A                            ; ===========================================================================
0000392A                            
0000392A                            loc_17A2:				; XREF: loc_17B4
0000392A 0C42 000F                  		cmpi.w	#$F,d2
0000392E 6700                       		beq.s	loc_17C4
00003930                            
00003930                            loc_17A8:
00003930 4EB9 0000 0000             		jsr	loc_17DC
00003936 32C1                       		move.w	d1,(a1)+
00003938 51CA FFF6                  		dbf	d2,loc_17A8
0000393C 6080                       		bra.s	loc_173E
0000393E                            ; ===========================================================================
0000393E                            
0000393E                            loc_17B4:				; XREF: EniDec
0000393E 60AA                       		bra.s	loc_1768
00003940                            ; ===========================================================================
00003940 60A8                       		bra.s	loc_1768
00003942                            ; ===========================================================================
00003942 60B0                       		bra.s	loc_1772
00003944                            ; ===========================================================================
00003944 60AE                       		bra.s	loc_1772
00003946                            ; ===========================================================================
00003946 60B4                       		bra.s	loc_177A
00003948                            ; ===========================================================================
00003948 60C0                       		bra.s	loc_1786
0000394A                            ; ===========================================================================
0000394A 60CE                       		bra.s	loc_1794
0000394C                            ; ===========================================================================
0000394C 60DC                       		bra.s	loc_17A2
0000394E                            ; ===========================================================================
0000394E                            
0000394E                            loc_17C4:				; XREF: loc_17A2
0000394E 5348                       		subq.w	#1,a0
00003950 0C46 0010                  		cmpi.w	#$10,d6
00003954 6600                       		bne.s	loc_17CE
00003956 5348                       		subq.w	#1,a0
00003958                            
00003958                            loc_17CE:
00003958 3008                       		move.w	a0,d0
0000395A E248                       		lsr.w	#1,d0
0000395C 6400                       		bcc.s	loc_17D6
0000395E 5248                       		addq.w	#1,a0
00003960                            
00003960                            loc_17D6:
00003960 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00003964 4E75                       		rts	
00003966                            ; ===========================================================================
00003966                            
00003966                            loc_17DC:				; XREF: loc_17A2
00003966 360B                       		move.w	a3,d3
00003968 1204                       		move.b	d4,d1
0000396A D201                       		add.b	d1,d1
0000396C 6400                       		bcc.s	loc_17EE
0000396E 5346                       		subq.w	#1,d6
00003970 0D05                       		btst	d6,d5
00003972 6700                       		beq.s	loc_17EE
00003974 0043 8000                  		ori.w	#-$8000,d3
00003978                            
00003978                            loc_17EE:
00003978 D201                       		add.b	d1,d1
0000397A 6400                       		bcc.s	loc_17FC
0000397C 5346                       		subq.w	#1,d6
0000397E 0D05                       		btst	d6,d5
00003980 6700                       		beq.s	loc_17FC
00003982 0643 4000                  		addi.w	#$4000,d3
00003986                            
00003986                            loc_17FC:
00003986 D201                       		add.b	d1,d1
00003988 6400                       		bcc.s	loc_180A
0000398A 5346                       		subq.w	#1,d6
0000398C 0D05                       		btst	d6,d5
0000398E 6700                       		beq.s	loc_180A
00003990 0643 2000                  		addi.w	#$2000,d3
00003994                            
00003994                            loc_180A:
00003994 D201                       		add.b	d1,d1
00003996 6400                       		bcc.s	loc_1818
00003998 5346                       		subq.w	#1,d6
0000399A 0D05                       		btst	d6,d5
0000399C 6700                       		beq.s	loc_1818
0000399E 0043 1000                  		ori.w	#$1000,d3
000039A2                            
000039A2                            loc_1818:
000039A2 D201                       		add.b	d1,d1
000039A4 6400                       		bcc.s	loc_1826
000039A6 5346                       		subq.w	#1,d6
000039A8 0D05                       		btst	d6,d5
000039AA 6700                       		beq.s	loc_1826
000039AC 0043 0800                  		ori.w	#$800,d3
000039B0                            
000039B0                            loc_1826:
000039B0 3205                       		move.w	d5,d1
000039B2 3E06                       		move.w	d6,d7
000039B4 9E4D                       		sub.w	a5,d7
000039B6 6400                       		bcc.s	loc_1856
000039B8 3C07                       		move.w	d7,d6
000039BA 0646 0010                  		addi.w	#$10,d6
000039BE 4447                       		neg.w	d7
000039C0 EF69                       		lsl.w	d7,d1
000039C2 1A10                       		move.b	(a0),d5
000039C4 EF3D                       		rol.b	d7,d5
000039C6 DE47                       		add.w	d7,d7
000039C8 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000039CC D245                       		add.w	d5,d1
000039CE                            
000039CE                            loc_1844:				; XREF: loc_1868
000039CE 300D                       		move.w	a5,d0
000039D0 D040                       		add.w	d0,d0
000039D2 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000039D6 D243                       		add.w	d3,d1
000039D8 1A18                       		move.b	(a0)+,d5
000039DA E14D                       		lsl.w	#8,d5
000039DC 1A18                       		move.b	(a0)+,d5
000039DE 4E75                       		rts	
000039E0                            ; ===========================================================================
000039E0                            
000039E0                            loc_1856:				; XREF: loc_1826
000039E0 6700                       		beq.s	loc_1868
000039E2 EE69                       		lsr.w	d7,d1
000039E4 300D                       		move.w	a5,d0
000039E6 D040                       		add.w	d0,d0
000039E8 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000039EC D243                       		add.w	d3,d1
000039EE 300D                       		move.w	a5,d0
000039F0 6000                       		bra.s	sub_188C
000039F2                            ; ===========================================================================
000039F2                            
000039F2                            loc_1868:				; XREF: loc_1856
000039F2 7C10                       		moveq	#$10,d6
000039F4                            
000039F4                            loc_186A:
000039F4 60D8                       		bra.s	loc_1844
000039F6                            ; ===========================================================================
000039F6 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00003A0C 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00003A16                            
00003A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A16                            
00003A16                            
00003A16                            sub_188C:				; XREF: EniDec
00003A16 9C40                       		sub.w	d0,d6
00003A18 0C46 0009                  		cmpi.w	#9,d6
00003A1C 6400                       		bcc.s	locret_189A
00003A1E 5046                       		addq.w	#8,d6
00003A20 E145                       		asl.w	#8,d5
00003A22 1A18                       		move.b	(a0)+,d5
00003A24                            
00003A24                            locret_189A:
00003A24 4E75                       		rts	
00003A26                            ; End of function sub_188C
00003A26                            
00003A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00003A26                            ; ---------------------------------------------------------------------------
00003A26                            ; KOSINSKI DECOMPRESSION PROCEDURE
00003A26                            ; (sometimes called KOZINSKI decompression)
00003A26                            
00003A26                            ; This is the only procedure in the game that stores variables on the stack.
00003A26                            
00003A26                            ; ARGUMENTS:
00003A26                            ; a0 = source address
00003A26                            ; a1 = destination address
00003A26                            
00003A26                            ; For format explanation see http://info.sonicretro.org/Kosinski_compression
00003A26                            ; New faster version by vladikcomper
00003A26                            ; ---------------------------------------------------------------------------
00003A26                            ; ===========================================================================
00003A26                            ; KozDec_193A:
00003A26                            KosDec:
00003A26 7E07                               moveq   #7,d7
00003A28 7000                               moveq   #0,d0
00003A2A 7200                               moveq   #0,d1
00003A2C 49FA 0000                          lea     KosDec_ByteMap(pc),a4
00003A30 1018                               move.b  (a0)+,d0                        ; get desc field low-byte
00003A32 1218                               move.b  (a0)+,d1                        ; get desc field hi-byte
00003A34 1034 0000                          move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
00003A38 1234 1000                          move.b  (a4,d1.w),d1                    ;
00003A3C 7407                               moveq   #7,d2                           ; set repeat count to 8
00003A3E 76FF                               moveq   #-1,d3                          ; d3 will be desc field switcher
00003A40 4243                               clr.w   d3                              ;
00003A42 6000                               bra.s   KosDec_FetchNewCode
00003A44                             
00003A44                            KosDec_FetchCodeLoop:
00003A44                                    ; code 1 (Uncompressed byte)
00003A44 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003A5C 12D8                               move.b  (a0)+,(a1)+
00003A5E                             
00003A5E                            KosDec_FetchNewCode:
00003A5E D000                               add.b   d0,d0                           ; get a bit from the bitstream
00003A60 65E2                               bcs.s   KosDec_FetchCodeLoop            ; if code = 0, branch
00003A62                             
00003A62                                    ; codes 00 and 01
00003A62 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003A7A 7800                               moveq   #0,d4                           ; d4 will contain copy count
00003A7C D000                               add.b   d0,d0                           ; get a bit from the bitstream
00003A7E 6500                               bcs.s   KosDec_Code_01
00003A80                             
00003A80                                    ; code 00 (Dictionary ref. short)
00003A80 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003A98 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00003A9A D944                               addx.w  d4,d4
00003A9C 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003AB4 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00003AB6 D944                               addx.w  d4,d4
00003AB8 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003AD0 7AFF                               moveq   #-1,d5
00003AD2 1A18                               move.b  (a0)+,d5                        ; d5 = displacement
00003AD4                             
00003AD4                            KosDec_StreamCopy:
00003AD4 47F1 5000                          lea     (a1,d5),a3
00003AD8 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00003ADA                             
00003ADA                            KosDec_copy:
00003ADA 12DB                               move.b  (a3)+,(a1)+
00003ADC 51CC FFFC                          dbf     d4,KosDec_copy
00003AE0 6000 FF7C                          bra.w   KosDec_FetchNewCode
00003AE4                            ; ---------------------------------------------------------------------------
00003AE4                            KosDec_Code_01:
00003AE4                                    ; code 01 (Dictionary ref. long / special)
00003AE4 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003AFC 1C18                               move.b  (a0)+,d6                        ; d6 = %LLLLLLLL
00003AFE 1818                               move.b  (a0)+,d4                        ; d4 = %HHHHHCCC
00003B00 7AFF                               moveq   #-1,d5
00003B02 1A04                               move.b  d4,d5                           ; d5 = %11111111 HHHHHCCC
00003B04 EB4D                               lsl.w   #5,d5                           ; d5 = %111HHHHH CCC00000
00003B06 1A06                               move.b  d6,d5                           ; d5 = %111HHHHH LLLLLLLL
00003B08 C847                               and.w   d7,d4                           ; d4 = %00000CCC
00003B0A 66C8                               bne.s   KosDec_StreamCopy               ; if CCC=0, branch
00003B0C                             
00003B0C                                    ; special mode (extended counter)
00003B0C 1818                               move.b  (a0)+,d4                        ; read cnt
00003B0E 6700                               beq.s   KosDec_Quit                     ; if cnt=0, quit decompression
00003B10 5304                               subq.b  #1,d4
00003B12 6700 FF4A                          beq.w   KosDec_FetchNewCode             ; if cnt=1, fetch a new code
00003B16                             
00003B16 47F1 5000                          lea     (a1,d5),a3
00003B1A 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00003B1C 3C04                               move.w  d4,d6
00003B1E 4646                               not.w   d6
00003B20 CC47                               and.w   d7,d6
00003B22 DC46                               add.w   d6,d6
00003B24 E64C                               lsr.w   #3,d4
00003B26 4EFB 6000                          jmp     KosDec_largecopy(pc,d6.w)
00003B2A                             
00003B2A                            KosDec_largecopy:
00003B2A                                    rept 8
00003B2A                                    move.b  (a3)+,(a1)+
00003B2A 12DB 12DB 12DB 12DB 12DB+          endr
00003B3A 51CC FFEE                          dbf     d4,KosDec_largecopy
00003B3E 6000 FF1E                          bra.w   KosDec_FetchNewCode
00003B42                             
00003B42                            KosDec_Quit:
00003B42 4E75                               rts
00003B44                             
00003B44                            ; ---------------------------------------------------------------------------
00003B44                            ; A look-up table to invert bits order in desc. field bytes
00003B44                            ; ---------------------------------------------------------------------------
00003B44                             
00003B44                            KosDec_ByteMap:
00003B44 0080 40C0 20A0 60E0 1090+          dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00003B54 0888 48C8 28A8 68E8 1898+          dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00003B64 0484 44C4 24A4 64E4 1494+          dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00003B74 0C8C 4CCC 2CAC 6CEC 1C9C+          dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00003B84 0282 42C2 22A2 62E2 1292+          dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00003B94 0A8A 4ACA 2AAA 6AEA 1A9A+          dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00003BA4 0686 46C6 26A6 66E6 1696+          dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00003BB4 0E8E 4ECE 2EAE 6EEE 1E9E+          dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00003BC4 0181 41C1 21A1 61E1 1191+          dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00003BD4 0989 49C9 29A9 69E9 1999+          dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00003BE4 0585 45C5 25A5 65E5 1595+          dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00003BF4 0D8D 4DCD 2DAD 6DED 1D9D+          dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00003C04 0383 43C3 23A3 63E3 1393+          dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00003C14 0B8B 4BCB 2BAB 6BEB 1B9B+          dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00003C24 0787 47C7 27A7 67E7 1797+          dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00003C34 0F8F 4FCF 2FAF 6FEF 1F9F+          dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00003C44                             
00003C44                            ; ===========================================================================
00003C44 4E71                       		nop
00003C46                            
00003C46                            ; ---------------------------------------------------------------------------
00003C46                            ; Pallet cycling routine loading subroutine
00003C46                            ; ---------------------------------------------------------------------------
00003C46                            
00003C46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C46                            
00003C46                            
00003C46                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00003C46 6100 0000                  		bsr.w	PalCycle_SuperSonic
00003C4A 7400                       		moveq	#0,d2
00003C4C 7000                       		moveq	#0,d0
00003C4E 1038 FE10                  		move.b	($FFFFFE10).w,d0	; get level number
00003C52 D040                       		add.w	d0,d0				; multiply by 2
00003C54 303B 0000                  		move.w	PalCycle(pc,d0.w),d0; load animated pallets offset index into d0
00003C58 4EFB 0000                  		jmp	PalCycle(pc,d0.w)		; jump to PalCycle + offset index
00003C5C                            ; End of function PalCycle_Load
00003C5C                            
00003C5C                            ; ===========================================================================
00003C5C                            ; ---------------------------------------------------------------------------
00003C5C                            ; Pallet cycling routines
00003C5C                            ; ---------------------------------------------------------------------------
00003C5C 0000                       PalCycle:	dc.w PalCycle_ABZ-PalCycle
00003C5E 0000                       		dc.w PalCycle_LZ-PalCycle
00003C60 0000                       		dc.w PalCycle_MZ-PalCycle
00003C62 0000                       		dc.w PalCycle_SLZ-PalCycle
00003C64 0000                       		dc.w PalCycle_SYZ-PalCycle
00003C66 0000                       		dc.w PalCycle_SBZ-PalCycle
00003C68 0000                       		dc.w PalCycle_END-PalCycle
00003C6A 0000                       		dc.w PalCycle_ABZ-PalCycle
00003C6C                            
00003C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C6C                            
00003C6C                            PalCycle_ABZ:				; XREF: PalCycle
00003C6C 4E75                       		rts	
00003C6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C6E                            
00003C6E                            
00003C6E                            PalCycle_Title:				; XREF: TitleScreen
00003C6E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00003C74 6000                       		bra.s	loc_196A
00003C76                            ; ===========================================================================
00003C76                            
00003C76                            PalCycle_GHZ:				; XREF: PalCycle
00003C76 4A38 FFCF                  		tst.b	($FFFFFFCF).w	; was after ending flag set?
00003C7A 6600 0000                  		bne.w	PalCycle_END	; if yes, branch
00003C7E 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00003C84                            ;		tst.b	($FFFFFFFE).w	; is original mode?
00003C84                            ;		bra.w	loc_196A		; if not, branch
00003C84                            ;		lea	(Pall_GHZCyc).l,a0
00003C84                            
00003C84                            loc_196A:				; XREF: PalCycle_Title
00003C84 5378 F634                  		subq.w	#1,($FFFFF634).w
00003C88 6A00                       		bpl.s	locret_1990
00003C8A 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00003C90 3038 F632                  		move.w	($FFFFF632).w,d0
00003C94 5278 F632                  		addq.w	#1,($FFFFF632).w
00003C98 0240 0003                  		andi.w	#3,d0
00003C9C E748                       		lsl.w	#3,d0
00003C9E 43F8 FB50                  		lea	($FFFFFB50).w,a1
00003CA2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003CA6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00003CAA                            
00003CAA                            locret_1990:
00003CAA 4E75                       		rts	
00003CAC                            ; End of function PalCycle_Title
00003CAC                            
00003CAC                            
00003CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CAC                            
00003CAC                            
00003CAC                            PalCycle_LZ:				; XREF: PalCycle
00003CAC 5378 F634                  		subq.w	#1,($FFFFF634).w
00003CB0 6A00                       		bpl.s	loc_19D8
00003CB2 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00003CB8 3038 F632                  		move.w	($FFFFF632).w,d0
00003CBC 5278 F632                  		addq.w	#1,($FFFFF632).w
00003CC0 0240 0003                  		andi.w	#3,d0
00003CC4 E748                       		lsl.w	#3,d0
00003CC6 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00003CCC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00003CD2 6600                       		bne.s	loc_19C0
00003CD4 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00003CDA                            
00003CDA                            loc_19C0:
00003CDA 43F8 FB56                  		lea	($FFFFFB56).w,a1
00003CDE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003CE2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00003CE6 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00003CEA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003CEE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00003CF2                            
00003CF2                            loc_19D8:
00003CF2 3038 FE04                  		move.w	($FFFFFE04).w,d0
00003CF6 0240 0007                  		andi.w	#7,d0
00003CFA 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00003CFE 6700                       		beq.s	locret_1A3A
00003D00 7201                       		moveq	#1,d1
00003D02 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00003D06 6700                       		beq.s	loc_19F0
00003D08 4441                       		neg.w	d1
00003D0A                            
00003D0A                            loc_19F0:
00003D0A 3038 F550                  		move.w	($FFFFF550).w,d0
00003D0E 0240 0003                  		andi.w	#3,d0
00003D12 D041                       		add.w	d1,d0
00003D14 0C40 0003                  		cmpi.w	#3,d0
00003D18 6500                       		bcs.s	loc_1A0A
00003D1A 3200                       		move.w	d0,d1
00003D1C 7000                       		moveq	#0,d0
00003D1E 4A41                       		tst.w	d1
00003D20 6A00                       		bpl.s	loc_1A0A
00003D22 7002                       		moveq	#2,d0
00003D24                            
00003D24                            loc_1A0A:
00003D24 31C0 F550                  		move.w	d0,($FFFFF550).w
00003D28 D040                       		add.w	d0,d0
00003D2A 3200                       		move.w	d0,d1
00003D2C D040                       		add.w	d0,d0
00003D2E D041                       		add.w	d1,d0
00003D30 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00003D36 43F8 FB76                  		lea	($FFFFFB76).w,a1
00003D3A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003D3E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00003D42 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00003D48 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00003D4C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003D50 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00003D54                            
00003D54                            locret_1A3A:
00003D54 4E75                       		rts	
00003D56                            ; End of function PalCycle_LZ
00003D56                            
00003D56                            ; ===========================================================================
00003D56 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00003D5E                            ; ===========================================================================
00003D5E                            
00003D5E                            PalCycle_MZ:				; XREF: PalCycle
00003D5E 4E75                       		rts	
00003D60                            
00003D60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003D60                            
00003D60                            
00003D60                            PalCycle_SLZ:				; XREF: PalCycle
00003D60 5378 F634                  		subq.w	#1,($FFFFF634).w
00003D64 6A00                       		bpl.s	locret_1A80
00003D66 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00003D6C 3038 F632                  		move.w	($FFFFF632).w,d0
00003D70 5240                       		addq.w	#1,d0
00003D72 0C40 0006                  		cmpi.w	#6,d0
00003D76 6500                       		bcs.s	loc_1A60
00003D78 7000                       		moveq	#0,d0
00003D7A                            
00003D7A                            loc_1A60:
00003D7A 31C0 F632                  		move.w	d0,($FFFFF632).w
00003D7E 3200                       		move.w	d0,d1
00003D80 D241                       		add.w	d1,d1
00003D82 D041                       		add.w	d1,d0
00003D84 D040                       		add.w	d0,d0
00003D86 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00003D8C 43F8 FB56                  		lea	($FFFFFB56).w,a1
00003D90 32B0 0000                  		move.w	(a0,d0.w),(a1)
00003D94 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00003D9A                            
00003D9A                            locret_1A80:
00003D9A 4E75                       		rts	
00003D9C                            ; End of function PalCycle_SLZ
00003D9C                            
00003D9C                            
00003D9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003D9C                            
00003D9C                            
00003D9C                            PalCycle_SYZ:				; XREF: PalCycle
00003D9C 5378 F634                  		subq.w	#1,($FFFFF634).w
00003DA0 6A00                       		bpl.s	locret_1AC6
00003DA2 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00003DA8 3038 F632                  		move.w	($FFFFF632).w,d0
00003DAC 5278 F632                  		addq.w	#1,($FFFFF632).w
00003DB0 0240 0003                  		andi.w	#3,d0
00003DB4 E548                       		lsl.w	#2,d0
00003DB6 3200                       		move.w	d0,d1
00003DB8 D040                       		add.w	d0,d0
00003DBA 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00003DC0 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00003DC4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003DC8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00003DCC 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00003DD2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00003DD6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00003DDA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00003DE0                            
00003DE0                            locret_1AC6:
00003DE0 4E75                       		rts	
00003DE2                            ; End of function PalCycle_SYZ
00003DE2                            
00003DE2                            
00003DE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003DE2                            
00003DE2                            
00003DE2                            PalCycle_SBZ:				; XREF: PalCycle
00003DE2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00003DE8 4A38 FE11                  		tst.b	($FFFFFE11).w
00003DEC 6700                       		beq.s	loc_1ADA
00003DEE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00003DF4                            
00003DF4                            loc_1ADA:
00003DF4 43F8 F550                  		lea	($FFFFF550).w,a1
00003DF8 321A                       		move.w	(a2)+,d1
00003DFA                            
00003DFA                            loc_1AE0:
00003DFA 5311                       		subq.b	#1,(a1)
00003DFC 6B00                       		bmi.s	loc_1AEA
00003DFE 5489                       		addq.l	#2,a1
00003E00 5C8A                       		addq.l	#6,a2
00003E02 6000                       		bra.s	loc_1B06
00003E04                            ; ===========================================================================
00003E04                            
00003E04                            loc_1AEA:				; XREF: PalCycle_SBZ
00003E04 12DA                       		move.b	(a2)+,(a1)+
00003E06 1011                       		move.b	(a1),d0
00003E08 5200                       		addq.b	#1,d0
00003E0A B01A                       		cmp.b	(a2)+,d0
00003E0C 6500                       		bcs.s	loc_1AF6
00003E0E 7000                       		moveq	#0,d0
00003E10                            
00003E10                            loc_1AF6:
00003E10 12C0                       		move.b	d0,(a1)+
00003E12 0240 000F                  		andi.w	#$F,d0
00003E16 D040                       		add.w	d0,d0
00003E18 305A                       		movea.w	(a2)+,a0
00003E1A 365A                       		movea.w	(a2)+,a3
00003E1C 36B0 0000                  		move.w	(a0,d0.w),(a3)
00003E20                            
00003E20                            loc_1B06:				; XREF: PalCycle_SBZ
00003E20 51C9 FFD8                  		dbf	d1,loc_1AE0
00003E24 5378 F634                  		subq.w	#1,($FFFFF634).w
00003E28 6A00                       		bpl.s	locret_1B64
00003E2A 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00003E30 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00003E36 4A38 FE11                  		tst.b	($FFFFFE11).w
00003E3A 6700                       		beq.s	loc_1B2E
00003E3C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00003E42 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003E48                            
00003E48                            loc_1B2E:
00003E48 72FF                       		moveq	#-1,d1
00003E4A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00003E4E 6700                       		beq.s	loc_1B38
00003E50 4441                       		neg.w	d1
00003E52                            
00003E52                            loc_1B38:
00003E52 3038 F632                  		move.w	($FFFFF632).w,d0
00003E56 0240 0003                  		andi.w	#3,d0
00003E5A D041                       		add.w	d1,d0
00003E5C 0C40 0003                  		cmpi.w	#3,d0
00003E60 6500                       		bcs.s	loc_1B52
00003E62 3200                       		move.w	d0,d1
00003E64 7000                       		moveq	#0,d0
00003E66 4A41                       		tst.w	d1
00003E68 6A00                       		bpl.s	loc_1B52
00003E6A 7002                       		moveq	#2,d0
00003E6C                            
00003E6C                            loc_1B52:
00003E6C 31C0 F632                  		move.w	d0,($FFFFF632).w
00003E70 D040                       		add.w	d0,d0
00003E72 43F8 FB58                  		lea	($FFFFFB58).w,a1
00003E76 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003E7A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00003E7E                            
00003E7E                            locret_1B64:
00003E7E 4E75                       		rts	
00003E80                            ; End of function PalCycle_SBZ
00003E80                            
00003E80                            
00003E80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E80                            
00003E80                            
00003E80                            PalCycle_END:				; XREF: PalCycle
00003E80 41F9 0000 0000             		lea	(Pal_ENDCyc).l,a0
00003E86                            ;		tst.b	($FFFFFFFE).w	; is original mode?
00003E86                            ;		beq.w	loc_196A		; if not, branch
00003E86                            ;		lea	(Pall_ENDCyc).l,a0
00003E86 6000 FDFC                  		bra.w	loc_196A
00003E8A                            ; End of function PalCycle_SBZ
00003E8A                            
00003E8A                            ; ===========================================================================
00003E8A                            ; ---------------------------------------------------------------------------
00003E8A                            ; Pallet Cycling data
00003E8A                            ; ---------------------------------------------------------------------------
00003E8A                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00003EAA                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00003ECA                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00003EEA                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00003EFC                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00003F0E                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00003F76                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00003F9A                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00003FBA                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00003FCA                            
00003FCA                            Pal_SBZCycList:
00003FCA                            		include	"_inc\SBZ pallet script 1.asm"
00003FCA                            ; ---------------------------------------------------------------------------
00003FCA                            ; Scrap Brain Zone 1 pallet cycling script
00003FCA                            ; ---------------------------------------------------------------------------
00003FCA 0008                       	dc.w 8			; number of entries - 1
00003FCC 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00003FCE 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00003FD0 FB50                       	dc.w $FB50		; RAM address
00003FD2 0D08                       	dc.b $D, 8
00003FD4 0000                       	dc.w Pal_SBZCyc2
00003FD6 FB52                       	dc.w $FB52
00003FD8 0E08                       	dc.b $E, 8
00003FDA 0000                       	dc.w Pal_SBZCyc3
00003FDC FB6E                       	dc.w $FB6E
00003FDE 0B08                       	dc.b $B, 8
00003FE0 0000                       	dc.w Pal_SBZCyc5
00003FE2 FB70                       	dc.w $FB70
00003FE4 0708                       	dc.b 7,	8
00003FE6 0000                       	dc.w Pal_SBZCyc6
00003FE8 FB72                       	dc.w $FB72
00003FEA 1C10                       	dc.b $1C, $10
00003FEC 0000                       	dc.w Pal_SBZCyc7
00003FEE FB7E                       	dc.w $FB7E
00003FF0 0303                       	dc.b 3,	3
00003FF2 0000                       	dc.w Pal_SBZCyc8
00003FF4 FB78                       	dc.w $FB78
00003FF6 0303                       	dc.b 3,	3
00003FF8 0000                       	dc.w Pal_SBZCyc8+2
00003FFA FB7A                       	dc.w $FB7A
00003FFC 0303                       	dc.b 3,	3
00003FFE 0000                       	dc.w Pal_SBZCyc8+4
00004000 FB7C                       	dc.w $FB7C
00004002                            	even
00004002                            	even
00004002                            
00004002                            Pal_SBZCycList2:
00004002                            		include	"_inc\SBZ pallet script 2.asm"
00004002                            ; ---------------------------------------------------------------------------
00004002                            ; Scrap Brain Zone 2 pallet cycling script
00004002                            ; ---------------------------------------------------------------------------
00004002 0006                       	dc.w 6
00004004 0708                       	dc.b 7,	8
00004006 0000                       	dc.w Pal_SBZCyc1
00004008 FB50                       	dc.w $FB50
0000400A 0D08                       	dc.b $D, 8
0000400C 0000                       	dc.w Pal_SBZCyc2
0000400E FB52                       	dc.w $FB52
00004010 0908                       	dc.b 9,	8
00004012 0000                       	dc.w Pal_SBZCyc9
00004014 FB70                       	dc.w $FB70
00004016 0708                       	dc.b 7,	8
00004018 0000                       	dc.w Pal_SBZCyc6
0000401A FB72                       	dc.w $FB72
0000401C 0303                       	dc.b 3,	3
0000401E 0000                       	dc.w Pal_SBZCyc8
00004020 FB78                       	dc.w $FB78
00004022 0303                       	dc.b 3,	3
00004024 0000                       	dc.w Pal_SBZCyc8+2
00004026 FB7A                       	dc.w $FB7A
00004028 0303                       	dc.b 3,	3
0000402A 0000                       	dc.w Pal_SBZCyc8+4
0000402C FB7C                       	dc.w $FB7C
0000402E                            	even
0000402E                            	even
0000402E                            
0000402E                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
0000403E                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
0000404E                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
0000405E                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
0000406A                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
0000407A                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
0000408A                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
000040AA                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
000040B4                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
000040C4                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
000040D0                            Pal_ENDCyc:	incbin	pallet\c_end.bin
000040F0                            
000040F0                            ; ---------------------------------------------------------------------------
000040F0                            ; Original Pallet Cycling data
000040F0                            ; ---------------------------------------------------------------------------
000040F0                            Pall_GHZCyc:	incbin	pallet_o\c_ghz.bin
00004110                            Pall_ENDCyc:	incbin	pallet_o\c_end.bin
00004130                            
00004130                            
00004130                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004130                            
00004130                            ; sub_213E:
00004130                            PalCycle_SuperSonic:
00004130 1038 F65F                  		move.b	($FFFFF65F).w,d0
00004134 6700                       		beq.s	locret_214E
00004136 6B00 0000                  		bmi.w	loc_21B0
0000413A 5300                       		subq.b	#1,d0
0000413C 6600                       		bne.s	loc_2150
0000413E 5338 F65E                  		subq.b	#1,($FFFFF65E).w
00004142 6A00                       		bpl.s	locret_214E
00004144 11FC 0001 F65E             		move.b	#1,($FFFFF65E).w
0000414A 41F9 0000 0000             		lea	(Pal_2246).l,a0
00004150 3038 F65C                  		move.w	($FFFFF65C).w,d0
00004154 5C78 F65C                  		addq.w	#6,($FFFFF65C).w
00004158 0C78 0024 F65C             		cmpi.w	#$24,($FFFFF65C).w ; '$'
0000415E 6500                       		bcs.s	@loc1
00004160 11FC 00FF F65F             		move.b	#-1,(Super_Sonic_palette).w
00004166 11FC 0000 F7C8             		move.b	#0,($FFFFF7C8).w
0000416C 43F8 FB04                  @loc1:		lea	(Normal_palette+4).w,a1
00004170 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00004174 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00004178 41F9 0000 0000             		lea	(Pal_22C6).l,a0
0000417E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00004184 6700                       		beq.s	loc_21A2
00004186 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w
0000418C 6600                       		bne.s	locret_214E
0000418E 41F9 0000 0000             		lea	(Pal_2346).l,a0
00004194 43F8 FA84                  		lea	(Underwater_palette+4).w,a1
00004198 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000419C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000041A0                            
000041A0                            locret_214E:				; CODE XREF: sub_20D4+Ej sub_20D4+1Cj	...
000041A0 4E75                       		rts
000041A2                            ; ---------------------------------------------------------------------------
000041A2                            
000041A2                            loc_2150:				; CODE XREF: sub_20D4+16j
000041A2 5338 F65E                  		subq.b	#1,($FFFFF65E).w
000041A6 6AF8                       		bpl.s	locret_214E
000041A8 11FC 0003 F65E             		move.b	#3,($FFFFF65E).w
000041AE 41F9 0000 0000             		lea	(Pal_2246).l,a0
000041B4 3038 F65C                  		move.w	($FFFFF65C).w,d0
000041B8 5178 F65C                  		subq.w	#8,($FFFFF65C).w
000041BC 6400                       		bcc.s	loc_2178
000041BE 31FC 0000 F65C             		move.w	#0,($FFFFF65C).w
000041C4 11FC 0000 F65F             		move.b	#0,($FFFFF65F).w
000041CA                            
000041CA                            loc_2178:				; CODE XREF: sub_20D4+96j
000041CA 43F8 FB04                  		lea	(Normal_palette+4).w,a1
000041CE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000041D2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000041D6 41F9 0000 0000             		lea	(Pal_22C6).l,a0
000041DC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000041E2 6700 0000                  		beq.w	loc_21A2
000041E6 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w
000041EC 66B2                       		bne.s	locret_214E
000041EE 41F9 0000 0000             		lea	(Pal_2346).l,a0
000041F4                            
000041F4                            loc_21A2:				; CODE XREF: sub_20D4+5Ej sub_20D4+BCj
000041F4 43F8 FA84                  		lea	(Underwater_palette+4).w,a1
000041F8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000041FC 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00004200 4E75                       		rts
00004202                            ; ---------------------------------------------------------------------------
00004202                            
00004202                            loc_21B0:				; CODE XREF: sub_20D4+10j
00004202 5338 F65E                  		subq.b	#1,($FFFFF65E).w
00004206 6A98                       		bpl.s	locret_214E
00004208 11FC 0006 F65E             		move.b	#6,($FFFFF65E).w
0000420E 41F9 0000 0000             		lea	(Pal_2246).l,a0
00004214 3038 F65C                  		move.w	($FFFFF65C).w,d0
00004218 5C78 F65C                  		addq.w	#6,($FFFFF65C).w
0000421C 0C78 0036 F65C             		cmpi.w	#$36,($FFFFF65C).w ; '6'
00004222 6500                       		bcs.s	loc_21D8
00004224 31FC 0024 F65C             		move.w	#$24,($FFFFF65C).w ; '$'
0000422A                            
0000422A                            loc_21D8:				; CODE XREF: sub_20D4+FCj
0000422A 43F8 FB04                  		lea	(Normal_palette+4).w,a1
0000422E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00004232 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00004236 41F9 0000 0000             		lea	(Pal_22C6).l,a0
0000423C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00004242 6700 0000                  		beq.w	loc_2204
00004246 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w
0000424C 6600 FF52                  		bne.w	locret_214E
00004250 41F9 0000 0000             		lea	(Pal_2346).l,a0
00004256                            
00004256                            loc_2204:				; CODE XREF: sub_20D4+11Cj
00004256 43F8 FA84                  		lea	(Underwater_palette+4).w,a1
0000425A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000425E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00004262 4E75                       		rts
00004264                            ; ---------------------------------------------------------------------------
00004264                            
00004264                            loc_2220:				; DATA XREF: ROM:0005A3C8o
00004264                            					; ROM:0005A5C4o ...
00004264 5338 F65E                  		subq.b	#1,($FFFFF65E).w
00004268 6A00                       		bpl.s	locret_223E
0000426A 11FC 0003 F65E             		move.b	#3,($FFFFF65E).w
00004270 11FC 00FF F65F             		move.b	#$FF,($FFFFF65F).w
00004276 31FC 0000 F65C             		move.w	#0,($FFFFF65C).w
0000427C 11FC 0000 D02A             		move.b	#0,($FFFFD02A).w
00004282                            
00004282                            locret_223E:				; CODE XREF: sub_20D4+142j
00004282                            					; sub_20D4:loc_2224j ...
00004282 4E75                       		rts
00004284                            ; ---------------------------------------------------------------------------
00004284                            
00004284                            loc_2240:				; CODE XREF: sub_20D4+14Aj
00004284                            					; DATA XREF: ROM:000732FCo ...
00004284 7000                       		moveq	#0,d0
00004286 31C0 F65C                  		move.w	d0,($FFFFF65C).w
0000428A 11C0 F65F                  		move.b	d0,($FFFFF65F).w
0000428E 41F9 0000 0000             		lea	(Pal_22C6).l,a0
00004294 6000 0000                  		bra.w	loc2X
00004298                            ; ---------------------------------------------------------------------------
00004298                            
00004298                            loc_2254:				; CODE XREF: sub_20D4+144j
00004298                            					; DATA XREF: ROM:001E05CCo
00004298 5338 F65E                  		subq.b	#1,($FFFFF65E).w
0000429C 6A00 FFE4                  		bpl.w	locret_223E
000042A0 11FC 0002 F65E             		move.b	#2,($FFFFF65E).w
000042A6 41F9 0000 0000             		lea	(Pal_2246).l,a0
000042AC 3038 F65C                  		move.w	($FFFFF65C).w,d0
000042B0 5C78 F65C                  		addq.w	#6,($FFFFF65C).w
000042B4 0C78 003C F65C             		cmpi.w	#$3C,($FFFFF65C).w ; '<'
000042BA 6500                       		bcs.s	loc2X
000042BC 31FC 0000 F65C             		move.w	#0,($FFFFF65C).w
000042C2 11FC 000E F65E             		move.b	#$E,($FFFFF65E).w
000042C8 43F8 FB04                  loc2X:		lea	(Normal_palette+4).w,a1
000042CC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000042D0 3370 0004 0002             		move.w	4(a0,d0.w),2(a1)
000042D6 4A38 F730                  		tst.b	($FFFFF730).w
000042DA 6700 FFA6                  		beq.w	locret_223E
000042DE 43F8 FA84                  		lea	($FFFFFA84).w,a1
000042E2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000042E6 3370 0004 0002             		move.w	4(a0,d0.w),2(a1)
000042EC 4E75                       		rts
000042EE                            ; End of function PalCycle_SuperSonic
000042EE                            
000042EE                            ; ===========================================================================
000042EE                            ;----------------------------------------------------------------------------
000042EE                            ;Palette for transformation to Super Sonic
000042EE                            ;----------------------------------------------------------------------------
000042EE                            Pal_2246:	incbin	"art/palettes/Super Sonic transformation S3.bin"
0000436E                            ;----------------------------------------------------------------------------
0000436E                            ;Palette for transformation to Super Sonic while underwater in CPZ
0000436E                            ;----------------------------------------------------------------------------
0000436E                            Pal_22C6:	incbin	pallet/LZSuperSonic.bin
000043EE                            ;----------------------------------------------------------------------------
000043EE                            ;Palette for transformation to Super Sonic while underwater in ARZ
000043EE                            ;----------------------------------------------------------------------------
000043EE                            Pal_2346:	incbin	pallet/SBZ3SuperSonic.bin
0000446E                            ; ---------------------------------------------------------------------------
0000446E                            ; Subroutine to	fade out and fade in
0000446E                            ; ---------------------------------------------------------------------------
0000446E                            
0000446E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000446E                            
0000446E                            Pal_FadeTo:
0000446E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004474                             
00004474                            Pal_FadeTo2:
00004474 7000                       		moveq	#0,d0
00004476 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000447A 1038 F626                  		move.b	($FFFFF626).w,d0
0000447E D0C0                       		adda.w	d0,a0
00004480 7200                       		moveq	#0,d1
00004482 1038 F627                  		move.b	($FFFFF627).w,d0
00004486                             
00004486                            Pal_ToBlack:
00004486 30C1                       		move.w	d1,(a0)+
00004488 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
0000448C 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
0000448E 7C00                       		moveq	#$00,d6					; MJ: clear d6
00004490                             
00004490                            loc_1DCE:
00004490 4EB8 3762                  		jsr	RunPLC_RAM
00004494 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000449A 4EB9 0000 0000             		jsr	DelayProgram
000044A0 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
000044A4 67EA                       		beq	loc_1DCE				; MJ: if null, delay a frame
000044A6 6100                       		bsr.s	Pal_FadeIn
000044A8 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
000044AA 66E4                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
000044AC 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
000044B2 4EF9 0000 0000             		jmp	DelayProgram				; MJ: ''
000044B8                             
000044B8                            ; End of function Pal_FadeTo
000044B8                             
000044B8                            ; ---------------------------------------------------------------------------
000044B8                            ; Pallet fade-in subroutine
000044B8                            ; ---------------------------------------------------------------------------
000044B8                             
000044B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044B8                             
000044B8                             
000044B8                            Pal_FadeIn:				; XREF: Pal_FadeTo
000044B8 7000                       		moveq	#0,d0
000044BA 41F8 FB00                  		lea	($FFFFFB00).w,a0
000044BE 43F8 FB80                  		lea	($FFFFFB80).w,a1
000044C2 1038 F626                  		move.b	($FFFFF626).w,d0
000044C6 D0C0                       		adda.w	d0,a0
000044C8 D2C0                       		adda.w	d0,a1
000044CA 1038 F627                  		move.b	($FFFFF627).w,d0
000044CE                             
000044CE                            loc_1DFA:
000044CE 6100                       		bsr.s	Pal_AddColor
000044D0 51C8 FFFC                  		dbf	d0,loc_1DFA
000044D4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000044DA 6600                       		bne.s	locret_1E24
000044DC 7000                       		moveq	#0,d0
000044DE 41F8 FA80                  		lea	($FFFFFA80).w,a0
000044E2 43F8 FA00                  		lea	($FFFFFA00).w,a1
000044E6 1038 F626                  		move.b	($FFFFF626).w,d0
000044EA D0C0                       		adda.w	d0,a0
000044EC D2C0                       		adda.w	d0,a1
000044EE 1038 F627                  		move.b	($FFFFF627).w,d0
000044F2                             
000044F2                            loc_1E1E:
000044F2 6100                       		bsr.s	Pal_AddColor
000044F4 51C8 FFFC                  		dbf	d0,loc_1E1E
000044F8                             
000044F8                            locret_1E24:
000044F8 4E75                       		rts	
000044FA                            ; End of function Pal_FadeIn
000044FA                             
000044FA                             
000044FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044FA                             
000044FA                             
000044FA                            Pal_AddColor:				; XREF: Pal_FadeIn
000044FA 1A11                       		move.b	(a1),d5					; MJ: load blue
000044FC 3219                       		move.w	(a1)+,d1				; MJ: load green and red
000044FE 1401                       		move.b	d1,d2					; MJ: load red
00004500 E809                       		lsr.b	#$04,d1					; MJ: get only green
00004502 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
00004506 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00004508 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
0000450A 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
0000450E 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
00004512                             
00004512                            FCI_NoBlue:
00004512 B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
00004514 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00004518 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
0000451C                             
0000451C                            FCI_NoGreen:
0000451C B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
0000451E 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
00004522 5403                       		addq.b	#$02,d3					; MJ: increase red
00004524                             
00004524                            FCI_NoRed:
00004524 30C3                       		move.w	d3,(a0)+				; MJ: save colour
00004526 4E75                       		rts						; MJ: return
00004528                             
00004528                            ; End of function Pal_AddColor
00004528                             
00004528                             
00004528                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004528                             
00004528                             
00004528                            Pal_FadeFrom:
00004528 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000452E 7807                       		moveq	#$07,d4					; MJ: set repeat times
00004530 7C00                       		moveq	#$00,d6					; MJ: clear d6
00004532                             
00004532                            loc_1E5C:
00004532 4EB8 3762                  		jsr	RunPLC_RAM
00004536 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000453C 4EB9 0000 0000             		jsr	DelayProgram
00004542 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00004546 67EA                       		beq	loc_1E5C				; MJ: if null, delay a frame
00004548 6100                       		bsr.s	Pal_FadeOut
0000454A 51CC FFE6                  		dbf	d4,loc_1E5C
0000454E 4E75                       		rts	
00004550                            ; End of function Pal_FadeFrom
00004550                             
00004550                            ; ---------------------------------------------------------------------------
00004550                            ; Pallet fade-out subroutine
00004550                            ; ---------------------------------------------------------------------------
00004550                             
00004550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004550                             
00004550                             
00004550                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00004550 7000                       		moveq	#0,d0
00004552 41F8 FB00                  		lea	($FFFFFB00).w,a0
00004556 1038 F626                  		move.b	($FFFFF626).w,d0
0000455A D0C0                       		adda.w	d0,a0
0000455C 1038 F627                  		move.b	($FFFFF627).w,d0
00004560                             
00004560                            loc_1E82:
00004560 6100                       		bsr.s	Pal_DecColor
00004562 51C8 FFFC                  		dbf	d0,loc_1E82
00004566                             
00004566 7000                       		moveq	#0,d0
00004568 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000456C 1038 F626                  		move.b	($FFFFF626).w,d0
00004570 D0C0                       		adda.w	d0,a0
00004572 1038 F627                  		move.b	($FFFFF627).w,d0
00004576                             
00004576                            loc_1E98:
00004576 6100                       		bsr.s	Pal_DecColor
00004578 51C8 FFFC                  		dbf	d0,loc_1E98
0000457C 4E75                       		rts	
0000457E                            ; End of function Pal_FadeOut
0000457E                             
0000457E                             
0000457E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000457E                             
0000457E                             
0000457E                            Pal_DecColor:				; XREF: Pal_FadeOut
0000457E 3A10                       		move.w	(a0),d5					; MJ: load colour
00004580 3205                       		move.w	d5,d1					; MJ: copy to d1
00004582 1401                       		move.b	d1,d2					; MJ: load green and red
00004584 1601                       		move.b	d1,d3					; MJ: load red
00004586 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
0000458A 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
0000458E 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
00004592                             
00004592                            FCO_NoBlue:
00004592 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
00004596 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
0000459A 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
0000459E                             
0000459E                            FCO_NoGreen:
0000459E 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
000045A2 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
000045A6 5505                       		subq.b	#$02,d5					; MJ: decrease red
000045A8                             
000045A8                            FCO_NoRed:
000045A8 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
000045AA 4E75                       		rts						; MJ: return
000045AC                             
000045AC                            ; End of function Pal_DecColor
000045AC                            
000045AC                            ; ---------------------------------------------------------------------------
000045AC                            ; Subroutine to	fill the pallet	with white (special stage)
000045AC                            ; ---------------------------------------------------------------------------
000045AC                            
000045AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045AC                            
000045AC                            
000045AC                            Pal_MakeWhite:				; XREF: SpecialStage
000045AC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000045B2 7000                       		moveq	#0,d0
000045B4 41F8 FB00                  		lea	($FFFFFB00).w,a0
000045B8 1038 F626                  		move.b	($FFFFF626).w,d0
000045BC D0C0                       		adda.w	d0,a0
000045BE 323C 0EEE                  		move.w	#$EEE,d1
000045C2 1038 F627                  		move.b	($FFFFF627).w,d0
000045C6                            
000045C6                            PalWhite_Loop:
000045C6 30C1                       		move.w	d1,(a0)+
000045C8 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000045CC 4278 FACE                  		clr.w	($FFFFFACE).w
000045D0 383C 0015                  		move.w	#$15,d4
000045D4                            
000045D4                            loc_1EF4:
000045D4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000045DA 4EB9 0000 0000             		jsr	DelayProgram
000045E0 6100                       		bsr.s	Pal_WhiteToBlack
000045E2 4EB8 3762                  		jsr	RunPLC_RAM
000045E6 51CC FFEC                  		dbf	d4,loc_1EF4
000045EA 4E75                       		rts	
000045EC                            ; End of function Pal_MakeWhite
000045EC                            
000045EC                            
000045EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045EC                            
000045EC                            
000045EC                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000045EC 5378 FACE                  		subq.w	#1,($FFFFFACE).w
000045F0 6A00                       		bpl.s	locret_3CEE
000045F2 31FC 0002 FACE             		move.w	#2,($FFFFFACE).w
000045F8 7000                       		moveq	#0,d0
000045FA                            
000045FA 41F8 FB00                  		lea	($FFFFFB00).w,a0
000045FE 43F8 FB80                  		lea	($FFFFFB80).w,a1
00004602 1038 F626                  		move.b	($FFFFF626).w,d0
00004606 D0C0                       		adda.w	d0,a0
00004608 D2C0                       		adda.w	d0,a1
0000460A 1038 F627                  		move.b	($FFFFF627).w,d0
0000460E                            
0000460E                            loc_3CC6:
0000460E 6100                       		bsr.s	Pal_DecColor2
00004610 51C8 FFFC                  		dbf	d0,loc_3CC6
00004614 4A38 F64C                  		tst.b	($FFFFF64C).w
00004618 6700                       		beq.s	locret_3CEE
0000461A 7000                       		moveq	#0,d0
0000461C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00004620 43F8 FA00                  		lea	($FFFFFA00).w,a1
00004624 1038 F626                  		move.b	($FFFFF626).w,d0
00004628 D0C0                       		adda.w	d0,a0
0000462A D2C0                       		adda.w	d0,a1
0000462C 1038 F627                  		move.b	($FFFFF627).w,d0
00004630                            
00004630                            loc_3CE8:
00004630 6100                       		bsr.s	Pal_DecColor2
00004632 51C8 FFFC                  		dbf	d0,loc_3CE8
00004636                            
00004636                            locret_3CEE:
00004636 4E75                       		rts
00004638                            ; End of function Pal_WhiteToBlack
00004638                            
00004638                            
00004638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004638                            
00004638                            
00004638                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00004638 1419                       		move.b	(a1)+,d2
0000463A 0202 000E                  		andi.b	#$E,d2
0000463E 1610                       		move.b	(a0),d3
00004640 0203 000E                  		andi.b	#$E,d3
00004644 B602                       		cmp.b	d2,d3
00004646 6300                       		bls.s	loc_3D02
00004648 5503                       		subq.b	#2,d3
0000464A                            
0000464A                            loc_3D02:
0000464A 10C3                       		move.b	d3,(a0)+
0000464C 1219                       		move.b	(a1)+,d1
0000464E 1401                       		move.b	d1,d2
00004650 0201 00E0                  		andi.b	#$E0,d1
00004654 1610                       		move.b	(a0),d3
00004656 1A03                       		move.b	d3,d5
00004658 0203 00E0                  		andi.b	#$E0,d3
0000465C B601                       		cmp.b	d1,d3
0000465E 6300                       		bls.s	loc_3D1C
00004660 0403 0020                  		subi.b	#$20,d3
00004664                            
00004664                            loc_3D1C:
00004664 0202 000E                  		andi.b	#$E,d2
00004668 0205 000E                  		andi.b	#$E,d5
0000466C BA02                       		cmp.b	d2,d5
0000466E 6300                       		bls.s	loc_3D2A
00004670 5505                       		subq.b	#2,d5
00004672                            
00004672                            loc_3D2A:
00004672 8605                       		or.b	d5,d3
00004674 10C3                       		move.b	d3,(a0)+
00004676 4E75                       		rts
00004678                            ; End of function Pal_DecColor2
00004678                            
00004678                            ; ---------------------------------------------------------------------------
00004678                            ; Subroutine to	make a white flash when	you enter a special stage
00004678                            ; ---------------------------------------------------------------------------
00004678                            
00004678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004678                            
00004678                            
00004678                            Pal_MakeFlash:				; XREF: SpecialStage
00004678 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000467E 383C 0015                  		move.w	#$15,d4
00004682                            
00004682                            loc_1F86:
00004682 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00004688 4EB9 0000 0000             		jsr	DelayProgram
0000468E 6100                       		bsr.s	Pal_ToWhite
00004690 4EB8 3762                  		jsr	RunPLC_RAM
00004694 51CC FFEC                  		dbf	d4,loc_1F86
00004698 4E75                       		rts	
0000469A                            ; End of function Pal_MakeFlash
0000469A                            
0000469A                            
0000469A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000469A                            
0000469A                            
0000469A                            Pal_ToWhite:				; XREF: Pal_MakeFlash
0000469A 7000                       		moveq	#0,d0
0000469C 41F8 FB00                  		lea	($FFFFFB00).w,a0
000046A0 1038 F626                  		move.b	($FFFFF626).w,d0
000046A4 D0C0                       		adda.w	d0,a0
000046A6 1038 F627                  		move.b	($FFFFF627).w,d0
000046AA                            
000046AA                            loc_1FAC:
000046AA 6100                       		bsr.s	Pal_AddColor2
000046AC 51C8 FFFC                  		dbf	d0,loc_1FAC
000046B0 7000                       		moveq	#0,d0
000046B2 41F8 FA80                  		lea	($FFFFFA80).w,a0
000046B6 1038 F626                  		move.b	($FFFFF626).w,d0
000046BA D0C0                       		adda.w	d0,a0
000046BC 1038 F627                  		move.b	($FFFFF627).w,d0
000046C0                            
000046C0                            loc_1FC2:
000046C0 6100                       		bsr.s	Pal_AddColor2
000046C2 51C8 FFFC                  		dbf	d0,loc_1FC2
000046C6 4E75                       		rts	
000046C8                            ; End of function Pal_ToWhite
000046C8                            
000046C8                            
000046C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046C8                            
000046C8                            
000046C8                            Pal_AddColor2:				; XREF: Pal_ToWhite
000046C8 3410                       		move.w	(a0),d2
000046CA 0C42 0EEE                  		cmpi.w	#$EEE,d2
000046CE 6700                       		beq.s	loc_2006
000046D0 3202                       		move.w	d2,d1
000046D2 0241 000E                  		andi.w	#$E,d1
000046D6 0C41 000E                  		cmpi.w	#$E,d1
000046DA 6700                       		beq.s	loc_1FE2
000046DC 5458                       		addq.w	#2,(a0)+	; increase red value
000046DE 4E75                       		rts	
000046E0                            ; ===========================================================================
000046E0                            
000046E0                            loc_1FE2:				; XREF: Pal_AddColor2
000046E0 3202                       		move.w	d2,d1
000046E2 0241 00E0                  		andi.w	#$E0,d1
000046E6 0C41 00E0                  		cmpi.w	#$E0,d1
000046EA 6700                       		beq.s	loc_1FF4
000046EC 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000046F0 4E75                       		rts	
000046F2                            ; ===========================================================================
000046F2                            
000046F2                            loc_1FF4:				; XREF: loc_1FE2
000046F2 3202                       		move.w	d2,d1
000046F4 0241 0E00                  		andi.w	#$E00,d1
000046F8 0C41 0E00                  		cmpi.w	#$E00,d1
000046FC 6700                       		beq.s	loc_2006
000046FE 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00004702 4E75                       		rts	
00004704                            ; ===========================================================================
00004704                            
00004704                            loc_2006:				; XREF: Pal_AddColor2
00004704 5448                       		addq.w	#2,a0
00004706 4E75                       		rts	
00004708                            ; End of function Pal_AddColor2
00004708                            
00004708                            ; ---------------------------------------------------------------------------
00004708                            ; Pallet cycling routine - Sega	logo
00004708                            ; ---------------------------------------------------------------------------
00004708                            
00004708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004708                            
00004708                            
00004708                            PalCycle_Sega:				; XREF: SegaScreen
00004708 4A38 F635                  		tst.b	($FFFFF635).w
0000470C 6600                       		bne.s	loc_206A
0000470E 43F8 FB20                  		lea	($FFFFFB20).w,a1
00004712 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00004718 7205                       		moveq	#5,d1
0000471A 3038 F632                  		move.w	($FFFFF632).w,d0
0000471E                            
0000471E                            loc_2020:
0000471E 6A00                       		bpl.s	loc_202A
00004720 5448                       		addq.w	#2,a0
00004722 5341                       		subq.w	#1,d1
00004724 5440                       		addq.w	#2,d0
00004726 60F6                       		bra.s	loc_2020
00004728                            ; ===========================================================================
00004728                            
00004728                            loc_202A:				; XREF: PalCycle_Sega
00004728 3400                       		move.w	d0,d2
0000472A 0242 001E                  		andi.w	#$1E,d2
0000472E 6600                       		bne.s	loc_2034
00004730 5440                       		addq.w	#2,d0
00004732                            
00004732                            loc_2034:
00004732 0C40 0060                  		cmpi.w	#$60,d0
00004736 6400                       		bcc.s	loc_203E
00004738 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000473C                            
0000473C                            loc_203E:
0000473C 5440                       		addq.w	#2,d0
0000473E 51C9 FFE8                  		dbf	d1,loc_202A
00004742 3038 F632                  		move.w	($FFFFF632).w,d0
00004746 5440                       		addq.w	#2,d0
00004748 3400                       		move.w	d0,d2
0000474A 0242 001E                  		andi.w	#$1E,d2
0000474E 6600                       		bne.s	loc_2054
00004750 5440                       		addq.w	#2,d0
00004752                            
00004752                            loc_2054:
00004752 0C40 0064                  		cmpi.w	#$64,d0
00004756 6D00                       		blt.s	loc_2062
00004758 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000475E 70F4                       		moveq	#-$C,d0
00004760                            
00004760                            loc_2062:
00004760 31C0 F632                  		move.w	d0,($FFFFF632).w
00004764 7001                       		moveq	#1,d0
00004766 4E75                       		rts	
00004768                            ; ===========================================================================
00004768                            
00004768                            loc_206A:				; XREF: loc_202A
00004768 5338 F634                  		subq.b	#1,($FFFFF634).w
0000476C 6A00                       		bpl.s	loc_20BC
0000476E 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00004774 3038 F632                  		move.w	($FFFFF632).w,d0
00004778 0640 000C                  		addi.w	#$C,d0
0000477C 0C40 0030                  		cmpi.w	#$30,d0
00004780 6500                       		bcs.s	loc_2088
00004782 7000                       		moveq	#0,d0
00004784 4E75                       		rts	
00004786                            ; ===========================================================================
00004786                            
00004786                            loc_2088:				; XREF: loc_206A
00004786 31C0 F632                  		move.w	d0,($FFFFF632).w
0000478A 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00004790 41F0 0000                  		lea	(a0,d0.w),a0
00004794 43F8 FB04                  		lea	($FFFFFB04).w,a1
00004798 22D8                       		move.l	(a0)+,(a1)+
0000479A 22D8                       		move.l	(a0)+,(a1)+
0000479C 3298                       		move.w	(a0)+,(a1)
0000479E 43F8 FB20                  		lea	($FFFFFB20).w,a1
000047A2 7000                       		moveq	#0,d0
000047A4 722C                       		moveq	#$2C,d1
000047A6                            
000047A6                            loc_20A8:
000047A6 3400                       		move.w	d0,d2
000047A8 0242 001E                  		andi.w	#$1E,d2
000047AC 6600                       		bne.s	loc_20B2
000047AE 5440                       		addq.w	#2,d0
000047B0                            
000047B0                            loc_20B2:
000047B0 3390 0000                  		move.w	(a0),(a1,d0.w)
000047B4 5440                       		addq.w	#2,d0
000047B6 51C9 FFEE                  		dbf	d1,loc_20A8
000047BA                            
000047BA                            loc_20BC:
000047BA 7001                       		moveq	#1,d0
000047BC 4E75                       		rts	
000047BE                            ; End of function PalCycle_Sega
000047BE                            
000047BE                            ; ===========================================================================
000047BE                            
000047BE                            Pal_Sega1:	incbin	pallet\sega1.bin
000047CA                            Pal_Sega2:	incbin	pallet\sega2.bin
000047FA                            
000047FA                            ; ---------------------------------------------------------------------------
000047FA                            ; Subroutines to load pallets
000047FA                            ; ---------------------------------------------------------------------------
000047FA                            
000047FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047FA                            
000047FA                            
000047FA                            PalLoad1:
000047FA 6100                         bsr.s	PalLoad_PalPointers
000047FC E748                         lsl.w	#3,d0
000047FE D2C0                         adda.w	d0,a1
00004800 2459                         movea.l	(a1)+,a2
00004802 3659                         movea.w	(a1)+,a3
00004804 D6FC 0080                    adda.w	#$80,a3
00004808 3E19                         move.w	(a1)+,d7
0000480A                            
0000480A                            loc_2110:
0000480A 26DA                         move.l	(a2)+,(a3)+
0000480C 51CF FFFC                    dbf	d7,loc_2110
00004810 4E75                         rts	
00004812                            ; End of function PalLoad1
00004812                            
00004812                            
00004812                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004812                            
00004812                            
00004812                            PalLoad2:
00004812 6100                         bsr.s	PalLoad_PalPointers
00004814 E748                         lsl.w	#3,d0
00004816 D2C0                         adda.w	d0,a1
00004818 2459                         movea.l	(a1)+,a2
0000481A 3659                         movea.w	(a1)+,a3
0000481C 3E19                         move.w	(a1)+,d7
0000481E                            
0000481E                            loc_2128:
0000481E 26DA                         move.l	(a2)+,(a3)+
00004820 51CF FFFC                    dbf	d7,loc_2128
00004824 4E75                         rts	
00004826                            ; End of function PalLoad2
00004826                            
00004826                            ; ---------------------------------------------------------------------------
00004826                            ; Underwater pallet loading subroutine
00004826                            ; ---------------------------------------------------------------------------
00004826                            
00004826                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004826                            
00004826                            
00004826                            PalLoad3_Water:
00004826 6100                         bsr.s	PalLoad_PalPointers
00004828 E748                         lsl.w	#3,d0
0000482A D2C0                         adda.w	d0,a1
0000482C 2459                         movea.l	(a1)+,a2
0000482E 3659                         movea.w	(a1)+,a3
00004830 96FC 0080                    suba.w	#$80,a3
00004834 3E19                         move.w	(a1)+,d7
00004836                            
00004836                            loc_2144:
00004836 26DA                         move.l	(a2)+,(a3)+
00004838 51CF FFFC                    dbf	d7,loc_2144
0000483C 4E75                         rts	
0000483E                            ; End of function PalLoad3_Water
0000483E                            
0000483E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000483E                            
0000483E                            
0000483E                            PalLoad4_Water:
0000483E 6100                       		bsr.s	PalLoad_PalPointers
00004840 E748                       		lsl.w	#3,d0
00004842 D2C0                       		adda.w	d0,a1
00004844 2459                       		movea.l	(a1)+,a2
00004846 3659                       		movea.w	(a1)+,a3
00004848 97FC 0000 0080             		suba.l	#$80,a3
0000484E 3E19                       		move.w	(a1)+,d7
00004850                            
00004850                            loc_2160:
00004850 26DA                       		move.l		(a2)+,(a3)+
00004852 51CF FFFC                  		dbf		d7,loc_2160
00004856 4E75                       		rts
00004858                            ; End of function PalLoad4_Water
00004858                            
00004858                            ; ===========================================================================
00004858                            
00004858                            PalLoad_PalPointers:
00004858                            ;		cmpi.b	#1,($FFFFFFFE).w				; is the original mode?
00004858                            ;		beq.s	PalLoad_PalPointers_Original	; if yes, branch
00004858 1238 FE11                  		move.b	($FFFFFE11).w,d1		; set Act number to d1
0000485C 43F9 0000 0000             		lea		(PalPointers).l,a1		; load the PalPointers of the act 1
00004862 0C01 0000                  		cmp.b	#0,d1					; is act 1?
00004866 6700 0000                  		beq.w	PalLoad_PalPointers_rts	; if yes, branch
0000486A 43F9 0000 0000             		lea		(PalPointers2).l,a1		; load the PalPointers of the act 2
00004870 0C01 0001                  		cmp.b	#1,d1					; is act 2?
00004874 6700 0000                  		beq.w	PalLoad_PalPointers_rts	; if yes, branch
00004878 43F9 0000 0000             		lea		(PalPointers3).l,a1		; load the PalPointers of the act 3
0000487E 0C01 0002                  		cmp.b	#2,d1					; is act 3?
00004882 6700 0000                  		beq.w	PalLoad_PalPointers_rts	; if yes, branch
00004886 43F9 0000 0000             		lea		(PalPointers3).l,a1		; load the PalPointers of the act 4
0000488C 6000 0000                  		bra.w	PalLoad_PalPointers_rts
00004890                            
00004890                            ;PalLoad_PalPointers_Original:
00004890                            ;		lea	(PalPointers).l,a1			; load the Original PalPointers
00004890                            
00004890                            PalLoad_PalPointers_rts:
00004890 4E75                       		rts
00004892                            
00004892                            ; ---------------------------------------------------------------------------
00004892                            ; Pallet pointers
00004892                            ; ---------------------------------------------------------------------------
00004892                            PalPointers:
00004892                                   include "_inc\Pallet pointers.asm"
00004892                            ; ---------------------------------------------------------------------------
00004892                            ; Pallet pointers
00004892                            ; ---------------------------------------------------------------------------
00004892 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00004896 FB00                       	dc.w $FB00		; RAM address
00004898 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000489A 0000 0000                  	dc.l Pal_Title
0000489E FB00                       	dc.w $FB00
000048A0 001F                       	dc.w $1F
000048A2 0000 0000                  	dc.l Pal_LevelSel
000048A6 FB00                       	dc.w $FB00
000048A8 001F                       	dc.w $1F
000048AA 0000 0000                  	dc.l Pal_Sonic
000048AE FB00                       	dc.w $FB00
000048B0 0007                       	dc.w 7
000048B2 0000 0000                  	dc.l Pal_GHZ
000048B6 FB20                       	dc.w $FB20
000048B8 0017                       	dc.w $17
000048BA 0000 0000                  	dc.l Pal_LZ
000048BE FB20                       	dc.w $FB20
000048C0 0017                       	dc.w $17
000048C2 0000 0000                  	dc.l Pal_MZ
000048C6 FB20                       	dc.w $FB20
000048C8 0017                       	dc.w $17
000048CA 0000 0000                  	dc.l Pal_SLZ
000048CE FB20                       	dc.w $FB20
000048D0 0017                       	dc.w $17
000048D2 0000 0000                  	dc.l Pal_SYZ
000048D6 FB20                       	dc.w $FB20
000048D8 0017                       	dc.w $17
000048DA 0000 0000                  	dc.l Pal_SBZ1
000048DE FB20                       	dc.w $FB20
000048E0 0017                       	dc.w $17
000048E2 0000 0000                  	dc.l Pal_Special
000048E6 FB00                       	dc.w $FB00
000048E8 001F                       	dc.w $1F
000048EA 0000 0000                  	dc.l Pal_LZWater
000048EE FB00                       	dc.w $FB00
000048F0 001F                       	dc.w $1F
000048F2 0000 0000                  	dc.l Pal_SBZ3
000048F6 FB20                       	dc.w $FB20
000048F8 0017                       	dc.w $17
000048FA 0000 0000                  	dc.l Pal_SBZ3Water
000048FE FB00                       	dc.w $FB00
00004900 001F                       	dc.w $1F
00004902 0000 0000                  	dc.l Pal_SBZ2
00004906 FB20                       	dc.w $FB20
00004908 0017                       	dc.w $17
0000490A 0000 0000                  	dc.l Pal_LZSonWater
0000490E FB00                       	dc.w $FB00
00004910 0007                       	dc.w 7
00004912 0000 0000                  	dc.l Pal_SBZ3SonWat
00004916 FB00                       	dc.w $FB00
00004918 0007                       	dc.w 7
0000491A 0000 0000                  	dc.l Pal_SpeResult
0000491E FB00                       	dc.w $FB00
00004920 001F                       	dc.w $1F
00004922 0000 0000                  	dc.l Pal_SpeContinue
00004926 FB00                       	dc.w $FB00
00004928 000F                       	dc.w $F
0000492A 0000 0000                  	dc.l Pal_Ending
0000492E FB00                       	dc.w $FB00
00004930 001F                       	dc.w $1F
00004932 0000 0000                  	dc.l Menu_Palette; pallet address
00004936 FB00                       	dc.w $FB00	; RAM address
00004938 001F                       	dc.w $1F	; (pallet length / 2) - 1
0000493A 0000 0000                  	dc.l Pal_Ray
0000493E FB00                       	dc.w $FB00
00004940 0007                       	dc.w 7
00004942 0000 0000                  	dc.l Pal_SonicHeat
00004946 FB00                       	dc.w $FB00
00004948 0007                       	dc.w 7
0000494A 0000 0000                  	dc.l Pal_RayHeat
0000494E FB00                       	dc.w $FB00
00004950 0007                       	dc.w 7
00004952 0000 0000                  	dc.l Pal_ABZ		; 14
00004956 FB20                       	dc.w $FB20
00004958 0017                       	dc.w $17
00004958 0017                       	dc.w $17
0000495A                            PalPointers2:
0000495A                             include "_inc\Pallet pointers2.asm"
0000495A 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000495E FB00                       	dc.w $FB00		; RAM address
00004960 001F                       	dc.w $1F		; (pallet length / 2) - 1
00004962 0000 0000                  	dc.l Pal_Title
00004966 FB00                       	dc.w $FB00
00004968 001F                       	dc.w $1F
0000496A 0000 0000                  	dc.l Pal_LevelSel
0000496E FB00                       	dc.w $FB00
00004970 001F                       	dc.w $1F
00004972 0000 0000                  	dc.l Pal_Sonic
00004976 FB00                       	dc.w $FB00
00004978 0007                       	dc.w 7
0000497A 0000 0000                  	dc.l Pal2_GHZ3
0000497E FB20                       	dc.w $FB20
00004980 0017                       	dc.w $17
00004982 0000 0000                  	dc.l Pal2_LZ3
00004986 FB20                       	dc.w $FB20
00004988 0017                       	dc.w $17
0000498A 0000 0000                  	dc.l Pal2_MZ3
0000498E FB20                       	dc.w $FB20
00004990 0017                       	dc.w $17
00004992 0000 0000                  	dc.l Pal2_SLZ3
00004996 FB20                       	dc.w $FB20
00004998 0017                       	dc.w $17
0000499A 0000 0000                  	dc.l Pal2_SYZ3
0000499E FB20                       	dc.w $FB20
000049A0 0017                       	dc.w $17
000049A2 0000 0000                  	dc.l Pal2_SBZ1
000049A6 FB20                       	dc.w $FB20
000049A8 0017                       	dc.w $17
000049AA 0000 0000                  	dc.l Pal2_Special
000049AE FB00                       	dc.w $FB00
000049B0 001F                       	dc.w $1F
000049B2 0000 0000                  	dc.l Pal2_LZWater3
000049B6 FB00                       	dc.w $FB00
000049B8 001F                       	dc.w $1F
000049BA 0000 0000                  	dc.l Pal2_SBZ3
000049BE FB20                       	dc.w $FB20
000049C0 0017                       	dc.w $17
000049C2 0000 0000                  	dc.l Pal2_SBZ3Water
000049C6 FB00                       	dc.w $FB00
000049C8 001F                       	dc.w $1F
000049CA 0000 0000                  	dc.l Pal2_SBZ2
000049CE FB20                       	dc.w $FB20
000049D0 0017                       	dc.w $17
000049D2 0000 0000                  	dc.l Pal2_LZSonWater
000049D6 FB00                       	dc.w $FB00
000049D8 0007                       	dc.w 7
000049DA 0000 0000                  	dc.l Pal2_SBZ3SonWat
000049DE FB00                       	dc.w $FB00
000049E0 0007                       	dc.w 7
000049E2 0000 0000                  	dc.l Pal2_SpeResult
000049E6 FB00                       	dc.w $FB00
000049E8 001F                       	dc.w $1F
000049EA 0000 0000                  	dc.l Pal2_SpeContinue
000049EE FB00                       	dc.w $FB00
000049F0 000F                       	dc.w $F
000049F2 0000 0000                  	dc.l Pal2_Ending
000049F6 FB00                       	dc.w $FB00
000049F8 001F                       	dc.w $1F
000049FA 0000 0000                  	dc.l Pal_ABZ3		; 14
000049FE FB20                       	dc.w $FB20
00004A00 0017                       	dc.w $17
00004A02 0000 0000                  	dc.l Menu_Palette; pallet address
00004A06 FB00                       	dc.w $FB00	; RAM address
00004A08 001F                       	dc.w $1F	; (pallet length / 2) - 1
00004A0A 0000 0000                  	dc.l Pal_Ray
00004A0E FB00                       	dc.w $FB00
00004A10 0007                       	dc.w 7
00004A12 0000 0000                  	dc.l Pal_SonicHeat
00004A16 FB00                       	dc.w $FB00
00004A18 0007                       	dc.w 7
00004A1A 0000 0000                  	dc.l Pal_RayHeat
00004A1E FB00                       	dc.w $FB00
00004A20 0007                       	dc.w 7
00004A20 0007                       	dc.w 7
00004A22                            PalPointers3:
00004A22                             include "_inc\Pallet pointers3.asm"
00004A22                            ; ---------------------------------------------------------------------------
00004A22                            ; Pallet pointers
00004A22                            ; ---------------------------------------------------------------------------
00004A22 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00004A26 FB00                       	dc.w $FB00		; RAM address
00004A28 001F                       	dc.w $1F		; (pallet length / 2) - 1
00004A2A 0000 0000                  	dc.l Pal_Title
00004A2E FB00                       	dc.w $FB00
00004A30 001F                       	dc.w $1F
00004A32 0000 0000                  	dc.l Pal_LevelSel
00004A36 FB00                       	dc.w $FB00
00004A38 001F                       	dc.w $1F
00004A3A 0000 0000                  	dc.l Pal_Sonic
00004A3E FB00                       	dc.w $FB00
00004A40 0007                       	dc.w 7
00004A42 0000 0000                  	dc.l Pal3_GHZ3
00004A46 FB20                       	dc.w $FB20
00004A48 0017                       	dc.w $17
00004A4A 0000 0000                  	dc.l Pal3_LZ3
00004A4E FB20                       	dc.w $FB20
00004A50 0017                       	dc.w $17
00004A52 0000 0000                  	dc.l Pal3_MZ3
00004A56 FB20                       	dc.w $FB20
00004A58 0017                       	dc.w $17
00004A5A 0000 0000                  	dc.l Pal3_SLZ3
00004A5E FB20                       	dc.w $FB20
00004A60 0017                       	dc.w $17
00004A62 0000 0000                  	dc.l Pal3_SYZ3
00004A66 FB20                       	dc.w $FB20
00004A68 0017                       	dc.w $17
00004A6A 0000 0000                  	dc.l Pal3_SBZ3
00004A6E FB20                       	dc.w $FB20
00004A70 0017                       	dc.w $17
00004A72 0000 0000                  	dc.l Pal3_Special
00004A76 FB00                       	dc.w $FB00
00004A78 001F                       	dc.w $1F
00004A7A 0000 0000                  	dc.l Pal3_LZWater3
00004A7E FB00                       	dc.w $FB00
00004A80 001F                       	dc.w $1F
00004A82 0000 0000                  	dc.l Pal3_SBZ3
00004A86 FB20                       	dc.w $FB20
00004A88 0017                       	dc.w $17
00004A8A 0000 0000                  	dc.l Pal3_SBZ3Water
00004A8E FB00                       	dc.w $FB00
00004A90 001F                       	dc.w $1F
00004A92 0000 0000                  	dc.l Pal3_SBZ2
00004A96 FB20                       	dc.w $FB20
00004A98 0017                       	dc.w $17
00004A9A 0000 0000                  	dc.l Pal3_LZSonWater
00004A9E FB00                       	dc.w $FB00
00004AA0 0007                       	dc.w 7
00004AA2 0000 0000                  	dc.l Pal3_SBZ3SonWat
00004AA6 FB00                       	dc.w $FB00
00004AA8 0007                       	dc.w 7
00004AAA 0000 0000                  	dc.l Pal3_SpeResult
00004AAE FB00                       	dc.w $FB00
00004AB0 001F                       	dc.w $1F
00004AB2 0000 0000                  	dc.l Pal3_SpeContinue
00004AB6 FB00                       	dc.w $FB00
00004AB8 000F                       	dc.w $F
00004ABA 0000 0000                  	dc.l Pal3_Ending
00004ABE FB00                       	dc.w $FB00
00004AC0 001F                       	dc.w $1F
00004AC2 0000 0000                  	dc.l Pal_ABZ3		; 14
00004AC6 FB20                       	dc.w $FB20
00004AC8 0017                       	dc.w $17
00004ACA 0000 0000                  	dc.l Menu_Palette; pallet address
00004ACE FB00                       	dc.w $FB00	; RAM address
00004AD0 001F                       	dc.w $1F	; (pallet length / 2) - 1
00004AD2 0000 0000                  	dc.l Pal_Ray
00004AD6 FB00                       	dc.w $FB00
00004AD8 0007                       	dc.w 7
00004ADA 0000 0000                  	dc.l Pal_SonicHeat
00004ADE FB00                       	dc.w $FB00
00004AE0 0007                       	dc.w 7
00004AE2 0000 0000                  	dc.l Pal_RayHeat
00004AE6 FB00                       	dc.w $FB00
00004AE8 0007                       	dc.w 7
00004AE8 0007                       	dc.w 7
00004AEA                            PalPointers4:
00004AEA                             include "_inc\Pallet pointers4.asm"
00004AEA                            ; ---------------------------------------------------------------------------
00004AEA                            ; Pal4let pointers
00004AEA                            ; ---------------------------------------------------------------------------
00004AEA 0000 0000                  	dc.l Pal_SegaBG		; Pal4let address
00004AEE FB00                       	dc.w $FB00		; RAM address
00004AF0 001F                       	dc.w $1F		; (Pal4let length / 2) - 1
00004AF2 0000 0000                  	dc.l Pal_Title
00004AF6 FB00                       	dc.w $FB00
00004AF8 001F                       	dc.w $1F
00004AFA 0000 0000                  	dc.l Pal_LevelSel
00004AFE FB00                       	dc.w $FB00
00004B00 001F                       	dc.w $1F
00004B02 0000 0000                  	dc.l Pal_Sonic
00004B06 FB00                       	dc.w $FB00
00004B08 0007                       	dc.w 7
00004B0A 0000 0000                  	dc.l Pal4_GHZ
00004B0E FB20                       	dc.w $FB20
00004B10 0017                       	dc.w $17
00004B12 0000 0000                  	dc.l Pal4_LZ
00004B16 FB20                       	dc.w $FB20
00004B18 0017                       	dc.w $17
00004B1A 0000 0000                  	dc.l Pal4_MZ
00004B1E FB20                       	dc.w $FB20
00004B20 0017                       	dc.w $17
00004B22 0000 0000                  	dc.l Pal4_SLZ
00004B26 FB20                       	dc.w $FB20
00004B28 0017                       	dc.w $17
00004B2A 0000 0000                  	dc.l Pal4_SYZ
00004B2E FB20                       	dc.w $FB20
00004B30 0017                       	dc.w $17
00004B32 0000 0000                  	dc.l Pal4_SBZ1
00004B36 FB20                       	dc.w $FB20
00004B38 0017                       	dc.w $17
00004B3A 0000 0000                  	dc.l Pal4_Special
00004B3E FB00                       	dc.w $FB00
00004B40 001F                       	dc.w $1F
00004B42 0000 0000                  	dc.l Pal4_LZWater
00004B46 FB00                       	dc.w $FB00
00004B48 001F                       	dc.w $1F
00004B4A 0000 0000                  	dc.l Pal4_SBZ3
00004B4E FB20                       	dc.w $FB20
00004B50 0017                       	dc.w $17
00004B52 0000 0000                  	dc.l Pal4_SBZ3Water
00004B56 FB00                       	dc.w $FB00
00004B58 001F                       	dc.w $1F
00004B5A 0000 0000                  	dc.l Pal4_SBZ2
00004B5E FB20                       	dc.w $FB20
00004B60 0017                       	dc.w $17
00004B62 0000 0000                  	dc.l Pal4_LZSonWater
00004B66 FB00                       	dc.w $FB00
00004B68 0007                       	dc.w 7
00004B6A 0000 0000                  	dc.l Pal4_SBZ3SonWat
00004B6E FB00                       	dc.w $FB00
00004B70 0007                       	dc.w 7
00004B72 0000 0000                  	dc.l Pal4_SpeResult
00004B76 FB00                       	dc.w $FB00
00004B78 001F                       	dc.w $1F
00004B7A 0000 0000                  	dc.l Pal4_SpeContinue
00004B7E FB00                       	dc.w $FB00
00004B80 000F                       	dc.w $F
00004B82 0000 0000                  	dc.l Pal4_Ending
00004B86 FB00                       	dc.w $FB00
00004B88 001F                       	dc.w $1F
00004B8A 0000 0000                  	dc.l Pal_Menu; Pal4let address
00004B8E FB00                       	dc.w $FB00	; RAM address
00004B90 001F                       	dc.w $1F	; (Pal4let length / 2) - 1
00004B92 0000 0000                  	dc.l Pal_Ray
00004B96 FB00                       	dc.w $FB00
00004B98 0007                       	dc.w 7
00004B9A 0000 0000                  	dc.l Pal_SonicHeat
00004B9E FB00                       	dc.w $FB00
00004BA0 0007                       	dc.w 7
00004BA2 0000 0000                  	dc.l Pal_RayHeat
00004BA6 FB00                       	dc.w $FB00
00004BA8 0007                       	dc.w 7
00004BAA 0000 0000                  	dc.l Pal4_ABZ		; 14
00004BAE FB20                       	dc.w $FB20
00004BB0 0017                       	dc.w $17
00004BB0 0017                       	dc.w $17
00004BB2                             
00004BB2                            ; ---------------------------------------------------------------------------
00004BB2                            ; Pallet data
00004BB2                            ; ---------------------------------------------------------------------------
00004BB2                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00004C32                            Pal_SegaBG2:	incbin	pallet\sega_bg2.bin
00004C52                            Pal_Title:	incbin	pallet\title.bin
00004CD2                            Pal_LevelSel:	incbin	'pallet\Level Select.bin'
00004D52                            Pal_Menu:	incbin	pallet\menu.bin
00004DD2                            Pal_MenuIcon:	incbin	pallet\menu_icons.bin
00005032                            Pal_Sonic: incbin pallet\sonic.bin
00005052                            Pal_Tails:	incbin	pallet\tails.bin
00005072                            Pal_Ray:	incbin pallet\sonic.bin
00005092                            Pal_SonicHeat:	incbin pallet\sonic.bin
000050B2                            Pal_RayHeat:	incbin pallet\sonic.bin
000050D2                            Pal_GHZ:	incbin	pallet\ghz.bin
00005132                            Pal_GHZ2:	incbin	pallet\ghz2.bin
00005192                            Pal_GHZ3:	incbin	pallet\ghz3.bin
000051F2                            Pal_GHZ4:	incbin	pallet\ghz3.bin
00005252                            Pal_GHZExtra:	incbin	pallet\ghzextra.bin
000052B2                            Pal_LZ:  incbin	pallet\lz.bin
00005312                            Pal_LZ2:  incbin	pallet\lz2.bin
00005372                            Pal_LZ3:  incbin	pallet\lz3.bin
000053D2                            Pal_LZ4:  incbin	pallet\lz4.bin
00005432                            Pal_LZWater:	incbin	pallet\lz_uw.bin; LZ underwater pallets
000054B2                            Pal_LZWater2:	incbin	pallet\lz_uw2.bin; LZ underwater pallets
00005532                            Pal_LZWater3:	incbin	pallet\lz_uw3.bin; LZ underwater pallets
000055B2                            Pal_MZ:  incbin	pallet\mz.bin
00005612                            Pal_MZ2:  incbin	pallet\mz2.bin
00005672                            Pal_MZ3:  incbin	pallet\mz3.bin
000056D2                            Pal_MZ4:	incbin	pallet\mz4.bin
00005732                            Pal_SLZ:	incbin	pallet\slz.bin
00005792                            Pal_SLZ2:	incbin	pallet\slz2.bin
000057F2                            Pal_SLZ3:	incbin	pallet\slz3.bin
00005852                            Pal_SLZ4:	incbin	pallet\slz4.bin
000058B2                            Pal_SYZ:	incbin	pallet\syz.bin
00005912                            Pal_SYZ2:	incbin	pallet\syz2.bin
00005972                            Pal_SYZ3:	incbin	pallet\syz3.bin
000059D2                            Pal_SYZ4:	incbin	pallet\syz4.bin
00005A32                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin; SBZ act 1 pallets
00005A92                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin; SBZ act 2 & Final Zone pallets
00005AF2                            Pal_Special:	incbin	pallet\special.bin; special stage pallets
00005B72                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin; SBZ act 3 pallets
00005BD2                            Pal_SBZ4:	incbin	pallet\sbz_act4.bin; SBZ act 3 pallets
00005C32                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin; SBZ act 3 (underwater) pallets
00005CB2                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin; Sonic (underwater in LZ) pallet
00005CD2                            Pal_LZTailsWater:	incbin	pallet\tails_lzuw.bin	; Tails (underwater in LZ) pallet
00005CF2                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin; Sonic (underwater in SBZ act 3) pallet
00005D12                            Pal_SBZ3TailsWat:	incbin	pallet\tails_sbzu.bin	; Tails (underwater in SBZ act 3) pallet
00005D32                            Pal_SpeResult:	incbin	pallet\ssresult.bin; special stage results screen pallets
00005DB2                            Pal_SpeContinue:incbin	pallet\sscontin.bin; special stage results screen continue pallet
00005DF2                            Pal_Ending:	incbin	pallet\ending.bin; ending sequence pallets
00005E72                            Pal_ABZ:	incbin	pallet\abz.bin
00005ED2                            Pal_ABZ2:	incbin	pallet\abz2.bin
00005F32                            Pal_ABZ3:	incbin	pallet\abz3.bin
00005F92                            Pal_ABZ4:	incbin	pallet\abz4.bin
00005FF2                            Pal2_GHZ:	incbin	pallet\ghz.bin
00006052                            Pal2_GHZ2:	incbin	pallet\ghz2.bin
000060B2                            Pal2_GHZ3:	incbin	pallet\ghz3.bin
00006112                            Pal2_GHZ4:	incbin	pallet\ghz3.bin
00006172                            Pal2_GHZExtra:	incbin	pallet\ghzextra.bin
000061D2                            Pal2_LZ:  incbin	pallet\lz.bin
00006232                            Pal2_LZ2:  incbin	pallet\lz2.bin
00006292                            Pal2_LZ3:  incbin	pallet\lz3.bin
000062F2                            Pal2_LZ4:  incbin	pallet\lz4.bin
00006352                            Pal2_LZWater:	incbin	pallet\lz_uw.bin; LZ underwater pallets
000063D2                            Pal2_LZWater2:	incbin	pallet\lz_uw2.bin; LZ underwater pallets
00006452                            Pal2_LZWater3:	incbin	pallet\lz_uw3.bin; LZ underwater pallets
000064D2                            Pal2_MZ:  incbin	pallet\mz.bin
00006532                            Pal2_MZ2:  incbin	pallet\mz2.bin
00006592                            Pal2_MZ3:  incbin	pallet\mz3.bin
000065F2                            Pal2_MZ4:	incbin	pallet\mz4.bin
00006652                            Pal2_SLZ:	incbin	pallet\slz.bin
000066B2                            Pal2_SLZ2:	incbin	pallet\slz2.bin
00006712                            Pal2_SLZ3:	incbin	pallet\slz3.bin
00006772                            Pal2_SLZ4:	incbin	pallet\slz4.bin
000067D2                            Pal2_SYZ:	incbin	pallet\syz.bin
00006832                            Pal2_SYZ2:	incbin	pallet\syz2.bin
00006892                            Pal2_SYZ3:	incbin	pallet\syz3.bin
000068F2                            Pal2_SYZ4:	incbin	pallet\syz4.bin
00006952                            Pal2_SBZ1:	incbin	pallet\sbz_act1.bin; SBZ act 1 pallets
000069B2                            Pal2_SBZ2:	incbin	pallet\sbz_act2.bin; SBZ act 2 & Final Zone pallets
00006A12                            Pal2_Special:	incbin	pallet\special.bin; special stage pallets
00006A92                            Pal2_SBZ3:	incbin	pallet\sbz_act3.bin; SBZ act 3 pallets
00006AF2                            Pal2_SBZ4:	incbin	pallet\sbz_act4.bin; SBZ act 3 pallets
00006B52                            Pal2_SBZ3Water:	incbin	pallet\sbz_a3uw.bin; SBZ act 3 (underwater) pallets
00006BD2                            Pal2_LZSonWater:	incbin	pallet\son_lzuw.bin; Sonic (underwater in LZ) pallet
00006BF2                            Pal2_LZTailsWater:	incbin	pallet\tails_lzuw.bin	; Tails (underwater in LZ) pallet
00006C12                            Pal2_SBZ3SonWat:	incbin	pallet\son_sbzu.bin; Sonic (underwater in SBZ act 3) pallet
00006C32                            Pal2_SBZ3TailsWat:	incbin	pallet\tails_sbzu.bin	; Tails (underwater in SBZ act 3) pallet
00006C52                            Pal2_SpeResult:	incbin	pallet\ssresult.bin; special stage results screen pallets
00006CD2                            Pal2_SpeContinue:incbin	pallet\sscontin.bin; special stage results screen continue pallet
00006D12                            Pal2_Ending:	incbin	pallet\ending.bin; ending sequence pallets
00006D92                            Pal2_ABZ:	incbin	pallet\abz.bin
00006DF2                            Pal2_ABZ2:	incbin	pallet\abz2.bin
00006E52                            Pal2_ABZ3:	incbin	pallet\abz3.bin
00006EB2                            Pal2_ABZ4:	incbin	pallet\abz4.bin
00006F12                            Pal3_GHZ:	incbin	pallet\ghz.bin
00006F72                            Pal3_GHZ2:	incbin	pallet\ghz2.bin
00006FD2                            Pal3_GHZ3:	incbin	pallet\ghz3.bin
00007032                            Pal3_GHZ4:	incbin	pallet\ghz3.bin
00007092                            Pal3_GHZExtra:	incbin	pallet\ghzextra.bin
000070F2                            Pal3_LZ:  incbin	pallet\lz.bin
00007152                            Pal3_LZ2:  incbin	pallet\lz2.bin
000071B2                            Pal3_LZ3:  incbin	pallet\lz3.bin
00007212                            Pal3_LZ4:  incbin	pallet\lz4.bin
00007272                            Pal3_LZWater:	incbin	pallet\lz_uw.bin; LZ underwater pallets
000072F2                            Pal3_LZWater2:	incbin	pallet\lz_uw2.bin; LZ underwater pallets
00007372                            Pal3_LZWater3:	incbin	pallet\lz_uw3.bin; LZ underwater pallets
000073F2                            Pal3_MZ:  incbin	pallet\mz.bin
00007452                            Pal3_MZ2:  incbin	pallet\mz2.bin
000074B2                            Pal3_MZ3:  incbin	pallet\mz3.bin
00007512                            Pal3_MZ4:	incbin	pallet\mz4.bin
00007572                            Pal3_SLZ:	incbin	pallet\slz.bin
000075D2                            Pal3_SLZ2:	incbin	pallet\slz2.bin
00007632                            Pal3_SLZ3:	incbin	pallet\slz3.bin
00007692                            Pal3_SLZ4:	incbin	pallet\slz4.bin
000076F2                            Pal3_SYZ:	incbin	pallet\syz.bin
00007752                            Pal3_SYZ2:	incbin	pallet\syz2.bin
000077B2                            Pal3_SYZ3:	incbin	pallet\syz3.bin
00007812                            Pal3_SYZ4:	incbin	pallet\syz4.bin
00007872                            Pal3_SBZ1:	incbin	pallet\sbz_act1.bin; SBZ act 1 pallets
000078D2                            Pal3_SBZ2:	incbin	pallet\sbz_act2.bin; SBZ act 2 & Final Zone pallets
00007932                            Pal3_Special:	incbin	pallet\special.bin; special stage pallets
000079B2                            Pal3_SBZ3:	incbin	pallet\sbz_act3.bin; SBZ act 3 pallets
00007A12                            Pal3_SBZ4:	incbin	pallet\sbz_act4.bin; SBZ act 3 pallets
00007A72                            Pal3_SBZ3Water:	incbin	pallet\sbz_a3uw.bin; SBZ act 3 (underwater) pallets
00007AF2                            Pal3_LZSonWater:	incbin	pallet\son_lzuw.bin; Sonic (underwater in LZ) pallet
00007B12                            Pal3_LZTailsWater:	incbin	pallet\tails_lzuw.bin	; Tails (underwater in LZ) pallet
00007B32                            Pal3_SBZ3SonWat:	incbin	pallet\son_sbzu.bin; Sonic (underwater in SBZ act 3) pallet
00007B52                            Pal3_SBZ3TailsWat:	incbin	pallet\tails_sbzu.bin	; Tails (underwater in SBZ act 3) pallet
00007B72                            Pal3_SpeResult:	incbin	pallet\ssresult.bin; special stage results screen pallets
00007BF2                            Pal3_SpeContinue:incbin	pallet\sscontin.bin; special stage results screen continue pallet
00007C32                            Pal3_Ending:	incbin	pallet\ending.bin; ending sequence pallets
00007CB2                            Pal3_ABZ:	incbin	pallet\abz.bin
00007D12                            Pal3_ABZ2:	incbin	pallet\abz2.bin
00007D72                            Pal3_ABZ3:	incbin	pallet\abz3.bin
00007DD2                            Pal3_ABZ4:	incbin	pallet\abz4.bin
00007E32                            Pal4_GHZ:	incbin	pallet\ghz.bin
00007E92                            Pal4_GHZ2:	incbin	pallet\ghz2.bin
00007EF2                            Pal4_GHZ3:	incbin	pallet\ghz3.bin
00007F52                            Pal4_GHZ4:	incbin	pallet\ghz3.bin
00007FB2                            Pal4_GHZExtra:	incbin	pallet\ghzextra.bin
00008012                            Pal4_LZ:  incbin	pallet\lz.bin
00008072                            Pal4_LZ2:  incbin	pallet\lz2.bin
000080D2                            Pal4_LZ3:  incbin	pallet\lz3.bin
00008132                            Pal4_LZ4:  incbin	pallet\lz4.bin
00008192                            Pal4_LZWater:	incbin	pallet\lz_uw.bin; LZ underwater pallets
00008212                            Pal4_LZWater2:	incbin	pallet\lz_uw2.bin; LZ underwater pallets
00008292                            Pal4_LZWater3:	incbin	pallet\lz_uw3.bin; LZ underwater pallets
00008312                            Pal4_MZ:  incbin	pallet\mz.bin
00008372                            Pal4_MZ2:  incbin	pallet\mz2.bin
000083D2                            Pal4_MZ3:  incbin	pallet\mz3.bin
00008432                            Pal4_MZ4:	incbin	pallet\mz4.bin
00008492                            Pal4_SLZ:	incbin	pallet\slz.bin
000084F2                            Pal4_SLZ2:	incbin	pallet\slz2.bin
00008552                            Pal4_SLZ3:	incbin	pallet\slz3.bin
000085B2                            Pal4_SLZ4:	incbin	pallet\slz4.bin
00008612                            Pal4_SYZ:	incbin	pallet\syz.bin
00008672                            Pal4_SYZ2:	incbin	pallet\syz2.bin
000086D2                            Pal4_SYZ3:	incbin	pallet\syz3.bin
00008732                            Pal4_SYZ4:	incbin	pallet\syz4.bin
00008792                            Pal4_SBZ1:	incbin	pallet\sbz_act1.bin; SBZ act 1 pallets
000087F2                            Pal4_SBZ2:	incbin	pallet\sbz_act2.bin; SBZ act 2 & Final Zone pallets
00008852                            Pal4_Special:	incbin	pallet\special.bin; special stage pallets
000088D2                            Pal4_SBZ3:	incbin	pallet\sbz_act3.bin; SBZ act 3 pallets
00008932                            Pal4_SBZ4:	incbin	pallet\sbz_act4.bin; SBZ act 3 pallets
00008992                            Pal4_SBZ3Water:	incbin	pallet\sbz_a3uw.bin; SBZ act 3 (underwater) pallets
00008A12                            Pal4_LZSonWater:	incbin	pallet\son_lzuw.bin; Sonic (underwater in LZ) pallet
00008A32                            Pal4_LZTailsWater:	incbin	pallet\tails_lzuw.bin	; Tails (underwater in LZ) pallet
00008A52                            Pal4_SBZ3SonWat:	incbin	pallet\son_sbzu.bin; Sonic (underwater in SBZ act 3) pallet
00008A72                            Pal4_SBZ3TailsWat:	incbin	pallet\tails_sbzu.bin	; Tails (underwater in SBZ act 3) pallet
00008A92                            Pal4_SpeResult:	incbin	pallet\ssresult.bin; special stage results screen pallets
00008B12                            Pal4_SpeContinue:incbin	pallet\sscontin.bin; special stage results screen continue pallet
00008B52                            Pal4_Ending:	incbin	pallet\ending.bin; ending sequence pallets
00008BD2                            Pal4_ABZ:	incbin	pallet\abz.bin
00008C32                            Pal4_ABZ2:	incbin	pallet\abz2.bin
00008C92                            Pal4_ABZ3:	incbin	pallet\abz3.bin
00008CF2                            Pal4_ABZ4:	incbin	pallet\abz4.bin
00008D52                            Pal_SSRGBG:		incbin	pallet\ssrgbg.bin
00008D72                            
00008D72                            ; ---------------------------------------------------------------------------
00008D72                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00008D72                            ; ---------------------------------------------------------------------------
00008D72                            
00008D72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D72                            
00008D72                            
00008D72                            DelayProgram:				; XREF: PauseGame
00008D72 46FC 2300                  		enable_ints
00008D76                            
00008D76                            loc_29AC:
00008D76 4A38 F62A                  		tst.b	($FFFFF62A).w
00008D7A 66FA                       		bne.s	loc_29AC
00008D7C 4E75                       		rts	
00008D7E                            ; End of function DelayProgram
00008D7E                            
00008D7E                            ; ---------------------------------------------------------------------------
00008D7E                            ; Called at the end of each frame to perform vertical synchronization
00008D7E                            ; ---------------------------------------------------------------------------
00008D7E                            
00008D7E                            ; =============== S U B R O U T I N E =======================================
00008D7E                            
00008D7E =00008D72                  Wait_VSync	= DelayProgram
00008D7E                            
00008D7E                            ; End of function Wait_VSync
00008D7E                            
00008D7E                            
00008D7E                            ; ---------------------------------------------------------------------------
00008D7E                            ; Subroutine to	generate a pseudo-random number	in d0
00008D7E                            ; ---------------------------------------------------------------------------
00008D7E                            
00008D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D7E                            
00008D7E                            
00008D7E                            RandomNumber:
00008D7E 2238 F636                  		move.l	($FFFFF636).w,d1
00008D82                            ;		tst.w	d1
00008D82 6600                       		bne.s	loc_29C0
00008D84 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00008D8A                            
00008D8A                            loc_29C0:
00008D8A 2001                       		move.l	d1,d0
00008D8C E581                       		asl.l	#2,d1
00008D8E D280                       		add.l	d0,d1
00008D90 E781                       		asl.l	#3,d1
00008D92 D280                       		add.l	d0,d1
00008D94 3001                       		move.w	d1,d0
00008D96 4841                       		swap	d1
00008D98 D041                       		add.w	d1,d0
00008D9A 3200                       		move.w	d0,d1
00008D9C 4841                       		swap	d1
00008D9E 21C1 F636                  		move.l	d1,($FFFFF636).w
00008DA2 4E75                       		rts	
00008DA4                            ; End of function RandomNumber
00008DA4                            
00008DA4                            CalcSine:				; XREF: SS_BGAnimate; et al
00008DA4 0240 00FF                  		andi.w	#$FF,d0
00008DA8 D040                       		add.w	d0,d0
00008DAA 0640 0080                  		addi.w	#$80,d0
00008DAE 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00008DB2 0440 0080                  		subi.w	#$80,d0
00008DB6 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00008DBA 4E75                       		rts	
00008DBC                            ; End of function CalcSine
00008DBC                            
00008DBC                            ; ===========================================================================
00008DBC                            
00008DBC                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
0000903C                            
0000903C                            ; ===========================================================================
0000903C 48E7 6000                  		movem.l	d1-d2,-(sp)
00009040 3200                       		move.w	d0,d1
00009042 4841                       		swap	d1
00009044 7000                       		moveq	#0,d0
00009046 3200                       		move.w	d0,d1
00009048 7407                       		moveq	#7,d2
0000904A                            
0000904A                            loc_2C80:
0000904A E599                       		rol.l	#2,d1
0000904C D040                       		add.w	d0,d0
0000904E 5240                       		addq.w	#1,d0
00009050 9240                       		sub.w	d0,d1
00009052 6400                       		bcc.s	loc_2C9A
00009054 D240                       		add.w	d0,d1
00009056 5340                       		subq.w	#1,d0
00009058 51CA FFF0                  		dbf	d2,loc_2C80
0000905C E248                       		lsr.w	#1,d0
0000905E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00009062 4E75                       		rts	
00009064                            ; ===========================================================================
00009064                            
00009064                            loc_2C9A:
00009064 5240                       		addq.w	#1,d0
00009066 51CA FFE2                  		dbf	d2,loc_2C80
0000906A E248                       		lsr.w	#1,d0
0000906C 4CDF 0006                  		movem.l	(sp)+,d1-d2
00009070 4E75                       		rts	
00009072                            
00009072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009072                            
00009072                            
00009072                            CalcAngle:
00009072 48E7 1800                  		movem.l	d3-d4,-(sp)
00009076 7600                       		moveq	#0,d3
00009078 7800                       		moveq	#0,d4
0000907A 3601                       		move.w	d1,d3
0000907C 3802                       		move.w	d2,d4
0000907E 8843                       		or.w	d3,d4
00009080 6700                       		beq.s	loc_2D04
00009082 3802                       		move.w	d2,d4
00009084 4A43                       		tst.w	d3
00009086 6A00 0000                  		bpl.w	loc_2CC2
0000908A 4443                       		neg.w	d3
0000908C                            
0000908C                            loc_2CC2:
0000908C 4A44                       		tst.w	d4
0000908E 6A00 0000                  		bpl.w	loc_2CCA
00009092 4444                       		neg.w	d4
00009094                            
00009094                            loc_2CCA:
00009094 B843                       		cmp.w	d3,d4
00009096 6400 0000                  		bcc.w	loc_2CDC
0000909A E18C                       		lsl.l	#8,d4
0000909C 88C3                       		divu.w	d3,d4
0000909E 7000                       		moveq	#0,d0
000090A0 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
000090A4 6000                       		bra.s	loc_2CE6
000090A6                            ; ===========================================================================
000090A6                            
000090A6                            loc_2CDC:				; XREF: CalcAngle
000090A6 E18B                       		lsl.l	#8,d3
000090A8 86C4                       		divu.w	d4,d3
000090AA 7040                       		moveq	#$40,d0
000090AC 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
000090B0                            
000090B0                            loc_2CE6:
000090B0 4A41                       		tst.w	d1
000090B2 6A00 0000                  		bpl.w	loc_2CF2
000090B6 4440                       		neg.w	d0
000090B8 0640 0080                  		addi.w	#$80,d0
000090BC                            
000090BC                            loc_2CF2:
000090BC 4A42                       		tst.w	d2
000090BE 6A00 0000                  		bpl.w	loc_2CFE
000090C2 4440                       		neg.w	d0
000090C4 0640 0100                  		addi.w	#$100,d0
000090C8                            
000090C8                            loc_2CFE:
000090C8 4CDF 0018                  		movem.l	(sp)+,d3-d4
000090CC 4E75                       		rts	
000090CE                            ; ===========================================================================
000090CE                            
000090CE                            loc_2D04:				; XREF: CalcAngle
000090CE 303C 0040                  		move.w	#$40,d0
000090D2 4CDF 0018                  		movem.l	(sp)+,d3-d4
000090D6 4E75                       		rts	
000090D8                            ; End of function CalcAngle
000090D8                            
000090D8                            ; ===========================================================================
000090D8                            
000090D8                            Angle_Data:	incbin	misc\angles.bin
000091DA                            
000091DA                            ; ===========================================================================
000091DA                            
000091DA                            ; ---------------------------------------------------------------------------
000091DA                            ; Sega screen
000091DA                            ; ---------------------------------------------------------------------------
000091DA                            
000091DA                            SegaScreen:				; XREF: GameModeArray
000091DA 103C 00E0                  		move.b	#$E0,d0
000091DE 6100 0000                  		bsr.w	Jmpto_PlaySound_Special ; stop music
000091E2 4EB8 3754                  		jsr	clearplc
000091E6 4EB8 4528                  		jsr	pal_fadefrom
000091EA 43F8 F700                  		lea	($FFFFF700).w,a1
000091EE 7000                       		moveq	#0,d0
000091F0 323C 003F                  		move.w	#$3F,d1
000091F4                            
000091F4                            loc_30332A:					  ; ...
000091F4 22C0                       		move.l	d0,(a1)+
000091F6 51C9 FFFC                  		dbf	d1,loc_30332A
000091FA 43F8 D000                  		lea	($FFFFD000).w,a1
000091FE 7000                       		moveq	#0,d0
00009200 323C 07FF                  		move.w	#$7FF,d1
00009204                            
00009204                            loc_30333A:					  ; ...
00009204 22C0                       		move.l	d0,(a1)+
00009206 51C9 FFFC                  		dbf	d1,loc_30333A
0000920A 4DF9 00C0 0004             		lea	($C00004).l,a6
00009210 3CBC 8004                  		move.w	#$8004,(a6)
00009214 3CBC 8230                  		move.w	#$8230,(a6)
00009218 3CBC 8407                  		move.w	#$8407,(a6)
0000921C 3CBC 8700                  		move.w	#$8700,(a6)
00009220 3CBC 8B00                  		move.w	#$8B00,(a6)
00009224 4238 F64E                  		clr.b	($FFFFF64E).w
00009228 46FC 2700                  		disable_ints
0000922C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00009230 0200 00BF                  		andi.b	#$BF,d0
00009234 33C0 00C0 0004             		move.w	d0,($C00004).l
0000923A 4EB8 3084                  		jsr	ClearScreen
0000923E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00009248 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
0000924E 4EB8 3596                  		jsr	NemDec
00009252 43F9 00FF 0000             		lea	($FF0000).l,a1
00009258 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
0000925E 303C 0000                  		move.w	#0,d0
00009262 4EB8 389E                  		jsr	EniDec
00009266 43F9 00FF 0000             		lea	($FF0000).l,a1
0000926C 203C 6510 0003             		move.l	#$65100003,d0
00009272 7217                       		moveq	#$17,d1
00009274 7407                       		moveq	#7,d2
00009276 4EB8 34A0                  		jsr	ShowVDPGraphics
0000927A 43F9 00FF 0180             		lea	($FF0180).l,a1
00009280 203C 4000 0003             		move.l	#$40000003,d0
00009286 7227                       		moveq	#$27,d1
00009288 741B                       		moveq	#$1B,d2
0000928A 4EB8 34A0                  		jsr	ShowVDPGraphics
0000928E                            ;		lea	($FFFFD080).w,a1
0000928E                            ;		move.b	#6,(a1)
0000928E                            ;		move.b	#$4E,$28(a1)
0000928E                            ;		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000928E                            ;		bpl.s	GameInitCont	; if Japanese, branch
0000928E                            ;		jmp		GameInitCont2
0000928E                            ;GameInitCont:
0000928E                            ;		jmp     SegaLogo
0000928E                            ;GameInitCont2:
0000928E 7000                       		moveq	#0,d0
00009290 4EB8 4812                  		jsr	PalLoad2	; load Sega logo pallet
00009294 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000929A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000092A0 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000092A6 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000092AC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000092B0 0000 0040                  		ori.b	#$40,d0
000092B4 33C0 00C0 0004             		move.w	d0,($C00004).l
000092BA                            
000092BA                            Sega_WaitPallet:
000092BA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000092C0 6100 FAB0                  		bsr.w	Wait_VSync
000092C4 4EB8 4708                  		jsr	PalCycle_Sega
000092C8 66F0                       		bne.s	Sega_WaitPallet
000092CA                            
000092CA 103C 00FF                  		move.b	#$FF,d0
000092CE 6100 0000                  		bsr.w	Jmpto_PlaySound_Special ; play "SEGA"	sound
000092D2 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
000092D8 6100 FA98                  		bsr.w	Wait_VSync
000092DC 31FC 00B4 FC20             		move.w	#$B4,($FFFFFC20).w
000092E2                            			; If start was pressed, skip ahead
000092E2                            
000092E2                            Sega_WaitEnd:
000092E2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000092E8 6100 FA88                  		bsr.w	Wait_VSync
000092EC 4A78 FC20                  		tst.w	($FFFFFC20).w
000092F0 6700                       		beq.s	Sega_GotoTitle
000092F2 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000092F8 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000092FA                            
000092FA                            Sega_GotoTitle:
000092FA 4EF9 0000 0000             		jmp		SSRGSCreen
00009300 4E75                       		rts
00009302                            
00009302                            ; ===========================================================================
00009302                            
00009302                            ; ---------------------------------------------------------------------------
00009302                            ; Subroutine that does the exact same thing as ShowVDPGraphics2
00009302                            ; (this one is used at the Sega screen)
00009302                            ; ---------------------------------------------------------------------------
00009302                            
00009302                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00009302                            
00009302                            ; sub_396E:
00009302                            ShowVDPGraphics3:
00009302 4DF9 00C0 0000             		lea	($C00000).l,a6
00009308 283C 0100 0000             		move.l	#$1000000,d4
0000930E                            
0000930E                            loc_3034D4:					  ; ...
0000930E 2D40 0004                  		move.l	d0,4(a6)
00009312 3601                       		move.w	d1,d3
00009314                            
00009314                            loc_3034DA:					  ; ...
00009314 3C99                       		move.w	(a1)+,(a6)
00009316 51CB FFFC                  		dbf	d3,loc_3034DA
0000931A D084                       		add.l	d4,d0
0000931C 51CA FFF0                  		dbf	d2,loc_3034D4
00009320 4E75                       		rts
00009322                            ; End of function ShowVDPGraphics3
00009322                            
00009322                            ; ===========================================================================
00009322 4E71                       	nop
00009324                            
00009324                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00009324                            
00009324                            ; sub_3990:
00009324                            JmpTo_RunObjects 
00009324 4EF9 0000 0000             	jmp	ObjectsLoad.l
0000932A                            ; End of function JmpTo_RunObjects
0000932A                            
0000932A                            ; ===========================================================================
0000932A 0000                       	align 4
0000932C                            	
0000932C                            JmpTo_SoundDriverLoad2:
0000932C 4EF8 3112                  	jmp	JmpTo_SoundDriverLoad
00009330 4E75                       	rts
00009332                            
00009332                            Jmpto_PlaySound_Special:
00009332 4EF8 325C                  	jmp	PlaySound_Special
00009336                            ; ---------------------------------------------------------------------------
00009336                            ; Title	screen
00009336                            ; ---------------------------------------------------------------------------
00009336                            
00009336                            TitleScreen:				; XREF: GameModeArray
00009336 103C 00E4                  		move.b	#$E4,d0
0000933A 6100 FFF6                  		bsr.w	Jmpto_PlaySound_Special ; stop music
0000933E 4EB8 3754                  		jsr	clearplc
00009342                            ;		move.b	#0,($FFFFFFCC).w
00009342 4EB8 4528                  		jsr	pal_fadefrom
00009346 46FC 2700                  		disable_ints
0000934A 6100 FFE0                  		bsr.w	JmpTo_SoundDriverLoad2
0000934E 4DF9 00C0 0004             		lea	($C00004).l,a6
00009354 3CBC 8004                  		move.w	#$8004,(a6)
00009358 3CBC 8230                  		move.w	#$8230,(a6)
0000935C 3CBC 8407                  		move.w	#$8407,(a6)
00009360 3CBC 9001                  		move.w	#$9001,(a6)
00009364 3CBC 9200                  		move.w	#$9200,(a6)
00009368 3CBC 8B03                  		move.w	#$8B03,(a6)
0000936C 3CBC 8720                  		move.w	#$8720,(a6)
00009370 4238 F64E                  		clr.b	($FFFFF64E).w
00009374                            ;		clr.b	($FFFFFF0A).w
00009374 3CBC 8C81                  		move.w	#$8C81,(a6)
00009378 4EB8 3084                  		jsr	ClearScreen
0000937C 43F8 AC00                  		lea	(Sprite_Table_Input).w,a1
00009380 7000                       		moveq	#0,d0
00009382 323C 00FF                  		move.w	#$FF,d1
00009386                            
00009386                            loc_303534:					  ; ...
00009386 22C0                       		move.l	d0,(a1)+
00009388 51C9 FFFC                  		dbf	d1,loc_303534
0000938C 43F8 D000                  		lea	($FFFFD000).w,a1
00009390 7000                       		moveq	#0,d0
00009392 323C 07FF                  		move.w	#$7FF,d1
00009396                            
00009396                            loc_303544:					  ; ...
00009396 22C0                       		move.l	d0,(a1)+
00009398 51C9 FFFC                  		dbf	d1,loc_303544
0000939C 43F8 F700                  		lea	($FFFFF700).w,a1
000093A0 7000                       		moveq	#0,d0
000093A2 323C 003F                  		move.w	#$3F,d1
000093A6                            
000093A6                            loc_303554:					  ; ...
000093A6 22C0                       		move.l	d0,(a1)+
000093A8 51C9 FFFC                  		dbf	d1,loc_303554
000093AC 43F8 EE00                  		lea	($FFFFEE00).w,a1
000093B0 7000                       		moveq	#0,d0
000093B2 323C 003F                  		move.w	#$3F,d1
000093B6                            		
000093B6                            loc_303564:					  ; ...
000093B6 22C0                       		move.l	d0,(a1)+
000093B8 51C9 FFFC                  		dbf	d1,loc_303564
000093BC 46FC 2700                  		disable_ints
000093C0 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000093CA 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000093D0 4EB8 3596                  		jsr	NemDec
000093D4 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
000093DE 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000093E4 4EB8 3596                  		jsr	NemDec
000093E8 43F9 00FF 0000             		lea	($FF0000).l,a1
000093EE 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000093F4 303C 0000                  		move.w	#0,d0
000093F8 4EB8 389E                  		jsr	EniDec
000093FC 43F9 00FF 0000             		lea	($FF0000).l,a1
00009402 203C 4000 0003             		move.l	#$40000003,d0
00009408 7227                       		moveq	#$27,d1
0000940A 741B                       		moveq	#$1B,d2
0000940C 4EB8 34A0                  		jsr	ShowVDPGraphics
00009410 43F8 FB80                  		lea	($FFFFFB80).w,a1
00009414 7000                       		moveq	#0,d0
00009416 323C 001F                  		move.w	#$1F,d1
0000941A                            
0000941A                            Title_ClrPallet:
0000941A 22C0                       		move.l	d0,(a1)+
0000941C 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00009420                            
00009420 7003                       		moveq	#3,d0		; load Sonic's pallet
00009422 4EB8 47FA                  		jsr	PalLoad1
00009426                            ;		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00009426 4278 FFF4                  		clr.w	($FFFFFFF4).w
0000942A 4EB9 0000 0000             		jsr	Credits_MapLoad
00009430 4EB9 0000 0000             		jsr	ObjectsLoad
00009436 4EB9 0000 0000             		jsr	BuildSprites
0000943C 4EB8 446E                  		jsr	Pal_FadeTo
00009440 46FC 2700                  		disable_ints
00009444 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000944E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00009454 4EB8 3596                  		jsr	NemDec
00009458 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00009462 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00009468 4EB8 3596                  		jsr	NemDec
0000946C 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00009476 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000947C 4EB8 3596                  		jsr	NemDec
00009480 23FC 6240 0002 00C0 0004   		move.l	#$62400002,($C00004).l
0000948A 41F9 0000 0000             		lea	(Nem_TitleMenu).l,a0 ; load "Title Menu text" patterns
00009490 4EB8 3596                  		jsr	NemDec
00009494 4DF9 00C0 0000             		lea	($C00000).l,a6
0000949A 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000094A2 4BF9 0000 0000             		lea	(Art_Text).l,a5
000094A8 323C 028F                  		move.w	#$28F,d1
000094AC                            
000094AC                            Title_LoadText:
000094AC 3C9D                       		move.w	(a5)+,(a6)
000094AE 51C9 FFFC                  		dbf	d1,Title_LoadText; load uncompressed text patterns
000094B2                            	;Mercury Game Over When Drowning Fix
000094B2 11FC 0000 F744             		move.b	#0,(f_nobgscroll).w
000094B8                            	;end Game Over When Drowning Fix
000094B8 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w; clear lamppost counter
000094BE 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w; disable debug item placement	mode
000094C4 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w; disable debug mode
000094CA 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000094D0 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w; set level to	GHZ (00)
000094D6 31FC 0000 F634             		move.w	#0,($FFFFF634).w; disable palette cycling
000094DC 4EB9 0000 0000             		jsr	LevelSizeLoad
000094E2 4EB9 0000 0000             		jsr	DeformBgLayer
000094E8 43F8 B000                  		lea	($FFFFB000).w,a1
000094EC                            
000094EC 41F9 0000 0000             		lea	(Blk16_Title).l,a0  ; load GHZ 16x16 mappings
000094F2 6100 A532                  		bsr.w	KosDec            ; use Kosinski decompressor instead of Enigma decompresor
000094F6 41F9 0000 0000             		lea	(Blk256_Title).l,a0 ; load GHZ 256x256 mappings
000094FC 43F9 00FF 0000             		lea	($FF0000).l,a1
00009502 4EB8 3A26                  		jsr	KosDec
00009506                            
00009506 4EB9 0000 0000             		jsr	LevelLayoutLoad
0000950C 4EB8 4528                  		jsr	pal_fadefrom
00009510 46FC 2700                  		disable_ints
00009514 4EB8 3084                  		jsr	ClearScreen
00009518 4BF9 00C0 0004             		lea	($C00004).l,a5
0000951E 4DF9 00C0 0000             		lea	($C00000).l,a6
00009524 47F8 F708                  		lea	($FFFFF708).w,a3
00009528 2878 A404                  		movea.l	($FFFFA404).w,a4
0000952C 343C 6000                  		move.w	#$6000,d2
00009530 4EB9 0000 0000             		jsr	LoadTilesFromStart2
00009536                            ;		lea     ($FFFF0858), A1    
00009536                             ;       lea     (CopyrightText), A2                   ; Offset_0x003E3A
00009536                             ;       moveq   #$0A, D6
00009536                            Offset_0x003B1A:
00009536                            	;	move.w  (A2)+, (A1)+
00009536                            	;	dbra    D6, Offset_0x003B1A
00009536                            	;	lea     ($FFFF0000), A1
00009536                            	;	move.l  #$40000003, D0
00009536                            	;	moveq   #$27, D1
00009536                            	;	moveq   #$1B, D2
00009536                            	;	jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
00009536                            	;	lea     ($FFFFFB00).w, A1
00009536                            	;	moveq   #$00, D0
00009536                            ;		move.w  #$003F, D1
00009536 43F9 00FF 0000             		lea	($FF0000).l,a1
0000953C 41F9 0000 0000             		lea	(Eni_Title).l,a0; load	title screen mappings
00009542 303C 0000                  		move.w	#0,d0
00009546 4EB8 389E                  		jsr	EniDec
0000954A 43F9 00FF 0000             		lea	($FF0000).l,a1
00009550 203C 4206 0003             		move.l	#$42060003,d0
00009556 7221                       		moveq	#$21,d1
00009558 7415                       		moveq	#$15,d2
0000955A 4EB8 34A0                  		jsr	ShowVDPGraphics
0000955E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00009568 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0; load GHZ patterns
0000956E 4EB8 3596                  		jsr	NemDec
00009572                            
00009572 7004                       		moveq	#palid_GHZ,d0	; load GHZ palette
00009574 4EB8 47FA                  		jsr	PalLoad1
00009578                            		
00009578 7001                       		moveq	#palid_Title,d0	; load title screen palette
0000957A 4EB8 47FA                  		jsr	PalLoad1
0000957E 103C 0011                  		move.b	#$11,d0; play title screen music
00009582 6100 FDAE                  		bsr.w	Jmpto_PlaySound_Special
00009586 11F9 0020 002D FF8C        		move.b	($20002D).l,($FFFFFF8C).w ; load unlocked level select if game is beaten
0000958E 31FC 0000 D00C             		move.w	#$0,($FFFFD00C).w
00009594 31FC 0000 F704             		move.w	#$0,($FFFFF704).w
0000959A 11FC 0000 FFDA             		move.b	#0,($FFFFFFDA).w; disable debug mode
000095A0 31FC 0178 FC20             		move.w	#$178,($FFFFFC20).w; run title	screen for $178	frames
000095A6 43F8 D080                  		lea	($FFFFD080).w,a1
000095AA 7000                       		moveq	#0,d0
000095AC 323C 0007                  		move.w	#7,d1
000095B0                            
000095B0                            ;Title_ClrObjRam2:
000095B0                            	;	move.l	d0,(a1)+
000095B0                            	;	dbf	d1,Title_ClrObjRam2
000095B0 43F8 D080                  		lea ($FFFFD080).w,a1
000095B4                            
000095B4 4EB9 0000 0000             		jsr DeleteObject2 ;clear object RAM more thoroughly
000095BA 11FC 000E D040             		move.b #$E,($FFFFD040).w ; load big Sonic object
000095C0 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000095C6 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000095CC 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000095D2 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000095D8 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000095DE 4EB9 0000 0000             		jsr	ObjectsLoad
000095E4 4EB9 0000 0000             		jsr	DeformBgLayer
000095EA 4EB9 0000 0000             		jsr	BuildSprites
000095F0 7000                       		moveq	#0,d0
000095F2 4EB8 3728                  		jsr	LoadPLC2
000095F6                            ;		jsr	LoadLivesCounterArt
000095F6 31FC 0000 FFD4             		move.w	#0,(Correct_cheat_entries).w
000095FC 31FC 0000 FFD6             		move.w	#0,(Correct_cheat_entries_2).w
00009602 4E71                       		nop
00009604 4E71                       		nop
00009606 4E71                       		nop
00009608 4E71                       		nop
0000960A 4E71                       		nop
0000960C 4E71                       		nop
0000960E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00009612 0000 0040                  		ori.b	#$40,d0
00009616 33C0 00C0 0004             		move.w	d0,($C00004).l
0000961C 4EB8 446E                  		jsr	Pal_FadeTo
00009620                            
00009620                            loc_317C:
00009620 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00009626 6100 F74A                  		bsr.w	Wait_VSync
0000962A 4EB9 0000 0000             		jsr	ObjectsLoad
00009630 4EB9 0000 0000             		jsr	DeformBgLayer
00009636 4EB9 0000 0000             		jsr	BuildSprites
0000963C 4EB8 3C76                  		jsr	PalCycle_GHZ
00009640 4EB8 3762                  		jsr	RunPLC_RAM
00009644 3038 D008                  		move.w	($FFFFD008).w,d0
00009648 5440                       		addq.w	#2,d0
0000964A 0C40 FF00                  		cmpi.w	#$FF00,d0	; has Sonic object passed x-position $FF00?
0000964E 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00009650                            ;		move.b	#0,($FFFFF600).w ; go to Sega screen
00009650 4E75                       		rts	
00009652                            ; ===========================================================================
00009652                            
00009652                            Title_ChkRegion:
00009652                            ;		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00009652                            ;		bpl.s	Title_RegionJ	; if Japanese, branch
00009652                            ;		lea	(LevelSelectCode_US).l,a0 ; load US code
00009652                            ;		bra.s	Title_EnterCheat
00009652                            ; ===========================================================================
00009652                            
00009652                            Title_RegionJ:				; XREF: Title_ChkRegion
00009652                            ;		lea	(LevelSelectCode_J).l,a0 ; load	J code
00009652                            
00009652                            Title_EnterCheat:			; XREF: Title_ChkRegion
00009652                            ;		move.w	($FFFFFFE4).w,d0
00009652                            ;		adda.w	d0,a0
00009652                            ;		move.b	($FFFFF605).w,d0 ; get button press
00009652                            ;		andi.b	#$F,d0		; read only up/down/left/right buttons
00009652                            ;		cmp.b	(a0),d0		; does button press match the cheat code?
00009652                            ;		bne.s	loc_3210	; if not, branch
00009652                            ;		addq.w	#1,($FFFFFFE4).w ; next	button press
00009652                            ;		tst.b	d0
00009652                            ;		bne.s	Title_CountC
00009652                            ;		lea	($FFFFFFE0).w,a0
00009652                            ;		move.w	($FFFFFFE6).w,d1
00009652                            ;		lsr.w	#1,d1
00009652                            ;		andi.w	#3,d1
00009652                            ;		beq.s	Title_PlayRing
00009652                            ;		tst.b	($FFFFFFF8).w
00009652                            ;		bpl.s	Title_PlayRing
00009652                            ;		moveq	#1,d1
00009652                            ;		move.b	d1,1(a0,d1.w)
00009652                            
00009652                            Title_PlayRing:
00009652                            ;		move.b	#1,(a0,d1.w)	; activate cheat
00009652                            ;		move.b	#$B5,d0		; play ring sound when code is entered
00009652                            ;		jsr	PlaySound_Special
00009652                            ;		bra.s	Title_CountC
00009652                            ; ===========================================================================
00009652                            loc_3210:				; XREF: Title_EnterCheat
00009652                            ;		tst.b	d0
00009652                            ;		beq.s	Title_CountC
00009652                            ;		cmpi.w	#9,($FFFFFFE4).w
00009652                            ;		beq.s	Title_CountC
00009652                            ;		move.w	#0,($FFFFFFE4).w
00009652                            
00009652                            Title_CountC:
00009652                            ;		move.b	($FFFFF605).w,d0
00009652                            ;		andi.b	#$20,d0		; is C button pressed?
00009652                            ;		beq.s	loc_3230	; if not, branch
00009652                            ;		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00009652                            
00009652                            loc_3230:
00009652                            ;		tst.w	($FFFFF614).w
00009652                            ;		beq.w	Demo
00009652 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00009658 6700 FFC6                  		beq.w	loc_317C	; if not, branch
0000965C                            
0000965C                            Title_ChkLevSel:
0000965C                            ;		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000965C                            ;		beq.w	PlayLevel	; if not, play level
0000965C                            ;		btst	#6,($FFFFF604).w ; check if A is pressed
0000965C                            ;		beq.w	PlayLevel	; if not, play level
0000965C                            ;		tst.b	($FFFFFFD0).w	; check	if level select	code is	on
0000965C                            ;		beq.w	PlayLevel	; if not, play level
0000965C                            ;		btst	#6,($FFFFF604).w ; check if A is pressed
0000965C                            ;		beq.w	PlayLevel	; if not, play level
0000965C                            
0000965C 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w	; is Title Menu on?
00009662 6700 FFBC                  		beq.w	loc_317C			; if it not was deleted, branch	
00009666 7400                       		moveq	#0,d2
00009668 1438 FF86                  		move.b	(Title_screen_option).w,d2	; load the choice
0000966C D442                       		add.w	d2,d2				; multiply by 2
0000966E 343B 2000                  		move.w	Obj0F_Menu_Choice(pc,d2.w),d2
00009672 4EFB 2000                  		jmp	Obj0F_Menu_Choice(pc,d2.w)	; jump to the choice code
00009676                            		
00009676                            ; ===========================================================================
00009676                            Obj0F_Menu_Choice:
00009676 0000                       		dc.w PlayLevel-Obj0F_Menu_Choice	; 0
00009678 0000                       		dc.w Menu_LevelSelect-Obj0F_Menu_Choice	; 2
0000967A 0000                       		dc.w Menu_Options-Obj0F_Menu_Choice	; 4
0000967C 0000                       		dc.w PlaySpecialStage-Obj0F_Menu_Choice	; 6
0000967E 0000                       		dc.w Menu_OldLevelSelect-Obj0F_Menu_Choice	; 8
00009680                            ; ===========================================================================
00009680                            
00009680                            Menu_Options:
00009680 21FC 0000 1388 FFC0        		move.l	#5000,($FFFFFFC0).w
00009688 11FC 002C F600             		move.b	#$2C,(Game_Mode).w	; Go to Sonic 2 Options Menu
0000968E 4E75                       		rts
00009690                            Menu_LevelSelect:
00009690 11FC 0038 F600             		move.b	#$38,(Game_Mode).w	; Go to Old Sonic 2 Level Select
00009696 4E75                       		rts
00009698                            Menu_OldLevelSelect:
00009698 7002                       		moveq	#2,d0
0000969A 4EB8 4812                  		jsr	PalLoad2; load level select pallet
0000969E 43F8 CC00                  		lea	($FFFFCC00).w,a1
000096A2 7000                       		moveq	#0,d0
000096A4 323C 00DF                  		move.w	#$DF,d1
000096A8                            ;		jsr	Pal_FadeTo
000096A8                            Title_ClrScroll:
000096A8 22C0                       		move.l	d0,(a1)+
000096AA 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000096AE                            
000096AE 21C0 F616                  		move.l	d0,($FFFFF616).w
000096B2 46FC 2700                  		disable_ints
000096B6 4DF9 00C0 0000             		lea	($C00000).l,a6
000096BC 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000096C6 323C 03FF                  		move.w	#$3FF,d1
000096CA                            
000096CA                            Title_ClrVram:
000096CA 2C80                       		move.l	d0,(a6)
000096CC 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000096D0 103C 000F                  		move.b  #$0F,d0
000096D4 4EB8 3212                  		jsr PlaySound
000096D8 4EB9 0000 0000             		jsr	LevSelTextLoad
000096DE                            ;		move.w	#$19,d0
000096DE                            ;		bsr.w	Jmpto_Palload1	; load level select pallet
000096DE                            ;		move.w	#$1A,d0
000096DE                            ;		bsr.w	Jmpto_Palload1	; load level select pallet
000096DE                                            ;jsr     DeformBGLayer
000096DE                            ;		jsr	Pal_FadeFrom
000096DE                            ; ---------------------------------------------------------------------------
000096DE                            ; Level	Select
000096DE                            ; ---------------------------------------------------------------------------
000096DE                            
000096DE                            LevelSelect:
000096DE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000096E4 6100 F68C                  		bsr.w	DelayProgram
000096E8 6100 0000                  		bsr.w	LevSelControls
000096EC 4EB8 3762                  		jsr	RunPLC_RAM
000096F0 4AB8 F680                  		tst.l	($FFFFF680).w
000096F4 66E8                       		bne.s	LevelSelect
000096F6 3038 FFA8                  		move.w	($FFFFFFA8).w,d0
000096FA 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000096FE 6600                       		bne.s	LevSelLevCheckStart; if not, go to	Level/SS subroutine
00009700 0C38 0080 F605             		cmpi.b	#$80,($FFFFF605).w ; is	Start pressed?
00009706 6700                       		beq.s	LevSelStartPress	; if true, branch
00009708                            ;		cmpi.b	#button_B_mask,($FFFFF605).w ; is	B pressed?
00009708                            ;		beq.s	LevSelBCPress	; if not, branch
00009708 0C38 0020 F605             		cmpi.b	#button_C_mask,($FFFFF605).w ; is	C pressed?
0000970E 6700                       		beq.s	LevSelBCPress	; if not, branch
00009710 60CC                       		bra.s	LevelSelect
00009712                            ; ===========================================================================
00009712                            LevSelLevCheckStart:				; XREF: LevelSelect
00009712 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start pressed?
00009718 67C4                       		beq.s	LevelSelect	; if not, branch
0000971A 6000                       		bra.s	LevSel_Level_SS
0000971C                             
0000971C                            LevSelBCPress:				; XREF: LevelSelect
0000971C 3038 FF84                  		move.w	($FFFFFF84).w,d0
00009720                            ;		addi.w	#$80,d0
00009720 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $80-$94 being played?
00009724 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00009726 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
0000972A 65B2                       		bcs.s	LevelSelect	; if yes, branch
0000972C                             
0000972C                            LevSel_PlaySnd:
0000972C 4EB8 325C                  		jsr	PlaySound_Special
00009730 60AC                       		bra.s	LevelSelect
00009732                             
00009732                            LevSelStartPress:				; XREF: LevelSelect
00009732 11FC 0000 F600             		move.b	#$00,$FFFFF600
00009738 4EF8 038C                  		jmp MainGameLoop ;go to sega screen
0000973C                            ; ===========================================================================
0000973C                            
0000973C                            LevSel_Ending:				; XREF: LevelSelect
0000973C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00009742 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00009748 4E75                       		rts	
0000974A                            ; ===========================================================================
0000974A                            
0000974A                            LevSel_Credits:				; XREF: LevelSelect
0000974A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00009750 103C 0091                  		move.b	#$91,d0
00009754 4EB8 325C                  		jsr	PlaySound_Special ; play credits music
00009758 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000975E 4E75                       		rts	
00009760                            ; ===========================================================================
00009760                            
00009760                            LevSel_Level_SS:			; XREF: LevelSelect
00009760 D040                       		add.w	d0,d0
00009762 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00009766 6B00 FF76                  		bmi.w	LevelSelect
0000976A 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
0000976E 6600 0000                  		bne.w	LevSel_Level	; if not, branch
00009772 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00009778 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000977C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00009782 7000                       		moveq	#0,d0
00009784 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00009788 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000978C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00009790 4E75                       		rts	
00009792                            ; ---------------------------------------------------------------------------
00009792                            ; Level	select - level pointers
00009792                            ; ---------------------------------------------------------------------------
00009792                            LSelectPointers:
00009792                            		incbin	misc\ls_point.bin
000097BC                            		even
000097BC                            
000097BC                            ; ===========================================================================
000097BC                            
000097BC                            LevSel_Level:				; XREF: LevSel_Level_SS
000097BC 0240 3FFF                  		andi.w	#$3FFF,d0
000097C0 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000097C4                            
000097C4                            PlayLevel:				; XREF: ROM:00003246j ...
000097C4 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000097CA                            ;		clr.b	($FFFFFF0A).w
000097CA 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000097D2 4A39 0020 0001             		tst.b	($200001).l				; number of lives in sram is 0?
000097D8 6700 0000                  		beq.w	PlayContinuelives		; if yes, branch
000097DC 11F9 0020 011F FE12        		move.b	($20011F).l,($FFFFFE12).w ; load the number of lives
000097E4 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000097EC 7000                       		moveq	#0,d0
000097EE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000097F2 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
000097F6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000097FA 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000097FE 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00009806 0C39 0000 0020 0121        		cmpi.b	#0,($200121).l
0000980E 6D00 0000                  		blt.w	PlayLevel_2
00009812 11F9 0020 0121 FE57        		move.b	($200121).l,($FFFFFE57).w ; load emeralds
0000981A                            PlayLevel_2:
0000981A 11F9 0020 0123 FE58        		move.b	($200123).l,($FFFFFE58).w ; load emeralds
00009822 11F9 0020 0125 FE59        		move.b	($200125).l,($FFFFFE59).w ; load emeralds
0000982A 11F9 0020 0127 FE5A        		move.b	($200127).l,($FFFFFE5A).w ; load emeralds
00009832 11F9 0020 0129 FE5B        		move.b	($200129).l,($FFFFFE5B).w ; load emeralds
0000983A 11F9 0020 012B FE5C        		move.b	($20012B).l,($FFFFFE5C).w ; load emeralds
00009842 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
0000984A 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000984E 21FC 0000 1388 FFC0        		move.l	#5000,($FFFFFFC0).w
00009856 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
0000985C 103C 00E1                  		move.b	#$E1,d0
00009860 6100 FAD0                  		bsr.w	Jmpto_PlaySound_Special ; fade out music
00009864 4E75                       		rts	
00009866                            
00009866                            ; ---------------------------------------------------------------------------
00009866                            ; Level	select codes
00009866                            ; ---------------------------------------------------------------------------
00009866                            LevelSelectCode_J:
00009866                            		incbin	misc\ls_jcode.bin
0000986C                            		even
0000986C                            
0000986C                            LevelSelectCode_US:
0000986C                            		incbin	misc\ls_ucode.bin
00009872                            		even
00009872                            		
00009872                            ;TitleScreen_ASCII:
00009872                            ;		dc.b $FF
00009872                            ;		dc.b "      - - - SONIC THE HEDGEHOG 4 - - -",$FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b "                  ",$FF
00009872                            ;		dc.b "                 ",$FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b "                                       ",$FF
00009872                            ;		dc.b "                                       ",$FF
00009872                            
00009872                            ;		dc.b 0
00009872                            ;		even
00009872                            		
00009872                            ; ===========================================================================
00009872                            
00009872 11FC 001C F600             PlaySpecialStage1: move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00009878 103C 009D                  		move.b	#$9D,d0
0000987C 4EB8 325C                  		jsr	PlaySound_Special ; play credits music
00009880 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00009886 4E75                       		rts	
00009888                            
00009888                            PlaySpecialStage:
00009888 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w		; Do you have all the Chaos Emeralds?
0000988E 6C00 0000                  		bge.w	SpecialStage_Cleared	; if yes, branch
00009892 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00009898 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000989C 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000098A4 11F9 0020 0001 FE12        		move.b	($200001).l,($FFFFFE12).w ; set lives
000098AC 7000                       		moveq	#0,d0
000098AE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000098B2 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
000098B6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000098BA                            ;		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000098BA 4A39 0020 0001             		tst.b	($200001).l				; number of lives in sram is 0?
000098C0 6700 0000                  		beq.w	PlayContinuelives		; if yes, branch
000098C4 11F9 0020 011F FE12        		move.b	($20011F).l,($FFFFFE12).w ; load the number of lives
000098CC 11F9 0020 012D FE56        		move.b	($20012D).l,($FFFFFE56).w ; load emeralds
000098D4 0C39 0000 0020 0121        		cmpi.b	#0,($200121).l
000098DC 6D00 0000                  		blt.w	PlaySpecialStage2
000098E0 11F9 0020 0121 FE57        		move.b	($200121).l,($FFFFFE57).w ; load emeralds
000098E8                            PlaySpecialStage2:
000098E8 11F9 0020 0123 FE58        		move.b	($200123).l,($FFFFFE58).w ; load emeralds
000098F0 11F9 0020 0125 FE59        		move.b	($200125).l,($FFFFFE59).w ; load emeralds
000098F8 11F9 0020 0127 FE5A        		move.b	($200127).l,($FFFFFE5A).w ; load emeralds
00009900 11F9 0020 0129 FE5B        		move.b	($200129).l,($FFFFFE5B).w ; load emeralds
00009908 11F9 0020 012B FE5C        		move.b	($20012B).l,($FFFFFE5C).w ; load emeralds
00009910 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
00009918 21FC 0000 1388 FFC0        		move.l	#5000,($FFFFFFC0).w
00009920 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
00009926 4E75                       		rts
00009928                            SpecialStage_Cleared:
00009928 103C 00D2                  		move.b	#$D2,d0
0000992C 6100 FA04                  		bsr.w	Jmpto_PlaySound_Special
00009930 0C38 0003 FF86             		cmpi.b	#3,(Title_screen_option).w
00009936 6600 0000                  		bne.w	SpecialStage_Cleared_3
0000993A                            SpecialStage_Cleared_2:
0000993A 4EFA FCE4                  		jmp		loc_317C
0000993E                            SpecialStage_Cleared_3:
0000993E 103C 00D2                  		move.b	#$D2,d0
00009942 6100 F9EE                  		bsr.w	Jmpto_PlaySound_Special
00009946                            	;	jmp	(loc_317C).l	; if not, branch
00009946                            
00009946                            PlayContinuelives:
00009946 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l
0000994E 13FC 0003 0020 0001        		move.b	#3,($200001).l
00009956 13F9 0020 0001 0020 011F   		move.b	($200001).l,($20011F).l
00009960 11F9 0020 011F FE12        		move.b	($20011F).l,($FFFFFE12).w ; set lives to 3
00009968 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l
00009970 4E75                       		rts	
00009972                            
00009972                            ;LoadEmeralds_2:
00009972                            ;		clr.b	($FFFFFE57).w
00009972                            ;		jmp		LSRoutine
00009972                            LoadEmeralds:
00009972 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
0000997A 0C39 0000 0020 0121        		cmpi.b	#0,($200121).l
00009982 6D00 0000                  		blt.w	LoadEmeralds2		
00009986 11F9 0020 0121 FE57        		move.b	($200121).l,($FFFFFE57).w ; load emeralds
0000998E                            LoadEmeralds2:
0000998E 11F9 0020 0123 FE58        		move.b	($200123).l,($FFFFFE58).w ; load emeralds
00009996 11F9 0020 0125 FE59        		move.b	($200125).l,($FFFFFE59).w ; load emeralds
0000999E 11F9 0020 0127 FE5A        		move.b	($200127).l,($FFFFFE5A).w ; load emeralds
000099A6 11F9 0020 0129 FE5B        		move.b	($200129).l,($FFFFFE5B).w ; load emeralds
000099AE 11F9 0020 012B FE5C        		move.b	($20012B).l,($FFFFFE5C).w ; load emeralds
000099B6                            
000099B6 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000099BE 4E75                       		rts
000099C0                            ;		tst.b	($FFFFFE57).w
000099C0                            ;		beq.w	LoadEmeralds_2
000099C0                            ;		bcc.w	LSRoutine
000099C0                            ; ===========================================================================
000099C0                            		
000099C0                            LoadLives:
000099C0 0C39 0000 0020 0001        		cmpi.b	#0,($200001).l				; number of lives in sram is more than 99?
000099C8 6D00 0000                  		blt.w	LoadLives2		; if yes, branch
000099CC 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000099D4 4A39 0020 0001             		tst.b	($200001).l				; number of lives in sram is 0?
000099DA 6700 FF6A                  		beq.w	PlayContinuelives		; if yes, branch
000099DE 11F9 0020 011F FE12        		move.b	($20011F).l,($FFFFFE12).w ; load the number of lives
000099E6 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000099EE 4E75                       		rts
000099F0                            LoadLives2:
000099F0 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; load the number of lives
000099F6 4E75                       		rts
000099F8                            LoadLivesLS:
000099F8 0C39 0000 0020 0001        		cmpi.b	#0,($200001).l				; number of lives in sram is more than 99?
00009A00 6D00 FFEE                  		blt.w	LoadLives2		; if yes, branch
00009A04 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00009A0C 6100 FFB2                  		bsr.w	LoadLives
00009A10 6000 FF60                  		bra.w	LoadEmeralds
00009A14 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
00009A1C 4E75                       		rts
00009A1E                            		
00009A1E                            
00009A1E                            
00009A1E                            ; ===========================================================================
00009A1E                            Jmpto_PlaySound2:
00009A1E 4EF8 3212                  	jmp	PlaySound
00009A22                            ; ---------------------------------------------------------------------------
00009A22                            ; Demo mode
00009A22                            ; ---------------------------------------------------------------------------
00009A22                            
00009A22                            Demo:					; XREF: TitleScreen
00009A22 31FC 001E FC20             		move.w	#$1E,($FFFFFC20).w
00009A28                            
00009A28                            loc_33B6:				; XREF: loc_33E4
00009A28 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00009A2E 6100 F342                  		bsr.w	Wait_VSync
00009A32 4EB9 0000 0000             		jsr	DeformBgLayer
00009A38 4EB8 3C46                  		jsr	PalCycle_Load
00009A3C 4EB8 3762                  		jsr	RunPLC_RAM
00009A40 3038 D008                  		move.w	($FFFFD008).w,d0
00009A44 5440                       		addq.w	#2,d0
00009A46 31C0 D008                  		move.w	d0,($FFFFD008).w
00009A4A 0C40 1C00                  		cmpi.w	#$1C00,d0
00009A4E 6500                       		bcs.s	loc_33E4
00009A50 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00009A56 4E75                       		rts	
00009A58                            ; ===========================================================================
00009A58                            
00009A58                            loc_33E4:				; XREF: Demo
00009A58 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00009A5E 6600 FBFC                  		bne.w	Title_ChkLevSel	; if yes, branch
00009A62 4A78 FC20                  		tst.w	($FFFFFC20).w
00009A66 6600 FFC0                  		bne.w	loc_33B6
00009A6A 103C 00E1                  		move.b	#$E1,d0
00009A6E 6100 F8C2                  		bsr.w	Jmpto_PlaySound_Special ; fade out music
00009A72 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00009A76 0240 0007                  		andi.w	#7,d0
00009A7A D040                       		add.w	d0,d0
00009A7C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00009A80 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00009A84 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00009A88 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00009A8E 6500                       		bcs.s	loc_3422	; if yes, branch
00009A90 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00009A96                            
00009A96                            loc_3422:
00009A96 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00009A9C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00009AA2 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00009AA6 6600                       		bne.s	Demo_Level	; if not, branch
00009AA8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00009AAE 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00009AB2 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00009AB6                            
00009AB6                            Demo_Level:
00009AB6 0C78 001C F600             		cmpi.w	#$1C,($FFFFF600).w	; is level number 0600 (special	stage)?
00009ABC 6700                       		beq.s	Demo_Level_Credits	; if not, branch
00009ABE 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00009AC4                            Demo_Level_Credits:
00009AC4 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00009ACA 7000                       		moveq	#0,d0
00009ACC 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00009AD0 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
00009AD4 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00009AD8 4E75                       		rts	
00009ADA                            ; ===========================================================================
00009ADA                            ; ---------------------------------------------------------------------------
00009ADA                            ; Levels used in demos
00009ADA                            ; ---------------------------------------------------------------------------
00009ADA                            Demo_Levels:	incbin	misc\dm_ord1.bin
00009AE2                            		even
00009AE2                            
00009AE2                            ; ---------------------------------------------------------------------------
00009AE2                            ; Subroutine to	change what you're selecting in the level select
00009AE2                            ; ---------------------------------------------------------------------------
00009AE2                            
00009AE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009AE2                            
00009AE2                            
00009AE2                            LevSelControls:				; XREF: LevelSelect
00009AE2 1238 F605                  		move.b	($FFFFF605).w,d1
00009AE6 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00009AEA 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00009AEC 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00009AF0 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00009AF2                            
00009AF2                            LevSel_UpDown:
00009AF2 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00009AF8 1238 F604                  		move.b	($FFFFF604).w,d1
00009AFC 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00009B00 6700                       		beq.s	LevSel_SndTest	; if not, branch
00009B02 3038 FFA8                  		move.w	($FFFFFFA8).w,d0
00009B06 0801 0000                  		btst	#0,d1		; is up	pressed?
00009B0A 6700                       		beq.s	LevSel_Down	; if not, branch
00009B0C 5340                       		subq.w	#1,d0		; move up 1 selection
00009B0E 6400                       		bcc.s	LevSel_Down
00009B10 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00009B12                            
00009B12                            LevSel_Down:
00009B12 0801 0001                  		btst	#1,d1		; is down pressed?
00009B16 6700                       		beq.s	LevSel_Refresh	; if not, branch
00009B18 5240                       		addq.w	#1,d0		; move down 1 selection
00009B1A 0C40 0015                  		cmpi.w	#$15,d0
00009B1E 6500                       		bcs.s	LevSel_Refresh
00009B20 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00009B22                            
00009B22                            LevSel_Refresh:
00009B22 31C0 FFA8                  		move.w	d0,($FFFFFFA8).w ; set new selection
00009B26 4EB9 0000 0000             		jsr	LevSelTextLoad	; refresh text
00009B2C 4E75                       		rts	
00009B2E                            ; ===========================================================================
00009B2E                            
00009B2E                            LevSel_SndTest:				; XREF: LevSelControls
00009B2E 0C78 0014 FFA8             		cmpi.w	#$14,($FFFFFFA8).w ; is	item $14 selected?
00009B34 6600                       		bne.s	LevSel_NoMove	; if not, branch		
00009B36 1238 F605                  		move.b	($FFFFF605).w,d1
00009B3A 0201 005C                  		andi.b	#button_right_mask|button_left_mask|button_A_mask|button_B_mask,d1		; is up/down pressed and held?
00009B3E 6600                       		bne.s	LevSel_LRAB	; if yes, branch
00009B40 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00009B44 6A00                       		bpl.s	LevSel_NoMove	; if time remains, branch
00009B46                            
00009B46                            LevSel_LRAB:
00009B46 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00009B4C 1238 F604                  		move.b	($FFFFF604).w,d1
00009B50 0201 005C                  		andi.b	#button_right_mask|button_left_mask|button_A_mask|button_B_mask,d1		; is up/down pressed?		
00009B54 6700                       		beq.s	LevSel_NoMove	; if not, branch
00009B56 3038 FF84                  		move.w	($FFFFFF84).w,d0
00009B5A 0801 0006                  		btst	#6,d1		; is A pressed?
00009B5E 6600                       		bne.s	LevSel_A	; if not, branch
00009B60 0801 0004                  		btst	#button_B,d1		; is B button pressed?
00009B64 6600                       		bne.s	LevSel_B	; if not, branch
00009B66 0801 0002                  		btst	#2,d1		; is left pressed?
00009B6A 6700                       		beq.s	LevSel_Right	; if not, branch
00009B6C 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00009B6E 6400                       		bcc.s	LevSel_Right
00009B70 303C 00FF                  		move.w	#$FF,d0		; if sound test	moves below 0, set to $FF
00009B74                            
00009B74                            LevSel_A:
00009B74 0801 0006                  		btst	#button_A,d1		; is A button pressed?
00009B78 6700                       		beq.s	LevSel_B	; if not, branch
00009B7A 0640 0010                  		add.w	#16,d0		; add $10 to sound test
00009B7E                            ;		jmp	LevSel_Right
00009B7E                            LevSel_B:
00009B7E 0801 0004                  		btst	#button_B,d1		; is B button pressed?
00009B82 6700                       		beq.s	LevSel_Right	; if not, branch
00009B84 0440 0010                  		sub.w	#16,d0		; subtract $10 from sound test
00009B88                            
00009B88                            LevSel_Right:
00009B88 0801 0003                  		btst	#3,d1		; is right pressed?
00009B8C 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00009B8E 5240                       		addq.w	#1,d0		; add 1	to sound test
00009B90                            
00009B90                            LevSel_Refresh2:
00009B90 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00009B94 4EB9 0000 0000             		jsr	LevSelTextLoad	; refresh text
00009B9A                            
00009B9A                            LevSel_NoMove:
00009B9A 4E75                       		rts	
00009B9C                            ; End of function LevSelControls
00009B9C                            
00009B9C                            ; ---------------------------------------------------------------------------
00009B9C                            ; Subroutine to load level select text
00009B9C                            ; ---------------------------------------------------------------------------
00009B9C                            
00009B9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B9C                            
00009B9C                            
00009B9C                            LevSelTextLoad:				; XREF: TitleScreen
00009B9C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00009BA2 4DF9 00C0 0000             		lea	($C00000).l,a6
00009BA8 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00009BAE 363C E680                  		move.w	#$E680,d3	; VRAM setting
00009BB2 7214                       		moveq	#$14,d1		; number of lines of text
00009BB4                            
00009BB4                            loc_34FE:				; XREF: LevSelTextLoad+26j
00009BB4 2D44 0004                  		move.l	d4,4(a6)
00009BB8 4EB9 0000 0000             		jsr	LevSel_ChgLine
00009BBE 0684 0080 0000             		addi.l	#$800000,d4
00009BC4 51C9 FFEE                  		dbf	d1,loc_34FE
00009BC8 7000                       		moveq	#0,d0
00009BCA 3038 FFA8                  		move.w	($FFFFFFA8).w,d0
00009BCE 3200                       		move.w	d0,d1
00009BD0 283C 6210 0003             		move.l	#$62100003,d4
00009BD6 EF48                       		lsl.w	#7,d0
00009BD8 4840                       		swap	d0
00009BDA D880                       		add.l	d0,d4
00009BDC 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00009BE2 E749                       		lsl.w	#3,d1
00009BE4 3001                       		move.w	d1,d0
00009BE6 D241                       		add.w	d1,d1
00009BE8 D240                       		add.w	d0,d1
00009BEA D2C1                       		adda.w	d1,a1
00009BEC 363C C680                  		move.w	#$C680,d3
00009BF0 2D44 0004                  		move.l	d4,4(a6)
00009BF4 4EB9 0000 0000             		jsr	LevSel_ChgLine
00009BFA 363C E680                  		move.w	#$E680,d3
00009BFE 0C78 0014 FFA8             		cmpi.w	#$14,($FFFFFFA8).w
00009C04 6600                       		bne.s	loc_3550
00009C06 363C C680                  		move.w	#$C680,d3
00009C0A                            
00009C0A                            loc_3550:
00009C0A 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00009C14 3038 FF84                  		move.w	($FFFFFF84).w,d0
00009C18 1400                       		move.b	d0,d2
00009C1A E808                       		lsr.b	#4,d0
00009C1C 4EB9 0000 0000             		jsr	LevSel_ChgSnd
00009C22 1002                       		move.b	d2,d0
00009C24 4EB9 0000 0000             		jsr	LevSel_ChgSnd
00009C2A 4E75                       		rts	
00009C2C                            ; End of function LevSelTextLoad
00009C2C                            
00009C2C                            
00009C2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C2C                            
00009C2C                            
00009C2C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00009C2C 0240 000F                  		andi.w	#$F,d0
00009C30 0C00 000A                  		cmpi.b	#$A,d0
00009C34 6500                       		bcs.s	loc_3580
00009C36 5800                       		addi.b	#4,d0
00009C38                            
00009C38                            loc_3580:
00009C38 D043                       		add.w	d3,d0
00009C3A 3C80                       		move.w	d0,(a6)
00009C3C 4E75                       		rts	
00009C3E                            ; End of function LevSel_ChgSnd
00009C3E                            
00009C3E                            
00009C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C3E                            
00009C3E                            
00009C3E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00009C3E 7417                       		moveq	#$17,d2		; number of characters per line
00009C40                            
00009C40                            LevSel_LineLoop:
00009C40 7000                       		moveq	#0,d0
00009C42 1019                       		move.b	(a1)+,d0
00009C44 6A00                       		bpl.s	LevSel_CharOk
00009C46 3CBC 0000                  		move.w	#0,(a6)
00009C4A 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00009C4E 4E75                       		rts	
00009C50                            ; ===========================================================================
00009C50                            
00009C50                            LevSel_CharOk:				; XREF: LevSel_ChgLine
00009C50 0C40 0040                  		cmp.w	#$40,d0    ; Check for $40 (End of ASCII number area)
00009C54 6D00                       		blt.s	@notText    ; If this is not an ASCII text character, branch
00009C56 5740                       		sub.w	#$3,d0        ; Subtract an extra 3 (Compensate for missing characters in the font)
00009C58                            @notText:
00009C58 0440 0030                  		sub.w	#$30,d0        ; Subtract #$33 (Convert to S2 font from ASCII)
00009C5C D043                       		add.w	d3,d0        ; combine char with VRAM setting
00009C5E 3C80                       		move.w	d0,(a6)        ; send to VRAM
00009C60 51CA FFDE                  		dbf	d2,LevSel_LineLoop
00009C64 4E75                               rts	
00009C66                            ; End of function LevSel_ChgLine
00009C66                            
00009C66                            ; ===========================================================================
00009C66                            ; ---------------------------------------------------------------------------
00009C66                            ; Level	select menu text
00009C66                            ; ---------------------------------------------------------------------------
00009C66                            LevelMenuText:
00009C66 5350 4C41 5348 2048 494C+  		dc.b	"SPLASH HILL ZONE   ACT 1"
00009C7E 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009C96 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009CAE 4C4F 5354 204C 4142 5952+  		dc.b	"LOST LABYRINTH     ACT 1"
00009CC6 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009CDE 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009CF6 5359 4C56 414E 4941 2043+  		dc.b	"SYLVANIA CASTLE    ACT 1"
00009D0E 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009D26 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009D3E 5748 4954 4520 5041 524B+  		dc.b	"WHITE PARK ZONE    ACT 1"
00009D56 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009D6E 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009D86 4341 5349 4E4F 2053 5452+  		dc.b	"CASINO STREET      ACT 1"
00009D9E 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009DB6 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009DCE 4D41 4420 4745 4152 205A+  		dc.b	"MAD GEAR ZONE      ACT 1"
00009DE6 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009DFE 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009E16 4547 4720 5354 4154 494F+  		dc.b	"EGG STATION             "
00009E2E 5350 4543 4941 4C20 5354+  		dc.b	"SPECIAL STAGE           "
00009E46 534F 554E 4420 5445 5354+  		dc.b	"SOUND TEST              "
00009E5E                            		even
00009E5E                            ; ---------------------------------------------------------------------------------
00009E5E                            ; Nemesis compressed art
00009E5E                            ; 10 blocks
00009E5E                            ; Player 1 2 VS Text
00009E5E                            ; ---------------------------------------------------------------------------------
00009E5E                            ; ArtNem_3DF4:
00009E5E                            Nem_TitleMenu:	incbin	artnem\titlemenu.bin	; Menu text on title screen
0000A0F8                            		even
0000A0F8                            
0000A0F8                            ; word_3E82:
0000A0F8                            CopyrightText:
0000A0F8 068B                       	dc.w  $68B	; (C)
0000A0FA 0000                       	dc.w	 0	;
0000A0FC 0682                       	dc.w  $682	; 2
0000A0FE 0680                       	dc.w  $680	; 0
0000A100 0681                       	dc.w  $681	; 1
0000A102 0684                       	dc.w  $684	; 3
0000A104 0000                       	dc.w	 0	;
0000A106 06A0                       	dc.w  $6A0	; S
0000A108 0692                       	dc.w  $692	; E
0000A10A 0694                       	dc.w  $694	; G
0000A10C 068E                       	dc.w  $68E	; A
0000A10E                            ; ---------------------------------------------------------------------------
0000A10E                            ; Music	playlist
0000A10E                            ; ---------------------------------------------------------------------------
0000A10E                            MusicList1:	incbin	misc\muslist1.bin
0000A116                            		even
0000A116                            MusicList3:	incbin	misc\muslist3.bin
0000A11E                            		even
0000A11E                            MusicList4:	incbin	misc\muslist4.bin
0000A126                            		even
0000A126                            MusicListAlt:	incbin	misc\muslistalt.bin
0000A12E                            		even
0000A12E                            ;SpecialStage_PlayList:	incbin	misc\speciallist.bin
0000A12E                            ;		even
0000A12E                            ; ===========================================================================
0000A12E                            
0000A12E                            Sound_Select:
0000A12E 103C 005B                  	move.b	#$5B,d0
0000A132 4EB9 0000 3212             	jsr	(PlaySound).l
0000A138 4E75                       	rts
0000A13A                            
0000A13A                            Sound_Select_Options:
0000A13A 13FC 005B 00A0 1C0B        	move.b	#$5B,($A01C0B).l
0000A142 4E75                       	rts
0000A144                            ; ---------------------------------------------------------------------------
0000A144                            ; Level
0000A144                            ; ---------------------------------------------------------------------------
0000A144                            
0000A144                            Level:		; XREF: GameModeArray
0000A144 08F8 0007 F600             		bset	#7,($FFFFF600).w; add $80 to screen mode (for pre level sequence)
0000A14A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A14E 6B00                       		bmi.s	loc_37B6
0000A150 103C 00E1                  		move.b	#$E1,d0
0000A154 6100 F1DC                  		bsr.w	Jmpto_PlaySound_Special; fade out music
0000A158                             
0000A158                            loc_37B6:
0000A158 4EB8 3754                  		jsr	clearplc
0000A15C 4EB8 4528                  		jsr	pal_fadefrom
0000A160 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A164 6B00                       		bmi.s	Level_ClrRam
0000A166 46FC 2700                  		disable_ints
0000A16A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000A174 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0; load title card patterns
0000A17A 4EB8 3596                  		jsr	NemDec
0000A17E 46FC 2300                  		enable_ints
0000A182 7000                       		moveq	#0,d0
0000A184 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000A188 E948                       		lsl.w	#4,d0
0000A18A                            ;		clr.b	($FFFFFF0A).w
0000A18A 4238 FF88                  		clr.b	($FFFFFF88).w
0000A18E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w; is level Act 3?
0000A194 6600                       		bne.s	CheckAct2	 ; if not, branch
0000A196 45F9 0000 0000             		lea	(MainLoadBlocks3).l,a2
0000A19C 4EF9 0000 0000             				jmp	 Level_3
0000A1A2                            CheckAct2:
0000A1A2 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w; is level Act 2?
0000A1A8 6600                       		bne.s	Level_2	 ; if not, branch
0000A1AA 45F9 0000 0000             		lea	(MainLoadBlocks2).l,a2
0000A1B0 4EF9 0000 0000             				jmp	 Level_3
0000A1B6                            Level_2:
0000A1B6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000A1BC                            Level_3:
0000A1BC 45F2 0000                  		lea	(a2,d0.w),a2
0000A1C0 7000                       		moveq	#0,d0
0000A1C2 1012                       		move.b	(a2),d0
0000A1C4 6700                       		beq.s	loc_37FC
0000A1C6 4EB8 36F6                  		jsr	LoadPLC; load level patterns
0000A1CA                            
0000A1CA                            loc_37FC:
0000A1CA 7001                       		moveq	#1,d0
0000A1CC 4EB8 36F6                  		jsr	LoadPLC		; load standard	patterns
0000A1D0                            
0000A1D0                            Level_ClrRam:	
0000A1D0 4238 FE19                  		clr.b	(Super_Sonic_flag).w; ...
0000A1D4 43F8 AC00                  		lea	(Sprite_Table_Input).w,a1
0000A1D8 7000                       		moveq	#0,d0
0000A1DA 323C 00FF                  		move.w	#$FF,d1
0000A1DE                            
0000A1DE                            loc_303A2E:					  ; ...
0000A1DE 22C0                       		move.l	d0,(a1)+
0000A1E0 51C9 FFFC                  		dbf	d1,loc_303A2E
0000A1E4 43F8 D000                  		lea	($FFFFD000).w,a1
0000A1E8 7000                       		moveq	#0,d0
0000A1EA 323C 08FF                  		move.w	#$8FF,d1
0000A1EE                            
0000A1EE                            loc_303A3E:					  ; ...
0000A1EE 22C0                       		move.l	d0,(a1)+
0000A1F0 51C9 FFFC                  		dbf	d1,loc_303A3E
0000A1F4 43F8 F628                  		lea	($FFFFF628).w,a1
0000A1F8 7000                       		moveq	#0,d0
0000A1FA 323C 0015                  		move.w	#$15,d1
0000A1FE                            
0000A1FE                            Level_ClrVars:
0000A1FE 22C0                       		move.l	d0,(a1)+
0000A200 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
0000A204                            
0000A204 43F8 F700                  		lea	($FFFFF700).w,a1
0000A208 7000                       		moveq	#0,d0
0000A20A 323C 003F                  		move.w	#$3F,d1
0000A20E                            
0000A20E                            Level_ClrVars2:
0000A20E 22C0                       		move.l	d0,(a1)+
0000A210 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000A214                            
0000A214 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000A218 7000                       		moveq	#0,d0
0000A21A 323C 0047                  		move.w	#$47,d1
0000A21E                            
0000A21E                            Level_ClrVars3:
0000A21E 22C0                       		move.l	d0,(a1)+
0000A220 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
0000A224                            
0000A224 46FC 2700                  		disable_ints
0000A228 4EB8 3084                  		jsr	ClearScreen
0000A22C 4DF9 00C0 0004             		lea	($C00004).l,a6
0000A232 3CBC 8B03                  		move.w	#$8B03,(a6)
0000A236 3CBC 8230                  		move.w	#$8230,(a6)
0000A23A 3CBC 8407                  		move.w	#$8407,(a6)
0000A23E 3CBC 857C                  		move.w	#$857C,(a6)
0000A242 3CBC 9001                  		move.w	#$9001,(a6)
0000A246 3CBC 8004                  		move.w	#$8004,(a6)
0000A24A 3CBC 8720                  		move.w	#$8720,(a6)
0000A24E 3CBC 8C81                  		move.w	#$8C81,(a6)
0000A252 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000A258 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000A25C 4278 C800                  		clr.w	($FFFFC800).w
0000A260 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
0000A268 31FC 0000 FC00             		move.w	#0,($FFFFFC00).w	; clear screen delay counter
0000A26E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000A274 6600                       		bne.s	Level_LoadPal	; if not, branch
0000A276 3CBC 8014                  		move.w	#$8014,(a6)
0000A27A 7000                       		moveq	#0,d0
0000A27C 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000A280 D040                       		add.w	d0,d0
0000A282 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000A288 3031 0000                  		move.w	(a1,d0.w),d0
0000A28C 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000A290 31C0 F648                  		move.w	d0,($FFFFF648).w
0000A294 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000A298 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
0000A29C 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000A2A0 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
0000A2A6                            
0000A2A6                            Level_LoadPal:
0000A2A6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000A2AC 46FC 2300                  		enable_ints
0000A2B0 7003                       		moveq	#3,d0
0000A2B2 4EB8 4812                  		jsr	PalLoad2	; load Sonic's pallet line
0000A2B6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ? WATERCHECK
0000A2BC 6600                       		bne.s	Level_GetBgm	; if not, branch
0000A2BE 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
0000A2C0 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
0000A2C6 6600                       		bne.s	Level_WaterPal	; if not, branch
0000A2C8 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
0000A2CA                            
0000A2CA                            Level_WaterPal:
0000A2CA 4EB8 4826                  		jsr	PalLoad3_Water	; load underwater pallet (see d0)
0000A2CE 4A38 FE30                  		tst.b	($FFFFFE30).w
0000A2D2 6700                       		beq.s	Level_GetBgm
0000A2D4 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000A2DA                            
0000A2DA                            Level_GetBgm:
0000A2DA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A2DE 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
0000A2E2 7000                       		moveq	#0,d0
0000A2E4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000A2E8                             
0000A2E8 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0000A2EE 6600                       		bne.s	Level_GetBgm2	; if not, branch
0000A2F0 43F9 0000 A10E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0000A2F6 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000A2F8                             
0000A2F8                            Level_GetBgm2:
0000A2F8 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0000A2FE 6600                       		bne.s	Level_GetBgm3	; if not, branch
0000A300 0C38 0001 FF95             		cmpi.b	#$1,(Level_Music+5).w
0000A306 6700 0000                  		beq.w	LevelBGM_ActAlt
0000A30A 43F9 0000 0000             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0000A310 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000A312                            
0000A312                            LevelBGM_ActAlt:		
0000A312 43F9 0000 A126             		lea	(MusicListAlt).l,a1	; load Music Playlist for Acts 1
0000A318 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000A31A                             
0000A31A                            Level_GetBgm3:
0000A31A 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0000A320 6600                       		bne.s	Level_GetBgm4	; if not, branch
0000A322 43F9 0000 A116             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0000A328 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000A32A                             
0000A32A                            Level_GetBgm4:
0000A32A 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0000A330 6600                       		bne.s	Level_PlayBgm	; if not, branch
0000A332 43F9 0000 A11E             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0000A338                            
0000A338                            Level_BgmNotLZ4:
0000A338 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000A33E 6600                       		bne.s	Level_PlayBgm	; if not, branch
0000A340 7006                       		moveq	#6,d0		; move 6 to d0
0000A342                            
0000A342                            Level_PlayBgm:
0000A342 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
0000A346 31C0 FF90                  		move.w	d0,(Level_Music).w	; store level music
0000A34A 6100 F6D2                  		bsr.w	Jmpto_PlaySound2	; play music
0000A34E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
0000A354                            ; loc_40DA:
0000A354                            Level_TtlCard:
0000A354                            
0000A354 11FC 000C F62A             		move.b	#$C,(Delay_Time).w
0000A35A 6100 EA16                  		bsr.w	DelayProgram
0000A35E 4EB9 0000 0000             		jsr	(ObjectsLoad).l
0000A364 4EB9 0000 0000             		jsr	(BuildSprites).l
0000A36A 6100 93F6                  		bsr.w	RunPLC_RAM
0000A36E 3038 D108                  		move.w	($FFFFD108).w,d0
0000A372 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
0000A376 66DC                       		bne.s	Level_TtlCard	; if not, branch
0000A378 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000A37C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000A37E 4EB9 0000 0000             		jsr	(Hud_Base).l
0000A384                            
0000A384                            loc_3946:
0000A384 7003                       		moveq	#3,d0
0000A386 4EB8 47FA                  		jsr	PalLoad1	; load Sonic's pallet line
0000A38A 4EB9 0000 0000             		jsr	LevelSizeLoad
0000A390 4EB9 0000 0000             		jsr	DeformBgLayer
0000A396 4278 F61A                  		clr.w	(Vscroll_Factor).w
0000A39A 31FC FF20 F61E             		move.w	#-$E0,($FFFFF61E).w
0000A3A0                            
0000A3A0 43F8 CC00                                  lea     ($FFFFCC00).w, A1
0000A3A4 7000                                       moveq   #$00, D0
0000A3A6 323C 00FF                                  move.w  #$00FF, D1
0000A3AA                            Offset_0x0040EC:
0000A3AA 22C0                                       move.l  D0, (A1)+
0000A3AC 51C9 FFFC                                  dbra    D1, Offset_0x0040EC		
0000A3B0 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000A3B6 4EB9 0000 0000             		jsr	LoadZoneTiles
0000A3BC 4EB9 0000 0000             		jsr	MainLoadBlockLoad ; load block mappings	and pallets
0000A3C2                            	;	move	#$2700,sr
0000A3C2 4EB9 0000 0000             		jsr	LoadTilesFromStart
0000A3C8                            	;	move	#$2300,sr
0000A3C8 4EB9 0000 0000             		jsr	FloorLog_Unk
0000A3CE 4EB9 0000 0000             		jsr	ColIndexLoad
0000A3D4 4EB9 0000 0000             		jsr	LZWaterEffects
0000A3DA 6100 0000                  		bsr.w	InitPlayers
0000A3DE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A3E2 6B00                       		bmi.s	Level_ChkDebug
0000A3E4 11FC 0021 D380             		move.b	#$21,($FFFFD380).w ; load HUD object
0000A3EA 31FC F400 D388             		move.w	#-$C00,($FFFFD388).w ; load Obj01 Sonic object at $FFFFD000
0000A3F0                            
0000A3F0                            Level_ChkDebug:
0000A3F0 4A38 FFD2                  		tst.b	($FFFFFFD2).w	; has debug cheat been entered?
0000A3F4 6700                       		beq.s	Level_ChkWater	; if not, branch
0000A3F6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000A3FC 6700                       		beq.s	Level_ChkWater	; if not, branch
0000A3FE 11FC 0001 FFDA             		move.b	#1,($FFFFFFDA).w ; enable debug	mode
0000A404                            
0000A404                            Level_ChkWater:
0000A404 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000A40A 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000A410 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000A416 6600                       		bne.s	Level_LoadObj	; if not, branch
0000A418 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000A41E 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000A424 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
0000A42A 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000A430                            
0000A430                            Level_LoadObj:
0000A430 4EB9 0000 0000             		jsr	ObjPosLoad
0000A436                            ;		jsr	RingsManager
0000A436 4EB9 0000 0000             		jsr	ObjectsLoad
0000A43C 4EB9 0000 0000             		jsr	BuildSprites
0000A442 7000                       		moveq	#0,d0
0000A444 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000A448 6600                       		bne.s	loc_39E8	; if yes, branch
0000A44A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000A44E 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
0000A452                            ;	if HUDCentiseconds=1	;Mercury HUD Centiseconds
0000A452                            ;		move.b	d0,(v_centstep).w
0000A452                            ;	endc	;end HUD Centiseconds
0000A452 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w ; clear lives counter
0000A458                            
0000A458                            loc_39E8:
0000A458 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
0000A45C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
0000A460 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
0000A464 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000A468 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000A46C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000A470 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000A474 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000A478 4EB9 0000 0000             		jsr	OscillateNumInit
0000A47E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000A484 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000A48A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000A490 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000A496 7000                       		moveq	#0,d0
0000A498 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000A49C E548                       		lsl.w	#2,d0
0000A49E 2271 0000                  		movea.l	(a1,d0.w),a1
0000A4A2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000A4A6 6A00                       		bpl.s	Level_Demo	; if yes, branch
0000A4A8 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
0000A4AE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000A4B2 5340                       		subq.w	#1,d0
0000A4B4 E548                       		lsl.w	#2,d0
0000A4B6 2271 0000                  		movea.l	(a1,d0.w),a1
0000A4BA                            
0000A4BA                            Level_Demo:
0000A4BA 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
0000A4C0 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
0000A4C4 31FC 0708 FC20             		move.w	#1800,($FFFFFC20).w
0000A4CA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A4CE 6A00                       		bpl.s	Level_ChkWaterPal
0000A4D0 31FC 021C FC20             		move.w	#540,($FFFFFC20).w
0000A4D6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
0000A4DC 6600                       		bne.s	Level_ChkWaterPal
0000A4DE 31FC 01FE FC20             		move.w	#510,($FFFFFC20).w
0000A4E4                            
0000A4E4                            Level_ChkWaterPal:
0000A4E4 0C38 0001 FE19             		cmpi.b	#1,($FFFFFE19).w ; is level LZ/SBZ3?
0000A4EA 6700                       		beq.s	Level_ChkWaterPal_Super	; if not, branch
0000A4EC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
0000A4F2 6600                       		bne.s	Level_Delay	; if not, branch
0000A4F4 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
0000A4F6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
0000A4FC 6600                       		bne.s	Level_WaterPal2	; if not, branch
0000A4FE 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
0000A500                            Level_ChkWaterPal_Super:		
0000A500 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
0000A506 6600                       		bne.s	Level_Delay	; if not, branch
0000A508 701F                       		moveq	#$1F,d0		; pallet $0B (LZ underwater)
0000A50A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
0000A510 6600                       		bne.s	Level_WaterPal2	; if not, branch
0000A512 701F                       		moveq	#$1F,d0		; pallet $0D (SBZ3 underwater)
0000A514                            
0000A514                            Level_WaterPal2:
0000A514 4EB8 483E                  		jsr	PalLoad4_Water
0000A518                            
0000A518                            Level_Delay:
0000A518 323C 0003                  		move.w	#3,d1
0000A51C                            
0000A51C                            Level_DelayLoop:
0000A51C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000A522 6100 E84E                  		bsr.w	Wait_VSync
0000A526 51C9 FFF4                  		dbf	d1,Level_DelayLoop
0000A52A                            
0000A52A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000A530 4EB8 4474                  		jsr	Pal_FadeTo2
0000A534 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A538 6B00                       		bmi.s	Level_ClrCardArt
0000A53A 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
0000A53E 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000A542 5838 D124                  		addq.b	#4,($FFFFD124).w
0000A546 5838 D164                  		addq.b	#4,($FFFFD164).w
0000A54A                            		
0000A54A 6000                       		bra.s	Level_StartGame
0000A54C                            ; ===========================================================================
0000A54C                            
0000A54C                            Level_ClrCardArt:
0000A54C 7002                       		moveq	#2,d0
0000A54E 4EB9 0000 36F6             		jsr	(LoadPLC).l	; load explosion patterns
0000A554 4EB9 0000 36BE             		jsr	(LoadAnimalPLC).l ; load animal patterns
0000A55A 11FC 0001 FF7B             		move.b	#1,($FFFFFF7B).w
0000A560                            Level_StartGame:
0000A560 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
0000A566 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
0000A56C                            	;	move.b   #1,($FFFFFE1E).w   ; update time counter
0000A56C                            
0000A56C                            ; ---------------------------------------------------------------------------
0000A56C                            ; Main level loop (when	all title card and loading sequences are finished)
0000A56C                            ; ---------------------------------------------------------------------------
0000A56C                            
0000A56C                            Level_MainLoop:
0000A56C 4EB8 3310                  		jsr	PauseGame
0000A570 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000A576 6100 E7FA                  		bsr.w	Wait_VSync
0000A57A 5278 FE04                  		addq.w	#1,($FFFFFE04).w	; add 1 to level timer
0000A57E 4EB9 0000 0000             		jsr	MoveSonicInDemo
0000A584 4EB9 0000 0000             		jsr	LZWaterEffects
0000A58A 4EB9 0000 0000             		jsr	ObjectsLoad
0000A590                            ;		tst.w	($FFFFFFCC).w
0000A590                            ;		bne.w	Level_MainLoop2
0000A590                            ;		movem	a0-a3,-(sp)
0000A590                            ;		jsr	RingsManager
0000A590                            ;		movem	(sp)+,a0-a3
0000A590                            ;Level_MainLoop2:
0000A590 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
0000A594 6600 FBAE                  		bne.w	Level		; if yes, branch
0000A598 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A59C 6600                       		bne.s	loc_3B10
0000A59E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w	; is Sonic dying?
0000A5A4 6400                       		bcc.s	loc_3B14		; if yes, branch
0000A5A6                            
0000A5A6                            loc_3B10:
0000A5A6 4EB9 0000 0000             		jsr	DeformBgLayer
0000A5AC                            
0000A5AC                            loc_3B14:
0000A5AC 4EB9 0000 0000             		jsr	BuildSprites
0000A5B2 4EB9 0000 0000             		jsr	ObjPosLoad
0000A5B8 4EB8 3C46                  		jsr	PalCycle_Load
0000A5BC 4EB8 3762                  		jsr	RunPLC_RAM
0000A5C0 4EB9 0000 0000             		jsr	OscillateNumDo
0000A5C6 4EB9 0000 0000             		jsr	ChangeRingFrame
0000A5CC 4EB9 0000 0000             		jsr	SignpostArtLoad
0000A5D2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000A5D8 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000A5DA 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000A5E0 6700 FF8A                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
0000A5E4 4E75                       		rts			; quit
0000A5E6                            ; ===========================================================================
0000A5E6                            
0000A5E6                            Level_ChkDemo:				; XREF: Level_MainLoop
0000A5E6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000A5EA 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000A5EC 4A78 FC20                  		tst.w	($FFFFFC20).w	; is there time	left on	the demo?
0000A5F0 6700                       		beq.s	Level_EndDemo	; if not, branch
0000A5F2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000A5F8 6700 FF72                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
0000A5FC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000A602 4E75                       		rts	
0000A604                            ; ===========================================================================
0000A604                            
0000A604                            Level_EndDemo:				; XREF: Level_ChkDemo
0000A604 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
0000A60A 6600                       		bne.s	loc_3B88	; if not, branch
0000A60C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000A612 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000A616 6A00                       		bpl.s	loc_3B88	; if yes, branch
0000A618 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000A61E                            
0000A61E                            loc_3B88:
0000A61E 31FC 003C FC20             		move.w	#$3C,($FFFFFC20).w
0000A624 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000A62A 4278 F794                  		clr.w	($FFFFF794).w
0000A62E                            
0000A62E                            loc_3B98:
0000A62E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000A634 6100 E73C                  		bsr.w	Wait_VSync
0000A638 4EB9 0000 0000             		jsr	MoveSonicInDemo
0000A63E 4EB9 0000 0000             		jsr	ObjectsLoad
0000A644 4EB9 0000 0000             		jsr	BuildSprites
0000A64A 4EB9 0000 0000             		jsr	ObjPosLoad
0000A650 5378 F794                  		subq.w	#1,($FFFFF794).w
0000A654 6A00                       		bpl.s	loc_3BC8
0000A656 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000A65C 4EB8 4550                  		jsr	Pal_FadeOut
0000A660                            
0000A660                            loc_3BC8:
0000A660 4A78 FC20                  		tst.w	($FFFFFC20).w
0000A664 66C8                       		bne.s	loc_3B98
0000A666 4E75                       		rts	
0000A668                            
0000A668                            ; ===========================================================================
0000A668                            ; ---------------------------------------------------------------------------
0000A668                            ; Custom Subroutine to make dynamic events happen on a per level basis.
0000A668                            ; ---------------------------------------------------------------------------
0000A668                            DE_PreReturn:                                                               
0000A668 4E75                               rts
0000A66A                            
0000A66A                            DynamicEvents:                            ; Main controller depending on zone
0000A66A 0C38 0001 FFC6                     cmpi.b  #1,(sonickilled).w  ; Is sonic dead?
0000A670 6700 FFF6                          beq.w   DE_PreReturn        ; if so, stop all events.
0000A674                            
0000A674 7000                               moveq   #0,d0
0000A676 1038 FE10                          move.b  ($FFFFFE10).w,d0
0000A67A D040                               add.w   d0,d0
0000A67C 303B 0000                          move.w  DynEvents_Index(pc,d0.w),d0
0000A680 4EFB 0000                          jmp     DynEvents_Index(pc,d0.w)
0000A684                            
0000A684                            DynEvents_Index:
0000A684 0000                               dc.w DynEvents_GHZ-DynEvents_Index
0000A686 0000                               dc.w DynEvents_LZ-DynEvents_Index
0000A688 0000                               dc.w DynEvents_MZ-DynEvents_Index
0000A68A 0000                               dc.w DynEvents_SLZ-DynEvents_Index
0000A68C 0000                               dc.w DynEvents_SYZ-DynEvents_Index
0000A68E 0000                               dc.w DynEvents_SBZ-DynEvents_Index
0000A690                            
0000A690                            DE_PalLoad:                             ; Pallet loading routine.
0000A690 34D9                               move.w  (a1)+,(a2)+
0000A692 51C8 FFFC                          dbf     d0,DE_PalLoad
0000A696 4E75                               rts
0000A698                            
0000A698                            DynEvents_GHZ:
0000A698 7000                                       moveq   #0,d0
0000A69A 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A69E D040                                       add.w   d0,d0
0000A6A0 303B 0000                                  move.w  EventsGHZ_Index(pc,d0.w),d0
0000A6A4 4EFB 0000                                  jmp     EventsGHZ_Index(pc,d0.w)
0000A6A8                            
0000A6A8 0000                       EventsGHZ_Index: dc.w DynamicEvents_GHZ1-EventsGHZ_Index
0000A6AA 0000                                       dc.w DynamicEvents_GHZ2-EventsGHZ_Index
0000A6AC 0000                                       dc.w DynamicEvents_GHZ3-EventsGHZ_Index
0000A6AE                            
0000A6AE                            ;====================================================================
0000A6AE                            
0000A6AE                            DynEvents_LZ:
0000A6AE 7000                                       moveq   #0,d0
0000A6B0 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A6B4 D040                                       add.w   d0,d0
0000A6B6 303B 0000                                  move.w  EventsLZ_Index(pc,d0.w),d0
0000A6BA 4EFB 0000                                  jmp     EventsLZ_Index(pc,d0.w)
0000A6BE                            
0000A6BE 0000                       EventsLZ_Index: dc.w DynamicEvents_LZ1-EventsLZ_Index
0000A6C0 0000                                       dc.w DynamicEvents_LZ2-EventsLZ_Index
0000A6C2 0000                                       dc.w DynamicEvents_LZ3-EventsLZ_Index 
0000A6C4                            
0000A6C4                            ;====================================================================
0000A6C4                            
0000A6C4                            DynEvents_MZ:
0000A6C4 7000                                       moveq   #0,d0
0000A6C6 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A6CA D040                                       add.w   d0,d0
0000A6CC 303B 0000                                  move.w  EventsMZ_Index(pc,d0.w),d0
0000A6D0 4EFB 0000                                  jmp     EventsMZ_Index(pc,d0.w)
0000A6D4                            
0000A6D4 0000                       EventsMZ_Index: dc.w DynamicEvents_MZ1-EventsMZ_Index
0000A6D6 0000                                       dc.w DynamicEvents_MZ2-EventsMZ_Index
0000A6D8 0000                                       dc.w DynamicEvents_MZ3-EventsMZ_Index 
0000A6DA                            
0000A6DA                            ;====================================================================
0000A6DA                            
0000A6DA                            DynEvents_SLZ:
0000A6DA 7000                                       moveq   #0,d0
0000A6DC 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A6E0 D040                                       add.w   d0,d0
0000A6E2 303B 0000                                  move.w  EventsSLZ_Index(pc,d0.w),d0
0000A6E6 4EFB 0000                                  jmp     EventsSLZ_Index(pc,d0.w)
0000A6EA                            
0000A6EA 0000                       EventsSLZ_Index:        dc.w DynamicEvents_SLZ1-EventsSLZ_Index
0000A6EC 0000                                       dc.w DynamicEvents_SLZ2-EventsSLZ_Index
0000A6EE 0000                                       dc.w DynamicEvents_SLZ3-EventsSLZ_Index 
0000A6F0                            
0000A6F0                            ;====================================================================
0000A6F0                            
0000A6F0                            DynEvents_SYZ:
0000A6F0 7000                                       moveq   #0,d0
0000A6F2 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A6F6 D040                                       add.w   d0,d0
0000A6F8 303B 0000                                  move.w  EventsSYZ_Index(pc,d0.w),d0
0000A6FC 4EFB 0000                                  jmp     EventsSYZ_Index(pc,d0.w)
0000A700                            
0000A700 0000                       EventsSYZ_Index:        dc.w DynamicEvents_SYZ1-EventsSYZ_Index
0000A702 0000                                       dc.w DynamicEvents_SYZ2-EventsSYZ_Index
0000A704 0000                                       dc.w DynamicEvents_SYZ3-EventsSYZ_Index 
0000A706                            
0000A706                            ;====================================================================
0000A706                            
0000A706                            DynEvents_SBZ:
0000A706 7000                                       moveq   #0,d0
0000A708 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A70C D040                                       add.w   d0,d0
0000A70E 303B 0000                                  move.w  EventsSBZ_Index(pc,d0.w),d0
0000A712 4EFB 0000                                  jmp     EventsSBZ_Index(pc,d0.w)
0000A716                            
0000A716 0000                       EventsSBZ_Index:        dc.w DynamicEvents_SBZ1-EventsSBZ_Index
0000A718 0000                                       dc.w DynamicEvents_SBZ2-EventsSBZ_Index
0000A71A 0000                                       dc.w DynamicEvents_SBZ3-EventsSBZ_Index 
0000A71C                            
0000A71C                            ;====================================================================
0000A71C                            ; Dynamic Events on a zone basis:
0000A71C                            ;====================================================================
0000A71C                            
0000A71C                            DynamicEvents_GHZ1:
0000A71C 4E75                               rts
0000A71E                                            
0000A71E                            ; --------------------------------------------------------------------
0000A71E                            
0000A71E                            DynamicEvents_GHZ2:
0000A71E 4E75                               rts
0000A720                            
0000A720                            ; --------------------------------------------------------------------
0000A720                            
0000A720                            DynamicEvents_GHZ3:
0000A720 4E75                               rts
0000A722                                            
0000A722                            ; ====================================================================
0000A722                            
0000A722                            DynamicEvents_MZ1:
0000A722 4E75                               rts
0000A724                            
0000A724                            ; --------------------------------------------------------------------
0000A724                            
0000A724                            DynamicEvents_MZ2:
0000A724 4E75                               rts
0000A726                            
0000A726                            ; --------------------------------------------------------------------
0000A726                            
0000A726                            DynamicEvents_MZ3:
0000A726 4E75                               rts
0000A728                                            
0000A728                            ; ====================================================================
0000A728                            
0000A728                            DynamicEvents_SYZ1:
0000A728 4E75                               rts
0000A72A                            
0000A72A                            ; --------------------------------------------------------------------
0000A72A                            
0000A72A                            DynamicEvents_SYZ2:
0000A72A 4E75                               rts
0000A72C                            
0000A72C                            ; --------------------------------------------------------------------
0000A72C                            
0000A72C                            DynamicEvents_SYZ3:
0000A72C 4E75                               rts
0000A72E                                            
0000A72E                            ; ====================================================================
0000A72E                            
0000A72E                            DynamicEvents_LZ1:
0000A72E 4E75                               rts
0000A730                            
0000A730                            ; --------------------------------------------------------------------
0000A730                            
0000A730                            DynamicEvents_LZ2:
0000A730 4E75                               rts
0000A732                            
0000A732                            ; --------------------------------------------------------------------
0000A732                            
0000A732                            DynamicEvents_LZ3:
0000A732 4E75                               rts
0000A734                                            
0000A734                            ; ====================================================================
0000A734                            
0000A734                            DynamicEvents_SLZ1:
0000A734 4E75                               rts
0000A736                            
0000A736                            ; --------------------------------------------------------------------
0000A736                            
0000A736                            DynamicEvents_SLZ2:
0000A736 4E75                               rts
0000A738                            
0000A738                            ; --------------------------------------------------------------------
0000A738                            
0000A738                            DynamicEvents_SLZ3:
0000A738 4E75                               rts
0000A73A                                            
0000A73A                            ; ====================================================================
0000A73A                            
0000A73A                            DynamicEvents_SBZ1:
0000A73A 4E75                               rts
0000A73C                            
0000A73C                            ; --------------------------------------------------------------------
0000A73C                            
0000A73C                            DynamicEvents_SBZ2:
0000A73C 4E75                               rts
0000A73E                            
0000A73E                            ; --------------------------------------------------------------------
0000A73E                            
0000A73E                            DynamicEvents_SBZ3:
0000A73E 4E75                               rts
0000A740                                            
0000A740                            ; ====================================================================
0000A740                            
0000A740                            ; End of subroutine DynamicEvents
0000A740                            
0000A740                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000A740                            
0000A740                            ; sub_446E:
0000A740                            InitPlayers:
0000A740 3038 FF74                  	move.w	($FFFFFF74).w,d0
0000A744 6600                       	bne.s	InitPlayers_Alone ; branch if this isn't a Sonic and Tails game
0000A746 11FC 0001 D000             	move.b	#1,(MainCharacter).w ; load Obj01 Sonic object at $FFFFD000
0000A74C 11FC 0005 D1C0             	move.b	#5,($FFFFD1C0).w
0000A752                            ;	move.b	#8,($FFFFD100).w ; load Obj08 Sonic's spindash dust/splash object at $FFFFD100
0000A752                            	;cmpi.b	#0,(Current_Zone).w
0000A752                            	;beq.s	return_44BC ; skip loading Tails if this is SHZ
0000A752                            	;cmpi.b	#6,(Current_Zone).w
0000A752                            	;beq.s	return_44BC ; skip loading Tails if this is WFZ
0000A752                            	;cmpi.b	#$E,(Current_Zone).w
0000A752                            	;beq.s	return_44BC ; skip loading Tails if this is DEZ
0000A752                            ;	cmpi.b	#$10,(Current_Zone).w
0000A752                            ;	beq.s	return_44BC ; skip loading Tails if this is SCZ
0000A752                            
0000A752                            ;	move.b	#2,(Sidekick).w ; load Obj02 Tails object at $FFFFB040
0000A752                            ;	move.w  #Tails_Tails,(Tails_Tails_ptr).w
0000A752                            ;	move.w	(MainCharacter+x_pos).w,(Sidekick+x_pos).w
0000A752                            ;	move.w	(MainCharacter+y_pos).w,(Sidekick+y_pos).w
0000A752                            ;	subi.w	#$20,(Sidekick+x_pos).w
0000A752                            ;	addi.w	#4,(Sidekick+y_pos).w
0000A752                            ;	move.b	#8,(Tails_Dust).w ; load Obj08 Tails' spindash dust/splash object at $FFFFD140
0000A752                            
0000A752                            return_44BC:
0000A752 4E75                       	rts
0000A754                            ; ===========================================================================
0000A754                            ; loc_44BE:
0000A754                            InitPlayers_Alone: ; either Sonic or Tails but not both
0000A754 5340                       	subq.w	#1,d0
0000A756 6600                       	bne.s	InitPlayers_TailsAlone ; branch if this is a Tails alone game
0000A758                            
0000A758 11FC 0001 D000             	move.b	#1,(MainCharacter).w ; load Obj01 Sonic object at $FFFFB000
0000A75E                            ;	move.b	#8,($FFFFD100).w ; load Obj08 Sonic's spindash dust/splash object at $FFFFD100
0000A75E                            	;cmpi.b	#0,(Current_Zone).w
0000A75E                            	;beq.s	return_44BC ; skip loading Tails if this is SHZ
0000A75E                            	;cmpi.b	#6,(Current_Zone).w
0000A75E                            	;beq.s	return_44BC ; skip loading Tails if this is WFZ
0000A75E                            	;cmpi.b	#$E,(Current_Zone).w
0000A75E                            	;beq.s	return_44BC ; skip loading Tails if this is DEZ
0000A75E                            ;	cmpi.b	#$10,(Current_Zone).w
0000A75E                            ;	beq.s	return_44BC ; skip loading Tails if this is SCZ
0000A75E                            
0000A75E                            ;	move.b	#2,(Sidekick).w ; load Obj02 Tails object at $FFFFB040
0000A75E                            ;	move.w  #Tails_Tails,(Tails_Tails_ptr).w
0000A75E                            ;	move.w	(MainCharacter+x_pos).w,(Sidekick+x_pos).w
0000A75E                            ;	move.w	(MainCharacter+y_pos).w,(Sidekick+y_pos).w
0000A75E                            ;	subi.w	#$20,(Sidekick+x_pos).w
0000A75E                            ;	addi.w	#4,(Sidekick+y_pos).w
0000A75E                            ;	move.b	#8,(Tails_Dust).w ; load Obj08 Tails' spindash dust/splash object at $FFFFD140
0000A75E                            ;	rts
0000A75E                            ; ===========================================================================
0000A75E                            ; loc_44D0:
0000A75E                            InitPlayers_TailsAlone:
0000A75E 3038 FF76                  	move.w	(Player_option).w,d0
0000A762 0C00 0003                  	cmpi.b #3,d0
0000A766 6700 0000                  	beq.w	InitPlayers_MetalAlone
0000A76A                            ;	move.b	#2,(MainCharacter).w ; load Obj02 Tails object at $FFFFB000
0000A76A                            ;	move.w  #Tails_Tails,(Tails_Tails_ptr).w
0000A76A                            ;	move.b	#8,(Tails_Dust).w ; load Obj08 Tails' spindash dust/splash object at $FFFFD100
0000A76A                            ;	addi.w	#4,(MainCharacter+y_pos).w
0000A76A                            ;	clr.b	(Super_Sonic_flag).w
0000A76A                            ;	rts
0000A76A                            
0000A76A                            InitPlayers_MetalAlone:
0000A76A                            ;	move.b	#$4E,(MainCharacter).w
0000A76A                            ;	move.w	(Player_option).w,d0
0000A76A                            ;	move.w	d0,(Player_Mode).w
0000A76A                            ;	move.b	#8,($FFFFD100).w
0000A76A                            ;	move.b	#$01,($FFFFFFE0).w
0000A76A 4E75                       	rts
0000A76C                            ; End of function InitPlayers
0000A76C                            
0000A76C                            
0000A76C                            ; ---------------------------------------------------------------------------
0000A76C                            ; Subroutine to	do special water effects in Labyrinth Zone
0000A76C                            ; ---------------------------------------------------------------------------
0000A76C                            
0000A76C                            LZWaterEffects:				; XREF: Level
0000A76C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000A772 6600                       		bne.s	locret_3C28	; if not, branch
0000A774 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A77A 6400                       		bcc.s	LZMoveWater
0000A77C 4EB9 0000 0000             		jsr	LZWindTunnels
0000A782 4EB9 0000 0000             		jsr	LZWaterSlides
0000A788 4EB9 0000 0000             		jsr	LZDynamicWater
0000A78E                            
0000A78E                            LZMoveWater:
0000A78E 4238 F64E                  		clr.b	($FFFFF64E).w
0000A792 7000                       		moveq	#0,d0
0000A794 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000A798 E248                       		lsr.w	#1,d0
0000A79A D078 F648                  		add.w	($FFFFF648).w,d0
0000A79E 31C0 F646                  		move.w	d0,($FFFFF646).w
0000A7A2 3038 F646                  		move.w	($FFFFF646).w,d0
0000A7A6 9078 F704                  		sub.w	($FFFFF704).w,d0
0000A7AA 6400                       		bcc.s	loc_3C1A
0000A7AC 4A40                       		tst.w	d0
0000A7AE 6A00                       		bpl.s	loc_3C1A
0000A7B0 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000A7B6 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000A7BC                            
0000A7BC                            loc_3C1A:
0000A7BC 0C40 00DF                  		cmpi.w	#$DF,d0
0000A7C0 6500                       		bcs.s	loc_3C24
0000A7C2 303C 00DF                  		move.w	#$DF,d0
0000A7C6                            
0000A7C6                            loc_3C24:
0000A7C6 11C0 F625                  		move.b	d0,($FFFFF625).w
0000A7CA                            
0000A7CA                            locret_3C28:
0000A7CA 4E75                       		rts	
0000A7CC                            ; ===========================================================================
0000A7CC                            ; ---------------------------------------------------------------------------
0000A7CC                            ; Labyrinth default water heights
0000A7CC                            ; ---------------------------------------------------------------------------
0000A7CC                            WaterHeight:	incbin	misc\lz_heigh.bin
0000A7D4                            		even
0000A7D4                            ; ===========================================================================
0000A7D4                            
0000A7D4                            ; ---------------------------------------------------------------------------
0000A7D4                            ; Labyrinth dynamic water routines
0000A7D4                            ; ---------------------------------------------------------------------------
0000A7D4                            
0000A7D4                            LZDynamicWater:				; XREF: LZWaterEffects
0000A7D4 7000                       		moveq	#0,d0
0000A7D6 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000A7DA D040                       		add.w	d0,d0
0000A7DC 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
0000A7E0 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
0000A7E4 7200                       		moveq	#0,d1
0000A7E6 1238 F64C                  		move.b	($FFFFF64C).w,d1
0000A7EA 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000A7EE 9078 F648                  		sub.w	($FFFFF648).w,d0
0000A7F2 6700                       		beq.s	locret_3C5A
0000A7F4 6400                       		bcc.s	loc_3C56
0000A7F6 4441                       		neg.w	d1
0000A7F8                            
0000A7F8                            loc_3C56:
0000A7F8 D378 F648                  		add.w	d1,($FFFFF648).w
0000A7FC                            
0000A7FC                            locret_3C5A:
0000A7FC 4E75                       		rts	
0000A7FE                            ; ===========================================================================
0000A7FE 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
0000A800 0000                       		dc.w DynWater_LZ2-DynWater_Index
0000A802 0000                       		dc.w DynWater_LZ3-DynWater_Index
0000A804 0000                       		dc.w DynWater_SBZ3-DynWater_Index
0000A806                            ; ===========================================================================
0000A806                            
0000A806                            DynWater_LZ1:				; XREF: DynWater_Index
0000A806 3038 F700                  		move.w	($FFFFF700).w,d0
0000A80A 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000A80E 6600                       		bne.s	loc_3CD0
0000A810 323C 00B8                  		move.w	#$B8,d1
0000A814 0C40 0600                  		cmpi.w	#$600,d0
0000A818 6500                       		bcs.s	loc_3CB4
0000A81A 323C 0108                  		move.w	#$108,d1
0000A81E 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
0000A824 6500                       		bcs.s	loc_3CBA
0000A826 0C40 0C00                  		cmpi.w	#$C00,d0
0000A82A 6500                       		bcs.s	loc_3CB4
0000A82C 323C 0318                  		move.w	#$318,d1
0000A830 0C40 1080                  		cmpi.w	#$1080,d0
0000A834 6500                       		bcs.s	loc_3CB4
0000A836 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000A83C 323C 05C8                  		move.w	#$5C8,d1
0000A840 0C40 1380                  		cmpi.w	#$1380,d0
0000A844 6500                       		bcs.s	loc_3CB4
0000A846 323C 03A8                  		move.w	#$3A8,d1
0000A84A B278 F648                  		cmp.w	($FFFFF648).w,d1
0000A84E 6600                       		bne.s	loc_3CB4
0000A850 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000A856                            
0000A856                            loc_3CB4:
0000A856 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A85A 4E75                       		rts	
0000A85C                            ; ===========================================================================
0000A85C                            
0000A85C                            loc_3CBA:				; XREF: DynWater_LZ1
0000A85C 0C40 0C80                  		cmpi.w	#$C80,d0
0000A860 65F4                       		bcs.s	loc_3CB4
0000A862 323C 00E8                  		move.w	#$E8,d1
0000A866 0C40 1500                  		cmpi.w	#$1500,d0
0000A86A 65EA                       		bcs.s	loc_3CB4
0000A86C 323C 0108                  		move.w	#$108,d1
0000A870 60E4                       		bra.s	loc_3CB4
0000A872                            ; ===========================================================================
0000A872                            
0000A872                            loc_3CD0:				; XREF: DynWater_LZ1
0000A872 5302                       		subq.b	#1,d2
0000A874 6600                       		bne.s	locret_3CF4
0000A876 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000A87C 6400                       		bcc.s	locret_3CF4
0000A87E 323C 03A8                  		move.w	#$3A8,d1
0000A882 0C40 1300                  		cmpi.w	#$1300,d0
0000A886 6500                       		bcs.s	loc_3CF0
0000A888 323C 0108                  		move.w	#$108,d1
0000A88C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000A892                            
0000A892                            loc_3CF0:
0000A892 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A896                            
0000A896                            locret_3CF4:
0000A896 4E75                       		rts	
0000A898                            ; ===========================================================================
0000A898                            
0000A898                            DynWater_LZ2:				; XREF: DynWater_Index
0000A898 3038 F700                  		move.w	($FFFFF700).w,d0
0000A89C 323C 0328                  		move.w	#$328,d1
0000A8A0 0C40 0500                  		cmpi.w	#$500,d0
0000A8A4 6500                       		bcs.s	loc_3D12
0000A8A6 323C 03C8                  		move.w	#$3C8,d1
0000A8AA 0C40 0B00                  		cmpi.w	#$B00,d0
0000A8AE 6500                       		bcs.s	loc_3D12
0000A8B0 323C 0428                  		move.w	#$428,d1
0000A8B4                            
0000A8B4                            loc_3D12:
0000A8B4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A8B8 4E75                       		rts	
0000A8BA                            ; ===========================================================================
0000A8BA                            
0000A8BA                            DynWater_LZ3:				; XREF: DynWater_Index
0000A8BA 3038 F700                  		move.w	($FFFFF700).w,d0
0000A8BE 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000A8C2 6600                       		bne.s	loc_3D5E
0000A8C4 323C 0900                  		move.w	#$900,d1
0000A8C8 0C40 0600                  		cmpi.w	#$600,d0
0000A8CC 6500                       		bcs.s	loc_3D54
0000A8CE 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000A8D4 6500                       		bcs.s	loc_3D54
0000A8D6 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000A8DC 6400                       		bcc.s	loc_3D54
0000A8DE 323C 04C8                  		move.w	#$4C8,d1
0000A8E2 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
0000A8E8 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000A8EE 303C 00B7                  		move.w	#$B7,d0
0000A8F2 6100 EA3E                  		bsr.w	Jmpto_PlaySound_Special ; play sound $B7 (rumbling)
0000A8F6                            
0000A8F6                            loc_3D54:
0000A8F6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A8FA 31C1 F648                  		move.w	d1,($FFFFF648).w
0000A8FE 4E75                       		rts	
0000A900                            ; ===========================================================================
0000A900                            
0000A900                            loc_3D5E:				; XREF: DynWater_LZ3
0000A900 5302                       		subq.b	#1,d2
0000A902 6600                       		bne.s	loc_3DA8
0000A904 323C 04C8                  		move.w	#$4C8,d1
0000A908 0C40 0770                  		cmpi.w	#$770,d0
0000A90C 6500                       		bcs.s	loc_3DA2
0000A90E 323C 0308                  		move.w	#$308,d1
0000A912 0C40 1400                  		cmpi.w	#$1400,d0
0000A916 6500                       		bcs.s	loc_3DA2
0000A918 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
0000A91E 6700                       		beq.s	loc_3D8E
0000A920 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000A926 6400                       		bcc.s	loc_3D8E
0000A928 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
0000A92E 6400                       		bcc.s	loc_3DA2
0000A930                            
0000A930                            loc_3D8E:
0000A930 323C 0508                  		move.w	#$508,d1
0000A934 31C1 F648                  		move.w	d1,($FFFFF648).w
0000A938 0C40 1770                  		cmpi.w	#$1770,d0
0000A93C 6500                       		bcs.s	loc_3DA2
0000A93E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000A944                            
0000A944                            loc_3DA2:
0000A944 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A948 4E75                       		rts	
0000A94A                            ; ===========================================================================
0000A94A                            
0000A94A                            loc_3DA8:
0000A94A 5302                       		subq.b	#1,d2
0000A94C 6600                       		bne.s	loc_3DD2
0000A94E 323C 0508                  		move.w	#$508,d1
0000A952 0C40 1860                  		cmpi.w	#$1860,d0
0000A956 6500                       		bcs.s	loc_3DCC
0000A958 323C 0188                  		move.w	#$188,d1
0000A95C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000A960 6400                       		bcc.s	loc_3DC6
0000A962 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000A966 6600                       		bne.s	loc_3DCC
0000A968                            
0000A968                            loc_3DC6:
0000A968 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000A96E                            
0000A96E                            loc_3DCC:
0000A96E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A972 4E75                       		rts	
0000A974                            ; ===========================================================================
0000A974                            
0000A974                            loc_3DD2:
0000A974 5302                       		subq.b	#1,d2
0000A976 6600                       		bne.s	loc_3E0E
0000A978 323C 0188                  		move.w	#$188,d1
0000A97C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000A980 6500                       		bcs.s	loc_3E04
0000A982 323C 0900                  		move.w	#$900,d1
0000A986 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000A98A 6500                       		bcs.s	loc_3E04
0000A98C 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000A992 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000A998 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000A99E 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000A9A4 4E75                       		rts	
0000A9A6                            ; ===========================================================================
0000A9A6                            
0000A9A6                            loc_3E04:
0000A9A6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A9AA 31C1 F648                  		move.w	d1,($FFFFF648).w
0000A9AE 4E75                       		rts	
0000A9B0                            ; ===========================================================================
0000A9B0                            
0000A9B0                            loc_3E0E:
0000A9B0 0C40 1E00                  		cmpi.w	#$1E00,d0
0000A9B4 6500                       		bcs.s	locret_3E1A
0000A9B6 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000A9BC                            
0000A9BC                            locret_3E1A:
0000A9BC 4E75                       		rts	
0000A9BE                            ; ===========================================================================
0000A9BE                            
0000A9BE                            DynWater_SBZ3:				; XREF: DynWater_Index
0000A9BE 323C 0228                  		move.w	#$228,d1
0000A9C2 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
0000A9C8 6500                       		bcs.s	loc_3E2C
0000A9CA 323C 04C8                  		move.w	#$4C8,d1
0000A9CE                            
0000A9CE                            loc_3E2C:
0000A9CE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A9D2 4E75                       		rts
0000A9D4                            
0000A9D4                            ; ---------------------------------------------------------------------------
0000A9D4                            ; Labyrinth Zone "wind tunnels"	subroutine
0000A9D4                            ; ---------------------------------------------------------------------------
0000A9D4                            
0000A9D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A9D4                            
0000A9D4                            
0000A9D4                            LZWindTunnels:				; XREF: LZWaterEffects
0000A9D4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000A9D8 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000A9DC 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000A9E2 7000                       		moveq	#0,d0
0000A9E4 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000A9E8 E748                       		lsl.w	#3,d0
0000A9EA D4C0                       		adda.w	d0,a2
0000A9EC 7200                       		moveq	#0,d1
0000A9EE 4A38 FE11                  		tst.b	($FFFFFE11).w
0000A9F2 6600                       		bne.s	loc_3E56
0000A9F4 7201                       		moveq	#1,d1
0000A9F6 514A                       		subq.w	#8,a2
0000A9F8                            
0000A9F8                            loc_3E56:
0000A9F8 43F8 D000                  		lea	($FFFFD000).w,a1
0000A9FC                            
0000A9FC                            LZWind_Loop:
0000A9FC 3029 0008                  		move.w	8(a1),d0
0000AA00 B052                       		cmp.w	(a2),d0
0000AA02 6500 0000                  		bcs.w	loc_3EF4
0000AA06 B06A 0004                  		cmp.w	4(a2),d0
0000AA0A 6400 0000                  		bcc.w	loc_3EF4
0000AA0E 3429 000C                  		move.w	$C(a1),d2
0000AA12 B46A 0002                  		cmp.w	2(a2),d2
0000AA16 6500                       		bcs.s	loc_3EF4
0000AA18 B46A 0006                  		cmp.w	6(a2),d2
0000AA1C 6400                       		bcc.s	loc_3EF4
0000AA1E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000AA22 0200 003F                  		andi.b	#$3F,d0
0000AA26 6600                       		bne.s	loc_3E90
0000AA28 303C 00D0                  		move.w	#$D0,d0
0000AA2C 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play rushing water sound
0000AA32                            
0000AA32                            loc_3E90:
0000AA32 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000AA36 6600 0000                  		bne.w	locret_3F0A
0000AA3A 0C29 0004 0024             		cmpi.b	#4,routine(a1)
0000AA40 6400                       		bcc.s	loc_3F06
0000AA42 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000AA48 0440 0080                  		subi.w	#$80,d0
0000AA4C B052                       		cmp.w	(a2),d0
0000AA4E 6400                       		bcc.s	LZWind_Move
0000AA50 7002                       		moveq	#2,d0
0000AA52 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000AA58 6600                       		bne.s	loc_3EBA
0000AA5A 4440                       		neg.w	d0
0000AA5C                            
0000AA5C                            loc_3EBA:
0000AA5C D169 000C                  		add.w	d0,$C(a1)
0000AA60                            
0000AA60                            LZWind_Move:
0000AA60 5869 0008                  		addq.w	#4,8(a1)
0000AA64 337C 0400 0010             		move.w	#$400,x_vel(a1)	; move Sonic horizontally
0000AA6A 337C 0000 0012             		move.w	#0,y_vel(a1)
0000AA70 137C 000F 001C             		move.b	#$F,anim(a1)	; use floating animation
0000AA76 08E9 0001 0022             		bset	#1,status(a1)
0000AA7C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000AA82 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000AA84 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000AA88                            
0000AA88                            LZWind_MoveDown:
0000AA88 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000AA8E 6700                       		beq.s	locret_3EF2	; if not, branch
0000AA90 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000AA94                            
0000AA94                            locret_3EF2:
0000AA94 4E75                       		rts	
0000AA96                            ; ===========================================================================
0000AA96                            
0000AA96                            loc_3EF4:				; XREF: LZWindTunnels
0000AA96 504A                       		addq.w	#8,a2
0000AA98 51C9 FF62                  		dbf	d1,LZWind_Loop
0000AA9C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000AAA0 6700                       		beq.s	locret_3F0A
0000AAA2 137C 0000 001C             		move.b	#0,anim(a1)
0000AAA8                            
0000AAA8                            loc_3F06:
0000AAA8 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000AAAC                            
0000AAAC                            locret_3F0A:
0000AAAC 4E75                       		rts	
0000AAAE                            ; End of function LZWindTunnels
0000AAAE                            
0000AAAE                            ; ===========================================================================
0000AAAE 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000AAB6 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000AAC8 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
0000AAD6                            					; XREF: LZWindTunnels
0000AAD6                            		even
0000AAD6                            
0000AAD6                            ; ---------------------------------------------------------------------------
0000AAD6                            ; Labyrinth Zone water slide subroutine
0000AAD6                            ; ---------------------------------------------------------------------------
0000AAD6                            
0000AAD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AAD6                            
0000AAD6                            
0000AAD6                            LZWaterSlides:				; XREF: LZWaterEffects
0000AAD6 43F8 D000                  		lea	($FFFFD000).w,a1
0000AADA 0829 0001 0022             		btst	#1,$22(a1)
0000AAE0 6600                       		bne.s	loc_3F6A
0000AAE2 3029 000C                  		move.w	$0C(a1),d0				; MJ: Load Y position
0000AAE6 3229 0008                  		move.w	$08(a1),d1				; MJ: Load X position
0000AAEA 0240 0780                  		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
0000AAEE E348                       		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
0000AAF0 EE49                       		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
0000AAF2 0201 007F                  		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
0000AAF6 D041                       		add.w	d1,d0					; MJ: add together
0000AAF8 2478 A400                  		movea.l	($FFFFA400).w,a2			; MJ: Load address of layout
0000AAFC 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: collect correct chunk ID based on the position of Sonic
0000AB00 45FA 0000                  		lea	Slide_002(pc),a2
0000AB04 7214                       		moveq	#$14,d1					; MJ: repeat times
0000AB06                            
0000AB06                            loc_3F62:
0000AB06 B01A                       		cmp.b	(a2)+,d0
0000AB08 57C9 FFFC                  		dbeq	d1,loc_3F62
0000AB0C 6700                       		beq.s	LZSlide_Move
0000AB0E                            
0000AB0E                            loc_3F6A:
0000AB0E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0000AB12 6700                       		beq.s	locret_3F7A
0000AB14 337C 0005 003E             		move.w	#5,$3E(a1)
0000AB1A 4238 F7CA                  		clr.b	($FFFFF7CA).w
0000AB1E                            
0000AB1E                            locret_3F7A:
0000AB1E 4E75                       		rts	
0000AB20                            ; ===========================================================================
0000AB20                            
0000AB20                            LZSlide_Move:				; XREF: LZWaterSlides
0000AB20 0C41 0003                  		cmpi.w	#3,d1
0000AB24 6400                       		bcc.s	loc_3F84
0000AB26 4E71                       		nop	
0000AB28                            
0000AB28                            loc_3F84:
0000AB28 08A9 0000 0022             		bclr	#0,$22(a1)
0000AB2E 103B 1000                  		move.b	Slide_001(pc,d1.w),d0
0000AB32 1340 0020                  		move.b	d0,inertia(a1)
0000AB36 6A00                       		bpl.s	loc_3F9A
0000AB38 08E9 0000 0022             		bset	#0,$22(a1)
0000AB3E                            
0000AB3E                            loc_3F9A:
0000AB3E 4229 0015                  		clr.b	$15(a1)
0000AB42 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000AB48 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
0000AB4E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000AB52 0200 001F                  		andi.b	#$1F,d0
0000AB56 6600                       		bne.s	locret_3FBE
0000AB58 303C 00D0                  		move.w	#$D0,d0
0000AB5C 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play water sound
0000AB62                            
0000AB62                            locret_3FBE:
0000AB62 4E75                       		rts	
0000AB64                            ; End of function LZWaterSlides
0000AB64                            
0000AB64                            ; ===========================================================================
0000AB64 F5                         Slide_001:	dc.b		    $F5
0000AB65 F4F4 F4F4                  		dc.b	$F4,$F4,$F4,$F4
0000AB69 F5F5 F5F5                  		dc.b	$F5,$F5,$F5,$F5
0000AB6D 0B0B 0B0B                  		dc.b	$0B,$0B,$0B,$0B
0000AB71 F6F6 F6F6                  		dc.b	$F6,$F6,$F6,$F6
0000AB75 0A0A 0A0A                  		dc.b	$0A,$0A,$0A,$0A				; MJ: Values for speed, format XX00 = Speed in $14(a-)
0000AB79 00                         		align 2
0000AB7A 0506 090A                  Slide_002:	dc.b	$05,$06,$09,$0A				; MJ: Chunks to read (128x128 ID's)
0000AB7E FAFB FCFD                  		dc.b	$FA,$FB,$FC,$FD
0000AB82 0B0C 0D0E                  		dc.b	$0B,$0C,$0D,$0E
0000AB86 1516 F8F9                  		dc.b	$15,$16,$F8,$F9
0000AB8A 191A 1B1C                  		dc.b	$19,$1A,$1B,$1C
0000AB8E 17                         		dc.b	$17
0000AB8F 00                         		align 2
0000AB90                            
0000AB90                            ; ---------------------------------------------------------------------------
0000AB90                            ; Subroutine to	move Sonic in demo mode
0000AB90                            ; ---------------------------------------------------------------------------
0000AB90                            
0000AB90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB90                            
0000AB90                            
0000AB90                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000AB90 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000AB94 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000AB96 4E75                       		rts	
0000AB98                            ; ===========================================================================
0000AB98                            
0000AB98                            ; This is an unused subroutine for recording a demo
0000AB98                            
0000AB98                            MoveDemo_Record:
0000AB98 43F9 0008 0000             		lea	($80000).l,a1
0000AB9E 3038 F790                  		move.w	($FFFFF790).w,d0
0000ABA2 D2C0                       		adda.w	d0,a1
0000ABA4 1038 F604                  		move.b	($FFFFF604).w,d0
0000ABA8 B011                       		cmp.b	(a1),d0
0000ABAA 6600                       		bne.s	loc_3FFA
0000ABAC 5229 0001                  		addq.b	#1,1(a1)
0000ABB0 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000ABB6 6700                       		beq.s	loc_3FFA
0000ABB8 4E75                       		rts	
0000ABBA                            ; ===========================================================================
0000ABBA                            
0000ABBA                            loc_3FFA:				; XREF: MoveDemo_Record
0000ABBA 1340 0002                  		move.b	d0,2(a1)
0000ABBE 137C 0000 0003             		move.b	#0,3(a1)
0000ABC4 5478 F790                  		addq.w	#2,($FFFFF790).w
0000ABC8 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000ABCE 4E75                       		rts	
0000ABD0                            ; ===========================================================================
0000ABD0                            
0000ABD0                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000ABD0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w
0000ABD6 4A38 F604                  		tst.b	($FFFFF604).w
0000ABDA 6A00                       		bpl.s	loc_4022
0000ABDC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000ABE0 6B00                       		bmi.s	loc_4022
0000ABE2 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000ABE8                            
0000ABE8                            loc_4022:
0000ABE8 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000ABEE 7000                       		moveq	#0,d0
0000ABF0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000ABF4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000ABFA 6600                       		bne.s	loc_4038
0000ABFC 7006                       		moveq	#6,d0
0000ABFE                            
0000ABFE                            loc_4038:
0000ABFE E548                       		lsl.w	#2,d0
0000AC00 2271 0000                  		movea.l	(a1,d0.w),a1
0000AC04 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000AC08 6A00                       		bpl.s	loc_4056
0000AC0A 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000AC10 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000AC14 5340                       		subq.w	#1,d0
0000AC16 E548                       		lsl.w	#2,d0
0000AC18 2271 0000                  		movea.l	(a1,d0.w),a1
0000AC1C                            
0000AC1C                            loc_4056:
0000AC1C 3038 F790                  		move.w	($FFFFF790).w,d0
0000AC20 D2C0                       		adda.w	d0,a1
0000AC22 1011                       		move.b	(a1),d0
0000AC24 41F8 F604                  		lea	($FFFFF604).w,a0
0000AC28 1200                       		move.b	d0,d1
0000AC2A 1428 FFFE                  		move.b	-2(a0),d2
0000AC2E B500                       		eor.b	d2,d0
0000AC30 10C1                       		move.b	d1,(a0)+
0000AC32 C001                       		and.b	d1,d0
0000AC34 10C0                       		move.b	d0,(a0)+
0000AC36 5338 F792                  		subq.b	#1,($FFFFF792).w
0000AC3A 6400                       		bcc.s	locret_407E
0000AC3C 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000AC42 5478 F790                  		addq.w	#2,($FFFFF790).w
0000AC46                            
0000AC46                            locret_407E:
0000AC46 4E75                       		rts	
0000AC48                            ; End of function MoveSonicInDemo
0000AC48                            
0000AC48                            ; ===========================================================================
0000AC48                            ; ---------------------------------------------------------------------------
0000AC48                            ; Demo sequence	pointers
0000AC48                            ; ---------------------------------------------------------------------------
0000AC48                            Demo_Index:
0000AC48                            	include "_inc\Demo pointers for intro.asm"
0000AC48                            ; ---------------------------------------------------------------------------
0000AC48                            ; Demo sequence	pointers
0000AC48                            ; ---------------------------------------------------------------------------
0000AC48 0000 0000                  	dc.l Demo_GHZ
0000AC4C 0000 0000                  	dc.l Demo_GHZ
0000AC50 0000 0000                  	dc.l Demo_MZ
0000AC54 0000 0000                  	dc.l Demo_MZ
0000AC58 0000 0000                  	dc.l Demo_SYZ
0000AC5C 0000 0000                  	dc.l Demo_SYZ
0000AC60 0000 0000                  	dc.l Demo_SS
0000AC64 0000 0000                  	dc.l Demo_SS
0000AC64 0000 0000                  	dc.l Demo_SS
0000AC68                            
0000AC68                            Demo_EndIndex:
0000AC68                            	include "_inc\Demo pointers for ending.asm"
0000AC68                            ; ---------------------------------------------------------------------------
0000AC68                            ; Demo (ending) sequence pointers
0000AC68                            ; ---------------------------------------------------------------------------
0000AC68 0000 0000                  	dc.l Demo_EndGHZ1
0000AC6C 0000 0000                  	dc.l Demo_EndMZ
0000AC70 0000 0000                  	dc.l Demo_EndSYZ
0000AC74 0000 0000                  	dc.l Demo_EndLZ
0000AC78 0000 0000                  	dc.l Demo_EndSLZ
0000AC7C 0000 0000                  	dc.l Demo_EndSBZ1
0000AC80 0000 0000                  	dc.l Demo_EndSBZ2
0000AC84 0000 0000                  	dc.l Demo_EndGHZ2
0000AC84 0000 0000                  	dc.l Demo_EndGHZ2
0000AC88                            
0000AC88 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000AC98 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000ACA8 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000ACB8                            		even
0000ACB8                            
0000ACB8                            ; ---------------------------------------------------------------------------
0000ACB8                            ; Collision index loading subroutine
0000ACB8                            ; ---------------------------------------------------------------------------
0000ACB8                            
0000ACB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACB8                            
0000ACB8                            
0000ACB8                            ColIndexLoad:				; XREF: Level
0000ACB8 7000                       		moveq	#0,d0
0000ACBA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000ACBE E748                       		lsl.w	#$03,d0					; MJ: multiply by 8 not 4
0000ACC0 21FB 0000 FFE2             		move.l	ColPointers(pc,d0.w),($FFFFFFE2).w	; MJ: get first collision set
0000ACC6 5840                       		add.w	#$04,d0					; MJ: increase to next location
0000ACC8 21FB 0000 FFE6             		move.l	ColPointers(pc,d0.w),($FFFFFFE6).w	; MJ: get second collision set
0000ACCE 4E75                       		rts	
0000ACD0                            ; End of function ColIndexLoad
0000ACD0                            
0000ACD0                            ; ===========================================================================
0000ACD0                            ; ---------------------------------------------------------------------------
0000ACD0                            ; Collision index pointers for Act 1
0000ACD0                            ; ---------------------------------------------------------------------------
0000ACD0                            ColPointers:
0000ACD0                            	include "_inc\Collision index pointers.asm"
0000ACD0                            ; ---------------------------------------------------------------------------
0000ACD0                            ; Collision index pointers
0000ACD0                            ; ---------------------------------------------------------------------------
0000ACD0 0000 0000                  	dc.l Col_GHZ_1
0000ACD4 0000 0000                  	dc.l Col_GHZ_2
0000ACD8 0000 0000                  	dc.l Col_LZ_1
0000ACDC 0000 0000                  	dc.l Col_LZ_2
0000ACE0 0000 0000                  	dc.l Col_MZ_1
0000ACE4 0000 0000                  	dc.l Col_MZ_2
0000ACE8 0000 0000                  	dc.l Col_SLZ_1
0000ACEC 0000 0000                  	dc.l Col_SLZ_2
0000ACF0 0000 0000                  	dc.l Col_SYZ_1
0000ACF4 0000 0000                  	dc.l Col_SYZ_2
0000ACF8 0000 0000                  	dc.l Col_SBZ_1
0000ACFC 0000 0000                  	dc.l Col_SBZ_2
0000AD00 0000 0000                  	dc.l Col_ABZ_1
0000AD04 0000 0000                  	dc.l Col_ABZ_2
0000AD04 0000 0000                  	dc.l Col_ABZ_2
0000AD08                             
0000AD08                            ; ---------------------------------------------------------------------------
0000AD08                            ; Oscillating number subroutine
0000AD08                            ; ---------------------------------------------------------------------------
0000AD08                            
0000AD08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD08                            
0000AD08                            
0000AD08                            OscillateNumInit:			; XREF: Level
0000AD08 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000AD0C 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000AD12 7220                       		moveq	#$20,d1
0000AD14                            
0000AD14                            Osc_Loop:
0000AD14 32DA                       		move.w	(a2)+,(a1)+
0000AD16 51C9 FFFC                  		dbf	d1,Osc_Loop
0000AD1A 4E75                       		rts	
0000AD1C                            ; End of function OscillateNumInit
0000AD1C                            
0000AD1C                            ; ===========================================================================
0000AD1C 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000AD20 0000 0080                  		dc.w 0,	$80
0000AD24 0000 0080                  		dc.w 0,	$80
0000AD28 0000 0080                  		dc.w 0,	$80
0000AD2C 0000 0080                  		dc.w 0,	$80
0000AD30 0000 0080                  		dc.w 0,	$80
0000AD34 0000 0080                  		dc.w 0,	$80
0000AD38 0000 0080                  		dc.w 0,	$80
0000AD3C 0000 0080                  		dc.w 0,	$80
0000AD40 0000 50F0                  		dc.w 0,	$50F0
0000AD44 011E 2080                  		dc.w $11E, $2080
0000AD48 00B4 3080                  		dc.w $B4, $3080
0000AD4C 010E 5080                  		dc.w $10E, $5080
0000AD50 01C2 7080                  		dc.w $1C2, $7080
0000AD54 0276 0080                  		dc.w $276, $80
0000AD58 0000 0080                  		dc.w 0,	$80
0000AD5C 0000                       		dc.w 0
0000AD5E                            		even
0000AD5E                            
0000AD5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD5E                            
0000AD5E                            
0000AD5E                            OscillateNumDo:				; XREF: Level
0000AD5E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AD64 6400                       		bcc.s	locret_41C4
0000AD66 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000AD6A 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000AD70 3619                       		move.w	(a1)+,d3
0000AD72 720F                       		moveq	#$F,d1
0000AD74                            
0000AD74                            loc_4184:
0000AD74 341A                       		move.w	(a2)+,d2
0000AD76 381A                       		move.w	(a2)+,d4
0000AD78 0303                       		btst	d1,d3
0000AD7A 6600                       		bne.s	loc_41A4
0000AD7C 3029 0002                  		move.w	2(a1),d0
0000AD80 D042                       		add.w	d2,d0
0000AD82 3340 0002                  		move.w	d0,2(a1)
0000AD86 D151                       		add.w	d0,0(a1)
0000AD88 B811                       		cmp.b	0(a1),d4
0000AD8A 6200                       		bhi.s	loc_41BA
0000AD8C 03C3                       		bset	d1,d3
0000AD8E 6000                       		bra.s	loc_41BA
0000AD90                            ; ===========================================================================
0000AD90                            
0000AD90                            loc_41A4:				; XREF: OscillateNumDo
0000AD90 3029 0002                  		move.w	2(a1),d0
0000AD94 9042                       		sub.w	d2,d0
0000AD96 3340 0002                  		move.w	d0,2(a1)
0000AD9A D151                       		add.w	d0,0(a1)
0000AD9C B811                       		cmp.b	0(a1),d4
0000AD9E 6300                       		bls.s	loc_41BA
0000ADA0 0383                       		bclr	d1,d3
0000ADA2                            
0000ADA2                            loc_41BA:
0000ADA2 5849                       		addq.w	#4,a1
0000ADA4 51C9 FFCE                  		dbf	d1,loc_4184
0000ADA8 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000ADAC                            
0000ADAC                            locret_41C4:
0000ADAC 4E75                       		rts	
0000ADAE                            ; End of function OscillateNumDo
0000ADAE                            
0000ADAE                            ; ===========================================================================
0000ADAE 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000ADB2 0002 0018                  		dc.w 2,	$18
0000ADB6 0002 0020                  		dc.w 2,	$20
0000ADBA 0002 0030                  		dc.w 2,	$30
0000ADBE 0004 0020                  		dc.w 4,	$20
0000ADC2 0008 0008                  		dc.w 8,	8
0000ADC6 0008 0040                  		dc.w 8,	$40
0000ADCA 0004 0040                  		dc.w 4,	$40
0000ADCE 0002 0050                  		dc.w 2,	$50
0000ADD2 0002 0050                  		dc.w 2,	$50
0000ADD6 0002 0020                  		dc.w 2,	$20
0000ADDA 0003 0030                  		dc.w 3,	$30
0000ADDE 0005 0050                  		dc.w 5,	$50
0000ADE2 0007 0070                  		dc.w 7,	$70
0000ADE6 0002 0010                  		dc.w 2,	$10
0000ADEA 0002 0010                  		dc.w 2,	$10
0000ADEE                            		even
0000ADEE                            
0000ADEE                            
0000ADEE                            ; ---------------------------------------------------------------------------
0000ADEE                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000ADEE                            ; ---------------------------------------------------------------------------
0000ADEE                            
0000ADEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADEE                            
0000ADEE                            
0000ADEE                            ChangeRingFrame:			; XREF: Level
0000ADEE 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000ADF2 6A00                       		bpl.s	loc_421C
0000ADF4 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000ADFA 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000ADFE 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000AE04                            
0000AE04                            loc_421C:
0000AE04 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000AE08 6A00                       		bpl.s	loc_4232
0000AE0A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000AE10 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0000AE14 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000AE1A                            
0000AE1A                            loc_4232:
0000AE1A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000AE1E 6A00                       		bpl.s	loc_4250
0000AE20 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000AE26 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000AE2A 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000AE30 6500                       		bcs.s	loc_4250
0000AE32 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000AE38                            
0000AE38                            loc_4250:
0000AE38 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000AE3C 6700                       		beq.s	locret_4272
0000AE3E 7000                       		moveq	#0,d0
0000AE40 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
0000AE44 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000AE48 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000AE4C EF58                       		rol.w	#7,d0
0000AE4E 0240 0003                  		andi.w	#3,d0
0000AE52 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
0000AE56 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000AE5A                            
0000AE5A                            locret_4272:
0000AE5A 4E75                       		rts	
0000AE5C                            ; End of function ChangeRingFrame
0000AE5C                            
0000AE5C                            ; ---------------------------------------------------------------------------
0000AE5C                            ; End-of-act signpost pattern loading subroutine
0000AE5C                            ; ---------------------------------------------------------------------------
0000AE5C                            
0000AE5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE5C                            
0000AE5C                            
0000AE5C                            SignpostArtLoad:			; XREF: Level
0000AE5C 4A78 FE08                  		tst.w	($FFFFFE08).w		; is debug mode	being used?
0000AE60 6600 0000                  		bne.w	Signpost_Exit		; if yes, branch
0000AE64 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w	; is act number 02 (act 3)?
0000AE6A 6700                       		beq.s	Signpost_Exit		; if yes, branch
0000AE6C 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
0000AE74 4EB9 0000 0000             		jsr	Save_Progress
0000AE7A 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
0000AE82 3038 F700                  		move.w	($FFFFF700).w,d0
0000AE86 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000AE8A 0441 0100                  		subi.w	#$100,d1
0000AE8E B041                       		cmp.w	d1,d0				; has Sonic reached the	edge of	the level?
0000AE90 6D00                       		blt.s	Signpost_Exit		; if not, branch
0000AE92 4A38 FE1E                  		tst.b	($FFFFFE1E).w		; check if the time counter is stopped
0000AE96 6700                       		beq.s	Signpost_Exit		; if yes, branch
0000AE98 B278 F728                  		cmp.w	($FFFFF728).w,d1
0000AE9C 6700                       		beq.s	Signpost_Exit
0000AE9E 31C1 F728                  		move.w	d1,($FFFFF728).w	; move	left boundary to current screen	position
0000AEA2 7012                       		moveq	#$12,d0
0000AEA4 4EF8 3728                  		jmp	LoadPLC2	; load signpost	patterns
0000AEA8                            ; ===========================================================================
0000AEA8                            
0000AEA8                            Signpost_Exit:
0000AEA8 4E75                       		rts	
0000AEAA                            ; End of function SignpostArtLoad
0000AEAA                            
0000AEAA                            ; ===========================================================================
0000AEAA                            Demo_GHZ:	incbin	demodata\i_ghz.bin
0000AF2A                            Demo_MZ:	incbin	demodata\i_mz.bin
0000B05A                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000B0DA                            Demo_SS:	incbin	demodata\i_ss.bin
0000B1DA                            ; ===========================================================================
0000B1DA                            
0000B1DA                            ; ---------------------------------------------------------------------------
0000B1DA                            ; Special Stage
0000B1DA                            ; ---------------------------------------------------------------------------
0000B1DA                            
0000B1DA                            SpecialStage:				; XREF: GameModeArray
0000B1DA 303C 00AF                  		move.w	#$AF,d0
0000B1DE 6100 E152                  		bsr.w	Jmpto_PlaySound_Special ; play special stage entry sound
0000B1E2                            
0000B1E2 4EB8 4678                  		jsr	Pal_MakeFlash
0000B1E6 46FC 2700                  		disable_ints
0000B1EA 4DF9 00C0 0004             		lea	($C00004).l,a6
0000B1F0 3CBC 8B03                  		move.w	#$8B03,(a6)
0000B1F4 3CBC 8004                  		move.w	#$8004,(a6)
0000B1F8 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
0000B1FE 3CBC 9011                  		move.w	#$9011,(a6)
0000B202 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000B206 0200 00BF                  		andi.b	#$BF,d0
0000B20A 33C0 00C0 0004             		move.w	d0,($C00004).l
0000B210 4EB8 3084                  		jsr	ClearScreen
0000B214 46FC 2300                  		enable_ints
0000B218 4BF9 00C0 0004             		lea	($C00004).l,a5
0000B21E 3ABC 8F01                  		move.w	#$8F01,(a5)
0000B222 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000B228 3ABC 9780                  		move.w	#$9780,(a5)
0000B22C 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000B232 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000B23A                            
0000B23A                            loc_463C:
0000B23A 3215                       		move.w	(a5),d1
0000B23C 0801 0001                  		btst	#1,d1
0000B240 66F8                       		bne.s	loc_463C
0000B242 3ABC 8F02                  		move.w	#$8F02,(a5)
0000B246 4EB9 0000 0000             		jsr	SS_BGLoad
0000B24C 7014                       		moveq	#$14,d0
0000B24E 4EB8 386C                  		jsr	RunPLC_ROM	; load special stage patterns
0000B252 43F8 D000                  		lea	($FFFFD000).w,a1
0000B256 7000                       		moveq	#0,d0
0000B258 323C 07FF                  		move.w	#$7FF,d1
0000B25C                            
0000B25C                            SS_ClrObjRam:
0000B25C 22C0                       		move.l	d0,(a1)+
0000B25E 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000B262                            
0000B262 43F8 F700                  		lea	($FFFFF700).w,a1
0000B266 7000                       		moveq	#0,d0
0000B268 323C 003F                  		move.w	#$3F,d1
0000B26C                            
0000B26C                            SS_ClrRam:
0000B26C 22C0                       		move.l	d0,(a1)+
0000B26E 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
0000B272                            
0000B272 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000B276 7000                       		moveq	#0,d0
0000B278 323C 0027                  		move.w	#$27,d1
0000B27C                            
0000B27C                            SS_ClrRam2:
0000B27C 22C0                       		move.l	d0,(a1)+
0000B27E 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000B282                            
0000B282 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000B286 7000                       		moveq	#0,d0
0000B288 323C 007F                  		move.w	#$7F,d1
0000B28C                            
0000B28C                            SS_ClrNemRam:
0000B28C 22C0                       		move.l	d0,(a1)+
0000B28E 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000B292                            
0000B292 4238 F64E                  		clr.b	($FFFFF64E).w
0000B296 4278 FE02                  		clr.w	($FFFFFE02).w
0000B29A 700A                       		moveq	#$A,d0
0000B29C 4EB8 47FA                  		jsr	PalLoad1	; load special stage pallet
0000B2A0 4EB9 0000 0000             		jsr	SS_Load
0000B2A6 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
0000B2AE 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
0000B2B6 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
0000B2BC 11FC 00FF F784             		move.b	#$FF,(v_ssangleprev).w	; fill previous angle with obviously false value to force an update
0000B2C2 6100 0000                  		bsr.w	PalCycle_SS
0000B2C6 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
0000B2CA 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
0000B2D0 303C 0015                  		move.w	#$15,d0
0000B2D4 4EB8 3212                  		jsr	PlaySound	; play special stage BG	music
0000B2D8 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000B2DE 43F9 0000 AC48             		lea	(Demo_Index).l,a1
0000B2E4 7006                       		moveq	#6,d0
0000B2E6 E548                       		lsl.w	#2,d0
0000B2E8 2271 0000                  		movea.l	(a1,d0.w),a1
0000B2EC 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
0000B2F2 5338 F792                  		subq.b	#1,($FFFFF792).w
0000B2F6 4278 FE20                  		clr.w	($FFFFFE20).w
0000B2FA 4238 FE1B                  		clr.b	($FFFFFE1B).w
0000B2FE 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
0000B304 31FC 0708 FC20             		move.w	#1800,($FFFFFC20).w
0000B30A 4A38 FFD2                  		tst.b	($FFFFFFD2).w	; has debug cheat been entered?
0000B30E 6700                       		beq.s	SS_NoDebug	; if not, branch
0000B310 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000B316 6700                       		beq.s	SS_NoDebug	; if not, branch
0000B318 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000B31E                            
0000B31E                            SS_NoDebug:
0000B31E 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000B322 0000 0040                  		ori.b	#$40,d0
0000B326 33C0 00C0 0004             		move.w	d0,($C00004).l
0000B32C 4EB8 45AC                  		jsr	Pal_MakeWhite
0000B330                            
0000B330                            ; ---------------------------------------------------------------------------
0000B330                            ; Main Special Stage loop
0000B330                            ; ---------------------------------------------------------------------------
0000B330                            
0000B330                            SS_MainLoop:
0000B330 4EB8 3310                  		jsr	PauseGame
0000B334 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000B33A 6100 DA36                  		bsr.w	DelayProgram
0000B33E 6100 F850                  		bsr.w	MoveSonicInDemo
0000B342 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000B348 4EB9 0000 0000             		jsr	ObjectsLoad
0000B34E 4EB9 0000 0000             		jsr	BuildSprites
0000B354 11FC 0021 D380             		move.b	#$21,($FFFFD380).w
0000B35A 4EB9 0000 0000             		jsr	SS_ShowLayout
0000B360 6100 0000                  		bsr.w	SS_BGAnimate
0000B364 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000B368 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000B36A 4A78 FC20                  		tst.w	($FFFFFC20).w	; is there time	left on	the demo?
0000B36E 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000B372                            
0000B372                            SS_ChkEnd:
0000B372 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
0000B378 6700 FFB6                  		beq.w	SS_MainLoop	; if yes, branch
0000B37C                            
0000B37C                            ;		tst.w	($FFFFFFF0).w	; is demo mode on?
0000B37C                            ;		bne.w	SS_ToSegaScreen	; if yes, branch
0000B37C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000B382 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000B388 6500                       		bcs.s	SS_End		; if not, branch
0000B38A 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
0000B38E                            
0000B38E                            SS_End:
0000B38E 31FC 003C FC20             		move.w	#60,($FFFFFC20).w ; set	delay time to 1	second
0000B394 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000B39A 4278 F794                  		clr.w	($FFFFF794).w
0000B39E                            
0000B39E                            SS_EndLoop:
0000B39E 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000B3A4 6100 D9CC                  		bsr.w	DelayProgram
0000B3A8 6100 F7E6                  		bsr.w	MoveSonicInDemo
0000B3AC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000B3B2 4EB9 0000 0000             		jsr	ObjectsLoad
0000B3B8 4EB9 0000 0000             		jsr	BuildSprites
0000B3BE 4EB9 0000 0000             		jsr	SS_ShowLayout
0000B3C4 6100 0000                  		bsr.w	SS_BGAnimate
0000B3C8 5378 F794                  		subq.w	#1,($FFFFF794).w
0000B3CC 6A00                       		bpl.s	loc_47D4
0000B3CE 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000B3D4 4EB8 469A                  		jsr	Pal_ToWhite
0000B3D8                            
0000B3D8                            loc_47D4:
0000B3D8 4A78 FC20                  		tst.w	($FFFFFC20).w
0000B3DC 66C0                       		bne.s	SS_EndLoop
0000B3DE                            
0000B3DE 46FC 2700                  		move	#$2700,sr
0000B3E2 4DF9 00C0 0004             		lea	($C00004).l,a6
0000B3E8 3CBC 8230                  		move.w	#$8230,(a6)
0000B3EC 3CBC 8407                  		move.w	#$8407,(a6)
0000B3F0 3CBC 9001                  		move.w	#$9001,(a6)
0000B3F4 4EB8 3084                  		jsr	ClearScreen
0000B3F8 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000B402 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000B408 4EB8 3596                  		jsr	NemDec
0000B40C 4EB9 0000 0000             		jsr	Hud_Base
0000B412 4278 C800                  		clr.w	($FFFFC800).w
0000B416 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
0000B41E 46FC 2300                  		move	#$2300,sr
0000B422 7011                       		moveq	#$11,d0
0000B424 4EB8 4812                  		jsr	PalLoad2	; load results screen pallet
0000B428 7000                       		moveq	#0,d0
0000B42A 4EB8 3728                  		jsr	LoadPLC2
0000B42E                            ;		jsr	LoadLivesCounterArt
0000B42E 701B                       		moveq	#$1B,d0
0000B430 4EB8 36F6                  		jsr	LoadPLC		; load results screen patterns
0000B434 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000B43A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
0000B440 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000B444 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000B448 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000B44C 303C 0029                  		move.w	#$29,d0
0000B450 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000B456 43F8 D000                  		lea	($FFFFD000).w,a1
0000B45A 7000                       		moveq	#0,d0
0000B45C 323C 07FF                  		move.w	#$7FF,d1
0000B460                            
0000B460                            SS_EndClrObjRam:
0000B460 22C0                       		move.l	d0,(a1)+
0000B462 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000B466                            
0000B466 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000B46C                            
0000B46C                            SS_NormalExit:
0000B46C 4EB8 3310                  		jsr	PauseGame
0000B470 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000B476 6100 D8FA                  		bsr.w	DelayProgram
0000B47A 4EB9 0000 0000             		jsr	ObjectsLoad
0000B480 4EB9 0000 0000             		jsr	BuildSprites
0000B486 4EB8 3762                  		jsr	RunPLC_RAM
0000B48A 4A78 FE02                  		tst.w	($FFFFFE02).w
0000B48E 67DC                       		beq.s	SS_NormalExit
0000B490 4AB8 F680                  		tst.l	($FFFFF680).w
0000B494 66D6                       		bne.s	SS_NormalExit
0000B496 303C 00AF                  		move.w	#$AF,d0
0000B49A 4EB8 325C                  		jsr	PlaySound_Special ; play special stage exit sound
0000B49E 4EB8 4678                  		jsr	Pal_MakeFlash
0000B4A2 4E75                       		rts	
0000B4A4                            ; ===========================================================================
0000B4A4                            
0000B4A4                            SS_ToSegaScreen:
0000B4A4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
0000B4AA 4E75                       		rts
0000B4AC                            
0000B4AC                            ; ---------------------------------------------------------------------------
0000B4AC                            ; Special stage	background loading subroutine
0000B4AC                            ; ---------------------------------------------------------------------------
0000B4AC                            
0000B4AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4AC                            
0000B4AC                            
0000B4AC                            SS_BGLoad:				; XREF: SpecialStage
0000B4AC 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B4B2 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000B4B8 303C 4051                  		move.w	#$4051,d0
0000B4BC 4EB8 389E                  		jsr	EniDec
0000B4C0 263C 5000 0001             		move.l	#$50000001,d3
0000B4C6 45F9 00FF 0080             		lea	($FF0080).l,a2
0000B4CC 7E06                       		moveq	#6,d7
0000B4CE                            
0000B4CE                            loc_48BE:
0000B4CE 2003                       		move.l	d3,d0
0000B4D0 7C03                       		moveq	#3,d6
0000B4D2 7800                       		moveq	#0,d4
0000B4D4 0C47 0003                  		cmpi.w	#3,d7
0000B4D8 6400                       		bcc.s	loc_48CC
0000B4DA 7801                       		moveq	#1,d4
0000B4DC                            
0000B4DC                            loc_48CC:
0000B4DC 7A07                       		moveq	#7,d5
0000B4DE                            
0000B4DE                            loc_48CE:
0000B4DE 224A                       		movea.l	a2,a1
0000B4E0 0A04 0001                  		eori.b	#1,d4
0000B4E4 6600                       		bne.s	loc_48E2
0000B4E6 0C47 0006                  		cmpi.w	#6,d7
0000B4EA 6600                       		bne.s	loc_48F2
0000B4EC 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B4F2                            
0000B4F2                            loc_48E2:
0000B4F2 48E7 F800                  		movem.l	d0-d4,-(sp)
0000B4F6 7207                       		moveq	#7,d1
0000B4F8 7407                       		moveq	#7,d2
0000B4FA 4EB8 34A0                  		jsr	ShowVDPGraphics
0000B4FE 4CDF 001F                  		movem.l	(sp)+,d0-d4
0000B502                            
0000B502                            loc_48F2:
0000B502 0680 0010 0000             		addi.l	#$100000,d0
0000B508 51CD FFD4                  		dbf	d5,loc_48CE
0000B50C 0680 0380 0000             		addi.l	#$3800000,d0
0000B512 0A04 0001                  		eori.b	#1,d4
0000B516 51CE FFC4                  		dbf	d6,loc_48CC
0000B51A 0683 1000 0000             		addi.l	#$10000000,d3
0000B520 6A00                       		bpl.s	loc_491C
0000B522 4843                       		swap	d3
0000B524 0683 0000 C000             		addi.l	#$C000,d3
0000B52A 4843                       		swap	d3
0000B52C                            
0000B52C                            loc_491C:
0000B52C D4FC 0080                  		adda.w	#$80,a2
0000B530 51CF FF9C                  		dbf	d7,loc_48BE
0000B534 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B53A 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
0000B540 303C 4000                  		move.w	#$4000,d0
0000B544 4EB8 389E                  		jsr	EniDec
0000B548 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B54E 203C 4000 0003             		move.l	#$40000003,d0
0000B554 723F                       		moveq	#$3F,d1
0000B556 741F                       		moveq	#$1F,d2
0000B558 4EB8 34A0                  		jsr	ShowVDPGraphics
0000B55C 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B562 203C 5000 0003             		move.l	#$50000003,d0
0000B568 723F                       		moveq	#$3F,d1
0000B56A 743F                       		moveq	#$3F,d2
0000B56C 4EB8 34A0                  		jsr	ShowVDPGraphics
0000B570 4E75                       		rts	
0000B572                            ; End of function SS_BGLoad
0000B572                            
0000B572                            ; ---------------------------------------------------------------------------
0000B572                            ; Pallet cycling routine - special stage
0000B572                            ; ---------------------------------------------------------------------------
0000B572                            
0000B572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B572                            
0000B572                            
0000B572                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
0000B572 4A78 F63A                  		tst.w	($FFFFF63A).w
0000B576 6600                       		bne.s	locret_49E6
0000B578 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000B57C 6A00                       		bpl.s	locret_49E6
0000B57E 4DF9 00C0 0004             		lea	($C00004).l,a6
0000B584 3038 F79A                  		move.w	($FFFFF79A).w,d0
0000B588 5278 F79A                  		addq.w	#1,($FFFFF79A).w
0000B58C 0240 001F                  		andi.w	#$1F,d0
0000B590 E548                       		lsl.w	#2,d0
0000B592 41F9 0000 0000             		lea	(byte_4A3C).l,a0
0000B598 D0C0                       		adda.w	d0,a0
0000B59A 1018                       		move.b	(a0)+,d0
0000B59C 6A00                       		bpl.s	loc_4992
0000B59E 303C 01FF                  		move.w	#$1FF,d0
0000B5A2                            
0000B5A2                            loc_4992:
0000B5A2 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000B5A6 7000                       		moveq	#0,d0
0000B5A8 1018                       		move.b	(a0)+,d0
0000B5AA 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
0000B5AE 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000B5B4 43F1 0000                  		lea	(a1,d0.w),a1
0000B5B8 303C 8200                  		move.w	#-$7E00,d0
0000B5BC 1019                       		move.b	(a1)+,d0
0000B5BE 3C80                       		move.w	d0,(a6)
0000B5C0 11D1 F616                  		move.b	(a1),($FFFFF616).w
0000B5C4 303C 8400                  		move.w	#-$7C00,d0
0000B5C8 1018                       		move.b	(a0)+,d0
0000B5CA 3C80                       		move.w	d0,(a6)
0000B5CC 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000B5D6 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
0000B5DE 7000                       		moveq	#0,d0
0000B5E0 1018                       		move.b	(a0)+,d0
0000B5E2 6B00                       		bmi.s	loc_49E8
0000B5E4 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
0000B5EA D2C0                       		adda.w	d0,a1
0000B5EC 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
0000B5F0 24D9                       		move.l	(a1)+,(a2)+
0000B5F2 24D9                       		move.l	(a1)+,(a2)+
0000B5F4 24D9                       		move.l	(a1)+,(a2)+
0000B5F6                            
0000B5F6                            locret_49E6:
0000B5F6 4E75                       		rts	
0000B5F8                            ; ===========================================================================
0000B5F8                            
0000B5F8                            loc_49E8:				; XREF: PalCycle_SS
0000B5F8 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000B5FC 0C40 008A                  		cmpi.w	#$8A,d0
0000B600 6500                       		bcs.s	loc_49F4
0000B602 5241                       		addq.w	#1,d1
0000B604                            
0000B604                            loc_49F4:
0000B604 C2FC 002A                  		mulu.w	#$2A,d1
0000B608 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000B60E D2C1                       		adda.w	d1,a1
0000B610 0240 007F                  		andi.w	#$7F,d0
0000B614 0880 0000                  		bclr	#0,d0
0000B618 6700                       		beq.s	loc_4A18
0000B61A 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
0000B61E 24D1                       		move.l	(a1),(a2)+
0000B620 24E9 0004                  		move.l	4(a1),(a2)+
0000B624 24E9 0008                  		move.l	8(a1),(a2)+
0000B628                            
0000B628                            loc_4A18:
0000B628 D2FC 000C                  		adda.w	#$C,a1
0000B62C 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
0000B630 0C40 000A                  		cmpi.w	#$A,d0
0000B634 6500                       		bcs.s	loc_4A2E
0000B636 0440 000A                  		subi.w	#$A,d0
0000B63A 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
0000B63E                            
0000B63E                            loc_4A2E:
0000B63E 3200                       		move.w	d0,d1
0000B640 D040                       		add.w	d0,d0
0000B642 D041                       		add.w	d1,d0
0000B644 D2C0                       		adda.w	d0,a1
0000B646 24D9                       		move.l	(a1)+,(a2)+
0000B648 34D9                       		move.w	(a1)+,(a2)+
0000B64A 4E75                       		rts	
0000B64C                            ; End of function PalCycle_SS
0000B64C                            
0000B64C                            ; ===========================================================================
0000B64C 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
0000B65C                            					; XREF: PalCycle_SS
0000B65C 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
0000B66C 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
0000B67C FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
0000B68C 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
0000B69C 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
0000B6AC 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
0000B6BC FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
0000B6CC                            		even
0000B6CC 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000B6DA                            					; XREF: PalCycle_SS
0000B6DA                            		even
0000B6DA                            
0000B6DA                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
0000B722                            		even
0000B722                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000B7F4                            		even
0000B7F4                            
0000B7F4                            ; ---------------------------------------------------------------------------
0000B7F4                            ; Subroutine to	make the special stage background animated
0000B7F4                            ; ---------------------------------------------------------------------------
0000B7F4                            
0000B7F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7F4                            
0000B7F4                            
0000B7F4                            SS_BGAnimate:				; XREF: SpecialStage
0000B7F4 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000B7F8 6600                       		bne.s	loc_4BF6
0000B7FA 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000B800 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000B806                            
0000B806                            loc_4BF6:
0000B806 0C40 0008                  		cmpi.w	#8,d0
0000B80A 6400                       		bcc.s	loc_4C4E
0000B80C 0C40 0006                  		cmpi.w	#6,d0
0000B810 6600                       		bne.s	loc_4C10
0000B812 5278 F718                  		addq.w	#1,($FFFFF718).w
0000B816 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000B81A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000B820                            
0000B820                            loc_4C10:
0000B820 7000                       		moveq	#0,d0
0000B822 3038 F708                  		move.w	($FFFFF708).w,d0
0000B826 4440                       		neg.w	d0
0000B828 4840                       		swap	d0
0000B82A 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000B830 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000B834 7609                       		moveq	#9,d3
0000B836                            
0000B836                            loc_4C26:
0000B836 302B 0002                  		move.w	2(a3),d0
0000B83A 4EBA D568                  		jsr	CalcSine
0000B83E 7400                       		moveq	#0,d2
0000B840 1419                       		move.b	(a1)+,d2
0000B842 C1C2                       		muls.w	d2,d0
0000B844 E080                       		asr.l	#8,d0
0000B846 36C0                       		move.w	d0,(a3)+
0000B848 1419                       		move.b	(a1)+,d2
0000B84A 4882                       		ext.w	d2
0000B84C D55B                       		add.w	d2,(a3)+
0000B84E 51CB FFE6                  		dbf	d3,loc_4C26
0000B852 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000B856 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000B85C 6000                       		bra.s	loc_4C7E
0000B85E                            ; ===========================================================================
0000B85E                            
0000B85E                            loc_4C4E:				; XREF: SS_BGAnimate
0000B85E 0C40 000C                  		cmpi.w	#$C,d0
0000B862 6600                       		bne.s	loc_4C74
0000B864 5378 F718                  		subq.w	#1,($FFFFF718).w
0000B868 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000B86C 243C 0001 8000             		move.l	#$18000,d2
0000B872 7206                       		moveq	#6,d1
0000B874                            
0000B874                            loc_4C64:
0000B874 2013                       		move.l	(a3),d0
0000B876 9082                       		sub.l	d2,d0
0000B878 26C0                       		move.l	d0,(a3)+
0000B87A 0482 0000 2000             		subi.l	#$2000,d2
0000B880 51C9 FFF2                  		dbf	d1,loc_4C64
0000B884                            
0000B884                            loc_4C74:
0000B884 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000B888 45F9 0000 0000             		lea	(byte_4CC4).l,a2
0000B88E                            
0000B88E                            loc_4C7E:
0000B88E 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000B892 3038 F718                  		move.w	($FFFFF718).w,d0
0000B896 4440                       		neg.w	d0
0000B898 4840                       		swap	d0
0000B89A 7600                       		moveq	#0,d3
0000B89C 161A                       		move.b	(a2)+,d3
0000B89E 3438 F70C                  		move.w	($FFFFF70C).w,d2
0000B8A2 4442                       		neg.w	d2
0000B8A4 0242 00FF                  		andi.w	#$FF,d2
0000B8A8 E54A                       		lsl.w	#2,d2
0000B8AA                            
0000B8AA                            loc_4C9A:
0000B8AA 301B                       		move.w	(a3)+,d0
0000B8AC 544B                       		addq.w	#2,a3
0000B8AE 7200                       		moveq	#0,d1
0000B8B0 121A                       		move.b	(a2)+,d1
0000B8B2 5341                       		subq.w	#1,d1
0000B8B4                            
0000B8B4                            loc_4CA4:
0000B8B4 2380 2000                  		move.l	d0,(a1,d2.w)
0000B8B8 5842                       		addq.w	#4,d2
0000B8BA 0242 03FC                  		andi.w	#$3FC,d2
0000B8BE 51C9 FFF4                  		dbf	d1,loc_4CA4
0000B8C2 51CB FFE6                  		dbf	d3,loc_4C9A
0000B8C6 4E75                       		rts	
0000B8C8                            ; End of function SS_BGAnimate
0000B8C8                            
0000B8C8                            ; ===========================================================================
0000B8C8 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000B8D4                            		even
0000B8D4 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000B8DC                            		even
0000B8DC 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000B8F0                            		even
0000B8F0                            					; XREF: SS_BGAnimate
0000B8F0                            ; ===========================================================================
0000B8F0                            
0000B8F0                            ; ---------------------------------------------------------------------------
0000B8F0                            ; Continue screen
0000B8F0                            ; ---------------------------------------------------------------------------
0000B8F0                            
0000B8F0                            ContinueScreen:				; XREF: GameModeArray
0000B8F0 4EB8 4528                  		jsr	pal_fadefrom
0000B8F4 46FC 2700                  		disable_ints
0000B8F8 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000B8FC 0200 00BF                  		andi.b	#$BF,d0
0000B900 33C0 00C0 0004             		move.w	d0,($C00004).l
0000B906 4DF9 00C0 0004             		lea	($C00004).l,a6
0000B90C 3CBC 8004                  		move.w	#$8004,(a6)
0000B910 3CBC 8700                  		move.w	#$8700,(a6)
0000B914 4EB8 3084                  		jsr	ClearScreen
0000B918 43F8 D000                  		lea	($FFFFD000).w,a1
0000B91C 7000                       		moveq	#0,d0
0000B91E 323C 07FF                  		move.w	#$7FF,d1
0000B922                            
0000B922                            Cont_ClrObjRam:
0000B922 22C0                       		move.l	d0,(a1)+
0000B924 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000B928                            
0000B928 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000B932 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000B938 4EB8 3596                  		jsr	NemDec
0000B93C 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000B946 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
0000B94C 4EB8 3596                  		jsr	NemDec
0000B950 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000B95A 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000B960 4EB8 3596                  		jsr	NemDec
0000B964 720A                       		moveq	#10,d1
0000B966 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
0000B96C 7012                       		moveq	#$12,d0
0000B96E 4EB8 47FA                  		jsr	PalLoad1	; load continue	screen pallet
0000B972 103C 0090                  		move.b	#$90,d0
0000B976 6100 E0A6                  		bsr.w	Jmpto_PlaySound2	; play continue	music
0000B97A 31FC 0293 FC20             		move.w	#659,($FFFFFC20).w ; set time delay to 11 seconds
0000B980 42B8 F700                  		clr.l	($FFFFF700).w
0000B984 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000B98C 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
0000B992 11FC 0002 D040             		move.b	#2,(Sidekick).w ; load Obj02 Tails object at $FFFFB040
0000B998 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
0000B99E 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
0000B9A4 11FC 0003 D098             		move.b	#3,($FFFFD098).w
0000B9AA 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
0000B9B0 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000B9B6 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
0000B9BC 4EB9 0000 0000             		jsr	ObjectsLoad
0000B9C2 4EB9 0000 0000             		jsr	BuildSprites
0000B9C8 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000B9CC 0000 0040                  		ori.b	#$40,d0
0000B9D0 33C0 00C0 0004             		move.w	d0,($C00004).l
0000B9D6 4EB8 446E                  		jsr	Pal_FadeTo
0000B9DA                            
0000B9DA                            ; ---------------------------------------------------------------------------
0000B9DA                            ; Continue screen main loop
0000B9DA                            ; ---------------------------------------------------------------------------
0000B9DA                            
0000B9DA                            Cont_MainLoop:
0000B9DA 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000B9E0 6100 D390                  		bsr.w	Wait_VSync
0000B9E4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B9EA 6400                       		bcc.s	loc_4DF2
0000B9EC 46FC 2700                  		disable_ints
0000B9F0 3238 FC20                  		move.w	($FFFFFC20).w,d1
0000B9F4 82FC 003C                  		divu.w	#$3C,d1
0000B9F8 0281 0000 000F             		andi.l	#$F,d1
0000B9FE 4EB9 0000 0000             		jsr	ContScrCounter
0000BA04 46FC 2300                  		enable_ints
0000BA08                            
0000BA08                            loc_4DF2:
0000BA08 4EB9 0000 0000             		jsr	ObjectsLoad
0000BA0E 4EB9 0000 0000             		jsr	BuildSprites
0000BA14 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000BA1A 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000BA1C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000BA22 64B6                       		bcc.s	Cont_MainLoop
0000BA24 4A78 FC20                  		tst.w	($FFFFFC20).w
0000BA28 6600 FFB0                  		bne.w	Cont_MainLoop
0000BA2C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000BA32 4E75                       		rts	
0000BA34                            ; ===========================================================================
0000BA34                            
0000BA34                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000BA34 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000BA3A 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000BA40 7000                       		moveq	#0,d0
0000BA42 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000BA46 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
0000BA4A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000BA4E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000BA52 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000BA56 4E75                       		rts	
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            ; ---------------------------------------------------------------------------
0000BA58                            ; Object 80 - Continue screen elements
0000BA58                            ; ---------------------------------------------------------------------------
0000BA58                            
0000BA58                            ;Obj80:					; XREF: Obj_Index
0000BA58                            ;		moveq	#0,d0
0000BA58                            ;		move.b	routine(a0),d0
0000BA58                            ;		move.w	Obj80_Index(pc,d0.w),d1
0000BA58                            ;		jmp	Obj80_Index(pc,d1.w)
0000BA58                            ; ===========================================================================
0000BA58                            ;Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000BA58                            ;		dc.w Obj80_Display-Obj80_Index
0000BA58                            ;		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000BA58                            ;		dc.w Obj80_ChkType-Obj80_Index
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            ;Obj80_Main:				; XREF: Obj80_Index
0000BA58                            ;		addq.b	#2,routine(a0)
0000BA58                            ;		move.l	#Map_obj80,4(a0)
0000BA58                            ;		move.w	#$8500,2(a0)
0000BA58                            ;		move.b	#0,1(a0)
0000BA58                            ;		move.b	#$3C,width_pixels(a0)
0000BA58                            ;		move.w	#$120,8(a0)
0000BA58                            ;		move.w	#$C0,$A(a0)
0000BA58                            ;		move.w	#0,($FFFFFE20).w ; clear rings
0000BA58                            
0000BA58                            ;Obj80_Display:				; XREF: Obj80_Index
0000BA58                            ;		jmp	DisplaySprite
0000BA58                            ; ===========================================================================
0000BA58                            ;Obj80_MiniSonicPos:
0000BA58                            ;		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000BA58                            ;		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            ;Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000BA58                            ;		movea.l	a0,a1
0000BA58                            ;		lea	(Obj80_MiniSonicPos).l,a2
0000BA58                            ;		moveq	#0,d1
0000BA58                            ;		move.b	($FFFFFE18).w,d1
0000BA58                            ;		subq.b	#2,d1
0000BA58                            ;		bcc.s	loc_4EC4
0000BA58                            ;		jmp	DeleteObject
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            ;loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000BA58                            ;		moveq	#1,d3
0000BA58                            ;		cmpi.b	#$E,d1
0000BA58                            ;		bcs.s	loc_4ED0
0000BA58                            ;		moveq	#0,d3
0000BA58                            ;		moveq	#$E,d1
0000BA58                            
0000BA58                            ;loc_4ED0:
0000BA58                            ;		move.b	d1,d2
0000BA58                            ;		andi.b	#1,d2
0000BA58                            
0000BA58                            ;Obj80_MiniSonLoop:
0000BA58                            ;		move.b	#$80,0(a1)	; load mini Sonic object
0000BA58                            ;		move.w	(a2)+,8(a1)
0000BA58                            ;		tst.b	d2
0000BA58                            ;		beq.s	loc_4EEA
0000BA58                            ;		subi.w	#$A,8(a1)
0000BA58                            
0000BA58                            ;loc_4EEA:
0000BA58                            ;		move.w	#$D0,$A(a1)
0000BA58                            ;		move.b	#6,mapping_frame(a1)
0000BA58                            ;		move.b	#6,routine(a1)
0000BA58                            ;		move.l	#Map_obj80,4(a1)
0000BA58                            ;		move.w	#$8551,2(a1)
0000BA58                            ;		move.b	#0,1(a1)
0000BA58                            ;		lea	object_size(a1),a1
0000BA58                            ;		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000BA58                            ;		lea	-$40(a1),a1
0000BA58                            ;		move.b	d3,subtype(a1)
0000BA58                            
0000BA58                            ;Obj80_ChkType:				; XREF: Obj80_Index
0000BA58                            ;		tst.b	subtype(a0)
0000BA58                            ;		beq.s	loc_4F40
0000BA58                            ;		cmpi.b	#6,($FFFFD024).w
0000BA58                            ;		bcs.s	loc_4F40
0000BA58                            ;		move.b	($FFFFFE0F).w,d0
0000BA58                            ;		andi.b	#1,d0
0000BA58                            ;		bne.s	loc_4F40
0000BA58                            ;		tst.w	($FFFFD010).w
0000BA58                            ;		bne.s	Obj80_Delete
0000BA58                            ;		rts	
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            ;loc_4F40:				; XREF: Obj80_ChkType
0000BA58                            ;		move.b	($FFFFFE0F).w,d0
0000BA58                            ;		andi.b	#$F,d0
0000BA58                            ;		bne.s	Obj80_Display2
0000BA58                            ;		bchg	#0,mapping_frame(a0)
0000BA58                            ;
0000BA58                            ;Obj80_Display2:
0000BA58                            ;		jmp	DisplaySprite
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            ;Obj80_Delete:				; XREF: Obj80_ChkType
0000BA58                            ;		jmp	DeleteObject
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            ; ---------------------------------------------------------------------------
0000BA58                            ; Object 81 - Sonic on the continue screen
0000BA58                            ; ---------------------------------------------------------------------------
0000BA58                            
0000BA58                            ;Obj81:					; XREF: Obj_Index
0000BA58                            ;		moveq	#0,d0
0000BA58                            ;		move.b	routine(a0),d0
0000BA58                            ;		move.w	Obj81_Index(pc,d0.w),d1
0000BA58                            ;		jsr	Obj81_Index(pc,d1.w)
0000BA58                            ;		jmp	DisplaySprite
0000BA58                            ; ===========================================================================
0000BA58                            ;Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000BA58                            ;		dc.w Obj81_ChkLand-Obj81_Index
0000BA58                            ;		dc.w Obj81_Animate-Obj81_Index
0000BA58                            ;		dc.w Obj81_Run-Obj81_Index
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            ;Obj81_Main:				; XREF: Obj81_Index
0000BA58                            ;		addq.b	#2,routine(a0)
0000BA58                            ;		move.w	#$A0,8(a0)
0000BA58                            ;		move.w	#$C0,$C(a0)
0000BA58                            ;		move.l	#Map_Sonic,4(a0)
0000BA58                            ;		move.w	#$780,2(a0)
0000BA58                            ;		move.b	#4,1(a0)
0000BA58                            ;		move.w	#$100,priority(a0)
0000BA58                            ;		move.b	#$1D,anim(a0)	; use "floating" animation
0000BA58                            ;		move.w	#$400,y_vel(a0)	; make Sonic fall from above
0000BA58                            
0000BA58                            ;Obj81_ChkLand:				; XREF: Obj81_Index
0000BA58                            ;		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
0000BA58                            ;		bne.s	Obj81_ShowFall	; if not, branch
0000BA58                            ;		addq.b	#2,routine(a0)
0000BA58                            ;		clr.w	y_vel(a0)		; stop Sonic falling
0000BA58                            ;		move.l	#Map_obj80,4(a0)
0000BA58                            ;		move.w	#$8500,2(a0)
0000BA58                            ;		move.b	#0,anim(a0)
0000BA58                            ;		bra.s	Obj81_Animate
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            ;Obj81_ShowFall:				; XREF: Obj81_ChkLand
0000BA58                            ;		jsr	SpeedToPos
0000BA58                            ;		jsr	Sonic_Animate
0000BA58                            ;		jmp	LoadSonicDynPLC
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            ;Obj81_Animate:				; XREF: Obj81_Index
0000BA58                            ;		tst.b	($FFFFF605).w	; is any button	pressed?
0000BA58                            ;		bmi.s	Obj81_GetUp	; if yes, branch
0000BA58                            ;		lea	(Ani_obj81).l,a1
0000BA58                            ;		jmp	AnimateSprite
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            ;Obj81_GetUp:				; XREF: Obj81_Animate
0000BA58                            ;		addq.b	#2,routine(a0)
0000BA58                            ;		move.l	#Map_Sonic,4(a0)
0000BA58                            ;		move.w	#$780,2(a0)
0000BA58                            ;		move.b	#$1E,anim(a0)	; use "getting up" animation
0000BA58                            ;		clr.w	inertia(a0)
0000BA58                            ;		subq.w	#8,$C(a0)
0000BA58                            ;		move.b	#$E0,d0
0000BA58                            ;		bsr.w	Jmpto_PlaySound_Special ; fade out music
0000BA58                            
0000BA58                            ;Obj81_Run:				; XREF: Obj81_Index
0000BA58                            ;		cmpi.w	#$800,inertia(a0)	; check	Sonic's "run speed" (not moving)
0000BA58                            ;		bne.s	Obj81_AddSpeed	; if too low, branch
0000BA58                            ;		move.w	#$1000,x_vel(a0)	; move Sonic to	the right
0000BA58                            ;		bra.s	Obj81_ShowRun
0000BA58                            ; ===========================================================================
0000BA58                            
0000BA58                            ;Obj81_AddSpeed:				; XREF: Obj81_Run
0000BA58                            ;		addi.w	#$20,inertia(a0)	; increase "run	speed"
0000BA58                            
0000BA58                            ;Obj81_ShowRun:				; XREF: Obj81_Run
0000BA58                            ;		jsr	SpeedToPos
0000BA58                            ;		jsr	Sonic_Animate
0000BA58                            ;		jmp	LoadSonicDynPLC
0000BA58                            ; ===========================================================================
0000BA58                            ;Ani_obj81:
0000BA58                            ;	include "_anim\obj81.asm"
0000BA58                            
0000BA58                            ; ---------------------------------------------------------------------------
0000BA58                            ; Sprite mappings - Continue screen
0000BA58                            ; ---------------------------------------------------------------------------
0000BA58                            ;Map_obj80:
0000BA58                            ;	include "_maps\obj80.asm"
0000BA58                            
0000BA58                            ; ===========================================================================
0000BA58                            ; ---------------------------------------------------------------------------
0000BA58                            ; Ending sequence in Green Hill	Zone
0000BA58                            ; ---------------------------------------------------------------------------
0000BA58                            
0000BA58                            EndingSequence:				; XREF: GameModeArray
0000BA58 103C 00E4                  		move.b	#$E4,d0
0000BA5C 6100 0000                  		bsr.w	Jmpto_PlayMus ; stop music
0000BA60 6100 0000                  		bsr.w	Jmpto_Pal_FadeFrom
0000BA64 43F8 D000                  		lea	($FFFFD000).w,a1
0000BA68 7000                       		moveq	#0,d0
0000BA6A 323C 07FF                  		move.w	#$7FF,d1
0000BA6E                            
0000BA6E                            End_ClrObjRam:
0000BA6E 22C0                       		move.l	d0,(a1)+
0000BA70 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000BA74                            
0000BA74 43F8 F628                  		lea	($FFFFF628).w,a1
0000BA78 7000                       		moveq	#0,d0
0000BA7A 323C 0015                  		move.w	#$15,d1
0000BA7E                            
0000BA7E                            End_ClrRam:
0000BA7E 22C0                       		move.l	d0,(a1)+
0000BA80 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000BA84                            
0000BA84 43F8 F700                  		lea	($FFFFF700).w,a1
0000BA88 7000                       		moveq	#0,d0
0000BA8A 323C 003F                  		move.w	#$3F,d1
0000BA8E                            
0000BA8E                            End_ClrRam2:
0000BA8E 22C0                       		move.l	d0,(a1)+
0000BA90 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000BA94                            
0000BA94 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000BA98 7000                       		moveq	#0,d0
0000BA9A 323C 0047                  		move.w	#$47,d1
0000BA9E                            
0000BA9E                            End_ClrRam3:
0000BA9E 22C0                       		move.l	d0,(a1)+
0000BAA0 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000BAA4                            
0000BAA4 46FC 2700                  		move	#$2700,sr
0000BAA8 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000BAAC 0200 00BF                  		andi.b	#$BF,d0
0000BAB0 33C0 00C0 0004             		move.w	d0,($C00004).l
0000BAB6 6100 0000                  		bsr.w	Jmpto_ClearScreen
0000BABA 4DF9 00C0 0004             		lea	($C00004).l,a6
0000BAC0 3CBC 8B03                  		move.w	#$8B03,(a6)
0000BAC4 3CBC 8230                  		move.w	#$8230,(a6)
0000BAC8 3CBC 8407                  		move.w	#$8407,(a6)
0000BACC 3CBC 857C                  		move.w	#$857C,(a6)
0000BAD0 3CBC 9001                  		move.w	#$9001,(a6)
0000BAD4 3CBC 8004                  		move.w	#$8004,(a6)
0000BAD8 3CBC 8720                  		move.w	#$8720,(a6)
0000BADC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000BAE2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000BAE6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000BAEC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
0000BAF2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000BAF8 6700                       		beq.s	End_LoadData	; if yes, branch
0000BAFA 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000BB00                            
0000BB00                            End_LoadData:
0000BB00 701C                       		moveq	#$1C,d0
0000BB02 6100 0000                  		bsr.w	Jmpto_RunPLC_ROM	; load ending sequence patterns
0000BB06 4EB9 0000 0000             		jsr	Hud_Base
0000BB0C 6100 0000                  		bsr.w	LevelSizeLoad
0000BB10 6100 0000                  		bsr.w	DeformBgLayer
0000BB14 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000BB1A 6100 0000                  		bsr.w	MainLoadBlockLoad
0000BB1E 6100 0000                  		bsr.w	LoadTilesFromStart
0000BB22                            ;		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000BB22 21FC 0000 0000 FFE2        		move.l	#Col_GHZ_1,($FFFFFFE2).w			; MJ: Set first collision for ending
0000BB2A 21FC 0000 0000 FFE6        		move.l	#Col_GHZ_2,($FFFFFFE6).w			; MJ: Set second collision for ending
0000BB32 46FC 2300                  		move	#$2300,sr
0000BB36 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000BB3C 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000BB40 6100 0000                  		bsr.w	Jmpto_KosDec
0000BB44 7003                       		moveq	#3,d0
0000BB46 6100 0000                  		bsr.w	Jmpto_PalLoad1	; load Sonic's pallet
0000BB4A 303C 008B                  		move.w	#$8B,d0
0000BB4E 6100 0000                  		bsr.w	Jmpto_PlaySFX	; play ending sequence music
0000BB52 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000BB58 6700                       		beq.s	End_LoadSonic	; if not, branch
0000BB5A 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000BB60                            
0000BB60                            End_LoadSonic:
0000BB60 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000BB66 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000BB6C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000BB72 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000BB78 31FC F800 D020             		move.w	#$F800,(MainCharacter+inertia).w ; set Sonic's speed
0000BB7E 11FC 0021 D380             		move.b	#$21,($FFFFD380).w ; load HUD object
0000BB84 4EB9 0000 0000             		jsr	ObjPosLoad
0000BB8A 4EB9 0000 0000             		jsr	ObjectsLoad
0000BB90 4EB9 0000 0000             		jsr	BuildSprites
0000BB96 7000                       		moveq	#0,d0
0000BB98 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000BB9C 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000BBA0 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000BBA4 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
0000BBA8 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000BBAC 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000BBB0 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000BBB4 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000BBB8 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000BBBC 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000BBC0 6100 F146                  		bsr.w	OscillateNumInit
0000BBC4 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000BBCA 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000BBD0 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000BBD6 31FC 0708 FC20             		move.w	#1800,($FFFFFC20).w
0000BBDC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000BBE2 6100 D18E                  		bsr.w	DelayProgram
0000BBE6 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000BBEA 0000 0040                  		ori.b	#$40,d0
0000BBEE 33C0 00C0 0004             		move.w	d0,($C00004).l
0000BBF4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000BBFA 6100 0000                  		bsr.w	Jmpto_Pal_FadeTo
0000BBFE                            
0000BBFE                            ; ---------------------------------------------------------------------------
0000BBFE                            ; Main ending sequence loop
0000BBFE                            ; ---------------------------------------------------------------------------
0000BBFE                            
0000BBFE                            End_MainLoop:
0000BBFE 6100 0000                  		bsr.w	Jmpto_PauseGame
0000BC02 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000BC08 6100 D168                  		bsr.w	DelayProgram
0000BC0C 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000BC10 6100 0000                  		bsr.w	End_MoveSonic
0000BC14 4EB9 0000 0000             		jsr	ObjectsLoad
0000BC1A 6100 0000                  		bsr.w	DeformBgLayer
0000BC1E 4EB9 0000 0000             		jsr	BuildSprites
0000BC24 4EB9 0000 0000             		jsr	ObjPosLoad
0000BC2A 6100 0000                  		bsr.w	Jmpto_PalCycle_Load
0000BC2E 6100 F12E                  		bsr.w	OscillateNumDo
0000BC32 6100 F1BA                  		bsr.w	ChangeRingFrame
0000BC36 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000BC3C 6700                       		beq.s	loc_52DA	; if yes, branch
0000BC3E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000BC44 103C 0091                  		move.b	#$91,d0
0000BC48 6100 0000                  		bsr.w	Jmpto_PlayMus ; play credits music
0000BC4C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000BC52 4E75                       		rts	
0000BC54                            ; ===========================================================================
0000BC54                            
0000BC54                            loc_52DA:
0000BC54 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000BC58 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000BC5C                            
0000BC5C 4278 FE02                  		clr.w	($FFFFFE02).w
0000BC60 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000BC66 4278 F794                  		clr.w	($FFFFF794).w
0000BC6A                            
0000BC6A                            End_AllEmlds:				; XREF: loc_5334
0000BC6A 6100 0000                  		bsr.w	Jmpto_PauseGame
0000BC6E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000BC74 6100 D0FC                  		bsr.w	DelayProgram
0000BC78 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000BC7C 6100 0000                  		bsr.w	End_MoveSonic
0000BC80 4EB9 0000 0000             		jsr	ObjectsLoad
0000BC86 6100 0000                  		bsr.w	DeformBgLayer
0000BC8A 4EB9 0000 0000             		jsr	BuildSprites
0000BC90 4EB9 0000 0000             		jsr	ObjPosLoad
0000BC96 6100 F0C6                  		bsr.w	OscillateNumDo
0000BC9A 6100 F152                  		bsr.w	ChangeRingFrame
0000BC9E 5378 F794                  		subq.w	#1,($FFFFF794).w
0000BCA2 6A00                       		bpl.s	loc_5334
0000BCA4 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000BCAA 6100 0000                  		bsr.w	Jmpto_Pal_ToWhite
0000BCAE                            
0000BCAE                            loc_5334:
0000BCAE 4A78 FE02                  		tst.w	($FFFFFE02).w
0000BCB2 6700 FFB6                  		beq.w	End_AllEmlds
0000BCB6 4278 FE02                  		clr.w	($FFFFFE02).w
0000BCBA 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000BCC0 4BF9 00C0 0004             		lea	($C00004).l,a5
0000BCC6 4DF9 00C0 0000             		lea	($C00000).l,a6
0000BCCC 47F8 F700                  		lea	($FFFFF700).w,a3
0000BCD0 2878 A400                  		movea.l	($FFFFA400).w,a4
0000BCD4 343C 4000                  		move.w	#$4000,d2
0000BCD8 6100 0000                  		bsr.w	LoadTilesFromStart2
0000BCDC 7013                       		moveq	#$13,d0
0000BCDE 6100 0000                  		bsr.w	Jmpto_PalLoad1	; load ending pallet
0000BCE2 6100 0000                  		bsr.w	Jmpto_Pal_MakeWhite
0000BCE6 6000 FF16                  		bra.w	End_MainLoop
0000BCEA                            
0000BCEA                            ; ---------------------------------------------------------------------------
0000BCEA                            ; Subroutine controlling Sonic on the ending sequence
0000BCEA                            ; ---------------------------------------------------------------------------
0000BCEA                            
0000BCEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BCEA                            
0000BCEA                            
0000BCEA                            End_MoveSonic:				; XREF: End_MainLoop
0000BCEA 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000BCEE 6600                       		bne.s	End_MoveSonic2
0000BCF0 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
0000BCF6 6400                       		bcc.s	End_MoveSonExit	; if not, branch
0000BCF8 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000BCFC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000BD02 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
0000BD08 4E75                       		rts	
0000BD0A                            ; ===========================================================================
0000BD0A                            
0000BD0A                            End_MoveSonic2:				; XREF: End_MoveSonic
0000BD0A 5500                       		subq.b	#2,d0
0000BD0C 6600                       		bne.s	End_MoveSonic3
0000BD0E 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
0000BD14 6500                       		bcs.s	End_MoveSonExit	; if not, branch
0000BD16 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000BD1A 7000                       		moveq	#0,d0
0000BD1C 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
0000BD20 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
0000BD24 31C0 D020                  		move.w	d0,(MainCharacter+inertia).w
0000BD28 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
0000BD2E 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
0000BD34 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
0000BD3A 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
0000BD40 4E75                       		rts	
0000BD42                            ; ===========================================================================
0000BD42                            
0000BD42                            End_MoveSonic3:				; XREF: End_MoveSonic
0000BD42 5500                       		subq.b	#2,d0
0000BD44 6600                       		bne.s	End_MoveSonExit
0000BD46 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000BD4A 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
0000BD50 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000BD56 4278 D024                  		clr.w	($FFFFD024).w
0000BD5A                            
0000BD5A                            End_MoveSonExit:
0000BD5A 4E75                       		rts	
0000BD5C                            ; End of function End_MoveSonic
0000BD5C                            
0000BD5C                            ; ===========================================================================
0000BD5C                            ; ---------------------------------------------------------------------------
0000BD5C                            ; Object 87 - Sonic on ending sequence
0000BD5C                            ; ---------------------------------------------------------------------------
0000BD5C                            
0000BD5C                            Obj87:					; XREF: Obj_Index
0000BD5C 7000                       		moveq	#0,d0
0000BD5E 1028 0025                  		move.b	$25(a0),d0
0000BD62 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000BD66 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
0000BD6A 4EF9 0000 0000             		jmp	DisplaySprite
0000BD70                            ; ===========================================================================
0000BD70 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000BD74 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000BD78 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000BD7C 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000BD80 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000BD84                            ; ===========================================================================
0000BD84                            
0000BD84                            Obj87_Main:				; XREF: Obj87_Index
0000BD84 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000BD8A 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000BD8C 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000BD92 317C 00D8 0030             		move.w	#$D8,$30(a0)
0000BD98 4E75                       		rts	
0000BD9A                            ; ===========================================================================
0000BD9A                            
0000BD9A                            Obj87_Main2:				; XREF: Obj87_Main
0000BD9A 5428 0025                  		addq.b	#2,$25(a0)
0000BD9E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000BDA6 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000BDAC 117C 0004 0001             		move.b	#4,1(a0)
0000BDB2 4228 0022                  		clr.b	$22(a0)
0000BDB6 317C 0100 0018             		move.w	#$100,priority(a0)
0000BDBC 117C 0000 001A             		move.b	#0,$1A(a0)
0000BDC2 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000BDC8                            
0000BDC8                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000BDC8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000BDCC 6600                       		bne.s	Obj87_Wait
0000BDCE 5428 0025                  		addq.b	#2,$25(a0)
0000BDD2 317C 0001 001C             		move.w	#1,$1C(a0)
0000BDD8 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000BDDE                            
0000BDDE                            Obj87_Wait:
0000BDDE 4E75                       		rts	
0000BDE0                            ; ===========================================================================
0000BDE0                            
0000BDE0                            Obj87_LookUp:				; XREF: Obj87_Index
0000BDE0 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
0000BDE8 6600                       		bne.s	locret_5480
0000BDEA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000BDF0 317C 005A 0030             		move.w	#$5A,$30(a0)
0000BDF6 5428 0025                  		addq.b	#2,$25(a0)
0000BDFA                            
0000BDFA                            locret_5480:
0000BDFA 4E75                       		rts	
0000BDFC                            ; ===========================================================================
0000BDFC                            
0000BDFC                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000BDFC 5368 0030                  		subq.w	#1,$30(a0)
0000BE00 6600                       		bne.s	Obj87_Wait2
0000BE02 43F8 D400                  		lea	($FFFFD400).w,a1
0000BE06 323C 00FF                  		move.w	#$FF,d1
0000BE0A                            
0000BE0A                            Obj87_ClrLoop:
0000BE0A 4299                       		clr.l	(a1)+
0000BE0C 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000BE10 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
0000BE16 5428 0025                  		addq.b	#2,$25(a0)
0000BE1A 117C 0001 001C             		move.b	#1,$1C(a0)
0000BE20 317C 003C 0030             		move.w	#$3C,$30(a0)
0000BE26                            
0000BE26                            Obj87_Wait2:
0000BE26 4E75                       		rts	
0000BE28                            ; ===========================================================================
0000BE28                            
0000BE28                            Obj87_MakeLogo:				; XREF: Obj87_Index
0000BE28 5368 0030                  		subq.w	#1,$30(a0)
0000BE2C 6600                       		bne.s	Obj87_Wait3
0000BE2E 5428 0025                  		addq.b	#2,$25(a0)
0000BE32 317C 00B4 0030             		move.w	#$B4,$30(a0)
0000BE38 117C 0002 001C             		move.b	#2,$1C(a0)
0000BE3E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000BE44                            
0000BE44                            Obj87_Wait3:
0000BE44 4E75                       		rts	
0000BE46                            ; ===========================================================================
0000BE46                            
0000BE46                            Obj87_Animate:				; XREF: Obj87_Index
0000BE46 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000BE4C 4EF9 0000 0000             		jmp	AnimateSprite
0000BE52                            ; ===========================================================================
0000BE52                            
0000BE52                            Obj87_Leap:				; XREF: Obj87_Index
0000BE52 5368 0030                  		subq.w	#1,$30(a0)
0000BE56 6600                       		bne.s	Obj87_Wait4
0000BE58 5428 0025                  		addq.b	#2,$25(a0)
0000BE5C 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000BE64 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000BE6A 117C 0004 0001             		move.b	#4,1(a0)
0000BE70 4228 0022                  		clr.b	$22(a0)
0000BE74 317C 0100 0018             		move.w	#$100,priority(a0)
0000BE7A 117C 0005 001A             		move.b	#5,$1A(a0)
0000BE80 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000BE86 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000BE8C 60B8                       		bra.s	Obj87_Animate
0000BE8E                            ; ===========================================================================
0000BE8E                            
0000BE8E                            Obj87_Wait4:				; XREF: Obj87_Leap
0000BE8E 4E75                       		rts	
0000BE90                            ; ===========================================================================
0000BE90                            Ani_obj87:
0000BE90                            	include '_anim\obj87.asm'
0000BE90                            ; ---------------------------------------------------------------------------
0000BE90                            ; Animation script - Sonic on the ending sequence
0000BE90                            ; ---------------------------------------------------------------------------
0000BE90 0000                       		dc.w byte_551C-Ani_obj87
0000BE92 0000                       		dc.w byte_552A-Ani_obj87
0000BE94 0000                       		dc.w byte_5534-Ani_obj87
0000BE96 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000BEA4 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000BEAE 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000BEB6                            		even
0000BEB6                            		even
0000BEB6                            
0000BEB6                            ; ===========================================================================
0000BEB6                            ; ---------------------------------------------------------------------------
0000BEB6                            ; Object 88 - chaos emeralds on	the ending sequence
0000BEB6                            ; ---------------------------------------------------------------------------
0000BEB6                            
0000BEB6                            Obj88:					; XREF: Obj_Index
0000BEB6 7000                       		moveq	#0,d0
0000BEB8 1028 0024                  		move.b	$24(a0),d0
0000BEBC 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000BEC0 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000BEC4 4EF9 0000 0000             		jmp	DisplaySprite
0000BECA                            ; ===========================================================================
0000BECA 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
0000BECC 0000                       		dc.w Obj88_Move-Obj88_Index
0000BECE                            ; ===========================================================================
0000BECE                            
0000BECE                            Obj88_Main:				; XREF: Obj88_Index
0000BECE 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000BED4 6700                       		beq.s	Obj88_Main2
0000BED6 588F                       		addq.l	#4,sp
0000BED8 4E75                       		rts	
0000BEDA                            ; ===========================================================================
0000BEDA                            
0000BEDA                            Obj88_Main2:				; XREF: Obj88_Main
0000BEDA 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000BEE0 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
0000BEE6 2248                       		movea.l	a0,a1
0000BEE8 7600                       		moveq	#0,d3
0000BEEA 7401                       		moveq	#1,d2
0000BEEC 7205                       		moveq	#5,d1
0000BEEE                            
0000BEEE                            Obj88_MainLoop:
0000BEEE 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000BEF2 5429 0024                  		addq.b	#2,$24(a1)
0000BEF6 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
0000BEFE 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000BF04 137C 0004 0001             		move.b	#4,1(a1)
0000BF0A 337C 0080 0018             		move.w	#$80,priority(a1)
0000BF10 3368 0008 0038             		move.w	8(a0),$38(a1)
0000BF16 3368 000C 003A             		move.w	$C(a0),$3A(a1)
0000BF1C 1342 001C                  		move.b	d2,$1C(a1)
0000BF20 1342 001A                  		move.b	d2,$1A(a1)
0000BF24 5202                       		addq.b	#1,d2
0000BF26 1343 0026                  		move.b	d3,$26(a1)
0000BF2A 0603 002A                  		addi.b	#$2A,d3
0000BF2E 43E9 0040                  		lea	$40(a1),a1
0000BF32 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
0000BF36                            
0000BF36                            Obj88_Move:				; XREF: Obj88_Index
0000BF36 3028 003E                  		move.w	$3E(a0),d0
0000BF3A D168 0026                  		add.w	d0,$26(a0)
0000BF3E 1028 0026                  		move.b	$26(a0),d0
0000BF42 4EB9 0000 8DA4             		jsr	(CalcSine).l
0000BF48 7800                       		moveq	#0,d4
0000BF4A 1828 003C                  		move.b	$3C(a0),d4
0000BF4E C3C4                       		muls.w	d4,d1
0000BF50 E081                       		asr.l	#8,d1
0000BF52 C1C4                       		muls.w	d4,d0
0000BF54 E080                       		asr.l	#8,d0
0000BF56 D268 0038                  		add.w	$38(a0),d1
0000BF5A D068 003A                  		add.w	$3A(a0),d0
0000BF5E 3141 0008                  		move.w	d1,8(a0)
0000BF62 3140 000C                  		move.w	d0,$C(a0)
0000BF66 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
0000BF6C 6700                       		beq.s	loc_55FA
0000BF6E 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000BF74                            
0000BF74                            loc_55FA:
0000BF74 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
0000BF7A 6700                       		beq.s	loc_5608
0000BF7C 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000BF82                            
0000BF82                            loc_5608:
0000BF82 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000BF88 6700                       		beq.s	locret_5614
0000BF8A 5368 003A                  		subq.w	#1,$3A(a0)
0000BF8E                            
0000BF8E                            locret_5614:
0000BF8E 4E75                       		rts	
0000BF90                            ; ===========================================================================
0000BF90                            ; ---------------------------------------------------------------------------
0000BF90                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000BF90                            ; ---------------------------------------------------------------------------
0000BF90                            
0000BF90                            Obj89:					; XREF: Obj_Index
0000BF90 7000                       		moveq	#0,d0
0000BF92 1028 0024                  		move.b	$24(a0),d0
0000BF96 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
0000BF9A 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
0000BF9E                            ; ===========================================================================
0000BF9E 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000BFA0 0000                       		dc.w Obj89_Move-Obj89_Index
0000BFA2 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000BFA4                            ; ===========================================================================
0000BFA4                            
0000BFA4                            Obj89_Main:				; XREF: Obj89_Index
0000BFA4 5428 0024                  		addq.b	#2,$24(a0)
0000BFA8 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
0000BFAE 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000BFB4 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000BFBC 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000BFC2 117C 0000 0001             		move.b	#0,1(a0)
0000BFC8 117C 0000 0018             		move.b	#0,priority(a0)
0000BFCE                            
0000BFCE                            Obj89_Move:				; XREF: Obj89_Index
0000BFCE 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000BFD4 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000BFD6 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
0000BFDC 4EF9 0000 0000             		jmp	DisplaySprite
0000BFE2                            ; ===========================================================================
0000BFE2                            
0000BFE2                            Obj89_Delay:				; XREF: Obj89_Move
0000BFE2 5428 0024                  		addq.b	#2,$24(a0)
0000BFE6 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
0000BFEC                            
0000BFEC                            Obj89_GotoCredits:			; XREF: Obj89_Index
0000BFEC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000BFF0 6A00                       		bpl.s	Obj89_Display
0000BFF2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
0000BFF8                            
0000BFF8                            Obj89_Display:
0000BFF8 4EF9 0000 0000             		jmp	DisplaySprite
0000BFFE                            ; ===========================================================================
0000BFFE                            ; ---------------------------------------------------------------------------
0000BFFE                            ; Sprite mappings - Sonic on the ending	sequence
0000BFFE                            ; ---------------------------------------------------------------------------
0000BFFE                            Map_obj87:
0000BFFE                            	include '_maps\obj87.asm'
0000BFFE                            ; ---------------------------------------------------------------------------
0000BFFE                            ; Sprite mappings - Sonic on the ending	sequence
0000BFFE                            ; ---------------------------------------------------------------------------
0000BFFE 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
0000C002 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
0000C006 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
0000C00A 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000C00E 02                         byte_5690:	dc.b 2
0000C00F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
0000C014 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000C019 03                         byte_569B:	dc.b 3
0000C01A FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000C01F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
0000C024 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000C029 02                         byte_56AB:	dc.b 2
0000C02A EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000C02F FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
0000C034 02                         byte_56B6:	dc.b 2
0000C035 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000C03A FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
0000C03F 02                         byte_56C1:	dc.b 2
0000C040 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
0000C045 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000C04A 03                         byte_56CC:	dc.b 3
0000C04B EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
0000C050 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
0000C055 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000C05A 07                         byte_56DC:	dc.b 7
0000C05B B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
0000C060 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
0000C065 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000C06A CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
0000C06F DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000C074 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000C079 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
0000C07E 18                         byte_5700:	dc.b $18
0000C07F 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000C084 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000C089 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000C08E 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000C093 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000C098 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000C09D 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000C0A2 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000C0A7 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000C0AC B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000C0B1 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000C0B6 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000C0BB C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000C0C0 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000C0C5 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000C0CA D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000C0CF D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000C0D4 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000C0D9 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000C0DE E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000C0E3 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
0000C0E8 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000C0ED F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000C0F2 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
0000C0F8 00                         		even
0000C0F8 00                         		even
0000C0F8                            
0000C0F8                            ; ---------------------------------------------------------------------------
0000C0F8                            ; Sprite mappings - chaos emeralds on the ending sequence
0000C0F8                            ; ---------------------------------------------------------------------------
0000C0F8                            Map_obj88:
0000C0F8                            	include '_maps\obj88.asm'
0000C0F8                            ; ---------------------------------------------------------------------------
0000C0F8                            ; Sprite mappings - chaos emeralds on the ending sequence
0000C0F8                            ; ---------------------------------------------------------------------------
0000C0F8 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
0000C0FC 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
0000C100 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
0000C104 0000                       		dc.w byte_57AC-Map_obj88
0000C106 01                         byte_5788:	dc.b 1
0000C107 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C10C 01                         byte_578E:	dc.b 1
0000C10D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000C112 01                         byte_5794:	dc.b 1
0000C113 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
0000C118 01                         byte_579A:	dc.b 1
0000C119 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000C11E 01                         byte_57A0:	dc.b 1
0000C11F F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
0000C124 01                         byte_57A6:	dc.b 1
0000C125 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0000C12A 01                         byte_57AC:	dc.b 1
0000C12B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0000C130                            		even
0000C130                            		even
0000C130                            
0000C130                            ; ---------------------------------------------------------------------------
0000C130                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000C130                            ; ---------------------------------------------------------------------------
0000C130                            Map_obj89:
0000C130                            	include '_maps\obj89.asm'
0000C130                            ; ---------------------------------------------------------------------------
0000C130                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000C130                            ; ---------------------------------------------------------------------------
0000C130 0000                       		dc.w byte_57B4-Map_obj89
0000C132 03                         byte_57B4:	dc.b 3
0000C133 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
0000C138 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000C13D F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
0000C142                            		even
0000C142                            		even
0000C142                            
0000C142                            ; ===========================================================================
0000C142                            ; ---------------------------------------------------------------------------
0000C142                            ; Credits ending sequence
0000C142                            ; ---------------------------------------------------------------------------
0000C142                            
0000C142                            Credits:				; XREF: GameModeArray
0000C142 6100 0000                  		bsr.w	Jmpto_ClearPLC
0000C146 6100 0000                  		bsr.w	Jmpto_Pal_FadeFrom
0000C14A 4DF9 00C0 0004             		lea	($C00004).l,a6
0000C150 3CBC 8004                  		move.w	#$8004,(a6)
0000C154 3CBC 8230                  		move.w	#$8230,(a6)
0000C158 3CBC 8407                  		move.w	#$8407,(a6)
0000C15C 3CBC 9001                  		move.w	#$9001,(a6)
0000C160 3CBC 9200                  		move.w	#$9200,(a6)
0000C164 3CBC 8B03                  		move.w	#$8B03,(a6)
0000C168 3CBC 8720                  		move.w	#$8720,(a6)
0000C16C 4238 F64E                  		clr.b	($FFFFF64E).w
0000C170 6100 0000                  		bsr.w	Jmpto_ClearScreen
0000C174 43F8 D000                  		lea	($FFFFD000).w,a1
0000C178 7000                       		moveq	#0,d0
0000C17A 323C 07FF                  		move.w	#$7FF,d1
0000C17E                            
0000C17E                            Cred_ClrObjRam:
0000C17E 22C0                       		move.l	d0,(a1)+
0000C180 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
0000C184                            
0000C184 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0000C18E 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
0000C194 6100 0000                  		bsr.w	Jmpto_NemDec
0000C198 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000C19C 7000                       		moveq	#0,d0
0000C19E 323C 001F                  		move.w	#$1F,d1
0000C1A2                            
0000C1A2                            Cred_ClrPallet:
0000C1A2 22C0                       		move.l	d0,(a1)+
0000C1A4 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000C1A8                            
0000C1A8 7003                       		moveq	#3,d0
0000C1AA 6100 0000                  		bsr.w	Jmpto_Palload1	; load Sonic's pallet
0000C1AE                            ;		move.b	#$8A,($FFFFD080).w ; load credits object
0000C1AE 4EB9 0000 0000             		jsr	Credits_MapLoad
0000C1B4 4EB9 0000 0000             		jsr	ObjectsLoad
0000C1BA 4EB9 0000 0000             		jsr	BuildSprites
0000C1C0 6100 0000                  		bsr.w	EndingDemoLoad
0000C1C4 7000                       		moveq	#0,d0
0000C1C6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C1CA E948                       		lsl.w	#4,d0
0000C1CC 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
0000C1D2 45F2 0000                  		lea	(a2,d0.w),a2
0000C1D6 7000                       		moveq	#0,d0
0000C1D8 1012                       		move.b	(a2),d0
0000C1DA 6700                       		beq.s	loc_5862
0000C1DC 6100 0000                  		bsr.w	Jmpto_LoadPLC		; load level patterns
0000C1E0                            
0000C1E0                            loc_5862:
0000C1E0 7001                       		moveq	#1,d0
0000C1E2 6100 0000                  		bsr.w	Jmpto_LoadPLC		; load standard	level patterns
0000C1E6 31FC 0078 FC20             		move.w	#120,($FFFFFC20).w ; display a credit for 2 seconds
0000C1EC 6100 0000                  		bsr.w	Jmpto_Pal_FadeTo
0000C1F0                            
0000C1F0                            Cred_WaitLoop:
0000C1F0 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000C1F6 6100 CB7A                  		bsr.w	DelayProgram
0000C1FA 6100 0000                  		bsr.w	Jmpto_RunPLC_RAM
0000C1FE 4A78 FC20                  		tst.w	($FFFFFC20).w	; have 2 seconds elapsed?
0000C202 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
0000C204 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
0000C208 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
0000C20A 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
0000C210 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
0000C214 4E75                       		rts	
0000C216                            
0000C216                            ; ---------------------------------------------------------------------------
0000C216                            ; Ending sequence demo loading subroutine
0000C216                            ; ---------------------------------------------------------------------------
0000C216                            
0000C216                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C216                            
0000C216                            
0000C216                            EndingDemoLoad:				; XREF: Credits
0000C216 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000C21A 0240 000F                  		andi.w	#$F,d0
0000C21E D040                       		add.w	d0,d0
0000C220 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
0000C224 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
0000C228 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
0000C22C 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
0000C232 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
0000C234 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
0000C23A 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
0000C240 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000C246 7000                       		moveq	#0,d0
0000C248 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000C24C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000C250 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000C254 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
0000C258 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
0000C25E 6600                       		bne.s	EndDemo_Exit	; if not, branch
0000C260 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
0000C266 45F8 FE30                  		lea	($FFFFFE30).w,a2
0000C26A 303C 0008                  		move.w	#8,d0
0000C26E                            
0000C26E                            EndDemo_LampLoad:
0000C26E 24D9                       		move.l	(a1)+,(a2)+
0000C270 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
0000C274                            
0000C274                            EndDemo_Exit:
0000C274 4E75                       		rts	
0000C276                            ; End of function EndingDemoLoad
0000C276                            
0000C276                            ; ===========================================================================
0000C276                            ; ---------------------------------------------------------------------------
0000C276                            ; Levels used in the end sequence demos
0000C276                            ; ---------------------------------------------------------------------------
0000C276                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
0000C286                            
0000C286                            ; ---------------------------------------------------------------------------
0000C286                            ; Lamppost variables in the end sequence demo (Star Light Zone)
0000C286                            ; ---------------------------------------------------------------------------
0000C286                            EndDemo_LampVar:
0000C286 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
0000C288 0A00 062C 000D             		dc.w $A00, $62C, $D
0000C28E 0000 0000                  		dc.l 0
0000C292 0000                       		dc.b 0,	0
0000C294 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
0000C2A8 0101                       		dc.b 1,	1
0000C2AA                            ; ===========================================================================
0000C2AA                            ; ---------------------------------------------------------------------------
0000C2AA                            ; "TRY AGAIN" and "END"	screens
0000C2AA                            ; ---------------------------------------------------------------------------
0000C2AA                            
0000C2AA                            TryAgainEnd:				; XREF: Credits
0000C2AA 6100 0000                  		bsr.w	Jmpto_ClearPLC
0000C2AE 6100 0000                  		bsr.w	Jmpto_Pal_FadeFrom
0000C2B2 4DF9 00C0 0004             		lea	($C00004).l,a6
0000C2B8 3CBC 8004                  		move.w	#$8004,(a6)
0000C2BC 3CBC 8230                  		move.w	#$8230,(a6)
0000C2C0 3CBC 8407                  		move.w	#$8407,(a6)
0000C2C4 3CBC 9001                  		move.w	#$9001,(a6)
0000C2C8 3CBC 9200                  		move.w	#$9200,(a6)
0000C2CC 3CBC 8B03                  		move.w	#$8B03,(a6)
0000C2D0 3CBC 8720                  		move.w	#$8720,(a6)
0000C2D4 4238 F64E                  		clr.b	($FFFFF64E).w
0000C2D8 6100 0000                  		bsr.w	Jmpto_ClearScreen
0000C2DC 43F8 D000                  		lea	($FFFFD000).w,a1
0000C2E0 7000                       		moveq	#0,d0
0000C2E2 323C 07FF                  		move.w	#$7FF,d1
0000C2E6                            
0000C2E6                            TryAg_ClrObjRam:
0000C2E6 22C0                       		move.l	d0,(a1)+
0000C2E8 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000C2EC                            
0000C2EC 701D                       		moveq	#$1D,d0
0000C2EE 6100 0000                  		bsr.w	Jmpto_RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
0000C2F2 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000C2F6 7000                       		moveq	#0,d0
0000C2F8 323C 001F                  		move.w	#$1F,d1
0000C2FC                            
0000C2FC                            TryAg_ClrPallet:
0000C2FC 22C0                       		move.l	d0,(a1)+
0000C2FE 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
0000C302                            
0000C302 7013                       		moveq	#$13,d0
0000C304 6100 0000                  		bsr.w	Jmpto_Palload1	; load ending pallet
0000C308 4278 FBC0                  		clr.w	($FFFFFBC0).w
0000C30C 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
0000C312 4EB9 0000 0000             		jsr	ObjectsLoad
0000C318 4EB9 0000 0000             		jsr	BuildSprites
0000C31E 31FC 0708 FC20             		move.w	#1800,($FFFFFC20).w ; show screen for 30 seconds
0000C324 6100 0000                  		bsr.w	Jmpto_Pal_FadeTo
0000C328                            
0000C328                            ; ---------------------------------------------------------------------------
0000C328                            ; "TRY AGAIN" and "END"	screen main loop
0000C328                            ; ---------------------------------------------------------------------------
0000C328                            TryAg_MainLoop:
0000C328 6100 0000                  		bsr.w	Jmpto_PauseGame
0000C32C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000C332 6100 CA3E                  		bsr.w	DelayProgram
0000C336 4EB9 0000 0000             		jsr	ObjectsLoad
0000C33C 4EB9 0000 0000             		jsr	BuildSprites
0000C342 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000C348 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000C34A 4A78 FC20                  		tst.w	($FFFFFC20).w	; has 30 seconds elapsed?
0000C34E 6700                       		beq.s	TryAg_Exit	; if yes, branch
0000C350 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
0000C356 67D0                       		beq.s	TryAg_MainLoop
0000C358                            
0000C358                            TryAg_Exit:
0000C358 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000C35E 4E75                       		rts	
0000C360                            
0000C360                            ; ===========================================================================
0000C360                            ; ---------------------------------------------------------------------------
0000C360                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
0000C360                            ; ---------------------------------------------------------------------------
0000C360                            
0000C360                            Obj8B:					; XREF: Obj_Index
0000C360 7000                       		moveq	#0,d0
0000C362 1028 0024                  		move.b	$24(a0),d0
0000C366 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000C36A 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
0000C36E 4EF9 0000 0000             		jmp	DisplaySprite
0000C374                            ; ===========================================================================
0000C374 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
0000C376 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000C378 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000C37A 0000                       		dc.w loc_5A8E-Obj8B_Index
0000C37C                            ; ===========================================================================
0000C37C                            
0000C37C                            Obj8B_Main:				; XREF: Obj8B_Index
0000C37C 5428 0024                  		addq.b	#2,$24(a0)
0000C380 317C 0120 0008             		move.w	#$120,8(a0)
0000C386 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000C38C 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
0000C394 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000C39A 117C 0000 0001             		move.b	#0,1(a0)
0000C3A0 317C 0100 0018             		move.w	#$100,priority(a0)
0000C3A6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000C3AC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000C3B2 6700                       		beq.s	Obj8B_Animate	; if yes, branch
0000C3B4                            ;		move.b	#$8A,($FFFFD0C0).w ; load credits object
0000C3B4 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
0000C3BA 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
0000C3C0 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
0000C3C6                            
0000C3C6                            Obj8B_Animate:				; XREF: Obj8B_Index
0000C3C6 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
0000C3CC 4EF9 0000 0000             		jmp	AnimateSprite
0000C3D2                            ; ===========================================================================
0000C3D2                            
0000C3D2                            Obj8B_Juggle:				; XREF: Obj8B_Index
0000C3D2 5428 0024                  		addq.b	#2,$24(a0)
0000C3D6 7002                       		moveq	#2,d0
0000C3D8 0828 0000 001C             		btst	#0,$1C(a0)
0000C3DE 6700                       		beq.s	loc_5A6A
0000C3E0 4440                       		neg.w	d0
0000C3E2                            
0000C3E2                            loc_5A6A:
0000C3E2 43F8 D800                  		lea	($FFFFD800).w,a1
0000C3E6 7205                       		moveq	#5,d1
0000C3E8                            
0000C3E8                            loc_5A70:
0000C3E8 1340 003E                  		move.b	d0,$3E(a1)
0000C3EC 3400                       		move.w	d0,d2
0000C3EE E742                       		asl.w	#3,d2
0000C3F0 D529 0026                  		add.b	d2,$26(a1)
0000C3F4 43E9 0040                  		lea	$40(a1),a1
0000C3F8 51C9 FFEE                  		dbf	d1,loc_5A70
0000C3FC 5228 001A                  		addq.b	#1,$1A(a0)
0000C400 317C 0070 0030             		move.w	#112,$30(a0)
0000C406                            
0000C406                            loc_5A8E:				; XREF: Obj8B_Index
0000C406 5368 0030                  		subq.w	#1,$30(a0)
0000C40A 6A00                       		bpl.s	locret_5AA0
0000C40C 0868 0000 001C             		bchg	#0,$1C(a0)
0000C412 117C 0002 0024             		move.b	#2,$24(a0)
0000C418                            
0000C418                            locret_5AA0:
0000C418 4E75                       		rts	
0000C41A                            ; ===========================================================================
0000C41A                            Ani_obj8B:
0000C41A                            	include '_anim\obj8B.asm'
0000C41A                            ; ---------------------------------------------------------------------------
0000C41A                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
0000C41A                            ; ---------------------------------------------------------------------------
0000C41A 0000                       		dc.w byte_5AA8-Ani_obj8B
0000C41C 0000                       		dc.w byte_5AAC-Ani_obj8B
0000C41E 0000                       		dc.w byte_5AB0-Ani_obj8B
0000C420 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
0000C424 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
0000C428 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
0000C43A                            		even
0000C43A                            		even
0000C43A                            
0000C43A                            ; ===========================================================================
0000C43A                            ; ---------------------------------------------------------------------------
0000C43A                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
0000C43A                            ; ---------------------------------------------------------------------------
0000C43A                            
0000C43A                            Obj8C:					; XREF: Obj_Index
0000C43A 7000                       		moveq	#0,d0
0000C43C 1028 0024                  		move.b	$24(a0),d0
0000C440 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
0000C444 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
0000C448 4EF9 0000 0000             		jmp	DisplaySprite
0000C44E                            ; ===========================================================================
0000C44E 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
0000C450 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000C452                            ; ===========================================================================
0000C452                            
0000C452                            Obj8C_Main:				; XREF: Obj8C_Index
0000C452 2248                       		movea.l	a0,a1
0000C454 7400                       		moveq	#0,d2
0000C456 7600                       		moveq	#0,d3
0000C458 7205                       		moveq	#5,d1
0000C45A 9238 FE57                  		sub.b	($FFFFFE57).w,d1
0000C45E                            
0000C45E                            Obj8C_MakeEms:				; XREF: loc_5B42
0000C45E 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000C462 5429 0024                  		addq.b	#2,$24(a1)
0000C466 237C 0000 C0F8 0004        		move.l	#Map_obj88,4(a1)
0000C46E 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000C474 137C 0000 0001             		move.b	#0,1(a1)
0000C47A 337C 0080 0018             		move.w	#$80,priority(a1)
0000C480 337C 0104 0008             		move.w	#$104,8(a1)
0000C486 337C 0120 0038             		move.w	#$120,$38(a1)
0000C48C 337C 00EC 000A             		move.w	#$EC,$A(a1)
0000C492 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000C498 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000C49E 47F8 FE58                  		lea	($FFFFFE58).w,a3
0000C4A2                            
0000C4A2                            Obj8C_ChkEms:
0000C4A2 7000                       		moveq	#0,d0
0000C4A4 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000C4A8 5340                       		subq.w	#1,d0
0000C4AA 6500                       		bcs.s	loc_5B42
0000C4AC                            
0000C4AC                            Obj8C_ChkEmLoop:
0000C4AC B433 0000                  		cmp.b	(a3,d0.w),d2
0000C4B0 6600                       		bne.s	loc_5B3E
0000C4B2 5202                       		addq.b	#1,d2
0000C4B4 60EC                       		bra.s	Obj8C_ChkEms
0000C4B6                            ; ===========================================================================
0000C4B6                            
0000C4B6                            loc_5B3E:
0000C4B6 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000C4BA                            
0000C4BA                            loc_5B42:
0000C4BA 1342 001A                  		move.b	d2,$1A(a1)
0000C4BE 5229 001A                  		addq.b	#1,$1A(a1)
0000C4C2 5202                       		addq.b	#1,d2
0000C4C4 137C 0080 0026             		move.b	#$80,$26(a1)
0000C4CA 1343 001E                  		move.b	d3,$1E(a1)
0000C4CE 1343 001F                  		move.b	d3,$1F(a1)
0000C4D2 0643 000A                  		addi.w	#$A,d3
0000C4D6 43E9 0040                  		lea	$40(a1),a1
0000C4DA 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
0000C4DE                            
0000C4DE                            Obj8C_Move:				; XREF: Obj8C_Index
0000C4DE 4A68 003E                  		tst.w	$3E(a0)
0000C4E2 6700                       		beq.s	locret_5BBA
0000C4E4 4A28 001E                  		tst.b	$1E(a0)
0000C4E8 6700                       		beq.s	loc_5B78
0000C4EA 5328 001E                  		subq.b	#1,$1E(a0)
0000C4EE 6600                       		bne.s	loc_5B80
0000C4F0                            
0000C4F0                            loc_5B78:
0000C4F0 3028 003E                  		move.w	$3E(a0),d0
0000C4F4 D168 0026                  		add.w	d0,$26(a0)
0000C4F8                            
0000C4F8                            loc_5B80:
0000C4F8 1028 0026                  		move.b	$26(a0),d0
0000C4FC 6700                       		beq.s	loc_5B8C
0000C4FE 0C00 0080                  		cmpi.b	#$80,d0
0000C502 6600                       		bne.s	loc_5B96
0000C504                            
0000C504                            loc_5B8C:
0000C504 4268 003E                  		clr.w	$3E(a0)
0000C508 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0000C50E                            
0000C50E                            loc_5B96:
0000C50E 4EB9 0000 8DA4             		jsr	(CalcSine).l
0000C514 7800                       		moveq	#0,d4
0000C516 1828 003C                  		move.b	$3C(a0),d4
0000C51A C3C4                       		muls.w	d4,d1
0000C51C E081                       		asr.l	#8,d1
0000C51E C1C4                       		muls.w	d4,d0
0000C520 E080                       		asr.l	#8,d0
0000C522 D268 0038                  		add.w	$38(a0),d1
0000C526 D068 003A                  		add.w	$3A(a0),d0
0000C52A 3141 0008                  		move.w	d1,8(a0)
0000C52E 3140 000A                  		move.w	d0,$A(a0)
0000C532                            
0000C532                            locret_5BBA:
0000C532 4E75                       		rts	
0000C534                            ; ===========================================================================
0000C534                            ; ---------------------------------------------------------------------------
0000C534                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000C534                            ; ---------------------------------------------------------------------------
0000C534                            Map_obj8B:
0000C534                            	include '_maps\obj8B.asm'
0000C534                            ; ---------------------------------------------------------------------------
0000C534                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000C534                            ; ---------------------------------------------------------------------------
0000C534 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
0000C538 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000C53C 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
0000C540 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000C544 08                         byte_5BCC:	dc.b 8
0000C545 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000C54A F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000C54F E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000C554 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
0000C559 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000C55E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000C563 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000C568 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000C56D 08                         byte_5BF5:	dc.b 8
0000C56E E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000C573 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000C578 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000C57D F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000C582 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000C587 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000C58C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000C591 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000C596 08                         byte_5C1E:	dc.b 8
0000C597 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000C59C F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000C5A1 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000C5A6 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000C5AB 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000C5B0 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000C5B5 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000C5BA 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000C5BF 08                         byte_5C47:	dc.b 8
0000C5C0 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000C5C5 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000C5CA E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000C5CF F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
0000C5D4 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000C5D9 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000C5DE 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000C5E3 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000C5E8 0C                         byte_5C70:	dc.b $C
0000C5E9 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
0000C5EE F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
0000C5F3 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
0000C5F8 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
0000C5FD ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000C602 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000C607 0504 0835 00               		dc.b 5,	4, 8, $35, 0
0000C60C 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
0000C611 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000C616 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
0000C61B 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000C620 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000C625 0A                         byte_5CAD:	dc.b $A
0000C626 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
0000C62B DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
0000C630 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000C635 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000C63A DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000C63F F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000C644 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000C649 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000C64E 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000C653 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
0000C658 0A                         byte_5CE0:	dc.b $A
0000C659 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000C65E E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000C663 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000C668 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000C66D E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000C672 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000C677 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000C67C 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000C681 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000C686 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000C68B 0C                         byte_5D13:	dc.b $C
0000C68C F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000C691 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000C696 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000C69B 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000C6A0 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
0000C6A5 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000C6AA 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000C6AF 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
0000C6B4 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000C6B9 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000C6BE 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000C6C3 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000C6C8                            		even
0000C6C8                            		even
0000C6C8                            
0000C6C8                            ; ---------------------------------------------------------------------------
0000C6C8                            ; Ending sequence demos
0000C6C8                            ; ---------------------------------------------------------------------------
0000C6C8                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000C6F6                            		even
0000C6F6                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000C736                            		even
0000C736                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000C766                            		even
0000C766                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000C796                            		even
0000C796                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000C7B6                            		even
0000C7B6                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000C7D6                            		even
0000C7D6                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000C806                            		even
0000C806                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000C836                            		even
0000C836                            
0000C836                            Jmpto_KosDec:
0000C836 4EF8 3A26                  	jmp	KosDec
0000C83A                            Jmpto_Palload1:
0000C83A 4EF8 47FA                  	jmp	Palload1
0000C83E                            Jmpto_PlaySFX:
0000C83E 4EF8 3212                  	jmp	PlaySound
0000C842                            Jmpto_PlayMus:
0000C842 4EF8 325C                  	jmp	PlaySound_Special
0000C846                            Jmpto_Pal_FadeFrom:
0000C846 4EF8 4528                  	jmp	Pal_FadeFrom
0000C84A                            Jmpto_Pal_FadeTo:	
0000C84A 4EF8 446E                  	jmp	Pal_FadeTo
0000C84E                            Jmpto_Pal_MakeWhite:
0000C84E 4EF8 45AC                  	jmp	Pal_MakeWhite
0000C852                            Jmpto_Pal_ToWhite:
0000C852 4EF8 469A                  	jmp	Pal_ToWhite
0000C856                            Jmpto_ClearScreen:
0000C856 4EF8 3084                  	jmp	ClearScreen
0000C85A                            Jmpto_RunPLC_ROM:
0000C85A 4EF8 386C                  	jmp	RunPLC_ROM
0000C85E                            Jmpto_RunPLC_RAM:
0000C85E 4EF8 3762                  	jmp	RunPLC_RAM
0000C862                            Jmpto_NemDec:
0000C862 4EF8 3596                  	jmp	NemDec
0000C866                            Jmpto_LoadPLC:
0000C866 4EF8 36F6                  	jmp	LoadPLC
0000C86A                            Jmpto_ClearPLC:
0000C86A 4EF8 3754                  	jmp	ClearPLC
0000C86E                            Jmpto_PauseGame:
0000C86E 4EF8 3310                  	jmp	PauseGame
0000C872                            Jmpto_PalCycle_Load:
0000C872 4EF8 3C46                  	jmp	PalCycle_Load
0000C876                            ; ---------------------------------------------------------------------------
0000C876                            ; Subroutine to	load level boundaries and start	locations
0000C876                            ; ---------------------------------------------------------------------------
0000C876                            
0000C876                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C876                            
0000C876                            
0000C876                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000C876 7000                       		moveq	#0,d0
0000C878 11C0 F740                  		move.b	d0,($FFFFF740).w
0000C87C 11C0 F741                  		move.b	d0,($FFFFF741).w
0000C880 11C0 F746                  		move.b	d0,($FFFFF746).w
0000C884 11C0 F748                  		move.b	d0,($FFFFF748).w
0000C888 11C0 F742                  		move.b	d0,($FFFFF742).w
0000C88C 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000C890 ED08                       		lsl.b	#6,d0
0000C892 E848                       		lsr.w	#4,d0
0000C894 3200                       		move.w	d0,d1
0000C896 D040                       		add.w	d0,d0
0000C898 D041                       		add.w	d1,d0
0000C89A 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000C89E 3018                       		move.w	(a0)+,d0
0000C8A0 31C0 F730                  		move.w	d0,($FFFFF730).w
0000C8A4 2018                       		move.l	(a0)+,d0
0000C8A6 21C0 F728                  		move.l	d0,($FFFFF728).w
0000C8AA 21C0 F720                  		move.l	d0,($FFFFF720).w
0000C8AE 2018                       		move.l	(a0)+,d0
0000C8B0 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000C8B4 21C0 F724                  		move.l	d0,($FFFFF724).w
0000C8B8 3038 F728                  		move.w	($FFFFF728).w,d0
0000C8BC 0640 0240                  		addi.w	#$240,d0
0000C8C0 31C0 F732                  		move.w	d0,($FFFFF732).w
0000C8C4 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000C8CA 3018                       		move.w	(a0)+,d0
0000C8CC 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000C8D0 6000 0000                  		bra.w	LevSz_ChkLamp
0000C8D4                            ; ===========================================================================
0000C8D4                            ; ---------------------------------------------------------------------------
0000C8D4                            ; Level size array and ending start location array
0000C8D4                            ; ---------------------------------------------------------------------------
0000C8D4                            LevelSizeArray:	incbin	misc\lvl_size.bin
0000CA24                            		even
0000CA24                            
0000CA24                            EndingStLocArray:
0000CA24                            		incbin	misc\sloc_end.bin
0000CA44                            		even
0000CA44                            
0000CA44                            ; ===========================================================================
0000CA44                            
0000CA44                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000CA44 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
0000CA48 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000CA4A 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000CA50 3238 D008                  		move.w	($FFFFD008).w,d1
0000CA54 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000CA58                            		;---------------------
0000CA58                            ; Fix the Frame Counter Bug   //   when start by a Lamppost not have this bug,
0000CA58                                              ; but after correct the main bug, you see zeros in place of the numbers
0000CA58                                ;  movem.l   d0-a6,-(sp)
0000CA58                                  ;move.l   #$5E400003,d0
0000CA58                                  ;moveq   #0,d1
0000CA58                                 ; move.b   ($FFFFFE23).w,d1 ; load   minutes
0000CA58                                ;  jsr   Hud_Mins
0000CA58                               ;   move.l   #$5EC00003,d0
0000CA58                              ;    moveq   #0,d1
0000CA58                             ;     move.b   ($FFFFFE24).w,d1 ; load   seconds
0000CA58                            ;	cmpi.b	#59,d1
0000CA58                            ;	blo.w 	@cappedsecs
0000CA58                            ;	move
0000CA58                            	
0000CA58                            ;	jsr   Hud_Secs
0000CA58                            ;      movem.l   (sp)+,d0-a6
0000CA58                            ;---------------------
0000CA58 6000                       		bra.s	loc_60D0
0000CA5A                            ; ===========================================================================
0000CA5A                            
0000CA5A                            TitleLoc:	;	x_pos, y_pos
0000CA5A 0050 03B0                                  dc.w	$50, $3B0
0000CA5E                            
0000CA5E                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000CA5E 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000CA62 11FC 0000 FE19             		move.b	#0,($FFFFFE19).w ; clear Super Sonic Flag
0000CA68 ED08                       		lsl.b	#6,d0
0000CA6A E848                       		lsr.w	#4,d0
0000CA6C 43FA FFEC                  		lea	TitleLoc(pc),a1			; Load Title Screen spawn location
0000CA70 0C38 0004 F600             		cmpi.b	#$4,(Game_Mode).w	; Are we on the Title Screen?
0000CA76 6700                       		beq.s	LevSz_SonicPos			; If so, set the start position using the loaded spawn location
0000CA78 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000CA7C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000CA80 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000CA82 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000CA86 5340                       		subq.w	#1,d0
0000CA88 E548                       		lsl.w	#2,d0
0000CA8A                            		;lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000CA8A                            
0000CA8A                            LevSz_SonicPos:
0000CA8A 7200                       		moveq	#0,d1
0000CA8C 3219                       		move.w	(a1)+,d1
0000CA8E 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000CA92 7000                       		moveq	#0,d0
0000CA94 3011                       		move.w	(a1),d0
0000CA96 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
0000CA9A                            
0000CA9A                            loc_60D0:				; XREF: LevSz_ChkLamp
0000CA9A 4278 F7A8                  	clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
0000CA9E 45F8 CB00                  	lea	($FFFFCB00).w,a2	; load the tracking array into a2
0000CAA2 743F                       	moveq	#63,d2				; begin a 64-step loop
0000CAA4                            @looppoint:
0000CAA4 34C1                       	move.w	d1,(a2)+			; fill in X
0000CAA6 34C0                       	move.w	d0,(a2)+			; fill in Y
0000CAA8 51CA FFFA                  	dbf	d2,@looppoint		; loop
0000CAAC 0441 00A0                  	subi.w	#$A0,d1
0000CAB0 6400                       	bcc.s	loc_60D8
0000CAB2 7200                       	moveq	#0,d1
0000CAB4                            
0000CAB4                            loc_60D8:
0000CAB4 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000CAB8 B242                       		cmp.w	d2,d1
0000CABA 6500                       		bcs.s	loc_60E2
0000CABC 3202                       		move.w	d2,d1
0000CABE                            
0000CABE                            loc_60E2:
0000CABE 31C1 F700                  		move.w	d1,($FFFFF700).w
0000CAC2 0440 0060                  		subi.w	#$60,d0
0000CAC6 6400                       		bcc.s	loc_60EE
0000CAC8 7000                       		moveq	#0,d0
0000CACA                            
0000CACA                            loc_60EE:
0000CACA B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000CACE 6D00                       		blt.s	loc_60F8
0000CAD0 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000CAD4                            
0000CAD4                            loc_60F8:
0000CAD4 31C0 F704                  		move.w	d0,($FFFFF704).w
0000CAD8 6100 0000                  		bsr.w	BgScrollSpeed
0000CADC 6000 0000                  		bra.w	LevSz_Unk
0000CAE0                            ; ===========================================================================
0000CAE0                            ; ---------------------------------------------------------------------------
0000CAE0                            ; Sonic	start location array
0000CAE0                            ; ---------------------------------------------------------------------------
0000CAE0                            StartLocArray:
0000CAE0                            		incbin	misc\sloc_lev.bin
0000CB50                            		even
0000CB50                            
0000CB50                            ; ---------------------------------------------------------------------------
0000CB50                            ; Which	256x256	tiles contain loops or roll-tunnels
0000CB50                            ; ---------------------------------------------------------------------------
0000CB50                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000CB50                            ; loop,	loop, tunnel, tunnel
0000CB50                            ; ---------------------------------------------------------------------------
0000CB50                            LoopTileNums:	incbin	misc\loopnums.bin
0000CB6C                            		even
0000CB6C                            
0000CB6C                            ; ===========================================================================
0000CB6C                            
0000CB6C                            LevSz_Unk:				; XREF: LevelSizeLoad
0000CB6C 7000                       		moveq	#0,d0
0000CB6E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB72 E508                       		lsl.b	#2,d0
0000CB74 21FB 00DA F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000CB7A 7000                       		moveq	#0,d0
0000CB7C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB80 E748                       		lsl.w	#3,d0
0000CB82 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000CB86 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000CB8A 24D9                       		move.l	(a1)+,(a2)+
0000CB8C 24D9                       		move.l	(a1)+,(a2)+
0000CB8E 4E75                       		rts	
0000CB90                            ; End of function LevelSizeLoad
0000CB90                            
0000CB90                            ; ===========================================================================
0000CB90 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000CB98 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CBA0 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CBA8 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CBB0 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CBB8 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CBC0 0070 0100 0100 0100        		dc.l $700100, $1000100
0000CBC8                            
0000CBC8                            ; ---------------------------------------------------------------------------
0000CBC8                            ; Subroutine to	set scroll speed of some backgrounds
0000CBC8                            ; ---------------------------------------------------------------------------
0000CBC8                            
0000CBC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CBC8                            
0000CBC8                            
0000CBC8                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000CBC8 4A38 FE30                  		tst.b	($FFFFFE30).w
0000CBCC 6600                       		bne.s	loc_6206
0000CBCE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CBD2 31C0 F714                  		move.w	d0,($FFFFF714).w
0000CBD6 31C1 F708                  		move.w	d1,($FFFFF708).w
0000CBDA 31C1 F710                  		move.w	d1,($FFFFF710).w
0000CBDE 31C1 F718                  		move.w	d1,($FFFFF718).w
0000CBE2                            
0000CBE2                            loc_6206:
0000CBE2 7400                       		moveq	#0,d2
0000CBE4 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000CBE8 D442                       		add.w	d2,d2
0000CBEA 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000CBEE 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000CBF2                            ; End of function BgScrollSpeed
0000CBF2                            
0000CBF2                            ; ===========================================================================
0000CBF2 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000CBF6 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000CBFA 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000CBFE 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_ABZ-BgScroll_Index
0000CC02                            ; ===========================================================================
0000CC02                             
0000CC02                            BgScroll_ABZ:				; XREF: BgScroll_Index
0000CC02 4E75                       		rts	
0000CC04                            ; ===========================================================================
0000CC04                            
0000CC04                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000CC04 42B8 F708                  		clr.l	($FFFFF708).w
0000CC08 42B8 F70C                  		clr.l	($FFFFF70C).w
0000CC0C 42B8 F714                  		clr.l	($FFFFF714).w
0000CC10 42B8 F71C                  		clr.l	($FFFFF71C).w
0000CC14 45F8 A800                  		lea	($FFFFA800).w,a2
0000CC18 429A                       		clr.l	(a2)+
0000CC1A 429A                       		clr.l	(a2)+
0000CC1C 429A                       		clr.l	(a2)+
0000CC1E 4E75                       		rts 
0000CC20                            ; ===========================================================================
0000CC20                             
0000CC20                            BgScroll_LZ:				; XREF: BgScroll_Index
0000CC20 E280                       		asr.l	#1,d0
0000CC22 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CC26 4E75                       		rts	
0000CC28                            ; ===========================================================================
0000CC28                             
0000CC28                            BgScroll_MZ:				; XREF: BgScroll_Index
0000CC28 4E75                       		rts	
0000CC2A                            ; ===========================================================================
0000CC2A                             
0000CC2A                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000CC2A E280                       		asr.l	#1,d0
0000CC2C 0640 00C0                  		addi.w	#$C0,d0
0000CC30 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CC34 42B8 F708                  		clr.l	($FFFFF708).w
0000CC38 4E75                       		rts	
0000CC3A                            ; ===========================================================================
0000CC3A                             
0000CC3A                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000CC3A E980                       		asl.l	#4,d0
0000CC3C 2400                       		move.l	d0,d2
0000CC3E E380                       		asl.l	#1,d0
0000CC40 D082                       		add.l	d2,d0
0000CC42 E080                       		asr.l	#8,d0
0000CC44 5240                       		addq.w	#1,d0
0000CC46 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CC4A 42B8 F708                  		clr.l	($FFFFF708).w
0000CC4E 4E75                       		rts	
0000CC50                            ; ===========================================================================
0000CC50                             
0000CC50                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000CC50 0240 07F8                  		andi.w	#$7F8,d0
0000CC54 E640                       		asr.w	#3,d0
0000CC56 5240                       		addq.w	#1,d0
0000CC58 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CC5C 4E75                       		rts	
0000CC5E                            ; ===========================================================================
0000CC5E                             
0000CC5E                            BgScroll_End:				; XREF: BgScroll_Index
0000CC5E 3038 F700                  		move.w	($FFFFF700).w,d0
0000CC62 E240                       		asr.w	#1,d0
0000CC64 31C0 F708                  		move.w	d0,($FFFFF708).w
0000CC68 31C0 F710                  		move.w	d0,($FFFFF710).w
0000CC6C E440                       		asr.w	#2,d0
0000CC6E 3200                       		move.w	d0,d1
0000CC70 D040                       		add.w	d0,d0
0000CC72 D041                       		add.w	d1,d0
0000CC74 31C0 F718                  		move.w	d0,($FFFFF718).w
0000CC78 42B8 F70C                  		clr.l	($FFFFF70C).w
0000CC7C 42B8 F714                  		clr.l	($FFFFF714).w
0000CC80 42B8 F71C                  		clr.l	($FFFFF71C).w
0000CC84 45F8 A800                  		lea	($FFFFA800).w,a2
0000CC88 429A                       		clr.l	(a2)+
0000CC8A 429A                       		clr.l	(a2)+
0000CC8C 429A                       		clr.l	(a2)+
0000CC8E 4E75                       		rts   
0000CC90                            ; ===========================================================================
0000CC90 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000CC96 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000CC9C 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000CCA2 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000CCA8 4E75                       		rts
0000CCAA                            
0000CCAA                            ; ---------------------------------------------------------------------------
0000CCAA                            ; Background layer deformation subroutines
0000CCAA                            ; ---------------------------------------------------------------------------
0000CCAA                            
0000CCAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CCAA                            
0000CCAA                            
0000CCAA                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000CCAA 4A38 F744                  		tst.b	($FFFFF744).w
0000CCAE 6700                       		beq.s	loc_628E
0000CCB0 4E75                       		rts	
0000CCB2                            ; ===========================================================================
0000CCB2                            
0000CCB2                            loc_628E:
0000CCB2 4278 F754                  		clr.w	($FFFFF754).w
0000CCB6 4278 F756                  		clr.w	($FFFFF756).w
0000CCBA 4278 F758                  		clr.w	($FFFFF758).w
0000CCBE 4278 F75A                  		clr.w	($FFFFF75A).w
0000CCC2 6100 0000                  		bsr.w	ScrollHoriz
0000CCC6 6100 0000                  		bsr.w	ScrollVertical
0000CCCA 6100 0000                  		bsr.w	DynScrResizeLoad
0000CCCE 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000CCD4 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000CCDA 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000CCE0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000CCE6 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000CCEC 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000CCF2 0C38 0004 F600             		cmpi.b	#4,(Game_Mode).w	;exit if on the Title
0000CCF8 6700                       		beq.s	DLE_NoChg
0000CCFA 0C38 0010 F600             		cmpi.b	#$10,(Game_Mode).w	;exit if in a Special Stage
0000CD00 6700                       		beq.s	DLE_NoChg
0000CD02                            ;		move.l	(Camera_X_pos).w,($FFFFFFC4).w
0000CD02                            ;		move.l	(Camera_Y_pos).w,($FFFFFFC8).w
0000CD02 7000                       		moveq	#0,d0
0000CD04 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CD08 D040                       		add.w	d0,d0
0000CD0A 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000CD0E 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000CD12                            		
0000CD12                            DLE_NoChg:
0000CD12 4E75                       		rts	
0000CD14                            ; End of function DeformBgLayer
0000CD14                            
0000CD14                            ; ===========================================================================
0000CD14                            ; ---------------------------------------------------------------------------
0000CD14                            ; Offset index for background layer deformation	code
0000CD14                            ; ---------------------------------------------------------------------------
0000CD14 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000CD18 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000CD1C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000CD20 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_ABZ-Deform_Index
0000CD24                            ; ---------------------------------------------------------------------------
0000CD24                            ; Green	Hill Zone background layer deformation code
0000CD24                            ; ---------------------------------------------------------------------------
0000CD24                            
0000CD24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CD24                            
0000CD24                            
0000CD24                            Deform_GHZ:
0000CD24 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000CD28 48C4                       		ext.l	d4
0000CD2A EB84                       		asl.l	#5,d4
0000CD2C 2204                       		move.l	d4,d1
0000CD2E E384                       		asl.l	#1,d4
0000CD30 D881                       		add.l	d1,d4
0000CD32 7C00                       		moveq	#0,d6
0000CD34 6100 0000                  		bsr.w	ScrollBlock6
0000CD38 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000CD3C 48C4                       		ext.l	d4
0000CD3E EF84                       		asl.l	#7,d4
0000CD40 7C00                       		moveq	#0,d6
0000CD42 6100 0000                  		bsr.w	ScrollBlock5
0000CD46 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning of buffer address to a1
0000CD4A                            
0000CD4A 3038 F700                  		move.w	($FFFFF700).w,d0	; load screen's X position
0000CD4E 4440                       		neg.w	d0			; negate (positive to negative)
0000CD50 4840                       		swap	d0			; send to the left side of d0
0000CD52 3038 F700                  		move.w	($FFFFF700).w,d0	; load screen's X position
0000CD56 4440                       		neg.w	d0			; negate (positive to negative)
0000CD58 E040                       		asr.w	#8,d0			; divide by 8 (Slow down the scroll position)
0000CD5A 323C 0078                  		move.w	#121-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000CD5E                            GHZ_DeformLoop_1:
0000CD5E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000CD60 51C9 FFFC                  		dbf	d1,GHZ_DeformLoop_1	; repeat d1 number of scanlines
0000CD64                            
0000CD64 3038 F700                  		move.w	($FFFFF700).w,d0	; load screen's X position
0000CD68 4440                       		neg.w	d0			; negate (positive to negative)
0000CD6A 4840                       		swap	d0			; send to the left side of d0
0000CD6C 3038 F700                  		move.w	($FFFFF700).w,d0	; load screen's X position
0000CD70 4440                       		neg.w	d0			; negate (positive to negative)
0000CD72 E240                       		asr.w	#1,d0			; divide by 1 (Slow down the scroll position)
0000CD74 323C 0067                  		move.w	#104-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000CD78                            GHZ_DeformLoop_2:
0000CD78 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000CD7A 51C9 FFFC                  		dbf	d1,GHZ_DeformLoop_2	; repeat d1 number of scanlines
0000CD7E 4E75                       		rts	
0000CD80                            ; End of function Deform_GHZ
0000CD80                            ;		rts
0000CD80                            ; End of function Deform_GHZ
0000CD80                             
0000CD80                             
0000CD80                            ; ===========================================================================
0000CD80                            ; ---------------------------------------------------------------------------
0000CD80                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
0000CD80                            ; ---------------------------------------------------------------------------
0000CD80                            
0000CD80                            Deform_LZ:
0000CD80 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
0000CD82 3838 F73A                  		move.w	($FFFFF73A).w,d4			; load horizontal movement distance (Since last frame)
0000CD86 48C4                       		ext.l	d4					; extend to long-word signed
0000CD88 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
0000CD8A 3A38 F73C                  		move.w	($FFFFF73C).w,d5			; load vertical movement distance (Since last frame)
0000CD8E 48C5                       		ext.l	d5					; extend to long-word signed
0000CD90 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
0000CD92 6100 0000                  		bsr.w	ScrollBlock1				; adjust BG scroll positions (and set draw code direction flags)
0000CD96 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w		; set BG V-scroll position
0000CD9C 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load H-scroll buffer
0000CDA0 3038 F700                  		move.w	($FFFFF700).w,d0			; load FG X position
0000CDA4 4440                       		neg.w	d0					; reverse
0000CDA6 4840                       		swap	d0					; send to upper word
0000CDA8 3038 F708                  		move.w	($FFFFF708).w,d0			; load BG X position
0000CDAC 4440                       		neg.w	d0					; reverse
0000CDAE 7600                       		moveq	#$00,d3					; clear d3
0000CDB0 1638 F7D8                  		move.b	($FFFFF7D8).w,d3			; load wave-scroll timer
0000CDB4 0678 0080 F7D8             		addi.w	#$0080,($FFFFF7D8).w			; increase wave-scroll timer
0000CDBA 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
0000CDBE 3238 F646                  		move.w	($FFFFF646).w,d1			; load water line position
0000CDC2 9278 F704                  		sub.w	($FFFFF704).w,d1			; minus FG Y position
0000CDC6 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
0000CDC8 B242                       		cmp.w	d2,d1					; is the water line below the screen?
0000CDCA 6F00                       		ble.s	DLZ_NoWater				; if not, branch
0000CDCC 3202                       		move.w	d2,d1					; set at maximum
0000CDCE                            
0000CDCE                            DLZ_NoWater:
0000CDCE 9441                       		sub.w	d1,d2					; subtract from water-line count
0000CDD0 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
0000CDD2 5301                       		subq.b	#$01,d1					; decrease above water count
0000CDD4 6500                       		bcs.s	DLZ_Water				; if finished, branch
0000CDD6                            
0000CDD6                            DLZ_Above:
0000CDD6 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
0000CDD8 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
0000CDDC                            
0000CDDC                            DLZ_Water:
0000CDDC 5302                       		subq.b	#$01,d2					; decrease below water count
0000CDDE 6500                       		bcs.s	DLZ_Finish				; if finished, branch
0000CDE0 3200                       		move.w	d0,d1					; copy BG position back to d1
0000CDE2 4840                       		swap	d0					; move FG position back to lower word in d0
0000CDE4 3803                       		move.w	d3,d4					; copy sroll timer for BG use
0000CDE6 D638 F705                  		add.b	($FFFFF704+$01).w,d3			; add FG Y position
0000CDEA D838 F70D                  		add.b	($FFFFF70C+$01).w,d4			; add BG Y position
0000CDEE D643                       		add.w	d3,d3					; multiply by word size (2)
0000CDF0 D844                       		add.w	d4,d4					; ''
0000CDF2 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
0000CDF8 D6C4                       		adda.w	d4,a3					; advance to correct starting point
0000CDFA 1813                       		move.b	(a3),d4					; get current position byte
0000CDFC E404                       		asr.b	#$02,d4					; get only the position bits
0000CDFE 4884                       		ext.w	d4					; extend to word
0000CE00 D244                       		add.w	d4,d1					; adjust BG's current position
0000CE02 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
0000CE06 1812                       		move.b	(a2),d4					; get current position byte
0000CE08 E404                       		asr.b	#$02,d4					; get only the position bits
0000CE0A 4884                       		ext.w	d4					; extend to word
0000CE0C D044                       		add.w	d4,d0					; adjust FG's current position
0000CE0E                            
0000CE0E                            DLZ_Below:
0000CE0E D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
0000CE10 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
0000CE12 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
0000CE14 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
0000CE16 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
0000CE1A                            
0000CE1A                            DLZ_Finish:
0000CE1A 4E75                       		rts						; return
0000CE1C                            
0000CE1C                            ; ---------------------------------------------------------------------------
0000CE1C                            ; Scroll data for the FG
0000CE1C                            ; ---------------------------------------------------------------------------
0000CE1C                            
0000CE1C                            DLZ_WaveFG:
0000CE1C                            		rept	$02
0000CE1C                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000CE1C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE1C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE1C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE1C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE1C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE1C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE1C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE1C                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
0000CE1C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE1C                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000CE1C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE1C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE1C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE1C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE1C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE1C 0001 0400 0401 0800 0801+  		endr
0000D21C                            
0000D21C                            ; ---------------------------------------------------------------------------
0000D21C                            ; Scroll data for the BG
0000D21C                            ; ---------------------------------------------------------------------------
0000D21C                            
0000D21C                            DLZ_WaveBG:	rept	$04
0000D21C                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
0000D21C                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
0000D21C                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
0000D21C                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
0000D21C                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
0000D21C                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
0000D21C                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
0000D21C                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
0000D21C FC01 0000 0000 0000 0000+  		endr
0000D61C                            
0000D61C                            ; =========================================================================== 
0000D61C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D61C                            
0000D61C                            Deform_ABZ:
0000D61C 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000D622 6500 0000                  		bcs.w	Deform_SYZ 
0000D626 4EF9 0000 0000             		jmp	Deform_SBZ 
0000D62C                             
0000D62C                            Deform_MZ:
0000D62C 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D630 48C4                       		ext.l	d4
0000D632 ED84                       		asl.l	#6,d4
0000D634 2204                       		move.l	d4,d1
0000D636 E384                       		asl.l	#1,d4
0000D638 D881                       		add.l	d1,d4
0000D63A 7C02                       		moveq	#2,d6
0000D63C 6100 0000                  		bsr.w	ScrollBlock4
0000D640 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D644 48C4                       		ext.l	d4
0000D646 ED84                       		asl.l	#6,d4
0000D648 7C06                       		moveq	#6,d6
0000D64A 6100 0000                  		bsr.w	ScrollBlock6
0000D64E 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D652 48C4                       		ext.l	d4
0000D654 EF84                       		asl.l	#7,d4
0000D656 7C04                       		moveq	#4,d6
0000D658 6100 0000                  		bsr.w	ScrollBlock5
0000D65C 303C 0200                  		move.w	#$200,d0
0000D660 3238 F704                  		move.w	($FFFFF704).w,d1
0000D664 0441 01C8                  		subi.w	#$1C8,d1
0000D668 6500                       		bcs.s	Deform_MZ_1
0000D66A 3401                       		move.w	d1,d2
0000D66C D241                       		add.w	d1,d1
0000D66E D242                       		add.w	d2,d1
0000D670 E441                       		asr.w	#2,d1
0000D672 D041                       		add.w	d1,d0
0000D674                             
0000D674                            Deform_MZ_1:				; XREF: Deform_MZ
0000D674 31C0 F714                  		move.w	d0,($FFFFF714).w
0000D678 31C0 F71C                  		move.w	d0,($FFFFF71C).w
0000D67C 6100 0000                  		bsr.w	ScrollBlock3
0000D680 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000D686 1038 F756                  		move.b	($FFFFF756).w,d0
0000D68A 8038 F758                  		or.b	($FFFFF758).w,d0
0000D68E 8138 F75A                  		or.b	d0,($FFFFF75A).w
0000D692 4238 F756                  		clr.b	($FFFFF756).w
0000D696 4238 F758                  		clr.b	($FFFFF758).w
0000D69A 43F8 A800                  		lea	($FFFFA800).w,a1
0000D69E 3438 F700                  		move.w	($FFFFF700).w,d2
0000D6A2 4442                       		neg.w	d2
0000D6A4 3002                       		move.w	d2,d0
0000D6A6 E440                       		asr.w	#2,d0
0000D6A8 9042                       		sub.w	d2,d0
0000D6AA 48C0                       		ext.l	d0
0000D6AC E780                       		asl.l	#3,d0
0000D6AE 81FC 0005                  		divs.w	#5,d0
0000D6B2 48C0                       		ext.l	d0
0000D6B4 E980                       		asl.l	#4,d0
0000D6B6 E180                       		asl.l	#8,d0
0000D6B8 7600                       		moveq	#0,d3
0000D6BA 3602                       		move.w	d2,d3
0000D6BC E243                       		asr.w	#1,d3
0000D6BE 323C 0004                  		move.w	#4,d1
0000D6C2                             
0000D6C2                            Deform_MZ_2:				; XREF: Deform_MZ
0000D6C2 32C3                       		move.w	d3,(a1)+
0000D6C4 4843                       		swap	d3
0000D6C6 D680                       		add.l	d0,d3
0000D6C8 4843                       		swap	d3
0000D6CA 51C9 FFF6                  		dbf	d1,Deform_MZ_2
0000D6CE 3038 F718                  		move.w	($FFFFF718).w,d0
0000D6D2 4440                       		neg.w	d0
0000D6D4 323C 0001                  		move.w	#1,d1
0000D6D8                             
0000D6D8                            Deform_MZ_3:				; XREF: Deform_MZ
0000D6D8 32C0                       		move.w	d0,(a1)+
0000D6DA 51C9 FFFC                  		dbf	d1,Deform_MZ_3
0000D6DE 3038 F710                  		move.w	($FFFFF710).w,d0
0000D6E2 4440                       		neg.w	d0
0000D6E4 323C 0008                  		move.w	#8,d1
0000D6E8                             
0000D6E8                            Deform_MZ_4:				; XREF: Deform_MZ
0000D6E8 32C0                       		move.w	d0,(a1)+
0000D6EA 51C9 FFFC                  		dbf	d1,Deform_MZ_4
0000D6EE 3038 F708                  		move.w	($FFFFF708).w,d0
0000D6F2 4440                       		neg.w	d0
0000D6F4 323C 000F                  		move.w	#$F,d1
0000D6F8                             
0000D6F8                            Deform_MZ_5:				; XREF: Deform_MZ
0000D6F8 32C0                       		move.w	d0,(a1)+
0000D6FA 51C9 FFFC                  		dbf	d1,Deform_MZ_5
0000D6FE 45F8 A800                  		lea	($FFFFA800).w,a2
0000D702 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000D706 0440 0200                  		subi.w	#$200,d0
0000D70A 3400                       		move.w	d0,d2
0000D70C 0C40 0100                  		cmpi.w	#$100,d0
0000D710 6500                       		bcs.s	Deform_MZ_6
0000D712 303C 0100                  		move.w	#$100,d0
0000D716                             
0000D716                            Deform_MZ_6:				; XREF: Deform_MZ
0000D716 0240 01F0                  		andi.w	#$1F0,d0
0000D71A E648                       		lsr.w	#3,d0
0000D71C 45F2 0000                  		lea	(a2,d0.w),a2
0000D720 6000 0000                  		bra.w	Deform_All
0000D724                            ; ===========================================================================
0000D724                             
0000D724                            Deform_SLZ:
0000D724 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000D728 48C5                       		ext.l	d5
0000D72A EF85                       		asl.l	#7,d5
0000D72C 6100 0000                  		bsr.w	ScrollBlock2
0000D730 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000D736 43F8 A800                  		lea	($FFFFA800).w,a1
0000D73A 3438 F700                  		move.w	($FFFFF700).w,d2
0000D73E 4442                       		neg.w	d2
0000D740 3002                       		move.w	d2,d0
0000D742 E640                       		asr.w	#3,d0
0000D744 9042                       		sub.w	d2,d0
0000D746 48C0                       		ext.l	d0
0000D748 E980                       		asl.l	#4,d0
0000D74A 81FC 001C                  		divs.w	#$1C,d0
0000D74E 48C0                       		ext.l	d0
0000D750 E980                       		asl.l	#4,d0
0000D752 E180                       		asl.l	#8,d0
0000D754 7600                       		moveq	#0,d3
0000D756 3602                       		move.w	d2,d3
0000D758 323C 001B                  		move.w	#$1B,d1
0000D75C                             
0000D75C                            Deform_SLZ_1:				; XREF: Deform_MZ
0000D75C 32C3                       		move.w	d3,(a1)+
0000D75E 4843                       		swap	d3
0000D760 D680                       		add.l	d0,d3
0000D762 4843                       		swap	d3
0000D764 51C9 FFF6                  		dbf	d1,Deform_SLZ_1
0000D768 3002                       		move.w	d2,d0
0000D76A E640                       		asr.w	#3,d0
0000D76C 3200                       		move.w	d0,d1
0000D76E E241                       		asr.w	#1,d1
0000D770 D041                       		add.w	d1,d0
0000D772 323C 0004                  		move.w	#4,d1
0000D776                             
0000D776                            Deform_SLZ_2:				; XREF: Deform_MZ
0000D776 32C0                       		move.w	d0,(a1)+
0000D778 51C9 FFFC                  		dbf	d1,Deform_SLZ_2
0000D77C 3002                       		move.w	d2,d0
0000D77E E440                       		asr.w	#2,d0
0000D780 323C 0004                  		move.w	#4,d1
0000D784                             
0000D784                            Deform_SLZ_3:				; XREF: Deform_MZ
0000D784 32C0                       		move.w	d0,(a1)+
0000D786 51C9 FFFC                  		dbf	d1,Deform_SLZ_3
0000D78A 3002                       		move.w	d2,d0
0000D78C E240                       		asr.w	#1,d0
0000D78E 323C 001D                  		move.w	#$1D,d1
0000D792                             
0000D792                            Deform_SLZ_4:				; XREF: Deform_MZ
0000D792 32C0                       		move.w	d0,(a1)+
0000D794 51C9 FFFC                  		dbf	d1,Deform_SLZ_4
0000D798 45F8 A800                  		lea	($FFFFA800).w,a2
0000D79C 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000D7A0 3400                       		move.w	d0,d2
0000D7A2 0440 00C0                  		subi.w	#$C0,d0	; 'À'
0000D7A6 0240 03F0                  		andi.w	#$3F0,d0
0000D7AA E648                       		lsr.w	#3,d0
0000D7AC 45F2 0000                  		lea	(a2,d0.w),a2
0000D7B0                             
0000D7B0                            Deform_All:				; XREF: Deform_MZ, Deform_SYZ, ...
0000D7B0 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000D7B4 323C 000E                  		move.w	#$E,d1
0000D7B8 3038 F700                  		move.w	($FFFFF700).w,d0
0000D7BC 4440                       		neg.w	d0
0000D7BE 4840                       		swap	d0
0000D7C0 0242 000F                  		andi.w	#$F,d2
0000D7C4 D442                       		add.w	d2,d2
0000D7C6 301A                       		move.w	(a2)+,d0
0000D7C8 4EFB 2000                  		jmp	Deform_All_2(pc,d2.w)
0000D7CC                            ; End of function Deform_MZ
0000D7CC                             
0000D7CC                            ; ===========================================================================
0000D7CC                             
0000D7CC                            Deform_All_1:				; XREF: Deform_All
0000D7CC 301A                       		move.w	(a2)+,d0
0000D7CE                             
0000D7CE                            Deform_All_2:
0000D7CE 22C0                       		move.l	d0,(a1)+
0000D7D0 22C0                       		move.l	d0,(a1)+
0000D7D2 22C0                       		move.l	d0,(a1)+
0000D7D4 22C0                       		move.l	d0,(a1)+
0000D7D6 22C0                       		move.l	d0,(a1)+
0000D7D8 22C0                       		move.l	d0,(a1)+
0000D7DA 22C0                       		move.l	d0,(a1)+
0000D7DC 22C0                       		move.l	d0,(a1)+
0000D7DE 22C0                       		move.l	d0,(a1)+
0000D7E0 22C0                       		move.l	d0,(a1)+
0000D7E2 22C0                       		move.l	d0,(a1)+
0000D7E4 22C0                       		move.l	d0,(a1)+
0000D7E6 22C0                       		move.l	d0,(a1)+
0000D7E8 22C0                       		move.l	d0,(a1)+
0000D7EA 22C0                       		move.l	d0,(a1)+
0000D7EC 22C0                       		move.l	d0,(a1)+
0000D7EE 51C9 FFDC                  		dbf	d1,Deform_All_1
0000D7F2 4E75                       		rts	
0000D7F4                             
0000D7F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7F4                             
0000D7F4                             
0000D7F4                            Deform_SYZ:
0000D7F4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000D7F8 48C5                       		ext.l	d5
0000D7FA E985                       		asl.l	#4,d5
0000D7FC 2205                       		move.l	d5,d1
0000D7FE E385                       		asl.l	#1,d5
0000D800 DA81                       		add.l	d1,d5
0000D802 6100 0000                  		bsr.w	ScrollBlock2
0000D806 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000D80C 43F8 A800                  		lea	($FFFFA800).w,a1
0000D810 3438 F700                  		move.w	($FFFFF700).w,d2
0000D814 4442                       		neg.w	d2
0000D816 3002                       		move.w	d2,d0
0000D818 E640                       		asr.w	#3,d0
0000D81A 9042                       		sub.w	d2,d0
0000D81C 48C0                       		ext.l	d0
0000D81E E780                       		asl.l	#3,d0
0000D820 81FC 0008                  		divs.w	#8,d0
0000D824 48C0                       		ext.l	d0
0000D826 E980                       		asl.l	#4,d0
0000D828 E180                       		asl.l	#8,d0
0000D82A 7600                       		moveq	#0,d3
0000D82C 3602                       		move.w	d2,d3
0000D82E E243                       		asr.w	#1,d3
0000D830 323C 0007                  		move.w	#7,d1
0000D834                             
0000D834                            Deform_SYZ_1:				; XREF: Deform_SYZ
0000D834 32C3                       		move.w	d3,(a1)+
0000D836 4843                       		swap	d3
0000D838 D680                       		add.l	d0,d3
0000D83A 4843                       		swap	d3
0000D83C 51C9 FFF6                  		dbf	d1,Deform_SYZ_1
0000D840 3002                       		move.w	d2,d0
0000D842 E640                       		asr.w	#3,d0
0000D844 323C 0004                  		move.w	#4,d1
0000D848                             
0000D848                            Deform_SYZ_2:				; XREF: Deform_SYZ
0000D848 32C0                       		move.w	d0,(a1)+
0000D84A 51C9 FFFC                  		dbf	d1,Deform_SYZ_2
0000D84E 3002                       		move.w	d2,d0
0000D850 E440                       		asr.w	#2,d0
0000D852 323C 0005                  		move.w	#5,d1
0000D856                             
0000D856                            Deform_SYZ_3:				; XREF: Deform_SYZ
0000D856 32C0                       		move.w	d0,(a1)+
0000D858 51C9 FFFC                  		dbf	d1,Deform_SYZ_3
0000D85C 3002                       		move.w	d2,d0
0000D85E 3202                       		move.w	d2,d1
0000D860 E241                       		asr.w	#1,d1
0000D862 9041                       		sub.w	d1,d0
0000D864 48C0                       		ext.l	d0
0000D866 E980                       		asl.l	#4,d0
0000D868 81FC 000E                  		divs.w	#$E,d0
0000D86C 48C0                       		ext.l	d0
0000D86E E980                       		asl.l	#4,d0
0000D870 E180                       		asl.l	#8,d0
0000D872 7600                       		moveq	#0,d3
0000D874 3602                       		move.w	d2,d3
0000D876 E243                       		asr.w	#1,d3
0000D878 323C 000D                  		move.w	#$D,d1
0000D87C                             
0000D87C                            Deform_SYZ_4:				; XREF: Deform_SYZ
0000D87C 32C3                       		move.w	d3,(a1)+
0000D87E 4843                       		swap	d3
0000D880 D680                       		add.l	d0,d3
0000D882 4843                       		swap	d3
0000D884 51C9 FFF6                  		dbf	d1,Deform_SYZ_4
0000D888 45F8 A800                  		lea	($FFFFA800).w,a2
0000D88C 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000D890 3400                       		move.w	d0,d2
0000D892 0240 01F0                  		andi.w	#$1F0,d0
0000D896 E648                       		lsr.w	#3,d0
0000D898 45F2 0000                  		lea	(a2,d0.w),a2
0000D89C 6000 FF12                  		bra.w	Deform_All
0000D8A0                            ; End of function Deform_SYZ
0000D8A0                             
0000D8A0                             
0000D8A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8A0                             
0000D8A0                             
0000D8A0                            Deform_SBZ:
0000D8A0 4A38 FE11                  		tst.b	($FFFFFE11).w
0000D8A4 6600 0000                  		bne.w	Deform_SBZ_Act2
0000D8A8 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D8AC 48C4                       		ext.l	d4
0000D8AE EF84                       		asl.l	#7,d4
0000D8B0 7C02                       		moveq	#2,d6
0000D8B2 6100 0000                  		bsr.w	ScrollBlock4
0000D8B6 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D8BA 48C4                       		ext.l	d4
0000D8BC ED84                       		asl.l	#6,d4
0000D8BE 7C06                       		moveq	#6,d6
0000D8C0 6100 0000                  		bsr.w	ScrollBlock6
0000D8C4 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D8C8 48C4                       		ext.l	d4
0000D8CA EB84                       		asl.l	#5,d4
0000D8CC 2204                       		move.l	d4,d1
0000D8CE E384                       		asl.l	#1,d4
0000D8D0 D881                       		add.l	d1,d4
0000D8D2 7C04                       		moveq	#4,d6
0000D8D4 6100 0000                  		bsr.w	ScrollBlock5
0000D8D8 7800                       		moveq	#0,d4
0000D8DA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000D8DE 48C5                       		ext.l	d5
0000D8E0 EB85                       		asl.l	#5,d5
0000D8E2 6100 0000                  		bsr.w	ScrollBlock1_2
0000D8E6 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000D8EA 31C0 F714                  		move.w	d0,($FFFFF714).w
0000D8EE 31C0 F71C                  		move.w	d0,($FFFFF71C).w
0000D8F2 31C0 F618                  		move.w	d0,($FFFFF618).w
0000D8F6 1038 F756                  		move.b	($FFFFF756).w,d0
0000D8FA 8038 F75A                  		or.b	($FFFFF75A).w,d0
0000D8FE 8138 F758                  		or.b	d0,($FFFFF758).w
0000D902 4238 F756                  		clr.b	($FFFFF756).w
0000D906 4238 F75A                  		clr.b	($FFFFF75A).w
0000D90A 43F8 A800                  		lea	($FFFFA800).w,a1
0000D90E 3438 F700                  		move.w	($FFFFF700).w,d2
0000D912 4442                       		neg.w	d2
0000D914 E442                       		asr.w	#2,d2
0000D916 3002                       		move.w	d2,d0
0000D918 E240                       		asr.w	#1,d0
0000D91A 9042                       		sub.w	d2,d0
0000D91C 48C0                       		ext.l	d0
0000D91E E780                       		asl.l	#3,d0
0000D920 81FC 0004                  		divs.w	#4,d0
0000D924 48C0                       		ext.l	d0
0000D926 E980                       		asl.l	#4,d0
0000D928 E180                       		asl.l	#8,d0
0000D92A 7600                       		moveq	#0,d3
0000D92C 3602                       		move.w	d2,d3
0000D92E 323C 0003                  		move.w	#3,d1
0000D932                             
0000D932                            Deform_SBZ_1:				; XREF: Deform_SBZ
0000D932 32C3                       		move.w	d3,(a1)+
0000D934 4843                       		swap	d3
0000D936 D680                       		add.l	d0,d3
0000D938 4843                       		swap	d3
0000D93A 51C9 FFF6                  		dbf	d1,Deform_SBZ_1
0000D93E 3038 F718                  		move.w	($FFFFF718).w,d0
0000D942 4440                       		neg.w	d0
0000D944 323C 0009                  		move.w	#9,d1
0000D948                             
0000D948                            Deform_SBZ_2:				; XREF: Deform_SBZ
0000D948 32C0                       		move.w	d0,(a1)+
0000D94A 51C9 FFFC                  		dbf	d1,Deform_SBZ_2
0000D94E 3038 F710                  		move.w	($FFFFF710).w,d0
0000D952 4440                       		neg.w	d0
0000D954 323C 0006                  		move.w	#6,d1
0000D958                             
0000D958                            Deform_SBZ_3:				; XREF: Deform_SBZ
0000D958 32C0                       		move.w	d0,(a1)+
0000D95A 51C9 FFFC                  		dbf	d1,Deform_SBZ_3
0000D95E 3038 F708                  		move.w	($FFFFF708).w,d0
0000D962 4440                       		neg.w	d0
0000D964 323C 000A                  		move.w	#$A,d1
0000D968                             
0000D968                            Deform_SBZ_4:				; XREF: Deform_SBZ
0000D968 32C0                       		move.w	d0,(a1)+
0000D96A 51C9 FFFC                  		dbf	d1,Deform_SBZ_4
0000D96E 45F8 A800                  		lea	($FFFFA800).w,a2
0000D972 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000D976 3400                       		move.w	d0,d2
0000D978 0240 01F0                  		andi.w	#$1F0,d0
0000D97C E648                       		lsr.w	#3,d0
0000D97E 45F2 0000                  		lea	(a2,d0.w),a2
0000D982 6000 FE2C                  		bra.w	Deform_All
0000D986                            ; ===========================================================================
0000D986                             
0000D986                            Deform_SBZ_Act2:			; XREF: Deform_SBZ
0000D986 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D98A 48C4                       		ext.l	d4
0000D98C ED84                       		asl.l	#6,d4
0000D98E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000D992 48C5                       		ext.l	d5
0000D994 EB85                       		asl.l	#5,d5
0000D996 6100 0000                  		bsr.w	ScrollBlock1
0000D99A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000D9A0 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000D9A4 323C 00DF                  		move.w	#$DF,d1	; 'ß'
0000D9A8 3038 F700                  		move.w	($FFFFF700).w,d0
0000D9AC 4440                       		neg.w	d0
0000D9AE 4840                       		swap	d0
0000D9B0 3038 F708                  		move.w	($FFFFF708).w,d0
0000D9B4 4440                       		neg.w	d0
0000D9B6                             
0000D9B6                            Deform_SBZ_Act2_1:			; XREF: Deform_SBZ
0000D9B6 22C0                       		move.l	d0,(a1)+
0000D9B8 51C9 FFFC                  		dbf	d1,Deform_SBZ_Act2_1
0000D9BC 4E75                       		rts	
0000D9BE                            ; End of function Deform_SBZ
0000D9BE                            
0000D9BE                            ; ---------------------------------------------------------------------------
0000D9BE                            ; Subroutine to	scroll the level horizontally as Sonic moves
0000D9BE                            ; ---------------------------------------------------------------------------
0000D9BE                            
0000D9BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9BE                            
0000D9BE                            
0000D9BE                            ScrollHoriz:				; XREF: DeformBgLayer
0000D9BE 3838 F700                  		move.w	($FFFFF700).w,d4
0000D9C2 6100                       		bsr.s	ScrollHoriz2
0000D9C4 3038 F700                  		move.w	($FFFFF700).w,d0
0000D9C8 0240 0010                  		andi.w	#$10,d0
0000D9CC 1238 F74A                  		move.b	($FFFFF74A).w,d1
0000D9D0 B300                       		eor.b	d1,d0
0000D9D2 6600                       		bne.s	locret_65B0
0000D9D4 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
0000D9DA 3038 F700                  		move.w	($FFFFF700).w,d0
0000D9DE 9044                       		sub.w	d4,d0
0000D9E0 6A00                       		bpl.s	loc_65AA
0000D9E2 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000D9E8 4E75                       		rts	
0000D9EA                            ; ===========================================================================
0000D9EA                            
0000D9EA                            loc_65AA:
0000D9EA 08F8 0003 F754             		bset	#3,($FFFFF754).w
0000D9F0                            
0000D9F0                            locret_65B0:
0000D9F0 4E75                       		rts	
0000D9F2                            ; End of function ScrollHoriz
0000D9F2                            
0000D9F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9F2                            
0000D9F2                            
0000D9F2                            ScrollHoriz2:				; XREF: ScrollHoriz
0000D9F2 3838 F700                  		move.w	($FFFFF700).w,d4
0000D9F6 4A38 F623                  		tst.b	($FFFFF623).w
0000D9FA 6600                       		bne.s	loc_B520
0000D9FC 3238 FC00                  		move.w	($FFFFFC00).w,d1
0000DA00 6700                       		beq.s	loc_B50C
0000DA02 0441 0100                  		sub.w	#$100,d1
0000DA06 31C1 FC00                  		move.w	d1,($FFFFFC00).w
0000DA0A 7200                       		moveq	#0,d1
0000DA0C 1238 FC00                  		move.b	($FFFFFC00).w,d1
0000DA10 E509                       		lsl.b	#2,d1
0000DA12 5801                       		addq.b	#4,d1
0000DA14 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0000DA18 9001                       		sub.b	d1,d0
0000DA1A 43F8 CB00                  		lea	($FFFFCB00).w,a1
0000DA1E 3031 0000                  		move.w	(a1,d0.w),d0
0000DA22 0240 3FFF                  		and.w	#$3FFF,d0
0000DA26 6000                       		bra.s	loc_B510
0000DA28                            loc_B50C:
0000DA28 3038 D008                  		move.w	($FFFFD008).w,d0
0000DA2C                            loc_B510:
0000DA2C 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DA30 0440 0090                  		sub.w	#$90,d0
0000DA34 6B00                       		bmi.s	loc_B522
0000DA36 0440 0010                  		sub.w	#$10,d0
0000DA3A 6A00                       		bpl.s	loc_B536
0000DA3C 4278 F73A                  		clr.w	($FFFFF73A).w
0000DA40                            loc_B520:
0000DA40 4E75                       		rts
0000DA42                            ;--------------------------------------------------------------------------------
0000DA42                            loc_B522:
0000DA42 0C40 FFF0                  		cmp.w	#-$10,d0
0000DA46 6E00                       		bgt.s	loc_B52C
0000DA48 303C FFF0                  		move.w	#-$10,d0
0000DA4C                            loc_B52C:
0000DA4C D078 F700                  		add.w	($FFFFF700).w,d0
0000DA50 B078 F728                  		cmp.w	($FFFFF728).w,d0
0000DA54 6E00                       		bgt.s	loc_B54C
0000DA56 3038 F728                  		move.w	($FFFFF728).w,d0
0000DA5A 6000                       		bra.s	loc_B54C
0000DA5C                            loc_B536:
0000DA5C 0C40 0010                  		cmp.w	#$10,d0
0000DA60 6500                       		bcs.s	loc_B540
0000DA62 303C 0010                  		move.w	#$10,d0
0000DA66                            
0000DA66                            loc_B540:
0000DA66 D078 F700                  		add.w	($FFFFF700).w,d0
0000DA6A B078 F72A                  		cmp.w	($FFFFF72A).w,d0
0000DA6E 6D00                       		blt.s	loc_B54C
0000DA70 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000DA74                            loc_B54C:
0000DA74 3200                       		move.w	d0,d1
0000DA76 9278 F700                  		sub.w	($FFFFF700).w,d1
0000DA7A E141                       		asl.w	#8,d1
0000DA7C 31C0 F700                  		move.w	d0,($FFFFF700).w
0000DA80 31C1 F73A                  		move.w	d1,($FFFFF73A).w
0000DA84 4E75                       		rts
0000DA86                            
0000DA86                            ; ---------------------------------------------------------------------------
0000DA86                            ; Subroutine to	scroll the level vertically as Sonic moves
0000DA86                            ; ---------------------------------------------------------------------------
0000DA86                            
0000DA86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA86                            
0000DA86                            
0000DA86                            ScrollVertical:				; XREF: DeformBgLayer
0000DA86 7200                       	moveq	#0,d1
0000DA88                            ;	move.w	y_pos(a0),d0
0000DA88 7413                       	moveq	#$13,d2		; set default character height
0000DA8A 9438 D016                  	sub.b	(Maincharacter+y_radius).w,d2	; get difference to character's actual height
0000DA8E 4442                       	neg.w	d2		; we need the inverse
0000DA90                            
0000DA90 7000                       	moveq	#0,d0
0000DA92 1038 D026                  	move.b	(Maincharacter+angle).w,d0
0000DA96 0640 0040                  	add.w	#$40,d0
0000DA9A 4EB9 0000 8DA4             	jsr	(CalcSine).l
0000DAA0 C1C2                       	muls.w	d2,d0
0000DAA2 48C0                       	ext.l	d0
0000DAA4 E080                       	asr.l	#8,d0
0000DAA6 D078 D00C                  	add.w	(Maincharacter+y_pos).w,d0	; get player's y position
0000DAAA 9078 F704                  	sub.w	($FFFFF704).w,d0
0000DAAE 4A78 F72C                  	tst.w	(Camera_Min_Y_pos).w		; Does this level y-wrap?
0000DAB2 6A00 0000                  	bpl.w	loc_662A			; If not, branch and skip looping
0000DAB6 0C78 0060 F73E             	cmpi.w	#$60,(Camera_Y_pos_bias).w	; Is screen in its default position?
0000DABC 6700                       	beq.s	@locvert				; If so, branch, and loop
0000DABE                            	; It's not at its default position; Sonic must be looking up or down
0000DABE 4A78 C903                  	tst.w	(Sonic_Look_delay_counter).w	; Is Sonic still looking up or down?
0000DAC2 6600                       	bne.s	@locvert				; If so, branch, and keep looping, Sonic ain't moving anywhere!
0000DAC4                            	; So, Sonic was looking up or down, but now he isn't
0000DAC4 31FC 0060 F73E             	move.w	#$60,(Camera_Y_pos_bias).w	; move the screen to its default position quickly
0000DACA                            ;		btst	#2,($FFFFD022).w
0000DACA                            ;		beq.s	loc_662A
0000DACA                            
0000DACA                            @locvert:
0000DACA 0240 07FF                  		andi.w	#$7FF,d0			; Forever loop
0000DACE                            		
0000DACE                            loc_662A:
0000DACE 0838 0001 D022             		btst	#1,($FFFFD022).w
0000DAD4 6700                       		beq.s	loc_664A
0000DAD6 0640 0020                  		addi.w	#$20,d0
0000DADA 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000DADE 6500                       		bcs.s	loc_6696
0000DAE0 0440 0040                  		subi.w	#$40,d0
0000DAE4 6400                       		bcc.s	loc_6696
0000DAE6 4A38 F75C                  		tst.b	($FFFFF75C).w
0000DAEA 6600                       		bne.s	loc_66A8
0000DAEC 6000                       		bra.s	loc_6656
0000DAEE                            ; ===========================================================================
0000DAEE                            
0000DAEE                            loc_664A:
0000DAEE 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000DAF2 6600                       		bne.s	loc_665C
0000DAF4 4A38 F75C                  		tst.b	($FFFFF75C).w
0000DAF8 6600                       		bne.s	loc_66A8
0000DAFA                            
0000DAFA                            loc_6656:
0000DAFA 4278 F73C                  		clr.w	($FFFFF73C).w
0000DAFE 4E75                       		rts	
0000DB00                            ; ===========================================================================
0000DB00                            
0000DB00                            loc_665C:
0000DB00 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
0000DB06 6600                       		bne.s	loc_6684
0000DB08 3238 D020                  		move.w	(Maincharacter+inertia).w,d1
0000DB0C 6A00                       		bpl.s	loc_666C
0000DB0E 4441                       		neg.w	d1
0000DB10                            
0000DB10                            loc_666C:
0000DB10 0C41 0800                  		cmpi.w	#$800,d1
0000DB14 6400                       		bcc.s	loc_6696
0000DB16 323C 0600                  		move.w	#$600,d1
0000DB1A 0C40 0006                  		cmpi.w	#6,d0
0000DB1E 6E00                       		bgt.s	loc_66F6
0000DB20 0C40 FFFA                  		cmpi.w	#-6,d0
0000DB24 6D00                       		blt.s	loc_66C0
0000DB26 6000                       		bra.s	loc_66AE
0000DB28                            ; ===========================================================================
0000DB28                            
0000DB28                            loc_6684:
0000DB28 323C 0200                  		move.w	#$200,d1
0000DB2C 0C40 0002                  		cmpi.w	#2,d0
0000DB30 6E00                       		bgt.s	loc_66F6
0000DB32 0C40 FFFE                  		cmpi.w	#-2,d0
0000DB36 6D00                       		blt.s	loc_66C0
0000DB38 6000                       		bra.s	loc_66AE
0000DB3A                            ; ===========================================================================
0000DB3A                            
0000DB3A                            loc_6696:
0000DB3A 323C 1000                  		move.w	#$1000,d1
0000DB3E 0C40 0010                  		cmpi.w	#$10,d0
0000DB42 6E00                       		bgt.s	loc_66F6
0000DB44 0C40 FFF0                  		cmpi.w	#-$10,d0
0000DB48 6D00                       		blt.s	loc_66C0
0000DB4A 6000                       		bra.s	loc_66AE
0000DB4C                            ; ===========================================================================
0000DB4C                            
0000DB4C                            loc_66A8:
0000DB4C 7000                       		moveq	#0,d0
0000DB4E 11C0 F75C                  		move.b	d0,($FFFFF75C).w
0000DB52                            
0000DB52                            loc_66AE:
0000DB52 7200                       		moveq	#0,d1
0000DB54 3200                       		move.w	d0,d1
0000DB56 D278 F704                  		add.w	($FFFFF704).w,d1
0000DB5A 4A40                       		tst.w	d0
0000DB5C 6A00 0000                  		bpl.w	loc_6700
0000DB60 6000 0000                  		bra.w	loc_66CC
0000DB64                            ; ===========================================================================
0000DB64                            
0000DB64                            loc_66C0:
0000DB64 4441                       		neg.w	d1
0000DB66 48C1                       		ext.l	d1
0000DB68 E181                       		asl.l	#8,d1
0000DB6A D2B8 F704                  		add.l	($FFFFF704).w,d1
0000DB6E 4841                       		swap	d1
0000DB70                            
0000DB70                            loc_66CC:
0000DB70 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
0000DB74 6E00                       		bgt.s	loc_6724
0000DB76 0C41 FF00                  		cmpi.w	#-$100,d1
0000DB7A 6E00                       		bgt.s	loc_66F0
0000DB7C 0241 07FF                  		andi.w	#$7FF,d1
0000DB80                            ;		andi.w	#$7FF,($FFFFD00C).w
0000DB80 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0000DB86                            ;		andi.w	#$3FF,($FFFFF70C).w
0000DB86 6000                       		bra.s	loc_6724
0000DB88                            ; ===========================================================================
0000DB88                            
0000DB88                            loc_66F0:
0000DB88 3238 F72C                  		move.w	($FFFFF72C).w,d1
0000DB8C 6000                       		bra.s	loc_6724
0000DB8E                            ; ===========================================================================
0000DB8E                            
0000DB8E                            loc_66F6:
0000DB8E 48C1                       		ext.l	d1
0000DB90 E181                       		asl.l	#8,d1
0000DB92 D2B8 F704                  		add.l	($FFFFF704).w,d1
0000DB96 4841                       		swap	d1
0000DB98                            
0000DB98                            loc_6700:
0000DB98 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
0000DB9C 6D00                       		blt.s	loc_6724
0000DB9E 0441 0800                  		subi.w	#$800,d1
0000DBA2 6500                       		bcs.s	loc_6720
0000DBA4                            ;		andi.w	#$7FF,($FFFFD00C).w
0000DBA4 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
0000DBAA                            ;		andi.w	#$3FF,($FFFFF70C).w
0000DBAA 6000                       		bra.s	loc_6724
0000DBAC                            ; ===========================================================================
0000DBAC                            
0000DBAC                            loc_6720:
0000DBAC 3238 F72E                  		move.w	($FFFFF72E).w,d1
0000DBB0                            
0000DBB0                            loc_6724:
0000DBB0 3838 F704                  		move.w	($FFFFF704).w,d4
0000DBB4 4841                       		swap	d1
0000DBB6 2601                       		move.l	d1,d3
0000DBB8 96B8 F704                  		sub.l	($FFFFF704).w,d3
0000DBBC E09B                       		ror.l	#8,d3
0000DBBE 31C3 F73C                  		move.w	d3,($FFFFF73C).w
0000DBC2 21C1 F704                  		move.l	d1,($FFFFF704).w
0000DBC6 3038 F704                  		move.w	($FFFFF704).w,d0
0000DBCA 0240 0010                  		andi.w	#$10,d0
0000DBCE 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000DBD2 B300                       		eor.b	d1,d0
0000DBD4 6600                       		bne.s	locret_6766
0000DBD6 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
0000DBDC 3038 F704                  		move.w	($FFFFF704).w,d0
0000DBE0 9044                       		sub.w	d4,d0
0000DBE2 6A00                       		bpl.s	loc_6760
0000DBE4 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000DBEA 4E75                       		rts	
0000DBEC                            ; ===========================================================================
0000DBEC                            
0000DBEC                            loc_6760:
0000DBEC 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000DBF2                            
0000DBF2                            locret_6766:
0000DBF2 4E75                       		rts	
0000DBF4                            ; End of function ScrollVertical
0000DBF4                            
0000DBF4                            
0000DBF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBF4                            
0000DBF4                            
0000DBF4                            ScrollBlock1:				; XREF: Deform_LZ, Deform_SBZ
0000DBF4 2438 F708                  		move.l	($FFFFF708).w,d2
0000DBF8 2002                       		move.l	d2,d0
0000DBFA D084                       		add.l	d4,d0
0000DBFC 21C0 F708                  		move.l	d0,($FFFFF708).w
0000DC00 2200                       		move.l	d0,d1
0000DC02 4841                       		swap	d1
0000DC04 0241 0010                  		andi.w	#$10,d1
0000DC08 1638 F74C                  		move.b	($FFFFF74C).w,d3
0000DC0C B701                       		eor.b	d3,d1
0000DC0E 6600                       		bne.s	ScrollBlock1_2
0000DC10 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000DC16 9082                       		sub.l	d2,d0
0000DC18 6A00                       		bpl.s	ScrollBlock1_1
0000DC1A 08F8 0002 F756             		bset	#2,($FFFFF756).w
0000DC20 6000                       		bra.s	ScrollBlock1_2
0000DC22                            ; ===========================================================================
0000DC22                             
0000DC22                            ScrollBlock1_1:				; XREF: ScrollBlock1
0000DC22 08F8 0003 F756             		bset	#3,($FFFFF756).w
0000DC28                             
0000DC28                            ScrollBlock1_2:				; XREF: ScrollBlock1, Deform_SBZ, ...
0000DC28 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000DC2C 2003                       		move.l	d3,d0
0000DC2E D085                       		add.l	d5,d0
0000DC30 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000DC34 2200                       		move.l	d0,d1
0000DC36 4841                       		swap	d1
0000DC38 0241 0010                  		andi.w	#$10,d1
0000DC3C 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000DC40 B501                       		eor.b	d2,d1
0000DC42 6600                       		bne.s	ScrollBlock1_End
0000DC44 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000DC4A 9083                       		sub.l	d3,d0
0000DC4C 6A00                       		bpl.s	ScrollBlock1_3
0000DC4E 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000DC54 4E75                       		rts	
0000DC56                            ; ===========================================================================
0000DC56                             
0000DC56                            ScrollBlock1_3:				; XREF: ScrollBlock1
0000DC56 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000DC5C                             
0000DC5C                            ScrollBlock1_End:			; XREF: ScrollBlock1
0000DC5C 4E75                       		rts	
0000DC5E                            ; End of function ScrollBlock1
0000DC5E                             
0000DC5E                             
0000DC5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC5E                             
0000DC5E                             
0000DC5E                            ScrollBlock2:				; XREF: Deform_MZ, Deform_SYZ
0000DC5E 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000DC62 2003                       		move.l	d3,d0
0000DC64 D085                       		add.l	d5,d0
0000DC66 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000DC6A 2200                       		move.l	d0,d1
0000DC6C 4841                       		swap	d1
0000DC6E 0241 0010                  		andi.w	#$10,d1
0000DC72 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000DC76 B501                       		eor.b	d2,d1
0000DC78 6600                       		bne.s	ScrollBlock2_End
0000DC7A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000DC80 9083                       		sub.l	d3,d0
0000DC82 6A00                       		bpl.s	ScrollBlock2_1
0000DC84 08F8 0004 F756             		bset	#4,($FFFFF756).w
0000DC8A 4E75                       		rts	
0000DC8C                            ; ===========================================================================
0000DC8C                             
0000DC8C                            ScrollBlock2_1:				; XREF: ScrollBlock2
0000DC8C 08F8 0005 F756             		bset	#5,($FFFFF756).w
0000DC92                             
0000DC92                            ScrollBlock2_End:			; XREF: ScrollBlock2
0000DC92 4E75                       		rts	
0000DC94                            ; End of function ScrollBlock2
0000DC94                             
0000DC94                             
0000DC94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC94                             
0000DC94                             
0000DC94                            ScrollBlock3:				; XREF: Deform_MZ
0000DC94 3638 F70C                  		move.w	($FFFFF70C).w,d3
0000DC98 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000DC9C 3200                       		move.w	d0,d1
0000DC9E 0241 0010                  		andi.w	#$10,d1
0000DCA2 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000DCA6 B501                       		eor.b	d2,d1
0000DCA8 6600                       		bne.s	ScrollBlock3_End
0000DCAA 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000DCB0 9043                       		sub.w	d3,d0
0000DCB2 6A00                       		bpl.s	ScrollBlock3_1
0000DCB4 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000DCBA 4E75                       		rts	
0000DCBC                            ; ===========================================================================
0000DCBC                             
0000DCBC                            ScrollBlock3_1:				; XREF: ScrollBlock3
0000DCBC 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000DCC2                             
0000DCC2                            ScrollBlock3_End:			; XREF: ScrollBlock3
0000DCC2 4E75                       		rts	
0000DCC4                            ; End of function ScrollBlock3
0000DCC4                             
0000DCC4                             
0000DCC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCC4                             
0000DCC4                             
0000DCC4                            ScrollBlock4:				; XREF: Deform_MZ, Deform_SBZ
0000DCC4 2438 F708                  		move.l	($FFFFF708).w,d2
0000DCC8 2002                       		move.l	d2,d0
0000DCCA D084                       		add.l	d4,d0
0000DCCC 21C0 F708                  		move.l	d0,($FFFFF708).w
0000DCD0 2200                       		move.l	d0,d1
0000DCD2 4841                       		swap	d1
0000DCD4 0241 0010                  		andi.w	#$10,d1
0000DCD8 1638 F74C                  		move.b	($FFFFF74C).w,d3
0000DCDC B701                       		eor.b	d3,d1
0000DCDE 6600                       		bne.s	ScrollBlock4_End
0000DCE0 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000DCE6 9082                       		sub.l	d2,d0
0000DCE8 6A00                       		bpl.s	ScrollBlock4_1
0000DCEA 0DF8 F756                  		bset	d6,($FFFFF756).w
0000DCEE 6000                       		bra.s	ScrollBlock4_End
0000DCF0                            ; ===========================================================================
0000DCF0                             
0000DCF0                            ScrollBlock4_1:				; XREF: ScrollBlock4
0000DCF0 5206                       		addq.b	#1,d6
0000DCF2 0DF8 F756                  		bset	d6,($FFFFF756).w
0000DCF6                             
0000DCF6                            ScrollBlock4_End:			; XREF: ScrollBlock4
0000DCF6 4E75                       		rts	
0000DCF8                            ; End of function ScrollBlock4
0000DCF8                             
0000DCF8                             
0000DCF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCF8                             
0000DCF8                             
0000DCF8                            ScrollBlock5:				; XREF: Deform_GHZ, Deform_MZ, ...
0000DCF8 2438 F710                  		move.l	($FFFFF710).w,d2
0000DCFC 2002                       		move.l	d2,d0
0000DCFE D084                       		add.l	d4,d0
0000DD00 21C0 F710                  		move.l	d0,($FFFFF710).w
0000DD04 2200                       		move.l	d0,d1
0000DD06 4841                       		swap	d1
0000DD08 0241 0010                  		andi.w	#$10,d1
0000DD0C 1638 F74E                  		move.b	($FFFFF74E).w,d3
0000DD10 B701                       		eor.b	d3,d1
0000DD12 6600                       		bne.s	ScrollBlock5_End
0000DD14 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000DD1A 9082                       		sub.l	d2,d0
0000DD1C 6A00                       		bpl.s	ScrollBlock5_1
0000DD1E 0DF8 F758                  		bset	d6,($FFFFF758).w
0000DD22 6000                       		bra.s	ScrollBlock5_End
0000DD24                            ; ===========================================================================
0000DD24                             
0000DD24                            ScrollBlock5_1:				; XREF: ScrollBlock5
0000DD24 5206                       		addq.b	#1,d6
0000DD26 0DF8 F758                  		bset	d6,($FFFFF758).w
0000DD2A                             
0000DD2A                            ScrollBlock5_End:			; XREF: ScrollBlock5
0000DD2A 4E75                       		rts	
0000DD2C                            ; End of function ScrollBlock5
0000DD2C                             
0000DD2C                             
0000DD2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD2C                             
0000DD2C                             
0000DD2C                            ScrollBlock6:				; XREF: Deform_GHZ, Deform_MZ, ...
0000DD2C 2438 F718                  		move.l	($FFFFF718).w,d2
0000DD30 2002                       		move.l	d2,d0
0000DD32 D084                       		add.l	d4,d0
0000DD34 21C0 F718                  		move.l	d0,($FFFFF718).w
0000DD38 2200                       		move.l	d0,d1
0000DD3A 4841                       		swap	d1
0000DD3C 0241 0010                  		andi.w	#$10,d1
0000DD40 1638 F750                  		move.b	($FFFFF750).w,d3
0000DD44 B701                       		eor.b	d3,d1
0000DD46 6600                       		bne.s	ScrollBlock6_End
0000DD48 0A38 0010 F750             		eori.b	#$10,($FFFFF750).w
0000DD4E 9082                       		sub.l	d2,d0
0000DD50 6A00                       		bpl.s	ScrollBlock6_1
0000DD52 0DF8 F75A                  		bset	d6,($FFFFF75A).w
0000DD56 6000                       		bra.s	ScrollBlock6_End
0000DD58                            ; ===========================================================================
0000DD58                             
0000DD58                            ScrollBlock6_1:				; XREF: ScrollBlock6
0000DD58 5206                       		addq.b	#1,d6
0000DD5A 0DF8 F75A                  		bset	d6,($FFFFF75A).w
0000DD5E                             
0000DD5E                            ScrollBlock6_End:			; XREF: ScrollBlock6
0000DD5E 4E75                       		rts	
0000DD60                            ; End of function ScrollBlock6
0000DD60                            
0000DD60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD60                            
0000DD60                            
0000DD60                            sub_6886:		
0000DD60 4BF9 00C0 0004             		lea	($C00004).l,a5
0000DD66 4DF9 00C0 0000             		lea	($C00000).l,a6
0000DD6C 45F8 F756                  		lea	($FFFFF756).w,a2
0000DD70 47F8 F708                  		lea	($FFFFF708).w,a3
0000DD74 2878 A404                  		movea.l	($FFFFA404).w,a4
0000DD78 343C 6000                  		move.w	#$6000,d2
0000DD7C 6100 0000                  		bsr.w	sub_6D0A
0000DD80 45F8 F758                  		lea	($FFFFF758).w,a2
0000DD84 47F8 F710                  		lea	($FFFFF710).w,a3
0000DD88 6000 0000                  		bra.w	sub_6DA6
0000DD8C                            ; End of function sub_6886
0000DD8C                             
0000DD8C                            ; ---------------------------------------------------------------------------
0000DD8C                            ; Subroutine to	display	correct	tiles as you move
0000DD8C                            ; ---------------------------------------------------------------------------
0000DD8C                             
0000DD8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD8C                             
0000DD8C                             
0000DD8C                            LoadTilesAsYouMove:			; XREF: Demo_Time
0000DD8C 4BF9 00C0 0004             		lea	($C00004).l,a5
0000DD92 4DF9 00C0 0000             		lea	($C00000).l,a6
0000DD98 45F8 FF32                  		lea	($FFFFFF32).w,a2
0000DD9C 47F8 FF18                  		lea	($FFFFFF18).w,a3
0000DDA0 2878 A404                  		movea.l	($FFFFA404).w,a4
0000DDA4 343C 6000                  		move.w	#$6000,d2
0000DDA8 6100 0000                  		bsr.w	sub_6D0A
0000DDAC 45F8 FF34                  		lea	($FFFFFF34).w,a2
0000DDB0 47F8 FF20                  		lea	($FFFFFF20).w,a3
0000DDB4 6100 0000                  		bsr.w	sub_6DA6
0000DDB8 45F8 FF36                  		lea	($FFFFFF36).w,a2
0000DDBC 47F8 FF28                  		lea	($FFFFFF28).w,a3
0000DDC0 6100 0000                  		bsr.w	sub_6EA4
0000DDC4 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000DDC8 47F8 FF10                  		lea	($FFFFFF10).w,a3
0000DDCC 2878 A400                  		movea.l	($FFFFA400).w,a4
0000DDD0 343C 4000                  		move.w	#$4000,d2
0000DDD4 4A38 F745                  		tst.b	($FFFFF745).w
0000DDD8 6700                       		beq.s	Draw_FG
0000DDDA 11FC 0000 F745             		move.b	#0,($FFFFF745).w	;Reset the redraw flag
0000DDE0 78F0                       		moveq	#-$10,d4			;Go to top line oflevel data relative camera position
0000DDE2 7C0F                       		moveq	#$F,d6				;
0000DDE4                             
0000DDE4                            Draw_All:
0000DDE4 48E7 0E00                  		movem.l	d4-d6,-(sp)			; This whole routine basically redraws the whole
0000DDE8 7AF0                       		moveq	#-$10,d5			; area instead of merely a line of tiles
0000DDEA 3204                       		move.w	d4,d1
0000DDEC 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DDF0 3801                       		move.w	d1,d4
0000DDF2 7AF0                       		moveq	#-$10,d5
0000DDF4 6100 0000                  		bsr.w	DrawTiles_LR
0000DDF8 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000DDFC 0644 0010                  		addi.w	#$10,d4
0000DE00 51CE FFE2                  		dbf	d6,Draw_All
0000DE04 4E75                       		rts	
0000DE06                             
0000DE06                            Draw_FG:
0000DE06 4A12                       		tst.b	(a2)
0000DE08 6700                       		beq.s	locret_6D08
0000DE0A 0892 0000                  		bclr	#0,(a2)
0000DE0E 6700                       		beq.s	loc_6CBE
0000DE10 78F0                       		moveq	#-$10,d4
0000DE12 7AF0                       		moveq	#-$10,d5
0000DE14 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DE18 78F0                       		moveq	#-$10,d4
0000DE1A 7AF0                       		moveq	#-$10,d5
0000DE1C 6100 0000                  		bsr.w	DrawTiles_LR
0000DE20                             
0000DE20                            loc_6CBE:
0000DE20 0892 0001                  		bclr	#1,(a2)
0000DE24 6700                       		beq.s	loc_6CD8
0000DE26 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DE2A 7AF0                       		moveq	#-$10,d5
0000DE2C 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DE30 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DE34 7AF0                       		moveq	#-$10,d5
0000DE36 6100 0000                  		bsr.w	DrawTiles_LR
0000DE3A                             
0000DE3A                            loc_6CD8:
0000DE3A 0892 0002                  		bclr	#2,(a2)
0000DE3E 6700                       		beq.s	loc_6CEE
0000DE40 78F0                       		moveq	#-$10,d4
0000DE42 7AF0                       		moveq	#-$10,d5
0000DE44 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DE48 78F0                       		moveq	#-$10,d4
0000DE4A 7AF0                       		moveq	#-$10,d5
0000DE4C 6100 0000                  		bsr.w	DrawTiles_TB
0000DE50                             
0000DE50                            loc_6CEE:
0000DE50 0892 0003                  		bclr	#3,(a2)
0000DE54 6700                       		beq.s	locret_6D08
0000DE56 78F0                       		moveq	#-$10,d4
0000DE58 3A3C 0140                  		move.w	#$140,d5
0000DE5C 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DE60 78F0                       		moveq	#-$10,d4
0000DE62 3A3C 0140                  		move.w	#$140,d5
0000DE66 6100 0000                  		bsr.w	DrawTiles_TB
0000DE6A                             
0000DE6A                            locret_6D08:
0000DE6A 4E75                       		rts	
0000DE6C                             
0000DE6C                            ; End of function LoadTilesAsYouMove
0000DE6C                             
0000DE6C                             
0000DE6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE6C                             
0000DE6C                             
0000DE6C                            sub_6D0A:
0000DE6C 4A12                       		tst.b	(a2)
0000DE6E 6700 0000                  		beq.w	locret_6DA4
0000DE72 0892 0000                  		bclr	#0,(a2)
0000DE76 6700                       		beq.s	loc_6D26
0000DE78 78F0                       		moveq	#-$10,d4
0000DE7A 7AF0                       		moveq	#-$10,d5
0000DE7C 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DE80 78F0                       		moveq	#-$10,d4
0000DE82 7AF0                       		moveq	#-$10,d5
0000DE84 6100 0000                  		bsr.w	DrawTiles_LR
0000DE88                             
0000DE88                            loc_6D26:
0000DE88 0892 0001                  		bclr	#1,(a2)
0000DE8C 6700                       		beq.s	loc_6D40
0000DE8E 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DE92 7AF0                       		moveq	#-$10,d5
0000DE94 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DE98 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DE9C 7AF0                       		moveq	#-$10,d5
0000DE9E 6100 0000                  		bsr.w	DrawTiles_LR
0000DEA2                             
0000DEA2                            loc_6D40:
0000DEA2 0892 0002                  		bclr	#2,(a2)
0000DEA6 6700                       		beq.s	loc_6D56
0000DEA8 78F0                       		moveq	#-$10,d4
0000DEAA 7AF0                       		moveq	#-$10,d5
0000DEAC 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DEB0 78F0                       		moveq	#-$10,d4
0000DEB2 7AF0                       		moveq	#-$10,d5
0000DEB4 6100 0000                  		bsr.w	DrawTiles_TB
0000DEB8                             
0000DEB8                            loc_6D56:
0000DEB8 0892 0003                  		bclr	#3,(a2)
0000DEBC 6700                       		beq.s	loc_6D70
0000DEBE 78F0                       		moveq	#-$10,d4
0000DEC0 3A3C 0140                  		move.w	#$140,d5
0000DEC4 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DEC8 78F0                       		moveq	#-$10,d4
0000DECA 3A3C 0140                  		move.w	#$140,d5
0000DECE 6100 0000                  		bsr.w	DrawTiles_TB
0000DED2                             
0000DED2                            loc_6D70:
0000DED2 0892 0004                  		bclr	#4,(a2)
0000DED6 6700                       		beq.s	loc_6D88
0000DED8 78F0                       		moveq	#-$10,d4
0000DEDA 7A00                       		moveq	#0,d5
0000DEDC 6100 0000                  		bsr.w	loc_7176
0000DEE0 78F0                       		moveq	#-$10,d4
0000DEE2 7A00                       		moveq	#0,d5
0000DEE4 7C1F                       		moveq	#$1F,d6
0000DEE6 6100 0000                  		bsr.w	DrawTiles_LR3
0000DEEA                             
0000DEEA                            loc_6D88:
0000DEEA 0892 0005                  		bclr	#5,(a2)
0000DEEE 6700                       		beq.s	locret_6DA4
0000DEF0 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DEF4 7A00                       		moveq	#0,d5
0000DEF6 6100 0000                  		bsr.w	loc_7176
0000DEFA 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DEFE 7A00                       		moveq	#0,d5
0000DF00 7C1F                       		moveq	#$1F,d6
0000DF02 6100 0000                  		bsr.w	DrawTiles_LR3
0000DF06                             
0000DF06                            locret_6DA4:
0000DF06 4E75                       		rts	
0000DF08                            ; End of function sub_6D0A
0000DF08                             
0000DF08                             
0000DF08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF08                             
0000DF08                             
0000DF08                            sub_6DA6:
0000DF08 4A12                       		tst.b	(a2)
0000DF0A 6700 0000                  		beq.w	locret_6DF2
0000DF0E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w
0000DF14 6700 0000                  		beq.w	loc_6E16
0000DF18 0892 0000                  		bclr	#0,(a2)
0000DF1C 6700                       		beq.s	loc_6DD2
0000DF1E 383C 0070                  		move.w	#$70,d4	; 'p'
0000DF22 7AF0                       		moveq	#-$10,d5
0000DF24 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DF28 383C 0070                  		move.w	#$70,d4	; 'p'
0000DF2C 7AF0                       		moveq	#-$10,d5
0000DF2E 7C02                       		moveq	#2,d6
0000DF30 6100 0000                  		bsr.w	DrawTiles_TB2
0000DF34                             
0000DF34                            loc_6DD2:
0000DF34 0892 0001                  		bclr	#1,(a2)
0000DF38 6700                       		beq.s	locret_6DF2
0000DF3A 383C 0070                  		move.w	#$70,d4	; 'p'
0000DF3E 3A3C 0140                  		move.w	#$140,d5
0000DF42 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DF46 383C 0070                  		move.w	#$70,d4	; 'p'
0000DF4A 3A3C 0140                  		move.w	#$140,d5
0000DF4E 7C02                       		moveq	#2,d6
0000DF50 6100 0000                  		bsr.w	DrawTiles_TB2
0000DF54                             
0000DF54                            locret_6DF2:
0000DF54 4E75                       		rts	
0000DF56                            ; ===========================================================================
0000DF56 00                         unk_6DF4:	dc.b   0 ;	 
0000DF57 00                         unk_6DF5:	dc.b   0 ;	 
0000DF58 00                         		dc.b   0 ;  
0000DF59 00                         		dc.b   0 ;  
0000DF5A 00                         		dc.b   0 ;  
0000DF5B 06                         		dc.b   6 ;  
0000DF5C 06                         		dc.b   6 ;  
0000DF5D 06                         		dc.b   6 ;  
0000DF5E 06                         		dc.b   6 ;  
0000DF5F 06                         		dc.b   6 ;  
0000DF60 06                         		dc.b   6 ;  
0000DF61 06                         		dc.b   6 ;  
0000DF62 06                         		dc.b   6 ;  
0000DF63 06                         		dc.b   6 ;  
0000DF64 06                         		dc.b   6 ;  
0000DF65 04                         		dc.b   4 ;  
0000DF66 04                         		dc.b   4 ;  
0000DF67 04                         		dc.b   4 ;  
0000DF68 04                         		dc.b   4 ;  
0000DF69 04                         		dc.b   4 ;  
0000DF6A 04                         		dc.b   4 ;  
0000DF6B 04                         		dc.b   4 ;  
0000DF6C 02                         		dc.b   2 ;  
0000DF6D 02                         		dc.b   2 ;  
0000DF6E 02                         		dc.b   2 ;  
0000DF6F 02                         		dc.b   2 ;  
0000DF70 02                         		dc.b   2 ;  
0000DF71 02                         		dc.b   2 ;  
0000DF72 02                         		dc.b   2 ;  
0000DF73 02                         		dc.b   2 ;  
0000DF74 02                         		dc.b   2 ;  
0000DF75 02                         		dc.b   2 ;  
0000DF76 02                         		dc.b   2 ;  
0000DF77 00                         		dc.b   0 ;  
0000DF78                            ; ===========================================================================
0000DF78                             
0000DF78                            loc_6E16:
0000DF78 41F9 0000 DF57             		lea	(unk_6DF5).l,a0
0000DF7E 78F0                       		moveq	#-$10,d4
0000DF80 0892 0000                  		bclr	#0,(a2)
0000DF84 6600                       		bne.s	loc_6E28
0000DF86 0892 0001                  		bclr	#1,(a2)
0000DF8A 6700                       		beq.s	loc_6E72
0000DF8C 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DF90                             
0000DF90                            loc_6E28:
0000DF90 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000DF94 D044                       		add.w	d4,d0
0000DF96 0240 01F0                  		andi.w	#$1F0,d0
0000DF9A E848                       		lsr.w	#4,d0
0000DF9C 1030 0000                  		move.b	(a0,d0.w),d0
0000DFA0 47F9 0000 0000             		lea	(unk_6FE4).l,a3
0000DFA6 3673 0000                  		movea.w	(a3,d0.w),a3
0000DFAA 6700                       		beq.s	loc_6E5E
0000DFAC 7AF0                       		moveq	#-$10,d5
0000DFAE 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000DFB2 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DFB6 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000DFBA 6100 0000                  		bsr.w	DrawTiles_LR
0000DFBE 6000                       		bra.s	loc_6E72
0000DFC0                            ; ===========================================================================
0000DFC0                             
0000DFC0                            loc_6E5E:
0000DFC0 7A00                       		moveq	#0,d5
0000DFC2 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000DFC6 6100 0000                  		bsr.w	loc_7176
0000DFCA 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000DFCE 7C1F                       		moveq	#$1F,d6
0000DFD0 6100 0000                  		bsr.w	DrawTiles_LR3
0000DFD4                             
0000DFD4                            loc_6E72:
0000DFD4 4A12                       		tst.b	(a2)
0000DFD6 6600                       		bne.s	loc_6E78
0000DFD8 4E75                       		rts	
0000DFDA                            ; ===========================================================================
0000DFDA                             
0000DFDA                            loc_6E78:
0000DFDA 78F0                       		moveq	#-$10,d4
0000DFDC 7AF0                       		moveq	#-$10,d5
0000DFDE 1012                       		move.b	(a2),d0
0000DFE0 0200 00A8                  		andi.b	#-$58,d0
0000DFE4 6700                       		beq.s	loc_6E8C
0000DFE6 E208                       		lsr.b	#1,d0
0000DFE8 1480                       		move.b	d0,(a2)
0000DFEA 3A3C 0140                  		move.w	#$140,d5
0000DFEE                             
0000DFEE                            loc_6E8C:
0000DFEE 41F9 0000 DF56             		lea	(unk_6DF4).l,a0
0000DFF4 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000DFF8 0240 01F0                  		andi.w	#$1F0,d0
0000DFFC E848                       		lsr.w	#4,d0
0000DFFE 41F0 0000                  		lea	(a0,d0.w),a0
0000E002 6000 0000                  		bra.w	loc_6FEC
0000E006                            ; End of function sub_6DA6
0000E006                             
0000E006                             
0000E006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E006                             
0000E006                             
0000E006                            sub_6EA4:
0000E006 4A12                       		tst.b	(a2)
0000E008 6700 0000                  		beq.w	locret_6EF0
0000E00C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000E012 6700 0000                  		beq.w	loc_6F54
0000E016 0892 0000                  		bclr	#0,(a2)
0000E01A 6700                       		beq.s	loc_6ED0_2
0000E01C 383C 0040                  		move.w	#$40,d4	; '@'
0000E020 7AF0                       		moveq	#-$10,d5
0000E022 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E026 383C 0040                  		move.w	#$40,d4	; '@'
0000E02A 7AF0                       		moveq	#-$10,d5
0000E02C 7C02                       		moveq	#2,d6
0000E02E 6100 0000                  		bsr.w	DrawTiles_TB2
0000E032                             
0000E032                            loc_6ED0_2:
0000E032 0892 0001                  		bclr	#1,(a2)
0000E036 6700                       		beq.s	locret_6EF0
0000E038 383C 0040                  		move.w	#$40,d4	; '@'
0000E03C 3A3C 0140                  		move.w	#$140,d5
0000E040 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E044 383C 0040                  		move.w	#$40,d4	; '@'
0000E048 3A3C 0140                  		move.w	#$140,d5
0000E04C 7C02                       		moveq	#2,d6
0000E04E 6100 0000                  		bsr.w	DrawTiles_TB2
0000E052                             
0000E052                            locret_6EF0:
0000E052 4E75                       		rts	
0000E054                            ; ===========================================================================
0000E054 00                         unk_6EF2:	dc.b   0 ;	 
0000E055 00                         unk_6EF3:	dc.b   0 ;	 
0000E056 00                         		dc.b   0 ;  
0000E057 00                         		dc.b   0 ;  
0000E058 00                         		dc.b   0 ;  
0000E059 00                         		dc.b   0 ;  
0000E05A 06                         		dc.b   6 ;  
0000E05B 06                         		dc.b   6 ;  
0000E05C 04                         		dc.b   4 ;  
0000E05D 04                         		dc.b   4 ;  
0000E05E 04                         		dc.b   4 ;  
0000E05F 04                         		dc.b   4 ;  
0000E060 04                         		dc.b   4 ;  
0000E061 04                         		dc.b   4 ;  
0000E062 04                         		dc.b   4 ;  
0000E063 04                         		dc.b   4 ;  
0000E064 04                         		dc.b   4 ;  
0000E065 02                         		dc.b   2 ;  
0000E066 02                         		dc.b   2 ;  
0000E067 02                         		dc.b   2 ;  
0000E068 02                         		dc.b   2 ;  
0000E069 02                         		dc.b   2 ;  
0000E06A 02                         		dc.b   2 ;  
0000E06B 02                         		dc.b   2 ;  
0000E06C 02                         		dc.b   2 ;  
0000E06D 02                         		dc.b   2 ;  
0000E06E 02                         		dc.b   2 ;  
0000E06F 02                         		dc.b   2 ;  
0000E070 02                         		dc.b   2 ;  
0000E071 02                         		dc.b   2 ;  
0000E072 02                         		dc.b   2 ;  
0000E073 02                         		dc.b   2 ;  
0000E074 02                         		dc.b   2 ;  
0000E075 02                         		dc.b   2 ;  
0000E076 02                         		dc.b   2 ;  
0000E077 02                         		dc.b   2 ;  
0000E078 02                         		dc.b   2 ;  
0000E079 02                         		dc.b   2 ;  
0000E07A 02                         		dc.b   2 ;  
0000E07B 02                         		dc.b   2 ;  
0000E07C 02                         		dc.b   2 ;  
0000E07D 02                         		dc.b   2 ;  
0000E07E 02                         		dc.b   2 ;  
0000E07F 02                         		dc.b   2 ;  
0000E080 02                         		dc.b   2 ;  
0000E081 02                         		dc.b   2 ;  
0000E082 02                         		dc.b   2 ;  
0000E083 02                         		dc.b   2 ;  
0000E084 02                         		dc.b   2 ;  
0000E085 02                         		dc.b   2 ;  
0000E086 02                         		dc.b   2 ;  
0000E087 02                         		dc.b   2 ;  
0000E088 02                         		dc.b   2 ;  
0000E089 02                         		dc.b   2 ;  
0000E08A 02                         		dc.b   2 ;  
0000E08B 02                         		dc.b   2 ;  
0000E08C 02                         		dc.b   2 ;  
0000E08D 02                         		dc.b   2 ;  
0000E08E 02                         		dc.b   2 ;  
0000E08F 02                         		dc.b   2 ;  
0000E090 02                         		dc.b   2 ;  
0000E091 02                         		dc.b   2 ;  
0000E092 02                         		dc.b   2 ;  
0000E093 02                         		dc.b   2 ;  
0000E094 02                         		dc.b   2 ;  
0000E095 02                         		dc.b   2 ;  
0000E096 02                         		dc.b   2 ;  
0000E097 02                         		dc.b   2 ;  
0000E098 02                         		dc.b   2 ;  
0000E099 02                         		dc.b   2 ;  
0000E09A 02                         		dc.b   2 ;  
0000E09B 02                         		dc.b   2 ;  
0000E09C 02                         		dc.b   2 ;  
0000E09D 02                         		dc.b   2 ;  
0000E09E 02                         		dc.b   2 ;  
0000E09F 02                         		dc.b   2 ;  
0000E0A0 02                         		dc.b   2 ;  
0000E0A1 02                         		dc.b   2 ;  
0000E0A2 02                         		dc.b   2 ;  
0000E0A3 02                         		dc.b   2 ;  
0000E0A4 02                         		dc.b   2 ;  
0000E0A5 02                         		dc.b   2 ;  
0000E0A6 02                         		dc.b   2 ;  
0000E0A7 02                         		dc.b   2 ;  
0000E0A8 02                         		dc.b   2 ;  
0000E0A9 02                         		dc.b   2 ;  
0000E0AA 02                         		dc.b   2 ;  
0000E0AB 02                         		dc.b   2 ;  
0000E0AC 02                         		dc.b   2 ;  
0000E0AD 02                         		dc.b   2 ;  
0000E0AE 02                         		dc.b   2 ;  
0000E0AF 02                         		dc.b   2 ;  
0000E0B0 02                         		dc.b   2 ;  
0000E0B1 02                         		dc.b   2 ;  
0000E0B2 02                         		dc.b   2 ;  
0000E0B3 02                         		dc.b   2 ;  
0000E0B4 02                         		dc.b   2 ;  
0000E0B5 00                         		dc.b   0 ;  
0000E0B6                            ; ===========================================================================
0000E0B6                             
0000E0B6                            loc_6F54:
0000E0B6 78F0                       		moveq	#-$10,d4
0000E0B8 0892 0000                  		bclr	#0,(a2)
0000E0BC 6600                       		bne.s	loc_6F66
0000E0BE 0892 0001                  		bclr	#1,(a2)
0000E0C2 6700                       		beq.s	loc_6FAE
0000E0C4 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000E0C8                             
0000E0C8                            loc_6F66:
0000E0C8 41F9 0000 E055             		lea	(unk_6EF3).l,a0
0000E0CE 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E0D2 0440 0200                  		subi.w	#$200,d0
0000E0D6 D044                       		add.w	d4,d0
0000E0D8 0240 07F0                  		andi.w	#$7F0,d0
0000E0DC E848                       		lsr.w	#4,d0
0000E0DE 1030 0000                  		move.b	(a0,d0.w),d0
0000E0E2 367B 0000                  		movea.w	unk_6FE4(pc,d0.w),a3
0000E0E6 6700                       		beq.s	loc_6F9A
0000E0E8 7AF0                       		moveq	#-$10,d5
0000E0EA 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E0EE 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E0F2 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E0F6 6100 0000                  		bsr.w	DrawTiles_LR
0000E0FA 6000                       		bra.s	loc_6FAE
0000E0FC                            ; ===========================================================================
0000E0FC                             
0000E0FC                            loc_6F9A:
0000E0FC 7A00                       		moveq	#0,d5
0000E0FE 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E102 6100 0000                  		bsr.w	loc_7176
0000E106 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E10A 7C1F                       		moveq	#$1F,d6
0000E10C 6100 0000                  		bsr.w	DrawTiles_LR3
0000E110                             
0000E110                            loc_6FAE:
0000E110 4A12                       		tst.b	(a2)
0000E112 6600                       		bne.s	loc_6FB4
0000E114 4E75                       		rts	
0000E116                            ; ===========================================================================
0000E116                             
0000E116                            loc_6FB4:
0000E116 78F0                       		moveq	#-$10,d4
0000E118 7AF0                       		moveq	#-$10,d5
0000E11A 1012                       		move.b	(a2),d0
0000E11C 0200 00A8                  		andi.b	#-$58,d0
0000E120 6700                       		beq.s	loc_6FC8
0000E122 E208                       		lsr.b	#1,d0
0000E124 1480                       		move.b	d0,(a2)
0000E126 3A3C 0140                  		move.w	#$140,d5
0000E12A                             
0000E12A                            loc_6FC8:
0000E12A 41F9 0000 E054             		lea	(unk_6EF2).l,a0
0000E130 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E134 0440 0200                  		subi.w	#$200,d0
0000E138 0240 07F0                  		andi.w	#$7F0,d0
0000E13C E848                       		lsr.w	#4,d0
0000E13E 41F0 0000                  		lea	(a0,d0.w),a0
0000E142 6000 0000                  		bra.w	loc_6FEC
0000E146                            ; ===========================================================================
0000E146 FF                         unk_6FE4:	dc.b $FF ;  
0000E147 18                         		dc.b $18 ;  
0000E148 FF                         		dc.b $FF ;  
0000E149 18                         		dc.b $18 ;  
0000E14A FF                         		dc.b $FF ;  
0000E14B 20                         		dc.b $20 ;  
0000E14C FF                         		dc.b $FF ;  
0000E14D 28                         		dc.b $28 ; (
0000E14E                            ; ===========================================================================
0000E14E                             
0000E14E                            loc_6FEC:
0000E14E 7C0F                       		moveq	#$F,d6
0000E150 2E3C 0080 0000             		move.l	#$800000,d7
0000E156                             
0000E156                            loc_6FF4:
0000E156 7000                       		moveq	#0,d0
0000E158 1018                       		move.b	(a0)+,d0
0000E15A 0112                       		btst	d0,(a2)
0000E15C 6700                       		beq.s	loc_701C
0000E15E 367B 00E6                  		movea.w	unk_6FE4(pc,d0.w),a3
0000E162 48E7 0C80                  		movem.l	d4-d5/a0,-(sp)
0000E166 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E16A 6100 0000                  		bsr.w	sub_712A
0000E16E 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E172 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E176 6100 0000                  		bsr.w	sub_70AC
0000E17A 4CDF 0130                  		movem.l	(sp)+,d4-d5/a0
0000E17E                             
0000E17E                            loc_701C:
0000E17E 0644 0010                  		addi.w	#$10,d4
0000E182 51CE FFD2                  		dbf	d6,loc_6FF4
0000E186 4212                       		clr.b	(a2)
0000E188 4E75                       		rts	
0000E18A                            ; End of function sub_6EA4
0000E18A                             
0000E18A                             
0000E18A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E18A                             
0000E18A                             
0000E18A                            DrawTiles_LR:
0000E18A 7C15                       		moveq	#$15,d6
0000E18C                            ; End of function DrawTiles_LR
0000E18C                             
0000E18C                             
0000E18C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E18C                             
0000E18C                             
0000E18C                            DrawTiles_LR2:
0000E18C 2E3C 0080 0000             		move.l	#$800000,d7
0000E192 2200                       		move.l	d0,d1
0000E194                             
0000E194                            loc_7032:
0000E194 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E198 6100 0000                  		bsr.w	sub_712A
0000E19C 2001                       		move.l	d1,d0
0000E19E 6100 0000                  		bsr.w	sub_70AC
0000E1A2 5801                       		addq.b	#4,d1
0000E1A4 0201 007F                  		andi.b	#$7F,d1	; ''
0000E1A8 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E1AC 0645 0010                  		addi.w	#$10,d5
0000E1B0 51CE FFE2                  		dbf	d6,loc_7032
0000E1B4 4E75                       		rts	
0000E1B6                            ; End of function DrawTiles_LR2
0000E1B6                             
0000E1B6                             
0000E1B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1B6                             
0000E1B6                             
0000E1B6                            DrawTiles_LR3:
0000E1B6 2E3C 0080 0000             		move.l	#$800000,d7
0000E1BC 2200                       		move.l	d0,d1
0000E1BE                             
0000E1BE                            loc_705C:
0000E1BE 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E1C2 6100 0000                  		bsr.w	loc_712C
0000E1C6 2001                       		move.l	d1,d0
0000E1C8 6100 0000                  		bsr.w	sub_70AC
0000E1CC 5801                       		addq.b	#4,d1
0000E1CE 0201 007F                  		andi.b	#$7F,d1	; ''
0000E1D2 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E1D6 0645 0010                  		addi.w	#$10,d5
0000E1DA 51CE FFE2                  		dbf	d6,loc_705C
0000E1DE 4E75                       		rts	
0000E1E0                            ; End of function DrawTiles_LR3
0000E1E0                             
0000E1E0                             
0000E1E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1E0                             
0000E1E0                             
0000E1E0                            DrawTiles_TB:
0000E1E0 7C0F                       		moveq	#$F,d6
0000E1E2                            ; End of function DrawTiles_TB
0000E1E2                             
0000E1E2                             
0000E1E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1E2                             
0000E1E2                             
0000E1E2                            DrawTiles_TB2:
0000E1E2 2E3C 0080 0000             		move.l	#$800000,d7
0000E1E8 2200                       		move.l	d0,d1
0000E1EA                             
0000E1EA                            loc_7088:
0000E1EA 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E1EE 6100 0000                  		bsr.w	sub_712A
0000E1F2 2001                       		move.l	d1,d0
0000E1F4 6100 0000                  		bsr.w	sub_70AC
0000E1F8 0641 0100                  		addi.w	#$100,d1
0000E1FC 0241 0FFF                  		andi.w	#$FFF,d1
0000E200 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E204 0644 0010                  		addi.w	#$10,d4
0000E208 51CE FFE0                  		dbf	d6,loc_7088
0000E20C 4E75                       		rts	
0000E20E                            ; End of function DrawTiles_TB2
0000E20E                             
0000E20E                             
0000E20E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E20E                             
0000E20E                             
0000E20E                            sub_70AC:
0000E20E 8042                       		or.w	d2,d0
0000E210 4840                       		swap	d0
0000E212 0810 0003                  		btst    #3,(a0)    ; MJ: checking bit 3 not 4 (Flip)
0000E216 6600                       		bne.s	loc_70E8
0000E218 0810 0002                  		btst    #2,(a0)    ; MJ: checking bit 2 not 3 (Mirror)
0000E21C 6600                       		bne.s	loc_70C8
0000E21E 2A80                       		move.l	d0,(a5)
0000E220 2C99                       		move.l	(a1)+,(a6)
0000E222 D087                       		add.l	d7,d0
0000E224 2A80                       		move.l	d0,(a5)
0000E226 2C99                       		move.l	(a1)+,(a6)
0000E228 4E75                       		rts	
0000E22A                            ; ===========================================================================
0000E22A                             
0000E22A                            loc_70C8:
0000E22A 2A80                       		move.l	d0,(a5)
0000E22C 2819                       		move.l	(a1)+,d4
0000E22E 0A84 0800 0800             		eori.l	#$8000800,d4
0000E234 4844                       		swap	d4
0000E236 2C84                       		move.l	d4,(a6)
0000E238 D087                       		add.l	d7,d0
0000E23A 2A80                       		move.l	d0,(a5)
0000E23C 2819                       		move.l	(a1)+,d4
0000E23E 0A84 0800 0800             		eori.l	#$8000800,d4
0000E244 4844                       		swap	d4
0000E246 2C84                       		move.l	d4,(a6)
0000E248 4E75                       		rts	
0000E24A                            ; ===========================================================================
0000E24A                             
0000E24A                            loc_70E8:
0000E24A 0810 0002                  		btst    #2,(a0)
0000E24E 6600                       		bne.s	loc_710A
0000E250 2A80                       		move.l	d0,(a5)
0000E252 2A19                       		move.l	(a1)+,d5
0000E254 2819                       		move.l	(a1)+,d4
0000E256 0A84 1000 1000             		eori.l	#$10001000,d4
0000E25C 2C84                       		move.l	d4,(a6)
0000E25E D087                       		add.l	d7,d0
0000E260 2A80                       		move.l	d0,(a5)
0000E262 0A85 1000 1000             		eori.l	#$10001000,d5
0000E268 2C85                       		move.l	d5,(a6)
0000E26A 4E75                       		rts	
0000E26C                            ; ===========================================================================
0000E26C                             
0000E26C                            loc_710A:
0000E26C 2A80                       		move.l	d0,(a5)
0000E26E 2A19                       		move.l	(a1)+,d5
0000E270 2819                       		move.l	(a1)+,d4
0000E272 0A84 1800 1800             		eori.l	#$18001800,d4
0000E278 4844                       		swap	d4
0000E27A 2C84                       		move.l	d4,(a6)
0000E27C D087                       		add.l	d7,d0
0000E27E 2A80                       		move.l	d0,(a5)
0000E280 0A85 1800 1800             		eori.l	#$18001800,d5
0000E286 4845                       		swap	d5
0000E288 2C85                       		move.l	d5,(a6)
0000E28A 4E75                       		rts	
0000E28C                            ; End of function sub_70AC
0000E28C                             
0000E28C                             
0000E28C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E28C                             
0000E28C                             
0000E28C                            sub_712A:
0000E28C DA53                       		add.w	(a3),d5
0000E28E                            		
0000E28E                            loc_712C:
0000E28E D86B 0004                  		add.w	4(a3),d4
0000E292 43F8 B000                  		lea	($FFFFB000).w,a1
0000E296 3604                       		move.w	d4,d3
0000E298 0243 0780                  		andi.w    #$780,d3 ; MJ: get within 780 (Not 380) (E00 pixels (not 700)) in multiples of 80
0000E29C E64D                       		lsr.w	#3,d5
0000E29E 3005                       		move.w	d5,d0
0000E2A0 E848                       		lsr.w    #4,d0    ; MJ: divide by 10 (Not 20)
0000E2A2 0240 007F                  		andi.w	#$7F,d0	; ''
0000E2A6 E34B                       		lsl.w    #$01,d3    ; MJ: multiply by 2 (So it skips the BG)
0000E2A8 D043                       		add.w	d3,d0
0000E2AA 76FF                       		moveq	#-1,d3
0000E2AC 1634 0000                  		move.b	(a4,d0.w),d3
0000E2B0 0243 00FF                  		andi.w    #$FF,d3    ; MJ: keep within FF
0000E2B4 EE5B                       		ror.w	#7,d3
0000E2B6 E45B                               ror.w    #2,d3    ; MJ: ..plus an extra 2 (so it's within 80 bytes, not 200)
0000E2B8 0244 0070                  		andi.w    #$070,d4 ; MJ: keep Y pos within 80 pixels
0000E2BC 0245 000E                  		andi.w    #$0E,d5    ; MJ: keep X pos within 10
0000E2C0 D644                       		add.w	d4,d3
0000E2C2 D645                       		add.w	d5,d3
0000E2C4 2043                       		movea.l	d3,a0
0000E2C6 3610                       		move.w	(a0),d3
0000E2C8 0243 03FF                  		andi.w	#$3FF,d3
0000E2CC E74B                       		lsl.w	#3,d3
0000E2CE D2C3                       		adda.w	d3,a1
0000E2D0                             
0000E2D0                            locret_7172:
0000E2D0 4E75                       		rts	
0000E2D2                            		
0000E2D2                            ; End of function sub_712A
0000E2D2                             
0000E2D2                             
0000E2D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2D2                             
0000E2D2                             
0000E2D2                            Calc_VRAM_Pos:
0000E2D2 DA53                       		add.w	(a3),d5
0000E2D4                             
0000E2D4                            loc_7176:
0000E2D4 D86B 0004                  		add.w	4(a3),d4
0000E2D8 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
0000E2DC 0245 01F0                  		andi.w	#$1F0,d5
0000E2E0 E94C                       		lsl.w	#4,d4
0000E2E2 E44D                       		lsr.w	#2,d5
0000E2E4 D845                       		add.w	d5,d4
0000E2E6 7003                       		moveq	#3,d0
0000E2E8 4840                       		swap	d0
0000E2EA 3004                       		move.w	d4,d0
0000E2EC 4E75                       		rts	
0000E2EE                            ; End of function Calc_VRAM_Pos
0000E2EE                             
0000E2EE                            ; ===========================================================================
0000E2EE D86B 0004                  		add.w	4(a3),d4
0000E2F2 DA53                       		add.w	(a3),d5
0000E2F4 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
0000E2F8 0245 01F0                  		andi.w	#$1F0,d5
0000E2FC E94C                       		lsl.w	#4,d4
0000E2FE E44D                       		lsr.w	#2,d5
0000E300 D845                       		add.w	d5,d4
0000E302 7002                       		moveq	#2,d0
0000E304 4840                       		swap	d0
0000E306 3004                       		move.w	d4,d0
0000E308 4E75                       		rts	
0000E30A                             
0000E30A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E30A                             
0000E30A                             
0000E30A                            LoadTilesFromStart:
0000E30A 4BF9 00C0 0004             		lea	($C00004).l,a5
0000E310 4DF9 00C0 0000             		lea	($C00000).l,a6
0000E316 47F8 F700                  		lea	($FFFFF700).w,a3
0000E31A 2878 A400                  		movea.l	($FFFFA400).w,a4
0000E31E 343C 4000                  		move.w	#$4000,d2
0000E322 6100                       		bsr.s	LoadTilesFromStart2
0000E324 47F8 F708                  		lea	($FFFFF708).w,a3
0000E328 2878 A404                  		movea.l	($FFFFA404).w,a4
0000E32C 343C 6000                  		move.w	#$6000,d2
0000E330 4A38 FE10                  		tst.b	($FFFFFE10).w
0000E334 6700 0000                  		beq.w	loc_7220
0000E338 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000E33E 6700 0000                  		beq.w	loc_725A
0000E342 0C78 0500 FE10             		cmpi.w	#$500,($FFFFFE10).w
0000E348 6700 0000                  		beq.w	loc_7288
0000E34C 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w
0000E352 6700 0000                  		beq.w	loc_7220
0000E356                            ; End of function LoadTilesFromStart
0000E356                             
0000E356                             
0000E356                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E356                             
0000E356                             
0000E356                            LoadTilesFromStart2:
0000E356 78F0                       		moveq	#-$10,d4
0000E358 7C0F                       		moveq	#$F,d6
0000E35A                             
0000E35A                            loc_71FC:
0000E35A 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000E35E 7A00                       		moveq	#0,d5
0000E360 3204                       		move.w	d4,d1
0000E362 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
0000E366 3801                       		move.w	d1,d4
0000E368 7A00                       		moveq	#0,d5
0000E36A 7C1F                       		moveq	#$1F,d6
0000E36C 6100 FE1E                  		bsr.w	DrawTiles_LR2
0000E370 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000E374 0644 0010                  		addi.w	#$10,d4
0000E378 51CE FFE0                  		dbf	d6,loc_71FC
0000E37C 4E75                       		rts	
0000E37E                            ; End of function LoadTilesFromStart2
0000E37E                             
0000E37E                            ; ===========================================================================
0000E37E                             
0000E37E                            loc_7220:
0000E37E 7800                       		moveq	#0,d4
0000E380 7C0F                       		moveq	#$F,d6
0000E382                             
0000E382                            loc_7224:
0000E382 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000E386 41F9 0000 0000             		lea	(unk_724A).l,a0
0000E38C 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E390 D044                       		add.w	d4,d0
0000E392 0240 00F0                  		andi.w	#$F0,d0	; 'ð'
0000E396 6100 0000                  		bsr.w	sub_72BA
0000E39A 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000E39E 0644 0010                  		addi.w	#$10,d4
0000E3A2 51CE FFDE                  		dbf	d6,loc_7224
0000E3A6 4E75                       		rts	
0000E3A8                            ; ===========================================================================
0000E3A8 00                         unk_724A:	dc.b   0 ;	 
0000E3A9 00                         		dc.b   0 ;  
0000E3AA 00                         		dc.b   0 ;  
0000E3AB 00                         		dc.b   0 ;  
0000E3AC 06                         		dc.b   6 ;  
0000E3AD 06                         		dc.b   6 ;  
0000E3AE 06                         		dc.b   6 ;  
0000E3AF 04                         		dc.b   4 ;  
0000E3B0 04                         		dc.b   4 ;  
0000E3B1 04                         		dc.b   4 ;  
0000E3B2 00                         		dc.b   0 ;  
0000E3B3 00                         		dc.b   0 ;  
0000E3B4 00                         		dc.b   0 ;  
0000E3B5 00                         		dc.b   0 ;  
0000E3B6 00                         		dc.b   0 ;  
0000E3B7 00                         		dc.b   0 ;  
0000E3B8                            ; ===========================================================================
0000E3B8                             
0000E3B8                            loc_725A:
0000E3B8 78F0                       		moveq	#-$10,d4
0000E3BA 7C0F                       		moveq	#$F,d6
0000E3BC                             
0000E3BC                            loc_725E:
0000E3BC 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000E3C0 41F9 0000 E055             		lea	(unk_6EF3).l,a0
0000E3C6 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E3CA 0440 0200                  		subi.w	#$200,d0
0000E3CE D044                       		add.w	d4,d0
0000E3D0 0240 07F0                  		andi.w	#$7F0,d0
0000E3D4 6100 0000                  		bsr.w	sub_72BA
0000E3D8 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000E3DC 0644 0010                  		addi.w	#$10,d4
0000E3E0 51CE FFDA                  		dbf	d6,loc_725E
0000E3E4 4E75                       		rts	
0000E3E6                            ; ===========================================================================
0000E3E6                             
0000E3E6                            loc_7288:
0000E3E6 78F0                       		moveq	#-$10,d4
0000E3E8 7C0F                       		moveq	#$F,d6
0000E3EA                             
0000E3EA                            loc_728C:
0000E3EA 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000E3EE 41F9 0000 DF57             		lea	(unk_6DF5).l,a0
0000E3F4 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E3F8 D044                       		add.w	d4,d0
0000E3FA 0240 01F0                  		andi.w	#$1F0,d0
0000E3FE 6100 0000                  		bsr.w	sub_72BA
0000E402 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000E406 0644 0010                  		addi.w	#$10,d4
0000E40A 51CE FFDE                  		dbf	d6,loc_728C
0000E40E 4E75                       		rts	
0000E410                            ; ===========================================================================
0000E410 F7                         unk_72B2:	dc.b $F7 ; ÷
0000E411 08                         		dc.b   8 ;  
0000E412 F7                         		dc.b $F7 ; ÷
0000E413 08                         		dc.b   8 ;  
0000E414 F7                         		dc.b $F7 ; ÷
0000E415 10                         		dc.b $10 ;  
0000E416 F7                         		dc.b $F7 ; ÷
0000E417 18                         		dc.b $18 ;  
0000E418                             
0000E418                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E418                             
0000E418                             
0000E418                            sub_72BA:
0000E418 E848                       		lsr.w	#4,d0
0000E41A 1030 0000                  		move.b	(a0,d0.w),d0
0000E41E 367B 00F0                  		movea.w	unk_72B2(pc,d0.w),a3
0000E422 6700                       		beq.s	loc_72DA
0000E424 7AF0                       		moveq	#-$10,d5
0000E426 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E42A 6100 FEA6                  		bsr.w	Calc_VRAM_Pos
0000E42E 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E432 6100 FD56                  		bsr.w	DrawTiles_LR
0000E436 6000                       		bra.s	locret_72EE
0000E438                            ; ===========================================================================
0000E438                             
0000E438                            loc_72DA:
0000E438 7A00                       		moveq	#0,d5
0000E43A 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E43E 6100 FE94                  		bsr.w	loc_7176
0000E442 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E446 7C1F                       		moveq	#$1F,d6
0000E448 6100 FD6C                  		bsr.w	DrawTiles_LR3
0000E44C                             
0000E44C                            locret_72EE:
0000E44C 4E75                       		rts	
0000E44E                            ; End of function sub_72BA
0000E44E                            
0000E44E                            ; ---------------------------------------------------------------------------
0000E44E                            ; Level Art loading subroutine
0000E44E                            ; ---------------------------------------------------------------------------
0000E44E                            
0000E44E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E44E                            
0000E44E                            LoadZoneTiles:
0000E44E 7000                       		moveq   #0,d0
0000E450 1038 FE10                  		move.b  ($FFFFFE10).w,d0
0000E454 E948                       		lsl.w   #4,d0
0000E456 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w; is level Act 3?
0000E45C 6600                       		bne.s	tile_Check_Act_2	 ; if not, branch
0000E45E 45F9 0000 0000             		lea     (MainLoadBlocks3).l,a2
0000E464 4EF9 0000 0000             		jmp	 MainLoadTileLoad3
0000E46A                            tile_Check_Act_2:
0000E46A 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w; is level Act 2?
0000E470 6600                       		bne.s	MainLoadTileLoad2	 ; if not, branch
0000E472 45F9 0000 0000             		lea	(MainLoadBlocks2).l,a2
0000E478 4EF9 0000 0000             		jmp	 MainLoadTileLoad3
0000E47E                            MainLoadTileLoad2:
0000E47E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000E484                            MainLoadTileLoad3:
0000E484 45F2 0000                  		lea     (a2,d0.w),a2
0000E488 201A                       		move.l  (a2)+,d0
0000E48A 0280 00FF FFFF             		andi.l  #$FFFFFF,d0     ; 8x8 tile pointer
0000E490 2040                       		movea.l d0,a0
0000E492 43F9 00FF 0000             		lea     ($FF0000).l,a1
0000E498 4EB8 3A26                  		jsr   KosDec
0000E49C 3609                       		move.w	a1,d3
0000E49E 3E03                       		move.w	d3,d7
0000E4A0 0243 0FFF                  		andi.w	#$FFF,d3
0000E4A4 E24B                       		lsr.w	#1,d3
0000E4A6 E95F                       		rol.w	#4,d7
0000E4A8 0247 000F                  		andi.w  #$F,d7
0000E4AC                            
0000E4AC 3407                       tileloop:	move.w  d7,d2
0000E4AE EF4A                       		lsl.w   #7,d2
0000E4B0 EB4A                       		lsl.w   #5,d2
0000E4B2 223C 00FF FFFF             		move.l  #$FFFFFF,d1
0000E4B8 3202                       		move.w  d2,d1
0000E4BA 4EB9 0000 34E0             		jsr     (QueueDMATransfer).l
0000E4C0 3F07                       		move.w  d7,-(sp)
0000E4C2 11FC 000C F62A             		move.b  #$C,($FFFFF62A).w
0000E4C8 4EBA A8A8                  		jsr   DelayProgram
0000E4CC 4EB8 3762                  		jsr   RunPLC_Ram
0000E4D0 3E1F                       		move.w  (sp)+,d7
0000E4D2 363C 0800                  		move.w  #$800,d3
0000E4D6 51CF FFD4                  		dbf     d7,tileloop
0000E4DA                            
0000E4DA 4E75                       		rts
0000E4DC                            ; End of function LoadZoneTiles
0000E4DC                            
0000E4DC                            ; ---------------------------------------------------------------------------
0000E4DC                            ; Main Load Block loading subroutine
0000E4DC                            ; ---------------------------------------------------------------------------
0000E4DC                            
0000E4DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4DC                            
0000E4DC                            
0000E4DC                            MainLoadBlockLoad:; XREF: Level; EndingSequence
0000E4DC 7000                       		moveq	#0,d0
0000E4DE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000E4E2 E948                       		lsl.w	#4,d0
0000E4E4 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w; is level Act 3?
0000E4EA 6600                       		bne.s	Check_Act_2	 ; if not, branch
0000E4EC 45F9 0000 0000             		lea	(MainLoadBlocks3).l,a2
0000E4F2 4EF9 0000 0000             		jmp	 MainLoadBlockLoad3
0000E4F8                            Check_Act_2:
0000E4F8 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w; is level Act 2?
0000E4FE 6600                       		bne.s	MainLoadBlockLoad2	 ; if not, branch
0000E500 45F9 0000 0000             		lea	(MainLoadBlocks2).l,a2
0000E506 4EF9 0000 0000             				jmp	 MainLoadBlockLoad3
0000E50C                            MainLoadBlockLoad2:
0000E50C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000E512                            MainLoadBlockLoad3:
0000E512 45F2 0000                  		lea	(a2,d0.w),a2
0000E516 2F0A                       		move.l	a2,-(sp)
0000E518 588A                       		addq.l	#4,a2
0000E51A 205A                       		movea.l	(a2)+,a0
0000E51C 43F8 B000                  		lea	($FFFFB000).w,a1; RAM address for 16x16 mappings
0000E520 303C 0000                  		move.w	#0,d0
0000E524 4EB8 3A26                  		jsr	KosDec
0000E528 205A                       		movea.l	(a2)+,a0
0000E52A                            ;		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
0000E52A                            ;		beq.s	@no_dec		; if yes, branch
0000E52A                            ;		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
0000E52A                            ;		beq.s	@no_dec		; if yes, branch
0000E52A 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000E530 4EB8 3A26                  		jsr	KosDec
0000E534                             
0000E534                            ;@no_dec:
0000E534 6100 0000                  		bsr.w	LevelLayoutLoad
0000E538 301A                       		move.w	(a2)+,d0
0000E53A 3012                       		move.w	(a2),d0
0000E53C 0240 00FF                  		andi.w	#$FF,d0
0000E540 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w; is level SBZ3 (LZ4) ?
0000E546 6600                       		bne.s	MLB_ChkSBZPal; if not, branch
0000E548 700C                       		moveq	#$C,d0; use SB3 palette
0000E54A                            
0000E54A                            MLB_ChkSBZPal:
0000E54A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000E550 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
0000E552 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000E558 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000E55A                            
0000E55A                            MLB_UsePal0E:
0000E55A 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000E55C                            
0000E55C                            MLB_NormalPal:
0000E55C 4EB8 47FA                  		jsr	PalLoad1	; load pallet (based on	d0)
0000E560 245F                       		movea.l	(sp)+,a2
0000E562 584A                       		addq.w	#4,a2
0000E564 7000                       		moveq	#0,d0
0000E566 1012                       		move.b	(a2),d0
0000E568 6700                       		beq.s	locret_6D10
0000E56A 6100 0000                  		bsr.w	JmpTo2_LoadPLC		; load pattern load cues
0000E56E                            
0000E56E                            locret_6D10:
0000E56E 4E75                       		rts	
0000E570                            ; End of function MainLoadBlockLoad
0000E570                            
0000E570                            JmpTo2_LoadPLC:
0000E570 4EF8 36F6                  		jmp	LoadPLC
0000E574                            
0000E574                            ; ---------------------------------------------------------------------------
0000E574                            ; Level	layout loading subroutine
0000E574                            ; ---------------------------------------------------------------------------
0000E574                            
0000E574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E574                            
0000E574                            
0000E574                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000E574 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E578 ED08                       		lsl.b	#6,d0
0000E57A E848                       		lsr.w	#4,d0
0000E57C 3400                       		move.w	d0,d2
0000E57E D040                       		add.w	d0,d0
0000E580 D042                       		add.w	d2,d0
0000E582 43F9 0000 0000             		lea	(Level_Index).l,a1
0000E588 2271 0000                  		movea.l	(a1,d0.w),a1				; MJ: moving the address strait to a1 rather than adding a word to an address
0000E58C 21C9 A400                  		move.l	a1,($FFFFA400).w			; MJ: save location of layout to $FFFFA400
0000E590 D2FC 0080                  		adda.w	#$0080,a1				; MJ: add 80 (As the BG line is always after the FG line)
0000E594 21C9 A404                  		move.l	a1,($FFFFA404).w			; MJ: save location of layout to $FFFFA404
0000E598 4E75                       		rts						; MJ Return
0000E59A                            ; End of function LevelLayoutLoad2
0000E59A                            
0000E59A                            
0000E59A                            ; ---------------------------------------------------------------------------
0000E59A                            ; Dynamic screen resize	loading	subroutine
0000E59A                            ; ---------------------------------------------------------------------------
0000E59A                            
0000E59A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E59A                            
0000E59A                            
0000E59A                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000E59A 7000                       		moveq	#0,d0
0000E59C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000E5A0 D040                       		add.w	d0,d0
0000E5A2 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000E5A6 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000E5AA 7202                       		moveq	#2,d1
0000E5AC 3038 F726                  		move.w	($FFFFF726).w,d0
0000E5B0 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000E5B4 6700                       		beq.s	locret_6DAA
0000E5B6 6400                       		bcc.s	loc_6DAC
0000E5B8 4441                       		neg.w	d1
0000E5BA 3038 F704                  		move.w	($FFFFF704).w,d0
0000E5BE B078 F726                  		cmp.w	($FFFFF726).w,d0
0000E5C2 6300                       		bls.s	loc_6DA0
0000E5C4 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000E5C8 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000E5CE                            
0000E5CE                            loc_6DA0:
0000E5CE D378 F72E                  		add.w	d1,($FFFFF72E).w
0000E5D2 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000E5D8                            
0000E5D8                            locret_6DAA:
0000E5D8 4E75                       		rts	
0000E5DA                            ; ===========================================================================
0000E5DA                            
0000E5DA                            loc_6DAC:				; XREF: DynScrResizeLoad
0000E5DA 3038 F704                  		move.w	($FFFFF704).w,d0
0000E5DE 5040                       		addq.w	#8,d0
0000E5E0 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000E5E4 6500                       		bcs.s	loc_6DC4
0000E5E6 0838 0001 D022             		btst	#1,($FFFFD022).w
0000E5EC 6700                       		beq.s	loc_6DC4
0000E5EE D241                       		add.w	d1,d1
0000E5F0 D241                       		add.w	d1,d1
0000E5F2                            
0000E5F2                            loc_6DC4:
0000E5F2 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000E5F6 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000E5FC 4E75                       		rts	
0000E5FE                            ; End of function DynScrResizeLoad
0000E5FE                            
0000E5FE                            ; ===========================================================================
0000E5FE                            ; ---------------------------------------------------------------------------
0000E5FE                            ; Offset index for dynamic screen resizing
0000E5FE                            ; ---------------------------------------------------------------------------
0000E5FE 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
0000E602 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000E606 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000E60A 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_ABZ-Resize_Index
0000E60E                            ; ===========================================================================
0000E60E                            ; ---------------------------------------------------------------------------
0000E60E                            ; Green	Hill Zone dynamic screen resizing
0000E60E                            ; ---------------------------------------------------------------------------
0000E60E                            
0000E60E                            Resize_GHZ:				; XREF: Resize_Index
0000E60E 7000                       		moveq	#0,d0
0000E610 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000E614 D040                       		add.w	d0,d0
0000E616 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000E61A 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000E61E                            ; ===========================================================================
0000E61E 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000E620 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000E622 0000                       		dc.w Resize_GHZ3-Resize_GHZx
0000E624                            ; ===========================================================================
0000E624                            
0000E624                            Resize_GHZ1:
0000E624 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
0000E62A 31FC 0300 F72E             		move.w	#$300,($FFFFF72E).w ; set lower	y-boundary
0000E630 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000E636 6500                       		bcs.s	locret_6E08	; if not, branch
0000E638 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000E63E 31FC 0400 F72E             		move.w	#$400,($FFFFF72E).w ; set lower	y-boundary
0000E644                            		
0000E644                            
0000E644                            locret_6E08:
0000E644 4E75                       		rts	
0000E646                            ; ===========================================================================
0000E646                            
0000E646                            Resize_GHZ2:
0000E646 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000E64C 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
0000E652 6500                       		bcs.s	locret_6E3A
0000E654 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000E65A 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
0000E660 6500                       		bcs.s	locret_6E3A
0000E662 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000E668 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000E66E 6500                       		bcs.s	locret_6E3A
0000E670 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000E676                            		
0000E676                            locret_6E3A:
0000E676 4E75                       		rts	
0000E678                            ; ===========================================================================
0000E678                            
0000E678                            Resize_GHZ3:
0000E678 7000                       		moveq	#0,d0
0000E67A 1038 F742                  		move.b	($FFFFF742).w,d0
0000E67E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000E682 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000E686                            ; ===========================================================================
0000E686 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000E688 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000E68A 0000                       		dc.w Resize_GHZ3end-off_6E4A
0000E68C                            ; ===========================================================================
0000E68C                            
0000E68C                            Resize_GHZ3main:
0000E68C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000E692 31FC 0300 F72E             		move.w	#$300,($FFFFF72E).w ; set lower	y-boundary
0000E698 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000E69E 6500                       		bcs.s	locret_6E96
0000E6A0 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000E6A6 31FC 0310 F72E             		move.w	#$310,($FFFFF72E).w ; set lower	y-boundary
0000E6AC 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000E6B2 6500                       		bcs.s	locret_6E96
0000E6B4 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
0000E6BA 6500                       		bcs.s	loc_6E98
0000E6BC 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000E6C2 31FC 0400 F72E             		move.w	#$400,($FFFFF72E).w ; set lower	y-boundary
0000E6C8 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
0000E6CE 6400                       		bcc.s	loc_6E8E
0000E6D0 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000E6D6 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000E6DC                            
0000E6DC                            loc_6E8E:
0000E6DC 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000E6E2 6400                       		bcc.s	loc_6E98
0000E6E4                            
0000E6E4                            locret_6E96:
0000E6E4 4E75                       		rts	
0000E6E6                            ; ===========================================================================
0000E6E6                            
0000E6E6                            loc_6E98:
0000E6E6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000E6EC 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E6F0 4E75                       		rts	
0000E6F2                            ; ===========================================================================
0000E6F2                            
0000E6F2                            Resize_GHZ3boss:
0000E6F2 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000E6F8 6400                       		bcc.s	loc_6EB0
0000E6FA 5538 F742                  		subq.b	#2,($FFFFF742).w
0000E6FE                            
0000E6FE                            loc_6EB0:
0000E6FE 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000E704 6500                       		bcs.s	locret_6EE8
0000E706 4EB9 0000 0000             		jsr	SingleObjLoad
0000E70C 6600                       		bne.s	loc_6ED0
0000E70E 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000E712 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000E718 337C 0280 000C             		move.w	#$280,$C(a1)
0000E71E                            
0000E71E                            loc_6ED0:
0000E71E 303C 000E                  		move.w	#$0E,d0
0000E722 6100 B2FA                  		bsr.w	Jmpto_PlaySound2	; play boss music
0000E726 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000E72C 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E730 7011                       		moveq	#$11,d0
0000E732 4EF8 36F6                  		jmp	LoadPLC		; load boss patterns
0000E736                            ; ===========================================================================
0000E736                            
0000E736                            locret_6EE8:
0000E736 4E75                       		rts	
0000E738                            ; ===========================================================================
0000E738                            
0000E738                            Resize_GHZ3end:
0000E738 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000E73E 4E75                       		rts	
0000E740                            ; ===========================================================================
0000E740                            ; ---------------------------------------------------------------------------
0000E740                            ; Labyrinth Zone dynamic screen	resizing
0000E740                            ; ---------------------------------------------------------------------------
0000E740                            
0000E740                            Resize_LZ:				; XREF: Resize_Index
0000E740 7000                       		moveq	#0,d0
0000E742 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000E746 D040                       		add.w	d0,d0
0000E748 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000E74C 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000E750                            ; ===========================================================================
0000E750 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000E752 0000                       		dc.w Resize_LZ12-Resize_LZx
0000E754 0000                       		dc.w Resize_LZ3-Resize_LZx
0000E756 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000E758                            ; ===========================================================================
0000E758                            
0000E758                            Resize_LZ12:
0000E758 4E75                       		rts	
0000E75A                            ; ===========================================================================
0000E75A                            
0000E75A                            Resize_LZ3:
0000E75A 4A38 F7EF                  		tst.b	($FFFFF7EF).w				; has switch $F	been pressed?
0000E75E 6700                       		beq.s	loc_6F28				; if not, branch
0000E760 2038 A400                  		move.l	($FFFFA400).w,d0			; MJ: load layout being read currently
0000E764 0C80 0000 0000             		cmp.l	#Level_LZ3_WALL,d0			; MJ: is it already set to wall version?
0000E76A 6700                       		beq.s	loc_6F28				; MJ: if so, branch to skip
0000E76C 21FC 0000 0000 A400        		move.l	#Level_LZ3_WALL,($FFFFA400).w		; MJ: Set wall version of act 3's layout to be read
0000E774 303C 00B7                  		move.w	#$B7,d0
0000E778 6100 ABB8                  		bsr.w	Jmpto_PlaySound_Special ; play rumbling sound
0000E77C                            
0000E77C                            loc_6F28:
0000E77C 4A38 F742                  		tst.b	($FFFFF742).w
0000E780 6600                       		bne.s	locret_6F64
0000E782 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000E788 6500                       		bcs.s	locret_6F62
0000E78A 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
0000E790 6400                       		bcc.s	locret_6F62
0000E792 4EB9 0000 0000             		jsr	SingleObjLoad
0000E798 6600                       		bne.s	loc_6F4A
0000E79A 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
0000E79E                            
0000E79E                            loc_6F4A:
0000E79E 303C 000E                  		move.w	#$0E,d0
0000E7A2 6100 B27A                  		bsr.w	Jmpto_PlaySound2	; play boss music
0000E7A6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000E7AC 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E7B0 7011                       		moveq	#$11,d0
0000E7B2 4EF8 36F6                  		jmp	LoadPLC		; load boss patterns
0000E7B6                            ; ===========================================================================
0000E7B6                            
0000E7B6                            locret_6F62:
0000E7B6 4E75                       		rts	
0000E7B8                            ; ===========================================================================
0000E7B8                            
0000E7B8                            locret_6F64:
0000E7B8 4E75                       		rts	
0000E7BA                            ; ===========================================================================
0000E7BA                            
0000E7BA                            Resize_SBZ3:
0000E7BA 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000E7C0 6500                       		bcs.s	locret_6F8C
0000E7C2 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000E7C8 6400                       		bcc.s	locret_6F8C	; if not, branch
0000E7CA 4238 FE30                  		clr.b	($FFFFFE30).w
0000E7CE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E7D4 4EB9 0000 0000             		jsr Save_Progress
0000E7DA 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
0000E7E0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000E7E6                            
0000E7E6                            locret_6F8C:
0000E7E6 4E75                       		rts	
0000E7E8                            ; ===========================================================================
0000E7E8                            ; ---------------------------------------------------------------------------
0000E7E8                            ; Marble Zone dynamic screen resizing
0000E7E8                            ; ---------------------------------------------------------------------------
0000E7E8                            
0000E7E8                            Resize_MZ:				; XREF: Resize_Index
0000E7E8 7000                       		moveq	#0,d0
0000E7EA 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000E7EE D040                       		add.w	d0,d0
0000E7F0 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
0000E7F4 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000E7F8                            ; ===========================================================================
0000E7F8 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000E7FA 0000                       		dc.w Resize_MZ2-Resize_MZx
0000E7FC 0000                       		dc.w Resize_MZ3-Resize_MZx
0000E7FE                            ; ===========================================================================
0000E7FE                            
0000E7FE                            Resize_MZ1:
0000E7FE 7000                       		moveq	#0,d0
0000E800 1038 F742                  		move.b	($FFFFF742).w,d0
0000E804 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
0000E808 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000E80C                            ; ===========================================================================
0000E80C 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000E80E 0000                       		dc.w loc_6FEA-off_6FB2
0000E810 0000                       		dc.w loc_702E-off_6FB2
0000E812 0000                       		dc.w loc_7050-off_6FB2
0000E814                            ; ===========================================================================
0000E814                            
0000E814                            loc_6FBA:
0000E814 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000E81A 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000E820 6500                       		bcs.s	locret_6FE8
0000E822 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000E828 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000E82E 6500                       		bcs.s	locret_6FE8
0000E830 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000E836 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000E83C 6500                       		bcs.s	locret_6FE8
0000E83E 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E842                            
0000E842                            locret_6FE8:
0000E842 4E75                       		rts	
0000E844                            ; ===========================================================================
0000E844                            
0000E844                            loc_6FEA:
0000E844 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000E84A 6400                       		bcc.s	loc_6FF8
0000E84C 5538 F742                  		subq.b	#2,($FFFFF742).w
0000E850 4E75                       		rts	
0000E852                            ; ===========================================================================
0000E852                            
0000E852                            loc_6FF8:
0000E852 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000E858 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000E85E 6400                       		bcc.s	locret_702C
0000E860 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
0000E866 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000E86C 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
0000E872 6400                       		bcc.s	locret_702C
0000E874 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000E87A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000E880 6500                       		bcs.s	locret_702C
0000E882 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E886                            
0000E886                            locret_702C:
0000E886 4E75                       		rts	
0000E888                            ; ===========================================================================
0000E888                            
0000E888                            loc_702E:
0000E888 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000E88E 6400                       		bcc.s	loc_703C
0000E890 5538 F742                  		subq.b	#2,($FFFFF742).w
0000E894 4E75                       		rts	
0000E896                            ; ===========================================================================
0000E896                            
0000E896                            loc_703C:
0000E896 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000E89C 6500                       		bcs.s	locret_704E
0000E89E 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000E8A4 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E8A8                            
0000E8A8                            locret_704E:
0000E8A8 4E75                       		rts	
0000E8AA                            ; ===========================================================================
0000E8AA                            
0000E8AA                            loc_7050:
0000E8AA 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000E8B0 6500                       		bcs.s	locret_7072
0000E8B2 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000E8B8 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000E8BE 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000E8C4 6500                       		bcs.s	locret_7072
0000E8C6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000E8CC                            
0000E8CC                            locret_7072:
0000E8CC 4E75                       		rts	
0000E8CE                            ; ===========================================================================
0000E8CE                            
0000E8CE                            Resize_MZ2:
0000E8CE 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000E8D4 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000E8DA 6500                       		bcs.s	locret_7088
0000E8DC 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000E8E2                            
0000E8E2                            locret_7088:
0000E8E2 4E75                       		rts	
0000E8E4                            ; ===========================================================================
0000E8E4                            
0000E8E4                            Resize_MZ3:
0000E8E4 7000                       		moveq	#0,d0
0000E8E6 1038 F742                  		move.b	($FFFFF742).w,d0
0000E8EA 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000E8EE 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000E8F2                            ; ===========================================================================
0000E8F2 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
0000E8F4 0000                       		dc.w Resize_MZ3end-off_7098
0000E8F6                            ; ===========================================================================
0000E8F6                            
0000E8F6                            Resize_MZ3boss:
0000E8F6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000E8FC 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
0000E902 6500                       		bcs.s	locret_70E8
0000E904 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000E90A 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000E910 6500                       		bcs.s	locret_70E8
0000E912 4EB9 0000 0000             		jsr	SingleObjLoad
0000E918 6600                       		bne.s	loc_70D0
0000E91A 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000E91E 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000E924 337C 022C 000C             		move.w	#$22C,$C(a1)
0000E92A                            
0000E92A                            loc_70D0:
0000E92A 303C 000E                  		move.w	#$0E,d0
0000E92E 6100 B0EE                  		bsr.w	Jmpto_PlaySound2	; play boss music
0000E932 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000E938 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E93C 7011                       		moveq	#$11,d0
0000E93E 4EF8 36F6                  		jmp	LoadPLC		; load boss patterns
0000E942                            ; ===========================================================================
0000E942                            
0000E942                            locret_70E8:
0000E942 4E75                       		rts	
0000E944                            ; ===========================================================================
0000E944                            
0000E944                            Resize_MZ3end:
0000E944 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000E94A 4E75                       		rts	
0000E94C                            ; ===========================================================================
0000E94C                            ; ---------------------------------------------------------------------------
0000E94C                            ; Star Light Zone dynamic screen resizing
0000E94C                            ; ---------------------------------------------------------------------------
0000E94C                            
0000E94C                            Resize_SLZ:				; XREF: Resize_Index
0000E94C 7000                       		moveq	#0,d0
0000E94E 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000E952 D040                       		add.w	d0,d0
0000E954 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000E958 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000E95C                            ; ===========================================================================
0000E95C 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000E95E 0000                       		dc.w Resize_SLZ12-Resize_SLZx
0000E960 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000E962                            ; ===========================================================================
0000E962                            
0000E962                            Resize_SLZ12:
0000E962 4E75                       		rts	
0000E964                            ; ===========================================================================
0000E964                            
0000E964                            Resize_SLZ3:
0000E964 7000                       		moveq	#0,d0
0000E966 1038 F742                  		move.b	($FFFFF742).w,d0
0000E96A 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000E96E 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000E972                            ; ===========================================================================
0000E972 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000E974 0000                       		dc.w Resize_SLZ3boss-off_7118
0000E976 0000                       		dc.w Resize_SLZ3end-off_7118
0000E978                            ; ===========================================================================
0000E978                            
0000E978                            Resize_SLZ3main:
0000E978 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000E97E 6500                       		bcs.s	locret_7130
0000E980 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000E986 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E98A                            
0000E98A                            locret_7130:
0000E98A 4E75                       		rts	
0000E98C                            ; ===========================================================================
0000E98C                            
0000E98C                            Resize_SLZ3boss:
0000E98C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000E992 6500                       		bcs.s	locret_715C
0000E994 4EB9 0000 0000             		jsr	SingleObjLoad
0000E99A 6600                       		bne.s	loc_7144
0000E99C 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000E9A0                            
0000E9A0                            loc_7144:
0000E9A0 303C 000E                  		move.w	#$0E,d0
0000E9A4 6100 B078                  		bsr.w	Jmpto_PlaySound2	; play boss music
0000E9A8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000E9AE 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E9B2 7011                       		moveq	#$11,d0
0000E9B4 4EF8 36F6                  		jmp	LoadPLC		; load boss patterns
0000E9B8                            ; ===========================================================================
0000E9B8                            
0000E9B8                            locret_715C:
0000E9B8 4E75                       		rts	
0000E9BA                            ; ===========================================================================
0000E9BA                            
0000E9BA                            Resize_SLZ3end:
0000E9BA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000E9C0 4E75                       		rts
0000E9C2 4E75                       		rts
0000E9C4                            ; ===========================================================================
0000E9C4                            ; ---------------------------------------------------------------------------
0000E9C4                            ; Spring Yard Zone dynamic screen resizing
0000E9C4                            ; ---------------------------------------------------------------------------
0000E9C4                            
0000E9C4                            Resize_SYZ:				; XREF: Resize_Index
0000E9C4 7000                       		moveq	#0,d0
0000E9C6 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000E9CA D040                       		add.w	d0,d0
0000E9CC 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000E9D0 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000E9D4                            ; ===========================================================================
0000E9D4 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000E9D6 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000E9D8 0000                       		dc.w Resize_SYZ3-Resize_SYZx
0000E9DA                            ; ===========================================================================
0000E9DA                            
0000E9DA                            Resize_SYZ1:
0000E9DA 4E75                       		rts	
0000E9DC                            ; ===========================================================================
0000E9DC                            
0000E9DC                            Resize_SYZ2:
0000E9DC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000E9E2 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000E9E8 6500                       		bcs.s	locret_71A2
0000E9EA 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000E9F0 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000E9F6 6500                       		bcs.s	locret_71A2
0000E9F8 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000E9FE                            
0000E9FE                            locret_71A2:
0000E9FE 4E75                       		rts	
0000EA00                            ; ===========================================================================
0000EA00                            
0000EA00                            Resize_SYZ3:
0000EA00 7000                       		moveq	#0,d0
0000EA02 1038 F742                  		move.b	($FFFFF742).w,d0
0000EA06 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000EA0A 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000EA0E                            ; ===========================================================================
0000EA0E 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000EA10 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000EA12 0000                       		dc.w Resize_SYZ3end-off_71B2
0000EA14                            ; ===========================================================================
0000EA14                            
0000EA14                            Resize_SYZ3main:
0000EA14 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
0000EA1A 6500                       		bcs.s	locret_71CE
0000EA1C 4EB9 0000 0000             		jsr	SingleObjLoad
0000EA22 6600                       		bne.s	locret_71CE
0000EA24 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000EA28 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EA2C                            
0000EA2C                            locret_71CE:
0000EA2C 4E75                       		rts	
0000EA2E                            ; ===========================================================================
0000EA2E                            
0000EA2E                            Resize_SYZ3boss:
0000EA2E 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000EA34 6500                       		bcs.s	locret_7200
0000EA36 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
0000EA3C 4EB9 0000 0000             		jsr	SingleObjLoad
0000EA42 6600                       		bne.s	loc_71EC
0000EA44 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000EA48 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EA4C                            
0000EA4C                            loc_71EC:
0000EA4C 303C 000E                  		move.w	#$0E,d0
0000EA50 4EB9 0000 0000             		jsr	JmpTo_PlaySound	; play boss music
0000EA56 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000EA5C 7011                       		moveq	#$11,d0
0000EA5E 4EF8 36F6                  		jmp	LoadPLC		; load boss patterns
0000EA62                            		
0000EA62                            JmpTo_PlaySound:
0000EA62 4EF9 0000 3212             	jmp	(PlaySound).l
0000EA68                            ; ===========================================================================
0000EA68                            
0000EA68                            locret_7200:
0000EA68 4E75                       		rts	
0000EA6A                            ; ===========================================================================
0000EA6A                            
0000EA6A                            Resize_SYZ3end:
0000EA6A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000EA70 4E75                       		rts	
0000EA72                            ; ===========================================================================
0000EA72                            ; ---------------------------------------------------------------------------
0000EA72                            ; Scrap	Brain Zone dynamic screen resizing
0000EA72                            ; ---------------------------------------------------------------------------
0000EA72                            
0000EA72                            Resize_SBZ:				; XREF: Resize_Index
0000EA72 7000                       		moveq	#0,d0
0000EA74 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000EA78 D040                       		add.w	d0,d0
0000EA7A 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000EA7E 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000EA82                            ; ===========================================================================
0000EA82 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000EA84 0000                       		dc.w Resize_SBZ2-Resize_SBZx
0000EA86 0000                       		dc.w Resize_FZ-Resize_SBZx
0000EA88                            ; ===========================================================================
0000EA88                            
0000EA88                            Resize_SBZ1:
0000EA88 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000EA8E 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000EA94 6500                       		bcs.s	locret_7242
0000EA96 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000EA9C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000EAA2 6500                       		bcs.s	locret_7242
0000EAA4 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000EAAA                            
0000EAAA                            locret_7242:
0000EAAA 4E75                       		rts	
0000EAAC                            ; ===========================================================================
0000EAAC                            
0000EAAC                            Resize_SBZ2:
0000EAAC 7000                       		moveq	#0,d0
0000EAAE 1038 F742                  		move.b	($FFFFF742).w,d0
0000EAB2 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000EAB6 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000EABA                            ; ===========================================================================
0000EABA 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000EABC 0000                       		dc.w Resize_SBZ2boss-off_7252
0000EABE 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000EAC0 0000                       		dc.w Resize_SBZ2end-off_7252
0000EAC2                            ; ===========================================================================
0000EAC2                            
0000EAC2                            Resize_SBZ2main:
0000EAC2 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000EAC8 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000EACE 6500                       		bcs.s	locret_727A
0000EAD0 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
0000EAD6 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000EADC 6500                       		bcs.s	locret_727A
0000EADE 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EAE2                            
0000EAE2                            locret_727A:
0000EAE2 4E75                       		rts	
0000EAE4                            ; ===========================================================================
0000EAE4                            
0000EAE4                            Resize_SBZ2boss:
0000EAE4 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000EAEA 6500                       		bcs.s	locret_7298
0000EAEC 4EB9 0000 0000             		jsr	SingleObjLoad
0000EAF2 6600                       		bne.s	locret_7298
0000EAF4 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
0000EAF8 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EAFC 701E                       		moveq	#$1E,d0
0000EAFE 4EF8 36F6                  		jmp	LoadPLC		; load SBZ2 Eggman patterns
0000EB02                            ; ===========================================================================
0000EB02                            
0000EB02                            locret_7298:
0000EB02 4E75                       		rts	
0000EB04                            ; ===========================================================================
0000EB04                            
0000EB04                            Resize_SBZ2boss2:
0000EB04 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
0000EB0A 6500                       		bcs.s	loc_72B6
0000EB0C 4EB9 0000 0000             		jsr	SingleObjLoad
0000EB12 6600                       		bne.s	loc_72B0
0000EB14 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
0000EB18 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EB1C                            
0000EB1C                            loc_72B0:
0000EB1C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000EB22                            
0000EB22                            loc_72B6:
0000EB22 6000                       		bra.s	loc_72C2
0000EB24                            ; ===========================================================================
0000EB24                            
0000EB24                            Resize_SBZ2end:
0000EB24 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
0000EB2A 6500                       		bcs.s	loc_72C2
0000EB2C 4E75                       		rts	
0000EB2E                            ; ===========================================================================
0000EB2E                            
0000EB2E                            loc_72C2:
0000EB2E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000EB34 4E75                       		rts	
0000EB36                            ; ===========================================================================
0000EB36                            
0000EB36                            Resize_FZ:
0000EB36 7000                       		moveq	#0,d0
0000EB38 1038 F742                  		move.b	($FFFFF742).w,d0
0000EB3C 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000EB40 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000EB44                            ; ===========================================================================
0000EB44 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
0000EB48 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
0000EB4C 0000                       		dc.w Resize_FZend2-off_72D8
0000EB4E                            ; ===========================================================================
0000EB4E                            
0000EB4E                            Resize_FZmain:
0000EB4E 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000EB54 6500                       		bcs.s	loc_72F4
0000EB56 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EB5A 701F                       		moveq	#$1F,d0
0000EB5C 4EB8 36F6                  		jsr	LoadPLC		; load FZ boss patterns
0000EB60                            
0000EB60                            loc_72F4:
0000EB60 60CC                       		bra.s	loc_72C2
0000EB62                            ; ===========================================================================
0000EB62                            
0000EB62                            Resize_FZboss:
0000EB62 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000EB68 6500                       		bcs.s	loc_7312
0000EB6A 4EB9 0000 0000             		jsr	SingleObjLoad
0000EB70 6600                       		bne.s	loc_7312
0000EB72 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000EB76 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EB7A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000EB80                            
0000EB80                            loc_7312:
0000EB80 60AC                       		bra.s	loc_72C2
0000EB82                            ; ===========================================================================
0000EB82                            
0000EB82                            Resize_FZend:
0000EB82 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000EB88 6500                       		bcs.s	loc_7320
0000EB8A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EB8E                            
0000EB8E                            loc_7320:
0000EB8E 609E                       		bra.s	loc_72C2
0000EB90                            ; ===========================================================================
0000EB90                            
0000EB90                            locret_7322:
0000EB90 4E75                       		rts	
0000EB92                            ; ===========================================================================
0000EB92                            
0000EB92                            Resize_FZend2:
0000EB92 609A                       		bra.s	loc_72C2
0000EB94                            ; ===========================================================================
0000EB94                            ; ---------------------------------------------------------------------------
0000EB94                            ; Ending sequence dynamic screen resizing (empty)
0000EB94                            ; ---------------------------------------------------------------------------
0000EB94                            
0000EB94                            Resize_Ending:				; XREF: Resize_Index
0000EB94 4E75                       		rts	
0000EB96                            ; ===========================================================================
0000EB96                            ; ---------------------------------------------------------------------------
0000EB96                            ; Alpha Beta Zone sequence dynamic screen resizing (empty)
0000EB96                            ; ---------------------------------------------------------------------------
0000EB96                             
0000EB96                            Resize_ABZ:				; XREF: Resize_Index
0000EB96 7000                       		moveq	#0,d0
0000EB98 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000EB9C D040                       		add.w	d0,d0
0000EB9E 303B 0000                  		move.w	Resize_ABZx(pc,d0.w),d0
0000EBA2 4EFB 0000                  		jmp	Resize_ABZx(pc,d0.w)
0000EBA6                            ; ===========================================================================
0000EBA6 0000                       Resize_ABZx:	dc.w Resize_ABZ1-Resize_ABZx
0000EBA8 0000                       		dc.w Resize_ABZ2-Resize_ABZx
0000EBAA 0000                       		dc.w Resize_ABZ3-Resize_ABZx
0000EBAC 0000                       		dc.w Resize_ABZ4-Resize_ABZx
0000EBAE                            ; ===========================================================================
0000EBAE                            Resize_ABZ1:
0000EBAE 4E75                       		rts
0000EBB0                            ; ===========================================================================
0000EBB0                            Resize_ABZ2:
0000EBB0 4E75                       		rts
0000EBB2                            ; ===========================================================================
0000EBB2                            Resize_ABZ3:
0000EBB2 4E75                       		rts
0000EBB4                            ; ===========================================================================
0000EBB4                            Resize_ABZ4:
0000EBB4 4E75                       		rts
0000EBB6                            ; ===========================================================================
0000EBB6                            ; ---------------------------------------------------------------------------
0000EBB6                            ; Object 11 - GHZ bridge
0000EBB6                            ; ---------------------------------------------------------------------------
0000EBB6                            ; OST Variables:
0000EBB6 =00000030                  Obj11_child1		equ objoff_30	; pointer to first set of bridge segments
0000EBB6 =00000034                  Obj11_child2		equ objoff_34	; pointer to second set of bridge segments, if applicable
0000EBB6 =0000003C                  Obj11_baseYpos		equ	objoff_3C	; resting y position of bridge
0000EBB6 =0000003E                  Obj11_Sonanim		equ $3E
0000EBB6                            
0000EBB6                            Obj11:
0000EBB6                            Bridge:					; XREF: Obj_Index
0000EBB6 0828 0006 0001             		btst	#6,render_flags(a0)	; is this a child sprite object?
0000EBBC 6600 0000                  		bne.w	@child			; if yes, branch
0000EBC0 7000                       		moveq	#0,d0
0000EBC2 1028 0024                  		move.b	routine(a0),d0
0000EBC6 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
0000EBCA 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
0000EBCE                            ; ===========================================================================
0000EBCE                            @child:	; child sprite objects only need to be drawn
0000EBCE 303C 0180                  		move.w	#$180,d0
0000EBD2 6000 0000                  		bra.w	DisplaySprite3
0000EBD6                            ; ===========================================================================
0000EBD6 0000                       Bri_Index:	dc.w 	Bri_Main-Bri_Index
0000EBD8 0000                        			dc.w	Bri_Action-Bri_Index
0000EBDA 0000                        			dc.w 	Bri_Platform-Bri_Index
0000EBDC 0000                        			dc.w	Bri_Delete-Bri_Index
0000EBDE 0000                        			dc.w	Bri_Delete-Bri_Index
0000EBE0 0000                       		 	dc.w	Bri_Display-Bri_Index
0000EBE2 0000                       		 	dc.w	Bri_Collapse-Bri_Index
0000EBE4                            ; ===========================================================================
0000EBE4                            
0000EBE4                            Bri_Main:	; Routine 0
0000EBE4 5428 0024                  	addq.b	#2,routine(a0)
0000EBE8 217C 0000 0000 0004        	move.l	#Map_obj11,4(a0)
0000EBF0 317C 438E 0002             	move.w	#$438E,2(a0)
0000EBF6 117C 0004 0001             	move.b	#4,render_flags(a0)
0000EBFC 317C 0180 0018             	move.w	#$180,priority(a0)
0000EC02 117C 0080 0023             	move.b	#$80,width_pixels(a0)
0000EC08 3428 000C                  	move.w	y_pos(a0),d2
0000EC0C 3142 003C                  	move.w	d2,Obj11_baseYpos(a0)
0000EC10 3628 0008                  	move.w	x_pos(a0),d3
0000EC14 1810                       	move.b	0(a0),d4	; copy object number ($11) to d4
0000EC16 45E8 0028                  	lea		subtype(a0),a2
0000EC1A 7200                       	moveq	#0,d1
0000EC1C 1212                       	move.b	(a2),d1		; copy bridge length to d1
0000EC1E                            ;	move.b	#0,(a2)+	; clear bridge length
0000EC1E 3001                       	move.w	d1,d0
0000EC20 E248                       	lsr.w	#1,d0
0000EC22 E948                       	lsl.w	#4,d0
0000EC24 9640                       	sub.w	d0,d3		; d3 is position of leftmost log
0000EC26 4841                       	swap	d1	; store subtype in high word for later
0000EC28 323C 0008                  	move.w	#8,d1
0000EC2C 6100                       	bsr.s	Obj11_MakeBdgSegment
0000EC2E 3029 0028                  	move.w	sub6_x_pos(a1),d0
0000EC32 5140                       	subq.w	#8,d0
0000EC34 3340 0008                  	move.w	d0,x_pos(a1)		; center of first subsprite object
0000EC38 2149 0030                  	move.l	a1,Obj11_child1(a0)	; pointer to first subsprite object
0000EC3C 4841                       	swap	d1	; retrieve subtype
0000EC3E 5141                       	subq.w	#8,d1
0000EC40 6300                       	bls.s	@finish	; branch, if subtype <= 8 (bridge has no more than 8 logs)
0000EC42                            	; else, create a second subsprite object for the rest of the bridge
0000EC42 3801                       	move.w	d1,d4
0000EC44 6100                       	bsr.s	Obj11_MakeBdgSegment
0000EC46 2149 0034                  	move.l	a1,Obj11_child2(a0)	; pointer to second subsprite object
0000EC4A 3004                       	move.w	d4,d0
0000EC4C D040                       	add.w	d0,d0
0000EC4E D044                       	add.w	d4,d0	; d0*3
0000EC50 3031 0010                  	move.w	sub2_x_pos(a1,d0.w),d0
0000EC54 5140                       	subq.w	#8,d0
0000EC56 3340 0008                  	move.w	d0,x_pos(a1)		; center of second subsprite object 
0000EC5A                            @finish:
0000EC5A 6000                       	bra.s	Bri_Action
0000EC5C                            
0000EC5C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000EC5C                            Obj11_MakeBdgSegment:
0000EC5C 6100 0000                  	bsr.w	SingleObjLoad2
0000EC60 6600                       	bne.s	@rts
0000EC62 1290                       	move.b	(a0),(a1) ; load obj11
0000EC64 3368 0008 0008             	move.w	x_pos(a0),x_pos(a1)
0000EC6A 3368 000C 000C             	move.w	y_pos(a0),y_pos(a1)
0000EC70 2368 0004 0004             	move.l	mappings(a0),mappings(a1)
0000EC76 3368 0002 0002             	move.w	art_tile(a0),art_tile(a1)
0000EC7C 1368 0001 0001             	move.b	render_flags(a0),render_flags(a1)
0000EC82 08E9 0006 0001             	bset	#6,render_flags(a1)
0000EC88 137C 0040 000E             	move.b	#$40,mainspr_width(a1)
0000EC8E 1341 000F                  	move.b	d1,mainspr_childsprites(a1)
0000EC92 5301                       	subq.b	#1,d1
0000EC94 45E9 0010                  	lea		sub2_x_pos(a1),a2 ; starting address for subsprite data
0000EC98                            
0000EC98                            @makelog:
0000EC98 34C3                       	move.w	d3,(a2)+	; sub?_x_pos
0000EC9A 34C2                       	move.w	d2,(a2)+	; sub?_y_pos
0000EC9C 34FC 0000                  	move.w	#0,(a2)+	; sub?_mapframe
0000ECA0 0643 0010                  	addi.w	#$10,d3		; width of a log, x_pos for next log
0000ECA4 51C9 FFF2                  	dbf	d1,@makelog		; repeat for d1 logs
0000ECA8                            @rts:
0000ECA8 4E75                       	rts
0000ECAA                            ; End of function Obj11_MakeBdgSegment
0000ECAA                            
0000ECAA                            ; ===========================================================================
0000ECAA                            Bri_Action:	; Routine 2
0000ECAA 6100                       		bsr.s	Bri_Solid
0000ECAC 4A28 003E                  		tst.b	$3E(a0)
0000ECB0 6700                       		beq.s	@display
0000ECB2 5928 003E                  		subq.b	#4,$3E(a0)
0000ECB6 6100 0000                  		bsr.w	Bri_Bend
0000ECBA                            
0000ECBA                            	@display:
0000ECBA                            		;bsr.w	DisplaySprite
0000ECBA 6000 0000                  		bra.w	Bri_ChkDel
0000ECBE                            
0000ECBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ECBE                            
0000ECBE                            
0000ECBE                            Bri_Solid:
0000ECBE 7200                       		moveq	#0,d1
0000ECC0 1228 0028                  		move.b	subtype(a0),d1
0000ECC4 E749                       		lsl.w	#3,d1
0000ECC6 3401                       		move.w	d1,d2
0000ECC8 5041                       		addq.w	#8,d1
0000ECCA D442                       		add.w	d2,d2
0000ECCC 43F8 D000                  		lea	(v_player).w,a1
0000ECD0 1169 001C 001C             		move.b	anim(a1),anim(a0) 	; remember sonic's animation
0000ECD6 3169 0012 0012             		move.w	y_vel(a1),y_vel(a0) 	; remember sonic's y speed		
0000ECDC 4A69 0012                  		tst.w	y_vel(a1)
0000ECE0 6B00 0000                  		bmi.w	locret_751E
0000ECE4 3029 0008                  		move.w	x_pos(a1),d0
0000ECE8 9068 0008                  		sub.w	x_pos(a0),d0
0000ECEC D041                       		add.w	d1,d0
0000ECEE 6B00 0000                  		bmi.w	locret_751E
0000ECF2 B042                       		cmp.w	d2,d0
0000ECF4 6400 0000                  		bcc.w	locret_751E
0000ECF8 6000 0000                  		bra.w	Platform2
0000ECFC                            ; End of function Bri_Solid
0000ECFC                            
0000ECFC                            ; ===========================================================================
0000ECFC                            
0000ECFC                            Bri_ChkDel:
0000ED1A 4E75                       	rts
0000ED1C                            ; ---------------------------------------------------------------------------
0000ED1C                            @delete:	; delete first subsprite object
0000ED1C 2268 0030                  	movea.l	Obj11_child1(a0),a1 ; a1=object
0000ED20 6100 0000                  	bsr.w	DeleteObject2
0000ED24 0C28 0008 0028             	cmpi.b	#8,subtype(a0)
0000ED2A 6300                       	bls.s	@delparent	; if bridge has more than 8 logs, delete second subsprite object
0000ED2C 2268 0034                  	movea.l	Obj11_child2(a0),a1 ; a1=object
0000ED30 6100 0000                  	bsr.w	DeleteObject2
0000ED34                            @delparent:
0000ED34 3028 0014                          move.w	respawn_index(a0),d0	; get address in respawn table
0000ED38 3440                       	    movea.w	d0,a2				; load address into a2
0000ED3A 0892 0007                  	    bclr	#7,(a2)				; clear respawn table entry, so object can be loaded again
0000ED3E 6000 0000                  	bra.w	DeleteObject
0000ED42                            ; ===========================================================================
0000ED42                            Bri_Delete:	; Routine 6, 8
0000ED42 6000 0000                  		bra.w	DeleteObject
0000ED46                            Bri_Display:
0000ED46 6000 0000                  		bra.w	DisplaySprite
0000ED4A                            ; ===========================================================================
0000ED4A                            
0000ED4A                            Bri_Platform:	; Routine 4
0000ED4A 0C28 0023 001C             		cmpi.b	#$23,anim(a0) 		; is Sonic stomping?
0000ED50 6600                       		bne.s	@bend
0000ED52 117C 000C 0024             		move.b	#$C,routine(a0)		; go to collapsing routine
0000ED58 43F8 D000                  		lea	(v_player).w,a1
0000ED5C 08A9 0003 0022             		bclr	#3,status(a1)
0000ED62 08A8 0003 0022             		bclr	#3,status(a0)
0000ED68 137C 0023 001C             		move.b	#$23,anim(a1) 	
0000ED6E 3368 0012 0012             		move.w	y_vel(a0),y_vel(a1) 		; restore sonic's y speed		
0000ED74 6000 0000                  		bra.w	Bri_Collapse
0000ED78                            	@bend:	
0000ED78 6100 0000                  		bsr.w	Bri_Bend
0000ED7C 6100                       		bsr.s	Bri_WalkOff
0000ED7E                            	;	bsr.w	DisplaySprite
0000ED7E 6000 FF7C                  		bra.w	Bri_ChkDel
0000ED82                            ; ===========================================================================
0000ED82                            
0000ED82                            ; ---------------------------------------------------------------------------
0000ED82                            ; Subroutine allowing Sonic to walk off a bridge
0000ED82                            ; ---------------------------------------------------------------------------
0000ED82                            
0000ED82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED82                            
0000ED82                            Obj11_WalkOff:
0000ED82                            Bri_WalkOff:				; XREF: Bri_Platform
0000ED82 43F8 D000                  		lea	(v_player).w,a1
0000ED86 7200                       		moveq	#0,d1
0000ED88 1228 0028                  		move.b	subtype(a0),d1
0000ED8C E749                       		lsl.w	#3,d1
0000ED8E 3401                       		move.w	d1,d2
0000ED90 5041                       		addq.w	#8,d1
0000ED92 6100 0000                  		bsr.w	ExitPlatform2
0000ED96 6400                       		bcc.s	locret_75BE
0000ED98 E848                       		lsr.w	#4,d0
0000ED9A 1140 003F                  		move.b	d0,$3F(a0)
0000ED9E 1028 003E                  		move.b	$3E(a0),d0
0000EDA2 0C00 0040                  		cmpi.b	#$40,d0
0000EDA6 6700                       		beq.s	loc_75B6
0000EDA8 5828 003E                  		addq.b	#4,$3E(a0)
0000EDAC                            
0000EDAC                            loc_75B6:
0000EDAC 6100 0000                  		bsr.w	Bri_MoveSonic
0000EDB0                            
0000EDB0                            locret_75BE:
0000EDB0 4E75                       		rts	
0000EDB2                            ; End of function Bri_WalkOff
0000EDB2                            
0000EDB2                            
0000EDB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EDB2                            
0000EDB2                            Obj11_MoveSonic:
0000EDB2                            Bri_MoveSonic:				; XREF: Bri_WalkOff
0000EDB2 7000                       		moveq	#0,d0
0000EDB4 1028 003F                  		move.b	$3F(a0),d0						; which piece sonic is standing on
0000EDB8 2468 0030                  	movea.l	Obj11_child1(a0),a2
0000EDBC 0C40 0008                  	cmpi.w	#8,d0								; is piece number under 8
0000EDC0 6500                       	blo.s	@got_object							; if so, we have the right one
0000EDC2 2468 0034                  	movea.l	Obj11_child2(a0),a2 ; a2=object
0000EDC6 5140                       	subi.w	#8,d0
0000EDC8                            @got_object:
0000EDC8 D040                       	add.w	d0,d0
0000EDCA 3200                       	move.w	d0,d1
0000EDCC D040                       	add.w	d0,d0
0000EDCE D041                       	add.w	d1,d0
0000EDD0 3032 0012                  	move.w	sub2_y_pos(a2,d0.w),d0
0000EDD4 5140                       	subq.w	#8,d0
0000EDD6 7200                       	moveq	#0,d1
0000EDD8 1229 0016                  	move.b	$16(a1),d1
0000EDDC 9041                       	sub.w	d1,d0
0000EDDE 3340 000C                  	move.w	d0,y_pos(a1)							; change Sonic's position on y-axis
0000EDE2                            ;	moveq	#0,d4
0000EDE2 4E75                       	rts
0000EDE4                            ; End of function Bri_MoveSonic
0000EDE4                            
0000EDE4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000EDE4                            ; subroutine to make the bridge push down where Sonic or Tails walks over
0000EDE4                            Obj11_Bend:
0000EDE4                            Bri_Bend:
0000EDE4 1028 003E                  	move.b	objoff_3E(a0),d0
0000EDE8 6100 9FBA                  	bsr.w	CalcSine
0000EDEC 3800                       	move.w	d0,d4
0000EDEE 49F9 0000 0000             	lea	(byte_FB28).l,a4
0000EDF4 7000                       	moveq	#0,d0
0000EDF6 1028 0028                  	move.b	subtype(a0),d0
0000EDFA E948                       	lsl.w	#4,d0
0000EDFC 7600                       	moveq	#0,d3
0000EDFE 1628 003F                  	move.b	objoff_3F(a0),d3
0000EE02 3403                       	move.w	d3,d2
0000EE04 D640                       	add.w	d0,d3
0000EE06 7A00                       	moveq	#0,d5
0000EE08 4BF9 0000 0000             	lea	(Obj11_DepressionOffsets-$80).l,a5
0000EE0E 1A35 3000                  	move.b	(a5,d3.w),d5
0000EE12 0243 000F                  	andi.w	#$F,d3
0000EE16 E94B                       	lsl.w	#4,d3
0000EE18 47F4 3000                  	lea	(a4,d3.w),a3
0000EE1C 2268 0030                  	movea.l	Obj11_child1(a0),a1
0000EE20 45E9 0042                  	lea	sub9_y_pos+next_subspr(a1),a2
0000EE24 43E9 0012                  	lea	sub2_y_pos(a1),a1
0000EE28                            
0000EE28                            @set_piece_y:
0000EE28 7000                       	moveq	#0,d0
0000EE2A 101B                       	move.b	(a3)+,d0
0000EE2C 5240                       	addq.w	#1,d0
0000EE2E C0C5                       	mulu.w	d5,d0
0000EE30 C0C4                       	mulu.w	d4,d0
0000EE32 4840                       	swap	d0
0000EE34 D068 003C                  	add.w	Obj11_baseYpos(a0),d0
0000EE38 3280                       	move.w	d0,(a1)
0000EE3A 5C49                       	addq.w	#6,a1
0000EE3C B2CA                       	cmpa.w	a2,a1
0000EE3E 6600                       	bne.s	@next_piece
0000EE40 2268 0034                  	movea.l	Obj11_child2(a0),a1 ; a1=object
0000EE44 43E9 0012                  	lea	sub2_y_pos(a1),a1
0000EE48                            @next_piece:
0000EE48 51CA FFDE                  	dbf	d2,@set_piece_y
0000EE4C                            
0000EE4C 7000                       	moveq	#0,d0
0000EE4E 1028 0028                  	move.b	subtype(a0),d0
0000EE52 7600                       	moveq	#0,d3
0000EE54 1628 003F                  	move.b	objoff_3F(a0),d3
0000EE58 5203                       	addq.b	#1,d3
0000EE5A 9600                       	sub.b	d0,d3
0000EE5C 4403                       	neg.b	d3
0000EE5E 6B00                       	bmi.s	@rts
0000EE60 3403                       	move.w	d3,d2
0000EE62 E94B                       	lsl.w	#4,d3
0000EE64 47F4 3000                  	lea	(a4,d3.w),a3
0000EE68 D6C2                       	adda.w	d2,a3
0000EE6A 5342                       	subq.w	#1,d2
0000EE6C 6500                       	bcs.s	@rts
0000EE6E                            
0000EE6E                            @set_piece_y2:
0000EE6E 7000                       	moveq	#0,d0
0000EE70 1023                       	move.b	-(a3),d0
0000EE72 5240                       	addq.w	#1,d0
0000EE74 C0C5                       	mulu.w	d5,d0
0000EE76 C0C4                       	mulu.w	d4,d0
0000EE78 4840                       	swap	d0
0000EE7A D068 003C                  	add.w	Obj11_baseYpos(a0),d0
0000EE7E 3280                       	move.w	d0,(a1)
0000EE80 5C49                       	addq.w	#6,a1
0000EE82 B2CA                       	cmpa.w	a2,a1
0000EE84 6600                       	bne.s	@next_piece2
0000EE86 2268 0034                  	movea.l	Obj11_child2(a0),a1 ; a1=object
0000EE8A 43E9 0012                  	lea	sub2_y_pos(a1),a1
0000EE8E                            @next_piece2:
0000EE8E 51CA FFDE                  	dbf	d2,@set_piece_y2
0000EE92                            @rts:
0000EE92 4E75                       	rts
0000EE94                            ; ===========================================================================
0000EE94                            ; seems to be bridge piece vertical position offset data
0000EE94                            Obj11_DepressionOffsets: ; byte_FA98:
0000EE94 0204 0608 0806 0402 0000+  	dc.b   2,  4,  6,  8,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0,  0,  0; 16
0000EEA4 0204 0608 0A08 0604 0200+  	dc.b   2,  4,  6,  8, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0,  0; 32
0000EEB4 0204 0608 0A0A 0806 0402+  	dc.b   2,  4,  6,  8, $A, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0; 48
0000EEC4 0204 0608 0A0C 0A08 0604+  	dc.b   2,  4,  6,  8, $A, $C, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0; 64
0000EED4 0204 0608 0A0C 0C0A 0806+  	dc.b   2,  4,  6,  8, $A, $C, $C, $A,  8,  6,  4,  2,  0,  0,  0,  0; 80
0000EEE4 0204 0608 0A0C 0E0C 0A08+  	dc.b   2,  4,  6,  8, $A, $C, $E, $C, $A,  8,  6,  4,  2,  0,  0,  0; 96
0000EEF4 0204 0608 0A0C 0E0E 0C0A+  	dc.b   2,  4,  6,  8, $A, $C, $E, $E, $C, $A,  8,  6,  4,  2,  0,  0; 112
0000EF04 0204 0608 0A0C 0E10 0E0C+  	dc.b   2,  4,  6,  8, $A, $C, $E,$10, $E, $C, $A,  8,  6,  4,  2,  0; 128
0000EF14 0204 0608 0A0C 0E10 100E+  	dc.b   2,  4,  6,  8, $A, $C, $E,$10,$10, $E, $C, $A,  8,  6,  4,  2; 144
0000EF24                            
0000EF24                            ; something else important for bridge depression to work (phase? bridge size adjustment?)
0000EF24                            byte_FB28:
0000EF24 FF00 0000 0000 0000 0000+  	dc.b $FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 16
0000EF34 B5FF 0000 0000 0000 0000+  	dc.b $B5,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 32
0000EF44 7EDB FF00 0000 0000 0000+  	dc.b $7E,$DB,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 48
0000EF54 61B5 ECFF 0000 0000 0000+  	dc.b $61,$B5,$EC,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 64
0000EF64 4A93 CDF3 FF00 0000 0000+  	dc.b $4A,$93,$CD,$F3,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 80
0000EF74 3E7E B0DB F6FF 0000 0000+  	dc.b $3E,$7E,$B0,$DB,$F6,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 96
0000EF84 386D 9DC5 E4F8 FF00 0000+  	dc.b $38,$6D,$9D,$C5,$E4,$F8,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0; 112
0000EF94 3161 8EB5 D4EC FBFF 0000+  	dc.b $31,$61,$8E,$B5,$D4,$EC,$FB,$FF,  0,  0,  0,  0,  0,  0,  0,  0; 128
0000EFA4 2B56 7EA2 C1DB EEFB FF00+  	dc.b $2B,$56,$7E,$A2,$C1,$DB,$EE,$FB,$FF,  0,  0,  0,  0,  0,  0,  0; 144
0000EFB4 254A 7393 B0CD E1F3 FCFF+  	dc.b $25,$4A,$73,$93,$B0,$CD,$E1,$F3,$FC,$FF,  0,  0,  0,  0,  0,  0; 160
0000EFC4 1F44 6788 A7BD D4E7 F4FD+  	dc.b $1F,$44,$67,$88,$A7,$BD,$D4,$E7,$F4,$FD,$FF,  0,  0,  0,  0,  0; 176
0000EFD4 1F3E 5C7E 98B0 C9DB EAF6+  	dc.b $1F,$3E,$5C,$7E,$98,$B0,$C9,$DB,$EA,$F6,$FD,$FF,  0,  0,  0,  0; 192
0000EFE4 1938 5673 8EA7 BDD1 E1EE+  	dc.b $19,$38,$56,$73,$8E,$A7,$BD,$D1,$E1,$EE,$F8,$FE,$FF,  0,  0,  0; 208
0000EFF4 1938 506D 839D B0C5 D8E4+  	dc.b $19,$38,$50,$6D,$83,$9D,$B0,$C5,$D8,$E4,$F1,$F8,$FE,$FF,  0,  0; 224
0000F004 1931 4A67 7E93 A7BD CDDB+  	dc.b $19,$31,$4A,$67,$7E,$93,$A7,$BD,$CD,$DB,$E7,$F3,$F9,$FE,$FF,  0; 240
0000F014 1931 4A61 788E A2B5 C5D4+  	dc.b $19,$31,$4A,$61,$78,$8E,$A2,$B5,$C5,$D4,$E1,$EC,$F4,$FB,$FE,$FF; 256
0000F024                            
0000F024                            ; ===========================================================================
0000F024                            PlatformObj_Bridge:
0000F024 4A69 0012                  		tst.w	y_vel(a1)
0000F028 6B00 0000                  		bmi.w	locret_751E
0000F02C 3029 0008                  		move.w	x_pos(a1),d0
0000F030 9068 0008                  		sub.w	x_pos(a0),d0
0000F034 D041                       		add.w	d1,d0
0000F036 6B00 0000                  		bmi.w	locret_751E
0000F03A B042                       		cmp.w	d2,d0
0000F03C 6400 0000                  		bcc.w	locret_751E
0000F040                            		
0000F040 6000 0000                  		bra.w	Platform2
0000F044                            ; End of function Bri_Solid
0000F044                            
0000F044                            ; ===========================================================================
0000F044                            Bri_Collapse:
0000F044 2268 0030                  	movea.l	Obj11_child1(a0),a1	
0000F048 45E9 0012                  	lea	sub2_y_pos(a1),a2	; load first childsprite y pos
0000F04C 47F9 0000 0000             	lea	(Bri_Piece_Speed).l,a3	; load peice speeds
0000F052 7207                       	moveq	#8-1,d1			; move first 8 childsprites
0000F054                            @child1_yfall:
0000F054 301B                       	move.w	(a3)+,d0		; add to childsprite y pos
0000F056 D152                       	add.w	d0,(a2)
0000F058 D5FC 0000 0006             	adda.l	#6,a2			; advance to next piece
0000F05E 51C9 FFF4                  	dbf	d1,@child1_yfall
0000F062                            
0000F062 7200                       	moveq	#0,d1
0000F064 1228 0028                  	move.b	subtype(a0),d1	; retrieve subtype
0000F068 5141                       	subq.w	#8,d1
0000F06A 6300                       	bls.s	@finish			; branch, if subtype <= 8 (bridge has no more than 8 logs)
0000F06C                            		
0000F06C 2268 0034                  	movea.l	Obj11_child2(a0),a1	
0000F070 45E9 0012                  	lea	sub2_y_pos(a1),a2	; load first childsprite y pos
0000F074                            @child2_yfall:
0000F074 301B                       	move.w	(a3)+,d0		; add to childsprite y pos
0000F076 D152                       	add.w	d0,(a2)
0000F078 D5FC 0000 0006             	adda.l	#6,a2			; advance to next piece
0000F07E 51C9 FFF4                  	dbf	d1,@child2_yfall
0000F082                            
0000F082                            @finish:
0000F082 6000 FC78                  		bra.w	Bri_ChkDel
0000F086                            
0000F086                            
0000F086                            
0000F086                            Bri_Piece_Speed:
0000F086 0003 0002 0005 0004 0003+  	dc.w	$03,$02,$05,$04,$03,$05,$02,$04,$06,$05,$02,$03,$04,$02,$05,$02
0000F0A6                            	even
0000F0A6                            
0000F0A6                            ; ---------------------------------------------------------------------------
0000F0A6                            ; Platform subroutine
0000F0A6                            ; ---------------------------------------------------------------------------
0000F0A6                            
0000F0A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F0A6                            
0000F0A6                            
0000F0A6                            PlatformObject:
0000F0A6 43F8 D000                  		lea	($FFFFD000).w,a1
0000F0AA 4A69 0012                  		tst.w	y_vel(a1)
0000F0AE 6B00 0000                  		bmi.w	locret_751E
0000F0B2 3029 0008                  		move.w	8(a1),d0
0000F0B6 9068 0008                  		sub.w	8(a0),d0
0000F0BA D041                       		add.w	d1,d0
0000F0BC 6B00 0000                  		bmi.w	locret_751E
0000F0C0 D241                       		add.w	d1,d1
0000F0C2 B041                       		cmp.w	d1,d0
0000F0C4 6400 0000                  		bcc.w	locret_751E
0000F0C8                            
0000F0C8                            Platform2:
0000F0C8 3028 000C                  		move.w	$C(a0),d0
0000F0CC 5140                       		subq.w	#8,d0
0000F0CE                            
0000F0CE                            Platform3:
0000F0CE 3429 000C                  		move.w	$C(a1),d2
0000F0D2 1229 0016                  		move.b	$16(a1),d1
0000F0D6 4881                       		ext.w	d1
0000F0D8 D242                       		add.w	d2,d1
0000F0DA 5841                       		addq.w	#4,d1
0000F0DC 9041                       		sub.w	d1,d0
0000F0DE 6200 0000                  		bhi.w	locret_751E
0000F0E2 0C40 FFF0                  		cmpi.w	#-$10,d0
0000F0E6 6500 0000                  		bcs.w	locret_751E
0000F0EA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000F0EE 6B00 0000                  		bmi.w	locret_751E
0000F0F2 0C29 0006 0024             		cmpi.b	#6,routine(a1)
0000F0F8 6400 0000                  		bcc.w	locret_751E
0000F0FC D440                       		add.w	d0,d2
0000F0FE 5642                       		addq.w	#3,d2
0000F100 3342 000C                  		move.w	d2,$C(a1)
0000F104 5428 0024                  		addq.b	#2,routine(a0)
0000F108                            
0000F108                            loc_74AE:
0000F108 0829 0003 0022             		btst	#3,status(a1)
0000F10E 6700                       		beq.s	loc_74DC
0000F110 7000                       		moveq	#0,d0
0000F112 1029 003D                  		move.b	$3D(a1),d0
0000F116 ED48                       		lsl.w	#6,d0
0000F118 0680 00FF D000             		addi.l	#$FFD000,d0
0000F11E 2440                       		movea.l	d0,a2
0000F120 08AA 0003 0022             		bclr	#3,status(a2)
0000F126 422A 0025                  		clr.b	routine_secondary(a2)
0000F12A 0C2A 0004 0024             		cmpi.b	#4,routine(a2)
0000F130 6600                       		bne.s	loc_74DC
0000F132 552A 0024                  		subq.b	#2,routine(a2)
0000F136                            
0000F136                            loc_74DC:
0000F136 3008                       		move.w	a0,d0
0000F138 0440 D000                  		subi.w	#-$3000,d0
0000F13C EC48                       		lsr.w	#6,d0
0000F13E 0240 007F                  		andi.w	#$7F,d0
0000F142 1340 003D                  		move.b	d0,$3D(a1)
0000F146 137C 0000 0026             		move.b	#0,$26(a1)
0000F14C 337C 0000 0012             		move.w	#0,y_vel(a1)
0000F152 3369 0010 0020             		move.w	x_vel(a1),inertia(a1)
0000F158 0829 0001 0022             		btst	#1,status(a1)
0000F15E 6700                       		beq.s	loc_7512
0000F160 2F08                       		move.l	a0,-(sp)
0000F162 2049                       		movea.l	a1,a0
0000F164 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000F16A 205F                       		movea.l	(sp)+,a0
0000F16C                            
0000F16C                            loc_7512:
0000F16C 08E9 0003 0022             		bset	#3,status(a1)
0000F172 08A9 0001 0022             		bclr	#1,status(a1)
0000F178 0DE8 0022                  		bset	d6,status(a0)
0000F17C                            
0000F17C                            locret_751E:
0000F17C 4E75                       		rts	
0000F17E                            ; End of function PlatformObject
0000F17E                            
0000F17E                            ; ---------------------------------------------------------------------------
0000F17E                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000F17E                            ; ---------------------------------------------------------------------------
0000F17E                            
0000F17E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F17E                            
0000F17E                            
0000F17E                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000F17E 43F8 D000                  		lea	($FFFFD000).w,a1
0000F182 4A69 0012                  		tst.w	y_vel(a1)
0000F186 6B00 FFF4                  		bmi.w	locret_751E
0000F18A 3029 0008                  		move.w	8(a1),d0
0000F18E 9068 0008                  		sub.w	8(a0),d0
0000F192 D041                       		add.w	d1,d0
0000F194 6BE6                       		bmi.s	locret_751E
0000F196 D241                       		add.w	d1,d1
0000F198 B041                       		cmp.w	d1,d0
0000F19A 64E0                       		bcc.s	locret_751E
0000F19C 0828 0000 0001             		btst	#0,1(a0)
0000F1A2 6700                       		beq.s	loc_754A
0000F1A4 4640                       		not.w	d0
0000F1A6 D041                       		add.w	d1,d0
0000F1A8                            
0000F1A8                            loc_754A:
0000F1A8 E248                       		lsr.w	#1,d0
0000F1AA 7600                       		moveq	#0,d3
0000F1AC 1632 0000                  		move.b	(a2,d0.w),d3
0000F1B0 3028 000C                  		move.w	$C(a0),d0
0000F1B4 9043                       		sub.w	d3,d0
0000F1B6 6000 FF16                  		bra.w	Platform3
0000F1BA                            ; End of function SlopeObject
0000F1BA                            
0000F1BA                            
0000F1BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1BA                            
0000F1BA                            
0000F1BA                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000F1BA 43F8 D000                  		lea	($FFFFD000).w,a1
0000F1BE 4A69 0012                  		tst.w	y_vel(a1)
0000F1C2 6B00 FFB8                  		bmi.w	locret_751E
0000F1C6 3029 0008                  		move.w	8(a1),d0
0000F1CA 9068 0008                  		sub.w	8(a0),d0
0000F1CE D041                       		add.w	d1,d0
0000F1D0 6B00 FFAA                  		bmi.w	locret_751E
0000F1D4 D241                       		add.w	d1,d1
0000F1D6 B041                       		cmp.w	d1,d0
0000F1D8 6400 FFA2                  		bcc.w	locret_751E
0000F1DC 3028 000C                  		move.w	$C(a0),d0
0000F1E0 9043                       		sub.w	d3,d0
0000F1E2 6000 FEEA                  		bra.w	Platform3
0000F1E6                            ; End of function Obj15_Solid
0000F1E6                            
0000F1E6                            ; ---------------------------------------------------------------------------
0000F1E6                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000F1E6                            ; ---------------------------------------------------------------------------
0000F1E6                            
0000F1E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1E6                            
0000F1E6                            
0000F1E6                            ExitPlatform:
0000F1E6 3401                       		move.w	d1,d2
0000F1E8                            
0000F1E8                            ExitPlatform2:
0000F1E8 D442                       		add.w	d2,d2
0000F1EA 43F8 D000                  		lea	($FFFFD000).w,a1
0000F1EE 0829 0001 0022             		btst	#1,status(a1)
0000F1F4 6600                       		bne.s	loc_75E0
0000F1F6 3029 0008                  		move.w	8(a1),d0
0000F1FA 9068 0008                  		sub.w	8(a0),d0
0000F1FE D041                       		add.w	d1,d0
0000F200 6B00                       		bmi.s	loc_75E0
0000F202 B042                       		cmp.w	d2,d0
0000F204 6500                       		bcs.s	locret_75F2
0000F206                            
0000F206                            loc_75E0:
0000F206 08A9 0003 0022             		bclr	#3,status(a1)
0000F20C                            ;		bset	#1,status(a1)		
0000F20C 117C 0002 0024             		move.b	#2,routine(a0)
0000F212 0DA8 0022                  		bclr	d6,status(a0)
0000F216                            
0000F216                            locret_75F2:
0000F216 4E75                       		rts	
0000F218                            ; End of function ExitPlatform
0000F218                            
0000F218                            ; ---------------------------------------------------------------------------
0000F218                            ; Sprite mappings - GHZ	bridge
0000F218                            ; ---------------------------------------------------------------------------
0000F218                            Map_obj11:
0000F218                            	include "_maps\obj11.asm"
0000F218                            ; ---------------------------------------------------------------------------
0000F218                            ; Sprite mappings - GHZ	bridge
0000F218                            ; ---------------------------------------------------------------------------
0000F218 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
0000F21C 0000                       		dc.w byte_794B-Map_obj11
0000F21E 01                         byte_793A:	dc.b 1
0000F21F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F224 02                         byte_7940:	dc.b 2
0000F225 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000F22A 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000F22F 01                         byte_794B:	dc.b 1
0000F230 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000F236 00                         		even
0000F236 00                         		even
0000F236                            
0000F236                            ; ===========================================================================
0000F236                            ; ---------------------------------------------------------------------------
0000F236                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000F236                            ;	    - spiked ball on a chain (SBZ)
0000F236                            ; ---------------------------------------------------------------------------
0000F236                            
0000F236                            Obj15:			; XREF: Obj_Index
0000F236 7000                       		moveq	#0,d0
0000F238 1028 0024                  		move.b	routine(a0),d0
0000F23C 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000F240 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000F244                            ; ===========================================================================
0000F244 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000F248 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000F24C 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000F250 0000                       		dc.w Obj15_Action-Obj15_Index
0000F252                            
0000F252 =0000003A                  origX:		= $3A		; original x-axis position
0000F252 =00000038                  origY:		= $38		; original y-axis position
0000F252                            ; ===========================================================================
0000F252                            
0000F252                            Obj15_Main:	; Routine 0
0000F252 5428 0024                  		addq.b	#2,routine(a0)
0000F256 217C 0000 0000 0004        		move.l	#Map_obj15,mappings(a0) ; GHZ and MZ specific code
0000F25E 317C 4380 0002             		move.w	#$4380,art_tile(a0)
0000F264 117C 0004 0001             		move.b	#4,render_flags(a0)
0000F26A 317C 0180 0018             		move.w	#$180,priority(a0)
0000F270 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0000F276 117C 0008 0023             		move.b	#8,width_pixels(a0)
0000F27C 3168 000C 0038              		move.w	y_pos(a0),origY(a0)
0000F282 3168 0008 003A              		move.w	x_pos(a0),origX(a0)
0000F288 0C38 0003 FE10              		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000F28E 6600                        		bne.s	@notSLZ
0000F290 3168 000C 0038                             move.w	y_pos(a0),origY(a0)      ; +++ zone agnostic objects
0000F296 3168 0008 003A             		move.w	x_pos(a0),origX(a0)
0000F29C                             
0000F29C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
0000F2A2 6600                       		bne.s	@notLZ
0000F2A4 317C 4310 0002             		move.w	#$4310,art_tile(a0)
0000F2AA 217C 0000 0000 0004        		move.l	#Map_obj15a,mappings(a0)
0000F2B2 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0000F2B8                             
0000F2B8                            	@notLZ:
0000F2B8 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000F2BE 6600                       		bne.s	@notSLZ
0000F2C0                            
0000F2C0 217C 0000 0000 0004        		move.l	#Map_obj15a,mappings(a0) ; SLZ specific code
0000F2C8 317C 43DC 0002             		move.w	#$43DC,art_tile(a0)
0000F2CE 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0000F2D4 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0000F2DA 117C 0099 0020             		move.b	#$99,$20(a0)
0000F2E0                            
0000F2E0                            	@notSLZ:
0000F2E0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000F2E6 6600                       		bne.s	@length
0000F2E8                            
0000F2E8 217C 0000 0000 0004        		move.l	#Map_obj15b,mappings(a0) ; SBZ specific code
0000F2F0 317C 0391 0002             		move.w	#$391,art_tile(a0)
0000F2F6 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0000F2FC 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0000F302 117C 0086 0020             		move.b	#$86,$20(a0)
0000F308 117C 000C 0024             		move.b	#$C,routine(a0) ; goto Obj15_Action next
0000F30E                            
0000F30E                            @length:
0000F30E 1810                       		move.b	0(a0),d4         ; copy object number do d4 ($15)
0000F310 7200                       		moveq	#0,d1
0000F312 45E8 0028                  		lea	subtype(a0),a2 ; subtype byte is equal to chain length
0000F316 1212                       		move.b	(a2),d1		 ; copy subtype to d1
0000F318 3F01                       		move.w	d1,-(sp)         ; put subtype on stack
0000F31A 0241 000F                  		andi.w	#$F,d1           ; make sure chain length is 15 or less
0000F31E 14FC 0000                  		move.b	#0,(a2)+         ; set subtype to 0 and increment a2 into scratch ram
0000F322 3601                       		move.w	d1,d3            ; copy chain length
0000F324 E94B                       		lsl.w	#4,d3            ; multiply length by 16(diameter of chain piece in pixels)
0000F326 5003                       		addq.b	#8,d3            ; raise platform position by 8 pixels
0000F328 1143 003C                  		move.b	d3,$3C(a0)       ; copy result into scratch ram
0000F32C 5103                       		subq.b	#8,d3            ; reset position
0000F32E 4A28 001A                  		tst.b	obFrame(a0)
0000F332 6700                       		beq.s	@makechain       ; if frame is 0 (the platform), then create chain
0000F334 5003                       		addq.b	#8,d3            ; add 8
0000F336 5341                       		subq.w	#1,d1            ; sub 1 from chain length to give correct loop amount
0000F338                            
0000F338                            @makechain:
0000F338 6100 0000                  		bsr.w	SingleObjLoad
0000F33C 6600                       		bne.s	@fail
0000F33E 5228 0028                  		addq.b	#1,subtype(a0) ; subtype is number of pieces created
0000F342 3A09                       		move.w	a1,d5            ; set d5 to the ram address of the free object
0000F344 0445 D000                  		subi.w	#$D000,d5
0000F348 EC4D                       		lsr.w	#6,d5            ; divide by $40
0000F34A 0245 007F                  		andi.w	#$7F,d5
0000F34E 14C5                       		move.b	d5,(a2)+         ; put new chain link's object slot into a list in main object's ram
0000F350 137C 000A 0024             		move.b	#$A,routine(a1) ; new link to goto Obj15_Display next
0000F356 1284                       		move.b	d4,0(a1)	 ; load link object
0000F358 2368 0004 0004             		move.l	mappings(a0),mappings(a1)
0000F35E 3368 0002 0002             		move.w	art_tile(a0),art_tile(a1)
0000F364 08A9 0006 0002             		bclr	#6,art_tile(a1)
0000F36A 137C 0004 0001             		move.b	#4,render_flags(a1)
0000F370 337C 0200 0018             		move.w	#$200,priority(a1)
0000F376 137C 0008 0023             		move.b	#8,width_pixels(a1)
0000F37C 137C 0001 001A             		move.b	#1,obFrame(a1)     ; set frame to link
0000F382 1343 003C                  		move.b	d3,$3C(a1)         ; set link's distance from platform
0000F386 0403 0010                  		subi.b	#$10,d3            ; get distance of next link
0000F38A 6400                       		bcc.s	@notanchor         ; if not less than 0, leave graphics as a chain link
0000F38C 137C 0002 001A             		move.b	#2,obFrame(a1)
0000F392 337C 0180 0018             		move.w	#$180,priority(a1)
0000F398 08E9 0006 0002             		bset	#6,art_tile(a1)
0000F39E 0C38 0001 FE10                     cmpi.b	#id_LZ,(v_zone).w      ; +++ zone agnostic objects
0000F3A4 6700                       		beq.s	@notanchor             ;
0000F3A6 08E9 0006 0002             		bset	#6,art_tile(a1)           ;
0000F3AC                            	@notanchor:
0000F3AC 51C9 FF8A                  		dbf	d1,@makechain ; repeat d1 times (chain length)
0000F3B0                            
0000F3B0                            	@fail:
0000F3B0 3A08                       		move.w	a0,d5
0000F3B2 0445 D000                  		subi.w	#$D000,d5
0000F3B6 EC4D                       		lsr.w	#6,d5
0000F3B8 0245 007F                  		andi.w	#$7F,d5
0000F3BC 14C5                       		move.b	d5,(a2)+
0000F3BE 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0000F3C4 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000F3CA 321F                       		move.w	(sp)+,d1
0000F3CC 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000F3D0 6700                       		beq.s	@not8X	; if not, branch
0000F3D2 217C 0000 0000 0004        		move.l	#Map_obj48,mappings(a0) ; use GHZ ball mappings
0000F3DA 317C 43AA 0002             		move.w	#$43AA,art_tile(a0)
0000F3E0 117C 0001 001A             		move.b	#1,obFrame(a0)
0000F3E6 317C 0100 0018             		move.w	#$100,priority(a0)
0000F3EC 117C 0081 0020             		move.b	#$81,$20(a0) ; make object hurt when touched
0000F3F2                            
0000F3F2                            	@not8X:
0000F3F2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000F3F8 6700                       		beq.s	Obj15_Action	; if yes, branch
0000F3FA                            
0000F3FA                            Obj15_SetSolid:	; Routine 2
0000F3FA 7200                       		moveq	#0,d1
0000F3FC 1228 0023                  		move.b	width_pixels(a0),d1
0000F400 7600                       		moveq	#0,d3
0000F402 1628 0023                  		move.b	width_pixels(a0),d3
0000F406 6100 FDB2                  		bsr.w	Obj15_Solid
0000F40A                            
0000F40A                            Obj15_Action:	; Routine $C
0000F40A 6100 0000                  		bsr.w	Obj15_Move
0000F40E 6100 0000                  		bsr.w	DisplaySprite
0000F412 6000 0000                  		bra.w	Obj15_ChkDel
0000F416                            ; ===========================================================================
0000F416                            
0000F416                            Obj15_Action2:	; Routine 4
0000F416 7200                       		moveq	#0,d1
0000F418 1228 0023                  		move.b	width_pixels(a0),d1
0000F41C 6100 FDC8                  		bsr.w	ExitPlatform
0000F420 3F28 0008                  		move.w	x_pos(a0),-(sp)
0000F424 6100 0000                  		bsr.w	Obj15_Move
0000F428 341F                       		move.w	(sp)+,d2
0000F42A 7600                       		moveq	#0,d3
0000F42C 1628 0023                  		move.b	width_pixels(a0),d3
0000F430 5203                       		addq.b	#1,d3
0000F432 6100 0000                  		bsr.w	MvSonicOnPtfm
0000F436 6100 0000                  		bsr.w	DisplaySprite
0000F43A 6000 0000                  		bra.w	Obj15_ChkDel
0000F43E                            
0000F43E 4E75                       		rts
0000F440                            
0000F440                            
0000F440                            ; ===========================================================================
0000F440                            
0000F440                            ; ---------------------------------------------------------------------------
0000F440                            ; Subroutine to	change Sonic's position with a platform
0000F440                            ; ---------------------------------------------------------------------------
0000F440                            
0000F440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F440                            
0000F440                            
0000F440                            MvSonicOnPtfm:
0000F440 43F8 D000                  		lea	($FFFFD000).w,a1
0000F444 3028 000C                  		move.w	$C(a0),d0
0000F448 9043                       		sub.w	d3,d0
0000F44A 6000                       		bra.s	MvSonic2
0000F44C                            ; End of function MvSonicOnPtfm
0000F44C                            
0000F44C                            
0000F44C                            ; ---------------------------------------------------------------------------
0000F44C                            ; Subroutine to	change Sonic's position with a platform
0000F44C                            ; ---------------------------------------------------------------------------
0000F44C                            
0000F44C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F44C                            
0000F44C                            
0000F44C                            MvSonicOnPtfm2:
0000F44C 43F8 D000                  		lea	($FFFFD000).w,a1
0000F450 3028 000C                  		move.w	$C(a0),d0
0000F454 0440 0009                  		subi.w	#9,d0
0000F458                            
0000F458                            MvSonic2:
0000F458 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000F45C 6B00                       		bmi.s	locret_7B62
0000F45E 0C29 0006 0024             		cmpi.b	#6,routine(a1)
0000F464 6400                       		bcc.s	locret_7B62
0000F466 4A78 FE08                  		tst.w	($FFFFFE08).w
0000F46A 6600                       		bne.s	locret_7B62
0000F46C 7200                       		moveq	#0,d1
0000F46E 1229 0016                  		move.b	$16(a1),d1
0000F472 9041                       		sub.w	d1,d0
0000F474 3340 000C                  		move.w	d0,$C(a1)
0000F478 9468 0008                  		sub.w	8(a0),d2
0000F47C 9569 0008                  		sub.w	d2,8(a1)
0000F480 4A38 FE2C                  		tst.b	($FFFFFE2C).w     ; does Sonic have a shield?
0000F484 6700                       		beq.s	locret_7B62       ; if not, branch
0000F486 31C0 D18C                  		move.w	d0,($FFFFD180+$C).w   ; apply change to Shield's Y-Position
0000F48A 9578 D188                  		sub.w	d2,($FFFFD180+8).w   ; apply change to Shield's X-Position
0000F48E                            locret_7B62:
0000F48E 4E75                       		rts	
0000F490                            ; End of function MvSonicOnPtfm2
0000F490                            
0000F490                            
0000F490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F490                            
0000F490                            
0000F490                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000F490 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000F494 323C 0080                  		move.w	#$80,d1
0000F498 0828 0000 0022             		btst	#0,$22(a0)
0000F49E 6700                       		beq.s	loc_7B78
0000F4A0 4440                       		neg.w	d0
0000F4A2 D041                       		add.w	d1,d0
0000F4A4                            
0000F4A4                            loc_7B78:
0000F4A4 6000                       		bra.s	Obj15_Move2
0000F4A6                            ; End of function Obj15_Move
0000F4A6                            
0000F4A6                            
0000F4A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F4A6                            
0000F4A6                            
0000F4A6                            Obj48_Move:				; XREF: Obj48_Display2
0000F4A6 4A28 003D                  		tst.b	$3D(a0)
0000F4AA 6600                       		bne.s	loc_7B9C
0000F4AC 3028 003E                  		move.w	$3E(a0),d0
0000F4B0 5040                       		addq.w	#8,d0
0000F4B2 3140 003E                  		move.w	d0,$3E(a0)
0000F4B6 D168 0026                  		add.w	d0,$26(a0)
0000F4BA 0C40 0200                  		cmpi.w	#$200,d0
0000F4BE 6600                       		bne.s	loc_7BB6
0000F4C0 117C 0001 003D             		move.b	#1,$3D(a0)
0000F4C6 6000                       		bra.s	loc_7BB6
0000F4C8                            ; ===========================================================================
0000F4C8                            
0000F4C8                            loc_7B9C:
0000F4C8 3028 003E                  		move.w	$3E(a0),d0
0000F4CC 5140                       		subq.w	#8,d0
0000F4CE 3140 003E                  		move.w	d0,$3E(a0)
0000F4D2 D168 0026                  		add.w	d0,$26(a0)
0000F4D6 0C40 FE00                  		cmpi.w	#-$200,d0
0000F4DA 6600                       		bne.s	loc_7BB6
0000F4DC 117C 0000 003D             		move.b	#0,$3D(a0)
0000F4E2                            
0000F4E2                            loc_7BB6:
0000F4E2 1028 0026                  		move.b	$26(a0),d0
0000F4E6                            ; End of function Obj48_Move
0000F4E6                            
0000F4E6                            
0000F4E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F4E6                            
0000F4E6                            
0000F4E6                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000F4E6 6100 98BC                  		bsr.w	CalcSine
0000F4EA 3428 0038                  		move.w	$38(a0),d2
0000F4EE 3628 003A                  		move.w	$3A(a0),d3
0000F4F2 45E8 0028                  		lea	$28(a0),a2
0000F4F6 7C00                       		moveq	#0,d6
0000F4F8 1C1A                       		move.b	(a2)+,d6
0000F4FA                            
0000F4FA                            loc_7BCE:
0000F4FA 7800                       		moveq	#0,d4
0000F4FC 181A                       		move.b	(a2)+,d4
0000F4FE ED4C                       		lsl.w	#6,d4
0000F500 0684 00FF D000             		addi.l	#$FFD000,d4
0000F506 2244                       		movea.l	d4,a1
0000F508 7800                       		moveq	#0,d4
0000F50A 1829 003C                  		move.b	$3C(a1),d4
0000F50E 2A04                       		move.l	d4,d5
0000F510 C9C0                       		muls.w	d0,d4
0000F512 E084                       		asr.l	#8,d4
0000F514 CBC1                       		muls.w	d1,d5
0000F516 E085                       		asr.l	#8,d5
0000F518 D842                       		add.w	d2,d4
0000F51A DA43                       		add.w	d3,d5
0000F51C 3344 000C                  		move.w	d4,$C(a1)
0000F520 3345 0008                  		move.w	d5,8(a1)
0000F524 51CE FFD4                  		dbf	d6,loc_7BCE
0000F528 4E75                       		rts	
0000F52A                            ; End of function Obj15_Move2
0000F52A                            
0000F52A                            ; ===========================================================================
0000F52A                            
0000F52A                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000F52A 3028 003A                  		move.w	$3A(a0),d0
0000F52E 0240 FF80                  		andi.w	#$FF80,d0
0000F532 3238 F700                  		move.w	($FFFFF700).w,d1
0000F536 0441 0080                  		subi.w	#$80,d1
0000F53A 0241 FF80                  		andi.w	#$FF80,d1
0000F53E 9041                       		sub.w	d1,d0
0000F540 0C40 0280                  		cmpi.w	#$280,d0
0000F544 6200 0000                  		bhi.w	Obj15_DelAll
0000F548 4E75                       		rts	
0000F54A                            ; ===========================================================================
0000F54A                            
0000F54A                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000F54A 7400                       		moveq	#0,d2
0000F54C 45E8 0028                  		lea	$28(a0),a2
0000F550 141A                       		move.b	(a2)+,d2
0000F552                            
0000F552                            Obj15_DelLoop:
0000F552 7000                       		moveq	#0,d0
0000F554 101A                       		move.b	(a2)+,d0
0000F556 ED48                       		lsl.w	#6,d0
0000F558 0680 00FF D000             		addi.l	#$FFD000,d0
0000F55E 2240                       		movea.l	d0,a1
0000F560 6100 0000                  		bsr.w	DeleteObject2
0000F564 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000F568 4E75                       		rts	
0000F56A                            ; ===========================================================================
0000F56A                            
0000F56A                            Obj15_Delete:				; XREF: Obj15_Index
0000F56A 7000                       		moveq	#0,d0
0000F56C 3028 0014                          move.w	respawn_index(a0),d0	; get address in respawn table
0000F570 3440                       	    movea.w	d0,a2				; load address into a2
0000F572 0892 0007                  	    bclr	#7,(a2)				; clear respawn table entry, so object can be loaded again
0000F576 6100 0000                  		bsr.w	DeleteObject
0000F57A 4E75                       		rts	
0000F57C                            ; ===========================================================================
0000F57C                            
0000F57C                            Obj15_Display:				; XREF: Obj15_Index
0000F57C 6000 0000                  		bra.w	DisplaySprite
0000F580                            ; ===========================================================================
0000F580                            ; ---------------------------------------------------------------------------
0000F580                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000F580                            ; ---------------------------------------------------------------------------
0000F580                            Map_obj15:
0000F580                            	include "_maps\obj15ghz.asm"
0000F580                            ; ---------------------------------------------------------------------------
0000F580                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000F580                            ; ---------------------------------------------------------------------------
0000F580 0000                       		dc.w byte_7C4E-Map_obj15
0000F582 0000                       		dc.w byte_7C59-Map_obj15
0000F584 0000                       		dc.w byte_7C5F-Map_obj15
0000F586 02                         byte_7C4E:	dc.b 2
0000F587 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000F58C F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000F591 01                         byte_7C59:	dc.b 1
0000F592 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F597 01                         byte_7C5F:	dc.b 1
0000F598 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000F59E 00                         		even
0000F59E 00                         		even
0000F59E                            
0000F59E                            ; ---------------------------------------------------------------------------
0000F59E                            ; Sprite mappings - SLZ	swinging platforms
0000F59E                            ; ---------------------------------------------------------------------------
0000F59E                            Map_obj15a:
0000F59E                            	include "_maps\obj15slz.asm"
0000F59E                            ; ---------------------------------------------------------------------------
0000F59E                            ; Sprite mappings - SLZ	swinging platforms
0000F59E                            ; ---------------------------------------------------------------------------
0000F59E 0000                       		dc.w byte_7C6C-Map_obj15a
0000F5A0 0000                       		dc.w byte_7C95-Map_obj15a
0000F5A2 0000                       		dc.w byte_7C9B-Map_obj15a
0000F5A4 08                         byte_7C6C:	dc.b 8
0000F5A5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000F5AA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000F5AF F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000F5B4 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000F5B9 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000F5BE 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000F5C3 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000F5C8 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000F5CD 01                         byte_7C95:	dc.b 1
0000F5CE F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000F5D3 01                         byte_7C9B:	dc.b 1
0000F5D4 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000F5DA 00                         		even
0000F5DA 00                         		even
0000F5DA                            
0000F5DA                            ; ===========================================================================
0000F5DA                            ; ---------------------------------------------------------------------------
0000F5DA                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000F5DA                            ; ---------------------------------------------------------------------------
0000F5DA                            
0000F5DA                            Obj17:					; XREF: Obj_Index
0000F5DA 7000                       		moveq	#0,d0
0000F5DC 1028 0024                  		move.b	$24(a0),d0
0000F5E0 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000F5E4 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000F5E8                            ; ===========================================================================
0000F5E8 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000F5EA 0000                       		dc.w Obj17_Action-Obj17_Index
0000F5EC 0000                       		dc.w Obj17_Action-Obj17_Index
0000F5EE 0000                       		dc.w Obj17_Delete-Obj17_Index
0000F5F0 0000                       		dc.w Obj17_Display-Obj17_Index
0000F5F2                            ; ===========================================================================
0000F5F2                            
0000F5F2                            Obj17_Main:				; XREF: Obj17_Index
0000F5F2 5428 0024                  		addq.b	#2,$24(a0)
0000F5F6 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000F5FE 317C 4398 0002             		move.w	#$4398,2(a0)
0000F604 117C 0007 0022             		move.b	#7,$22(a0)
0000F60A 117C 0004 0001             		move.b	#4,1(a0)
0000F610 317C 0180 0018             		move.w	#$180,priority(a0)
0000F616 117C 0008 0023             		move.b	#8,width_pixels(a0)
0000F61C 3428 000C                  		move.w	$C(a0),d2
0000F620 3628 0008                  		move.w	8(a0),d3
0000F624 1810                       		move.b	0(a0),d4
0000F626 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000F62A 7200                       		moveq	#0,d1
0000F62C 1212                       		move.b	(a2),d1		; move a2 to d1
0000F62E 14FC 0000                  		move.b	#0,(a2)+
0000F632 3001                       		move.w	d1,d0
0000F634 E248                       		lsr.w	#1,d0
0000F636 E948                       		lsl.w	#4,d0
0000F638 9640                       		sub.w	d0,d3
0000F63A 5501                       		subq.b	#2,d1
0000F63C 6500                       		bcs.s	Obj17_Action
0000F63E 7C00                       		moveq	#0,d6
0000F640                            
0000F640                            Obj17_MakeHelix:
0000F640 6100 0000                  		bsr.w	SingleObjLoad
0000F644 6600                       		bne.s	Obj17_Action
0000F646 5228 0028                  		addq.b	#1,$28(a0)
0000F64A 3A09                       		move.w	a1,d5
0000F64C 0445 D000                  		subi.w	#$D000,d5
0000F650 EC4D                       		lsr.w	#6,d5
0000F652 0245 007F                  		andi.w	#$7F,d5
0000F656 14C5                       		move.b	d5,(a2)+
0000F658 137C 0008 0024             		move.b	#8,$24(a1)
0000F65E 1284                       		move.b	d4,0(a1)
0000F660 3342 000C                  		move.w	d2,$C(a1)
0000F664 3343 0008                  		move.w	d3,8(a1)
0000F668 2368 0004 0004             		move.l	4(a0),4(a1)
0000F66E 337C 4398 0002             		move.w	#$4398,2(a1)
0000F674 137C 0004 0001             		move.b	#4,1(a1)
0000F67A 337C 0180 0018             		move.w	#$180,priority(a1)
0000F680 137C 0008 0023             		move.b	#8,width_pixels(a1)
0000F686 1346 003E                  		move.b	d6,$3E(a1)
0000F68A 5206                       		addq.b	#1,d6
0000F68C 0206 0007                  		andi.b	#7,d6
0000F690 0643 0010                  		addi.w	#$10,d3
0000F694 B668 0008                  		cmp.w	8(a0),d3
0000F698 6600                       		bne.s	loc_7D78
0000F69A 1146 003E                  		move.b	d6,$3E(a0)
0000F69E 5206                       		addq.b	#1,d6
0000F6A0 0206 0007                  		andi.b	#7,d6
0000F6A4 0643 0010                  		addi.w	#$10,d3
0000F6A8 5228 0028                  		addq.b	#1,$28(a0)
0000F6AC                            
0000F6AC                            loc_7D78:
0000F6AC 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000F6B0                            
0000F6B0                            Obj17_Action:				; XREF: Obj17_Index
0000F6B0 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000F6B4 6100 0000                  		bsr.w	DisplaySprite
0000F6B8 6000 0000                  		bra.w	Obj17_ChkDel
0000F6BC                            
0000F6BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6BC                            
0000F6BC                            
0000F6BC                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000F6BC 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000F6C0 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000F6C6 D028 003E                  		add.b	$3E(a0),d0
0000F6CA 0200 0007                  		andi.b	#7,d0
0000F6CE 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000F6D2 6600                       		bne.s	locret_7DA6
0000F6D4 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000F6DA                            
0000F6DA                            locret_7DA6:
0000F6DA 4E75                       		rts	
0000F6DC                            ; End of function Obj17_RotateSpikes
0000F6DC                            
0000F6DC                            ; ===========================================================================
0000F6DC                            
0000F6DC                            Obj17_ChkDel:				; XREF: Obj17_Action
0000F6DC 3028 0008                  		move.w	8(a0),d0
0000F6E0 0240 FF80                  		andi.w	#$FF80,d0
0000F6E4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F6E8 0441 0080                  		subi.w	#$80,d1
0000F6EC 0241 FF80                  		andi.w	#$FF80,d1
0000F6F0 9041                       		sub.w	d1,d0
0000F6F2 0C40 0280                  		cmpi.w	#$280,d0
0000F6F6 6200 0000                  		bhi.w	Obj17_DelAll
0000F6FA 4E75                       		rts	
0000F6FC                            ; ===========================================================================
0000F6FC                            
0000F6FC                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000F6FC 7400                       		moveq	#0,d2
0000F6FE 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000F702 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000F704 5502                       		subq.b	#2,d2
0000F706 6500                       		bcs.s	Obj17_Delete
0000F708                            
0000F708                            Obj17_DelLoop:
0000F708 7000                       		moveq	#0,d0
0000F70A 101A                       		move.b	(a2)+,d0
0000F70C ED48                       		lsl.w	#6,d0
0000F70E 0680 00FF D000             		addi.l	#$FFD000,d0
0000F714 2240                       		movea.l	d0,a1
0000F716 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000F71A 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000F71E                            
0000F71E                            Obj17_Delete:				; XREF: Obj17_Index
0000F71E 7000                       		moveq	#0,d0
0000F720 3028 0014                          move.w	respawn_index(a0),d0	; get address in respawn table
0000F724 3440                       	    movea.w	d0,a2				; load address into a2
0000F726 0892 0007                  	    bclr	#7,(a2)				; clear respawn table entry, so object can be loaded again
0000F72A 6100 0000                  		bsr.w	DeleteObject
0000F72E 4E75                       		rts	
0000F730                            ; ===========================================================================
0000F730                            
0000F730                            Obj17_Display:				; XREF: Obj17_Index
0000F730 6100 FF8A                  		bsr.w	Obj17_RotateSpikes
0000F734 6000 0000                  		bra.w	DisplaySprite
0000F738                            ; ===========================================================================
0000F738                            ; ---------------------------------------------------------------------------
0000F738                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000F738                            ; ---------------------------------------------------------------------------
0000F738                            Map_obj17:
0000F738                            	include "_maps\obj17.asm"
0000F738                            ; ---------------------------------------------------------------------------
0000F738                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000F738                            ; ---------------------------------------------------------------------------
0000F738 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000F73C 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000F740 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000F744 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000F748 01                         byte_7E08:	dc.b 1
0000F749 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000F74E 01                         byte_7E0E:	dc.b 1
0000F74F F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000F754 01                         byte_7E14:	dc.b 1
0000F755 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000F75A 01                         byte_7E1A:	dc.b 1
0000F75B FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000F760 01                         byte_7E20:	dc.b 1
0000F761 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000F766 01                         byte_7E26:	dc.b 1
0000F767 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000F76C 01                         byte_7E2C:	dc.b 1
0000F76D F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000F772                            		even
0000F772                            		even
0000F772                            
0000F772                            ; ===========================================================================
0000F772                            ; ---------------------------------------------------------------------------
0000F772                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000F772                            ; ---------------------------------------------------------------------------
0000F772                            
0000F772                            Obj18:					; XREF: Obj_Index
0000F772 7000                       		moveq	#0,d0
0000F774 1028 0024                  		move.b	$24(a0),d0
0000F778 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000F77C 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000F780                            ; ===========================================================================
0000F780 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000F782 0000                       		dc.w Obj18_Solid-Obj18_Index
0000F784 0000                       		dc.w Obj18_Action2-Obj18_Index
0000F786 0000                       		dc.w Obj18_Delete-Obj18_Index
0000F788 0000                       		dc.w Obj18_Action-Obj18_Index
0000F78A                            ; ===========================================================================
0000F78A                            
0000F78A                            Obj18_Main:				; XREF: Obj18_Index
0000F78A 5428 0024                  		addq.b	#2,$24(a0)
0000F78E 317C 4000 0002             		move.w	#$4000,2(a0)
0000F794 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000F79C 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0000F7A2 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000F7A8 6600                       		bne.s	Obj18_NotSYZ
0000F7AA 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000F7B2 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0000F7B8                            
0000F7B8                            Obj18_NotSYZ:
0000F7B8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000F7BE 6600                       		bne.s	Obj18_NotSLZ
0000F7C0 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000F7C8 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0000F7CE 317C 4000 0002             		move.w	#$4000,2(a0)
0000F7D4 117C 0003 0028             		move.b	#3,$28(a0)
0000F7DA                            
0000F7DA                            Obj18_NotSLZ:
0000F7DA 117C 0004 0001             		move.b	#4,1(a0)
0000F7E0 317C 0200 0018             		move.w	#$200,priority(a0)
0000F7E6 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000F7EC 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000F7F2 3168 0008 0032             		move.w	8(a0),$32(a0)
0000F7F8 317C 0080 0026             		move.w	#$80,$26(a0)
0000F7FE 7200                       		moveq	#0,d1
0000F800 1028 0028                  		move.b	$28(a0),d0
0000F804 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000F808 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000F80A 5201                       		addq.b	#1,d1		; use frame #1
0000F80C 117C 0020 0023             		move.b	#$20,width_pixels(a0)	; set width
0000F812                            
0000F812                            Obj18_SetFrame:
0000F812 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000F816                            
0000F816                            Obj18_Solid:				; XREF: Obj18_Index
0000F816 4A28 0038                  		tst.b	$38(a0)
0000F81A 6700                       		beq.s	loc_7EE0
0000F81C 5928 0038                  		subq.b	#4,$38(a0)
0000F820                            
0000F820                            loc_7EE0:
0000F820 7200                       		moveq	#0,d1
0000F822 1228 0023                  		move.b	width_pixels(a0),d1
0000F826 6100 F87E                  		bsr.w	PlatformObject
0000F82A                            
0000F82A                            Obj18_Action:				; XREF: Obj18_Index
0000F82A 6100 0000                  		bsr.w	Obj18_Move
0000F82E 6100 0000                  		bsr.w	Obj18_Nudge
0000F832 6100 0000                  		bsr.w	DisplaySprite
0000F836 6000 0000                  		bra.w	Obj18_ChkDel
0000F83A                            ; ===========================================================================
0000F83A                            
0000F83A                            Obj18_Action2:				; XREF: Obj18_Index
0000F83A 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000F840 6700                       		beq.s	loc_7F06
0000F842 5828 0038                  		addq.b	#4,$38(a0)
0000F846                            
0000F846                            loc_7F06:
0000F846 7200                       		moveq	#0,d1
0000F848 1228 0023                  		move.b	width_pixels(a0),d1
0000F84C 6100 F998                  		bsr.w	ExitPlatform
0000F850 3F28 0008                  		move.w	8(a0),-(sp)
0000F854 6100 0000                  		bsr.w	Obj18_Move
0000F858 6100 0000                  		bsr.w	Obj18_Nudge
0000F85C 341F                       		move.w	(sp)+,d2
0000F85E 6100 FBEC                  		bsr.w	MvSonicOnPtfm2
0000F862 6100 0000                  		bsr.w	DisplaySprite
0000F866 6000 0000                  		bra.w	Obj18_ChkDel
0000F86A                            
0000F86A 4E75                       		rts
0000F86C                            
0000F86C                            ; ---------------------------------------------------------------------------
0000F86C                            ; Subroutine to	move platform slightly when you	stand on it
0000F86C                            ; ---------------------------------------------------------------------------
0000F86C                            
0000F86C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F86C                            
0000F86C                            
0000F86C                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000F86C 1028 0038                  		move.b	$38(a0),d0
0000F870 6100 9532                  		bsr.w	CalcSine
0000F874 323C 0400                  		move.w	#$400,d1
0000F878 C1C1                       		muls.w	d1,d0
0000F87A 4840                       		swap	d0
0000F87C D068 002C                  		add.w	$2C(a0),d0
0000F880 3140 000C                  		move.w	d0,$C(a0)
0000F884 4E75                       		rts	
0000F886                            ; End of function Obj18_Nudge
0000F886                            
0000F886                            ; ---------------------------------------------------------------------------
0000F886                            ; Subroutine to	move platforms
0000F886                            ; ---------------------------------------------------------------------------
0000F886                            
0000F886                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F886                            
0000F886                            
0000F886                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000F886 7000                       		moveq	#0,d0
0000F888 1028 0028                  		move.b	$28(a0),d0
0000F88C 0240 000F                  		andi.w	#$F,d0
0000F890 D040                       		add.w	d0,d0
0000F892 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000F896 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000F89A                            ; End of function Obj18_Move
0000F89A                            
0000F89A                            ; ===========================================================================
0000F89A 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000F89E 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000F8A2 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000F8A6 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000F8AA 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000F8AE 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000F8B2 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000F8B4                            ; ===========================================================================
0000F8B4                            
0000F8B4                            Obj18_Type00:
0000F8B4 4E75                       		rts			; platform 00 doesn't move
0000F8B6                            ; ===========================================================================
0000F8B6                            
0000F8B6                            Obj18_Type05:
0000F8B6 3028 0032                  		move.w	$32(a0),d0
0000F8BA 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000F8BE 4401                       		neg.b	d1		; reverse platform-motion
0000F8C0 0601 0040                  		addi.b	#$40,d1
0000F8C4 6000                       		bra.s	Obj18_01_Move
0000F8C6                            ; ===========================================================================
0000F8C6                            
0000F8C6                            Obj18_Type01:
0000F8C6 3028 0032                  		move.w	$32(a0),d0
0000F8CA 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000F8CE 0401 0040                  		subi.b	#$40,d1
0000F8D2                            
0000F8D2                            Obj18_01_Move:
0000F8D2 4881                       		ext.w	d1
0000F8D4 D041                       		add.w	d1,d0
0000F8D6 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000F8DA 6000 0000                  		bra.w	Obj18_ChgMotion
0000F8DE                            ; ===========================================================================
0000F8DE                            
0000F8DE                            Obj18_Type0C:
0000F8DE 3028 0034                  		move.w	$34(a0),d0
0000F8E2 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000F8E6 4401                       		neg.b	d1		; reverse platform-motion
0000F8E8 0601 0030                  		addi.b	#$30,d1
0000F8EC 6000                       		bra.s	Obj18_02_Move
0000F8EE                            ; ===========================================================================
0000F8EE                            
0000F8EE                            Obj18_Type0B:
0000F8EE 3028 0034                  		move.w	$34(a0),d0
0000F8F2 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000F8F6 0401 0030                  		subi.b	#$30,d1
0000F8FA 6000                       		bra.s	Obj18_02_Move
0000F8FC                            ; ===========================================================================
0000F8FC                            
0000F8FC                            Obj18_Type06:
0000F8FC 3028 0034                  		move.w	$34(a0),d0
0000F900 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000F904 4401                       		neg.b	d1		; reverse platform-motion
0000F906 0601 0040                  		addi.b	#$40,d1
0000F90A 6000                       		bra.s	Obj18_02_Move
0000F90C                            ; ===========================================================================
0000F90C                            
0000F90C                            Obj18_Type02:
0000F90C 3028 0034                  		move.w	$34(a0),d0
0000F910 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000F914 0401 0040                  		subi.b	#$40,d1
0000F918                            
0000F918                            Obj18_02_Move:
0000F918 4881                       		ext.w	d1
0000F91A D041                       		add.w	d1,d0
0000F91C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000F920 6000 0000                  		bra.w	Obj18_ChgMotion
0000F924                            ; ===========================================================================
0000F924                            
0000F924                            Obj18_Type03:
0000F924 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000F928 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000F92A 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000F930 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000F932 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000F938                            
0000F938                            Obj18_03_NoMove:
0000F938 4E75                       		rts	
0000F93A                            ; ===========================================================================
0000F93A                            
0000F93A                            Obj18_03_Wait:
0000F93A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000F93E 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000F940 317C 0020 003A             		move.w	#32,$3A(a0)
0000F946 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000F94A 4E75                       		rts	
0000F94C                            ; ===========================================================================
0000F94C                            
0000F94C                            Obj18_Type04:
0000F94C 4A68 003A                  		tst.w	$3A(a0)
0000F950 6700                       		beq.s	loc_8048
0000F952 5368 003A                  		subq.w	#1,$3A(a0)
0000F956 6600                       		bne.s	loc_8048
0000F958 0828 0003 0022             		btst	#3,$22(a0)
0000F95E 6700                       		beq.s	loc_8042
0000F960 08E9 0001 0022             		bset	#1,$22(a1)
0000F966 08A9 0003 0022             		bclr	#3,$22(a1)
0000F96C 137C 0002 0024             		move.b	#2,$24(a1)
0000F972 08A8 0003 0022             		bclr	#3,$22(a0)
0000F978 4228 0025                  		clr.b	$25(a0)
0000F97C 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000F982                            
0000F982                            loc_8042:
0000F982 117C 0008 0024             		move.b	#8,$24(a0)
0000F988                            
0000F988                            loc_8048:
0000F988 2628 002C                  		move.l	$2C(a0),d3
0000F98C 3028 0012                  		move.w	$12(a0),d0
0000F990 48C0                       		ext.l	d0
0000F992 E180                       		asl.l	#8,d0
0000F994 D680                       		add.l	d0,d3
0000F996 2143 002C                  		move.l	d3,$2C(a0)
0000F99A 0668 0038 0012             		addi.w	#$38,$12(a0)
0000F9A0 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000F9A4 0640 00E0                  		addi.w	#$E0,d0
0000F9A8 B068 002C                  		cmp.w	$2C(a0),d0
0000F9AC 6400                       		bcc.s	locret_8074
0000F9AE 117C 0006 0024             		move.b	#6,$24(a0)
0000F9B4                            
0000F9B4                            locret_8074:
0000F9B4 4E75                       		rts	
0000F9B6                            ; ===========================================================================
0000F9B6                            
0000F9B6                            Obj18_Type07:
0000F9B6 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000F9BA 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000F9BC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000F9C0 7000                       		moveq	#0,d0
0000F9C2 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000F9C6 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000F9C8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000F9CC 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000F9CE 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000F9D4                            
0000F9D4                            Obj18_07_NoMove:
0000F9D4 4E75                       		rts	
0000F9D6                            ; ===========================================================================
0000F9D6                            
0000F9D6                            Obj18_07_Wait:
0000F9D6 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000F9DA 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000F9DC 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000F9E0 4E75                       		rts	
0000F9E2                            ; ===========================================================================
0000F9E2                            
0000F9E2                            Obj18_Type08:
0000F9E2 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000F9E6 3028 0034                  		move.w	$34(a0),d0
0000F9EA 0440 0200                  		subi.w	#$200,d0
0000F9EE B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000F9F2 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000F9F4 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000F9F8                            
0000F9F8                            Obj18_08_NoStop:
0000F9F8 4E75                       		rts	
0000F9FA                            ; ===========================================================================
0000F9FA                            
0000F9FA                            Obj18_Type0A:
0000F9FA 3028 0034                  		move.w	$34(a0),d0
0000F9FE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000FA02 0401 0040                  		subi.b	#$40,d1
0000FA06 4881                       		ext.w	d1
0000FA08 E241                       		asr.w	#1,d1
0000FA0A D041                       		add.w	d1,d0
0000FA0C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000FA10                            
0000FA10                            Obj18_ChgMotion:
0000FA10 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000FA16 4E75                       		rts	
0000FA18                            ; ===========================================================================
0000FA18                            
0000FA18                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000FA18 3028 0032                  		move.w	$32(a0),d0
0000FA1C 4EF9 0000 0000             		jmp		MarkObjGone4
0000FA22                            Obj18_Delete:				; XREF: Obj18_Index
0000FA22 6000 0000                  		bra.w	DeleteObject
0000FA26                            ; ===========================================================================
0000FA26                            ; ---------------------------------------------------------------------------
0000FA26                            ; Sprite mappings - unused
0000FA26                            ; ---------------------------------------------------------------------------
0000FA26                            Map_obj18x:
0000FA26                            	include "_maps\obj18x.asm"
0000FA26                            ; ---------------------------------------------------------------------------
0000FA26                            ; Sprite mappings - unused
0000FA26                            ; ---------------------------------------------------------------------------
0000FA26 0000                       		dc.w byte_80FE-Map_obj18x
0000FA28 0000                       		dc.w byte_8109-Map_obj18x
0000FA2A 02                         byte_80FE:	dc.b 2
0000FA2B F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000FA30 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000FA35 0A                         byte_8109:	dc.b $A
0000FA36 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000FA3B 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000FA40 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000FA45 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000FA4A 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000FA4F F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000FA54 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000FA59 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000FA5E 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000FA63 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000FA68                            		even
0000FA68                            		even
0000FA68                            
0000FA68                            ; ---------------------------------------------------------------------------
0000FA68                            ; Sprite mappings - GHZ	platforms
0000FA68                            ; ---------------------------------------------------------------------------
0000FA68                            Map_obj18:
0000FA68                            	include "_maps\obj18ghz.asm"
0000FA68                            ; ---------------------------------------------------------------------------
0000FA68                            ; Sprite mappings - GHZ	platforms
0000FA68                            ; ---------------------------------------------------------------------------
0000FA68 0000                       		dc.w byte_8140-Map_obj18
0000FA6A 0000                       		dc.w byte_8155-Map_obj18
0000FA6C 04                         byte_8140:	dc.b 4
0000FA6D F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000FA72 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000FA77 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000FA7C F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000FA81 0A                         byte_8155:	dc.b $A
0000FA82 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000FA87 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000FA8C 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000FA91 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000FA96 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000FA9B F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000FAA0 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000FAA5 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000FAAA 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000FAAF 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000FAB4                            		even
0000FAB4                            		even
0000FAB4                            
0000FAB4                            ; ---------------------------------------------------------------------------
0000FAB4                            ; Sprite mappings - SYZ	platforms
0000FAB4                            ; ---------------------------------------------------------------------------
0000FAB4                            Map_obj18a:
0000FAB4                            	include "_maps\obj18syz.asm"
0000FAB4                            ; ---------------------------------------------------------------------------
0000FAB4                            ; Sprite mappings - SYZ	platforms
0000FAB4                            ; ---------------------------------------------------------------------------
0000FAB4 0000                       		dc.w byte_818A-Map_obj18a
0000FAB6 03                         byte_818A:	dc.b 3
0000FAB7 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000FABC F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000FAC1 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000FAC6                            		even
0000FAC6                            		even
0000FAC6                            
0000FAC6                            ; ---------------------------------------------------------------------------
0000FAC6                            ; Sprite mappings - SLZ	platforms
0000FAC6                            ; ---------------------------------------------------------------------------
0000FAC6                            Map_obj18b:
0000FAC6                            	include "_maps\obj18slz.asm"
0000FAC6                            ; ---------------------------------------------------------------------------
0000FAC6                            ; Sprite mappings - SLZ	platforms
0000FAC6                            ; ---------------------------------------------------------------------------
0000FAC6 0000                       		dc.w byte_819C-Map_obj18b
0000FAC8 02                         byte_819C:	dc.b 2
0000FAC9 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000FACE F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000FAD4 00                         		even
0000FAD4 00                         		even
0000FAD4                            
0000FAD4                            ; ===========================================================================
0000FAD4                            ; ---------------------------------------------------------------------------
0000FAD4                            ; Object 19 - blank
0000FAD4                            ; ---------------------------------------------------------------------------
0000FAD4                            
0000FAD4                            Obj19:					; XREF: Obj_Index
0000FAD4                            ;===============================================================================
0000FAD4                            ; Object 0x84 - Auto Spin - Hill Top / Hidden Palace / Casino Night
0000FAD4                            ; [ Begin ]
0000FAD4                            ;=============================================================================== 
0000FAD4                            loc_1CFAA:
0000FAD4 7000                       		moveq	#0,d0
0000FAD6 1028 0024                  		move.b	$24(a0),d0
0000FADA 323B 0000                  		move.w	loc_1CFBE(pc,d0),d1
0000FADE 4EBB 1000                  		jsr	loc_1CFBE(pc,d1)
0000FAE2 4EF9 0000 0000             		jmp	(MarkObjGone3)
0000FAE8                            loc_1CFBE:
0000FAE8 0000                       		dc.w	loc_1CFC4-loc_1CFBE
0000FAEA 0000                       		dc.w	loc_1D072-loc_1CFBE
0000FAEC 0000                       		dc.w	loc_1D13C-loc_1CFBE
0000FAEE                            loc_1CFC4:
0000FAEE 5428 0024                  		addq.b	#2,$24(a0)
0000FAF2 217C 0000 0000 0004        		move.l	#Map_Obj19,4(a0) 
0000FAFA 317C 07B2 0002             		move.w	#$7B2,2(a0)
0000FB00                            ;		bsr	loc_1D302
0000FB00 0028 0004 0001             		or.b	#4,1(a0)
0000FB06 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0000FB0C 317C 0280 0018             		move.w	#$280,priority(a0)
0000FB12 1028 0028                  		move.b	$28(a0),d0
0000FB16 0800 0002                  		btst	#2,d0
0000FB1A 6700                       		beq.s	loc_1D03E
0000FB1C 5428 0024                  		addq.b	#2,$24(a0)
0000FB20 0240 0007                  		and.w	#7,d0
0000FB24 1140 001A                  		move.b	d0,$1A(a0)
0000FB28 0240 0003                  		and.w	#3,d0
0000FB2C D040                       		add.w	d0,d0
0000FB2E 317B 0000 0032             		move.w	loc_1D036(pc,d0),$32(a0)
0000FB34 3228 000C                  		move.w	$C(a0),d1
0000FB38 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB3C B269 000C                  		cmp.w	$C(a1),d1
0000FB40 6400                       		bcc.s	loc_1D032
0000FB42 117C 0001 0034             		move.b	#1,$34(a0)
0000FB48                            ;loc_1D022:
0000FB48                            ;		lea	($FFFFD040).w,a1
0000FB48                            ;		cmp.w	$C(a1),d1
0000FB48                            ;		bcc.s	loc_1D032
0000FB48                            ;		move.b	#1,$35(a0)
0000FB48                            loc_1D032:
0000FB48 6000 0000                  		bra	loc_1D13C
0000FB4C                            loc_1D036:
0000FB4C 0020 0040 0080 0100        		dc.w	$20,$40,$80,$100
0000FB54                            loc_1D03E:
0000FB54 0240 0003                  		and.w	#3,d0
0000FB58 1140 001A                  		move.b	d0,$1A(a0)
0000FB5C D040                       		add.w	d0,d0
0000FB5E 317B 00EC 0032             		move.w	loc_1D036(pc,d0),$32(a0)
0000FB64 3228 0008                  		move.w	8(a0),d1
0000FB68 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB6C B269 0008                  		cmp.w	8(a1),d1
0000FB70 6400                       		bcc.s	loc_1D072
0000FB72 117C 0001 0034             		move.b	#1,$34(a0)
0000FB78                            ;loc_1D062:
0000FB78                            ;		lea	($FFFFD040).w,a1
0000FB78                            ;		cmp.w	8(a1),d1
0000FB78                            ;		bcc.s	loc_1D072
0000FB78                            ;		move.b	#1,$35(a0)
0000FB78                            loc_1D072:
0000FB78 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FB7C 6600                       		bne.s	loc_1D0CA
0000FB7E 3228 0008                  		move.w	8(a0),d1
0000FB82 45E8 0034                  		lea	$34(a0),a2
0000FB86 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB8A                            ;		bsr.s	loc_1D08A
0000FB8A                            ;		lea	($FFFFD040).w,a1
0000FB8A                            loc_1D08A:
0000FB8A 4A1A                       		tst.b	(a2)+
0000FB8C 6600                       		bne.s	loc_1D0CC
0000FB8E B269 0008                  		cmp.w	8(a1),d1
0000FB92 6200                       		bhi.s	loc_1D0CA
0000FB94 157C 0001 FFFF             		move.b	#1,$FFFFFFFF(a2)
0000FB9A 3428 000C                  		move.w	$C(a0),d2
0000FB9E 3602                       		move.w	d2,d3
0000FBA0 3828 0032                  		move.w	$32(a0),d4
0000FBA4 9444                       		sub.w	d4,d2
0000FBA6 D644                       		add.w	d4,d3
0000FBA8 3829 000C                  		move.w	$C(a1),d4
0000FBAC B842                       		cmp.w	d2,d4
0000FBAE 6500                       		bcs.s	loc_1D0CA
0000FBB0 B843                       		cmp.w	d3,d4
0000FBB2 6400                       		bcc.s	loc_1D0CA
0000FBB4 0828 0000 0001             		btst	#0,1(a0)
0000FBBA 6600                       		bne.s	loc_1D0C4
0000FBBC 137C 0001 0039             		move.b	#1,$39(a1)
0000FBC2 6000                       		bra.s	loc_1D10A
0000FBC4                            loc_1D0C4:
0000FBC4 137C 0000 0039             		move.b	#0,$39(a1)
0000FBCA                            loc_1D0CA:
0000FBCA 4E75                       		rts
0000FBCC                            loc_1D0CC:
0000FBCC B269 0008                  		cmp.w	8(a1),d1
0000FBD0 63F8                       		bls.s	loc_1D0CA
0000FBD2 157C 0000 FFFF             		move.b	#0,$FFFFFFFF(a2)
0000FBD8 3428 000C                  		move.w	$C(a0),d2
0000FBDC 3602                       		move.w	d2,d3
0000FBDE 3828 0032                  		move.w	$32(a0),d4
0000FBE2 9444                       		sub.w	d4,d2
0000FBE4 D644                       		add.w	d4,d3
0000FBE6 3829 000C                  		move.w	$C(a1),d4
0000FBEA B842                       		cmp.w	d2,d4
0000FBEC 65DC                       		bcs.s	loc_1D0CA
0000FBEE B843                       		cmp.w	d3,d4
0000FBF0 64D8                       		bcc.s	loc_1D0CA
0000FBF2 0828 0000 0001             		btst	#0,1(a0)
0000FBF8 6700                       		beq.s	loc_1D102
0000FBFA 137C 0001 0039             		move.b	#1,$39(a1)
0000FC00 6000                       		bra.s	loc_1D10A
0000FC02                            loc_1D102:
0000FC02 137C 0000 0039             		move.b	#0,$39(a1)
0000FC08 4E75                       		rts
0000FC0A                            loc_1D10A:
0000FC0A 0829 0002 0022             		btst	#2,$22(a1)
0000FC10 6700                       		beq.s	loc_1D114
0000FC12 4E75                       		rts
0000FC14                            loc_1D114:
0000FC14 08E9 0002 0022             		bset	#2,$22(a1)
0000FC1A 137C 000E 0016             		move.b	#$E,$16(a1)
0000FC20 137C 0007 0017             		move.b	#7,$17(a1)
0000FC26 137C 0002 001C             		move.b	#2,$1C(a1)
0000FC2C 5A69 000C                  		addq.w	#5,$C(a1)
0000FC30 303C 00BE                  		move.w	#$BE,d0
0000FC34 4EB9 0000 0000             		jsr	Play_Sfx	
0000FC3A 4E75                       		rts
0000FC3C                            loc_1D13C:
0000FC3C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FC40 6600                       		bne.s	loc_1D196
0000FC42 3228 000C                  		move.w	$C(a0),d1
0000FC46 45E8 0034                  		lea	$34(a0),a2
0000FC4A 43F8 D000                  		lea	($FFFFD000).w,a1
0000FC4E                            ;		bsr.s	loc_1D154
0000FC4E                            ;		lea	($FFFFD040).w,a1
0000FC4E                            loc_1D154:
0000FC4E 4A1A                       		tst.b	(a2)+
0000FC50 6600                       		bne.s	loc_1D198
0000FC52 B269 000C                  		cmp.w	$C(a1),d1
0000FC56 6200                       		bhi.s	loc_1D196
0000FC58 157C 0001 FFFF             		move.b	#1,-1(a2)
0000FC5E 3428 0008                  		move.w	8(a0),d2
0000FC62 3602                       		move.w	d2,d3
0000FC64 3828 0032                  		move.w	$32(a0),d4
0000FC68 9444                       		sub.w	d4,d2
0000FC6A D644                       		add.w	d4,d3
0000FC6C 3829 0008                  		move.w	8(a1),d4
0000FC70 B842                       		cmp.w	d2,d4
0000FC72 6500                       		bcs.s	loc_1D196
0000FC74 B843                       		cmp.w	d3,d4
0000FC76 6400                       		bcc.s	loc_1D196
0000FC78 0828 0000 0001             		btst	#0,1(a0)
0000FC7E 6600                       		bne.s	loc_1D190
0000FC80 137C 0001 0039             		move.b	#1,$39(a1)
0000FC86 6082                       		bra	loc_1D10A
0000FC88                            loc_1D190:
0000FC88 137C 0000 0039             		move.b	#0,$39(a1)
0000FC8E                            loc_1D196:
0000FC8E 4E75                       		rts
0000FC90                            loc_1D198:
0000FC90 B269 000C                  		cmp.w	$C(a1),d1
0000FC94 63F8                       		bls.s	loc_1D196
0000FC96 157C 0000 FFFF             		move.b	#0,-1(a2)
0000FC9C 3428 0008                  		move.w	8(a0),d2
0000FCA0 3602                       		move.w	d2,d3
0000FCA2 3828 0032                  		move.w	$32(a0),d4
0000FCA6 9444                       		sub.w	d4,d2
0000FCA8 D644                       		add.w	d4,d3
0000FCAA 3829 0008                  		move.w	8(a1),d4
0000FCAE B842                       		cmp.w	d2,d4
0000FCB0 65DC                       		bcs.s	loc_1D196
0000FCB2 B843                       		cmp.w	d3,d4
0000FCB4 64D8                       		bcc.s	loc_1D196
0000FCB6 0828 0000 0001             		btst	#0,1(a0)
0000FCBC 6700                       		beq.s	loc_1D1D0
0000FCBE 137C 0001 0039             		move.b	#1,$39(a1)
0000FCC4 6000 FF44                  		bra	loc_1D10A
0000FCC8                            loc_1D1D0:
0000FCC8 137C 0000 0039             		move.b	#0,$39(a1)
0000FCCE 4E75                       		rts	
0000FCD0                            ;===============================================================================
0000FCD0                            ; Object 0x84 - Auto Spin - Hill Top / Hidden Palace / Casino Night
0000FCD0                            ; [ End ]
0000FCD0                            ;===============================================================================
0000FCD0                            ; ===========================================================================
0000FCD0                            Map_Obj19:	INCLUDE "mappings/sprite/Obj03.asm"
0000FCD0                            ; --------------------------------------------------------------------------------
0000FCD0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000FCD0                            ; --------------------------------------------------------------------------------
0000FCD0                            
0000FCD0                            SME_EOaao:	
0000FCD0 0000 0000                  		dc.w SME_EOaao_10-SME_EOaao, SME_EOaao_25-SME_EOaao	
0000FCD4 0000 0000                  		dc.w SME_EOaao_3A-SME_EOaao, SME_EOaao_4F-SME_EOaao	
0000FCD8 0000 0000                  		dc.w SME_EOaao_64-SME_EOaao, SME_EOaao_79-SME_EOaao	
0000FCDC 0000 0000                  		dc.w SME_EOaao_8E-SME_EOaao, SME_EOaao_A3-SME_EOaao	
0000FCE0 04                         SME_EOaao_10:	dc.b 4	
0000FCE1 E005 0000 F8               		dc.b $E0, 5, 0, 0, $F8	
0000FCE6 F005 0000 F8               		dc.b $F0, 5, 0, 0, $F8	
0000FCEB 0005 0000 F8               		dc.b 0, 5, 0, 0, $F8	
0000FCF0 1005 0000 F8               		dc.b $10, 5, 0, 0, $F8	
0000FCF5 04                         SME_EOaao_25:	dc.b 4	
0000FCF6 C005 0000 F8               		dc.b $C0, 5, 0, 0, $F8	
0000FCFB E005 0000 F8               		dc.b $E0, 5, 0, 0, $F8	
0000FD00 0005 0000 F8               		dc.b 0, 5, 0, 0, $F8	
0000FD05 3005 0000 F8               		dc.b $30, 5, 0, 0, $F8	
0000FD0A 04                         SME_EOaao_3A:	dc.b 4	
0000FD0B 8005 0000 F8               		dc.b $80, 5, 0, 0, $F8	
0000FD10 E005 0000 F8               		dc.b $E0, 5, 0, 0, $F8	
0000FD15 0005 0000 F8               		dc.b 0, 5, 0, 0, $F8	
0000FD1A 7005 0000 F8               		dc.b $70, 5, 0, 0, $F8	
0000FD1F 04                         SME_EOaao_4F:	dc.b 4	
0000FD20 8005 0000 F8               		dc.b $80, 5, 0, 0, $F8	
0000FD25 E005 0000 F8               		dc.b $E0, 5, 0, 0, $F8	
0000FD2A 0005 0000 F8               		dc.b 0, 5, 0, 0, $F8	
0000FD2F 7005 0000 F8               		dc.b $70, 5, 0, 0, $F8	
0000FD34 04                         SME_EOaao_64:	dc.b 4	
0000FD35 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000FD3A F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
0000FD3F F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000FD44 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
0000FD49 04                         SME_EOaao_79:	dc.b 4	
0000FD4A F805 0000 C0               		dc.b $F8, 5, 0, 0, $C0	
0000FD4F F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000FD54 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000FD59 F805 0000 30               		dc.b $F8, 5, 0, 0, $30	
0000FD5E 04                         SME_EOaao_8E:	dc.b 4	
0000FD5F F805 0000 80               		dc.b $F8, 5, 0, 0, $80	
0000FD64 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000FD69 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000FD6E F805 0000 70               		dc.b $F8, 5, 0, 0, $70	
0000FD73 04                         SME_EOaao_A3:	dc.b 4	
0000FD74 F805 0000 80               		dc.b $F8, 5, 0, 0, $80	
0000FD79 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000FD7E F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000FD83 F805 0000 70               		dc.b $F8, 5, 0, 0, $70	
0000FD88                            		even
0000FD88                            		even
0000FD88                            ;		even
0000FD88                            
0000FD88                            ; ===========================================================================
0000FD88                            ; ---------------------------------------------------------------------------
0000FD88                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000FD88                            ; ---------------------------------------------------------------------------
0000FD88                            Map_obj48:
0000FD88                            	include "_maps\obj48.asm"
0000FD88                            ; ---------------------------------------------------------------------------
0000FD88                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000FD88                            ; ---------------------------------------------------------------------------
0000FD88 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000FD8C 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000FD90 06                         byte_81B2:	dc.b 6
0000FD91 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000FD96 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000FD9B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000FDA0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000FDA5 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000FDAA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000FDAF 04                         byte_81D1:	dc.b 4
0000FDB0 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000FDB5 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000FDBA 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000FDBF 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000FDC4 04                         byte_81E6:	dc.b 4
0000FDC5 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000FDCA E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000FDCF 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000FDD4 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000FDD9 04                         byte_81FB:	dc.b 4
0000FDDA E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000FDDF E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000FDE4 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000FDE9 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000FDEE                            		even
0000FDEE                            		even
0000FDEE                            ;	even
0000FDEE                            
0000FDEE                            ; ===========================================================================
0000FDEE                            ; ---------------------------------------------------------------------------
0000FDEE                            ; Object 1A - GHZ collapsing ledge
0000FDEE                            ; ---------------------------------------------------------------------------
0000FDEE                            
0000FDEE                            Obj1A:					; XREF: Obj_Index
0000FDEE 7000                       		moveq	#0,d0
0000FDF0 1028 0024                  		move.b	$24(a0),d0
0000FDF4 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000FDF8 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000FDFC                            ; ===========================================================================
0000FDFC 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000FE00 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000FE04 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000FE08                            ; ===========================================================================
0000FE08                            
0000FE08                            Obj1A_Main:				; XREF: Obj1A_Index
0000FE08 5428 0024                  		addq.b	#2,$24(a0)
0000FE0C 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000FE14 317C 4000 0002             		move.w	#$4000,2(a0)
0000FE1A 0028 0004 0001             		ori.b	#4,1(a0)
0000FE20 317C 0200 0018             		move.w	#$200,priority(a0)
0000FE26 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000FE2C 117C 0064 0023             		move.b	#$64,width_pixels(a0)
0000FE32 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000FE38 117C 0038 0016             		move.b	#$38,$16(a0)
0000FE3E 08E8 0004 0001             		bset	#4,1(a0)
0000FE44                            
0000FE44                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000FE44 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000FE48 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000FE4A 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000FE4E 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000FE52 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000FE56                            
0000FE56                            Obj1A_Slope:
0000FE56 323C 0030                  		move.w	#$30,d1
0000FE5A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000FE60 6100 F31C                  		bsr.w	SlopeObject
0000FE64 4EF9 0000 0000             		jmp	MarkObjGone
0000FE6A                            ; ===========================================================================
0000FE6A                            
0000FE6A                            Obj1A_Touch:				; XREF: Obj1A_Index
0000FE6A 4A28 0038                  		tst.b	$38(a0)
0000FE6E 6700 0000                  		beq.w	loc_847A
0000FE72 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000FE78 5328 0038                  		subq.b	#1,$38(a0)
0000FE7C                            
0000FE7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE7C                            
0000FE7C                            
0000FE7C                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000FE7C 323C 0030                  		move.w	#$30,d1
0000FE80 6100 F364                  		bsr.w	ExitPlatform
0000FE84 323C 0030                  		move.w	#$30,d1
0000FE88 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000FE8E 3428 0008                  		move.w	8(a0),d2
0000FE92 6100 0000                  		bsr.w	SlopeObject2
0000FE96 4EF9 0000 0000             		jmp	MarkObjGone
0000FE9C                            ; End of function Obj1A_WalkOff
0000FE9C                            
0000FE9C                            ; ===========================================================================
0000FE9C                            
0000FE9C                            Obj1A_Display:				; XREF: Obj1A_Index
0000FE9C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000FEA0 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000FEA2 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000FEA6 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000FEAA 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000FEAE 6000 0000                  		bra.w	DisplaySprite
0000FEB2                            ; ===========================================================================
0000FEB2                            
0000FEB2                            loc_82D0:				; XREF: Obj1A_Display
0000FEB2 5328 0038                  		subq.b	#1,$38(a0)
0000FEB6 6100 FFC4                  		bsr.w	Obj1A_WalkOff
0000FEBA 43F8 D000                  		lea	($FFFFD000).w,a1
0000FEBE 0829 0003 0022             		btst	#3,$22(a1)
0000FEC4 6700                       		beq.s	loc_82FC
0000FEC6 4A28 0038                  		tst.b	$38(a0)
0000FECA 6600                       		bne.s	locret_8308
0000FECC 08A9 0003 0022             		bclr	#3,$22(a1)
0000FED2 08A9 0005 0022             		bclr	#5,$22(a1)
0000FED8 137C 0001 001D             		move.b	#1,$1D(a1)
0000FEDE                            
0000FEDE                            loc_82FC:
0000FEDE 117C 0000 003A             		move.b	#0,$3A(a0)
0000FEE4 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
0000FEEA                            
0000FEEA                            locret_8308:
0000FEEA 4E75                       		rts	
0000FEEC                            ; ===========================================================================
0000FEEC                            
0000FEEC                            Obj1A_TimeZero:				; XREF: Obj1A_Display
0000FEEC 6100 0000                  		bsr.w	ObjectFall
0000FEF0 6100 0000                  		bsr.w	DisplaySprite
0000FEF4 4A28 0001                  		tst.b	1(a0)
0000FEF8 6A00                       		bpl.s	Obj1A_Delete
0000FEFA 4E75                       		rts	
0000FEFC                            ; ===========================================================================
0000FEFC                            
0000FEFC                            Obj1A_Delete:				; XREF: Obj1A_Index
0000FEFC 6100 0000                  		bsr.w	DeleteObject
0000FF00 4E75                       		rts	
0000FF02                            ; ===========================================================================
0000FF02                            ; ---------------------------------------------------------------------------
0000FF02                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000FF02                            ; ---------------------------------------------------------------------------
0000FF02                            
0000FF02                            Obj53:					; XREF: Obj_Index
0000FF02 7000                       		moveq	#0,d0
0000FF04 1028 0024                  		move.b	$24(a0),d0
0000FF08 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
0000FF0C 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000FF10                            ; ===========================================================================
0000FF10 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000FF14 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
0000FF18 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
0000FF1C                            ; ===========================================================================
0000FF1C                            
0000FF1C                            Obj53_Main:				; XREF: Obj53_Index
0000FF1C 5428 0024                  		addq.b	#2,$24(a0)
0000FF20 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
0000FF28 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FF2E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FF34 6600                       		bne.s	Obj53_NotSLZ
0000FF36 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
0000FF3C 5428 001A                  		addq.b	#2,$1A(a0)
0000FF40                            
0000FF40                            Obj53_NotSLZ:
0000FF40 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000FF46 6600                       		bne.s	Obj53_NotSBZ
0000FF48 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
0000FF4E                            
0000FF4E                            Obj53_NotSBZ:
0000FF4E 0028 0004 0001             		ori.b	#4,1(a0)
0000FF54 317C 0200 0018             		move.w	#$200,priority(a0)
0000FF5A 117C 0007 0038             		move.b	#7,$38(a0)
0000FF60 117C 0044 0023             		move.b	#$44,width_pixels(a0)
0000FF66                            
0000FF66                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000FF66 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000FF6A 6700                       		beq.s	Obj53_Solid	; if not, branch
0000FF6C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000FF70 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000FF74 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000FF78                            
0000FF78                            Obj53_Solid:
0000FF78 323C 0020                  		move.w	#$20,d1
0000FF7C 6100 F128                  		bsr.w	PlatformObject
0000FF80 4A28 0028                  		tst.b	$28(a0)
0000FF84 6A00                       		bpl.s	Obj53_MarkAsGone
0000FF86 0829 0003 0022             		btst	#3,$22(a1)
0000FF8C 6700                       		beq.s	Obj53_MarkAsGone
0000FF8E 08A8 0000 0001             		bclr	#0,1(a0)
0000FF94 3029 0008                  		move.w	8(a1),d0
0000FF98 9068 0008                  		sub.w	8(a0),d0
0000FF9C 6400                       		bcc.s	Obj53_MarkAsGone
0000FF9E 08E8 0000 0001             		bset	#0,1(a0)
0000FFA4                            
0000FFA4                            Obj53_MarkAsGone:
0000FFA4 4EF9 0000 0000             		jmp	MarkObjGone
0000FFAA                            ; ===========================================================================
0000FFAA                            
0000FFAA                            Obj53_Touch:				; XREF: Obj53_Index
0000FFAA 4A28 0038                  		tst.b	$38(a0)
0000FFAE 6700 0000                  		beq.w	loc_8458
0000FFB2 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000FFB8 5328 0038                  		subq.b	#1,$38(a0)
0000FFBC                            
0000FFBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FFBC                            
0000FFBC                            
0000FFBC                            Obj53_WalkOff:				; XREF: Obj53_Index
0000FFBC 323C 0020                  		move.w	#$20,d1
0000FFC0 6100 F224                  		bsr.w	ExitPlatform
0000FFC4 3428 0008                  		move.w	8(a0),d2
0000FFC8 6100 F482                  		bsr.w	MvSonicOnPtfm2
0000FFCC 4EF9 0000 0000             		jmp	MarkObjGone
0000FFD2                            ; End of function Obj53_WalkOff
0000FFD2                            
0000FFD2                            ; ===========================================================================
0000FFD2                            
0000FFD2                            Obj53_Display:				; XREF: Obj53_Index
0000FFD2 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000FFD6 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000FFD8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000FFDC 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000FFE0 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000FFE4 6000 0000                  		bra.w	DisplaySprite
0000FFE8                            ; ===========================================================================
0000FFE8                            
0000FFE8                            loc_8402:
0000FFE8 5328 0038                  		subq.b	#1,$38(a0)
0000FFEC 6100 FFCE                  		bsr.w	Obj53_WalkOff
0000FFF0 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFF4 0829 0003 0022             		btst	#3,$22(a1)
0000FFFA 6700                       		beq.s	loc_842E
0000FFFC 4A28 0038                  		tst.b	$38(a0)
00010000 6600                       		bne.s	locret_843A
00010002 08A9 0003 0022             		bclr	#3,$22(a1)
00010008 08A9 0005 0022             		bclr	#5,$22(a1)
0001000E 137C 0001 001D             		move.b	#1,$1D(a1)
00010014                            
00010014                            loc_842E:
00010014 117C 0000 003A             		move.b	#0,$3A(a0)
0001001A 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00010020                            
00010020                            locret_843A:
00010020 4E75                       		rts	
00010022                            ; ===========================================================================
00010022                            
00010022                            Obj53_TimeZero:				; XREF: Obj53_Display
00010022 6100 0000                  		bsr.w	ObjectFall
00010026 6100 0000                  		bsr.w	DisplaySprite
0001002A 4A28 0001                  		tst.b	1(a0)
0001002E 6A00                       		bpl.s	Obj53_Delete
00010030 4E75                       		rts	
00010032                            ; ===========================================================================
00010032                            
00010032                            Obj53_Delete:				; XREF: Obj53_Index
00010032 6100 0000                  		bsr.w	DeleteObject
00010036 4E75                       		rts	
00010038                            ; ===========================================================================
00010038                            
00010038                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00010038 117C 0000 003A             		move.b	#0,$3A(a0)
0001003E                            
0001003E                            loc_8458:				; XREF: Obj53_Touch
0001003E 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00010044 0828 0000 0028             		btst	#0,$28(a0)
0001004A 6700                       		beq.s	loc_846C
0001004C 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00010052                            
00010052                            loc_846C:
00010052 7207                       		moveq	#7,d1
00010054 5228 001A                  		addq.b	#1,$1A(a0)
00010058 6000                       		bra.s	loc_8486
0001005A                            ; ===========================================================================
0001005A                            
0001005A                            Obj1A_Collapse:
0001005A 117C 0000 003A             		move.b	#0,$3A(a0)
00010060                            
00010060                            loc_847A:
00010060 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00010066 7218                       		moveq	#$18,d1
00010068 5428 001A                  		addq.b	#2,$1A(a0)
0001006C                            
0001006C                            loc_8486:
0001006C 7000                       		moveq	#0,d0
0001006E 1028 001A                  		move.b	$1A(a0),d0
00010072 D040                       		add.w	d0,d0
00010074 2668 0004                  		movea.l	4(a0),a3
00010078 D6F3 0000                  		adda.w	(a3,d0.w),a3
0001007C 524B                       		addq.w	#1,a3
0001007E 08E8 0005 0001             		bset	#5,1(a0)
00010084 1810                       		move.b	0(a0),d4
00010086 1A28 0001                  		move.b	1(a0),d5
0001008A 2248                       		movea.l	a0,a1
0001008C                            	;	bra.s	loc_84B2	; We have to remove this otherwise a1's value won't be right,
0001008C                            	; but since it's what creates the first object over the source object, we also have to create it now...
0001008C                            	; First object's creation begins here:
0001008C 137C 0006 0024             		move.b	#6,$24(a1)
00010092 1284                       		move.b	d4,0(a1)
00010094 234B 0004                  		move.l	a3,4(a1)
00010098 1345 0001                  		move.b	d5,1(a1)
0001009C 3368 0008 0008             		move.w	8(a0),8(a1)
000100A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000100A8 3368 0002 0002             		move.w	2(a0),2(a1)
000100AE 3368 0018 0018             		move.w	priority(a0),priority(a1)
000100B4 1368 0023 0023             		move.b	width_pixels(a0),width_pixels(a1)
000100BA 135C 0038                  		move.b	(a4)+,$38(a1)
000100BE                            	; and ends here, it's a simple copy/paste from loc_84B2.
000100BE                            	; Now since we created one object already, we have to decrease the counter
000100BE 5341                       		subq.w	#1,d1
000100C0                            	; We don't have to check whether it's the last one or not, it can't be unless there's not enough free ram to create more (and that's checked later).
000100C0                            	; Here we begin what's replacing SingleObjLoad, in order to avoid resetting its d0 every time an object is created.
000100C0 43F8 D800                  		lea	($FFFFD800).w,a1
000100C4 303C 005F                  		move.w	#$5F,d0
000100C8                            
000100C8                            loc_84AA:
000100C8                            	;	bsr.w	SingleObjLoad	; We remove this, it's the routine we want to avoid
000100C8                            	; So here goes what was originally happening in SingleObjLoad, excepted now d0 won't be reset every time an object has to be created.
000100C8                            	; We'll just copy/paste the content of loc_DA94 and correct the branches.
000100C8                            	@loop:
000100C8 4A11                       		tst.b	(a1)
000100CA 6700                       		beq.s	@cont		; Let's correct the branches. Here we can also skip the bne that was originally after bsr.w SingleObjLoad because we already know there's a free object slot in memory.
000100CC 43E9 0040                  		lea	$40(a1),a1
000100D0 51C8 FFF6                  		dbf	d0,@loop	; Branch correction again.
000100D4 6600                       		bne.s	loc_84F2	; We're moving this line here.
000100D6                            	@cont:
000100D6                            	; And that's it, copy/paste complete.
000100D6 5A4B                       		addq.w	#5,a3
000100D8                            
000100D8                            loc_84B2:
000100D8 137C 0006 0024             		move.b	#6,$24(a1)
000100DE 1284                       		move.b	d4,0(a1)
000100E0 234B 0004                  		move.l	a3,4(a1)
000100E4 1345 0001                  		move.b	d5,1(a1)
000100E8 3368 0008 0008             		move.w	8(a0),8(a1)
000100EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000100F4 3368 0002 0002             		move.w	2(a0),2(a1)
000100FA 3368 0018 0018             		move.w	priority(a0),priority(a1)
00010100 1368 0023 0023             		move.b	width_pixels(a0),width_pixels(a1)
00010106 135C 0038                  		move.b	(a4)+,$38(a1)
0001010A                            	;	cmpa.l	a0,a1		; Finally, this isn't necessary anymore, its only purpose was to skip DisplaySprite2 on the first object
0001010A                            	;	bcc.s	loc_84EE
0001010A 6100 0000                  		bsr.w	DisplaySprite2
0001010E                            
0001010E                            loc_84EE:
0001010E 51C9 FFB8                  		dbf	d1,loc_84AA
00010112                            
00010112                            loc_84F2:
00010112 6100 0000                  		bsr.w	DisplaySprite
00010116 303C 006F                  		move.w	#$6F,d0
0001011A 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00010120                            ; ===========================================================================
00010120                            ; ---------------------------------------------------------------------------
00010120                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00010120                            ; ---------------------------------------------------------------------------
00010120 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00010130 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0001013A 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00010142 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0001014A                            
0001014A                            ; ---------------------------------------------------------------------------
0001014A                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0001014A                            ; ---------------------------------------------------------------------------
0001014A                            
0001014A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001014A                            
0001014A                            
0001014A                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
0001014A 43F8 D000                  		lea	($FFFFD000).w,a1
0001014E 0829 0003 0022             		btst	#3,status(a1)
00010154 6700                       		beq.s	locret_856E
00010156 3029 0008                  		move.w	8(a1),d0
0001015A 9068 0008                  		sub.w	8(a0),d0
0001015E D041                       		add.w	d1,d0
00010160 E248                       		lsr.w	#1,d0
00010162 0828 0000 0001             		btst	#0,1(a0)
00010168 6700                       		beq.s	loc_854E
0001016A 4640                       		not.w	d0
0001016C D041                       		add.w	d1,d0
0001016E                            
0001016E                            loc_854E:
0001016E 7200                       		moveq	#0,d1
00010170 1232 0000                  		move.b	(a2,d0.w),d1
00010174 3028 000C                  		move.w	$C(a0),d0
00010178 9041                       		sub.w	d1,d0
0001017A 7200                       		moveq	#0,d1
0001017C 1229 0016                  		move.b	$16(a1),d1
00010180 9041                       		sub.w	d1,d0
00010182 3340 000C                  		move.w	d0,$C(a1)
00010186 9468 0008                  		sub.w	8(a0),d2
0001018A 9569 0008                  		sub.w	d2,8(a1)
0001018E 4A38 FE2C                  		tst.b	($FFFFFE2C).w     ; does Sonic have a shield?
00010192 6700                       		beq.s	locret_856E       ; if not, branch
00010194 31C0 D18C                  		move.w	d0,($FFFFD180+$C).w   ; apply change to Shield's Y-Position
00010198 9578 D188                  		sub.w	d2,($FFFFD180+8).w   ; apply change to Shield's X-Position
0001019C                            locret_856E:
0001019C 4E75                       		rts	
0001019E                            ; End of function SlopeObject2
0001019E                            ; ===========================================================================
0001019E                            ; ---------------------------------------------------------------------------
0001019E                            ; Collision data for GHZ collapsing ledge
0001019E                            ; ---------------------------------------------------------------------------
0001019E                            Obj1A_SlopeData:
0001019E                            		incbin	misc\ghzledge.bin
000101CE                            		even
000101CE                            
000101CE                            ; ---------------------------------------------------------------------------
000101CE                            ; Sprite mappings - GHZ	collapsing ledge
000101CE                            ; ---------------------------------------------------------------------------
000101CE                            Map_obj1A:
000101CE                            	include "_maps\obj1A.asm"
000101CE                            ; ---------------------------------------------------------------------------
000101CE                            ; Sprite mappings - GHZ	collapsing ledge
000101CE                            ; ---------------------------------------------------------------------------
000101CE 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000101D2 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000101D6 10                         byte_85A8:	dc.b $10
000101D7 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000101DC D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000101E1 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000101E6 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000101EB D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000101F0 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000101F5 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000101FA F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000101FF F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00010204 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00010209 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0001020E 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00010213 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00010218 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0001021D 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00010222 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00010227 10                         byte_85F9:	dc.b $10
00010228 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0001022D D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00010232 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00010237 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0001023C D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00010241 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00010246 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0001024B F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00010250 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00010255 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0001025A 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0001025F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00010264 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00010269 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0001026E 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00010273 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00010278 19                         byte_864A:	dc.b $19
00010279 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0001027E C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00010283 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00010288 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0001028D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00010292 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00010297 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0001029C E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000102A1 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000102A6 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000102AB F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000102B0 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000102B5 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000102BA F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000102BF F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000102C4 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000102C9 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000102CE 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000102D3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000102D8 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000102DD 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000102E2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000102E7 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000102EC 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000102F1 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000102F6 19                         byte_86C8:	dc.b $19
000102F7 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000102FC C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00010301 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00010306 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0001030B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00010310 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00010315 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0001031A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0001031F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00010324 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00010329 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0001032E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00010333 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00010338 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0001033D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00010342 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00010347 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0001034C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00010351 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00010356 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0001035B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00010360 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00010365 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0001036A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0001036F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00010374                            		even
00010374                            		even
00010374                            
00010374                            ; ---------------------------------------------------------------------------
00010374                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00010374                            ; ---------------------------------------------------------------------------
00010374                            Map_obj53:
00010374                            	include "_maps\obj53.asm"
00010374                            ; ---------------------------------------------------------------------------
00010374                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00010374                            ; ---------------------------------------------------------------------------
00010374 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00010378 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0001037C 04                         byte_874E:	dc.b 4
0001037D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00010382 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00010387 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0001038C 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00010391 08                         byte_8763:	dc.b 8
00010392 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00010397 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001039C F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000103A1 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000103A6 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
000103AB 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
000103B0 0805 0000 00               		dc.b 8,	5, 0, 0, 0
000103B5 0805 0000 10               		dc.b 8,	5, 0, 0, $10
000103BA 04                         byte_878C:	dc.b 4
000103BB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
000103C0 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
000103C5 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000103CA 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
000103CF 08                         byte_87A1:	dc.b 8
000103D0 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000103D5 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000103DA F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000103DF F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000103E4 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000103E9 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000103EE 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000103F3 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000103F8                            		even
000103F8                            		even
000103F8                            
000103F8                            ; ===========================================================================
000103F8                            ; ---------------------------------------------------------------------------
000103F8                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000103F8                            ; ---------------------------------------------------------------------------
000103F8                            
000103F8                            Obj1C:					; XREF: Obj_Index
000103F8 7000                       		moveq	#0,d0
000103FA 1028 0024                  		move.b	$24(a0),d0
000103FE 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00010402 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00010406                            ; ===========================================================================
00010406 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00010408 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0001040A                            ; ===========================================================================
0001040A                            
0001040A                            Obj1C_Main:				; XREF: Obj1C_Index
0001040A 5428 0024                  		addq.b	#2,$24(a0)
0001040E 7000                       		moveq	#0,d0
00010410 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00010414 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00010418 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0001041C 2159 0004                  		move.l	(a1)+,4(a0)
00010420 3159 0002                  		move.w	(a1)+,2(a0)
00010424 0028 0004 0001             		ori.b	#4,1(a0)
0001042A 1159 001A                  		move.b	(a1)+,$1A(a0)
0001042E 1159 0023                  		move.b	(a1)+,width_pixels(a0)
00010432 1159 0018                  		move.b	(a1)+,priority(a0)
00010436 3028 0018                          move.w  priority(a0),d0
0001043A E248                               lsr.w   #1,d0
0001043C 0240 0380                          andi.w  #$380,d0
00010440 3140 0018                          move.w  d0,priority(a0)
00010444 1159 0020                  		move.b	(a1)+,$20(a0)
00010448                            
00010448                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00010448 4EF9 0000 0000             		jmp	MarkObjGone
0001044E                            ; ===========================================================================
0001044E                            ; ---------------------------------------------------------------------------
0001044E                            ; Variables for	object $1C are stored in an array
0001044E                            ; ---------------------------------------------------------------------------
0001044E 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00010452 44D8                       		dc.w $44D8		; VRAM setting
00010454 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00010458 0000 0000                  		dc.l Map_obj1C
0001045C 44D8                       		dc.w $44D8
0001045E 0008 0200                  		dc.b 0,	8, 2, 0
00010462 0000 0000                  		dc.l Map_obj1C
00010466 44D8                       		dc.w $44D8
00010468 0008 0200                  		dc.b 0,	8, 2, 0
0001046C 0000 F218                  		dc.l Map_obj11
00010470 438E                       		dc.w $438E
00010472 0110 0100                  		dc.b 1,	$10, 1,	0
00010476                            ; ---------------------------------------------------------------------------
00010476                            ; Sprite mappings - SLZ	lava thrower
00010476                            ; ---------------------------------------------------------------------------
00010476                            Map_obj1C:
00010476                            	include "_maps\obj1C.asm"
00010476                            ; ---------------------------------------------------------------------------
00010476                            ; Sprite mappings - SLZ	lava thrower
00010476                            ; ---------------------------------------------------------------------------
00010476 0000                       		dc.w byte_8858-Map_obj1C
00010478 01                         byte_8858:	dc.b 1
00010479 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001047E                            		even
0001047E                            		even
0001047E                            
0001047E                            ; ===========================================================================
0001047E                            ; ---------------------------------------------------------------------------
0001047E                            ; Object 1D - switch that activates when Sonic touches it
0001047E                            ; (this	is not used anywhere in	the game)
0001047E                            ; ---------------------------------------------------------------------------
0001047E                            
0001047E                            Obj1D:					; XREF: Obj_Index
0001047E 7000                       		moveq	#0,d0
00010480 1028 0024                  		move.b	$24(a0),d0
00010484 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00010488 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
0001048C                            ; ===========================================================================
0001048C 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0001048E 0000                       		dc.w Obj1D_Action-Obj1D_Index
00010490 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00010492                            ; ===========================================================================
00010492                            
00010492                            Obj1D_Main:				; XREF: Obj1D_Index
00010492 5428 0024                  		addq.b	#2,$24(a0)
00010496 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0001049E 317C 4000 0002             		move.w	#$4000,2(a0)
000104A4 117C 0004 0001             		move.b	#4,1(a0)
000104AA 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
000104B0 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000104B6 317C 0280 0018             		move.w	#$280,priority(a0)
000104BC                            
000104BC                            Obj1D_Action:				; XREF: Obj1D_Index
000104BC 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
000104C2 323C 0010                  		move.w	#$10,d1
000104C6 6100 0000                  		bsr.w	Obj1D_ChkTouch
000104CA 6700                       		beq.s	Obj1D_ChkDel
000104CC 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000104D0 7001                       		moveq	#1,d0
000104D2 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000104D6                            
000104D6                            Obj1D_ChkDel:
000104D6 6100 0000                  		bsr.w	DisplaySprite
000104DA 4EF9 0000 0000             		jmp		MarkObjGone3	
000104E0                            Obj1D_Delete:				; XREF: Obj1D_Index
000104E0 6100 0000                  		bsr.w	DeleteObject
000104E4 4E75                       		rts	
000104E6                            ; ---------------------------------------------------------------------------
000104E6                            ; Subroutine to	check if Sonic touches the object
000104E6                            ; ---------------------------------------------------------------------------
000104E6                            
000104E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104E6                            
000104E6                            
000104E6                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
000104E6 43F8 D000                  		lea	($FFFFD000).w,a1
000104EA 3029 0008                  		move.w	8(a1),d0
000104EE 9068 0008                  		sub.w	8(a0),d0
000104F2 D041                       		add.w	d1,d0
000104F4 6B00                       		bmi.s	loc_8918
000104F6 D241                       		add.w	d1,d1
000104F8 B041                       		cmp.w	d1,d0
000104FA 6400                       		bcc.s	loc_8918
000104FC 3429 000C                  		move.w	$C(a1),d2
00010500 1229 0016                  		move.b	$16(a1),d1
00010504 4881                       		ext.w	d1
00010506 D242                       		add.w	d2,d1
00010508 3028 000C                  		move.w	$C(a0),d0
0001050C 0440 0010                  		subi.w	#$10,d0
00010510 9041                       		sub.w	d1,d0
00010512 6200                       		bhi.s	loc_8918
00010514 0C40 FFF0                  		cmpi.w	#-$10,d0
00010518 6500                       		bcs.s	loc_8918
0001051A 70FF                       		moveq	#-1,d0
0001051C 4E75                       		rts	
0001051E                            ; ===========================================================================
0001051E                            
0001051E                            loc_8918:
0001051E 7000                       		moveq	#0,d0
00010520 4E75                       		rts	
00010522                            ; End of function Obj1D_ChkTouch
00010522                            
00010522                            ; ===========================================================================
00010522                            ; ---------------------------------------------------------------------------
00010522                            ; Sprite mappings - object 1D
00010522                            ; ---------------------------------------------------------------------------
00010522                            Map_obj1D:
00010522                            	include '_maps\obj1D.asm'
00010522                            ; ---------------------------------------------------------------------------
00010522                            ; Sprite mappings - object 1D
00010522                            ; ---------------------------------------------------------------------------
00010522 0000                       		dc.w byte_891E-Map_obj1D
00010524 04                         byte_891E:	dc.b 4
00010525 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0001052A 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0001052F E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00010534 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0001053A 00                         		even
0001053A 00                         		even
0001053A                            
0001053A                            ; ===========================================================================
0001053A                            ; ---------------------------------------------------------------------------
0001053A                            ; Object 2A - doors (SBZ)
0001053A                            ; ---------------------------------------------------------------------------
0001053A                            
0001053A                            Obj2A:					; XREF: Obj_Index
0001053A 7000                       		moveq	#0,d0
0001053C 1028 0024                  		move.b	$24(a0),d0
00010540 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00010544 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00010548                            ; ===========================================================================
00010548 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0001054A 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0001054C                            ; ===========================================================================
0001054C                            
0001054C                            Obj2A_Main:				; XREF: Obj2A_Index
0001054C 5428 0024                  		addq.b	#2,$24(a0)
00010550 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00010558 317C 42E8 0002             		move.w	#$42E8,2(a0)
0001055E 0028 0004 0001             		ori.b	#4,1(a0)
00010564 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001056A 317C 0200 0018             		move.w	#$200,priority(a0)
00010570                            
00010570                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00010570 323C 0040                  		move.w	#$40,d1
00010574 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00010578 3038 D008                  		move.w	($FFFFD008).w,d0
0001057C D041                       		add.w	d1,d0
0001057E B068 0008                  		cmp.w	8(a0),d0
00010582 6500                       		bcs.s	Obj2A_Animate
00010584 9041                       		sub.w	d1,d0
00010586 9041                       		sub.w	d1,d0
00010588 B068 0008                  		cmp.w	8(a0),d0
0001058C 6400                       		bcc.s	Obj2A_Animate
0001058E D041                       		add.w	d1,d0
00010590 B068 0008                  		cmp.w	8(a0),d0
00010594 6400                       		bcc.s	loc_899A
00010596 0828 0000 0022             		btst	#0,$22(a0)
0001059C 6600                       		bne.s	Obj2A_Animate
0001059E 6000                       		bra.s	Obj2A_Open
000105A0                            ; ===========================================================================
000105A0                            
000105A0                            loc_899A:				; XREF: Obj2A_OpenShut
000105A0 0828 0000 0022             		btst	#0,$22(a0)
000105A6 6700                       		beq.s	Obj2A_Animate
000105A8                            
000105A8                            Obj2A_Open:				; XREF: Obj2A_OpenShut
000105A8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
000105AE                            
000105AE                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
000105AE 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
000105B4 6100 0000                  		bsr.w	AnimateSprite
000105B8 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000105BC 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
000105BE 323C 0011                  		move.w	#$11,d1
000105C2 343C 0020                  		move.w	#$20,d2
000105C6 3602                       		move.w	d2,d3
000105C8 5243                       		addq.w	#1,d3
000105CA 3828 0008                  		move.w	8(a0),d4
000105CE 4EB9 0000 0000             		jsr	SolidObject
000105D4                            
000105D4                            Obj2A_MarkAsUsed:
000105D4 4EF9 0000 0000             		jmp	MarkObjGone
000105DA                            ; ===========================================================================
000105DA                            Ani_obj2A:
000105DA                            	include '_anim\obj2A.asm'
000105DA                            ; ---------------------------------------------------------------------------
000105DA                            ; Animation script - doors (SBZ)
000105DA                            ; ---------------------------------------------------------------------------
000105DA 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
000105DC 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
000105DE 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
000105EA 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000105F6                            		even
000105F6                            		even
000105F6                            
000105F6                            ; ---------------------------------------------------------------------------
000105F6                            ; Sprite mappings - doors (SBZ)
000105F6                            ; ---------------------------------------------------------------------------
000105F6                            Map_obj2A:
000105F6                            	include '_maps\obj2A.asm'
000105F6                            ; ---------------------------------------------------------------------------
000105F6                            ; Sprite mappings - doors (SBZ)
000105F6                            ; ---------------------------------------------------------------------------
000105F6 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000105FA 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000105FE 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00010602 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00010606 0000                       		dc.w byte_8A56-Map_obj2A
00010608 02                         byte_89FE:	dc.b 2
00010609 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0001060E 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00010613 02                         byte_8A09:	dc.b 2
00010614 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00010619 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0001061E 02                         byte_8A14:	dc.b 2
0001061F D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00010624 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00010629 02                         byte_8A1F:	dc.b 2
0001062A D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0001062F 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00010634 02                         byte_8A2A:	dc.b 2
00010635 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0001063A 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0001063F 02                         byte_8A35:	dc.b 2
00010640 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00010645 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0001064A 02                         byte_8A40:	dc.b 2
0001064B C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00010650 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00010655 02                         byte_8A4B:	dc.b 2
00010656 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0001065B 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00010660 02                         byte_8A56:	dc.b 2
00010661 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00010666 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0001066C 00                         		even
0001066C 00                         		even
0001066C                            
0001066C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001066C                            
0001066C                            
0001066C                            Obj44_SolidWall:			; XREF: Obj44_Solid
0001066C 4EB9 0000 0000             		jsr	Obj44_SolidWall2
00010672 6700                       		beq.s	loc_8AA8
00010674 6B00 0000                  		bmi.w	loc_8AC4
00010678 4A40                       		tst.w	d0
0001067A 6700 0000                  		beq.w	loc_8A92
0001067E 6B00                       		bmi.s	loc_8A7C
00010680 4A69 0010                  		tst.w	x_vel(a1)
00010684 6B00                       		bmi.s	loc_8A92
00010686 6000                       		bra.s	loc_8A82
00010688                            ; ===========================================================================
00010688                            
00010688                            loc_8A7C:
00010688 4A69 0010                  		tst.w	x_vel(a1)
0001068C 6A00                       		bpl.s	loc_8A92
0001068E                            
0001068E                            loc_8A82:
0001068E 9169 0008                  		sub.w	d0,8(a1)
00010692 337C 0000 0020             		move.w	#0,inertia(a1)
00010698 337C 0000 0010             		move.w	#0,x_vel(a1)
0001069E                            
0001069E                            loc_8A92:
0001069E 0829 0001 0022             		btst	#1,status(a1)
000106A4 6600                       		bne.s	loc_8AB6
000106A6 08E9 0005 0022             		bset	#5,status(a1)
000106AC 08E8 0005 0022             		bset	#5,status(a0)
000106B2 4E75                       		rts	
000106B4                            ; ===========================================================================
000106B4                            
000106B4                            loc_8AA8:
000106B4 0828 0005 0022             		btst	#5,status(a0)
000106BA 6700                       		beq.s	locret_8AC2
000106BC 337C 0001 001C             		move.w	#1,anim(a1)
000106C2                            
000106C2                            loc_8AB6:
000106C2 08A8 0005 0022             		bclr	#5,status(a0)
000106C8 08A9 0005 0022             		bclr	#5,status(a1)
000106CE                            
000106CE                            locret_8AC2:
000106CE 4E75                       		rts	
000106D0                            ; ===========================================================================
000106D0                            
000106D0                            loc_8AC4:
000106D0 4A69 0012                  		tst.w	y_vel(a1)
000106D4 6A00                       		bpl.s	locret_8AD8
000106D6 4A43                       		tst.w	d3
000106D8 6A00                       		bpl.s	locret_8AD8
000106DA 9769 000C                  		sub.w	d3,$C(a1)
000106DE 337C 0000 0012             		move.w	#0,y_vel(a1)
000106E4                            
000106E4                            locret_8AD8:
000106E4 4E75                       		rts	
000106E6                            ; End of function Obj44_SolidWall
000106E6                            
000106E6                            
000106E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000106E6                            
000106E6                            
000106E6                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
000106E6 43F8 D000                  		lea	($FFFFD000).w,a1
000106EA 3029 0008                  		move.w	8(a1),d0
000106EE 9068 0008                  		sub.w	8(a0),d0
000106F2 D041                       		add.w	d1,d0
000106F4 6B00                       		bmi.s	loc_8B48
000106F6 3601                       		move.w	d1,d3
000106F8 D643                       		add.w	d3,d3
000106FA B043                       		cmp.w	d3,d0
000106FC 6200                       		bhi.s	loc_8B48
000106FE 1629 0016                  		move.b	$16(a1),d3
00010702 4883                       		ext.w	d3
00010704 D443                       		add.w	d3,d2
00010706 3629 000C                  		move.w	$C(a1),d3
0001070A 9668 000C                  		sub.w	$C(a0),d3
0001070E D642                       		add.w	d2,d3
00010710 6B00                       		bmi.s	loc_8B48
00010712 3802                       		move.w	d2,d4
00010714 D844                       		add.w	d4,d4
00010716 B644                       		cmp.w	d4,d3
00010718 6400                       		bcc.s	loc_8B48
0001071A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001071E 6B00                       		bmi.s	loc_8B48
00010720 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010726 6400                       		bcc.s	loc_8B48
00010728 4A78 FE08                  		tst.w	($FFFFFE08).w
0001072C 6600                       		bne.s	loc_8B48
0001072E 3A00                       		move.w	d0,d5
00010730 B240                       		cmp.w	d0,d1
00010732 6400                       		bcc.s	loc_8B30
00010734 D241                       		add.w	d1,d1
00010736 9041                       		sub.w	d1,d0
00010738 3A00                       		move.w	d0,d5
0001073A 4445                       		neg.w	d5
0001073C                            
0001073C                            loc_8B30:
0001073C 3203                       		move.w	d3,d1
0001073E B443                       		cmp.w	d3,d2
00010740 6400                       		bcc.s	loc_8B3C
00010742 9644                       		sub.w	d4,d3
00010744 3203                       		move.w	d3,d1
00010746 4441                       		neg.w	d1
00010748                            
00010748                            loc_8B3C:
00010748 BA41                       		cmp.w	d1,d5
0001074A 6200                       		bhi.s	loc_8B44
0001074C 7801                       		moveq	#1,d4
0001074E 4E75                       		rts	
00010750                            ; ===========================================================================
00010750                            
00010750                            loc_8B44:
00010750 78FF                       		moveq	#-1,d4
00010752 4E75                       		rts	
00010754                            ; ===========================================================================
00010754                            
00010754                            loc_8B48:
00010754 7800                       		moveq	#0,d4
00010756 4E75                       		rts	
00010758                            ; End of function Obj44_SolidWall2
00010758                            
00010758                            ; ===========================================================================
00010758                            ; ---------------------------------------------------------------------------
00010758                            ; Object 1E - Ball Hog enemy (SBZ)
00010758                            ; ---------------------------------------------------------------------------
00010758                            
00010758                            Obj1E:					; XREF: Obj_Index
00010758 7000                       		moveq	#0,d0
0001075A 1028 0024                  		move.b	routine(a0),d0
0001075E 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00010762 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00010766                            ; ===========================================================================
00010766 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00010768 0000                       		dc.w Obj1E_Action-Obj1E_Index
0001076A                            ; ===========================================================================
0001076A                            
0001076A                            Obj1E_Main:				; XREF: Obj1E_Index
0001076A 117C 0013 0016             		move.b	#$13,$16(a0)
00010770 117C 0008 0017             		move.b	#8,$17(a0)
00010776 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0001077E 317C 2302 0002             		move.w	#$2302,2(a0)
00010784 117C 0004 0001             		move.b	#4,1(a0)
0001078A 317C 0200 0018             		move.w	#$200,priority(a0)
00010790 117C 0005 0020             		move.b	#5,collision_flags(a0)
00010796 117C 000C 0023             		move.b	#$C,width_pixels(a0)
0001079C 4EB9 0000 0000             		jsr	ObjectFall
000107A2 4EB9 0000 0000             		jsr	ObjHitFloor
000107A8 4A41                       		tst.w	d1
000107AA 6A00                       		bpl.s	locret_8BAC
000107AC D368 000C                  		add.w	d1,$C(a0)
000107B0 317C 0000 0012             		move.w	#0,y_vel(a0)
000107B6 5428 0024                  		addq.b	#2,routine(a0)
000107BA                            
000107BA                            locret_8BAC:
000107BA 4E75                       		rts	
000107BC                            ; ===========================================================================
000107BC                            
000107BC                            Obj1E_Action:				; XREF: Obj1E_Index
000107BC 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000107C2 4EB9 0000 0000             		jsr	AnimateSprite
000107C8 0C28 0001 001A             		cmpi.b	#1,mapping_frame(a0)	; is final frame (01) displayed?
000107CE 6600                       		bne.s	Obj1E_SetBall	; if not, branch
000107D0 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
000107D4 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
000107D6 6000                       		bra.s	Obj1E_MarkAsGone
000107D8                            ; ===========================================================================
000107D8                            
000107D8                            Obj1E_SetBall:				; XREF: Obj1E_Action
000107D8 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
000107DC                            
000107DC                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
000107DC 4EF9 0000 0000             		jmp	MarkObjGone
000107E2                            ; ===========================================================================
000107E2                            
000107E2                            Obj1E_MakeBall:				; XREF: Obj1E_Action
000107E2 117C 0001 0032             		move.b	#1,$32(a0)
000107E8 4EB9 0000 0000             		jsr	SingleObjLoad
000107EE 6600                       		bne.s	loc_8C1A
000107F0 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000107F4 3368 0008 0008             		move.w	8(a0),8(a1)
000107FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010800 337C FF00 0010             		move.w	#-$100,x_vel(a1)	; cannonball bounces to	the left
00010806 337C 0000 0012             		move.w	#0,y_vel(a1)
0001080C 70FC                       		moveq	#-4,d0
0001080E 0828 0000 0022             		btst	#0,status(a0)	; is Ball Hog facing right?
00010814 6700                       		beq.s	loc_8C0A	; if not, branch
00010816 4440                       		neg.w	d0
00010818 4469 0010                  		neg.w	x_vel(a1)		; cannonball bounces to	the right
0001081C                            
0001081C                            loc_8C0A:
0001081C D169 0008                  		add.w	d0,8(a1)
00010820 0669 000C 000C             		addi.w	#$C,$C(a1)
00010826 1368 0028 0028             		move.b	subtype(a0),subtype(a1)	; copy object type from	Ball Hog
0001082C                            
0001082C                            loc_8C1A:
0001082C 60AE                       		bra.s	Obj1E_MarkAsGone
0001082E                            ; ===========================================================================
0001082E                            ; ---------------------------------------------------------------------------
0001082E                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0001082E                            ; ---------------------------------------------------------------------------
0001082E                            
0001082E                            Obj20:					; XREF: Obj_Index
0001082E 7000                       		moveq	#0,d0
00010830 1028 0024                  		move.b	routine(a0),d0
00010834 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00010838 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0001083C                            ; ===========================================================================
0001083C 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0001083E 0000                       		dc.w Obj20_Bounce-Obj20_Index
00010840                            ; ===========================================================================
00010840                            
00010840                            Obj20_Main:				; XREF: Obj20_Index
00010840 5428 0024                  		addq.b	#2,routine(a0)
00010844 117C 0007 0016             		move.b	#7,$16(a0)
0001084A 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00010852 317C 2302 0002             		move.w	#$2302,2(a0)
00010858 117C 0004 0001             		move.b	#4,1(a0)
0001085E 317C 0180 0018             		move.w	#$180,priority(a0)
00010864 117C 0087 0020             		move.b	#$87,collision_flags(a0)
0001086A 117C 0008 0023             		move.b	#8,width_pixels(a0)
00010870 7000                       		moveq	#0,d0
00010872 1028 0028                  		move.b	subtype(a0),d0	; move object type to d0
00010876 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0001087A 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0001087E 117C 0004 001A             		move.b	#4,mapping_frame(a0)
00010884                            
00010884                            Obj20_Bounce:				; XREF: Obj20_Index
00010884 4EB9 0000 0000             		jsr	ObjectFall
0001088A 4A68 0012                  		tst.w	y_vel(a0)
0001088E 6B00                       		bmi.s	Obj20_ChkExplode
00010890 4EB9 0000 0000             		jsr	ObjHitFloor
00010896 4A41                       		tst.w	d1
00010898 6A00                       		bpl.s	Obj20_ChkExplode
0001089A D368 000C                  		add.w	d1,$C(a0)
0001089E 317C FD00 0012             		move.w	#-$300,y_vel(a0)
000108A4 4A03                       		tst.b	d3
000108A6 6700                       		beq.s	Obj20_ChkExplode
000108A8 6B00                       		bmi.s	loc_8CA4
000108AA 4A68 0010                  		tst.w	x_vel(a0)
000108AE 6A00                       		bpl.s	Obj20_ChkExplode
000108B0 4468 0010                  		neg.w	x_vel(a0)
000108B4 6000                       		bra.s	Obj20_ChkExplode
000108B6                            ; ===========================================================================
000108B6                            
000108B6                            loc_8CA4:				; XREF: Obj20_Bounce
000108B6 4A68 0010                  		tst.w	x_vel(a0)
000108BA 6B00                       		bmi.s	Obj20_ChkExplode
000108BC 4468 0010                  		neg.w	x_vel(a0)
000108C0                            
000108C0                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000108C0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000108C4 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000108C6 10BC 0024                  		move.b	#$24,0(a0)
000108CA 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000108CE 117C 0000 0024             		move.b	#0,routine(a0)	; reset	routine	counter
000108D4 6000 0000                  		bra.w	Obj3F		; jump to explosion code
000108D8                            ; ===========================================================================
000108D8                            
000108D8                            Obj20_Animate:				; XREF: Obj20_ChkExplode
000108D8 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame	duration
000108DC 6A00                       		bpl.s	Obj20_Display
000108DE 117C 0005 001E             		move.b	#5,anim_frame_duration(a0)	; set frame duration to	5 frames
000108E4 0868 0000 001A             		bchg	#0,mapping_frame(a0)	; change frame
000108EA                            
000108EA                            Obj20_Display:
000108EA 4EB9 0000 0000             		jsr	DisplaySprite
000108F0 3038 F72E                  		move.w	($FFFFF72E).w,d0
000108F4 0640 00E0                  		addi.w	#$E0,d0
000108F8 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000108FC 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00010900 4E75                       		rts	
00010902                            ; ===========================================================================
00010902                            ; ---------------------------------------------------------------------------
00010902                            ; Object 24 - explosion	from a destroyed monitor
00010902                            ; ---------------------------------------------------------------------------
00010902                            
00010902                            Obj24:					; XREF: Obj_Index
00010902 7000                       		moveq	#0,d0
00010904 1028 0024                  		move.b	routine(a0),d0
00010908 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0001090C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00010910                            ; ===========================================================================
00010910 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00010912 0000                       		dc.w Obj24_Animate-Obj24_Index
00010914                            ; ===========================================================================
00010914                            
00010914                            Obj24_Main:				; XREF: Obj24_Index
00010914 5428 0024                  		addq.b	#2,routine(a0)
00010918 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00010920 317C 041C 0002             		move.w	#$41C,2(a0)
00010926 117C 0004 0001             		move.b	#4,1(a0)
0001092C 317C 0080 0018             		move.w	#$80,priority(a0)
00010932 117C 0000 0020             		move.b	#0,collision_flags(a0)
00010938 117C 000C 0023             		move.b	#$C,width_pixels(a0)
0001093E 117C 0009 001E             		move.b	#9,anim_frame_duration(a0)
00010944 117C 0000 001A             		move.b	#0,mapping_frame(a0)
0001094A 303C 00A5                  		move.w	#$A5,d0
0001094E 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play explosion sound
00010954                            
00010954                            Obj24_Animate:				; XREF: Obj24_Index
00010954 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame	duration
00010958 6A00                       		bpl.s	Obj24_Display
0001095A 117C 0009 001E             		move.b	#9,anim_frame_duration(a0)	; set frame duration to	9 frames
00010960 5228 001A                  		addq.b	#1,mapping_frame(a0)	; next frame
00010964 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)	; is the final frame (04) displayed?
0001096A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0001096E                            
0001096E                            Obj24_Display:
0001096E 6000 0000                  		bra.w	DisplaySprite
00010972                            ; ===========================================================================
00010972                            ; ---------------------------------------------------------------------------
00010972                            ; Object 27 - explosion	from a destroyed enemy
00010972                            ; ---------------------------------------------------------------------------
00010972                            
00010972                            Obj27:					; XREF: Obj_Index
00010972 7000                       		moveq	#0,d0
00010974 1028 0024                  		move.b	routine(a0),d0
00010978 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0001097C 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00010980                            ; ===========================================================================
00010980 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00010982 0000                       		dc.w Obj27_Main-Obj27_Index
00010984 0000                       		dc.w Obj27_Animate-Obj27_Index
00010986                            ; ===========================================================================
00010986                            
00010986                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00010986 5428 0024                  		addq.b	#2,routine(a0)
0001098A 4EB9 0000 0000             		jsr	SingleObjLoad
00010990 6600                       		bne.s	Obj27_Main
00010992 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00010996 3368 0008 0008             		move.w	8(a0),8(a1)
0001099C 3368 000C 000C             		move.w	$C(a0),$C(a1)
000109A2 3368 003E 003E             		move.w	parent(a0),parent(a1)
000109A8                            
000109A8                            Obj27_Main:				; XREF: Obj27_Index
000109A8 5428 0024                  		addq.b	#2,routine(a0)
000109AC 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000109B4 317C 05A0 0002             		move.w	#$5A0,2(a0)
000109BA 117C 0004 0001             		move.b	#4,1(a0)
000109C0 317C 0080 0018             		move.w	#$80,priority(a0)
000109C6 117C 0000 0020             		move.b	#0,collision_flags(a0)
000109CC 117C 000C 0023             		move.b	#$C,width_pixels(a0)
000109D2 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)	; set frame duration to	7 frames
000109D8 117C 0000 001A             		move.b	#0,mapping_frame(a0)
000109DE 303C 003D                  		move.w	#$3D,d0
000109E2 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
000109E8                            
000109E8                            Obj27_Animate:				; XREF: Obj27_Index
000109E8 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame	duration
000109EC 6A00                       		bpl.s	Obj27_Display
000109EE 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)	; set frame duration to	7 frames
000109F4 5228 001A                  		addq.b	#1,mapping_frame(a0)	; next frame
000109F8 0C28 0005 001A             		cmpi.b	#5,mapping_frame(a0)	; is the final frame (05) displayed?
000109FE 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00010A02                            
00010A02                            Obj27_Display:
00010A02 6000 0000                  		bra.w	DisplaySprite
00010A06                            ; ===========================================================================
00010A06                            ; ---------------------------------------------------------------------------
00010A06                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00010A06                            ; ---------------------------------------------------------------------------
00010A06                            
00010A06                            Obj3F:					; XREF: Obj_Index
00010A06 7000                       		moveq	#0,d0
00010A08 1028 0024                  		move.b	routine(a0),d0
00010A0C 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00010A10 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00010A14                            ; ===========================================================================
00010A14 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00010A16 0000                       		dc.w Obj3F_Animate-Obj3F_Index
00010A18                            ; ===========================================================================
00010A18                            
00010A18                            Obj3F_Main:				; XREF: Obj3F_Index
00010A18 5428 0024                  		addq.b	#2,routine(a0)
00010A1C 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00010A24 317C 05A0 0002             		move.w	#$5A0,2(a0)
00010A2A 117C 0004 0001             		move.b	#4,1(a0)
00010A30 317C 0080 0018             		move.w	#$80,priority(a0)
00010A36 117C 0000 0020             		move.b	#0,collision_flags(a0)
00010A3C 117C 000C 0023             		move.b	#$C,width_pixels(a0)
00010A42 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
00010A48 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00010A4E 303C 00B4                  		move.w	#$B4,d0
00010A52 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00010A58                            		
00010A58                            Obj3F_Animate:				; XREF: Obj27_Index
00010A58 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame	duration
00010A5C 6AA4                       		bpl.s	Obj27_Display
00010A5E 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
00010A64 5228 001A                  		addq.b	#1,mapping_frame(a0)
00010A68 0C28 0006 001A             		cmpi.b	#6,mapping_frame(a0)
00010A6E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00010A72                            
00010A72                            Obj3F_Display:
00010A72 6000 0000                  		bra.w	DisplaySprite
00010A76                            ; ===========================================================================
00010A76                            ; ===========================================================================
00010A76                            Ani_obj1E:
00010A76                            	include "_anim\obj1E.asm"
00010A76                            ; ---------------------------------------------------------------------------
00010A76                            ; Animation script - doors (SBZ)
00010A76                            ; ---------------------------------------------------------------------------
00010A76 0000                       		dc.w byte_8E4A-Ani_obj1E
00010A78 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00010A90 00                         		even
00010A90 00                         		even
00010A90                            
00010A90                            ; ---------------------------------------------------------------------------
00010A90                            ; Sprite mappings - Ball Hog enemy (SBZ)
00010A90                            ; ---------------------------------------------------------------------------
00010A90                            Map_obj1E:
00010A90                            	include "_maps\obj1E.asm"
00010A90                            ; ---------------------------------------------------------------------------
00010A90                            ; Sprite mappings - Ball Hog enemy (SBZ)
00010A90                            ; ---------------------------------------------------------------------------
00010A90 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00010A94 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00010A98 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00010A9C 02                         byte_8E6E:	dc.b 2
00010A9D EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00010AA2 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00010AA7 02                         byte_8E79:	dc.b 2
00010AA8 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00010AAD FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00010AB2 02                         byte_8E84:	dc.b 2
00010AB3 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00010AB8 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00010ABD 02                         byte_8E8F:	dc.b 2
00010ABE E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00010AC3 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00010AC8 01                         byte_8E9A:	dc.b 1
00010AC9 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00010ACE 01                         byte_8EA0:	dc.b 1
00010ACF F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00010AD4                            		even
00010AD4                            		even
00010AD4                            
00010AD4                            ; ---------------------------------------------------------------------------
00010AD4                            ; Sprite mappings - explosion
00010AD4                            ; ---------------------------------------------------------------------------
00010AD4                            Map_obj24:
00010AD4                            	include "_maps\obj24s3.asm"
00010AD4                            ; --------------------------------------------------------------------------------
00010AD4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010AD4                            ; --------------------------------------------------------------------------------
00010AD4                            
00010AD4                            SME_nzr3c:	
00010AD4 0000 0000                  		dc.w SME_nzr3c_A-SME_nzr3c, SME_nzr3c_10-SME_nzr3c	
00010AD8 0000 0000                  		dc.w SME_nzr3c_16-SME_nzr3c, SME_nzr3c_1C-SME_nzr3c	
00010ADC 0000                       		dc.w SME_nzr3c_22-SME_nzr3c	
00010ADE 01                         SME_nzr3c_A:	dc.b 1	
00010ADF F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00010AE4 01                         SME_nzr3c_10:	dc.b 1	
00010AE5 F00F 2004 F0               		dc.b $F0, $F, $20, 4, $F0	
00010AEA 01                         SME_nzr3c_16:	dc.b 1	
00010AEB F00F 2014 F0               		dc.b $F0, $F, $20, $14, $F0	
00010AF0 01                         SME_nzr3c_1C:	dc.b 1	
00010AF1 F00F 2024 F0               		dc.b $F0, $F, $20, $24, $F0	
00010AF6 01                         SME_nzr3c_22:	dc.b 1	
00010AF7 F00F 2034 F0               		dc.b $F0, $F, $20, $34, $F0	
00010AFC                            		even
00010AFC                            		even
00010AFC                            
00010AFC                            ; ---------------------------------------------------------------------------
00010AFC                            ; Sprite mappings - explosion
00010AFC                            ; ---------------------------------------------------------------------------
00010AFC                            Map_obj27:include "_maps\obj27s3.asm"
00010AFC                            ; --------------------------------------------------------------------------------
00010AFC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010AFC                            ; --------------------------------------------------------------------------------
00010AFC                            
00010AFC                            SME_stcCy:	
00010AFC 0000 0000                  		dc.w SME_stcCy_A-SME_stcCy, SME_stcCy_10-SME_stcCy	
00010B00 0000 0000                  		dc.w SME_stcCy_16-SME_stcCy, SME_stcCy_1C-SME_stcCy	
00010B04 0000                       		dc.w SME_stcCy_22-SME_stcCy	
00010B06 01                         SME_stcCy_A:	dc.b 1	
00010B07 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00010B0C 01                         SME_stcCy_10:	dc.b 1	
00010B0D F00F 2004 F0               		dc.b $F0, $F, $20, 4, $F0	
00010B12 01                         SME_stcCy_16:	dc.b 1	
00010B13 F00F 2014 F0               		dc.b $F0, $F, $20, $14, $F0	
00010B18 01                         SME_stcCy_1C:	dc.b 1	
00010B19 F00F 2024 F0               		dc.b $F0, $F, $20, $24, $F0	
00010B1E 01                         SME_stcCy_22:	dc.b 1	
00010B1F F00F 2034 F0               		dc.b $F0, $F, $20, $34, $F0	
00010B24                            		even
00010B24                            		even
00010B24                            ; ---------------------------------------------------------------------------
00010B24                            ; Sprite mappings - explosion from when	a boss is destroyed
00010B24                            ; ---------------------------------------------------------------------------
00010B24                            Map_obj3F:include "_maps\obj3Fs3.asm"
00010B24                            ; --------------------------------------------------------------------------------
00010B24                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010B24                            ; --------------------------------------------------------------------------------
00010B24                            
00010B24                            SME_georC:	
00010B24 0000 0000                  		dc.w SME_georC_C-SME_georC, SME_georC_12-SME_georC	
00010B28 0000 0000                  		dc.w SME_georC_18-SME_georC, SME_georC_1E-SME_georC	
00010B2C 0000 0000                  		dc.w SME_georC_24-SME_georC, SME_georC_2A-SME_georC	
00010B30 01                         SME_georC_C:	dc.b 1	
00010B31 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00010B36 01                         SME_georC_12:	dc.b 1	
00010B37 F40A 0004 F4               		dc.b $F4, $A, 0, 4, $F4	
00010B3C 01                         SME_georC_18:	dc.b 1	
00010B3D F40A 000D F4               		dc.b $F4, $A, 0, $D, $F4	
00010B42 01                         SME_georC_1E:	dc.b 1	
00010B43 F40A 0016 F4               		dc.b $F4, $A, 0, $16, $F4	
00010B48 01                         SME_georC_24:	dc.b 1	
00010B49 F30A 001F F4               		dc.b $F3, $A, 0, $1F, $F4	
00010B4E 01                         SME_georC_2A:	dc.b 1	
00010B4F F609 0028 F4               		dc.b $F6, 9, 0, $28, $F4	
00010B54                            		even
00010B54                            		even
00010B54                            ; ===========================================================================
00010B54                            ; ---------------------------------------------------------------------------
00010B54                            ; Object 28 - animals
00010B54                            ; ---------------------------------------------------------------------------
00010B54                            
00010B54                            Obj28:					; XREF: Obj_Index
00010B54 7000                       		moveq	#0,d0
00010B56 1028 0024                  		move.b	$24(a0),d0
00010B5A 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00010B5E 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00010B62                            ; ===========================================================================
00010B62 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00010B66 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00010B6A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00010B6E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00010B72 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00010B76 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00010B7A 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00010B7E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00010B82 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00010B86 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00010B8A 0000                       		dc.w loc_92D6-Obj28_Index
00010B8C                            
00010B8C 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00010B98                            
00010B98 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00010B9C 0000 0000                  		dc.l Map_obj28
00010BA0 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00010BA4 0000 0000                  		dc.l Map_obj28a		; mappings address
00010BA8 FE80 FD00                  		dc.w $FE80, $FD00
00010BAC 0000 0000                  		dc.l Map_obj28
00010BB0 FEC0 FE80                  		dc.w $FEC0, $FE80
00010BB4 0000 0000                  		dc.l Map_obj28a
00010BB8 FE40 FD00                  		dc.w $FE40, $FD00
00010BBC 0000 0000                  		dc.l Map_obj28b
00010BC0 FD00 FC00                  		dc.w $FD00, $FC00
00010BC4 0000 0000                  		dc.l Map_obj28a
00010BC8 FD80 FC80                  		dc.w $FD80, $FC80
00010BCC 0000 0000                  		dc.l Map_obj28b
00010BD0                            
00010BD0 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00010BE0 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00010BF0 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00010BFC                            
00010BFC 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00010C10 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00010C24 0000 0000                  		dc.l Map_obj28b
00010C28                            
00010C28 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00010C3A 0565 05B3                  		dc.w $565, $5B3
00010C3E                            ; ===========================================================================
00010C3E                            
00010C3E                            Obj28_Ending:				; XREF: Obj28_Index
00010C3E 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00010C42 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00010C46 7000                       		moveq	#0,d0
00010C48 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00010C4C D040                       		add.w	d0,d0		; multiply d0 by 2
00010C4E 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00010C52 0440 0014                  		subi.w	#$14,d0
00010C56 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00010C5C D040                       		add.w	d0,d0
00010C5E 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00010C64 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00010C68 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00010C6E 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00010C74 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00010C7A 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00010C80 117C 000C 0016             		move.b	#$C,$16(a0)
00010C86 117C 0004 0001             		move.b	#4,1(a0)
00010C8C 08E8 0000 0001             		bset	#0,1(a0)
00010C92 317C 0300 0018             		move.w	#$300,priority(a0)
00010C98 117C 0008 0023             		move.b	#8,width_pixels(a0)
00010C9E 117C 0007 001E             		move.b	#7,$1E(a0)
00010CA4 6000 0000                  		bra.w	DisplaySprite
00010CA8                            ; ===========================================================================
00010CA8                            
00010CA8                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00010CA8 5428 0024                  		addq.b	#2,$24(a0)
00010CAC 4EBA 80D0                  		jsr	RandomNumber
00010CB0 0240 0001                  		andi.w	#1,d0
00010CB4 7200                       		moveq	#0,d1
00010CB6 1238 FE10                  		move.b	($FFFFFE10).w,d1
00010CBA D241                       		add.w	d1,d1
00010CBC D240                       		add.w	d0,d1
00010CBE 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00010CC2 1031 1000                  		move.b	(a1,d1.w),d0
00010CC6 1140 0030                  		move.b	d0,$30(a0)
00010CCA E748                       		lsl.w	#3,d0
00010CCC 43FA FECA                  		lea	Obj28_Variables(pc),a1
00010CD0 D2C0                       		adda.w	d0,a1
00010CD2 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00010CD6 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00010CDA 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00010CDE 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00010CE4 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00010CEA 6700                       		beq.s	loc_90C0	; if yes, branch
00010CEC 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00010CF2                            
00010CF2                            loc_90C0:
00010CF2 117C 000C 0016             		move.b	#$C,$16(a0)
00010CF8 117C 0004 0001             		move.b	#4,1(a0)
00010CFE 08E8 0000 0001             		bset	#0,1(a0)
00010D04 317C 0300 0018             		move.w	#$300,priority(a0)
00010D0A 117C 0008 0023             		move.b	#8,width_pixels(a0)
00010D10 117C 0007 001E             		move.b	#7,$1E(a0)
00010D16 117C 0002 001A             		move.b	#2,$1A(a0)
00010D1C 317C FC00 0012             		move.w	#-$400,$12(a0)
00010D22 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00010D26 6600                       		bne.s	loc_911C
00010D28 6100 0000                  		bsr.w	SingleObjLoad
00010D2C 6600                       		bne.s	Obj28_Display
00010D2E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010D32 3368 0008 0008             		move.w	8(a0),8(a1)
00010D38 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010D3E 3028 003E                  		move.w	$3E(a0),d0
00010D42 E248                       		lsr.w	#1,d0
00010D44 1340 001A                  		move.b	d0,$1A(a1)
00010D48                            
00010D48                            Obj28_Display:
00010D48 6000 0000                  		bra.w	DisplaySprite
00010D4C                            ; ===========================================================================
00010D4C                            
00010D4C                            loc_911C:
00010D4C 117C 0012 0024             		move.b	#$12,$24(a0)
00010D52 4268 0010                  		clr.w	$10(a0)
00010D56 6000 0000                  		bra.w	DisplaySprite
00010D5A                            ; ===========================================================================
00010D5A                            
00010D5A                            loc_912A:				; XREF: Obj28_Index
00010D5A 4A28 0001                  		tst.b	1(a0)
00010D5E 6A00 0000                  		bpl.w	DeleteObject
00010D62 6100 0000                  		bsr.w	ObjectFall
00010D66 4A68 0012                  		tst.w	$12(a0)
00010D6A 6B00                       		bmi.s	loc_9180
00010D6C 4EB9 0000 0000             		jsr	ObjHitFloor
00010D72 4A41                       		tst.w	d1
00010D74 6A00                       		bpl.s	loc_9180
00010D76 D368 000C                  		add.w	d1,$C(a0)
00010D7A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00010D80 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010D86 117C 0001 001A             		move.b	#1,$1A(a0)
00010D8C 1028 0030                  		move.b	$30(a0),d0
00010D90 D000                       		add.b	d0,d0
00010D92 5800                       		addq.b	#4,d0
00010D94 1140 0024                  		move.b	d0,$24(a0)
00010D98 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00010D9C 6700                       		beq.s	loc_9180
00010D9E 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00010DA4 6700                       		beq.s	loc_9180
00010DA6 4468 0010                  		neg.w	$10(a0)
00010DAA 0868 0000 0001             		bchg	#0,1(a0)
00010DB0                            
00010DB0                            loc_9180:
00010DB0 6000 0000                  		bra.w	DisplaySprite
00010DB4                            ; ===========================================================================
00010DB4                            
00010DB4                            loc_9184:				; XREF: Obj28_Index
00010DB4 6100 0000                  		bsr.w	ObjectFall
00010DB8 117C 0001 001A             		move.b	#1,$1A(a0)
00010DBE 4A68 0012                  		tst.w	$12(a0)
00010DC2 6B00                       		bmi.s	loc_91AE
00010DC4 117C 0000 001A             		move.b	#0,$1A(a0)
00010DCA 4EB9 0000 0000             		jsr	ObjHitFloor
00010DD0 4A41                       		tst.w	d1
00010DD2 6A00                       		bpl.s	loc_91AE
00010DD4 D368 000C                  		add.w	d1,$C(a0)
00010DD8 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010DDE                            
00010DDE                            loc_91AE:
00010DDE 4A28 0028                  		tst.b	$28(a0)
00010DE2 6600                       		bne.s	loc_9224
00010DE4 4A28 0001                  		tst.b	1(a0)
00010DE8 6A00 0000                  		bpl.w	DeleteObject
00010DEC 6000 0000                  		bra.w	DisplaySprite
00010DF0                            ; ===========================================================================
00010DF0                            
00010DF0                            loc_91C0:				; XREF: Obj28_Index
00010DF0 6100 0000                  		bsr.w	SpeedToPos
00010DF4 0668 0018 0012             		addi.w	#$18,$12(a0)
00010DFA 4A68 0012                  		tst.w	$12(a0)
00010DFE 6B00                       		bmi.s	loc_91FC
00010E00 4EB9 0000 0000             		jsr	ObjHitFloor
00010E06 4A41                       		tst.w	d1
00010E08 6A00                       		bpl.s	loc_91FC
00010E0A D368 000C                  		add.w	d1,$C(a0)
00010E0E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010E14 4A28 0028                  		tst.b	$28(a0)
00010E18 6700                       		beq.s	loc_91FC
00010E1A 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00010E20 6700                       		beq.s	loc_91FC
00010E22 4468 0010                  		neg.w	$10(a0)
00010E26 0868 0000 0001             		bchg	#0,1(a0)
00010E2C                            
00010E2C                            loc_91FC:
00010E2C 5328 001E                  		subq.b	#1,$1E(a0)
00010E30 6A00                       		bpl.s	loc_9212
00010E32 117C 0001 001E             		move.b	#1,$1E(a0)
00010E38 5228 001A                  		addq.b	#1,$1A(a0)
00010E3C 0228 0001 001A             		andi.b	#1,$1A(a0)
00010E42                            
00010E42                            loc_9212:
00010E42 4A28 0028                  		tst.b	$28(a0)
00010E46 6600                       		bne.s	loc_9224
00010E48 4A28 0001                  		tst.b	1(a0)
00010E4C 6A00 0000                  		bpl.w	DeleteObject
00010E50 6000 0000                  		bra.w	DisplaySprite
00010E54                            ; ===========================================================================
00010E54                            
00010E54                            loc_9224:				; XREF: Obj28_Index
00010E54 3028 0008                  		move.w	8(a0),d0
00010E58 9078 D008                  		sub.w	($FFFFD008).w,d0
00010E5C 6500                       		bcs.s	loc_923C
00010E5E 0440 0180                  		subi.w	#$180,d0
00010E62 6A00                       		bpl.s	loc_923C
00010E64 4A28 0001                  		tst.b	1(a0)
00010E68 6A00 0000                  		bpl.w	DeleteObject
00010E6C                            
00010E6C                            loc_923C:
00010E6C 6000 0000                  		bra.w	DisplaySprite
00010E70                            ; ===========================================================================
00010E70                            
00010E70                            loc_9240:				; XREF: Obj28_Index
00010E70 4A28 0001                  		tst.b	1(a0)
00010E74 6A00 0000                  		bpl.w	DeleteObject
00010E78 5368 0036                  		subq.w	#1,$36(a0)
00010E7C 6600 0000                  		bne.w	loc_925C
00010E80 117C 0002 0024             		move.b	#2,$24(a0)
00010E86 317C 0180 0018             		move.w	#$180,priority(a0)
00010E8C                            
00010E8C                            loc_925C:
00010E8C 6000 0000                  		bra.w	DisplaySprite
00010E90                            ; ===========================================================================
00010E90                            
00010E90                            loc_9260:				; XREF: Obj28_Index
00010E90 6100 0000                  		bsr.w	sub_9404
00010E94 6400                       		bcc.s	loc_927C
00010E96 3168 0032 0010             		move.w	$32(a0),$10(a0)
00010E9C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010EA2 117C 000E 0024             		move.b	#$E,$24(a0)
00010EA8 6000 FF46                  		bra.w	loc_91C0
00010EAC                            ; ===========================================================================
00010EAC                            
00010EAC                            loc_927C:
00010EAC 6000 FFA6                  		bra.w	loc_9224
00010EB0                            ; ===========================================================================
00010EB0                            
00010EB0                            loc_9280:				; XREF: Obj28_Index
00010EB0 6100 0000                  		bsr.w	sub_9404
00010EB4 6A00                       		bpl.s	loc_92B6
00010EB6 4268 0010                  		clr.w	$10(a0)
00010EBA 4268 0032                  		clr.w	$32(a0)
00010EBE 6100 0000                  		bsr.w	SpeedToPos
00010EC2 0668 0018 0012             		addi.w	#$18,$12(a0)
00010EC8 6100 0000                  		bsr.w	loc_93C4
00010ECC 6100 0000                  		bsr.w	loc_93EC
00010ED0 5328 001E                  		subq.b	#1,$1E(a0)
00010ED4 6A00                       		bpl.s	loc_92B6
00010ED6 117C 0001 001E             		move.b	#1,$1E(a0)
00010EDC 5228 001A                  		addq.b	#1,$1A(a0)
00010EE0 0228 0001 001A             		andi.b	#1,$1A(a0)
00010EE6                            
00010EE6                            loc_92B6:
00010EE6 6000 FF6C                  		bra.w	loc_9224
00010EEA                            ; ===========================================================================
00010EEA                            
00010EEA                            loc_92BA:				; XREF: Obj28_Index
00010EEA 6100 0000                  		bsr.w	sub_9404
00010EEE 6A00                       		bpl.s	loc_9310
00010EF0 3168 0032 0010             		move.w	$32(a0),$10(a0)
00010EF6 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010EFC 117C 0004 0024             		move.b	#4,$24(a0)
00010F02 6000 FEB0                  		bra.w	loc_9184
00010F06                            ; ===========================================================================
00010F06                            
00010F06                            loc_92D6:				; XREF: Obj28_Index
00010F06 6100 0000                  		bsr.w	ObjectFall
00010F0A 117C 0001 001A             		move.b	#1,$1A(a0)
00010F10 4A68 0012                  		tst.w	$12(a0)
00010F14 6B00                       		bmi.s	loc_9310
00010F16 117C 0000 001A             		move.b	#0,$1A(a0)
00010F1C 4EB9 0000 0000             		jsr	ObjHitFloor
00010F22 4A41                       		tst.w	d1
00010F24 6A00                       		bpl.s	loc_9310
00010F26 4628 0029                  		not.b	$29(a0)
00010F2A 6600                       		bne.s	loc_9306
00010F2C 4468 0010                  		neg.w	$10(a0)
00010F30 0868 0000 0001             		bchg	#0,1(a0)
00010F36                            
00010F36                            loc_9306:
00010F36 D368 000C                  		add.w	d1,$C(a0)
00010F3A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010F40                            
00010F40                            loc_9310:
00010F40 6000 FF12                  		bra.w	loc_9224
00010F44                            ; ===========================================================================
00010F44                            
00010F44                            loc_9314:				; XREF: Obj28_Index
00010F44 6100 0000                  		bsr.w	sub_9404
00010F48 6A00                       		bpl.s	loc_932E
00010F4A 4268 0010                  		clr.w	$10(a0)
00010F4E 4268 0032                  		clr.w	$32(a0)
00010F52 6100 0000                  		bsr.w	ObjectFall
00010F56 6100 0000                  		bsr.w	loc_93C4
00010F5A 6100 0000                  		bsr.w	loc_93EC
00010F5E                            
00010F5E                            loc_932E:
00010F5E 6000 FEF4                  		bra.w	loc_9224
00010F62                            ; ===========================================================================
00010F62                            
00010F62                            loc_9332:				; XREF: Obj28_Index
00010F62 6100 0000                  		bsr.w	sub_9404
00010F66 6A00                       		bpl.s	loc_936C
00010F68 6100 0000                  		bsr.w	ObjectFall
00010F6C 117C 0001 001A             		move.b	#1,$1A(a0)
00010F72 4A68 0012                  		tst.w	$12(a0)
00010F76 6B00                       		bmi.s	loc_936C
00010F78 117C 0000 001A             		move.b	#0,$1A(a0)
00010F7E 4EB9 0000 0000             		jsr	ObjHitFloor
00010F84 4A41                       		tst.w	d1
00010F86 6A00                       		bpl.s	loc_936C
00010F88 4468 0010                  		neg.w	$10(a0)
00010F8C 0868 0000 0001             		bchg	#0,1(a0)
00010F92 D368 000C                  		add.w	d1,$C(a0)
00010F96 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010F9C                            
00010F9C                            loc_936C:
00010F9C 6000 FEB6                  		bra.w	loc_9224
00010FA0                            ; ===========================================================================
00010FA0                            
00010FA0                            loc_9370:				; XREF: Obj28_Index
00010FA0 6100 0000                  		bsr.w	sub_9404
00010FA4 6A00                       		bpl.s	loc_93C0
00010FA6 6100 0000                  		bsr.w	SpeedToPos
00010FAA 0668 0018 0012             		addi.w	#$18,$12(a0)
00010FB0 4A68 0012                  		tst.w	$12(a0)
00010FB4 6B00                       		bmi.s	loc_93AA
00010FB6 4EB9 0000 0000             		jsr	ObjHitFloor
00010FBC 4A41                       		tst.w	d1
00010FBE 6A00                       		bpl.s	loc_93AA
00010FC0 4628 0029                  		not.b	$29(a0)
00010FC4 6600                       		bne.s	loc_93A0
00010FC6 4468 0010                  		neg.w	$10(a0)
00010FCA 0868 0000 0001             		bchg	#0,1(a0)
00010FD0                            
00010FD0                            loc_93A0:
00010FD0 D368 000C                  		add.w	d1,$C(a0)
00010FD4 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010FDA                            
00010FDA                            loc_93AA:
00010FDA 5328 001E                  		subq.b	#1,$1E(a0)
00010FDE 6A00                       		bpl.s	loc_93C0
00010FE0 117C 0001 001E             		move.b	#1,$1E(a0)
00010FE6 5228 001A                  		addq.b	#1,$1A(a0)
00010FEA 0228 0001 001A             		andi.b	#1,$1A(a0)
00010FF0                            
00010FF0                            loc_93C0:
00010FF0 6000 FE62                  		bra.w	loc_9224
00010FF4                            ; ===========================================================================
00010FF4                            
00010FF4                            loc_93C4:
00010FF4 117C 0001 001A             		move.b	#1,$1A(a0)
00010FFA 4A68 0012                  		tst.w	$12(a0)
00010FFE 6B00                       		bmi.s	locret_93EA
00011000 117C 0000 001A             		move.b	#0,$1A(a0)
00011006 4EB9 0000 0000             		jsr	ObjHitFloor
0001100C 4A41                       		tst.w	d1
0001100E 6A00                       		bpl.s	locret_93EA
00011010 D368 000C                  		add.w	d1,$C(a0)
00011014 3168 0034 0012             		move.w	$34(a0),$12(a0)
0001101A                            
0001101A                            locret_93EA:
0001101A 4E75                       		rts	
0001101C                            ; ===========================================================================
0001101C                            
0001101C                            loc_93EC:
0001101C 08E8 0000 0001             		bset	#0,1(a0)
00011022 3028 0008                  		move.w	8(a0),d0
00011026 9078 D008                  		sub.w	($FFFFD008).w,d0
0001102A 6400                       		bcc.s	locret_9402
0001102C 08A8 0000 0001             		bclr	#0,1(a0)
00011032                            
00011032                            locret_9402:
00011032 4E75                       		rts	
00011034                            
00011034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011034                            
00011034                            
00011034                            sub_9404:
00011034 3038 D008                  		move.w	($FFFFD008).w,d0
00011038 9068 0008                  		sub.w	8(a0),d0
0001103C 0440 00B8                  		subi.w	#$B8,d0
00011040 4E75                       		rts	
00011042                            ; End of function sub_9404
00011042                            
00011042                            ; ===========================================================================
00011042                            ; ---------------------------------------------------------------------------
00011042                            ; Object 29 - points that appear when you destroy something
00011042                            ; ---------------------------------------------------------------------------
00011042                            
00011042                            Obj29:					; XREF: Obj_Index
00011042 223C 0000 0000             		move.l	#Unc_Points,d1			        ; Call for Regular Shield Art
00011048 343C ABC0                  		move.w	#$ABC0,d2			        ; Load Art from this location (VRAM location*20)
0001104C 4A38 FE2D                  		tst.b	($FFFFFE2D).w
00011050 6700 0000                  		beq.w	nextloc
00011054 343C A820                  		move.w	#$A820,d2			        ; Load Art from this location (VRAM location*20)
00011058                            								; In this case, VRAM = $541*20
00011058                            nextloc:
00011058 363C 0090                  		move.w	#$90,d3
0001105C 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
00011062 7000                       		moveq	#0,d0
00011064 1028 0024                  		move.b	$24(a0),d0
00011068 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0001106C 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00011070 6000 0000                  		bra.w	DisplaySprite
00011074                            ; ===========================================================================
00011074 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00011076 0000                       		dc.w Obj29_Slower-Obj29_Index
00011078                            ; ===========================================================================
00011078                            
00011078                            Obj29_Main:				; XREF: Obj29_Index
00011078 5428 0024                  		addq.b	#2,$24(a0)
0001107C 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00011084 317C 255E 0002             		move.w	#$255E,2(a0)
0001108A 4A38 FE2D                  		tst.b	($FFFFFE2D).w
0001108E 6700 0000                  		beq.w	nextloc2
00011092 317C 2541 0002             		move.w	#$2541,2(a0)
00011098                            nextloc2:
00011098 117C 0004 0001             		move.b	#4,1(a0)
0001109E 317C 0080 0018             		move.w	#$80,priority(a0)
000110A4 117C 0008 0023             		move.b	#8,width_pixels(a0)
000110AA 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
000110B0                            
000110B0                            Obj29_Slower:				; XREF: Obj29_Index
000110B0 4A68 0012                  		tst.w	$12(a0)		; is object moving?
000110B4 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
000110B8 6100 0000                  		bsr.w	SpeedToPos
000110BC 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
000110C2 4E75                       		rts	
000110C4                            ; ===========================================================================
000110C4                            ; ---------------------------------------------------------------------------
000110C4                            ; Sprite mappings - animals
000110C4                            ; ---------------------------------------------------------------------------
000110C4                            Map_obj28:
000110C4                            	include '_maps\obj28.asm'
000110C4                            ; ---------------------------------------------------------------------------
000110C4                            ; Sprite mappings - animals
000110C4                            ; ---------------------------------------------------------------------------
000110C4 0000                       		dc.w byte_9472-Map_obj28
000110C6 0000                       		dc.w byte_9478-Map_obj28
000110C8 0000                       		dc.w byte_946C-Map_obj28
000110CA 01                         byte_946C:	dc.b 1
000110CB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000110D0 01                         byte_9472:	dc.b 1
000110D1 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
000110D6 01                         byte_9478:	dc.b 1
000110D7 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
000110DC                            		even
000110DC                            		even
000110DC                            
000110DC                            Map_obj28a:
000110DC                            	include '_maps\obj28a.asm'
000110DC                            ; ---------------------------------------------------------------------------
000110DC                            ; Sprite mappings - animals
000110DC                            ; ---------------------------------------------------------------------------
000110DC 0000                       		dc.w byte_948A-Map_obj28a
000110DE 0000                       		dc.w byte_9490-Map_obj28a
000110E0 0000                       		dc.w byte_9484-Map_obj28a
000110E2 01                         byte_9484:	dc.b 1
000110E3 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000110E8 01                         byte_948A:	dc.b 1
000110E9 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
000110EE 01                         byte_9490:	dc.b 1
000110EF FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
000110F4                            		even
000110F4                            		even
000110F4                            
000110F4                            Map_obj28b:
000110F4                            	include '_maps\obj28b.asm'
000110F4                            ; ---------------------------------------------------------------------------
000110F4                            ; Sprite mappings - animals
000110F4                            ; ---------------------------------------------------------------------------
000110F4 0000                       		dc.w byte_94A2-Map_obj28b
000110F6 0000                       		dc.w byte_94A8-Map_obj28b
000110F8 0000                       		dc.w byte_949C-Map_obj28b
000110FA 01                         byte_949C:	dc.b 1
000110FB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011100 01                         byte_94A2:	dc.b 1
00011101 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00011106 01                         byte_94A8:	dc.b 1
00011107 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0001110C                            		even
0001110C                            		even
0001110C                            
0001110C                            ; ---------------------------------------------------------------------------
0001110C                            ; Sprite mappings - points that	appear when you	destroy	something
0001110C                            ; ---------------------------------------------------------------------------
0001110C                            Map_obj29:
0001110C                            	include '_maps\obj29.asm'
0001110C                            ; ---------------------------------------------------------------------------
0001110C                            ; Sprite mappings - points that	appear when you	destroy	something
0001110C                            ; ---------------------------------------------------------------------------
0001110C 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00011110 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00011114 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00011118 0000                       		dc.w byte_94E5-Map_obj29
0001111A 01                         byte_94BC:	dc.b 1
0001111B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00011120 01                         byte_94C2:	dc.b 1
00011121 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00011126 01                         byte_94C8:	dc.b 1
00011127 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0001112C 01                         byte_94CE:	dc.b 1
0001112D FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00011132 01                         byte_94D4:	dc.b 1
00011133 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00011138 02                         byte_94DA:	dc.b 2
00011139 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0001113E FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00011143 02                         byte_94E5:	dc.b 2
00011144 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00011149 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0001114E                            		even
0001114E                            		even
0001114E                            
0001114E                            ; ===========================================================================
0001114E                            ; ---------------------------------------------------------------------------
0001114E                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0001114E                            ; ---------------------------------------------------------------------------
0001114E                            
0001114E                            Obj1F:					; XREF: Obj_Index
0001114E 7000                       		moveq	#0,d0
00011150 1028 0024                  		move.b	routine(a0),d0
00011154 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00011158 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0001115C                            ; ===========================================================================
0001115C 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0001115E 0000                       		dc.w Obj1F_Action-Obj1F_Index
00011160 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00011162 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00011164 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00011166                            ; ===========================================================================
00011166                            
00011166                            Obj1F_Main:				; XREF: Obj1F_Index
00011166 117C 0010 0016             		move.b	#$10,$16(a0)
0001116C 117C 0008 0017             		move.b	#8,$17(a0)
00011172 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0001117A 317C 0400 0002             		move.w	#$400,2(a0)
00011180 117C 0004 0001             		move.b	#4,1(a0)
00011186 317C 0180 0018             		move.w	#$180,priority(a0)
0001118C 117C 0006 0020             		move.b	#6,collision_flags(a0)
00011192 117C 0015 0023             		move.b	#$15,width_pixels(a0)
00011198 4EB9 0000 0000             		jsr	ObjectFall
0001119E 4EB9 0000 0000             		jsr	ObjHitFloor
000111A4 4A41                       		tst.w	d1
000111A6 6A00                       		bpl.s	locret_955A
000111A8 D368 000C                  		add.w	d1,$C(a0)
000111AC 1143 0026                  		move.b	d3,$26(a0)
000111B0 317C 0000 0012             		move.w	#0,y_vel(a0)
000111B6 5428 0024                  		addq.b	#2,routine(a0)
000111BA                            
000111BA                            locret_955A:
000111BA 4E75                       		rts	
000111BC                            ; ===========================================================================
000111BC                            
000111BC                            Obj1F_Action:				; XREF: Obj1F_Index
000111BC 7000                       		moveq	#0,d0
000111BE 1028 0025                  		move.b	routine_secondary(a0),d0
000111C2 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
000111C6 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
000111CA 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000111D0 4EB9 0000 0000             		jsr	AnimateSprite
000111D6 6000 0000                  		bra.w	MarkObjGone
000111DA                            ; ===========================================================================
000111DA 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
000111DC 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
000111DE                            ; ===========================================================================
000111DE                            
000111DE                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
000111DE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000111E2 6A00                       		bpl.s	locret_95B6
000111E4 4A28 0001                  		tst.b	1(a0)
000111E8 6A00                       		bpl.s	Obj1F_Move
000111EA 0868 0001 0032             		bchg	#1,$32(a0)
000111F0 6600                       		bne.s	Obj1F_MakeFire
000111F2                            
000111F2                            Obj1F_Move:
000111F2 5428 0025                  		addq.b	#2,routine_secondary(a0)
000111F6 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
000111FC 317C 0080 0010             		move.w	#$80,x_vel(a0)	; move Crabmeat	to the right
00011202 4EB9 0000 0000             		jsr	Obj1F_SetAni
00011208 5600                       		addq.b	#3,d0
0001120A 1140 001C                  		move.b	d0,anim(a0)
0001120E 0868 0000 0022             		bchg	#0,status(a0)
00011214 6600                       		bne.s	locret_95B6
00011216 4468 0010                  		neg.w	x_vel(a0)		; change direction
0001121A                            
0001121A                            locret_95B6:
0001121A 4E75                       		rts	
0001121C                            ; ===========================================================================
0001121C                            
0001121C                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0001121C 317C 003B 0030             		move.w	#$3B,$30(a0)
00011222 117C 0006 001C             		move.b	#6,anim(a0)	; use firing animation
00011228 4EB9 0000 0000             		jsr	SingleObjLoad
0001122E 6600                       		bne.s	Obj1F_MakeFire2
00011230 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00011234 137C 0006 0024             		move.b	#6,routine(a1)
0001123A 3368 0008 0008             		move.w	8(a0),8(a1)
00011240 0469 0010 0008             		subi.w	#$10,8(a1)
00011246 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001124C 337C FF00 0010             		move.w	#-$100,x_vel(a1)
00011252                            
00011252                            Obj1F_MakeFire2:
00011252 4EB9 0000 0000             		jsr	SingleObjLoad
00011258 6600                       		bne.s	locret_9618
0001125A 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0001125E 137C 0006 0024             		move.b	#6,routine(a1)
00011264 3368 0008 0008             		move.w	8(a0),8(a1)
0001126A 0669 0010 0008             		addi.w	#$10,8(a1)
00011270 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011276 337C 0100 0010             		move.w	#$100,x_vel(a1)
0001127C                            
0001127C                            locret_9618:
0001127C 4E75                       		rts	
0001127E                            ; ===========================================================================
0001127E                            
0001127E                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0001127E 5368 0030                  		subq.w	#1,$30(a0)
00011282 6B00                       		bmi.s	loc_966E
00011284 4EB9 0000 0000             		jsr	SpeedToPos
0001128A 0868 0000 0032             		bchg	#0,$32(a0)
00011290 6600                       		bne.s	loc_9654
00011292 3628 0008                  		move.w	8(a0),d3
00011296 0643 0010                  		addi.w	#$10,d3
0001129A 0828 0000 0022             		btst	#0,status(a0)
000112A0 6700                       		beq.s	loc_9640
000112A2 0443 0020                  		subi.w	#$20,d3
000112A6                            
000112A6                            loc_9640:
000112A6 4EB9 0000 0000             		jsr	ObjHitFloor2
000112AC 0C41 FFF8                  		cmpi.w	#-8,d1
000112B0 6D00                       		blt.s	loc_966E
000112B2 0C41 000C                  		cmpi.w	#$C,d1
000112B6 6C00                       		bge.s	loc_966E
000112B8 4E75                       		rts	
000112BA                            ; ===========================================================================
000112BA                            
000112BA                            loc_9654:				; XREF: Obj1F_WalkOnFloor
000112BA 4EB9 0000 0000             		jsr	ObjHitFloor
000112C0 D368 000C                  		add.w	d1,$C(a0)
000112C4 1143 0026                  		move.b	d3,$26(a0)
000112C8 4EB9 0000 0000             		jsr	Obj1F_SetAni
000112CE 5600                       		addq.b	#3,d0
000112D0 1140 001C                  		move.b	d0,anim(a0)
000112D4 4E75                       		rts	
000112D6                            ; ===========================================================================
000112D6                            
000112D6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
000112D6 5528 0025                  		subq.b	#2,routine_secondary(a0)
000112DA 317C 003B 0030             		move.w	#59,$30(a0)
000112E0 317C 0000 0010             		move.w	#0,x_vel(a0)
000112E6 4EB9 0000 0000             		jsr	Obj1F_SetAni
000112EC 1140 001C                  		move.b	d0,anim(a0)
000112F0 4E75                       		rts	
000112F2                            ; ---------------------------------------------------------------------------
000112F2                            ; Subroutine to	set the	correct	animation for a	Crabmeat
000112F2                            ; ---------------------------------------------------------------------------
000112F2                            
000112F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000112F2                            
000112F2                            
000112F2                            Obj1F_SetAni:				; XREF: loc_966E
000112F2 7000                       		moveq	#0,d0
000112F4 1628 0026                  		move.b	$26(a0),d3
000112F8 6B00                       		bmi.s	loc_96A4
000112FA 0C03 0006                  		cmpi.b	#6,d3
000112FE 6500                       		bcs.s	locret_96A2
00011300 7001                       		moveq	#1,d0
00011302 0828 0000 0022             		btst	#0,status(a0)
00011308 6600                       		bne.s	locret_96A2
0001130A 7002                       		moveq	#2,d0
0001130C                            
0001130C                            locret_96A2:
0001130C 4E75                       		rts	
0001130E                            ; ===========================================================================
0001130E                            
0001130E                            loc_96A4:				; XREF: Obj1F_SetAni
0001130E 0C03 00FA                  		cmpi.b	#-6,d3
00011312 6200                       		bhi.s	locret_96B6
00011314 7002                       		moveq	#2,d0
00011316 0828 0000 0022             		btst	#0,status(a0)
0001131C 6600                       		bne.s	locret_96B6
0001131E 7001                       		moveq	#1,d0
00011320                            
00011320                            locret_96B6:
00011320 4E75                       		rts	
00011322                            ; End of function Obj1F_SetAni
00011322                            
00011322                            ; ===========================================================================
00011322                            
00011322                            Obj1F_Delete:				; XREF: Obj1F_Index
00011322 4EB9 0000 0000             		jsr	DeleteObject
00011328 4E75                       		rts	
0001132A                            ; ===========================================================================
0001132A                            ; ---------------------------------------------------------------------------
0001132A                            ; Sub-object - missile that the	Crabmeat throws
0001132A                            ; ---------------------------------------------------------------------------
0001132A                            
0001132A                            Obj1F_BallMain:				; XREF: Obj1F_Index
0001132A 5428 0024                  		addq.b	#2,routine(a0)
0001132E 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00011336 317C 0400 0002             		move.w	#$400,2(a0)
0001133C 117C 0004 0001             		move.b	#4,1(a0)
00011342 317C 0180 0018             		move.w	#$180,priority(a0)
00011348 117C 0087 0020             		move.b	#$87,collision_flags(a0)
0001134E 117C 0008 0023             		move.b	#8,width_pixels(a0)
00011354 317C FC00 0012             		move.w	#-$400,y_vel(a0)
0001135A 117C 0007 001C             		move.b	#7,anim(a0)
00011360                            
00011360                            Obj1F_BallMove:				; XREF: Obj1F_Index
00011360 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00011366 4EB9 0000 0000             		jsr	AnimateSprite
0001136C 4EB9 0000 0000             		jsr	ObjectFall
00011372 4EB9 0000 0000             		jsr	DisplaySprite
00011378 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001137C 0640 00E0                  		addi.w	#$E0,d0
00011380 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00011384 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00011386 4E75                       		rts	
00011388                            ; ===========================================================================
00011388                            
00011388                            Obj1F_Delete2:
00011388 6000 0000                  		bra.w	DeleteObject
0001138C                            ; ===========================================================================
0001138C                            Ani_obj1F:
0001138C                            	include "_anim\obj1F.asm"
0001138C                            ; ---------------------------------------------------------------------------
0001138C                            ; Animation script - Crabmeat enemy
0001138C                            ; ---------------------------------------------------------------------------
0001138C 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00011392 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00011398 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0001139C 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
000113A0 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
000113A4 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
000113A8 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
000113AE 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
000113B4 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
000113BA 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
000113BE 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
000113C2                            		even
000113C2                            		even
000113C2                            
000113C2                            ; ---------------------------------------------------------------------------
000113C2                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
000113C2                            ; ---------------------------------------------------------------------------
000113C2                            Map_obj1F:
000113C2                            	include "_maps\obj1F.asm"
000113C2                            ; ---------------------------------------------------------------------------
000113C2                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
000113C2                            ; ---------------------------------------------------------------------------
000113C2 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
000113C6 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
000113CA 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
000113CE 0000                       		dc.w byte_97D7-Map_obj1F
000113D0 04                         byte_975E:	dc.b 4
000113D1 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
000113D6 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
000113DB 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
000113E0 0005 0806 00               		dc.b 0,	5, 8, 6, 0
000113E5 04                         byte_9773:	dc.b 4
000113E6 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
000113EB F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
000113F0 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
000113F5 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
000113FA 04                         byte_9788:	dc.b 4
000113FB EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
00011400 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
00011405 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0001140A FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0001140F 04                         byte_979D:	dc.b 4
00011410 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
00011415 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0001141A FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0001141F FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
00011424 06                         byte_97B2:	dc.b 6
00011425 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0001142A F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0001142F F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
00011434 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
00011439 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0001143E 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
00011443 01                         byte_97D1:	dc.b 1
00011444 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
00011449 01                         byte_97D7:	dc.b 1
0001144A F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
00011450 00                         		even
00011450 00                         		even
00011450                            
00011450                            ; ===========================================================================
00011450                            ; ---------------------------------------------------------------------------
00011450                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00011450                            ; ---------------------------------------------------------------------------
00011450                            
00011450                            Obj22:					; XREF: Obj_Index
00011450 7000                       		moveq	#0,d0
00011452 1028 0024                  		move.b	routine(a0),d0
00011456 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0001145A 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0001145E                            ; ===========================================================================
0001145E 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00011460 0000                       		dc.w Obj22_Action-Obj22_Index
00011462 0000                       		dc.w Obj22_Delete-Obj22_Index
00011464                            ; ===========================================================================
00011464                            
00011464                            Obj22_Main:				; XREF: Obj22_Index
00011464 5428 0024                  		addq.b	#2,routine(a0)
00011468 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00011470 317C 0444 0002             		move.w	#$444,2(a0)
00011476 117C 0004 0001             		move.b	#4,1(a0)
0001147C 317C 0180 0018             		move.w	#$180,priority(a0)
00011482 117C 0008 0020             		move.b	#8,collision_flags(a0)
00011488 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001148E                            
0001148E                            Obj22_Action:				; XREF: Obj22_Index
0001148E 7000                       		moveq	#0,d0
00011490 1028 0025                  		move.b	routine_secondary(a0),d0
00011494 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00011498 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0001149C 43F9 0000 0000             		lea	(Ani_obj22).l,a1
000114A2 4EB9 0000 0000             		jsr	AnimateSprite
000114A8 6000 0000                  		bra.w	MarkObjGone
000114AC                            ; ===========================================================================
000114AC 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
000114AE 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
000114B0                            ; ===========================================================================
000114B0                            
000114B0                            Obj22_Move:				; XREF: Obj22_Index2
000114B0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000114B4 6A00                       		bpl.s	locret_986C	; if time remains, branch
000114B6 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
000114BC 6600                       		bne.s	Obj22_Fire	; if yes, branch
000114BE 5428 0025                  		addq.b	#2,routine_secondary(a0)
000114C2 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
000114C8 317C 0400 0010             		move.w	#$400,x_vel(a0)	; move Buzz Bomber to the right
000114CE 117C 0001 001C             		move.b	#1,anim(a0)	; use "flying" animation
000114D4 0828 0000 0022             		btst	#0,status(a0)	; is Buzz Bomber facing	left?
000114DA 6600                       		bne.s	locret_986C	; if not, branch
000114DC 4468 0010                  		neg.w	x_vel(a0)		; move Buzz Bomber to the left
000114E0                            
000114E0                            locret_986C:
000114E0 4E75                       		rts	
000114E2                            ; ===========================================================================
000114E2                            
000114E2                            Obj22_Fire:				; XREF: Obj22_Move
000114E2 4EB9 0000 0000             		jsr	SingleObjLoad
000114E8 6600                       		bne.s	locret_98D0
000114EA 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
000114EE 3368 0008 0008             		move.w	8(a0),8(a1)
000114F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000114FA 0669 001C 000C             		addi.w	#$1C,$C(a1)
00011500 337C 0200 0012             		move.w	#$200,y_vel(a1)	; move missile downwards
00011506 337C 0200 0010             		move.w	#$200,x_vel(a1)	; move missile to the right
0001150C 303C 0018                  		move.w	#$18,d0
00011510 0828 0000 0022             		btst	#0,status(a0)	; is Buzz Bomber facing	left?
00011516 6600                       		bne.s	loc_98AA	; if not, branch
00011518 4440                       		neg.w	d0
0001151A 4469 0010                  		neg.w	x_vel(a1)		; move missile to the left
0001151E                            
0001151E                            loc_98AA:
0001151E D169 0008                  		add.w	d0,8(a1)
00011522 1368 0022 0022             		move.b	status(a0),status(a1)
00011528 337C 000E 0032             		move.w	#$E,$32(a1)
0001152E 2348 003C                  		move.l	a0,$3C(a1)
00011532 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00011538 317C 003B 0032             		move.w	#$3B,$32(a0)
0001153E 117C 0002 001C             		move.b	#2,anim(a0)	; use "firing" animation
00011544                            
00011544                            locret_98D0:
00011544 4E75                       		rts	
00011546                            ; ===========================================================================
00011546                            
00011546                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00011546 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0001154A 6B00                       		bmi.s	Obj22_ChgDir
0001154C 4EB9 0000 0000             		jsr	SpeedToPos
00011552 4A28 0034                  		tst.b	$34(a0)
00011556 6600                       		bne.s	locret_992A
00011558 3038 D008                  		move.w	($FFFFD008).w,d0
0001155C 9068 0008                  		sub.w	8(a0),d0
00011560 6A00                       		bpl.s	Obj22_SetNrSonic
00011562 4440                       		neg.w	d0
00011564                            
00011564                            Obj22_SetNrSonic:
00011564 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00011568 6400                       		bcc.s	locret_992A	; if not, branch
0001156A 4A28 0001                  		tst.b	1(a0)
0001156E 6A00                       		bpl.s	locret_992A
00011570 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00011576 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0001157C 6000                       		bra.s	Obj22_Stop
0001157E                            ; ===========================================================================
0001157E                            
0001157E                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0001157E 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00011584 0868 0000 0022             		bchg	#0,status(a0)	; change direction
0001158A 317C 003B 0032             		move.w	#59,$32(a0)
00011590                            
00011590                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00011590 5528 0025                  		subq.b	#2,routine_secondary(a0)	; run "Obj22_Fire" routine
00011594 317C 0000 0010             		move.w	#0,x_vel(a0)	; stop Buzz Bomber moving
0001159A 117C 0000 001C             		move.b	#0,anim(a0)	; use "hovering" animation
000115A0                            
000115A0                            locret_992A:
000115A0 4E75                       		rts	
000115A2                            ; ===========================================================================
000115A2                            
000115A2                            Obj22_Delete:				; XREF: Obj22_Index
000115A2 4EB9 0000 0000             		jsr	DeleteObject
000115A8 4E75                       		rts	
000115AA                            ; ===========================================================================
000115AA                            ; ---------------------------------------------------------------------------
000115AA                            ; Object 23 - missile that Buzz	Bomber throws
000115AA                            ; ---------------------------------------------------------------------------
000115AA                            
000115AA                            Obj23:					; XREF: Obj_Index
000115AA 7000                       		moveq	#0,d0
000115AC 1028 0024                  		move.b	routine(a0),d0
000115B0 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
000115B4 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
000115B8                            ; ===========================================================================
000115B8 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
000115BA 0000                       		dc.w Obj23_Animate-Obj23_Index
000115BC 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
000115BE 0000                       		dc.w Obj23_Delete-Obj23_Index
000115C0 0000                       		dc.w Obj23_FromNewt-Obj23_Index
000115C2                            ; ===========================================================================
000115C2                            
000115C2                            Obj23_Main:				; XREF: Obj23_Index
000115C2 5368 0032                  		subq.w	#1,$32(a0)
000115C6 6A00                       		bpl.s	Obj23_ChkCancel
000115C8 5428 0024                  		addq.b	#2,routine(a0)
000115CC 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
000115D4 317C 2444 0002             		move.w	#$2444,2(a0)
000115DA 117C 0004 0001             		move.b	#4,1(a0)
000115E0 317C 0180 0018             		move.w	#$180,priority(a0)
000115E6 117C 0008 0023             		move.b	#8,width_pixels(a0)
000115EC 0228 0003 0022             		andi.b	#3,status(a0)
000115F2 4A28 0028                  		tst.b	subtype(a0)		; was object created by	a Newtron?
000115F6 6700                       		beq.s	Obj23_Animate	; if not, branch
000115F8 117C 0008 0024             		move.b	#8,routine(a0)	; run "Obj23_FromNewt" routine
000115FE 117C 0087 0020             		move.b	#$87,collision_flags(a0)
00011604 117C 0001 001C             		move.b	#1,anim(a0)
0001160A 6000                       		bra.s	Obj23_Animate2
0001160C                            ; ===========================================================================
0001160C                            
0001160C                            Obj23_Animate:				; XREF: Obj23_Index
0001160C 6100                       		bsr.s	Obj23_ChkCancel
0001160E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00011614 4EB9 0000 0000             		jsr	AnimateSprite
0001161A 6000 0000                  		bra.w	DisplaySprite
0001161E                            ; ---------------------------------------------------------------------------
0001161E                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0001161E                            ; destroyed, and if it has, then cancel	the missile
0001161E                            ; ---------------------------------------------------------------------------
0001161E                            
0001161E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001161E                            
0001161E                            
0001161E                            Obj23_ChkCancel:			; XREF: Obj23_Main
0001161E 2268 003C                  		movea.l	$3C(a0),a1
00011622 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00011626 6700                       		beq.s	Obj23_Delete	; if yes, branch
00011628 4E75                       		rts	
0001162A                            ; End of function Obj23_ChkCancel
0001162A                            
0001162A                            ; ===========================================================================
0001162A                            
0001162A                            Obj23_FromBuzz:				; XREF: Obj23_Index
0001162A 0828 0007 0022             		btst	#7,status(a0)
00011630 6600                       		bne.s	Obj23_Explode
00011632 117C 0087 0020             		move.b	#$87,collision_flags(a0)
00011638 117C 0001 001C             		move.b	#1,anim(a0)
0001163E 4EB9 0000 0000             		jsr	SpeedToPos
00011644 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0001164A 4EB9 0000 0000             		jsr	AnimateSprite
00011650 4EB9 0000 0000             		jsr	DisplaySprite
00011656 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001165A 0640 00E0                  		addi.w	#$E0,d0
0001165E B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00011662 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00011664 4E75                       		rts	
00011666                            ; ===========================================================================
00011666                            
00011666                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00011666 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0001166A 117C 0000 0024             		move.b	#0,routine(a0)
00011670 6000 F290                  		bra.w	Obj24
00011674                            ; ===========================================================================
00011674                            
00011674                            Obj23_Delete:				; XREF: Obj23_Index
00011674 4EB9 0000 0000             		jsr	DeleteObject
0001167A 4E75                       		rts	
0001167C                            ; ===========================================================================
0001167C                            
0001167C                            Obj23_FromNewt:				; XREF: Obj23_Index
0001167C 4A28 0001                  		tst.b	1(a0)
00011680 6AF2                       		bpl.s	Obj23_Delete
00011682 4EB9 0000 0000             		jsr	SpeedToPos
00011688                            
00011688                            Obj23_Animate2:				; XREF: Obj23_Main
00011688 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0001168E 4EB9 0000 0000             		jsr	AnimateSprite
00011694 4EB9 0000 0000             		jsr	DisplaySprite
0001169A 4E75                       		rts	
0001169C                            ; ===========================================================================
0001169C                            Ani_obj22:
0001169C                            	include "_anim\obj22.asm"
0001169C                            ; ---------------------------------------------------------------------------
0001169C                            ; Animation script - Buzz Bomber enemy
0001169C                            ; ---------------------------------------------------------------------------
0001169C 0000                       		dc.w byte_9A1E-Ani_obj22
0001169E 0000                       		dc.w byte_9A22-Ani_obj22
000116A0 0000                       		dc.w byte_9A26-Ani_obj22
000116A2 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
000116A6 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
000116AA 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
000116AE                            		even
000116AE                            		even
000116AE                            
000116AE                            Ani_obj23:
000116AE                            	include "_anim\obj23.asm"
000116AE                            ; ---------------------------------------------------------------------------
000116AE                            ; Animation script - missile that Buzz Bomber throws
000116AE                            ; ---------------------------------------------------------------------------
000116AE 0000                       		dc.w byte_9A2E-Ani_obj23
000116B0 0000                       		dc.w byte_9A32-Ani_obj23
000116B2 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
000116B6 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
000116BA                            		even
000116BA                            		even
000116BA                            
000116BA                            ; ---------------------------------------------------------------------------
000116BA                            ; Sprite mappings - Buzz Bomber	enemy
000116BA                            ; ---------------------------------------------------------------------------
000116BA                            Map_obj22:
000116BA                            	include "_maps\obj22.asm"
000116BA                            ; ---------------------------------------------------------------------------
000116BA                            ; Sprite mappings - Buzz Bomber	enemy
000116BA                            ; ---------------------------------------------------------------------------
000116BA 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
000116BE 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
000116C2 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
000116C6 06                         byte_9A42:	dc.b 6
000116C7 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
000116CC F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
000116D1 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
000116D6 0404 0018 00               		dc.b 4,	4, 0, $18, 0
000116DB F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
000116E0 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
000116E5 06                         byte_9A61:	dc.b 6
000116E6 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
000116EB F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
000116F0 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
000116F5 0404 0018 00               		dc.b 4,	4, 0, $18, 0
000116FA F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
000116FF F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00011704 07                         byte_9A80:	dc.b 7
00011705 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0001170A F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0001170F F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00011714 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00011719 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0001171E F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00011723 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00011728 07                         byte_9AA4:	dc.b 7
00011729 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0001172E F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00011733 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00011738 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0001173D 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00011742 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00011747 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0001174C 06                         byte_9AC8:	dc.b 6
0001174D F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00011752 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00011757 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0001175C 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00011761 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00011766 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0001176B 04                         byte_9AE7:	dc.b 4
0001176C F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00011771 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00011776 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0001177B 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00011780 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00011785 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0001178A                            		even
0001178A                            		even
0001178A                            
0001178A                            ; ---------------------------------------------------------------------------
0001178A                            ; Sprite mappings - missile that Buzz Bomber throws
0001178A                            ; ---------------------------------------------------------------------------
0001178A                            Map_obj23:
0001178A                            	include "_maps\obj23.asm"
0001178A                            ; ---------------------------------------------------------------------------
0001178A                            ; Sprite mappings - missile that Buzz Bomber throws
0001178A                            ; ---------------------------------------------------------------------------
0001178A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0001178E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00011792 01                         byte_9B0E:	dc.b 1
00011793 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00011798 01                         byte_9B14:	dc.b 1
00011799 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0001179E 01                         byte_9B1A:	dc.b 1
0001179F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
000117A4 01                         byte_9B20:	dc.b 1
000117A5 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
000117AA                            		even
000117AA                            		even
000117AA                            
000117AA                            ; ===========================================================================
000117AA                            ; ---------------------------------------------------------------------------
000117AA                            ; Object 25 - rings
000117AA                            ; ---------------------------------------------------------------------------
000117AA                            
000117AA                            Obj25:					; XREF: Obj_Index
000117AA 7000                       		moveq	#0,d0
000117AC 1028 0024                  		move.b	routine(a0),d0
000117B0 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
000117B4 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
000117B8                            ; ===========================================================================
000117B8 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index                 ; 0
000117BA 0000                       		dc.w Obj25_Animate-Obj25_Index              ; 2
000117BC 0000                       		dc.w Obj25_Collect-Obj25_Index              ; 4
000117BE 0000                       		dc.w Obj25_Sparkle-Obj25_Index              ; 6
000117C0 0000                       		dc.w Obj25_Delete-Obj25_Index               ; 8
000117C2                            ;		dc.w Obj25_Attract-Obj25_Index              ; A
000117C2                            ;		dc.w Obj25_Collect-Obj25_Index              ; C
000117C2                            ;		dc.w Obj25_Sparkle-Obj25_Index              ; E
000117C2                            ;		dc.w Obj25_Delete-Obj25_Index               ; 10
000117C2                            ; ---------------------------------------------------------------------------
000117C2                            ; Distances between rings (format: horizontal, vertical)
000117C2                            ; ---------------------------------------------------------------------------
000117C2 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
000117C4 1800                       		dc.b $18, 0		; horizontal normal
000117C6 2000                       		dc.b $20, 0		; horizontal wide
000117C8 0010                       		dc.b 0,	$10		; vertical tight
000117CA 0018                       		dc.b 0,	$18		; vertical normal
000117CC 0020                       		dc.b 0,	$20		; vertical wide
000117CE 1010                       		dc.b $10, $10		; diagonal
000117D0 1818                       		dc.b $18, $18
000117D2 2020                       		dc.b $20, $20
000117D4 F010                       		dc.b $F0, $10
000117D6 E818                       		dc.b $E8, $18
000117D8 E020                       		dc.b $E0, $20
000117DA 1008                       		dc.b $10, 8
000117DC 1810                       		dc.b $18, $10
000117DE F008                       		dc.b $F0, 8
000117E0 E810                       		dc.b $E8, $10
000117E2                            ; ===========================================================================
000117E2                            
000117E2                            Obj25_Main:	; Routine 0
000117E2                            ;        if S3KObjectManager=1
000117E2 3028 0014                                  move.w	respawn_index(a0),d0
000117E6 6700 0000                  				beq.w	Obj25_MakeRingsD
000117EA 3440                       	        movea.w	d0,a2	; load address into a2
000117EC                             ;       else
000117EC                            	;	lea	(v_objstate).w,a2
000117EC                            	;	moveq	#0,d0
000117EC                            	;	move.b	respawn_index(a0),d0
000117EC                            	;	lea	2(a2,d0.w),a2
000117EC                            	;endif
000117EC 1812                       		move.b	(a2),d4
000117EE 1228 0028                  		move.b	subtype(a0),d1
000117F2 7000                       		moveq	#0,d0
000117F4 1001                       		move.b	d1,d0
000117F6 0241 0007                  		andi.w	#7,d1
000117FA 0C41 0007                  		cmpi.w	#7,d1
000117FE 6600                       		bne.s	loc_9B80
00011800 7206                       		moveq	#6,d1
00011802                            
00011802                            	loc_9B80:
00011802 4841                       		swap	d1
00011804 323C 0000                  		move.w	#0,d1
00011808 E808                       		lsr.b	#4,d0
0001180A D040                       		add.w	d0,d0
0001180C 1A3B 00B4                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00011810 4885                       		ext.w	d5
00011812 1C3B 00AF                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00011816 4886                       		ext.w	d6
00011818 2248                       		movea.l	a0,a1
0001181A 3428 0008                  		move.w	x_pos(a0),d2
0001181E 3628 000C                  		move.w	y_pos(a0),d3
00011822 E20C                       		lsr.b	#1,d4
00011824 6500 0000                  		bcs.w	loc_9C02
00011828                            ;		bclr	#7,(a2)           ; this makes the s3 object manager think it needs reloading
00011828 6000                       		bra.s	loc_9BBA
0001182A                            ; ===========================================================================
0001182A                            
0001182A                            Obj25_MakeRingsD: ; this routine makes the rings work, and not spawn million of them
0001182A 5428 0024                  		addq.b	#2,routine(a0) ; add 2 to the routine counter
0001182E 3168 0008 0032             		move.w	8(a0),$32(a0) ; move x-position to secondary x-position
00011834 217C 0000 0000 0004        		move.l	#Map_obj25,4(a0) ; load mappings
0001183C 317C 27B2 0002             		move.w	#$27B2,2(a0) ; load right art
00011842 117C 0004 0001             		move.b	#4,1(a0) ; setup objects render flags
00011848 317C 0100 0018             		move.w	#$100,priority(a0) ; setup priority
0001184E 117C 0047 0020             		move.b	#$47,$20(a0) ; setup touch response
00011854 117C 0008 0023             		move.b	#8,width_pixels(a0) ; setup how wide this object is
0001185A                            ;		move.b	#0,respawn_index(a0) ; we don't want this to use any object spawn table slots
0001185A 117C 0001 0026             		move.b	#1,$26(a0) ; set as debug mode ring (This object does not use angles
00011860 6000                       		bra.s	Obj25_Animate ; branch away
00011862                            
00011862                            Obj25_MakeRings:
00011862 4841                       		swap	d1
00011864 E20C                       		lsr.b	#1,d4
00011866 6500                       		bcs.s	loc_9C02
00011868                            ;		bclr	#7,(a2)           ; this makes the s3 object manager think it needs reloading
00011868 6100 0000                  		bsr.w	SingleObjLoad
0001186C 6600                       		bne.s	loc_9C0E
0001186E                            
0001186E                            loc_9BBA:				; XREF: Obj25_Main
0001186E 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00011872 5429 0024                  		addq.b	#2,routine(a1)
00011876 3342 0008                  		move.w	d2,x_pos(a1)	; set x-axis position based on d2
0001187A 3368 0008 0032             		move.w	x_pos(a0),$32(a1)
00011880 3343 000C                  		move.w	d3,y_pos(a1)	; set y-axis position based on d3
00011884 237C 0000 0000 0004        		move.l	#Map_obj25,mappings(a1)
0001188C 337C 27B2 0002             		move.w	#$27B2,art_tile(a1)
00011892 137C 0004 0001             		move.b	#4,render_flags(a1)
00011898 337C 0100 0018             		move.w	#$100,priority(a1)
0001189E 137C 0047 0020             		move.b	#$47,$20(a1)
000118A4 137C 0008 0023             		move.b	#8,width_pixels(a1)
000118AA                            ;        if S3KObjectManager=1
000118AA 3368 0014 0014             		move.w	respawn_index(a0),respawn_index(a1)
000118B0                             ;       else
000118B0                            	;	move.b	respawn_index(a0),respawn_index(a1)
000118B0                                 ;   endif
000118B0 1341 0034                  		move.b	d1,$34(a1)
000118B4                            
000118B4                            loc_9C02:
000118B4 5241                       		addq.w	#1,d1
000118B6 D445                       		add.w	d5,d2		; add ring spacing value to d2
000118B8 D646                       		add.w	d6,d3		; add ring spacing value to d3
000118BA 4841                       		swap	d1
000118BC 51C9 FFA4                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
000118C0                            
000118C0                            loc_9C0E:
000118C0 0812 0000                  		btst	#0,(a2)
000118C4 6600 0000                  		bne.w	DeleteObject
000118C8                            ; --------------------------------------------------------------------------
000118C8                            Obj25_Animate:	; Routine 2
000118C8 1178 FEC3 001A             		move.b	($FFFFFEC3).w,obFrame(a0) ; set frame
000118CE 6100 0000                  		bsr.w	DisplaySprite
000118EE 4E75                       		rts	
000118F0                            ; ===========================================================================
000118F0                            
000118F0                            Obj25_Collect:	; Routine 4
000118F0 5428 0024                  		addq.b	#2,routine(a0)
000118F4 117C 0000 0020             		move.b	#0,obColType(a0)
000118FA 317C 0080 0018             		move.w	#$80,priority(a0)
00011900 6100 0000                  		bsr.w	CollectRing
00011904                            ;        if S3KObjectManager=1
00011904 7000                       		moveq	#0,d0
00011906 3028 0014                                  move.w	respawn_index(a0),d0	; get address in respawn table
0001190A 3440                       	        movea.w	d0,a2	                ; load address into a2
0001190C 1228 0034                  		move.b	$34(a0),d1
00011910 03D2                       		bset	d1,(a2)
00011912                            ;        else
00011912                            ;		lea	(v_objstate).w,a2
00011912                            ;		moveq	#0,d0
00011912                            ;		move.b	respawn_index(a0),d0
00011912                            ;		move.b	$34(a0),d1
00011912                            ;		bset	d1,2(a2,d0.w)
00011912                            ;	endif
00011912                            
00011912                            Obj25_Sparkle:	; Routine 6
00011912 43F9 0000 0000             		lea	(Ani_Obj25).l,a1
00011918 6100 0000                  		bsr.w	AnimateSprite
0001191C 6000 0000                  		bra.w	DisplaySprite
00011920                            ; ===========================================================================
00011920                            
00011920                            Obj25_Delete:	; Routine 8
00011920                             ;       if S3KObjectManager=1
00011920 7000 3028 0014 6700 3440+                  obMarkGone
0001192E                              ;      endif
0001192E 6000 0000                  		bra.w	DeleteObject
00011932                            ; ===========================================================================
00011932                            
00011932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011932                            
00011932                            
00011932                            CollectRing:				; XREF: Obj25_Collect
00011932 0C78 03E7 FF98             	cmpi.w	#999,(Rings_Collected).w
00011938 6400                       	bcc.s	loc_11FD4
0001193A 5278 FF98                  	addq.w	#1,(Rings_Collected).w
0001193E                            
0001193E                            loc_11FD4:
0001193E 303C 0033                  	move.w  #$33,d0 ; '¦'
00011942 0C78 03E7 FE20             	cmpi.w	#999,(Ring_count).w
00011948 6400 0000                  	bcc.w	loc_115B0
0001194C 5278 FE20                  	addq.w	#1,(Ring_count).w
00011950                            ;	cmpi.w  #$3E7,($FFFFFE20).w
00011950                            ;	ble.s   loc_1157E
00011950                            ;	move.w  #$3E7,($FFFFFE20).w
00011950                            	
00011950                            ;loc_1157E:                              ; CODE XREF: ROM:00011576j
00011950 0038 0001 FE1D             	ori.b   #1,($FFFFFE1D).w
00011956 7200                       	moveq   #0,d1
00011958 1238 FFE0                  	move.b  ($FFFFFFE0).w,d1
0001195C E549                       	lsl.w   #2,d1
0001195E B278 FE20                  	cmp.w   ($FFFFFE20).w,d1
00011962 6E00                       	bgt.s   loc_115B0
00011964 0638 0019 FFE0             	addi.b  #$19,($FFFFFFE0).w
0001196A                            ;	cmpi.b  #$A,($FFFFFE10).w
0001196A                            ;	beq.s   loc_115B4
0001196A 0C38 0063 FE12             	cmpi.b	#$63,(Life_count).w
00011970 6C00 0000                  	bge.w	Obj25_ExtraLife
00011974 5238 FE12                  	addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00011978 5238 FE1C                  	addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0001197C                            Obj25_ExtraLife:
0001197C 303C 002A                  	move.w	#$2A,d0		; play extra life music
00011980 4EF9 0000 325C             	jmp	(PlaySound_Special).l
00011986                            loc_115B0:
00011986 4EF9 0000 3212             	jmp	(PlaySound).l
0001198C                            ; End of function CollectRing
0001198C                            
0001198C                            ; ===========================================================================
0001198C                            ; ---------------------------------------------------------------------------
0001198C                            ; Object 37 - rings flying out of Sonic	when he's hit
0001198C                            ; ---------------------------------------------------------------------------
0001198C                            
0001198C                            Obj37:					; XREF: Obj_Index
0001198C 7000                       		moveq	#0,d0
0001198E 1028 0024                  		move.b	routine(a0),d0
00011992 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
00011996 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0001199A                            ; ===========================================================================
0001199A 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0001199C 0000                       		dc.w Obj37_Bounce-Obj37_Index
0001199E 0000                       		dc.w Obj37_Collect-Obj37_Index
000119A0 0000                       		dc.w Obj37_Sparkle-Obj37_Index
000119A2 0000                       		dc.w Obj37_Delete-Obj37_Index
000119A4                            ; ===========================================================================
000119A4                            
000119A4                            Obj37_CountRings:			; XREF: Obj37_Index
000119A4 2248                       		movea.l	a0,a1
000119A6 7A00                       		moveq	#0,d5
000119A8 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
000119AC 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
000119B2 7014                               moveq   #20,d0                  ; lose a max of 20 rings
000119B4 45F8 D000                          lea     ($FFFFD000).w,a2    ; a2=character
000119B8 082A 0006 0022                     btst    #6,status(a2)           ; is Sonic underwater?
000119BE 6700                               beq.s   Obj37_CountRings2                       ; if not, branch
000119C0 47F9 0000 0000                     lea    SpillRingDataU,a3        ; load the UNDERWATER address of the array in a3
000119C6 7008                               moveq   #8,d0                   ; lose a max of 8 rings underwater
000119C8                            Obj37_CountRings2:
000119C8 BA40                               cmp.w   d0,d5
000119CA 6500                               bcs.s   loc_9CDE
000119CC 3A00                               move.w  d0,d5
000119CE                            
000119CE                            loc_9CDE:
000119CE 5345                               subq.w  #1,d5
000119D0 383C 0288                          move.w  #$288,d4
000119D4 49F9 FFFF AA00                     lea ($FFFFAA00).l,a4    ; Load $FFFFAA00 to a4
000119DA 6000                       		bra.s	Obj37_MakeRings
000119DC                            ; ===========================================================================
000119DC                            
000119DC                            Obj37_Loop:
000119DC 6100 0000                  		bsr.w	SingleObjLoad
000119E0 6600 0000                  		bne.w	Obj37_ResetCounter
000119E4                            
000119E4                            Obj37_MakeRings:			; XREF: Obj37_CountRings
000119E4 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
000119E8 5429 0024                  		addq.b	#2,routine(a1)
000119EC 137C 0008 0016             		move.b	#8,$16(a1)
000119F2 137C 0008 0017             		move.b	#8,$17(a1)
000119F8 3368 0008 0008             		move.w	8(a0),8(a1)
000119FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011A04 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00011A0C 337C 27B2 0002             		move.w	#$27B2,2(a1)
00011A12 137C 0004 0001             		move.b	#4,1(a1)
00011A18                            ;		move.w	#$180,priority(a1)
00011A18 137C 0047 0020             		move.b	#$47,collision_flags(a1)
00011A1E 137C 0008 0023             		move.b	#8,width_pixels(a1)
00011A24                            ;		tst.w	d4
00011A24                            ;		bmi.s	loc_9D62
00011A24                            ;		move.w	d4,d0
00011A24                            ;		jsr	CalcSine
00011A24                            ;		move.w	d4,d2
00011A24                            ;		lsr.w	#8,d2
00011A24                            ;		tst.b   ($FFFFF64C).w ; Does the level have water?
00011A24                            ;		beq.s   Obj37_MRCont ; If not, branch and skip underwater checks
00011A24                            ;		move.w  ($FFFFF646).w,d6 ; Move water level to d6
00011A24                            ;		cmp.w   $C(a0),d6 ; Is the ring object underneath the water level?
00011A24                            ;		bgt.s   Obj37_MRCont ; If not, branch and skip underwater commands
00011A24                            ;		asr.w  #$1,d0 ; Half d0.  Makes the ring's x_vel bounce to the left/right slower
00011A24                            ;		asr.w  #$1,d1 ; Half d1.  Makes the ring's y_vel bounce up/down slower
00011A24                            
00011A24                            Obj37_MRCont:
00011A24                            ;        asl.w   d2,d0
00011A24                             ;       asl.w   d2,d1
00011A24                              ;      move.w  d0,d2
00011A24                               ;     move.w  d1,d3
00011A24                                ;    addi.b  #$10,d4
00011A24                                 ;   bcc.s   loc_9D62
00011A24                                  ;  subi.w  #$80,d4
00011A24                                   ; bcc.s   loc_9D62
00011A24                                    ;move.w  #$288,d4
00011A24                            
00011A24                            ;loc_9D62:
00011A24                            ;        move.w  d2,x_vel(a1)
00011A24                            ;        move.w  d3,y_vel(a1)
00011A24                            ;        neg.w   d2
00011A24                            ;        neg.w   d4
00011A24                            ;        move.w  d2,(a4)+        ; Move d2 to a4 then increment a4 by a word
00011A24 335B 0010                  		move.w  (a3)+,x_vel(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
00011A28 335B 0012                  		move.w  (a3)+,y_vel(a1)         ; move the data contained in the array to the y velocity and increment the address in a3
00011A2C 38C3                       		move.w  d3,(a4)+        ; Move d3 to a4 then increment a4 by a word
00011A2E 1438 D03B                  		move.b ($FFFFD03B).w,d2 ; get the number of times Sonic has been hit
00011A32 0C02 0001                  		cmpi.b #1,d2 ; is it more than once?
00011A36 6F00                       		ble.s @Repeat ; if not, branch
00011A38 4882                       		ext d2 ; change value from byte to word
00011A3A C5FC 0050                  		muls.w #$50,d2 ; multiply by #$50
00011A3E 9569 0012                  		sub.w d2,$12(a1) ; change y-velocity of each ring
00011A42                            @Repeat:
00011A42 51CD FF98                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
00011A46                            
00011A46                            Obj37_ResetCounter:			; XREF: Obj37_Loop
00011A46 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
00011A4C 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00011A52 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
00011A58 70FF                       		moveq	#-1,d0			; Move #-1 to d0
00011A5A 1140 001F                  		move.b	d0,obDelayAni(a0)	; Move d0 to new timer
00011A5E 11C0 FEC6                  		move.b	d0,(v_ani3_time).w	; Move d0 to old timer (for animated purposes)
00011A62 303C 00B9                  		move.w	#$B9,d0				; MJ: Sound
00011A66 4EB9 0000 3212             		jsr	(PlaySound).l ;	play ring loss sound
00011A6C                            
00011A6C                            Obj37_Bounce:				; XREF: Obj37_Index
00011A6C 1178 FEC7 001A             		move.b	($FFFFFEC7).w,mapping_frame(a0)
00011A72 4EB9 0000 0000             		jsr	SpeedToPos
00011A78 0668 0018 0012             		addi.w	#$18,y_vel(a0)
00011A7E 4A38 F64C                          tst.b   ($FFFFF64C).w           ; Does the level have water?
00011A82 6700                               beq.s   @skipbounceslow         ; If not, branch and skip underwater checks
00011A84 3C38 F646                          move.w  ($FFFFF646).w,d6        ; Move water level to d6
00011A88 BC68 000C                          cmp.w   y_pos(a0),d6            ; Is the ring object underneath the water level?
00011A8C 6E00                               bgt.s   @skipbounceslow         ; If not, branch and skip underwater commands
00011A8E 0468 000E 0012                     subi.w  #$E,y_vel(a0)          ; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
00011A94                            @skipbounceslow:
00011A94 6B00                       		bmi.s	Obj37_ChkDel
00011A96 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011A9A D007                       		add.b	d7,d0
00011A9C 0200 0003                  		andi.b	#3,d0
00011AA0 6600                       		bne.s	Obj37_ChkDel
00011AA2 4EB9 0000 0000             		jsr	ObjHitFloor
00011AA8 4A41                       		tst.w	d1
00011AAA 6A00                       		bpl.s	Obj37_ChkDel
00011AAC D368 000C                  		add.w	d1,$C(a0)
00011AB0 3028 0012                  		move.w	y_vel(a0),d0
00011AB4 E440                       		asr.w	#2,d0
00011AB6 9168 0012                  		sub.w	d0,y_vel(a0)
00011ABA 4468 0012                  		neg.w	y_vel(a0)
00011ABE                            
00011ABE                            Obj37_ChkDel:				; XREF: Obj37_Bounce
00011ABE 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
00011AC2 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
00011AC6 0C78 FF00 F72C                     cmpi.w	#-$100,($FFFFF72C).w            ; is vertical wrapping enabled?
00011ACC 6700 0000                          beq.w   DisplaySprite                   ; if so, branch
00011AD0 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00011AD4 0640 00E0                  		addi.w	#$E0,d0
00011AD8 B068 000C                  		cmp.w	y_pos(a0),d0	   ; has object moved below level boundary?
00011ADC 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
00011ADE                            ;Mercury Lost Rings Flash
00011ADE 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
00011AE4 6700 0000                  		beq.w	@flash1      ; If the bit is 0, the ring will appear.
00011AE8 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
00011AEE 6200 0000                  		bhi.w	@flash1       ; If the timer is higher than 80, obviously the rings will STAY visible.
00011AF2 4E75                       		rts
00011AF4                            @flash1:
00011AF4 43F8 AC00                  		lea	(v_spritequeue).w,a1
00011AF8 D2FC 0180                  		adda.w	#$180,a1	; jump to position in queue
00011AFC 0C51 007E                          cmpi.w  #$7E,(a1)
00011B00 6400                               bcc.s   @flashskip
00011B02 5451                               addq.w  #2,(a1)
00011B04 D2D1                               adda.w  (a1),a1
00011B06 3288                               move.w  a0,(a1)
00011B08                            @flashskip:
00011B08 4E75                               rts
00011B0A                            ;end Lost Rings Flash
00011B0A                            ; ===========================================================================
00011B0A                            
00011B0A                            Obj37_Collect:				; XREF: Obj37_Index
00011B0A 5428 0024                  		addq.b	#2,routine(a0)
00011B0E 117C 0000 0020             		move.b	#0,collision_flags(a0)
00011B14 317C 0080 0018             		move.w	#$80,priority(a0)
00011B1A 4EBA FE16                  		jsr	CollectRing
00011B1E                            
00011B1E                            Obj37_Sparkle:				; XREF: Obj37_Index
00011B1E 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00011B24 4EB9 0000 0000             		jsr	AnimateSprite
00011B2A 43F8 AC00                  		lea     (Sprite_Table_Input).w,a1
00011B2E D2FC 0080                  		adda.w  #$80,a1
00011B32 0C51 007E                  		cmpi.w  #$7E,(a1)
00011B36 6400                       		bcc.s   Obj37_SparkleRTS
00011B38 5451                       		addq.w  #2,(a1)
00011B3A D2D1                       		adda.w  (a1),a1
00011B3C 3288                       		move.w  a0,(a1)
00011B3E                            Obj37_SparkleRTS:
00011B3E 4E75                       	rts
00011B40                            ; ===========================================================================
00011B40                            
00011B40                            Obj37_Delete:				; XREF: Obj37_Index
00011B40 6000 0000                  		bra.w	DeleteObject
00011B44                            ; ===========================================================================
00011B44                            ; ---------------------------------------------------------------------------
00011B44                            ; Ring Spawn Array
00011B44                            ; ---------------------------------------------------------------------------
00011B44                            
00011B44 00C4 FC14 FF3C FC14 0238+  SpillRingData:  dc.w    $00C4,$FC14, $FF3C,$FC14, $0238,$FCB0, $FDC8,$FCB0 ; 4
00011B54 0350 FDC8 FCB0 FDC8 03EC+                  dc.w    $0350,$FDC8, $FCB0,$FDC8, $03EC,$FF3C, $FC14,$FF3C ; 8
00011B64 03EC 00C4 FC14 00C4 0350+                  dc.w    $03EC,$00C4, $FC14,$00C4, $0350,$0238, $FCB0,$0238 ; 12
00011B74 0238 0350 FDC8 0350 00C4+                  dc.w    $0238,$0350, $FDC8,$0350, $00C4,$03EC, $FF3C,$03EC ; 16
00011B84 0062 FE0A FF9E FE0A 011C+                  dc.w    $0062,$FE0A, $FF9E,$FE0A, $011C,$FE58, $FEE4,$FE58 ; 20
00011B94                                            even
00011B94                            ; ===========================================================================
00011B94                            ; ===========================================================================
00011B94                            ; ---------------------------------------------------------------------------
00011B94                            ; Ring Spawn Array Underwater
00011B94                            ; ---------------------------------------------------------------------------
00011B94                            
00011B94 0064 FE08 FF9C FE08 011C+  SpillRingDataU: dc.w    $0064,$FE08, $FF9C,$FE08, $011C,$FE58, $FEE4,$FE58 ; 4
00011BA4 01A8 FEE4 FE58 FEE4 01F8+                  dc.w    $01A8,$FEE4, $FE58,$FEE4, $01F8,$FF9C, $FE08,$FF9C ; 8
00011BB4                                            even
00011BB4                            ; ===========================================================================
00011BB4                            ; ---------------------------------------------------------------------------
00011BB4                            ; Object 4B - giant ring for entry to special stage
00011BB4                            ; ---------------------------------------------------------------------------
00011BB4                            
00011BB4                            Obj4B:					; XREF: Obj_Index
00011BB4 7000                       		moveq	#0,d0
00011BB6 1028 0024                  		move.b	routine(a0),d0
00011BBA 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
00011BBE 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
00011BC2                            ; ===========================================================================
00011BC2 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
00011BC4 0000                       		dc.w Obj4B_Animate-Obj4B_Index
00011BC6 0000                       		dc.w Obj4B_Collect-Obj4B_Index
00011BC8 0000                       		dc.w Obj4B_Delete-Obj4B_Index
00011BCA                            ; ===========================================================================
00011BCA                            
00011BCA                            Obj4B_Main:				; XREF: Obj4B_Index
00011BCA 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
00011BD2 317C 2400 0002             		move.w	#$2400,2(a0)
00011BD8 0028 0004 0001             		ori.b	#4,1(a0)
00011BDE 117C 0040 0023             		move.b	#$40,width_pixels(a0)
00011BE4 4A28 0001                  		tst.b	1(a0)
00011BE8 6A00                       		bpl.s	Obj4B_Animate
00011BEA                            ;		cmpi.w	#0,($FFFFFF70).w	; are you playing as Sonic?
00011BEA                            ;		beq.w	Obj4B_Sonic			; if yes, branch
00011BEA                            		
00011BEA                            ;Obj4B_Sonic:
00011BEA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w	; do you have 6 emeralds?
00011BF0 6700 0000                  		beq.w	Obj4B_Delete2		; if yes, branch
00011BF4                            ;		cmpi.b	#$01, ($FFFFFF70).w	; are you playing as other characters?
00011BF4                            ;		beq.w	Obj4B_Delete2			; if yes, branch
00011BF4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w	; do you have at least 50 rings?
00011BFA 6400                       		bcc.s	Obj4B_Okay			; if yes, branch
00011BFC 4E75                       		rts	
00011BFE                            ; ===========================================================================
00011BFE                            
00011BFE                            Obj4B_Okay:				; XREF: Obj4B_Main
00011BFE 5428 0024                  		addq.b	#2,routine(a0)
00011C02 317C 0100 0018             		move.w	#$100,priority(a0)
00011C08 117C 0052 0020             		move.b	#$52,collision_flags(a0)
00011C0E 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
00011C14                            
00011C14                            Obj4B_Animate:				; XREF: Obj4B_Index
00011C14 1178 FEC3 001A             		move.b	($FFFFFEC3).w,mapping_frame(a0)
00011C1A 4EF9 0000 0000             		jmp		MarkObjGone
00011C20                            ; ===========================================================================
00011C20                            
00011C20                            Obj4B_Collect:				; XREF: Obj4B_Index
00011C20 5528 0024                  		subq.b	#2,routine(a0)
00011C24 117C 0000 0020             		move.b	#0,collision_flags(a0)
00011C2A 6100 0000                  		bsr.w	SingleObjLoad
00011C2E 6600 0000                  		bne.w	Obj4B_PlaySnd
00011C32 4238 FF7F                  		clr.b	($FFFFFF7F).w 	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
00011C36 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
00011C3A 3368 0008 0008             		move.w	8(a0),8(a1)
00011C40 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C46 2348 003C                  		move.l	a0,$3C(a1)
00011C4A 3038 D008                  		move.w	($FFFFD008).w,d0
00011C4E B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
00011C52 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
00011C54 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
00011C5A                            
00011C5A                            Obj4B_PlaySnd:
00011C5A 303C 00C3                  		move.w	#$C3,d0
00011C5E 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
00011C64 60AE                       		bra.s	Obj4B_Animate
00011C66                            ; ===========================================================================
00011C66                            
00011C66                            Obj4B_Delete:				; XREF: Obj4B_Index
00011C66 4EF9 0000 0000             		jmp	GotThroughAct
00011C6C 6000 0000                  		bra.w	DeleteObject
00011C70 6000 0000                  		bra.w	DeleteObject
00011C74                            
00011C74                            Obj4B_Delete2:				; XREF: Obj4B_Index
00011C74 6000 0000                  		bra.w	DeleteObject
00011C78                            ; ===========================================================================
00011C78                            ; ---------------------------------------------------------------------------
00011C78                            ; Object 7C - flash effect when	you collect the	giant ring
00011C78                            ; ---------------------------------------------------------------------------
00011C78                            
00011C78                            Obj7C:					; XREF: Obj_Index
00011C78 7000                       		moveq	#0,d0
00011C7A 1028 0024                  		move.b	routine(a0),d0
00011C7E 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
00011C82 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
00011C86                            ; ===========================================================================
00011C86 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
00011C88 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
00011C8A 0000                       		dc.w Obj7C_Delete-Obj7C_Index
00011C8C                            ; ===========================================================================
00011C8C                            
00011C8C                            Obj7C_Main:				; XREF: Obj7C_Index
00011C8C 5428 0024                  		addq.b	#2,routine(a0)
00011C90 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
00011C98 317C 2462 0002             		move.w	#$2462,2(a0)
00011C9E 0028 0004 0001             		ori.b	#4,1(a0)
00011CA4 117C 0000 0018             		move.b	#0,priority(a0)
00011CAA 117C 0020 0023             		move.b	#$20,width_pixels(a0)
00011CB0 117C 00FF 001A             		move.b	#$FF,mapping_frame(a0)
00011CB6                            
00011CB6                            Obj7C_ChkDel:				; XREF: Obj7C_Index
00011CB6 6100                       		bsr.s	Obj7C_Collect
00011CB8 4EF9 0000 0000             		jmp		MarkObjGone
00011CBE                            
00011CBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011CBE                            
00011CBE                            
00011CBE                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
00011CBE 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00011CC2 6A00                       		bpl.s	locret_9F76
00011CC4 117C 0001 001E             		move.b	#1,anim_frame_duration(a0)
00011CCA 5228 001A                  		addq.b	#1,mapping_frame(a0)
00011CCE 0C28 0008 001A             		cmpi.b	#8,mapping_frame(a0)	; has animation	finished?
00011CD4 6400                       		bcc.s	Obj7C_End	; if yes, branch
00011CD6 0C28 0003 001A             		cmpi.b	#3,mapping_frame(a0)	; is 3rd frame displayed?
00011CDC 6600                       		bne.s	locret_9F76	; if not, branch
00011CDE 2268 003C                  		movea.l	$3C(a0),a1
00011CE2 137C 0006 0024             		move.b	#6,routine(a1)	; delete giant ring object (Obj4B)
00011CE8 11FC 001C D01C             		move.b	#$1C,(MainCharacter+anim).w ; make Sonic	invisible
00011CEE 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
00011CF4 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
00011CF8 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
00011CFC                            
00011CFC                            locret_9F76:
00011CFC 4E75                       		rts	
00011CFE                            ; ===========================================================================
00011CFE                            
00011CFE                            Obj7C_End:				; XREF: Obj7C_Collect
00011CFE 5428 0024                  		addq.b	#2,routine(a0)
00011D02 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
00011D08 588F                       		addq.l	#4,sp
00011D0A 4E75                       		rts	
00011D0C                            ; End of function Obj7C_Collect
00011D0C                            
00011D0C                            ; ===========================================================================
00011D0C                            
00011D0C                            Obj7C_Delete:				; XREF: Obj7C_Index
00011D0C 6000 0000                  		bra.w	DeleteObject
00011D10                            ; ===========================================================================
00011D10                            Ani_obj25:
00011D10                            	include "_anim\obj25.asm"
00011D10                            ; ---------------------------------------------------------------------------
00011D10                            ; Animation script - ring
00011D10                            ; ---------------------------------------------------------------------------
00011D10 0000                       		dc.w byte_9F8C-Ani_obj25
00011D12 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
00011D18                            		even
00011D18                            		even
00011D18                            
00011D18                            ; ---------------------------------------------------------------------------
00011D18                            ; Sprite mappings - rings
00011D18                            ; ---------------------------------------------------------------------------
00011D18                            Map_obj25:
00011D18                            	include "_maps\obj25.asm"
00011D18                            ; ---------------------------------------------------------------------------
00011D18                            ; Sprite mappings - rings
00011D18                            ; ---------------------------------------------------------------------------
00011D18 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
00011D1C 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
00011D20 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
00011D24 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
00011D28 01                         byte_9FA2:	dc.b 1
00011D29 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011D2E 01                         byte_9FA8:	dc.b 1
00011D2F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00011D34 01                         byte_9FAE:	dc.b 1
00011D35 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
00011D3A 01                         byte_9FB4:	dc.b 1
00011D3B F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
00011D40 01                         byte_9FBA:	dc.b 1
00011D41 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00011D46 01                         byte_9FC0:	dc.b 1
00011D47 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
00011D4C 01                         byte_9FC6:	dc.b 1
00011D4D F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
00011D52 01                         byte_9FCC:	dc.b 1
00011D53 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
00011D58                            		even
00011D58                            		even
00011D58                            
00011D58                            ; ---------------------------------------------------------------------------
00011D58                            ; Sprite mappings - giant ring
00011D58                            ; ---------------------------------------------------------------------------
00011D58                            Map_obj4B:
00011D58                            	include "_maps\obj4B.asm"
00011D58                            ; ---------------------------------------------------------------------------
00011D58                            ; Sprite mappings - giant ring
00011D58                            ; ---------------------------------------------------------------------------
00011D58 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
00011D5C 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
00011D60 0A                         byte_9FDA:	dc.b $A
00011D61 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
00011D66 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
00011D6B E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
00011D70 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
00011D75 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
00011D7A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
00011D7F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
00011D84 100C 0022 00               		dc.b $10, $C, 0, $22, 0
00011D89 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
00011D8E 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
00011D93 08                         byte_A00D:	dc.b 8
00011D94 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
00011D99 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
00011D9E E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
00011DA3 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
00011DA8 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
00011DAD 0809 0045 00               		dc.b 8,	9, 0, $45, 0
00011DB2 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
00011DB7 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
00011DBC 04                         byte_A036:	dc.b 4
00011DBD E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
00011DC2 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
00011DC7 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
00011DCC 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
00011DD1 08                         byte_A04B:	dc.b 8
00011DD2 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
00011DD7 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
00011DDC E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
00011DE1 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
00011DE6 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
00011DEB 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
00011DF0 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
00011DF5 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
00011DFA                            		even
00011DFA                            		even
00011DFA                            
00011DFA                            ; ---------------------------------------------------------------------------
00011DFA                            ; Sprite mappings - flash effect when you collect the giant ring
00011DFA                            ; ---------------------------------------------------------------------------
00011DFA                            Map_obj7C:
00011DFA                            	include "_maps\obj7C.asm"
00011DFA                            ; ---------------------------------------------------------------------------
00011DFA                            ; Sprite mappings - flash effect when you collect the giant ring
00011DFA                            ; ---------------------------------------------------------------------------
00011DFA 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
00011DFE 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
00011E02 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
00011E06 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
00011E0A 02                         byte_A084:	dc.b 2
00011E0B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
00011E10 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
00011E15 04                         byte_A08F:	dc.b 4
00011E16 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
00011E1B E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
00011E20 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
00011E25 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
00011E2A 04                         byte_A0A4:	dc.b 4
00011E2B E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
00011E30 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
00011E35 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
00011E3A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
00011E3F 04                         byte_A0B9:	dc.b 4
00011E40 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
00011E45 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
00011E4A 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
00011E4F 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
00011E54 04                         byte_A0CE:	dc.b 4
00011E55 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
00011E5A E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
00011E5F 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
00011E64 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
00011E69 04                         byte_A0E3:	dc.b 4
00011E6A E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
00011E6F E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
00011E74 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
00011E79 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
00011E7E 02                         byte_A0F8:	dc.b 2
00011E7F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
00011E84 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
00011E89 04                         byte_A103:	dc.b 4
00011E8A E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
00011E8F E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
00011E94 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
00011E99 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
00011E9E                            		even
00011E9E                            		even
00011E9E                            
00011E9E                            ; ===========================================================================
00011E9E                            ; ---------------------------------------------------------------------------
00011E9E                            ; Object 26 - monitors
00011E9E                            ; ---------------------------------------------------------------------------
00011E9E                            
00011E9E                            Obj26:						  ; ...
00011E9E 7000                       		moveq	#0,d0
00011EA0 1028 0024                  		move.b	$24(a0),d0
00011EA4 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
00011EA8 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
00011EAC                            ; ---------------------------------------------------------------------------
00011EAC 0000 0000                  Obj26_Index:	dc.w loc_30F9D4-Obj26_Index,loc_30FA38-Obj26_Index; 0 ;	...
00011EB0 0000 0000                  		dc.w loc_30FAE8-Obj26_Index,loc_30FA86-Obj26_Index; 2
00011EB4 0000                       		dc.w BraTo_MarkObjGone_0-Obj26_Index; 4
00011EB6                            ; ---------------------------------------------------------------------------
00011EB6                            
00011EB6                            loc_30F9D4:					  ; ...
00011EB6 5428 0024                  		addq.b	#2,$24(a0)
00011EBA 117C 000E 0016             		move.b	#$E,$16(a0)
00011EC0 117C 000E 0017             		move.b	#$E,$17(a0)
00011EC6 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
00011ECE 317C 0680 0002             		move.w	#$680,2(a0)
00011ED4 117C 0004 0001             		move.b	#4,1(a0)
00011EDA 317C 0180 0018             		move.w	#$180,priority(a0)
00011EE0 117C 000F 0023             		move.b	#$F,width_pixels(a0)
00011EE6                            ;		lea	(v_objstate).w,a2
00011EE6 7000                       		moveq	#0,d0
00011EE8 3028 0014                          move.w	respawn_index(a0),d0
00011EEC 3440                       	    movea.w	d0,a2
00011EEE 6700                       		beq.s	loc_30FA2C
00011EF0                            ;		bclr	#7,(a2)
00011EF0 0812 0000                  		btst	#0,(a2)
00011EF4 6700                       		beq.s	loc_30FA2C
00011EF6 117C 0008 0024             		move.b	#8,$24(a0)
00011EFC 117C 000B 001A             		move.b	#$B,$1A(a0)
00011F02 6000 0000                  		bra.w	RememberState
00011F06                            ; ---------------------------------------------------------------------------
00011F06                            
00011F06                            loc_30FA2C:					  ; ...
00011F06 117C 0046 0020             		move.b	#$46,$20(a0)
00011F0C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00011F12                            
00011F12                            loc_30FA38:					  ; ...
00011F12 1028 0025                  		move.b	$25(a0),d0
00011F16 6700                       		beq.s	SolidObject_Monitor
00011F18 5500                       		subq.b	#2,d0
00011F1A 6600                       		bne.s	Obj26_Fall
00011F1C 7200                       		moveq	#0,d1
00011F1E 1228 0023                  		move.b	width_pixels(a0),d1
00011F22 0641 000B                  		addi.w	#$B,d1
00011F26 4EBA D2BE                  		jsr	ExitPlatform
00011F2A 0829 0003 0022             		btst	#3,$22(a1)
00011F30 6600 0000                  		bne.w	SolidObject_Monitor
00011F34 4228 0025                  		clr.b	$25(a0)
00011F38 6000 0000                  		bra.w	loc_30FA86
00011F3C                            Obj26_Fall:		
00011F3C 6100 0000                  		bsr.w	ObjectFall
00011F40 4EB9 0000 0000             		jsr	ObjHitFloor	  ; Also known as ObjHitFloor in Sonic 1
00011F46 4A41                       		tst.w	d1
00011F48 6A00 0000                  		bpl.w	SolidObject_Monitor
00011F4C D368 000C                  		add.w	d1,$C(a0)
00011F50 4268 0012                  		clr.w	$12(a0)
00011F54 4228 0025                  		clr.b	$25(a0)
00011F58                            
00011F58                            SolidObject_Monitor:				  ; ...
00011F58 323C 001A                  		move.w	#$1A,d1
00011F5C 343C 000F                  		move.w	#$F,d2
00011F60 3602                       		move.w	d2,d3
00011F62 5243                       		addq.w	#1,d3
00011F64 3828 0008                  		move.w	8(a0),d4
00011F68 43F8 D000                  		lea	($FFFFD000).w,a1
00011F6C 7C03                       		moveq	#3,d6
00011F6E 48E7 7800                  		movem.l	d1-d4,-(sp)
00011F72 6100 0000                  		bsr.w	SolidObject_Monitor_Sonic
00011F76 4CDF 001E                  		movem.l	(sp)+,d1-d4
00011F7A                            ;		lea	($FFFFB040).w,a1
00011F7A                            ;		moveq	#4,d6
00011F7A                            ;		bsr.w	SolidObject_Monitor_Tails_Useless
00011F7A                            
00011F7A                            loc_30FA86:					  ; ...
00011F7A 43F9 0000 0000             		lea	(Ani_Obj26).l,a1
00011F80 4EB9 0000 0000             		jsr	AnimateSprite
00011F86                            
00011F86                            BraTo_MarkObjGone_0:				  ; ...
00011F86 4EF9 0000 0000             		jmp	RememberState
00011F8C                            
00011F8C                            ; =============== S U B	R O U T	I N E =======================================
00011F8C                            
00011F8C                            
00011F8C                            SolidObject_Monitor_Sonic:			  ; ...
00011F8C 0D28 0022                  		btst	d6,$22(a0)
00011F90 6600 0000                  		bne.w	ExitPlatform3
00011F94 0C29 0002 001C             		cmpi.b	#2,$1C(a1)
00011F9A 6600 0000                  		bne.w	loc_314E36
00011F9E 4E75                       		rts
00011FA0                            ; End of function SolidObject_Monitor_Knuckles
00011FA0                            
00011FA0                            
00011FA0                            ; =============== S U B	R O U T	I N E =======================================
00011FA0                            
00011FA0                            
00011FA0                            ;SolidObject_Monitor_Tails_Useless:		  ; ...
00011FA0                            ;		btst	d6,$22(a0)
00011FA0                            ;		beq.w	loc_314E36
00011FA0                            
00011FA0                            ExitPlatform3:					  ; ...
00011FA0 3401                       		move.w	d1,d2
00011FA2 D442                       		add.w	d2,d2
00011FA4 0829 0001 0022             		btst	#1,$22(a1)
00011FAA 6600                       		bne.s	loc_30FACA
00011FAC 3029 0008                  		move.w	8(a1),d0
00011FB0 9068 0008                  		sub.w	8(a0),d0
00011FB4 D041                       		add.w	d1,d0
00011FB6 6B00                       		bmi.s	loc_30FACA
00011FB8 B042                       		cmp.w	d2,d0
00011FBA 6500                       		bcs.s	loc_30FADE
00011FBC                            
00011FBC                            loc_30FACA:					  ; ...
00011FBC 08A9 0003 0022             		bclr	#3,$22(a1)
00011FC2 08E9 0001 0022             		bset	#1,$22(a1)
00011FC8 117C 0002 0024             		move.b	#2,$24(a0)
00011FCE 0DA8 0022                  		bclr	d6,$22(a0)
00011FD2 7800                       		moveq	#0,d4
00011FD4 4E75                       		rts
00011FD6                            ; ---------------------------------------------------------------------------
00011FD6                            
00011FD6                            loc_30FADE:					  ; ...
00011FD6 3404                       		move.w	d4,d2
00011FD8 4EBA D466                  		jsr	MvSonicOnPtfm
00011FDC 7800                       		moveq	#0,d4
00011FDE 4E75                       		rts
00011FE0                            ; End of function SolidObject_Monitor_Tails_Useless
00011FE0                            
00011FE0                            ; ---------------------------------------------------------------------------
00011FE0                            
00011FE0                            loc_30FAE8:					  ; ...
00011FE0 1028 0022                  		move.b	$22(a0),d0
00011FE4 0200 0078                  		and.b	#%1111000,d0
00011FE8 6700                       		beq.s	loc_30FB18
00011FEA 1200                       		move.b	d0,d1
00011FEC 0201 0028                  		and.b	#%101000,d1
00011FF0 6700                       		beq.s	loc_30FB06
00011FF2 0238 00D7 D022             		and.b	#%11010111,(MainCharacter+status).w
00011FF8 0038 0002 D022             		or.b	#2,(MainCharacter+status).w
00011FFE                            
00011FFE                            loc_30FB06:					  ; ...
00011FFE                            ;		and.b	#%1010000,d0
00011FFE                            ;		beq.s	loc_30FB18
00011FFE                            ;		and.b	#%11010111,($FFFFD062).w
00011FFE                            ;		or.b	#2,($FFFFD062).w
00011FFE                            
00011FFE                            loc_30FB18:					  ; ...
00011FFE 4228 0022                  		clr.b	$22(a0)
00012002 5428 0024                  		addq.b	#2,$24(a0)
00012006 117C 0000 0020             		move.b	#0,$20(a0)
0001200C 4EB9 0000 0000             		jsr	SingleObjLoad
00012012 6600                       		bne.s	loc_30FB4A
00012014 12BC 002E                  		move.b	#$2E,0(a1)
00012018 3368 0008 0008             		move.w	8(a0),8(a1)
0001201E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012024 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0001202A                            ;		move.w	$3E(a0),$3E(a1)
0001202A                            
0001202A                            loc_30FB4A:					  ; ...
0001202A 4EB9 0000 0000             		jsr	SingleObjLoad
00012030 6600                       		bne.s	loc_30FB66
00012032 12BC 0027                  		move.b	#$27,0(a1)
00012036 5429 0024                  		addq.b	#2,$24(a1)
0001203A 3368 0008 0008             		move.w	8(a0),8(a1)
00012040 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012046                            
00012046                            loc_30FB66:					  ; ...
00012046                            ;		lea	(v_objstate).w,a2
00012046 7000                       		moveq	#0,d0
00012048 3028 0014                          move.w	respawn_index(a0),d0
0001204C 3440                       	    movea.w	d0,a2
0001204E 08D2 0000                  		bset	#0,(a2)
00012052 117C 0009 001C             		move.b	#9,$1C(a0)
00012058 4EF9 0000 0000             		jmp	DisplaySprite
0001205E                            ;----------------------------------------------------
0001205E                            ; Object 2E - contents of monitors
0001205E                            ;----------------------------------------------------
0001205E                            
0001205E                            Obj2E:					; DATA XREF: ROM:Obj_Indexo
0001205E 7000                       		moveq	#0,d0
00012060 1028 0024                  		move.b	$24(a0),d0
00012064 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
00012068 4EFB 1000                  		jmp	Obj2E_Index(pc,d1.w)
0001206C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001206C 0000                       Obj2E_Index:	dc.w loc_B04E-Obj2E_Index ; DATA XREF: ROM:Obj2E_Indexo
0001206E                            					; ROM:0000B04Ao ...
0001206E 0000                       		dc.w loc_B092-Obj2E_Index
00012070 0000                       		dc.w Obj2E_Delete-Obj2E_Index
00012072                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00012072                            
00012072                            loc_B04E:				; DATA XREF: ROM:Obj2E_Indexo
00012072 5428 0024                  		addq.b	#2,$24(a0)
00012076 317C 0680 0002             		move.w	#$680,2(a0)
0001207C 117C 0024 0001             		move.b	#$24,1(a0)
00012082 317C 0180 0018             		move.w	#$180,priority(a0)
00012088 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001208E 317C FD00 0012             		move.w	#-$300,$12(a0)
00012094 7000                       		moveq	#0,d0
00012096 1028 001C                  		move.b	$1C(a0),d0
0001209A 5400                       		addq.b	#2,d0
0001209C 1140 001A                  		move.b	d0,$1A(a0)
000120A0 227C 0000 0000             		movea.l	#Map_obj26,a1
000120A6 D000                       		add.b	d0,d0
000120A8 D2F1 0000                  		adda.w	(a1,d0.w),a1
000120AC 5249                       		addq.w	#1,a1
000120AE 2149 0004                  		move.l	a1,4(a0)
000120B2                            
000120B2                            loc_B092:				; DATA XREF: ROM:0000B04Ao
000120B2 6100                       		bsr.s	sub_B098
000120B4 6000 0000                  		bra.w	DisplaySprite
000120B8                            
000120B8                            ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
000120B8                            
000120B8                            
000120B8                            sub_B098:				; CODE XREF: ROM:loc_B092p
000120B8 4A68 0012                  		tst.w	$12(a0)
000120BC 6A00 0000                  		bpl.w	loc_B0AC
000120C0 6100 0000                  		bsr.w	SpeedToPos
000120C4 0668 0018 0012             		addi.w	#$18,$12(a0)
000120CA 4E75                       		rts
000120CC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000120CC                            
000120CC                            loc_B0AC:				; CODE XREF: sub_B098+4j
000120CC 5428 0024                  		addq.b	#2,$24(a0)
000120D0 317C 001D 001E             		move.w	#$1D,$1E(a0)
000120D6 7000                       		moveq	#0,d0
000120D8 1028 001C                  		move.b	$1C(a0),d0
000120DC 0C28 0009 001C             		cmpi.b	#9,$1C(a0)	; this is to avoid address errors
000120E2 6F00                       		ble.s	loc_B0AC_2	
000120E4 103C 0009                  		move.b	#9,d0
000120E8                            loc_B0AC_2:
000120E8 D040                       		add.w	d0,d0
000120EA 303B 0000                  		move.w	Monitor_Subroutines(pc,d0.w),d0
000120EE 4EFB 0000                  		jmp	Monitor_Subroutines(pc,d0.w)
000120F2                            ; End of function sub_B098
000120F2                            
000120F2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000120F2 0000                       Monitor_Subroutines:dc.w Obj2E_ChkEggman-Monitor_Subroutines
000120F4                            					; DATA XREF: ROM:Monitor_Subroutineso
000120F4                            					; ROM:0000B0C8o ...
000120F4 0000                       		dc.w Obj2E_ChkEggman-Monitor_Subroutines
000120F6 0000                       		dc.w Obj2E_ChkSonic-Monitor_Subroutines
000120F8 0000                       		dc.w Obj2E_ChkShoes-Monitor_Subroutines
000120FA 0000                       		dc.w Obj2E_ChkShield-Monitor_Subroutines
000120FC 0000                       		dc.w Obj2E_ChkInvinc-Monitor_Subroutines
000120FE 0000                       		dc.w Obj2E_ChkRings-Monitor_Subroutines
00012100 0000                       		dc.w Obj2E_ChkS-Monitor_Subroutines
00012102 0000                       		dc.w Obj2E_ChkS-Monitor_Subroutines
00012104 0000                       		dc.w Monitor_Null-Monitor_Subroutines
00012106                            
00012106                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00012106                            
00012106                            Monitor_Null:				; DATA XREF: ROM:Monitor_Subroutineso
00012106                            					; ROM:0000B0CCo ...
00012106 4E75                       		rts
00012108                            
00012108                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
00012108                            ;	addq.w	#1,(a2)
00012108 4EF9 0000 0000             	jmp	Touch_ChkHurt2
0001210E                            ;	rts ; The Eggman monitor now does something!
0001210E                            ; ===========================================================================
0001210E                            
0001210E                            Obj2E_ChkSonic:
0001210E                            ;		cmpi.b	#2,d0		; does monitor contain Sonic?
0001210E                            ;		bne.s	Obj2E_ChkShoes
0001210E                            
0001210E                            ExtraLife:
0001210E 0C38 0063 FE12             		cmpi.b	#$63,($FFFFFE12).w	; are lives at max?
00012114 6C00 0000                  		bge.w	@playbgm2
00012118 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0001211C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00012120                            @playbgm2:
00012120 303C 002A                  		move.w	#$2A,d0
00012124 4EF9 0000 3212             		jmp	(PlaySound).l	; play extra life music
0001212A                            ; ===========================================================================
0001212A                            
0001212A                            Obj2E_ChkShoes:
0001212A                            ;		addq.w	#1,(a2)
0001212A 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001212E 6600 0000                  		bne.w	Obj2E_NoMusic
00012132 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w	; speed up the	BG music
00012138 11FC 0096 D034             		move.b	#$96,(MainCharacter+speedshoes_time).w	; time limit for the power-up
0001213E 48E7 00E0                  	movem.l a0-a2,-(sp)		; Move a0, a1 and a2 onto stack
00012142 41F8 D000                  	lea	(MainCharacter).w,a0	; Load Sonic to a0
00012146 45F8 F760                  	lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001214A 4EB9 0000 0000             	jsr	ApplySpeedSettings	; Fetch Speed settings
00012150 4CDF 0700                  	movem.l (sp)+,a0-a2		; Move a0, a1 and a2 from stack
00012154 303C 0008                  		move.w	#8,d0
00012158 4EF9 0000 329E             		jmp	(SetTempo).l	; Speed	up the music
0001215E                            ; ===========================================================================
0001215E                            
0001215E                            Obj2E_ChkShield:
0001215E                            ;		tst.b	($FFFFFE19).w		; is sonic super?
0001215E                            ;		bne.w	Obj2E_ChkShield_Cont		; if yes, branch
0001215E                            ;		tst.b	($FFFFD032).w		; is sonic invincible?
0001215E                            ;		bne.w	Obj2E_ChkShield_Cont		; if yes, branch
0001215E                            ;		moveq	#$28,d0
0001215E                            ;		jsr	(LoadPLC).l	; load Super Sonic's stars patterns
0001215E                            ;Obj2E_ChkShield_Cont:
0001215E                            ;		addq.w	#1,(a2)
0001215E 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
00012164 11FC 0002 D180             		move.b	#$2,($FFFFD180).w ; load shield object	($38)
0001216A 303C 0071                  		move.w	#$71,d0
0001216E 4EF9 0000 3212             		jmp	(PlaySound).l	; play shield sound
00012174                            ; ===========================================================================
00012174                            
00012174                            Obj2E_ChkInvinc:
00012174                            ;		addq.w	#1,(a2)
00012174 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
00012178 6600 0000                  		bne.w	Obj2E_NoMusic		; if yes, branch
0001217C 4A38 FE1E                  		tst.b	(Update_HUD_timer).w	; has Sonic reached the end of the act?
00012180 6700 0000                  		beq.w	Obj2E_NoMusic		; if yes, branch
00012184 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0001218A 11FC 0096 D032             		move.b	#$96,(MainCharacter+invincibility_time).w ; time limit for the power-up
00012190 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
00012196                            ;		move.b	#1,($FFFFD21C).w
00012196                            ;		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
00012196                            ;		move.b	#2,($FFFFD25C).w
00012196                            ;		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
00012196                            ;		move.b	#3,($FFFFD29C).w
00012196                            ;		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
00012196                            ;		move.b	#4,($FFFFD2DC).w
00012196 0C38 0002 FF88             		cmpi.b	#2,($FFFFFF88).w
0001219C 6E00 0000                  		bgt.w	Obj2E_NoInvcMusic
000121A0 5238 FF88                  		add.b	#1,($FFFFFF88).w
000121A4 0C38 0001 FF88             		cmpi.b	#1,($FFFFFF88).w
000121AA 6E00 0000                  		bgt.w	Obj2E_NoMusic
000121AE 4A38 F7AA                  		tst.b	($FFFFF7AA).w		; is boss mode on?
000121B2 6600                       		bne.s   Obj2E_NoMusic		; If so, don't play music
000121B4 0C78 000C FE14             		cmpi.w  #$C,($FFFFFE14).w	; Check if Sonic has air left
000121BA 6300                       		bls.s   Obj2E_NoMusic		; If so, don't play music
000121BC 303C 002C                  		move.w	#$2C,d0
000121C0 4EB9 0000 325C             		jsr	(PlaySound_Special).l	; play invincibility music
000121C6                            
000121C6                            Obj2E_NoMusic:
000121C6 4E75                       		rts	
000121C8                            		
000121C8                            Obj2E_NoInvcMusic:
000121C8 11FC 0002 FF88             		move.b	#2,($FFFFFF88).w
000121CE 4E75                       		rts	
000121D0                            ; ===========================================================================
000121D0                            
000121D0                            Obj2E_ChkRings:
000121D0                            ;		cmpi.b	#6,d0		; does monitor contain 10 rings?
000121D0                            ;		bne.w	Obj2E_ChkS
000121D0                            ;		cmpi.b	#7,d0		; does monitor contain 10 rings?
000121D0                            ;		beq.w	Obj2E_ChkS
000121D0                            ;	addq.w	#1,(a2)
000121D0                            
000121D0                            loc_12992:
000121D0 0678 000A FF98             	addi.w	#$A,(Rings_Collected).w
000121D6 0C78 03E7 FF98             	cmpi.w	#999,(Rings_Collected).w
000121DC 6500                       	bcs.s	loc_129A0
000121DE 31FC 03E7 FF98             	move.w	#999,(Rings_Collected).w
000121E4                            
000121E4                            loc_129A0:
000121E4 0678 000A FE20             	addi.w	#$A,(Ring_count).w
000121EA 0C78 03E7 FE20             	cmpi.w	#999,(Ring_count).w
000121F0 6500                       	bcs.s	loc_129AE
000121F2 31FC 03E7 FE20             	move.w	#999,(Ring_count).w
000121F8                            
000121F8                            loc_129AE:
000121F8 0038 0001 FE1D             	ori.b   #1,($FFFFFE1D).w
000121FE                            ;	move.w  #$B5,d0 ; '¦'
000121FE 7200                       	moveq   #0,d1
00012200 1238 FFE0                  	move.b  ($FFFFFFE0).w,d1
00012204 E549                       	lsl.w   #2,d1
00012206 B278 FE20                  	cmp.w   ($FFFFFE20).w,d1
0001220A 6E00                       	bgt.s   loc_129CA
0001220C 0638 0019 FFE0             	addi.b  #$19,($FFFFFFE0).w
00012212 4EF9 0000 0000             	jmp		loc_129D4
00012218                            ;	cmpi.b	#$63,(Life_count).w
00012218                            ;	bge.w	loc_129D4
00012218                            
00012218                            
00012218                            loc_129CA:
00012218                            
00012218 303C 0034                  	move.w	#$34,d0
0001221C 4EF9 0000 0000             	jmp	(PlayMusic).l
00012222                            ; ---------------------------------------------------------------------------
00012222                            
00012222                            loc_129D4:
00012222 6000 FEEA                  	bra.w	ExtraLife
00012226                            ; ===========================================================================
00012226                            
00012226                            Obj2E_ChkS:
00012226                            ;		cmpi.b	#7,d0		; does monitor contain 'S'
00012226                            ;		bne.w	Obj2E_ChkEnd
00012226                            ;		addq.w	#1,(a2)
00012226                            ;		tst.b	(Update_HUD_timer).w
00012226                            ;		beq.w	S_MonnotSonic ; ?
00012226 0678 0032 FF98             		addi.w	#$32,(Rings_Collected).w
0001222C 0C78 03E7 FF98             		cmpi.w	#999,(Rings_Collected).w
00012232 6500 0000                  		blo.w	@cont
00012236 31FC 03E7 FF98             		move.w	#999,(Rings_Collected).w
0001223C 0678 0032 FE20             @cont:	addi.w	#$32,(Ring_count).w
00012242 0C78 03E7 FE20             		cmpi.w	#999,(Ring_count).w
00012248 6500 0000                  		blo.w	@cont2
0001224C 31FC 03E7 FE20             		move.w	#999,(Ring_count).w
00012252 0038 0001 FE1D             @cont2:	ori.b	#1,(Update_HUD_rings).w
00012258                            ;		jmp		Obj2E_ChkS_Part2
00012258                            
00012258                            ;Obj2E_ChkS_Part2:
00012258 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
0001225C 6600 0000                  		bne.w	S_MonNoTransAnim		; if yes, branch
00012260 4A38 FE1E                  		tst.b	(Update_HUD_timer).w ; is the timer stopped?
00012264 6700 0000                  		beq.w	S_MonNoTransAnim	; if yes, branch
00012268 0829 0006 0022             		btst	#6,status(a1)	; Check if underwater, return if not
0001226E 6700                       		beq.s	locsup
00012270 31FC 0500 F760             		move.w	#$500,(Sonic_top_speed).w
00012276 31FC 0018 F762             		move.w	#$18,(Sonic_acceleration).w
0001227C 31FC 0080 F764             		move.w	#$80,(Sonic_deceleration).w
00012282                            locsup:
00012282                            ;		move.b	#1,(Transforming_Flag-1).w
00012282                            ;		addi.w	#$32,($FFFFFE20).w
00012282 11FC 0001 F65F             		move.b	#1,($FFFFF65F).w
00012288 11FC 000F F65E             		move.b	#$F,($FFFFF65E).w
0001228E 11FC 0001 FE19             		move.b	#1,($FFFFFE19).w
00012294 31FC 003C F670             		move.w	#$3C,(Super_Sonic_frame_count).w
0001229A 31FC 0800 F760             		move.w	#$800,($FFFFF760).w
000122A0 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
000122A6 31FC 00C0 F764             		move.w	#$C0,($FFFFF764).w
000122AC 11FC 0022 D01C             		move.b	#$22,(MainCharacter+anim).w
000122B2 4EB9 0000 0000             		jsr	Super_and_Invincibility_Stars_Jmp
000122B8 11FC 008E D200             		move.b	#$8E,($FFFFD200).w	; load Obj7E (super sonic stars object) at $FFFFD040
000122BE                            ;	moveq	#$23,d0
000122BE                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
000122BE 0C78 0002 FFA0             		cmpi.w	#2,($FFFFFFA0).w
000122C4 6600                       		bne.s	loc_864F8
000122C6 11FC 0000 FE19             		move.b	#0,($FFFFFE19).w
000122CC 11FC 0001 F667             		move.b	#1,($FFFFF667).w
000122D2 11FC 0029 D01C             		move.b	#$29,(MainCharacter+anim).w
000122D8 31FC 0800 FEC0             		move.w	#$800,($FFFFFEC0).w
000122DE 31FC 0018 FEC2             		move.w	#$18,($FFFFFEC2).w
000122E4 31FC 00C0 FEC4             		move.w	#$C0,($FFFFFEC4).w
000122EA                            ;		move.l	#Obj_HyperTails_Birds,($FFFFCD7C).w
000122EA                            ;		bra.s	loc_8652C
000122EA                            ; ---------------------------------------------------------------------------
000122EA                            
000122EA                            loc_864F8:
000122EA 6400                       		bcc.s	loc_86524
000122EC 21FC 0000 0000 D004        		move.l	#Map_SuperSonic,(MainCharacter+mappings).w
000122F4                            ;		tst.w	(Debug_placement_mode).w
000122F4                            ;		beq.s	loc_864F8_2
000122F4                            ;		move.l	(MainCharacter+mappings).w,($FFFFFF7A).w
000122F4                            ;loc_864F8_2:
000122F4 11FC 0001 FE19             		move.b	#1,($FFFFFE19).w
000122FA 31FC 0A00 F760             		move.w	#$A00,($FFFFF760).w
00012300 31FC 0030 F762             		move.w	#$30,($FFFFF762).w
00012306 31FC 0100 F764             		move.w	#$100,($FFFFF764).w
0001230C                            ;		move.l	#Obj_HyperSonic_19348,($FFFFCD7C).w
0001230C 6000 0000                  		bra.w	loc_8652C
00012310                            ; ---------------------------------------------------------------------------
00012310                            
00012310                            loc_86524:
00012310                            ;		move.l	#Obj_HyperSonicKnux_Trail,($FFFFCBC0).w
00012310                            
00012310                            loc_8652C:
00012310                            
00012310 11FC 0001 F7C8             		move.b	#$1,($FFFFF7C8).w
00012316 11FC 0000 D032             		move.b	#0,(MainCharacter+invincibility_time).w
0001231C 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w	; make Sonic invincible
00012322                            ;		moveq	#$26,d0
00012322                            ;		jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
00012322 303C 0046                  		move.w	#$46,d0
00012326 4EB9 0000 325C             		jsr	(PlaySound_Special).l	; Play transformation sound effect.
0001232C                            ;		tst.b	(Current_Boss_ID).w
0001232C                            ;		bne.s	loc_8652C_2		; branch if in a boss fight
0001232C 303C 002D                  		move.w	#$2D,d0
00012330 4EF9 0000 3212             		jmp    (PlaySound).l; load the Super Sonic song and return
00012336                            ;loc_8652C_2:
00012336 4E75                       	rts
00012338                            ; ---------------------------------------------------------------------------
00012338                            ; Called if the character is anyone other than Sonic 
00012338                            ; or if the timer is stopped when the "S" Monitor is broken.
00012338                            ; ----------------------------------------------------------------------------
00012338                            ;S_MonnotSonic:	
00012338                            ;		addi.w	#$32,(Rings_Collected).w
00012338                            ;		cmpi.w	#999,(Rings_Collected).w
00012338                            ;		blo.w	@cont
00012338                            ;		move.w	#999,(Rings_Collected).w
00012338                            ;@cont:	addi.w	#$32,(Ring_count).w
00012338                            ;		cmpi.w	#999,(Ring_count).w
00012338                            ;		blo.w	@cont2
00012338                            ;		move.w	#999,(Ring_count).w
00012338                            ;@cont2:	ori.b	#1,(Update_HUD_rings).w	
00012338                            ;		move.w	#$B5,d0
00012338                            ;		jmp	(PlayMusic).l
00012338                            ; ---------------------------------------------------------------------------
00012338                            
00012338                            S_MonNoTransAnim:
00012338 303C 0034                  		move.w	#$34,d0
0001233C 4EF9 0000 0000             		jmp	(PlayMusic).l
00012342                            
00012342                            Obj2E_ChkEnd:
00012342 4E75                       	rts			;  goggles monitors do nothing
00012344                            ; ===========================================================================
00012344                            
00012344                            Obj2E_Delete:				; XREF: Obj2E_Index
00012344 5368 001E                  		subq.w	#1,anim_frame_duration(a0)
00012348 6B00 0000                  		bmi.w	DeleteObject
0001234C 6000 0000                  		bra.w	DisplaySprite
00012350                            ;		rts	
00012350                            
00012350                            ; ===========================================================================
00012350                            Ani_obj26:
00012350                            	include "_anim\obj26.asm"
00012350                            ; ---------------------------------------------------------------------------
00012350                            ; Animation script - monitors
00012350                            ; ---------------------------------------------------------------------------
00012350 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
00012356 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0001235C 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
00012362 0000                       		dc.w byte_A582-Ani_obj26
00012364 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0001236A 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
00012376 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
00012382 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0001238E 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0001239A 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
000123A6 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
000123B2 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
000123BE 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
000123CA 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
000123D2                            		even
000123D2                            		even
000123D2                            
000123D2                            ; ---------------------------------------------------------------------------
000123D2                            ; Sprite mappings - monitors
000123D2                            ; ---------------------------------------------------------------------------
000123D2                            Map_obj26:
000123D2                            	include "_maps\obj26.asm"
000123D2                            ; --------------------------------------------------------------------------------
000123D2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000123D2                            ; --------------------------------------------------------------------------------
000123D2                            
000123D2                            SME_vHL8M:	
000123D2 0000 0000                  		dc.w SME_vHL8M_18-SME_vHL8M, SME_vHL8M_1E-SME_vHL8M	
000123D6 0000 0000                  		dc.w SME_vHL8M_29-SME_vHL8M, SME_vHL8M_34-SME_vHL8M	
000123DA 0000 0000                  		dc.w SME_vHL8M_3F-SME_vHL8M, SME_vHL8M_4A-SME_vHL8M	
000123DE 0000 0000                  		dc.w SME_vHL8M_55-SME_vHL8M, SME_vHL8M_60-SME_vHL8M	
000123E2 0000 0000                  		dc.w SME_vHL8M_6B-SME_vHL8M, SME_vHL8M_76-SME_vHL8M	
000123E6 0000 0000                  		dc.w SME_vHL8M_81-SME_vHL8M, SME_vHL8M_8C-SME_vHL8M	
000123EA 01                         SME_vHL8M_18:	dc.b 1	
000123EB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000123F0 02                         SME_vHL8M_1E:	dc.b 2	
000123F1 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
000123F6 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000123FB 02                         SME_vHL8M_29:	dc.b 2	
000123FC F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
00012401 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00012406 02                         SME_vHL8M_34:	dc.b 2	
00012407 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0001240C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00012411 02                         SME_vHL8M_3F:	dc.b 2	
00012412 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
00012417 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0001241C 02                         SME_vHL8M_4A:	dc.b 2	
0001241D F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
00012422 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00012427 02                         SME_vHL8M_55:	dc.b 2	
00012428 F505 0028 F8               		dc.b $F5, 5, 0, $28, $F8	
0001242D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00012432 02                         SME_vHL8M_60:	dc.b 2	
00012433 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
00012438 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001243D 02                         SME_vHL8M_6B:	dc.b 2	
0001243E F505 2020 F8               		dc.b $F5, 5, $20,	$20, $F8
00012443 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012448 02                         SME_vHL8M_76:	dc.b 2	
00012449 F505 003C F8               		dc.b $F5, 5, 0,	$3C, $F8
0001244E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012453 02                         SME_vHL8M_81:	dc.b 2	
00012454 F505 0038 F8               		dc.b $F5, 5, 0,	$38, $F8
00012459 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001245E 01                         SME_vHL8M_8C:	dc.b 1	
0001245F FF0D 0030 F0               		dc.b $FF, $D, 0, $30, $F0
00012464                            		even
00012464                            		even
00012464                            
00012464                            ; ===========================================================================
00012464                            ; ---------------------------------------------------------------------------
00012464                            ; Object 0E - Sonic on the title screen
00012464                            ; ---------------------------------------------------------------------------
00012464                            
00012464                            Obj0E:					; XREF: Obj_Index
00012464 7000                       		moveq	#0,d0
00012466 1028 0024                  		move.b	routine(a0),d0
0001246A 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0001246E 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
00012472                            ; ===========================================================================
00012472 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
00012474 0000                       		dc.w Obj0E_Delay-Obj0E_Index
00012476 0000                       		dc.w Obj0E_Move-Obj0E_Index
00012478 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0001247A                            ; ===========================================================================
0001247A                            
0001247A                            Obj0E_Main:				; XREF: Obj0E_Index
0001247A 5428 0024                  		addq.b	#2,routine(a0)
0001247E 317C 00F0 0008             		move.w	#$F0,8(a0)
00012484 317C 00DE 000A             		move.w	#$DE,$A(a0)
0001248A 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
00012492 317C 2300 0002             		move.w	#$2300,2(a0)
00012498 317C 0080 0018             		move.w	#$80,priority(a0)
0001249E 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
000124A4 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
000124AA 4EB9 0000 0000             		jsr	AnimateSprite
000124B0                            
000124B0                            Obj0E_Delay:				; XREF: Obj0E_Index
000124B0 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
000124B4 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
000124B6 5428 0024                  		addq.b	#2,routine(a0)	; go to	next routine
000124BA 6000 0000                  		bra.w	DisplaySprite
000124BE                            ; ===========================================================================
000124BE                            
000124BE                            Obj0E_Wait:				; XREF: Obj0E_Delay
000124BE 4E75                       		rts	
000124C0                            ; ===========================================================================
000124C0                            
000124C0                            Obj0E_Move:				; XREF: Obj0E_Index
000124C0 5168 000A                  		subq.w	#8,$A(a0)
000124C4 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
000124CA 6600                       		bne.s	Obj0E_Display
000124CC 5428 0024                  		addq.b	#2,routine(a0)
000124D0                            
000124D0                            Obj0E_Display:
000124D0 6000 0000                  		bra.w	DisplaySprite
000124D4                            ; ===========================================================================
000124D4 4E75                       		rts	
000124D6                            ; ===========================================================================
000124D6                            
000124D6                            Obj0E_Animate:				; XREF: Obj0E_Index
000124D6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
000124DC 4EB9 0000 0000             		jsr	AnimateSprite
000124E2 6000 0000                  		bra.w	DisplaySprite
000124E6                            ; ===========================================================================
000124E6 4E75                       		rts	
000124E8                            ; ===========================================================================
000124E8                            ; ---------------------------------------------------------------------------
000124E8                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
000124E8                            ; ---------------------------------------------------------------------------
000124E8                            
000124E8                            Obj0F:					; XREF: Obj_Index
000124E8 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000124EE 6700                       		beq.s	Obj0F_InitMenu
000124F0 4EF9 0000 0000             		jmp		Obj8F
000124F6                            	
000124F6                            Obj0F_InitMenu:
000124F6 7000                       		moveq	#0,d0
000124F8 1028 0024                  		move.b	routine(a0),d0
000124FC 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
00012500 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
00012504 6000 0000                  		bra.w	DisplaySprite
00012508                            ; ===========================================================================
00012508 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0001250A 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0001250C 0000                       		dc.w locret_A6F8-Obj0F_Index
0001250E 0000                       		dc.w Obj0F_Menu-Obj0F_Index
00012510                            ; ===========================================================================
00012510                            
00012510                            Obj0F_Main:				; XREF: Obj0F_Index
00012510 5428 0024                  		addq.b	#2,routine(a0)
00012514 317C 00D0 0008             		move.w	#$D0,8(a0)
0001251A 317C 0130 000A             		move.w	#$130,$A(a0)
00012520 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
00012528 317C 0200 0002             		move.w	#$200,2(a0)
0001252E 0C28 0002 001A             		cmpi.b	#2,mapping_frame(a0)	; is object "PRESS START"?
00012534 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
00012536 5428 0024                  		addq.b	#2,routine(a0)
0001253A 0C28 0003 001A             		cmpi.b	#3,mapping_frame(a0)	; is the object	"TM"?
00012540 6600                       		bne.s	locret_A6F8	; if not, branch
00012542 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
00012548 317C 0170 0008             		move.w	#$170,8(a0)
0001254E 317C 00F8 000A             		move.w	#$F8,$A(a0)
00012554                            
00012554                            locret_A6F8:				; XREF: Obj0F_Index
00012554 4E75                       		rts	
00012556                            ; ===========================================================================
00012556                            
00012556                            Obj0F_PrsStart:				; XREF: Obj0F_Index
00012556 0C38 0001 FFF0             		cmpi.b	#1,($FFFFFFF0).w
0001255C 6700                       		beq.s	Obj0F_PrsStart_Show
0001255E 0838 0007 F605             		btst	#7,($FFFFF605).w	; check if Start is pressed
00012564 6700                       		beq.s	Obj0F_PrsStart_Show	; if not, branch
00012566 5828 0024                  		addq.b	#4,routine(a0)			; go to Menu in next frame
0001256A 103C 0010                  		move.b	#$10,d0		; play menu music
0001256E 6100 0000                  		bsr.w	Jmpto_PlaySound_Special2
00012572 317C 0512 0002             		move.w	#$512,2(a0)
00012578 217C 0000 0000 0004        		move.l	#Map_obj0F_Menu,4(a0)
00012580 317C 00F5 0008             		move.w	#$F5,8(a0)
00012586 317C 0150 000A             		move.w	#$150,$A(a0)
0001258C 4E75                       		rts
0001258E                            
0001258E                            Obj0F_PrsStart_Show:
0001258E 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
00012594 6000 0000                  		bra.w	AnimateSprite
00012598                            ; ===========================================================================
00012598                            
00012598                            Obj0F_Menu:
00012598 7400                       		moveq	#0,d2
0001259A 1438 FF86                  		move.b	(Title_screen_option).w,d2
0001259E 1038 F605                  		move.b	($FFFFF605).w,d0
000125A2                            	;	or.b	(Ctrl_2_Press).w,d0 	; this is for the other player but only one player is supported so this has been removed.
000125A2 0800 0000                  		btst	#0,d0
000125A6 6700                       		beq.s	loc_13645
000125A8 5302                       		subq.b	#1,d2
000125AA 6400                       		bcc.s	loc_13645
000125AC 143C 0004                  		move.b	#4,d2
000125B0                            
000125B0                            loc_13645:
000125B0 0800 0001                  		btst	#1,d0
000125B4 6700                       		beq.s	loc_13646
000125B6 5202                       		addq.b	#1,d2
000125B8 0C02 0005                  		cmpi.b	#5,d2
000125BC 6500                       		blo.s	loc_13646
000125BE 7400                       		moveq	#0,d2
000125C0                            
000125C0                            loc_13646:
000125C0 1142 001A                  		move.b	d2,mapping_frame(a0)
000125C4 11C2 FF86                  		move.b	d2,(Title_screen_option).w
000125C8 0200 0003                  		andi.b	#3,d0
000125CC 6700                       		beq.s	loc_13647	; rts
000125CE 303C 005B                  		move.w	#$5B,d0 ; selection blip sound
000125D2 6100 0000                  		bsr.w	Jmpto_PlaySound3
000125D6                            
000125D6                            loc_13647:
000125D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; check if Start is pressed
000125DC 6700                       		beq.s	Obj0F_Menu_rts	; if not, branch
000125DE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w		; Do you have all the Chaos Emeralds?
000125E4 6C00 0000                  		bge.w	loc_13647_3	; if not, branch
000125E8                            loc_13647_2:
000125E8 4EF9 0000 0000             		jmp	DeleteObject	; if yes, delete the Title Screen Menu
000125EE                            loc_13647_3:
000125EE 0C28 0003 001A             		cmpi.b	#3,mapping_frame(a0)
000125F4 6600 FFF2                  		bne.w	loc_13647_2
000125F8 103C 00B2                  		move.b	#$B2,d0
000125FC 6100 0000                  		bsr.w	Jmpto_PlaySound_Special2
00012600                            
00012600                            Obj0F_Menu_rts:
00012600 4E75                       		rts
00012602                            ; ===========================================================================
00012602                            Ani_obj0E:
00012602                            	include "_anim\obj0E.asm"
00012602                            ; ---------------------------------------------------------------------------
00012602                            ; Animation script - Sonic on the title screen
00012602                            ; ---------------------------------------------------------------------------
00012602 0000                       		dc.w byte_A706-Ani_obj0E
00012604 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
00012610                            		even
00012610                            		even
00012610                            
00012610                            Ani_obj0F:
00012610                            	include "_anim\obj0F.asm"
00012610                            ; ---------------------------------------------------------------------------
00012610                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
00012610                            ; ---------------------------------------------------------------------------
00012610 0000                       		dc.w byte_A714-Ani_obj0F
00012612 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
00012616                            		even
00012616                            		even
00012616                            
00012616                            JmpTo_DeleteObject:
00012616 4EF9 0000 0000             	jmp	DeleteObject
0001261C                            Jmpto_PlaySound_Special2:
0001261C 4EF8 325C                  	jmp	PlaySound_Special
00012620                            	
00012620                            Jmpto_PlaySound3:
00012620 4EF8 3212                  	jmp	PlaySound
00012624                            ; ---------------------------------------------------------------------------
00012624                            ; Subroutine to	animate	a sprite using an animation script
00012624                            ; ---------------------------------------------------------------------------
00012624                            
00012624                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012624                            
00012624                            
00012624                            AnimateSprite:
00012624 7000                       		moveq	#0,d0
00012626 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0001262A B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001262E 6700                       		beq.s	Anim_Run	; if not, branch
00012630 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00012634 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001263A 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00012640                            
00012640                            Anim_Run:
00012640 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00012644 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
00012646 D040                       		add.w	d0,d0
00012648 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001264C 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
00012650 7200                       		moveq	#0,d1
00012652 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00012656 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001265A 0C00 00FA                  		cmp.b	#$FA,d0					; MJ: is it a flag from FA to FF?
0001265E 6400 0000                  		bhs	Anim_End_FF				; MJ: if so, branch to flag routines
00012662                             
00012662                            Anim_Next:
00012662 1200                       		move.b	d0,d1
00012664 0200 001F                  		andi.b	#$1F,d0
00012668 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001266C 1028 0022                  		move.b	$22(a0),d0
00012670 E719                       		rol.b	#3,d1
00012672 B101                       		eor.b	d0,d1
00012674 0201 0003                  		andi.b	#3,d1
00012678 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001267E 8328 0001                  		or.b	d1,1(a0)
00012682 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00012686                            
00012686                            Anim_Wait:
00012686 4E75                       		rts	
00012688                            ; ===========================================================================
00012688                            
00012688                            Anim_End_FF:
00012688 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001268A 6600                       		bne.s	Anim_End_FE	; if not, branch
0001268C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00012692 1029 0001                  		move.b	1(a1),d0	; read sprite number
00012696 60CA                       		bra.s	Anim_Next
00012698                            ; ===========================================================================
00012698                            
00012698                            Anim_End_FE:
00012698 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001269A 6600                       		bne.s	Anim_End_FD	; if not, branch
0001269C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000126A0 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000126A4 9200                       		sub.b	d0,d1
000126A6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000126AA 60B6                       		bra.s	Anim_Next
000126AC                            ; ===========================================================================
000126AC                            
000126AC                            Anim_End_FD:
000126AC 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000126AE 6600                       		bne.s	Anim_End_FC	; if not, branch
000126B0 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000126B6                            
000126B6                            Anim_End_FC:
000126B6 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
000126B8 6600                       		bne.s	Anim_End_FB	; if not, branch
000126BA 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
000126BE                            
000126BE                            Anim_End_FB:
000126BE 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
000126C0 6600                       		bne.s	Anim_End_FA	; if not, branch
000126C2 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000126C8 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
000126CC                            
000126CC                            Anim_End_FA:
000126CC 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
000126CE 6600                       		bne.s	Anim_End	; if not, branch
000126D0 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
000126D4                            
000126D4                            Anim_End:
000126D4 4E75                       		rts	
000126D6                            ; End of function AnimateSprite
000126D6                            
000126D6                            ; ===========================================================================
000126D6                            ; ---------------------------------------------------------------------------
000126D6                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
000126D6                            ; ---------------------------------------------------------------------------
000126D6                            Map_obj0F:
000126D6                            	include "_maps\obj0F.asm"
000126D6                            ; ---------------------------------------------------------------------------
000126D6                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
000126D6                            ; ---------------------------------------------------------------------------
000126D6 0000                       		dc.w byte_A7CD-Map_obj0F
000126D8 0000                       		dc.w byte_A7CC-Map_obj0F
000126DA 0000                       		dc.w byte_A7EB-Map_obj0F
000126DC 0000                       		dc.w byte_A882-Map_obj0F
000126DE 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
000126DF 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
000126E4 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
000126E9 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
000126EE 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
000126F3 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
000126F8 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
000126FD 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
000126FE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012703 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012708 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0001270D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012712 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012717 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0001271C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012721 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012726 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0001272B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012730 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012735 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0001273A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0001273F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012744 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012749 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0001274E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012753 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012758 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0001275D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012762 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00012767 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0001276C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00012771 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00012776 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0001277B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00012780 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00012785 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0001278A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0001278F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00012794 01                         byte_A882:	dc.b 1			; "TM"
00012795 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001279A                            		even
0001279A                            		even
0001279A                            Map_obj0F_Menu:
0001279A                            	include "_maps\obj0F_Menu.asm"
0001279A                            ; --------------------------------------------------------------------------------
0001279A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001279A                            ; --------------------------------------------------------------------------------
0001279A                            
0001279A                            SME_113pL:	
0001279A 0000 0000                  		dc.w SME_113pL_A-SME_113pL, SME_113pL_6F-SME_113pL	
0001279E 0000 0000                  		dc.w SME_113pL_D4-SME_113pL, SME_113pL_134-SME_113pL	
000127A2 0000                       		dc.w SME_113pL_194-SME_113pL	
000127A4 14                         SME_113pL_A:	dc.b $14	
000127A5 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
000127AA E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
000127AF E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
000127B4 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
000127B9 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
000127BE E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
000127C3 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
000127C8 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
000127CD F000 2019 F0               		dc.b $F0, 0, $20, $19, $F0	
000127D2 F000 2012 F8               		dc.b $F0, 0, $20, $12, $F8	
000127D7 F000 2023 00               		dc.b $F0, 0, $20, $23, 0	
000127DC F000 2012 08               		dc.b $F0, 0, $20, $12, 8	
000127E1 F000 2019 10               		dc.b $F0, 0, $20, $19, $10	
000127E6 F000 2020 20               		dc.b $F0, 0, $20, $20, $20	
000127EB F000 2012 28               		dc.b $F0, 0, $20, $12, $28	
000127F0 F000 2019 30               		dc.b $F0, 0, $20, $19, $30	
000127F5 F000 2012 38               		dc.b $F0, 0, $20, $12, $38	
000127FA F000 2010 40               		dc.b $F0, 0, $20, $10, $40	
000127FF F000 2021 48               		dc.b $F0, 0, $20, $21, $48	
00012804 E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
00012809 14                         SME_113pL_6F:	dc.b $14	
0001280A E004 2020 F8               		dc.b $E0, 4, $20, $20, $F8	
0001280F E000 200E 08               		dc.b $E0, 0, $20, $E, 8	
00012814 E000 201F 10               		dc.b $E0, 0, $20, $1F, $10	
00012819 E000 2021 18               		dc.b $E0, 0, $20, $21, $18	
0001281E E000 2014 28               		dc.b $E0, 0, $20, $14, $28	
00012823 E000 200E 30               		dc.b $E0, 0, $20, $E, $30	
00012828 E000 201A 38               		dc.b $E0, 0, $20, $1A, $38	
0001282D E000 2012 40               		dc.b $E0, 0, $20, $12, $40	
00012832 F000 0019 F0               		dc.b $F0, 0, 0, $19, $F0	
00012837 F000 0012 F8               		dc.b $F0, 0, 0, $12, $F8	
0001283C F000 0023 00               		dc.b $F0, 0, 0, $23, 0	
00012841 F000 0012 08               		dc.b $F0, 0, 0, $12, 8	
00012846 F000 0019 10               		dc.b $F0, 0, 0, $19, $10	
0001284B F000 0020 20               		dc.b $F0, 0, 0, $20, $20	
00012850 F000 0012 28               		dc.b $F0, 0, 0, $12, $28	
00012855 F000 0019 30               		dc.b $F0, 0, 0, $19, $30	
0001285A F000 0012 38               		dc.b $F0, 0, 0, $12, $38	
0001285F F000 0010 40               		dc.b $F0, 0, 0, $10, $40	
00012864 F000 0021 48               		dc.b $F0, 0, 0, $21, $48	
00012869 F004 0028 D8               		dc.b $F0, 4, 0, $28, $D8	
0001286E 13                         SME_113pL_D4:	dc.b $13	
0001286F F000 2020 EC               		dc.b $F0, 0, $20, $20, $EC	
00012874 F000 201D F4               		dc.b $F0, 0, $20, $1D, $F4	
00012879 F000 2012 FC               		dc.b $F0, 0, $20, $12, $FC	
0001287E F000 2010 04               		dc.b $F0, 0, $20, $10, 4	
00012883 F000 2016 0C               		dc.b $F0, 0, $20, $16, $C	
00012888 F000 200E 14               		dc.b $F0, 0, $20, $E, $14	
0001288D F000 2019 1C               		dc.b $F0, 0, $20, $19, $1C	
00012892 F004 2020 2C               		dc.b $F0, 4, $20, $20, $2C	
00012897 F000 200E 3C               		dc.b $F0, 0, $20, $E, $3C	
0001289C F000 2014 44               		dc.b $F0, 0, $20, $14, $44	
000128A1 F000 2012 4C               		dc.b $F0, 0, $20, $12, $4C	
000128A6 E000 001C 04               		dc.b $E0, 0, 0, $1C, 4	
000128AB E000 001D 0C               		dc.b $E0, 0, 0, $1D, $C	
000128B0 E000 0021 14               		dc.b $E0, 0, 0, $21, $14	
000128B5 E000 0016 1C               		dc.b $E0, 0, 0, $16, $1C	
000128BA E000 001C 24               		dc.b $E0, 0, 0, $1C, $24	
000128BF E000 001B 2C               		dc.b $E0, 0, 0, $1B, $2C	
000128C4 E000 0020 34               		dc.b $E0, 0, 0, $20, $34	
000128C9 E004 0028 EC               		dc.b $E0, 4, 0, $28, $EC	
000128CE 13                         SME_113pL_134:	dc.b $13	
000128CF F000 0020 EC               		dc.b $F0, 0, 0, $20, $EC	
000128D4 F000 001D F4               		dc.b $F0, 0, 0, $1D, $F4	
000128D9 F000 0012 FC               		dc.b $F0, 0, 0, $12, $FC	
000128DE F000 0010 04               		dc.b $F0, 0, 0, $10, 4	
000128E3 F000 0016 0C               		dc.b $F0, 0, 0, $16, $C	
000128E8 F000 000E 14               		dc.b $F0, 0, 0, $E, $14	
000128ED F000 0019 1C               		dc.b $F0, 0, 0, $19, $1C	
000128F2 F004 0020 2C               		dc.b $F0, 4, 0, $20, $2C	
000128F7 F000 000E 3C               		dc.b $F0, 0, 0, $E, $3C	
000128FC F000 0014 44               		dc.b $F0, 0, 0, $14, $44	
00012901 F000 0012 4C               		dc.b $F0, 0, 0, $12, $4C	
00012906 E000 201C 04               		dc.b $E0, 0, $20, $1C, 4	
0001290B E000 201D 0C               		dc.b $E0, 0, $20, $1D, $C	
00012910 E000 2021 14               		dc.b $E0, 0, $20, $21, $14	
00012915 E000 2016 1C               		dc.b $E0, 0, $20, $16, $1C	
0001291A E000 201C 24               		dc.b $E0, 0, $20, $1C, $24	
0001291F E000 201B 2C               		dc.b $E0, 0, $20, $1B, $2C	
00012924 E000 2020 34               		dc.b $E0, 0, $20, $20, $34	
00012929 F004 0028 D4               		dc.b $F0, 4, 0, $28, $D4	
0001292E 0F                         SME_113pL_194:	dc.b $F	
0001292F E000 001C 0C               		dc.b $E0, 0, 0, $1C, $C	
00012934 E000 0019 14               		dc.b $E0, 0, 0, $19, $14	
00012939 E000 0011 1C               		dc.b $E0, 0, 0, $11, $1C	
0001293E F000 0019 EC               		dc.b $F0, 0, 0, $19, $EC	
00012943 F000 0012 F4               		dc.b $F0, 0, 0, $12, $F4	
00012948 F000 0023 FC               		dc.b $F0, 0, 0, $23, $FC	
0001294D F000 0012 04               		dc.b $F0, 0, 0, $12, 4	
00012952 F000 0019 0C               		dc.b $F0, 0, 0, $19, $C	
00012957 F000 0020 1C               		dc.b $F0, 0, 0, $20, $1C	
0001295C F000 0012 24               		dc.b $F0, 0, 0, $12, $24	
00012961 F000 0019 2C               		dc.b $F0, 0, 0, $19, $2C	
00012966 F000 0012 34               		dc.b $F0, 0, 0, $12, $34	
0001296B F000 0010 3C               		dc.b $F0, 0, 0, $10, $3C	
00012970 F000 0021 44               		dc.b $F0, 0, 0, $21, $44	
00012975 E804 0028 D4               		dc.b $E8, 4, 0, $28, $D4	
0001297A                            		even
0001297A                            		even
0001297A                            ; ---------------------------------------------------------------------------
0001297A                            ; Sprite mappings - Sonic on the title screen
0001297A                            ; ---------------------------------------------------------------------------
0001297A                            Map_obj0E:
0001297A                            	include "_maps\obj0E.asm"
0001297A                            ; ---------------------------------------------------------------------------
0001297A                            ; Sprite mappings - Sonic on the title screen
0001297A                            ; ---------------------------------------------------------------------------
0001297A 0000                       		dc.w byte_A898-Map_obj0E
0001297C 0000                       		dc.w byte_A8CB-Map_obj0E
0001297E 0000                       		dc.w byte_A917-Map_obj0E
00012980 0000                       		dc.w byte_A96D-Map_obj0E
00012982 0000                       		dc.w byte_A9AF-Map_obj0E
00012984 0000                       		dc.w byte_A9E7-Map_obj0E
00012986 0000                       		dc.w byte_AA47-Map_obj0E
00012988 0000                       		dc.w byte_AAB1-Map_obj0E
0001298A 0A                         byte_A898:	dc.b $A
0001298B 0808 0000 08               		dc.b 8,	8, 0, 0, 8
00012990 100F 0003 08               		dc.b $10, $F, 0, 3, 8
00012995 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0001299A 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0001299F 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
000129A4 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
000129A9 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
000129AE 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
000129B3 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
000129B8 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
000129BD 0F                         byte_A8CB:	dc.b $F
000129BE 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
000129C3 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
000129C8 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
000129CD 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
000129D2 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
000129D7 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
000129DC 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
000129E1 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
000129E6 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
000129EB 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
000129F0 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
000129F5 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
000129FA 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
000129FF 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
00012A04 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
00012A09 11                         byte_A917:	dc.b $11
00012A0A 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
00012A0F 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
00012A14 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
00012A19 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
00012A1E 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
00012A23 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
00012A28 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
00012A2D 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
00012A32 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
00012A37 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
00012A3C 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
00012A41 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
00012A46 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
00012A4B 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
00012A50 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
00012A55 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
00012A5A 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
00012A5F 0D                         byte_A96D:	dc.b $D
00012A60 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
00012A65 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
00012A6A 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
00012A6F 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
00012A74 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
00012A79 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
00012A7E 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
00012A83 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
00012A88 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
00012A8D 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
00012A92 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
00012A97 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
00012A9C 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
00012AA1 0B                         byte_A9AF:	dc.b $B
00012AA2 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
00012AA7 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
00012AAC 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
00012AB1 280E 0118 18               		dc.b $28, $E, 1, $18, $18
00012AB6 280E 0124 38               		dc.b $28, $E, 1, $24, $38
00012ABB 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
00012AC0 400E 0132 10               		dc.b $40, $E, 1, $32, $10
00012AC5 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
00012ACA 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
00012ACF 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
00012AD4 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
00012AD9 13                         byte_A9E7:	dc.b $13
00012ADA 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
00012ADF 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
00012AE4 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
00012AE9 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
00012AEE 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
00012AF3 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
00012AF8 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
00012AFD 0800 0168 48               		dc.b 8,	0, 1, $68, $48
00012B02 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
00012B07 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
00012B0C 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
00012B11 300F 0171 10               		dc.b $30, $F, 1, $71, $10
00012B16 200D 0181 30               		dc.b $20, $D, 1, $81, $30
00012B1B 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
00012B20 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
00012B25 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
00012B2A 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
00012B2F 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
00012B34 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
00012B39 15                         byte_AA47:	dc.b $15
00012B3A 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
00012B3F 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
00012B44 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
00012B49 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
00012B4E 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
00012B53 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
00012B58 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
00012B5D 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
00012B62 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
00012B67 0800 0168 48               		dc.b 8,	0, 1, $68, $48
00012B6C 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
00012B71 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
00012B76 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
00012B7B 300F 0171 10               		dc.b $30, $F, 1, $71, $10
00012B80 200D 0181 30               		dc.b $20, $D, 1, $81, $30
00012B85 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
00012B8A 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
00012B8F 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
00012B94 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
00012B99 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
00012B9E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
00012BA3 16                         byte_AAB1:	dc.b $16
00012BA4 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
00012BA9 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
00012BAE 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
00012BB3 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
00012BB8 300B 0201 38               		dc.b $30, $B, 2, 1, $38
00012BBD 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
00012BC2 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
00012BC7 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
00012BCC 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
00012BD1 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
00012BD6 0800 0168 48               		dc.b 8,	0, 1, $68, $48
00012BDB 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
00012BE0 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
00012BE5 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
00012BEA 300F 0171 10               		dc.b $30, $F, 1, $71, $10
00012BEF 200D 0181 30               		dc.b $20, $D, 1, $81, $30
00012BF4 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
00012BF9 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
00012BFE 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
00012C03 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
00012C08 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
00012C0D 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
00012C12                            		even
00012C12                            		even
00012C12                            
00012C12                            ; ===========================================================================
00012C12                            ; ---------------------------------------------------------------------------
00012C12                            ; Object 2B - Chopper enemy (GHZ)
00012C12                            ; ---------------------------------------------------------------------------
00012C12                            
00012C12                            Obj2B:					; XREF: Obj_Index
00012C12 7000                       		moveq	#0,d0
00012C14 1028 0024                  		move.b	routine(a0),d0
00012C18 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
00012C1C 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
00012C20 6000 0000                  		bra.w	MarkObjGone
00012C24                            ; ===========================================================================
00012C24 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
00012C26 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
00012C28                            ; ===========================================================================
00012C28                            
00012C28                            Obj2B_Main:				; XREF: Obj2B_Index
00012C28 5428 0024                  		addq.b	#2,routine(a0)
00012C2C 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
00012C34 317C 047B 0002             		move.w	#$47B,2(a0)
00012C3A 117C 0004 0001             		move.b	#4,1(a0)
00012C40 317C 0200 0018             		move.w	#$200,priority(a0)
00012C46 117C 0009 0020             		move.b	#9,collision_flags(a0)
00012C4C 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00012C52 317C F900 0012             		move.w	#-$700,y_vel(a0)	; set vertical speed
00012C58 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012C5E                            
00012C5E                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
00012C5E 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
00012C64 4EBA F9BE                  		jsr	AnimateSprite
00012C68 4EB9 0000 0000             		jsr	SpeedToPos
00012C6E 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; reduce speed
00012C74 3028 0030                  		move.w	$30(a0),d0
00012C78 B068 000C                  		cmp.w	$C(a0),d0
00012C7C 6400                       		bcc.s	Obj2B_ChgAni
00012C7E 3140 000C                  		move.w	d0,$C(a0)
00012C82 317C F900 0012             		move.w	#-$700,y_vel(a0)	; set vertical speed
00012C88                            
00012C88                            Obj2B_ChgAni:
00012C88 117C 0001 001C             		move.b	#1,anim(a0)	; use fast animation
00012C8E 0440 00C0                  		subi.w	#$C0,d0
00012C92 B068 000C                  		cmp.w	$C(a0),d0
00012C96 6400                       		bcc.s	locret_ABB6
00012C98 117C 0000 001C             		move.b	#0,anim(a0)	; use slow animation
00012C9E 4A68 0012                  		tst.w	y_vel(a0)		; is Chopper at	its highest point?
00012CA2 6B00                       		bmi.s	locret_ABB6	; if not, branch
00012CA4 117C 0002 001C             		move.b	#2,anim(a0)	; use stationary animation
00012CAA                            
00012CAA                            locret_ABB6:
00012CAA 4E75                       		rts	
00012CAC                            ; ===========================================================================
00012CAC                            Ani_obj2B:
00012CAC                            	include "_anim\obj2B.asm"
00012CAC                            ; ---------------------------------------------------------------------------
00012CAC                            ; Animation script - Chopper enemy
00012CAC                            ; ---------------------------------------------------------------------------
00012CAC 0000                       		dc.w byte_ABBE-Ani_obj2B
00012CAE 0000                       		dc.w byte_ABC2-Ani_obj2B
00012CB0 0000                       		dc.w byte_ABC6-Ani_obj2B
00012CB2 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
00012CB6 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
00012CBA 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
00012CBE 00                         		even
00012CBE 00                         		even
00012CBE                            
00012CBE                            ; ---------------------------------------------------------------------------
00012CBE                            ; Sprite mappings - Chopper enemy (GHZ)
00012CBE                            ; ---------------------------------------------------------------------------
00012CBE                            Map_obj2B:
00012CBE                            	include "_maps\obj2B.asm"
00012CBE                            ; ---------------------------------------------------------------------------
00012CBE                            ; Sprite mappings - Chopper enemy (GHZ)
00012CBE                            ; ---------------------------------------------------------------------------
00012CBE 0000                       		dc.w byte_ABCE-Map_obj2B
00012CC0 0000                       		dc.w byte_ABD4-Map_obj2B
00012CC2 01                         byte_ABCE:	dc.b 1
00012CC3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012CC8 01                         byte_ABD4:	dc.b 1
00012CC9 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012CCE                            		even
00012CCE                            		even
00012CCE                            
00012CCE                            ; ===========================================================================
00012CCE                            ; ---------------------------------------------------------------------------
00012CCE                            ; Object 2C - Jaws enemy (LZ)
00012CCE                            ; ---------------------------------------------------------------------------
00012CCE                            
00012CCE                            Obj2C:					; XREF: Obj_Index
00012CCE 7000                       		moveq	#0,d0
00012CD0 1028 0024                  		move.b	routine(a0),d0
00012CD4 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
00012CD8 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
00012CDC                            ; ===========================================================================
00012CDC 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
00012CDE 0000                       		dc.w Obj2C_Turn-Obj2C_Index
00012CE0                            ; ===========================================================================
00012CE0                            
00012CE0                            Obj2C_Main:				; XREF: Obj2C_Index
00012CE0 5428 0024                  		addq.b	#2,routine(a0)
00012CE4 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
00012CEC 317C 2486 0002             		move.w	#$2486,2(a0)
00012CF2 0028 0004 0001             		ori.b	#4,1(a0)
00012CF8 117C 000A 0020             		move.b	#$A,collision_flags(a0)
00012CFE 317C 0200 0018             		move.w	#$200,priority(a0)
00012D04 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00012D0A 7000                       		moveq	#0,d0
00012D0C 1028 0028                  		move.b	subtype(a0),d0	; load object subtype number
00012D10 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
00012D12 5340                       		subq.w	#1,d0
00012D14 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
00012D18 3140 0032                  		move.w	d0,$32(a0)
00012D1C 317C FFC0 0010             		move.w	#-$40,x_vel(a0)	; move Jaws to the left
00012D22 0828 0000 0022             		btst	#0,status(a0)	; is Jaws facing left?
00012D28 6700                       		beq.s	Obj2C_Turn	; if yes, branch
00012D2A 4468 0010                  		neg.w	x_vel(a0)		; move Jaws to the right
00012D2E                            
00012D2E                            Obj2C_Turn:				; XREF: Obj2C_Index
00012D2E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
00012D32 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
00012D34 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
00012D3A 4468 0010                  		neg.w	x_vel(a0)		; change speed direction
00012D3E 0868 0000 0022             		bchg	#0,status(a0)	; change Jaws facing direction
00012D44 117C 0001 001D             		move.b	#1,next_anim(a0)	; reset	animation
00012D4A                            
00012D4A                            Obj2C_Animate:
00012D4A 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
00012D50 4EBA F8D2                  		jsr	AnimateSprite
00012D54 4EB9 0000 0000             		jsr	SpeedToPos
00012D5A 6000 0000                  		bra.w	MarkObjGone
00012D5E                            ; ===========================================================================
00012D5E                            Ani_obj2C:
00012D5E                            	include "_anim\obj2C.asm"
00012D5E                            ; ---------------------------------------------------------------------------
00012D5E                            ; Animation script - Jaws enemy
00012D5E                            ; ---------------------------------------------------------------------------
00012D5E 0000                       		dc.w byte_AC6A-Ani_obj2C
00012D60 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
00012D66                            		even
00012D66                            		even
00012D66                            
00012D66                            ; ---------------------------------------------------------------------------
00012D66                            ; Sprite mappings - Jaws enemy (LZ)
00012D66                            ; ---------------------------------------------------------------------------
00012D66                            Map_obj2C:
00012D66                            	include "_maps\obj2C.asm"
00012D66                            ; ---------------------------------------------------------------------------
00012D66                            ; Sprite mappings - Jaws enemy (LZ)
00012D66                            ; ---------------------------------------------------------------------------
00012D66 0000                       		dc.w byte_AC78-Map_obj2C
00012D68 0000                       		dc.w byte_AC83-Map_obj2C
00012D6A 0000                       		dc.w byte_AC8E-Map_obj2C
00012D6C 0000                       		dc.w byte_AC99-Map_obj2C
00012D6E 02                         byte_AC78:	dc.b 2
00012D6F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00012D74 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
00012D79 02                         byte_AC83:	dc.b 2
00012D7A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00012D7F F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
00012D84 02                         byte_AC8E:	dc.b 2
00012D85 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00012D8A F505 1018 10               		dc.b $F5, 5, $10, $18, $10
00012D8F 02                         byte_AC99:	dc.b 2
00012D90 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00012D95 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
00012D9A                            		even
00012D9A                            		even
00012D9A                            
00012D9A                            ; ===========================================================================
00012D9A                            ; ---------------------------------------------------------------------------
00012D9A                            ; Object 2D - Burrobot enemy (LZ)
00012D9A                            ; ---------------------------------------------------------------------------
00012D9A                            
00012D9A                            Obj2D:					; XREF: Obj_Index
00012D9A 7000                       		moveq	#0,d0
00012D9C 1028 0024                  		move.b	routine(a0),d0
00012DA0 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
00012DA4 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
00012DA8                            ; ===========================================================================
00012DA8 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
00012DAA 0000                       		dc.w Obj2D_Action-Obj2D_Index
00012DAC                            ; ===========================================================================
00012DAC                            
00012DAC                            Obj2D_Main:				; XREF: Obj2D_Index
00012DAC 5428 0024                  		addq.b	#2,routine(a0)
00012DB0 117C 0013 0016             		move.b	#$13,$16(a0)
00012DB6 117C 0008 0017             		move.b	#8,$17(a0)
00012DBC 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
00012DC4 317C 04A6 0002             		move.w	#$4A6,2(a0)
00012DCA 0028 0004 0001             		ori.b	#4,1(a0)
00012DD0 317C 0200 0018             		move.w	#$200,priority(a0)
00012DD6 117C 0005 0020             		move.b	#5,collision_flags(a0)
00012DDC 117C 000C 0023             		move.b	#$C,width_pixels(a0)
00012DE2 5C28 0025                  		addq.b	#6,routine_secondary(a0)	; run "Obj2D_ChkSonic" routine
00012DE6 117C 0002 001C             		move.b	#2,anim(a0)
00012DEC                            
00012DEC                            Obj2D_Action:				; XREF: Obj2D_Index
00012DEC 7000                       		moveq	#0,d0
00012DEE 1028 0025                  		move.b	routine_secondary(a0),d0
00012DF2 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
00012DF6 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
00012DFA 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
00012E00 4EBA F822                  		jsr	AnimateSprite
00012E04 6000 0000                  		bra.w	MarkObjGone
00012E08                            ; ===========================================================================
00012E08 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
00012E0A 0000                       		dc.w Obj2D_Move-Obj2D_Index2
00012E0C 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
00012E0E 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
00012E10                            ; ===========================================================================
00012E10                            
00012E10                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
00012E10 5368 0030                  		subq.w	#1,$30(a0)
00012E14 6A00                       		bpl.s	locret_AD42
00012E16 5428 0025                  		addq.b	#2,routine_secondary(a0)
00012E1A 317C 00FF 0030             		move.w	#$FF,$30(a0)
00012E20 317C 0080 0010             		move.w	#$80,x_vel(a0)
00012E26 117C 0001 001C             		move.b	#1,anim(a0)
00012E2C 0868 0000 0022             		bchg	#0,status(a0)	; change direction the Burrobot	is facing
00012E32 6700                       		beq.s	locret_AD42
00012E34 4468 0010                  		neg.w	x_vel(a0)		; change direction the Burrobot	is moving
00012E38                            
00012E38                            locret_AD42:
00012E38 4E75                       		rts	
00012E3A                            ; ===========================================================================
00012E3A                            
00012E3A                            Obj2D_Move:				; XREF: Obj2D_Index2
00012E3A 5368 0030                  		subq.w	#1,$30(a0)
00012E3E 6B00                       		bmi.s	loc_AD84
00012E40 4EB9 0000 0000             		jsr	SpeedToPos
00012E46 0868 0000 0032             		bchg	#0,$32(a0)
00012E4C 6600                       		bne.s	loc_AD78
00012E4E 3628 0008                  		move.w	8(a0),d3
00012E52 0643 000C                  		addi.w	#$C,d3
00012E56 0828 0000 0022             		btst	#0,status(a0)
00012E5C 6600                       		bne.s	loc_AD6A
00012E5E 0443 0018                  		subi.w	#$18,d3
00012E62                            
00012E62                            loc_AD6A:
00012E62 4EB9 0000 0000             		jsr	ObjHitFloor2
00012E68 0C41 000C                  		cmpi.w	#$C,d1
00012E6C 6C00                       		bge.s	loc_AD84
00012E6E 4E75                       		rts	
00012E70                            ; ===========================================================================
00012E70                            
00012E70                            loc_AD78:				; XREF: Obj2D_Move
00012E70 4EB9 0000 0000             		jsr	ObjHitFloor
00012E76 D368 000C                  		add.w	d1,$C(a0)
00012E7A 4E75                       		rts	
00012E7C                            ; ===========================================================================
00012E7C                            
00012E7C                            loc_AD84:				; XREF: Obj2D_Move
00012E7C 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
00012E82 6700                       		beq.s	loc_ADA4
00012E84 5528 0025                  		subq.b	#2,routine_secondary(a0)
00012E88 317C 003B 0030             		move.w	#$3B,$30(a0)
00012E8E 317C 0000 0010             		move.w	#0,x_vel(a0)
00012E94 117C 0000 001C             		move.b	#0,anim(a0)
00012E9A 4E75                       		rts	
00012E9C                            ; ===========================================================================
00012E9C                            
00012E9C                            loc_ADA4:
00012E9C 5428 0025                  		addq.b	#2,routine_secondary(a0)
00012EA0 317C FC00 0012             		move.w	#-$400,y_vel(a0)
00012EA6 117C 0002 001C             		move.b	#2,anim(a0)
00012EAC 4E75                       		rts	
00012EAE                            ; ===========================================================================
00012EAE                            
00012EAE                            Obj2D_Jump:				; XREF: Obj2D_Index2
00012EAE 4EB9 0000 0000             		jsr	SpeedToPos
00012EB4 0668 0018 0012             		addi.w	#$18,y_vel(a0)
00012EBA 6B00                       		bmi.s	locret_ADF0
00012EBC 117C 0003 001C             		move.b	#3,anim(a0)
00012EC2 4EB9 0000 0000             		jsr	ObjHitFloor
00012EC8 4A41                       		tst.w	d1
00012ECA 6A00                       		bpl.s	locret_ADF0
00012ECC D368 000C                  		add.w	d1,$C(a0)
00012ED0 317C 0000 0012             		move.w	#0,y_vel(a0)
00012ED6 117C 0001 001C             		move.b	#1,anim(a0)
00012EDC 317C 00FF 0030             		move.w	#$FF,$30(a0)
00012EE2 5528 0025                  		subq.b	#2,routine_secondary(a0)
00012EE6 4EB9 0000 0000             		jsr	Obj2D_ChkSonic2
00012EEC                            
00012EEC                            locret_ADF0:
00012EEC 4E75                       		rts	
00012EEE                            ; ===========================================================================
00012EEE                            
00012EEE                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
00012EEE 343C 0060                  		move.w	#$60,d2
00012EF2 4EB9 0000 0000             		jsr	Obj2D_ChkSonic2
00012EF8 6400                       		bcc.s	locret_AE20
00012EFA 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012EFE 9068 000C                  		sub.w	$C(a0),d0
00012F02 6400                       		bcc.s	locret_AE20
00012F04 0C40 FF80                  		cmpi.w	#-$80,d0
00012F08 6500                       		bcs.s	locret_AE20
00012F0A 4A78 FE08                  		tst.w	($FFFFFE08).w
00012F0E 6600                       		bne.s	locret_AE20
00012F10 5528 0025                  		subq.b	#2,routine_secondary(a0)
00012F14 3141 0010                  		move.w	d1,x_vel(a0)
00012F18 317C FC00 0012             		move.w	#-$400,y_vel(a0)
00012F1E                            
00012F1E                            locret_AE20:
00012F1E 4E75                       		rts	
00012F20                            
00012F20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F20                            
00012F20                            
00012F20                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
00012F20 323C 0080                  		move.w	#$80,d1
00012F24 08E8 0000 0022             		bset	#0,status(a0)
00012F2A 3038 D008                  		move.w	($FFFFD008).w,d0
00012F2E 9068 0008                  		sub.w	8(a0),d0
00012F32 6400                       		bcc.s	loc_AE40
00012F34 4440                       		neg.w	d0
00012F36 4441                       		neg.w	d1
00012F38 08A8 0000 0022             		bclr	#0,status(a0)
00012F3E                            
00012F3E                            loc_AE40:
00012F3E B042                       		cmp.w	d2,d0
00012F40 4E75                       		rts	
00012F42                            ; End of function Obj2D_ChkSonic2
00012F42                            
00012F42                            ; ===========================================================================
00012F42                            Ani_obj2D:
00012F42                            	include "_anim\obj2D.asm"
00012F42                            ; ---------------------------------------------------------------------------
00012F42                            ; Animation script - Burrobot enemy
00012F42                            ; ---------------------------------------------------------------------------
00012F42 0000                       		dc.w byte_AE4C-Ani_obj2D
00012F44 0000                       		dc.w byte_AE50-Ani_obj2D
00012F46 0000                       		dc.w byte_AE54-Ani_obj2D
00012F48 0000                       		dc.w byte_AE58-Ani_obj2D
00012F4A 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
00012F4E 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
00012F52 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
00012F56 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
00012F5A 00                         		even
00012F5A 00                         		even
00012F5A                            
00012F5A                            ; ---------------------------------------------------------------------------
00012F5A                            ; Sprite mappings - Burrobot enemy (LZ)
00012F5A                            ; ---------------------------------------------------------------------------
00012F5A                            Map_obj2D:
00012F5A                            	include "_maps\obj2D.asm"
00012F5A                            ; ---------------------------------------------------------------------------
00012F5A                            ; Sprite mappings - Burrobot enemy (LZ)
00012F5A                            ; ---------------------------------------------------------------------------
00012F5A 0000                       		dc.w byte_AE6A-Map_obj2D
00012F5C 0000                       		dc.w byte_AE75-Map_obj2D
00012F5E 0000                       		dc.w byte_AE80-Map_obj2D
00012F60 0000                       		dc.w byte_AE8B-Map_obj2D
00012F62 0000                       		dc.w byte_AE96-Map_obj2D
00012F64 0000                       		dc.w byte_AEA1-Map_obj2D
00012F66 0000                       		dc.w byte_AEAC-Map_obj2D
00012F68 02                         byte_AE6A:	dc.b 2
00012F69 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00012F6E 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
00012F73 02                         byte_AE75:	dc.b 2
00012F74 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
00012F79 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00012F7E 02                         byte_AE80:	dc.b 2
00012F7F E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
00012F84 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
00012F89 02                         byte_AE8B:	dc.b 2
00012F8A E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
00012F8F 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
00012F94 02                         byte_AE96:	dc.b 2
00012F95 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
00012F9A 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
00012F9F 02                         byte_AEA1:	dc.b 2
00012FA0 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
00012FA5 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
00012FAA 02                         byte_AEAC:	dc.b 2
00012FAB EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
00012FB0 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
00012FB6 00                         		even
00012FB6 00                         		even
00012FB6                            
00012FB6                            ; ===========================================================================
00012FB6                            ; ---------------------------------------------------------------------------
00012FB6                            ; Object 2F - large moving platforms (MZ)
00012FB6                            ; ---------------------------------------------------------------------------
00012FB6                            
00012FB6                            Obj2F:					; XREF: Obj_Index
00012FB6 7000                       		moveq	#0,d0
00012FB8 1028 0024                  		move.b	routine(a0),d0
00012FBC 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
00012FC0 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
00012FC4                            ; ===========================================================================
00012FC4 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
00012FC6 0000                       		dc.w Obj2F_Action-Obj2F_Index
00012FC8                            
00012FC8 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
00012FCA 0040                       		dc.b 0,	$40			; frame	number,	platform width
00012FCC 0000                       		dc.w Obj2F_Data3-Obj2F_Data
00012FCE 0140                       		dc.b 1,	$40
00012FD0 0000                       		dc.w Obj2F_Data2-Obj2F_Data
00012FD2 0220                       		dc.b 2,	$20
00012FD4                            ; ===========================================================================
00012FD4                            
00012FD4                            Obj2F_Main:				; XREF: Obj2F_Index
00012FD4 5428 0024                  		addq.b	#2,routine(a0)
00012FD8 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
00012FE0 317C C000 0002             		move.w	#$C000,2(a0)
00012FE6 117C 0004 0001             		move.b	#4,1(a0)
00012FEC 317C 0280 0018             		move.w	#$280,priority(a0)
00012FF2 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00012FF8 3168 0008 002A             		move.w	8(a0),objoff_2A(a0)
00012FFE 7000                       		moveq	#0,d0
00013000 1028 0028                  		move.b	subtype(a0),d0
00013004 E448                       		lsr.w	#2,d0
00013006 0240 001C                  		andi.w	#$1C,d0
0001300A 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0001300E 3019                       		move.w	(a1)+,d0
00013010 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
00013014 214A 0030                  		move.l	a2,$30(a0)
00013018 1159 001A                  		move.b	(a1)+,mapping_frame(a0)
0001301C 1151 0023                  		move.b	(a1),width_pixels(a0)
00013020 0228 000F 0028             		andi.b	#$F,subtype(a0)
00013026 117C 0040 0016             		move.b	#$40,$16(a0)
0001302C 08E8 0004 0001             		bset	#4,1(a0)
00013032                            
00013032                            Obj2F_Action:				; XREF: Obj2F_Index
00013032 4EB9 0000 0000             		jsr	Obj2F_Types
00013038 4A28 0025                  		tst.b	routine_secondary(a0)
0001303C 6700                       		beq.s	Obj2F_Solid
0001303E 7200                       		moveq	#0,d1
00013040 1228 0023                  		move.b	width_pixels(a0),d1
00013044 0641 000B                  		addi.w	#$B,d1
00013048 4EBA C19C                  		jsr	ExitPlatform
0001304C 0829 0003 0022             		btst	#3,status(a1)
00013052 6600 0000                  		bne.w	Obj2F_Slope
00013056 4228 0025                  		clr.b	routine_secondary(a0)
0001305A 6000                       		bra.s	Obj2F_Display
0001305C                            ; ===========================================================================
0001305C                            
0001305C                            Obj2F_Slope:				; XREF: Obj2F_Action
0001305C 7200                       		moveq	#0,d1
0001305E 1228 0023                  		move.b	width_pixels(a0),d1
00013062 0641 000B                  		addi.w	#$B,d1
00013066 2468 0030                  		movea.l	$30(a0),a2
0001306A 3428 0008                  		move.w	8(a0),d2
0001306E 4EBA D0DA                  		jsr	SlopeObject2
00013072 6000                       		bra.s	Obj2F_Display
00013074                            ; ===========================================================================
00013074                            
00013074                            Obj2F_Solid:				; XREF: Obj2F_Action
00013074 7200                       		moveq	#0,d1
00013076 1228 0023                  		move.b	width_pixels(a0),d1
0001307A 0641 000B                  		addi.w	#$B,d1
0001307E 343C 0020                  		move.w	#$20,d2
00013082 0C28 0002 001A             		cmpi.b	#2,mapping_frame(a0)
00013088 6600                       		bne.s	loc_AF8E
0001308A 343C 0030                  		move.w	#$30,d2
0001308E                            
0001308E                            loc_AF8E:
0001308E 2468 0030                  		movea.l	$30(a0),a2
00013092 4EB9 0000 0000             		jsr	SolidObject2F
00013098                            
00013098                            Obj2F_Display:				; XREF: Obj2F_Action
00013098 4EB9 0000 0000             		jsr	DisplaySprite
0001309E 6000 0000                  		bra.w	Obj2F_ChkDel
000130A2                            
000130A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000130A2                            
000130A2                            
000130A2                            Obj2F_Types:				; XREF: Obj2F_Action
000130A2 7000                       		moveq	#0,d0
000130A4 1028 0028                  		move.b	subtype(a0),d0
000130A8 0240 0007                  		andi.w	#7,d0
000130AC D040                       		add.w	d0,d0
000130AE 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
000130B2 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
000130B6                            ; End of function Obj2F_Types
000130B6                            
000130B6                            ; ===========================================================================
000130B6 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
000130B8 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
000130BA 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
000130BC 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
000130BE 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
000130C0 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
000130C2                            ; ===========================================================================
000130C2                            
000130C2                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
000130C2 4E75                       		rts			; type 00 platform doesn't move
000130C4                            ; ===========================================================================
000130C4                            
000130C4                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
000130C4 1038 FE60                  		move.b	($FFFFFE60).w,d0
000130C8 323C 0020                  		move.w	#$20,d1
000130CC 6000                       		bra.s	Obj2F_Move
000130CE                            ; ===========================================================================
000130CE                            
000130CE                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
000130CE 1038 FE64                  		move.b	($FFFFFE64).w,d0
000130D2 323C 0030                  		move.w	#$30,d1
000130D6 6000                       		bra.s	Obj2F_Move
000130D8                            ; ===========================================================================
000130D8                            
000130D8                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
000130D8 1038 FE68                  		move.b	($FFFFFE68).w,d0
000130DC 323C 0040                  		move.w	#$40,d1
000130E0 6000                       		bra.s	Obj2F_Move
000130E2                            ; ===========================================================================
000130E2                            
000130E2                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
000130E2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000130E6 323C 0060                  		move.w	#$60,d1
000130EA                            
000130EA                            Obj2F_Move:
000130EA 0828 0003 0028             		btst	#3,subtype(a0)
000130F0 6700                       		beq.s	loc_AFF2
000130F2 4440                       		neg.w	d0
000130F4 D041                       		add.w	d1,d0
000130F6                            
000130F6                            loc_AFF2:
000130F6 3228 002C                  		move.w	$2C(a0),d1
000130FA 9240                       		sub.w	d0,d1
000130FC 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
00013100 4E75                       		rts	
00013102                            ; ===========================================================================
00013102                            
00013102                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
00013102 1028 0034                  		move.b	$34(a0),d0
00013106 4A28 0025                  		tst.b	routine_secondary(a0)
0001310A 6600                       		bne.s	loc_B010
0001310C 5500                       		subq.b	#2,d0
0001310E 6400                       		bcc.s	loc_B01C
00013110 7000                       		moveq	#0,d0
00013112 6000                       		bra.s	loc_B01C
00013114                            ; ===========================================================================
00013114                            
00013114                            loc_B010:
00013114 5800                       		addq.b	#4,d0
00013116 0C00 0040                  		cmpi.b	#$40,d0
0001311A 6500                       		bcs.s	loc_B01C
0001311C 103C 0040                  		move.b	#$40,d0
00013120                            
00013120                            loc_B01C:
00013120 1140 0034                  		move.b	d0,$34(a0)
00013124 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001312A E848                       		lsr.w	#4,d0
0001312C 3200                       		move.w	d0,d1
0001312E D068 002C                  		add.w	$2C(a0),d0
00013132 3140 000C                  		move.w	d0,$C(a0)
00013136 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0001313C 6600                       		bne.s	loc_B07A
0001313E 4A28 0035                  		tst.b	$35(a0)
00013142 6600                       		bne.s	loc_B07A
00013144 117C 0001 0035             		move.b	#1,$35(a0)
0001314A 6100 0000                  		bsr.w	SingleObjLoad2
0001314E 6600                       		bne.s	loc_B07A
00013150 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
00013154 3368 0008 0008             		move.w	8(a0),8(a1)
0001315A 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
00013160 5069 002C                  		addq.w	#8,$2C(a1)
00013164 5769 002C                  		subq.w	#3,$2C(a1)
00013168 0469 0040 0008             		subi.w	#$40,8(a1)
0001316E 2368 0030 0030             		move.l	$30(a0),$30(a1)
00013174 2348 0038                  		move.l	a0,$38(a1)
00013178 2448                       		movea.l	a0,a2
0001317A 6100                       		bsr.s	sub_B09C
0001317C                            
0001317C                            loc_B07A:
0001317C 7400                       		moveq	#0,d2
0001317E 45E8 0036                  		lea	$36(a0),a2
00013182 141A                       		move.b	(a2)+,d2
00013184 5302                       		subq.b	#1,d2
00013186 6500                       		bcs.s	locret_B09A
00013188                            
00013188                            loc_B086:
00013188 7000                       		moveq	#0,d0
0001318A 101A                       		move.b	(a2)+,d0
0001318C ED48                       		lsl.w	#6,d0
0001318E 0640 D000                  		addi.w	#-$3000,d0
00013192 3240                       		movea.w	d0,a1
00013194 3341 003C                  		move.w	d1,$3C(a1)
00013198 51CA FFEE                  		dbf	d2,loc_B086
0001319C                            
0001319C                            locret_B09A:
0001319C 4E75                       		rts	
0001319E                            
0001319E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001319E                            
0001319E                            
0001319E                            sub_B09C:
0001319E 45EA 0036                  		lea	$36(a2),a2
000131A2 7000                       		moveq	#0,d0
000131A4 1012                       		move.b	(a2),d0
000131A6 5212                       		addq.b	#1,(a2)
000131A8 45F2 0001                  		lea	1(a2,d0.w),a2
000131AC 3009                       		move.w	a1,d0
000131AE 0440 D000                  		subi.w	#-$3000,d0
000131B2 EC48                       		lsr.w	#6,d0
000131B4 0240 007F                  		andi.w	#$7F,d0
000131B8 1480                       		move.b	d0,(a2)
000131BA 4E75                       		rts	
000131BC                            ; End of function sub_B09C
000131BC                            
000131BC                            ; ===========================================================================
000131BC                            
000131BC                            Obj2F_ChkDel:				; XREF: Obj2F_Display
000131BC 4A28 0035                  		tst.b	$35(a0)
000131C0 6700                       		beq.s	loc_B0C6
000131C2 4A28 0001                  		tst.b	1(a0)
000131C6 6A00                       		bpl.s	Obj2F_DelFlames
000131C8                            
000131C8                            loc_B0C6:
000131C8 3028 002A                  		move.w	objoff_2A(a0),d0
000131CC 4EF9 0000 0000             		jmp		MarkObjGone4
000131D2                            ; ===========================================================================
000131D2                            
000131D2                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
000131D2 7400                       		moveq	#0,d2
000131D4                            
000131D4                            loc_B0E8:
000131D4 45E8 0036                  		lea	$36(a0),a2
000131D8 1412                       		move.b	(a2),d2
000131DA 421A                       		clr.b	(a2)+
000131DC 5302                       		subq.b	#1,d2
000131DE 6500                       		bcs.s	locret_B116
000131E0                            
000131E0                            loc_B0F4:
000131E0 7000                       		moveq	#0,d0
000131E2 1012                       		move.b	(a2),d0
000131E4 421A                       		clr.b	(a2)+
000131E6 ED48                       		lsl.w	#6,d0
000131E8 0640 D000                  		addi.w	#-$3000,d0
000131EC 3240                       		movea.w	d0,a1
000131EE 4EB9 0000 0000             		jsr	DeleteObject2
000131F4 51CA FFEA                  		dbf	d2,loc_B0F4
000131F8 117C 0000 0035             		move.b	#0,$35(a0)
000131FE 117C 0000 0034             		move.b	#0,$34(a0)
00013204                            
00013204                            locret_B116:
00013204 4E75                       		rts	
00013206                            ; ===========================================================================
00013206                            ; ---------------------------------------------------------------------------
00013206                            ; Collision data for large moving platforms (MZ)
00013206                            ; ---------------------------------------------------------------------------
00013206                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
00013252                            		even
00013252                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0001327E                            		even
0001327E                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
000132CA                            		even
000132CA                            ; ===========================================================================
000132CA                            ; ---------------------------------------------------------------------------
000132CA                            ; Object 35 - fireball that sits on the	floor (MZ)
000132CA                            ; (appears when	you walk on sinking platforms)
000132CA                            ; ---------------------------------------------------------------------------
000132CA                            
000132CA                            Obj35:					; XREF: Obj_Index
000132CA 7000                       		moveq	#0,d0
000132CC 1028 0024                  		move.b	routine(a0),d0
000132D0 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
000132D4 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
000132D8                            ; ===========================================================================
000132D8 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
000132DA 0000                       		dc.w loc_B238-Obj35_Index
000132DC 0000                       		dc.w Obj35_Move-Obj35_Index
000132DE                            ; ===========================================================================
000132DE                            
000132DE                            Obj35_Main:				; XREF: Obj35_Index
000132DE 5428 0024                  		addq.b	#2,routine(a0)
000132E2 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
000132EA 317C 0345 0002             		move.w	#$345,2(a0)
000132F0 3168 0008 002A             		move.w	8(a0),objoff_2A(a0)
000132F6 117C 0004 0001             		move.b	#4,1(a0)
000132FC 317C 0080 0018             		move.w	#$80,priority(a0)
00013302 117C 008B 0020             		move.b	#$8B,collision_flags(a0)
00013308 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001330E 303C 00C2                  		move.w	#$C2,d0
00013312 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play flame sound
00013318 4A28 0028                  		tst.b	subtype(a0)
0001331C 6700                       		beq.s	loc_B238
0001331E 5428 0024                  		addq.b	#2,routine(a0)
00013322 6000 0000                  		bra.w	Obj35_Move
00013326                            ; ===========================================================================
00013326                            
00013326                            loc_B238:				; XREF: Obj35_Index
00013326 2268 0030                  		movea.l	$30(a0),a1
0001332A 3228 0008                  		move.w	8(a0),d1
0001332E 9268 002A                  		sub.w	objoff_2A(a0),d1
00013332 0641 000C                  		addi.w	#$C,d1
00013336 3001                       		move.w	d1,d0
00013338 E248                       		lsr.w	#1,d0
0001333A 1031 0000                  		move.b	(a1,d0.w),d0
0001333E 4440                       		neg.w	d0
00013340 D068 002C                  		add.w	$2C(a0),d0
00013344 3400                       		move.w	d0,d2
00013346 D068 003C                  		add.w	$3C(a0),d0
0001334A 3140 000C                  		move.w	d0,$C(a0)
0001334E 0C41 0084                  		cmpi.w	#$84,d1
00013352 6400                       		bcc.s	loc_B2B0
00013354 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0001335C 0C41 0080                  		cmpi.w	#$80,d1
00013360 6400                       		bcc.s	loc_B2B0
00013362 2028 0008                  		move.l	8(a0),d0
00013366 0680 0008 0000             		addi.l	#$80000,d0
0001336C 0280 000F FFFF             		andi.l	#$FFFFF,d0
00013372 6600                       		bne.s	loc_B2B0
00013374 6100 0000                  		bsr.w	SingleObjLoad2
00013378 6600                       		bne.s	loc_B2B0
0001337A 12BC 0035                  		move.b	#$35,0(a1)
0001337E 3368 0008 0008             		move.w	8(a0),8(a1)
00013384 3342 002C                  		move.w	d2,$2C(a1)
00013388 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0001338E 137C 0001 0028             		move.b	#1,subtype(a1)
00013394 2468 0038                  		movea.l	$38(a0),a2
00013398 6100 FE04                  		bsr.w	sub_B09C
0001339C                            
0001339C                            loc_B2B0:
0001339C 6000                       		bra.s	Obj35_Animate
0001339E                            ; ===========================================================================
0001339E                            
0001339E                            Obj35_Move:				; XREF: Obj35_Index
0001339E 3028 002C                  		move.w	$2C(a0),d0
000133A2 D068 003C                  		add.w	$3C(a0),d0
000133A6 3140 000C                  		move.w	d0,$C(a0)
000133AA                            
000133AA                            Obj35_Animate:				; XREF: loc_B238
000133AA 43F9 0000 0000             		lea	(Ani_obj35).l,a1
000133B0 4EBA F272                  		jsr	AnimateSprite
000133B4 6000 0000                  		bra.w	DisplaySprite
000133B8                            ; ===========================================================================
000133B8                            Ani_obj35:
000133B8                            	include "_anim\obj35.asm"
000133B8                            ; ---------------------------------------------------------------------------
000133B8                            ; Animation script - fireball that sits on the	floor (MZ)
000133B8                            ; ---------------------------------------------------------------------------
000133B8 0000                       		dc.w byte_B2CE-Ani_obj35
000133BA 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
000133C0                            		even
000133C0                            		even
000133C0                            
000133C0                            ; ---------------------------------------------------------------------------
000133C0                            ; Sprite mappings - large moving platforms (MZ)
000133C0                            ; ---------------------------------------------------------------------------
000133C0                            Map_obj2F:
000133C0                            	include "_maps\obj2F.asm"
000133C0                            ; ---------------------------------------------------------------------------
000133C0                            ; Sprite mappings - large moving platforms (MZ)
000133C0                            ; ---------------------------------------------------------------------------
000133C0 0000                       		dc.w byte_B2DA-Map_obj2F
000133C2 0000                       		dc.w byte_B31C-Map_obj2F
000133C4 0000                       		dc.w byte_B34F-Map_obj2F
000133C6 0D                         byte_B2DA:	dc.b $D
000133C7 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
000133CC F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
000133D1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
000133D6 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
000133DB F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
000133E0 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
000133E5 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
000133EA D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
000133EF F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
000133F4 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
000133F9 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
000133FE D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
00013403 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
00013408 0A                         byte_B31C:	dc.b $A
00013409 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0001340E F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
00013413 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
00013418 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0001341D E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
00013422 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
00013427 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0001342C E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
00013431 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
00013436 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0001343B 06                         byte_B34F:	dc.b 6
0001343C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
00013441 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
00013446 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0001344B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
00013450 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
00013455 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0001345A                            		even
0001345A                            		even
0001345A                            
0001345A                            ; ---------------------------------------------------------------------------
0001345A                            ; Sprite mappings - lava balls (MZ, SLZ)
0001345A                            ; ---------------------------------------------------------------------------
0001345A                            Map_obj14:
0001345A                            	include "_maps\obj14.asm"
0001345A                            ; ---------------------------------------------------------------------------
0001345A                            ; Sprite mappings - lava balls (MZ, SLZ)
0001345A                            ; ---------------------------------------------------------------------------
0001345A 0000                       		dc.w byte_B37A-Map_obj14
0001345C 0000                       		dc.w byte_B380-Map_obj14
0001345E 0000                       		dc.w byte_B386-Map_obj14
00013460 0000                       		dc.w byte_B38C-Map_obj14
00013462 0000                       		dc.w byte_B392-Map_obj14
00013464 0000                       		dc.w byte_B398-Map_obj14
00013466 01                         byte_B37A:	dc.b 1
00013467 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0001346C 01                         byte_B380:	dc.b 1
0001346D E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
00013472 01                         byte_B386:	dc.b 1
00013473 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
00013478 01                         byte_B38C:	dc.b 1
00013479 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0001347E 01                         byte_B392:	dc.b 1
0001347F F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
00013484 01                         byte_B398:	dc.b 1
00013485 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0001348A                            		even
0001348A                            		even
0001348A                            
0001348A                            ; ===========================================================================
0001348A                            ; ---------------------------------------------------------------------------
0001348A                            ; Object 30 - large green glassy blocks	(MZ)
0001348A                            ; ---------------------------------------------------------------------------
0001348A                            
0001348A                            Obj30:					; XREF: Obj_Index
0001348A 7000                       		moveq	#0,d0
0001348C 1028 0024                  		move.b	routine(a0),d0
00013490 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
00013494 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
00013498 4EF9 0000 0000             		jmp		MarkObjGone
0001349E                            ; ===========================================================================
0001349E 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
000134A0 0000                       		dc.w Obj30_Block012-Obj30_Index
000134A2 0000                       		dc.w Obj30_Reflect012-Obj30_Index
000134A4 0000                       		dc.w Obj30_Block34-Obj30_Index
000134A6 0000                       		dc.w Obj30_Reflect34-Obj30_Index
000134A8                            
000134A8 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
000134AB 0400 01                    		dc.b 4,	0, 1
000134AE 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
000134B1 0800 01                    		dc.b 8,	0, 1
000134B4                            ; ===========================================================================
000134B4                            
000134B4                            Obj30_Main:				; XREF: Obj30_Index
000134B4 45F9 0001 34A8             		lea	(Obj30_Vars1).l,a2
000134BA 7201                       		moveq	#1,d1
000134BC 117C 0048 0016             		move.b	#$48,$16(a0)
000134C2 0C28 0003 0028             		cmpi.b	#3,subtype(a0)	; is object type 0/1/2 ?
000134C8 6500                       		bcs.s	loc_B40C	; if yes, branch
000134CA 45F9 0001 34AE             		lea	(Obj30_Vars2).l,a2
000134D0 7201                       		moveq	#1,d1
000134D2 117C 0038 0016             		move.b	#$38,$16(a0)
000134D8                            
000134D8                            loc_B40C:
000134D8 2248                       		movea.l	a0,a1
000134DA 6000                       		bra.s	Obj30_Load	; load main object
000134DC                            ; ===========================================================================
000134DC                            
000134DC                            Obj30_Loop:
000134DC 6100 0000                  		bsr.w	SingleObjLoad2
000134E0 6600                       		bne.s	loc_B480
000134E2                            
000134E2                            Obj30_Load:				; XREF: Obj30_Main
000134E2 135A 0024                  		move.b	(a2)+,routine(a1)
000134E6 12BC 0030                  		move.b	#$30,0(a1)
000134EA 3368 0008 0008             		move.w	8(a0),8(a1)
000134F0 101A                       		move.b	(a2)+,d0
000134F2 4880                       		ext.w	d0
000134F4 D068 000C                  		add.w	$C(a0),d0
000134F8 3340 000C                  		move.w	d0,$C(a1)
000134FC 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
00013504 337C C38E 0002             		move.w	#$C38E,2(a1)
0001350A 137C 0004 0001             		move.b	#4,1(a1)
00013510 3369 000C 0030             		move.w	$C(a1),$30(a1)
00013516 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
0001351C 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00013522 337C 0200 0018             		move.w	#$200,priority(a1)
00013528 135A 001A                  		move.b	(a2)+,mapping_frame(a1)
0001352C 2348 003C                  		move.l	a0,$3C(a1)
00013530 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
00013534                            
00013534 137C 0010 0023             		move.b	#$10,width_pixels(a1)
0001353A 337C 0180 0018             		move.w	#$180,priority(a1)
00013540 5029 0028                  		addq.b	#8,subtype(a1)
00013544 0229 000F 0028             		andi.b	#$F,subtype(a1)
0001354A                            
0001354A                            loc_B480:
0001354A 317C 0090 0032             		move.w	#$90,$32(a0)
00013550 08E8 0004 0001             		bset	#4,1(a0)
00013556                            
00013556                            Obj30_Block012:				; XREF: Obj30_Index
00013556 4EB9 0000 0000             		jsr	Obj30_Types
0001355C 323C 002B                  		move.w	#$2B,d1
00013560 343C 0048                  		move.w	#$48,d2
00013564 363C 0049                  		move.w	#$49,d3
00013568 3828 0008                  		move.w	8(a0),d4
0001356C 6000 0000                  		bra.w	SolidObject
00013570                            ; ===========================================================================
00013570                            
00013570                            Obj30_Reflect012:			; XREF: Obj30_Index
00013570 2268 003C                  		movea.l	$3C(a0),a1
00013574 3169 0032 0032             		move.w	$32(a1),$32(a0)
0001357A 6000 0000                  		bra.w	Obj30_Types
0001357E                            ; ===========================================================================
0001357E                            
0001357E                            Obj30_Block34:				; XREF: Obj30_Index
0001357E 4EB9 0000 0000             		jsr	Obj30_Types
00013584 323C 002B                  		move.w	#$2B,d1
00013588 343C 0038                  		move.w	#$38,d2
0001358C 363C 0039                  		move.w	#$39,d3
00013590 3828 0008                  		move.w	8(a0),d4
00013594 6000 0000                  		bra.w	SolidObject
00013598                            ; ===========================================================================
00013598                            
00013598                            Obj30_Reflect34:			; XREF: Obj30_Index
00013598 2268 003C                  		movea.l	$3C(a0),a1
0001359C 3169 0032 0032             		move.w	$32(a1),$32(a0)
000135A2 3169 000C 0030             		move.w	$C(a1),$30(a0)
000135A8 6000 0002                  		bra.w	*+4
000135AC                            
000135AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135AC                            
000135AC                            
000135AC                            Obj30_Types:				; XREF: Obj30_Block012; et al
000135AC 7000                       		moveq	#0,d0
000135AE 1028 0028                  		move.b	subtype(a0),d0
000135B2 0240 0007                  		andi.w	#7,d0
000135B6 D040                       		add.w	d0,d0
000135B8 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
000135BC 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
000135C0                            ; End of function Obj30_Types
000135C0                            
000135C0                            ; ===========================================================================
000135C0 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
000135C2 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
000135C4 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
000135C6 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
000135C8 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
000135CA                            ; ===========================================================================
000135CA                            
000135CA                            Obj30_Type00:				; XREF: Obj30_TypeIndex
000135CA 4E75                       		rts	
000135CC                            ; ===========================================================================
000135CC                            
000135CC                            Obj30_Type01:				; XREF: Obj30_TypeIndex
000135CC 1038 FE70                  		move.b	($FFFFFE70).w,d0
000135D0 323C 0040                  		move.w	#$40,d1
000135D4 6000                       		bra.s	loc_B514
000135D6                            ; ===========================================================================
000135D6                            
000135D6                            Obj30_Type02:				; XREF: Obj30_TypeIndex
000135D6 1038 FE70                  		move.b	($FFFFFE70).w,d0
000135DA 323C 0040                  		move.w	#$40,d1
000135DE 4440                       		neg.w	d0
000135E0 D041                       		add.w	d1,d0
000135E2                            
000135E2                            loc_B514:				; XREF: Obj30_Type01
000135E2 0828 0003 0028             		btst	#3,subtype(a0)
000135E8 6700                       		beq.s	loc_B526
000135EA 4440                       		neg.w	d0
000135EC D041                       		add.w	d1,d0
000135EE E208                       		lsr.b	#1,d0
000135F0 0640 0020                  		addi.w	#$20,d0
000135F4                            
000135F4                            loc_B526:
000135F4 6000 0000                  		bra.w	loc_B64E
000135F8                            ; ===========================================================================
000135F8                            
000135F8                            Obj30_Type03:				; XREF: Obj30_TypeIndex
000135F8 0828 0003 0028             		btst	#3,subtype(a0)
000135FE 6700                       		beq.s	loc_B53E
00013600 1038 FE70                  		move.b	($FFFFFE70).w,d0
00013604 0440 0010                  		subi.w	#$10,d0
00013608 6000 0000                  		bra.w	loc_B64E
0001360C                            ; ===========================================================================
0001360C                            
0001360C                            loc_B53E:
0001360C 0828 0003 0022             		btst	#3,status(a0)
00013612 6600                       		bne.s	loc_B54E
00013614 08A8 0000 0034             		bclr	#0,$34(a0)
0001361A 6000                       		bra.s	loc_B582
0001361C                            ; ===========================================================================
0001361C                            
0001361C                            loc_B54E:
0001361C 4A28 0034                  		tst.b	$34(a0)
00013620 6600                       		bne.s	loc_B582
00013622 117C 0001 0034             		move.b	#1,$34(a0)
00013628 08E8 0000 0035             		bset	#0,$35(a0)
0001362E 6700                       		beq.s	loc_B582
00013630 08E8 0007 0034             		bset	#7,$34(a0)
00013636 317C 0010 0036             		move.w	#$10,$36(a0)
0001363C 117C 000A 0038             		move.b	#$A,$38(a0)
00013642 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
00013648 6600                       		bne.s	loc_B582
0001364A 317C 0040 0036             		move.w	#$40,$36(a0)
00013650                            
00013650                            loc_B582:
00013650 4A28 0034                  		tst.b	$34(a0)
00013654 6A00                       		bpl.s	loc_B5AA
00013656 4A28 0038                  		tst.b	$38(a0)
0001365A 6700                       		beq.s	loc_B594
0001365C 5328 0038                  		subq.b	#1,$38(a0)
00013660 6600                       		bne.s	loc_B5AA
00013662                            
00013662                            loc_B594:
00013662 4A68 0032                  		tst.w	$32(a0)
00013666 6700                       		beq.s	loc_B5A4
00013668 5368 0032                  		subq.w	#1,$32(a0)
0001366C 5368 0036                  		subq.w	#1,$36(a0)
00013670 6600                       		bne.s	loc_B5AA
00013672                            
00013672                            loc_B5A4:
00013672 08A8 0007 0034             		bclr	#7,$34(a0)
00013678                            
00013678                            loc_B5AA:
00013678 3028 0032                  		move.w	$32(a0),d0
0001367C 6000                       		bra.s	loc_B64E
0001367E                            ; ===========================================================================
0001367E                            
0001367E                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0001367E 0828 0003 0028             		btst	#3,subtype(a0)
00013684 6700                       		beq.s	Obj30_ChkSwitch
00013686 1038 FE70                  		move.b	($FFFFFE70).w,d0
0001368A 0440 0010                  		subi.w	#$10,d0
0001368E 6000                       		bra.s	loc_B64E
00013690                            ; ===========================================================================
00013690                            
00013690                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
00013690 4A28 0034                  		tst.b	$34(a0)
00013694 6600                       		bne.s	loc_B640
00013696 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001369A 7000                       		moveq	#0,d0
0001369C 1028 0028                  		move.b	subtype(a0),d0	; load object type number
000136A0 E848                       		lsr.w	#4,d0		; read only the	first nybble
000136A2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
000136A6 6700                       		beq.s	loc_B64A	; if not, branch
000136A8 117C 0001 0034             		move.b	#1,$34(a0)
000136AE                            
000136AE                            loc_B640:
000136AE 4A68 0032                  		tst.w	$32(a0)
000136B2 6700                       		beq.s	loc_B64A
000136B4 5568 0032                  		subq.w	#2,$32(a0)
000136B8                            
000136B8                            loc_B64A:
000136B8 3028 0032                  		move.w	$32(a0),d0
000136BC                            
000136BC                            loc_B64E:
000136BC 3228 0030                  		move.w	$30(a0),d1
000136C0 9240                       		sub.w	d0,d1
000136C2 3141 000C                  		move.w	d1,$C(a0)
000136C6 4E75                       		rts	
000136C8                            ; ===========================================================================
000136C8                            ; ---------------------------------------------------------------------------
000136C8                            ; Sprite mappings - large green	glassy blocks (MZ)
000136C8                            ; ---------------------------------------------------------------------------
000136C8                            Map_obj30:
000136C8                            	include "_maps\obj30.asm"
000136C8                            ; ---------------------------------------------------------------------------
000136C8                            ; Sprite mappings - large green	glassy blocks (MZ)
000136C8                            ; ---------------------------------------------------------------------------
000136C8 0000                       		dc.w byte_B600-Map_obj30
000136CA 0000                       		dc.w byte_B63D-Map_obj30
000136CC 0000                       		dc.w byte_B648-Map_obj30
000136CE 0C                         byte_B600:	dc.b $C
000136CF B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
000136D4 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
000136D9 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
000136DE C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
000136E3 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
000136E8 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
000136ED 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
000136F2 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
000136F7 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
000136FC 200F 0804 00               		dc.b $20, $F, 8, 4, 0
00013701 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
00013706 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0001370B 02                         byte_B63D:	dc.b 2
0001370C 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
00013711 0006 0014 00               		dc.b 0,	6, 0, $14, 0
00013716 0A                         byte_B648:	dc.b $A
00013717 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0001371C C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
00013721 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
00013726 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0001372B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00013730 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00013735 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0001373A 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0001373F 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
00013744 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0001374A 00                         		even
0001374A 00                         		even
0001374A                            
0001374A                            ; ===========================================================================
0001374A                            ; ---------------------------------------------------------------------------
0001374A                            ; Object 31 - stomping metal blocks on chains (MZ)
0001374A                            ; ---------------------------------------------------------------------------
0001374A                            
0001374A                            Obj31:					; XREF: Obj_Index
0001374A 7000                       		moveq	#0,d0
0001374C 1028 0024                  		move.b	routine(a0),d0
00013750 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
00013754 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
00013758                            ; ===========================================================================
00013758 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0001375A 0000                       		dc.w loc_B798-Obj31_Index
0001375C 0000                       		dc.w loc_B7FE-Obj31_Index
0001375E 0000                       		dc.w Obj31_Display2-Obj31_Index
00013760 0000                       		dc.w loc_B7E2-Obj31_Index
00013762                            
00013762 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
00013764 0100                       		dc.b 1,	0
00013766                            
00013766 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
00013769 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0001376C 08CC 03                    		dc.b 8,	$CC, 3
0001376F 06F0 02                    		dc.b 6,	$F0, 2
00013772                            
00013772 7000 A000                  word_B6A4:	dc.w $7000, $A000
00013776 5000 7800                  		dc.w $5000, $7800
0001377A 3800 5800                  		dc.w $3800, $5800
0001377E B800                       		dc.w $B800
00013780                            ; ===========================================================================
00013780                            
00013780                            Obj31_Main:				; XREF: Obj31_Index
00013780 7000                       		moveq	#0,d0
00013782 1028 0028                  		move.b	subtype(a0),d0
00013786 6A00                       		bpl.s	loc_B6CE
00013788 0240 007F                  		andi.w	#$7F,d0
0001378C D040                       		add.w	d0,d0
0001378E 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
00013792 115A 003A                  		move.b	(a2)+,$3A(a0)
00013796 101A                       		move.b	(a2)+,d0
00013798 1140 0028                  		move.b	d0,subtype(a0)
0001379C                            
0001379C                            loc_B6CE:
0001379C 0200 000F                  		andi.b	#$F,d0
000137A0 D040                       		add.w	d0,d0
000137A2 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
000137A6 4A40                       		tst.w	d0
000137A8 6600                       		bne.s	loc_B6E0
000137AA 3142 0032                  		move.w	d2,$32(a0)
000137AE                            
000137AE                            loc_B6E0:
000137AE 45F9 0001 3766             		lea	(Obj31_Var).l,a2
000137B4 2248                       		movea.l	a0,a1
000137B6 7203                       		moveq	#3,d1
000137B8 6000                       		bra.s	Obj31_MakeStomper
000137BA                            ; ===========================================================================
000137BA                            
000137BA                            Obj31_Loop:
000137BA 6100 0000                  		bsr.w	SingleObjLoad2
000137BE 6600 0000                  		bne.w	Obj31_SetSize
000137C2                            
000137C2                            Obj31_MakeStomper:			; XREF: Obj31_Main
000137C2 135A 0024                  		move.b	(a2)+,routine(a1)
000137C6 12BC 0031                  		move.b	#$31,0(a1)
000137CA 3368 0008 0008             		move.w	8(a0),8(a1)
000137D0 101A                       		move.b	(a2)+,d0
000137D2 4880                       		ext.w	d0
000137D4 D068 000C                  		add.w	$C(a0),d0
000137D8 3340 000C                  		move.w	d0,$C(a1)
000137DC 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
000137E4 337C 0300 0002             		move.w	#$300,2(a1)
000137EA 137C 0004 0001             		move.b	#4,1(a1)
000137F0 3369 000C 0030             		move.w	$C(a1),$30(a1)
000137F6 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
000137FC 137C 0010 0023             		move.b	#$10,width_pixels(a1)
00013802 3342 0034                  		move.w	d2,$34(a1)
00013806 337C 0200 0018             		move.w	#$200,priority(a1)
0001380C 135A 001A                  		move.b	(a2)+,mapping_frame(a1)
00013810 0C29 0001 001A             		cmpi.b	#1,mapping_frame(a1)
00013816 6600                       		bne.s	loc_B76A
00013818 5341                       		subq.w	#1,d1
0001381A 1028 0028                  		move.b	subtype(a0),d0
0001381E 0240 00F0                  		andi.w	#$F0,d0
00013822 0C40 0020                  		cmpi.w	#$20,d0
00013826 679A                       		beq.s	Obj31_MakeStomper
00013828 137C 0038 0023             		move.b	#$38,width_pixels(a1)
0001382E 137C 0090 0020             		move.b	#$90,collision_flags(a1)
00013834 5241                       		addq.w	#1,d1
00013836                            
00013836                            loc_B76A:
00013836 2348 003C                  		move.l	a0,$3C(a1)
0001383A 51C9 FF7E                  		dbf	d1,Obj31_Loop
0001383E                            
0001383E 337C 0180 0018             		move.w	#$180,priority(a1)
00013844                            
00013844                            Obj31_SetSize:
00013844 7000                       		moveq	#0,d0
00013846 1028 0028                  		move.b	subtype(a0),d0
0001384A E648                       		lsr.w	#3,d0
0001384C 0200 000E                  		andi.b	#$E,d0
00013850 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
00013854 115A 0023                  		move.b	(a2)+,width_pixels(a0)
00013858 115A 001A                  		move.b	(a2)+,mapping_frame(a0)
0001385C 6000                       		bra.s	loc_B798
0001385E                            ; ===========================================================================
0001385E 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
00013860 3009                       		dc.b $30, 9
00013862 100A                       		dc.b $10, $A
00013864                            ; ===========================================================================
00013864                            
00013864                            loc_B798:				; XREF: Obj31_Index
00013864 4EB9 0000 0000             		jsr	Obj31_Types
0001386A 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
00013870 7200                       		moveq	#0,d1
00013872 1228 0023                  		move.b	width_pixels(a0),d1
00013876 0641 000B                  		addi.w	#$B,d1
0001387A 343C 000C                  		move.w	#$C,d2
0001387E 363C 000D                  		move.w	#$D,d3
00013882 3828 0008                  		move.w	8(a0),d4
00013886 4EB9 0000 0000             		jsr	SolidObject
0001388C 0828 0003 0022             		btst	#3,status(a0)
00013892 6700                       		beq.s	Obj31_Display
00013894 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0001389A 6400                       		bcc.s	Obj31_Display
0001389C 2448                       		movea.l	a0,a2
0001389E 41F8 D000                  		lea	($FFFFD000).w,a0
000138A2 4EB9 0000 0000             		jsr	KillCharacter
000138A8 204A                       		movea.l	a2,a0
000138AA                            
000138AA                            Obj31_Display:
000138AA 4EB9 0000 0000             		jsr	DisplaySprite
000138B0 6000 0000                  		bra.w	Obj31_ChkDel
000138B4                            ; ===========================================================================
000138B4                            
000138B4                            loc_B7E2:				; XREF: Obj31_Index
000138B4 117C 0080 0016             		move.b	#$80,$16(a0)
000138BA 08E8 0004 0001             		bset	#4,1(a0)
000138C0 2268 003C                  		movea.l	$3C(a0),a1
000138C4 1029 0032                  		move.b	$32(a1),d0
000138C8 EA08                       		lsr.b	#5,d0
000138CA 5600                       		addq.b	#3,d0
000138CC 1140 001A                  		move.b	d0,mapping_frame(a0)
000138D0                            
000138D0                            loc_B7FE:				; XREF: Obj31_Index
000138D0 2268 003C                  		movea.l	$3C(a0),a1
000138D4 7000                       		moveq	#0,d0
000138D6 1029 0032                  		move.b	$32(a1),d0
000138DA D068 0030                  		add.w	$30(a0),d0
000138DE 3140 000C                  		move.w	d0,$C(a0)
000138E2                            
000138E2                            Obj31_Display2:				; XREF: Obj31_Index
000138E2 4EB9 0000 0000             		jsr	DisplaySprite
000138E8                            
000138E8                            Obj31_ChkDel:				; XREF: Obj31_Display
000138E8 4EF9 0000 0000             		jmp		MarkObjGone
000138EE                            ; ===========================================================================
000138EE                            
000138EE                            Obj31_Types:				; XREF: loc_B798
000138EE 1028 0028                  		move.b	subtype(a0),d0
000138F2 0240 000F                  		andi.w	#$F,d0
000138F6 D040                       		add.w	d0,d0
000138F8 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
000138FC 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
00013900                            ; ===========================================================================
00013900 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
00013902 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
00013904 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
00013906 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
00013908 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0001390A 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0001390C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0001390E                            ; ===========================================================================
0001390E                            
0001390E                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0001390E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00013912 7000                       		moveq	#0,d0
00013914 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
00013918 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0001391C 6700                       		beq.s	loc_B8A8	; if not, branch
0001391E 4A78 F7A4                  		tst.w	($FFFFF7A4).w
00013922 6A00                       		bpl.s	loc_B872
00013924 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0001392A 6700                       		beq.s	loc_B8A0
0001392C                            
0001392C                            loc_B872:
0001392C 4A68 0032                  		tst.w	$32(a0)
00013930 6700                       		beq.s	loc_B8A0
00013932 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00013936 0200 000F                  		andi.b	#$F,d0
0001393A 6600                       		bne.s	loc_B892
0001393C 4A28 0001                  		tst.b	1(a0)
00013940 6A00                       		bpl.s	loc_B892
00013942 303C 00C7                  		move.w	#$C7,d0
00013946 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0001394C                            
0001394C                            loc_B892:
0001394C 0468 0080 0032             		subi.w	#$80,$32(a0)
00013952 6400                       		bcc.s	Obj31_Restart
00013954 317C 0000 0032             		move.w	#0,$32(a0)
0001395A                            
0001395A                            loc_B8A0:
0001395A 317C 0000 0012             		move.w	#0,$12(a0)
00013960 6000                       		bra.s	Obj31_Restart
00013962                            ; ===========================================================================
00013962                            
00013962                            loc_B8A8:				; XREF: Obj31_Type00
00013962 3228 0034                  		move.w	$34(a0),d1
00013966 B268 0032                  		cmp.w	$32(a0),d1
0001396A 6700                       		beq.s	Obj31_Restart
0001396C 3028 0012                  		move.w	$12(a0),d0
00013970 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
00013976 D168 0032                  		add.w	d0,$32(a0)
0001397A B268 0032                  		cmp.w	$32(a0),d1
0001397E 6200                       		bhi.s	Obj31_Restart
00013980 3141 0032                  		move.w	d1,$32(a0)
00013984 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0001398A 4A28 0001                  		tst.b	1(a0)
0001398E 6A00                       		bpl.s	Obj31_Restart
00013990 303C 00BD                  		move.w	#$BD,d0
00013994 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play stomping sound
0001399A                            
0001399A                            Obj31_Restart:
0001399A 7000                       		moveq	#0,d0
0001399C 1028 0032                  		move.b	$32(a0),d0
000139A0 D068 0030                  		add.w	$30(a0),d0
000139A4 3140 000C                  		move.w	d0,$C(a0)
000139A8 4E75                       		rts	
000139AA                            ; ===========================================================================
000139AA                            
000139AA                            Obj31_Type01:				; XREF: Obj31_TypeIndex
000139AA 4A68 0036                  		tst.w	$36(a0)
000139AE 6700                       		beq.s	loc_B938
000139B0 4A68 0038                  		tst.w	$38(a0)
000139B4 6700                       		beq.s	loc_B902
000139B6 5368 0038                  		subq.w	#1,$38(a0)
000139BA 6000                       		bra.s	loc_B97C
000139BC                            ; ===========================================================================
000139BC                            
000139BC                            loc_B902:
000139BC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000139C0 0200 000F                  		andi.b	#$F,d0
000139C4 6600                       		bne.s	loc_B91C
000139C6 4A28 0001                  		tst.b	1(a0)
000139CA 6A00                       		bpl.s	loc_B91C
000139CC 303C 00C7                  		move.w	#$C7,d0
000139D0 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play rising chain sound
000139D6                            
000139D6                            loc_B91C:
000139D6 0468 0080 0032             		subi.w	#$80,$32(a0)
000139DC 6400                       		bcc.s	loc_B97C
000139DE 317C 0000 0032             		move.w	#0,$32(a0)
000139E4 317C 0000 0012             		move.w	#0,$12(a0)
000139EA 317C 0000 0036             		move.w	#0,$36(a0)
000139F0 6000                       		bra.s	loc_B97C
000139F2                            ; ===========================================================================
000139F2                            
000139F2                            loc_B938:				; XREF: Obj31_Type01
000139F2 3228 0034                  		move.w	$34(a0),d1
000139F6 B268 0032                  		cmp.w	$32(a0),d1
000139FA 6700                       		beq.s	loc_B97C
000139FC 3028 0012                  		move.w	$12(a0),d0
00013A00 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
00013A06 D168 0032                  		add.w	d0,$32(a0)
00013A0A B268 0032                  		cmp.w	$32(a0),d1
00013A0E 6200                       		bhi.s	loc_B97C
00013A10 3141 0032                  		move.w	d1,$32(a0)
00013A14 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
00013A1A 317C 0001 0036             		move.w	#1,$36(a0)
00013A20 317C 003C 0038             		move.w	#$3C,$38(a0)
00013A26 4A28 0001                  		tst.b	1(a0)
00013A2A 6A00                       		bpl.s	loc_B97C
00013A2C 303C 00D5                  		move.w	#$D5,d0
00013A30 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play stomping sound
00013A36                            
00013A36                            loc_B97C:
00013A36 6000 FF62                  		bra.w	Obj31_Restart
00013A3A                            ; ===========================================================================
00013A3A                            
00013A3A                            Obj31_Type03:				; XREF: Obj31_TypeIndex
00013A3A 3038 D008                  		move.w	($FFFFD008).w,d0
00013A3E 9068 0008                  		sub.w	8(a0),d0
00013A42 6400                       		bcc.s	loc_B98C
00013A44 4440                       		neg.w	d0
00013A46                            
00013A46                            loc_B98C:
00013A46 0C40 0090                  		cmpi.w	#$90,d0
00013A4A 6400                       		bcc.s	loc_B996
00013A4C 5228 0028                  		addq.b	#1,subtype(a0)
00013A50                            
00013A50                            loc_B996:
00013A50 6000 FF48                  		bra.w	Obj31_Restart
00013A54                            ; ===========================================================================
00013A54                            ; ---------------------------------------------------------------------------
00013A54                            ; Object 45 - spiked metal block from beta version (MZ)
00013A54                            ; ---------------------------------------------------------------------------
00013A54                            
00013A54                            Obj45:					; XREF: Obj_Index
00013A54 7000                       		moveq	#0,d0
00013A56 1028 0024                  		move.b	routine(a0),d0
00013A5A 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
00013A5E 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
00013A62                            ; ===========================================================================
00013A62 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
00013A64 0000                       		dc.w Obj45_Solid-Obj45_Index
00013A66 0000                       		dc.w loc_BA8E-Obj45_Index
00013A68 0000                       		dc.w Obj45_Display-Obj45_Index
00013A6A 0000                       		dc.w loc_BA7A-Obj45_Index
00013A6C                            
00013A6C 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
00013A6F 04E4 01                    		dc.b	4, $E4,	  1
00013A72 0834 03                    		dc.b	8, $34,	  3
00013A75 0628 02                    		dc.b	6, $28,	  2
00013A78                            
00013A78 3800                       word_B9BE:	dc.w $3800
00013A7A A000                       		dc.w -$6000
00013A7C 5000                       		dc.w $5000
00013A7E                            ; ===========================================================================
00013A7E                            
00013A7E                            Obj45_Main:				; XREF: Obj45_Index
00013A7E 7000                       		moveq	#0,d0
00013A80 1028 0028                  		move.b	subtype(a0),d0
00013A84 D040                       		add.w	d0,d0
00013A86 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
00013A8A 45F9 0001 3A6C             		lea	(Obj45_Var).l,a2
00013A90 2248                       		movea.l	a0,a1
00013A92 7203                       		moveq	#3,d1
00013A94 6000                       		bra.s	Obj45_Load
00013A96                            ; ===========================================================================
00013A96                            
00013A96                            Obj45_Loop:
00013A96 6100 0000                  		bsr.w	SingleObjLoad2
00013A9A 6600                       		bne.s	loc_BA52
00013A9C                            
00013A9C                            Obj45_Load:				; XREF: Obj45_Main
00013A9C 135A 0024                  		move.b	(a2)+,routine(a1)
00013AA0 12BC 0045                  		move.b	#$45,0(a1)
00013AA4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013AAA 101A                       		move.b	(a2)+,d0
00013AAC 4880                       		ext.w	d0
00013AAE D068 0008                  		add.w	8(a0),d0
00013AB2 3340 0008                  		move.w	d0,8(a1)
00013AB6 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
00013ABE 337C 0300 0002             		move.w	#$300,2(a1)
00013AC4 137C 0004 0001             		move.b	#4,1(a1)
00013ACA 3369 0008 0030             		move.w	8(a1),$30(a1)
00013AD0 3368 0008 003A             		move.w	8(a0),$3A(a1)
00013AD6 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
00013ADC 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00013AE2 3342 0034                  		move.w	d2,$34(a1)
00013AE6 337C 0200 0018             		move.w	#$200,priority(a1)
00013AEC 0C12 0001                  		cmpi.b	#1,(a2)
00013AF0 6600                       		bne.s	loc_BA40
00013AF2 137C 0091 0020             		move.b	#$91,collision_flags(a1)
00013AF8                            
00013AF8                            loc_BA40:
00013AF8 135A 001A                  		move.b	(a2)+,mapping_frame(a1)
00013AFC 2348 003C                  		move.l	a0,$3C(a1)
00013B00 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
00013B04                            
00013B04 337C 0180 0018             		move.w	#$180,priority(a1)
00013B0A                            
00013B0A                            loc_BA52:
00013B0A 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00013B10                            
00013B10                            Obj45_Solid:				; XREF: Obj45_Index
00013B10 3F28 0008                  		move.w	8(a0),-(sp)
00013B14 4EB9 0000 0000             		jsr	Obj45_Move
00013B1A 323C 0017                  		move.w	#$17,d1
00013B1E 343C 0020                  		move.w	#$20,d2
00013B22 363C 0020                  		move.w	#$20,d3
00013B26 381F                       		move.w	(sp)+,d4
00013B28 4EB9 0000 0000             		jsr	SolidObject
00013B2E 4EB9 0000 0000             		jsr	DisplaySprite
00013B34 6000 0000                  		bra.w	Obj45_ChkDel
00013B38                            ; ===========================================================================
00013B38                            
00013B38                            loc_BA7A:				; XREF: Obj45_Index
00013B38 2268 003C                  		movea.l	$3C(a0),a1
00013B3C 1029 0032                  		move.b	$32(a1),d0
00013B40 0600 0010                  		addi.b	#$10,d0
00013B44 EA08                       		lsr.b	#5,d0
00013B46 5600                       		addq.b	#3,d0
00013B48 1140 001A                  		move.b	d0,mapping_frame(a0)
00013B4C                            
00013B4C                            loc_BA8E:				; XREF: Obj45_Index
00013B4C 2268 003C                  		movea.l	$3C(a0),a1
00013B50 7000                       		moveq	#0,d0
00013B52 1029 0032                  		move.b	$32(a1),d0
00013B56 4440                       		neg.w	d0
00013B58 D068 0030                  		add.w	$30(a0),d0
00013B5C 3140 0008                  		move.w	d0,8(a0)
00013B60                            
00013B60                            Obj45_Display:				; XREF: Obj45_Index
00013B60 4EB9 0000 0000             		jsr	DisplaySprite
00013B66                            
00013B66                            Obj45_ChkDel:				; XREF: Obj45_Solid
00013B66 3028 003A                  		move.w	$3A(a0),d0
00013B6A 4EF9 0000 0000             		jmp		MarkObjGone4
00013B70                            
00013B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B70                            
00013B70                            
00013B70                            Obj45_Move:				; XREF: Obj45_Solid
00013B70 7000                       		moveq	#0,d0
00013B72 1028 0028                  		move.b	subtype(a0),d0
00013B76 D040                       		add.w	d0,d0
00013B78 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
00013B7C 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
00013B80                            ; End of function Obj45_Move
00013B80                            
00013B80                            ; ===========================================================================
00013B80 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
00013B82 0000                       		dc.w loc_BADA-off_BAD6
00013B84                            ; ===========================================================================
00013B84                            
00013B84                            loc_BADA:				; XREF: off_BAD6
00013B84 4A68 0036                  		tst.w	$36(a0)
00013B88 6700                       		beq.s	loc_BB08
00013B8A 4A68 0038                  		tst.w	$38(a0)
00013B8E 6700                       		beq.s	loc_BAEC
00013B90 5368 0038                  		subq.w	#1,$38(a0)
00013B94 6000                       		bra.s	loc_BB3C
00013B96                            ; ===========================================================================
00013B96                            
00013B96                            loc_BAEC:
00013B96 0468 0080 0032             		subi.w	#$80,$32(a0)
00013B9C 6400                       		bcc.s	loc_BB3C
00013B9E 317C 0000 0032             		move.w	#0,$32(a0)
00013BA4 317C 0000 0010             		move.w	#0,x_vel(a0)
00013BAA 317C 0000 0036             		move.w	#0,$36(a0)
00013BB0 6000                       		bra.s	loc_BB3C
00013BB2                            ; ===========================================================================
00013BB2                            
00013BB2                            loc_BB08:				; XREF: loc_BADA
00013BB2 3228 0034                  		move.w	$34(a0),d1
00013BB6 B268 0032                  		cmp.w	$32(a0),d1
00013BBA 6700                       		beq.s	loc_BB3C
00013BBC 3028 0010                  		move.w	x_vel(a0),d0
00013BC0 0668 0070 0010             		addi.w	#$70,x_vel(a0)
00013BC6 D168 0032                  		add.w	d0,$32(a0)
00013BCA B268 0032                  		cmp.w	$32(a0),d1
00013BCE 6200                       		bhi.s	loc_BB3C
00013BD0 3141 0032                  		move.w	d1,$32(a0)
00013BD4 317C 0000 0010             		move.w	#0,x_vel(a0)
00013BDA 317C 0001 0036             		move.w	#1,$36(a0)
00013BE0 317C 003C 0038             		move.w	#$3C,$38(a0)
00013BE6                            
00013BE6                            loc_BB3C:
00013BE6 7000                       		moveq	#0,d0
00013BE8 1028 0032                  		move.b	$32(a0),d0
00013BEC 4440                       		neg.w	d0
00013BEE D068 0030                  		add.w	$30(a0),d0
00013BF2 3140 0008                  		move.w	d0,8(a0)
00013BF6 4E75                       		rts	
00013BF8                            ; ===========================================================================
00013BF8                            ; ---------------------------------------------------------------------------
00013BF8                            ; Sprite mappings - metal stomping blocks on chains (MZ)
00013BF8                            ; ---------------------------------------------------------------------------
00013BF8                            Map_obj31:
00013BF8                            	include "_maps\obj31.asm"
00013BF8                            ; ---------------------------------------------------------------------------
00013BF8                            ; Sprite mappings - metal stomping blocks on chains (MZ)
00013BF8                            ; ---------------------------------------------------------------------------
00013BF8 0000                       		dc.w byte_BB64-Map_obj31
00013BFA 0000                       		dc.w byte_BB7E-Map_obj31
00013BFC 0000                       		dc.w byte_BB98-Map_obj31
00013BFE 0000                       		dc.w byte_BB9E-Map_obj31
00013C00 0000                       		dc.w byte_BBA9-Map_obj31
00013C02 0000                       		dc.w byte_BBBE-Map_obj31
00013C04 0000                       		dc.w byte_BBDD-Map_obj31
00013C06 0000                       		dc.w byte_BC06-Map_obj31
00013C08 0000                       		dc.w byte_BC06-Map_obj31
00013C0A 0000                       		dc.w byte_BC39-Map_obj31
00013C0C 0000                       		dc.w byte_BC53-Map_obj31
00013C0E 05                         byte_BB64:	dc.b 5
00013C0F F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
00013C14 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
00013C19 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
00013C1E F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
00013C23 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
00013C28 05                         byte_BB7E:	dc.b 5
00013C29 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
00013C2E F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
00013C33 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
00013C38 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
00013C3D F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
00013C42 01                         byte_BB98:	dc.b 1
00013C43 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
00013C48 02                         byte_BB9E:	dc.b 2
00013C49 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013C4E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013C53 04                         byte_BBA9:	dc.b 4
00013C54 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00013C59 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00013C5E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013C63 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013C68 06                         byte_BBBE:	dc.b 6
00013C69 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
00013C6E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
00013C73 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00013C78 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00013C7D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013C82 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013C87 08                         byte_BBDD:	dc.b 8
00013C88 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
00013C8D B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
00013C92 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
00013C97 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
00013C9C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00013CA1 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00013CA6 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013CAB 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013CB0 0A                         byte_BC06:	dc.b $A
00013CB1 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
00013CB6 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
00013CBB A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
00013CC0 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
00013CC5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
00013CCA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
00013CCF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00013CD4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00013CD9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013CDE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013CE3 05                         byte_BC39:	dc.b 5
00013CE4 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
00013CE9 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
00013CEE F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
00013CF3 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
00013CF8 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
00013CFD 01                         byte_BC53:	dc.b 1
00013CFE EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
00013D04 00                         		even
00013D04 00                         		even
00013D04                            
00013D04                            ; ---------------------------------------------------------------------------
00013D04                            ; Sprite mappings - spiked metal block from beta version (MZ)
00013D04                            ; ---------------------------------------------------------------------------
00013D04                            Map_obj45:
00013D04                            	include "_maps\obj45.asm"
00013D04                            ; ---------------------------------------------------------------------------
00013D04                            ; Sprite mappings - spiked metal block from beta version (MZ)
00013D04                            ; ---------------------------------------------------------------------------
00013D04 0000                       		dc.w byte_BC6C-Map_obj45
00013D06 0000                       		dc.w byte_BC7C-Map_obj45
00013D08 0000                       		dc.w byte_BC8C-Map_obj45
00013D0A 0000                       		dc.w byte_BC92-Map_obj45
00013D0C 0000                       		dc.w byte_BC9D-Map_obj45
00013D0E 0000                       		dc.w byte_BCB2-Map_obj45
00013D10 0000                       		dc.w byte_BCD1-Map_obj45
00013D12 0000                       		dc.w byte_BCFA-Map_obj45
00013D14 0000                       		dc.w byte_BCFA-Map_obj45
00013D16 03                         byte_BC6C:	dc.b 3
00013D17 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
00013D1C 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
00013D21 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
00013D26 03                         byte_BC7C:	dc.b 3
00013D27 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
00013D2C FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
00013D31 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
00013D36 01                         byte_BC8C:	dc.b 1
00013D37 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
00013D3C 02                         byte_BC92:	dc.b 2
00013D3D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013D42 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013D47 04                         byte_BC9D:	dc.b 4
00013D48 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013D4D F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013D52 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00013D57 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00013D5C 06                         byte_BCB2:	dc.b 6
00013D5D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013D62 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013D67 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00013D6C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00013D71 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
00013D76 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
00013D7B 08                         byte_BCD1:	dc.b 8
00013D7C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013D81 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013D86 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00013D8B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00013D90 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
00013D95 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
00013D9A F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
00013D9F F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
00013DA4 08                         byte_BCFA:	dc.b 8
00013DA5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013DAA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013DAF F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00013DB4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00013DB9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
00013DBE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
00013DC3 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
00013DC8 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
00013DCD F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
00013DD2 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
00013DD8 00                         		even
00013DD8 00                         		even
00013DD8                            
00013DD8                            ; ===========================================================================
00013DD8                            ; ---------------------------------------------------------------------------
00013DD8                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
00013DD8                            ; ---------------------------------------------------------------------------
00013DD8                            
00013DD8                            Obj32:					; XREF: Obj_Index
00013DD8 7000                       		moveq	#0,d0
00013DDA 1028 0024                  		move.b	routine(a0),d0
00013DDE 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
00013DE2 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
00013DE6                            ; ===========================================================================
00013DE6 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
00013DE8 0000                       		dc.w Obj32_Pressed-Obj32_Index
00013DEA                            ; ===========================================================================
00013DEA                            
00013DEA                            Obj32_Main:				; XREF: Obj32_Index
00013DEA 5428 0024                  		addq.b	#2,routine(a0)
00013DEE 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
00013DF6 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
00013DFC 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00013E02 6700                       		beq.s	loc_BD60
00013E04 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
00013E0A                            
00013E0A                            loc_BD60:
00013E0A 117C 0004 0001             		move.b	#4,1(a0)
00013E10 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00013E16 317C 0200 0018             		move.w	#$200,priority(a0)
00013E1C 5668 000C                  		addq.w	#3,$C(a0)
00013E20                            
00013E20                            Obj32_Pressed:				; XREF: Obj32_Index
00013E20 4A28 0001                  		tst.b	1(a0)
00013E24 4EB9 0000 0000             		jsr	Obj32_Display
00013E2A 323C 001B                  		move.w	#$1B,d1
00013E2E 343C 0005                  		move.w	#5,d2
00013E32 363C 0005                  		move.w	#5,d3
00013E36 3828 0008                  		move.w	8(a0),d4
00013E3A 4EB9 0000 0000             		jsr	SolidObject
00013E40 08A8 0000 001A             		bclr	#0,mapping_frame(a0)	; use "unpressed" frame
00013E46 1028 0028                  		move.b	subtype(a0),d0
00013E4A 0240 000F                  		andi.w	#$F,d0
00013E4E 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
00013E52 47F3 0000                  		lea	(a3,d0.w),a3
00013E56 7600                       		moveq	#0,d3
00013E58 0828 0006 0028             		btst	#6,subtype(a0)
00013E5E 6700                       		beq.s	loc_BDB2
00013E60 7607                       		moveq	#7,d3
00013E62                            
00013E62                            loc_BDB2:
00013E62 4A28 0028                  		tst.b	subtype(a0)
00013E66 6A00                       		bpl.s	loc_BDBE
00013E68 4EB9 0000 0000             		jsr	Obj32_MZBlock
00013E6E 6600                       		bne.s	loc_BDC8
00013E70                            
00013E70                            loc_BDBE:
00013E70 4A28 0025                  		tst.b	routine_secondary(a0)
00013E74 6600                       		bne.s	loc_BDC8
00013E76 0793                       		bclr	d3,(a3)
00013E78 6000                       		bra.s	loc_BDDE
00013E7A                            ; ===========================================================================
00013E7A                            
00013E7A                            loc_BDC8:
00013E7A 4A13                       		tst.b	(a3)
00013E7C 6600                       		bne.s	loc_BDD6
00013E7E 303C 005B                  		move.w	#$5B,d0
00013E82 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play switch sound
00013E88                            
00013E88                            loc_BDD6:
00013E88 07D3                       		bset	d3,(a3)
00013E8A 08E8 0000 001A             		bset	#0,mapping_frame(a0)	; use "pressed"	frame
00013E90                            
00013E90                            loc_BDDE:
00013E90 0828 0005 0028             		btst	#5,subtype(a0)
00013E96 6700                       		beq.s	Obj32_Display
00013E98 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00013E9C 6A00                       		bpl.s	Obj32_Display
00013E9E 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
00013EA4 0868 0001 001A             		bchg	#1,mapping_frame(a0)
00013EAA                            
00013EAA                            Obj32_Display:
00013EAA 4EB9 0000 0000             		jsr	DisplaySprite
00013EB0 4EF9 0000 0000             		jmp		MarkObjGone3
00013EB6                            
00013EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EB6                            
00013EB6                            
00013EB6                            Obj32_MZBlock:				; XREF: Obj32_Pressed
00013EB6 3F03                       		move.w	d3,-(sp)
00013EB8 3428 0008                  		move.w	8(a0),d2
00013EBC 3628 000C                  		move.w	$C(a0),d3
00013EC0 0442 0010                  		subi.w	#$10,d2
00013EC4 5143                       		subq.w	#8,d3
00013EC6 383C 0020                  		move.w	#$20,d4
00013ECA 3A3C 0010                  		move.w	#$10,d5
00013ECE 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
00013ED2 3C3C 005F                  		move.w	#$5F,d6
00013ED6                            
00013ED6                            Obj32_MZLoop:
00013ED6 4A29 0001                  		tst.b	1(a1)
00013EDA 6A00                       		bpl.s	loc_BE4E
00013EDC 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
00013EE0 6700                       		beq.s	loc_BE5E	; if yes, branch
00013EE2                            
00013EE2                            loc_BE4E:
00013EE2 43E9 0040                  		lea	object_size(a1),a1	; check	next object
00013EE6 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
00013EEA                            
00013EEA 361F                       		move.w	(sp)+,d3
00013EEC 7000                       		moveq	#0,d0
00013EEE                            
00013EEE                            locret_BE5A:
00013EEE 4E75                       		rts	
00013EF0                            ; ===========================================================================
00013EF0 1010                       Obj32_MZData:	dc.b $10, $10
00013EF2                            ; ===========================================================================
00013EF2                            
00013EF2                            loc_BE5E:				; XREF: Obj32_MZBlock
00013EF2 7001                       		moveq	#1,d0
00013EF4 0240 003F                  		andi.w	#$3F,d0
00013EF8 D040                       		add.w	d0,d0
00013EFA 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
00013EFE 121A                       		move.b	(a2)+,d1
00013F00 4881                       		ext.w	d1
00013F02 3029 0008                  		move.w	8(a1),d0
00013F06 9041                       		sub.w	d1,d0
00013F08 9042                       		sub.w	d2,d0
00013F0A 6400                       		bcc.s	loc_BE80
00013F0C D241                       		add.w	d1,d1
00013F0E D041                       		add.w	d1,d0
00013F10 6500                       		bcs.s	loc_BE84
00013F12 60CE                       		bra.s	loc_BE4E
00013F14                            ; ===========================================================================
00013F14                            
00013F14                            loc_BE80:
00013F14 B044                       		cmp.w	d4,d0
00013F16 62CA                       		bhi.s	loc_BE4E
00013F18                            
00013F18                            loc_BE84:
00013F18 121A                       		move.b	(a2)+,d1
00013F1A 4881                       		ext.w	d1
00013F1C 3029 000C                  		move.w	$C(a1),d0
00013F20 9041                       		sub.w	d1,d0
00013F22 9043                       		sub.w	d3,d0
00013F24 6400                       		bcc.s	loc_BE9A
00013F26 D241                       		add.w	d1,d1
00013F28 D041                       		add.w	d1,d0
00013F2A 6500                       		bcs.s	loc_BE9E
00013F2C 60B4                       		bra.s	loc_BE4E
00013F2E                            ; ===========================================================================
00013F2E                            
00013F2E                            loc_BE9A:
00013F2E B045                       		cmp.w	d5,d0
00013F30 62B0                       		bhi.s	loc_BE4E
00013F32                            
00013F32                            loc_BE9E:
00013F32 361F                       		move.w	(sp)+,d3
00013F34 7001                       		moveq	#1,d0
00013F36 4E75                       		rts	
00013F38                            ; End of function Obj32_MZBlock
00013F38                            
00013F38                            ; ===========================================================================
00013F38                            ; ---------------------------------------------------------------------------
00013F38                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
00013F38                            ; ---------------------------------------------------------------------------
00013F38                            Map_obj32:
00013F38                            	include "_maps\obj32.asm"
00013F38                            ; ---------------------------------------------------------------------------
00013F38                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
00013F38                            ; ---------------------------------------------------------------------------
00013F38 0000                       		dc.w byte_BEAC-Map_obj32
00013F3A 0000                       		dc.w byte_BEB7-Map_obj32
00013F3C 0000                       		dc.w byte_BEC2-Map_obj32
00013F3E 0000                       		dc.w byte_BEB7-Map_obj32
00013F40 02                         byte_BEAC:	dc.b 2
00013F41 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
00013F46 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
00013F4B 02                         byte_BEB7:	dc.b 2
00013F4C F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
00013F51 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
00013F56 02                         byte_BEC2:	dc.b 2
00013F57 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
00013F5C F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
00013F61 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00013F66                            		even
00013F66                            		even
00013F66                            
00013F66                            ; ===========================================================================
00013F66                            ; ---------------------------------------------------------------------------
00013F66                            ; Object 33 - pushable blocks (MZ, LZ)
00013F66                            ; ---------------------------------------------------------------------------
00013F66                            
00013F66                            Obj33:					; XREF: Obj_Index
00013F66 7000                       		moveq	#0,d0
00013F68 1028 0024                  		move.b	routine(a0),d0
00013F6C 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
00013F70 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
00013F74                            ; ===========================================================================
00013F74 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
00013F76 0000                       		dc.w loc_BF6E-Obj33_Index
00013F78 0000                       		dc.w loc_C02C-Obj33_Index
00013F7A                            
00013F7A 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
00013F7C 4001                       		dc.b $40, 1
00013F7E                            ; ===========================================================================
00013F7E                            
00013F7E                            Obj33_Main:				; XREF: Obj33_Index
00013F7E 5428 0024                  		addq.b	#2,routine(a0)
00013F82 117C 000F 0016             		move.b	#$F,$16(a0)
00013F88 117C 000F 0017             		move.b	#$F,$17(a0)
00013F8E 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
00013F96 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
00013F9C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00013FA2 6600                       		bne.s	loc_BF16
00013FA4 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
00013FAA                            
00013FAA                            loc_BF16:
00013FAA 117C 0004 0001             		move.b	#4,1(a0)
00013FB0 317C 0180 0018             		move.w	#$180,priority(a0)
00013FB6 3168 0008 0034             		move.w	8(a0),$34(a0)
00013FBC 3168 000C 0036             		move.w	$C(a0),$36(a0)
00013FC2 7000                       		moveq	#0,d0
00013FC4 1028 0028                  		move.b	subtype(a0),d0
00013FC8 D040                       		add.w	d0,d0
00013FCA 0240 000E                  		andi.w	#$E,d0
00013FCE 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
00013FD2 115A 0023                  		move.b	(a2)+,width_pixels(a0)
00013FD6 115A 001A                  		move.b	(a2)+,mapping_frame(a0)
00013FDA 4A28 0028                  		tst.b	subtype(a0)
00013FDE 6700                       		beq.s	Obj33_ChkGone
00013FE0 317C C2B8 0002             		move.w	#$C2B8,2(a0)
00013FE6                            
00013FE6                            Obj33_ChkGone:
00013FE6                            ;		lea	(v_objstate).w,a2
00013FE6 7000                       		moveq	#0,d0
00013FE8 3028 0014                  		move.w	respawn_index(a0),d0
00013FEC                            ;        move.w	respawn_index(a0),d0
00013FEC 3440                       	    movea.w	d0,a2
00013FEE 6700                       		beq.s	loc_BF6E
00013FF0 0892 0007                  		bclr	#7,(a2)
00013FF4 08D2 0000                  		bset	#0,(a2)
00013FF8 6600 0000                  		bne.w	DeleteObject
00013FFC                            
00013FFC                            loc_BF6E:				; XREF: Obj33_Index
00013FFC 4A28 0032                  		tst.b	$32(a0)
00014000 6600 0000                  		bne.w	loc_C046
00014004 7200                       		moveq	#0,d1
00014006 1228 0023                  		move.b	width_pixels(a0),d1
0001400A 0641 000B                  		addi.w	#$B,d1
0001400E 343C 0010                  		move.w	#$10,d2
00014012 363C 0011                  		move.w	#$11,d3
00014016 3828 0008                  		move.w	8(a0),d4
0001401A 4EB9 0000 0000             		jsr	loc_C186
00014020 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
00014026 6600                       		bne.s	loc_BFC6	; if not, branch
00014028 08A8 0007 0028             		bclr	#7,subtype(a0)
0001402E 3028 0008                  		move.w	8(a0),d0
00014032 0C40 0A20                  		cmpi.w	#$A20,d0
00014036 6500                       		bcs.s	loc_BFC6
00014038 0C40 0AA1                  		cmpi.w	#$AA1,d0
0001403C 6400                       		bcc.s	loc_BFC6
0001403E 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
00014042 0440 001C                  		subi.w	#$1C,d0
00014046 3140 000C                  		move.w	d0,$C(a0)
0001404A 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
00014050 08E8 0007 0028             		bset	#7,subtype(a0)
00014056                            
00014056                            loc_BFC6:
00014056 3028 0008                  		move.w	8(a0),d0
0001405A 0240 FF80                  		andi.w	#$FF80,d0
0001405E 3238 F700                  		move.w	($FFFFF700).w,d1
00014062 0441 0080                  		subi.w	#$80,d1
00014066 0241 FF80                  		andi.w	#$FF80,d1
0001406A 9041                       		sub.w	d1,d0
0001406C 0C40 0280                  		cmpi.w	#$280,d0
00014070 6200                       		bhi.s	loc_BFE6
00014072 6000 0000                  		bra.w	DisplaySprite
00014076                            ; ===========================================================================
00014076                            
00014076                            loc_BFE6:
00014076 3028 0034                  		move.w	$34(a0),d0
0001407A 0240 FF80                  		andi.w	#$FF80,d0
0001407E 3238 F700                  		move.w	($FFFFF700).w,d1
00014082 0441 0080                  		subi.w	#$80,d1
00014086 0241 FF80                  		andi.w	#$FF80,d1
0001408A 9041                       		sub.w	d1,d0
0001408C 0C40 0280                  		cmpi.w	#$280,d0
00014090 6200                       		bhi.s	loc_C016
00014092 3168 0034 0008             		move.w	$34(a0),8(a0)
00014098 3168 0036 000C             		move.w	$36(a0),$C(a0)
0001409E 117C 0004 0024             		move.b	#4,routine(a0)
000140A4 6000                       		bra.s	loc_C02C
000140A6                            ; ===========================================================================
000140A6                            
000140A6                            loc_C016:
000140A6                            ;		lea	(v_objstate).w,a2
000140A6 7000                       		moveq	#0,d0
000140A8 3028 0014                  		move.w	respawn_index(a0),d0
000140AC                            ;        move.w	respawn_index(a0),d0
000140AC 3440                       	    movea.w	d0,a2
000140AE 6700                       		beq.s	loc_C028
000140B0 0892 0000                  		bclr	#0,(a2)
000140B4                            
000140B4                            loc_C028:
000140B4 6000 0000                  		bra.w	DeleteObject
000140B8                            ; ===========================================================================
000140B8                            
000140B8                            loc_C02C:				; XREF: Obj33_Index
000140B8 4EB9 0000 0000             		jsr	ChkObjOnScreen2
000140BE 6700                       		beq.s	locret_C044
000140C0 117C 0002 0024             		move.b	#2,routine(a0)
000140C6 4228 0032                  		clr.b	$32(a0)
000140CA 4268 0010                  		clr.w	x_vel(a0)
000140CE 4268 0012                  		clr.w	y_vel(a0)
000140D2                            
000140D2                            locret_C044:
000140D2 4E75                       		rts	
000140D4                            ; ===========================================================================
000140D4                            
000140D4                            loc_C046:				; XREF: loc_BF6E
000140D4 3F28 0008                  		move.w	8(a0),-(sp)
000140D8 0C28 0004 0025             		cmpi.b	#4,routine_secondary(a0)
000140DE 6400                       		bcc.s	loc_C056
000140E0 4EB9 0000 0000             		jsr	SpeedToPos
000140E6                            
000140E6                            loc_C056:
000140E6 0828 0001 0022             		btst	#1,status(a0)
000140EC 6700                       		beq.s	loc_C0A0
000140EE 0668 0018 0012             		addi.w	#$18,y_vel(a0)
000140F4 4EB9 0000 0000             		jsr	ObjHitFloor
000140FA 4A41                       		tst.w	d1
000140FC 6A00 0000                  		bpl.w	loc_C09E
00014100 D368 000C                  		add.w	d1,$C(a0)
00014104 4268 0012                  		clr.w	y_vel(a0)
00014108 08A8 0001 0022             		bclr	#1,status(a0)
0001410E 3011                       		move.w	(a1),d0
00014110 0240 03FF                  		andi.w	#$3FF,d0
00014114 0C40 016A                  		cmpi.w	#$16A,d0
00014118 6500                       		bcs.s	loc_C09E
0001411A 3028 0030                  		move.w	$30(a0),d0
0001411E E640                       		asr.w	#3,d0
00014120 3140 0010                  		move.w	d0,x_vel(a0)
00014124 117C 0001 0032             		move.b	#1,$32(a0)
0001412A 4268 000E                  		clr.w	$E(a0)
0001412E                            
0001412E                            loc_C09E:
0001412E 6000                       		bra.s	loc_C0E6
00014130                            ; ===========================================================================
00014130                            
00014130                            loc_C0A0:
00014130 4A68 0010                  		tst.w	x_vel(a0)
00014134 6700 0000                  		beq.w	loc_C0D6
00014138 6B00                       		bmi.s	loc_C0BC
0001413A 7600                       		moveq	#0,d3
0001413C 1628 0023                  		move.b	width_pixels(a0),d3
00014140 4EB9 0000 0000             		jsr	ObjHitWallRight
00014146 4A41                       		tst.w	d1		; has block touched a wall?
00014148 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0001414A 6000                       		bra.s	loc_C0E6
0001414C                            ; ===========================================================================
0001414C                            
0001414C                            loc_C0BC:
0001414C 7600                       		moveq	#0,d3
0001414E 1628 0023                  		move.b	width_pixels(a0),d3
00014152 4643                       		not.w	d3
00014154 4EB9 0000 0000             		jsr	ObjHitWallLeft
0001415A 4A41                       		tst.w	d1		; has block touched a wall?
0001415C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0001415E 6000                       		bra.s	loc_C0E6
00014160                            ; ===========================================================================
00014160                            
00014160                            Obj33_StopPush:
00014160 4268 0010                  		clr.w	x_vel(a0)		; stop block moving
00014164 6000                       		bra.s	loc_C0E6
00014166                            ; ===========================================================================
00014166                            
00014166                            loc_C0D6:
00014166 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0001416E 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
00014174 6400                       		bcc.s	loc_C104
00014176                            
00014176                            loc_C0E6:
00014176 7200                       		moveq	#0,d1
00014178 1228 0023                  		move.b	width_pixels(a0),d1
0001417C 0641 000B                  		addi.w	#$B,d1
00014180 343C 0010                  		move.w	#$10,d2
00014184 363C 0011                  		move.w	#$11,d3
00014188 381F                       		move.w	(sp)+,d4
0001418A 4EB9 0000 0000             		jsr	loc_C186
00014190 6100                       		bsr.s	Obj33_ChkLava
00014192 6000 FEC2                  		bra.w	loc_BFC6
00014196                            ; ===========================================================================
00014196                            
00014196                            loc_C104:
00014196 381F                       		move.w	(sp)+,d4
00014198 43F8 D000                  		lea	($FFFFD000).w,a1
0001419C 08A9 0003 0022             		bclr	#3,status(a1)
000141A2 08A8 0003 0022             		bclr	#3,status(a0)
000141A8 6000 FECC                  		bra.w	loc_BFE6
000141AC                            ; ===========================================================================
000141AC                            
000141AC                            Obj33_ChkLava:
000141AC 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
000141B2 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
000141B4 343C FFE0                  		move.w	#-$20,d2
000141B8 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
000141BE 6700                       		beq.s	Obj33_LoadLava
000141C0 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
000141C6 6700                       		beq.s	Obj33_LoadLava
000141C8 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
000141CE 6700                       		beq.s	Obj33_LoadLava
000141D0 4E75                       		rts	
000141D2                            ; ===========================================================================
000141D2                            
000141D2                            Obj33_ChkLava2:
000141D2 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
000141D8 6600                       		bne.s	Obj33_NoLava	; if not, branch
000141DA 343C 0020                  		move.w	#$20,d2
000141DE 0C68 0560 0008             		cmpi.w	#$560,8(a0)
000141E4 6700                       		beq.s	Obj33_LoadLava
000141E6 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
000141EC 6700                       		beq.s	Obj33_LoadLava
000141EE                            
000141EE                            Obj33_NoLava:
000141EE 4E75                       		rts	
000141F0                            ; ===========================================================================
000141F0                            
000141F0                            Obj33_LoadLava:
000141F0 6100 0000                  		bsr.w	SingleObjLoad
000141F4 6600                       		bne.s	locret_C184
000141F6 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
000141FA 3368 0008 0008             		move.w	8(a0),8(a1)
00014200 D569 0008                  		add.w	d2,8(a1)
00014204 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001420A 0669 0010 000C             		addi.w	#$10,$C(a1)
00014210 2348 003C                  		move.l	a0,$3C(a1)
00014214                            
00014214                            locret_C184:
00014214 4E75                       		rts	
00014216                            ; ===========================================================================
00014216                            
00014216                            loc_C186:				; XREF: loc_BF6E
00014216 1028 0025                  		move.b	routine_secondary(a0),d0
0001421A 6700 0000                  		beq.w	loc_C218
0001421E 5500                       		subq.b	#2,d0
00014220 6600                       		bne.s	loc_C1AA
00014222 4EBA AFC2                  		jsr	ExitPlatform
00014226 0829 0003 0022             		btst	#3,status(a1)
0001422C 6600                       		bne.s	loc_C1A4
0001422E 4228 0025                  		clr.b	routine_secondary(a0)
00014232 4E75                       		rts	
00014234                            ; ===========================================================================
00014234                            
00014234                            loc_C1A4:
00014234 3404                       		move.w	d4,d2
00014236 6000 B208                  		bra.w	MvSonicOnPtfm
0001423A                            ; ===========================================================================
0001423A                            
0001423A                            loc_C1AA:
0001423A 5500                       		subq.b	#2,d0
0001423C 6600                       		bne.s	loc_C1F2
0001423E 4EB9 0000 0000             		jsr	SpeedToPos
00014244 0668 0018 0012             		addi.w	#$18,y_vel(a0)
0001424A 4EB9 0000 0000             		jsr	ObjHitFloor
00014250 4A41                       		tst.w	d1
00014252 6A00 0000                  		bpl.w	locret_C1F0
00014256 D368 000C                  		add.w	d1,$C(a0)
0001425A 4268 0012                  		clr.w	y_vel(a0)
0001425E 4228 0025                  		clr.b	routine_secondary(a0)
00014262 3011                       		move.w	(a1),d0
00014264 0240 03FF                  		andi.w	#$3FF,d0
00014268 0C40 016A                  		cmpi.w	#$16A,d0
0001426C 6500                       		bcs.s	locret_C1F0
0001426E 3028 0030                  		move.w	$30(a0),d0
00014272 E640                       		asr.w	#3,d0
00014274 3140 0010                  		move.w	d0,x_vel(a0)
00014278 117C 0001 0032             		move.b	#1,$32(a0)
0001427E 4268 000E                  		clr.w	$E(a0)
00014282                            
00014282                            locret_C1F0:
00014282 4E75                       		rts	
00014284                            ; ===========================================================================
00014284                            
00014284                            loc_C1F2:
00014284 4EB9 0000 0000             		jsr	SpeedToPos
0001428A 3028 0008                  		move.w	8(a0),d0
0001428E 0240 000C                  		andi.w	#$C,d0
00014292 6600 0000                  		bne.w	locret_C2E4
00014296 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0001429C 3168 0010 0030             		move.w	x_vel(a0),$30(a0)
000142A2 4268 0010                  		clr.w	x_vel(a0)
000142A6 5528 0025                  		subq.b	#2,routine_secondary(a0)
000142AA 4E75                       		rts	
000142AC                            ; ===========================================================================
000142AC                            
000142AC                            loc_C218:
000142AC 4EB9 0000 0000             		jsr	loc_FAC8
000142B2 4A44                       		tst.w	d4
000142B4 6700 0000                  		beq.w	locret_C2E4
000142B8 6B00 0000                  		bmi.w	locret_C2E4
000142BC 4A28 0032                  		tst.b	$32(a0)
000142C0 6700                       		beq.s	loc_C230
000142C2 6000 0000                  		bra.w	locret_C2E4
000142C6                            ; ===========================================================================
000142C6                            
000142C6                            loc_C230:
000142C6 4A40                       		tst.w	d0
000142C8 6700 0000                  		beq.w	locret_C2E4
000142CC 6B00                       		bmi.s	loc_C268
000142CE 0829 0000 0022             		btst	#0,status(a1)
000142D4 6600 0000                  		bne.w	locret_C2E4
000142D8 3F00                       		move.w	d0,-(sp)
000142DA 7600                       		moveq	#0,d3
000142DC 1628 0023                  		move.b	width_pixels(a0),d3
000142E0 4EB9 0000 0000             		jsr	ObjHitWallRight
000142E6 301F                       		move.w	(sp)+,d0
000142E8 4A41                       		tst.w	d1
000142EA 6B00 0000                  		bmi.w	locret_C2E4
000142EE 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
000142F6 7001                       		moveq	#1,d0
000142F8 323C 0040                  		move.w	#$40,d1
000142FC 6000                       		bra.s	loc_C294
000142FE                            ; ===========================================================================
000142FE                            
000142FE                            loc_C268:
000142FE 0829 0000 0022             		btst	#0,status(a1)
00014304 6700                       		beq.s	locret_C2E4
00014306 3F00                       		move.w	d0,-(sp)
00014308 7600                       		moveq	#0,d3
0001430A 1628 0023                  		move.b	width_pixels(a0),d3
0001430E 4643                       		not.w	d3
00014310 4EB9 0000 0000             		jsr	ObjHitWallLeft
00014316 301F                       		move.w	(sp)+,d0
00014318 4A41                       		tst.w	d1
0001431A 6B00                       		bmi.s	locret_C2E4
0001431C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00014324 70FF                       		moveq	#-1,d0
00014326 323C FFC0                  		move.w	#-$40,d1
0001432A                            
0001432A                            loc_C294:
0001432A 43F8 D000                  		lea	($FFFFD000).w,a1
0001432E D169 0008                  		add.w	d0,8(a1)
00014332 3341 0020                  		move.w	d1,inertia(a1)
00014336 337C 0000 0010             		move.w	#0,x_vel(a1)
0001433C 3F00                       		move.w	d0,-(sp)
0001433E 303C 00A7                  		move.w	#$A7,d0
00014342 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play pushing sound
00014348 301F                       		move.w	(sp)+,d0
0001434A 4A28 0028                  		tst.b	subtype(a0)
0001434E 6B00                       		bmi.s	locret_C2E4
00014350 3F00                       		move.w	d0,-(sp)
00014352 4EB9 0000 0000             		jsr	ObjHitFloor
00014358 301F                       		move.w	(sp)+,d0
0001435A 0C41 0004                  		cmpi.w	#4,d1
0001435E 6F00                       		ble.s	loc_C2E0
00014360 317C 0400 0010             		move.w	#$400,x_vel(a0)
00014366 4A40                       		tst.w	d0
00014368 6A00                       		bpl.s	loc_C2D8
0001436A 4468 0010                  		neg.w	x_vel(a0)
0001436E                            
0001436E                            loc_C2D8:
0001436E 117C 0006 0025             		move.b	#6,routine_secondary(a0)
00014374 6000                       		bra.s	locret_C2E4
00014376                            ; ===========================================================================
00014376                            
00014376                            loc_C2E0:
00014376 D368 000C                  		add.w	d1,$C(a0)
0001437A                            
0001437A                            locret_C2E4:
0001437A 4E75                       		rts	
0001437C                            ; ===========================================================================
0001437C                            ; ---------------------------------------------------------------------------
0001437C                            ; Sprite mappings - pushable blocks (MZ, LZ)
0001437C                            ; ---------------------------------------------------------------------------
0001437C                            Map_obj33:
0001437C                            	include "_maps\obj33.asm"
0001437C                            ; ---------------------------------------------------------------------------
0001437C                            ; Sprite mappings - pushable blocks (MZ, LZ)
0001437C                            ; ---------------------------------------------------------------------------
0001437C 0000                       		dc.w byte_C2EA-Map_obj33
0001437E 0000                       		dc.w byte_C2F0-Map_obj33
00014380 01                         byte_C2EA:	dc.b 1
00014381 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
00014386 04                         byte_C2F0:	dc.b 4
00014387 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0001438C F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
00014391 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
00014396 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0001439C 00                         		even
0001439C 00                         		even
0001439C                            
0001439C                            ; ===========================================================================
0001439C                            ; ---------------------------------------------------------------------------
0001439C                            ; Object 34 - zone title cards
0001439C                            ; ---------------------------------------------------------------------------
0001439C                            
0001439C                            Obj34:					; XREF: Obj_Index
0001439C 7000                       		moveq	#0,d0
0001439E 1028 0024                  		move.b	routine(a0),d0
000143A2 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
000143A6 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
000143AA                            ; ===========================================================================
000143AA 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
000143AC 0000                       		dc.w Obj34_ChkPos-Obj34_Index
000143AE 0000                       		dc.w Obj34_Wait-Obj34_Index
000143B0 0000                       		dc.w Obj34_Wait-Obj34_Index
000143B2                            ; ===========================================================================
000143B2                            
000143B2                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
000143B2 2248                       		movea.l	a0,a1
000143B4 7000                       		moveq	#0,d0
000143B6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000143BA 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
000143C0 6600                       		bne.s	Obj34_CheckFZ
000143C2 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
000143C4                            
000143C4                            Obj34_CheckFZ:
000143C4 3400                       		move.w	d0,d2
000143C6 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
000143CC 6600                       		bne.s	Obj34_CheckNew
000143CE 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
000143D0 740B                       		moveq	#$B,d2		; use "FINAL" mappings
000143D2                             
000143D2                            Obj34_CheckNew:
000143D2 0C38 0007 FE10             		cmpi.b	#7,($FFFFFE10).w ; check if level is in the new zones
000143D8 6500                       		blo.s	Obj34_LoadConfig
000143DA 5A02                       		addq.b	#$C-7,d2	; use correct mappings
000143DC                            
000143DC                            Obj34_LoadConfig:
000143DC 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
000143E2 E948                       		lsl.w	#4,d0
000143E4 D6C0                       		adda.w	d0,a3
000143E6 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
000143EC 7203                       		moveq	#3,d1
000143EE                            
000143EE                            Obj34_Loop:
000143EE 12BC 0034                  		move.b	#$34,0(a1)
000143F2 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
000143F6 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
000143FA 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
000143FE 335A 000A                  		move.w	(a2)+,$A(a1)
00014402 135A 0024                  		move.b	(a2)+,routine(a1)
00014406 101A                       		move.b	(a2)+,d0
00014408 6600                       		bne.s	Obj34_ActNumber
0001440A 1002                       		move.b	d2,d0
0001440C                            
0001440C                            Obj34_ActNumber:
0001440C 0C00 0007                  		cmpi.b	#7,d0
00014410 6600                       		bne.s	Obj34_MakeSprite
00014412 D038 FE11                  		add.b	($FFFFFE11).w,d0
00014416 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0001441C 6600                       		bne.s	Obj34_ActNumber_4	; if not, branch
0001441E 5300                       		subq.b	#1,d0
00014420 6000                       		bra.s	Obj34_MakeSprite
00014422                            
00014422                            Obj34_ActNumber_4:
00014422 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w	; is act number 4?
00014428 6600                       		bne.s	Obj34_MakeSprite	; if not, branch
0001442A 103C 000C                  		move.b	#12,d0				; set to load the number 4
0001442E                            
0001442E                            Obj34_MakeSprite:
0001442E 1340 001A                  		move.b	d0,mapping_frame(a1)	; display frame	number d0
00014432 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0001443A 337C 8580 0002             		move.w	#$8580,2(a1)
00014440 137C 0078 0023             		move.b	#$78,width_pixels(a1)
00014446 137C 0000 0001             		move.b	#0,1(a1)
0001444C 137C 0000 0018             		move.b	#0,priority(a1)
00014452 337C 003C 001E             		move.w	#60,anim_frame_duration(a1)	; set time delay to 1 second
00014458 43E9 0040                  		lea	object_size(a1),a1		; next object
0001445C 51C9 FF90                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
00014460                            
00014460                            Obj34_ChkPos:				; XREF: Obj34_Index
00014460 7210                       		moveq	#$10,d1		; set horizontal speed
00014462 3028 0030                  		move.w	$30(a0),d0
00014466 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0001446A 6700                       		beq.s	loc_C3C8	; if yes, branch
0001446C 6C00                       		bge.s	Obj34_Move
0001446E 4441                       		neg.w	d1
00014470                            
00014470                            Obj34_Move:
00014470 D368 0008                  		add.w	d1,8(a0)	; change item's position
00014474                            
00014474                            loc_C3C8:
00014474 3028 0008                  		move.w	8(a0),d0
00014478 6B00                       		bmi.s	locret_C3D8
0001447A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0001447E 6400                       		bcc.s	locret_C3D8	; if yes, branch
00014480 6000 0000                  		bra.w	DisplaySprite
00014484                            ; ===========================================================================
00014484                            
00014484                            locret_C3D8:
00014484 4E75                       		rts	
00014486                            ; ===========================================================================
00014486                            
00014486                            Obj34_Wait:				; XREF: Obj34_Index
00014486 4A68 001E                  		tst.w	anim_frame_duration(a0)			; is time remaining zero?
0001448A 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0001448C 5368 001E                  		subq.w	#1,anim_frame_duration(a0)		; subtract 1 from time
00014490 6000 0000                  		bra.w	DisplaySprite
00014494                            ; ===========================================================================
00014494                            
00014494                            Obj34_ChkPos2:				; XREF: Obj34_Wait
00014494 4A28 0001                  		tst.b	1(a0)
00014498 6A00                       		bpl.s	Obj34_ChangeArt
0001449A 7220                       		moveq	#$20,d1
0001449C 3028 0032                  		move.w	$32(a0),d0
000144A0 B068 0008                  		cmp.w	8(a0),d0		; has item reached the finish position?
000144A4 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
000144A6 6C00                       		bge.s	Obj34_Move2
000144A8 4441                       		neg.w	d1
000144AA                            
000144AA                            Obj34_Move2:
000144AA D368 0008                  		add.w	d1,8(a0)	; change item's position
000144AE 3028 0008                  		move.w	8(a0),d0
000144B2 6B00                       		bmi.s	locret_C412
000144B4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
000144B8 6400                       		bcc.s	locret_C412	; if yes, branch
000144BA 6000 0000                  		bra.w	DisplaySprite
000144BE                            ; ===========================================================================
000144BE                            
000144BE                            locret_C412:
000144BE 4E75                       		rts	
000144C0                            ; ===========================================================================
000144C0                            
000144C0                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
000144C0 0C28 0004 0024             		cmpi.b	#4,routine(a0)
000144C6 6600                       		bne.s	Obj34_Delete
000144C8 7002                       		moveq	#2,d0
000144CA 4EB9 0000 36F6             		jsr	(LoadPLC).l	; load explosion patterns
000144D0 4EB9 0000 36BE             		jsr	(LoadAnimalPLC).l ; load animal patterns
000144D6                            
000144D6                            Obj34_Delete:
000144D6 6000 0000                  		bra.w	DeleteObject
000144DA                            ; ===========================================================================
000144DA 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
000144DC 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
000144DE 00E4                       		dc.w $E4
000144E0 0206                       		dc.b 2,	6
000144E2 00EA                       		dc.w $EA
000144E4 0207                       		dc.b 2,	7
000144E6 00E0                       		dc.w $E0
000144E8 020A                       		dc.b 2,	$A
000144EA                            ; ---------------------------------------------------------------------------
000144EA                            ; Title	card configuration data
000144EA                            ; Format:
000144EA                            ; 4 bytes per item (YYYY XXXX)
000144EA                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
000144EA                            ; ---------------------------------------------------------------------------
000144EA 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
000144FA 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0001450A 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0001451A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0001452A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0001453A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0001454A 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0001455A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; ABZ
0001456A                            ; ===========================================================================
0001456A                            ;===============================================================================
0001456A                            ; Objeto 0x34 - Tela com o nome das fases conhecido tambem conhecido como: 
0001456A                            ; [ Termino ]        - Splash Screen, Title Cards, etc... 
0001456A                            ;===============================================================================  
0001456A                            ; ---------------------------------------------------------------------------
0001456A                            ; Object 39 - "GAME OVER" and "TIME OVER"
0001456A                            ; ---------------------------------------------------------------------------
0001456A                            
0001456A                            Obj39:					; XREF: Obj_Index
0001456A 7000                       		moveq	#0,d0
0001456C 1028 0024                  		move.b	routine(a0),d0
00014570 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
00014574 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
00014578                            ; ===========================================================================
00014578 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0001457A 0000                       		dc.w loc_C50C-Obj39_Index
0001457C 0000                       		dc.w Obj39_Wait-Obj39_Index
0001457E                            ; ===========================================================================
0001457E                            
0001457E                            Obj39_ChkPLC: 				; XREF: Obj39_Index
0001457E 4AB8 F680                          tst.l	($FFFFF680).w	; are the pattern load cues empty?
00014582 6700                       		beq.s	Obj39_Main	; if yes, branch
00014584 4E75                       		rts
00014586                            ; ===========================================================================
00014586                            Obj39_Main:
00014586 43F8 D0C0                          lea 	($FFFFD0C0).w,a1
0001458A 12BC 0039                     		move.b	#$39,(a1) ; load OVER object
0001458E 337C 855E 0002             		move.w	#$855E,2(a1)
00014594 237C 0000 0000 0004        		move.l	#Map_obj39,4(a1)
0001459C 137C 0001 001A             		move.b	#1,$1A(a1) ; set OVER object to correct frame
000145A2 137C 0002 0024             		move.b  #2,routine(a1)
000145A8 337C 00F0 000A             		move.w	#$F0,$A(a1)
000145AE 337C 01F0 0008             		move.w	#$1F0,8(a1)
000145B4 137C 0000 0001             		move.b	#0,1(a1)
000145BA 137C 0000 0018             		move.b	#0,priority(a1)
000145C0 5428 0024                  		addq.b	#2,routine(a0)
000145C4 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
000145CC 317C 855E 0002             		move.w	#$855E,2(a0)
000145D2 117C 0000 0001               		move.b	#0,1(a0)
000145D8 117C 0000 0018             		move.b	#0,priority(a0)
000145DE 317C 00F0 000A               		move.w	#$F0,$A(a0)
000145E4 317C 0050 0008               		move.w	#$50,8(a0)	; set x-position
000145EA                            
000145EA                            loc_C50C:				; XREF: Obj39_Index
000145EA 7210                       		moveq	#$10,d1		; set horizontal speed
000145EC 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
000145F2 6700                       		beq.s	Obj39_SetWait	; if yes, branch
000145F4 6500                       		bcs.s	Obj39_Move
000145F6 4441                       		neg.w	d1
000145F8                            
000145F8                            Obj39_Move:
000145F8 D368 0008                  		add.w	d1,8(a0)	; change item's position
000145FC 6000 0000                  		bra.w	DisplaySprite
00014600                            ; ===========================================================================
00014600                            
00014600                            Obj39_SetWait:				; XREF: Obj39_Main
00014600 317C 02D0 001E             		move.w	#720,anim_frame_duration(a0)	; set time delay to 12 seconds
00014606 5428 0024                  		addq.b	#2,routine(a0)
0001460A 4E75                       		rts	
0001460C                            ; ===========================================================================
0001460C                            
0001460C                            Obj39_Wait:				; XREF: Obj39_Index
0001460C 1038 F605                  		move.b	($FFFFF605).w,d0
00014610 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
00014614 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
00014616 0828 0000 001A             		btst	#0,$1A(a0)
0001461C 6600                       		bne.s	Obj39_Display
0001461E 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
00014622 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
00014624 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
00014628 6000 0000                  		bra.w	DisplaySprite
0001462C                            ; ===========================================================================
0001462C                            
0001462C                            Obj39_ChgMode:				; XREF: Obj39_Wait
0001462C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
00014630 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
00014632 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
00014638 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0001463C 6600                       		bne.s	Obj39_Display	; if yes, branch
0001463E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
00014644 6000                       		bra.s	Obj39_Display
00014646                            ; ===========================================================================
00014646                            
00014646                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
00014646 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0001464C                            
0001464C                            Obj39_Display:				; XREF: Obj39_ChgMode
0001464C 6000 0000                  		bra.w	DisplaySprite
00014650                            ; ===========================================================================
00014650                            
00014650                            ; ---------------------------------------------------------------------------
00014650                            ; Object 3A - "SONIC GOT THROUGH" title	card
00014650                            ; ---------------------------------------------------------------------------
00014650                            
00014650                            Obj3A:					; XREF: Obj_Index
00014650 7000                       		moveq	#0,d0
00014652 1028 0024                  		move.b	routine(a0),d0
00014656 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0001465A 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0001465E                            ; ===========================================================================
0001465E 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
00014660 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
00014662 0000                       		dc.w Obj3A_Wait-Obj3A_Index
00014664 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
00014666 0000                       		dc.w Obj3A_Wait-Obj3A_Index
00014668 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0001466A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0001466C 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0001466E 0000                       		dc.w loc_C766-Obj3A_Index
00014670                            ; ===========================================================================
00014670                            
00014670                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
00014670 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
00014674 6700                       		beq.s	Obj3A_Main	; if yes, branch
00014676 4E75                       		rts	
00014678                            ; ===========================================================================
00014678                            
00014678                            Obj3A_Main:
00014678                            	;Mercury Remove Speed Shoes At Signpost Fix
00014678 4238 D034                  		clr.b	(Maincharacter+speedshoes_time).w	; clear Super Shoes	;Mercury Constants
0001467C                            ;		clr.w	($FFFFD032).w		; clear time limit of the invincibility
0001467C                            ;		clr.w	($FFFFFE2C).w	; remove shield
0001467C                            ;		move.b	#$0,($FFFFD180).w ; load shield object	($38)
0001467C                            	;end Remove Speed Shoes At Signpost Fix
0001467C                            ;		move.b	#$23,(MainCharacter+anim).w
0001467C                            ;		clr.w	(MainCharacter+inertia).w
0001467C                            ;		clr.w	(MainCharacter+x_vel).w
0001467C 2248                       		movea.l	a0,a1
0001467E 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
00014684 7206                       		moveq	#6,d1
00014686                            
00014686                            Obj3A_Loop:
00014686 12BC 003A                  		move.b	#$3A,0(a1)
0001468A 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0001468E 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
00014692 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
00014696 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0001469A 135A 0024                  		move.b	(a2)+,routine(a1)
0001469E 101A                       		move.b	(a2)+,d0
000146A0 0C00 0006                  		cmpi.b	#6,d0
000146A4 6600                       		bne.s	loc_C5CA
000146A6 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
000146AA                            
000146AA                            loc_C5CA:
000146AA 1340 001A                  		move.b	d0,mapping_frame(a1)
000146AE                            		
000146AE                            loc_C5CA_2:
000146AE 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
000146B6 337C 8580 0002             		move.w	#$8580,2(a1)
000146BC 137C 0000 0001             		move.b	#0,1(a1)
000146C2 43E9 0040                  		lea	object_size(a1),a1
000146C6 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
000146CA                            
000146CA                            Obj3A_ChkPos:				; XREF: Obj3A_Index
000146CA 7210                       		moveq	#$10,d1		; set horizontal speed
000146CC 3028 0030                  		move.w	$30(a0),d0
000146D0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
000146D4 6700                       		beq.s	loc_C61A	; if yes, branch
000146D6 6C00                       		bge.s	Obj3A_Move
000146D8 4441                       		neg.w	d1
000146DA                            
000146DA                            Obj3A_Move:
000146DA D368 0008                  		add.w	d1,8(a0)	; change item's position
000146DE                            
000146DE                            loc_C5FE:				; XREF: loc_C61A
000146DE 3028 0008                  		move.w	8(a0),d0
000146E2 6B00                       		bmi.s	locret_C60E
000146E4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
000146E8 6400                       		bcc.s	locret_C60E	; if yes, branch
000146EA 6000 0000                  		bra.w	DisplaySprite
000146EE                            ; ===========================================================================
000146EE                            
000146EE                            locret_C60E:
000146EE 4E75                       		rts	
000146F0                            ; ===========================================================================
000146F0                            
000146F0                            loc_C610:				; XREF: loc_C61A
000146F0 117C 000E 0024             		move.b	#$E,routine(a0)
000146F6 6000 0000                  		bra.w	Obj3A_ChkPos2
000146FA                            ; ===========================================================================
000146FA                            
000146FA                            loc_C61A:				; XREF: Obj3A_ChkPos
000146FA 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
00014700 67EE                       		beq.s	loc_C610
00014702 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)
00014708 66D4                       		bne.s	loc_C5FE
0001470A 5428 0024                  		addq.b	#2,routine(a0)
0001470E 317C 00B4 001E             		move.w	#180,anim_frame_duration(a0)	; set time delay to 3 seconds
00014714                            
00014714                            Obj3A_Wait:				; XREF: Obj3A_Index
00014714 5368 001E                  		subq.w	#1,anim_frame_duration(a0)	; subtract 1 from time delay
00014718 6600                       		bne.s	Obj3A_Display
0001471A 5428 0024                  		addq.b	#2,routine(a0)
0001471E                            
0001471E                            Obj3A_Display:
0001471E 6000 0000                  		bra.w	DisplaySprite
00014722                            ; ===========================================================================
00014722                            
00014722                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
00014722 4EB9 0000 0000             		jsr	DisplaySprite
00014728 123C 000A                  		move.b	#10,d1	; set score decrement to 10
0001472C 1038 F604                  		move.b	($FFFFF604).w,d0
00014730 0200 0070                  		andi.b	#$70,d0	; is A, B or C pressed?
00014734 6700 0000                  		beq.w	@dontspeedup	; if not, branch
00014738 123C 0064                  		move.b	#100,d1	; increase score decrement to 100
0001473C                            		
0001473C                            @dontspeedup:
0001473C 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
00014742 7000                       		moveq	#0,d0
00014744 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
00014748 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0001474A B278 F7D2                  		cmp.w	(v_timebonus).w,d1	; compare time bonus to score decrement
0001474E 6D00                       		blt.s	@skip	; if it's greater or equal, branch
00014750 3238 F7D2                  		move.w	(v_timebonus).w,d1	; else, set the decrement to the remaining bonus
00014754                            @skip:
00014754 D041                       		add.w	d1,d0		; add decrement to score
00014756 9378 F7D2                  		sub.w	d1,(v_timebonus).w ; subtract decrement from time bonus
0001475A                            
0001475A                            Obj3A_RingBonus:
0001475A 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0001475E 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
00014760 B278 F7D4                  		cmp.w	(v_ringbonus).w,d1	; compare ring bonus to score decrement
00014764 6D00                       		blt.s	@skip2	; if it's greater or equal, branch
00014766 3238 F7D4                  		move.w	(v_ringbonus).w,d1	; else, set the decrement to the remaining bonus
0001476A                            @skip2:
0001476A D041                       		add.w	d1,d0		; add decrement to score
0001476C 9378 F7D4                  		sub.w	d1,(v_ringbonus).w ; subtract decrement from ring bonus
00014770                            
00014770                            Obj3A_ChkBonus:
00014770 4A40                       		tst.w	d0		; is there any bonus?
00014772 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
00014774 303C 00B0                  		move.w	#$B0,d0
00014778 4EB9 0000 3212             		jsr	(PlaySound).l ;	play "ker-ching" sound
0001477E 5428 0024                  		addq.b	#2,routine(a0)
00014782 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
00014788 6600                       		bne.s	Obj3A_SetDelay
0001478A 5828 0024                  		addq.b	#4,routine(a0)
0001478E                            
0001478E                            Obj3A_SetDelay:
0001478E 317C 00B4 001E             		move.w	#180,anim_frame_duration(a0)	; set time delay to 3 seconds
00014794                            
00014794                            locret_C692:
00014794 4E75                       		rts	
00014796                            ; ===========================================================================
00014796                            
00014796                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
00014796 4EB9 0000 0000             		jsr	AddPoints
0001479C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000147A0 0200 0003                  		andi.b	#3,d0
000147A4 66EE                       		bne.s	locret_C692
000147A6 303C 005B                  		move.w	#$5B,d0
000147AA 4EF9 0000 3212             		jmp	(PlaySound).l ;	play "blip" sound
000147B0                            ; ===========================================================================
000147B0                            
000147B0                            Obj3A_NextLevel:			; XREF: Obj3A_Index
000147B0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000147B4 0240 0007                  		andi.w	#7,d0
000147B8 E748                       		lsl.w	#3,d0
000147BA 1238 FE11                  		move.b	($FFFFFE11).w,d1
000147BE 0241 0003                  		andi.w	#3,d1
000147C2 D241                       		add.w	d1,d1
000147C4 D041                       		add.w	d1,d0
000147C6                            ;		cmpi.b	#$01, ($FFFFFF70).w	; is the player Metal Sonic?
000147C6                            ;		beq.s	MetalLevelOrder		; if yes load level from Metal Sonic's level order array
000147C6 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
000147CA 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000147CE 4A40                       		tst.w	d0
000147D0 6600                       		bne.s	Obj3A_ChkSS
000147D2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
000147D8 4EB9 0000 0000             		jsr Save_Progress	; Save data to SRAM
000147DE 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
000147E4 6000                       		bra.s	Obj3A_Display2
000147E6 4E75                       		rts
000147E8                            
000147E8                            ; ===========================================================================
000147E8                            
000147E8                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
000147E8 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
000147EE 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
000147F2 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
000147F6 6700                       		beq.s	loc_C6EA	; if not, branch
000147F8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
000147FE 6000                       		bra.s	Obj3A_Display2
00014800                            ; ===========================================================================
00014800                            
00014800                            loc_C6EA:				; XREF: Obj3A_ChkSS
00014800 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00014806                            
00014806                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
00014806 6000 0000                  		bra.w	DisplaySprite
0001480A                            ; ===========================================================================
0001480A                            ; ---------------------------------------------------------------------------
0001480A                            ; Level	order array
0001480A                            ; ---------------------------------------------------------------------------
0001480A 0001 0002 0400 0000        LevelOrder:	dc.w $0001, $0002, $0400, $0000	; GHZ 1-4
00014812 0101 0102 0500 0502        		dc.w $0101, $0102, $0500, $0502	;  LZ 1-4 (SBZ 3 is act 4)
0001481A 0201 0202 0400 0000        		dc.w $0201, $0202, $0400, $0000	;  MZ 1-4
00014822 0301 0302 0500 0000        		dc.w $0301, $0302, $0500, $0000	; SLZ 1-4
0001482A 0401 0402 0100 0000        		dc.w $0401, $0402, $0100, $0000	; SYZ 1-4
00014832 0501 0103 0000 0000        		dc.w $0501, $0103, $0000, $0000	; SBZ 1-4 (FZ is act 3)
0001483A                            		even
0001483A                            ; ---------------------------------------------------------------------------
0001483A                            ; Level	order array for Metal
0001483A                            ; ---------------------------------------------------------------------------
0001483A                            ;LevelOrderMetal:	incbin	misc\lvl_ordmetal.bin
0001483A                            ;		even
0001483A                            ; ===========================================================================
0001483A                            
0001483A                            ; ---------------------------------------------------------------------------
0001483A                            ; Subroutine to Save to SRAM the information needed to Load Auto Save
0001483A                            ; ---------------------------------------------------------------------------
0001483A                            		include	"_inc\Save_to_SRAM.asm"
0001483A                            ; d4 = 0 - save all
0001483A                            ; d4 = 1 - save all with a predetermined level 
0001483A                            ; d4 = 2 - only save the Time Attack, if was time attack flag set
0001483A                            ; d5 = number of the predetermined level 
0001483A                            ; ===========================================================================
0001483A                            ; ---------------------------------------------------------------------------
0001483A                            ; Subroutine to Save to SRAM the information needed to Load Auto Save and Time Attack
0001483A                            ; ---------------------------------------------------------------------------
0001483A                            
0001483A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001483A                            
0001483A                            
0001483A                            Save_Progress:
0001483A 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00014842 0C39 0063 0020 0001        		cmpi.b	#$63,($200001).l				; number of lives in sram is more than 99?
0001484A 6E00 0000                  		bgt.w	Livesfix		; if yes, branch
0001484E 0C39 0000 0020 0001        		cmpi.b	#0,($200001).l				; number of lives in sram is more than 99?
00014856 6D00 0000                  		blt.w	Livesfix2		; if yes, branch
0001485A 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00014860 6700 0000                  		beq.w UnlockLevels
00014864 13F8 FE12 0020 0001        		move.b ($FFFFFE12).w,($200001).l
0001486C 13F9 0020 0001 0020 011F   		move.b ($200001).l,($20011F).l
00014876 13F8 FE56 0020 012D        		move.b	($FFFFFE56).w,($20012D).l ; save emeralds
0001487E 13F8 FE57 0020 0121        		move.b	($FFFFFE57).w,($200121).l ; save emeralds
00014886 13F8 FE58 0020 0123        		move.b	($FFFFFE58).w,($200123).l ; save emeralds
0001488E 13F8 FE59 0020 0125        		move.b	($FFFFFE59).w,($200125).l ; save emeralds
00014896 13F8 FE5A 0020 0127        		move.b	($FFFFFE5A).w,($200127).l ; save emeralds
0001489E 13F8 FE5B 0020 0129        		move.b	($FFFFFE5B).w,($200129).l ; save emeralds
000148A6 13F8 FE5C 0020 012B        		move.b	($FFFFFE5C).w,($20012B).l ; save emeralds
000148AE 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000148B6 6000                       		bra.s	Save_to_SRAM_rts
000148B8                            Livesfix:
000148B8 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000148C0 13FC 0063 0020 0001        		move.b	#$63,($200001).l ; set lives in sram to 99
000148C8 13F9 0020 0001 0020 011F   		move.b	($200001).l,($20011F).l
000148D2 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000148DA 6000 0000                  		bra.w	Save_to_SRAM_rts
000148DE                            Livesfix2:
000148DE 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000148E6 13FC 0003 0020 0001        		move.b	#3,($200001).l ; set lives in sram to 99
000148EE 13F9 0020 0001 0020 011F   		move.b	($200001).l,($20011F).l
000148F8 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
00014900 6000                       		bra.s	Save_to_SRAM_rts
00014902                            UnlockLevels:
00014902 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
0001490A 13FC 0001 0020 002D        		move.b 	#$01,($20002D).l			; add 1 to number of act in sram
00014912 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
0001491A                            ;		bra.s	Save_to_SRAM_rts
0001491A                            
0001491A                            Save_to_SRAM_rts:
0001491A 4E75                       		rts
0001491C                            ; End of function Save_to_SRAM
0001491C                            ; End of function Save_to_SRAM
0001491C                            		include	"_inc\Time_attackSave.asm"
0001491C                            ; ---------------------------------------------------------------------------
0001491C                            ; Subroutine to save time attack records
0001491C                            ; ---------------------------------------------------------------------------
0001491C                            
0001491C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001491C                            
0001491C                            
0001491C                            Timeattack_save:
0001491C 0C39 0001 FFFF FFFE        		cmpi.b	#1,($FFFFFFFE).l	; is original mode ?
00014924 6700 0000                  		beq.w	time_rts			; if yes, branch
00014928                            
00014928 2038 FE22                  		move.l	($FFFFFE22).w,d0	; set time to d0
0001492C 3238 FE20                  		move.w	($FFFFFE20).w,d1	; set rings to d1
00014930 2839 FFFF FE26             		move.l	($FFFFFE26).l,d4	; set score to d4
00014936 3A38 FF96                  		move.w	($FFFFFF96).w,d5	; set monitors broken to d5
0001493A 3C38 FF98                  		move.w	($FFFFFF98).w,d6	; set rings collected to d6
0001493E                            
0001493E 4DF9 0020 0040             		lea	($200040).l,a6			; begin of the Time attack SRAM Slot
00014944                            
00014944 7400                       		moveq	#0,d2					
00014946 3438 FE10                  		move.w	($FFFFFE10).w,d2	; load level number
0001494A                            									; ((Act*2^6)"+Level*$100")/2^2
0001494A ED0A                       		lsl.b	#6,d2				; Act*2^6
0001494C E44A                       		lsr.w	#2,d2				; /2^2
0001494E 4DF6 2000                  		lea	(a6,d2.w),a6			; go to Level Time attack Slot
00014952                            
00014952 4A38 FF89                  		tst.b	($FFFFFF89).w		; "Play with Super" is turned?
00014956 6700                       		beq.s	time_tailstest		; if not, branch
00014958 4DEE 0170                  		lea	$170(a6),a6				; go to Super Time attack Slot
0001495C                            
0001495C                            time_tailstest:
0001495C 4A38 FF8B                  		tst.b	($FFFFFF8B).w		; is Tails?
00014960 6700                       		beq.s	time_test			; if not, branch
00014962 4DEE 02E0                  		lea	$2E0(a6),a6				; go to Tails Time attack Slot
00014966                            
00014966                            ; ---------------------------------------------------------------------------
00014966                            time_test:
00014966 4A2E 0006                  		tst.b	6(a6)			; did you play the level?
0001496A 6700                       		beq.s	time_save_all	; if not, save all
0001496C                            
0001496C                            ;time_save_time:
0001496C B096                       		cmp.l	(a6),d0			; is time, higher than the recorded time?
0001496E 6C00                       		bge.s	time_save_ring	; if yes, don't save
00014970 2C80                       		move.l	d0,(a6)			; save time
00014972                            
00014972                            time_save_ring:
00014972 B26E 0004                  		cmp.w	4(a6),d1		; is rings, lower than the recorded rings?
00014976 6F00                       		ble.s	time_save_score	; if yes, don't save
00014978 3D41 0004                  		move.w	d1,4(a6)		; save rings
0001497C                            
0001497C                            time_save_score:
0001497C B8AE 0007                  		cmp.l	7(a6),d4			; is score, lower than the recorded score?
00014980 6F00                       		ble.s	time_save_monitors	; if yes, don't save
00014982 2D44 0007                  		move.l	d4,7(a6)			; save score
00014986                            
00014986                            time_save_monitors:
00014986 BA6E 000B                  		cmp.w	11(a6),d5				; is monitors broken, lower than the recorded monitors broken?
0001498A 6F00                       		ble.s	time_save_ringcollected	; if yes, don't save
0001498C 3D45 000B                  		move.w	d5,11(a6)				; save monitors broken
00014990                            
00014990                            time_save_ringcollected:
00014990 BC6E 000D                  		cmp.w	13(a6),d6		; is rings collected, lower than the recorded rings collected?
00014994 6F00                       		ble.s	time_rts		; if yes, don't save
00014996 3D46 000D                  		move.w	d6,13(a6)		; save rings collected
0001499A 4E75                       		rts
0001499C                            
0001499C                            time_save_all:
0001499C 2C80                       		move.l	d0,(a6)			; save time
0001499E 3D41 0004                  		move.w	d1,4(a6)		; save rings
000149A2 1D7C 0001 0006             		move.b	#1,6(a6)		; save if you played the level
000149A8 2D44 0007                  		move.l	d4,7(a6)		; save score
000149AC 3D45 000B                  		move.w	d5,11(a6)		; save monitors broken
000149B0 3D46 000D                  		move.w	d6,13(a6)		; save rings collected
000149B4                            
000149B4                            time_rts:
000149B4 4E75                       		rts
000149B6                            ; End of function Timeattack_save
000149B6                            ; End of function Timeattack_save
000149B6                            ; ===========================================================================
000149B6                            
000149B6                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
000149B6 7220                       		moveq	#$20,d1		; set horizontal speed
000149B8 3028 0032                  		move.w	$32(a0),d0
000149BC B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
000149C0 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
000149C2 6C00                       		bge.s	Obj3A_Move2
000149C4 4441                       		neg.w	d1
000149C6                            
000149C6                            Obj3A_Move2:
000149C6 D368 0008                  		add.w	d1,8(a0)	; change item's position
000149CA 3028 0008                  		move.w	8(a0),d0
000149CE 6B00                       		bmi.s	locret_C748
000149D0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
000149D4 6400                       		bcc.s	locret_C748	; if yes, branch
000149D6 6000 0000                  		bra.w	DisplaySprite
000149DA                            ; ===========================================================================
000149DA                            
000149DA                            locret_C748:
000149DA 4E75                       		rts	
000149DC                            ; ===========================================================================
000149DC                            
000149DC                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
000149DC 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)
000149E2 6600 0000                  		bne.w	DeleteObject
000149E6 5428 0024                  		addq.b	#2,routine(a0)
000149EA 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
000149EE 303C 008D                  		move.w	#$8D,d0
000149F2 4EF9 0000 3212             		jmp	(PlaySound).l	; play FZ music
000149F8                            ; ===========================================================================
000149F8                            
000149F8                            loc_C766:				; XREF: Obj3A_Index
000149F8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000149FC 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
00014A02 6700 0000                  		beq.w	DeleteObject
00014A06 4E75                       		rts	
00014A08                            ; ===========================================================================
00014A08 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
00014A0E 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
00014A10 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
00014A16 0201                       		dc.b 2,	1
00014A18 040C 014C 00D6             		dc.w $40C, $14C, $D6
00014A1E 0206                       		dc.b 2,	6
00014A20 0520 0120 00EC             		dc.w $520, $120, $EC
00014A26 0202                       		dc.b 2,	2
00014A28 0540 0120 00FC             		dc.w $540, $120, $FC
00014A2E 0203                       		dc.b 2,	3
00014A30 0560 0120 010C             		dc.w $560, $120, $10C
00014A36 0204                       		dc.b 2,	4
00014A38 020C 014C 00CC             		dc.w $20C, $14C, $CC
00014A3E 0205                       		dc.b 2,	5
00014A40                            ; ===========================================================================
00014A40                            ; ---------------------------------------------------------------------------
00014A40                            ; Object 7E - special stage results screen
00014A40                            ; ---------------------------------------------------------------------------
00014A40                            
00014A40                            Obj7E:					; XREF: Obj_Index
00014A40 7000                       		moveq	#0,d0
00014A42 1028 0024                  		move.b	routine(a0),d0
00014A46 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
00014A4A 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
00014A4E                            ; ===========================================================================
00014A4E 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
00014A50 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
00014A52 0000                       		dc.w Obj7E_Wait-Obj7E_Index
00014A54 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
00014A56 0000                       		dc.w Obj7E_Wait-Obj7E_Index
00014A58 0000                       		dc.w Obj7E_Exit-Obj7E_Index
00014A5A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
00014A5C 0000                       		dc.w Obj7E_Continue-Obj7E_Index
00014A5E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
00014A60 0000                       		dc.w Obj7E_Exit-Obj7E_Index
00014A62 0000                       		dc.w loc_C91A-Obj7E_Index
00014A64                            ; ===========================================================================
00014A64                            
00014A64                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
00014A64 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
00014A68 6700                       		beq.s	Obj7E_Main	; if yes, branch
00014A6A 4E75                       		rts	
00014A6C                            ; ===========================================================================
00014A6C                            
00014A6C                            Obj7E_Main:
00014A6C 2248                       		movea.l	a0,a1
00014A6E 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
00014A74 7203                       		moveq	#3,d1
00014A76 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
00014A7C 6500                       		bcs.s	Obj7E_Loop	; if no, branch
00014A7E 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
00014A80                            
00014A80                            Obj7E_Loop:
00014A80 12BC 007E                  		move.b	#$7E,0(a1)
00014A84 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
00014A88 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
00014A8C 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
00014A90 135A 0024                  		move.b	(a2)+,routine(a1)
00014A94 135A 001A                  		move.b	(a2)+,mapping_frame(a1)
00014A98 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
00014AA0 337C 8580 0002             		move.w	#$8580,2(a1)
00014AA6 137C 0000 0001             		move.b	#0,1(a1)
00014AAC 43E9 0040                  		lea	object_size(a1),a1
00014AB0 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
00014AB4                            
00014AB4 7007                       		moveq	#7,d0
00014AB6 1238 FE57                  		move.b	($FFFFFE57).w,d1
00014ABA 6700                       		beq.s	loc_C842
00014ABC 7000                       		moveq	#0,d0
00014ABE 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
00014AC2 6600                       		bne.s	loc_C842	; if not, branch
00014AC4 7008                       		moveq	#8,d0		; load "Sonic got them all" text
00014AC6 317C 0018 0008             		move.w	#$18,8(a0)
00014ACC 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
00014AD2                            
00014AD2                            loc_C842:
00014AD2 1140 001A                  		move.b	d0,mapping_frame(a0)
00014AD6                            
00014AD6                            Obj7E_ChkPos:				; XREF: Obj7E_Index
00014AD6 7210                       		moveq	#$10,d1		; set horizontal speed
00014AD8 3028 0030                  		move.w	$30(a0),d0
00014ADC B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
00014AE0 6700                       		beq.s	loc_C86C	; if yes, branch
00014AE2 6C00                       		bge.s	Obj7E_Move
00014AE4 4441                       		neg.w	d1
00014AE6                            
00014AE6                            Obj7E_Move:
00014AE6 D368 0008                  		add.w	d1,8(a0)	; change item's position
00014AEA                            
00014AEA                            loc_C85A:				; XREF: loc_C86C
00014AEA 3028 0008                  		move.w	8(a0),d0
00014AEE 6B00                       		bmi.s	locret_C86A
00014AF0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
00014AF4 6400                       		bcc.s	locret_C86A	; if yes, branch
00014AF6 6000 0000                  		bra.w	DisplaySprite
00014AFA                            ; ===========================================================================
00014AFA                            
00014AFA                            locret_C86A:
00014AFA 4E75                       		rts	
00014AFC                            ; ===========================================================================
00014AFC                            
00014AFC                            loc_C86C:				; XREF: Obj7E_ChkPos
00014AFC 0C28 0002 001A             		cmpi.b	#2,mapping_frame(a0)
00014B02 66E6                       		bne.s	loc_C85A
00014B04 5428 0024                  		addq.b	#2,routine(a0)
00014B08 317C 00B4 001E             		move.w	#180,anim_frame_duration(a0)	; set time delay to 3 seconds
00014B0E 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
00014B14                            
00014B14                            Obj7E_Wait:				; XREF: Obj7E_Index
00014B14 5368 001E                  		subq.w	#1,anim_frame_duration(a0)	; subtract 1 from time delay
00014B18 6600                       		bne.s	Obj7E_Display
00014B1A 5428 0024                  		addq.b	#2,routine(a0)
00014B1E                            
00014B1E                            Obj7E_Display:
00014B1E 6000 0000                  		bra.w	DisplaySprite
00014B22                            ; ===========================================================================
00014B22                            
00014B22                            Obj7E_RingBonus:			; XREF: Obj7E_Index
00014B22 4EB9 0000 0000             		jsr	DisplaySprite
00014B28 11FC 0001 F7D6             		move.b	#1,(Update_Bonus_score).w ; set ring bonus update flag
00014B2E 4A78 F7D4                  		tst.w	(Bonus_Countdown_2).w	; is ring bonus	= zero?
00014B32 6700                       		beq.s	loc_C8C4	; if yes, branch
00014B34 0478 000A F7D4             		subi.w	#10,(Bonus_Countdown_2).w ; subtract 10	from ring bonus
00014B3A 700A                       		moveq	#10,d0		; add 10 to score
00014B3C 4EB9 0000 0000             		jsr	AddPoints
00014B42 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00014B46 0200 0003                  		andi.b	#3,d0
00014B4A 6600                       		bne.s	locret_C8EA
00014B4C 303C 005B                  		move.w	#$5B,d0
00014B50 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play "blip" sound
00014B56                            ; ===========================================================================
00014B56                            
00014B56                            loc_C8C4:				; XREF: Obj7E_RingBonus
00014B56 303C 00B0                  		move.w	#$B0,d0
00014B5A 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
00014B60 5428 0024                  		addq.b	#2,routine(a0)
00014B64 317C 00B4 001E             		move.w	#180,anim_frame_duration(a0)	; set time delay to 3 seconds
00014B6A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
00014B70 6500                       		bcs.s	locret_C8EA	; if not, branch
00014B72 317C 003C 001E             		move.w	#60,anim_frame_duration(a0)	; set time delay to 1 second
00014B78 5828 0024                  		addq.b	#4,routine(a0)	; goto "Obj7E_Continue"	routine
00014B7C                            
00014B7C                            locret_C8EA:
00014B7C 4E75                       		rts	
00014B7E                            ; ===========================================================================
00014B7E                            
00014B7E                            Obj7E_Exit:				; XREF: Obj7E_Index
00014B7E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00014B84 6000 0000                  		bra.w	DisplaySprite
00014B88                            ; ===========================================================================
00014B88                            
00014B88                            Obj7E_Continue:				; XREF: Obj7E_Index
00014B88 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
00014B8E 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
00014B94 303C 00BF                  		move.w	#$BF,d0
00014B98 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play continues music
00014B9E 5428 0024                  		addq.b	#2,routine(a0)
00014BA2 317C 0168 001E             		move.w	#360,anim_frame_duration(a0)	; set time delay to 6 seconds
00014BA8 6000 0000                  		bra.w	DisplaySprite
00014BAC                            ; ===========================================================================
00014BAC                            
00014BAC                            loc_C91A:				; XREF: Obj7E_Index
00014BAC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00014BB0 0200 000F                  		andi.b	#$F,d0
00014BB4 6600                       		bne.s	Obj7E_Display2
00014BB6 0868 0000 001A             		bchg	#0,mapping_frame(a0)
00014BBC                            
00014BBC                            Obj7E_Display2:
00014BBC 6000 0000                  		bra.w	DisplaySprite
00014BC0                            ; ===========================================================================
00014BC0 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
00014BC6 0200                       		dc.b 2,	0		; rountine number, frame number
00014BC8 0320 0120 0118             		dc.w $320, $120, $118
00014BCE 0201                       		dc.b 2,	1
00014BD0 0360 0120 0128             		dc.w $360, $120, $128
00014BD6 0202                       		dc.b 2,	2
00014BD8 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
00014BDE 0203                       		dc.b 2,	3
00014BE0 03A0 0120 0138             		dc.w $3A0, $120, $138
00014BE6 0206                       		dc.b 2,	6
00014BE8                            ; ===========================================================================
00014BE8                            ; ---------------------------------------------------------------------------
00014BE8                            ; Object 7F - chaos emeralds from the special stage results screen
00014BE8                            ; ---------------------------------------------------------------------------
00014BE8                            
00014BE8                            Obj7F:					; XREF: Obj_Index
00014BE8 7000                       		moveq	#0,d0
00014BEA 1028 0024                  		move.b	routine(a0),d0
00014BEE 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
00014BF2 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
00014BF6                            ; ===========================================================================
00014BF6 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
00014BF8 0000                       		dc.w Obj7F_Flash-Obj7F_Index
00014BFA                            
00014BFA                            ; ---------------------------------------------------------------------------
00014BFA                            ; X-axis positions for chaos emeralds
00014BFA                            ; ---------------------------------------------------------------------------
00014BFA 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
00014C06                            ; ===========================================================================
00014C06                            
00014C06                            Obj7F_Main:				; XREF: Obj7F_Index
00014C06 2248                       		movea.l	a0,a1
00014C08 45F9 0001 4BFA             		lea	(Obj7F_PosData).l,a2
00014C0E 7400                       		moveq	#0,d2
00014C10 7200                       		moveq	#0,d1
00014C12 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
00014C16 5301                       		subq.b	#1,d1		; subtract 1 from d1
00014C18 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
00014C1C                            
00014C1C                            Obj7F_Loop:
00014C1C 12BC 007F                  		move.b	#$7F,0(a1)
00014C20 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
00014C24 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
00014C2A 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
00014C2E 1633 2000                  		move.b	(a3,d2.w),d3
00014C32 1343 001A                  		move.b	d3,mapping_frame(a1)
00014C36 1343 001C                  		move.b	d3,anim(a1)
00014C3A 5202                       		addq.b	#1,d2
00014C3C 5429 0024                  		addq.b	#2,routine(a1)
00014C40 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
00014C48 337C 8541 0002             		move.w	#$8541,2(a1)
00014C4E 137C 0000 0001             		move.b	#0,1(a1)
00014C54 43E9 0040                  		lea	object_size(a1),a1	; next object
00014C58 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
00014C5C                            
00014C5C                            Obj7F_Flash:				; XREF: Obj7F_Index
00014C5C 1028 001A                  		move.b	mapping_frame(a0),d0
00014C60 117C 0006 001A             		move.b	#6,mapping_frame(a0)	; load 6th frame (blank)
00014C66 0C00 0006                  		cmpi.b	#6,d0
00014C6A 6600                       		bne.s	Obj7F_Display
00014C6C 1168 001C 001A             		move.b	anim(a0),mapping_frame(a0)	; load visible frame
00014C72                            
00014C72                            Obj7F_Display:
00014C72 6000 0000                  		bra.w	DisplaySprite
00014C76                            ; ===========================================================================
00014C76                            ; ---------------------------------------------------------------------------
00014C76                            ; Sprite mappings - zone title cards
00014C76                            ; ---------------------------------------------------------------------------
00014C76                            Map_obj34:
00014C76                            	include "_maps\obj34.asm"
00014C76                            ; --------------------------------------------------------------------------------
00014C76                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00014C76                            ; --------------------------------------------------------------------------------
00014C76                            
00014C76                            SME_zIoYh:	
00014C76 0000                       		dc.w byte_C9FE-SME_zIoYh
00014C78 0000                       		dc.w byte_CA2C-SME_zIoYh	
00014C7A 0000                       		dc.w byte_CA5A-SME_zIoYh 
00014C7C 0000                       		dc.w byte_CA7A-SME_zIoYh	
00014C7E 0000                       		dc.w byte_CAA8-SME_zIoYh
00014C80 0000                       		dc.w byte_CADC-SME_zIoYh	
00014C82 0000                       		dc.w byte_CB10-SME_zIoYh
00014C84 0000                       		dc.w byte_CB26-SME_zIoYh	
00014C86 0000                       		dc.w byte_CB31-SME_zIoYh
00014C88 0000                       		dc.w byte_CB3C-SME_zIoYh	
00014C8A 0000                       		dc.w byte_CB47-SME_zIoYh
00014C8C 0000                       		dc.w byte_CB8A-SME_zIoYh	
00014C8E 0000                       		dc.w TitleCard_ABZ-SME_zIoYh		
00014C90 0B                         byte_C9FE:	dc.b $B	
00014C91 F805 003E A4               		dc.b $F8, 5, 0, $3E, $A4	
00014C96 F805 0036 B4               		dc.b $F8, 5, 0, $36, $B4	
00014C9B F805 0026 C4               		dc.b $F8, 5, 0, $26, $C4	
00014CA0 F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4	
00014CA5 F805 003E E4               		dc.b $F8, 5, 0, $3E, $E4	
00014CAA F805 001C F4               		dc.b $F8, 5, 0, $1C, $F4	
00014CAF F800 0056 04               		dc.b $F8, 0, 0, $56, 4	
00014CB4 F805 001C 14               		dc.b $F8, 5, 0, $1C, $14	
00014CB9 F801 0020 24               		dc.b $F8, 1, 0, $20, $24	
00014CBE F805 0026 2C               		dc.b $F8, 5, 0, $26, $2C	
00014CC3 F805 0026 3C               		dc.b $F8, 5, 0, $26, $3C	
00014CC8 0E                         byte_CA2C:	dc.b $E	
00014CC9 F805 0026 80               		dc.b $F8, 5, 0, $26, $80	
00014CCE F805 0032 90               		dc.b $F8, 5, 0, $32, $90	
00014CD3 F805 003E A0               		dc.b $F8, 5, 0, $3E, $A0	
00014CD8 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	
00014CDD F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	
00014CE2 F805 0026 D0               		dc.b $F8, 5, 0, $26, $D0	
00014CE7 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00014CEC F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
00014CF1 F805 004A 00               		dc.b $F8, 5, 0, $4A, 0	
00014CF6 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	
00014CFB F801 0020 20               		dc.b $F8, 1, 0, $20, $20	
00014D00 F805 002E 28               		dc.b $F8, 5, 0, $2E, $28	
00014D05 F805 0042 38               		dc.b $F8, 5, 0, $42, $38	
00014D0A F805 001C 48               		dc.b $F8, 5, 0, $1C, $48	
00014D0F 0F                         byte_CA5A:	dc.b $F	
00014D10 F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	
00014D15 F805 004A 90               		dc.b $F8, 5, 0, $4A, $90	
00014D1A F805 0026 A0               		dc.b $F8, 5, 0, $26, $A0	
00014D1F F805 0046 B0               		dc.b $F8, 5, 0, $46, $B0	
00014D24 F805 0000 C0               		dc.b $F8, 5, 0, 0, $C0	
00014D29 F805 002E D0               		dc.b $F8, 5, 0, $2E, $D0	
00014D2E F801 0020 E0               		dc.b $F8, 1, 0, $20, $E0	
00014D33 F805 0000 E8               		dc.b $F8, 5, 0, 0, $E8	
00014D38 F800 0056 F8               		dc.b $F8, 0, 0, $56, $F8	
00014D3D F805 0008 08               		dc.b $F8, 5, 0, 8, 8	
00014D42 F805 0000 18               		dc.b $F8, 5, 0, 0, $18	
00014D47 F805 003E 28               		dc.b $F8, 5, 0, $3E, $28	
00014D4C F805 0042 38               		dc.b $F8, 5, 0, $42, $38	
00014D51 F805 0026 48               		dc.b $F8, 5, 0, $26, $48	
00014D56 F805 0010 58               		dc.b $F8, 5, 0, $10, $58	
00014D5B 0B                         byte_CA7A:	dc.b $B	
00014D5C F805 0046 9D               		dc.b $F8, 5, 0, $46, $9D	
00014D61 F805 0046 A8               		dc.b $F8, 5, 0, $46, $A8	
00014D66 F801 0020 C6               		dc.b $F8, 1, 0, $20, $C6	
00014D6B F805 0042 CD               		dc.b $F8, 5, 0, $42, $CD	
00014D70 F805 0010 DC               		dc.b $F8, 5, 0, $10, $DC	
00014D75 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	
00014D7A F805 0036 F8               		dc.b $F8, 5, 0, $36, $F8	
00014D7F F805 0000 08               		dc.b $F8, 5, 0, 0, 8	
00014D84 F805 003A 18               		dc.b $F8, 5, 0, $3A, $18	
00014D89 F805 0022 28               		dc.b $F8, 5, 0, $22, $28	
00014D8E F805 001C B8               		dc.b $F8, 5, 0, $1C, $B8	
00014D93 0D                         byte_CAA8:	dc.b $D	
00014D94 F805 0008 8C               		dc.b $F8, 5, 0, 8, $8C	
00014D99 F805 0000 9C               		dc.b $F8, 5, 0, 0, $9C	
00014D9E F805 003E AC               		dc.b $F8, 5, 0, $3E, $AC	
00014DA3 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	
00014DA8 F805 002E C4               		dc.b $F8, 5, 0, $2E, $C4	
00014DAD F805 0032 D4               		dc.b $F8, 5, 0, $32, $D4	
00014DB2 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	
00014DB7 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	
00014DBC F805 0042 04               		dc.b $F8, 5, 0, $42, 4	
00014DC1 F805 003A 14               		dc.b $F8, 5, 0, $3A, $14	
00014DC6 F805 0010 24               		dc.b $F8, 5, 0, $10, $24	
00014DCB F805 0010 34               		dc.b $F8, 5, 0, $10, $34	
00014DD0 F805 0042 44               		dc.b $F8, 5, 0, $42, $44	
00014DD5 08                         byte_CADC:	dc.b 8	
00014DD6 F805 002A B4               		dc.b $F8, 5, 0, $2A, $B4	
00014DDB F805 0000 C4               		dc.b $F8, 5, 0, 0, $C4	
00014DE0 F805 000C D4               		dc.b $F8, 5, 0, $C, $D4	
00014DE5 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	
00014DEA F805 0018 F4               		dc.b $F8, 5, 0, $18, $F4	
00014DEF F805 0010 04               		dc.b $F8, 5, 0, $10, 4	
00014DF4 F805 0000 14               		dc.b $F8, 5, 0, 0, $14	
00014DF9 F805 003A 24               		dc.b $F8, 5, 0, $3A, $24	
00014DFE 04                         byte_CB10:	dc.b 4	
00014DFF F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	
00014E04 F805 0032 F0               		dc.b $F8, 5, 0, $32, $F0	
00014E09 F805 002E 00               		dc.b $F8, 5, 0, $2E, 0	
00014E0E F805 0010 10               		dc.b $F8, 5, 0, $10, $10	
00014E13 02                         byte_CB26:	dc.b 2	
00014E14 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
00014E19 F402 0057 0C               		dc.b $F4, 2, 0, $57, $C	
00014E1E 02                         byte_CB31:	dc.b 2	
00014E1F 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
00014E24 F406 005A 08               		dc.b $F4, 6, 0, $5A, 8	
00014E29 02                         byte_CB3C:	dc.b 2	
00014E2A 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
00014E2F F406 0060 08               		dc.b $F4, 6, 0, $60, 8	
00014E34 0D                         byte_CB47:	dc.b $D	
00014E35 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4	
00014E3A E402 0074 14               		dc.b $E4, 2, 0, $74, $14	
00014E3F EC04 0077 EC               		dc.b $EC, 4, 0, $77, $EC	
00014E44 F405 0079 E4               		dc.b $F4, 5, 0, $79, $E4	
00014E49 140C 1870 EC               		dc.b $14, $C, $18, $70, $EC	
00014E4E 0402 1874 E4               		dc.b 4, 2, $18, $74, $E4	
00014E53 0C04 1877 04               		dc.b $C, 4, $18, $77, 4	
00014E58 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C	
00014E5D EC08 007D FC               		dc.b $EC, 8, 0, $7D, $FC	
00014E62 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4	
00014E67 FC08 007C F4               		dc.b $FC, 8, 0, $7C, $F4	
00014E6C 040C 007C EC               		dc.b 4, $C, 0, $7C, $EC	
00014E71 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC	
00014E76 05                         byte_CB8A:	dc.b 5	
00014E77 F805 0014 DC               		dc.b $F8, 5, 0, $14, $DC	
00014E7C F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	
00014E81 F805 002E F4               		dc.b $F8, 5, 0, $2E, $F4	
00014E86 F805 0000 04               		dc.b $F8, 5, 0, 0, 4	
00014E8B F805 0026 14               		dc.b $F8, 5, 0, $26, $14	
00014E90 09                         TitleCard_ABZ:	dc.b 9	
00014E91 F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0	
00014E96 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	
00014E9B F805 0036 D0               		dc.b $F8, 5, 0, $36, $D0	
00014EA0 F805 001C E0               		dc.b $F8, 5, 0, $1C, $E0	
00014EA5 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00014EAA F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
00014EAF F805 0010 20               		dc.b $F8, 5, 0, $10, $20	
00014EB4 F805 0042 30               		dc.b $F8, 5, 0, $42, $30	
00014EB9 F805 0000 40               		dc.b $F8, 5, 0, 0, $40	
00014EBE                            		even
00014EBE                            		even
00014EBE                            ; ---------------------------------------------------------------------------
00014EBE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
00014EBE                            ; ---------------------------------------------------------------------------
00014EBE                            Map_obj39:
00014EBE                            	include "_maps\obj39.asm"
00014EBE                            ; ---------------------------------------------------------------------------
00014EBE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
00014EBE                            ; ---------------------------------------------------------------------------
00014EBE 0000                       		dc.w byte_CBAC-Map_obj39
00014EC0 0000                       		dc.w byte_CBB7-Map_obj39
00014EC2 0000                       		dc.w byte_CBC2-Map_obj39
00014EC4 0000                       		dc.w byte_CBCD-Map_obj39
00014EC6 02                         byte_CBAC:	dc.b 2
00014EC7 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
00014ECC F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
00014ED1 02                         byte_CBB7:	dc.b 2
00014ED2 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
00014ED7 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
00014EDC 02                         byte_CBC2:	dc.b 2
00014EDD F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
00014EE2 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
00014EE7 02                         byte_CBCD:	dc.b 2
00014EE8 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
00014EED F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
00014EF2                            		even
00014EF2                            		even
00014EF2                            
00014EF2                            ; ---------------------------------------------------------------------------
00014EF2                            ; Sprite mappings - "SONIC HAS PASSED" title card
00014EF2                            ; ---------------------------------------------------------------------------
00014EF2                            ;Map_obj3A_Character:
00014EF2                            ;		move.b	($FF).w,d0	; set Character to d0
00014EF2                            ;		lsl.w	#2,d0
00014EF2                            ;		move.l	Map_obj3A_Characters(pc,d0.w),4(a1)	; load the Character map
00014EF2                            ;		tst.b	($FFFFFFF8)			; check if the machine is US or Japanese
00014EF2                            ;		bpl.s	Map_obj3A_Japanese	; if is Japanese, branch
00014EF2                            ;		rts
00014EF2                            
00014EF2                            ;Map_obj3A_Japanese:
00014EF2                            ;		move.l	Map_obj3A_Characters_Miles(pc,d0.w),4(a1)	; load the Character map
00014EF2                            ;		rts
00014EF2                            		
00014EF2                            ;Map_obj3A_Characters:
00014EF2                            ;		dc.l	Map_obj3A		; Sonic
00014EF2                            		;dc.l	Map_obj3A_Tails	; Tails
00014EF2                            
00014EF2                            ;Map_obj3A_Characters_Miles
00014EF2                            ;		dc.l	Map_obj3A		; Sonic
00014EF2                            		;dc.l	Map_obj3A_Miles	; Miles
00014EF2                            ; End of function Map_obj3A_Character
00014EF2                            
00014EF2                            ; ---------------------------------------------------------------------------
00014EF2                            ; Sprite mappings - "SONIC HAS PASSED" title card
00014EF2                            ; ---------------------------------------------------------------------------
00014EF2 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
00014EF4 0000                       		dc.w byte_CC13-Map_obj3A
00014EF6 0000                       		dc.w byte_CC32-Map_obj3A
00014EF8 0000                       		dc.w byte_CC51-Map_obj3A
00014EFA 0000                       		dc.w byte_CC75-Map_obj3A
00014EFC FF42                       		dc.w byte_CB47-Map_obj3A
00014EFE FF21                       		dc.w byte_CB26-Map_obj3A
00014F00 FF2C                       		dc.w byte_CB31-Map_obj3A
00014F02 FF37                       		dc.w byte_CB3C-Map_obj3A
00014F04 08                         byte_CBEA:	dc.b 8			; SONIC HAS
00014F05 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
00014F0A F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
00014F0F F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
00014F14 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
00014F19 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
00014F1E F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
00014F23 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
00014F28 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
00014F2D 06                         byte_CC13:	dc.b 6			; PASSED
00014F2E F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
00014F33 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00014F38 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
00014F3D F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
00014F42 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
00014F47 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
00014F4C 06                         byte_CC32:	dc.b 6			; SCORE
00014F4D F80D 214A B0               		dc.b $F8, $D, $21, $4A, $B0
00014F52 F801 2162 D0               		dc.b $F8, 1, $21,	$62, $D0
00014F57 F809 2164 18               		dc.b $F8, 9, $21,	$64, $18
00014F5C F80D 216A 30               		dc.b $F8, $D, $21, $6A, $30
00014F61 F704 206E CD               		dc.b $F7, 4, $20,	$6E, $CD
00014F66 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
00014F6B 07                         byte_CC51:	dc.b 7			; TIME BONUS
00014F6C F80D 2158 B0               		dc.b $F8, $D, $21, $5A-2, $B0
00014F71 F80D 2066 D9               		dc.b $F8, $D, $20, $66, $D9
00014F76 F801 214A F9               		dc.b $F8, 1, $21,	$4A, $F9
00014F7B F704 206E F6               		dc.b $F7, 4, $20,	$6E, $F6
00014F80 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
00014F85 F80D 1FF0 28               		dc.b $F8, $D, $1F, $F0,	$28
00014F8A F801 2170 48               		dc.b $F8, 1, $21,	$70, $48
00014F8F 07                         byte_CC75:	dc.b 7			; RING BONUS
00014F90 F80D 2150 B0               		dc.b $F8, $D, $21, $52-2, $B0
00014F95 F80D 2066 D9               		dc.b $F8, $D, $20, $66, $D9
00014F9A F801 214A F9               		dc.b $F8, 1, $21,	$4A, $F9
00014F9F F704 206E F6               		dc.b $F7, 4, $20,	$6E, $F6
00014FA4 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
00014FA9 F80D 1FF8 28               		dc.b $F8, $D, $1F, $F8,	$28
00014FAE F801 2170 48               		dc.b $F8, 1, $21,	$70, $48
00014FB4 00                         		even
00014FB4                            ; ---------------------------------------------------------------------------
00014FB4                            ; Sprite mappings - special stage results screen
00014FB4                            ; ---------------------------------------------------------------------------
00014FB4 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
00014FB6 0000                       		dc.w byte_CCEE-Map_obj7E
00014FB8 0000                       		dc.w byte_CD0D-Map_obj7E
00014FBA FE80                       		dc.w byte_CB47-Map_obj7E
00014FBC 0000                       		dc.w byte_CD31-Map_obj7E
00014FBE 0000                       		dc.w byte_CD46-Map_obj7E
00014FC0 0000                       		dc.w byte_CD5B-Map_obj7E
00014FC2 0000                       		dc.w byte_CD6B-Map_obj7E
00014FC4 0000                       		dc.w byte_CDA8-Map_obj7E
00014FC6 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
00014FC7 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
00014FCC F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
00014FD1 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
00014FD6 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
00014FDB F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
00014FE0 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
00014FE5 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
00014FEA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
00014FEF F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
00014FF4 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
00014FF9 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
00014FFE F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
00015003 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
00015008 06                         byte_CCEE:	dc.b 6			; "SCORE"
00015009 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0001500E F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
00015013 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
00015018 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0001501D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
00015022 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
00015027 07                         byte_CD0D:	dc.b 7
00015028 F80D 0150 B0               		dc.b $F8, $D, 1, $52-2, $B0
0001502D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
00015032 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
00015037 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0001503C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
00015041 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
00015046 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0001504B 04                         byte_CD31:	dc.b 4
0001504C F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
00015051 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
00015056 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0001505B F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
00015060 04                         byte_CD46:	dc.b 4
00015061 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
00015066 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0001506B F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
00015070 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
00015075 03                         byte_CD5B:	dc.b 3
00015076 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0001507B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
00015080 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
00015085 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
00015086 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0001508B F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
00015090 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
00015095 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0001509A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0001509F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
000150A4 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
000150A9 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
000150AE F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
000150B3 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
000150B8 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
000150BD F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
000150C2 0F                         byte_CDA8:	dc.b $F			; "YOU GOT THEM ALL"
000150C3 F805 004A 80               		dc.b $F8, 5, 0, $4A, $80	; Y
000150C8 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
000150CD F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
000150D2 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
000150D7 F805 0018 C0               		dc.b $F8, 5, 0, $18, $C0	; G
000150DC F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; O
000150E1 F805 0042 E0               		dc.b $F8, 5, 0, $42, $E0	; T
000150E6 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
000150EB F805 0042 00               		dc.b $F8, 5, 0, $42, $0	; T
000150F0 F805 001C 10               		dc.b $F8, 5, 0, $1C, $10	; H
000150F5 F805 0010 20               		dc.b $F8, 5, 0, $10, $20	; E
000150FA F805 002A 30               		dc.b $F8, 5, 0, $2A, $30	; M
000150FF F805 0000 50               		dc.b $F8, 5, 0, 0, $50		; A
00015104 F805 0026 60               		dc.b $F8, 5, 0, $26, $60	; L
00015109 F805 0026 70               		dc.b $F8, 5, 0, $26, $70	; L
0001510E                            		even
0001510E                            ; ---------------------------------------------------------------------------
0001510E                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0001510E                            ; ---------------------------------------------------------------------------
0001510E                            Map_obj7F:
0001510E                            	include "_maps\obj7F.asm"
0001510E                            ; ---------------------------------------------------------------------------
0001510E                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0001510E                            ; ---------------------------------------------------------------------------
0001510E 0000                       		dc.w byte_CE02-Map_obj7F
00015110 0000                       		dc.w byte_CE08-Map_obj7F
00015112 0000                       		dc.w byte_CE0E-Map_obj7F
00015114 0000                       		dc.w byte_CE14-Map_obj7F
00015116 0000                       		dc.w byte_CE1A-Map_obj7F
00015118 0000                       		dc.w byte_CE20-Map_obj7F
0001511A 0000                       		dc.w byte_CE26-Map_obj7F
0001511C 01                         byte_CE02:	dc.b 1
0001511D F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
00015122 01                         byte_CE08:	dc.b 1
00015123 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015128 01                         byte_CE0E:	dc.b 1
00015129 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0001512E 01                         byte_CE14:	dc.b 1
0001512F F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
00015134 01                         byte_CE1A:	dc.b 1
00015135 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0001513A 01                         byte_CE20:	dc.b 1
0001513B F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
00015140 00                         byte_CE26:	dc.b 0			; Blank frame
00015142 00                         		even
00015142 00                         		even
00015142                            
00015142                            ; ===========================================================================
00015142                            
00015142                            ; ---------------------------------------------------------------------------
00015142                            ; Subroutine for checking if Sonic/Tails should be hurt and hurting them if so
00015142                            ; unlike Touch_ChkHurt, the character is at a1 instead of a0
00015142                            ; ---------------------------------------------------------------------------
00015142                            
00015142                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015142                            
00015142                            Touch_ChkHurtSpikes:
00015142 4A38 FE2D                  	tst.b	($FFFFFE2D).w	; is Sonic invincible?
00015146 6600                       	bne.s	return_15AC4	; if yes, branch
00015148 4A29 0030                  	tst.b	$30(a1)	; is Sonic invulnerable?
0001514C 6600                       	bne.s	return_15AC4	; if yes, branch
0001514E 0C29 0004 0024             	cmpi.b	#4,routine(a1)
00015154 6400                       	bcc.s	return_15AC4
00015156 2629 000C                  	move.l	y_pos(a1),d3
0001515A 3029 0012                  	move.w	y_vel(a1),d0
0001515E 48C0                       	ext.l	d0
00015160 E180                       	asl.l	#8,d0
00015162 9680                       	sub.l	d0,d3
00015164 2343 000C                  	move.l	d3,y_pos(a1)
00015168 2448                       	movea.l	a0,a2
0001516A 2049                       	movea.l	a1,a0
0001516C 4EB9 0000 0000             	jsr	(HurtSonic).l
00015172 204A                       	movea.l	a2,a0
00015174 4EF9 0000 0000             	jmp		return_15AC4
0001517A                            
0001517A                            Touch_ChkHurt2:
0001517A 2248                           move.l    a0,a1
0001517C 2F08                       	move.l    a0,-(sp)
0001517E 41F8 D000                  	lea    ($FFFFD000).w,a0
00015182 4EB9 0000 0000             	jsr    Touch_ChkHurt
00015188 205F                       	move.l    (sp)+,a0
0001518A                            
0001518A                            return_15AC4:
0001518A 4E75                       	rts
0001518C                            ; End of function Touch_ChkHurt2
0001518C                            
0001518C                            loc_157A4:
0001518C 48E7 8080                  	movem.l	d0/a0,-(sp)
00015190 6100                       	bsr.s	LoadTitleCard0
00015192 4CDF 0101                  	movem.l	(sp)+,d0/a0
00015196 6000                       	bra.s	loc_157EC
00015198                            
00015198                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015198                            
00015198                            ; sub_157B0:
00015198                            LoadTitleCard0:
00015198                            
00015198 23FC 7000 0002 00C0 0004   	move.l	#$70000002,(VDP_control_port).l
000151A2 41F9 0000 0000             	lea	(ArtNem_TitleCard).l,a0
000151A8 6100 0000                  	bsr.w	JmpTo2_NemDec
000151AC 49F8 A400                  	lea	($FFFFA400).w,a4
000151B0 41F9 0000 0000             	lea	(ArtNem_TitleCard2).l,a0
000151B6 6000 0000                  	bra.w	JmpTo_NemDecToRAM
000151BA                            ; ===========================================================================
000151BA                            ; loc_157D2:
000151BA                            LoadTitleCard:
000151BA 61DC                       	bsr.s	LoadTitleCard0
000151BC 7000                       	moveq	#0,d0
000151BE 1038 FE10                  	move.b	(Current_Zone).w,d0
000151C2 103B 0000                  	move.b	byte_15820(pc,d0.w),d0
000151C6 41FA 0000                  	lea	word_15832(pc),a0
000151CA 41F0 0000                  	lea	(a0,d0.w),a0
000151CE 203C 7BC0 0002             	move.l	#$7BC00002,d0
000151D4                            
000151D4                            loc_157EC:
000151D4 46FC 2700                  	move	#$2700,sr
000151D8 43F8 A400                  	lea	($FFFFA400).w,a1
000151DC 4DF9 00C0 0000             	lea	(VDP_data_port).l,a6
000151E2 2D40 0004                  	move.l	d0,4(a6)
000151E6                            
000151E6                            loc_157FE:
000151E6 7000                       	moveq	#0,d0
000151E8 1018                       	move.b	(a0)+,d0
000151EA 6B00                       	bmi.s	loc_1581A
000151EC EB48                       	lsl.w	#5,d0
000151EE 45F1 0000                  	lea	(a1,d0.w),a2
000151F2 7200                       	moveq	#0,d1
000151F4 1218                       	move.b	(a0)+,d1
000151F6 E749                       	lsl.w	#3,d1
000151F8 5341                       	subq.w	#1,d1
000151FA                            
000151FA                            loc_15812:
000151FA 2C9A                       	move.l	(a2)+,(a6)
000151FC 51C9 FFFC                  	dbf	d1,loc_15812
00015200 60E4                       	bra.s	loc_157FE
00015202                            ; ===========================================================================
00015202                            
00015202                            loc_1581A:
00015202 46FC 2300                  	move	#$2300,sr
00015206 4E75                       	rts
00015208                            ; ===========================================================================
00015208                            ; unknown
00015208                            byte_15820:
00015208 0000 0000 1010 9820 2C00+  	dc.b   0,  0,  0,  0,$10,$10,$98,$20,$2C,  0,$3C,$46,$58,$68,$A8,$7A
00015218 8A00                       	dc.b $8A,  0	; 16
0001521A                            ; unknown
0001521A                            word_15832:
0001521A 2A06 3804 0004 2604 0C04+  	dc.w $2A06,$3804,    4,$2604, $C04,$1804,$1C02,$FFFF
0001522A 2A06 4004 3804 3004 2604+  	dc.w $2A06,$4004,$3804,$3004,$2604,$1C02,$3C04,$FFFF; 8
0001523A 1804 1C02 2604 4004 3004+  	dc.w $1804,$1C02,$2604,$4004,$3004,$FFFF,$1804,$1C02; 16
0001524A 0C04 3004 0004 2604 0804+  	dc.w  $C04,$3004,    4,$2604, $804,$FFFF,$1C02,$2604; 24
0001525A 0804 0004 FFFF 2A06 5604+  	dc.w  $804,    4,$FFFF,$2A06,$5604,$3C04,$4004,$1C02; 32
0001526A 0804 0004 4804 FFFF 0804+  	dc.w  $804,    4,$4804,$FFFF, $804,    4,$3C04,$1C02; 40
0001527A 1404 1804 4004 FFFF 0804+  	dc.w $1404,$1804,$4004,$FFFF, $804,$1804,$2A06,$1C02; 48
0001528A 0004 2604 3004 4004 FFFF+  	dc.w	 4,$2604,$3004,$4004,$FFFF,    4,$3404,$4404; 56
0001529A 4004 1C02 0804 3804 FFFF+  	dc.w $4004,$1C02, $804,$3804,$FFFF,$3C04,$2204,$5604; 64
000152AA 0804 1804 0004 FFFF 4C06+  	dc.w  $804,$1804,    4,$FFFF,$4C06,$1C02,$1404,$1004; 72
000152BA 3804 4004 3C04 FFFF 0C04+  	dc.w $3804,$4004,$3C04,$FFFF, $C04,    4,$4004,$1804; 80
000152CA 1404 FFFF                  	dc.w $1404,$FFFF	; 88
000152CE                            ; ===========================================================================
000152CE 4E71                       	nop
000152D0                            
000152D0                            JmpTo2_NemDec 
000152D0 4EF9 0000 3596             	jmp	(NemDec).l
000152D6                            ; ===========================================================================
000152D6                            
000152D6                            JmpTo_NemDecToRAM 
000152D6 4EF9 0000 358C             	jmp	(NemDec_RAM).l
000152DC                            ; End of function LoadTitleCard0
000152DC                            
000152DC                            ; ===========================================================================
000152DC                            ; ----------------------------------------------------------------------------
000152DC                            ; Object 36 - Spikes
000152DC                            ; ----------------------------------------------------------------------------
000152DC                            ; OST Variables:
000152DC =00000030                  spikes_base_x_pos	= objoff_30	; original x-position
000152DC =00000032                  spikes_base_y_pos	= objoff_32	; original y-position
000152DC =00000034                  spikes_retract_offset	= objoff_34	; actual position relative to base position
000152DC =00000036                  spikes_retract_state	= objoff_36	; 0 = positive offset, 1 = original position
000152DC =00000038                  spikes_retract_timer	= objoff_38	; delay, before spikes move again
000152DC                            ; Sprite_15900:
000152DC                            Obj36:
000152DC 7000                       	moveq	#0,d0
000152DE 1028 0024                  	move.b	routine(a0),d0
000152E2 323B 0000                  	move.w	Obj36_Index(pc,d0.w),d1
000152E6 4EFB 1000                  	jmp	Obj36_Index(pc,d1.w)
000152EA                            ; ===========================================================================
000152EA                            ; off_1590E:
000152EA                            Obj36_Index:	
000152EA 0000                       		dc.w Obj36_Init-Obj36_Index		; 0
000152EC 0000                       		dc.w Obj36_Upright-Obj36_Index	; 2
000152EE 0000                       		dc.w Obj36_Sideways-Obj36_Index	; 4
000152F0 0000                       		dc.w Obj36_Upsidedown-Obj36_Index	; 6
000152F2                            ; ===========================================================================
000152F2                            ; byte_15916:
000152F2                            Obj36_InitData:
000152F2                            	;    width_pixels
000152F2                            	;	 y_radius
000152F2 1010                       	dc.b $10,$10	; 0	- Upright or ceiling spikes
000152F4 2010                       	dc.b $20,$10	; 2
000152F6 3010                       	dc.b $30,$10	; 4
000152F8 4010                       	dc.b $40,$10	; 6
000152FA 1010                       	dc.b $10,$10	; 8	- Sideways spikes
000152FC 1020                       	dc.b $10,$20	; 10
000152FE 1030                       	dc.b $10,$30	; 12
00015300 1040                       	dc.b $10,$40	; 14
00015302                            ; ===========================================================================
00015302                            ; loc_15926:
00015302                            Obj36_Init:
00015302 5428 0024                  	addq.b	#2,routine(a0)	; => Obj36_Upright
00015306 217C 0000 0000 0004        	move.l	#Map_obj36,mappings(a0)
0001530E 317C 051B 0002             	move.w	#$51B,art_tile(a0)
00015314 0028 0004 0001             	ori.b	#4,render_flags(a0)
0001531A 317C 0200 0018             	move.w	#$200,priority(a0)
00015320 1028 0028                  	move.b	subtype(a0),d0
00015324 0228 000F 0028             	andi.b	#$F,subtype(a0)		; lower 4 bits determine behavior, upper bits need to be removed
0001532A 0240 00F0                  	andi.w	#$F0,d0
0001532E 43FA FFC2                  	lea	Obj36_InitData(pc),a1	; upper 4 bits determine size and orientation
00015332 E648                       	lsr.w	#3,d0			; use upper 4 bits * 2 as offset
00015334 D2C0                       	adda.w	d0,a1
00015336 1159 0023                  	move.b	(a1)+,width_pixels(a0)
0001533A 1159 0016                  	move.b	(a1)+,y_radius(a0)
0001533E E248                       	lsr.w	#1,d0			; use upper 4 bits to determine mappings frame
00015340 1140 001A                  	move.b	d0,mapping_frame(a0)
00015344 0C00 0004                  	cmpi.b	#4,d0			; do spikes face sideways?
00015348 6500                       	blo.s	Obj36_Init_2			; if not, branch
0001534A 5428 0024                  	addq.b	#2,routine(a0)	; => Obj36_Sideways
0001534E 317C 0523 0002             	move.w	#$523,art_tile(a0)
00015354                            Obj36_Init_2:
00015354 0828 0001 0022             	btst	#1,status(a0)		; are spikes upsiede-down?
0001535A 6700                       	beq.s	Obj36_Init_3			; if not, branch
0001535C 117C 0006 0024             	move.b	#6,routine(a0)	; => Obj36_Upsidedown
00015362                            Obj36_Init_3:
00015362 3168 0008 0030             	move.w	x_pos(a0),spikes_base_x_pos(a0)
00015368 3168 000C 0032             	move.w	y_pos(a0),spikes_base_y_pos(a0)
0001536E 4E75                       	rts
00015370                            ; ===========================================================================
00015370                            ; loc_15996:
00015370                            Obj36_Upright:
00015370 6100 0000                  	bsr.w	MoveSpikes
00015374 7200                       	moveq	#0,d1
00015376 1228 0023                  	move.b	width_pixels(a0),d1
0001537A 0641 000B                  	addi.w	#$B,d1
0001537E 7400                       	moveq	#0,d2
00015380 1428 0016                  	move.b	y_radius(a0),d2
00015384 3602                       	move.w	d2,d3
00015386 5243                       	addq.w	#1,d3
00015388 3828 0008                  	move.w	x_pos(a0),d4
0001538C 6100 0000                  	bsr.w	SolidObject
00015390 1C28 0022                  	move.b	status(a0),d6
00015394 0206 0008                  	andi.b	#standing_mask,d6	; are Sonic or Tails standing on the object?
00015398 6700                       	beq.s	Obj36_UprightEnd	; if not, branch
0001539A 1006                       	move.b	d6,d0
0001539C 0200 0008                  	andi.b	#p1_standing,d0		; is Sonic standing on the object?
000153A0 6700                       	beq.s	Obj36_Upright_2			; if not, branch
000153A2 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
000153A6 6100 FD9A                  	bsr.w	Touch_ChkHurtSpikes
000153AA                            Obj36_Upright_2:
000153AA                            ;	andi.b	#p2_standing,d6		; is Tails standing on the object?
000153AA                            ;	beq.s	Obj36_UprightEnd	; if not, branch
000153AA                            ;	lea	(Sidekick).w,a1 ; a1=character
000153AA                            ;	bsr.w	Touch_ChkHurtSpikes
000153AA                            
000153AA                            ; loc_159DE:
000153AA                            Obj36_UprightEnd:
000153AA 3028 0030                  	move.w	spikes_base_x_pos(a0),d0
000153AE 6000 0000                  	bra.w	MarkObjGone2
000153B2                            ; ===========================================================================
000153B2                            ; loc_159E6:
000153B2                            Obj36_Sideways:
000153B2 3F28 0008                  	move.w	x_pos(a0),-(sp)
000153B6 6100 0000                  	bsr.w	MoveSpikes
000153BA 7200                       	moveq	#0,d1
000153BC 1228 0023                  	move.b	width_pixels(a0),d1
000153C0 0641 000B                  	addi.w	#$B,d1
000153C4 7400                       	moveq	#0,d2
000153C6 1428 0016                  	move.b	y_radius(a0),d2
000153CA 3602                       	move.w	d2,d3
000153CC 5243                       	addq.w	#1,d3
000153CE 381F                       	move.w	(sp)+,d4
000153D0 6100 0000                  	bsr.w	SolidObject
000153D4 4846                       	swap	d6
000153D6 0246 0001                  	andi.w	#touch_side_mask,d6	; are Sonic or Tails pushing against the side?
000153DA 6700                       	beq.s	Obj36_SidewaysEnd	; if not, branch
000153DC 1006                       	move.b	d6,d0
000153DE 0200 0001                  	andi.b	#p1_touch_side,d0	; is Sonic pushing against the side?
000153E2 6700                       	beq.s	Obj36_Sideways_2			; if not, branch
000153E4 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
000153E8 6100 FD58                  	bsr.w	Touch_ChkHurtSpikes
000153EC 08A8 0003 0022             	bclr	#p1_pushing_bit,status(a0)
000153F2                            Obj36_Sideways_2:
000153F2                            ;	andi.b	#p2_touch_side,d6	; is Tails pushing against the side?
000153F2                            ;	beq.s	Obj36_SidewaysEnd	; if not, branch
000153F2                            ;	lea	(Sidekick).w,a1 ; a1=character
000153F2                            ;	bsr.w	Touch_ChkHurtSpikes
000153F2                            ;	bclr	#p2_pushing_bit,status(a0)
000153F2                            
000153F2                            ; loc_15A3A:
000153F2                            Obj36_SidewaysEnd:
000153F2 3028 0030                  	move.w	spikes_base_x_pos(a0),d0
000153F6 6000 0000                  	bra.w	MarkObjGone2
000153FA                            ; ===========================================================================
000153FA                            ; loc_15A42:
000153FA                            Obj36_Upsidedown:
000153FA 6100 0000                  	bsr.w	MoveSpikes
000153FE 7200                       	moveq	#0,d1
00015400 1228 0023                  	move.b	width_pixels(a0),d1
00015404 0641 000B                  	addi.w	#$B,d1
00015408 7400                       	moveq	#0,d2
0001540A 1428 0016                  	move.b	y_radius(a0),d2
0001540E 3602                       	move.w	d2,d3
00015410 5243                       	addq.w	#1,d3
00015412 3828 0008                  	move.w	x_pos(a0),d4
00015416 6100 0000                  	bsr.w	SolidObject
0001541A                            ;	tst.b	$25(a0)
0001541A                            ;	bne.s	Obj36_UpsidedownEnd
0001541A 4A44                       	tst.w	d4
0001541C 6A00                       	bpl.s	Obj36_UpsidedownEnd	; if not, branch
0001541E 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
00015422 6100 FD1E                  	bsr.w	Touch_ChkHurtSpikes
00015426                            Obj36_Upsidedown_2:
00015426                            ;	andi.b	#p2_touch_bottom,d6	; is Tails touching the bottom?
00015426                            ;	beq.s	Obj36_UpsidedownEnd	; if not, branch
00015426                            ;	lea	(Sidekick).w,a1 ; a1=character
00015426                            ;	bsr.w	Touch_ChkHurtSpikes
00015426                            
00015426                            ; loc_15A88:
00015426                            Obj36_UpsidedownEnd:
00015426 3028 0030                  	move.w	spikes_base_x_pos(a0),d0
0001542A 6000 0000                  	bra.w	MarkObjGone2
0001542E                            
0001542E                            
0001542E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001542E                            ; handles direction, timing and movement of moving spikes
0001542E                            
0001542E                            ; sub_15AC6:
0001542E                            MoveSpikes:
0001542E 7000                       	moveq	#0,d0
00015430 1028 0028                  	move.b	subtype(a0),d0
00015434 D040                       	add.w	d0,d0
00015436 323B 0000                  	move.w	MoveSpikes_Behaviors(pc,d0.w),d1
0001543A 4EFB 1000                  	jmp	MoveSpikes_Behaviors(pc,d1.w)
0001543E                            ; End of function MoveSpikes
0001543E                            
0001543E                            ; ===========================================================================
0001543E                            ; off_15AD6:
0001543E                            MoveSpikes_Behaviors:
0001543E 0000                       		dc.w MoveSpikes_Still-MoveSpikes_Behaviors		; 0
00015440 0000                       		dc.w MoveSpikes_Vertical-MoveSpikes_Behaviors	; 1
00015442 0000                       		dc.w MoveSpikes_Horizontal-MoveSpikes_Behaviors	; 2
00015444                            ; ===========================================================================
00015444                            ; return_15ADC:
00015444                            MoveSpikes_Still:
00015444 4E75                       	rts
00015446                            ; ===========================================================================
00015446                            ; loc_15ADE:
00015446                            MoveSpikes_Vertical:
00015446 6100 0000                  	bsr.w	MoveSpikes_Delay
0001544A 7000                       	moveq	#0,d0
0001544C 1028 0034                  	move.b	spikes_retract_offset(a0),d0
00015450 D068 0032                  	add.w	spikes_base_y_pos(a0),d0	; apply offset to y-position
00015454 3140 000C                  	move.w	d0,y_pos(a0)
00015458 4E75                       	rts
0001545A                            ; ===========================================================================
0001545A                            ; loc_15AF2:
0001545A                            MoveSpikes_Horizontal:
0001545A 6100 0000                  	bsr.w	MoveSpikes_Delay
0001545E 7000                       	moveq	#0,d0
00015460 1028 0034                  	move.b	spikes_retract_offset(a0),d0
00015464 D068 0030                  	add.w	spikes_base_x_pos(a0),d0	; apply offset to x-position
00015468 3140 0008                  	move.w	d0,x_pos(a0)
0001546C 4E75                       	rts
0001546E                            
0001546E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001546E                            
0001546E                            ; sub_15B06:
0001546E                            MoveSpikes_Delay:
0001546E 4A68 0038                  	tst.w	spikes_retract_timer(a0)	; is it time for spikes to move again?
00015472 6700                       	beq.s	MoveSpikes_ChkDir		; if yes, branch
00015474 5368 0038                  	subq.w	#1,spikes_retract_timer(a0)	; else, decrement timer
00015478 6600                       	bne.s	MoveSpikes_Retract_2	; rts			; branch, if timer didn't reach 0
0001547A 4A28 0001                  	tst.b	render_flags(a0)		; are spikes on screen?
0001547E 6A00                       	bpl.s	MoveSpikes_Retract_2	; rts			; if not, branch
00015480 303C 00B6                  	move.w	#$B6,d0		; play spike movement sound
00015484 4EB9 0000 3212             	jsr	(PlaySound).l
0001548A 6000                       	bra.s	MoveSpikes_Retract_2	; rts
0001548C                            ; ===========================================================================
0001548C                            ; loc_15B24:
0001548C                            MoveSpikes_ChkDir:
0001548C 4A68 0036                  	tst.w	spikes_retract_state(a0)	; do spikes need to move away from initial position?
00015490 6700                       	beq.s	MoveSpikes_Retract		; if yes, branch
00015492 0468 0800 0034             	subi.w	#$800,spikes_retract_offset(a0)	; subtract 8 pixels from offset
00015498 6400                       	bhs.s	MoveSpikes_Retract_2	; rts			; branch, if offset is not yet 0
0001549A 317C 0000 0034             	move.w	#0,spikes_retract_offset(a0)
000154A0 317C 0000 0036             	move.w	#0,spikes_retract_state(a0)	; switch state
000154A6 317C 003C 0038             	move.w	#$3C,spikes_retract_timer(a0)	; reset timer
000154AC 6000                       	bra.s	MoveSpikes_Retract_2	; rts
000154AE                            ; ===========================================================================
000154AE                            ; loc_15B46:
000154AE                            MoveSpikes_Retract:
000154AE 0668 0800 0034             	addi.w	#$800,spikes_retract_offset(a0)		; add 8 pixels to offset
000154B4 0C68 2000 0034             	cmpi.w	#$2000,spikes_retract_offset(a0)	; is offset the width of one spike block (32 pixels)?
000154BA 6500                       	blo.s	MoveSpikes_Retract_2	; rts				; if not, branch
000154BC 317C 2000 0034             	move.w	#$2000,spikes_retract_offset(a0)
000154C2 317C 0001 0036             	move.w	#1,spikes_retract_state(a0)	; switch state
000154C8 317C 003C 0038             	move.w	#$3C,spikes_retract_timer(a0)	; reset timer
000154CE                            MoveSpikes_Retract_2:
000154CE 4E75                       	rts
000154D0                            ; End of function MoveSpikes_Delay
000154D0                            
000154D0                            ; ===========================================================================
000154D0                            ; -------------------------------------------------------------------------------
000154D0                            ; sprite mappings
000154D0                            ; -------------------------------------------------------------------------------
000154D0                            Map_obj36:
000154D0                            	include "_maps\spikess2.asm"
000154D0                            ; --------------------------------------------------------------------------------
000154D0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000154D0                            ; --------------------------------------------------------------------------------
000154D0                            
000154D0                            SME_AVB8T:	
000154D0 0000 0000                  		dc.w SME_AVB8T_10-SME_AVB8T, SME_AVB8T_1B-SME_AVB8T	
000154D4 0000 0000                  		dc.w SME_AVB8T_30-SME_AVB8T, SME_AVB8T_4F-SME_AVB8T	
000154D8 0000 0000                  		dc.w SME_AVB8T_78-SME_AVB8T, SME_AVB8T_83-SME_AVB8T	
000154DC 0000 0000                  		dc.w SME_AVB8T_98-SME_AVB8T, SME_AVB8T_B7-SME_AVB8T	
000154E0 02                         SME_AVB8T_10:	dc.b 2	
000154E1 F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
000154E6 F007 0000 00               		dc.b $F0, 7, 0, 0, 0	
000154EB 04                         SME_AVB8T_1B:	dc.b 4	
000154EC F007 0000 E0               		dc.b $F0, 7, 0, 0, $E0	
000154F1 F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
000154F6 F007 0000 00               		dc.b $F0, 7, 0, 0, 0	
000154FB F007 0000 10               		dc.b $F0, 7, 0, 0, $10	
00015500 06                         SME_AVB8T_30:	dc.b 6	
00015501 F007 0000 D0               		dc.b $F0, 7, 0, 0, $D0	
00015506 F007 0000 E0               		dc.b $F0, 7, 0, 0, $E0	
0001550B F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
00015510 F007 0000 00               		dc.b $F0, 7, 0, 0, 0	
00015515 F007 0000 10               		dc.b $F0, 7, 0, 0, $10	
0001551A F007 0000 20               		dc.b $F0, 7, 0, 0, $20	
0001551F 08                         SME_AVB8T_4F:	dc.b 8	
00015520 F007 0000 C0               		dc.b $F0, 7, 0, 0, $C0	
00015525 F007 0000 D0               		dc.b $F0, 7, 0, 0, $D0	
0001552A F007 0000 E0               		dc.b $F0, 7, 0, 0, $E0	
0001552F F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
00015534 F007 0000 00               		dc.b $F0, 7, 0, 0, 0	
00015539 F007 0000 10               		dc.b $F0, 7, 0, 0, $10	
0001553E F007 0000 20               		dc.b $F0, 7, 0, 0, $20	
00015543 F007 0000 30               		dc.b $F0, 7, 0, 0, $30	
00015548 02                         SME_AVB8T_78:	dc.b 2	
00015549 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
0001554E 000D 0000 F0               		dc.b 0, $D, 0, 0, $F0	
00015553 04                         SME_AVB8T_83:	dc.b 4	
00015554 E00D 0000 F0               		dc.b $E0, $D, 0, 0, $F0	
00015559 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
0001555E 000D 0000 F0               		dc.b 0, $D, 0, 0, $F0	
00015563 100D 0000 F0               		dc.b $10, $D, 0, 0, $F0	
00015568 06                         SME_AVB8T_98:	dc.b 6	
00015569 D00D 0000 F0               		dc.b $D0, $D, 0, 0, $F0	
0001556E E00D 0000 F0               		dc.b $E0, $D, 0, 0, $F0	
00015573 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
00015578 000D 0000 F0               		dc.b 0, $D, 0, 0, $F0	
0001557D 100D 0000 F0               		dc.b $10, $D, 0, 0, $F0	
00015582 200D 0000 F0               		dc.b $20, $D, 0, 0, $F0	
00015587 08                         SME_AVB8T_B7:	dc.b 8	
00015588 C00D 0000 F0               		dc.b $C0, $D, 0, 0, $F0	
0001558D D00D 0000 F0               		dc.b $D0, $D, 0, 0, $F0	
00015592 E00D 0000 F0               		dc.b $E0, $D, 0, 0, $F0	
00015597 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
0001559C 000D 0000 F0               		dc.b 0, $D, 0, 0, $F0	
000155A1 100D 0000 F0               		dc.b $10, $D, 0, 0, $F0	
000155A6 200D 0000 F0               		dc.b $20, $D, 0, 0, $F0	
000155AB 300D 0000 F0               		dc.b $30, $D, 0, 0, $F0	
000155B0                            		even
000155B0                            		even
000155B0                            	even
000155B0                            
000155B0                            ; ===========================================================================
000155B0                            ; ---------------------------------------------------------------------------
000155B0                            ; Object 3B - purple rock (GHZ)
000155B0                            ; ---------------------------------------------------------------------------
000155B0                            
000155B0                            Obj3B:					; XREF: Obj_Index
000155B0 7000                       		moveq	#0,d0
000155B2 1028 0024                  		move.b	routine(a0),d0
000155B6 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
000155BA 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
000155BE                            ; ===========================================================================
000155BE 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
000155C0 0000                       		dc.w Obj3B_Solid-Obj3B_Index
000155C2                            ; ===========================================================================
000155C2                            
000155C2                            Obj3B_Main:				; XREF: Obj3B_Index
000155C2 5428 0024                  		addq.b	#2,routine(a0)
000155C6 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
000155CE 317C 63D0 0002             		move.w	#$63D0,2(a0)
000155D4 117C 0004 0001             		move.b	#4,1(a0)
000155DA 117C 0013 0023             		move.b	#$13,width_pixels(a0)
000155E0 317C 0200 0018             		move.w	#$200,priority(a0)
000155E6                            
000155E6                            Obj3B_Solid:				; XREF: Obj3B_Index
000155E6 323C 001B                  		move.w	#$1B,d1
000155EA 343C 0010                  		move.w	#$10,d2
000155EE 363C 0010                  		move.w	#$10,d3
000155F2 3828 0008                  		move.w	8(a0),d4
000155F6 4EB9 0000 0000             		jsr	SolidObject
000155FC 4EB9 0000 0000             		jsr	DisplaySprite
00015602 4EF9 0000 0000             		jmp		MarkObjGone3
00015608                            ; ===========================================================================
00015608                            ; ---------------------------------------------------------------------------
00015608                            ; Object 49 - waterfall	sound effect (GHZ)
00015608                            ; ---------------------------------------------------------------------------
00015608                            
00015608                            Obj49:					; XREF: Obj_Index
00015608 7000                       		moveq	#0,d0
0001560A 1028 0024                  		move.b	routine(a0),d0
0001560E 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
00015612 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
00015616                            ; ===========================================================================
00015616 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
00015618 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0001561A                            ; ===========================================================================
0001561A                            
0001561A                            Obj49_Main:				; XREF: Obj49_Index
0001561A 5428 0024                  		addq.b	#2,routine(a0)
0001561E 117C 0004 0001             		move.b	#4,1(a0)
00015624                            
00015624                            Obj49_PlaySnd:				; XREF: Obj49_Index
00015624 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00015628 0200 003F                  		andi.b	#$3F,d0
0001562C 6600                       		bne.s	Obj49_ChkDel
0001562E 303C 0079                  		move.w	#$79,d0
00015632 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play waterfall sound
00015638                            
00015638                            Obj49_ChkDel:
00015638 4EF9 0000 0000             		jmp MarkObjGone3
0001563E                            ; ===========================================================================
0001563E                            ; ---------------------------------------------------------------------------
0001563E                            ; Sprite mappings - purple rock	(GHZ)
0001563E                            ; ---------------------------------------------------------------------------
0001563E                            Map_obj3B:
0001563E                            	include "_maps\obj3B.asm"
0001563E                            ; ---------------------------------------------------------------------------
0001563E                            ; Sprite mappings - purple rock	(GHZ)
0001563E                            ; ---------------------------------------------------------------------------
0001563E 0000                       		dc.w byte_D110-Map_obj3B
00015640 02                         byte_D110:	dc.b 2
00015641 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
00015646 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0001564C 00                         		even
0001564C 00                         		even
0001564C                            
0001564C                            ; ===========================================================================
0001564C                            ; ---------------------------------------------------------------------------
0001564C                            ; Object 3C - smashable	wall (GHZ, SLZ)
0001564C                            ; ---------------------------------------------------------------------------
0001564C                            
0001564C                            Obj3C:					; XREF: Obj_Index
0001564C 7000                       		moveq	#0,d0
0001564E 1028 0024                  		move.b	routine(a0),d0
00015652 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
00015656 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0001565A 6000 0000                  		bra.w	MarkObjGone
0001565E                            ; ===========================================================================
0001565E 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
00015660 0000                       		dc.w Obj3C_Solid-Obj3C_Index
00015662 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
00015664                            ; ===========================================================================
00015664                            
00015664                            Obj3C_Main:				; XREF: Obj3C_Index
00015664 5428 0024                  		addq.b	#2,$24(a0)
00015668 217C 0000 0000 0004        		move.l	#Map_Obj3C,4(a0)
00015670 317C 450F 0002             		move.w	#$450F,2(a0)
00015676 117C 0004 0001             		move.b	#4,1(a0)
0001567C 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00015682 317C 0200 0018             		move.w	#$200,priority(a0)
00015688 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001568E 4A39 00FF F7C8             		tst.b	($FFF7C8).l
00015694 6B00                       		bmi.s	locret_102CC
00015696 0C39 0006 00FF D024        		cmpi.b	#6,($FFD024).l
0001569E 6400                       		bcc.s	locret_102CC
000156A0 4A79 00FF FE08             		tst.w	($FFFE08).l
000156A6 6600                       		bne.s	locret_102CC
000156A8                            Obj3C_Solid:				; XREF: Obj3C_Index
000156A8 323C 001B                  		move.w	#$1B,d1
000156AC 343C 0020                  		move.w	#$20,d2	; ' '
000156B0 43F9 FFFF D000             		lea	(MainCharacter).l,a1
000156B6 3169 0010 0030             		move.w	$10(a1),$30(a0)
000156BC 0C38 0002 FE2C             		cmpi.b	#2,($FFFFFE2C).w
000156C2 6600                       		bne.s	Obj3C_ChkRoll
000156C4 0C39 0001 00FF D19C        		cmpi.b	#1,($FFD19C).l
000156CC 6700                       		beq.s	Obj3C_Solid2
000156CE                            
000156CE                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
000156CE 4A38 FE08                  		tst.b	(Debug_Placement_Mode).w
000156D2 6600                       		bne.s	locret_102CC
000156D4 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
000156D8 6600                       		bne.s	Obj3C_Solid2
000156DA 0C29 0002 001C             		cmpi.b	#2,$1C(a1)
000156E0 6600                       		bne.s	loc_102BE
000156E2 0829 0001 0022             		btst	#1,$22(a1)
000156E8 6600                       		bne.s	loc_102BE
000156EA 3029 0010                  		move.w	$10(a1),d0
000156EE 6A00                       		bpl.s	Obj3C_ChkSpeed
000156F0 4440                       		neg.w	d0
000156F2                            
000156F2                            Obj3C_ChkSpeed:				; CODE XREF: ROM:000102B4j
000156F2 0C40 0480                  		cmp.w	#$480,d0
000156F6 6C00                       		bge.s	Obj3C_Solid2
000156F8                            
000156F8                            loc_102BE:				; CODE XREF: ROM:000102A6j
000156F8                            					; ROM:000102AEj
000156F8 363C 0020                  		move.w	#$20,d3	; ' '
000156FC 3828 0008                  		move.w	8(a0),d4
00015700 4EB9 0000 0000             		jsr	SolidObject
00015706                            
00015706                            locret_102CC:				; CODE XREF: ROM:00010256j
00015706                            					; ROM:00010260j ...
00015706 4E75                       		rts
00015708                            ; ---------------------------------------------------------------------------
00015708                            
00015708                            Obj3C_Solid2:				; CODE XREF: ROM:0001028Ej
00015708                            					; ROM:00010296j ...
00015708 3029 0008                  		move.w	8(a1),d0
0001570C 9068 0008                  		sub.w	8(a0),d0
00015710 D041                       		add.w	d1,d0
00015712 6B00 FFF2                  		bmi.w	locret_102CC
00015716 3601                       		move.w	d1,d3
00015718 D643                       		add.w	d3,d3
0001571A B043                       		cmp.w	d3,d0
0001571C 62E8                       		bhi.s	locret_102CC
0001571E 1629 0016                  		move.b	$16(a1),d3
00015722 4883                       		ext.w	d3
00015724 D443                       		add.w	d3,d2
00015726 3629 000C                  		move.w	$C(a1),d3
0001572A 9668 000C                  		sub.w	$C(a0),d3
0001572E 5843                       		addq.w	#4,d3
00015730 D642                       		add.w	d2,d3
00015732 6BD2                       		bmi.s	locret_102CC
00015734 3802                       		move.w	d2,d4
00015736 D844                       		add.w	d4,d4
00015738 B644                       		cmp.w	d4,d3
0001573A 64CA                       		bcc.s	locret_102CC
0001573C                            
0001573C                            loc_10302:				; DATA XREF: ROM:000B9E60o
0001573C 5869 0008                  		addq.w	#4,8(a1)
00015740 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4
00015746 3028 0008                  		move.w	8(a0),d0
0001574A B069 0008                  		cmp.w	8(a1),d0
0001574E 6500                       		bcs.s	Obj3C_Smash
00015750 5169 0008                  		subq.w	#8,8(a1)
00015754 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4
0001575A                            
0001575A                            Obj3C_Smash:				; CODE XREF: ROM:00010314j
0001575A 3369 0010 0020             		move.w	$10(a1),inertia(a1)
00015760 08A8 0005 0022             		bclr	#5,$22(a0)
00015766 08A9 0005 0022             		bclr	#5,$22(a1)
0001576C 7207                       		moveq	#7,d1
0001576E 343C 0070                  		move.w	#$70,d2	; 'p'
00015772 6100                       		bsr.s	SmashObject
00015774                            
00015774                            Obj3C_FragMove:				; DATA XREF: SmashObject+36o
00015774 4EB9 0000 0000             		jsr	SpeedToPos
0001577A 0668 0070 0012             		addi.w	#$70,$12(a0) ; 'p'
00015780 4EB9 0000 0000             		jsr	DisplaySprite
00015786 4A28 0001                  		tst.b	1(a0)
0001578A 6A00 0000                  		bpl.w	DeleteObject
0001578E 4E75                       		rts
00015790                            		
00015790                            ; ---------------------------------------------------------------------------
00015790                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
00015790                            ; ---------------------------------------------------------------------------
00015790                            
00015790                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015790                            
00015790                            
00015790                            SmashObject:				; XREF: Obj3C_Smash
00015790 7000                       		moveq	#0,d0
00015792 1028 001A                  		move.b	$1A(a0),d0
00015796 D040                       		add.w	d0,d0
00015798 2668 0004                  		movea.l	4(a0),a3
0001579C D6F3 0000                  		adda.w	(a3,d0.w),a3
000157A0 524B                       		addq.w	#1,a3
000157A2 08E8 0005 0001             		bset	#5,1(a0)
000157A8 1810                       		move.b	0(a0),d4
000157AA 1A28 0001                  		move.b	1(a0),d5
000157AE 2248                       		movea.l	a0,a1
000157B0 6000                       		bra.s	Smash_LoadFrag
000157B2                            ; ===========================================================================
000157B2                            
000157B2                            Smash_Loop:
000157B2 6100 0000                  		bsr.w	SingleObjLoad
000157B6 6600                       		bne.s	Smash_PlaySnd
000157B8 5A4B                       		addq.w	#5,a3
000157BA                            
000157BA                            Smash_LoadFrag:				; XREF: SmashObject
000157BA 137C 0004 0024             		move.b	#4,$24(a1)
000157C0 1284                       		move.b	d4,0(a1)
000157C2 234B 0004                  		move.l	a3,4(a1)
000157C6 1345 0001                  		move.b	d5,1(a1)
000157CA 3368 0008 0008             		move.w	8(a0),8(a1)
000157D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000157D6 3368 0002 0002             		move.w	2(a0),2(a1)
000157DC 3368 0018 0018             		move.w	priority(a0),priority(a1)
000157E2 1368 0023 0023             		move.b	width_pixels(a0),width_pixels(a1)
000157E8 335C 0010                  		move.w	(a4)+,$10(a1)
000157EC 335C 0012                  		move.w	(a4)+,$12(a1)
000157F0 B3C8                       		cmpa.l	a0,a1
000157F2 6400                       		bcc.s	loc_D268
000157F4 2F08                       		move.l	a0,-(sp)
000157F6 2049                       		movea.l	a1,a0
000157F8 6100 0000                  		bsr.w	SpeedToPos
000157FC D568 0012                  		add.w	d2,$12(a0)
00015800 205F                       		movea.l	(sp)+,a0
00015802 6100 0000                  		bsr.w	DisplaySprite2
00015806                            
00015806                            loc_D268:
00015806 51C9 FFAA                  		dbf	d1,Smash_Loop
0001580A                            
0001580A                            Smash_PlaySnd:
0001580A 0C10 0051                  		cmpi.b	#$51,(a0)
0001580E 6700                       		beq.s	Smash_PlaySnd2
00015810 303C 0059                  		move.w	#$59,d0
00015814 4EF9 0000 0000             		jmp		Smash_PlaySnd_Play
0001581A                            Smash_PlaySnd2:		
0001581A 303C 0072                  		move.w	#$72,d0
0001581E                            Smash_PlaySnd_Play:
0001581E 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play smashing sound
00015824                            ; End of function SmashObject
00015824                            
00015824                            ; ===========================================================================
00015824                            ; Smashed block	fragment speeds
00015824                            ;
00015824 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
00015828 0600 FF00                  		dc.w $600, $FF00
0001582C 0600 0100                  		dc.w $600, $100
00015830 0400 0500                  		dc.w $400, $500
00015834 0600 FA00                  		dc.w $600, $FA00
00015838 0800 FE00                  		dc.w $800, $FE00
0001583C 0800 0200                  		dc.w $800, $200
00015840 0600 0600                  		dc.w $600, $600
00015844                            
00015844 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
00015848 F800 FE00                  		dc.w $F800, $FE00
0001584C F800 0200                  		dc.w $F800, $200
00015850 FA00 0600                  		dc.w $FA00, $600
00015854 FC00 FB00                  		dc.w $FC00, $FB00
00015858 FA00 FF00                  		dc.w $FA00, $FF00
0001585C FA00 0100                  		dc.w $FA00, $100
00015860 FC00 0500                  		dc.w $FC00, $500
00015864                            ; ---------------------------------------------------------------------------
00015864                            ; Sprite mappings - smashable walls (GHZ, SLZ)
00015864                            ; ---------------------------------------------------------------------------
00015864                            Map_obj3C:
00015864                            	include "_maps\obj3C.asm"
00015864                            ; ---------------------------------------------------------------------------
00015864                            ; Sprite mappings - smashable walls (GHZ, SLZ)
00015864                            ; ---------------------------------------------------------------------------
00015864 0000                       		dc.w byte_D2BC-Map_obj3C
00015866 0000                       		dc.w byte_D2E5-Map_obj3C
00015868 0000                       		dc.w byte_D30E-Map_obj3C
0001586A 08                         byte_D2BC:	dc.b 8
0001586B E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
00015870 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
00015875 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0001587A 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0001587F E005 0004 00               		dc.b $E0, 5, 0,	4, 0
00015884 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
00015889 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0001588E 1005 0004 00               		dc.b $10, 5, 0,	4, 0
00015893 08                         byte_D2E5:	dc.b 8
00015894 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
00015899 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0001589E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
000158A3 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
000158A8 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
000158AD F005 0004 00               		dc.b $F0, 5, 0,	4, 0
000158B2 0005 0004 00               		dc.b 0,	5, 0, 4, 0
000158B7 1005 0004 00               		dc.b $10, 5, 0,	4, 0
000158BC 08                         byte_D30E:	dc.b 8
000158BD E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
000158C2 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
000158C7 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
000158CC 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
000158D1 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
000158D6 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
000158DB 0005 0008 00               		dc.b 0,	5, 0, 8, 0
000158E0 1005 0008 00               		dc.b $10, 5, 0,	8, 0
000158E6 00                         		even
000158E6 00                         		even
000158E6                            
000158E6                            ; ---------------------------------------------------------------------------
000158E6                            ; Object code loading subroutine
000158E6                            ; ---------------------------------------------------------------------------
000158E6                            
000158E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158E6                            
000158E6                            
000158E6                            ; =============== S U B	R O U T	I N E =======================================
000158E6                            
000158E6                            
000158E6                            ObjectsLoad:				; CODE XREF: ROM:00004946p
000158E6                            					; ROM:00004A2Ep ...
000158E6 41F8 D000                  		lea	(Object_RAM).w,a0 ; set address for object RAM
000158EA 7E7F                       		moveq	#$7F,d7
000158EC 7000                       		moveq	#0,d0
000158EE 0C38 0006 D024             		cmpi.b	#6,(MainCharacter+routine).w
000158F4 6400                       		bcc.s	loc_D362
000158F6                            
000158F6                            loc_D348:
000158F6 1010                       		move.b	(a0),d0		; load object number from RAM
000158F8 6700                       		beq.s	loc_D358
000158FA                            ;		add.w	d0,d0
000158FA                            ;		add.w	d0,d0	; d0 = object ID *
000158FA E548                       		lsl.w	#2,d0
000158FC 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
00015900 4E91                       		jsr	(a1)		; run the object's code
00015902 7000                       		moveq	#0,d0
00015904                            
00015904                            loc_D358:
00015904 41E8 0040                  		lea	$40(a0),a0	; next object
00015908 51CF FFEC                  		dbf	d7,loc_D348
0001590C 4E75                       		rts	
0001590E                            ; ===========================================================================
0001590E                            
0001590E                            loc_D362:
0001590E 0C38 000A D024             		cmpi.b	#$A,(MainCharacter+routine).w      ; Has Sonic drowned?
00015914 67E0                       		beq.s	loc_D348                        ; If so, run objects a little longer
00015916 7E1F                               moveq	#$1F,d7
00015918 61DC                       		bsr.s	loc_D348
0001591A 7E5F                       		moveq	#$5F,d7
0001591C                            
0001591C                            loc_D368:
0001591C 7000                       		moveq	#0,d0	; Clear d0 quickly
0001591E 1010                       		move.b	(a0),d0	; get the object's ID
00015920 6700                       		beq.s	loc_D37C	; if it's obj00, skip it
00015922 4A28 0001                  		tst.b	render_flags(a0)	; should we render it?
00015926 6A00                       		bpl.s	loc_D37C	; if not, skip it
00015928 3028 0018                  		move.w  priority(a0),d0        ; move object's priority to d0
0001592C 0828 0006 0001             		btst	#6,render_flags(a0)    ; is the compound sprites flag set?
00015932 6700                       		beq.s	loc_D378            ; if not, branch
00015934 303C 0200                  		move.w	#$200,d0        ; move $200 to d0
00015938                            
00015938                            loc_D378:
00015938 6100 0000                  		bsr.w	DisplaySprite3	
0001593C                            loc_D37C:
0001593C 41E8 0040                  		lea	$40(a0),a0
00015940 51CF FFDA                  		dbf	d7,loc_D368
00015944 4E75                       		rts
00015946                            ; End of function ObjectsLoad
00015946                            
00015946                            
00015946                            ; =============== S U B	R O U T	I N E =======================================
00015946                            
00015946                            
00015946                            sub_F2F8:				; CODE XREF: sub_1CFC+5Cp
00015946 41F8 D000                  		lea	($FFFFD000).w,a0
0001594A 7E7F                       		moveq	#$7F,d7	; ''
0001594C 7000                       		moveq	#0,d0
0001594E 4EF9 0000 0000             		jmp	loc_F308
00015954                            ; ---------------------------------------------------------------------------
00015954                            ;		moveq	#$1F,d7
00015954                            ;		bsr.s	loc_D368
00015954                            ;		moveq	#$5F,d7	; '_'
00015954                            
00015954                            loc_F308:				; CODE XREF: sub_F2F8+8j ROM:loc_F31Cj
00015954 7000                       		moveq	#0,d0
00015956 1010                       		move.b	(a0),d0
00015958 6700                       		beq.s	loc_F318
0001595A 4A28 0001                  		tst.b	1(a0)
0001595E 6A00                       		bpl.s	loc_F318
00015960 3028 0018                  		move.w  priority(a0),d0        ; move object's priority to d0
00015964 0828 0006 0001             		btst	#6,render_flags(a0)    ; is the compound sprites flag set?
0001596A 6700                       		beq.s	loc_F308_2            ; if not, branch
0001596C 303C 0200                  		move.w	#$200,d0        ; move $200 to d0
00015970                            loc_F308_2:
00015970 6100 0000                  		bsr.w	DisplaySprite2
00015974                            
00015974                            loc_F318:				; CODE XREF: sub_F2F8+14j sub_F2F8+1Aj
00015974 41E8 0040                  		lea	$40(a0),a0
00015978 51CF FFDA                  		dbf	d7,loc_F308
0001597C 4E75                       		rts
0001597E                            ; ===========================================================================
0001597E                            ; ---------------------------------------------------------------------------
0001597E                            ; Object pointers
0001597E                            ; ---------------------------------------------------------------------------
0001597E                            Obj_Index:
0001597E                            	include "_inc\Object pointers.asm"
0001597E                            ; ---------------------------------------------------------------------------
0001597E                            ; Object pointers
0001597E                            ; ---------------------------------------------------------------------------
0001597E 0000 0000 0000 0000 0000+  	dc.l Obj01, Obj02,	Obj03, Obj04
0001598E 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, ObjNull, ObjNull, Obj08
0001599E 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
000159AE 0000 0000 0001 2464 0001+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
000159BE 0000 EBB6 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
000159CE 0000 F236 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
000159DE 0000 FAD4 0000 FDEE 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
000159EE 0001 047E 0001 0758 0001+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
000159FE 0000 0000 0001 1450 0001+  	dc.l Obj21, Obj22, Obj23, Obj24
00015A0E 0001 17AA 0001 1E9E 0001+  	dc.l Obj25, Obj26, Obj27, Obj28
00015A1E 0001 1042 0001 053A 0001+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
00015A2E 0001 2D9A 0001 205E 0001+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
00015A3E 0001 374A 0001 3DD8 0001+  	dc.l Obj31, Obj32, Obj33, Obj34
00015A4E 0001 32CA 0001 52DC 0001+  	dc.l Obj35, Obj36, Obj37, Obj38
00015A5E 0001 456A 0001 4650 0001+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
00015A6E 0000 0000 0000 0000 0001+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
00015A7E 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
00015A8E 0001 3A54 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
00015A9E 0001 5608 0000 0000 0001+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
00015AAE 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
00015ABE 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
00015ACE 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
00015ADE 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
00015AEE 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
00015AFE 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
00015B0E 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
00015B1E 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
00015B2E 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
00015B3E 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
00015B4E 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
00015B5E 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
00015B6E 0000 0000 0001 4A40 0001+  	dc.l Obj7D, Obj7E, Obj7F, ObjNull
00015B7E 0000 0000 0000 0000 0000+  	dc.l ObjNull, Obj82, Obj83, Obj84
00015B8E 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
00015B9E 0000 BF90 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
00015BAE 0000 0000 0000 0000 0000+  	dc.l Obj8D, Obj8E, ObjNull, ObjNull
00015BAE 0000 0000 0000 0000 0000+  	dc.l Obj8D, Obj8E, ObjNull, ObjNull
00015BBE                            
00015BBE                            ; ----------------------------------------------------------------------------
00015BBE                            ; Object removed from the game. All it does is deallocate its array.
00015BBE                            ; ----------------------------------------------------------------------------
00015BBE                            
00015BBE                            ObjNull: ;;
00015BBE 6000 0000                  	bra.w	DeleteObject
00015BC2                            ; ---------------------------------------------------------------------------
00015BC2                            ; Subroutine to	make an	object fall downwards, increasingly fast
00015BC2                            ; ---------------------------------------------------------------------------
00015BC2                            
00015BC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BC2                            
00015BC2                            ; ObjectMoveAndFall:
00015BC2                            ObjectFall:
00015BC2 3028 0010                          move.w  x_vel(a0),d0
00015BC6 48C0                               ext.l   d0
00015BC8 E188                               lsl.l   #8,d0
00015BCA D1A8 0008                          add.l   d0,x_pos(a0)
00015BCE 3028 0012                          move.w  y_vel(a0),d0
00015BD2 0668 0038 0012                     addi.w  #$38,y_vel(a0) ; apply gravity
00015BD8 48C0                               ext.l   d0
00015BDA E188                               lsl.l   #8,d0
00015BDC D1A8 000C                          add.l   d0,y_pos(a0)
00015BE0 4E75                               rts
00015BE2                            ; End of function ObjectFall
00015BE2                            
00015BE2                            ; ---------------------------------------------------------------------------
00015BE2                            ; Subroutine translating object	speed to update	object position
00015BE2                            ; ---------------------------------------------------------------------------
00015BE2                            
00015BE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BE2                            
00015BE2                            ; ObjectMove:
00015BE2                            SpeedToPos:
00015BE2 3028 0010                          move.w  x_vel(a0),d0
00015BE6 48C0                               ext.l   d0
00015BE8 E188                               lsl.l   #8,d0
00015BEA D1A8 0008                          add.l   d0,x_pos(a0)
00015BEE 3028 0012                          move.w  y_vel(a0),d0
00015BF2 48C0                               ext.l   d0
00015BF4 E188                               lsl.l   #8,d0
00015BF6 D1A8 000C                          add.l   d0,y_pos(a0)
00015BFA 4E75                               rts
00015BFC                            ; End of function SpeedToPos
00015BFC                            
00015BFC                            ; ---------------------------------------------------------------------------
00015BFC                            ; Subroutine to	delete an object
00015BFC                            ; ---------------------------------------------------------------------------
00015BFC                            
00015BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BFC                            
00015BFC                            
00015BFC                            DeleteObject:
00015BFC 2248                       		movea.l	a0,a1
00015BFE                            
00015BFE                            DeleteChild:
00015BFE                            DeleteObject2:
00015BFE 7200                       		moveq	#0,d1
00015C00 700F                       		moveq	#$F,d0
00015C02                            
00015C02                            loc_D646:
00015C02 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
00015C04 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
00015C08                            ;		move.w	d1,(a1)+
00015C08 4E75                       		rts	
00015C0A                            ; End of function DeleteObject
00015C0A                            
00015C0A                            ; ---------------------------------------------------------------------------
00015C0A                            ; Subroutine to	delete the Super Stars and the Invincibility Stars
00015C0A                            ; ---------------------------------------------------------------------------
00015C0A                            
00015C0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C0A                            
00015C0A                            
00015C0A                            Super_and_Invincibility_Stars:
00015C0A 2F08                       		move.l	a0,-(sp)
00015C0C 41F8 D200                  		lea		($FFFFD200).w,a0	; stars object ($3801 and $8F)
00015C10 4EBA FFEA                  		jsr		DeleteObject		; delete stars
00015C14 11FC 0000 D2DC             		move.b	#0,($FFFFD2DC).w
00015C1A 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; clear speed shoes
00015C20 205F                       		move.l	(sp)+,a0
00015C22 4E75                       		rts
00015C24                            ; End of function Super_and_Invincibility_Stars
00015C24                            
00015C24                            ; ---------------------------------------------------------------------------
00015C24                            ; Subroutine to	load the life counter art depending on Sonic's Status
00015C24                            ; ---------------------------------------------------------------------------
00015C24                            
00015C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C24                            
00015C24                            
00015C24                            LoadLivesCounterArt:
00015C24 223C 0000 0000             		move.l	#Unc_Lives,d1			        ; Call for Regular Life Icon Art
00015C2A 4A38 FE19                  		tst.b	($FFFFFE19).w
00015C2E 6700 0000                  		beq.w	nextloc3
00015C32                            ;		cmpi.b	#-1,(Super_Sonic_palette).w ; '$'
00015C32                            ;		bne.s	nextloc3
00015C32 223C 0000 0000             		move.l	#Unc_SuperLives,d1			        ; Call for Regular Super Life Icon Art		
00015C38                            nextloc3:
00015C38 343C FA80                  		move.w	#$FA80,d2			        ; Load Art from this location (VRAM location*20)
00015C3C                            								; In this case, VRAM = $7D4*20
00015C3C                            
00015C3C 363C 00C0                  		move.w	#$C0,d3
00015C40 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
00015C46 4E75                       		rts
00015C48                            ; End of function Super_and_Invincibility_Stars
00015C48                            
00015C48                            ; ---------------------------------------------------------------------------
00015C48                            ; Subroutine to display a sprite/object, when a0 is the object RAM
00015C48                            ; ---------------------------------------------------------------------------
00015C48                            
00015C48                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015C48                             
00015C48                            ; sub_164F4:
00015C48                            DisplaySprite:
00015C48 43F8 AC00                          lea     (Sprite_Table_Input).w,a1
00015C4C D2E8 0018                          adda.w  priority(a0),a1
00015C50 0C51 007E                          cmpi.w  #$7E,(a1)
00015C54 6400                               bcc.s   return_16510
00015C56 5451                               addq.w  #2,(a1)
00015C58 D2D1                               adda.w  (a1),a1
00015C5A 3288                               move.w  a0,(a1)
00015C5C                             
00015C5C                            return_16510:
00015C5C 4E75                               rts
00015C5E                            ; End of function DisplaySprite
00015C5E                             
00015C5E                            ; ---------------------------------------------------------------------------
00015C5E                            ; Subroutine to display a sprite/object, when a1 is the object RAM
00015C5E                            ; ---------------------------------------------------------------------------
00015C5E                             
00015C5E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015C5E                             
00015C5E                            ; sub_16512:
00015C5E                            DisplaySprite2:
00015C5E 45F8 AC00                          lea     (Sprite_Table_Input).w,a2
00015C62 D4E9 0018                          adda.w  priority(a1),a2
00015C66 0C52 007E                          cmpi.w  #$7E,(a2)
00015C6A 6400                               bcc.s   return_1652E
00015C6C 5452                               addq.w  #2,(a2)
00015C6E D4D2                               adda.w  (a2),a2
00015C70 3489                               move.w  a1,(a2)
00015C72                             
00015C72                            return_1652E:
00015C72 4E75                               rts
00015C74                            ; End of function DisplaySprite2
00015C74                            
00015C74                            ; -----------------------------------------------------------------------------
00015C74                            ; Subroutine to display a sprite/object, when a0 is the object RAM
00015C74                            ; and d0 is already (priority/2)&$380
00015C74                            ; -----------------------------------------------------------------------------
00015C74                            
00015C74                            ; loc_16530:
00015C74                            DisplaySprite_Param:
00015C74                            DisplaySprite3:
00015C74 43F8 AC00                  	lea	(Sprite_Table_Input).w,a1
00015C78 D2C0                       	adda.w	d0,a1
00015C7A 0C51 007E                  	cmpi.w	#$7E,(a1)
00015C7E 6400                       	bcc.s	return_16542
00015C80 5451                       	addq.w	#2,(a1)
00015C82 D2D1                       	adda.w	(a1),a1
00015C84 3288                       	move.w	a0,(a1)
00015C86                            
00015C86                            return_16542:
00015C86 4E75                       	rts
00015C88                            
00015C88                            ; ===========================================================================
00015C88 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
00015C8C 00FF F700                  		dc.l $FFF700		; main screen x-position
00015C90 00FF F708                  		dc.l $FFF708		; background x-position	1
00015C94 00FF F718                  		dc.l $FFF718		; background x-position	2
00015C98                            ; ---------------------------------------------------------------------------
00015C98                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
00015C98                            ; ---------------------------------------------------------------------------
00015C98                            
00015C98                            ; =============== S U B	R O U T	I N E =======================================
00015C98                            
00015C98                            
00015C98                            BuildSprites:					  ; ...
00015C98 45F8 F800                  		lea	($FFFFF800).w,a2
00015C9C 7A00                       		moveq	#0,d5
00015C9E                            ;		moveq	#0,d4
00015C9E                            ;		tst.b	($FFFFF711).w
00015C9E                            ;		beq.s	loc_312EA8
00015C9E                            ;		jsr	sub_3392AA
00015C9E                            ;		bsr.w	sub_3133B4
00015C9E                            
00015C9E                            ;loc_312EA8:					  ; ...
00015C9E 49F8 AC00                  		lea	($FFFFAC00).w,a4
00015CA2 7E07                       		moveq	#7,d7
00015CA4                            
00015CA4                            loc_312EAE:					  ; ...
00015CA4 4A54                       		tst.w	(a4)
00015CA6 6700 0000                  		beq.w	loc_312F80
00015CAA 7C02                       		moveq	#2,d6
00015CAC                            
00015CAC                            loc_312EB6:					  ; ...
00015CAC 3074 6000                  		move.w	(a4,d6.w),a0
00015CB0 4A10                       		tst.b	(a0)
00015CB2 6700 0000                  		beq.w	loc_312F78
00015CB6 0228 007F 0001             		and.b	#$7F,1(a0)
00015CBC 1028 0001                  		move.b	1(a0),d0
00015CC0 1800                       		move.b	d0,d4
00015CC2 0C10 0002                  		cmpi.b	#2,(a0)
00015CC6 6D00                       		blt.s	loc_F66A
00015CC8 0800 0006                  		btst	#6,d0
00015CCC 6600 0000                  		bne.w	BuildSprites_MultiDraw
00015CD0                            loc_F66A:				; CODE XREF: BuildSprites+2Ej
00015CD0 0240 000C                  		and.w	#$C,d0
00015CD4 6700                       		beq.s	loc_312F2C
00015CD6 227B 00B0                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
00015CDA 7000                       		moveq	#0,d0
00015CDC 1028 0023                  		move.b	width_pixels(a0),d0
00015CE0 3628 0008                  		move.w	8(a0),d3
00015CE4 9651                       		sub.w	(a1),d3
00015CE6 3203                       		move.w	d3,d1
00015CE8 D240                       		add.w	d0,d1
00015CEA 6B00 0000                  		bmi.w	loc_312F78
00015CEE 3203                       		move.w	d3,d1
00015CF0 9240                       		sub.w	d0,d1
00015CF2 0C41 0140                  		cmp.w	#$140,d1
00015CF6 6C00 0000                  		bge.w	loc_312F78
00015CFA 0643 0080                  		add.w	#$80,d3
00015CFE 0804 0004                  		btst	#4,d4
00015D02 6700                       		beq.s	loc_312F36
00015D04 7000                       		moveq	#0,d0
00015D06 1028 0016                  		move.b	$16(a0),d0
00015D0A 3428 000C                  		move.w	$C(a0),d2
00015D0E 9469 0004                  		sub.w	4(a1),d2
00015D12 3202                       		move.w	d2,d1
00015D14 D240                       		add.w	d0,d1
00015D16 6B00                       		bmi.s	loc_312F78
00015D18 3202                       		move.w	d2,d1
00015D1A 9240                       		sub.w	d0,d1
00015D1C 0C41 00E0                  		cmp.w	#$E0,d1
00015D20 6C00                       		bge.s	loc_312F78
00015D22 0642 0080                  		add.w	#$80,d2
00015D26 6000                       		bra.s	loc_312F52
00015D28                            ; ---------------------------------------------------------------------------
00015D28                            
00015D28                            loc_312F2C:					  ; ...
00015D28 3428 000A                  		move.w	$A(a0),d2
00015D2C 3628 0008                  		move.w	8(a0),d3
00015D30 6000                       		bra.s	loc_312F52
00015D32                            ; ---------------------------------------------------------------------------
00015D32                            
00015D32                            loc_312F36:					  ; ...
00015D32 3428 000C                  		move.w	$C(a0),d2
00015D36 9469 0004                  		sub.w	4(a1),d2
00015D3A 0642 0080                  		add.w	#$80,d2
00015D3E                            ;		and.w	#$7FF,d2
00015D3E 0C42 0060                  		cmp.w	#$60,d2
00015D42 6500                       		bcs.s	loc_312F78
00015D44 0C42 0180                  		cmp.w	#$180,d2
00015D48 6400                       		bcc.s	loc_312F78
00015D4A                            
00015D4A                            loc_312F52:					  ; ...
00015D4A 2268 0004                  		movea.l	4(a0),a1
00015D4E 7200                       		moveq	#0,d1
00015D50 0804 0005                  		btst	#5,d4
00015D54 6600                       		bne.s	loc_312F6E
00015D56 1228 001A                  		move.b	$1A(a0),d1
00015D5A D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
00015D5C D2F1 1000                  		adda.w	(a1,d1.w),a1
00015D60 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
00015D62 1219                       		move.b	(a1)+,d1
00015D64 5341                       		subq.w	#1,d1
00015D66 6B00                       		bmi.s	loc_312F72
00015D68                            
00015D68                            loc_312F6E:					  ; ...
00015D68 6100 0000                  		bsr.w	sub_D750
00015D6C                            
00015D6C                            loc_312F72:					  ; ...
00015D6C 0028 0080 0001             		or.b	#$80,1(a0)
00015D72                            
00015D72                            loc_312F78:					  ; ...
00015D72                            loc_D726:
00015D72 5446                       		addq.w	#2,d6
00015D74 5554                       		subq.w	#2,(a4)
00015D76 6600 FF34                  		bne.w	loc_312EB6
00015D7A                            
00015D7A                            loc_312F80:					  ; ...
00015D7A 49EC 0080                  		lea	$80(a4),a4
00015D7E 51CF FF24                  		dbf	d7,loc_312EAE
00015D82 11C5 F62C                  		move.b	d5,($FFFFF62C).w
00015D86 0C05 0050                  		cmp.b	#$50,d5
00015D8A 6700                       		beq.s	loc_312F9A
00015D8C 24BC 0000 0000             		move.l	#0,(a2)
00015D92 4E75                       		rts
00015D94                            ; ---------------------------------------------------------------------------
00015D94                            
00015D94                            loc_312F9A:					  ; ...
00015D94 157C 0000 FFFB             		move.b	#0,-5(a2)
00015D9A 4E75                       		rts
00015D9C                            ; ---------------------------------------------------------------------------
00015D9C                            
00015D9C                            BuildSprites_MultiDraw:
00015D9C 2F0C                       		move.l	a4,-(sp)
00015D9E 49F8 F700                  		lea	($FFFFF700).w,a4
00015DA2 3668 0002                  		movea.w	2(a0),a3
00015DA6 2A68 0004                  		movea.l	4(a0),a5
00015DAA 7000                       		moveq	#0,d0
00015DAC 1028 000E                  		move.b	$E(a0),d0
00015DB0 3628 0008                  		move.w	8(a0),d3
00015DB4 9654                       		sub.w	(a4),d3
00015DB6 3203                       		move.w	d3,d1
00015DB8 D240                       		add.w	d0,d1
00015DBA 6B00 0000                  		bmi.w	BuildSprites_MultiDraw_NextObj
00015DBE 3203                       		move.w	d3,d1
00015DC0 9240                       		sub.w	d0,d1
00015DC2 0C41 0140                  		cmpi.w	#$140,d1
00015DC6 6C00 0000                  		bge.w	BuildSprites_MultiDraw_NextObj
00015DCA 0643 0080                  		addi.w	#$80,d3	; '?'
00015DCE 0804 0004                  		btst	#4,d4
00015DD2 6700                       		beq.s	loc_F794
00015DD4 7000                       		moveq	#0,d0
00015DD6 1028 0014                  		move.b	$14(a0),d0
00015DDA 3428 000C                  		move.w	$C(a0),d2
00015DDE 946C 0004                  		sub.w	4(a4),d2
00015DE2 3202                       		move.w	d2,d1
00015DE4 D240                       		add.w	d0,d1
00015DE6 6B00 0000                  		bmi.w	BuildSprites_MultiDraw_NextObj
00015DEA 3202                       		move.w	d2,d1
00015DEC 9240                       		sub.w	d0,d1
00015DEE 0C41 00E0                  		cmpi.w	#$E0,d1	; 'a'
00015DF2 6C00 0000                  		bge.w	BuildSprites_MultiDraw_NextObj
00015DF6 0642 0080                  		addi.w	#$80,d2	; '?'
00015DFA 6000                       		bra.s	loc_F7B0
00015DFC                            ; ---------------------------------------------------------------------------
00015DFC                            
00015DFC                            loc_F794:				; CODE XREF: BuildSprites+138j
00015DFC 3428 000C                  		move.w	$C(a0),d2
00015E00 946C 0004                  		sub.w	4(a4),d2
00015E04 0642 0080                  		addi.w	#$80,d2	; '?'
00015E08 0242 07FF                  		andi.w	#$7FF,d2
00015E0C 0C42 0060                  		cmpi.w	#$60,d2	; '`'
00015E10 6500                       		bcs.s	BuildSprites_MultiDraw_NextObj
00015E12 0C42 0180                  		cmpi.w	#$180,d2
00015E16 6400                       		bcc.s	BuildSprites_MultiDraw_NextObj
00015E18                            
00015E18                            loc_F7B0:				; CODE XREF: BuildSprites+160j
00015E18 7200                       		moveq	#0,d1
00015E1A 1228 000B                  		move.b	$B(a0),d1
00015E1E 6700                       		beq.s	loc_F7CE
00015E20 D241                       		add.w	d1,d1
00015E22 224D                       		movea.l	a5,a1
00015E24 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015E28 3219                       		move.w	(a1)+,d1
00015E2A 5341                       		subq.w	#1,d1
00015E2C 6B00                       		bmi.s	loc_F7CE
00015E2E 3F04                       		move.w	d4,-(sp)
00015E30 6100 0000                  		bsr.w	ChkDrawSprite
00015E34 381F                       		move.w	(sp)+,d4
00015E36                            
00015E36                            loc_F7CE:				; CODE XREF: BuildSprites+184j
00015E36                            					; BuildSprites+192j
00015E36 0028 0080 0001             		ori.b	#$80,1(a0)
00015E3C 4DE8 0010                  		lea	$10(a0),a6
00015E40 7000                       		moveq	#0,d0
00015E42 1028 000F                  		move.b	$F(a0),d0
00015E46 5340                       		subq.w	#1,d0
00015E48 6500                       		bcs.s	BuildSprites_MultiDraw_NextObj
00015E4A                            
00015E4A                            loc_F7E2:				; CODE XREF: BuildSprites+1E6j
00015E4A 4840                       		swap	d0
00015E4C 361E                       		move.w	(a6)+,d3
00015E4E 9654                       		sub.w	(a4),d3
00015E50 0643 0080                  		addi.w	#$80,d3	; '?'
00015E54 341E                       		move.w	(a6)+,d2
00015E56 946C 0004                  		sub.w	4(a4),d2
00015E5A 0642 0080                  		addi.w	#$80,d2	; '?'
00015E5E 0242 07FF                  		andi.w	#$7FF,d2
00015E62 524E                       		addq.w	#1,a6
00015E64 7200                       		moveq	#0,d1
00015E66 121E                       		move.b	(a6)+,d1
00015E68 D241                       		add.w	d1,d1
00015E6A 224D                       		movea.l	a5,a1
00015E6C D2F1 1000                  		adda.w	(a1,d1.w),a1
00015E70 1219                       		move.b	(a1)+,d1
00015E72 5301                       		subq.b	#1,d1
00015E74 6B00                       		bmi.s	loc_F816
00015E76 3F04                       		move.w	d4,-(sp)
00015E78 6100 0000                  		bsr.w	ChkDrawSprite
00015E7C 381F                       		move.w	(sp)+,d4
00015E7E                            
00015E7E                            loc_F816:				; CODE XREF: BuildSprites+1DAj
00015E7E 4840                       		swap	d0
00015E80 51C8 FFC8                  		dbf	d0,loc_F7E2
00015E84                            
00015E84                            BuildSprites_MultiDraw_NextObj:				; CODE XREF: BuildSprites+120j
00015E84                            					; BuildSprites+12Cj ...
00015E84 285F                       		movea.l	(sp)+,a4
00015E86 6000 FEEA                  		bra.w	loc_D726
00015E8A                            ; End of function BuildSprites
00015E8A                            
00015E8A                            
00015E8A                            ; =============== S U B	R O U T	I N E =======================================
00015E8A                            
00015E8A                            
00015E8A                            ChkDrawSprite:				; CODE XREF: BuildSprites+196p
00015E8A                            					; BuildSprites+1DEp
00015E8A 0C05 0050                  		cmpi.b	#$50,d5	; 'P'
00015E8E 6500                       		bcs.s	DrawSprite_Cont
00015E90 4E75                       		rts
00015E92                            ; End of function ChkDrawSprite
00015E92                            
00015E92                            
00015E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E92                            
00015E92                            
00015E92                            sub_D750:				; XREF: BuildSprites
00015E92 3668 0002                  		movea.w	2(a0),a3
00015E96                            ; loc_1681C:
00015E96                            DrawSprite_Cont:
00015E96 0804 0000                  		btst	#0,d4
00015E9A 6600                       		bne.s	loc_D796
00015E9C 0804 0001                  		btst	#1,d4
00015EA0 6600 0000                  		bne.w	loc_D7E4
00015EA4                            ; End of function sub_D750
00015EA4                            
00015EA4                            
00015EA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EA4                            
00015EA4                            
00015EA4                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
00015EA4 0C05 0050                  		cmpi.b	#$50,d5
00015EA8 6700                       		beq.s	locret_D794
00015EAA                            sub_D762_2:
00015EAA 1019                       		move.b	(a1)+,d0
00015EAC 4880                       		ext.w	d0
00015EAE D042                       		add.w	d2,d0
00015EB0 34C0                       		move.w	d0,(a2)+
00015EB2 14D9                       		move.b	(a1)+,(a2)+
00015EB4 5205                       		addq.b	#1,d5
00015EB6 14C5                       		move.b	d5,(a2)+
00015EB8 1019                       		move.b	(a1)+,d0
00015EBA E148                       		lsl.w	#8,d0
00015EBC 1019                       		move.b	(a1)+,d0
00015EBE D04B                       		add.w	a3,d0
00015EC0 34C0                       		move.w	d0,(a2)+
00015EC2 1019                       		move.b	(a1)+,d0
00015EC4 4880                       		ext.w	d0
00015EC6 D043                       		add.w	d3,d0
00015EC8 0240 01FF                  		andi.w	#$1FF,d0
00015ECC 6600                       		bne.s	loc_D78E
00015ECE 5240                       		addq.w	#1,d0
00015ED0                            
00015ED0                            loc_D78E:
00015ED0 34C0                       		move.w	d0,(a2)+
00015ED2 51C9 FFD0                  		dbf	d1,sub_D762
00015ED6                            
00015ED6                            locret_D794:
00015ED6 4E75                       		rts	
00015ED8                            ; End of function sub_D762
00015ED8                            
00015ED8                            ; ===========================================================================
00015ED8                            
00015ED8                            loc_D796:
00015ED8 0804 0001                  		btst	#1,d4
00015EDC 6600 0000                  		bne.w	loc_D82A
00015EE0                            
00015EE0                            loc_D79E:
00015EE0 0C05 0050                  		cmpi.b	#$50,d5
00015EE4 6700                       		beq.s	locret_D7E2
00015EE6 1019                       		move.b	(a1)+,d0
00015EE8 4880                       		ext.w	d0
00015EEA D042                       		add.w	d2,d0
00015EEC 34C0                       		move.w	d0,(a2)+
00015EEE 1819                       		move.b	(a1)+,d4
00015EF0 14C4                       		move.b	d4,(a2)+
00015EF2 5205                       		addq.b	#1,d5
00015EF4 14C5                       		move.b	d5,(a2)+
00015EF6 1019                       		move.b	(a1)+,d0
00015EF8 E148                       		lsl.w	#8,d0
00015EFA 1019                       		move.b	(a1)+,d0
00015EFC D04B                       		add.w	a3,d0
00015EFE 0A40 0800                  		eori.w	#$800,d0
00015F02 34C0                       		move.w	d0,(a2)+
00015F04 1019                       		move.b	(a1)+,d0
00015F06 4880                       		ext.w	d0
00015F08 4440                       		neg.w	d0
00015F0A D804                       		add.b	d4,d4
00015F0C 0244 0018                  		andi.w	#$18,d4
00015F10 5044                       		addq.w	#8,d4
00015F12 9044                       		sub.w	d4,d0
00015F14 D043                       		add.w	d3,d0
00015F16 0240 01FF                  		andi.w	#$1FF,d0
00015F1A 6600                       		bne.s	loc_D7DC
00015F1C 5240                       		addq.w	#1,d0
00015F1E                            
00015F1E                            loc_D7DC:
00015F1E 34C0                       		move.w	d0,(a2)+
00015F20 51C9 FFBE                  		dbf	d1,loc_D79E
00015F24                            
00015F24                            locret_D7E2:
00015F24 4E75                       		rts	
00015F26                            ; ===========================================================================
00015F26                            
00015F26                            loc_D7E4:				; XREF: sub_D750
00015F26 0C05 0050                  		cmpi.b	#$50,d5
00015F2A 6700                       		beq.s	locret_D828
00015F2C 1019                       		move.b	(a1)+,d0
00015F2E 1811                       		move.b	(a1),d4
00015F30 4880                       		ext.w	d0
00015F32 4440                       		neg.w	d0
00015F34 E70C                       		lsl.b	#3,d4
00015F36 0244 0018                  		andi.w	#$18,d4
00015F3A 5044                       		addq.w	#8,d4
00015F3C 9044                       		sub.w	d4,d0
00015F3E D042                       		add.w	d2,d0
00015F40 34C0                       		move.w	d0,(a2)+
00015F42 14D9                       		move.b	(a1)+,(a2)+
00015F44 5205                       		addq.b	#1,d5
00015F46 14C5                       		move.b	d5,(a2)+
00015F48 1019                       		move.b	(a1)+,d0
00015F4A E148                       		lsl.w	#8,d0
00015F4C 1019                       		move.b	(a1)+,d0
00015F4E D04B                       		add.w	a3,d0
00015F50 0A40 1000                  		eori.w	#$1000,d0
00015F54 34C0                       		move.w	d0,(a2)+
00015F56 1019                       		move.b	(a1)+,d0
00015F58 4880                       		ext.w	d0
00015F5A D043                       		add.w	d3,d0
00015F5C 0240 01FF                  		andi.w	#$1FF,d0
00015F60 6600                       		bne.s	loc_D822
00015F62 5240                       		addq.w	#1,d0
00015F64                            
00015F64                            loc_D822:
00015F64 34C0                       		move.w	d0,(a2)+
00015F66 51C9 FFBE                  		dbf	d1,loc_D7E4
00015F6A                            
00015F6A                            locret_D828:
00015F6A 4E75                       		rts	
00015F6C                            ; ===========================================================================
00015F6C                            
00015F6C                            loc_D82A:
00015F6C 0C05 0050                  		cmpi.b	#$50,d5
00015F70 6700                       		beq.s	locret_D87C
00015F72 1019                       		move.b	(a1)+,d0
00015F74 1811                       		move.b	(a1),d4
00015F76 4880                       		ext.w	d0
00015F78 4440                       		neg.w	d0
00015F7A E70C                       		lsl.b	#3,d4
00015F7C 0244 0018                  		andi.w	#$18,d4
00015F80 5044                       		addq.w	#8,d4
00015F82 9044                       		sub.w	d4,d0
00015F84 D042                       		add.w	d2,d0
00015F86 34C0                       		move.w	d0,(a2)+
00015F88 1819                       		move.b	(a1)+,d4
00015F8A 14C4                       		move.b	d4,(a2)+
00015F8C 5205                       		addq.b	#1,d5
00015F8E 14C5                       		move.b	d5,(a2)+
00015F90 1019                       		move.b	(a1)+,d0
00015F92 E148                       		lsl.w	#8,d0
00015F94 1019                       		move.b	(a1)+,d0
00015F96 D04B                       		add.w	a3,d0
00015F98 0A40 1800                  		eori.w	#$1800,d0
00015F9C 34C0                       		move.w	d0,(a2)+
00015F9E 1019                       		move.b	(a1)+,d0
00015FA0 4880                       		ext.w	d0
00015FA2 4440                       		neg.w	d0
00015FA4 D804                       		add.b	d4,d4
00015FA6 0244 0018                  		andi.w	#$18,d4
00015FAA 5044                       		addq.w	#8,d4
00015FAC 9044                       		sub.w	d4,d0
00015FAE D043                       		add.w	d3,d0
00015FB0 0240 01FF                  		andi.w	#$1FF,d0
00015FB4 6600                       		bne.s	loc_D876
00015FB6 5240                       		addq.w	#1,d0
00015FB8                            
00015FB8                            loc_D876:
00015FB8 34C0                       		move.w	d0,(a2)+
00015FBA 51C9 FFB0                  		dbf	d1,loc_D82A
00015FBE                            
00015FBE                            locret_D87C:
00015FBE 4E75                       		rts	
00015FC0                            
00015FC0                            ; ---------------------------------------------------------------------------
00015FC0                            ; Subroutine to	check if an object is on the screen
00015FC0                            ; ---------------------------------------------------------------------------
00015FC0                            
00015FC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FC0                            
00015FC0                            
00015FC0                            ChkObjOnScreen:
00015FC0 3028 0008                  		move.w	8(a0),d0	; get object x-position
00015FC4 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
00015FC8 6B00                       		bmi.s	NotOnScreen
00015FCA 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
00015FCE 6C00                       		bge.s	NotOnScreen	; if not, branch
00015FD0                            
00015FD0 3228 000C                  		move.w	$C(a0),d1	; get object y-position
00015FD4 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
00015FD8 6B00                       		bmi.s	NotOnScreen
00015FDA 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
00015FDE 6C00                       		bge.s	NotOnScreen	; if not, branch
00015FE0                            
00015FE0 7000                       		moveq	#0,d0		; set flag to 0
00015FE2 4E75                       		rts	
00015FE4                            ; ===========================================================================
00015FE4                            
00015FE4                            NotOnScreen:				; XREF: ChkObjOnScreen
00015FE4 7001                       		moveq	#1,d0		; set flag to 1
00015FE6 4E75                       		rts	
00015FE8                            ; End of function ChkObjOnScreen
00015FE8                            
00015FE8                            
00015FE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FE8                            
00015FE8                            
00015FE8                            ChkObjOnScreen2:
00015FE8 7200                       		moveq	#0,d1
00015FEA 1228 0023                  		move.b	width_pixels(a0),d1
00015FEE 3028 0008                  		move.w	8(a0),d0
00015FF2 9078 F700                  		sub.w	($FFFFF700).w,d0
00015FF6 D041                       		add.w	d1,d0
00015FF8 6B00                       		bmi.s	NotOnScreen2
00015FFA D241                       		add.w	d1,d1
00015FFC 9041                       		sub.w	d1,d0
00015FFE 0C40 0140                  		cmpi.w	#320,d0
00016002 6C00                       		bge.s	NotOnScreen2
00016004                            
00016004 3228 000C                  		move.w	$C(a0),d1
00016008 9278 F704                  		sub.w	($FFFFF704).w,d1
0001600C 6B00                       		bmi.s	NotOnScreen2
0001600E 0C41 00E0                  		cmpi.w	#224,d1
00016012 6C00                       		bge.s	NotOnScreen2
00016014                            
00016014 7000                       		moveq	#0,d0
00016016 4E75                       		rts	
00016018                            ; ===========================================================================
00016018                            
00016018                            NotOnScreen2:				; XREF: ChkObjOnScreen2
00016018 7001                       		moveq	#1,d0
0001601A 4E75                       		rts	
0001601C                            ; End of function ChkObjOnScreen2
0001601C                            
0001601C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001601C                            
0001601C                            
0001601C                            JmpTo_loc_40804
0001601C 4EF9 0000 0000             	jmp	loc_40804
00016022                            ; ===========================================================================
00016022                            
00016022                            ;JmpTo_loc_4085A
00016022                            ;	jmp	loc_4085A
00016022                            ; ===========================================================================
00016022                            
00016022                            ;JmpTo_loc_409C6
00016022                            ;	jmp	loc_409C6
00016022                            ; ===========================================================================
00016022                            
00016022                            ; =============== S U B	R O U T	I N E =======================================
00016022                            
00016022                            
00016022                            RingsManager:					  ; ...
00016022 7000                       		moveq	#0,d0
00016024 1038 FFCE                  		move.b	($FFFFFFCE).w,d0
00016028 303B 0000                  		move.w	off_31323A(pc,d0.w),d0
0001602C 4EFB 0000                  		jmp	off_31323A(pc,d0.w)
00016030                            ; End of function RingsManager
00016030                            
00016030                            ; ---------------------------------------------------------------------------
00016030 0000 0000                  off_31323A:	dc.w loc_31323E-off_31323A,loc_313282-off_31323A; 0 ; ...
00016034                            ; ---------------------------------------------------------------------------
00016034                            
00016034                            loc_31323E:					  ; ...
00016034 5438 FFCE                  		addq.b	#2,($FFFFFFCE).w
00016038 6100 0000                  		bsr.w	sub_313432
0001603C 43F8 CF80                  		lea	($FFFFCF80).w,a1
00016040 3838 F700                  		move.w	($FFFFF700).w,d4
00016044 5144                       		subq.w	#8,d4
00016046 6200                       		bhi.s	loc_31325A
00016048 7801                       		moveq	#1,d4
0001604A 6000                       		bra.s	loc_31325A
0001604C                            ; ---------------------------------------------------------------------------
0001604C                            
0001604C                            loc_313256:					  ; ...
0001604C 43E9 0006                  		lea	6(a1),a1
00016050                            
00016050                            loc_31325A:					  ; ...
00016050 B869 0002                  		cmp.w	2(a1),d4
00016054 62F6                       		bhi.s	loc_313256
00016056 31C9 CF92                  		move.w	a1,($FFFFCF92).w
0001605A 31C9 CF96                  		move.w	a1,($FFFFCF96).w
0001605E 0644 0150                  		add.w	#$150,d4
00016062 6000                       		bra.s	loc_313272
00016064                            ; ---------------------------------------------------------------------------
00016064                            
00016064                            loc_31326E:					  ; ...
00016064 43E9 0006                  		lea	6(a1),a1
00016068                            
00016068                            loc_313272:					  ; ...
00016068 B869 0002                  		cmp.w	2(a1),d4
0001606C 62F6                       		bhi.s	loc_31326E
0001606E 31C9 CF94                  		move.w	a1,($FFFFCF94).w
00016072 31C9 CF98                  		move.w	a1,($FFFFCF98).w
00016076 11FC 0001 CFCC             		move.b	#1,($FFFFCFCC).w
0001607C 4E75                       		rts
0001607E                            ; ---------------------------------------------------------------------------
0001607E                            
0001607E                            loc_313282:					  ; ...
0001607E 45F8 CFB0                  		lea	($FFFFCFB0).w,a2
00016082 321A                       		move.w	(a2)+,d1
00016084 5341                       		subq.w	#1,d1
00016086 6500                       		bcs.s	loc_3132B8
00016088                            
00016088                            loc_31328C:					  ; ...
00016088 301A                       		move.w	(a2)+,d0
0001608A 67FC                       		beq.s	loc_31328C
0001608C 3240                       		move.w	d0,a1
0001608E 5311                       		subq.b	#1,(a1)
00016090 6600                       		bne.s	loc_3132B4
00016092 12BC 0006                  		move.b	#6,(a1)
00016096 5229 0001                  		addq.b	#1,1(a1)
0001609A 0C29 0008 0001             		cmp.b	#8,1(a1)
000160A0 6600                       		bne.s	loc_3132B4
000160A2 32BC FFFF                  		move.w	#$FFFF,(a1)
000160A6 357C 0000 FFFE             		move.w	#0,-2(a2)
000160AC 5378 CFB0                  		subq.w	#1,($FFFFCFB0).w
000160B0                            
000160B0                            loc_3132B4:					  ; ...
000160B0 51C9 FFD6                  		dbf	d1,loc_31328C
000160B4                            
000160B4                            loc_3132B8:					  ; ...
000160B4 3278 CF92                  		move.w	($FFFFCF92).w,a1
000160B8 3838 F700                  		move.w	($FFFFF700).w,d4
000160BC 5144                       		subq.w	#8,d4
000160BE 6200                       		bhi.s	loc_3132CC
000160C0 7801                       		moveq	#1,d4
000160C2 6000                       		bra.s	loc_3132CC
000160C4                            ; ---------------------------------------------------------------------------
000160C4                            
000160C4                            loc_3132C8:					  ; ...
000160C4 43E9 0006                  		lea	6(a1),a1
000160C8                            
000160C8                            loc_3132CC:					  ; ...
000160C8 B869 0002                  		cmp.w	2(a1),d4
000160CC 62F6                       		bhi.s	loc_3132C8
000160CE 6000                       		bra.s	loc_3132D6
000160D0                            ; ---------------------------------------------------------------------------
000160D0                            
000160D0                            loc_3132D4:					  ; ...
000160D0 5D49                       		subq.w	#6,a1
000160D2                            
000160D2                            loc_3132D6:					  ; ...
000160D2 B869 FFFC                  		cmp.w	-4(a1),d4
000160D6 63F8                       		bls.s	loc_3132D4
000160D8 31C9 CF92                  		move.w	a1,($FFFFCF92).w
000160DC 3478 CF94                  		move.w	($FFFFCF94).w,a2
000160E0 0644 0150                  		add.w	#$150,d4
000160E4 6000                       		bra.s	loc_3132EE
000160E6                            ; ---------------------------------------------------------------------------
000160E6                            
000160E6                            loc_3132EA:					  ; ...
000160E6 45EA 0006                  		lea	6(a2),a2
000160EA                            
000160EA                            loc_3132EE:					  ; ...
000160EA B86A 0002                  		cmp.w	2(a2),d4
000160EE 62F6                       		bhi.s	loc_3132EA
000160F0 6000                       		bra.s	loc_3132F8
000160F2                            ; ---------------------------------------------------------------------------
000160F2                            
000160F2                            loc_3132F6:					  ; ...
000160F2 5D4A                       		subq.w	#6,a2
000160F4                            
000160F4                            loc_3132F8:					  ; ...
000160F4 B86A FFFC                  		cmp.w	-4(a2),d4
000160F8 63F8                       		bls.s	loc_3132F6
000160FA 31CA CF94                  		move.w	a2,($FFFFCF94).w
000160FE 31C9 CF96                  		move.w	a1,($FFFFCF96).w
00016102 31CA CF98                  		move.w	a2,($FFFFCF98).w
00016106 4E75                       		rts
00016108                            
00016108                            ; =============== S U B	R O U T	I N E =======================================
00016108                            
00016108                            
00016108                            sub_31330C:					  ; ...
00016108 3278 CF92                  		move.w	($FFFFCF92).w,a1
0001610C 3478 CF94                  		move.w	($FFFFCF94).w,a2
00016110 B5C9                       		cmp.l	a1,a2
00016112 6700 0000                  		beq.w	return_3133AA
00016116 0C68 005A 0030             		cmp.w	#$5A,$30(a0)
0001611C 6400 0000                  		bcc.w	return_3133AA
00016120 3428 0008                  		move.w	8(a0),d2
00016124 3628 000C                  		move.w	$C(a0),d3
00016128 5142                       		sub.w	#8,d2
0001612A 7A00                       		moveq	#0,d5
0001612C 1A28 0016                  		move.b	$16(a0),d5
00016130 5705                       		subq.b	#3,d5
00016132 9645                       		sub.w	d5,d3
00016134 0C28 009C 001A             		cmp.b	#$9C,$1A(a0)
0001613A 6600                       		bne.s	loc_313348
0001613C 0643 000C                  		add.w	#$C,d3
00016140 7A0A                       		moveq	#$A,d5
00016142                            
00016142                            loc_313348:					  ; ...
00016142 323C 0006                  		move.w	#6,d1
00016146 3C3C 000C                  		move.w	#$C,d6
0001614A 383C 0010                  		move.w	#$10,d4
0001614E DA45                       		add.w	d5,d5
00016150                            
00016150                            loc_313356:					  ; ...
00016150 4A51                       		tst.w	(a1)
00016152 6600 0000                  		bne.w	loc_3133A0
00016156 3029 0002                  		move.w	2(a1),d0
0001615A 9041                       		sub.w	d1,d0
0001615C 9042                       		sub.w	d2,d0
0001615E 6400                       		bcc.s	loc_31336E
00016160 D046                       		add.w	d6,d0
00016162 6500                       		bcs.s	loc_313374
00016164 6000 0000                  		bra.w	loc_3133A0
00016168                            ; ---------------------------------------------------------------------------
00016168                            
00016168                            loc_31336E:					  ; ...
00016168 B044                       		cmp.w	d4,d0
0001616A 6200 0000                  		bhi.w	loc_3133A0
0001616E                            
0001616E                            loc_313374:					  ; ...
0001616E 3029 0004                  		move.w	4(a1),d0
00016172 9041                       		sub.w	d1,d0
00016174 9043                       		sub.w	d3,d0
00016176 6400                       		bcc.s	loc_313386
00016178 D046                       		add.w	d6,d0
0001617A 6500                       		bcs.s	loc_31338C
0001617C 6000 0000                  		bra.w	loc_3133A0
00016180                            ; ---------------------------------------------------------------------------
00016180                            
00016180                            loc_313386:					  ; ...
00016180 B045                       		cmp.w	d5,d0
00016182 6200 0000                  		bhi.w	loc_3133A0
00016186                            
00016186                            loc_31338C:					  ; ...
00016186 32BC 0604                  		move.w	#$604,(a1)
0001618A 6100                       		bsr.s	sub_3133AC
0001618C 47F8 CFB2                  		lea	($FFFFCFB2).w,a3
00016190                            
00016190                            loc_313396:					  ; ...
00016190 4A5B                       		tst.w	(a3)+
00016192 66FC                       		bne.s	loc_313396
00016194 3709                       		move.w	a1,-(a3)
00016196 5278 CFB0                  		addq.w	#1,($FFFFCFB0).w
0001619A                            
0001619A                            loc_3133A0:					  ; ...
0001619A 43E9 0006                  		lea	6(a1),a1
0001619E B5C9                       		cmp.l	a1,a2
000161A0 6600 FFAE                  		bne.w	loc_313356
000161A4                            
000161A4                            return_3133AA:					  ; ...
000161A4 4E75                       		rts
000161A6                            ; End of function sub_31330C
000161A6                            
000161A6                            
000161A6                            ; =============== S U B	R O U T	I N E =======================================
000161A6                            
000161A6                            
000161A6                            sub_3133AC:					  ; ...
000161A6 5378 CFA0                  		subq.w	#1,($FFFFCFA0).w
000161AA 6000 B786                  		bra.w	CollectRing
000161AE                            ; End of function sub_3133AC
000161AE                            
000161AE                            
000161AE                            ; =============== S U B	R O U T	I N E =======================================
000161AE                            
000161AE                            
000161AE                            sub_3133B4:					  ; ...
000161AE 3078 CF92                  		move.w	($FFFFCF92).w,a0
000161B2 3878 CF94                  		move.w	($FFFFCF94).w,a4
000161B6 B9C8                       		cmp.l	a0,a4
000161B8 6600                       		bne.s	loc_3133C2
000161BA 4E75                       		rts
000161BC                            ; ---------------------------------------------------------------------------
000161BC                            
000161BC                            loc_3133C2:					  ; ...
000161BC 47F8 F700                  		lea	($FFFFF700).w,a3
000161C0                            
000161C0                            loc_3133C6:					  ; ...
000161C0 4A50                       		tst.w	(a0)
000161C2 6B00 0000                  		bmi.w	loc_313426
000161C6 3628 0002                  		move.w	2(a0),d3
000161CA 9653                       		sub.w	(a3),d3
000161CC 0643 0080                  		add.w	#$80,d3
000161D0 3428 0004                  		move.w	4(a0),d2
000161D4 946B 0004                  		sub.w	4(a3),d2
000161D8 0242 07FF                  		and.w	#$7FF,d2
000161DC 5042                       		add.w	#8,d2
000161DE 6B00                       		bmi.s	loc_313426
000161E0 0C42 00F0                  		cmp.w	#$F0,d2
000161E4 6C00                       		bge.s	loc_313426
000161E6 0642 0078                  		add.w	#$78,d2
000161EA 43F9 0000 0000             		lea	(word_3134F8).l,a1
000161F0 7200                       		moveq	#0,d1
000161F2 1228 0001                  		move.b	1(a0),d1
000161F6 6600                       		bne.s	loc_313404
000161F8 1238 FEC3                  		move.b	($FFFFFEC3).w,d1
000161FC                            
000161FC                            loc_313404:					  ; ...
000161FC D241                       		add.w	d1,d1
000161FE D2F1 1000                  		add.w	(a1,d1.w),a1
00016202 1019                       		move.b	(a1)+,d0
00016204 4880                       		ext.w	d0
00016206 D042                       		add.w	d2,d0
00016208 34C0                       		move.w	d0,(a2)+
0001620A 14D9                       		move.b	(a1)+,(a2)+
0001620C 5205                       		addq.b	#1,d5
0001620E 14C5                       		move.b	d5,(a2)+
00016210 3019                       		move.w	(a1)+,d0
00016212 0640 27B2                  		add.w	#$27B2,d0
00016216 34C0                       		move.w	d0,(a2)+
00016218 3019                       		move.w	(a1)+,d0
0001621A D043                       		add.w	d3,d0
0001621C 34C0                       		move.w	d0,(a2)+
0001621E                            
0001621E                            loc_313426:					  ; ...
0001621E 41E8 0006                  		lea	6(a0),a0
00016222 B9C8                       		cmp.l	a0,a4
00016224 6600 FF9A                  		bne.w	loc_3133C6
00016228 4E75                       		rts
0001622A                            ; End of function sub_3133B4
0001622A                            
0001622A                            
0001622A                            ; =============== S U B	R O U T	I N E =======================================
0001622A                            
0001622A                            
0001622A                            sub_313432:					  ; ...
0001622A 43F8 CF80                  		lea	($FFFFCF80).w,a1
0001622E 7000                       		moveq	#0,d0
00016230 323C 017F                  		move.w	#$17F,d1
00016234                            
00016234                            loc_31343C:					  ; ...
00016234 22C0                       		move.l	d0,(a1)+
00016236 51C9 FFFC                  		dbf	d1,loc_31343C
0001623A 43F8 CFB0                  		lea	($FFFFCFB0).w,a1
0001623E 323C 000F                  		move.w	#$F,d1
00016242                            
00016242                            loc_31344A:					  ; ...
00016242 22C0                       		move.l	d0,(a1)+
00016244 51C9 FFFC                  		dbf	d1,loc_31344A
00016248 7A00                       		moveq	#0,d5
0001624A 7000                       		moveq	#0,d0
0001624C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00016250 ED08                       		lsl.b	#6,d0
00016252 EA48                       		lsr.w	#5,d0
00016254 43F9 0000 0000             		lea	(Off_Rings).l,a1
0001625A 3031 0000                  		move.w	(a1,d0.w),d0
0001625E 43F1 0000                  		lea	(a1,d0.w),a1
00016262 45F8 CF86                  		lea	($FFFFCF86).w,a2
00016266                            
00016266                            loc_31346E:					  ; ...
00016266 3419                       		move.w	(a1)+,d2
00016268 6B00                       		bmi.s	loc_3134B6
0001626A 3619                       		move.w	(a1)+,d3
0001626C 6B00                       		bmi.s	loc_313496
0001626E 3003                       		move.w	d3,d0
00016270 E958                       		rol.w	#4,d0
00016272 0240 0007                  		and.w	#7,d0
00016276 0243 0FFF                  		and.w	#$FFF,d3
0001627A                            
0001627A                            loc_313482:					  ; ...
0001627A 34FC 0000                  		move.w	#0,(a2)+
0001627E 34C2                       		move.w	d2,(a2)+
00016280 34C3                       		move.w	d3,(a2)+
00016282 0642 0018                  		add.w	#$18,d2
00016286 5245                       		addq.w	#1,d5
00016288 51C8 FFF0                  		dbf	d0,loc_313482
0001628C 60D8                       		bra.s	loc_31346E
0001628E                            ; ---------------------------------------------------------------------------
0001628E                            
0001628E                            loc_313496:					  ; ...
0001628E 3003                       		move.w	d3,d0
00016290 E958                       		rol.w	#4,d0
00016292 0240 0007                  		and.w	#7,d0
00016296 0243 0FFF                  		and.w	#$FFF,d3
0001629A                            
0001629A                            loc_3134A2:					  ; ...
0001629A 34FC 0000                  		move.w	#0,(a2)+
0001629E 34C2                       		move.w	d2,(a2)+
000162A0 34C3                       		move.w	d3,(a2)+
000162A2 0643 0018                  		add.w	#$18,d3
000162A6 5245                       		addq.w	#1,d5
000162A8 51C8 FFF0                  		dbf	d0,loc_3134A2
000162AC 60B8                       		bra.s	loc_31346E
000162AE                            ; ---------------------------------------------------------------------------
000162AE                            
000162AE                            loc_3134B6:					  ; ...
000162AE 31C5 FF40                  		move.w	d5,($FFFFFF40).w
000162B2 31FC 0000 FF42             		move.w	#0,($FFFFFF42).w
000162B8 70FF                       		moveq	#$FFFFFFFF,d0
000162BA 24C0                       		move.l	d0,(a2)+
000162BC 43F8 CF82                  		lea	($FFFFCF82).w,a1
000162C0 363C 00FE                  		move.w	#$FE,d3
000162C4                            
000162C4                            loc_3134CC:					  ; ...
000162C4 3803                       		move.w	d3,d4
000162C6 45E9 0006                  		lea	6(a1),a2
000162CA 3011                       		move.w	(a1),d0
000162CC                            
000162CC                            loc_3134D4:					  ; ...
000162CC 4A52                       		tst.w	(a2)
000162CE 6700                       		beq.s	loc_3134E6
000162D0 B052                       		cmp.w	(a2),d0
000162D2 6300                       		bls.s	loc_3134E6
000162D4 2211                       		move.l	(a1),d1
000162D6 2012                       		move.l	(a2),d0
000162D8 2280                       		move.l	d0,(a1)
000162DA 2481                       		move.l	d1,(a2)
000162DC 4840                       		swap	d0
000162DE                            
000162DE                            loc_3134E6:					  ; ...
000162DE 45EA 0006                  		lea	6(a2),a2
000162E2 51CC FFE8                  		dbf	d4,loc_3134D4
000162E6 43E9 0006                  		lea	6(a1),a1
000162EA 51CB FFD8                  		dbf	d3,loc_3134CC
000162EE 4E75                       		rts
000162F0                            ; End of function sub_313432
000162F0                            
000162F0                            ; ---------------------------------------------------------------------------
000162F0 0010 0016 001C 0022 0028   word_3134F8:	dc.w	$10,   $16,   $1C,   $22,   $28; 0 ; ...
000162FA 002E 0034 003A F805 0000   		dc.w	$2E,   $34,   $3A, -$7FB,     0; 5
00016304 FFF8 F805 0004 FFF8 F801   		dc.w	 -8, -$7FB,	4,    -8, -$7FF; 10
0001630E 0008 FFFC F805 0804 FFF8   		dc.w	  8,	-4, -$7FB,  $804,    -8; 15
00016318 F805 000A FFF8 F805 180A   		dc.w  -$7FB,	$A,    -8, -$7FB, $180A; 20
00016322 FFF8 F805 080A FFF8 F805   		dc.w	 -8, -$7FB,  $80A,    -8, -$7FB; 25
0001632C 100A FFF8                  		dc.w  $100A,	-8		  ; 30
00016330                            		
00016330                            Off_Rings:
00016330 0000                       		dc.w Rings_GHZ1-Off_Rings
00016332 0000                       		dc.w Rings_GHZ2-Off_Rings
00016334 0000                       		dc.w Rings_GHZ3-Off_Rings
00016336 0000                       		dc.w Rings_GHZ1-Off_Rings
00016338 0000                       		dc.w Rings_LZ1-Off_Rings
0001633A 0000                       		dc.w Rings_LZ2-Off_Rings
0001633C 0000                       		dc.w Rings_LZ3-Off_Rings
0001633E 0000                       		dc.w Rings_SBZ3-Off_Rings
00016340 0000                       		dc.w Rings_MZ1-Off_Rings
00016342 0000                       		dc.w Rings_MZ2-Off_Rings
00016344 0000                       		dc.w Rings_MZ3-Off_Rings
00016346 0000                       		dc.w Rings_MZ1-Off_Rings
00016348 0000                       		dc.w Rings_SLZ1-Off_Rings
0001634A 0000                       		dc.w Rings_SLZ2-Off_Rings
0001634C 0000                       		dc.w Rings_SLZ3-Off_Rings
0001634E 0000                       		dc.w Rings_SLZ1-Off_Rings
00016350 0000                       		dc.w Rings_SYZ1-Off_Rings
00016352 0000                       		dc.w Rings_SYZ2-Off_Rings
00016354 0000                       		dc.w Rings_SYZ3-Off_Rings
00016356 0000                       		dc.w Rings_SYZ1-Off_Rings
00016358 0000                       		dc.w Rings_SBZ1-Off_Rings
0001635A 0000                       		dc.w Rings_SBZ2-Off_Rings
0001635C 0000                       		dc.w Rings_FZ-Off_Rings
0001635E 0000                       		dc.w Rings_SBZ1-Off_Rings
00016360 0000                       		dc.w Rings_End-Off_Rings
00016362 0000                       		dc.w Rings_End-Off_Rings
00016364 0000                       		dc.w Rings_End-Off_Rings
00016366 0000                       		dc.w Rings_End-Off_Rings
00016368 0000                       		dc.w Rings_ABZ2-Off_Rings
0001636A 0000                       		dc.w Rings_ABZ2-Off_Rings
0001636C 0000                       		dc.w Rings_ABZ1-Off_Rings
0001636E 0000 0000 0000             Rings_Null:	dc.b 0, 0, 0, 0, 0,	0
00016374                            Rings_GHZ1:	incbin	"LevelConverter\Green Hill Zone Act 1\Rings.bin"
00016378                            			even
00016378                            Rings_GHZ2:	incbin	"LevelConverter\Green Hill Zone Act 2\Rings.bin"
0001637C                            			even
0001637C                            Rings_GHZ3:	incbin	"LevelConverter\Green Hill Zone Act 3\Rings.bin"
00016380                            			even
00016380                            Rings_LZ1:	incbin	"LevelConverter\Labyrinth Zone Act 1\Rings.bin"
00016384                            			even
00016384                            Rings_LZ2:	incbin	"LevelConverter\Labyrinth Zone Act 2\Rings.bin"
00016388                            			even
00016388                            Rings_LZ3:	incbin	"LevelConverter\Labyrinth Zone Act 3\Rings.bin"
0001638C                            			even
0001638C                            Rings_MZ1:	incbin	"LevelConverter\Marble Zone Act 1\Rings.bin"
00016390                            			even
00016390                            Rings_MZ2:	incbin	"LevelConverter\Marble Zone Act 2\Rings.bin"
00016394                            			even
00016394                            Rings_MZ3:	incbin	"LevelConverter\Marble Zone Act 3\Rings.bin"
00016398                            			even
00016398                            Rings_SLZ1:	incbin	"LevelConverter\Star Light Zone Act 1\Rings.bin"
0001639C                            			even
0001639C                            Rings_SLZ2:	incbin	"LevelConverter\Star Light Zone Act 2\Rings.bin"
000163A0                            			even
000163A0                            Rings_SLZ3:	incbin	"LevelConverter\Star Light Zone Act 3\Rings.bin"
000163A4                            			even
000163A4                            Rings_SYZ1:	incbin	"LevelConverter\Spring Yard Zone Act 1\Rings.bin"
000163A8                            			even
000163A8                            Rings_SYZ2:	incbin	"LevelConverter\Spring Yard Zone Act 2\Rings.bin"
000163AC                            			even
000163AC                            Rings_SYZ3:	incbin	"LevelConverter\Spring Yard Zone Act 3\Rings.bin"
000163B0                            			even
000163B0                            Rings_SBZ1:	incbin	"LevelConverter\Scrap Brain Zone Act 1\Rings.bin"
000163B4                            			even
000163B4                            Rings_SBZ2:	incbin	"LevelConverter\Scrap Brain Zone Act 2\Rings.bin"
000163B8                            			even
000163B8                            Rings_SBZ3:	incbin	"LevelConverter\Scrap Brain Zone Act 3\Rings.bin"
000163BC                            			even
000163BC                            Rings_FZ:	incbin	"LevelConverter\Final Zone\Rings.bin"
000163C0                            			even
000163C0                            Rings_End:	incbin	"LevelConverter\Ending\Rings.bin"
000163C4                            			even
000163C4                            Rings_ABZ1:	incbin	"LevelConverter\abz1\Rings.bin"
000163C8                            			even
000163C8                            Rings_ABZ2:	incbin	"LevelConverter\abz2\Rings.bin"
000163CC                            			even
000163CC                            
000163CC                            ; ---------------------------------------------------------------------------
000163CC                            ; Subroutine to	load a level's objects (Objects manager for Sonic 1)
000163CC                            ; This one is ported from Sonic 2 so it uses Object Indexes that are in
000163CC                            ; Sonic 2 (S2) format only
000163CC                            ; ---------------------------------------------------------------------------
000163CC                            
000163CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163CC                            
000163CC                            
000163CC                            ; =============== S U B	R O U T	I N E =======================================
000163CC                            
000163CC                            
000163CC                            ;ObjPosLoad:					  ; ...
000163CC                            ; ---------------------------------------------------------------------------
000163CC                            ; Objects Manager
000163CC                            ; Subroutine to load objects whenever they are close to the screen. Unlike in
000163CC                            ; normal s2, in this version every object gets an entry in the respawn table.
000163CC                            ; This is necessary to get the additional y-range checks to work.
000163CC                            ;
000163CC                            ; input variables:
000163CC                            ;  -none-
000163CC                            ;
000163CC                            ; writes:
000163CC                            ;  d0, d1, d2
000163CC                            ;  d3 = upper boundary to load object
000163CC                            ;  d4 = lower boundary to load object
000163CC                            ;  d5 = #$FFF, used to filter out object's y position
000163CC                            ;  d6 = camera position
000163CC                            ;
000163CC                            ;  a0 = address in object placement list
000163CC                            ;  a3 = address in object respawn table
000163CC                            ;  a6 = object loading routine
000163CC                            ; ---------------------------------------------------------------------------
000163CC                             
000163CC                            ; loc_17AA4
000163CC                            ObjPosLoad:
000163CC 7000                       	moveq	#0,d0
000163CE 1038 F76C                  	move.b	(v_opl_routine).w,d0
000163D2 4EFB 0000                  	jmp	ObjectsManager_States(pc,d0.w)
000163D6                             
000163D6                            ; ============== JUMP TABLE	=============================================
000163D6                            ObjectsManager_States:
000163D6 6000 0000                  	bra.w	ObjectsManager_Init		; 0
000163DA 6000 0000                  	bra.w	ObjectsManager_Main		; 2
000163DE 6000 0000                  	bra.w	ObjectsManager_Main		; 4
000163E2 4E75                       	rts
000163E4                            ; ============== END JUMP TABLE	=============================================
000163E4                             
000163E4                            ObjectsManager_Init:
000163E4 5838 F76C                  	addq.b	#4,(v_opl_routine).w
000163E8                             
000163E8 41F8 C900                  	lea     (v_objstate).w,a0
000163EC 7000                       	moveq   #0,d0
000163EE 223C 0000 00C0             	move.l  #$C0,d1 ; set loop counter
000163F4                            OPL_ClrList:
000163F4 20C0                       	move.l  d0,(a0)+
000163F6 51C9 FFFC                  	dbf     d1, OPL_ClrList
000163FA                             
000163FA 3038 FE10                  	move.w	(v_zone).w,d0
000163FE ED08                       	lsl.b	#6,d0
00016400 E848                       	lsr.w	#4,d0
00016402 41F9 0000 0000             	lea		(ObjPos_Index).l,a0    ; load the first pointer in the object layout list pointer index,
00016408 2248                       	movea.l	a0,a1
0001640A D0F0 0000                  	adda.w	(a0,d0.w),a0           ; load the pointer to the current object layout
0001640E                            
0001640E                            ; initialize each object load address with the first object in the layout
0001640E 21C8 F770                  	move.l	a0,(Obj_load_addr_right).w
00016412 21C8 F774                  	move.l	a0,(Obj_load_addr_left).w
00016416 47F8 C900                  	lea		(v_objstate).w,a3
0001641A                            
0001641A 3C38 F700                  	move.w	(v_screenposx).w,d6
0001641E 0446 0080                  	subi.w	#$80,d6	                ; look one chunk to the left
00016422 6400                       	bcc.s	loc_notneg	                ; if the result was negative,
00016424 7C00                       	moveq	#0,d6	                ; cap at zero
00016426                            loc_notneg:
00016426 0246 FF80                  	andi.w	#$FF80,d6	; limit to increments of $80 (width of a chunk)
0001642A                            
0001642A 2078 F770                  	movea.l	(Obj_load_addr_right).w,a0	; get first object in layout
0001642E                             
0001642E                            ; at the beginning of a level this gives respawn table entries to any object that is one chunk
0001642E                            ; behind the left edge of the screen that needs to remember its state (Monitors, Badniks, etc.)
0001642E                            loc_D944:
0001642E BC50                       	cmp.w	(a0),d6			; is object's x position >= d6?
00016430 6300                       	bls.s	loc_D956		; if yes, branch
00016432 5C48                       	addq.w	#6,a0	        ; next object
00016434 524B                       	addq.w	#1,a3	        ; respawn index of next object going right
00016436 60F6                       	bra.s	loc_D944        ; continue with next object
00016438                            ; ---------------------------------------------------------------------------
00016438                             
00016438                            loc_D956:
00016438 21C8 F770                  	move.l	a0,(Obj_load_addr_right).w	; remember rightmost object that has been processed, so far (we still need to look forward)
0001643C 31CB F778                  	move.w	a3,(Obj_respawn_index_right).w	; and its respawn table index
00016440                            
00016440 47F8 C900                  	lea		(v_objstate).w,a3	        ; reset a3
00016444 2078 F774                  	movea.l	(Obj_load_addr_left).w,a0	; reset a0
00016448 0446 0080                  	subi.w	#$80,d6						; look even farther left (any object behind this is out of range)
0001644C 6500                       	bcs.s	loc_D976					; branch, if camera position would be behind level's left boundary
0001644E                             
0001644E                            loc_D964:	; count how many objects are behind the screen that are not in range and need to remember their state
0001644E BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
00016450 6300                       	bls.s	loc_D976	; if yes, branch
00016452 5C48                       	addq.w	#6,a0
00016454 524B                       	addq.w	#1,a3	        ; respawn index of next object going left
00016456 60F6                       	bra.s	loc_D964        ; continue with next object
00016458                            ; ---------------------------------------------------------------------------
00016458                             
00016458                            loc_D976:
00016458 21C8 F774                  	move.l	a0,(Obj_load_addr_left).w	; remember current object from the left
0001645C 31CB F77C                  	move.w	a3,(Obj_respawn_index_left).w	; and its respawn table index
00016460                             
00016460 31FC FFFF F76E             	move.w	#-1,(v_screenposx_last).w	; make sure ObjectsManager_GoingForward is run
00016466                             
00016466 3038 F704                  	move.w	(v_screenposy).w,d0
0001646A 0240 FF80                  	andi.w	#$FF80,d0
0001646E 31C0 FC10                  	move.w	d0,(v_screenposy_last).w	; make sure the Y check isn't run unnecessarily during initialization
00016472                            ; ---------------------------------------------------------------------------
00016472                             
00016472                            ObjectsManager_Main:
00016472                            	; get coarse camera position
00016472 3238 F704                  	move.w	(v_screenposy).w,d1
00016476 0441 0080                  	subi.w	#$80,d1
0001647A 0241 FF80                  	andi.w	#$FF80,d1
0001647E 31C1 FC18                  	move.w	d1,(v_screenposy_coarse).w
00016482                             
00016482 3238 F700                  	move.w	(v_screenposx).w,d1
00016486 0441 0080                  	subi.w	#$80,d1
0001648A 0241 FF80                  	andi.w	#$FF80,d1
0001648E 31C1 FC14                  	move.w	d1,(v_screenposx_coarse).w
00016492                             
00016492 4A78 F724                  	tst.w	(v_limittop1).w					; does this level y-wrap?
00016496 6A00                       	bpl.s	ObjMan_Main_NoYWrap				; if not, branch
00016498 4DF9 0000 0000             	lea		(ChkLoadObj_YWrap).l,a6			; set object loading routine
0001649E 3638 F704                  	move.w	(v_screenposy).w,d3
000164A2 0243 FF80                  	andi.w	#$FF80,d3						; get coarse value
000164A6 3803                       	move.w	d3,d4
000164A8 0644 0200                  	addi.w	#$200,d4						; set lower boundary
000164AC 0443 0080                  	subi.w	#$80,d3							; set upper boundary
000164B0 6A00                       	bpl.s	loc_ok								; branch, if upper boundary > 0
000164B2 0243 07FF                  	andi.w	#$7FF,d3						; wrap value
000164B6 6000                       	bra.s	ObjMan_Main_Cont
000164B8                            ; ---------------------------------------------------------------------------
000164B8                            loc_ok:
000164B8 303C 07FF                  	move.w	#$7FF,d0
000164BC 5240                       	addq.w	#1,d0
000164BE B840                       	cmp.w	d0,d4
000164C0 6300                       	bls.s	positive						; branch, if lower boundary < $7FF
000164C2 0244 07FF                  	andi.w	#$7FF,d4						; wrap value
000164C6 6000                       	bra.s	ObjMan_Main_Cont
000164C8                            ; ---------------------------------------------------------------------------
000164C8                            
000164C8                            ObjMan_Main_NoYWrap:
000164C8 3638 F704                  	move.w	(v_screenposy).w,d3
000164CC 0243 FF80                  	andi.w	#$FF80,d3						; get coarse value
000164D0 3803                       	move.w	d3,d4
000164D2 0644 0200                  	addi.w	#$200,d4						; set lower boundary
000164D6 0443 0080                  	subi.w	#$80,d3							; set upper boundary
000164DA 6A00                       	bpl.s	positive
000164DC 7600                       	moveq	#0,d3							; no negative values allowed
000164DE                            positive:
000164DE 4DF9 0000 0000             	lea		(ChkLoadObj).l,a6				; set object loading routine
000164E4                             
000164E4                            ObjMan_Main_Cont:
000164E4 3A3C 0FFF                  	move.w	#$FFF,d5						; this will be used later when we load objects
000164E8 3C38 F700                  	move.w	(v_screenposx).w,d6
000164EC 0246 FF80                  	andi.w	#$FF80,d6
000164F0 BC78 F76E                  	cmp.w	(v_screenposx_last).w,d6		; is the X range the same as last time?
000164F4 6700 0000                  	beq.w	ObjectsManager_SameXRange		; if yes, branch
000164F8 6C00                       	bge.s	ObjectsManager_GoingForward		; if new pos is greater than old pos, branch
000164FA                             
000164FA                            ; if the player is moving back
000164FA 31C6 F76E                  	move.w	d6,(v_screenposx_last).w		; remember current position for next time
000164FE                            
000164FE 2078 F774                  	movea.l	(Obj_load_addr_left).w,a0		; get current object going left
00016502 3678 F77C                  	movea.w	(Obj_respawn_index_left).w,a3	; and its respawn table index
00016506                            
00016506 0446 0080                  	subi.w	#$80,d6							; look one chunk to the left
0001650A 6500                       	bcs.s	ObjMan_GoingBack_Part2			; branch, if camera position would be behind level's left boundary
0001650C                            
0001650C 4EB9 0000 0000             	jsr		(SingleObjLoad).l					; find an empty object slot
00016512 6600                       	bne.s	ObjMan_GoingBack_Part2			; branch, if there are none
00016514                            
00016514                            ; load all objects left of the screen that are now in range
00016514                            loc_D9A6: 
00016514 BC68 FFFA                  	cmp.w	-6(a0),d6						; is the previous object's X pos less than d6?
00016518 6C00                       	bge.s	ObjMan_GoingBack_Part2			; if it is, branch
0001651A 5D48                       	subq.w	#6,a0							; get object's address
0001651C 534B                       	subq.w	#1,a3							; and respawn table index
0001651E 4E96                       	jsr		(a6)							; load object
00016520 6600                       	bne.s	loc_undoloadobject					; branch, if SST is full
00016522 5D48                       	subq.w	#6,a0
00016524 60EE                       	bra.s	loc_D9A6						; continue with previous object
00016526                            ; ---------------------------------------------------------------------------
00016526                             
00016526                            loc_undoloadobject:							; undo a few things, if the object couldn't load
00016526 5C48                       	addq.w	#6,a0							; go back to last object
00016528 524B                       	addq.w	#1,a3							; since we didn't load the object, undo last change
0001652A                             
0001652A                            ObjMan_GoingBack_Part2:
0001652A 21C8 F774                  	move.l	a0,(Obj_load_addr_left).w		; remember current object going left
0001652E 31CB F77C                  	move.w	a3,(Obj_respawn_index_left).w	; and its respawn table index
00016532 2078 F770                  	movea.l	(Obj_load_addr_right).w,a0		; get next object going right
00016536 3678 F778                  	movea.w	(Obj_respawn_index_right).w,a3	; and its respawn table index
0001653A 0646 0300                  	addi.w	#$300,d6						; look two chunks beyond the right edge of the screen
0001653E                            
0001653E                            ; subtract number of objects that have been moved out of range (from the right side) 
0001653E                            loc_D9DE: 
0001653E BC68 FFFA                  	cmp.w	-6(a0),d6						; is the previous object's X pos less than d6?
00016542 6E00                       	bgt.s	loc_D9F0						; if it is, branch
00016544 5D48                       	subq.w	#6,a0							; get object's address
00016546 534B                       	subq.w	#1,a3							; and respawn table index
00016548 60F4                       	bra.s	loc_D9DE						; continue with previous object
0001654A                            ; ---------------------------------------------------------------------------
0001654A                            loc_D9F0:
0001654A 21C8 F770                  	move.l	a0,(Obj_load_addr_right).w	; remember next object going right
0001654E 31CB F778                  	move.w	a3,(Obj_respawn_index_right).w	; and its respawn table index
00016552 6000                       	bra.s	ObjectsManager_SameXRange
00016554                            ; ---------------------------------------------------------------------------
00016554                            ObjectsManager_GoingForward:
00016554 31C6 F76E                  	move.w	d6,(v_screenposx_last).w
00016558                             
00016558 2078 F770                  	movea.l	(Obj_load_addr_right).w,a0		; get next object from the right
0001655C 3678 F778                  	movea.w (Obj_respawn_index_right).w,a3	; and its respawn table index
00016560 0646 0280                  	addi.w	#$280,d6						; look two chunks forward
00016564 4EB9 0000 0000             	jsr		(SingleObjLoad).l					; find an empty object slot
0001656A 6600                       	bne.s	ObjMan_GoingForward_Part2		; branch, if there are none
0001656C                            
0001656C                            ; load all objects right of the screen that are now in range
0001656C                            loc_DA02: 
0001656C BC50                       	cmp.w	(a0),d6							; is object's x position >= d6?
0001656E 6300                       	bls.s	ObjMan_GoingForward_Part2		; if yes, branch
00016570 4E96                       	jsr		(a6)							; load object (and get address of next object)
00016572 524B                       	addq.w	#1,a3							; respawn index of next object to the right
00016574 67F6                       	beq.s	loc_DA02						; continue loading objects, if the SST isn't full
00016576                             
00016576                            ObjMan_GoingForward_Part2:
00016576 21C8 F770                  	move.l	a0,(Obj_load_addr_right).w		; remember next object from the right
0001657A 31CB F778                  	move.w	a3,(Obj_respawn_index_right).w	; and its respawn table index
0001657E 2078 F774                  	movea.l	(Obj_load_addr_left).w,a0		; get current object from the left
00016582 3678 F77C                  	movea.w	(Obj_respawn_index_left).w,a3	; and its respawn table index
00016586 0446 0300                  	subi.w	#$300,d6						; look one chunk behind the left edge of the screen
0001658A 6500                       	bcs.s	ObjMan_GoingForward_End			; branch, if camera position would be behind level's left boundary
0001658C                            
0001658C                            ; subtract number of objects that have been moved out of range (from the left) 
0001658C                            loc_DA24: 
0001658C BC50                       	cmp.w	(a0),d6							; is object's x position >= d6?
0001658E 6300                       	bls.s	ObjMan_GoingForward_End			; if yes, branch
00016590 5C48                       	addq.w	#6,a0	                		; next object
00016592 524B                       	addq.w	#1,a3	                		; respawn index of next object to the left
00016594 60F6                       	bra.s	loc_DA24	        			; continue with next object
00016596                            ; ---------------------------------------------------------------------------
00016596                            
00016596                            ObjMan_GoingForward_End:
00016596 21C8 F774                  	move.l	a0,(Obj_load_addr_left).w		; remember current object from the left
0001659A 31CB F77C                  	move.w	a3,(Obj_respawn_index_left).w	; and its respawn table index
0001659E                             
0001659E                            ObjectsManager_SameXRange:
0001659E 3C38 F704                  	move.w	(v_screenposy).w,d6
000165A2 0246 FF80                  	andi.w	#$FF80,d6
000165A6 3606                       	move.w	d6,d3
000165A8 BC78 FC10                  	cmp.w	(v_screenposy_last).w,d6		; is the y range the same as last time?
000165AC 6700 0000                  	beq.w	ObjectsManager_SameYRange		; if yes, branch
000165B0 6C00                       	bge.s	ObjectsManager_GoingDown		; if the player is moving down
000165B2                             
000165B2                            ; if the player is moving up
000165B2 4A78 F724                  	tst.w	(v_limittop1).w					; does the level y-wrap?
000165B6 6A00                       	bpl.s	ObjMan_GoingUp_NoYWrap			; if not, branch
000165B8 4A46                       	tst.w	d6	
000165BA 6600                       	bne.s	ObjMan_GoingUp_YWrap
000165BC 0C78 0080 FC10             	cmpi.w	#$80,(v_screenposy_last).w
000165C2 6600                       	bne.s	ObjMan_GoingDown_YWrap
000165C4                             
000165C4                            ObjMan_GoingUp_YWrap:
000165C4 0443 0080                  	subi.w	#$80,d3							; look one chunk up
000165C8 6A00                       	bpl.s	ObjectsManager_YCheck			; go to y check, if camera y position >= $80
000165CA 0243 07FF                  	andi.w	#$7FF,d3						; else, wrap value
000165CE 6000                       	bra.s	ObjectsManager_YCheck
000165D0                             
000165D0                            ; ---------------------------------------------------------------------------
000165D0                            ObjMan_GoingUp_NoYWrap:
000165D0 0443 0080                  	subi.w	#$80,d3							; look one chunk up
000165D4 6B00 0000                  	bmi.w	ObjectsManager_SameYRange		; don't do anything if camera y position is < $80
000165D8 6000                       	bra.s	ObjectsManager_YCheck
000165DA                            ; ---------------------------------------------------------------------------
000165DA                             
000165DA                            ObjectsManager_GoingDown:
000165DA 4A78 F724                  	tst.w	(v_limittop1).w					; does the level y-wrap?
000165DE 6A00                       	bpl.s	ObjMan_GoingDown_NoYWrap		; if not, branch
000165E0 4A78 FC10                  	tst.w	(v_screenposy_last).w
000165E4 6600                       	bne.s	ObjMan_GoingDown_YWrap
000165E6 0C46 0080                  	cmpi.w	#$80,d6
000165EA 66D8                       	bne.s	ObjMan_GoingUp_YWrap
000165EC                             
000165EC                            ObjMan_GoingDown_YWrap:
000165EC 0643 0180                  	addi.w	#$180,d3						; look one chunk down
000165F0 0C43 07FF                  	cmpi.w	#$7FF,d3
000165F4 6500                       	bcs.s	ObjectsManager_YCheck			; go to  check, if camera y position < $7FF
000165F6 0243 07FF                  	andi.w	#$7FF,d3						; else, wrap value
000165FA 6000                       	bra.s	ObjectsManager_YCheck
000165FC                            ; ---------------------------------------------------------------------------
000165FC                             
000165FC                            ObjMan_GoingDown_NoYWrap:
000165FC 0643 0180                  	addi.w	#$180,d3						; look one chunk down
00016600 0C43 07FF                  	cmpi.w	#$7FF,d3
00016604 6200                       	bhi.s	ObjectsManager_SameYRange		; don't do anything, if camera is too close to bottom
00016606                             
00016606                            ObjectsManager_YCheck:
00016606 4EB9 0000 0000             	jsr		(SingleObjLoad).l					; get an empty object slot
0001660C 6600                       	bne.s	ObjectsManager_SameYRange		; branch, if there are none
0001660E 3803                       	move.w	d3,d4
00016610 0644 0080                  	addi.w	#$80,d4
00016614 3A3C 0FFF                  	move.w	#$FFF,d5						; this will be used later when we load objects
00016618 2078 F774                  	movea.l	(Obj_load_addr_left).w,a0		; get next object going left
0001661C 3678 F77C                  	movea.w	(Obj_respawn_index_left).w,a3	; and its respawn table index
00016620 2E38 F770                  	move.l	(Obj_load_addr_right).w,d7		; get next object going right
00016624 9E88                       	sub.l	a0,d7							; d7 = number of objects between the left and right boundaries * 6
00016626 6700                       	beq.s	ObjectsManager_SameYRange		; branch if there are no objects inbetween
00016628 5448                       	addq.w	#2,a0							; align to object's y position
0001662A                            
0001662A                            ; check, if current object needs to be loaded
0001662A                            loc_checknext:	
0001662A 4A13                           tst.b	(a3)	        				; is object already loaded?
0001662C 6B00                           bmi.s	loc_nextobj						; if yes, branch
0001662E 3210                       	move.w	(a0),d1                  		; get object's y position and status info
00016630 C245                       	and.w	d5,d1	                 		; get y-position
00016632 B243                       	cmp.w	d3,d1                    		; compare to upper boundary to load object
00016634 6500                       	bcs.s	loc_nextobj						; branch, if object is out of range from the top
00016636 B244                       	cmp.w	d4,d1                    		; compare to lower boundary to load object
00016638 6200                       	bhi.s	loc_nextobj						; branch, if object is out of range from the bottom
0001663A 08D3 0007                  	bset	#7,(a3)	                 		; mark object as loaded
0001663E                            ; load object
0001663E 3368 FFFE 0008             	move.w	-2(a0),x_pos(a1)
00016644 3210                       	move.w	(a0),d1
00016646 3401                       	move.w	d1,d2                    		; copy for later
00016648 C245                       	and.w	d5,d1	                 		; get y-position
0001664A 3341 000C                  	move.w	d1,y_pos(a1)
0001664E E75A                       	rol.w	#3,d2                    		; adjust bits
00016650 0202 0003                  	andi.b	#3,d2                    		; get render flags
00016654 1342 0001                  	move.b	d2,render_flags(a1)
00016658 1342 0022                  	move.b	d2,status(a1)
0001665C 12A8 0002                  	move.b	2(a0),(a1)                 		; get object id
00016660 1368 0003 0028             	move.b	3(a0),subtype(a1)
00016666 334B 0014                  	move.w	a3,respawn_index(a1)
0001666A 4EB9 0000 0000             	jsr		(SingleObjLoad).l	           		; find new object slot
00016670 6600                       	bne.s	ObjectsManager_SameYRange		; brach, if there are none left
00016672                            loc_nextobj:
00016672 5C48                       	addq.w	#6,a0							; address of next object
00016674 524B                       	addq.w	#1,a3							; and its respawn index
00016676 5D47                       	subq.w	#6,d7							; subtract from size of remaining objects
00016678 66B0                       	bne.s	loc_checknext						; branch, if there are more
0001667A                            
0001667A                            ObjectsManager_SameYRange:
0001667A 31C6 FC10                  	move.w	d6,(v_screenposy_last).w
0001667E 4E75                       	rts
00016680                            ; ===========================================================================
00016680                            ; ---------------------------------------------------------------------------
00016680                            ; Subroutines to check if an object needs to be loaded,
00016680                            ; with and without y-wrapping enabled.
00016680                            ;
00016680                            ; input variables:
00016680                            ;  d3 = upper boundary to load object
00016680                            ;  d4 = lower boundary to load object
00016680                            ;  d5 = #$FFF, used to filter out object's y position
00016680                            ;
00016680                            ;  a0 = address in object placement list
00016680                            ;  a1 = object
00016680                            ;  a3 = address in object respawn table
00016680                            ;
00016680                            ; writes:
00016680                            ;  d1, d2, d7
00016680                            ; ---------------------------------------------------------------------------
00016680                            ChkLoadObj_YWrap:
00016680 4A13                       	tst.b	(a3)	        ; is object already loaded?
00016682 6A00                       	bpl.s	loc_notloaded2		; if not, branch
00016684 5C48                       	addq.w	#6,a0           ; next object
00016686 7200                       	moveq	#0,d1           ; let the objects manager know that it can keep going
00016688 4E75                       	rts
0001668A                            ; ===========================================================================
0001668A                            
0001668A                            loc_notloaded2:
0001668A 3E18                       		move.w	(a0)+,d7                 ; get object's x position
0001668C 3218                       		move.w	(a0)+,d1                 ; get object's y position and status info
0001668E 3401                       		move.w	d1,d2                    ; does this object skip y-Checks?	;*6
00016690 6B00                        	    bmi.s	loc_noYcheck	         	 ; if yes, branch
00016692 C245                       		and.w	d5,d1            	     ; get y-position
00016694 B243                       	    cmp.w	d3,d1                    ; compare to upper boundary to load object
00016696 6400                       	    bcc.s	loc_loadobject2
00016698 B244                       	    cmp.w	d4,d1                    ; compare to lower boundary to load object
0001669A 6300                       	    bls.s	loc_loadobject2
0001669C 5448                       	    addq.w	#2,a0					 ; address of next object
0001669E 7200                       	    moveq	#0,d1					 ; let the objects manager know that it can keep going
000166A0 4E75                       	    rts
000166A2                            ; ---------------------------------------------------------------------------
000166A2                            loc_noYcheck:
000166A2 C245                        		and.w	d5,d1	                 ; get y-position
000166A4                            loc_loadobject2:
000166A4 08D3 0007                  	    bset	#7,(a3)	                 ; mark object as loaded
000166A8 3347 0008                  		move.w	d7,x_pos(a1)
000166AC 3341 000C                  		move.w	d1,y_pos(a1)
000166B0 E75A                       		rol.w	#3,d2                    ; adjust bits
000166B2 0202 0003                  		andi.b	#3,d2                    ; get render flags
000166B6 1342 0001                  		move.b	d2,render_flags(a1)
000166BA 1342 0022                  		move.b	d2,status(a1)
000166BE 1298                       		move.b	(a0)+,(a1)                 ; get object id
000166C0 1358 0028                  		move.b	(a0)+,subtype(a1)
000166C4 334B 0014                  	    move.w	a3,respawn_index(a1)
000166C8 6000 0000                  		bra.w	SingleObjLoad              ; find empty slot
000166CC                            ; ===========================================================================
000166CC                            ChkLoadObj:
000166CC 4A13                       		tst.b	(a3)	        		; is object already loaded?
000166CE 6A00                       		bpl.s	loc_notloaded				; if not, branch
000166D0 5C48                       		addq.w	#6,a0           		; next object
000166D2 7200                       		moveq	#0,d1           		; let the objects manager know that it can keep going
000166D4 4E75                       		rts
000166D6                            ; ===========================================================================
000166D6                            
000166D6                            loc_notloaded:
000166D6 3E18                       		move.w	(a0)+,d7                 ; get object's x position
000166D8 3218                       		move.w	(a0)+,d1                 ; get object's y position and status info
000166DA 3401                       		move.w	d1,d2                    ; does this object skip y-Checks?	;*6
000166DC 6B00                        	    bmi.s	loc_noYcheck2	         	 ; if yes, branch
000166DE C245                       		and.w	d5,d1	                 ; get y-position
000166E0 B243                       	    cmp.w	d3,d1                    ; compare to upper boundary to load object
000166E2 6500                       	    bcs.s	loc_outofrange				 ; branch, if object is out of range from the top
000166E4 B244                       	    cmp.w	d4,d1                    ; compare to lower boundary to load object
000166E6 6300                       	    bls.s	loc_loadobject              ; branch, if object is in range from the bottom
000166E8                            loc_outofrange:
000166E8 5448                       	    addq.w	#2,a0					 ; address of next object
000166EA 7200                       	    moveq	#0,d1					 ; let the objects manager know that it can keep going
000166EC 4E75                       	    rts
000166EE                            ; ---------------------------------------------------------------------------
000166EE                            loc_noYcheck2:
000166EE C245                        		and.w	d5,d1                 ; get y-position
000166F0                            loc_loadobject:
000166F0 08D3 0007                  	    bset	#7,(a3)	                 ; mark object as loaded
000166F4 3347 0008                  		move.w	d7,x_pos(a1)
000166F8 3341 000C                  		move.w	d1,y_pos(a1)
000166FC E75A                       		rol.w	#3,d2                    ; adjust bits
000166FE 0202 0003                  		andi.b	#3,d2                    ; get render flags
00016702 1342 0001                  		move.b	d2,render_flags(a1)
00016706 1342 0022                  		move.b	d2,status(a1)
0001670A 1298                       		move.b	(a0)+,(a1)                 ; get object id
0001670C 1358 0028                  		move.b	(a0)+,subtype(a1)
00016710 334B 0014                  	    move.w	a3,respawn_index(a1)
00016714                             	; continue straight to SingleObjLoad
00016714                            ; End of function ChkLoadObj
00016714                            ; ===========================================================================
00016714                            
00016714                            ; End of function sub_313D2E
00016714                            
00016714                            
00016714                            ; ---------------------------------------------------------------------------
00016714                            ; Single object	loading	subroutine
00016714                            ; ---------------------------------------------------------------------------
00016714                            
00016714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016714                            
00016714                            FindFreeObj:
00016714                            SingleObjLoad:
00016714 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
00016718 303C 005F                  		move.w	#$5F,d0
0001671C                            
0001671C                            loc_DA94:
0001671C 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0001671E 6700                       		beq.s	locret_DAA0	; if yes, branch
00016720 43E9 0040                  		lea	object_size(a1),a1	; goto next object RAM slot
00016724 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
00016728                            
00016728                            locret_DAA0:
00016728 4E75                       		rts	
0001672A                            ; End of function SingleObjLoad
0001672A                            
0001672A                            
0001672A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001672A                            
0001672A                            FindNextFreeObj:
0001672A                            SingleObjLoad2:
0001672A 2248                       	movea.l	a0,a1
0001672C 303C F000                  	move.w	#$F000,d0	; $D000
00016730 9048                       	sub.w	a0,d0	; subtract current object location
00016732 EC48                       	lsr.w	#6,d0
00016734 103B 0000                  	move.b	Find_First_Sprite_Table(pc,d0.w),d0
00016738 6B00                       	bmi.s	return_18014
0001673A                             
0001673A                            SingleObjLoad2_
0001673A 43E9 0040                  	lea	object_size(a1),a1 ; load obj address ; goto next object RAM slot
0001673E 4A11                       	tst.b	id(a1)	; is object RAM slot empty?
00016740 57C8 FFF8                  	dbeq	d0,SingleObjLoad2_	; if yes, branch
00016744                             
00016744                            return_18014:
00016744 4E75                       	rts
00016746                            ; ===========================================================================
00016746                            Find_First_Sprite_Table:	; map n*64/64 to n*68/64
00016746 FF00 0102 0304 0506 0708+  	dc.b	$FF,  $0,  $1,  $2,  $3,  $4,  $5,  $6,  $7,  $8,  $9,  $A,  $B
00016753 0C0D 0E0F 0F10 1112 1314+  	dc.b	 $C,  $D,  $E,  $F,  $F, $10, $11, $12, $13, $14, $15, $16, $17
00016760 1819 1A1B 1C1D 1E1F 1F20+  	dc.b	$18, $19, $1A, $1B, $1C, $1D, $1E, $1F, $1F, $20, $21, $22, $23
0001676D 2425 2627 2829 2A2B 2C2D+  	dc.b	$24, $25, $26, $27, $28, $29, $2A, $2B, $2C, $2D, $2E, $2F, $2F
0001677A 3031 3233 3435 3637 3839+  	dc.b	$30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $3A, $3B, $3C
00016787 3D3E 3F3F 4041 4243 4445+  	dc.b	$3D, $3E, $3F, $3F, $40, $41, $42, $43, $44, $45, $46, $47, $48
00016794 494A 4B4C 4D4E 4F4F 5051+  	dc.b	$49, $4A, $4B, $4C, $4D, $4E, $4F, $4F, $50, $51, $52, $53, $54
000167A1 5556 5758 595A 5B5C 5D5E+  	dc.b	$55, $56, $57, $58, $59, $5A, $5B, $5C, $5D, $5E, $5F, $5F, $60
000167AE 6162 6364 65               	dc.b	$61, $62, $63, $64, $65
000167B3                            ; ===========================================================================
000167B4 00                         	even
000167B4                            ; ---------------------------------------------------------------------------
000167B4                            ; Object 41 - springs
000167B4                            ; ---------------------------------------------------------------------------
000167B4                            
000167B4                            ;===============================================================================
000167B4                            ; Obj41 - Springs - diagonal (no diagonal spring art atm) / horizontal / vertical 
000167B4                            ; [ Start ]
000167B4                            ;===============================================================================
000167B4                            Obj41:
000167B4 7000                                       moveq   #$00, D0
000167B6 1028 0024                                  move.b  routine(A0), D0
000167BA 323B 0000                                  move.w  Obj41_Index(PC, D0), D1
000167BE 4EBB 1000                                  jsr     Obj41_Index(PC, D1)
000167C2 4EF9 0000 0000                             jmp     (MarkObjGone)                          ; Offset_0x016358
000167C8                            Obj41_Index:
000167C8 0000                                       dc.w    Obj41_Init-Obj41_Index
000167CA 0000                                       dc.w    Obj41_Up-Obj41_Index
000167CC 0000                                       dc.w    Obj41_Horizontal-Obj41_Index
000167CE 0000                                       dc.w    Obj41_Down-Obj41_Index
000167D0 0000                                       dc.w    Obj41_DiagonallyUp-Obj41_Index
000167D2 0000                                       dc.w    Obj41_DiagonallyDown-Obj41_Index
000167D4                            Obj41_Init:
000167D4 5428 0024                                  addq.b  #$02, routine(A0)
000167D8 217C 0000 0000 0004                        move.l  #Map_obj41, $0004(A0)           ; Offset_0x018F8C
000167E0 317C 0523 0002                             move.w  #$523, $0002(A0)
000167E6 0028 0004 0001                             ori.b   #$04, $0001(A0)
000167EC 117C 0010 0023                             move.b  #$10,width_pixels(a0)
000167F2 317C 0200 0018                             move.w	#$200,priority(a0)
000167F8 1028 0028                                  move.b  $0028(A0), D0
000167FC E648                                       lsr.w   #$03, D0
000167FE 0240 000E                                  andi.w  #$000E, D0
00016802 303B 0000                                  move.w  Obj41_Init_Subtypes(PC, D0), D0
00016806 4EFB 0000                                  jmp     Obj41_Init_Subtypes(PC, D0)
0001680A                            Obj41_Init_Subtypes:
0001680A 0000                                       dc.w    Obj41_Init_Up-Obj41_Init_Subtypes
0001680C 0000                                       dc.w    Obj41_Init_Horizontal-Obj41_Init_Subtypes
0001680E 0000                                       dc.w    Obj41_Init_Down-Obj41_Init_Subtypes
00016810 0000                                       dc.w    Obj41_Init_DiagonallyUp-Obj41_Init_Subtypes
00016812 0000                                       dc.w    Obj41_Init_DiagonallyDown-Obj41_Init_Subtypes
00016814                            Obj41_Init_Horizontal:
00016814 117C 0004 0024             				move.b	#4,$24(a0)	; use "Obj41_LR" routine
0001681A 117C 0002 001C             				move.b	#2,$1C(a0)
00016820 117C 0003 001A             				move.b	#3,$1A(a0)
00016826 317C 0533 0002             				move.w	#$533,2(a0)
0001682C 117C 0008 0023             				move.b	#8,width_pixels(a0)
00016832 6000                                       bra.s   Obj41_Init_Up
00016834                            Obj41_Init_Down:
00016834 117C 0006 0024                             move.b  #$06, routine(A0)
0001683A 117C 0006 001A                             move.b  #$06, $001A(A0)
00016840 08E8 0001 0022                             bset    #$01, status(A0)
00016846 6000                                       bra.s   Obj41_Init_Up
00016848                            Obj41_Init_DiagonallyUp:
00016848 117C 0008 0024                             move.b  #$08, routine(A0)
0001684E 117C 0004 001C                             move.b  #$04, $001C(A0)
00016854 117C 0007 001A                             move.b  #$07, $001A(A0)
0001685A 317C 043C 0002                             move.w  #$043C, $0002(A0)
00016860 6000                                       bra.s   Obj41_Init_Up
00016862                            Obj41_Init_DiagonallyDown:
00016862 117C 000A 0024                             move.b  #$0A, routine(A0)
00016868 117C 0004 001C                             move.b  #$04, $001C(A0)
0001686E 117C 000A 001A                             move.b  #$0A, $001A(A0)
00016874 317C 043C 0002                             move.w  #$043C, $0002(A0)
0001687A 08E8 0001 0022                             bset    #$01, status(A0)
00016880                            Obj41_Init_Up:
00016880 1028 0028                                  move.b  $0028(A0), D0
00016884 0240 000F                                  andi.w	#$F,d0
00016888 317B 0000 0030                             move.w  Obj41_Powers(PC, D0), $0030(A0)
0001688E 0800 0001                                  btst    #$01, D0
00016892 6700                                       beq.s   Offset_0x0188E4
00016894 08E8 0005 0002                             bset    #$05, $0002(A0)
0001689A 217C 0000 0000 0004                        move.l  #Springs_Mappings_01, $0004(A0)        ; Offset_0x018FA2
000168A2                            Offset_0x0188E4:
000168A2                            ;                bsr     ModifySpriteAttr_2P                    ; Offset_0x016CFA
000168A2 4E75                                       rts
000168A4                            ;-------------------------------------------------------------------------------                  
000168A4 F000                       Obj41_Powers:		dc.w -$1000		; power	of red spring
000168A6 F600                       		dc.w -$A00		; power	of yellow spring
000168A8                            ;-------------------------------------------------------------------------------                  
000168A8                            Obj41_Up:
000168A8 323C 001B                                  move.w  #$001B, D1
000168AC 343C 0008                                  move.w  #$0008, D2
000168B0 363C 0010                                  move.w  #$0010, D3
000168B4 3828 0008                                  move.w  $0008(A0), D4
000168B8                            ;                lea     ($FFFFB000).w, A1
000168B8                             ;               moveq   #$03, D6
000168B8                              ;              movem.l D1-D4, -(A7)
000168B8                               ;             bsr     SolidObjectNew                       ; Offset_0x0196FC
000168B8                                ;            btst    #$03, status(A0)
000168B8                                 ;           beq.s   Offset_0x018916
000168B8                                  ;          bsr.s   Offset_0x018938
000168B8                            ;Offset_0x018916:
000168B8                            ;                movem.l (A7)+, D1-D4
000168B8                             ;               lea     ($FFFFB040).w, A1
000168B8                              ;              moveq   #$04, D6
000168B8 6100 0000                                  bsr     SolidObjectNew                       ; Offset_0x0196FC
000168BC 0828 0003 0022                             btst    #$03, status(A0)		; changed to $03 was $04
000168C2 6700                                       beq.s   Offset_0x01892E
000168C4 6100                                       bsr.s   Offset_0x018938
000168C6                            Offset_0x01892E:
000168C6 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
000168CC 6000 BD56                                  bra     AnimateSprite                          ; Offset_0x0164CA
000168D0                            Offset_0x018938:
000168D0 317C 0100 001C                             move.w  #$0100, $001C(A0)
000168D6 5069 000C                                  addq.w  #$08, $000C(A1)
000168DA 3368 0030 0012                             move.w  $0030(A0), $0012(A1)
000168E0 08E9 0001 0022                             bset    #$01, status(A1)
000168E6 08A9 0003 0022                             bclr    #$03, status(A1)
000168EC 137C 0010 001C                             move.b  #$10, $001C(A1)
000168F2 137C 0002 0024                             move.b  #$02, routine(A1)
000168F8 1028 0028                                  move.b  $0028(A0), D0
000168FC 6A00                                       bpl.s   Offset_0x01896C
000168FE 337C 0000 0010                             move.w  #$0000, $0010(A1)
00016904                            Offset_0x01896C:
00016904 0800 0000                                  btst    #$00, D0
00016908 6700                                       beq.s   Offset_0x0189AC
0001690A 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016910 137C 0001 0027                             move.b  #$01, $0027(A1)
00016916 137C 0000 001C                             move.b  #$00, $001C(A1)
0001691C 137C 0000 002C                             move.b  #$00, $002C(A1)
00016922 137C 0004 002D                             move.b  #$04, $002D(A1)
00016928 0800 0001                                  btst    #$01, D0
0001692C 6600                                       bne.s   Offset_0x01899C
0001692E 137C 0001 002C                             move.b  #$01, $002C(A1)
00016934                            Offset_0x01899C:
00016934 0829 0000 0022                             btst    #$00, status(A1)
0001693A 6700                                       beq.s   Offset_0x0189AC
0001693C 4429 0027                                  neg.b   $0027(A1)
00016940 4469 0020                                  neg.w   inertia(a1)
00016944                            Offset_0x0189AC:
00016944 0200 000C                                  andi.b  #$0C, D0
00016948 0C00 0004                                  cmpi.b  #$04, D0
0001694C 6600                                       bne.s   Offset_0x0189C2
0001694E 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016954 137C 000D 003F                             move.b  #$0D, $003F(A1)
0001695A                            Offset_0x0189C2:
0001695A 0C00 0008                                  cmpi.b  #$08, D0
0001695E 6600                                       bne.s   Offset_0x0189D4
00016960 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016966 137C 000F 003F                             move.b  #$0F, $003F(A1)
0001696C                            Offset_0x0189D4:
0001696C 303C 00B1                  				move.w	#$B1,d0
00016970 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016976 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
0001697C                            Obj41_Horizontal:
0001697C 323C 0013                                  move.w  #$0013, D1
00016980 343C 000E                                  move.w  #$000E, D2
00016984 363C 000F                                  move.w  #$000F, D3
00016988 3828 0008                                  move.w  $0008(A0), D4
0001698C                                            ;lea     ($FFFFB000).w, A1
0001698C                                            ;moveq   #$03, D6
0001698C                                            ;movem.l D1-D4, -(A7)
0001698C                                            ;bsr     SolidObject                       ; Offset_0x0196FC
0001698C                                            ;btst    #$05, status(A0)
0001698C                                            ;beq.s   Offset_0x018A1E
0001698C                                            ;move.b  status(A0), D1
0001698C                                            ;move.w  $0008(A0), D0
0001698C                                            ;sub.w   $0008(A1), D0
0001698C                                            ;bcs.s   Offset_0x018A16
0001698C                                            ;eori.b  #$01, D1
0001698C                            ;Offset_0x018A16:
0001698C                            ;                andi.b  #$01, D1
0001698C                            ;                bne.s   Offset_0x018A1E
0001698C                            ;                bsr.s   Offset_0x018A5C
0001698C                            ;Offset_0x018A1E:
0001698C                            ;                movem.l (A7)+, D1-D4
0001698C                            ;                lea     ($FFFFB040).w, A1
0001698C                            ;                moveq   #$04, D6
0001698C 6100 0000                                  bsr     SolidObject                       ; Offset_0x0196FC
00016990 4846                       				swap	d6
00016992 0246 0001                  				andi.w	#1,d6
00016996 6700                                       beq.s   Offset_0x018A4E
00016998 1228 0022                                  move.b  status(A0), D1
0001699C 3028 0008                                  move.w  $0008(A0), D0
000169A0 9069 0008                                  sub.w   $0008(A1), D0
000169A4 6500                                       bcs.s   Offset_0x018A46
000169A6 0A01 0001                                  eori.b  #$01, D1
000169AA                            Offset_0x018A46:
000169AA 0201 0001                                  andi.b  #$01, D1
000169AE 6600                                       bne.s   Offset_0x018A4E
000169B0 6100                                       bsr.s   Offset_0x018A5C
000169B2                            Offset_0x018A4E:
000169B2 6100 0000                                  bsr     Offset_0x018B34
000169B6 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
000169BC 6000 BC66                                  bra     AnimateSprite                          ; Offset_0x0164CA
000169C0                            Offset_0x018A5C:
000169C0 317C 0300 001C                             move.w  #$0300, $001C(A0)
000169C6 3368 0030 0010                             move.w  $0030(A0), $0010(A1)
000169CC 5069 0008                                  addq.w  #$08, $0008(A1)
000169D0 08E9 0000 0022                             bset    #$00, status(A1)
000169D6 0828 0000 0022                             btst    #$00, status(A0)
000169DC 6600                                       bne.s   Offset_0x018A8A
000169DE 08A9 0000 0022                             bclr    #$00, status(A1)
000169E4 0469 0010 0008                             subi.w  #$0010, $0008(A1)
000169EA 4469 0010                                  neg.w   $0010(A1)
000169EE                            Offset_0x018A8A:
000169EE 337C 000F 003E                             move.w  #$000F, $003E(A1)
000169F4 3369 0010 0020                             move.w  $0010(A1), inertia(a1)
000169FA 0829 0002 0022                             btst    #$02, status(A1)
00016A00 6600                                       bne.s   Offset_0x018AA4
00016A02 137C 0000 001C                             move.b  #$00, $001C(A1)
00016A08                            Offset_0x018AA4:
00016A08 1028 0028                                  move.b  $0028(A0), D0
00016A0C 6A00                                       bpl.s   Offset_0x018AB0
00016A0E 337C 0000 0012                             move.w  #$0000, $0012(A1)
00016A14                            Offset_0x018AB0:
00016A14 0800 0000                                  btst    #$00, D0
00016A18 6700                                       beq.s   Offset_0x018AF0
00016A1A 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016A20 137C 0001 0027                             move.b  #$01, $0027(A1)
00016A26 137C 0000 001C                             move.b  #$00, $001C(A1)
00016A2C 137C 0001 002C                             move.b  #$01, $002C(A1)
00016A32 137C 0008 002D                             move.b  #$08, $002D(A1)
00016A38 0800 0001                                  btst    #$01, D0
00016A3C 6600                                       bne.s   Offset_0x018AE0
00016A3E 137C 0003 002C                             move.b  #$03, $002C(A1)
00016A44                            Offset_0x018AE0:
00016A44 0829 0000 0022                             btst    #$00, status(A1)
00016A4A 6700                                       beq.s   Offset_0x018AF0
00016A4C 4429 0027                                  neg.b   $0027(A1)
00016A50 4469 0020                                  neg.w   inertia(a1)
00016A54                            Offset_0x018AF0:
00016A54 0200 000C                                  andi.b  #$0C, D0
00016A58 0C00 0004                                  cmpi.b  #$04, D0
00016A5C 6600                                       bne.s   Offset_0x018B06
00016A5E 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016A64 137C 000D 003F                             move.b  #$0D, $003F(A1)
00016A6A                            Offset_0x018B06:
00016A6A 0C00 0008                                  cmpi.b  #$08, D0
00016A6E 6600                                       bne.s   Offset_0x018B18
00016A70 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016A76 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016A7C                            Offset_0x018B18:
00016A7C 08A8 0005 0022                             bclr    #$05, status(A0)
00016A82 08A8 0006 0022                             bclr    #$06, status(A0)
00016A88 08A9 0005 0022                             bclr    #$05, status(A1)
00016A8E 303C 00B1                  				move.w	#$B1,d0
00016A92 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016A98 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016A9E                            Offset_0x018B34:
00016A9E 0C28 0003 001C                             cmpi.b  #$03, $001C(A0)
00016AA4 6700 0000                                  beq     Offset_0x018BEC
00016AA8 3028 0008                                  move.w  $0008(A0), D0
00016AAC 3200                                       move.w  D0, D1
00016AAE 0641 0028                                  addi.w  #$0028, D1
00016AB2 0828 0000 0022                             btst    #$00, status(A0)
00016AB8 6700                                       beq.s   Offset_0x018B56
00016ABA 3200                                       move.w  D0, D1
00016ABC 0440 0028                                  subi.w  #$0028, D0
00016AC0                            Offset_0x018B56:
00016AC0 3428 000C                                  move.w  $000C(A0), D2
00016AC4 3602                                       move.w  D2, D3
00016AC6 0442 0018                                  subi.w  #$0018, D2
00016ACA 0643 0018                                  addi.w  #$0018, D3
00016ACE 43F8 D000                                  lea     ($FFFFD000).w, A1
00016AD2 0829 0001 0022                             btst    #$01, status(A1)
00016AD8 6600                                       bne.s   Offset_0x018BAA
00016ADA 3829 0020                                  move.w  inertia(a1), D4
00016ADE 0828 0000 0022                             btst    #$00, status(A0)
00016AE4 6700                                       beq.s   Offset_0x018B7E
00016AE6 4444                                       neg.w   D4
00016AE8                            Offset_0x018B7E:
00016AE8 4A44                                       tst.w   D4
00016AEA 6B00                                       bmi.s   Offset_0x018BAA
00016AEC 3829 0008                                  move.w  $0008(A1), D4
00016AF0 B840                                       cmp.w   D0, D4
00016AF2 6500 0000                                  bcs     Offset_0x018BAA
00016AF6 B841                                       cmp.w   D1, D4
00016AF8 6400 0000                                  bcc     Offset_0x018BAA
00016AFC 3829 000C                                  move.w  $000C(A1), D4
00016B00 B842                                       cmp.w   D2, D4
00016B02 6500 0000                                  bcs     Offset_0x018BAA
00016B06 B843                                       cmp.w   D3, D4
00016B08 6400 0000                                  bcc     Offset_0x018BAA
00016B0C 3F00                                       move.w  D0, -(A7)
00016B0E 6100 FEB0                                  bsr     Offset_0x018A5C
00016B12 301F                                       move.w  (A7)+, D0
00016B14                            Offset_0x018BAA:
00016B14                            ;                lea     ($FFFFB040).w, A1
00016B14                             ;               btst    #$01, status(A1)
00016B14                              ;              bne.s   Offset_0x018BEC
00016B14                               ;             move.w  inertia(a1), D4
00016B14                                ;            btst    #$00, status(A0)
00016B14                                 ;           beq.s   Offset_0x018BC4
00016B14                                  ;          neg.w   D4
00016B14                            ;Offset_0x018BC4:
00016B14                             ;               tst.w   D4
00016B14                              ;              bmi.s   Offset_0x018BEC
00016B14                               ;             move.w  $0008(A1), D4
00016B14                                ;            cmp.w   D0, D4
00016B14                                 ;           bcs     Offset_0x018BEC
00016B14                                  ;          cmp.w   D1, D4
00016B14                                   ;         bcc     Offset_0x018BEC
00016B14                                    ;        move.w  $000C(A1), D4
00016B14                                     ;       cmp.w   D2, D4
00016B14                                      ;      bcs     Offset_0x018BEC
00016B14                                       ;     cmp.w   D3, D4
00016B14                                        ;    bcc     Offset_0x018BEC
00016B14                                        ;    bsr     Offset_0x018A5C
00016B14                            Offset_0x018BEC:
00016B14 4E75                                       rts
00016B16                            Obj41_Down:
00016B16 323C 001B                                  move.w  #$001B, D1
00016B1A 343C 0008                                  move.w  #$0008, D2
00016B1E 363C 0010                                  move.w  #$0010, D3
00016B22 3828 0008                                  move.w  $0008(A0), D4
00016B26                            ;                lea     ($FFFFB000).w, A1
00016B26                             ;               moveq   #$03, D6
00016B26                              ;              movem.l D1-D4, -(A7)
00016B26 6100 0000                                  bsr     SolidObject                       ; Offset_0x0196FC
00016B2A                               ;             cmpi.w  #$FFFE, D4
00016B2A                                ;            bne.s   Offset_0x018C14
00016B2A                                 ;           bsr.s   Offset_0x018C34
00016B2A                            ;Offset_0x018C14:
00016B2A                             ;               movem.l (A7)+, D1-D4
00016B2A                              ;              lea     ($FFFFB040).w, A1
00016B2A                               ;             moveq   #$03, D6	; changed to $03 was $04
00016B2A                               ;             bsr     SolidObject                       ; Offset_0x0196FC
00016B2A 4A28 0025                  				tst.b	$25(a0)
00016B2E 66E4                       				bne.s	Offset_0x018BEC
00016B30 4A44                       				tst.w	d4
00016B32 6C00                       				bge.s	Offset_0x018C2A
00016B34 6100                                       bsr.s   Offset_0x018C34
00016B36                            Offset_0x018C2A:
00016B36 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
00016B3C 6000 BAE6                                  bra     AnimateSprite                          ; Offset_0x0164CA
00016B40                            Offset_0x018C34:
00016B40 317C 0100 001C                             move.w  #$0100, $001C(A0)
00016B46 5169 000C                                  subq.w  #$08, $000C(A1)
00016B4A 3368 0030 0012                             move.w  $0030(A0), $0012(A1)
00016B50 4469 0012                                  neg.w   $0012(A1)
00016B54 1028 0028                                  move.b  $0028(A0), D0
00016B58 6A00                                       bpl.s   Offset_0x018C54
00016B5A 337C 0000 0010                             move.w  #$0000, $0010(A1)
00016B60                            Offset_0x018C54:
00016B60 0800 0000                                  btst    #$00, D0
00016B64 6700                                       beq.s   Offset_0x018C94
00016B66 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016B6C 137C 0001 0027                             move.b  #$01, $0027(A1)
00016B72 137C 0000 001C                             move.b  #$00, $001C(A1)
00016B78 137C 0000 002C                             move.b  #$00, $002C(A1)
00016B7E 137C 0004 002D                             move.b  #$04, $002D(A1)
00016B84 0800 0001                                  btst    #$01, D0
00016B88 6600                                       bne.s   Offset_0x018C84
00016B8A 137C 0001 002C                             move.b  #$01, $002C(A1)
00016B90                            Offset_0x018C84:
00016B90 0829 0000 0022                             btst    #$00, status(A1)
00016B96 6700                                       beq.s   Offset_0x018C94
00016B98 4429 0027                                  neg.b   $0027(A1)
00016B9C 4469 0020                                  neg.w   inertia(a1)
00016BA0                            Offset_0x018C94:
00016BA0 0200 000C                                  andi.b  #$0C, D0
00016BA4 0C00 0004                                  cmpi.b  #$04, D0
00016BA8 6600                                       bne.s   Offset_0x018CAA
00016BAA 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016BB0 137C 000D 003F                             move.b  #$0D, $003F(A1)
00016BB6                            Offset_0x018CAA:
00016BB6 0C00 0008                                  cmpi.b  #$08, D0
00016BBA 6600                                       bne.s   Offset_0x018CBC
00016BBC 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016BC2 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016BC8                            Offset_0x018CBC:
00016BC8 08E9 0001 0022                             bset    #$01, status(A1)
00016BCE 08A9 0003 0022                             bclr    #$03, status(A1)
00016BD4 137C 0002 0024                             move.b  #$02, routine(A1)
00016BDA 303C 00B1                  				move.w	#$B1,d0
00016BDE 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016BE4 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016BEA                            Obj41_DiagonallyUp:
00016BEA 323C 001B                                  move.w  #$001B, D1
00016BEE 343C 0010                                  move.w  #$0010, D2
00016BF2 3828 0008                                  move.w  $0008(A0), D4
00016BF6 45FA 0000                                  lea     Offset_0x018F18(PC), A2
00016BFA                            ;                lea     ($FFFFB000).w, A1
00016BFA                             ;               moveq   #$03, D6
00016BFA                              ;              movem.l D1-D4, -(A7)
00016BFA                               ;             bsr     SolidObject                       ; Offset_0x019754
00016BFA                                ;            btst    #$03, status(A0)
00016BFA                                 ;           beq.s   Offset_0x018D00
00016BFA                                  ;          bsr.s   Offset_0x018D22
00016BFA                            ;Offset_0x018D00:
00016BFA                             ;               movem.l (A7)+, D1-D4
00016BFA                              ;              lea     ($FFFFB040).w, A1
00016BFA                               ;             moveq   #$04, D6
00016BFA 6100 0000                                  bsr     SolidObject                       ; Offset_0x019754
00016BFE 0828 0003 0022                             btst    #$03, status(A0) ; changed to $03 was $04
00016C04 6700                                       beq.s   Offset_0x018D18
00016C06 6100                                       bsr.s   Offset_0x018D22
00016C08                            Offset_0x018D18:
00016C08 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
00016C0E 6000 BA14                                  bra     AnimateSprite                          ; Offset_0x0164CA
00016C12                            Offset_0x018D22:
00016C12 0828 0000 0022                             btst    #$00, status(A0)
00016C18 6600                                       bne.s   Offset_0x018D38
00016C1A 3028 0008                                  move.w  $0008(A0), D0
00016C1E 5940                                       subq.w  #$04, D0
00016C20 B069 0008                                  cmp.w   $0008(A1), D0
00016C24 6500                                       bcs.s   Offset_0x018D46
00016C26 4E75                                       rts
00016C28                            Offset_0x018D38:
00016C28 3028 0008                                  move.w  $0008(A0), D0
00016C2C 5840                                       addq.w  #$04, D0
00016C2E B069 0008                                  cmp.w   $0008(A1), D0
00016C32 6400                                       bcc.s   Offset_0x018D46
00016C34 4E75                                       rts
00016C36                            Offset_0x018D46:
00016C36 317C 0500 001C                             move.w  #$0500, $001C(A0)
00016C3C 3368 0030 0012                             move.w  $0030(A0), $0012(A1)
00016C42 3368 0030 0010                             move.w  $0030(A0), $0010(A1)
00016C48 5C69 000C                                  addq.w  #$06, $000C(A1)
00016C4C 5C69 0008                                  addq.w  #$06, $0008(A1)
00016C50 08E9 0000 0022                             bset    #$00, status(A1)
00016C56 0828 0000 0022                             btst    #$00, status(A0)
00016C5C 6600                                       bne.s   Offset_0x018D7E
00016C5E 08A9 0000 0022                             bclr    #$00, status(A1)
00016C64 0469 000C 0008                             subi.w  #$000C, $0008(A1)
00016C6A 4469 0010                                  neg.w   $0010(A1)
00016C6E                            Offset_0x018D7E:
00016C6E 08E9 0001 0022                             bset    #$01, status(A1)
00016C74 08A9 0003 0022                             bclr    #$03, status(A1)
00016C7A 137C 0010 001C                             move.b  #$10, $001C(A1)
00016C80 137C 0002 0024                             move.b  #$02, routine(A1)
00016C86 1028 0028                                  move.b  $0028(A0), D0
00016C8A 0800 0000                                  btst    #$00, D0
00016C8E 6700                                       beq.s   Offset_0x018DDA
00016C90 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016C96 137C 0001 0027                             move.b  #$01, $0027(A1)
00016C9C 137C 0000 001C                             move.b  #$00, $001C(A1)
00016CA2 137C 0001 002C                             move.b  #$01, $002C(A1)
00016CA8 137C 0008 002D                             move.b  #$08, $002D(A1)
00016CAE 0800 0001                                  btst    #$01, D0
00016CB2 6600                                       bne.s   Offset_0x018DCA
00016CB4 137C 0003 002C                             move.b  #$03, $002C(A1)
00016CBA                            Offset_0x018DCA:
00016CBA 0829 0000 0022                             btst    #$00, status(A1)
00016CC0 6700                                       beq.s   Offset_0x018DDA
00016CC2 4429 0027                                  neg.b   $0027(A1)
00016CC6 4469 0020                                  neg.w   inertia(a1)
00016CCA                            Offset_0x018DDA:
00016CCA 0200 000C                                  andi.b  #$0C, D0
00016CCE 0C00 0004                                  cmpi.b  #$04, D0
00016CD2 6600                                       bne.s   Offset_0x018DF0
00016CD4 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016CDA 137C 000D 003F                             move.b  #$0D, $003F(A1)
00016CE0                            Offset_0x018DF0:
00016CE0 0C00 0008                                  cmpi.b  #$08, D0
00016CE4 6600                                       bne.s   Offset_0x018E02
00016CE6 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016CEC 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016CF2                            Offset_0x018E02:
00016CF2 303C 00B1                  				move.w	#$B1,d0
00016CF6 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016CFC 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016D02                            Obj41_DiagonallyDown:
00016D02 323C 001B                                  move.w  #$001B, D1
00016D06 343C 0010                                  move.w  #$0010, D2
00016D0A 3828 0008                                  move.w  $0008(A0), D4
00016D0E 45FA 0000                                  lea     Offset_0x018F34(PC), A2
00016D12                             ;               lea     ($FFFFB000).w, A1
00016D12                              ;              moveq   #$03, D6
00016D12                               ;             movem.l D1-D4, -(A7)
00016D12                            ;                bsr     SolidObject                       ; Offset_0x019754
00016D12                             ;               cmpi.w  #$FFFE, D4
00016D12                              ;              bne.s   Offset_0x018E32
00016D12                               ;             bsr.s   Offset_0x018E54
00016D12                            ;Offset_0x018E32:
00016D12                             ;               movem.l (A7)+, D1-D4
00016D12                              ;              lea     ($FFFFB040).w, A1
00016D12                               ;             moveq   #$04, D6
00016D12 6100 0000                                  bsr     SolidObject                       ; Offset_0x019754
00016D16 4A28 0025                  				tst.b	$25(a0)
00016D1A 6600                       				bne.s	Jmpto_Offset_0x018BEC
00016D1C 4A44                                       tst.w	 D4
00016D1E 6C00                                       bge.s   Offset_0x018E48
00016D20 6100                                       bsr.s   Offset_0x018E54
00016D22                            Offset_0x018E48:
00016D22 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
00016D28 6000 B8FA                                  bra     AnimateSprite                          ; Offset_0x0164CA
00016D2C 4E75                                       rts
00016D2E                            Jmpto_Offset_0x018BEC:
00016D2E 4EFA FDE4                  				jmp	Offset_0x018BEC	
00016D32                            Offset_0x018E54:
00016D32 317C 0500 001C                             move.w  #$0500, $001C(A0)
00016D38 3368 0030 0012                             move.w  $0030(A0), $0012(A1)
00016D3E 4469 0012                                  neg.w   $0012(A1)
00016D42 3368 0030 0010                             move.w  $0030(A0), $0010(A1)
00016D48 5D69 000C                                  subq.w  #$06, $000C(A1)
00016D4C 5C69 0008                                  addq.w  #$06, $0008(A1)
00016D50 08E9 0000 0022                             bset    #$00, status(A1)
00016D56 0828 0000 0022                             btst    #$00, status(A0)
00016D5C 6600                                       bne.s   Offset_0x018E90
00016D5E 08A9 0000 0022                             bclr    #$00, status(A1)
00016D64 0469 000C 0008                             subi.w  #$000C, $0008(A1)
00016D6A 4469 0010                                  neg.w   $0010(A1)
00016D6E                            Offset_0x018E90:
00016D6E 08E9 0001 0022                             bset    #$01, status(A1)
00016D74 08A9 0003 0022                             bclr    #$03, status(A1)
00016D7A 137C 0002 0024                             move.b  #$02, routine(A1)
00016D80 1028 0028                                  move.b  $0028(A0), D0
00016D84 0800 0000                                  btst    #$00, D0
00016D88 6700                                       beq.s   Offset_0x018EE6
00016D8A 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016D90 137C 0001 0027                             move.b  #$01, $0027(A1)
00016D96 137C 0000 001C                             move.b  #$00, $001C(A1)
00016D9C 137C 0001 002C                             move.b  #$01, $002C(A1)
00016DA2 137C 0008 002D                             move.b  #$08, $002D(A1)
00016DA8 0800 0001                                  btst    #$01, D0
00016DAC 6600                                       bne.s   Offset_0x018ED6
00016DAE 137C 0003 002C                             move.b  #$03, $002C(A1)
00016DB4                            Offset_0x018ED6:
00016DB4 0829 0000 0022                             btst    #$00, status(A1)
00016DBA 6700                                       beq.s   Offset_0x018EE6
00016DBC 4429 0027                                  neg.b   $0027(A1)
00016DC0 4469 0020                                  neg.w   inertia(a1)
00016DC4                            Offset_0x018EE6:
00016DC4 0200 000C                                  andi.b  #$0C, D0
00016DC8 0C00 0004                                  cmpi.b  #$04, D0
00016DCC 6600                                       bne.s   Offset_0x018EFC
00016DCE 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016DD4 137C 000D 003F                             move.b  #$0D, $003F(A1)
00016DDA                            Offset_0x018EFC:
00016DDA 0C00 0008                                  cmpi.b  #$08, D0
00016DDE 6600                                       bne.s   Offset_0x018F0E
00016DE0 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016DE6 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016DEC                            Offset_0x018F0E:
00016DEC 303C 00B1                  				move.w	#$B1,d0
00016DF0 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016DF6 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016DFC                            ;-------------------------------------------------------------------------------                   
00016DFC                            Offset_0x018F18:
00016DFC 1010 1010 1010 1010 1010+                  dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $0E, $0C, $0A, $08
00016E0C 0604 0200 FEFC FCFC FCFC+                  dc.b    $06, $04, $02, $00, $FE, $FC, $FC, $FC, $FC, $FC, $FC, $FC
00016E18                            ;-------------------------------------------------------------------------------                
00016E18                            Offset_0x018F34:
00016E18 F4F0 F0F0 F0F0 F0F0 F0F0+                  dc.b    $F4, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F2, $F4, $F6, $F8
00016E28 FAFC FE00 0204 0404 0404+                  dc.b    $FA, $FC, $FE, $00, $02, $04, $04, $04, $04, $04, $04, $04
00016E34                            ;-------------------------------------------------------------------------------
00016E34                            Springs_Animate_Data: ; Offset_0x018F50:
00016E34 0000                                       dc.w    Offset_0x018F5C-Springs_Animate_Data
00016E36 0000                                       dc.w    Offset_0x018F60-Springs_Animate_Data
00016E38 0000                                       dc.w    Offset_0x018F6C-Springs_Animate_Data
00016E3A 0000                                       dc.w    Offset_0x018F70-Springs_Animate_Data
00016E3C 0000                                       dc.w    Offset_0x018F7C-Springs_Animate_Data
00016E3E 0000                                       dc.w    Offset_0x018F80-Springs_Animate_Data
00016E40                            Offset_0x018F5C:
00016E40 0F00 FF00                                  dc.b    $0F, $00, $FF, $00
00016E44                            Offset_0x018F60:
00016E44 0001 0000 0202 0202 0202+                  dc.b    $00, $01, $00, $00, $02, $02, $02, $02, $02, $02, $FD, $00
00016E50                            Offset_0x018F6C:
00016E50 0F03 FF00                                  dc.b    $0F, $03, $FF, $00
00016E54                            Offset_0x018F70:
00016E54 0004 0303 0505 0505 0505+                  dc.b    $00, $04, $03, $03, $05, $05, $05, $05, $05, $05, $FD, $02
00016E60                            Offset_0x018F7C:
00016E60 0F07 FF00                                  dc.b    $0F, $07, $FF, $00
00016E64                            Offset_0x018F80:
00016E64 0008 0707 0909 0909 0909+                  dc.b    $00, $08, $07, $07, $09, $09, $09, $09, $09, $09, $FD, $04
00016E70                            ;-------------------------------------------------------------------------------
00016E70                            Springs_Mappings_01:
00016E70                            	include "_maps/obj41_s2_2nd.asm"
00016E70                            ; --------------------------------------------------------------------------------
00016E70                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00016E70                            ; --------------------------------------------------------------------------------
00016E70                            
00016E70                            SME_Eabw0:	
00016E70 0000 0000                  		dc.w SME_Eabw0_16-SME_Eabw0, SME_Eabw0_21-SME_Eabw0	
00016E74 0000 0000                  		dc.w SME_Eabw0_27-SME_Eabw0, SME_Eabw0_32-SME_Eabw0	
00016E78 0000 0000                  		dc.w SME_Eabw0_3D-SME_Eabw0, SME_Eabw0_43-SME_Eabw0	
00016E7C 0000 0000                  		dc.w SME_Eabw0_4E-SME_Eabw0, SME_Eabw0_59-SME_Eabw0	
00016E80 0000 0000                  		dc.w SME_Eabw0_6E-SME_Eabw0, SME_Eabw0_7E-SME_Eabw0	
00016E84 0000                       		dc.w SME_Eabw0_93-SME_Eabw0	
00016E86 02                         SME_Eabw0_16:	dc.b 2	
00016E87 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
00016E8C 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0		
00016E91 01                         SME_Eabw0_21:	dc.b 1
00016E92 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0	
00016E97 03                         SME_Eabw0_27:	dc.b 3
00016E98 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
00016E9D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00016EA2 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0	
00016EA7 01                         SME_Eabw0_32:	dc.b 1
00016EA8 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8	
00016EAD 01                         SME_Eabw0_3D:	dc.b 1	
00016EAE F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8	
00016EB3 04                         SME_Eabw0_43:	dc.b 4
00016EB4 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
00016EB9 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
00016EBE F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
00016EC3 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8	
00016EC8 02                         SME_Eabw0_4E:	dc.b 2	
00016EC9 000C 1000 F0               		dc.b 0, $C, $10, 0, $F0	
00016ECE F80C 1004 F0               		dc.b $F8,	$C, $10, 4, $F0	
00016ED3 04                         SME_Eabw0_59:	dc.b 4	
00016ED4 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
00016ED9 0005 0008 00               		dc.b 0, 5, 0, 8, 0	
00016EDE FB05 000C F6               		dc.b $FB, 5, 0, $C, $F6	
00016EE3 0005 001C F0               		dc.b 0, 5, 0, $1C, $F0	
00016EE8 03                         SME_Eabw0_6E:	dc.b 3	
00016EE9 F60D 0000 EA               		dc.b $F6, $D, 0, 0, $EA	
00016EEE 0605 0008 FA               		dc.b 6, 5, 0, 8, $FA	
00016EF3 0005 001C F0               		dc.b 0, 5, 0, $1C, $F0	
00016EF8 04                         SME_Eabw0_7E:	dc.b 4	
00016EF9 E60D 0000 FB               		dc.b $E6, $D, 0, 0, $FB	
00016EFE F605 0008 0B               		dc.b $F6, 5, 0, 8, $B	
00016F03 F30B 0010 F6               		dc.b $F3, $B, 0, $10, $F6	
00016F08 0005 001C F0               		dc.b 0, 5, 0, $1C, $F0	
00016F0D 04                         SME_Eabw0_93:	dc.b 4	
00016F0E 000D 1000 F0               		dc.b 0, $D, $10, 0, $F0	
00016F13 F005 1008 00               		dc.b $F0, 5, $10, 8, 0	
00016F18 F505 100C F6               		dc.b $F5, 5, $10, $C, $F6	
00016F1D F005 101C F0               		dc.b $F0, 5, $10, $1C, $F0	
00016F22                            		even
00016F22                            		even
00016F22                            	even
00016F22                            ;===============================================================================
00016F22                            ; Obj41 - Springs / vermelhas - diagonal / horizontal / vertical 
00016F22                            ; [ End ]
00016F22                            ;===============================================================================  
00016F22                            Ani_obj41:
00016F22                            	include "_anim\obj41.asm"
00016F22                            ; ---------------------------------------------------------------------------
00016F22                            ; Animation script - springs
00016F22                            ; ---------------------------------------------------------------------------
00016F22 0000                       		dc.w byte_DD02-Ani_obj41
00016F24 0000                       		dc.w byte_DD0E-Ani_obj41
00016F26 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
00016F32 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
00016F3E                            		even
00016F3E                            		even
00016F3E                            
00016F3E                            ; ---------------------------------------------------------------------------
00016F3E                            ; Sprite mappings - springs
00016F3E                            ; ---------------------------------------------------------------------------
00016F3E                            Map_obj41:
00016F3E                            	include "_maps\obj41_s2_1st.asm"
00016F3E                            ; --------------------------------------------------------------------------------
00016F3E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00016F3E                            ; --------------------------------------------------------------------------------
00016F3E                            
00016F3E                            SME_oYuJs:	
00016F3E 0000 0000                  		dc.w SME_oYuJs_16-SME_oYuJs, SME_oYuJs_21-SME_oYuJs	
00016F42 0000 0000                  		dc.w SME_oYuJs_27-SME_oYuJs, SME_oYuJs_32-SME_oYuJs	
00016F46 0000 0000                  		dc.w SME_oYuJs_3D-SME_oYuJs, SME_oYuJs_43-SME_oYuJs	
00016F4A 0000 0000                  		dc.w SME_oYuJs_4E-SME_oYuJs, SME_oYuJs_59-SME_oYuJs	
00016F4E 0000 0000                  		dc.w SME_oYuJs_6E-SME_oYuJs, SME_oYuJs_7E-SME_oYuJs	
00016F52 0000                       		dc.w SME_oYuJs_93-SME_oYuJs	
00016F54 02                         SME_oYuJs_16:	dc.b 2
00016F55 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
00016F5A 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0	
00016F5F 01                         SME_oYuJs_21:	dc.b 1
00016F60 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0	
00016F65 03                         SME_oYuJs_27:	dc.b 3
00016F66 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
00016F6B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00016F70 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0	
00016F75 01                         SME_oYuJs_32:	dc.b 1
00016F76 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8	
00016F7B 01                         SME_oYuJs_3D:	dc.b 1	
00016F7C F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
00016F81 04                         SME_oYuJs_43:	dc.b 4
00016F82 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
00016F87 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
00016F8C F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
00016F91 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8	
00016F96 02                         SME_oYuJs_4E:	dc.b 2	
00016F97 000C 1000 F0               		dc.b 0, $C, $10, 0, $F0	
00016F9C F80C 1004 F0               		dc.b $F8,	$C, $10, 4, $F0
00016FA1 04                         SME_oYuJs_59:	dc.b 4	
00016FA2 F00C 0000 F0               		dc.b $F0, $C, 0, 0, $F0	
00016FA7 0005 0008 00               		dc.b 0, 5, 0, 8, 0	
00016FAC FB05 000C F6               		dc.b $FB, 5, 0, $C, $F6	
00016FB1 0005 201C F0               		dc.b 0, 5, $20, $1C, $F0	
00016FB6 03                         SME_oYuJs_6E:	dc.b 3	
00016FB7 F60D 0000 EA               		dc.b $F6, $D, 0, 0, $EA	
00016FBC 0605 0008 FA               		dc.b 6, 5, 0, 8, $FA	
00016FC1 0005 201C F0               		dc.b 0, 5, $20, $1C, $F0	
00016FC6 04                         SME_oYuJs_7E:	dc.b 4	
00016FC7 E60D 0000 FB               		dc.b $E6, $D, 0, 0, $FB	
00016FCC F605 0008 0B               		dc.b $F6, 5, 0, 8, $B	
00016FD1 F30B 0010 F6               		dc.b $F3, $B, 0, $10, $F6	
00016FD6 0005 201C F0               		dc.b 0, 5, $20, $1C, $F0	
00016FDB 04                         SME_oYuJs_93:	dc.b 4	
00016FDC 000D 1000 F0               		dc.b 0, $D, $10, 0, $F0	
00016FE1 F005 1008 00               		dc.b $F0, 5, $10, 8, 0	
00016FE6 F505 100C F6               		dc.b $F5, 5, $10, $C, $F6	
00016FEB F005 301C F0               		dc.b $F0, 5, $30, $1C, $F0	
00016FF0                            		even
00016FF0                            		even
00016FF0                            
00016FF0                            ; ===========================================================================
00016FF0                            ; ---------------------------------------------------------------------------
00016FF0                            ; Object 42 - Newtron enemy (GHZ)
00016FF0                            ; ---------------------------------------------------------------------------
00016FF0                            
00016FF0                            Obj42:					; XREF: Obj_Index
00016FF0 7000                       		moveq	#0,d0
00016FF2 1028 0024                  		move.b	routine(a0),d0
00016FF6 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
00016FFA 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
00016FFE                            ; ===========================================================================
00016FFE 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
00017000 0000                       		dc.w Obj42_Action-Obj42_Index
00017002 0000                       		dc.w Obj42_Delete-Obj42_Index
00017004                            ; ===========================================================================
00017004                            
00017004                            Obj42_Main:				; XREF: Obj42_Index
00017004 5428 0024                  		addq.b	#2,routine(a0)
00017008 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
00017010 317C 049B 0002             		move.w	#$49B,2(a0)
00017016 117C 0004 0001             		move.b	#4,1(a0)
0001701C 317C 0200 0018             		move.w	#$200,priority(a0)
00017022 117C 0014 0023             		move.b	#$14,width_pixels(a0)
00017028 117C 0010 0016             		move.b	#$10,$16(a0)
0001702E 117C 0008 0017             		move.b	#8,$17(a0)
00017034                            
00017034                            Obj42_Action:				; XREF: Obj42_Index
00017034 7000                       		moveq	#0,d0
00017036 1028 0025                  		move.b	routine_secondary(a0),d0
0001703A 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0001703E 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
00017042 43F9 0000 0000             		lea	(Ani_obj42).l,a1
00017048 4EBA B5DA                  		jsr	AnimateSprite
0001704C 6000 0000                  		bra.w	MarkObjGone
00017050                            ; ===========================================================================
00017050 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
00017052 0000                       		dc.w Obj42_Type00-Obj42_Index2
00017054 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
00017056 0000                       		dc.w Obj42_Speed-Obj42_Index2
00017058 0000                       		dc.w Obj42_Type01-Obj42_Index2
0001705A                            ; ===========================================================================
0001705A                            
0001705A                            Obj42_ChkDist:				; XREF: Obj42_Index2
0001705A 08E8 0000 0022             		bset	#0,status(a0)
00017060 3038 D008                  		move.w	($FFFFD008).w,d0
00017064 9068 0008                  		sub.w	8(a0),d0
00017068 6400                       		bcc.s	loc_DDEA
0001706A 4440                       		neg.w	d0
0001706C 08A8 0000 0022             		bclr	#0,status(a0)
00017072                            
00017072                            loc_DDEA:
00017072 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
00017076 6400                       		bcc.s	locret_DE12	; if not, branch
00017078 5428 0025                  		addq.b	#2,routine_secondary(a0)
0001707C 117C 0001 001C             		move.b	#1,anim(a0)
00017082 4A28 0028                  		tst.b	subtype(a0)		; check	object type
00017086 6700                       		beq.s	locret_DE12	; if type is 00, branch
00017088 317C 249B 0002             		move.w	#$249B,2(a0)
0001708E 117C 0008 0025             		move.b	#8,routine_secondary(a0)	; run type 01 newtron subroutine
00017094 117C 0004 001C             		move.b	#4,anim(a0)	; use different	animation
0001709A                            
0001709A                            locret_DE12:
0001709A 4E75                       		rts	
0001709C                            ; ===========================================================================
0001709C                            
0001709C                            Obj42_Type00:				; XREF: Obj42_Index2
0001709C 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)	; has "appearing" animation finished?
000170A2 6400                       		bcc.s	Obj42_Fall	; is yes, branch
000170A4 08E8 0000 0022             		bset	#0,status(a0)
000170AA 3038 D008                  		move.w	($FFFFD008).w,d0
000170AE 9068 0008                  		sub.w	8(a0),d0
000170B2 6400                       		bcc.s	locret_DE32
000170B4 08A8 0000 0022             		bclr	#0,status(a0)
000170BA                            
000170BA                            locret_DE32:
000170BA 4E75                       		rts	
000170BC                            ; ===========================================================================
000170BC                            
000170BC                            Obj42_Fall:				; XREF: Obj42_Type00
000170BC 0C28 0001 001A             		cmpi.b	#1,mapping_frame(a0)
000170C2 6600                       		bne.s	loc_DE42
000170C4 117C 000C 0020             		move.b	#$C,collision_flags(a0)
000170CA                            
000170CA                            loc_DE42:
000170CA 4EBA EAF6                  		jsr	ObjectFall
000170CE 4EB9 0000 0000             		jsr	ObjHitFloor
000170D4 4A41                       		tst.w	d1		; has newtron hit the floor?
000170D6 6A00                       		bpl.s	locret_DE86	; if not, branch
000170D8 D368 000C                  		add.w	d1,$C(a0)
000170DC 317C 0000 0012             		move.w	#0,y_vel(a0)	; stop newtron falling
000170E2 5428 0025                  		addq.b	#2,routine_secondary(a0)
000170E6 117C 0002 001C             		move.b	#2,anim(a0)
000170EC 0828 0005 0002             		btst	#5,2(a0)
000170F2 6700                       		beq.s	Obj42_Move
000170F4 5228 001C                  		addq.b	#1,anim(a0)
000170F8                            
000170F8                            Obj42_Move:
000170F8 117C 000D 0020             		move.b	#$D,collision_flags(a0)
000170FE 317C 0200 0010             		move.w	#$200,x_vel(a0)	; move newtron horizontally
00017104 0828 0000 0022             		btst	#0,status(a0)
0001710A 6600                       		bne.s	locret_DE86
0001710C 4468 0010                  		neg.w	x_vel(a0)
00017110                            
00017110                            locret_DE86:
00017110 4E75                       		rts	
00017112                            ; ===========================================================================
00017112                            
00017112                            Obj42_MatchFloor:			; XREF: Obj42_Index2
00017112 4EBA EACE                  		jsr	SpeedToPos
00017116 4EB9 0000 0000             		jsr	ObjHitFloor
0001711C 0C41 FFF8                  		cmpi.w	#-8,d1
00017120 6D00                       		blt.s	loc_DEA2
00017122 0C41 000C                  		cmpi.w	#$C,d1
00017126 6C00                       		bge.s	loc_DEA2
00017128 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0001712C 4E75                       		rts	
0001712E                            ; ===========================================================================
0001712E                            
0001712E                            loc_DEA2:
0001712E 5428 0025                  		addq.b	#2,routine_secondary(a0)
00017132 4E75                       		rts	
00017134                            ; ===========================================================================
00017134                            
00017134                            Obj42_Speed:				; XREF: Obj42_Index2
00017134 4EBA EAAC                  		jsr	SpeedToPos
00017138 4E75                       		rts	
0001713A                            ; ===========================================================================
0001713A                            
0001713A                            Obj42_Type01:				; XREF: Obj42_Index2
0001713A 0C28 0001 001A             		cmpi.b	#1,mapping_frame(a0)
00017140 6600                       		bne.s	Obj42_FireMissile
00017142 117C 000C 0020             		move.b	#$C,collision_flags(a0)
00017148                            
00017148                            Obj42_FireMissile:
00017148 0C28 0002 001A             		cmpi.b	#2,mapping_frame(a0)
0001714E 6600                       		bne.s	locret_DF14
00017150 4A28 0032                  		tst.b	$32(a0)
00017154 6600                       		bne.s	locret_DF14
00017156 117C 0001 0032             		move.b	#1,$32(a0)
0001715C 6100 F5B6                  		bsr.w	SingleObjLoad
00017160 6600                       		bne.s	locret_DF14
00017162 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00017166 3368 0008 0008             		move.w	8(a0),8(a1)
0001716C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017172 5169 000C                  		subq.w	#8,$C(a1)
00017176 337C 0200 0010             		move.w	#$200,x_vel(a1)
0001717C 303C 0014                  		move.w	#$14,d0
00017180 0828 0000 0022             		btst	#0,status(a0)
00017186 6600                       		bne.s	loc_DF04
00017188 4440                       		neg.w	d0
0001718A 4469 0010                  		neg.w	x_vel(a1)
0001718E                            
0001718E                            loc_DF04:
0001718E D169 0008                  		add.w	d0,8(a1)
00017192 1368 0022 0022             		move.b	status(a0),status(a1)
00017198 137C 0001 0028             		move.b	#1,subtype(a1)
0001719E                            
0001719E                            locret_DF14:
0001719E 4E75                       		rts	
000171A0                            ; ===========================================================================
000171A0                            
000171A0                            Obj42_Delete:				; XREF: Obj42_Index
000171A0 7000                       		moveq	#0,d0
000171A2 3028 0014                          move.w	respawn_index(a0),d0	; get address in respawn table
000171A6 3440                       	    movea.w	d0,a2				; load address into a2
000171A8 0892 0007                  	    bclr	#7,(a2)				; clear respawn table entry, so object can be loaded again
000171AC 6000 EA4E                  		bra.w	DeleteObject
000171B0                            ; ===========================================================================
000171B0                            Ani_obj42:
000171B0                            	include "_anim\obj42.asm"
000171B0                            ; ---------------------------------------------------------------------------
000171B0                            ; Animation script - Newtron enemy
000171B0                            ; ---------------------------------------------------------------------------
000171B0 0000                       		dc.w byte_DF24-Ani_obj42
000171B2 0000                       		dc.w byte_DF28-Ani_obj42
000171B4 0000                       		dc.w byte_DF30-Ani_obj42
000171B6 0000                       		dc.w byte_DF34-Ani_obj42
000171B8 0000                       		dc.w byte_DF38-Ani_obj42
000171BA 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
000171BE 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
000171C6 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
000171CA 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
000171CE 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
000171D8                            		even
000171D8                            		even
000171D8                            
000171D8                            ; ---------------------------------------------------------------------------
000171D8                            ; Sprite mappings - Newtron enemy (GHZ)
000171D8                            ; ---------------------------------------------------------------------------
000171D8                            Map_obj42:
000171D8                            	include "_maps\obj42.asm"
000171D8                            ; ---------------------------------------------------------------------------
000171D8                            ; Sprite mappings - Newtron enemy (GHZ)
000171D8                            ; ---------------------------------------------------------------------------
000171D8 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
000171DC 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
000171E0 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
000171E4 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
000171E8 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
000171EC 0000                       		dc.w byte_DFF8-Map_obj42
000171EE 03                         byte_DF58:	dc.b 3
000171EF EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
000171F4 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
000171F9 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
000171FE 03                         byte_DF68:	dc.b 3
000171FF EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
00017204 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00017209 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0001720E 03                         byte_DF78:	dc.b 3
0001720F EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
00017214 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00017219 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0001721E 04                         byte_DF88:	dc.b 4
0001721F EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
00017224 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00017229 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0001722E 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
00017233 03                         byte_DF9D:	dc.b 3
00017234 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
00017239 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0001723E 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
00017243 02                         byte_DFAD:	dc.b 2
00017244 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00017249 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001724E 03                         byte_DFB8:	dc.b 3
0001724F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00017254 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00017259 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0001725E 03                         byte_DFC8:	dc.b 3
0001725F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00017264 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00017269 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0001726E 03                         byte_DFD8:	dc.b 3
0001726F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00017274 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00017279 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0001727E 03                         byte_DFE8:	dc.b 3
0001727F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00017284 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00017289 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0001728E 00                         byte_DFF8:	dc.b 0
00017290 00                         		even
00017290 00                         		even
00017290                            
00017290                            ; ===========================================================================
00017290                            ; ---------------------------------------------------------------------------
00017290                            ; Object 43 - Roller enemy (SYZ)
00017290                            ; ---------------------------------------------------------------------------
00017290                            
00017290                            Obj43:					; XREF: Obj_Index
00017290 7000                       		moveq	#0,d0
00017292 1028 0024                  		move.b	routine(a0),d0
00017296 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0001729A 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0001729E                            ; ===========================================================================
0001729E 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
000172A0 0000                       		dc.w Obj43_Action-Obj43_Index
000172A2                            ; ===========================================================================
000172A2                            
000172A2                            Obj43_Main:				; XREF: Obj43_Index
000172A2 117C 000E 0016             		move.b	#$E,$16(a0)
000172A8 117C 0008 0017             		move.b	#8,$17(a0)
000172AE 4EBA E912                  		jsr	ObjectFall
000172B2 4EB9 0000 0000             		jsr	ObjHitFloor
000172B8 4A41                       		tst.w	d1
000172BA 6A00                       		bpl.s	locret_E052
000172BC D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
000172C0 317C 0000 0012             		move.w	#0,y_vel(a0)
000172C6 5428 0024                  		addq.b	#2,routine(a0)
000172CA 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
000172D2 317C 04B8 0002             		move.w	#$4B8,2(a0)
000172D8 117C 0004 0001             		move.b	#4,1(a0)
000172DE 317C 0200 0018             		move.w	#$200,priority(a0)
000172E4 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000172EA                            
000172EA                            locret_E052:
000172EA 4E75                       		rts	
000172EC                            ; ===========================================================================
000172EC                            
000172EC                            Obj43_Action:				; XREF: Obj43_Index
000172EC 7000                       		moveq	#0,d0
000172EE 1028 0025                  		move.b	routine_secondary(a0),d0
000172F2 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
000172F6 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
000172FA 43F9 0000 0000             		lea	(Ani_obj43).l,a1
00017300 4EBA B322                  		jsr	AnimateSprite
00017304 4EF9 0000 0000             		jmp MarkObjGone
0001730A                            ; ===========================================================================
0001730A 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0001730C 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0001730E 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
00017310 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
00017312                            ; ===========================================================================
00017312                            
00017312                            Obj43_RollChk:				; XREF: Obj43_Index2
00017312 3038 D008                  		move.w	($FFFFD008).w,d0
00017316 0440 0100                  		subi.w	#$100,d0
0001731A 6500                       		bcs.s	loc_E0D2
0001731C 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
00017320 6500                       		bcs.s	loc_E0D2
00017322 5828 0025                  		addq.b	#4,routine_secondary(a0)
00017326 117C 0002 001C             		move.b	#2,anim(a0)
0001732C 317C 0700 0010             		move.w	#$700,x_vel(a0)	; move Roller horizontally
00017332 117C 008E 0020             		move.b	#$8E,collision_flags(a0)	; make Roller invincible
00017338                            
00017338                            loc_E0D2:
00017338 588F                       		addq.l	#4,sp
0001733A 4E75                       		rts	
0001733C                            ; ===========================================================================
0001733C                            
0001733C                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0001733C 0C28 0002 001C             		cmpi.b	#2,anim(a0)
00017342 6700                       		beq.s	loc_E0F8
00017344 5368 0030                  		subq.w	#1,$30(a0)
00017348 6A00                       		bpl.s	locret_E0F6
0001734A 117C 0001 001C             		move.b	#1,anim(a0)
00017350 317C 0700 0010             		move.w	#$700,x_vel(a0)
00017356 117C 008E 0020             		move.b	#$8E,collision_flags(a0)
0001735C                            
0001735C                            locret_E0F6:
0001735C 4E75                       		rts	
0001735E                            ; ===========================================================================
0001735E                            
0001735E                            loc_E0F8:
0001735E 5428 0025                  		addq.b	#2,routine_secondary(a0)
00017362 4E75                       		rts	
00017364                            ; ===========================================================================
00017364                            
00017364                            Obj43_ChkJump:				; XREF: Obj43_Index2
00017364 4EB9 0000 0000             		jsr	Obj43_Stop
0001736A 4EBA E876                  		jsr	SpeedToPos
0001736E 4EB9 0000 0000             		jsr	ObjHitFloor
00017374 0C41 FFF8                  		cmpi.w	#-8,d1
00017378 6D00                       		blt.s	Obj43_Jump
0001737A 0C41 000C                  		cmpi.w	#$C,d1
0001737E 6C00                       		bge.s	Obj43_Jump
00017380 D368 000C                  		add.w	d1,$C(a0)
00017384 4E75                       		rts	
00017386                            ; ===========================================================================
00017386                            
00017386                            Obj43_Jump:
00017386 5428 0025                  		addq.b	#2,routine_secondary(a0)
0001738A 08E8 0000 0032             		bset	#0,$32(a0)
00017390 6700                       		beq.s	locret_E12E
00017392 317C FA00 0012             		move.w	#-$600,y_vel(a0)	; move Roller vertically
00017398                            
00017398                            locret_E12E:
00017398 4E75                       		rts	
0001739A                            ; ===========================================================================
0001739A                            
0001739A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0001739A 4EBA E826                  		jsr	ObjectFall
0001739E 4A68 0012                  		tst.w	y_vel(a0)
000173A2 6B00                       		bmi.s	locret_E150
000173A4 4EB9 0000 0000             		jsr	ObjHitFloor
000173AA 4A41                       		tst.w	d1
000173AC 6A00                       		bpl.s	locret_E150
000173AE D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
000173B2 5528 0025                  		subq.b	#2,routine_secondary(a0)
000173B6 317C 0000 0012             		move.w	#0,y_vel(a0)
000173BC                            
000173BC                            locret_E150:
000173BC 4E75                       		rts	
000173BE                            
000173BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000173BE                            
000173BE                            
000173BE                            Obj43_Stop:				; XREF: Obj43_ChkJump
000173BE 4A28 0032                  		tst.b	$32(a0)
000173C2 6B00                       		bmi.s	locret_E188
000173C4 3038 D008                  		move.w	($FFFFD008).w,d0
000173C8 0440 0030                  		subi.w	#$30,d0
000173CC 9068 0008                  		sub.w	8(a0),d0
000173D0 6400                       		bcc.s	locret_E188
000173D2 117C 0000 001C             		move.b	#0,anim(a0)
000173D8 117C 000E 0020             		move.b	#$E,collision_flags(a0)
000173DE 4268 0010                  		clr.w	x_vel(a0)
000173E2 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
000173E8 117C 0002 0025             		move.b	#2,routine_secondary(a0)
000173EE 08E8 0007 0032             		bset	#7,$32(a0)
000173F4                            
000173F4                            locret_E188:
000173F4 4E75                       		rts	
000173F6                            ; End of function Obj43_Stop
000173F6                            
000173F6                            ; ===========================================================================
000173F6                            Ani_obj43:
000173F6                            	include "_anim\obj43.asm"
000173F6                            ; ---------------------------------------------------------------------------
000173F6                            ; Animation script - Roller enemy
000173F6                            ; ---------------------------------------------------------------------------
000173F6 0000                       		dc.w byte_E190-Ani_obj43
000173F8 0000                       		dc.w byte_E196-Ani_obj43
000173FA 0000                       		dc.w byte_E19C-Ani_obj43
000173FC 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
00017402 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
00017408 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0001740E 00                         		even
0001740E 00                         		even
0001740E                            
0001740E                            ; ---------------------------------------------------------------------------
0001740E                            ; Sprite mappings - Roller enemy (SYZ)
0001740E                            ; ---------------------------------------------------------------------------
0001740E                            Map_obj43:
0001740E                            	include "_maps\obj43.asm"
0001740E                            ; ---------------------------------------------------------------------------
0001740E                            ; Sprite mappings - Roller enemy (SYZ)
0001740E                            ; ---------------------------------------------------------------------------
0001740E 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
00017412 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
00017416 0000                       		dc.w byte_E1CE-Map_obj43
00017418 02                         byte_E1AC:	dc.b 2
00017419 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0001741E F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
00017423 02                         byte_E1B7:	dc.b 2
00017424 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00017429 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0001742E 01                         byte_E1C2:	dc.b 1
0001742F F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00017434 01                         byte_E1C8:	dc.b 1
00017435 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001743A 01                         byte_E1CE:	dc.b 1
0001743B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00017440                            		even
00017440                            		even
00017440                            
00017440                            ; ===========================================================================
00017440                            ; ---------------------------------------------------------------------------
00017440                            ; Object 44 - walls (GHZ)
00017440                            ; ---------------------------------------------------------------------------
00017440                            
00017440                            Obj44:					; XREF: Obj_Index
00017440 7000                       		moveq	#0,d0
00017442 1028 0024                  		move.b	routine(a0),d0
00017446 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0001744A 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0001744E                            ; ===========================================================================
0001744E 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
00017450 0000                       		dc.w Obj44_Solid-Obj44_Index
00017452 0000                       		dc.w Obj44_Display-Obj44_Index
00017454                            ; ===========================================================================
00017454                            
00017454                            Obj44_Main:				; XREF: Obj44_Index
00017454 5428 0024                  		addq.b	#2,routine(a0)
00017458 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
00017460 317C 434C 0002             		move.w	#$434C,2(a0)
00017466 0028 0004 0001             		ori.b	#4,1(a0)
0001746C 117C 0008 0023             		move.b	#8,width_pixels(a0)
00017472 317C 0300 0018             		move.w	#$300,priority(a0)
00017478 1168 0028 001A             		move.b	subtype(a0),mapping_frame(a0)	; copy object type number to frame number
0001747E 08A8 0004 001A             		bclr	#4,mapping_frame(a0)	; clear	4th bit	(deduct	$10)
00017484 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
00017486 5428 0024                  		addq.b	#2,routine(a0)
0001748A 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0001748C                            ; ===========================================================================
0001748C                            
0001748C                            Obj44_Solid:				; XREF: Obj44_Index
0001748C 323C 0013                  		move.w	#$13,d1
00017490 343C 0028                  		move.w	#$28,d2
00017494 4EBA 91D6                  		jsr	Obj44_SolidWall
00017498                            
00017498                            Obj44_Display:				; XREF: Obj44_Index
00017498 4EBA E7AE                  		jsr	DisplaySprite
0001749C 4EF9 0000 0000             		jmp MarkObjGone3
000174A2                            ; ===========================================================================
000174A2                            ; ---------------------------------------------------------------------------
000174A2                            ; Sprite mappings - walls (GHZ)
000174A2                            ; ---------------------------------------------------------------------------
000174A2                            Map_obj44:
000174A2                            	include "_maps\obj44.asm"
000174A2                            ; ---------------------------------------------------------------------------
000174A2                            ; Sprite mappings - walls (GHZ)
000174A2                            ; ---------------------------------------------------------------------------
000174A2 0000                       		dc.w byte_E256-Map_obj44
000174A4 0000                       		dc.w byte_E26B-Map_obj44
000174A6 0000                       		dc.w byte_E280-Map_obj44
000174A8 04                         byte_E256:	dc.b 4
000174A9 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
000174AE F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000174B3 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000174B8 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000174BD 04                         byte_E26B:	dc.b 4
000174BE E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
000174C3 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000174C8 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000174CD 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000174D2 04                         byte_E280:	dc.b 4
000174D3 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
000174D8 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
000174DD 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
000174E2 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
000174E8 00                         		even
000174E8 00                         		even
000174E8                            
000174E8                            ; ===========================================================================
000174E8                            ; ---------------------------------------------------------------------------
000174E8                            ; Object 13 - lava ball	producer (MZ, SLZ)
000174E8                            ; ---------------------------------------------------------------------------
000174E8                            
000174E8                            Obj13:					; XREF: Obj_Index
000174E8 7000                       		moveq	#0,d0
000174EA 1028 0024                  		move.b	routine(a0),d0
000174EE 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
000174F2 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
000174F6 6000 0000                  		bra.w	Obj14_ChkDel
000174FA                            ; ===========================================================================
000174FA 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
000174FC 0000                       		dc.w Obj13_MakeLava-Obj13_Index
000174FE                            ; ---------------------------------------------------------------------------
000174FE                            ;
000174FE                            ; Lava ball production rates
000174FE                            ;
000174FE 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
00017504                            ; ===========================================================================
00017504                            
00017504                            Obj13_Main:				; XREF: Obj13_Index
00017504 5428 0024                  		addq.b	#2,routine(a0)
00017508 1028 0028                  		move.b	subtype(a0),d0
0001750C E848                       		lsr.w	#4,d0
0001750E 0240 000F                  		andi.w	#$F,d0
00017512 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
00017518 1168 001F 001E             		move.b	$1F(a0),anim_frame_duration(a0)	; set time delay for lava balls
0001751E 0228 000F 0028             		andi.b	#$F,subtype(a0)
00017524                            
00017524                            Obj13_MakeLava:				; XREF: Obj13_Index
00017524 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from time delay
00017528 6600                       		bne.s	locret_E302	; if time still	remains, branch
0001752A 1168 001F 001E             		move.b	$1F(a0),anim_frame_duration(a0)	; reset	time delay
00017530 4EBA EA8E                  		jsr	ChkObjOnScreen
00017534 6600                       		bne.s	locret_E302
00017536 6100 F1DC                  		bsr.w	SingleObjLoad
0001753A 6600                       		bne.s	locret_E302
0001753C 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00017540 3368 0008 0008             		move.w	8(a0),8(a1)
00017546 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001754C 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
00017552                            
00017552                            locret_E302:
00017552 4E75                       		rts	
00017554                            ; ===========================================================================
00017554                            ; ---------------------------------------------------------------------------
00017554                            ; Object 14 - lava balls (MZ, SLZ)
00017554                            ; ---------------------------------------------------------------------------
00017554                            
00017554                            Obj14:					; XREF: Obj_Index
00017554 7000                       		moveq	#0,d0
00017556 1028 0024                  		move.b	$24(a0),d0
0001755A 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0001755E 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
00017562 6000 E6E4                  		bra.w	DisplaySprite
00017566                            ; ===========================================================================
00017566 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
00017568 0000                       		dc.w Obj14_Action-Obj14_Index
0001756A 0000                       		dc.w Obj14_Delete-Obj14_Index
0001756C                            
0001756C FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
00017576 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0001757E                            ; ===========================================================================
0001757E                            
0001757E                            Obj14_Main:				; XREF: Obj14_Index
0001757E 5428 0024                  		addq.b	#2,$24(a0)
00017582 117C 0008 0016             		move.b	#8,$16(a0)
00017588 117C 0008 0017             		move.b	#8,$17(a0)
0001758E 217C 0001 345A 0004        		move.l	#Map_obj14,4(a0)
00017596 317C 0345 0002             		move.w	#$345,2(a0)
0001759C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000175A2 6600                       		bne.s	loc_E35A
000175A4 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
000175AA                            
000175AA                            loc_E35A:
000175AA 117C 0004 0001             		move.b	#4,1(a0)
000175B0 317C 0180 0018             		move.w	#$180,priority(a0)
000175B6 117C 008B 0020             		move.b	#$8B,$20(a0)
000175BC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000175C2 4A28 0029                  		tst.b	$29(a0)
000175C6 6700                       		beq.s	Obj14_SetSpeed
000175C8 0668 0100 0018             		addi.w	#$100,priority(a0)
000175CE                            
000175CE                            Obj14_SetSpeed:
000175CE 7000                       		moveq	#0,d0
000175D0 1028 0028                  		move.b	$28(a0),d0
000175D4 D040                       		add.w	d0,d0
000175D6 317B 0094 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
000175DC 117C 0008 0023             		move.b	#8,width_pixels(a0)
000175E2 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
000175E8 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
000175EA 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000175F0 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
000175F6 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
000175FC 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
00017602                            
00017602                            Obj14_PlaySnd:
00017602 303C 00AE                  		move.w	#$AE,d0
00017606 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001760C                            
0001760C                            Obj14_Action:				; XREF: Obj14_Index
0001760C 7000                       		moveq	#0,d0
0001760E 1028 0028                  		move.b	$28(a0),d0
00017612 D040                       		add.w	d0,d0
00017614 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
00017618 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0001761C 6100 E5C4                  		bsr.w	SpeedToPos
00017620 43F9 0000 0000             		lea	(Ani_obj14).l,a1
00017626 6100 AFFC                  		bsr.w	AnimateSprite
0001762A                            
0001762A                            Obj14_ChkDel:				; XREF: Obj13
0001762A 4EF9 0000 0000             		jmp		MarkObjGone3
00017630                            ; ===========================================================================
00017630 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
00017634 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
00017638 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0001763C 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
00017640 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
00017642                            ; ===========================================================================
00017642                            ; lavaball types 00-03 fly up and fall back down
00017642                            
00017642                            Obj14_Type00:				; XREF: Obj14_TypeIndex
00017642 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
00017648 3028 0030                  		move.w	$30(a0),d0
0001764C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
00017650 6400                       		bcc.s	loc_E41E	; if not, branch
00017652 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
00017656                            
00017656                            loc_E41E:
00017656 08A8 0001 0022             		bclr	#1,$22(a0)
0001765C 4A68 0012                  		tst.w	$12(a0)
00017660 6A00                       		bpl.s	locret_E430
00017662 08E8 0001 0022             		bset	#1,$22(a0)
00017668                            
00017668                            locret_E430:
00017668 4E75                       		rts	
0001766A                            ; ===========================================================================
0001766A                            ; lavaball type	04 flies up until it hits the ceiling
0001766A                            
0001766A                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0001766A 08E8 0001 0022             		bset	#1,$22(a0)
00017670 4EB9 0000 0000             		jsr	ObjHitCeiling
00017676 4A41                       		tst.w	d1
00017678 6A00                       		bpl.s	locret_E452
0001767A 117C 0008 0028             		move.b	#8,$28(a0)
00017680 117C 0001 001C             		move.b	#1,$1C(a0)
00017686 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0001768C                            
0001768C                            locret_E452:
0001768C 4E75                       		rts	
0001768E                            ; ===========================================================================
0001768E                            ; lavaball type	05 falls down until it hits the	floor
0001768E                            
0001768E                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0001768E 08A8 0001 0022             		bclr	#1,$22(a0)
00017694 4EB9 0000 0000             		jsr	ObjHitFloor
0001769A 4A41                       		tst.w	d1
0001769C 6A00                       		bpl.s	locret_E474
0001769E 117C 0008 0028             		move.b	#8,$28(a0)
000176A4 117C 0001 001C             		move.b	#1,$1C(a0)
000176AA 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
000176B0                            
000176B0                            locret_E474:
000176B0 4E75                       		rts	
000176B2                            ; ===========================================================================
000176B2                            ; lavaball types 06-07 move sideways
000176B2                            
000176B2                            Obj14_Type06:				; XREF: Obj14_TypeIndex
000176B2 08E8 0000 0022             		bset	#0,$22(a0)
000176B8 76F8                       		moveq	#-8,d3
000176BA 4EB9 0000 0000             		jsr	ObjHitWallLeft
000176C0 4A41                       		tst.w	d1
000176C2 6A00                       		bpl.s	locret_E498
000176C4 117C 0008 0028             		move.b	#8,$28(a0)
000176CA 117C 0003 001C             		move.b	#3,$1C(a0)
000176D0 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
000176D6                            
000176D6                            locret_E498:
000176D6 4E75                       		rts	
000176D8                            ; ===========================================================================
000176D8                            
000176D8                            Obj14_Type07:				; XREF: Obj14_TypeIndex
000176D8 08A8 0000 0022             		bclr	#0,$22(a0)
000176DE 7608                       		moveq	#8,d3
000176E0 4EB9 0000 0000             		jsr	ObjHitWallRight
000176E6 4A41                       		tst.w	d1
000176E8 6A00                       		bpl.s	locret_E4BC
000176EA 117C 0008 0028             		move.b	#8,$28(a0)
000176F0 117C 0003 001C             		move.b	#3,$1C(a0)
000176F6 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
000176FC                            
000176FC                            locret_E4BC:
000176FC 4E75                       		rts	
000176FE                            ; ===========================================================================
000176FE                            
000176FE                            Obj14_Type08:				; XREF: Obj14_TypeIndex
000176FE 4E75                       		rts	
00017700                            ; ===========================================================================
00017700                            
00017700                            Obj14_Delete:				; XREF: Obj14_Index
00017700 6000 E4FA                  		bra.w	DeleteObject
00017704                            ; ===========================================================================
00017704                            Ani_obj14:
00017704                            	include '_anim\obj14.asm'
00017704                            ; ---------------------------------------------------------------------------
00017704                            ; Animation script - lava balls
00017704                            ; ---------------------------------------------------------------------------
00017704 0000                       		dc.w byte_E4CC-Ani_obj14
00017706 0000                       		dc.w byte_E4D2-Ani_obj14
00017708 0000                       		dc.w byte_E4D6-Ani_obj14
0001770A 0000                       		dc.w byte_E4DC-Ani_obj14
0001770C 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
00017712 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
00017716 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0001771C 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
00017720                            		even
00017720                            		even
00017720                            
00017720                            ; ===========================================================================
00017720                            ; ---------------------------------------------------------------------------
00017720                            ; Object 6D - flame thrower (SBZ)
00017720                            ; ---------------------------------------------------------------------------
00017720                            
00017720                            Obj6D:					; XREF: Obj_Index
00017720 7000                       		moveq	#0,d0
00017722 1028 0024                  		move.b	routine(a0),d0
00017726 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0001772A 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0001772E                            ; ===========================================================================
0001772E 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
00017730 0000                       		dc.w Obj6D_Action-Obj6D_Index
00017732                            ; ===========================================================================
00017732                            
00017732                            Obj6D_Main:				; XREF: Obj6D_Index
00017732 5428 0024                  		addq.b	#2,routine(a0)
00017736 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0001773E 317C 83D9 0002             		move.w	#$83D9,2(a0)
00017744 0028 0004 0001             		ori.b	#4,1(a0)
0001774A 317C 0080 0018             		move.w	#$80,priority(a0)
00017750 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017756 117C 000C 0023             		move.b	#$C,width_pixels(a0)
0001775C 1028 0028                  		move.b	subtype(a0),d0
00017760 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
00017764 D040                       		add.w	d0,d0		; multiply by 2
00017766 3140 0030                  		move.w	d0,$30(a0)
0001776A 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0001776E 1028 0028                  		move.b	subtype(a0),d0
00017772 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
00017776 EB48                       		lsl.w	#5,d0		; multiply by $20
00017778 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0001777C 117C 000A 0036             		move.b	#$A,$36(a0)
00017782 0828 0001 0022             		btst	#1,status(a0)
00017788 6700                       		beq.s	Obj6D_Action
0001778A 117C 0002 001C             		move.b	#2,anim(a0)
00017790 117C 0015 0036             		move.b	#$15,$36(a0)
00017796                            
00017796                            Obj6D_Action:				; XREF: Obj6D_Index
00017796 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0001779A 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0001779C 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000177A2 0868 0000 001C             		bchg	#0,anim(a0)
000177A8 6700                       		beq.s	loc_E57A
000177AA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
000177B0 303C 0049                  		move.w	#$49,d0
000177B4 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play flame sound
000177BA                            
000177BA                            loc_E57A:
000177BA 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
000177C0 4EBA AE62                  		jsr	AnimateSprite
000177C4 117C 0000 0020             		move.b	#0,collision_flags(a0)
000177CA 1028 0036                  		move.b	$36(a0),d0
000177CE B028 001A                  		cmp.b	mapping_frame(a0),d0
000177D2 6600                       		bne.s	Obj6D_ChkDel
000177D4 117C 00A3 0020             		move.b	#$A3,collision_flags(a0)
000177DA                            
000177DA                            Obj6D_ChkDel:
000177DA 4EF9 0000 0000             		jmp MarkObjGone
000177E0                            ; ===========================================================================
000177E0                            Ani_obj6D:
000177E0                            	include "_anim\obj6D.asm"
000177E0                            ; ---------------------------------------------------------------------------
000177E0                            ; Animation script - flamethrower (SBZ)
000177E0                            ; ---------------------------------------------------------------------------
000177E0 0000                       		dc.w byte_E5C4-Ani_obj6D
000177E2 0000                       		dc.w byte_E5D2-Ani_obj6D
000177E4 0000                       		dc.w byte_E5DC-Ani_obj6D
000177E6 0000                       		dc.w byte_E5EA-Ani_obj6D
000177E8 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
000177F6 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
00017800 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0001780E 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
00017818                            		even
00017818                            		even
00017818                            
00017818                            ; ---------------------------------------------------------------------------
00017818                            ; Sprite mappings - flame thrower (SBZ)
00017818                            ; ---------------------------------------------------------------------------
00017818                            Map_obj6D:
00017818                            	include "_maps\obj6D.asm"
00017818                            ; ---------------------------------------------------------------------------
00017818                            ; Sprite mappings - flame thrower (SBZ)
00017818                            ; ---------------------------------------------------------------------------
00017818 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0001781C 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
00017820 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
00017824 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
00017828 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0001782C 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
00017830 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
00017834 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
00017838 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0001783C 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
00017840 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
00017844 01                         byte_E620:	dc.b 1
00017845 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001784A 02                         byte_E626:	dc.b 2
0001784B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017850 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017855 02                         byte_E631:	dc.b 2
00017856 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001785B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017860 03                         byte_E63C:	dc.b 3
00017861 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00017866 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001786B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017870 03                         byte_E64C:	dc.b 3
00017871 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00017876 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001787B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017880 04                         byte_E65C:	dc.b 4
00017881 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00017886 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001788B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017890 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017895 04                         byte_E671:	dc.b 4
00017896 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001789B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000178A0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000178A5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000178AA 05                         byte_E686:	dc.b 5
000178AB F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000178B0 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000178B5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000178BA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000178BF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000178C4 05                         byte_E6A0:	dc.b 5
000178C5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000178CA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000178CF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000178D4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000178D9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000178DE 06                         byte_E6BA:	dc.b 6
000178DF E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000178E4 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000178E9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000178EE 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000178F3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000178F8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000178FD 06                         byte_E6D9:	dc.b 6
000178FE E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00017903 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00017908 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0001790D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00017912 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017917 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001791C 01                         byte_E6F8:	dc.b 1
0001791D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017922 02                         byte_E6FE:	dc.b 2
00017923 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017928 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001792D 02                         byte_E709:	dc.b 2
0001792E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017933 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017938 03                         byte_E714:	dc.b 3
00017939 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001793E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017943 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017948 03                         byte_E724:	dc.b 3
00017949 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001794E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017953 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017958 04                         byte_E734:	dc.b 4
00017959 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001795E 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00017963 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017968 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001796D 04                         byte_E749:	dc.b 4
0001796E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00017973 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00017978 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001797D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017982 05                         byte_E75E:	dc.b 5
00017983 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00017988 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001798D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00017992 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017997 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001799C 05                         byte_E778:	dc.b 5
0001799D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000179A2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000179A7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000179AC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000179B1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000179B6 06                         byte_E792:	dc.b 6
000179B7 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000179BC F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000179C1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000179C6 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000179CB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000179D0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000179D5 06                         byte_E7B1:	dc.b 6
000179D6 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000179DB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000179E0 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000179E5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000179EA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000179EF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000179F4                            		even
000179F4                            		even
000179F4                            
000179F4                            ; ===========================================================================
000179F4                            ; ---------------------------------------------------------------------------
000179F4                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
000179F4                            ; ---------------------------------------------------------------------------
000179F4                            
000179F4                            Obj46:					; XREF: Obj_Index
000179F4 7000                       		moveq	#0,d0
000179F6 1028 0024                  		move.b	$24(a0),d0
000179FA 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
000179FE 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
00017A02                            ; ===========================================================================
00017A02 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
00017A04 0000                       		dc.w Obj46_Action-Obj46_Index
00017A06                            ; ===========================================================================
00017A06                            
00017A06                            Obj46_Main:				; XREF: Obj46_Index
00017A06 5428 0024                  		addq.b	#2,$24(a0)
00017A0A 117C 000F 0016             		move.b	#$F,$16(a0)
00017A10 117C 000F 0017             		move.b	#$F,$17(a0)
00017A16 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
00017A1E 317C 4000 0002             		move.w	#$4000,2(a0)
00017A24 117C 0004 0001             		move.b	#4,1(a0)
00017A2A 317C 0180 0018             		move.w	#$180,priority(a0)
00017A30 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00017A36 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017A3C 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00017A42                            
00017A42                            Obj46_Action:				; XREF: Obj46_Index
00017A42 4A28 0001                  		tst.b	1(a0)
00017A46 6A00                       		bpl.s	Obj46_ChkDel
00017A48 7000                       		moveq	#0,d0
00017A4A 1028 0028                  		move.b	$28(a0),d0	; get object type
00017A4E 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00017A52 D040                       		add.w	d0,d0
00017A54 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
00017A58 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
00017A5C 323C 001B                  		move.w	#$1B,d1
00017A60 343C 0010                  		move.w	#$10,d2
00017A64 363C 0011                  		move.w	#$11,d3
00017A68 3828 0008                  		move.w	8(a0),d4
00017A6C 6100 0000                  		bsr.w	SolidObject
00017A70                            
00017A70                            Obj46_ChkDel:
00017A70 6100 E1D6                  		bsr.w	DisplaySprite
00017A74 4EF9 0000 0000             		jmp MarkObjGone3
00017A7A                            ; ===========================================================================
00017A7A 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
00017A7C 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
00017A7E 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
00017A80 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
00017A82 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
00017A84                            ; ===========================================================================
00017A84                            
00017A84                            Obj46_Type00:				; XREF: Obj46_TypeIndex
00017A84 4E75                       		rts	
00017A86                            ; ===========================================================================
00017A86                            
00017A86                            Obj46_Type02:				; XREF: Obj46_TypeIndex
00017A86 3038 D008                  		move.w	($FFFFD008).w,d0
00017A8A 9068 0008                  		sub.w	8(a0),d0
00017A8E 6400                       		bcc.s	loc_E888
00017A90 4440                       		neg.w	d0
00017A92                            
00017A92                            loc_E888:
00017A92 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00017A96 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00017A98 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
00017A9E                            
00017A9E                            Obj46_Type01:				; XREF: Obj46_TypeIndex
00017A9E 7000                       		moveq	#0,d0
00017AA0 1038 FE74                  		move.b	($FFFFFE74).w,d0
00017AA4 0828 0003 0028             		btst	#3,$28(a0)
00017AAA 6700                       		beq.s	loc_E8A8
00017AAC 4440                       		neg.w	d0
00017AAE 0640 0010                  		addi.w	#$10,d0
00017AB2                            
00017AB2                            loc_E8A8:
00017AB2 3228 0030                  		move.w	$30(a0),d1
00017AB6 9240                       		sub.w	d0,d1
00017AB8 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
00017ABC 4E75                       		rts	
00017ABE                            ; ===========================================================================
00017ABE                            
00017ABE                            Obj46_Type03:				; XREF: Obj46_TypeIndex
00017ABE 6100 E122                  		bsr.w	SpeedToPos
00017AC2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00017AC8 4EB9 0000 0000             		jsr	ObjHitFloor
00017ACE 4A41                       		tst.w	d1		; has the block	hit the	floor?
00017AD0 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00017AD4 D368 000C                  		add.w	d1,$C(a0)
00017AD8 4268 0012                  		clr.w	$12(a0)		; stop the block falling
00017ADC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017AE2 117C 0004 0028             		move.b	#4,$28(a0)
00017AE8 3011                       		move.w	(a1),d0
00017AEA 0240 03FF                  		andi.w	#$3FF,d0
00017AEE 0C40 02E8                  		cmpi.w	#$2E8,d0
00017AF2 6400                       		bcc.s	locret_E8EE
00017AF4 117C 0000 0028             		move.b	#0,$28(a0)
00017AFA                            
00017AFA                            locret_E8EE:
00017AFA 4E75                       		rts	
00017AFC                            ; ===========================================================================
00017AFC                            
00017AFC                            Obj46_Type04:				; XREF: Obj46_TypeIndex
00017AFC 7000                       		moveq	#0,d0
00017AFE 1038 FE70                  		move.b	($FFFFFE70).w,d0
00017B02 E648                       		lsr.w	#3,d0
00017B04 3228 0030                  		move.w	$30(a0),d1
00017B08 9240                       		sub.w	d0,d1
00017B0A 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
00017B0E 4E75                       		rts	
00017B10                            ; ===========================================================================
00017B10                            ; ---------------------------------------------------------------------------
00017B10                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00017B10                            ; ---------------------------------------------------------------------------
00017B10                            Map_obj46:
00017B10                            	include '_maps\obj46.asm'
00017B10                            ; ---------------------------------------------------------------------------
00017B10                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00017B10                            ; ---------------------------------------------------------------------------
00017B10 0000                       		dc.w byte_E906-Map_obj46
00017B12 01                         byte_E906:	dc.b 1
00017B13 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00017B18                            		even
00017B18                            		even
00017B18                            
00017B18                            ; ===========================================================================
00017B18                            ; ---------------------------------------------------------------------------
00017B18                            ; Object 12 - lamp (SYZ)
00017B18                            ; ---------------------------------------------------------------------------
00017B18                            
00017B18                            Obj12:					; XREF: Obj_Index
00017B18 7000                       		moveq	#0,d0
00017B1A 1028 0024                  		move.b	$24(a0),d0
00017B1E 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
00017B22 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
00017B26                            ; ===========================================================================
00017B26 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
00017B28 0000                       		dc.w Obj12_Animate-Obj12_Index
00017B2A                            ; ===========================================================================
00017B2A                            
00017B2A                            Obj12_Main:				; XREF: Obj12_Index
00017B2A 5428 0024                  		addq.b	#2,$24(a0)
00017B2E 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
00017B36 317C 0000 0002             		move.w	#0,2(a0)
00017B3C 117C 0004 0001             		move.b	#4,1(a0)
00017B42 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00017B48 317C 0300 0018             		move.w	#$300,priority(a0)
00017B4E                            
00017B4E                            Obj12_Animate:				; XREF: Obj12_Index
00017B4E 5328 001E                  		subq.b	#1,$1E(a0)
00017B52 6A00                       		bpl.s	Obj12_ChkDel
00017B54 117C 0007 001E             		move.b	#7,$1E(a0)
00017B5A 5228 001A                  		addq.b	#1,$1A(a0)
00017B5E 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00017B64 6500                       		bcs.s	Obj12_ChkDel
00017B66 117C 0000 001A             		move.b	#0,$1A(a0)
00017B6C                            
00017B6C                            Obj12_ChkDel:
00017B6C 4EF9 0000 0000             		jmp MarkObjGone
00017B72                            ; ===========================================================================
00017B72                            ; ---------------------------------------------------------------------------
00017B72                            ; Sprite mappings - lamp (SYZ)
00017B72                            ; ---------------------------------------------------------------------------
00017B72                            Map_obj12:
00017B72                            	include '_maps\obj12.asm'
00017B72                            ; ---------------------------------------------------------------------------
00017B72                            ; Sprite mappings - lamp (SYZ)
00017B72                            ; ---------------------------------------------------------------------------
00017B72 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
00017B76 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00017B7A 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00017B7E 02                         byte_E98E:	dc.b 2
00017B7F F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
00017B84 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
00017B89 02                         byte_E999:	dc.b 2
00017B8A F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00017B8F 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
00017B94 02                         byte_E9A4:	dc.b 2
00017B95 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
00017B9A 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00017B9F 02                         byte_E9AF:	dc.b 2
00017BA0 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
00017BA5 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
00017BAA 02                         byte_E9BA:	dc.b 2
00017BAB F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
00017BB0 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
00017BB5 02                         byte_E9C5:	dc.b 2
00017BB6 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
00017BBB 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
00017BC0                            		even
00017BC0                            		even
00017BC0                            
00017BC0                            ; ===========================================================================
00017BC0                            ; ---------------------------------------------------------------------------
00017BC0                            ; Object 47 - pinball bumper (SYZ)
00017BC0                            ; ---------------------------------------------------------------------------
00017BC0                            
00017BC0                            ;===============================================================================
00017BC0                            ; Red Ball Bumper With Star
00017BC0                            ; [ Begin ]
00017BC0                            ;===============================================================================
00017BC0                            Obj47:
00017BC0 7000                       		moveq	#0,d0
00017BC2 1028 0024                  		move.b	$24(a0),d0
00017BC6 323B 0000                  		move.w	loc_1B5BA(pc,d0),d1
00017BCA 4EFB 1000                  		jmp	loc_1B5BA(pc,d1)
00017BCE                            loc_1B5BA:
00017BCE 0000                       		dc.w	loc_1B5BE-loc_1B5BA
00017BD0 0000                       		dc.w	loc_1B5EC-loc_1B5BA
00017BD2                            loc_1B5BE:
00017BD2 5428 0024                  		addq.b	#2,$24(a0)
00017BD6 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0) 
00017BDE 317C 0380 0002             		move.w	#$380,2(a0)
00017BE4                            ;		bsr	ModifySpriteAttr_2P	
00017BE4 117C 0004 0001             		move.b	#4,1(a0)
00017BEA 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00017BF0 317C 0080 0018             		move.w	#$80,priority(a0)
00017BF6 117C 00D7 0020             		move.b	#$D7,$20(a0)
00017BFC                            loc_1B5EC:
00017BFC 1028 0021                  		move.b	$21(a0),d0
00017C00 6700 0000                  		beq	loc_1B6BA
00017C04 43F8 D000                  		lea	($FFFFD000).w,a1
00017C08 08A8 0000 0021             		bclr	#0,$21(a0)
00017C0E 6700                       		beq.s	loc_1B602
00017C10 6100                       		bsr.s	loc_1B618
00017C12                            loc_1B602:
00017C12                            ;		lea	($FFFFD040).w,a1
00017C12                            ;		bclr	#1,$21(a0)
00017C12                            ;		beq.s	loc_1B610
00017C12                            ;		bsr.s	loc_1B618
00017C12                            loc_1B610:
00017C12 4228 0021                  		clr.b	$21(a0)
00017C16 6000 0000                  		bra	loc_1B6BA
00017C1A                            loc_1B618:
00017C1A 3228 0008                  		move.w	8(a0),d1
00017C1E 3428 000C                  		move.w	$C(a0),d2
00017C22 9269 0008                  		sub.w	8(a1),d1
00017C26 9469 000C                  		sub.w	$C(a1),d2
00017C2A 4EB9 0000 9072             		jsr	CalcAngle	
00017C30 1238 FE04                  		move.b	($FFFFFE04).w,d1
00017C34 0241 0003                  		and.w	#3,d1
00017C38 D041                       		add.w	d1,d0
00017C3A 4EB9 0000 8DA4             		jsr	CalcSine	
00017C40 C3FC F900                  		muls.w	#$F900,d1
00017C44 E081                       		asr.l	#8,d1
00017C46 3341 0010                  		move.w	d1,$10(a1)
00017C4A C1FC F900                  		muls.w	#$F900,d0
00017C4E E080                       		asr.l	#8,d0
00017C50 3340 0012                  		move.w	d0,$12(a1)
00017C54 08E9 0001 0022             		bset	#1,$22(a1)
00017C5A 08A9 0004 0022             		bclr	#4,$22(a1)
00017C60 08A9 0005 0022             		bclr	#5,$22(a1)
00017C66 4229 003C                  		clr.b	$3C(a1)
00017C6A 117C 0001 001C             		move.b	#1,$1C(a0)
00017C70 303C 00AA                  		move.w	#$AA,d0
00017C74 4EB8 3212                  		jsr	PlaySound	
00017C78                            ;		lea	(v_objstate).w,a2
00017C78 7000                       		moveq	#0,d0
00017C7A 3028 0014                  		move.w	respawn_index(a0),d0
00017C7E                            ;        move.w	respawn_index(a0),d0
00017C7E 6700                       		beq.s	loc_1B690
00017C80 3440                       	    movea.w	d0,a2
00017C82 0C12 008A                  		cmp.b	#$8A,(a2)
00017C86 6400                       		bcc.s	loc_1B6B8
00017C88 5212                       		addq.b	#1,(a2)
00017C8A                            loc_1B690:
00017C8A 7001                       		moveq	#1,d0
00017C8C 3649                       		move.w	a1,a3
00017C8E 4EB9 0000 0000             		jsr	AddPoints	
00017C94 6100 0000                  		bsr	SingleObjectLoad	
00017C98 6600                       		bne.s	loc_1B6B8
00017C9A 12BC 0029                  		move.b	#$29,0(a1)
00017C9E 3368 0008 0008             		move.w	8(a0),8(a1)
00017CA4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017CAA 137C 0004 001A             		move.b	#4,$1A(a1)
00017CB0                            loc_1B6B8:
00017CB0 4E75                       		rts
00017CB2                            loc_1B6BA:
00017CB2 43F9 0000 0000             		lea	(Ani_obj47),a1 
00017CB8 6100 0000                  		bsr	loc_1B716
00017CBC 6000 0000                  		bra	loc_1B710
00017CC0                            ;-------------------------------------------------------------------------------
00017CC0                            Ani_obj47:
00017CC0 0000 0000                  	dc.w byte_319B82-Ani_Obj47,byte_319B85-Ani_Obj47; 0 ; ...
00017CC4 0F00 FF                    byte_319B82:	dc.b  $F,  0,$FF		  ; 0 ;	...
00017CC7 0301 0001 FD00 00          byte_319B85:	dc.b   3,  1,  0,  1,$FD,  0,  0; 0 ; ...
00017CCE                            
00017CCE                            ; ---------------------------------------------------------------------------
00017CCE                            ; Sprite mappings - pinball bumper (SYZ)
00017CCE                            ; ---------------------------------------------------------------------------
00017CCE                            Map_obj47:
00017CCE                            		include	"_maps\RoundBumper.asm"
00017CCE                            ; --------------------------------------------------------------------------------
00017CCE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017CCE                            ; --------------------------------------------------------------------------------
00017CCE                            
00017CCE                            SME_jt4_6:	
00017CCE 0000 0000                  		dc.w SME_jt4_6_4-SME_jt4_6, SME_jt4_6_F-SME_jt4_6	
00017CD2 02                         SME_jt4_6_4:	dc.b 2	
00017CD3 F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
00017CD8 F007 0800 00               		dc.b $F0, 7, 8, 0, 0	
00017CDD 06                         SME_jt4_6_F:	dc.b 6	
00017CDE F202 0008 E8               		dc.b $F2, 2, 0, 8, $E8	
00017CE3 EA07 000B F0               		dc.b $EA, 7, 0, $B, $F0	
00017CE8 0A04 0013 F0               		dc.b $A, 4, 0, $13, $F0	
00017CED F202 0808 10               		dc.b $F2, 2, 8, 8, $10	
00017CF2 EA07 080B 00               		dc.b $EA, 7, 8, $B, 0	
00017CF7 0A04 0813 00               		dc.b $A, 4, 8, $13, 0	
00017CFC                            		even
00017CFC                            		even
00017CFC                            ;===============================================================================
00017CFC                            ; Object 0x44 -> Red Ball Bumper With Star
00017CFC                            ; [ End ]
00017CFC                            ;===============================================================================
00017CFC 4E71                       		nop ; Filler
00017CFE                            loc_1B710:
00017CFE 4EF9 0000 0000             		jmp	MarkObjGone 
00017D04                            loc_1B716:
00017D04 4EFA A91E                  		jmp	AnimateSprite 
00017D08                            
00017D08                            ; ===========================================================================
00017D08                            ; ---------------------------------------------------------------------------
00017D08                            ; Object 0D - signpost at the end of a level
00017D08                            ; ---------------------------------------------------------------------------
00017D08                            
00017D08                            Obj0D:					; XREF: Obj_Index
00017D08 7000                       		moveq	#0,d0
00017D0A 1028 0024                  		move.b	routine(a0),d0
00017D0E 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
00017D12 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
00017D16 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
00017D1C 4EBA A906                  		jsr	AnimateSprite
00017D20 4EBA DF26                  		jsr	DisplaySprite
00017D24 4EF9 0000 0000             		jmp	MarkObjGone3
00017D2A                            ; ===========================================================================
00017D2A 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
00017D2C 0000                       		dc.w Obj0D_Touch-Obj0D_Index
00017D2E 0000                       		dc.w Obj0D_Spin-Obj0D_Index
00017D30 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
00017D32 0000                       		dc.w locret_ED1A-Obj0D_Index
00017D34                            ; ===========================================================================
00017D34                            
00017D34                            Obj0D_Main:				; XREF: Obj0D_Index
00017D34 5428 0024                  		addq.b	#2,routine(a0)
00017D38 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
00017D40 317C 0680 0002             		move.w	#$680,2(a0)
00017D46 117C 0004 0001             		move.b	#4,1(a0)
00017D4C 117C 0018 0023             		move.b	#$18,width_pixels(a0)
00017D52 317C 0200 0018             		move.w	#$200,priority(a0)
00017D58                            
00017D58                            Obj0D_Touch:				; XREF: Obj0D_Index
00017D58 3038 D008                  		move.w	($FFFFD008).w,d0
00017D5C 9068 0008                  		sub.w	8(a0),d0
00017D60 6500                       		bcs.s	locret_EBBA
00017D62 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00017D66 6400                       		bcc.s	locret_EBBA	; if not, branch
00017D68 303C 004D                  		move.w	#$4D,d0
00017D6C 4EB9 0000 3212             		jsr	(PlaySound).l	; play signpost	sound
00017D72 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00017D76 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
00017D7C 5428 0024                  		addq.b	#2,routine(a0)
00017D80                            
00017D80                            locret_EBBA:
00017D80 4E75                       		rts	
00017D82                            ; ===========================================================================
00017D82                            
00017D82                            Obj0D_Spin:				; XREF: Obj0D_Index
00017D82 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
00017D86 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
00017D88 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
00017D8E 5228 001C                  		addq.b	#1,anim(a0)	; next spin cycle
00017D92 0C28 0003 001C             		cmpi.b	#3,anim(a0)	; have 3 spin cycles completed?
00017D98 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
00017D9A 5428 0024                  		addq.b	#2,routine(a0)
00017D9E                            
00017D9E                            Obj0D_Sparkle:
00017D9E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00017DA2 6A00                       		bpl.s	locret_EC42	; if time remains, branch
00017DA4 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
00017DAA 7000                       		moveq	#0,d0
00017DAC 1028 0034                  		move.b	$34(a0),d0
00017DB0 5428 0034                  		addq.b	#2,$34(a0)
00017DB4 0228 000E 0034             		andi.b	#$E,$34(a0)
00017DBA 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
00017DBE 4EBA E954                  		jsr	SingleObjLoad
00017DC2 6600                       		bne.s	locret_EC42
00017DC4 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
00017DC8 137C 0006 0024             		move.b	#6,routine(a1)	; jump to ring sparkle subroutine
00017DCE 101A                       		move.b	(a2)+,d0
00017DD0 4880                       		ext.w	d0
00017DD2 D068 0008                  		add.w	8(a0),d0
00017DD6 3340 0008                  		move.w	d0,8(a1)
00017DDA 101A                       		move.b	(a2)+,d0
00017DDC 4880                       		ext.w	d0
00017DDE D068 000C                  		add.w	$C(a0),d0
00017DE2 3340 000C                  		move.w	d0,$C(a1)
00017DE6 237C 0001 1D18 0004        		move.l	#Map_obj25,4(a1)
00017DEE 337C 27B2 0002             		move.w	#$27B2,2(a1)
00017DF4 137C 0004 0001             		move.b	#4,1(a1)
00017DFA 337C 0100 0018             		move.w	#$100,priority(a1)
00017E00 137C 0008 0023             		move.b	#8,width_pixels(a1)
00017E06                            
00017E06                            locret_EC42:
00017E06 4E75                       		rts	
00017E08                            ; ===========================================================================
00017E08 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00017E0A 0808                       		dc.b	8,   8
00017E0C F000                       		dc.b -$10,   0
00017E0E 18F8                       		dc.b  $18,  -8
00017E10 00F8                       		dc.b	0,  -8
00017E12 1000                       		dc.b  $10,   0
00017E14 E808                       		dc.b -$18,   8
00017E16 1810                       		dc.b  $18, $10
00017E18                            ; ===========================================================================
00017E18                            
00017E18                            Obj0D_SonicRun:				; XREF: Obj0D_Index
00017E18 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00017E1C 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00017E20 0838 0001 D022             		btst	#1,($FFFFD022).w
00017E26 6600                       		bne.s	loc_EC70
00017E28 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00017E2E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
00017E34                            
00017E34                            loc_EC70:
00017E34 4A38 D000                  		tst.b	($FFFFD000).w
00017E38 6700                       		beq.s	loc_EC86
00017E3A 3038 D008                  		move.w	($FFFFD008).w,d0
00017E3E 3238 F72A                  		move.w	($FFFFF72A).w,d1
00017E42 0641 0128                  		addi.w	#$128,d1
00017E46 B041                       		cmp.w	d1,d0
00017E48 6500                       		bcs.s	locret_ECEE
00017E4A                            
00017E4A                            loc_EC86:
00017E4A 5428 0024                  		addq.b	#2,routine(a0)
00017E4E                            
00017E4E                            ; ---------------------------------------------------------------------------
00017E4E                            ; Subroutine to	set up bonuses at the end of an	act
00017E4E                            ; ---------------------------------------------------------------------------
00017E4E                            
00017E4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E4E                            
00017E4E                            
00017E4E                            GotThroughAct:				; XREF: Obj3E_EndAct
00017E4E 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00017E52 6600                       		bne.s	locret_ECEE
00017E54 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00017E5A 42B8 FE2C                  		clr.l	($FFFFFE2C).w	; disable shield and invincibility ($FFFFFE2C-$FFFFFE2F)
00017E5E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00017E62                            ;		clr.b	($FFFFFE2E).w
00017E62 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00017E68 7010                       		moveq	#$10,d0
00017E6A 4EB9 0000 3728             		jsr	(NewPLC).l	; load title card patterns
00017E70 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00017E76 7000                       		moveq	#0,d0
00017E78 1038 FE23                  		move.b	(v_timemin).w,d0
00017E7C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00017E80 7200                       		moveq	#0,d1
00017E82 1238 FE24                  		move.b	(v_timesec).w,d1
00017E86 D041                       		add.w	d1,d0		; add up your time
00017E88 80FC 000F                  		divu.w	#15,d0		; divide by 15
00017E8C 7214                       		moveq	#$14,d1
00017E8E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00017E90 6500                       		bcs.s	loc_ECD0	; if not, branch
00017E92 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00017E94                            
00017E94                            loc_ECD0:
00017E94 D040                       		add.w	d0,d0
00017E96 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00017E9C 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00017EA0 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00017EA4 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00017EA8 303C 0029                  		move.w	#$29,d0
00017EAC 4EB9 0000 3212             		jsr	(PlaySound).l ;	play "Sonic got	through" music
00017EB2 303C 0000                  		move.w	#$0,d0
00017EB6 4EB9 0000 329E             		jsr	(SetTempo).l	; run music at normal speed
00017EBC                            locret_ECEE:
00017EBC 4E75                       		rts	
00017EBE                            ; End of function GotThroughAct
00017EBE                            
00017EBE                            ; ===========================================================================
00017EBE 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00017ED2 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00017EE8                            ; ===========================================================================
00017EE8                            
00017EE8                            locret_ED1A:				; XREF: Obj0D_Index
00017EE8 4E75                       		rts	
00017EEA                            ; ===========================================================================
00017EEA                            Ani_obj0D:
00017EEA                            	include "_anim\obj0D.asm"
00017EEA                            ; ---------------------------------------------------------------------------
00017EEA                            ; Animation script - signpost
00017EEA                            ; ---------------------------------------------------------------------------
00017EEA 0000                       		dc.w byte_ED24-Ani_obj0D
00017EEC 0000                       		dc.w byte_ED28-Ani_obj0D
00017EEE 0000                       		dc.w byte_ED2E-Ani_obj0D
00017EF0 0000                       		dc.w byte_ED34-Ani_obj0D
00017EF2 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
00017EF6 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
00017EFC 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
00017F02 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
00017F06 00                         		even
00017F06 00                         		even
00017F06                            
00017F06                            ; ---------------------------------------------------------------------------
00017F06                            ; Sprite mappings - signpost
00017F06                            ; ---------------------------------------------------------------------------
00017F06                            Map_obj0D:
00017F06                            	include "_maps\obj0D.asm"
00017F06                            ; ---------------------------------------------------------------------------
00017F06                            ; Sprite mappings - signpost
00017F06                            ; ---------------------------------------------------------------------------
00017F06 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
00017F0A 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
00017F0E 0000                       		dc.w byte_ED73-Map_obj0D
00017F10 03                         byte_ED42:	dc.b 3
00017F11 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
00017F16 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
00017F1B 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00017F20 02                         byte_ED52:	dc.b 2
00017F21 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
00017F26 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00017F2B 02                         byte_ED5D:	dc.b 2
00017F2C F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
00017F31 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00017F36 02                         byte_ED68:	dc.b 2
00017F37 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00017F3C 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00017F41 03                         byte_ED73:	dc.b 3
00017F42 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
00017F47 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00017F4C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00017F52 00                         		even
00017F52 00                         		even
00017F52                            
00017F52                            ; ===========================================================================
00017F52                            ; ---------------------------------------------------------------------------
00017F52                            ; Object 4C - lava geyser / lavafall producer (MZ)
00017F52                            ; ---------------------------------------------------------------------------
00017F52                            
00017F52                            Obj4C:					; XREF: Obj_Index
00017F52 7000                       		moveq	#0,d0
00017F54 1028 0024                  		move.b	routine(a0),d0
00017F58 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00017F5C 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
00017F60 6000 0000                  		bra.w	Obj4D_ChkDel
00017F64                            ; ===========================================================================
00017F64 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
00017F66 0000                       		dc.w loc_EDCC-Obj4C_Index
00017F68 0000                       		dc.w loc_EE3E-Obj4C_Index
00017F6A 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00017F6C 0000                       		dc.w Obj4C_Display-Obj4C_Index
00017F6E 0000                       		dc.w Obj4C_Delete-Obj4C_Index
00017F70                            ; ===========================================================================
00017F70                            
00017F70                            Obj4C_Main:				; XREF: Obj4C_Index
00017F70 5428 0024                  		addq.b	#2,routine(a0)
00017F74 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
00017F7C 317C E3A8 0002             		move.w	#$E3A8,2(a0)
00017F82 117C 0004 0001             		move.b	#4,1(a0)
00017F88 317C 0080 0018             		move.w	#$80,priority(a0)
00017F8E 117C 0038 0023             		move.b	#$38,width_pixels(a0)
00017F94 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
00017F9A                            
00017F9A                            loc_EDCC:				; XREF: Obj4C_Index
00017F9A 5368 0032                  		subq.w	#1,$32(a0)
00017F9E 6A00                       		bpl.s	locret_EDF0
00017FA0 3168 0034 0032             		move.w	$34(a0),$32(a0)
00017FA6 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017FAA 3228 000C                  		move.w	$C(a0),d1
00017FAE B041                       		cmp.w	d1,d0
00017FB0 6400                       		bcc.s	locret_EDF0
00017FB2 0441 0170                  		subi.w	#$170,d1
00017FB6 B041                       		cmp.w	d1,d0
00017FB8 6500                       		bcs.s	locret_EDF0
00017FBA 5428 0024                  		addq.b	#2,routine(a0)
00017FBE                            
00017FBE                            locret_EDF0:
00017FBE 4E75                       		rts	
00017FC0                            ; ===========================================================================
00017FC0                            
00017FC0                            Obj4C_MakeLava:				; XREF: Obj4C_Index
00017FC0 5428 0024                  		addq.b	#2,routine(a0)
00017FC4 4EBA E764                  		jsr	SingleObjLoad2
00017FC8 6600                       		bne.s	loc_EE18
00017FCA 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
00017FCE 3368 0008 0008             		move.w	8(a0),8(a1)
00017FD4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017FDA 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
00017FE0 2348 003C                  		move.l	a0,$3C(a1)
00017FE4                            
00017FE4                            loc_EE18:
00017FE4 117C 0001 001C             		move.b	#1,anim(a0)
00017FEA 4A28 0028                  		tst.b	subtype(a0)		; is object type 00 (geyser) ?
00017FEE 6700                       		beq.s	Obj4C_Type00	; if yes, branch
00017FF0 117C 0004 001C             		move.b	#4,anim(a0)
00017FF6 6000                       		bra.s	Obj4C_Display
00017FF8                            ; ===========================================================================
00017FF8                            
00017FF8                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
00017FF8 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
00017FFC 08E9 0001 0022             		bset	#1,status(a1)
00018002 337C FA80 0012             		move.w	#-$580,y_vel(a1)
00018008 6000                       		bra.s	Obj4C_Display
0001800A                            ; ===========================================================================
0001800A                            
0001800A                            loc_EE3E:				; XREF: Obj4C_Index
0001800A 4A28 0028                  		tst.b	subtype(a0)		; is object type 00 (geyser) ?
0001800E 6700                       		beq.s	Obj4C_Display	; if yes, branch
00018010 5428 0024                  		addq.b	#2,routine(a0)
00018014 4E75                       		rts	
00018016                            ; ===========================================================================
00018016                            
00018016                            Obj4C_Display:				; XREF: Obj4C_Index
00018016 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0001801C 4EBA A606                  		jsr	AnimateSprite
00018020 4EBA DC26                  		jsr	DisplaySprite
00018024 4E75                       		rts	
00018026                            ; ===========================================================================
00018026                            
00018026                            Obj4C_Delete:				; XREF: Obj4C_Index
00018026 117C 0000 001C             		move.b	#0,anim(a0)
0001802C 117C 0002 0024             		move.b	#2,routine(a0)
00018032 4A28 0028                  		tst.b	subtype(a0)
00018036 6700 DBC4                  		beq.w	DeleteObject
0001803A 4E75                       		rts	
0001803C                            ; ===========================================================================
0001803C                            ; ---------------------------------------------------------------------------
0001803C                            ; Object 4D - lava geyser / lavafall (MZ)
0001803C                            ; ---------------------------------------------------------------------------
0001803C                            
0001803C                            Obj4D:					; XREF: Obj_Index
0001803C 7000                       		moveq	#0,d0
0001803E 1028 0024                  		move.b	routine(a0),d0
00018042 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
00018046 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0001804A 6000 DBFC                  		bra.w	DisplaySprite
0001804E                            ; ===========================================================================
0001804E 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00018050 0000                       		dc.w Obj4D_Action-Obj4D_Index
00018052 0000                       		dc.w loc_EFFC-Obj4D_Index
00018054 0000                       		dc.w Obj4D_Delete-Obj4D_Index
00018056                            
00018056 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0001805A                            ; ===========================================================================
0001805A                            
0001805A                            Obj4D_Main:				; XREF: Obj4D_Index
0001805A 5428 0024                  		addq.b	#2,routine(a0)
0001805E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00018064 4A28 0028                  		tst.b	subtype(a0)
00018068 6700                       		beq.s	loc_EEA4
0001806A 0468 0250 000C             		subi.w	#$250,$C(a0)
00018070                            
00018070                            loc_EEA4:
00018070 7000                       		moveq	#0,d0
00018072 1028 0028                  		move.b	subtype(a0),d0
00018076 D040                       		add.w	d0,d0
00018078 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),y_vel(a0)
0001807E 2248                       		movea.l	a0,a1
00018080 7201                       		moveq	#1,d1
00018082 6100                       		bsr.s	Obj4D_MakeLava
00018084 6000                       		bra.s	loc_EF10
00018086                            ; ===========================================================================
00018086                            
00018086                            Obj4D_Loop:
00018086 4EBA E6A2                  		jsr	SingleObjLoad2
0001808A 6600                       		bne.s	loc_EF0A
0001808C                            
0001808C                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0001808C 12BC 004D                  		move.b	#$4D,0(a1)
00018090 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
00018098 337C 63A8 0002             		move.w	#$63A8,2(a1)
0001809E 137C 0004 0001             		move.b	#4,1(a1)
000180A4 137C 0020 0023             		move.b	#$20,width_pixels(a1)
000180AA 3368 0008 0008             		move.w	8(a0),8(a1)
000180B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000180B6 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
000180BC 337C 0080 0018             		move.w	#$80,priority(a1)
000180C2 137C 0005 001C             		move.b	#5,anim(a1)
000180C8 4A28 0028                  		tst.b	subtype(a0)
000180CC 6700                       		beq.s	loc_EF0A
000180CE 137C 0002 001C             		move.b	#2,anim(a1)
000180D4                            
000180D4                            loc_EF0A:
000180D4 51C9 FFB0                  		dbf	d1,Obj4D_Loop
000180D8 4E75                       		rts	
000180DA                            ; ===========================================================================
000180DA                            
000180DA                            loc_EF10:				; XREF: Obj4D_Main
000180DA 0669 0060 000C             		addi.w	#$60,$C(a1)
000180E0 3368 0030 0030             		move.w	$30(a0),$30(a1)
000180E6 0669 0060 0030             		addi.w	#$60,$30(a1)
000180EC 137C 0093 0020             		move.b	#$93,collision_flags(a1)
000180F2 137C 0080 0016             		move.b	#$80,$16(a1)
000180F8 08E9 0004 0001             		bset	#4,1(a1)
000180FE 5829 0024                  		addq.b	#4,routine(a1)
00018102 2348 003C                  		move.l	a0,$3C(a1)
00018106 4A28 0028                  		tst.b	subtype(a0)
0001810A 6700                       		beq.s	Obj4D_PlaySnd
0001810C 7200                       		moveq	#0,d1
0001810E 4EBA FF76                  		jsr	Obj4D_Loop
00018112 5429 0024                  		addq.b	#2,routine(a1)
00018116 08E9 0004 0002             		bset	#4,2(a1)
0001811C 0669 0100 000C             		addi.w	#$100,$C(a1)
00018122 137C 0000 0018             		move.b	#0,priority(a1)
00018128 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001812E 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00018134 117C 0000 0028             		move.b	#0,subtype(a0)
0001813A                            
0001813A                            Obj4D_PlaySnd:
0001813A 303C 00C2                  		move.w	#$C2,d0
0001813E 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play flame sound
00018144                            
00018144                            Obj4D_Action:				; XREF: Obj4D_Index
00018144 7000                       		moveq	#0,d0
00018146 1028 0028                  		move.b	subtype(a0),d0
0001814A D040                       		add.w	d0,d0
0001814C 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00018150 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00018154 4EBA DA8C                  		jsr	SpeedToPos
00018158 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0001815E 4EBA A4C4                  		jsr	AnimateSprite
00018162                            
00018162                            Obj4D_ChkDel:				; XREF: Obj4C
00018162 4EF9 0000 0000             		jmp	MarkObjGone3
00018168                            ; ===========================================================================
00018168 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0001816A 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0001816C                            ; ===========================================================================
0001816C                            
0001816C                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0001816C 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; increase object's falling speed
00018172 3028 0030                  		move.w	$30(a0),d0
00018176 B068 000C                  		cmp.w	$C(a0),d0
0001817A 6400                       		bcc.s	locret_EFDA
0001817C 5828 0024                  		addq.b	#4,routine(a0)
00018180 2268 003C                  		movea.l	$3C(a0),a1
00018184 137C 0003 001C             		move.b	#3,anim(a1)
0001818A                            
0001818A                            locret_EFDA:
0001818A 4E75                       		rts	
0001818C                            ; ===========================================================================
0001818C                            
0001818C                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0001818C 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; increase object's falling speed
00018192 3028 0030                  		move.w	$30(a0),d0
00018196 B068 000C                  		cmp.w	$C(a0),d0
0001819A 6400                       		bcc.s	locret_EFFA
0001819C 5828 0024                  		addq.b	#4,routine(a0)
000181A0 2268 003C                  		movea.l	$3C(a0),a1
000181A4 137C 0001 001C             		move.b	#1,anim(a1)
000181AA                            
000181AA                            locret_EFFA:
000181AA 4E75                       		rts	
000181AC                            ; ===========================================================================
000181AC                            
000181AC                            loc_EFFC:				; XREF: Obj4D_Index
000181AC 2268 003C                  		movea.l	$3C(a0),a1
000181B0 0C29 0006 0024             		cmpi.b	#6,routine(a1)
000181B6 6700 0000                  		beq.w	Obj4D_Delete
000181BA 3029 000C                  		move.w	$C(a1),d0
000181BE 0640 0060                  		addi.w	#$60,d0
000181C2 3140 000C                  		move.w	d0,$C(a0)
000181C6 9068 0030                  		sub.w	$30(a0),d0
000181CA 4440                       		neg.w	d0
000181CC 7208                       		moveq	#8,d1
000181CE 0C40 0040                  		cmpi.w	#$40,d0
000181D2 6C00                       		bge.s	loc_F026
000181D4 720B                       		moveq	#$B,d1
000181D6                            
000181D6                            loc_F026:
000181D6 0C40 0080                  		cmpi.w	#$80,d0
000181DA 6F00                       		ble.s	loc_F02E
000181DC 720E                       		moveq	#$E,d1
000181DE                            
000181DE                            loc_F02E:
000181DE 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
000181E2 6A00                       		bpl.s	loc_F04C
000181E4 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
000181EA 5228 001B                  		addq.b	#1,anim_frame(a0)
000181EE 0C28 0002 001B             		cmpi.b	#2,anim_frame(a0)
000181F4 6500                       		bcs.s	loc_F04C
000181F6 117C 0000 001B             		move.b	#0,anim_frame(a0)
000181FC                            
000181FC                            loc_F04C:
000181FC 1028 001B                  		move.b	anim_frame(a0),d0
00018200 D001                       		add.b	d1,d0
00018202 1140 001A                  		move.b	d0,mapping_frame(a0)
00018206 6000 FF5A                  		bra.w	Obj4D_ChkDel
0001820A                            ; ===========================================================================
0001820A                            
0001820A                            Obj4D_Delete:				; XREF: Obj4D_Index
0001820A 6000 D9F0                  		bra.w	DeleteObject
0001820E                            ; ===========================================================================
0001820E                            ; ---------------------------------------------------------------------------
0001820E                            ; Object 4E - advancing	wall of	lava (MZ)
0001820E                            ; ---------------------------------------------------------------------------
0001820E                            
0001820E                            Obj4E:					; XREF: Obj_Index
0001820E 7000                       		moveq	#0,d0
00018210 1028 0024                  		move.b	routine(a0),d0
00018214 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00018218 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0001821C                            ; ===========================================================================
0001821C 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0001821E 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00018220 0000                       		dc.w Obj4E_Action-Obj4E_Index
00018222 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00018224 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00018226                            ; ===========================================================================
00018226                            
00018226                            Obj4E_Main:				; XREF: Obj4E_Index
00018226 5828 0024                  		addq.b	#4,routine(a0)
0001822A 2248                       		movea.l	a0,a1
0001822C 7201                       		moveq	#1,d1
0001822E 6000                       		bra.s	Obj4E_Main2
00018230                            ; ===========================================================================
00018230                            
00018230                            Obj4E_Loop:
00018230 4EBA E4F8                  		jsr	SingleObjLoad2
00018234 6600                       		bne.s	loc_F0C8
00018236                            
00018236                            Obj4E_Main2:				; XREF: Obj4E_Main
00018236 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0001823A 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00018242 337C 63A8 0002             		move.w	#$63A8,2(a1)
00018248 137C 0004 0001             		move.b	#4,1(a1)
0001824E 137C 0050 0023             		move.b	#$50,width_pixels(a1)
00018254 3368 0008 0008             		move.w	8(a0),8(a1)
0001825A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018260 337C 0080 0018             		move.w	#$80,priority(a1)
00018266 137C 0000 001C             		move.b	#0,anim(a1)
0001826C 137C 0094 0020             		move.b	#$94,collision_flags(a1)
00018272 2348 003C                  		move.l	a0,$3C(a1)
00018276                            
00018276                            loc_F0C8:
00018276 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0001827A                            
0001827A 5C29 0024                  		addq.b	#6,routine(a1)
0001827E 137C 0004 001A             		move.b	#4,mapping_frame(a1)
00018284                            
00018284                            Obj4E_Action:				; XREF: Obj4E_Index
00018284 3038 D008                  		move.w	($FFFFD008).w,d0
00018288 9068 0008                  		sub.w	8(a0),d0
0001828C 6400                       		bcc.s	Obj4E_ChkSonic
0001828E 4440                       		neg.w	d0
00018290                            
00018290                            Obj4E_ChkSonic:
00018290 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00018294 6400                       		bcc.s	Obj4E_Move	; if not, branch
00018296 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001829A 9068 000C                  		sub.w	$C(a0),d0
0001829E 6400                       		bcc.s	loc_F0F4
000182A0 4440                       		neg.w	d0
000182A2                            
000182A2                            loc_F0F4:
000182A2 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
000182A6 6400                       		bcc.s	Obj4E_Move	; if not, branch
000182A8 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
000182AE 6000                       		bra.s	Obj4E_Solid
000182B0                            ; ===========================================================================
000182B0                            
000182B0                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
000182B0 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
000182B4 6700                       		beq.s	Obj4E_Solid	; if not, branch
000182B6 317C 0180 0010             		move.w	#$180,x_vel(a0)	; set object speed
000182BC 5528 0024                  		subq.b	#2,routine(a0)
000182C0                            
000182C0                            Obj4E_Solid:				; XREF: Obj4E_Index
000182C0 323C 002B                  		move.w	#$2B,d1
000182C4 343C 0018                  		move.w	#$18,d2
000182C8 3602                       		move.w	d2,d3
000182CA 5243                       		addq.w	#1,d3
000182CC 3828 0008                  		move.w	8(a0),d4
000182D0 1028 0024                  		move.b	routine(a0),d0
000182D4 3F00                       		move.w	d0,-(sp)
000182D6 4EB9 0000 0000             		jsr	SolidObject
000182DC 301F                       		move.w	(sp)+,d0
000182DE 1140 0024                  		move.b	d0,routine(a0)
000182E2 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
000182E8 6600                       		bne.s	Obj4E_Animate	; if not, branch
000182EA 4268 0010                  		clr.w	x_vel(a0)		; stop object moving
000182EE 4228 0036                  		clr.b	$36(a0)
000182F2                            
000182F2                            Obj4E_Animate:
000182F2 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
000182F8 4EBA A32A                  		jsr	AnimateSprite
000182FC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018302 6400                       		bcc.s	Obj4E_ChkDel
00018304 4EBA D8DC                  		jsr	SpeedToPos
00018308                            
00018308                            Obj4E_ChkDel:
00018308 4EBA D93E                  		jsr	DisplaySprite
0001830C 4A28 0036                  		tst.b	$36(a0)
00018310 6600                       		bne.s	locret_F17E
00018312 3028 0008                  		move.w	8(a0),d0
00018316 0240 FF80                  		andi.w	#$FF80,d0
0001831A 3238 F700                  		move.w	($FFFFF700).w,d1
0001831E 0441 0080                  		subi.w	#$80,d1
00018322 0241 FF80                  		andi.w	#$FF80,d1
00018326 9041                       		sub.w	d1,d0
00018328 0C40 0280                  		cmpi.w	#$280,d0
0001832C 6200                       		bhi.s	Obj4E_ChkGone
0001832E                            
0001832E                            locret_F17E:
0001832E 4E75                       		rts	
00018330                            ; ===========================================================================
00018330                            
00018330                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00018330                            ;		lea	(v_objstate).w,a2
00018330 7000                       		moveq	#0,d0
00018332 3028 0014                  		move.w	respawn_index(a0),d0
00018336                            ;;        move.w	respawn_index(a0),d0
00018336 3440                       	    movea.w	d0,a2
00018338 0892 0007                  		bclr	#7,(a2)
0001833C 117C 0008 0024             		move.b	#8,routine(a0)
00018342 4E75                       		rts	
00018344                            ; ===========================================================================
00018344                            
00018344                            Obj4E_Move2:				; XREF: Obj4E_Index
00018344 2268 003C                  		movea.l	$3C(a0),a1
00018348 0C29 0008 0024             		cmpi.b	#8,routine(a1)
0001834E 6700                       		beq.s	Obj4E_Delete
00018350 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00018356 0468 0080 0008             		subi.w	#$80,8(a0)
0001835C 6000 D8EA                  		bra.w	DisplaySprite
00018360                            ; ===========================================================================
00018360                            
00018360                            Obj4E_Delete:				; XREF: Obj4E_Index
00018360 6000 D89A                  		bra.w	DeleteObject
00018364                            ; ===========================================================================
00018364                            ; ---------------------------------------------------------------------------
00018364                            ; Object 54 - invisible	lava tag (MZ)
00018364                            ; ---------------------------------------------------------------------------
00018364                            
00018364                            Obj54:					; XREF: Obj_Index
00018364 7000                       		moveq	#0,d0
00018366 1028 0024                  		move.b	$24(a0),d0
0001836A 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0001836E 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00018372                            ; ===========================================================================
00018372 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00018374 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00018376                            
00018376 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0001837A                            ; ===========================================================================
0001837A                            
0001837A                            Obj54_Main:				; XREF: Obj54_Index
0001837A 5428 0024                  		addq.b	#2,$24(a0)
0001837E 7000                       		moveq	#0,d0
00018380 1028 0028                  		move.b	$28(a0),d0
00018384 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0001838A 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00018392 117C 0084 0001             		move.b	#$84,1(a0)
00018398                            
00018398                            Obj54_ChkDel:				; XREF: Obj54_Index
00018398 4EF9 0000 0000             		jmp		MarkObjGone3
0001839E                            ; ===========================================================================
0001839E                            ; ---------------------------------------------------------------------------
0001839E                            ; Sprite mappings - invisible lava tag (MZ)
0001839E                            ; ---------------------------------------------------------------------------
0001839E                            Map_obj54:
0001839E                            	include '_maps\obj54.asm'
0001839E                            ; ---------------------------------------------------------------------------
0001839E                            ; Sprite mappings - invisible lava tag (MZ)
0001839E                            ; ---------------------------------------------------------------------------
0001839E 0000                       		dc.w byte_F212-Map_obj54
000183A0 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
000183A2 00                         		even
000183A2 00                         		even
000183A2                            
000183A2                            Ani_obj4C:
000183A2                            	include '_anim\obj4C.asm'
000183A2                            ; ---------------------------------------------------------------------------
000183A2                            ; Animation script - geyser of lava (MZ)
000183A2                            ; ---------------------------------------------------------------------------
000183A2 0000                       		dc.w byte_F220-Ani_obj4C
000183A4 0000                       		dc.w byte_F22A-Ani_obj4C
000183A6 0000                       		dc.w byte_F22E-Ani_obj4C
000183A8 0000                       		dc.w byte_F232-Ani_obj4C
000183AA 0000                       		dc.w byte_F23A-Ani_obj4C
000183AC 0000                       		dc.w byte_F23E-Ani_obj4C
000183AE 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
000183B8 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
000183BC 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
000183C0 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
000183C8 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
000183CC 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
000183D0                            		even
000183D0                            		even
000183D0                            
000183D0                            Ani_obj4E:
000183D0                            	include '_anim\obj4E.asm'
000183D0                            ; ---------------------------------------------------------------------------
000183D0                            ; Animation script - advancing wall of lava (MZ)
000183D0                            ; ---------------------------------------------------------------------------
000183D0 0000                       		dc.w byte_F244-Ani_obj4E
000183D2 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
000183D8                            		even
000183D8                            		even
000183D8                            
000183D8                            ; ---------------------------------------------------------------------------
000183D8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000183D8                            ; ---------------------------------------------------------------------------
000183D8                            Map_obj4C:
000183D8                            	include '_maps\obj4C.asm'
000183D8                            ; ---------------------------------------------------------------------------
000183D8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000183D8                            ; ---------------------------------------------------------------------------
000183D8 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
000183DC 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
000183E0 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
000183E4 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
000183E8 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
000183EC 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
000183F0 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
000183F4 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
000183F8 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
000183FC 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00018400 02                         byte_F272:	dc.b 2
00018401 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00018406 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0001840B 02                         byte_F27D:	dc.b 2
0001840C EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00018411 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00018416 04                         byte_F288:	dc.b 4
00018417 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001841C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00018421 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00018426 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0001842B 04                         byte_F29D:	dc.b 4
0001842C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00018431 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00018436 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001843B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00018440 06                         byte_F2B2:	dc.b 6
00018441 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00018446 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0001844B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00018450 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00018455 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0001845A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0001845F 06                         byte_F2D1:	dc.b 6
00018460 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00018465 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001846A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001846F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00018474 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00018479 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0001847E 02                         byte_F2F0:	dc.b 2
0001847F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00018484 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00018489 02                         byte_F2FB:	dc.b 2
0001848A E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0001848F E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00018494 0A                         byte_F306:	dc.b $A
00018495 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001849A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001849F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000184A4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000184A9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000184AE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000184B3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000184B8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000184BD 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000184C2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000184C7 0A                         byte_F339:	dc.b $A
000184C8 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000184CD 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000184D2 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000184D7 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000184DC D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000184E1 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000184E6 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000184EB F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000184F0 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000184F5 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000184FA 0A                         byte_F36C:	dc.b $A
000184FB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00018500 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00018505 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001850A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001850F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00018514 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00018519 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0001851E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00018523 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00018528 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001852D 06                         byte_F39F:	dc.b 6
0001852E 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00018533 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00018538 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001853D B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00018542 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00018547 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001854C 06                         byte_F3BE:	dc.b 6
0001854D 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00018552 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00018557 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001855C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00018561 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00018566 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001856B 06                         byte_F3DD:	dc.b 6
0001856C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00018571 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00018576 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001857B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00018580 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00018585 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001858A 10                         byte_F3FC:	dc.b $10
0001858B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00018590 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00018595 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001859A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001859F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000185A4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000185A9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000185AE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000185B3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000185B8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000185BD 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
000185C2 300F 0840 00               		dc.b $30, $F, 8, $40, 0
000185C7 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
000185CC 500F 0840 00               		dc.b $50, $F, 8, $40, 0
000185D1 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
000185D6 700F 0840 00               		dc.b $70, $F, 8, $40, 0
000185DB 10                         byte_F44D:	dc.b $10
000185DC 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000185E1 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000185E6 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000185EB B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000185F0 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000185F5 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000185FA F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000185FF F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00018604 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00018609 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001860E 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00018613 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00018618 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0001861D 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00018622 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00018627 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0001862C 10                         byte_F49E:	dc.b $10
0001862D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00018632 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00018637 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001863C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00018641 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00018646 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001864B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00018650 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00018655 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001865A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001865F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00018664 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00018669 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0001866E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00018673 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00018678 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001867D 06                         byte_F4EF:	dc.b 6
0001867E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00018683 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00018688 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001868D E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00018692 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00018697 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001869C 06                         byte_F50E:	dc.b 6
0001869D E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
000186A2 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
000186A7 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000186AC E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000186B1 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000186B6 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000186BB 00                         byte_F52D:	dc.b 0
000186BC                            		even
000186BC                            		even
000186BC                            
000186BC                            ; ---------------------------------------------------------------------------
000186BC                            ; Sprite mappings - advancing wall of lava (MZ)
000186BC                            ; ---------------------------------------------------------------------------
000186BC                            Map_obj4E:
000186BC                            	include '_maps\obj4E.asm'
000186BC                            ; ---------------------------------------------------------------------------
000186BC                            ; Sprite mappings - advancing wall of lava (MZ)
000186BC                            ; ---------------------------------------------------------------------------
000186BC 0000                       		dc.w byte_F538-Map_obj4E
000186BE 0000                       		dc.w byte_F566-Map_obj4E
000186C0 0000                       		dc.w byte_F594-Map_obj4E
000186C2 0000                       		dc.w byte_F5C2-Map_obj4E
000186C4 0000                       		dc.w byte_F5F0-Map_obj4E
000186C6 09                         byte_F538:	dc.b 9
000186C7 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
000186CC 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000186D1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000186D6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000186DB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000186E0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000186E5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000186EA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000186EF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000186F4 09                         byte_F566:	dc.b 9
000186F5 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000186FA 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
000186FF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00018704 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00018709 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001870E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00018713 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00018718 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001871D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00018722 09                         byte_F594:	dc.b 9
00018723 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00018728 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001872D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00018732 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00018737 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001873C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00018741 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00018746 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001874B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00018750 09                         byte_F5C2:	dc.b 9
00018751 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00018756 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0001875B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00018760 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00018765 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001876A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001876F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00018774 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00018779 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001877E 08                         byte_F5F0:	dc.b 8
0001877F E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00018784 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00018789 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001878E 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00018793 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00018798 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001879D E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000187A2 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000187A8 00                         		even
000187A8 00                         		even
000187A8                            
000187A8                            ; ===========================================================================
000187A8                            ; ---------------------------------------------------------------------------
000187A8                            ; Object 40 - Moto Bug enemy (GHZ)
000187A8                            ; ---------------------------------------------------------------------------
000187A8                            
000187A8                            Obj40:					; XREF: Obj_Index
000187A8 7000                       		moveq	#0,d0
000187AA 1028 0024                  		move.b	routine(a0),d0
000187AE 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
000187B2 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
000187B6                            ; ===========================================================================
000187B6 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
000187B8 0000                       		dc.w Obj40_Action-Obj40_Index
000187BA 0000                       		dc.w Obj40_Animate-Obj40_Index
000187BC 0000                       		dc.w Obj40_Delete-Obj40_Index
000187BE                            ; ===========================================================================
000187BE                            
000187BE                            Obj40_Main:				; XREF: Obj40_Index
000187BE 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
000187C6 317C 04F0 0002             		move.w	#$4F0,2(a0)
000187CC 117C 0004 0001             		move.b	#4,1(a0)
000187D2 317C 0200 0018             		move.w	#$200,priority(a0)
000187D8 117C 0014 0023             		move.b	#$14,width_pixels(a0)
000187DE 4A28 001C                  		tst.b	anim(a0)		; is object a smoke trail?
000187E2 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
000187E4 117C 000E 0016             		move.b	#$E,$16(a0)
000187EA 117C 0008 0017             		move.b	#8,$17(a0)
000187F0 117C 000C 0020             		move.b	#$C,collision_flags(a0)
000187F6 4EBA D3CA                  		jsr	ObjectFall
000187FA 4EB9 0000 0000             		jsr	ObjHitFloor
00018800 4A41                       		tst.w	d1
00018802 6A00                       		bpl.s	locret_F68A
00018804 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00018808 317C 0000 0012             		move.w	#0,y_vel(a0)
0001880E 5428 0024                  		addq.b	#2,routine(a0)
00018812 0868 0000 0022             		bchg	#0,status(a0)
00018818                            
00018818                            locret_F68A:
00018818 4E75                       		rts	
0001881A                            ; ===========================================================================
0001881A                            
0001881A                            Obj40_SetSmoke:				; XREF: Obj40_Main
0001881A 5828 0024                  		addq.b	#4,routine(a0)
0001881E 6000 0000                  		bra.w	Obj40_Animate
00018822                            ; ===========================================================================
00018822                            
00018822                            Obj40_Action:				; XREF: Obj40_Index
00018822 7000                       		moveq	#0,d0
00018824 1028 0025                  		move.b	routine_secondary(a0),d0
00018828 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0001882C 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00018830 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00018836 4EBA 9DEC                  		jsr	AnimateSprite
0001883A                            
0001883A                            ; ---------------------------------------------------------------------------
0001883A                            ; Routines to mark an enemy/monitor/ring	as destroyed
0001883A                            ; ---------------------------------------------------------------------------
0001883A                            
0001883A                            RememberState:
0001883A                            MarkObjGone:
0001883A 3028 0008                  		move.w	8(a0),d0
0001883E 0240 FF80                  		andi.w	#$FF80,d0
00018842 3238 F700                  		move.w	($FFFFF700).w,d1
00018846 0441 0080                  		subi.w	#$80,d1
0001884A 0241 FF80                  		andi.w	#$FF80,d1
0001884E 9041                       		sub.w	d1,d0
00018850 0C40 0280                  		cmpi.w	#$280,d0
00018854 6200 0000                  		bhi.w	Mark_ChkGone
00018858 6000 D3EE                  		bra.w	DisplaySprite
0001885C                            ; ===========================================================================
0001885C                            ; ---------------------------------------------------------------------------
0001885C                            ; Subroutine to remember whether an object is destroyed/collected
0001885C                            ; ---------------------------------------------------------------------------
0001885C                            
0001885C                            Mark_ChkGone:
0001885C                            ;		lea	(v_objstate).w,a2
0001885C                            ;		moveq	#0,d0
0001885C 3028 0014                  		move.w	respawn_index(a0),d0
00018860 6700                       		beq.s	Mark_Delete
00018862 3440                       		movea.w	d0,a2
00018864 0892 0007                  		bclr	#7,(a2)
00018868                            
00018868                            Mark_Delete:
00018868 6000 D392                  		bra.w	DeleteObject
0001886C                            
0001886C                            
0001886C                            ; ===========================================================================
0001886C 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0001886E 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00018870                            
00018870                            ; ---------------------------------------------------------------------------
00018870                            ; input: d0 = the object's x position
00018870                            ; ---------------------------------------------------------------------------
00018870                            
00018870                            MarkObjGone2:
00018870                            
00018870 0240 FF80                  		andi.w	#$FF80,d0
00018874 3238 F700                  		move.w	($FFFFF700).w,d1
00018878 0441 0080                  		subi.w	#$80,d1
0001887C 0241 FF80                  		andi.w	#$FF80,d1
00018880 9041                       		sub.w	d1,d0
00018882 0C40 0280                  		cmpi.w	#$280,d0
00018886 6200 0000                  		bhi.w	loc_1B5C4
0001888A 6000 D3BC                  		bra.w	DisplaySprite
0001888E                            ; ---------------------------------------------------------------------------
0001888E                            
0001888E                            loc_1B5C4:
0001888E                            ;		lea	(v_objstate).w,a2
0001888E                            ;		moveq	#0,d0
0001888E 3028 0014                  		move.w	respawn_index(a0),d0
00018892 6700                       		beq.s	loc_1B5D0
00018894 3440                       		movea.w	d0,a2
00018896 0892 0007                  		bclr	#7,(a2)
0001889A                            
0001889A                            loc_1B5D0:
0001889A 6000 D360                  		bra.w	DeleteObject
0001889E                            
0001889E                            ; ===========================================================================
0001889E                            
0001889E                            Obj40_Move:				; XREF: Obj40_Index2
0001889E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000188A2 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000188A4 5428 0025                  		addq.b	#2,routine_secondary(a0)
000188A8 317C FF00 0010             		move.w	#-$100,x_vel(a0)	; move object to the left
000188AE 117C 0001 001C             		move.b	#1,anim(a0)
000188B4 0868 0000 0022             		bchg	#0,status(a0)
000188BA 6600                       		bne.s	locret_F70A
000188BC 4468 0010                  		neg.w	x_vel(a0)		; change direction
000188C0                            
000188C0                            locret_F70A:
000188C0 4E75                       		rts	
000188C2                            ; ===========================================================================
000188C2                            
000188C2                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000188C2 4EBA D31E                  		jsr	SpeedToPos
000188C6 4EB9 0000 0000             		jsr	ObjHitFloor
000188CC 0C41 FFF8                  		cmpi.w	#-8,d1
000188D0 6D00                       		blt.s	Obj40_Pause
000188D2 0C41 000C                  		cmpi.w	#$C,d1
000188D6 6C00                       		bge.s	Obj40_Pause
000188D8 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000188DC 5328 0033                  		subq.b	#1,$33(a0)
000188E0 6A00                       		bpl.s	locret_F756
000188E2 117C 000F 0033             		move.b	#$F,$33(a0)
000188E8 4EBA DE2A                  		jsr	SingleObjLoad
000188EC 6600                       		bne.s	locret_F756
000188EE 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
000188F2 3368 0008 0008             		move.w	8(a0),8(a1)
000188F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000188FE 1368 0022 0022             		move.b	status(a0),status(a1)
00018904 137C 0002 001C             		move.b	#2,anim(a1)
0001890A                            
0001890A                            locret_F756:
0001890A 4E75                       		rts	
0001890C                            ; ===========================================================================
0001890C                            
0001890C                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0001890C 5528 0025                  		subq.b	#2,routine_secondary(a0)
00018910 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00018916 317C 0000 0010             		move.w	#0,x_vel(a0)	; stop the object moving
0001891C 117C 0000 001C             		move.b	#0,anim(a0)
00018922 4E75                       		rts	
00018924                            ; ===========================================================================
00018924                            
00018924                            Obj40_Animate:				; XREF: Obj40_Index
00018924 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001892A 4EBA 9CF8                  		jsr	AnimateSprite
0001892E 6000 D318                  		bra.w	DisplaySprite
00018932                            ; ===========================================================================
00018932                            
00018932                            Obj40_Delete:				; XREF: Obj40_Index
00018932 6000 D2C8                  		bra.w	DeleteObject
00018936                            ; ===========================================================================
00018936                            Ani_obj40:
00018936                            	include "_anim\obj40.asm"
00018936                            ; ---------------------------------------------------------------------------
00018936                            ; Animation script - Motobug enemy
00018936                            ; ---------------------------------------------------------------------------
00018936 0000                       		dc.w byte_F788-Ani_obj40
00018938 0000                       		dc.w byte_F78C-Ani_obj40
0001893A 0000                       		dc.w byte_F792-Ani_obj40
0001893C 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00018940 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00018946 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00018954                            		even
00018954                            		even
00018954                            
00018954                            ; ---------------------------------------------------------------------------
00018954                            ; Sprite mappings - Moto Bug enemy (GHZ)
00018954                            ; ---------------------------------------------------------------------------
00018954                            Map_obj40:
00018954                            	include "_maps\obj40.asm"
00018954                            ; ---------------------------------------------------------------------------
00018954                            ; Sprite mappings - Moto Bug enemy (GHZ)
00018954                            ; ---------------------------------------------------------------------------
00018954 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
00018958 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0001895C 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
00018960 0000                       		dc.w byte_F804-Map_obj40
00018962 04                         byte_F7AE:	dc.b 4
00018963 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00018968 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0001896D F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00018972 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
00018977 04                         byte_F7C3:	dc.b 4
00018978 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0001897D 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
00018982 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
00018987 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
0001898C 05                         byte_F7D8:	dc.b 5
0001898D F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00018992 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
00018997 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0001899C 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
000189A1 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
000189A6 01                         byte_F7F2:	dc.b 1
000189A7 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000189AC 01                         byte_F7F8:	dc.b 1
000189AD FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
000189B2 01                         byte_F7FE:	dc.b 1
000189B3 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
000189B8 00                         byte_F804:	dc.b 0
000189BA 00                         		even
000189BA 00                         		even
000189BA                            
000189BA                            ; ===========================================================================
000189BA                            
000189BA                            ; ----------------------------------------------------------------------------
000189BA                            ; Object 1B - Speed booster from from CPZ
000189BA                            ; ----------------------------------------------------------------------------
000189BA                            ; Sprite_222AC:
000189BA                            Obj4F:
000189BA 7000                       	moveq	#0,d0
000189BC 1028 0024                  	move.b	routine(a0),d0
000189C0 323B 0000                  	move.w	Obj4F_Index(pc,d0.w),d1
000189C4 4EFB 1000                  	jmp	Obj4F_Index(pc,d1.w)
000189C8                            ; ===========================================================================
000189C8                            ; off_222BA:
000189C8                            Obj4F_Index:
000189C8 0000                       	dc.w Obj4F_Init-Obj4F_Index; 0
000189CA 0000                       	dc.w Obj4F_Main-Obj4F_Index; 2
000189CC                            ; ---------------------------------------------------------------------------
000189CC                            ; word_222BE:
000189CC                            Obj4F_BoosterSpeeds:
000189CC 1000                       	dc.w $1000
000189CE 0A00                       	dc.w  $A00
000189D0                            ; ===========================================================================
000189D0                            ; loc_222C2:
000189D0                            Obj4F_Init:
000189D0 5428 0024                  	addq.b	#2,routine(a0) ; Skip to other routine
000189D4 217C 0000 0000 0004        	move.l	#Map_SpdBooster,4(a0) ; the mappings
000189DC 0C38 0000 FE10                     cmpi.b	#0,($FFFFFE10).w	; is level GHZ ?
000189E2 6700 0000                  	beq.w	SFZ_SpecificArtLoc	; if not, branch
000189E6 317C 05F4 0002             	move.w	#($BE80/$20),2(a0) ; the art location
000189EC 6000 0000                          bra     Obj4F_Init_Cont    ; BRanch Always
000189F0                            SFZ_SpecificArtLoc:
000189F0 317C 05F4 0002                     move.w	#($BE80/$20),2(a0) ; the art location
000189F6 6000 0000                          bra     Obj4F_Init_Cont    ; BRanch Always
000189FA                            Obj4F_Init_Cont:	 
000189FA 0028 0004 0001             	ori.b	#4,1(a0)
00018A00 117C 0020 0023             	move.b	#$20,width_pixels(a0)
00018A06 317C 0080 0018             	move.w	#$80,priority(a0)
00018A0C 1028 0028                  	move.b	subtype(a0),d0
00018A10 0240 0002                  	andi.w	#2,d0
00018A14 317B 00B6 0030             	move.w	Obj4F_BoosterSpeeds(pc,d0.w),$30(a0)
00018A1A                            
00018A1A                            ; loc_222F8:
00018A1A                            Obj4F_Main:
00018A1A 1038 FE05                  	move.b	($FFFFFE05).w,d0
00018A1E 0200 0002                  	andi.b	#2,d0
00018A22 1140 001A                  	move.b	d0,mapping_frame(a0)
00018A26 3028 0008                  	move.w	8(a0),d0
00018A2A 3200                       	move.w	d0,d1
00018A2C 0440 0010                  	subi.w	#$10,d0
00018A30 0641 0010                  	addi.w	#$10,d1
00018A34 3428 000C                  	move.w	$C(a0),d2
00018A38 3602                       	move.w	d2,d3
00018A3A 0442 0010                  	subi.w	#$10,d2
00018A3E 0643 0010                  	addi.w	#$10,d3
00018A42                            
00018A42 43F8 D000                  	lea	($FFFFD000).w,a1 ; a1=character
00018A46 0829 0001 0022             	btst	#1,status(a1)
00018A4C 6600                       	bne.s	MOG_Jmptolol
00018A4E 3829 0008                  	move.w	8(a1),d4
00018A52 B840                       	cmp.w	d0,d4
00018A54 6500 0000                  	bcs.w	MOG_Jmptolol
00018A58 B841                       	cmp.w	d1,d4
00018A5A 6400 0000                  	bcc.w	MOG_Jmptolol
00018A5E 3829 000C                  	move.w	$C(a1),d4
00018A62 B842                       	cmp.w	d2,d4
00018A64 6500 0000                  	bcs.w	MOG_Jmptolol
00018A68 B843                       	cmp.w	d3,d4
00018A6A 6400 0000                  	bcc.w	MOG_Jmptolol
00018A6E 3F00                       	move.w	d0,-(sp)
00018A70 6100 0000                  	bsr.w	Obj4F_GiveBoost
00018A74 301F                       	move.w	(sp)+,d0
00018A76                            MOG_Jmptolol:
00018A76 4EFA FDC2                  	jmp	MarkObjGone
00018A7A                            
00018A7A                            ; ===========================================================================
00018A7A                            ; sub_22388:
00018A7A                            Obj4F_GiveBoost:
00018A7A 3029 0010                  	move.w	x_vel(a1),d0
00018A7E 0828 0000 0022             	btst	#0,status(a0)
00018A84 6700                       	beq.s	loc_blah
00018A86 4440                       	neg.w	d0 ; d0 = absolute value of character's x velocity
00018A88                            loc_blah:
00018A88 0C40 1000                  	cmpi.w	#$1000,d0		; is the character already going super fast?
00018A8C 6C00                       	bge.s	Obj4F_GiveBoost_Done	; if yes, branch to not change the speed
00018A8E 3368 0030 0010             	move.w	$30(a0),x_vel(a1)	; make the character go super fast
00018A94 08A9 0000 0022             	bclr	#0,status(a1)	; turn him right
00018A9A 0828 0000 0022             	btst	#0,status(a0)	; was that the correct direction?
00018AA0 6700                       	beq.s	loc_unknown		; if yes, branch
00018AA2 08E9 0000 0022             	bset	#0,status(a1)	; turn him left
00018AA8 4469 0010                  	neg.w	x_vel(a1)	; make the boosting direction left
00018AAC                            loc_unknown:
00018AAC 337C 000F 002E             	move.w	#$F,move_lock(a1)	; don't let him turn around for a few frames
00018AB2 3369 0010 0020             	move.w	x_vel(a1),inertia(a1)	; update his inertia value
00018AB8 08A8 0005 0022             	bclr	#5,status(a0)
00018ABE 08A8 0006 0022             	bclr	#6,status(a0)
00018AC4 08A9 0005 0022             	bclr	#5,status(a1)
00018ACA 31FC 0000 FC00             	move.w	#0,($FFFFFC00).w	; clear screen delay counter 
00018AD0                            	; fix for Sonic when he goes off-screen preventing him from going through
00018AD0                            	; objects before they get rendered on the screen
00018AD0                            ; loc_223D8:
00018AD0                            Obj4F_GiveBoost_Done:
00018AD0 303C 00B1                  	move.w	#$B1,d0 ; spring boing sound
00018AD4 4EF9 0000 3212             	jmp	(PlaySound).l
00018ADA                            ;===================================================================================
00018ADA                            ; The Speed Booster Files
00018ADA                            ;===================================================================================
00018ADA                            Map_SpdBooster:       include   "_maps\Booster.asm"
00018ADA                            ; --------------------------------------------------------------------------------
00018ADA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00018ADA                            ; --------------------------------------------------------------------------------
00018ADA                            
00018ADA                            SME_KG46E:	
00018ADA 0000 0000                  		dc.w SME_KG46E_6-SME_KG46E, SME_KG46E_1B-SME_KG46E	
00018ADE 0000                       		dc.w SME_KG46E_30-SME_KG46E	
00018AE0 04                         SME_KG46E_6:	dc.b 4	
00018AE1 F801 0000 E8               		dc.b $F8, 1, 0, 0, $E8	
00018AE6 F801 0800 F0               		dc.b $F8, 1, 8, 0, $F0	
00018AEB F801 0000 08               		dc.b $F8, 1, 0, 0, 8	
00018AF0 F801 0800 10               		dc.b $F8, 1, 8, 0, $10	
00018AF5 04                         SME_KG46E_1B:	dc.b 4	
00018AF6 F801 0000 E8               		dc.b $F8, 1, 0, 0, $E8	
00018AFB F801 0800 F0               		dc.b $F8, 1, 8, 0, $F0	
00018B00 F801 0000 08               		dc.b $F8, 1, 0, 0, 8	
00018B05 F801 0800 10               		dc.b $F8, 1, 8, 0, $10	
00018B0A 00                         SME_KG46E_30:	dc.b 0	
00018B0C 00                         		even
00018B0C 00                         		even
00018B0C                            
00018B0C                            Artnem_SpdBooster:    incbin	artnem\speedbooster_obj4f.bin	; shield
00018B7A                            		even		
00018B7A                            
00018B7A                            ;===================================================================================
00018B7A                            ; The Speed Booster Files
00018B7A                            ;===================================================================================
00018B7A                            
00018B7A                            ; =============== S U B R O U T I N E =======================================
00018B7A                            
00018B7A                            MarkObjGone3:
00018B7A                            Delete_Sprite_If_Not_In_Range:
00018B7A                            
00018B7A 3028 0008                  		move.w	8(a0),d0
00018B7E 0240 FF80                  		andi.w	#$FF80,d0
00018B82 3238 F700                  		move.w	($FFFFF700).w,d1
00018B86 0441 0080                  		subi.w	#$80,d1
00018B8A 0241 FF80                  		andi.w	#$FF80,d1
00018B8E 9041                       		sub.w	d1,d0
00018B90 0C40 0280                  		cmpi.w	#$280,d0
00018B94 6200 0000                  		bhi.w	loc_1B5EA
00018B98 4E75                       		rts	
00018B9A                            		
00018B9A                            ; ---------------------------------------------------------------------------
00018B9A                            
00018B9A                            loc_1B5EA:
00018B9A                            ;		lea	(v_objstate).w,a2
00018B9A 7000                       		moveq	#0,d0
00018B9C 3028 0014                  		move.w	respawn_index(a0),d0
00018BA0                            ;        move.w	respawn_index(a0),d0
00018BA0 6700                       		beq.s	loc_1B5F6
00018BA2 3440                       	    movea.w	d0,a2
00018BA4                            ;		movea.w	d0,a2
00018BA4 0892 0007                  		bclr	#7,(a2)
00018BA8                            
00018BA8                            loc_1B5F6:
00018BA8 6000 D052                  		bra.w	DeleteObject
00018BAC                            ; End of function Delete_Sprite_If_Not_In_Range
00018BAC                            
00018BAC                            ; =============== S U B R O U T I N E =======================================
00018BAC                            
00018BAC                            MarkObjGone4:
00018BAC                            Delete_Sprite_If_Not_In_Range2:
00018BAC                            
00018BAC 0240 FF80                  		andi.w	#$FF80,d0
00018BB0 3238 F700                  		move.w	($FFFFF700).w,d1
00018BB4 0441 0080                  		subi.w	#$80,d1
00018BB8 0241 FF80                  		andi.w	#$FF80,d1
00018BBC 9041                       		sub.w	d1,d0
00018BBE 0C40 0280                  		cmpi.w	#$280,d0
00018BC2 6200 0000                  		bhi.w	@loc_1B5EA
00018BC6 4E75                       		rts	
00018BC8                            
00018BC8                            ; ---------------------------------------------------------------------------
00018BC8                            
00018BC8                            @loc_1B5EA:
00018BC8                            ;		lea	(v_objstate).w,a2
00018BC8 7000                       		moveq	#0,d0
00018BCA 3028 0014                  		move.w	respawn_index(a0),d0
00018BCE                            ;        move.w	respawn_index(a0),d0
00018BCE 6700                       		beq.s	@loc_1B5F6
00018BD0 3440                       	    movea.w	d0,a2
00018BD2                            ;		movea.w	d0,a2
00018BD2 0892 0007                  		bclr	#7,(a2)
00018BD6                            
00018BD6                            @loc_1B5F6:
00018BD6 6000 D024                  		bra.w	DeleteObject	
00018BDA                            
00018BDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BDA                            
00018BDA                            
00018BDA                            
00018BDA                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00018BDA 3038 FE04                  		move.w	($FFFFFE04).w,d0
00018BDE D047                       		add.w	d7,d0
00018BE0 0240 0003                  		andi.w	#3,d0
00018BE4 6600                       		bne.s	loc_F836
00018BE6 7600                       		moveq	#0,d3
00018BE8 1628 0023                  		move.b	width_pixels(a0),d3
00018BEC 4A68 0010                  		tst.w	x_vel(a0)
00018BF0 6B00                       		bmi.s	loc_F82C
00018BF2 4EB9 0000 0000             		jsr	ObjHitWallRight
00018BF8 4A41                       		tst.w	d1
00018BFA 6A00                       		bpl.s	loc_F836
00018BFC                            
00018BFC                            loc_F828:
00018BFC 7001                       		moveq	#1,d0
00018BFE 4E75                       		rts	
00018C00                            ; ===========================================================================
00018C00                            
00018C00                            loc_F82C:
00018C00 4643                       		not.w	d3
00018C02 4EB9 0000 0000             		jsr	ObjHitWallLeft
00018C08 4A41                       		tst.w	d1
00018C0A 6BF0                       		bmi.s	loc_F828
00018C0C                            
00018C0C                            loc_F836:
00018C0C 7000                       		moveq	#0,d0
00018C0E 4E75                       		rts	
00018C10                            ; End of function Obj50_ChkWall
00018C10                            
00018C10                            ; ===========================================================================
00018C10                            ; ---------------------------------------------------------------------------
00018C10                            ; Object 50 - Yadrin enemy (SYZ)
00018C10                            ; ---------------------------------------------------------------------------
00018C10                            
00018C10                            Obj50:					; XREF: Obj_Index
00018C10 7000                       		moveq	#0,d0
00018C12 1028 0024                  		move.b	routine(a0),d0
00018C16 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00018C1A 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00018C1E                            ; ===========================================================================
00018C1E 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00018C20 0000                       		dc.w Obj50_Action-Obj50_Index
00018C22                            ; ===========================================================================
00018C22                            
00018C22                            Obj50_Main:				; XREF: Obj50_Index
00018C22 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00018C2A 317C 247B 0002             		move.w	#$247B,2(a0)
00018C30 117C 0004 0001             		move.b	#4,1(a0)
00018C36 317C 0200 0018             		move.w	#$200,priority(a0)
00018C3C 117C 0014 0023             		move.b	#$14,width_pixels(a0)
00018C42 117C 0011 0016             		move.b	#$11,$16(a0)
00018C48 117C 0008 0017             		move.b	#8,$17(a0)
00018C4E 117C 00CC 0020             		move.b	#$CC,collision_flags(a0)
00018C54 4EBA CF6C                  		jsr	ObjectFall
00018C58 4EB9 0000 0000             		jsr	ObjHitFloor
00018C5E 4A41                       		tst.w	d1
00018C60 6A00                       		bpl.s	locret_F89E
00018C62 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00018C66 317C 0000 0012             		move.w	#0,y_vel(a0)
00018C6C 5428 0024                  		addq.b	#2,routine(a0)
00018C70 0868 0000 0022             		bchg	#0,status(a0)
00018C76                            
00018C76                            locret_F89E:
00018C76 4E75                       		rts	
00018C78                            ; ===========================================================================
00018C78                            
00018C78                            Obj50_Action:				; XREF: Obj50_Index
00018C78 7000                       		moveq	#0,d0
00018C7A 1028 0025                  		move.b	routine_secondary(a0),d0
00018C7E 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00018C82 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00018C86 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00018C8C 4EBA 9996                  		jsr	AnimateSprite
00018C90 6000 FBA8                  		bra.w	MarkObjGone
00018C94                            ; ===========================================================================
00018C94 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00018C96 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00018C98                            ; ===========================================================================
00018C98                            
00018C98                            Obj50_Move:				; XREF: Obj50_Index2
00018C98 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00018C9C 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00018C9E 5428 0025                  		addq.b	#2,routine_secondary(a0)
00018CA2 317C FF00 0010             		move.w	#-$100,x_vel(a0)	; move object
00018CA8 117C 0001 001C             		move.b	#1,anim(a0)
00018CAE 0868 0000 0022             		bchg	#0,status(a0)
00018CB4 6600                       		bne.s	locret_F8E2
00018CB6 4468 0010                  		neg.w	x_vel(a0)		; change direction
00018CBA                            
00018CBA                            locret_F8E2:
00018CBA 4E75                       		rts	
00018CBC                            ; ===========================================================================
00018CBC                            
00018CBC                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00018CBC 4EBA CF24                  		jsr	SpeedToPos
00018CC0 4EB9 0000 0000             		jsr	ObjHitFloor
00018CC6 0C41 FFF8                  		cmpi.w	#-8,d1
00018CCA 6D00                       		blt.s	Obj50_Pause
00018CCC 0C41 000C                  		cmpi.w	#$C,d1
00018CD0 6C00                       		bge.s	Obj50_Pause
00018CD2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00018CD6 4EBA FF02                  		jsr	Obj50_ChkWall
00018CDA 6600                       		bne.s	Obj50_Pause
00018CDC 4E75                       		rts	
00018CDE                            ; ===========================================================================
00018CDE                            
00018CDE                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00018CDE 5528 0025                  		subq.b	#2,routine_secondary(a0)
00018CE2 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00018CE8 317C 0000 0010             		move.w	#0,x_vel(a0)
00018CEE 117C 0000 001C             		move.b	#0,anim(a0)
00018CF4 4E75                       		rts	
00018CF6                            ; ===========================================================================
00018CF6                            Ani_obj50:
00018CF6                            	include "_anim\obj50.asm"
00018CF6                            ; ---------------------------------------------------------------------------
00018CF6                            ; Animation script - Yadrin enemy
00018CF6                            ; ---------------------------------------------------------------------------
00018CF6 0000                       		dc.w byte_F920-Ani_obj50
00018CF8 0000                       		dc.w byte_F924-Ani_obj50
00018CFA 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00018CFE 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00018D08                            		even
00018D08                            		even
00018D08                            
00018D08                            ; ---------------------------------------------------------------------------
00018D08                            ; Sprite mappings - Yadrin enemy (SYZ)
00018D08                            ; ---------------------------------------------------------------------------
00018D08                            Map_obj50:
00018D08                            	include "_maps\obj50.asm"
00018D08                            ; ---------------------------------------------------------------------------
00018D08                            ; Sprite mappings - Yadrin enemy (SYZ)
00018D08                            ; ---------------------------------------------------------------------------
00018D08 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
00018D0C 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
00018D10 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00018D14 05                         byte_F93A:	dc.b 5
00018D15 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00018D1A FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00018D1F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00018D24 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00018D29 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00018D2E 05                         byte_F954:	dc.b 5
00018D2F F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00018D34 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00018D39 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00018D3E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00018D43 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00018D48 05                         byte_F96E:	dc.b 5
00018D49 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00018D4E 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00018D53 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00018D58 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00018D5D 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00018D62 05                         byte_F988:	dc.b 5
00018D63 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00018D68 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00018D6D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00018D72 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00018D77 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00018D7C 05                         byte_F9A2:	dc.b 5
00018D7D F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00018D82 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00018D87 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00018D8C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00018D91 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00018D96 05                         byte_F9BC:	dc.b 5
00018D97 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00018D9C 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00018DA1 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00018DA6 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00018DAB 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00018DB0                            		even
00018DB0                            		even
00018DB0                            
00018DB0                            ; ---------------------------------------------------------------------------
00018DB0                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00018DB0                            ;
00018DB0                            ; variables:
00018DB0                            ; d1 = width
00018DB0                            ; d2 = height /	2 (when	jumping)
00018DB0                            ; d3 = height /	2 (when	walking)
00018DB0                            ; d4 = x-axis position
00018DB0                            ; ---------------------------------------------------------------------------
00018DB0                            
00018DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DB0                            
00018DB0                            SolidObjectNew:
00018DB0 4A28 0025                  		tst.b routine_secondary(a0)
00018DB4 6700 0000                  		beq.w	loci_FAC8
00018DB8 3401                       		move.w	d1,d2
00018DBA D442                       		add.w	d2,d2
00018DBC 43F8 D000                  		lea ($FFFFD000).w,a1
00018DC0 0829 0001 0022             		btst #1,status(a1)
00018DC6 6600                       		bne.s loci_F9FE
00018DC8 3029 0008                  		move.w 8(a1),d0
00018DCC 9068 0008                  		sub.w 8(a0),d0
00018DD0 D041                       		add.w d1,d0
00018DD2 6B00                       		bmi.s loci_F9FE
00018DD4 B042                       		cmp.w d2,d0
00018DD6 6500                       		bcs.s loci_FA12
00018DD8                            
00018DD8                            loci_F9FE:
00018DD8 08A9 0003 0022             		bclr #3,status(a1)
00018DDE 08A8 0003 0022             		bclr #3,status(a0)
00018DE4 4228 0025                  		clr.b routine_secondary(a0)
00018DE8 7800                       		moveq #0,d4
00018DEA 4E75                       		rts
00018DEC                            ; ===========================================================================
00018DEC                            
00018DEC                            loci_FA12:
00018DEC 3404                       		move.w d4,d2
00018DEE 4EB9 0000 F440             		jsr MvSonicOnPtfm
00018DF4 7800                       		moveq #0,d4
00018DF6 4E75                       		rts
00018DF8                            ; ===========================================================================
00018DF8                            
00018DF8                            		loci_FA58:
00018DF8 3404                       		move.w d4,d2
00018DFA 4EB9 0000 F440             		jsr MvSonicOnPtfm
00018E00 7800                       		moveq #0,d4
00018E02 4E75                       		rts
00018E04                            ; ===========================================================================
00018E04                            
00018E04                            loci_FAC8:
00018E04 4A28 0001                  		tst.b 1(a0)
00018E08 6A00 0000                  		bpl.w loc_FB92
00018E0C                            
00018E0C                            loci_FAD0:
00018E0C 43F8 D000                  		lea ($FFFFD000).w,a1
00018E10 3029 0008                  		move.w 8(a1),d0
00018E14 9068 0008                  		sub.w 8(a0),d0
00018E18 D041                       		add.w d1,d0
00018E1A 6B00 0000                  		bmi.w loci_FB92
00018E1E 3601                       		move.w d1,d3
00018E20 D643                       		add.w d3,d3
00018E22 B043                       		cmp.w d3,d0
00018E24 6200 0000                  		bhi.w loci_FB92
00018E28 1629 0016                  		move.b $16(a1),d3
00018E2C 4883                       		ext.w d3
00018E2E D443                       		add.w d3,d2
00018E30 3629 000C                  		move.w $C(a1),d3
00018E34 9668 000C                  		sub.w $C(a0),d3
00018E38 5843                       		addq.w #4,d3
00018E3A D642                       		add.w d2,d3
00018E3C 6B00 0000                  		bmi.w loci_FB92
00018E40 3802                       		move.w d2,d4
00018E42 D844                       		add.w d4,d4
00018E44 B644                       		cmp.w d4,d3
00018E46 6400 0000                  		bcc.w loc_FB92
00018E4A                            
00018E4A                            loci_FB0E:
00018E4A 4A38 F7C8                  		tst.b ($FFFFF7C8).w
00018E4E 6B00 0000                  		bmi.w loci_FB92
00018E52 0C38 0006 D024             		cmpi.b #6,($FFFFD024).w
00018E58 6400 0000                  		bcc.w loci_FB92
00018E5C 4A78 FE08                  		tst.w ($FFFFFE08).w
00018E60 6600 0000                  		bne.w loci_FBAC
00018E64 3A00                       		move.w d0,d5
00018E66 B240                       		cmp.w d0,d1
00018E68 6400                       		bcc.s loci_FB36
00018E6A D241                       		add.w d1,d1
00018E6C 9041                       		sub.w d1,d0
00018E6E 3A00                       		move.w d0,d5
00018E70 4445                       		neg.w d5
00018E72                            
00018E72                            loci_FB36:
00018E72 3203                       		move.w d3,d1
00018E74 B443                       		cmp.w d3,d2
00018E76 6400                       		bcc.s loci_FB44
00018E78 5943                       		subq.w #4,d3
00018E7A 9644                       		sub.w d4,d3
00018E7C 3203                       		move.w d3,d1
00018E7E 4441                       		neg.w d1
00018E80                            
00018E80                            loci_FB44:
00018E80 BA41                               cmp.w d1,d5
00018E82 6200 0000                  		bhi.w loci_FBB0
00018E86 0C41 0004                  		cmpi.w #4,d1
00018E8A 6300                       		bls.s loci_FB8C
00018E8C 6000                       		bra.s loci_FBAC
00018E8E                            ; ===========================================================================
00018E8E                            
00018E8E                            loci_FB5E:
00018E8E 6000                       		bra.s   loci_FBAC
00018E90                            ; ===========================================================================
00018E90                            
00018E90                            loci_FB8C:
00018E90 6100                       		bsr.s loci_FBA0
00018E92 7801                       		moveq #1,d4
00018E94 4E75                       		rts
00018E96                            ; ===========================================================================
00018E96                            
00018E96                            loci_FB92:
00018E96 0828 0005 0022             		btst #5,status(a0)
00018E9C 6700                       		beq.s loci_FBAC
00018E9E 337C 0001 001C             		move.w #1,anim(a1) ; use walking animation
00018EA4                            
00018EA4                            loci_FBA0:
00018EA4 08A8 0005 0022             		bclr #5,status(a0)
00018EAA 08A9 0005 0022             		bclr #5,status(a1)
00018EB0                            
00018EB0                            loci_FBAC:
00018EB0 7800                       		moveq #0,d4
00018EB2 4E75                       		rts
00018EB4                            ; ===========================================================================
00018EB4                            
00018EB4                            loci_FBB0:
00018EB4 4A43                       		tst.w d3
00018EB6 6B00                       		bmi.s loci_FBBC
00018EB8 0C43 0010                  		cmpi.w #$10,d3
00018EBC 6500                       		bcs.s loci_FBEE
00018EBE 60D6                       		bra.s loci_FB92
00018EC0                            ; ===========================================================================
00018EC0                            
00018EC0                            loci_FBBC:
00018EC0                            loci_FBD2:
00018EC0 78FF                       		moveq #-1,d4
00018EC2 4E75                       		rts
00018EC4                            ; ===========================================================================
00018EC4                            
00018EC4                            loci_FBD6:
00018EC4 0829 0001 0022             		btst #1,status(a1)
00018ECA 66F4                       		bne.s loci_FBD2
00018ECC 2F08                       		move.l a0,-(sp)
00018ECE 2049                       		movea.l a1,a0
00018ED0 4EB9 0000 0000             		jsr KillCharacter
00018ED6 205F                       		movea.l (sp)+,a0
00018ED8 78FF                       		moveq #-1,d4
00018EDA 4E75                       		rts
00018EDC                            ; ===========================================================================
00018EDC                            
00018EDC                            loci_FBEE:
00018EDC 5943                       		subq.w #4,d3
00018EDE 7200                       		moveq #0,d1
00018EE0 1228 0023                  		move.b width_pixels(a0),d1
00018EE4 3401                       		move.w d1,d2
00018EE6 D442                       		add.w d2,d2
00018EE8 D269 0008                  		add.w 8(a1),d1
00018EEC 9268 0008                  		sub.w 8(a0),d1
00018EF0 6B00                       		bmi.s loci_FC28
00018EF2 B242                       		cmp.w d2,d1
00018EF4 6400                       		bcc.s loci_FC28
00018EF6 4A69 0012                  		tst.w y_vel(a1)
00018EFA 6B00                       		bmi.s loci_FC28
00018EFC 9769 000C                  		sub.w d3,$C(a1)
00018F00 5369 000C                  		subq.w #1,$C(a1)
00018F04 4EB9 0000 0000             		jsr sub_FC2C
00018F0A 117C 0002 0025             		move.b #2,routine_secondary(a0)
00018F10 08E8 0003 0022             		bset #3,status(a0)
00018F16 78FF                       		moveq #-1,d4
00018F18 4E75                       		rts
00018F1A                            ; ===========================================================================
00018F1A                            
00018F1A                            loci_FC28:
00018F1A 7800                       		moveq #0,d4
00018F1C 4E75                       		rts
00018F1E                            
00018F1E                            ; =============== S U B	R O U T	I N E =======================================
00018F1E                            
00018F1E                            
00018F1E                            SolidObject:					  ; ...
00018F1E                            
00018F1E                            ; FUNCTION CHUNK AT 00314F36 SIZE 000000BA BYTES
00018F1E                            
00018F1E 43F8 D000                  		lea	($FFFFD000).w,a1
00018F22 7C03                       		moveq	#3,d6
00018F24 0D28 0022                  		btst	d6,status(a0)
00018F28 6700 0000                  		beq.w	loc_314E2E
00018F2C 3401                       		move.w	d1,d2
00018F2E D442                       		add.w	d2,d2
00018F30 0829 0001 0022             		btst	#1,status(a1)
00018F36 6600                       		bne.s	loc_314BE0
00018F38 3029 0008                  		move.w	x_pos(a1),d0
00018F3C 9068 0008                  		sub.w	x_pos(a0),d0
00018F40 D041                       		add.w	d1,d0
00018F42 6B00                       		bmi.s	loc_314BE0
00018F44 B042                       		cmp.w	d2,d0
00018F46 6500                       		bcs.s	loc_314BF4
00018F48                            
00018F48                            loc_314BE0:					  ; ...
00018F48 08A9 0003 0022             		bclr	#3,status(a1)
00018F4E 08E9 0001 0022             		bset	#1,status(a1)
00018F54 0DA8 0022                  		bclr	d6,status(a0)
00018F58 7800                       		moveq	#0,d4
00018F5A 4E75                       		rts
00018F5C                            ; ---------------------------------------------------------------------------
00018F5C                            
00018F5C                            loc_314BF4:					  ; ...
00018F5C 3404                       		move.w	d4,d2
00018F5E 4EB9 0000 F440             		jsr	MvSonicOnPtfm
00018F64 7800                       		moveq	#0,d4
00018F66 4E75                       		rts
00018F68                            ; ---------------------------------------------------------------------------
00018F68                            
00018F68                            loc_314BFE:					  ; ...
00018F68 43F8 D000                  		lea	($FFFFD000).w,a1
00018F6C 7C03                       		moveq	#3,d6
00018F6E                            
00018F6E                            loc_314C04:					  ; ...
00018F6E 0D28 0022                  		btst	d6,status(a0)
00018F72 6700 0000                  		beq.w	loc_314E36
00018F76 3401                       		move.w	d1,d2
00018F78 D442                       		add.w	d2,d2
00018F7A 0829 0001 0022             		btst	#1,status(a1)
00018F80 6600                       		bne.s	loc_314C28
00018F82 3029 0008                  		move.w	x_pos(a1),d0
00018F86 9068 0008                  		sub.w	x_pos(a0),d0
00018F8A D041                       		add.w	d1,d0
00018F8C 6B00                       		bmi.s	loc_314C28
00018F8E B042                       		cmp.w	d2,d0
00018F90 6500                       		bcs.s	loc_314C3C
00018F92                            
00018F92                            loc_314C28:					  ; ...
00018F92 08A9 0003 0022             		bclr	#3,status(a1)
00018F98 08E9 0001 0022             		bset	#1,status(a1)
00018F9E 0DA8 0022                  		bclr	d6,status(a0)
00018FA2 7800                       		moveq	#0,d4
00018FA4 4E75                       		rts
00018FA6                            ; ---------------------------------------------------------------------------
00018FA6                            
00018FA6                            loc_314C3C:					  ; ...
00018FA6 3404                       		move.w	d4,d2
00018FA8 4EB9 0000 F440             		jsr	MvSonicOnPtfm
00018FAE 7800                       		moveq	#0,d4
00018FB0 4E75                       		rts
00018FB2                            ; ---------------------------------------------------------------------------
00018FB2                            
00018FB2                            SolidObject71:					  ; ...
00018FB2 43F8 D000                  		lea	($FFFFD000).w,a1
00018FB6 7C03                       		moveq	#3,d6
00018FB8                            
00018FB8                            loc_314C4C:					  ; ...
00018FB8 0D28 0022                  		btst	d6,status(a0)
00018FBC 6700 0000                  		beq.w	loc_314D74
00018FC0 3401                       		move.w	d1,d2
00018FC2 D442                       		add.w	d2,d2
00018FC4 0829 0001 0022             		btst	#1,status(a1)
00018FCA 6600                       		bne.s	loc_314C70
00018FCC 3029 0008                  		move.w	x_pos(a1),d0
00018FD0 9068 0008                  		sub.w	x_pos(a0),d0
00018FD4 D041                       		add.w	d1,d0
00018FD6 6B00                       		bmi.s	loc_314C70
00018FD8 B042                       		cmp.w	d2,d0
00018FDA 6500                       		bcs.s	loc_314C84
00018FDC                            
00018FDC                            loc_314C70:					  ; ...
00018FDC 08A9 0003 0022             		bclr	#3,status(a1)
00018FE2 08E9 0001 0022             		bset	#1,status(a1)
00018FE8 0DA8 0022                  		bclr	d6,status(a0)
00018FEC 7800                       		moveq	#0,d4
00018FEE 4E75                       		rts
00018FF0                            ; ---------------------------------------------------------------------------
00018FF0                            
00018FF0                            loc_314C84:					  ; ...
00018FF0 3404                       		move.w	d4,d2
00018FF2 4EB9 0000 F440             		jsr	MvSonicOnPtfm
00018FF8 7800                       		moveq	#0,d4
00018FFA 4E75                       		rts
00018FFC                            ; ---------------------------------------------------------------------------
00018FFC 43F8 D000                  		lea	($FFFFD000).w,a1
00019000 7C03                       		moveq	#3,d6
00019002 0D28 0022                  		btst	d6,status(a0)
00019006 6700 0000                  		beq.w	loc_314DCE
0001900A 3401                       		move.w	d1,d2
0001900C D442                       		add.w	d2,d2
0001900E 0829 0001 0022             		btst	#1,status(a1)
00019014 6600                       		bne.s	loc_314CB8
00019016 3029 0008                  		move.w	x_pos(a1),d0
0001901A 9068 0008                  		sub.w	x_pos(a0),d0
0001901E D041                       		add.w	d1,d0
00019020 6B00                       		bmi.s	loc_314CB8
00019022 B042                       		cmp.w	d2,d0
00019024 6500                       		bcs.s	loc_314CCC
00019026                            
00019026                            loc_314CB8:					  ; ...
00019026 08A9 0003 0022             		bclr	#3,status(a1)
0001902C 08E9 0001 0022             		bset	#1,status(a1)
00019032 0DA8 0022                  		bclr	d6,status(a0)
00019036 7800                       		moveq	#0,d4
00019038 4E75                       		rts
0001903A                            ; ---------------------------------------------------------------------------
0001903A                            
0001903A                            loc_314CCC:					  ; ...
0001903A 3404                       		move.w	d4,d2
0001903C 4EB9 0000 F440             		jsr	MvSonicOnPtfm
00019042 7800                       		moveq	#0,d4
00019044 4E75                       		rts
00019046                            ; ---------------------------------------------------------------------------
00019046                            loc_314CD6:					  ; ...
00019046 43F8 D000                  		lea	($FFFFD000).w,a1
0001904A 7C03                       		moveq	#3,d6
0001904C 0D28 0022                  		btst	d6,status(a0)
00019050 6700 0000                  		beq.w	loc_314D32
00019054 0829 0001 0022             		btst	#1,status(a1)
0001905A 6600                       		bne.s	loc_314CFE
0001905C 3029 0008                  		move.w	x_pos(a1),d0
00019060 9068 0008                  		sub.w	x_pos(a0),d0
00019064 D041                       		add.w	d1,d0
00019066 6B00                       		bmi.s	loc_314CFE
00019068 D241                       		add.w	d1,d1
0001906A B041                       		cmp.w	d1,d0
0001906C 6500                       		bcs.s	loc_314D12
0001906E                            
0001906E                            loc_314CFE:					  ; ...
0001906E 08A9 0003 0022             		bclr	#3,status(a1)
00019074 08E9 0001 0022             		bset	#1,status(a1)
0001907A 0DA8 0022                  		bclr	d6,status(a0)
0001907E 7800                       		moveq	#0,d4
00019080 4E75                       		rts
00019082                            ; ---------------------------------------------------------------------------
00019082                            
00019082                            loc_314D12:					  ; ...
00019082 3028 000C                  		move.w	y_pos(a0),d0
00019086 9042                       		sub.w	d2,d0
00019088 D043                       		add.w	d3,d0
0001908A 7200                       		moveq	#0,d1
0001908C 1229 0016                  		move.b	y_radius(a1),d1
00019090 9041                       		sub.w	d1,d0
00019092 3340 000C                  		move.w	d0,y_pos(a1)
00019096 9868 0008                  		sub.w	x_pos(a0),d4
0001909A 9969 0008                  		sub.w	d4,x_pos(a1)
0001909E 7800                       		moveq	#0,d4
000190A0 4E75                       		rts
000190A2                            ; ---------------------------------------------------------------------------
000190A2                            
000190A2                            loc_314D32:					  ; ...
000190A2 3029 0008                  		move.w	x_pos(a1),d0
000190A6 9068 0008                  		sub.w	x_pos(a0),d0
000190AA D041                       		add.w	d1,d0
000190AC 6B00 0000                  		bmi.w	loc_314F0C
000190B0 3801                       		move.w	d1,d4
000190B2 D844                       		add.w	d4,d4
000190B4 B044                       		cmp.w	d4,d0
000190B6 6200 0000                  		bhi.w	loc_314F0C
000190BA 3A28 000C                  		move.w	y_pos(a0),d5
000190BE DA43                       		add.w	d3,d5
000190C0 1629 0016                  		move.b	y_radius(a1),d3
000190C4 4883                       		ext.w	d3
000190C6 D443                       		add.w	d3,d2
000190C8 3629 000C                  		move.w	y_pos(a1),d3
000190CC 9645                       		sub.w	d5,d3
000190CE 5843                       		addq.w	#4,d3
000190D0 D642                       		add.w	d2,d3
000190D2 6B00 0000                  		bmi.w	loc_314F0C
000190D6 3802                       		move.w	d2,d4
000190D8 D844                       		add.w	d4,d4
000190DA B644                       		cmp.w	d4,d3
000190DC 6400 0000                  		bcc.w	loc_314F0C
000190E0 6000 0000                  		bra.w	loc_314E74
000190E4                            ; ---------------------------------------------------------------------------
000190E4                            
000190E4                            loc_314D74:					  ; ...
000190E4 3029 0008                  		move.w	x_pos(a1),d0
000190E8 9068 0008                  		sub.w	x_pos(a0),d0
000190EC D041                       		add.w	d1,d0
000190EE 6B00 0000                  		bmi.w	loc_314F0C
000190F2 3601                       		move.w	d1,d3
000190F4 D643                       		add.w	d3,d3
000190F6 B043                       		cmp.w	d3,d0
000190F8 6200 0000                  		bhi.w	loc_314F0C
000190FC 3A00                       		move.w	d0,d5
000190FE 0828 0000 0001             		btst	#0,1(a0)
00019104 6700                       		beq.s	loc_314D9A
00019106 4645                       		not.w	d5
00019108 DA43                       		add.w	d3,d5
0001910A                            
0001910A                            loc_314D9A:					  ; ...
0001910A E24D                       		lsr.w	#1,d5
0001910C 1632 5000                  		move.b	(a2,d5.w),d3
00019110 9612                       		sub.b	(a2),d3
00019112 4883                       		ext.w	d3
00019114 3A28 000C                  		move.w	y_pos(a0),d5
00019118 9A43                       		sub.w	d3,d5
0001911A 1629 0016                  		move.b	y_radius(a1),d3
0001911E 4883                       		ext.w	d3
00019120 D443                       		add.w	d3,d2
00019122 3629 000C                  		move.w	y_pos(a1),d3
00019126 9645                       		sub.w	d5,d3
00019128 5843                       		addq.w	#4,d3
0001912A D642                       		add.w	d2,d3
0001912C 6B00 0000                  		bmi.w	loc_314F0C
00019130 3802                       		move.w	d2,d4
00019132 D844                       		add.w	d4,d4
00019134 B644                       		cmp.w	d4,d3
00019136 6400 0000                  		bcc.w	loc_314F0C
0001913A 6000 0000                  		bra.w	loc_314E74
0001913E                            ; ---------------------------------------------------------------------------
0001913E                            
0001913E                            loc_314DCE:					  ; ...
0001913E 3029 0008                  		move.w	x_pos(a1),d0
00019142 9068 0008                  		sub.w	x_pos(a0),d0
00019146 D041                       		add.w	d1,d0
00019148 6B00 0000                  		bmi.w	loc_314F0C
0001914C 3601                       		move.w	d1,d3
0001914E D643                       		add.w	d3,d3
00019150 B043                       		cmp.w	d3,d0
00019152 6200 0000                  		bhi.w	loc_314F0C
00019156 3A00                       		move.w	d0,d5
00019158 0828 0000 0001             		btst	#0,1(a0)
0001915E 6700                       		beq.s	loc_314DF4
00019160 4645                       		not.w	d5
00019162 DA43                       		add.w	d3,d5
00019164                            
00019164                            loc_314DF4:					  ; ...
00019164 0245 FFFE                  		and.w	#-2,d5
00019168 1632 5000                  		move.b	(a2,d5.w),d3
0001916C 1432 5001                  		move.b	1(a2,d5.w),d2
00019170 4882                       		ext.w	d2
00019172 4883                       		ext.w	d3
00019174 3A28 000C                  		move.w	y_pos(a0),d5
00019178 9A43                       		sub.w	d3,d5
0001917A 3629 000C                  		move.w	y_pos(a1),d3
0001917E 9645                       		sub.w	d5,d3
00019180 1A29 0016                  		move.b	y_radius(a1),d5
00019184 4885                       		ext.w	d5
00019186 D645                       		add.w	d5,d3
00019188 5843                       		addq.w	#4,d3
0001918A 6B00 0000                  		bmi.w	loc_314F0C
0001918E D445                       		add.w	d5,d2
00019190 3802                       		move.w	d2,d4
00019192 D845                       		add.w	d5,d4
00019194 B644                       		cmp.w	d4,d3
00019196 6400 0000                  		bcc.w	loc_314F0C
0001919A 6000 0000                  		bra.w	loc_314E74
0001919E                            ; ---------------------------------------------------------------------------
0001919E                            SolidObject2F:	; XREF: Obj2F_Solid
0001919E 43F8 D000                  		lea	($FFFFD000).w,a1
000191A2                            loc_FAC8:
000191A2                            loc_314E2E:					  ; ...
000191A2 4A28 0001                  		tst.b	1(a0)
000191A6 6A00 0000                  		bpl.w	loc_314F0C
000191AA                            
000191AA                            loc_314E36:					  ; ...
000191AA 3029 0008                  		move.w	x_pos(a1),d0
000191AE 9068 0008                  		sub.w	x_pos(a0),d0
000191B2 D041                       		add.w	d1,d0
000191B4 6B00 0000                  		bmi.w	loc_314F0C
000191B8 3601                       		move.w	d1,d3
000191BA D643                       		add.w	d3,d3
000191BC B043                       		cmp.w	d3,d0
000191BE 6200 0000                  		bhi.w	loc_314F0C
000191C2 1629 0016                  		move.b	y_radius(a1),d3
000191C6 4883                       		ext.w	d3
000191C8 D443                       		add.w	d3,d2
000191CA 3629 000C                  		move.w	y_pos(a1),d3
000191CE 9668 000C                  		sub.w	y_pos(a0),d3
000191D2 5843                       		addq.w	#4,d3
000191D4 D642                       		add.w	d2,d3
000191D6 6B00 0000                  		bmi.w	loc_314F0C
000191DA 0243 07FF                  		and.w	#$7FF,d3
000191DE 3802                       		move.w	d2,d4
000191E0 D844                       		add.w	d4,d4
000191E2 B644                       		cmp.w	d4,d3
000191E4 6400 0000                  		bcc.w	loc_314F0C
000191E8                            
000191E8                            loc_314E74:					  ; ...
000191E8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000191EC 6B00 0000                  		bmi.w	loc_314F0C
000191F0 0C29 0006 0024             		cmp.b	#6,routine(a1)
000191F6 6400 0000                  		bcc.w	loc_FBA0
000191FA 4A78 FE08                  		tst.w	($FFFFFE08).w
000191FE 6600 0000                  		bne.w	loc_FBA0
00019202 3A00                       		move.w	d0,d5
00019204 B240                       		cmp.w	d0,d1
00019206 6400                       		bcc.s	loc_314E9C
00019208 D241                       		add.w	d1,d1
0001920A 9041                       		sub.w	d1,d0
0001920C 3A00                       		move.w	d0,d5
0001920E 4445                       		neg.w	d5
00019210                            
00019210                            loc_314E9C:					  ; ...
00019210 3203                       		move.w	d3,d1
00019212 B443                       		cmp.w	d3,d2
00019214 6400                       		bcc.s	loc_314EAA
00019216 5943                       		subq.w	#4,d3
00019218 9644                       		sub.w	d4,d3
0001921A 3203                       		move.w	d3,d1
0001921C 4441                       		neg.w	d1
0001921E                            
0001921E                            loc_314EAA:					  ; ...
0001921E BA41                       		cmp.w	d1,d5
00019220 6200 0000                  		bhi.w	loc_FBB0
00019224 0C41 0004                  		cmp.w	#4,d1
00019228 6300 0000                  		bls.w	loc_FBB0
0001922C                            
0001922C                            loc_314EB8:					  ; ...
0001922C 4A40                       		tst.w	d0
0001922E 6700                       		beq.s	loc_314ED8
00019230 6B00                       		bmi.s	loc_314EC6
00019232 4A69 0010                  		tst.w	x_vel(a1)
00019236 6B00                       		bmi.s	loc_314ED8
00019238 6000                       		bra.s	loc_314ECC
0001923A                            ; ---------------------------------------------------------------------------
0001923A                            
0001923A                            loc_314EC6:					  ; ...
0001923A 4A69 0010                  		tst.w	x_vel(a1)
0001923E 6A00                       		bpl.s	loc_314ED8
00019240                            
00019240                            loc_314ECC:					  ; ...
00019240 337C 0000 0020             		move.w	#0,inertia(a1)
00019246 337C 0000 0010             		move.w	#0,x_vel(a1)
0001924C                            
0001924C                            loc_314ED8:					  ; ...
0001924C 9169 0008                  		sub.w	d0,x_pos(a1)
00019250 0829 0001 0022             		btst	#1,status(a1)
00019256 6600                       		bne.s	loc_314EFE
00019258 2806                       		move.l	d6,d4
0001925A 5404                       		addq.b	#2,d4
0001925C 09E8 0022                  		bset	d4,status(a0)
00019260 08E9 0005 0022             		bset	#5,status(a1)
00019266 3806                       		move.w	d6,d4
00019268 0604 000D                  		add.b	#$D,d4
0001926C 09C6                       		bset	d4,d6
0001926E 7801                       		moveq	#1,d4
00019270 4E75                       		rts
00019272                            ; ---------------------------------------------------------------------------
00019272                            
00019272                            loc_314EFE:					  ; ...
00019272 6100                       		bsr.s	loc_FBA0
00019274 3806                       		move.w	d6,d4
00019276 0604 000D                  		add.b	#$D,d4
0001927A 09C6                       		bset	d4,d6
0001927C 7801                       		moveq	#1,d4
0001927E 4E75                       		rts
00019280                            ; ---------------------------------------------------------------------------
00019280                            loc_FB92:
00019280                            loc_314F0C:					  ; ...
00019280 2806                       		move.l	d6,d4
00019282 5404                       		addq.b	#2,d4
00019284 0928 0022                  		btst	d4,status(a0)
00019288 6700                       		beq.s	loc_FBA0
0001928A 0C29 0002 001C             		cmp.b	#2,anim(a1)	; check if in jumping/rolling animation
00019290 6700                       		beq.s	loc_FBA0
00019292 0C29 0017 001C             		cmpi.b	#$17,anim(a1)	; check if in drowning animation
00019298 6700                       		beq.s	loc_FBA0
0001929A 0C29 0018 001C             		cmpi.b	#$18,anim(a1)	; check if in dying animation
000192A0 6700                       		beq.s	loc_FBA0
000192A2 0C29 001A 001C             		cmp.b	#$1A,anim(a1)	; check if in hurt animation
000192A8 6700                       		beq.s	loc_FBA0
000192AA 0C29 001F 001C             		cmpi.b	#$1F,anim(a1)	; check if in spindash animation
000192B0 6700                       		beq.s	loc_FBA0
000192B2 0C29 0022 001C             		cmpi.b	#$22,anim(a1)	; check if in transformation animation
000192B8 6700                       		beq.s	loc_FBA0
000192BA 337C 0001 001C             		move.w	#1,anim(a1)	; use walking animation
000192C0                            ; End of function SolidObject
000192C0                             
000192C0                            loc_FBA0:
000192C0 2806                       		move.l	d6,d4
000192C2 5404                       		addq.b	#2,d4
000192C4 09A8 0022                  		bclr	d4,status(a0)
000192C8 08A9 0005 0022             		bclr	#5,status(a1)
000192CE                            
000192CE                            loc_FBAC:
000192CE 7800                       		moveq	#0,d4
000192D0 4E75                       		rts	
000192D2                            ; ===========================================================================
000192D2                            
000192D2                            loc_FBB0:
000192D2 4A43                       		tst.w	d3
000192D4 6B00                       		bmi.s	loc_FBBC
000192D6 0C43 0010                  		cmpi.w	#$10,d3
000192DA 6500                       		bcs.s	loc_FBEE
000192DC 60A2                       		bra.s	loc_FB92
000192DE                            ; ===========================================================================
000192DE                            
000192DE                            loc_FBBC:
000192DE 4A69 0012                  		tst.w	y_vel(a1)
000192E2 6700                       		beq.s	loc_FBD6
000192E4 6A00                       		bpl.s	loc_FBD2
000192E6 4A43                       		tst.w	d3
000192E8 6A00                       		bpl.s	loc_FBD2
000192EA 9769 000C                  		sub.w	d3,$C(a1)
000192EE 337C 0000 0012             		move.w	#0,y_vel(a1)	; stop Sonic moving
000192F4                            
000192F4                            loc_FBD2:
000192F4 78FF                       		moveq	#-1,d4
000192F6 4E75                       		rts	
000192F8                            ; ===========================================================================
000192F8                            
000192F8                            loc_FBD6:
000192F8 0829 0001 0022             		btst	#1,status(a1)
000192FE 66F4                       		bne.s	loc_FBD2
00019300 2F08                       		move.l	a0,-(sp)
00019302 2049                       		movea.l	a1,a0
00019304 4EB9 0000 0000             		jsr	KillCharacter
0001930A 205F                       		movea.l	(sp)+,a0
0001930C 78FF                       		moveq	#-1,d4
0001930E 4E75                       		rts	
00019310                            ; ===========================================================================
00019310                            
00019310                            loc_FBEE:
00019310 5943                       		subq.w	#4,d3
00019312 7200                       		moveq	#0,d1
00019314 1228 0023                  		move.b	width_pixels(a0),d1
00019318 3401                       		move.w	d1,d2
0001931A D442                       		add.w	d2,d2
0001931C D269 0008                  		add.w	8(a1),d1
00019320 9268 0008                  		sub.w	8(a0),d1
00019324 6B00                       		bmi.s	loc_FC28
00019326 B242                       		cmp.w	d2,d1
00019328 6400                       		bcc.s	loc_FC28
0001932A 4A69 0012                  		tst.w	y_vel(a1)
0001932E 6B00                       		bmi.s	loc_FC28
00019330 9769 000C                  		sub.w	d3,$C(a1)
00019334 5369 000C                  		subq.w	#1,$C(a1)
00019338 6100                       		bsr.s	sub_FC2C
0001933A 117C 0002 0025             		move.b	#2,routine_secondary(a0)
00019340 08E8 0003 0022             		bset	#3,status(a0)
00019346 78FF                       		moveq	#-1,d4
00019348 4E75                       		rts	
0001934A                            ; ===========================================================================
0001934A                            
0001934A                            loc_FC28:
0001934A 7800                       		moveq	#0,d4
0001934C 4E75                       		rts	
0001934E                            ; End of function SolidObject
0001934E                            
0001934E                            
0001934E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001934E                            
0001934E                            
0001934E                            sub_FC2C:				; XREF: SolidObject
0001934E 0829 0003 0022             		btst	#3,status(a1)
00019354 6700                       		beq.s	loc_FC4E
00019356 7000                       		moveq	#0,d0
00019358 1029 003D                  		move.b	$3D(a1),d0
0001935C ED48                       		lsl.w	#6,d0
0001935E 0680 00FF D000             		addi.l	#$FFD000,d0
00019364 2440                       		move.l	d0,a2
00019366 0DAB 0022                  		bclr	d6,status(a3)
0001936A                            
0001936A                            loc_FC4E:
0001936A 3008                       		move.w	a0,d0
0001936C 0440 D000                  		subi.w	#-$3000,d0
00019370 EC48                       		lsr.w	#6,d0
00019372 0240 007F                  		andi.w	#$7F,d0
00019376 1340 003D                  		move.b	d0,$3D(a1)
0001937A 137C 0000 0026             		move.b	#0,$26(a1)
00019380 337C 0000 0012             		move.w	#0,y_vel(a1)
00019386 3369 0010 0020             		move.w	x_vel(a1),inertia(a1)
0001938C 0829 0001 0022             		btst	#1,status(a1)
00019392 6700                       		beq.s	loc_FC84
00019394 2F08                       		move.l	a0,-(sp)
00019396 2049                       		movea.l	a1,a0
00019398 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001939E 205F                       		movea.l	(sp)+,a0
000193A0                            
000193A0                            loc_FC84:
000193A0 08E9 0003 0022             		bset	#3,status(a1)
000193A6 08E8 0003 0022             		bset	#3,status(a0)
000193AC 4E75                       		rts	
000193AE                            ; End of function sub_FC2C
000193AE                            
000193AE                            ; ===========================================================================
000193AE                            ; ---------------------------------------------------------------------------
000193AE                            ; Object 51 - smashable	green block (MZ)
000193AE                            ; ---------------------------------------------------------------------------
000193AE                            
000193AE                            Obj51:					; XREF: Obj_Index
000193AE 7000                       		moveq	#0,d0
000193B0 1028 0024                  		move.b	routine(a0),d0
000193B4 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000193B8 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000193BC 6000 F47C                  		bra.w	MarkObjGone
000193C0                            ; ===========================================================================
000193C0 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000193C2 0000                       		dc.w Obj51_Solid-Obj51_Index
000193C4 0000                       		dc.w Obj51_Display-Obj51_Index
000193C6                            ; ===========================================================================
000193C6                            
000193C6                            Obj51_Main:				; XREF: Obj51_Index
000193C6 5428 0024                  		addq.b	#2,routine(a0)
000193CA 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000193D2 317C 42B8 0002             		move.w	#$42B8,2(a0)
000193D8 117C 0004 0001             		move.b	#4,1(a0)
000193DE 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000193E4 317C 0200 0018             		move.w	#$200,priority(a0)
000193EA 1168 0028 001A             		move.b	subtype(a0),mapping_frame(a0)
000193F0                            
000193F0                            Obj51_Solid:				; XREF: Obj51_Index
000193F0 3178 F7D0 0034             		move.w	(Chain_Bonus_counter).w,$34(a0)
000193F6 1178 D01C 0032             		move.b	(MainCharacter+anim).w,$32(a0) ;	load Sonic's animation number
000193FC 323C 001B                  		move.w	#$1B,d1
00019400 343C 0010                  		move.w	#$10,d2
00019404 363C 0011                  		move.w	#$11,d3
00019408 3828 0008                  		move.w	8(a0),d4
0001940C 4EBA FB10                  		jsr	SolidObject
00019410 0828 0003 0022             		btst	#3,status(a0)
00019416 6600                       		bne.s	Obj51_Smash
00019418                            
00019418                            locret_FCFC:
00019418 4E75                       		rts	
0001941A                            ; ===========================================================================
0001941A                            
0001941A                            Obj51_Smash:				; XREF: Obj51_Solid
0001941A 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00019420 66F6                       		bne.s	locret_FCFC	; if not, branch
00019422 31E8 0034 F7D0             		move.w	$34(a0),(Chain_Bonus_counter).w
00019428 08E9 0002 0022             		bset	#2,status(a1)
0001942E 137C 000E 0016             		move.b	#$E,$16(a1)
00019434 137C 0007 0017             		move.b	#7,$17(a1)
0001943A 137C 0002 001C             		move.b	#2,anim(a1)
00019440 337C FD00 0012             		move.w	#-$300,y_vel(a1)	; bounce Sonic upwards
00019446 08E9 0001 0022             		bset	#1,status(a1)
0001944C 08A9 0003 0022             		bclr	#3,status(a1)
00019452 137C 0002 0024             		move.b	#2,routine(a1)
00019458 08A8 0003 0022             		bclr	#3,status(a0)
0001945E 4228 0025                  		clr.b	routine_secondary(a0)
00019462 117C 0001 001A             		move.b	#1,mapping_frame(a0)
00019468 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001946E 7203                       		moveq	#3,d1		; set number of	fragments to 4
00019470 343C 0038                  		move.w	#$38,d2
00019474 4EBA C31A                  		jsr	SmashObject
00019478 4EBA D29A                  		jsr	SingleObjLoad
0001947C 6600                       		bne.s	Obj51_Display
0001947E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00019482 3368 0008 0008             		move.w	8(a0),8(a1)
00019488 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001948E 3438 F7D0                  		move.w	(Chain_Bonus_counter).w,d2
00019492 5478 F7D0                  		addq.w	#2,(Chain_Bonus_counter).w
00019496 0C42 0006                  		cmpi.w	#6,d2
0001949A 6500                       		bcs.s	Obj51_Bonus
0001949C 7406                       		moveq	#6,d2
0001949E                            
0001949E                            Obj51_Bonus:
0001949E 7000                       		moveq	#0,d0
000194A0 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000194A4 0C78 0020 F7D0             		cmpi.w	#$20,(Chain_Bonus_counter).w ; have 16 blocks been smashed?
000194AA 6500                       		bcs.s	loc_FD98	; if not, branch
000194AC 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000194B0 740A                       		moveq	#10,d2
000194B2                            
000194B2                            loc_FD98:
000194B2 4EB9 0000 0000             		jsr	AddPoints
000194B8 E24A                       		lsr.w	#1,d2
000194BA 1342 001A                  		move.b	d2,mapping_frame(a1)
000194BE                            
000194BE                            Obj51_Display:				; XREF: Obj51_Index
000194BE 4EBA C722                  		jsr	SpeedToPos
000194C2 0668 0038 0012             		addi.w	#$38,y_vel(a0)
000194C8 4EBA C77E                  		jsr	DisplaySprite
000194CC 4A28 0001                  		tst.b	1(a0)
000194D0 6A00 C72A                  		bpl.w	DeleteObject
000194D4 4E75                       		rts	
000194D6                            ; ===========================================================================
000194D6 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000194DA FF00 FF00                  		dc.w $FF00, $FF00
000194DE 0200 FE00                  		dc.w $200, $FE00
000194E2 0100 FF00                  		dc.w $100, $FF00
000194E6                            
000194E6 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000194EE                            ; ---------------------------------------------------------------------------
000194EE                            ; Sprite mappings - smashable green block (MZ)
000194EE                            ; ---------------------------------------------------------------------------
000194EE                            Map_obj51:
000194EE                            	include "_maps\obj51.asm"
000194EE                            ; ---------------------------------------------------------------------------
000194EE                            ; Sprite mappings - smashable green block (MZ)
000194EE                            ; ---------------------------------------------------------------------------
000194EE 0000                       		dc.w byte_FDD8-Map_obj51
000194F0 0000                       		dc.w byte_FDE3-Map_obj51
000194F2 02                         byte_FDD8:	dc.b 2
000194F3 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000194F8 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000194FD 04                         byte_FDE3:	dc.b 4
000194FE F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00019503 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00019508 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001950D 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00019512                            		even
00019512                            		even
00019512                            
00019512                            ; ===========================================================================
00019512                            ; ---------------------------------------------------------------------------
00019512                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00019512                            ; ---------------------------------------------------------------------------
00019512                            
00019512                            Obj52:					; XREF: Obj_Index
00019512 7000                       		moveq	#0,d0
00019514 1028 0024                  		move.b	routine(a0),d0
00019518 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001951C 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00019520                            ; ===========================================================================
00019520 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00019522 0000                       		dc.w Obj52_Platform-Obj52_Index
00019524 0000                       		dc.w Obj52_StandOn-Obj52_Index
00019526                            
00019526 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00019528 2001                       		dc.b $20, 1
0001952A 2002                       		dc.b $20, 2
0001952C 4003                       		dc.b $40, 3
0001952E 3004                       		dc.b $30, 4
00019530                            ; ===========================================================================
00019530                            
00019530                            Obj52_Main:				; XREF: Obj52_Index
00019530 5428 0024                  		addq.b	#2,routine(a0)
00019534 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001953C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00019542 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00019548 6600                       		bne.s	loc_FE44
0001954A 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00019552 317C 43BC 0002             		move.w	#$43BC,2(a0)
00019558 117C 0007 0016             		move.b	#7,$16(a0)
0001955E                            
0001955E                            loc_FE44:
0001955E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00019564 6600                       		bne.s	loc_FE60
00019566 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001956C 0C28 0028 0028             		cmpi.b	#$28,subtype(a0)	; is object 5228 ?
00019572 6700                       		beq.s	loc_FE60	; if yes, branch
00019574 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001957A                            
0001957A                            loc_FE60:
0001957A 117C 0004 0001             		move.b	#4,1(a0)
00019580 7000                       		moveq	#0,d0
00019582 1028 0028                  		move.b	subtype(a0),d0
00019586 E648                       		lsr.w	#3,d0
00019588 0240 001E                  		andi.w	#$1E,d0
0001958C 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00019590 115A 0023                  		move.b	(a2)+,width_pixels(a0)
00019594 115A 001A                  		move.b	(a2)+,mapping_frame(a0)
00019598 317C 0200 0018             		move.w	#$200,priority(a0)
0001959E 3168 0008 0030             		move.w	8(a0),$30(a0)
000195A4 3168 000C 0032             		move.w	$C(a0),$32(a0)
000195AA 0228 000F 0028             		andi.b	#$F,subtype(a0)
000195B0                            
000195B0                            Obj52_Platform:				; XREF: Obj52_Index
000195B0 4EB9 0000 0000             		jsr	Obj52_Move
000195B6 7200                       		moveq	#0,d1
000195B8 1228 0023                  		move.b	width_pixels(a0),d1
000195BC 4EB9 0000 F0A6             		jsr	(PlatformObject).l
000195C2 6000                       		bra.s	Obj52_ChkDel
000195C4                            ; ===========================================================================
000195C4                            
000195C4                            Obj52_StandOn:				; XREF: Obj52_Index
000195C4 7200                       		moveq	#0,d1
000195C6 1228 0023                  		move.b	width_pixels(a0),d1
000195CA 4EB9 0000 F1E6             		jsr	(ExitPlatform).l
000195D0 3F28 0008                  		move.w	8(a0),-(sp)
000195D4 4EB9 0000 0000             		jsr	Obj52_Move
000195DA 341F                       		move.w	(sp)+,d2
000195DC 4EB9 0000 F44C             		jsr	(MvSonicOnPtfm2).l
000195E2                            
000195E2                            Obj52_ChkDel:				; XREF: Obj52_Platform
000195E2 3028 0030                  		move.w	$30(a0),d0
000195E6 4EFA F288                  		jmp		MarkObjGone2
000195EA                            ; ===========================================================================
000195EA                            
000195EA                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000195EA 7000                       		moveq	#0,d0
000195EC 1028 0028                  		move.b	subtype(a0),d0
000195F0 0240 000F                  		andi.w	#$F,d0
000195F4 D040                       		add.w	d0,d0
000195F6 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000195FA 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000195FE                            ; ===========================================================================
000195FE 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00019602 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00019606 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001960A 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0001960E 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00019612 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00019614                            ; ===========================================================================
00019614                            
00019614                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00019614 4E75                       		rts	
00019616                            ; ===========================================================================
00019616                            
00019616                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00019616 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001961A 323C 0060                  		move.w	#$60,d1
0001961E 0828 0000 0022             		btst	#0,status(a0)
00019624 6700                       		beq.s	loc_FF26
00019626 4440                       		neg.w	d0
00019628 D041                       		add.w	d1,d0
0001962A                            
0001962A                            loc_FF26:
0001962A 3228 0030                  		move.w	$30(a0),d1
0001962E 9240                       		sub.w	d0,d1
00019630 3141 0008                  		move.w	d1,8(a0)
00019634 4E75                       		rts	
00019636                            ; ===========================================================================
00019636                            
00019636                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00019636 0C28 0004 0024             		cmpi.b	#4,routine(a0)	; is Sonic standing on the platform?
0001963C 6600                       		bne.s	Obj52_02_Wait
0001963E 5228 0028                  		addq.b	#1,subtype(a0)	; if yes, add 1	to type
00019642                            
00019642                            Obj52_02_Wait:
00019642 4E75                       		rts	
00019644                            ; ===========================================================================
00019644                            
00019644                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00019644 7600                       		moveq	#0,d3
00019646 1628 0023                  		move.b	width_pixels(a0),d3
0001964A 4EB9 0000 0000             		jsr	ObjHitWallRight
00019650 4A41                       		tst.w	d1		; has the platform hit a wall?
00019652 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00019654 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00019658 3168 0008 0030             		move.w	8(a0),$30(a0)
0001965E 4E75                       		rts	
00019660                            ; ===========================================================================
00019660                            
00019660                            Obj52_03_End:
00019660 4228 0028                  		clr.b	subtype(a0)		; change to type 00 (non-moving	type)
00019664 4E75                       		rts	
00019666                            ; ===========================================================================
00019666                            
00019666                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00019666 7600                       		moveq	#0,d3
00019668 1628 0023                  		move.b	width_pixels(a0),d3
0001966C 4EB9 0000 0000             		jsr	ObjHitWallRight
00019672 4A41                       		tst.w	d1		; has the platform hit a wall?
00019674 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00019676 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001967A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019680 4E75                       		rts	
00019682                            ; ===========================================================================
00019682                            
00019682                            Obj52_05_End:
00019682 5228 0028                  		addq.b	#1,subtype(a0)	; change to type 06 (falling)
00019686 4E75                       		rts	
00019688                            ; ===========================================================================
00019688                            
00019688                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00019688 4EBA C558                  		jsr	SpeedToPos
0001968C 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; make the platform fall
00019692 4EB9 0000 0000             		jsr	ObjHitFloor
00019698 4A41                       		tst.w	d1		; has platform hit the floor?
0001969A 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001969E D368 000C                  		add.w	d1,$C(a0)
000196A2 4268 0012                  		clr.w	y_vel(a0)		; stop platform	falling
000196A6 4228 0028                  		clr.b	subtype(a0)		; change to type 00 (non-moving)
000196AA                            
000196AA                            locret_FFA0:
000196AA 4E75                       		rts	
000196AC                            ; ===========================================================================
000196AC                            
000196AC                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000196AC 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000196B0 6700                       		beq.s	Obj52_07_ChkDel
000196B2 5728 0028                  		subq.b	#3,subtype(a0)	; if yes, change object	type to	04
000196B6                            
000196B6                            Obj52_07_ChkDel:
000196B6 588F                       		addq.l	#4,sp
000196B8 3028 0030                  		move.w	$30(a0),d0
000196BC 4EFA F4BC                  		jmp		MarkObjGone3
000196C0                            ; ===========================================================================
000196C0                            
000196C0                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000196C0 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000196C4 323C 0080                  		move.w	#$80,d1
000196C8 0828 0000 0022             		btst	#0,status(a0)
000196CE 6700                       		beq.s	loc_FFE2
000196D0 4440                       		neg.w	d0
000196D2 D041                       		add.w	d1,d0
000196D4                            
000196D4                            loc_FFE2:
000196D4 3228 0032                  		move.w	$32(a0),d1
000196D8 9240                       		sub.w	d0,d1
000196DA 3141 000C                  		move.w	d1,$C(a0)
000196DE 4E75                       		rts	
000196E0                            ; ===========================================================================
000196E0                            
000196E0                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000196E0 7600                       		moveq	#0,d3
000196E2 1628 0023                  		move.b	width_pixels(a0),d3
000196E6 D643                       		add.w	d3,d3
000196E8 7208                       		moveq	#8,d1
000196EA 0828 0000 0022             		btst	#0,status(a0)
000196F0 6700                       		beq.s	loc_10004
000196F2 4441                       		neg.w	d1
000196F4 4443                       		neg.w	d3
000196F6                            
000196F6                            loc_10004:
000196F6 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000196FA 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000196FC 3028 0008                  		move.w	8(a0),d0
00019700 9068 0030                  		sub.w	$30(a0),d0
00019704 B043                       		cmp.w	d3,d0
00019706 6700                       		beq.s	Obj52_0A_Wait
00019708 D368 0008                  		add.w	d1,8(a0)	; move platform
0001970C 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00019712 4E75                       		rts	
00019714                            ; ===========================================================================
00019714                            
00019714                            Obj52_0A_Wait:
00019714 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00019718 6600                       		bne.s	locret_1002E	; if time remains, branch
0001971A 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00019720                            
00019720                            locret_1002E:
00019720 4E75                       		rts	
00019722                            ; ===========================================================================
00019722                            
00019722                            Obj52_0A_Back:
00019722 3028 0008                  		move.w	8(a0),d0
00019726 9068 0030                  		sub.w	$30(a0),d0
0001972A 6700                       		beq.s	Obj52_0A_Reset
0001972C 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00019730 4E75                       		rts	
00019732                            ; ===========================================================================
00019732                            
00019732                            Obj52_0A_Reset:
00019732 4268 0036                  		clr.w	$36(a0)
00019736 5328 0028                  		subq.b	#1,subtype(a0)
0001973A 4E75                       		rts	
0001973C                            ; ===========================================================================
0001973C                            ; ---------------------------------------------------------------------------
0001973C                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001973C                            ; ---------------------------------------------------------------------------
0001973C                            Map_obj52:
0001973C                            	include "_maps\obj52mz.asm"
0001973C                            ; ---------------------------------------------------------------------------
0001973C                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001973C                            ; ---------------------------------------------------------------------------
0001973C 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00019740 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00019744 0000                       		dc.w byte_1008F-Map_obj52
00019746 01                         byte_10054:	dc.b 1
00019747 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001974C 02                         byte_1005A:	dc.b 2
0001974D F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00019752 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00019757 04                         byte_10065:	dc.b 4
00019758 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0001975D 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00019762 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00019767 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
0001976C 04                         byte_1007A:	dc.b 4
0001976D F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00019772 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00019777 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0001977C F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00019781 03                         byte_1008F:	dc.b 3
00019782 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00019787 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001978C F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00019792 00                         		even
00019792 00                         		even
00019792                            
00019792                            ; ---------------------------------------------------------------------------
00019792                            ; Sprite mappings - moving block (LZ)
00019792                            ; ---------------------------------------------------------------------------
00019792                            Map_obj52a:
00019792                            	include "_maps\obj52lz.asm"
00019792                            ; ---------------------------------------------------------------------------
00019792                            ; Sprite mappings - moving block (LZ)
00019792                            ; ---------------------------------------------------------------------------
00019792 0000                       		dc.w byte_100A2-Map_obj52a
00019794 01                         byte_100A2:	dc.b 1
00019795 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001979A                            		even
0001979A                            		even
0001979A                            
0001979A                            ; ===========================================================================
0001979A                            ; ---------------------------------------------------------------------------
0001979A                            ; Object 55 - Basaran enemy (MZ)
0001979A                            ; ---------------------------------------------------------------------------
0001979A                            
0001979A                            Obj55:					; XREF: Obj_Index
0001979A 7000                       		moveq	#0,d0
0001979C 1028 0024                  		move.b	routine(a0),d0
000197A0 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000197A4 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000197A8                            ; ===========================================================================
000197A8 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000197AA 0000                       		dc.w Obj55_Action-Obj55_Index
000197AC                            ; ===========================================================================
000197AC                            
000197AC                            Obj55_Main:				; XREF: Obj55_Index
000197AC 5428 0024                  		addq.b	#2,routine(a0)
000197B0 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000197B8 317C 84B8 0002             		move.w	#$84B8,2(a0)
000197BE 117C 0004 0001             		move.b	#4,1(a0)
000197C4 117C 000C 0016             		move.b	#$C,$16(a0)
000197CA 317C 0100 0018             		move.w	#$100,priority(a0)
000197D0 117C 000B 0020             		move.b	#$B,collision_flags(a0)
000197D6 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000197DC                            
000197DC                            Obj55_Action:				; XREF: Obj55_Index
000197DC 7000                       		moveq	#0,d0
000197DE 1028 0025                  		move.b	routine_secondary(a0),d0
000197E2 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000197E6 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000197EA 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000197F0 4EBA 8E32                  		jsr	AnimateSprite
000197F4 6000 F044                  		bra.w	MarkObjGone
000197F8                            ; ===========================================================================
000197F8 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000197FA 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000197FC 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000197FE 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00019800                            ; ===========================================================================
00019800                            
00019800                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00019800 343C 0080                  		move.w	#$80,d2
00019804 4EB9 0000 0000             		jsr	Obj55_ChkSonic
0001980A 6400                       		bcc.s	Obj55_NoDrop
0001980C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00019810 3140 0036                  		move.w	d0,$36(a0)
00019814 9068 000C                  		sub.w	$C(a0),d0
00019818 6500                       		bcs.s	Obj55_NoDrop
0001981A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
0001981E 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00019820 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00019824 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00019826 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001982A D007                       		add.b	d7,d0
0001982C 0200 0007                  		andi.b	#7,d0
00019830 6600                       		bne.s	Obj55_NoDrop
00019832 117C 0001 001C             		move.b	#1,anim(a0)
00019838 5428 0025                  		addq.b	#2,routine_secondary(a0)
0001983C                            
0001983C                            Obj55_NoDrop:
0001983C 4E75                       		rts	
0001983E                            ; ===========================================================================
0001983E                            
0001983E                            Obj55_DropFly:				; XREF: Obj55_Index2
0001983E 4EBA C3A2                  		jsr	SpeedToPos
00019842 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; make basaran fall
00019848 343C 0080                  		move.w	#$80,d2
0001984C 4EB9 0000 0000             		jsr	Obj55_ChkSonic
00019852 3028 0036                  		move.w	$36(a0),d0
00019856 9068 000C                  		sub.w	$C(a0),d0
0001985A 6500                       		bcs.s	Obj55_ChkDel
0001985C 0C40 0010                  		cmpi.w	#$10,d0
00019860 6400                       		bcc.s	locret_10180
00019862 3141 0010                  		move.w	d1,x_vel(a0)	; make basaran fly horizontally
00019866 317C 0000 0012             		move.w	#0,y_vel(a0)	; stop basaran falling
0001986C 117C 0002 001C             		move.b	#2,anim(a0)
00019872 5428 0025                  		addq.b	#2,routine_secondary(a0)
00019876                            
00019876                            locret_10180:
00019876 4E75                       		rts	
00019878                            ; ===========================================================================
00019878                            
00019878                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00019878 4A28 0001                  		tst.b	1(a0)
0001987C 6A00 C37E                  		bpl.w	DeleteObject
00019880 4E75                       		rts	
00019882                            ; ===========================================================================
00019882                            
00019882                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00019882 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00019886 0200 000F                  		andi.b	#$F,d0
0001988A 6600                       		bne.s	loc_101A0
0001988C 303C 00C0                  		move.w	#$C0,d0
00019890 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play flapping sound
00019896                            
00019896                            loc_101A0:
00019896 4EBA C34A                  		jsr	SpeedToPos
0001989A 3038 D008                  		move.w	($FFFFD008).w,d0
0001989E 9068 0008                  		sub.w	8(a0),d0
000198A2 6400                       		bcc.s	loc_101B0
000198A4 4440                       		neg.w	d0
000198A6                            
000198A6                            loc_101B0:
000198A6 0C40 0080                  		cmpi.w	#$80,d0
000198AA 6500                       		bcs.s	locret_101C6
000198AC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000198B0 D007                       		add.b	d7,d0
000198B2 0200 0007                  		andi.b	#7,d0
000198B6 6600                       		bne.s	locret_101C6
000198B8 5428 0025                  		addq.b	#2,routine_secondary(a0)
000198BC                            
000198BC                            locret_101C6:
000198BC 4E75                       		rts	
000198BE                            ; ===========================================================================
000198BE                            
000198BE                            Obj55_FlyUp:				; XREF: Obj55_Index2
000198BE 4EBA C322                  		jsr	SpeedToPos
000198C2 0468 0018 0012             		subi.w	#$18,y_vel(a0)	; make basaran fly upwards
000198C8 4EB9 0000 0000             		jsr	ObjHitCeiling
000198CE 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000198D0 6A00                       		bpl.s	locret_101F4	; if not, branch
000198D2 9368 000C                  		sub.w	d1,$C(a0)
000198D6 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
000198DC 4268 0010                  		clr.w	x_vel(a0)		; stop basaran moving
000198E0 4268 0012                  		clr.w	y_vel(a0)
000198E4 4228 001C                  		clr.b	anim(a0)
000198E8 4228 0025                  		clr.b	routine_secondary(a0)
000198EC                            
000198EC                            locret_101F4:
000198EC 4E75                       		rts	
000198EE                            ; ===========================================================================
000198EE                            
000198EE                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000198EE 323C 0100                  		move.w	#$100,d1
000198F2 08E8 0000 0022             		bset	#0,status(a0)
000198F8 3038 D008                  		move.w	($FFFFD008).w,d0
000198FC 9068 0008                  		sub.w	8(a0),d0
00019900 6400                       		bcc.s	loc_10214
00019902 4440                       		neg.w	d0
00019904 4441                       		neg.w	d1
00019906 08A8 0000 0022             		bclr	#0,status(a0)
0001990C                            
0001990C                            loc_10214:
0001990C B042                       		cmp.w	d2,d0
0001990E 4E75                       		rts	
00019910                            ; ===========================================================================
00019910 4EBA C2D0                  		jsr	SpeedToPos
00019914 4EBA C332                  		jsr	DisplaySprite
00019918 4A28 0001                  		tst.b	1(a0)
0001991C 6A00 C2DE                  		bpl.w	DeleteObject
00019920 4E75                       		rts	
00019922                            ; ===========================================================================
00019922                            Ani_obj55:
00019922                            	include "_anim\obj55.asm"
00019922                            ; ---------------------------------------------------------------------------
00019922                            ; Animation script - Basaran enemy
00019922                            ; ---------------------------------------------------------------------------
00019922 0000                       		dc.w byte_10230-Ani_obj55
00019924 0000                       		dc.w byte_10234-Ani_obj55
00019926 0000                       		dc.w byte_10238-Ani_obj55
00019928 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
0001992C 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00019930 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00019936                            		even
00019936                            		even
00019936                            
00019936                            ; ---------------------------------------------------------------------------
00019936                            ; Sprite mappings - Basaran enemy (MZ)
00019936                            ; ---------------------------------------------------------------------------
00019936                            Map_obj55:
00019936                            	include "_maps\obj55.asm"
00019936                            ; ---------------------------------------------------------------------------
00019936                            ; Sprite mappings - Basaran enemy (MZ)
00019936                            ; ---------------------------------------------------------------------------
00019936 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
0001993A 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
0001993E 01                         byte_10246:	dc.b 1
0001993F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00019944 03                         byte_1024C:	dc.b 3
00019945 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
0001994A 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
0001994F 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00019954 04                         byte_1025C:	dc.b 4
00019955 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
0001995A 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
0001995F 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00019964 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00019969 04                         byte_10271:	dc.b 4
0001996A F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
0001996F 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00019974 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00019979 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
0001997E                            		even
0001997E                            		even
0001997E                            
0001997E                            ; ===========================================================================
0001997E                            ; ---------------------------------------------------------------------------
0001997E                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
0001997E                            ; ---------------------------------------------------------------------------
0001997E                            
0001997E                            Obj56:					; XREF: Obj_Index
0001997E 7000                       		moveq	#0,d0
00019980 1028 0024                  		move.b	routine(a0),d0
00019984 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00019988 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
0001998C                            ; ===========================================================================
0001998C 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
0001998E 0000                       		dc.w Obj56_Action-Obj56_Index
00019990                            
00019990 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00019992 2020                       		dc.b  $20, $20
00019994 1020                       		dc.b  $10, $20
00019996 201A                       		dc.b  $20, $1A
00019998 1027                       		dc.b  $10, $27
0001999A 1010                       		dc.b  $10, $10
0001999C 0820                       		dc.b	8, $20
0001999E 4010                       		dc.b  $40, $10
000199A0                            ; ===========================================================================
000199A0                            
000199A0                            Obj56_Main:				; XREF: Obj56_Index
000199A0 5428 0024                  		addq.b	#2,routine(a0)
000199A4 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
000199AC 317C 4000 0002             		move.w	#$4000,2(a0)
000199B2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000199B8 6600                       		bne.s	loc_102C8
000199BA 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
000199C0                            
000199C0                            loc_102C8:
000199C0 117C 0004 0001             		move.b	#4,1(a0)
000199C6 317C 0180 0018             		move.w	#$180,priority(a0)
000199CC 7000                       		moveq	#0,d0
000199CE 1028 0028                  		move.b	subtype(a0),d0
000199D2 E648                       		lsr.w	#3,d0
000199D4 0240 000E                  		andi.w	#$E,d0
000199D8 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
000199DC 115A 0023                  		move.b	(a2)+,width_pixels(a0)
000199E0 1152 0016                  		move.b	(a2),$16(a0)
000199E4 E248                       		lsr.w	#1,d0
000199E6 1140 001A                  		move.b	d0,mapping_frame(a0)
000199EA 3168 0008 0034             		move.w	8(a0),$34(a0)
000199F0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000199F6 7000                       		moveq	#0,d0
000199F8 1012                       		move.b	(a2),d0
000199FA D040                       		add.w	d0,d0
000199FC 3140 003A                  		move.w	d0,$3A(a0)
00019A00 7000                       		moveq	#0,d0
00019A02 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00019A08 6700                       		beq.s	loc_10332
00019A0A 1028 0028                  		move.b	subtype(a0),d0	; SYZ/SLZ specific code
00019A0E 0240 000F                  		andi.w	#$F,d0
00019A12 5140                       		subq.w	#8,d0
00019A14 6500                       		bcs.s	loc_10332
00019A16 E548                       		lsl.w	#2,d0
00019A18 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00019A1C 45F2 0000                  		lea	(a2,d0.w),a2
00019A20 4A52                       		tst.w	(a2)
00019A22 6A00                       		bpl.s	loc_10332
00019A24 0868 0000 0022             		bchg	#0,status(a0)
00019A2A                            
00019A2A                            loc_10332:
00019A2A 1028 0028                  		move.b	subtype(a0),d0
00019A2E 6A00                       		bpl.s	Obj56_Action
00019A30 0200 000F                  		andi.b	#$F,d0
00019A34 1140 003C                  		move.b	d0,$3C(a0)
00019A38 117C 0005 0028             		move.b	#5,subtype(a0)
00019A3E 0C28 0007 001A             		cmpi.b	#7,mapping_frame(a0)
00019A44 6600                       		bne.s	Obj56_ChkGone
00019A46 117C 000C 0028             		move.b	#$C,subtype(a0)
00019A4C 317C 0080 003A             		move.w	#$80,$3A(a0)
00019A52                            
00019A52                            Obj56_ChkGone:
00019A52                            ;		lea	(v_objstate).w,a2
00019A52 7000                       		moveq	#0,d0
00019A54 3028 0014                  		move.w	respawn_index(a0),d0
00019A58                            ;        move.w	respawn_index(a0),d0
00019A58 6700                       		beq.s	Obj56_Action
00019A5A 3440                       	    movea.w	d0,a2
00019A5C 0892 0007                  		bclr	#7,(a2)
00019A60 0812 0000                  		btst	#0,(a2)
00019A64 6700                       		beq.s	Obj56_Action
00019A66 5228 0028                  		addq.b	#1,subtype(a0)
00019A6A 4268 003A                  		clr.w	$3A(a0)
00019A6E                            
00019A6E                            Obj56_Action:				; XREF: Obj56_Index
00019A6E 3F28 0008                  		move.w	8(a0),-(sp)
00019A72 7000                       		moveq	#0,d0
00019A74 1028 0028                  		move.b	subtype(a0),d0	; get object type
00019A78 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00019A7C D040                       		add.w	d0,d0
00019A7E 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00019A82 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00019A86 381F                       		move.w	(sp)+,d4
00019A88 4A28 0001                  		tst.b	1(a0)
00019A8C 6A00                       		bpl.s	Obj56_ChkDel
00019A8E 7200                       		moveq	#0,d1
00019A90 1228 0023                  		move.b	width_pixels(a0),d1
00019A94 0641 000B                  		addi.w	#$B,d1
00019A98 7400                       		moveq	#0,d2
00019A9A 1428 0016                  		move.b	$16(a0),d2
00019A9E 3602                       		move.w	d2,d3
00019AA0 5243                       		addq.w	#1,d3
00019AA2 4EBA F47A                  		jsr	SolidObject
00019AA6                            
00019AA6                            Obj56_ChkDel:
00019AA6 3028 0034                  		move.w	$34(a0),d0
00019AAA 4EFA EDC4                  		jmp		MarkObjGone2
00019AAE                            ; ===========================================================================
00019AAE 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00019AB2 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00019AB6 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00019ABA 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00019ABE 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00019AC2 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00019AC6 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00019ACA                            ; ===========================================================================
00019ACA                            
00019ACA                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00019ACA 4E75                       		rts	
00019ACC                            ; ===========================================================================
00019ACC                            
00019ACC                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00019ACC 323C 0040                  		move.w	#$40,d1
00019AD0 7000                       		moveq	#0,d0
00019AD2 1038 FE68                  		move.b	($FFFFFE68).w,d0
00019AD6 6000                       		bra.s	Obj56_Move_LR
00019AD8                            ; ===========================================================================
00019AD8                            
00019AD8                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00019AD8 323C 0080                  		move.w	#$80,d1
00019ADC 7000                       		moveq	#0,d0
00019ADE 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00019AE2                            
00019AE2                            Obj56_Move_LR:
00019AE2 0828 0000 0022             		btst	#0,status(a0)
00019AE8 6700                       		beq.s	loc_10416
00019AEA 4440                       		neg.w	d0
00019AEC D041                       		add.w	d1,d0
00019AEE                            
00019AEE                            loc_10416:
00019AEE 3228 0034                  		move.w	$34(a0),d1
00019AF2 9240                       		sub.w	d0,d1
00019AF4 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00019AF8 4E75                       		rts	
00019AFA                            ; ===========================================================================
00019AFA                            
00019AFA                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00019AFA 323C 0040                  		move.w	#$40,d1
00019AFE 7000                       		moveq	#0,d0
00019B00 1038 FE68                  		move.b	($FFFFFE68).w,d0
00019B04 6000                       		bra.s	Obj56_Move_UD
00019B06                            ; ===========================================================================
00019B06                            
00019B06                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00019B06 323C 0080                  		move.w	#$80,d1
00019B0A 7000                       		moveq	#0,d0
00019B0C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00019B10                            
00019B10                            Obj56_Move_UD:
00019B10 0828 0000 0022             		btst	#0,status(a0)
00019B16 6700                       		beq.s	loc_10444
00019B18 4440                       		neg.w	d0
00019B1A D041                       		add.w	d1,d0
00019B1C                            
00019B1C                            loc_10444:
00019B1C 3228 0030                  		move.w	$30(a0),d1
00019B20 9240                       		sub.w	d0,d1
00019B22 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00019B26 4E75                       		rts	
00019B28                            ; ===========================================================================
00019B28                            
00019B28                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00019B28 4A28 0038                  		tst.b	$38(a0)
00019B2C 6600                       		bne.s	loc_104A4
00019B2E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00019B34 6600                       		bne.s	loc_1047A	; if not, branch
00019B36 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00019B3C 6600                       		bne.s	loc_1047A
00019B3E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00019B42 3038 D008                  		move.w	($FFFFD008).w,d0
00019B46 B068 0008                  		cmp.w	8(a0),d0
00019B4A 6400                       		bcc.s	loc_1047A
00019B4C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00019B52                            
00019B52                            loc_1047A:
00019B52 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00019B56 7000                       		moveq	#0,d0
00019B58 1028 003C                  		move.b	$3C(a0),d0
00019B5C 0832 0000 0000             		btst	#0,(a2,d0.w)
00019B62 6700                       		beq.s	loc_104AE
00019B64 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00019B6A 6600                       		bne.s	loc_1049E	; if not, branch
00019B6C 0C00 0003                  		cmpi.b	#3,d0
00019B70 6600                       		bne.s	loc_1049E
00019B72 4238 F7C9                  		clr.b	($FFFFF7C9).w
00019B76                            
00019B76                            loc_1049E:
00019B76 117C 0001 0038             		move.b	#1,$38(a0)
00019B7C                            
00019B7C                            loc_104A4:
00019B7C 4A68 003A                  		tst.w	$3A(a0)
00019B80 6700                       		beq.s	loc_104C8
00019B82 5568 003A                  		subq.w	#2,$3A(a0)
00019B86                            
00019B86                            loc_104AE:
00019B86 3028 003A                  		move.w	$3A(a0),d0
00019B8A 0828 0000 0022             		btst	#0,status(a0)
00019B90 6700                       		beq.s	loc_104BC
00019B92 4440                       		neg.w	d0
00019B94                            
00019B94                            loc_104BC:
00019B94 3228 0030                  		move.w	$30(a0),d1
00019B98 D240                       		add.w	d0,d1
00019B9A 3141 000C                  		move.w	d1,$C(a0)
00019B9E 4E75                       		rts	
00019BA0                            ; ===========================================================================
00019BA0                            
00019BA0                            loc_104C8:
00019BA0 5228 0028                  		addq.b	#1,subtype(a0)
00019BA4 4228 0038                  		clr.b	$38(a0)
00019BA8                            ;		lea	(v_objstate).w,a2
00019BA8 7000                       		moveq	#0,d0
00019BAA 3028 0014                  		move.w	respawn_index(a0),d0
00019BAE                            ;        move.w	respawn_index(a0),d0
00019BAE 3440                       	    movea.w	d0,a2
00019BB0 67D4                       		beq.s	loc_104AE
00019BB2 08D2 0000                  		bset	#0,(a2)
00019BB6 60CE                       		bra.s	loc_104AE
00019BB8                            ; ===========================================================================
00019BB8                            
00019BB8                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00019BB8 4A28 0038                  		tst.b	$38(a0)
00019BBC 6600                       		bne.s	loc_10500
00019BBE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00019BC2 7000                       		moveq	#0,d0
00019BC4 1028 003C                  		move.b	$3C(a0),d0
00019BC8 4A32 0000                  		tst.b	(a2,d0.w)
00019BCC 6A00                       		bpl.s	loc_10512
00019BCE 117C 0001 0038             		move.b	#1,$38(a0)
00019BD4                            
00019BD4                            loc_10500:
00019BD4 7000                       		moveq	#0,d0
00019BD6 1028 0016                  		move.b	$16(a0),d0
00019BDA D040                       		add.w	d0,d0
00019BDC B068 003A                  		cmp.w	$3A(a0),d0
00019BE0 6700                       		beq.s	loc_1052C
00019BE2 5468 003A                  		addq.w	#2,$3A(a0)
00019BE6                            
00019BE6                            loc_10512:
00019BE6 3028 003A                  		move.w	$3A(a0),d0
00019BEA 0828 0000 0022             		btst	#0,status(a0)
00019BF0 6700                       		beq.s	loc_10520
00019BF2 4440                       		neg.w	d0
00019BF4                            
00019BF4                            loc_10520:
00019BF4 3228 0030                  		move.w	$30(a0),d1
00019BF8 D240                       		add.w	d0,d1
00019BFA 3141 000C                  		move.w	d1,$C(a0)
00019BFE 4E75                       		rts	
00019C00                            ; ===========================================================================
00019C00                            
00019C00                            loc_1052C:
00019C00 5328 0028                  		subq.b	#1,subtype(a0)
00019C04 4228 0038                  		clr.b	$38(a0)
00019C08                            ;		lea	(v_objstate).w,a2
00019C08 7000                       		moveq	#0,d0
00019C0A 3028 0014                  		move.w	respawn_index(a0),d0
00019C0E                            ;        move.w	respawn_index(a0),d0
00019C0E 3440                       	    movea.w	d0,a2		
00019C10 67D4                       		beq.s	loc_10512
00019C12 0892 0000                  		bclr	#0,(a2)
00019C16 60CE                       		bra.s	loc_10512
00019C18                            ; ===========================================================================
00019C18                            
00019C18                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00019C18 4A28 0038                  		tst.b	$38(a0)
00019C1C 6600                       		bne.s	loc_1055E
00019C1E 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00019C22 6700                       		beq.s	locret_10578
00019C24 117C 0001 0038             		move.b	#1,$38(a0)
00019C2A 4268 003A                  		clr.w	$3A(a0)
00019C2E                            
00019C2E                            loc_1055E:
00019C2E 5268 0008                  		addq.w	#1,8(a0)
00019C32 3168 0008 0034             		move.w	8(a0),$34(a0)
00019C38 5268 003A                  		addq.w	#1,$3A(a0)
00019C3C 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00019C42 6600                       		bne.s	locret_10578
00019C44 4228 0028                  		clr.b	subtype(a0)
00019C48                            
00019C48                            locret_10578:
00019C48 4E75                       		rts	
00019C4A                            ; ===========================================================================
00019C4A                            
00019C4A                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00019C4A 4A28 0038                  		tst.b	$38(a0)
00019C4E 6600                       		bne.s	loc_10598
00019C50 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00019C54 7000                       		moveq	#0,d0
00019C56 1028 003C                  		move.b	$3C(a0),d0
00019C5A 0832 0000 0000             		btst	#0,(a2,d0.w)
00019C60 6700                       		beq.s	loc_105A2
00019C62 117C 0001 0038             		move.b	#1,$38(a0)
00019C68                            
00019C68                            loc_10598:
00019C68 4A68 003A                  		tst.w	$3A(a0)
00019C6C 6700                       		beq.s	loc_105C0
00019C6E 5568 003A                  		subq.w	#2,$3A(a0)
00019C72                            
00019C72                            loc_105A2:
00019C72 3028 003A                  		move.w	$3A(a0),d0
00019C76 0828 0000 0022             		btst	#0,status(a0)
00019C7C 6700                       		beq.s	loc_105B4
00019C7E 4440                       		neg.w	d0
00019C80 0640 0080                  		addi.w	#$80,d0
00019C84                            
00019C84                            loc_105B4:
00019C84 3228 0034                  		move.w	$34(a0),d1
00019C88 D240                       		add.w	d0,d1
00019C8A 3141 0008                  		move.w	d1,8(a0)
00019C8E 4E75                       		rts	
00019C90                            ; ===========================================================================
00019C90                            
00019C90                            loc_105C0:
00019C90 5228 0028                  		addq.b	#1,subtype(a0)
00019C94 4228 0038                  		clr.b	$38(a0)
00019C98                            ;		lea	(v_objstate).w,a2
00019C98 7000                       		moveq	#0,d0
00019C9A 3028 0014                  		move.w	respawn_index(a0),d0
00019C9E                            ;        move.w	respawn_index(a0),d0
00019C9E 3440                       	    movea.w	d0,a2
00019CA0 67D0                       		beq.s	loc_105A2
00019CA2 08D2 0000                  		bset	#0,(a2)
00019CA6 60CA                       		bra.s	loc_105A2
00019CA8                            ; ===========================================================================
00019CA8                            
00019CA8                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00019CA8 4A28 0038                  		tst.b	$38(a0)
00019CAC 6600                       		bne.s	loc_105F8
00019CAE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00019CB2 7000                       		moveq	#0,d0
00019CB4 1028 003C                  		move.b	$3C(a0),d0
00019CB8 4A32 0000                  		tst.b	(a2,d0.w)
00019CBC 6A00                       		bpl.s	loc_10606
00019CBE 117C 0001 0038             		move.b	#1,$38(a0)
00019CC4                            
00019CC4                            loc_105F8:
00019CC4 303C 0080                  		move.w	#$80,d0
00019CC8 B068 003A                  		cmp.w	$3A(a0),d0
00019CCC 6700                       		beq.s	loc_10624
00019CCE 5468 003A                  		addq.w	#2,$3A(a0)
00019CD2                            
00019CD2                            loc_10606:
00019CD2 3028 003A                  		move.w	$3A(a0),d0
00019CD6 0828 0000 0022             		btst	#0,status(a0)
00019CDC 6700                       		beq.s	loc_10618
00019CDE 4440                       		neg.w	d0
00019CE0 0640 0080                  		addi.w	#$80,d0
00019CE4                            
00019CE4                            loc_10618:
00019CE4 3228 0034                  		move.w	$34(a0),d1
00019CE8 D240                       		add.w	d0,d1
00019CEA 3141 0008                  		move.w	d1,8(a0)
00019CEE 4E75                       		rts	
00019CF0                            ; ===========================================================================
00019CF0                            
00019CF0                            loc_10624:
00019CF0 5328 0028                  		subq.b	#1,subtype(a0)
00019CF4 4228 0038                  		clr.b	$38(a0)
00019CF8                            ;		lea	(v_objstate).w,a2
00019CF8 7000                       		moveq	#0,d0
00019CFA 3028 0014                  		move.w	respawn_index(a0),d0
00019CFE                            ;        move.w	respawn_index(a0),d0
00019CFE 3440                       	    movea.w	d0,a2		
00019D00 67D0                       		beq.s	loc_10606
00019D02 0892 0000                  		bclr	#0,(a2)
00019D06 60CA                       		bra.s	loc_10606
00019D08                            ; ===========================================================================
00019D08                            
00019D08                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00019D08 323C 0010                  		move.w	#$10,d1
00019D0C 7000                       		moveq	#0,d0
00019D0E 1038 FE88                  		move.b	($FFFFFE88).w,d0
00019D12 E248                       		lsr.w	#1,d0
00019D14 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00019D18 6000                       		bra.s	Obj56_Move_Sqr
00019D1A                            ; ===========================================================================
00019D1A                            
00019D1A                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00019D1A 323C 0030                  		move.w	#$30,d1
00019D1E 7000                       		moveq	#0,d0
00019D20 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00019D24 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00019D28 6000                       		bra.s	Obj56_Move_Sqr
00019D2A                            ; ===========================================================================
00019D2A                            
00019D2A                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00019D2A 323C 0050                  		move.w	#$50,d1
00019D2E 7000                       		moveq	#0,d0
00019D30 1038 FE90                  		move.b	($FFFFFE90).w,d0
00019D34 3638 FE92                  		move.w	($FFFFFE92).w,d3
00019D38 6000                       		bra.s	Obj56_Move_Sqr
00019D3A                            ; ===========================================================================
00019D3A                            
00019D3A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00019D3A 323C 0070                  		move.w	#$70,d1
00019D3E 7000                       		moveq	#0,d0
00019D40 1038 FE94                  		move.b	($FFFFFE94).w,d0
00019D44 3638 FE96                  		move.w	($FFFFFE96).w,d3
00019D48                            
00019D48                            Obj56_Move_Sqr:
00019D48 4A43                       		tst.w	d3
00019D4A 6600                       		bne.s	loc_1068E
00019D4C 5228 0022                  		addq.b	#1,status(a0)
00019D50 0228 0003 0022             		andi.b	#3,status(a0)
00019D56                            
00019D56                            loc_1068E:
00019D56 1428 0022                  		move.b	status(a0),d2
00019D5A 0202 0003                  		andi.b	#3,d2
00019D5E 6600                       		bne.s	loc_106AE
00019D60 9041                       		sub.w	d1,d0
00019D62 D068 0034                  		add.w	$34(a0),d0
00019D66 3140 0008                  		move.w	d0,8(a0)
00019D6A 4441                       		neg.w	d1
00019D6C D268 0030                  		add.w	$30(a0),d1
00019D70 3141 000C                  		move.w	d1,$C(a0)
00019D74 4E75                       		rts	
00019D76                            ; ===========================================================================
00019D76                            
00019D76                            loc_106AE:
00019D76 5302                       		subq.b	#1,d2
00019D78 6600                       		bne.s	loc_106CC
00019D7A 5341                       		subq.w	#1,d1
00019D7C 9041                       		sub.w	d1,d0
00019D7E 4440                       		neg.w	d0
00019D80 D068 0030                  		add.w	$30(a0),d0
00019D84 3140 000C                  		move.w	d0,$C(a0)
00019D88 5241                       		addq.w	#1,d1
00019D8A D268 0034                  		add.w	$34(a0),d1
00019D8E 3141 0008                  		move.w	d1,8(a0)
00019D92 4E75                       		rts	
00019D94                            ; ===========================================================================
00019D94                            
00019D94                            loc_106CC:
00019D94 5302                       		subq.b	#1,d2
00019D96 6600                       		bne.s	loc_106EA
00019D98 5341                       		subq.w	#1,d1
00019D9A 9041                       		sub.w	d1,d0
00019D9C 4440                       		neg.w	d0
00019D9E D068 0034                  		add.w	$34(a0),d0
00019DA2 3140 0008                  		move.w	d0,8(a0)
00019DA6 5241                       		addq.w	#1,d1
00019DA8 D268 0030                  		add.w	$30(a0),d1
00019DAC 3141 000C                  		move.w	d1,$C(a0)
00019DB0 4E75                       		rts	
00019DB2                            ; ===========================================================================
00019DB2                            
00019DB2                            loc_106EA:
00019DB2 9041                       		sub.w	d1,d0
00019DB4 D068 0030                  		add.w	$30(a0),d0
00019DB8 3140 000C                  		move.w	d0,$C(a0)
00019DBC 4441                       		neg.w	d1
00019DBE D268 0034                  		add.w	$34(a0),d1
00019DC2 3141 0008                  		move.w	d1,8(a0)
00019DC6 4E75                       		rts	
00019DC8                            ; ===========================================================================
00019DC8                            ; ---------------------------------------------------------------------------
00019DC8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00019DC8                            ; ---------------------------------------------------------------------------
00019DC8                            Map_obj56:
00019DC8                            	include "_maps\obj56.asm"
00019DC8                            ; ---------------------------------------------------------------------------
00019DC8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00019DC8                            ; ---------------------------------------------------------------------------
00019DC8 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00019DCC 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00019DD0 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00019DD4 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00019DD8 01                         byte_10710:	dc.b 1
00019DD9 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00019DDE 04                         byte_10716:	dc.b 4
00019DDF E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00019DE4 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00019DE9 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00019DEE 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00019DF3 02                         byte_1072B:	dc.b 2
00019DF4 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00019DF9 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00019DFE 04                         byte_10736:	dc.b 4
00019DFF E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00019E04 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00019E09 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00019E0E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00019E13 03                         byte_1074B:	dc.b 3
00019E14 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00019E19 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00019E1E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00019E23 01                         byte_1075B:	dc.b 1
00019E24 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00019E29 02                         byte_10761:	dc.b 2
00019E2A E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00019E2F 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00019E34 04                         byte_1076C:	dc.b 4
00019E35 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00019E3A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00019E3F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00019E44 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00019E4A 00                         		even
00019E4A 00                         		even
00019E4A                            
00019E4A                            ; ===========================================================================
00019E4A                            ; ---------------------------------------------------------------------------
00019E4A                            ; Object 57 - spiked balls (SYZ, LZ)
00019E4A                            ; ---------------------------------------------------------------------------
00019E4A                            
00019E4A                            Obj57:					; XREF: Obj_Index
00019E4A 7000                       		moveq	#0,d0
00019E4C 1028 0024                  		move.b	$24(a0),d0
00019E50 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00019E54 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00019E58                            ; ===========================================================================
00019E58 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00019E5A 0000                       		dc.w Obj57_Move-Obj57_Index
00019E5C 0000                       		dc.w Obj57_Display-Obj57_Index
00019E5E                            ; ===========================================================================
00019E5E                            
00019E5E                            Obj57_Main:				; XREF: Obj57_Index
00019E5E 5428 0024                  		addq.b	#2,$24(a0)
00019E62 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00019E6A 317C 03BA 0002             		move.w	#$3BA,2(a0)
00019E70 117C 0004 0001             		move.b	#4,1(a0)
00019E76 317C 0200 0018             		move.w	#$200,priority(a0)
00019E7C 117C 0008 0023             		move.b	#8,width_pixels(a0)
00019E82 3168 0008 003A             		move.w	8(a0),$3A(a0)
00019E88 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019E8E 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00019E94 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00019E9A 6600                       		bne.s	loc_107E8
00019E9C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00019EA2 317C 0310 0002             		move.w	#$310,2(a0)
00019EA8 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00019EB0                            
00019EB0                            loc_107E8:
00019EB0 1228 0028                  		move.b	$28(a0),d1	; get object type
00019EB4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00019EB8 4881                       		ext.w	d1
00019EBA E741                       		asl.w	#3,d1		; multiply by 8
00019EBC 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00019EC0 1028 0022                  		move.b	$22(a0),d0
00019EC4 E418                       		ror.b	#2,d0
00019EC6 0200 00C0                  		andi.b	#-$40,d0
00019ECA 1140 0026                  		move.b	d0,$26(a0)
00019ECE 45E8 0029                  		lea	$29(a0),a2
00019ED2 1228 0028                  		move.b	$28(a0),d1	; get object type
00019ED6 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00019EDA 14FC 0000                  		move.b	#0,(a2)+
00019EDE 3601                       		move.w	d1,d3
00019EE0 E94B                       		lsl.w	#4,d3
00019EE2 1143 003C                  		move.b	d3,$3C(a0)
00019EE6 5341                       		subq.w	#1,d1		; set chain length (type-1)
00019EE8 6500                       		bcs.s	loc_10894
00019EEA 0828 0003 0028             		btst	#3,$28(a0)
00019EF0 6700                       		beq.s	Obj57_MakeChain
00019EF2 5341                       		subq.w	#1,d1
00019EF4 6500                       		bcs.s	loc_10894
00019EF6                            
00019EF6                            Obj57_MakeChain:
00019EF6 6100 C81C                  		bsr.w	SingleObjLoad
00019EFA 6600                       		bne.s	loc_10894
00019EFC 5228 0029                  		addq.b	#1,$29(a0)
00019F00 3A09                       		move.w	a1,d5
00019F02 0445 D000                  		subi.w	#-$3000,d5
00019F06 EC4D                       		lsr.w	#6,d5
00019F08 0245 007F                  		andi.w	#$7F,d5
00019F0C 14C5                       		move.b	d5,(a2)+
00019F0E 137C 0004 0024             		move.b	#4,$24(a1)
00019F14 1290                       		move.b	0(a0),0(a1)
00019F16 2368 0004 0004             		move.l	4(a0),4(a1)
00019F1C 3368 0002 0002             		move.w	2(a0),2(a1)
00019F22 1368 0001 0001             		move.b	1(a0),1(a1)
00019F28 3368 0018 0018             		move.w	priority(a0),priority(a1)
00019F2E 1368 0023 0023             		move.b	width_pixels(a0),width_pixels(a1)
00019F34 1368 0020 0020             		move.b	$20(a0),$20(a1)
00019F3A 0403 0010                  		subi.b	#$10,d3
00019F3E 1343 003C                  		move.b	d3,$3C(a1)
00019F42 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00019F48 6600                       		bne.s	loc_10890
00019F4A 4A03                       		tst.b	d3
00019F4C 6600                       		bne.s	loc_10890
00019F4E 137C 0002 001A             		move.b	#2,$1A(a1)
00019F54                            
00019F54                            loc_10890:
00019F54 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00019F58                            
00019F58                            loc_10894:
00019F58 3A08                       		move.w	a0,d5
00019F5A 0445 D000                  		subi.w	#-$3000,d5
00019F5E EC4D                       		lsr.w	#6,d5
00019F60 0245 007F                  		andi.w	#$7F,d5
00019F64 14C5                       		move.b	d5,(a2)+
00019F66 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00019F6C 6600                       		bne.s	Obj57_Move
00019F6E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00019F74 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00019F7A                            
00019F7A                            Obj57_Move:				; XREF: Obj57_Index
00019F7A 6100 0000                  		bsr.w	Obj57_MoveSub
00019F7E 6000 0000                  		bra.w	Obj57_ChkDel
00019F82                            ; ===========================================================================
00019F82                            
00019F82                            Obj57_MoveSub:				; XREF: Obj57_Move
00019F82 3028 003E                  		move.w	$3E(a0),d0
00019F86 D168 0026                  		add.w	d0,$26(a0)
00019F8A 1028 0026                  		move.b	$26(a0),d0
00019F8E 4EB9 0000 8DA4             		jsr	(CalcSine).l
00019F94 3428 0038                  		move.w	$38(a0),d2
00019F98 3628 003A                  		move.w	$3A(a0),d3
00019F9C 45E8 0029                  		lea	$29(a0),a2
00019FA0 7C00                       		moveq	#0,d6
00019FA2 1C1A                       		move.b	(a2)+,d6
00019FA4                            
00019FA4                            Obj57_MoveLoop:
00019FA4 7800                       		moveq	#0,d4
00019FA6 181A                       		move.b	(a2)+,d4
00019FA8 ED4C                       		lsl.w	#6,d4
00019FAA 0684 00FF D000             		addi.l	#$FFD000,d4
00019FB0 2244                       		movea.l	d4,a1
00019FB2 7800                       		moveq	#0,d4
00019FB4 1829 003C                  		move.b	$3C(a1),d4
00019FB8 2A04                       		move.l	d4,d5
00019FBA C9C0                       		muls.w	d0,d4
00019FBC E084                       		asr.l	#8,d4
00019FBE CBC1                       		muls.w	d1,d5
00019FC0 E085                       		asr.l	#8,d5
00019FC2 D842                       		add.w	d2,d4
00019FC4 DA43                       		add.w	d3,d5
00019FC6 3344 000C                  		move.w	d4,$C(a1)
00019FCA 3345 0008                  		move.w	d5,8(a1)
00019FCE 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00019FD2 4E75                       		rts	
00019FD4                            ; ===========================================================================
00019FD4                            
00019FD4                            Obj57_ChkDel:				; XREF: Obj57_Move
00019FD4 3028 003A                  		move.w	$3A(a0),d0
00019FD8 0240 FF80                  		andi.w	#$FF80,d0
00019FDC 3238 F700                  		move.w	($FFFFF700).w,d1
00019FE0 0441 0080                  		subi.w	#$80,d1
00019FE4 0241 FF80                  		andi.w	#$FF80,d1
00019FE8 9041                       		sub.w	d1,d0
00019FEA 0C40 0280                  		cmpi.w	#$280,d0
00019FEE 6200 0000                  		bhi.w	Obj57_Delete
00019FF2 6000 BC54                  		bra.w	DisplaySprite
00019FF6                            ; ===========================================================================
00019FF6                            
00019FF6                            Obj57_Delete:				; XREF: Obj57_ChkDel
00019FF6 7400                       		moveq	#0,d2
00019FF8 45E8 0029                  		lea	$29(a0),a2
00019FFC 141A                       		move.b	(a2)+,d2
00019FFE                            
00019FFE                            Obj57_DelLoop:
00019FFE 7000                       		moveq	#0,d0
0001A000 101A                       		move.b	(a2)+,d0
0001A002 ED48                       		lsl.w	#6,d0
0001A004 0680 00FF D000             		addi.l	#$FFD000,d0
0001A00A 2240                       		movea.l	d0,a1
0001A00C 6100 BBF0                  		bsr.w	DeleteObject2
0001A010 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001A014                            
0001A014 4E75                       		rts	
0001A016                            ; ===========================================================================
0001A016                            
0001A016                            Obj57_Display:				; XREF: Obj57_Index
0001A016 6000 BC30                  		bra.w	DisplaySprite
0001A01A                            ; ===========================================================================
0001A01A                            ; ---------------------------------------------------------------------------
0001A01A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001A01A                            ; ---------------------------------------------------------------------------
0001A01A                            Map_obj57:
0001A01A                            	include "_maps\obj57syz.asm"
0001A01A                            ; ---------------------------------------------------------------------------
0001A01A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001A01A                            ; ---------------------------------------------------------------------------
0001A01A 0000                       		dc.w byte_10958-Map_obj57
0001A01C 01                         byte_10958:	dc.b 1
0001A01D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001A022                            		even
0001A022                            		even
0001A022                            
0001A022                            ; ---------------------------------------------------------------------------
0001A022                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001A022                            ; ---------------------------------------------------------------------------
0001A022                            Map_obj57a:
0001A022                            	include "_maps\obj57lz.asm"
0001A022                            ; ---------------------------------------------------------------------------
0001A022                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001A022                            ; ---------------------------------------------------------------------------
0001A022 0000                       		dc.w byte_10964-Map_obj57a
0001A024 0000                       		dc.w byte_1096A-Map_obj57a
0001A026 0000                       		dc.w byte_10970-Map_obj57a
0001A028 01                         byte_10964:	dc.b 1
0001A029 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001A02E 01                         byte_1096A:	dc.b 1
0001A02F F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001A034 01                         byte_10970:	dc.b 1
0001A035 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001A03A                            		even
0001A03A                            		even
0001A03A                            
0001A03A                            ; ===========================================================================
0001A03A                            ; ---------------------------------------------------------------------------
0001A03A                            ; Object 58 - giant spiked balls (SYZ)
0001A03A                            ; ---------------------------------------------------------------------------
0001A03A                            
0001A03A                            Obj58:					; XREF: Obj_Index
0001A03A 7000                       		moveq	#0,d0
0001A03C 1028 0024                  		move.b	routine(a0),d0
0001A040 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001A044 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
0001A048                            ; ===========================================================================
0001A048 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001A04A 0000                       		dc.w Obj58_Move-Obj58_Index
0001A04C                            ; ===========================================================================
0001A04C                            
0001A04C                            Obj58_Main:				; XREF: Obj58_Index
0001A04C 5428 0024                  		addq.b	#2,routine(a0)
0001A050 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
0001A058 317C 0396 0002             		move.w	#$396,2(a0)
0001A05E 117C 0004 0001             		move.b	#4,1(a0)
0001A064 317C 0200 0018             		move.w	#$200,priority(a0)
0001A06A 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001A070 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001A076 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A07C 117C 0086 0020             		move.b	#$86,collision_flags(a0)
0001A082 1228 0028                  		move.b	subtype(a0),d1	; get object type
0001A086 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001A08A 4881                       		ext.w	d1
0001A08C E741                       		asl.w	#3,d1		; multiply by 8
0001A08E 3141 003E                  		move.w	d1,parent(a0)	; set object speed
0001A092 1028 0022                  		move.b	status(a0),d0
0001A096 E418                       		ror.b	#2,d0
0001A098 0200 00C0                  		andi.b	#$C0,d0
0001A09C 1140 0026                  		move.b	d0,$26(a0)
0001A0A0 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
0001A0A6                            
0001A0A6                            Obj58_Move:				; XREF: Obj58_Index
0001A0A6 7000                       		moveq	#0,d0
0001A0A8 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001A0AC 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001A0B0 D040                       		add.w	d0,d0
0001A0B2 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
0001A0B6 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0001A0BA 3028 003A                  		move.w	$3A(a0),d0
0001A0BE 4EFA E7B0                  		jmp MarkObjGone2
0001A0C2                            ; ===========================================================================
0001A0C2 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001A0C4 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001A0C6 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001A0C8 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001A0CA                            ; ===========================================================================
0001A0CA                            
0001A0CA                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001A0CA 4E75                       		rts	
0001A0CC                            ; ===========================================================================
0001A0CC                            
0001A0CC                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001A0CC 323C 0060                  		move.w	#$60,d1
0001A0D0 7000                       		moveq	#0,d0
0001A0D2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001A0D6 0828 0000 0022             		btst	#0,status(a0)
0001A0DC 6700                       		beq.s	loc_10A38
0001A0DE 4440                       		neg.w	d0
0001A0E0 D041                       		add.w	d1,d0
0001A0E2                            
0001A0E2                            loc_10A38:
0001A0E2 3228 003A                  		move.w	$3A(a0),d1
0001A0E6 9240                       		sub.w	d0,d1
0001A0E8 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001A0EC 4E75                       		rts	
0001A0EE                            ; ===========================================================================
0001A0EE                            
0001A0EE                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001A0EE 323C 0060                  		move.w	#$60,d1
0001A0F2 7000                       		moveq	#0,d0
0001A0F4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001A0F8 0828 0000 0022             		btst	#0,status(a0)
0001A0FE 6700                       		beq.s	loc_10A5C
0001A100 4440                       		neg.w	d0
0001A102 0640 0080                  		addi.w	#$80,d0
0001A106                            
0001A106                            loc_10A5C:
0001A106 3228 0038                  		move.w	$38(a0),d1
0001A10A 9240                       		sub.w	d0,d1
0001A10C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001A110 4E75                       		rts	
0001A112                            ; ===========================================================================
0001A112                            
0001A112                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001A112 3028 003E                  		move.w	parent(a0),d0
0001A116 D168 0026                  		add.w	d0,$26(a0)
0001A11A 1028 0026                  		move.b	$26(a0),d0
0001A11E 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001A124 3428 0038                  		move.w	$38(a0),d2
0001A128 3628 003A                  		move.w	$3A(a0),d3
0001A12C 7800                       		moveq	#0,d4
0001A12E 1828 003C                  		move.b	$3C(a0),d4
0001A132 2A04                       		move.l	d4,d5
0001A134 C9C0                       		muls.w	d0,d4
0001A136 E084                       		asr.l	#8,d4
0001A138 CBC1                       		muls.w	d1,d5
0001A13A E085                       		asr.l	#8,d5
0001A13C D842                       		add.w	d2,d4
0001A13E DA43                       		add.w	d3,d5
0001A140 3144 000C                  		move.w	d4,$C(a0)
0001A144 3145 0008                  		move.w	d5,8(a0)
0001A148 4E75                       		rts	
0001A14A                            ; ===========================================================================
0001A14A                            ; ---------------------------------------------------------------------------
0001A14A                            ; Sprite mappings - SBZ	spiked ball on a chain
0001A14A                            ; ---------------------------------------------------------------------------
0001A14A                            Map_obj15b:
0001A14A                            	include "_maps\obj15sbz.asm"
0001A14A                            ; ---------------------------------------------------------------------------
0001A14A                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001A14A                            ; ---------------------------------------------------------------------------
0001A14A 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001A14E 0000                       		dc.w byte_10AC6-Map_obj15b
0001A150 05                         byte_10AA6:	dc.b 5
0001A151 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
0001A156 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001A15B F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001A160 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001A165 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001A16A 01                         byte_10AC0:	dc.b 1
0001A16B F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001A170 02                         byte_10AC6:	dc.b 2
0001A171 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
0001A176 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001A17C 00                         		even
0001A17C 00                         		even
0001A17C                            
0001A17C                            ; ===========================================================================
0001A17C                            ; ---------------------------------------------------------------------------
0001A17C                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001A17C                            ; ---------------------------------------------------------------------------
0001A17C                            
0001A17C                            Obj59:					; XREF: Obj_Index
0001A17C 7000                       		moveq	#0,d0
0001A17E 1028 0024                  		move.b	routine(a0),d0
0001A182 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
0001A186 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001A18A 3028 0032                  		move.w	$32(a0),d0
0001A18E 4EFA E6E0                  		jmp		MarkObjGone2
0001A192                            ; ===========================================================================
0001A192 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001A194 0000                       		dc.w Obj59_Platform-Obj59_Index
0001A196 0000                       		dc.w Obj59_Action-Obj59_Index
0001A198 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001A19A                            
0001A19A 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
0001A19C                            
0001A19C 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001A19E 2001                       		dc.b $20, 1
0001A1A0 3401                       		dc.b $34, 1
0001A1A2 1003                       		dc.b $10, 3
0001A1A4 2003                       		dc.b $20, 3
0001A1A6 3403                       		dc.b $34, 3
0001A1A8 1401                       		dc.b $14, 1
0001A1AA 2401                       		dc.b $24, 1
0001A1AC 2C01                       		dc.b $2C, 1
0001A1AE 1403                       		dc.b $14, 3
0001A1B0 2403                       		dc.b $24, 3
0001A1B2 2C03                       		dc.b $2C, 3
0001A1B4 2005                       		dc.b $20, 5
0001A1B6 2007                       		dc.b $20, 7
0001A1B8 3009                       		dc.b $30, 9
0001A1BA                            ; ===========================================================================
0001A1BA                            
0001A1BA                            Obj59_Main:				; XREF: Obj59_Index
0001A1BA 5428 0024                  		addq.b	#2,routine(a0)
0001A1BE 7000                       		moveq	#0,d0
0001A1C0 1028 0028                  		move.b	subtype(a0),d0
0001A1C4 6A00                       		bpl.s	Obj59_Main2
0001A1C6 5828 0024                  		addq.b	#4,routine(a0)
0001A1CA 0240 007F                  		andi.w	#$7F,d0
0001A1CE C0FC 0006                  		mulu.w	#6,d0
0001A1D2 3140 003C                  		move.w	d0,$3C(a0)
0001A1D6 3140 003E                  		move.w	d0,parent(a0)
0001A1DA 588F                       		addq.l	#4,sp
0001A1DC 4E75                       		rts	
0001A1DE                            ; ===========================================================================
0001A1DE                            
0001A1DE                            Obj59_Main2:
0001A1DE E648                       		lsr.w	#3,d0
0001A1E0 0240 001E                  		andi.w	#$1E,d0
0001A1E4 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001A1E8 115A 0023                  		move.b	(a2)+,width_pixels(a0)
0001A1EC 115A 001A                  		move.b	(a2)+,mapping_frame(a0)
0001A1F0 7000                       		moveq	#0,d0
0001A1F2 1028 0028                  		move.b	subtype(a0),d0
0001A1F6 D040                       		add.w	d0,d0
0001A1F8 0240 001E                  		andi.w	#$1E,d0
0001A1FC 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001A200 101A                       		move.b	(a2)+,d0
0001A202 E548                       		lsl.w	#2,d0
0001A204 3140 003C                  		move.w	d0,$3C(a0)
0001A208 115A 0028                  		move.b	(a2)+,subtype(a0)
0001A20C 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001A214 317C 4000 0002             		move.w	#$4000,2(a0)
0001A21A 117C 0004 0001             		move.b	#4,1(a0)
0001A220 317C 0200 0018             		move.w	#$200,priority(a0)
0001A226 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A22C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001A232                            
0001A232                            Obj59_Platform:				; XREF: Obj59_Index
0001A232 7200                       		moveq	#0,d1
0001A234 1228 0023                  		move.b	width_pixels(a0),d1
0001A238 4EB9 0000 F0A6             		jsr	(PlatformObject).l
0001A23E 6000 0000                  		bra.w	Obj59_Types
0001A242                            ; ===========================================================================
0001A242                            
0001A242                            Obj59_Action:				; XREF: Obj59_Index
0001A242 7200                       		moveq	#0,d1
0001A244 1228 0023                  		move.b	width_pixels(a0),d1
0001A248 4EB9 0000 F1E6             		jsr	(ExitPlatform).l
0001A24E 3F28 0008                  		move.w	8(a0),-(sp)
0001A252 4EB9 0000 0000             		jsr	Obj59_Types
0001A258 341F                       		move.w	(sp)+,d2
0001A25A 4A10                       		tst.b	0(a0)
0001A25C 6700                       		beq.s	locret_10BD4
0001A25E 4EF9 0000 F44C             		jmp	(MvSonicOnPtfm2).l
0001A264                            ; ===========================================================================
0001A264                            
0001A264                            locret_10BD4:
0001A264 4E75                       		rts	
0001A266                            ; ===========================================================================
0001A266                            
0001A266                            Obj59_Types:
0001A266 7000                       		moveq	#0,d0
0001A268 1028 0028                  		move.b	subtype(a0),d0
0001A26C 0240 000F                  		andi.w	#$F,d0
0001A270 D040                       		add.w	d0,d0
0001A272 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001A276 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001A27A                            ; ===========================================================================
0001A27A 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001A27E 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001A282 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001A286 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001A28A 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0001A28E                            ; ===========================================================================
0001A28E                            
0001A28E                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0001A28E 4E75                       		rts	
0001A290                            ; ===========================================================================
0001A290                            
0001A290                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001A290 0C28 0004 0024             		cmpi.b	#4,routine(a0)	; check	if Sonic is standing on	the object
0001A296 6600                       		bne.s	locret_10C0C
0001A298 5228 0028                  		addq.b	#1,subtype(a0)	; if yes, add 1	to type
0001A29C                            
0001A29C                            locret_10C0C:
0001A29C 4E75                       		rts	
0001A29E                            ; ===========================================================================
0001A29E                            
0001A29E                            Obj59_Type02:				; XREF: Obj59_TypeIndex
0001A29E 4EB9 0000 0000             		jsr	Obj59_Move
0001A2A4 3028 0034                  		move.w	$34(a0),d0
0001A2A8 4440                       		neg.w	d0
0001A2AA D068 0030                  		add.w	$30(a0),d0
0001A2AE 3140 000C                  		move.w	d0,$C(a0)
0001A2B2 4E75                       		rts	
0001A2B4                            ; ===========================================================================
0001A2B4                            
0001A2B4                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001A2B4 4EB9 0000 0000             		jsr	Obj59_Move
0001A2BA 3028 0034                  		move.w	$34(a0),d0
0001A2BE D068 0030                  		add.w	$30(a0),d0
0001A2C2 3140 000C                  		move.w	d0,$C(a0)
0001A2C6 4E75                       		rts	
0001A2C8                            ; ===========================================================================
0001A2C8                            
0001A2C8                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001A2C8 4EB9 0000 0000             		jsr	Obj59_Move
0001A2CE 3028 0034                  		move.w	$34(a0),d0
0001A2D2 E240                       		asr.w	#1,d0
0001A2D4 4440                       		neg.w	d0
0001A2D6 D068 0030                  		add.w	$30(a0),d0
0001A2DA 3140 000C                  		move.w	d0,$C(a0)
0001A2DE 3028 0034                  		move.w	$34(a0),d0
0001A2E2 D068 0032                  		add.w	$32(a0),d0
0001A2E6 3140 0008                  		move.w	d0,8(a0)
0001A2EA 4E75                       		rts	
0001A2EC                            ; ===========================================================================
0001A2EC                            
0001A2EC                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001A2EC 4EB9 0000 0000             		jsr	Obj59_Move
0001A2F2 3028 0034                  		move.w	$34(a0),d0
0001A2F6 E240                       		asr.w	#1,d0
0001A2F8 D068 0030                  		add.w	$30(a0),d0
0001A2FC 3140 000C                  		move.w	d0,$C(a0)
0001A300 3028 0034                  		move.w	$34(a0),d0
0001A304 4440                       		neg.w	d0
0001A306 D068 0032                  		add.w	$32(a0),d0
0001A30A 3140 0008                  		move.w	d0,8(a0)
0001A30E 4E75                       		rts	
0001A310                            ; ===========================================================================
0001A310                            
0001A310                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001A310 4EB9 0000 0000             		jsr	Obj59_Move
0001A316 3028 0034                  		move.w	$34(a0),d0
0001A31A 4440                       		neg.w	d0
0001A31C D068 0030                  		add.w	$30(a0),d0
0001A320 3140 000C                  		move.w	d0,$C(a0)
0001A324 4A28 0028                  		tst.b	subtype(a0)
0001A328 6700 0000                  		beq.w	loc_10C94
0001A32C 4E75                       		rts	
0001A32E                            ; ===========================================================================
0001A32E                            
0001A32E                            loc_10C94:
0001A32E 0828 0003 0022             		btst	#3,status(a0)
0001A334 6700                       		beq.s	Obj59_Delete
0001A336 08E9 0001 0022             		bset	#1,status(a1)
0001A33C 08A9 0003 0022             		bclr	#3,status(a1)
0001A342 137C 0002 0024             		move.b	#2,routine(a1)
0001A348                            
0001A348                            
0001A348                            Obj59_Delete:
0001A348 6000 B8B2                  		bra.w	DeleteObject
0001A34C                            
0001A34C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A34C                            
0001A34C                            
0001A34C                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001A34C 3028 0038                  		move.w	$38(a0),d0
0001A350 4A28 003A                  		tst.b	$3A(a0)
0001A354 6600                       		bne.s	loc_10CC8
0001A356 0C40 0800                  		cmpi.w	#$800,d0
0001A35A 6400                       		bcc.s	loc_10CD0
0001A35C 0640 0010                  		addi.w	#$10,d0
0001A360 6000                       		bra.s	loc_10CD0
0001A362                            ; ===========================================================================
0001A362                            
0001A362                            loc_10CC8:
0001A362 4A40                       		tst.w	d0
0001A364 6700                       		beq.s	loc_10CD0
0001A366 0440 0010                  		subi.w	#$10,d0
0001A36A                            
0001A36A                            loc_10CD0:
0001A36A 3140 0038                  		move.w	d0,$38(a0)
0001A36E 48C0                       		ext.l	d0
0001A370 E180                       		asl.l	#8,d0
0001A372 D0A8 0034                  		add.l	$34(a0),d0
0001A376 2140 0034                  		move.l	d0,$34(a0)
0001A37A 4840                       		swap	d0
0001A37C 3428 003C                  		move.w	$3C(a0),d2
0001A380 B042                       		cmp.w	d2,d0
0001A382 6300                       		bls.s	loc_10CF0
0001A384 117C 0001 003A             		move.b	#1,$3A(a0)
0001A38A                            
0001A38A                            loc_10CF0:
0001A38A D442                       		add.w	d2,d2
0001A38C B042                       		cmp.w	d2,d0
0001A38E 6600                       		bne.s	locret_10CFA
0001A390 4228 0028                  		clr.b	subtype(a0)
0001A394                            
0001A394                            locret_10CFA:
0001A394 4E75                       		rts	
0001A396                            ; End of function Obj59_Move
0001A396                            
0001A396                            ; ===========================================================================
0001A396                            
0001A396                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001A396 5368 003C                  		subq.w	#1,$3C(a0)
0001A39A 6600                       		bne.s	Obj59_ChkDel
0001A39C 3168 003E 003C             		move.w	parent(a0),$3C(a0)
0001A3A2 4EBA C370                  		jsr	SingleObjLoad
0001A3A6 6600                       		bne.s	Obj59_ChkDel
0001A3A8 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001A3AC 3368 0008 0008             		move.w	8(a0),8(a1)
0001A3B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A3B8 137C 000E 0028             		move.b	#$E,subtype(a1)
0001A3BE                            
0001A3BE                            Obj59_ChkDel:
0001A3BE 588F                       		addq.l	#4,sp
0001A3C0 4EFA E7B8                  		jmp		MarkObjGone3
0001A3C4                            ; ===========================================================================
0001A3C4                            ; ---------------------------------------------------------------------------
0001A3C4                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001A3C4                            ; ---------------------------------------------------------------------------
0001A3C4                            Map_obj59:
0001A3C4                            	include "_maps\obj59.asm"
0001A3C4                            ; ---------------------------------------------------------------------------
0001A3C4                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001A3C4                            ; ---------------------------------------------------------------------------
0001A3C4 0000                       		dc.w byte_10D4A-Map_obj59
0001A3C6 03                         byte_10D4A:	dc.b 3
0001A3C7 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001A3CC F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001A3D1 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001A3D6                            		even
0001A3D6                            		even
0001A3D6                            
0001A3D6                            ; ===========================================================================
0001A3D6                            ; ---------------------------------------------------------------------------
0001A3D6                            ; Object 5A - platforms	moving in circles (SLZ)
0001A3D6                            ; ---------------------------------------------------------------------------
0001A3D6                            
0001A3D6                            Obj5A:					; XREF: Obj_Index
0001A3D6 7000                       		moveq	#0,d0
0001A3D8 1028 0024                  		move.b	routine(a0),d0
0001A3DC 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001A3E0 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001A3E4 3028 0032                  		move.w	$32(a0),d0
0001A3E8 4EFA E486                  		jmp		MarkObjGone2
0001A3EC                            ; ===========================================================================
0001A3EC 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001A3EE 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001A3F0 0000                       		dc.w Obj5A_Action-Obj5A_Index
0001A3F2                            ; ===========================================================================
0001A3F2                            
0001A3F2                            Obj5A_Main:				; XREF: Obj5A_Index
0001A3F2 5428 0024                  		addq.b	#2,routine(a0)
0001A3F6 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001A3FE 317C 4000 0002             		move.w	#$4000,2(a0)
0001A404 117C 0004 0001             		move.b	#4,1(a0)
0001A40A 317C 0200 0018             		move.w	#$200,priority(a0)
0001A410 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001A416 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A41C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001A422                            
0001A422                            Obj5A_Platform:				; XREF: Obj5A_Index
0001A422 7200                       		moveq	#0,d1
0001A424 1228 0023                  		move.b	width_pixels(a0),d1
0001A428 4EB9 0000 F0A6             		jsr	(PlatformObject).l
0001A42E 6000 0000                  		bra.w	Obj5A_Types
0001A432                            ; ===========================================================================
0001A432                            
0001A432                            Obj5A_Action:				; XREF: Obj5A_Index
0001A432 7200                       		moveq	#0,d1
0001A434 1228 0023                  		move.b	width_pixels(a0),d1
0001A438 4EB9 0000 F1E6             		jsr	(ExitPlatform).l
0001A43E 3F28 0008                  		move.w	8(a0),-(sp)
0001A442 4EB9 0000 0000             		jsr	Obj5A_Types
0001A448 341F                       		move.w	(sp)+,d2
0001A44A 4EF9 0000 F44C             		jmp	(MvSonicOnPtfm2).l
0001A450                            ; ===========================================================================
0001A450                            
0001A450                            Obj5A_Types:
0001A450 7000                       		moveq	#0,d0
0001A452 1028 0028                  		move.b	subtype(a0),d0
0001A456 0240 000C                  		andi.w	#$C,d0
0001A45A E248                       		lsr.w	#1,d0
0001A45C 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001A460 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001A464                            ; ===========================================================================
0001A464 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001A466 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001A468                            ; ===========================================================================
0001A468                            
0001A468                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001A468 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001A46C 0401 0050                  		subi.b	#$50,d1
0001A470 4881                       		ext.w	d1
0001A472 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001A476 0402 0050                  		subi.b	#$50,d2
0001A47A 4882                       		ext.w	d2
0001A47C 0828 0000 0028             		btst	#0,subtype(a0)
0001A482 6700                       		beq.s	loc_10E24
0001A484 4441                       		neg.w	d1
0001A486 4442                       		neg.w	d2
0001A488                            
0001A488                            loc_10E24:
0001A488 0828 0001 0028             		btst	#1,subtype(a0)
0001A48E 6700                       		beq.s	loc_10E30
0001A490 4441                       		neg.w	d1
0001A492 C342                       		exg	d1,d2
0001A494                            
0001A494                            loc_10E30:
0001A494 D268 0032                  		add.w	$32(a0),d1
0001A498 3141 0008                  		move.w	d1,8(a0)
0001A49C D468 0030                  		add.w	$30(a0),d2
0001A4A0 3142 000C                  		move.w	d2,$C(a0)
0001A4A4 4E75                       		rts	
0001A4A6                            ; ===========================================================================
0001A4A6                            
0001A4A6                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001A4A6 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001A4AA 0401 0050                  		subi.b	#$50,d1
0001A4AE 4881                       		ext.w	d1
0001A4B0 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001A4B4 0402 0050                  		subi.b	#$50,d2
0001A4B8 4882                       		ext.w	d2
0001A4BA 0828 0000 0028             		btst	#0,subtype(a0)
0001A4C0 6700                       		beq.s	loc_10E62
0001A4C2 4441                       		neg.w	d1
0001A4C4 4442                       		neg.w	d2
0001A4C6                            
0001A4C6                            loc_10E62:
0001A4C6 0828 0001 0028             		btst	#1,subtype(a0)
0001A4CC 6700                       		beq.s	loc_10E6E
0001A4CE 4441                       		neg.w	d1
0001A4D0 C342                       		exg	d1,d2
0001A4D2                            
0001A4D2                            loc_10E6E:
0001A4D2 4441                       		neg.w	d1
0001A4D4 D268 0032                  		add.w	$32(a0),d1
0001A4D8 3141 0008                  		move.w	d1,8(a0)
0001A4DC D468 0030                  		add.w	$30(a0),d2
0001A4E0 3142 000C                  		move.w	d2,$C(a0)
0001A4E4 4E75                       		rts	
0001A4E6                            ; ===========================================================================
0001A4E6                            ; ---------------------------------------------------------------------------
0001A4E6                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001A4E6                            ; ---------------------------------------------------------------------------
0001A4E6                            Map_obj5A:
0001A4E6                            	include "_maps\obj5A.asm"
0001A4E6                            ; ---------------------------------------------------------------------------
0001A4E6                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001A4E6                            ; ---------------------------------------------------------------------------
0001A4E6 0000                       		dc.w byte_10E84-Map_obj5A
0001A4E8 02                         byte_10E84:	dc.b 2
0001A4E9 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001A4EE F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001A4F4 00                         		even
0001A4F4 00                         		even
0001A4F4                            
0001A4F4                            ; ===========================================================================
0001A4F4                            ; ---------------------------------------------------------------------------
0001A4F4                            ; Object 5B - blocks that form a staircase (SLZ)
0001A4F4                            ; ---------------------------------------------------------------------------
0001A4F4                            
0001A4F4                            Obj5B:					; XREF: Obj_Index
0001A4F4 7000                       		moveq	#0,d0
0001A4F6 1028 0024                  		move.b	routine(a0),d0
0001A4FA 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001A4FE 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001A502 3028 0030                  		move.w	$30(a0),d0
0001A506 4EFA E368                  		jmp		MarkObjGone2
0001A50A                            ; ===========================================================================
0001A50A 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001A50C 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001A50E 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001A510                            ; ===========================================================================
0001A510                            
0001A510                            Obj5B_Main:				; XREF: Obj5B_Index
0001A510 5428 0024                  		addq.b	#2,routine(a0)
0001A514 7638                       		moveq	#$38,d3
0001A516 7801                       		moveq	#1,d4
0001A518 0828 0000 0022             		btst	#0,status(a0)
0001A51E 6700                       		beq.s	loc_10EDA
0001A520 763B                       		moveq	#$3B,d3
0001A522 78FF                       		moveq	#-1,d4
0001A524                            
0001A524                            loc_10EDA:
0001A524 3428 0008                  		move.w	8(a0),d2
0001A528 2248                       		movea.l	a0,a1
0001A52A 7203                       		moveq	#3,d1
0001A52C 6000                       		bra.s	Obj5B_MakeBlocks
0001A52E                            ; ===========================================================================
0001A52E                            
0001A52E                            Obj5B_Loop:
0001A52E 4EBA C1FA                  		jsr	SingleObjLoad2
0001A532 6600 0000                  		bne.w	Obj5B_Move
0001A536 137C 0004 0024             		move.b	#4,routine(a1)
0001A53C                            
0001A53C                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001A53C 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
0001A540 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001A548 337C 4000 0002             		move.w	#$4000,2(a1)
0001A54E 137C 0004 0001             		move.b	#4,1(a1)
0001A554 337C 0180 0018             		move.w	#$180,priority(a1)
0001A55A 137C 0010 0023             		move.b	#$10,width_pixels(a1)
0001A560 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
0001A566 3342 0008                  		move.w	d2,8(a1)
0001A56A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A570 3368 0008 0030             		move.w	8(a0),$30(a1)
0001A576 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001A57C 0642 0020                  		addi.w	#$20,d2
0001A580 1343 0037                  		move.b	d3,$37(a1)
0001A584 2348 003C                  		move.l	a0,$3C(a1)
0001A588 D604                       		add.b	d4,d3
0001A58A 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001A58E                            
0001A58E                            Obj5B_Move:				; XREF: Obj5B_Index
0001A58E 7000                       		moveq	#0,d0
0001A590 1028 0028                  		move.b	subtype(a0),d0
0001A594 0240 0007                  		andi.w	#7,d0
0001A598 D040                       		add.w	d0,d0
0001A59A 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001A59E 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001A5A2                            
0001A5A2                            Obj5B_Solid:				; XREF: Obj5B_Index
0001A5A2 2468 003C                  		movea.l	$3C(a0),a2
0001A5A6 7000                       		moveq	#0,d0
0001A5A8 1028 0037                  		move.b	$37(a0),d0
0001A5AC 1032 0000                  		move.b	(a2,d0.w),d0
0001A5B0 D068 0032                  		add.w	$32(a0),d0
0001A5B4 3140 000C                  		move.w	d0,$C(a0)
0001A5B8 7200                       		moveq	#0,d1
0001A5BA 1228 0023                  		move.b	width_pixels(a0),d1
0001A5BE 0641 000B                  		addi.w	#$B,d1
0001A5C2 343C 0010                  		move.w	#$10,d2
0001A5C6 363C 0011                  		move.w	#$11,d3
0001A5CA 3828 0008                  		move.w	8(a0),d4
0001A5CE 4EBA E94E                  		jsr	SolidObject
0001A5D2 4A04                       		tst.b	d4
0001A5D4 6A00                       		bpl.s	loc_10F92
0001A5D6 1544 0036                  		move.b	d4,$36(a2)
0001A5DA                            
0001A5DA                            loc_10F92:
0001A5DA 0828 0003 0022             		btst	#3,status(a0)
0001A5E0 6700                       		beq.s	locret_10FA0
0001A5E2 157C 0001 0036             		move.b	#1,$36(a2)
0001A5E8                            
0001A5E8                            locret_10FA0:
0001A5E8 4E75                       		rts	
0001A5EA                            ; ===========================================================================
0001A5EA 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
0001A5EC 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001A5EE 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001A5F0 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001A5F2                            ; ===========================================================================
0001A5F2                            
0001A5F2                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001A5F2 4A68 0034                  		tst.w	$34(a0)
0001A5F6 6600                       		bne.s	loc_10FC0
0001A5F8 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001A5FE 6600                       		bne.s	locret_10FBE
0001A600 317C 001E 0034             		move.w	#$1E,$34(a0)
0001A606                            
0001A606                            locret_10FBE:
0001A606 4E75                       		rts	
0001A608                            ; ===========================================================================
0001A608                            
0001A608                            loc_10FC0:
0001A608 5368 0034                  		subq.w	#1,$34(a0)
0001A60C 66F8                       		bne.s	locret_10FBE
0001A60E 5228 0028                  		addq.b	#1,subtype(a0)	; add 1	to type
0001A612 4E75                       		rts	
0001A614                            ; ===========================================================================
0001A614                            
0001A614                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001A614 4A68 0034                  		tst.w	$34(a0)
0001A618 6600                       		bne.s	loc_10FE0
0001A61A 4A28 0036                  		tst.b	$36(a0)
0001A61E 6A00                       		bpl.s	locret_10FDE
0001A620 317C 003C 0034             		move.w	#$3C,$34(a0)
0001A626                            
0001A626                            locret_10FDE:
0001A626 4E75                       		rts	
0001A628                            ; ===========================================================================
0001A628                            
0001A628                            loc_10FE0:
0001A628 5368 0034                  		subq.w	#1,$34(a0)
0001A62C 6600                       		bne.s	loc_10FEC
0001A62E 5228 0028                  		addq.b	#1,subtype(a0)	; add 1	to type
0001A632 4E75                       		rts	
0001A634                            ; ===========================================================================
0001A634                            
0001A634                            loc_10FEC:
0001A634 43E8 0038                  		lea	$38(a0),a1
0001A638 3028 0034                  		move.w	$34(a0),d0
0001A63C E408                       		lsr.b	#2,d0
0001A63E 0200 0001                  		andi.b	#1,d0
0001A642 12C0                       		move.b	d0,(a1)+
0001A644 0A00 0001                  		eori.b	#1,d0
0001A648 12C0                       		move.b	d0,(a1)+
0001A64A 0A00 0001                  		eori.b	#1,d0
0001A64E 12C0                       		move.b	d0,(a1)+
0001A650 0A00 0001                  		eori.b	#1,d0
0001A654 12C0                       		move.b	d0,(a1)+
0001A656 4E75                       		rts	
0001A658                            ; ===========================================================================
0001A658                            
0001A658                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001A658 43E8 0038                  		lea	$38(a0),a1
0001A65C 0C11 0080                  		cmpi.b	#$80,(a1)
0001A660 6700                       		beq.s	locret_11038
0001A662 5211                       		addq.b	#1,(a1)
0001A664 7200                       		moveq	#0,d1
0001A666 1219                       		move.b	(a1)+,d1
0001A668 4841                       		swap	d1
0001A66A E289                       		lsr.l	#1,d1
0001A66C 2401                       		move.l	d1,d2
0001A66E E289                       		lsr.l	#1,d1
0001A670 2601                       		move.l	d1,d3
0001A672 D682                       		add.l	d2,d3
0001A674 4841                       		swap	d1
0001A676 4842                       		swap	d2
0001A678 4843                       		swap	d3
0001A67A 12C3                       		move.b	d3,(a1)+
0001A67C 12C2                       		move.b	d2,(a1)+
0001A67E 12C1                       		move.b	d1,(a1)+
0001A680                            
0001A680                            locret_11038:
0001A680 4E75                       		rts	
0001A682 4E75                       		rts	
0001A684                            ; ===========================================================================
0001A684                            ; ---------------------------------------------------------------------------
0001A684                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001A684                            ; ---------------------------------------------------------------------------
0001A684                            Map_obj5B:
0001A684                            	include "_maps\obj5B.asm"
0001A684                            ; ---------------------------------------------------------------------------
0001A684                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001A684                            ; ---------------------------------------------------------------------------
0001A684 0000                       		dc.w byte_1103E-Map_obj5B
0001A686 01                         byte_1103E:	dc.b 1
0001A687 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001A68C                            		even
0001A68C                            		even
0001A68C                            
0001A68C                            ; ===========================================================================
0001A68C                            ; ---------------------------------------------------------------------------
0001A68C                            ; Object 5C - metal girders in foreground (SLZ)
0001A68C                            ; ---------------------------------------------------------------------------
0001A68C                            
0001A68C                            Obj5C:					; XREF: Obj_Index
0001A68C 7000                       		moveq	#0,d0
0001A68E 1028 0024                  		move.b	routine(a0),d0
0001A692 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001A696 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
0001A69A                            ; ===========================================================================
0001A69A 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
0001A69C 0000                       		dc.w Obj5C_Display-Obj5C_Index
0001A69E                            ; ===========================================================================
0001A69E                            
0001A69E                            Obj5C_Main:				; XREF: Obj5C_Index
0001A69E 5428 0024                  		addq.b	#2,routine(a0)
0001A6A2 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
0001A6AA 317C 83CC 0002             		move.w	#$83CC,2(a0)
0001A6B0 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001A6B6                            
0001A6B6                            Obj5C_Display:				; XREF: Obj5C_Index
0001A6B6 2238 F700                  		move.l	($FFFFF700).w,d1
0001A6BA D281                       		add.l	d1,d1
0001A6BC 4841                       		swap	d1
0001A6BE 4441                       		neg.w	d1
0001A6C0 3141 0008                  		move.w	d1,8(a0)
0001A6C4 2238 F704                  		move.l	($FFFFF704).w,d1
0001A6C8 D281                       		add.l	d1,d1
0001A6CA 4841                       		swap	d1
0001A6CC 0241 003F                  		andi.w	#$3F,d1
0001A6D0 4441                       		neg.w	d1
0001A6D2 0641 0100                  		addi.w	#$100,d1
0001A6D6 3141 000A                  		move.w	d1,$A(a0)
0001A6DA 6000 B56C                  		bra.w	DisplaySprite
0001A6DE                            ; ===========================================================================
0001A6DE                            ; ---------------------------------------------------------------------------
0001A6DE                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001A6DE                            ; ---------------------------------------------------------------------------
0001A6DE                            Map_obj5C:
0001A6DE                            	include "_maps\obj5C.asm"
0001A6DE                            ; ---------------------------------------------------------------------------
0001A6DE                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001A6DE                            ; ---------------------------------------------------------------------------
0001A6DE 0000                       		dc.w byte_11098-Map_obj5C
0001A6E0 09                         byte_11098:	dc.b 9
0001A6E1 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001A6E6 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001A6EB C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001A6F0 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001A6F5 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001A6FA 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001A6FF 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001A704 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001A709 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001A70E                            		even
0001A70E                            		even
0001A70E                            
0001A70E                            ; ===========================================================================
0001A70E                            ; ---------------------------------------------------------------------------
0001A70E                            ; Object 1B - water surface (LZ)
0001A70E                            ; ---------------------------------------------------------------------------
0001A70E                            
0001A70E                            Obj1B:					; XREF: Obj_Index
0001A70E 7000                       		moveq	#0,d0
0001A710 1028 0024                  		move.b	routine(a0),d0
0001A714 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001A718 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001A71C                            ; ===========================================================================
0001A71C 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001A71E 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001A720                            ; ===========================================================================
0001A720                            
0001A720                            Obj1B_Main:				; XREF: Obj1B_Index
0001A720 5428 0024                  		addq.b	#2,routine(a0)
0001A724 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001A72C 317C C300 0002             		move.w	#$C300,2(a0)
0001A732 117C 0004 0001             		move.b	#4,1(a0)
0001A738 117C 0080 0023             		move.b	#$80,width_pixels(a0)
0001A73E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A744                            
0001A744                            Obj1B_Action:				; XREF: Obj1B_Index
0001A744 3238 F700                  		move.w	($FFFFF700).w,d1
0001A748 0241 FFE0                  		andi.w	#$FFE0,d1
0001A74C D268 0030                  		add.w	$30(a0),d1
0001A750 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001A756 6700                       		beq.s	loc_11114
0001A758 0641 0020                  		addi.w	#$20,d1
0001A75C                            
0001A75C                            loc_11114:
0001A75C 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
0001A760 3238 F646                  		move.w	($FFFFF646).w,d1
0001A764 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001A768 4A28 0032                  		tst.b	$32(a0)
0001A76C 6600                       		bne.s	Obj1B_Animate
0001A76E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001A774 6700                       		beq.s	loc_1114A	; if not, branch
0001A776 5628 001A                  		addq.b	#3,mapping_frame(a0)	; use different	frames
0001A77A 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
0001A780 6000                       		bra.s	Obj1B_Display
0001A782                            ; ===========================================================================
0001A782                            
0001A782                            Obj1B_Animate:				; XREF: loc_11114
0001A782 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001A786 6600                       		bne.s	Obj1B_Display	; if yes, branch
0001A788 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001A78E 5728 001A                  		subq.b	#3,mapping_frame(a0)	; use normal frames
0001A792                            
0001A792                            loc_1114A:				; XREF: loc_11114
0001A792 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001A796 6A00                       		bpl.s	Obj1B_Display
0001A798 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
0001A79E 5228 001A                  		addq.b	#1,mapping_frame(a0)
0001A7A2 0C28 0003 001A             		cmpi.b	#3,mapping_frame(a0)
0001A7A8 6500                       		bcs.s	Obj1B_Display
0001A7AA 117C 0000 001A             		move.b	#0,mapping_frame(a0)
0001A7B0                            
0001A7B0                            Obj1B_Display:
0001A7B0 6000 B496                  		bra.w	DisplaySprite
0001A7B4                            ; ===========================================================================
0001A7B4                            ; ---------------------------------------------------------------------------
0001A7B4                            ; Sprite mappings - water surface (LZ)
0001A7B4                            ; ---------------------------------------------------------------------------
0001A7B4                            Map_obj1B:
0001A7B4                            	include "_maps\obj1B.asm"
0001A7B4                            ; ---------------------------------------------------------------------------
0001A7B4                            ; Sprite mappings - water surface (LZ)
0001A7B4                            ; ---------------------------------------------------------------------------
0001A7B4 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
0001A7B8 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
0001A7BC 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
0001A7C0 03                         byte_11178:	dc.b 3
0001A7C1 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001A7C6 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001A7CB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001A7D0 03                         byte_11188:	dc.b 3
0001A7D1 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001A7D6 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001A7DB FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001A7E0 03                         byte_11198:	dc.b 3
0001A7E1 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001A7E6 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001A7EB FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001A7F0 06                         byte_111A8:	dc.b 6
0001A7F1 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001A7F6 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001A7FB FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001A800 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001A805 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001A80A FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001A80F 06                         byte_111C7:	dc.b 6
0001A810 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001A815 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001A81A FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001A81F FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001A824 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001A829 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001A82E 06                         byte_111E6:	dc.b 6
0001A82F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001A834 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001A839 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001A83E FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
0001A843 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001A848 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
0001A84E 00                         		even
0001A84E 00                         		even
0001A84E                            
0001A84E                            ; ===========================================================================
0001A84E                            ; ---------------------------------------------------------------------------
0001A84E                            ; Object 0B - pole that	breaks (LZ)
0001A84E                            ; ---------------------------------------------------------------------------
0001A84E                            
0001A84E                            Obj0B:					; XREF: Obj_Index
0001A84E 7000                       		moveq	#0,d0
0001A850 1028 0024                  		move.b	routine(a0),d0
0001A854 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001A858 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001A85C                            ; ===========================================================================
0001A85C 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
0001A85E 0000                       		dc.w Obj0B_Action-Obj0B_Index
0001A860 0000                       		dc.w Obj0B_Display-Obj0B_Index
0001A862                            ; ===========================================================================
0001A862                            
0001A862                            Obj0B_Main:				; XREF: Obj0B_Index
0001A862 5428 0024                  		addq.b	#2,routine(a0)
0001A866 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
0001A86E 317C 43DE 0002             		move.w	#$43DE,2(a0)
0001A874 117C 0004 0001             		move.b	#4,1(a0)
0001A87A 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001A880 317C 0200 0018             		move.w	#$200,priority(a0)
0001A886 117C 00E1 0020             		move.b	#$E1,collision_flags(a0)
0001A88C 7000                       		moveq	#0,d0
0001A88E 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001A892 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001A896 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
0001A89A                            
0001A89A                            Obj0B_Action:				; XREF: Obj0B_Index
0001A89A 4A28 0032                  		tst.b	$32(a0)
0001A89E 6700                       		beq.s	Obj0B_Grab
0001A8A0 4A68 0030                  		tst.w	$30(a0)
0001A8A4 6700                       		beq.s	Obj0B_MoveUp
0001A8A6 5368 0030                  		subq.w	#1,$30(a0)
0001A8AA 6600                       		bne.s	Obj0B_MoveUp
0001A8AC 117C 0001 001A             		move.b	#1,mapping_frame(a0)	; break	the pole
0001A8B2 6000                       		bra.s	Obj0B_Release
0001A8B4                            ; ===========================================================================
0001A8B4                            
0001A8B4                            Obj0B_MoveUp:				; XREF: Obj0B_Action
0001A8B4 43F8 D000                  		lea	($FFFFD000).w,a1
0001A8B8 3028 000C                  		move.w	$C(a0),d0
0001A8BC 0440 0018                  		subi.w	#$18,d0
0001A8C0 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
0001A8C6 6700                       		beq.s	Obj0B_MoveDown
0001A8C8 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0001A8CC B069 000C                  		cmp.w	$C(a1),d0
0001A8D0 6500                       		bcs.s	Obj0B_MoveDown
0001A8D2 3340 000C                  		move.w	d0,$C(a1)
0001A8D6                            
0001A8D6                            Obj0B_MoveDown:
0001A8D6 0640 0024                  		addi.w	#$24,d0
0001A8DA 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
0001A8E0 6700                       		beq.s	Obj0B_LetGo
0001A8E2 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0001A8E6 B069 000C                  		cmp.w	$C(a1),d0
0001A8EA 6400                       		bcc.s	Obj0B_LetGo
0001A8EC 3340 000C                  		move.w	d0,$C(a1)
0001A8F0                            
0001A8F0                            Obj0B_LetGo:
0001A8F0 1038 F603                  		move.b	($FFFFF603).w,d0
0001A8F4 0240 0070                  		andi.w	#$70,d0
0001A8F8 6700                       		beq.s	Obj0B_Display
0001A8FA                            
0001A8FA                            Obj0B_Release:				; XREF: Obj0B_Action
0001A8FA 4228 0020                  		clr.b	collision_flags(a0)
0001A8FE 5428 0024                  		addq.b	#2,routine(a0)
0001A902 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001A906 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001A90A 4228 0032                  		clr.b	$32(a0)
0001A90E 6000                       		bra.s	Obj0B_Display
0001A910                            ; ===========================================================================
0001A910                            
0001A910                            Obj0B_Grab:				; XREF: Obj0B_Action
0001A910 4A28 0021                  		tst.b	collision_property(a0)		; has Sonic touched the	pole?
0001A914 6700                       		beq.s	Obj0B_Display	; if not, branch
0001A916 43F8 D000                  		lea	($FFFFD000).w,a1
0001A91A 3028 0008                  		move.w	8(a0),d0
0001A91E 0640 0014                  		addi.w	#$14,d0
0001A922 B069 0008                  		cmp.w	8(a1),d0
0001A926 6400                       		bcc.s	Obj0B_Display
0001A928 4228 0021                  		clr.b	collision_property(a0)
0001A92C 0C29 0004 0024             		cmpi.b	#4,routine(a1)
0001A932 6400                       		bcc.s	Obj0B_Display
0001A934 4269 0010                  		clr.w	x_vel(a1)		; stop Sonic moving
0001A938 4269 0012                  		clr.w	y_vel(a1)		; stop Sonic moving
0001A93C 3028 0008                  		move.w	8(a0),d0
0001A940 0640 0014                  		addi.w	#$14,d0
0001A944 3340 0008                  		move.w	d0,8(a1)
0001A948 08A9 0000 0022             		bclr	#0,status(a1)
0001A94E 137C 0011 001C             		move.b	#$11,anim(a1)	; set Sonic's animation to "hanging" ($11)
0001A954 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001A95A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001A960 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
0001A966                            
0001A966                            Obj0B_Display:				; XREF: Obj0B_Index
0001A966 6000 DED2                  		bra.w	MarkObjGone
0001A96A                            ; ===========================================================================
0001A96A                            ; ---------------------------------------------------------------------------
0001A96A                            ; Sprite mappings - pole that breaks (LZ)
0001A96A                            ; ---------------------------------------------------------------------------
0001A96A                            Map_obj0B:
0001A96A                            	include "_maps\obj0B.asm"
0001A96A                            ; ---------------------------------------------------------------------------
0001A96A                            ; Sprite mappings - pole that breaks (LZ)
0001A96A                            ; ---------------------------------------------------------------------------
0001A96A 0000                       		dc.w byte_11326-Map_obj0B
0001A96C 0000                       		dc.w byte_11331-Map_obj0B
0001A96E 02                         byte_11326:	dc.b 2			; normal pole
0001A96F E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001A974 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001A979 04                         byte_11331:	dc.b 4			; broken pole
0001A97A E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001A97F F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001A984 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001A989 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001A98E                            		even
0001A98E                            		even
0001A98E                            
0001A98E                            ; ===========================================================================
0001A98E                            ; ---------------------------------------------------------------------------
0001A98E                            ; Object 0C - flapping door (LZ)
0001A98E                            ; ---------------------------------------------------------------------------
0001A98E                            
0001A98E                            Obj0C:					; XREF: Obj_Index
0001A98E 7000                       		moveq	#0,d0
0001A990 1028 0024                  		move.b	routine(a0),d0
0001A994 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
0001A998 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
0001A99C                            ; ===========================================================================
0001A99C 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
0001A99E 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
0001A9A0                            ; ===========================================================================
0001A9A0                            
0001A9A0                            Obj0C_Main:				; XREF: Obj0C_Index
0001A9A0 5428 0024                  		addq.b	#2,routine(a0)
0001A9A4 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
0001A9AC 317C 4328 0002             		move.w	#$4328,2(a0)
0001A9B2 0028 0004 0001             		ori.b	#4,1(a0)
0001A9B8 117C 0028 0023             		move.b	#$28,width_pixels(a0)
0001A9BE 7000                       		moveq	#0,d0
0001A9C0 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001A9C4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001A9C8 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
0001A9CC                            
0001A9CC                            Obj0C_OpenClose:			; XREF: Obj0C_Index
0001A9CC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001A9D0 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
0001A9D2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
0001A9D8 0868 0000 001C             		bchg	#0,anim(a0)	; open/close door
0001A9DE 4A28 0001                  		tst.b	1(a0)
0001A9E2 6A00                       		bpl.s	Obj0C_Solid
0001A9E4 303C 00BB                  		move.w	#$BB,d0
0001A9E8 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play door sound
0001A9EE                            
0001A9EE                            Obj0C_Solid:
0001A9EE 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
0001A9F4 4EB9 0001 2624             		jsr	AnimateSprite
0001A9FA 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0001A9FE 4A28 001A                  		tst.b	mapping_frame(a0)		; is the door open?
0001AA02 6600                       		bne.s	Obj0C_Display	; if yes, branch
0001AA04 3038 D008                  		move.w	($FFFFD008).w,d0
0001AA08 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
0001AA0C 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0001AA0E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001AA14 323C 0013                  		move.w	#$13,d1
0001AA18 343C 0020                  		move.w	#$20,d2
0001AA1C 3602                       		move.w	d2,d3
0001AA1E 5243                       		addq.w	#1,d3
0001AA20 3828 0008                  		move.w	8(a0),d4
0001AA24 4EBA E4F8                  		jsr	SolidObject	; make the door	solid
0001AA28                            
0001AA28                            Obj0C_Display:
0001AA28 6000 DE10                  		bra.w	MarkObjGone
0001AA2C                            ; ===========================================================================
0001AA2C                            Ani_obj0C:
0001AA2C                            	include "_anim\obj0C.asm"
0001AA2C                            ; ---------------------------------------------------------------------------
0001AA2C                            ; Animation script - flapping door (LZ)
0001AA2C                            ; ---------------------------------------------------------------------------
0001AA2C 0000                       		dc.w byte_113E6-Ani_obj0C
0001AA2E 0000                       		dc.w byte_113EC-Ani_obj0C
0001AA30 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001AA36 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0001AA3C                            		even
0001AA3C                            		even
0001AA3C                            
0001AA3C                            ; ---------------------------------------------------------------------------
0001AA3C                            ; Sprite mappings - flapping door (LZ)
0001AA3C                            ; ---------------------------------------------------------------------------
0001AA3C                            Map_obj0C:
0001AA3C                            	include "_maps\obj0C.asm"
0001AA3C                            ; ---------------------------------------------------------------------------
0001AA3C                            ; Sprite mappings - flapping door (LZ)
0001AA3C                            ; ---------------------------------------------------------------------------
0001AA3C 0000                       		dc.w byte_113F8-Map_obj0C
0001AA3E 0000                       		dc.w byte_11403-Map_obj0C
0001AA40 0000                       		dc.w byte_1140E-Map_obj0C
0001AA42 02                         byte_113F8:	dc.b 2
0001AA43 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001AA48 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001AA4D 02                         byte_11403:	dc.b 2
0001AA4E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0001AA53 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001AA58 02                         byte_1140E:	dc.b 2
0001AA59 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001AA5E 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001AA64 00                         		even
0001AA64 00                         		even
0001AA64                            
0001AA64                            ; ===========================================================================
0001AA64                            ; ---------------------------------------------------------------------------
0001AA64                            ; Object 71 - invisible	solid barriers
0001AA64                            ; ---------------------------------------------------------------------------
0001AA64                            
0001AA64                            Obj71:				; XREF: Obj_Index
0001AA64 7000                       		moveq	#0,d0
0001AA66 1028 0024                  		move.b	routine(a0),d0
0001AA6A 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
0001AA6E 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
0001AA72                            ; ===========================================================================
0001AA72 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
0001AA74 0000                       		dc.w Obj71_Solid-Obj71_Index
0001AA76                            
0001AA76 =00000016                  invis_height:	= $16		; height in pixels
0001AA76                            ; ===========================================================================
0001AA76                            
0001AA76                            Obj71_Main:	; Routine 0
0001AA76 5428 0024                  		addq.b	#2,routine(a0)
0001AA7A 217C 0000 0000 0004        		move.l	#Map_obj71,mappings(a0)
0001AA82 317C 8680 0002             		move.w	#$8680,art_tile(a0)
0001AA88 0028 0004 0001             		ori.b	#4,render_flags(a0)
0001AA8E 1028 0028                  		move.b	subtype(a0),d0 ; get object type
0001AA92 1200                       		move.b	d0,d1
0001AA94 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001AA98 0640 0010                  		addi.w	#$10,d0
0001AA9C E248                       		lsr.w	#1,d0
0001AA9E 1140 0023                  		move.b	d0,width_pixels(a0)	; set object width
0001AAA2 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0001AAA6 5241                       		addq.w	#1,d1
0001AAA8 E749                       		lsl.w	#3,d1
0001AAAA 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
0001AAAE                            
0001AAAE                            Obj71_Solid:	; Routine 2
0001AAAE 6100 B510                  		bsr.w	ChkObjOnScreen
0001AAB2 6600                       		bne.s	@chkdel
0001AAB4 7200                       		moveq	#0,d1
0001AAB6 1228 0023                  		move.b	width_pixels(a0),d1
0001AABA 0641 000B                  		addi.w	#$B,d1
0001AABE 7400                       		moveq	#0,d2
0001AAC0 1428 0016                  		move.b	invis_height(a0),d2
0001AAC4 3602                       		move.w	d2,d3
0001AAC6 5243                       		addq.w	#1,d3
0001AAC8 3828 0008                  		move.w	x_pos(a0),d4
0001AACC 6100 E4E4                  		bsr.w	SolidObject71
0001AAD0                            
0001AAD0                            @chkdel:
0001AAEC 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
0001AAF0 6700                       		beq.s	@nodisplay	; if not, branch
0001AAF2 4EFA B154                  		jmp	DisplaySprite	; if yes, display the object
0001AAF6                            
0001AAF6                            	@nodisplay:
0001AAF6 4E75                       		rts	
0001AAF8                            
0001AAF8                            	@delete:
0001AAF8                            ;        if S3KObjectManager=1
0001AAF8 7000 3028 0014 6700 3440+  		obMarkGone
0001AB06                             ;       endif
0001AB06 4EFA B0F4                  		jmp	DeleteObject
0001AB0A                            
0001AB0A                            ; ---------------------------------------------------------------------------
0001AB0A                            ; Sprite mappings - invisible solid blocks
0001AB0A                            ; ---------------------------------------------------------------------------
0001AB0A                            Map_obj71:
0001AB0A                            	include "_maps\obj71.asm"
0001AB0A                            ; ---------------------------------------------------------------------------
0001AB0A                            ; Sprite mappings - invisible solid blocks
0001AB0A                            ; ---------------------------------------------------------------------------
0001AB0A 0000                       		dc.w byte_114BC-Map_obj71
0001AB0C 0000                       		dc.w byte_114D1-Map_obj71
0001AB0E 0000                       		dc.w byte_114E6-Map_obj71
0001AB10 04                         byte_114BC:	dc.b 4
0001AB11 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
0001AB16 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
0001AB1B 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
0001AB20 0005 0018 00               		dc.b 0,	5, 0, $18, 0
0001AB25 04                         byte_114D1:	dc.b 4
0001AB26 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
0001AB2B E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
0001AB30 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
0001AB35 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001AB3A 04                         byte_114E6:	dc.b 4
0001AB3B E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
0001AB40 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
0001AB45 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0001AB4A 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
0001AB50 00                         		even
0001AB50 00                         		even
0001AB50                            
0001AB50                            ; ===========================================================================
0001AB50                            ; ---------------------------------------------------------------------------
0001AB50                            ; Object 5D - fans (SLZ)
0001AB50                            ; ---------------------------------------------------------------------------
0001AB50                            
0001AB50                            Obj5D:					; XREF: Obj_Index
0001AB50 7000                       		moveq	#0,d0
0001AB52 1028 0024                  		move.b	routine(a0),d0
0001AB56 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0001AB5A 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
0001AB5E                            ; ===========================================================================
0001AB5E 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
0001AB60 0000                       		dc.w Obj5D_Delay-Obj5D_Index
0001AB62                            ; ===========================================================================
0001AB62                            
0001AB62                            Obj5D_Main:				; XREF: Obj5D_Index
0001AB62 5428 0024                  		addq.b	#2,routine(a0)
0001AB66 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
0001AB6E 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001AB74 0028 0004 0001             		ori.b	#4,1(a0)
0001AB7A 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001AB80 317C 0200 0018             		move.w	#$200,priority(a0)
0001AB86                            
0001AB86                            Obj5D_Delay:				; XREF: Obj5D_Index
0001AB86 0828 0001 0028             		btst	#1,subtype(a0)	; is object type 02/03?
0001AB8C 6600                       		bne.s	Obj5D_Blow	; if yes, branch
0001AB8E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001AB92 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001AB94 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
0001AB9A 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
0001ABA0 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
0001ABA2 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001ABA8                            
0001ABA8                            Obj5D_Blow:
0001ABA8 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
0001ABAC 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
0001ABB0 43F8 D000                  		lea	($FFFFD000).w,a1
0001ABB4 3029 0008                  		move.w	8(a1),d0
0001ABB8 9068 0008                  		sub.w	8(a0),d0
0001ABBC 0828 0000 0022             		btst	#0,status(a0)
0001ABC2 6600                       		bne.s	Obj5D_ChkSonic
0001ABC4 4440                       		neg.w	d0
0001ABC6                            
0001ABC6                            Obj5D_ChkSonic:
0001ABC6 0640 0050                  		addi.w	#$50,d0
0001ABCA 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001ABCE 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
0001ABD0 3229 000C                  		move.w	$C(a1),d1
0001ABD4 0641 0060                  		addi.w	#$60,d1
0001ABD8 9268 000C                  		sub.w	$C(a0),d1
0001ABDC 6500                       		bcs.s	Obj5D_Animate
0001ABDE 0C41 0070                  		cmpi.w	#$70,d1
0001ABE2 6400                       		bcc.s	Obj5D_Animate
0001ABE4 0440 0050                  		subi.w	#$50,d0
0001ABE8 6400                       		bcc.s	loc_1159A
0001ABEA 4640                       		not.w	d0
0001ABEC D040                       		add.w	d0,d0
0001ABEE                            
0001ABEE                            loc_1159A:
0001ABEE 0640 0060                  		addi.w	#$60,d0
0001ABF2 0828 0000 0022             		btst	#0,status(a0)
0001ABF8 6600                       		bne.s	loc_115A8
0001ABFA 4440                       		neg.w	d0
0001ABFC                            
0001ABFC                            loc_115A8:
0001ABFC 4400                       		neg.b	d0
0001ABFE E840                       		asr.w	#4,d0
0001AC00 0828 0000 0028             		btst	#0,subtype(a0)
0001AC06 6700                       		beq.s	Obj5D_MoveSonic
0001AC08 4440                       		neg.w	d0
0001AC0A                            
0001AC0A                            Obj5D_MoveSonic:
0001AC0A D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
0001AC0E                            
0001AC0E                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
0001AC0E 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001AC12 6A00                       		bpl.s	Obj5D_ChkDel
0001AC14 117C 0000 001E             		move.b	#0,anim_frame_duration(a0)
0001AC1A 5228 001B                  		addq.b	#1,anim_frame(a0)
0001AC1E 0C28 0003 001B             		cmpi.b	#3,anim_frame(a0)
0001AC24 6500                       		bcs.s	loc_115D8
0001AC26 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001AC2C                            
0001AC2C                            loc_115D8:
0001AC2C 7000                       		moveq	#0,d0
0001AC2E 0828 0000 0028             		btst	#0,subtype(a0)
0001AC34 6700                       		beq.s	loc_115E4
0001AC36 7002                       		moveq	#2,d0
0001AC38                            
0001AC38                            loc_115E4:
0001AC38 D028 001B                  		add.b	anim_frame(a0),d0
0001AC3C 1140 001A                  		move.b	d0,mapping_frame(a0)
0001AC40                            
0001AC40                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
0001AC40 4EBA B006                  		jsr	DisplaySprite
0001AC44 4EFA DF34                  		jmp		MarkObjGone3
0001AC48                            ; ===========================================================================
0001AC48                            ; ---------------------------------------------------------------------------
0001AC48                            ; Sprite mappings - fans (SLZ)
0001AC48                            ; ---------------------------------------------------------------------------
0001AC48                            Map_obj5D:
0001AC48                            	include "_maps\obj5D.asm"
0001AC48                            ; ---------------------------------------------------------------------------
0001AC48                            ; Sprite mappings - fans (SLZ)
0001AC48                            ; ---------------------------------------------------------------------------
0001AC48 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001AC4C 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0001AC50 0000                       		dc.w byte_1161A-Map_obj5D
0001AC52 02                         byte_1161A:	dc.b 2
0001AC53 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001AC58 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001AC5D 02                         byte_11625:	dc.b 2
0001AC5E F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
0001AC63 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001AC68 02                         byte_11630:	dc.b 2
0001AC69 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001AC6E 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001AC74 00                         		even
0001AC74 00                         		even
0001AC74                            
0001AC74                            ; ===========================================================================
0001AC74                            ; ---------------------------------------------------------------------------
0001AC74                            ; Object 5E - seesaws (SLZ)
0001AC74                            ; ---------------------------------------------------------------------------
0001AC74                            
0001AC74                            Obj5E:					; XREF: Obj_Index
0001AC74 7000                       		moveq	#0,d0
0001AC76 1028 0024                  		move.b	routine(a0),d0
0001AC7A 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
0001AC7E 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
0001AC82 3028 0030                  		move.w	$30(a0),d0
0001AC86 4EFA DBE8                  		jmp		MarkObjGone2
0001AC8A                            ; ===========================================================================
0001AC8A 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001AC8C 0000                       		dc.w Obj5E_Slope-Obj5E_Index
0001AC8E 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
0001AC90 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
0001AC92 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0001AC94 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001AC96                            ; ===========================================================================
0001AC96                            
0001AC96                            Obj5E_Main:				; XREF: Obj5E_Index
0001AC96 5428 0024                  		addq.b	#2,routine(a0)
0001AC9A 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
0001ACA2 317C 0374 0002             		move.w	#$374,2(a0)
0001ACA8 0028 0004 0001             		ori.b	#4,1(a0)
0001ACAE 317C 0200 0018             		move.w	#$200,priority(a0)
0001ACB4 117C 0030 0023             		move.b	#$30,width_pixels(a0)
0001ACBA 3168 0008 0030             		move.w	8(a0),$30(a0)
0001ACC0 4A28 0028                  		tst.b	subtype(a0)		; is object type 00 ?
0001ACC4 6600                       		bne.s	loc_116D2	; if not, branch
0001ACC6 4EBA BA62                  		jsr	SingleObjLoad2
0001ACCA 6600                       		bne.s	loc_116D2
0001ACCC 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
0001ACD0 5C29 0024                  		addq.b	#6,routine(a1)
0001ACD4 3368 0008 0008             		move.w	8(a0),8(a1)
0001ACDA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ACE0 1368 0022 0022             		move.b	status(a0),status(a1)
0001ACE6 2348 003C                  		move.l	a0,$3C(a1)
0001ACEA                            
0001ACEA                            loc_116D2:
0001ACEA 0828 0000 0022             		btst	#0,status(a0)
0001ACF0 6700                       		beq.s	loc_116E0
0001ACF2 117C 0002 001A             		move.b	#2,mapping_frame(a0)
0001ACF8                            
0001ACF8                            loc_116E0:
0001ACF8 1168 001A 003A             		move.b	mapping_frame(a0),$3A(a0)
0001ACFE                            
0001ACFE                            Obj5E_Slope:				; XREF: Obj5E_Index
0001ACFE 1228 003A                  		move.b	$3A(a0),d1
0001AD02 4EB9 0000 0000             		jsr	loc_11766
0001AD08 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001AD0E 0828 0000 001A             		btst	#0,mapping_frame(a0)
0001AD14 6700                       		beq.s	loc_11702
0001AD16 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001AD1C                            
0001AD1C                            loc_11702:
0001AD1C 43F8 D000                  		lea	($FFFFD000).w,a1
0001AD20 3169 0012 0038             		move.w	y_vel(a1),$38(a0)
0001AD26 323C 0030                  		move.w	#$30,d1
0001AD2A 4EB9 0000 F17E             		jsr	(SlopeObject).l
0001AD30 4E75                       		rts	
0001AD32                            ; ===========================================================================
0001AD32                            
0001AD32                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001AD32 4EB9 0000 0000             		jsr	loc_1174A
0001AD38 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001AD3E 0828 0000 001A             		btst	#0,mapping_frame(a0)
0001AD44 6700                       		beq.s	loc_11730
0001AD46 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001AD4C                            
0001AD4C                            loc_11730:
0001AD4C 323C 0030                  		move.w	#$30,d1
0001AD50 4EB9 0000 F1E6             		jsr	(ExitPlatform).l
0001AD56 323C 0030                  		move.w	#$30,d1
0001AD5A 3428 0008                  		move.w	8(a0),d2
0001AD5E 4EB9 0001 014A             		jsr	SlopeObject2
0001AD64 4E75                       		rts	
0001AD66                            ; ===========================================================================
0001AD66                            
0001AD66                            loc_1174A:				; XREF: Obj5E_Slope2
0001AD66 7202                       		moveq	#2,d1
0001AD68 43F8 D000                  		lea	($FFFFD000).w,a1
0001AD6C 3028 0008                  		move.w	8(a0),d0
0001AD70 9069 0008                  		sub.w	8(a1),d0
0001AD74 6400                       		bcc.s	loc_1175E
0001AD76 4440                       		neg.w	d0
0001AD78 7200                       		moveq	#0,d1
0001AD7A                            
0001AD7A                            loc_1175E:
0001AD7A 0C40 0008                  		cmpi.w	#8,d0
0001AD7E 6400                       		bcc.s	loc_11766
0001AD80 7201                       		moveq	#1,d1
0001AD82                            
0001AD82                            loc_11766:
0001AD82 1028 001A                  		move.b	mapping_frame(a0),d0
0001AD86 B001                       		cmp.b	d1,d0
0001AD88 6700                       		beq.s	locret_11790
0001AD8A 6400                       		bcc.s	loc_11772
0001AD8C 5400                       		addq.b	#2,d0
0001AD8E                            
0001AD8E                            loc_11772:
0001AD8E 5300                       		subq.b	#1,d0
0001AD90 1140 001A                  		move.b	d0,mapping_frame(a0)
0001AD94 1141 003A                  		move.b	d1,$3A(a0)
0001AD98 08A8 0000 0001             		bclr	#0,1(a0)
0001AD9E 0828 0001 001A             		btst	#1,mapping_frame(a0)
0001ADA4 6700                       		beq.s	locret_11790
0001ADA6 08E8 0000 0001             		bset	#0,1(a0)
0001ADAC                            
0001ADAC                            locret_11790:
0001ADAC 4E75                       		rts	
0001ADAE                            ; ===========================================================================
0001ADAE                            
0001ADAE                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001ADAE 5428 0024                  		addq.b	#2,routine(a0)
0001ADB2 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001ADBA 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001ADC0 0028 0004 0001             		ori.b	#4,1(a0)
0001ADC6 317C 0200 0018             		move.w	#$200,priority(a0)
0001ADCC 117C 008B 0020             		move.b	#$8B,collision_flags(a0)
0001ADD2 117C 000C 0023             		move.b	#$C,width_pixels(a0)
0001ADD8 3168 0008 0030             		move.w	8(a0),$30(a0)
0001ADDE 0668 0028 0008             		addi.w	#$28,8(a0)
0001ADE4 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001ADEA 117C 0001 001A             		move.b	#1,mapping_frame(a0)
0001ADF0 0828 0000 0022             		btst	#0,status(a0)
0001ADF6 6700                       		beq.s	Obj5E_MoveSpike
0001ADF8 0468 0050 0008             		subi.w	#$50,8(a0)
0001ADFE 117C 0002 003A             		move.b	#2,$3A(a0)
0001AE04                            
0001AE04                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001AE04 2268 003C                  		movea.l	$3C(a0),a1
0001AE08 7000                       		moveq	#0,d0
0001AE0A 1028 003A                  		move.b	$3A(a0),d0
0001AE0E 9029 003A                  		sub.b	$3A(a1),d0
0001AE12 6700                       		beq.s	loc_1183E
0001AE14 6400                       		bcc.s	loc_117FC
0001AE16 4400                       		neg.b	d0
0001AE18                            
0001AE18                            loc_117FC:
0001AE18 323C F7E8                  		move.w	#-$818,d1
0001AE1C 343C FEEC                  		move.w	#-$114,d2
0001AE20 0C00 0001                  		cmpi.b	#1,d0
0001AE24 6700                       		beq.s	loc_11822
0001AE26 323C F510                  		move.w	#-$AF0,d1
0001AE2A 343C FF34                  		move.w	#-$CC,d2
0001AE2E 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001AE34 6D00                       		blt.s	loc_11822
0001AE36 323C F200                  		move.w	#-$E00,d1
0001AE3A 343C FF60                  		move.w	#-$A0,d2
0001AE3E                            
0001AE3E                            loc_11822:
0001AE3E 3141 0012                  		move.w	d1,y_vel(a0)
0001AE42 3142 0010                  		move.w	d2,x_vel(a0)
0001AE46 3028 0008                  		move.w	8(a0),d0
0001AE4A 9068 0030                  		sub.w	$30(a0),d0
0001AE4E 6400                       		bcc.s	loc_11838
0001AE50 4468 0010                  		neg.w	x_vel(a0)
0001AE54                            
0001AE54                            loc_11838:
0001AE54 5428 0024                  		addq.b	#2,routine(a0)
0001AE58 6000                       		bra.s	Obj5E_SpikeFall
0001AE5A                            ; ===========================================================================
0001AE5A                            
0001AE5A                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001AE5A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001AE60 7000                       		moveq	#0,d0
0001AE62 1029 001A                  		move.b	mapping_frame(a1),d0
0001AE66 343C 0028                  		move.w	#$28,d2
0001AE6A 3228 0008                  		move.w	8(a0),d1
0001AE6E 9268 0030                  		sub.w	$30(a0),d1
0001AE72 6400                       		bcc.s	loc_1185C
0001AE74 4442                       		neg.w	d2
0001AE76 5440                       		addq.w	#2,d0
0001AE78                            
0001AE78                            loc_1185C:
0001AE78 D040                       		add.w	d0,d0
0001AE7A 3228 0034                  		move.w	$34(a0),d1
0001AE7E D272 0000                  		add.w	(a2,d0.w),d1
0001AE82 3141 000C                  		move.w	d1,$C(a0)
0001AE86 D468 0030                  		add.w	$30(a0),d2
0001AE8A 3142 0008                  		move.w	d2,8(a0)
0001AE8E 4268 000E                  		clr.w	$E(a0)
0001AE92 4268 000A                  		clr.w	$A(a0)
0001AE96 4E75                       		rts	
0001AE98                            ; ===========================================================================
0001AE98                            
0001AE98                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001AE98 4A68 0012                  		tst.w	y_vel(a0)
0001AE9C 6A00                       		bpl.s	loc_1189A
0001AE9E 4EBA AD22                  		jsr	ObjectFall
0001AEA2 3028 0034                  		move.w	$34(a0),d0
0001AEA6 0440 002F                  		subi.w	#$2F,d0
0001AEAA B068 000C                  		cmp.w	$C(a0),d0
0001AEAE 6E00                       		bgt.s	locret_11898
0001AEB0 4EBA AD10                  		jsr	ObjectFall
0001AEB4                            
0001AEB4                            locret_11898:
0001AEB4 4E75                       		rts	
0001AEB6                            ; ===========================================================================
0001AEB6                            
0001AEB6                            loc_1189A:				; XREF: Obj5E_SpikeFall
0001AEB6 4EBA AD0A                  		jsr	ObjectFall
0001AEBA 2268 003C                  		movea.l	$3C(a0),a1
0001AEBE 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001AEC4 7000                       		moveq	#0,d0
0001AEC6 1029 001A                  		move.b	mapping_frame(a1),d0
0001AECA 3228 0008                  		move.w	8(a0),d1
0001AECE 9268 0030                  		sub.w	$30(a0),d1
0001AED2 6400                       		bcc.s	loc_118BA
0001AED4 5440                       		addq.w	#2,d0
0001AED6                            
0001AED6                            loc_118BA:
0001AED6 D040                       		add.w	d0,d0
0001AED8 3228 0034                  		move.w	$34(a0),d1
0001AEDC D272 0000                  		add.w	(a2,d0.w),d1
0001AEE0 B268 000C                  		cmp.w	$C(a0),d1
0001AEE4 6E00                       		bgt.s	locret_11938
0001AEE6 2268 003C                  		movea.l	$3C(a0),a1
0001AEEA 7202                       		moveq	#2,d1
0001AEEC 4A68 0010                  		tst.w	x_vel(a0)
0001AEF0 6B00                       		bmi.s	Obj5E_Spring
0001AEF2 7200                       		moveq	#0,d1
0001AEF4                            
0001AEF4                            Obj5E_Spring:
0001AEF4 1341 003A                  		move.b	d1,$3A(a1)
0001AEF8 1141 003A                  		move.b	d1,$3A(a0)
0001AEFC B229 001A                  		cmp.b	mapping_frame(a1),d1
0001AF00 6700                       		beq.s	loc_1192C
0001AF02 08A9 0003 0022             		bclr	#3,status(a1)
0001AF08 6700                       		beq.s	loc_1192C
0001AF0A 4229 0025                  		clr.b	routine_secondary(a1)
0001AF0E 137C 0002 0024             		move.b	#2,routine(a1)
0001AF14 45F8 D000                  		lea	($FFFFD000).w,a2
0001AF18 3568 0012 0012             		move.w	y_vel(a0),y_vel(a2)
0001AF1E 446A 0012                  		neg.w	y_vel(a2)
0001AF22 08EA 0001 0022             		bset	#1,status(a2)
0001AF28 08AA 0003 0022             		bclr	#3,status(a2)
0001AF2E 422A 003C                  		clr.b	$3C(a2)
0001AF32 157C 0010 001C             		move.b	#$10,anim(a2)	; change Sonic's animation to "spring" ($10)
0001AF38 157C 0002 0024             		move.b	#2,routine(a2)
0001AF3E 303C 00CC                  		move.w	#$CC,d0
0001AF42 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play spring sound
0001AF48                            
0001AF48                            loc_1192C:
0001AF48 4268 0010                  		clr.w	x_vel(a0)
0001AF4C 4268 0012                  		clr.w	y_vel(a0)
0001AF50 5528 0024                  		subq.b	#2,routine(a0)
0001AF54                            
0001AF54                            locret_11938:
0001AF54 4E75                       		rts	
0001AF56                            ; ===========================================================================
0001AF56 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001AF60                            
0001AF60                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001AF90                            		even
0001AF90                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001AFC0                            		even
0001AFC0                            ; ---------------------------------------------------------------------------
0001AFC0                            ; Sprite mappings - seesaws (SLZ)
0001AFC0                            ; ---------------------------------------------------------------------------
0001AFC0                            Map_obj5E:
0001AFC0                            	include "_maps\obj5E.asm"
0001AFC0                            ; ---------------------------------------------------------------------------
0001AFC0                            ; Sprite mappings - seesaws (SLZ)
0001AFC0                            ; ---------------------------------------------------------------------------
0001AFC0 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001AFC4 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001AFC8 07                         byte_119AC:	dc.b 7
0001AFC9 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001AFCE DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001AFD3 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001AFD8 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
0001AFDD FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001AFE2 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001AFE7 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
0001AFEC 04                         byte_119D0:	dc.b 4
0001AFED E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001AFF2 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001AFF7 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
0001AFFC E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001B002 00                         		even
0001B002 00                         		even
0001B002                            
0001B002                            ; ---------------------------------------------------------------------------
0001B002                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001B002                            ; ---------------------------------------------------------------------------
0001B002                            Map_obj5Ea:
0001B002                            	include "_maps\obj5Eballs.asm"
0001B002                            ; ---------------------------------------------------------------------------
0001B002                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001B002                            ; ---------------------------------------------------------------------------
0001B002 0000                       		dc.w byte_119EA-Map_obj5Ea
0001B004 0000                       		dc.w byte_119F0-Map_obj5Ea
0001B006 01                         byte_119EA:	dc.b 1
0001B007 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B00C 01                         byte_119F0:	dc.b 1
0001B00D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001B012                            		even
0001B012                            		even
0001B012                            
0001B012                            ; ===========================================================================
0001B012                            ; ---------------------------------------------------------------------------
0001B012                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001B012                            ; ---------------------------------------------------------------------------
0001B012                            
0001B012                            Obj5F:					; XREF: Obj_Index
0001B012 7000                       		moveq	#0,d0
0001B014 1028 0024                  		move.b	routine(a0),d0
0001B018 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
0001B01C 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001B020                            ; ===========================================================================
0001B020 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001B022 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001B024 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001B026 0000                       		dc.w Obj5F_End-Obj5F_Index
0001B028                            ; ===========================================================================
0001B028                            
0001B028                            Obj5F_Main:				; XREF: Obj5F_Index
0001B028 5428 0024                  		addq.b	#2,routine(a0)
0001B02C 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001B034 317C 0400 0002             		move.w	#$400,2(a0)
0001B03A 0028 0004 0001             		ori.b	#4,1(a0)
0001B040 317C 0180 0018             		move.w	#$180,priority(a0)
0001B046 117C 000C 0023             		move.b	#$C,width_pixels(a0)
0001B04C 1028 0028                  		move.b	subtype(a0),d0
0001B050 6700                       		beq.s	loc_11A3C
0001B052 1140 0024                  		move.b	d0,routine(a0)
0001B056 4E75                       		rts	
0001B058                            ; ===========================================================================
0001B058                            
0001B058                            loc_11A3C:
0001B058 117C 009A 0020             		move.b	#$9A,collision_flags(a0)
0001B05E 0868 0000 0022             		bchg	#0,status(a0)
0001B064                            
0001B064                            Obj5F_Action:				; XREF: Obj5F_Index
0001B064 7000                       		moveq	#0,d0
0001B066 1028 0025                  		move.b	routine_secondary(a0),d0
0001B06A 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001B06E 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001B072 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001B078 4EB9 0001 2624             		jsr	AnimateSprite
0001B07E 6000 D7BA                  		bra.w	MarkObjGone
0001B082                            ; ===========================================================================
0001B082 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001B084 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
0001B086 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0001B088                            ; ===========================================================================
0001B088                            
0001B088                            Obj5F_Walk:				; XREF: Obj5F_Index2
0001B088 4EB9 0000 0000             		jsr	Obj5F_ChkSonic
0001B08E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001B092 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001B094 5428 0025                  		addq.b	#2,routine_secondary(a0)
0001B098 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001B09E 317C 0010 0010             		move.w	#$10,x_vel(a0)
0001B0A4 117C 0001 001C             		move.b	#1,anim(a0)
0001B0AA 0868 0000 0022             		bchg	#0,status(a0)
0001B0B0 6700                       		beq.s	locret_11A96
0001B0B2 4468 0010                  		neg.w	x_vel(a0)		; change direction
0001B0B6                            
0001B0B6                            locret_11A96:
0001B0B6 4E75                       		rts	
0001B0B8                            ; ===========================================================================
0001B0B8                            
0001B0B8                            Obj5F_Wait:				; XREF: Obj5F_Index2
0001B0B8 4EB9 0000 0000             		jsr	Obj5F_ChkSonic
0001B0BE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001B0C2 6B00                       		bmi.s	loc_11AA8
0001B0C4 4EBA AB1C                  		jsr	SpeedToPos
0001B0C8 4E75                       		rts	
0001B0CA                            ; ===========================================================================
0001B0CA                            
0001B0CA                            loc_11AA8:
0001B0CA 5528 0025                  		subq.b	#2,routine_secondary(a0)
0001B0CE 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001B0D4 4268 0010                  		clr.w	x_vel(a0)		; stop walking
0001B0D8 117C 0000 001C             		move.b	#0,anim(a0)	; stop animation
0001B0DE 4E75                       		rts	
0001B0E0                            ; ===========================================================================
0001B0E0                            
0001B0E0                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001B0E0 5368 0030                  		subq.w	#1,$30(a0)
0001B0E4 6A00                       		bpl.s	locret_11AD0
0001B0E6 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001B0EA 117C 0000 0024             		move.b	#0,routine(a0)
0001B0F0                            
0001B0F0                            locret_11AD0:
0001B0F0 4E75                       		rts	
0001B0F2                            ; ===========================================================================
0001B0F2                            
0001B0F2                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0001B0F2 3038 D008                  		move.w	($FFFFD008).w,d0
0001B0F6 9068 0008                  		sub.w	8(a0),d0
0001B0FA 6400                       		bcc.s	loc_11ADE
0001B0FC 4440                       		neg.w	d0
0001B0FE                            
0001B0FE                            loc_11ADE:
0001B0FE 0C40 0060                  		cmpi.w	#$60,d0
0001B102 6400                       		bcc.s	locret_11B5E
0001B104 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001B108 9068 000C                  		sub.w	$C(a0),d0
0001B10C 6400                       		bcc.s	Obj5F_MakeFuse
0001B10E 4440                       		neg.w	d0
0001B110                            
0001B110                            Obj5F_MakeFuse:
0001B110 0C40 0060                  		cmpi.w	#$60,d0
0001B114 6400                       		bcc.s	locret_11B5E
0001B116 4A78 FE08                  		tst.w	($FFFFFE08).w
0001B11A 6600                       		bne.s	locret_11B5E
0001B11C 117C 0004 0025             		move.b	#4,routine_secondary(a0)
0001B122 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001B128 4268 0010                  		clr.w	x_vel(a0)
0001B12C 117C 0002 001C             		move.b	#2,anim(a0)
0001B132 4EBA B5F6                  		jsr	SingleObjLoad2
0001B136 6600                       		bne.s	locret_11B5E
0001B138 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001B13C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B142 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B148 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001B14E 1368 0022 0022             		move.b	status(a0),status(a1)
0001B154 137C 0004 0028             		move.b	#4,subtype(a1)
0001B15A 137C 0003 001C             		move.b	#3,anim(a1)
0001B160 337C 0010 0012             		move.w	#$10,y_vel(a1)
0001B166 0828 0001 0022             		btst	#1,status(a0)
0001B16C 6700                       		beq.s	loc_11B54
0001B16E 4469 0012                  		neg.w	y_vel(a1)
0001B172                            
0001B172                            loc_11B54:
0001B172 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001B178 2348 003C                  		move.l	a0,$3C(a1)
0001B17C                            
0001B17C                            locret_11B5E:
0001B17C 4E75                       		rts	
0001B17E                            ; ===========================================================================
0001B17E                            
0001B17E                            Obj5F_Display:				; XREF: Obj5F_Index
0001B17E 6100                       		bsr.s	loc_11B70
0001B180 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001B186 4EB9 0001 2624             		jsr	AnimateSprite
0001B18C 6000 D6AC                  		bra.w	MarkObjGone
0001B190                            ; ===========================================================================
0001B190                            
0001B190                            loc_11B70:
0001B190 5368 0030                  		subq.w	#1,$30(a0)
0001B194 6B00                       		bmi.s	loc_11B7C
0001B196 4EBA AA4A                  		jsr	SpeedToPos
0001B19A 4E75                       		rts	
0001B19C                            ; ===========================================================================
0001B19C                            
0001B19C                            loc_11B7C:
0001B19C 4268 0030                  		clr.w	$30(a0)
0001B1A0 4228 0024                  		clr.b	routine(a0)
0001B1A4 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001B1AA 7203                       		moveq	#3,d1
0001B1AC 2248                       		movea.l	a0,a1
0001B1AE 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0001B1B4 6000                       		bra.s	Obj5F_MakeShrap
0001B1B6                            ; ===========================================================================
0001B1B6                            
0001B1B6                            Obj5F_Loop:
0001B1B6 4EBA B572                  		jsr	SingleObjLoad2
0001B1BA 6600                       		bne.s	loc_11BCE
0001B1BC                            
0001B1BC                            Obj5F_MakeShrap:			; XREF: loc_11B7C
0001B1BC 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001B1C0 3368 0008 0008             		move.w	8(a0),8(a1)
0001B1C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B1CC 137C 0006 0028             		move.b	#6,subtype(a1)
0001B1D2 137C 0004 001C             		move.b	#4,anim(a1)
0001B1D8 335A 0010                  		move.w	(a2)+,x_vel(a1)
0001B1DC 335A 0012                  		move.w	(a2)+,y_vel(a1)
0001B1E0 137C 0098 0020             		move.b	#$98,collision_flags(a1)
0001B1E6 08E9 0007 0001             		bset	#7,1(a1)
0001B1EC                            
0001B1EC                            loc_11BCE:
0001B1EC 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001B1F0                            
0001B1F0 117C 0006 0024             		move.b	#6,routine(a0)
0001B1F6                            
0001B1F6                            Obj5F_End:				; XREF: Obj5F_Index
0001B1F6 4EBA A9EA                  		jsr	SpeedToPos
0001B1FA 0668 0018 0012             		addi.w	#$18,y_vel(a0)
0001B200 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001B206 4EB9 0001 2624             		jsr	AnimateSprite
0001B20C 4A28 0001                  		tst.b	1(a0)
0001B210 6A00 A9EA                  		bpl.w	DeleteObject
0001B214 6000 AA32                  		bra.w	DisplaySprite
0001B218                            ; ===========================================================================
0001B218 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001B228                            
0001B228                            Ani_obj5F:
0001B228                            	include "_anim\obj5F.asm"
0001B228                            ; ---------------------------------------------------------------------------
0001B228                            ; Animation script - Bomb enemy
0001B228                            ; ---------------------------------------------------------------------------
0001B228 0000                       		dc.w byte_11C12-Ani_obj5F
0001B22A 0000                       		dc.w byte_11C16-Ani_obj5F
0001B22C 0000                       		dc.w byte_11C1C-Ani_obj5F
0001B22E 0000                       		dc.w byte_11C20-Ani_obj5F
0001B230 0000                       		dc.w byte_11C24-Ani_obj5F
0001B232 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001B236 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001B23C 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001B240 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001B244 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001B248                            		even
0001B248                            		even
0001B248                            
0001B248                            ; ---------------------------------------------------------------------------
0001B248                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001B248                            ; ---------------------------------------------------------------------------
0001B248                            Map_obj5F:
0001B248                            	include "_maps\obj5F.asm"
0001B248                            ; ---------------------------------------------------------------------------
0001B248                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001B248                            ; ---------------------------------------------------------------------------
0001B248 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001B24C 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001B250 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001B254 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001B258 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001B25C 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001B260 03                         byte_11C40:	dc.b 3
0001B261 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001B266 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001B26B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001B270 03                         byte_11C50:	dc.b 3
0001B271 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001B276 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001B27B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001B280 03                         byte_11C60:	dc.b 3
0001B281 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001B286 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001B28B E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001B290 03                         byte_11C70:	dc.b 3
0001B291 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001B296 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001B29B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001B2A0 03                         byte_11C80:	dc.b 3
0001B2A1 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001B2A6 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001B2AB E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001B2B0 03                         byte_11C90:	dc.b 3
0001B2B1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001B2B6 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001B2BB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001B2C0 02                         byte_11CA0:	dc.b 2
0001B2C1 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001B2C6 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001B2CB 02                         byte_11CAB:	dc.b 2
0001B2CC F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001B2D1 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001B2D6 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001B2D7 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001B2DC 01                         byte_11CBC:	dc.b 1			; fuse
0001B2DD E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001B2E2 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001B2E3 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001B2E8 01                         byte_11CC8:	dc.b 1			; fireball
0001B2E9 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001B2EE                            		even
0001B2EE                            		even
0001B2EE                            
0001B2EE                            ; ===========================================================================
0001B2EE                            ; ---------------------------------------------------------------------------
0001B2EE                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001B2EE                            ; ---------------------------------------------------------------------------
0001B2EE                            
0001B2EE                            Obj60:					; XREF: Obj_Index
0001B2EE 7000                       		moveq	#0,d0
0001B2F0 1028 0024                  		move.b	routine(a0),d0
0001B2F4 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001B2F8 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001B2FC                            ; ===========================================================================
0001B2FC 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001B2FE 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001B300 0000                       		dc.w Obj60_Display-Obj60_Index
0001B302 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001B304 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001B306                            ; ===========================================================================
0001B306                            
0001B306                            Obj60_Main:				; XREF: Obj60_Index
0001B306 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001B30E 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001B314 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001B31A 6700                       		beq.s	loc_11D02
0001B31C 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001B322                            
0001B322                            loc_11D02:
0001B322 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001B328 6600                       		bne.s	loc_11D10
0001B32A 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001B330                            
0001B330                            loc_11D10:
0001B330 0028 0004 0001             		ori.b	#4,1(a0)
0001B336 317C 0200 0018             		move.w	#$200,priority(a0)
0001B33C 117C 000B 0020             		move.b	#$B,collision_flags(a0)
0001B342 117C 000C 0023             		move.b	#$C,width_pixels(a0)
0001B348 7400                       		moveq	#0,d2
0001B34A 45E8 0037                  		lea	$37(a0),a2
0001B34E 264A                       		movea.l	a2,a3
0001B350 524A                       		addq.w	#1,a2
0001B352 7203                       		moveq	#3,d1
0001B354                            
0001B354                            Obj60_MakeOrbs:
0001B354 4EBA B3D4                  		jsr	SingleObjLoad2
0001B358 6600                       		bne.s	loc_11D90
0001B35A 5213                       		addq.b	#1,(a3)
0001B35C 3A09                       		move.w	a1,d5
0001B35E 0445 D000                  		subi.w	#-$3000,d5
0001B362 EC4D                       		lsr.w	#6,d5
0001B364 0245 007F                  		andi.w	#$7F,d5
0001B368 14C5                       		move.b	d5,(a2)+
0001B36A 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001B36C 137C 0006 0024             		move.b	#6,routine(a1)
0001B372 2368 0004 0004             		move.l	4(a0),4(a1)
0001B378 3368 0002 0002             		move.w	2(a0),2(a1)
0001B37E 0029 0004 0001             		ori.b	#4,1(a1)
0001B384 337C 0200 0018             		move.w	#$200,priority(a1)
0001B38A 137C 0008 0023             		move.b	#8,width_pixels(a1)
0001B390 137C 0003 001A             		move.b	#3,mapping_frame(a1)
0001B396 137C 0098 0020             		move.b	#$98,collision_flags(a1)
0001B39C 1342 0026                  		move.b	d2,$26(a1)
0001B3A0 0602 0040                  		addi.b	#$40,d2
0001B3A4 2348 003C                  		move.l	a0,$3C(a1)
0001B3A8 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001B3AC                            
0001B3AC                            loc_11D90:
0001B3AC 7001                       		moveq	#1,d0
0001B3AE 0828 0000 0022             		btst	#0,status(a0)
0001B3B4 6700                       		beq.s	Obj60_Move
0001B3B6 4440                       		neg.w	d0
0001B3B8                            
0001B3B8                            Obj60_Move:
0001B3B8 1140 0036                  		move.b	d0,$36(a0)
0001B3BC 1168 0028 0024             		move.b	subtype(a0),routine(a0)	; if type is 02, skip the firing rountine
0001B3C2 5428 0024                  		addq.b	#2,routine(a0)
0001B3C6 317C FFC0 0010             		move.w	#-$40,x_vel(a0)	; move orbinaut	to the left
0001B3CC 0828 0000 0022             		btst	#0,status(a0)	; is orbinaut reversed?
0001B3D2 6700                       		beq.s	locret_11DBC	; if not, branch
0001B3D4 4468 0010                  		neg.w	x_vel(a0)		; move orbinaut	to the right
0001B3D8                            
0001B3D8                            locret_11DBC:
0001B3D8 4E75                       		rts	
0001B3DA                            ; ===========================================================================
0001B3DA                            
0001B3DA                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001B3DA 3038 D008                  		move.w	($FFFFD008).w,d0
0001B3DE 9068 0008                  		sub.w	8(a0),d0
0001B3E2 6400                       		bcc.s	loc_11DCA
0001B3E4 4440                       		neg.w	d0
0001B3E6                            
0001B3E6                            loc_11DCA:
0001B3E6 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001B3EA 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001B3EC 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001B3F0 9068 000C                  		sub.w	$C(a0),d0
0001B3F4 6400                       		bcc.s	loc_11DDC
0001B3F6 4440                       		neg.w	d0
0001B3F8                            
0001B3F8                            loc_11DDC:
0001B3F8 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001B3FC 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001B3FE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001B402 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001B404 117C 0001 001C             		move.b	#1,anim(a0)	; use "angry" animation
0001B40A                            
0001B40A                            Obj60_Animate:
0001B40A 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001B410 4EB9 0001 2624             		jsr	AnimateSprite
0001B416 6000 0000                  		bra.w	Obj60_ChkDel
0001B41A                            ; ===========================================================================
0001B41A                            
0001B41A                            Obj60_Display:				; XREF: Obj60_Index
0001B41A 4EBA A7C6                  		jsr	SpeedToPos
0001B41E                            
0001B41E                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001B41E 3028 0008                  		move.w	8(a0),d0
0001B422 0240 FF80                  		andi.w	#$FF80,d0
0001B426 3238 F700                  		move.w	($FFFFF700).w,d1
0001B42A 0441 0080                  		subi.w	#$80,d1
0001B42E 0241 FF80                  		andi.w	#$FF80,d1
0001B432 9041                       		sub.w	d1,d0
0001B434 0C40 0280                  		cmpi.w	#$280,d0
0001B438 6200 0000                  		bhi.w	Obj60_ChkGone
0001B43C 6000 A80A                  		bra.w	DisplaySprite
0001B440                            ; ===========================================================================
0001B440                            
0001B440                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001B440                            ;		lea	(v_objstate).w,a2
0001B440 7000                       		moveq	#0,d0
0001B442 3028 0014                  		move.w	respawn_index(a0),d0
0001B446                            ;        move.w	respawn_index(a0),d0
0001B446 6700                       		beq.s	loc_11E34
0001B448 3440                       	    movea.w	d0,a2		
0001B44A 0892 0007                  		bclr	#7,(a2)
0001B44E                            
0001B44E                            loc_11E34:
0001B44E 45E8 0037                  		lea	$37(a0),a2
0001B452 7400                       		moveq	#0,d2
0001B454 141A                       		move.b	(a2)+,d2
0001B456 5342                       		subq.w	#1,d2
0001B458 6500                       		bcs.s	Obj60_Delete
0001B45A                            
0001B45A                            loc_11E40:
0001B45A 7000                       		moveq	#0,d0
0001B45C 101A                       		move.b	(a2)+,d0
0001B45E ED48                       		lsl.w	#6,d0
0001B460 0680 00FF D000             		addi.l	#$FFD000,d0
0001B466 2240                       		movea.l	d0,a1
0001B468 4EBA A794                  		jsr	DeleteObject2
0001B46C 51CA FFEC                  		dbf	d2,loc_11E40
0001B470                            
0001B470                            Obj60_Delete:
0001B470 6000 A78A                  		bra.w	DeleteObject
0001B474                            ; ===========================================================================
0001B474                            
0001B474                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001B474 2268 003C                  		movea.l	$3C(a0),a1
0001B478 0C11 0060                  		cmpi.b	#$60,0(a1)
0001B47C 6600 A77E                  		bne.w	DeleteObject
0001B480 0C29 0002 001A             		cmpi.b	#2,mapping_frame(a1)
0001B486 6600                       		bne.s	Obj60_Circle
0001B488 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001B48E 6600                       		bne.s	Obj60_Circle
0001B490 5428 0024                  		addq.b	#2,routine(a0)
0001B494 5329 0037                  		subq.b	#1,$37(a1)
0001B498 6600                       		bne.s	Obj60_FireOrb
0001B49A 5429 0024                  		addq.b	#2,routine(a1)
0001B49E                            
0001B49E                            Obj60_FireOrb:
0001B49E 317C FE00 0010             		move.w	#-$200,x_vel(a0)	; move orb to the left (quickly)
0001B4A4 0829 0000 0022             		btst	#0,status(a1)
0001B4AA 6700                       		beq.s	Obj60_Display2
0001B4AC 4468 0010                  		neg.w	x_vel(a0)
0001B4B0                            
0001B4B0                            Obj60_Display2:
0001B4B0 6000 A796                  		bra.w	DisplaySprite
0001B4B4                            ; ===========================================================================
0001B4B4                            
0001B4B4                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001B4B4 1028 0026                  		move.b	$26(a0),d0
0001B4B8 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001B4BE E841                       		asr.w	#4,d1
0001B4C0 D269 0008                  		add.w	8(a1),d1
0001B4C4 3141 0008                  		move.w	d1,8(a0)
0001B4C8 E840                       		asr.w	#4,d0
0001B4CA D069 000C                  		add.w	$C(a1),d0
0001B4CE 3140 000C                  		move.w	d0,$C(a0)
0001B4D2 1029 0036                  		move.b	$36(a1),d0
0001B4D6 D128 0026                  		add.b	d0,$26(a0)
0001B4DA 6000 A76C                  		bra.w	DisplaySprite
0001B4DE                            ; ===========================================================================
0001B4DE                            
0001B4DE                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001B4DE 4EBA A702                  		jsr	SpeedToPos
0001B4E2 4A28 0001                  		tst.b	1(a0)
0001B4E6 6A00 A714                  		bpl.w	DeleteObject
0001B4EA 6000 A75C                  		bra.w	DisplaySprite
0001B4EE                            ; ===========================================================================
0001B4EE                            Ani_obj60:
0001B4EE                            	include "_anim\obj60.asm"
0001B4EE                            ; ---------------------------------------------------------------------------
0001B4EE                            ; Animation script - Orbinaut enemy
0001B4EE                            ; ---------------------------------------------------------------------------
0001B4EE 0000                       		dc.w byte_11EDA-Ani_obj60
0001B4F0 0000                       		dc.w byte_11EDE-Ani_obj60
0001B4F2 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001B4F6 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001B4FC                            		even
0001B4FC                            		even
0001B4FC                            
0001B4FC                            ; ---------------------------------------------------------------------------
0001B4FC                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001B4FC                            ; ---------------------------------------------------------------------------
0001B4FC                            Map_obj60:
0001B4FC                            	include "_maps\obj60.asm"
0001B4FC                            ; ---------------------------------------------------------------------------
0001B4FC                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001B4FC                            ; ---------------------------------------------------------------------------
0001B4FC 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001B500 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001B504 01                         byte_11EEC:	dc.b 1
0001B505 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B50A 01                         byte_11EF2:	dc.b 1
0001B50B F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001B510 01                         byte_11EF8:	dc.b 1
0001B511 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001B516 01                         byte_11EFE:	dc.b 1
0001B517 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001B51C                            		even
0001B51C                            		even
0001B51C                            
0001B51C                            ; ===========================================================================
0001B51C                            ; ---------------------------------------------------------------------------
0001B51C                            ; Object 16 - harpoon (LZ)
0001B51C                            ; ---------------------------------------------------------------------------
0001B51C                            
0001B51C                            Obj16:					; XREF: Obj_Index
0001B51C 7000                       		moveq	#0,d0
0001B51E 1028 0024                  		move.b	routine(a0),d0
0001B522 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001B526 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001B52A                            ; ===========================================================================
0001B52A 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001B52C 0000                       		dc.w Obj16_Move-Obj16_Index
0001B52E 0000                       		dc.w Obj16_Wait-Obj16_Index
0001B530                            ; ===========================================================================
0001B530                            
0001B530                            Obj16_Main:				; XREF: Obj16_Index
0001B530 5428 0024                  		addq.b	#2,routine(a0)
0001B534 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001B53C 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001B542 0028 0004 0001             		ori.b	#4,1(a0)
0001B548 317C 0200 0018             		move.w	#$200,priority(a0)
0001B54E 1168 0028 001C             		move.b	subtype(a0),anim(a0)
0001B554 117C 0014 0023             		move.b	#$14,width_pixels(a0)
0001B55A 317C 003C 0030             		move.w	#60,$30(a0)
0001B560                            
0001B560                            Obj16_Move:				; XREF: Obj16_Index
0001B560 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001B566 4EB9 0001 2624             		jsr	AnimateSprite
0001B56C 7000                       		moveq	#0,d0
0001B56E 1028 001A                  		move.b	mapping_frame(a0),d0	; move frame number to d0
0001B572 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),collision_flags(a0) ; load collision response (based on	d0)
0001B578 6000 D2C0                  		bra.w	MarkObjGone
0001B57C                            ; ===========================================================================
0001B57C 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001B582                            ; ===========================================================================
0001B582                            
0001B582                            Obj16_Wait:				; XREF: Obj16_Index
0001B582 5368 0030                  		subq.w	#1,$30(a0)
0001B586 6A00                       		bpl.s	Obj16_ChkDel
0001B588 317C 003C 0030             		move.w	#60,$30(a0)
0001B58E 5528 0024                  		subq.b	#2,routine(a0)	; run "Obj16_Move" subroutine
0001B592 0868 0000 001C             		bchg	#0,anim(a0)	; reverse animation
0001B598                            
0001B598                            Obj16_ChkDel:
0001B598 6000 D2A0                  		bra.w	MarkObjGone
0001B59C                            ; ===========================================================================
0001B59C                            Ani_obj16:
0001B59C                            	include "_anim\obj16.asm"
0001B59C                            ; ---------------------------------------------------------------------------
0001B59C                            ; Animation script - harpoon (LZ)
0001B59C                            ; ---------------------------------------------------------------------------
0001B59C 0000                       		dc.w byte_11F8A-Ani_obj16
0001B59E 0000                       		dc.w byte_11F8E-Ani_obj16
0001B5A0 0000                       		dc.w byte_11F92-Ani_obj16
0001B5A2 0000                       		dc.w byte_11F96-Ani_obj16
0001B5A4 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001B5A8 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001B5AC 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
0001B5B0 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
0001B5B4                            		even
0001B5B4                            		even
0001B5B4                            
0001B5B4                            ; ---------------------------------------------------------------------------
0001B5B4                            ; Sprite mappings - harpoon (LZ)
0001B5B4                            ; ---------------------------------------------------------------------------
0001B5B4                            Map_obj16:
0001B5B4                            	include "_maps\obj16.asm"
0001B5B4                            ; ---------------------------------------------------------------------------
0001B5B4                            ; Sprite mappings - harpoon (LZ)
0001B5B4                            ; ---------------------------------------------------------------------------
0001B5B4 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001B5B8 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001B5BC 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
0001B5C0 01                         byte_11FA6:	dc.b 1
0001B5C1 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001B5C6 01                         byte_11FAC:	dc.b 1
0001B5C7 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001B5CC 02                         byte_11FB2:	dc.b 2
0001B5CD FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001B5D2 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001B5D7 01                         byte_11FBD:	dc.b 1
0001B5D8 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001B5DD 01                         byte_11FC3:	dc.b 1
0001B5DE E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001B5E3 02                         byte_11FC9:	dc.b 2
0001B5E4 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001B5E9 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001B5EE                            		even
0001B5EE                            		even
0001B5EE                            
0001B5EE                            ; ===========================================================================
0001B5EE                            ; ---------------------------------------------------------------------------
0001B5EE                            ; Object 61 - blocks (LZ)
0001B5EE                            ; ---------------------------------------------------------------------------
0001B5EE                            
0001B5EE                            Obj61:					; XREF: Obj_Index
0001B5EE 7000                       		moveq	#0,d0
0001B5F0 1028 0024                  		move.b	routine(a0),d0
0001B5F4 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001B5F8 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001B5FC                            ; ===========================================================================
0001B5FC 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001B5FE 0000                       		dc.w Obj61_Action-Obj61_Index
0001B600                            
0001B600 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001B602 200C                       		dc.b $20, $C
0001B604 1010                       		dc.b $10, $10
0001B606 1010                       		dc.b $10, $10
0001B608                            ; ===========================================================================
0001B608                            
0001B608                            Obj61_Main:				; XREF: Obj61_Index
0001B608 5428 0024                  		addq.b	#2,routine(a0)
0001B60C 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001B614 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001B61A 117C 0004 0001             		move.b	#4,1(a0)
0001B620 317C 0180 0018             		move.w	#$180,priority(a0)
0001B626 7000                       		moveq	#0,d0
0001B628 1028 0028                  		move.b	subtype(a0),d0
0001B62C E648                       		lsr.w	#3,d0
0001B62E 0240 000E                  		andi.w	#$E,d0
0001B632 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001B636 115A 0023                  		move.b	(a2)+,width_pixels(a0)
0001B63A 1152 0016                  		move.b	(a2),$16(a0)
0001B63E E248                       		lsr.w	#1,d0
0001B640 1140 001A                  		move.b	d0,mapping_frame(a0)
0001B644 3168 0008 0034             		move.w	8(a0),$34(a0)
0001B64A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B650 1028 0028                  		move.b	subtype(a0),d0
0001B654 0200 000F                  		andi.b	#$F,d0
0001B658 6700                       		beq.s	Obj61_Action
0001B65A 0C00 0007                  		cmpi.b	#7,d0
0001B65E 6700                       		beq.s	Obj61_Action
0001B660 117C 0001 0038             		move.b	#1,$38(a0)
0001B666                            
0001B666                            Obj61_Action:				; XREF: Obj61_Index
0001B666 3F28 0008                  		move.w	8(a0),-(sp)
0001B66A 7000                       		moveq	#0,d0
0001B66C 1028 0028                  		move.b	subtype(a0),d0
0001B670 0240 000F                  		andi.w	#$F,d0
0001B674 D040                       		add.w	d0,d0
0001B676 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001B67A 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
0001B67E 381F                       		move.w	(sp)+,d4
0001B680 4A28 0001                  		tst.b	1(a0)
0001B684 6A00                       		bpl.s	Obj61_ChkDel
0001B686 7200                       		moveq	#0,d1
0001B688 1228 0023                  		move.b	width_pixels(a0),d1
0001B68C 0641 000B                  		addi.w	#$B,d1
0001B690 7400                       		moveq	#0,d2
0001B692 1428 0016                  		move.b	$16(a0),d2
0001B696 3602                       		move.w	d2,d3
0001B698 5243                       		addq.w	#1,d3
0001B69A 4EBA D882                  		jsr	SolidObject
0001B69E 1144 003F                  		move.b	d4,$3F(a0)
0001B6A2 4EB9 0000 0000             		jsr	loc_12180
0001B6A8                            
0001B6A8                            Obj61_ChkDel:
0001B6A8 3028 0034                  		move.w	$34(a0),d0
0001B6AC 4EFA D1C2                  		jmp		MarkObjGone2
0001B6B0                            ; ===========================================================================
0001B6B0 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001B6B4 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001B6B8 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
0001B6BC 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001B6C0                            ; ===========================================================================
0001B6C0                            
0001B6C0                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001B6C0 4E75                       		rts	
0001B6C2                            ; ===========================================================================
0001B6C2                            
0001B6C2                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001B6C2 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001B6C6 6600                       		bne.s	loc_120D6	; if yes, branch
0001B6C8 0828 0003 0022             		btst	#3,status(a0)
0001B6CE 6700                       		beq.s	locret_120D4
0001B6D0 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
0001B6D6                            
0001B6D6                            locret_120D4:
0001B6D6 4E75                       		rts	
0001B6D8                            ; ===========================================================================
0001B6D8                            
0001B6D8                            loc_120D6:
0001B6D8 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001B6DC 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001B6DE 5228 0028                  		addq.b	#1,subtype(a0)	; add 1	to type
0001B6E2 4228 0038                  		clr.b	$38(a0)
0001B6E6 4E75                       		rts	
0001B6E8                            ; ===========================================================================
0001B6E8                            
0001B6E8                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001B6E8 4EBA A4F8                  		jsr	SpeedToPos
0001B6EC 5068 0012                  		addq.w	#8,y_vel(a0)	; make object fall
0001B6F0 4EB9 0000 0000             		jsr	ObjHitFloor
0001B6F6 4A41                       		tst.w	d1
0001B6F8 6A00 0000                  		bpl.w	locret_12106
0001B6FC 5241                       		addq.w	#1,d1
0001B6FE D368 000C                  		add.w	d1,$C(a0)
0001B702 4268 0012                  		clr.w	y_vel(a0)		; stop when it touches the floor
0001B706 4228 0028                  		clr.b	subtype(a0)		; set type to 00 (non-moving type)
0001B70A                            
0001B70A                            locret_12106:
0001B70A 4E75                       		rts	
0001B70C                            ; ===========================================================================
0001B70C                            
0001B70C                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001B70C 4EBA A4D4                  		jsr	SpeedToPos
0001B710 5168 0012                  		subq.w	#8,y_vel(a0)	; make object rise
0001B714 4EB9 0000 0000             		jsr	ObjHitCeiling
0001B71A 4A41                       		tst.w	d1
0001B71C 6A00 0000                  		bpl.w	locret_12126
0001B720 9368 000C                  		sub.w	d1,$C(a0)
0001B724 4268 0012                  		clr.w	y_vel(a0)		; stop when it touches the ceiling
0001B728 4228 0028                  		clr.b	subtype(a0)		; set type to 00 (non-moving type)
0001B72C                            
0001B72C                            locret_12126:
0001B72C 4E75                       		rts	
0001B72E                            ; ===========================================================================
0001B72E                            
0001B72E                            Obj61_Type05:				; XREF: Obj61_TypeIndex
0001B72E 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001B734 6600                       		bne.s	locret_12138	; if not, branch
0001B736 5228 0028                  		addq.b	#1,subtype(a0)	; if yes, add 1	to type
0001B73A 4228 0038                  		clr.b	$38(a0)
0001B73E                            
0001B73E                            locret_12138:
0001B73E 4E75                       		rts	
0001B740                            ; ===========================================================================
0001B740                            
0001B740                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001B740 3038 F646                  		move.w	($FFFFF646).w,d0
0001B744 9068 000C                  		sub.w	$C(a0),d0
0001B748 6700                       		beq.s	locret_1217E
0001B74A 6400                       		bcc.s	loc_12162
0001B74C 0C40 FFFE                  		cmpi.w	#-2,d0
0001B750 6C00                       		bge.s	loc_1214E
0001B752 70FE                       		moveq	#-2,d0
0001B754                            
0001B754                            loc_1214E:
0001B754 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
0001B758 4EB9 0000 0000             		jsr	ObjHitCeiling
0001B75E 4A41                       		tst.w	d1
0001B760 6A00 0000                  		bpl.w	locret_12160
0001B764 9368 000C                  		sub.w	d1,$C(a0)
0001B768                            
0001B768                            locret_12160:
0001B768 4E75                       		rts	
0001B76A                            ; ===========================================================================
0001B76A                            
0001B76A                            loc_12162:				; XREF: Obj61_Type07
0001B76A 0C40 0002                  		cmpi.w	#2,d0
0001B76E 6F00                       		ble.s	loc_1216A
0001B770 7002                       		moveq	#2,d0
0001B772                            
0001B772                            loc_1216A:
0001B772 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001B776 4EB9 0000 0000             		jsr	ObjHitFloor
0001B77C 4A41                       		tst.w	d1
0001B77E 6A00 0000                  		bpl.w	locret_1217E
0001B782 5241                       		addq.w	#1,d1
0001B784 D368 000C                  		add.w	d1,$C(a0)
0001B788                            
0001B788                            locret_1217E:
0001B788 4E75                       		rts	
0001B78A                            ; ===========================================================================
0001B78A                            
0001B78A                            loc_12180:				; XREF: Obj61_Action
0001B78A 4A28 0038                  		tst.b	$38(a0)
0001B78E 6700                       		beq.s	locret_121C0
0001B790 0828 0003 0022             		btst	#3,status(a0)
0001B796 6600                       		bne.s	loc_1219A
0001B798 4A28 003E                  		tst.b	parent(a0)
0001B79C 6700                       		beq.s	locret_121C0
0001B79E 5928 003E                  		subq.b	#4,parent(a0)
0001B7A2 6000                       		bra.s	loc_121A6
0001B7A4                            ; ===========================================================================
0001B7A4                            
0001B7A4                            loc_1219A:
0001B7A4 0C28 0040 003E             		cmpi.b	#$40,parent(a0)
0001B7AA 6700                       		beq.s	locret_121C0
0001B7AC 5828 003E                  		addq.b	#4,parent(a0)
0001B7B0                            
0001B7B0                            loc_121A6:
0001B7B0 1028 003E                  		move.b	parent(a0),d0
0001B7B4 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001B7BA 323C 0400                  		move.w	#$400,d1
0001B7BE C1C1                       		muls.w	d1,d0
0001B7C0 4840                       		swap	d0
0001B7C2 D068 0030                  		add.w	$30(a0),d0
0001B7C6 3140 000C                  		move.w	d0,$C(a0)
0001B7CA                            
0001B7CA                            locret_121C0:
0001B7CA 4E75                       		rts	
0001B7CC                            ; ===========================================================================
0001B7CC                            ; ---------------------------------------------------------------------------
0001B7CC                            ; Sprite mappings - blocks (LZ)
0001B7CC                            ; ---------------------------------------------------------------------------
0001B7CC                            Map_obj61:
0001B7CC                            	include "_maps\obj61.asm"
0001B7CC                            ; ---------------------------------------------------------------------------
0001B7CC                            ; Sprite mappings - blocks (LZ)
0001B7CC                            ; ---------------------------------------------------------------------------
0001B7CC 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001B7D0 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
0001B7D4 01                         byte_121CA:	dc.b 1
0001B7D5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001B7DA 02                         byte_121D0:	dc.b 2
0001B7DB F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001B7E0 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
0001B7E5 01                         byte_121DB:	dc.b 1
0001B7E6 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
0001B7EB 01                         byte_121E1:	dc.b 1
0001B7EC F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001B7F2 00                         		even
0001B7F2 00                         		even
0001B7F2                            
0001B7F2                            ; ===========================================================================
0001B7F2                            ; ---------------------------------------------------------------------------
0001B7F2                            ; Object 62 - gargoyle head (LZ)
0001B7F2                            ; ---------------------------------------------------------------------------
0001B7F2                            
0001B7F2                            Obj62:					; XREF: Obj_Index
0001B7F2 7000                       		moveq	#0,d0
0001B7F4 1028 0024                  		move.b	routine(a0),d0
0001B7F8 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001B7FC 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001B800 6000 D038                  		bra.w	MarkObjGone
0001B804                            ; ===========================================================================
0001B804 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
0001B806 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001B808 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001B80A 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001B80C                            
0001B80C 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001B814                            ; ===========================================================================
0001B814                            
0001B814                            Obj62_Main:				; XREF: Obj62_Index
0001B814 5428 0024                  		addq.b	#2,routine(a0)
0001B818 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001B820 317C 42E9 0002             		move.w	#$42E9,2(a0)
0001B826 0028 0004 0001             		ori.b	#4,1(a0)
0001B82C 317C 0180 0018             		move.w	#$180,priority(a0)
0001B832 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001B838 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001B83C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001B840 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
0001B846 1168 001F 001E             		move.b	$1F(a0),anim_frame_duration(a0)
0001B84C 0228 000F 0028             		andi.b	#$F,subtype(a0)
0001B852                            
0001B852                            Obj62_MakeFire:				; XREF: Obj62_Index
0001B852 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001B856 6600                       		bne.s	Obj62_NoFire
0001B858 1168 001F 001E             		move.b	$1F(a0),anim_frame_duration(a0)
0001B85E 4EBA A760                  		jsr	ChkObjOnScreen
0001B862 6600                       		bne.s	Obj62_NoFire
0001B864 4EBA AEAE                  		jsr	SingleObjLoad
0001B868 6600                       		bne.s	Obj62_NoFire
0001B86A 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
0001B86E 5829 0024                  		addq.b	#4,routine(a1)
0001B872 3368 0008 0008             		move.w	8(a0),8(a1)
0001B878 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B87E 1368 0001 0001             		move.b	1(a0),1(a1)
0001B884 1368 0022 0022             		move.b	status(a0),status(a1)
0001B88A                            
0001B88A                            Obj62_NoFire:
0001B88A 4E75                       		rts	
0001B88C                            ; ===========================================================================
0001B88C                            
0001B88C                            Obj62_FireBall:				; XREF: Obj62_Index
0001B88C 5428 0024                  		addq.b	#2,routine(a0)
0001B890 117C 0008 0016             		move.b	#8,$16(a0)
0001B896 117C 0008 0017             		move.b	#8,$17(a0)
0001B89C 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001B8A4 317C 02E9 0002             		move.w	#$2E9,2(a0)
0001B8AA 0028 0004 0001             		ori.b	#4,1(a0)
0001B8B0 317C 0200 0018             		move.w	#$200,priority(a0)
0001B8B6 117C 0098 0020             		move.b	#$98,collision_flags(a0)
0001B8BC 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001B8C2 117C 0002 001A             		move.b	#2,mapping_frame(a0)
0001B8C8 5068 000C                  		addq.w	#8,$C(a0)
0001B8CC 317C 0200 0010             		move.w	#$200,x_vel(a0)
0001B8D2 0828 0000 0022             		btst	#0,status(a0)
0001B8D8 6600                       		bne.s	Obj62_Sound
0001B8DA 4468 0010                  		neg.w	x_vel(a0)
0001B8DE                            
0001B8DE                            Obj62_Sound:
0001B8DE 303C 00AE                  		move.w	#$AE,d0
0001B8E2 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001B8E8                            
0001B8E8                            Obj62_AniFire:				; XREF: Obj62_Index
0001B8E8 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001B8EC 0200 0007                  		andi.b	#7,d0
0001B8F0 6600                       		bne.s	Obj62_StopFire
0001B8F2 0868 0000 001A             		bchg	#0,mapping_frame(a0)	; switch between frame 01 and 02
0001B8F8                            
0001B8F8                            Obj62_StopFire:
0001B8F8 4EBA A2E8                  		jsr	SpeedToPos
0001B8FC 0828 0000 0022             		btst	#0,status(a0)
0001B902 6600                       		bne.s	Obj62_StopFire2
0001B904 76F8                       		moveq	#-8,d3
0001B906 4EB9 0000 0000             		jsr	ObjHitWallLeft
0001B90C 4A41                       		tst.w	d1
0001B90E 6B00 A2EC                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001B912 4E75                       		rts	
0001B914                            ; ===========================================================================
0001B914                            
0001B914                            Obj62_StopFire2:
0001B914 7608                       		moveq	#8,d3
0001B916 4EB9 0000 0000             		jsr	ObjHitWallRight
0001B91C 4A41                       		tst.w	d1
0001B91E 6B00 A2DC                  		bmi.w	DeleteObject
0001B922 4E75                       		rts	
0001B924                            ; ===========================================================================
0001B924                            ; ---------------------------------------------------------------------------
0001B924                            ; Sprite mappings - gargoyle head (LZ)
0001B924                            ; ---------------------------------------------------------------------------
0001B924                            Map_obj62:
0001B924                            	include "_maps\obj62.asm"
0001B924                            ; ---------------------------------------------------------------------------
0001B924                            ; Sprite mappings - gargoyle head (LZ)
0001B924                            ; ---------------------------------------------------------------------------
0001B924 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
0001B928 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001B92C 03                         byte_12320:	dc.b 3
0001B92D F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001B932 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
0001B937 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001B93C 01                         byte_12330:	dc.b 1
0001B93D FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001B942 01                         byte_12336:	dc.b 1
0001B943 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001B948                            		even
0001B948                            		even
0001B948                            
0001B948                            ; ===========================================================================
0001B948                            ; ---------------------------------------------------------------------------
0001B948                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001B948                            ; ---------------------------------------------------------------------------
0001B948                            
0001B948                            Obj63:					; XREF: Obj_Index
0001B948 7000                       		moveq	#0,d0
0001B94A 1028 0024                  		move.b	routine(a0),d0
0001B94E 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
0001B952 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
0001B956 3028 0030                  		move.w	$30(a0),d0
0001B95A 0240 FF80                  		andi.w	#$FF80,d0
0001B95E 3238 F700                  		move.w	($FFFFF700).w,d1
0001B962 0441 0080                  		subi.w	#$80,d1
0001B966 0241 FF80                  		andi.w	#$FF80,d1
0001B96A 9041                       		sub.w	d1,d0
0001B96C 0C40 0280                  		cmpi.w	#$280,d0
0001B970 6200                       		bhi.s	loc_1236A
0001B972                            
0001B972                            Obj63_Display:				; XREF: loc_1236A
0001B972 6000 A2D4                  		bra.w	DisplaySprite
0001B976                            ; ===========================================================================
0001B976                            
0001B976                            loc_1236A:				; XREF: Obj63
0001B976 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
0001B97C 6600                       		bne.s	loc_12378
0001B97E 0C40 FF80                  		cmpi.w	#-$80,d0
0001B982 64EE                       		bcc.s	Obj63_Display
0001B984                            
0001B984                            loc_12378:
0001B984 1028 002F                  		move.b	$2F(a0),d0
0001B988 6A00 A272                  		bpl.w	DeleteObject
0001B98C 0240 007F                  		andi.w	#$7F,d0
0001B990 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001B994 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001B99A 6000 A260                  		bra.w	DeleteObject
0001B99E                            ; ===========================================================================
0001B99E 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
0001B9A0 0000                       		dc.w loc_124B2-Obj63_Index
0001B9A2 0000                       		dc.w loc_124C2-Obj63_Index
0001B9A4 0000                       		dc.w loc_124DE-Obj63_Index
0001B9A6                            ; ===========================================================================
0001B9A6                            
0001B9A6                            Obj63_Main:				; XREF: Obj63_Index
0001B9A6 1028 0028                  		move.b	subtype(a0),d0
0001B9AA 6B00 0000                  		bmi.w	loc_12460
0001B9AE 5428 0024                  		addq.b	#2,routine(a0)
0001B9B2 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
0001B9BA 317C 43F6 0002             		move.w	#$43F6,2(a0)
0001B9C0 0028 0004 0001             		ori.b	#4,1(a0)
0001B9C6 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001B9CC 317C 0200 0018             		move.w	#$200,priority(a0)
0001B9D2 0C28 007F 0028             		cmpi.b	#$7F,subtype(a0)
0001B9D8 6600                       		bne.s	loc_123E2
0001B9DA 5828 0024                  		addq.b	#4,routine(a0)
0001B9DE 317C 03F6 0002             		move.w	#$3F6,2(a0)
0001B9E4 317C 0080 0018             		move.w	#$80,priority(a0)
0001B9EA 6000 0000                  		bra.w	loc_124DE
0001B9EE                            ; ===========================================================================
0001B9EE                            
0001B9EE                            loc_123E2:
0001B9EE 117C 0004 001A             		move.b	#4,mapping_frame(a0)
0001B9F4 7000                       		moveq	#0,d0
0001B9F6 1028 0028                  		move.b	subtype(a0),d0
0001B9FA 3200                       		move.w	d0,d1
0001B9FC E648                       		lsr.w	#3,d0
0001B9FE 0240 001E                  		andi.w	#$1E,d0
0001BA02 45FA 0000                  		lea	Obj63_Data(pc),a2
0001BA06 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001BA0A 315A 0038                  		move.w	(a2)+,$38(a0)
0001BA0E 315A 0030                  		move.w	(a2)+,$30(a0)
0001BA12 214A 003C                  		move.l	a2,$3C(a0)
0001BA16 0241 000F                  		andi.w	#$F,d1
0001BA1A E549                       		lsl.w	#2,d1
0001BA1C 1141 0038                  		move.b	d1,$38(a0)
0001BA20 117C 0004 003A             		move.b	#4,$3A(a0)
0001BA26 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001BA2A 6700                       		beq.s	loc_1244C
0001BA2C 117C 0001 003B             		move.b	#1,$3B(a0)
0001BA32 4428 003A                  		neg.b	$3A(a0)
0001BA36 7200                       		moveq	#0,d1
0001BA38 1228 0038                  		move.b	$38(a0),d1
0001BA3C D228 003A                  		add.b	$3A(a0),d1
0001BA40 B228 0039                  		cmp.b	$39(a0),d1
0001BA44 6500                       		bcs.s	loc_12448
0001BA46 1001                       		move.b	d1,d0
0001BA48 7200                       		moveq	#0,d1
0001BA4A 4A00                       		tst.b	d0
0001BA4C 6A00                       		bpl.s	loc_12448
0001BA4E 1228 0039                  		move.b	$39(a0),d1
0001BA52 5901                       		subq.b	#4,d1
0001BA54                            
0001BA54                            loc_12448:
0001BA54 1141 0038                  		move.b	d1,$38(a0)
0001BA58                            
0001BA58                            loc_1244C:
0001BA58 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001BA5E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001BA64 4EB9 0000 0000             		jsr	Obj63_ChangeDir
0001BA6A 6000 0000                  		bra.w	loc_124B2
0001BA6E                            ; ===========================================================================
0001BA6E                            
0001BA6E                            loc_12460:				; XREF: Obj63_Main
0001BA6E 1140 002F                  		move.b	d0,$2F(a0)
0001BA72 0240 007F                  		andi.w	#$7F,d0
0001BA76 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001BA7A 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001BA80 6600 A17A                  		bne.w	DeleteObject
0001BA84 D040                       		add.w	d0,d0
0001BA86 0240 001E                  		andi.w	#$1E,d0
0001BA8A 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
0001BA90 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001BA94 321A                       		move.w	(a2)+,d1
0001BA96 2248                       		movea.l	a0,a1
0001BA98 6000                       		bra.s	Obj63_MakePtfms
0001BA9A                            ; ===========================================================================
0001BA9A                            
0001BA9A                            Obj63_Loop:
0001BA9A 4EBA AC78                  		jsr	SingleObjLoad
0001BA9E 6600                       		bne.s	loc_124AA
0001BAA0                            
0001BAA0                            Obj63_MakePtfms:			; XREF: loc_12460
0001BAA0 12BC 0063                  		move.b	#$63,0(a1)
0001BAA4 335A 0008                  		move.w	(a2)+,8(a1)
0001BAA8 335A 000C                  		move.w	(a2)+,$C(a1)
0001BAAC 301A                       		move.w	(a2)+,d0
0001BAAE 1340 0028                  		move.b	d0,subtype(a1)
0001BAB2                            
0001BAB2                            loc_124AA:
0001BAB2 51C9 FFE6                  		dbf	d1,Obj63_Loop
0001BAB6                            
0001BAB6 588F                       		addq.l	#4,sp
0001BAB8 4E75                       		rts	
0001BABA                            ; ===========================================================================
0001BABA                            
0001BABA                            loc_124B2:				; XREF: Obj63_Index
0001BABA 7200                       		moveq	#0,d1
0001BABC 1228 0023                  		move.b	width_pixels(a0),d1
0001BAC0 4EB9 0000 F0A6             		jsr	(PlatformObject).l
0001BAC6 6000 0000                  		bra.w	sub_12502
0001BACA                            ; ===========================================================================
0001BACA                            
0001BACA                            loc_124C2:				; XREF: Obj63_Index
0001BACA 7200                       		moveq	#0,d1
0001BACC 1228 0023                  		move.b	width_pixels(a0),d1
0001BAD0 4EB9 0000 F1E6             		jsr	(ExitPlatform).l
0001BAD6 3F28 0008                  		move.w	8(a0),-(sp)
0001BADA 4EB9 0000 0000             		jsr	sub_12502
0001BAE0 341F                       		move.w	(sp)+,d2
0001BAE2 4EF9 0000 F44C             		jmp	(MvSonicOnPtfm2).l
0001BAE8                            ; ===========================================================================
0001BAE8                            
0001BAE8                            loc_124DE:				; XREF: Obj63_Index
0001BAE8 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001BAEC 0240 0003                  		andi.w	#3,d0
0001BAF0 6600                       		bne.s	loc_124FC
0001BAF2 7201                       		moveq	#1,d1
0001BAF4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001BAF8 6700                       		beq.s	loc_124F2
0001BAFA 4401                       		neg.b	d1
0001BAFC                            
0001BAFC                            loc_124F2:
0001BAFC D328 001A                  		add.b	d1,mapping_frame(a0)
0001BB00 0228 0003 001A             		andi.b	#3,mapping_frame(a0)
0001BB06                            
0001BB06                            loc_124FC:
0001BB06 588F                       		addq.l	#4,sp
0001BB08 6000 CD30                  		bra.w	MarkObjGone
0001BB0C                            
0001BB0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB0C                            
0001BB0C                            
0001BB0C                            sub_12502:				; XREF: loc_124B2; loc_124C2
0001BB0C 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001BB10 6700                       		beq.s	loc_12520
0001BB12 4A28 003B                  		tst.b	$3B(a0)
0001BB16 6600                       		bne.s	loc_12520
0001BB18 117C 0001 003B             		move.b	#1,$3B(a0)
0001BB1E 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001BB24 4428 003A                  		neg.b	$3A(a0)
0001BB28 6000                       		bra.s	loc_12534
0001BB2A                            ; ===========================================================================
0001BB2A                            
0001BB2A                            loc_12520:
0001BB2A 3028 0008                  		move.w	8(a0),d0
0001BB2E B068 0034                  		cmp.w	$34(a0),d0
0001BB32 6600                       		bne.s	loc_1256A
0001BB34 3028 000C                  		move.w	$C(a0),d0
0001BB38 B068 0036                  		cmp.w	$36(a0),d0
0001BB3C 6600                       		bne.s	loc_1256A
0001BB3E                            
0001BB3E                            loc_12534:
0001BB3E 7200                       		moveq	#0,d1
0001BB40 1228 0038                  		move.b	$38(a0),d1
0001BB44 D228 003A                  		add.b	$3A(a0),d1
0001BB48 B228 0039                  		cmp.b	$39(a0),d1
0001BB4C 6500                       		bcs.s	loc_12552
0001BB4E 1001                       		move.b	d1,d0
0001BB50 7200                       		moveq	#0,d1
0001BB52 4A00                       		tst.b	d0
0001BB54 6A00                       		bpl.s	loc_12552
0001BB56 1228 0039                  		move.b	$39(a0),d1
0001BB5A 5901                       		subq.b	#4,d1
0001BB5C                            
0001BB5C                            loc_12552:
0001BB5C 1141 0038                  		move.b	d1,$38(a0)
0001BB60 2268 003C                  		movea.l	$3C(a0),a1
0001BB64 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001BB6A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001BB70 4EB9 0000 0000             		jsr	Obj63_ChangeDir
0001BB76                            
0001BB76                            loc_1256A:
0001BB76 4EBA A06A                  		jsr	SpeedToPos
0001BB7A 4E75                       		rts	
0001BB7C                            ; End of function sub_12502
0001BB7C                            
0001BB7C                            
0001BB7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB7C                            
0001BB7C                            
0001BB7C                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
0001BB7C 7000                       		moveq	#0,d0
0001BB7E 343C FF00                  		move.w	#-$100,d2
0001BB82 3028 0008                  		move.w	8(a0),d0
0001BB86 9068 0034                  		sub.w	$34(a0),d0
0001BB8A 6400                       		bcc.s	loc_12584
0001BB8C 4440                       		neg.w	d0
0001BB8E 4442                       		neg.w	d2
0001BB90                            
0001BB90                            loc_12584:
0001BB90 7200                       		moveq	#0,d1
0001BB92 363C FF00                  		move.w	#-$100,d3
0001BB96 3228 000C                  		move.w	$C(a0),d1
0001BB9A 9268 0036                  		sub.w	$36(a0),d1
0001BB9E 6400                       		bcc.s	loc_12598
0001BBA0 4441                       		neg.w	d1
0001BBA2 4443                       		neg.w	d3
0001BBA4                            
0001BBA4                            loc_12598:
0001BBA4 B240                       		cmp.w	d0,d1
0001BBA6 6500                       		bcs.s	loc_125C2
0001BBA8 3028 0008                  		move.w	8(a0),d0
0001BBAC 9068 0034                  		sub.w	$34(a0),d0
0001BBB0 6700                       		beq.s	loc_125AE
0001BBB2 48C0                       		ext.l	d0
0001BBB4 E180                       		asl.l	#8,d0
0001BBB6 81C1                       		divs.w	d1,d0
0001BBB8 4440                       		neg.w	d0
0001BBBA                            
0001BBBA                            loc_125AE:
0001BBBA 3140 0010                  		move.w	d0,x_vel(a0)
0001BBBE 3143 0012                  		move.w	d3,y_vel(a0)
0001BBC2 4840                       		swap	d0
0001BBC4 3140 000A                  		move.w	d0,$A(a0)
0001BBC8 4268 000E                  		clr.w	$E(a0)
0001BBCC 4E75                       		rts	
0001BBCE                            ; ===========================================================================
0001BBCE                            
0001BBCE                            loc_125C2:				; XREF: Obj63_ChangeDir
0001BBCE 3228 000C                  		move.w	$C(a0),d1
0001BBD2 9268 0036                  		sub.w	$36(a0),d1
0001BBD6 6700                       		beq.s	loc_125D4
0001BBD8 48C1                       		ext.l	d1
0001BBDA E181                       		asl.l	#8,d1
0001BBDC 83C0                       		divs.w	d0,d1
0001BBDE 4441                       		neg.w	d1
0001BBE0                            
0001BBE0                            loc_125D4:
0001BBE0 3141 0012                  		move.w	d1,y_vel(a0)
0001BBE4 3142 0010                  		move.w	d2,x_vel(a0)
0001BBE8 4841                       		swap	d1
0001BBEA 3141 000E                  		move.w	d1,$E(a0)
0001BBEE 4268 000A                  		clr.w	$A(a0)
0001BBF2 4E75                       		rts	
0001BBF4                            ; End of function Obj63_ChangeDir
0001BBF4                            
0001BBF4                            ; ===========================================================================
0001BBF4 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
0001BBF6 0000                       		dc.w word_12610-Obj63_Data
0001BBF8 0000                       		dc.w word_12628-Obj63_Data
0001BBFA 0000                       		dc.w word_1263C-Obj63_Data
0001BBFC 0000                       		dc.w word_12650-Obj63_Data
0001BBFE 0000                       		dc.w word_12668-Obj63_Data
0001BC00 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001BC10 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001BC1C 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001BC2C 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001BC34 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001BC48 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001BC5C 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001BC74 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001BC88                            
0001BC88                            ; ---------------------------------------------------------------------------
0001BC88                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001BC88                            ; ---------------------------------------------------------------------------
0001BC88                            Map_obj63:
0001BC88                            	include "_maps\obj63.asm"
0001BC88                            ; ---------------------------------------------------------------------------
0001BC88                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001BC88                            ; ---------------------------------------------------------------------------
0001BC88 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
0001BC8C 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
0001BC90 0000                       		dc.w byte_1269E-Map_obj63
0001BC92 01                         byte_12686:	dc.b 1
0001BC93 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BC98 01                         byte_1268C:	dc.b 1
0001BC99 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001BC9E 01                         byte_12692:	dc.b 1
0001BC9F F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001BCA4 01                         byte_12698:	dc.b 1
0001BCA5 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001BCAA 01                         byte_1269E:	dc.b 1
0001BCAB F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001BCB0                            		even
0001BCB0                            		even
0001BCB0                            
0001BCB0                            ; ===========================================================================
0001BCB0                            ; ---------------------------------------------------------------------------
0001BCB0                            ; Object 64 - bubbles (LZ)
0001BCB0                            ; ---------------------------------------------------------------------------
0001BCB0                            
0001BCB0                            Obj64:					; XREF: Obj_Index
0001BCB0 7000                       		moveq	#0,d0
0001BCB2 1028 0024                  		move.b	routine(a0),d0
0001BCB6 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001BCBA 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
0001BCBE                            ; ===========================================================================
0001BCBE 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
0001BCC0 0000                       		dc.w Obj64_Animate-Obj64_Index
0001BCC2 0000                       		dc.w Obj64_ChkWater-Obj64_Index
0001BCC4 0000                       		dc.w Obj64_Display2-Obj64_Index
0001BCC6 0000                       		dc.w Obj64_Delete3-Obj64_Index
0001BCC8 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001BCCA                            ; ===========================================================================
0001BCCA                            
0001BCCA                            Obj64_Main:				; XREF: Obj64_Index
0001BCCA 5428 0024                  		addq.b	#2,routine(a0)
0001BCCE 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
0001BCD6 317C 8348 0002             		move.w	#$8348,2(a0)
0001BCDC 117C 0084 0001             		move.b	#$84,1(a0)
0001BCE2 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001BCE8 317C 0080 0018             		move.w	#$80,priority(a0)
0001BCEE 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001BCF2 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
0001BCF4 5028 0024                  		addq.b	#8,routine(a0)
0001BCF8 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001BCFC 1140 0032                  		move.b	d0,$32(a0)
0001BD00 1140 0033                  		move.b	d0,$33(a0)
0001BD04 117C 0006 001C             		move.b	#6,anim(a0)
0001BD0A 6000 0000                  		bra.w	Obj64_BblMaker
0001BD0E                            ; ===========================================================================
0001BD0E                            
0001BD0E                            Obj64_Bubble:				; XREF: Obj64_Main
0001BD0E 1140 001C                  		move.b	d0,anim(a0)
0001BD12 3168 0008 0030             		move.w	8(a0),$30(a0)
0001BD18 317C FF78 0012             		move.w	#-$88,y_vel(a0)	; float	bubble upwards
0001BD1E 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001BD24 1140 0026                  		move.b	d0,$26(a0)
0001BD28                            
0001BD28                            Obj64_Animate:				; XREF: Obj64_Index
0001BD28 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001BD2E 4EB9 0001 2624             		jsr	AnimateSprite
0001BD34 0C28 0006 001A             		cmpi.b	#6,mapping_frame(a0)
0001BD3A 6600                       		bne.s	Obj64_ChkWater
0001BD3C 117C 0001 002E             		move.b	#1,move_lock(a0)
0001BD42                            
0001BD42                            Obj64_ChkWater:				; XREF: Obj64_Index
0001BD42 3038 F646                  		move.w	($FFFFF646).w,d0
0001BD46 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001BD4A 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
0001BD4C                            
0001BD4C                            Obj64_Burst:				; XREF: Obj64_Wobble
0001BD4C 117C 0006 0024             		move.b	#6,routine(a0)
0001BD52 5628 001C                  		addq.b	#3,anim(a0)	; run "bursting" animation
0001BD56 6000 0000                  		bra.w	Obj64_Display2
0001BD5A                            ; ===========================================================================
0001BD5A                            
0001BD5A                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001BD5A 1028 0026                  		move.b	$26(a0),d0
0001BD5E 5228 0026                  		addq.b	#1,$26(a0)
0001BD62 0240 007F                  		andi.w	#$7F,d0
0001BD66 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001BD6C 1031 0000                  		move.b	(a1,d0.w),d0
0001BD70 4880                       		ext.w	d0
0001BD72 D068 0030                  		add.w	$30(a0),d0
0001BD76 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
0001BD7A 4A28 002E                  		tst.b	move_lock(a0)
0001BD7E 6700                       		beq.s	Obj64_Display
0001BD80 4EB9 0000 0000             		jsr	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001BD86 6700                       		beq.s	Obj64_Display	; if not, branch
0001BD88                            
0001BD88 4EB9 0000 0000             		jsr	ResumeMusic	; cancel countdown music
0001BD8E 303C 00AD                  		move.w	#$AD,d0
0001BD92 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001BD98 43F8 D000                  		lea	($FFFFD000).w,a1
0001BD9C 4269 0010                  		clr.w	x_vel(a1)
0001BDA0 4269 0012                  		clr.w	y_vel(a1)
0001BDA4 4269 0020                  		clr.w	inertia(a1)
0001BDA8 137C 0015 001C             		move.b	#$15,anim(a1)
0001BDAE 337C 0023 003E             		move.w	#$23,parent(a1)
0001BDB4 137C 0000 003C             		move.b	#0,$3C(a1)
0001BDBA 08A9 0005 0022             		bclr	#5,status(a1)
0001BDC0 08A9 0004 0022             		bclr	#4,status(a1)
0001BDC6 0829 0002 0022             		btst	#2,status(a1)
0001BDCC 6700 FF7E                  		beq.w	Obj64_Burst
0001BDD0 08A9 0002 0022             		bclr	#2,status(a1)
0001BDD6 137C 0013 0016             		move.b	#$13,$16(a1)
0001BDDC 137C 0009 0017             		move.b	#9,$17(a1)
0001BDE2 5B69 000C                  		subq.w	#5,$C(a1)
0001BDE6 6000 FF64                  		bra.w	Obj64_Burst
0001BDEA                            ; ===========================================================================
0001BDEA                            
0001BDEA                            Obj64_Display:				; XREF: Obj64_Wobble
0001BDEA 4EBA 9DF6                  		jsr	SpeedToPos
0001BDEE 4A28 0001                  		tst.b	1(a0)
0001BDF2 6A00                       		bpl.s	Obj64_Delete
0001BDF4 4EFA 9E52                  		jmp	DisplaySprite
0001BDF8                            ; ===========================================================================
0001BDF8                            
0001BDF8                            Obj64_Delete:
0001BDF8 4EFA 9E02                  		jmp	DeleteObject
0001BDFC                            ; ===========================================================================
0001BDFC                            
0001BDFC                            Obj64_Display2:				; XREF: Obj64_Index
0001BDFC 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001BE02 4EB9 0001 2624             		jsr	AnimateSprite
0001BE08 4A28 0001                  		tst.b	1(a0)
0001BE0C 6A00                       		bpl.s	Obj64_Delete2
0001BE0E 4EFA 9E38                  		jmp	DisplaySprite
0001BE12                            ; ===========================================================================
0001BE12                            
0001BE12                            Obj64_Delete2:
0001BE12 4EFA 9DE8                  		jmp	DeleteObject
0001BE16                            ; ===========================================================================
0001BE16                            
0001BE16                            Obj64_Delete3:				; XREF: Obj64_Index
0001BE16 6000 9DE4                  		bra.w	DeleteObject
0001BE1A                            ; ===========================================================================
0001BE1A                            
0001BE1A                            Obj64_BblMaker:				; XREF: Obj64_Index
0001BE1A 4A68 0036                  		tst.w	$36(a0)
0001BE1E 6600                       		bne.s	loc_12874
0001BE20 3038 F646                  		move.w	($FFFFF646).w,d0
0001BE24 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001BE28 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001BE2C 4A28 0001                  		tst.b	1(a0)
0001BE30 6A00 0000                  		bpl.w	Obj64_ChkDel
0001BE34 5368 0038                  		subq.w	#1,$38(a0)
0001BE38 6A00 0000                  		bpl.w	loc_12914
0001BE3C 317C 0001 0036             		move.w	#1,$36(a0)
0001BE42                            
0001BE42                            loc_1283A:
0001BE42 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001BE48 3200                       		move.w	d0,d1
0001BE4A 0240 0007                  		andi.w	#7,d0
0001BE4E 0C40 0006                  		cmpi.w	#6,d0
0001BE52 64EE                       		bcc.s	loc_1283A
0001BE54                            
0001BE54 1140 0034                  		move.b	d0,$34(a0)
0001BE58 0241 000C                  		andi.w	#$C,d1
0001BE5C 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001BE62 D2C1                       		adda.w	d1,a1
0001BE64 2149 003C                  		move.l	a1,$3C(a0)
0001BE68 5328 0032                  		subq.b	#1,$32(a0)
0001BE6C 6A00                       		bpl.s	loc_12872
0001BE6E 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001BE74 08E8 0007 0036             		bset	#7,$36(a0)
0001BE7A                            
0001BE7A                            loc_12872:
0001BE7A 6000                       		bra.s	loc_1287C
0001BE7C                            ; ===========================================================================
0001BE7C                            
0001BE7C                            loc_12874:				; XREF: Obj64_BblMaker
0001BE7C 5368 0038                  		subq.w	#1,$38(a0)
0001BE80 6A00 0000                  		bpl.w	loc_12914
0001BE84                            
0001BE84                            loc_1287C:
0001BE84 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001BE8A 0240 001F                  		andi.w	#$1F,d0
0001BE8E 3140 0038                  		move.w	d0,$38(a0)
0001BE92 4EBA A880                  		jsr	SingleObjLoad
0001BE96 6600                       		bne.s	loc_128F8
0001BE98 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001BE9C 3368 0008 0008             		move.w	8(a0),8(a1)
0001BEA2 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001BEA8 0240 000F                  		andi.w	#$F,d0
0001BEAC 5140                       		subq.w	#8,d0
0001BEAE D169 0008                  		add.w	d0,8(a1)
0001BEB2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BEB8 7000                       		moveq	#0,d0
0001BEBA 1028 0034                  		move.b	$34(a0),d0
0001BEBE 2468 003C                  		movea.l	$3C(a0),a2
0001BEC2 1372 0000 0028             		move.b	(a2,d0.w),subtype(a1)
0001BEC8 0828 0007 0036             		btst	#7,$36(a0)
0001BECE 6700                       		beq.s	loc_128F8
0001BED0 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001BED6 0240 0003                  		andi.w	#3,d0
0001BEDA 6600                       		bne.s	loc_128E4
0001BEDC 08E8 0006 0036             		bset	#6,$36(a0)
0001BEE2 6600                       		bne.s	loc_128F8
0001BEE4 137C 0002 0028             		move.b	#2,subtype(a1)
0001BEEA                            
0001BEEA                            loc_128E4:
0001BEEA 4A28 0034                  		tst.b	$34(a0)
0001BEEE 6600                       		bne.s	loc_128F8
0001BEF0 08E8 0006 0036             		bset	#6,$36(a0)
0001BEF6 6600                       		bne.s	loc_128F8
0001BEF8 137C 0002 0028             		move.b	#2,subtype(a1)
0001BEFE                            
0001BEFE                            loc_128F8:
0001BEFE 5328 0034                  		subq.b	#1,$34(a0)
0001BF02 6A00                       		bpl.s	loc_12914
0001BF04 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001BF0A 0240 007F                  		andi.w	#$7F,d0
0001BF0E 0640 0080                  		addi.w	#$80,d0
0001BF12 D168 0038                  		add.w	d0,$38(a0)
0001BF16 4268 0036                  		clr.w	$36(a0)
0001BF1A                            
0001BF1A                            loc_12914:
0001BF1A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001BF20 4EB9 0001 2624             		jsr	AnimateSprite
0001BF26                            
0001BF26                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001BF26 3028 0008                  		move.w	8(a0),d0
0001BF2A 0240 FF80                  		andi.w	#$FF80,d0
0001BF2E 3238 F700                  		move.w	($FFFFF700).w,d1
0001BF32 0441 0080                  		subi.w	#$80,d1
0001BF36 0241 FF80                  		andi.w	#$FF80,d1
0001BF3A 9041                       		sub.w	d1,d0
0001BF3C 0C40 0280                  		cmpi.w	#$280,d0
0001BF40 6200 9CBA                  		bhi.w	DeleteObject
0001BF44 3038 F646                  		move.w	($FFFFF646).w,d0
0001BF48 B068 000C                  		cmp.w	$C(a0),d0
0001BF4C 6500 9CFA                  		bcs.w	DisplaySprite
0001BF50 4E75                       		rts	
0001BF52                            ; ===========================================================================
0001BF52                            ; bubble production sequence
0001BF52                            
0001BF52                            ; 0 = small bubble, 1 =	large bubble
0001BF52                            
0001BF52 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001BF64                            
0001BF64                            ; ===========================================================================
0001BF64                            
0001BF64                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001BF64 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001BF68 6B00                       		bmi.s	loc_12998
0001BF6A 43F8 D000                  		lea	($FFFFD000).w,a1
0001BF6E 3029 0008                  		move.w	8(a1),d0
0001BF72 3228 0008                  		move.w	8(a0),d1
0001BF76 0441 0010                  		subi.w	#$10,d1
0001BF7A B240                       		cmp.w	d0,d1
0001BF7C 6400                       		bcc.s	loc_12998
0001BF7E 0641 0020                  		addi.w	#$20,d1
0001BF82 B240                       		cmp.w	d0,d1
0001BF84 6500                       		bcs.s	loc_12998
0001BF86 3029 000C                  		move.w	$C(a1),d0
0001BF8A 3228 000C                  		move.w	$C(a0),d1
0001BF8E B240                       		cmp.w	d0,d1
0001BF90 6400                       		bcc.s	loc_12998
0001BF92 0641 0010                  		addi.w	#$10,d1
0001BF96 B240                       		cmp.w	d0,d1
0001BF98 6500                       		bcs.s	loc_12998
0001BF9A 7001                       		moveq	#1,d0
0001BF9C 4E75                       		rts	
0001BF9E                            ; ===========================================================================
0001BF9E                            
0001BF9E                            loc_12998:
0001BF9E 7000                       		moveq	#0,d0
0001BFA0 4E75                       		rts	
0001BFA2                            ; ===========================================================================
0001BFA2                            Ani_obj64:
0001BFA2                            	include "_anim\obj64.asm"
0001BFA2                            ; ---------------------------------------------------------------------------
0001BFA2                            ; Animation script - bubbles (LZ)
0001BFA2                            ; ---------------------------------------------------------------------------
0001BFA2 0000                       		dc.w byte_129AA-Ani_obj64
0001BFA4 0000                       		dc.w byte_129B0-Ani_obj64
0001BFA6 0000                       		dc.w byte_129B6-Ani_obj64
0001BFA8 0000                       		dc.w byte_129BE-Ani_obj64
0001BFAA 0000                       		dc.w byte_129BE-Ani_obj64
0001BFAC 0000                       		dc.w byte_129C0-Ani_obj64
0001BFAE 0000                       		dc.w byte_129C6-Ani_obj64
0001BFB0 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001BFB6 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001BFBC 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001BFC4 04FC                       byte_129BE:	dc.b 4,	$FC
0001BFC6 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001BFCC 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001BFD2 00                         		even
0001BFD2 00                         		even
0001BFD2                            
0001BFD2                            ; ---------------------------------------------------------------------------
0001BFD2                            ; Sprite mappings - bubbles (LZ)
0001BFD2                            ; ---------------------------------------------------------------------------
0001BFD2                            Map_obj64:
0001BFD2                            	include "_maps\obj64.asm"
0001BFD2                            ; ---------------------------------------------------------------------------
0001BFD2                            ; Sprite mappings - bubbles (LZ)
0001BFD2                            ; ---------------------------------------------------------------------------
0001BFD2 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001BFD6 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
0001BFDA 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
0001BFDE 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
0001BFE2 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001BFE6 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
0001BFEA 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
0001BFEE 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
0001BFF2 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001BFF6 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
0001BFFA 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
0001BFFE 0000                       		dc.w byte_12A9C-Map_obj64
0001C000 01                         byte_129FA:	dc.b 1
0001C001 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001C006 01                         byte_12A00:	dc.b 1
0001C007 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001C00C 01                         byte_12A06:	dc.b 1
0001C00D FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
0001C012 01                         byte_12A0C:	dc.b 1
0001C013 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001C018 01                         byte_12A12:	dc.b 1
0001C019 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
0001C01E 01                         byte_12A18:	dc.b 1
0001C01F F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
0001C024 01                         byte_12A1E:	dc.b 1
0001C025 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001C02A 04                         byte_12A24:	dc.b 4
0001C02B F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
0001C030 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001C035 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001C03A 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
0001C03F 04                         byte_12A39:	dc.b 4
0001C040 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001C045 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001C04A 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001C04F 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001C054 01                         byte_12A4E:	dc.b 1
0001C055 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001C05A 01                         byte_12A54:	dc.b 1
0001C05B F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001C060 01                         byte_12A5A:	dc.b 1
0001C061 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001C066 01                         byte_12A60:	dc.b 1
0001C067 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001C06C 01                         byte_12A66:	dc.b 1
0001C06D F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001C072 01                         byte_12A6C:	dc.b 1
0001C073 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
0001C078 01                         byte_12A72:	dc.b 1
0001C079 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001C07E 01                         byte_12A78:	dc.b 1
0001C07F F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
0001C084 01                         byte_12A7E:	dc.b 1
0001C085 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
0001C08A 01                         byte_12A84:	dc.b 1
0001C08B F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001C090 01                         byte_12A8A:	dc.b 1
0001C091 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001C096 01                         byte_12A90:	dc.b 1
0001C097 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001C09C 01                         byte_12A96:	dc.b 1
0001C09D F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001C0A2 00                         byte_12A9C:	dc.b 0
0001C0A4 00                         		even
0001C0A4 00                         		even
0001C0A4                            
0001C0A4                            ; ===========================================================================
0001C0A4                            ; ---------------------------------------------------------------------------
0001C0A4                            ; Object 65 - waterfalls (LZ)
0001C0A4                            ; ---------------------------------------------------------------------------
0001C0A4                            
0001C0A4                            Obj65:					; XREF: Obj_Index
0001C0A4 7000                       		moveq	#0,d0
0001C0A6 1028 0024                  		move.b	routine(a0),d0
0001C0AA 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001C0AE 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001C0B2                            ; ===========================================================================
0001C0B2 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001C0B4 0000                       		dc.w Obj65_Animate-Obj65_Index
0001C0B6 0000                       		dc.w Obj65_ChkDel-Obj65_Index
0001C0B8 0000                       		dc.w Obj65_FixHeight-Obj65_Index
0001C0BA 0000                       		dc.w loc_12B36-Obj65_Index
0001C0BC                            ; ===========================================================================
0001C0BC                            
0001C0BC                            Obj65_Main:				; XREF: Obj65_Index
0001C0BC 5828 0024                  		addq.b	#4,routine(a0)
0001C0C0 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
0001C0C8 317C 4259 0002             		move.w	#$4259,2(a0)
0001C0CE 0028 0004 0001             		ori.b	#4,1(a0)
0001C0D4 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001C0DA 317C 0080 0018             		move.w	#$80,priority(a0)
0001C0E0 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001C0E4 6A00                       		bpl.s	loc_12AE6
0001C0E6 08E8 0007 0002             		bset	#7,2(a0)
0001C0EC                            
0001C0EC                            loc_12AE6:
0001C0EC 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001C0F0 1140 001A                  		move.b	d0,mapping_frame(a0)	; set frame number
0001C0F4 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
0001C0F8 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001C0FA 4228 0018                  		clr.b	priority(a0)
0001C0FE 5528 0024                  		subq.b	#2,routine(a0)
0001C102 0828 0006 0028             		btst	#6,subtype(a0)	; is object type $4x ?
0001C108 6700                       		beq.s	loc_12B0A	; if not, branch
0001C10A 117C 0006 0024             		move.b	#6,routine(a0)
0001C110                            
0001C110                            loc_12B0A:
0001C110 0828 0005 0028             		btst	#5,subtype(a0)	; is object type $Ax ?
0001C116 6700                       		beq.s	Obj65_Animate	; if not, branch
0001C118 117C 0008 0024             		move.b	#8,routine(a0)
0001C11E                            
0001C11E                            Obj65_Animate:				; XREF: Obj65_Index
0001C11E 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001C124 4EB9 0001 2624             		jsr	AnimateSprite
0001C12A                            
0001C12A                            Obj65_ChkDel:				; XREF: Obj65_Index
0001C12A 6000 C70E                  		bra.w	MarkObjGone
0001C12E                            ; ===========================================================================
0001C12E                            
0001C12E                            Obj65_FixHeight:			; XREF: Obj65_Index
0001C12E 3038 F646                  		move.w	($FFFFF646).w,d0
0001C132 0440 0010                  		subi.w	#$10,d0
0001C136 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001C13A 60E2                       		bra.s	Obj65_Animate
0001C13C                            ; ===========================================================================
0001C13C                            
0001C13C                            loc_12B36:				; XREF: Obj65_Index
0001C13C 08A8 0007 0002             		bclr	#7,2(a0)
0001C142 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001C148 6600                       		bne.s	Obj65_Animate2
0001C14A 08E8 0007 0002             		bset	#7,2(a0)
0001C150                            
0001C150                            Obj65_Animate2:
0001C150 60CC                       		bra.s	Obj65_Animate
0001C152                            ; ===========================================================================
0001C152                            Ani_obj65:
0001C152                            	include "_anim\obj65.asm"
0001C152                            ; ---------------------------------------------------------------------------
0001C152                            ; Animation script - waterfall (LZ)
0001C152                            ; ---------------------------------------------------------------------------
0001C152 0000                       		dc.w byte_12B4E-Ani_obj65
0001C154 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001C15A 00                         		even
0001C15A 00                         		even
0001C15A                            
0001C15A                            ; ---------------------------------------------------------------------------
0001C15A                            ; Sprite mappings - waterfalls (LZ)
0001C15A                            ; ---------------------------------------------------------------------------
0001C15A                            Map_obj65:
0001C15A                            	include "_maps\obj65.asm"
0001C15A                            ; ---------------------------------------------------------------------------
0001C15A                            ; Sprite mappings - waterfalls (LZ)
0001C15A                            ; ---------------------------------------------------------------------------
0001C15A 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001C15E 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001C162 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001C166 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001C16A 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001C16E 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001C172 01                         byte_12B6C:	dc.b 1
0001C173 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001C178 02                         byte_12B72:	dc.b 2
0001C179 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001C17E 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001C183 02                         byte_12B7D:	dc.b 2
0001C184 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001C189 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001C18E 01                         byte_12B88:	dc.b 1
0001C18F F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001C194 02                         byte_12B8E:	dc.b 2
0001C195 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001C19A 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001C19F 01                         byte_12B99:	dc.b 1
0001C1A0 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001C1A5 01                         byte_12B9F:	dc.b 1
0001C1A6 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
0001C1AB 01                         byte_12BA5:	dc.b 1
0001C1AC F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001C1B1 02                         byte_12BAB:	dc.b 2
0001C1B2 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001C1B7 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001C1BC 02                         byte_12BB6:	dc.b 2
0001C1BD F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001C1C2 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001C1C7 02                         byte_12BC1:	dc.b 2
0001C1C8 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001C1CD F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001C1D2 02                         byte_12BCC:	dc.b 2
0001C1D3 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001C1D8 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001C1DE 00                         		even
0001C1DE 00                         		even
0001C1DE                            
0001C1DE                            Spindash_dust:
0001C1DE                            Sprite_1DD20:				; DATA XREF: ROM:0001600Co
0001C1DE 7000                       		moveq	#0,d0
0001C1E0 1028 0024                  		move.b	routine(a0),d0
0001C1E4 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
0001C1E8 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
0001C1EC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C1EC 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBAo h+6DBCo ...
0001C1EE 0000                       		dc loc_1DD90-off_1DD2E; 1
0001C1F0 0000                       		dc loc_1DE46-off_1DD2E; 2
0001C1F2 0000                       		dc loc_1DE4A-off_1DD2E; 3
0001C1F4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C1F4                            
0001C1F4                            loc_1DD36:				; DATA XREF: h+6DBAo
0001C1F4 5428 0024                  		addq.b	#2,routine(a0)
0001C1F8 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
0001C200 0028 0004 0001             		or.b	#4,1(a0)
0001C206 317C 0080 0018             		move.w	#$80,priority(a0)
0001C20C 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001C212 317C 07A0 0002             		move	#$7A0,2(a0)
0001C218 317C D000 003E             		move	#-$3000,parent(a0)
0001C21E 317C F400 003C             		move	#$F400,$3C(a0)
0001C224                            ;		cmp	#-$2E40,a0
0001C224                            ;		beq.s	loc_1DD8C
0001C224                            ;		move.b	#1,$34(a0)
0001C224                            ;		cmp	#2,($FFFFFF70).w
0001C224                            ;		beq.s	loc_1DD8C
0001C224                            ;		move	#$48C,2(a0)
0001C224                            ;		move	#-$4FC0,parent(a0)
0001C224                            ;		move	#-$6E80,$3C(a0)
0001C224                            
0001C224                            ;loc_1DD8C:				; CODE XREF: h+6DF6j h+6E04j
0001C224                            ;		jsr	sub_16D6E
0001C224                            
0001C224                            loc_1DD90:				; DATA XREF: h+6DBAo
0001C224 3468 003E                  		movea.w	parent(a0),a2
0001C228 7000                       		moveq	#0,d0
0001C22A 1028 001C                  		move.b	anim(a0),d0
0001C22E D040                       		add	d0,d0
0001C230 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
0001C234 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
0001C238                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C238 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30o h+6E32o ...
0001C23A 0000                       		dc loc_1DDAC-off_1DDA4; 1
0001C23C 0000                       		dc loc_1DDCC-off_1DDA4; 2
0001C23E 0000                       		dc loc_1DE20-off_1DDA4; 3
0001C240                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C240                            
0001C240                            loc_1DDAC:				; DATA XREF: h+6E30o
0001C240 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
0001C246 4A28 001D                  		tst.b	next_anim(a0)
0001C24A 6600                       		bne.s	loc_1DE28
0001C24C 316A 0008 0008             		move	8(a2),8(a0)
0001C252 117C 0000 0022             		move.b	#0,status(a0)
0001C258 0268 7FFF 0002             		and	#$7FFF,2(a0)
0001C25E 6000                       		bra.s	loc_1DE28
0001C260                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C260                            
0001C260                            loc_1DDCC:				; DATA XREF: h+6E30o
0001C260                            ;		cmp.b	#$C,subtype(a2)
0001C260                            ;		bcs.s	loc_1DE3E
0001C260 0C2A 0004 0024             		cmp.b	#4,routine(a2)
0001C266 6400                       		bcc.s	loc_1DE3E
0001C268 4A2A 0039                  		tst.b	$39(a2)
0001C26C 6700                       		beq.s	loc_1DE3E
0001C26E 316A 0008 0008             		move	8(a2),8(a0)
0001C274 316A 000C 000C             		move	$C(a2),$C(a0)
0001C27A 116A 0022 0022             		move.b	status(a2),status(a0)
0001C280 0228 0001 0022             		and.b	#1,status(a0)
0001C286                            ;		tst.b	$34(a0)
0001C286                            ;		beq.s	loc_1DE06
0001C286                            ;		sub	#4,$C(a0)
0001C286                            
0001C286                            ;loc_1DE06:				; CODE XREF: h+6E8Aj
0001C286 4A28 001D                  		tst.b	next_anim(a0)
0001C28A 6600                       		bne.s	loc_1DE28
0001C28C 0268 7FFF 0002             		and	#$7FFF,2(a0)
0001C292 4A6A 0002                  		tst	2(a2)
0001C296 6A00                       		bpl.s	loc_1DE28
0001C298 0068 8000 0002             		or	#-$8000,2(a0)
0001C29E                            
0001C29E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C29E                            
0001C29E                            loc_1DE20:				; DATA XREF: h+6E30o
0001C29E                            loc_1DE28:				; CODE XREF: h+6E42j h+6E56j ...
0001C29E 43F9 0000 0000             		lea	(off_1DF38).l,a1
0001C2A4 4EB9 0001 2624             		jsr	AnimateSprite
0001C2AA 4EB9 0000 0000             		jsr	loc_1DEE4
0001C2B0 4EFA 9996                  		jmp	DisplaySprite
0001C2B4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C2B4                            
0001C2B4                            loc_1DE3E:				; CODE XREF: h+6E5Ej h+6E66j ...
0001C2B4 117C 0000 001C             		move.b	#0,anim(a0)
0001C2BA 4E75                       		rts	
0001C2BC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C2BC                            
0001C2BC                            loc_1DE46:				; DATA XREF: h+6DBAo
0001C2BC 6000 993E                  		bra.w	DeleteObject
0001C2C0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C2C0                            
0001C2C0                            
0001C2C0                            
0001C2C0                            loc_1DE4A:
0001C2C0 3468 003E                  	movea.w	parent(a0),a2
0001C2C4 7210                       	moveq	#$10,d1
0001C2C6 0C2A 000D 001C             	cmp.b	#$D,anim(a2)
0001C2CC 6700                       	beq.s	loc_1DE64
0001C2CE 7206                       	moveq	#$6,d1
0001C2D0 0C2A 0003 0021             	cmp.b	#$3,collision_property(a2)
0001C2D6 6700                       	beq.s	loc_1DE64
0001C2D8 117C 0002 0024             	move.b	#2,routine(a0)
0001C2DE 117C 0000 0032             	move.b	#0,$32(a0)
0001C2E4 4E75                       	rts
0001C2E6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C2E6                            
0001C2E6                            loc_1DE64:				; CODE XREF: h+6EE0j
0001C2E6 5328 0032                  		subq.b	#1,$32(a0)
0001C2EA 6A00                       		bpl.s	loc_1DEE0
0001C2EC 117C 0003 0032             		move.b	#3,$32(a0)
0001C2F2 4EBA A420                  		jsr	SingleObjLoad
0001C2F6 6600                       		bne.s	loc_1DEE0
0001C2F8 1290                       		move.b	0(a0),0(a1)
0001C2FA 336A 0008 0008             		move	8(a2),8(a1)
0001C300 336A 000C 000C             		move	$C(a2),$C(a1)
0001C306                            ;		tst.b	$34(a0)
0001C306                            ;		beq.s	loc_1DE9A
0001C306                            ;		sub	#4,d1
0001C306                            
0001C306                            ;loc_1DE9A:				; CODE XREF: h+6F1Ej
0001C306 D369 000C                  		add	d1,$C(a1)
0001C30A 137C 0000 0022             		move.b	#0,status(a1)
0001C310 137C 0003 001C             		move.b	#3,anim(a1)
0001C316 5429 0024                  		addq.b	#2,routine(a1)
0001C31A 2368 0004 0004             		move.l	4(a0),4(a1)
0001C320 1368 0001 0001             		move.b	1(a0),1(a1)
0001C326 337C 0080 0018             		move.w	#$80,priority(a1)
0001C32C 137C 0004 0023             		move.b	#4,width_pixels(a1)
0001C332 3368 0002 0002             		move	2(a0),2(a1)
0001C338 3368 003E 003E             		move	parent(a0),parent(a1)
0001C33E 0269 7FFF 0002             		and	#$7FFF,2(a1)
0001C344 4A6A 0002                  		tst	2(a2)
0001C348 6A00                       		bpl.s	loc_1DEE0
0001C34A 0069 8000 0002             		or	#-$8000,2(a1)
0001C350                            
0001C350                            loc_1DEE0:				; CODE XREF: h+6EF4j h+6F00j ...
0001C350 6100                       		bsr.s	loc_1DEE4
0001C352 4E75                       		rts	
0001C354                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C354                            
0001C354                            loc_1DEE4:				; CODE XREF: h+6EC0p h+6F6Cp
0001C354 7000                       		moveq	#0,d0
0001C356 1028 001A                  		move.b	mapping_frame(a0),d0
0001C35A B028 0030                  		cmp.b	$30(a0),d0
0001C35E 6700 0000                  		beq.w	locret_1DF36
0001C362                            ;		tst.w	($FFFFD130).w ; has title card sequence finished?
0001C362                            ;		bne.w	locret_1DF36	; if not, branch		
0001C362 1140 0030                  		move.b	d0,$30(a0)
0001C366 45F9 0000 0000             		lea	(off_1E074).l,a2
0001C36C D040                       		add	d0,d0
0001C36E D4F2 0000                  		add	(a2,d0.w),a2
0001C372 3A1A                       		move	(a2)+,d5
0001C374 5345                       		subq	#1,d5
0001C376 6B00 0000                  		bmi.w	locret_1DF36
0001C37A 3828 003C                  		move $3C(a0),d4
0001C37E                            
0001C37E                            loc_1DF0A:				; CODE XREF: h+6FBEj
0001C37E 7200                       		moveq	#0,d1
0001C380 321A                       		move	(a2)+,d1
0001C382 3601                       		move	d1,d3
0001C384 E04B                       		lsr.w	#8,d3
0001C386 0243 00F0                  		and	#$F0,d3	; 'ð'
0001C38A 0643 0010                  		add	#$10,d3
0001C38E 0241 0FFF                  		and	#$FFF,d1
0001C392 EB89                       		lsl.l	#5,d1
0001C394 0681 0000 0000             		add.l	#Art_Dust,d1
0001C39A 3404                       		move	d4,d2
0001C39C D843                       		add	d3,d4
0001C39E D843                       		add	d3,d4
0001C3A0 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
0001C3A6 51CD FFD6                  		dbf	d5,loc_1DF0A
0001C3AA                            
0001C3AA                            locret_1DF36:				; CODE XREF: h+6F7Aj h+6F90j
0001C3AA 4E75                       		rts	
0001C3AC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C3AC 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4o h+6FC4o ...
0001C3AE 0000                       		dc byte_1DF43-off_1DF38; 1
0001C3B0 0000                       		dc byte_1DF4F-off_1DF38; 2
0001C3B2 0000                       		dc byte_1DF58-off_1DF38; 3
0001C3B4 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4o
0001C3B7 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4o
0001C3C3 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4o
0001C3CC 0311 1213 13FC             byte_1DF58:	dc.b   3,$11,$12,$13,$13,$FC; 0	; DATA XREF: h+6FC4o
0001C3D2                            ; -------------------------------------------------------------------------------
0001C3D2                            ; Unknown Sprite Mappings
0001C3D2                            ; -------------------------------------------------------------------------------
0001C3D2                            MapUnc_1DF5E:
0001C3D2 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
0001C3D4 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
0001C3D6 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
0001C3D8 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
0001C3DA 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
0001C3DC 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
0001C3DE 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
0001C3E0 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
0001C3E2 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
0001C3E4 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
0001C3E6 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
0001C3E8 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
0001C3EA 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
0001C3EC 0000                       	dc word_1E004-MapUnc_1DF5E; 13
0001C3EE 0000                       	dc word_1E016-MapUnc_1DF5E; 14
0001C3F0 0000                       	dc word_1E028-MapUnc_1DF5E; 15
0001C3F2 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
0001C3F4 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
0001C3F6 0000                       	dc word_1E056-MapUnc_1DF5E; 18
0001C3F8 0000                       	dc word_1E060-MapUnc_1DF5E; 19
0001C3FA 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
0001C3FC 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
0001C3FE 00                         word_1DF8A:	dc.b 0
0001C3FF 01                         word_1DF8C:	dc.b 1
0001C400 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001C405 01                         word_1DF96:	dc.b 1
0001C406 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001C40B 01                         word_1DFA0:	dc.b 1
0001C40C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001C411 01                         word_1DFAA:	dc.b 1
0001C412 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001C417 01                         word_1DFB4:	dc.b 1
0001C418 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001C41D 01                         word_1DFBE:	dc.b 1
0001C41E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001C423 01                         word_1DFC8:	dc.b 1
0001C424 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001C429 01                         word_1DFD2:	dc.b 1
0001C42A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001C42F 01                         word_1DFDC:	dc.b 1
0001C430 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001C435 01                         word_1DFE6:	dc.b 1
0001C436 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001C43B 01                         word_1DFF0:	dc.b 1
0001C43C 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001C441 01                         word_1DFFA:	dc.b 1
0001C442 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001C447 02                         word_1E004:	dc.b 2
0001C448 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
0001C44D 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001C452 02                         word_1E016:	dc.b 2
0001C453 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
0001C458 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
0001C45D 02                         word_1E028:	dc.b 2
0001C45E F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001C463 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001C468 02                         word_1E03A:	dc.b 2
0001C469 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001C46E 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001C473 01                         word_1E04C:	dc.b 1
0001C474 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
0001C479 01                         word_1E056:	dc.b 1
0001C47A F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
0001C47F 01                         word_1E060:	dc.b 1
0001C480 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001C485 01                         word_1E06A:	dc.b 1
0001C486 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
0001C48B 00                         	dc.b 0
0001C48C 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
0001C48E 0000                       	dc word_1E0A2-off_1E074; 1
0001C490 0000                       	dc word_1E0A6-off_1E074; 2
0001C492 0000                       	dc word_1E0AA-off_1E074; 3
0001C494 0000                       	dc word_1E0AE-off_1E074; 4
0001C496 0000                       	dc word_1E0B2-off_1E074; 5
0001C498 0000                       	dc word_1E0B6-off_1E074; 6
0001C49A 0000                       	dc word_1E0BA-off_1E074; 7
0001C49C 0000                       	dc word_1E0BE-off_1E074; 8
0001C49E 0000                       	dc word_1E0C2-off_1E074; 9
0001C4A0 0000                       	dc word_1E0C6-off_1E074; 10
0001C4A2 0000                       	dc word_1E0CA-off_1E074; 11
0001C4A4 0000                       	dc word_1E0CE-off_1E074; 12
0001C4A6 0000                       	dc word_1E0D2-off_1E074; 13
0001C4A8 0000                       	dc word_1E0D8-off_1E074; 14
0001C4AA 0000                       	dc word_1E0DE-off_1E074; 15
0001C4AC 0000                       	dc word_1E0E4-off_1E074; 16
0001C4AE 0000                       	dc word_1E0EA-off_1E074; 17
0001C4B0 0000                       	dc word_1E0EA-off_1E074; 18
0001C4B2 0000                       	dc word_1E0EA-off_1E074; 19
0001C4B4 0000                       	dc word_1E0EA-off_1E074; 20
0001C4B6 0000                       	dc word_1E0EC-off_1E074; 21
0001C4B8 0000                       word_1E0A0:	dc 0
0001C4BA 0001                       word_1E0A2:	dc 1
0001C4BC 7000                       	dc $7000
0001C4BE 0001                       word_1E0A6:	dc 1
0001C4C0 F008                       	dc $F008
0001C4C2 0001                       word_1E0AA:	dc 1
0001C4C4 F018                       	dc $F018
0001C4C6 0001                       word_1E0AE:	dc 1
0001C4C8 F028                       	dc $F028
0001C4CA 0001                       word_1E0B2:	dc 1
0001C4CC F038                       	dc $F038
0001C4CE 0001                       word_1E0B6:	dc 1
0001C4D0 F048                       	dc $F048
0001C4D2 0001                       word_1E0BA:	dc 1
0001C4D4 7058                       	dc $7058
0001C4D6 0001                       word_1E0BE:	dc 1
0001C4D8 7060                       	dc $7060
0001C4DA 0001                       word_1E0C2:	dc 1
0001C4DC 7068                       	dc $7068
0001C4DE 0001                       word_1E0C6:	dc 1
0001C4E0 7070                       	dc $7070
0001C4E2 0001                       word_1E0CA:	dc 1
0001C4E4 7078                       	dc $7078
0001C4E6 0001                       word_1E0CE:	dc 1
0001C4E8 7080                       	dc $7080
0001C4EA 0002                       word_1E0D2:	dc 2
0001C4EC 1088                       	dc $1088
0001C4EE 708A                       	dc $708A
0001C4F0 0002                       word_1E0D8:	dc 2
0001C4F2 3092                       	dc $3092
0001C4F4 7096                       	dc $7096
0001C4F6 0002                       word_1E0DE:	dc 2
0001C4F8 509E                       	dc $509E
0001C4FA 70A4                       	dc $70A4
0001C4FC 0002                       word_1E0E4:	dc 2
0001C4FE 50AC                       	dc $50AC
0001C500 70B2                       	dc $70B2
0001C502 0000                       word_1E0EA:	dc 0
0001C504 0001                       word_1E0EC:	dc 1
0001C506 F0BA                       	dc $F0BA
0001C508                            	even
0001C508                            
0001C508                            ; ===========================================================================
0001C508                            ; ---------------------------------------------------------------------------
0001C508                            ; Object 01 - Sonic
0001C508                            ; ---------------------------------------------------------------------------
0001C508                            
0001C508                            Obj01:					; XREF: Obj_Index
0001C508 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C50C 6700                       		beq.s	Obj01_Normal	; if not, branch
0001C50E                            ;		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
0001C50E                            ;		beq.s	Obj01_Normal	; if not, branch
0001C50E 0C38 0001 FE09             		cmpi.b	#1,($FFFFFE09).w
0001C514 6700                       		beq.s	loc_10AD8
0001C516 0838 0004 F605             		btst	#4,($FFFFF605).w
0001C51C 6700                       		beq.s	loc_10ABC
0001C51E 31FC 0000 FE08             		move.w	#0,(Debug_placement_mode).w
0001C524                            loc_10ABC:
0001C524 5228 001A                  		addq.b	#1,mapping_frame(a0)
0001C528 4A38 FE19                  		tst.b	($FFFFFE19).w
0001C52C 6700 0000                  		beq.w	AniNormalTest
0001C530 0C28 00D6 001A             		cmpi.b	#$D6,mapping_frame(a0)
0001C536 6500                       		blo.s	loc_10ACE
0001C538 4EF9 0000 0000             		jmp		AniSuperTest
0001C53E                            AniNormalTest:
0001C53E 0C28 00DA 001A             		cmpi.b	#$DA,mapping_frame(a0)
0001C544 6500                       		blo.s	loc_10ACE
0001C546                            AniSuperTest:
0001C546 117C 0000 001A             		move.b	#0,mapping_frame(a0)
0001C54C                            loc_10ACE:
0001C54C 6100 0000                  		bsr.w	LoadSonicDynPLC
0001C550 4EF9 0001 5C48             		jmp	(DisplaySprite).l
0001C556                            ; ---------------------------------------------------------------------------
0001C556                            
0001C556                            loc_10AD8:
0001C556 4EF9 0000 0000             		jmp	(DebugMode).l
0001C55C                            ; ===========================================================================
0001C55C                            
0001C55C                            Obj01_Normal:
0001C55C 7000                       		moveq	#0,d0
0001C55E 1028 0024                  		move.b	routine(a0),d0
0001C562 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001C566 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001C56A                            ; ===========================================================================
0001C56A 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001C56C 0000                       		dc.w Obj01_Control-Obj01_Index
0001C56E 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001C570 0000                       		dc.w Obj01_Death-Obj01_Index
0001C572 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001C574 0000                       		dc.w Sonic_Drowned-Obj01_Index
0001C576                            ; ===========================================================================
0001C576                            
0001C576                            Obj01_Main:				; XREF: Obj01_Index
0001C576 11FC 0000 FFF7             		move.b	#$00,($FFFFFFF7).w			; MJ: set collision to 1st
0001C57C 5428 0024                  		addq.b	#2,routine(a0)
0001C580 117C 0013 0016             		move.b	#$13,y_radius(a0) ; this sets Sonic's collision height (2*pixels)
0001C586 117C 0009 0017             		move.b	#9,x_radius(a0)
0001C58C 217C 0000 0000 0004        		move.l	#Map_Sonic,mappings(a0)
0001C594 317C 0780 0002             		move.w	#$780,art_tile(a0)
0001C59A 317C 0100 0018             		move.w	#$100,priority(a0)
0001C5A0 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001C5A6 117C 0004 0001             		move.b	#4,render_flags(a0)
0001C5AC 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001C5B0 6100 0000                  		bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001C5B4                            
0001C5B4                            Obj01_Control:				; XREF: Obj01_Index
0001C5B4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001C5B8 6700                       		beq.s	loc_contctrl	; if not, branch
0001C5BA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C5C0 6700                       		beq.s	loc_contctrl	; if not, branch
0001C5C2 31FC 0001 FE08                     move.w  #1,(Debug_placement_mode).w     ; change Sonic into a ring/item
0001C5C8 4238 F7CC                          clr.b   (Control_Locked).w              ; unlock control
0001C5CC 0838 0005 F604             		btst	#5,($FFFFF604).w	; was button C held before pressing B?
0001C5D2 6700                       		beq.s	locret_10BEE			; if not, branch
0001C5D4 31FC 0002 FE08             		move.w	#2,(Debug_placement_mode).w	; enter animation cycle mode
0001C5DA                            
0001C5DA                            locret_10BEE:
0001C5DA 4E75                       		rts
0001C5DC                            ; ===========================================================================
0001C5DC                            
0001C5DC 0828 0003 0022             loc_contctrl:	btst    #3,status(a0)			; is Sonic standing on an object?
0001C5E2 6700                       	beq.s	loc_12C58				; if no, branch
0001C5E4 08A8 0007 0022             	bclr	#7,status(a0)			 ; Clear Jump Dash Flag
0001C5EA                            
0001C5EA                            loc_12C58:
0001C5EA 4A38 F7CC                      tst.b   (Control_Locked).w      ; are controls locked?
0001C5EE 6600                           bne.s   loc_12C64     ; if yes, branch
0001C5F0 31F8 F604 F602                 move.w  (Ctrl_1).w,(Ctrl_1_Logical).w
0001C5F6 6000 0000                      bra.w   loc_12C64
0001C5FA                            
0001C5FA                            loc_12C64:
0001C5FA 0838 0000 F7C8             	btst	#0,($FFFFF7C8).w ; are controls	locked?
0001C600 6600                       	bne.s	loc_12C7E	; if yes, branch
0001C602 7000                       	moveq	#0,d0
0001C604 1028 0022                  	move.b	status(a0),d0
0001C608 0240 0006                  	andi.w	#6,d0
0001C60C 323B 0000                  	move.w	Obj01_Modes(pc,d0.w),d1
0001C610 4EBB 1000                  	jsr	Obj01_Modes(pc,d1.w)
0001C614                            
0001C614                            loc_12C7E:
0001C614 0C78 FF00 F72C             	cmpi.w	#-$100,($FFFFF72C).w	; is vertical wrapping enabled?
0001C61A 6600                       	bne.s	@contctrl5				; if not, branch
0001C61C 0268 07FF 000C             	andi.w	#$7FF,y_pos(a0) 		; perform wrapping of Sonic's y position
0001C622                            @contctrl5:
0001C622 6100                       	bsr.s	Sonic_Display
0001C624 6100 0000                  	bsr.w	Sonic_Super
0001C628 6100 0000                  	bsr.w	Sonic_RecordPos
0001C62C 6100 0000                  	bsr.w	Sonic_Water
0001C630 1178 F768 0036             	move.b	($FFFFF768).w,$36(a0)
0001C636 1178 F76A 0037             	move.b	($FFFFF76A).w,$37(a0)
0001C63C 4A38 F7C7                  	tst.b	($FFFFF7C7).w
0001C640 6700                       	beq.s	@contctrl6
0001C642 4A28 001C                  	tst.b	anim(a0)
0001C646 6600                       	bne.s	@contctrl6
0001C648 1168 001D 001C             	move.b	next_anim(a0),anim(a0)
0001C64E                            @contctrl6:
0001C64E 6100 0000                  	bsr.w	Sonic_Animate
0001C652 4A38 F7C8                  	tst.b	($FFFFF7C8).w
0001C656 6B00                       	bmi.s	loc_12CB6
0001C658 4EB9 0000 0000             	jsr	TouchResponse
0001C65E                            
0001C65E                            loc_12CB6:
0001C65E 6100 0000                  	bsr.w	Sonic_Loops
0001C662 6100 0000                  	bsr.w	LoadSonicDynPLC
0001C666 4E75                       	rts	
0001C668                            ; ===========================================================================
0001C668 0000                       Obj01_Modes:	dc.w Obj01_MdNormal_Checks-Obj01_Modes
0001C66A 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001C66C 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001C66E 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001C670                            ; ---------------------------------------------------------------------------
0001C670                            ; Music	to play	after invincibility wears off
0001C670                            ; ---------------------------------------------------------------------------
0001C670                            MusicList2:	incbin	misc\muslist2.bin
0001C678                            		even
0001C678                            ; ===========================================================================
0001C678                            
0001C678                            Sonic_Display:				; XREF: loc_12C7E
0001C678 1028 0030                  		move.b	invulnerable_time(a0),d0
0001C67C 6700                       		beq.s	Obj01_Display_AfterImage
0001C67E 5328 0030                  		subq.b	#1,invulnerable_time(a0)
0001C682 E648                       		lsr.w	#3,d0
0001C684 6400                       		bcc.s	Obj01_ChkInvin
0001C686                            
0001C686                            Obj01_Display_AfterImage:
0001C686 3028 0020                  		move.w	inertia(a0),d0			; get inertia
0001C68A 0828 0007 0022             		btst	#7,$22(a0)		; was jumpdash flag set?
0001C690 6700 0000                  		beq.w	Obj01_AfterImage_ChkStart			; if not, branch
0001C694 3028 0010                  		move.w	x_vel(a0),d0
0001C698                            
0001C698                            Obj01_AfterImage_ChkStart:
0001C698 4A40                       		tst.w	d0					; is inertia greater than 0?
0001C69A 6C00                       		bge.s	Obj01_AfterImage_Start	; if yes, don't negate it
0001C69C 4440                       		neg		d0					; if not, negate it
0001C69E                            
0001C69E                            Obj01_AfterImage_Start:
0001C69E 4A38 FF7F                  		tst.b	($FFFFFF7F).w		; is Sonic using his Homing Attack?
0001C6A2 6600                       		bne.s	Obj01_AfterImage_Start_2	; if yes, display after image
0001C6A4 0C40 0600                  		cmpi.w	#$600,d0		; is the sonic inertia greater than 600?
0001C6A8 6D00                       		blt.s	Obj01_Display	; if not, don't show the After Image
0001C6AA                            Obj01_AfterImage_Start_2:
0001C6AA 4EBA A068                  		jsr	SingleObjLoad	; search a free space in object RAM
0001C6AE 6600                       		bne.s	Obj01_Display	; if not have, don't load the After Image
0001C6B0 12BC 008D                  		move.b  #$8D,0(a1)		; load after-image object
0001C6B4 2368 0004 0004             		move.l	4(a0),4(a1)		; copy Sonic mappings to after-image mappings
0001C6BA                            ;		move.w	8(a0),8(a1)		; copy Sonic x-pos to after-image x-pos
0001C6BA                            ;		move.w	$C(a0),$C(a1)	; copy Sonic y-pos to after-image y-pos
0001C6BA                            
0001C6BA                            Obj01_Display:
0001C6BA 4EBA 958C                  		jsr	DisplaySprite
0001C6BE                            
0001C6BE                            Obj01_ChkInvin:
0001C6BE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001C6C2 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch
0001C6C6 4A28 0032                  		tst.b	invincibility_time(a0)		; check	time remaining for invinciblity
0001C6CA 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
0001C6CC 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001C6D0 0200 0007                  		andi.b	#7,d0
0001C6D4 6600                       		bne.s	Obj01_ChkShoes
0001C6D6 5328 0032                  		subq.b	#1,invincibility_time(a0)
0001C6DA 6600                       		bne.s	Obj01_ChkShoes
0001C6DC 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001C6E0 6600                       		bne.s	Obj01_RmvInvin
0001C6E2 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001C6E8 6500                       		bcs.s	Obj01_RmvInvin
0001C6EA 4238 FF88                  		clr.b	($FFFFFF88).w
0001C6EE                            ;		tst.b	($FFFFFE2C).w		; is sonic super?
0001C6EE                            ;		beq.w	Obj01_ChkInvin_2		; if yes, branch
0001C6EE                            ;		moveq	#$28,d0
0001C6EE                            ;		jsr	(LoadPLC).l	; load Super Sonic's stars patterns
0001C6EE                            ;Obj01_ChkInvin_2:
0001C6EE 3038 FF90                  		move.w	(Level_Music).w,d0
0001C6F2 4EB9 0000 0000             		jsr	(PlayMusic).l
0001C6F8                            
0001C6F8                            Obj01_RmvInvin:
0001C6F8 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001C6FE                            
0001C6FE                            Obj01_ChkShoes:
0001C6FE 4A38 FE2E                  		tst.b	($FFFFFE2E).w		; does Sonic have speed	shoes?
0001C702 6700                       		beq.s	Obj01_ExitChk		; if not, branch
0001C704 4A28 0034                  		tst.b	speedshoes_time(a0)				; check	time remaining
0001C708 6700                       		beq.s	Obj01_ExitChk
0001C70A 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001C70E 0200 0007                  		andi.b	#7,d0
0001C712 6600                       		bne.s	Obj01_ExitChk
0001C714 5328 0034                  		subq.b	#1,speedshoes_time(a0)
0001C718 6600                       		bne.s	Obj01_ExitChk
0001C71A 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001C71E 6100 0000                  		bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001C722                            		
0001C722                            Obj01_ChkShoesCont:		
0001C722 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w	; cancel speed	shoes
0001C728 303C 0000                  		move.w	#$0,d0
0001C72C 4EF9 0000 329E             		jmp	(SetTempo).l	; run music at normal speed
0001C732                            ; ===========================================================================
0001C732                            
0001C732                            Obj01_ExitChk:
0001C732 4E75                       		rts	
0001C734                            
0001C734                            ; ---------------------------------------------------------------------------
0001C734                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001C734                            ; ---------------------------------------------------------------------------
0001C734                            
0001C734                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C734                            
0001C734                            
0001C734                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
0001C734 3038 F7A8                  	move.w	(Sonic_Pos_Record_Index).w,d0
0001C738 43F8 CB00                  	lea	(Sonic_Pos_Record_Buf).w,a1
0001C73C 43F1 0000                  	lea	(a1,d0.w),a1
0001C740 32E8 0008                  	move.w	x_pos(a0),(a1)+
0001C744 32E8 000C                  	move.w	y_pos(a0),(a1)+
0001C748 5838 F7A9                  	addq.b	#4,(Sonic_Pos_Record_Index+1).w
0001C74C                            
0001C74C 43F8 CA00                  	lea	(Sonic_Stat_Record_Buf).w,a1
0001C750 43F1 0000                  	lea	(a1,d0.w),a1
0001C754 32F8 F602                  	move.w	(Ctrl_1_Logical).w,(a1)+
0001C758 32E8 0022                  	move.w	status(a0),(a1)+
0001C75C                            
0001C75C 4E75                       	rts	
0001C75E                            ; End of function Sonic_RecordPos
0001C75E                            
0001C75E                            ; ---------------------------------------------------------------------------
0001C75E                            ; Subroutine for Sonic when he's underwater
0001C75E                            ; ---------------------------------------------------------------------------
0001C75E                            
0001C75E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C75E                            
0001C75E                            
0001C75E                            Sonic_Water:				; XREF: loc_12C7E
0001C75E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001C764 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001C766                            
0001C766                            locret_12D80:
0001C766 4E75                       		rts	
0001C768                            ; ===========================================================================
0001C768                            
0001C768                            Obj01_InWater:
0001C768 3038 F646                  		move.w	($FFFFF646).w,d0
0001C76C B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001C770 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001C772 08E8 0006 0022             		bset	#6,$22(a0)
0001C778 66EC                       		bne.s	locret_12D80
0001C77A 6100 0000                  		bsr.w	ResumeMusic
0001C77E 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001C784 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001C78A 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001C78E 6100 0000                  		bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001C792 E0E8 0010                  		asr	$10(a0)
0001C796 E0E8 0012                  		asr	$12(a0)
0001C79A E0E8 0012                  		asr	$12(a0)
0001C79E 67C6                       		beq.s	locret_12D80
0001C7A0 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001C7A6 303C 0039                  		move.w	#$39,d0
0001C7AA 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play splash sound
0001C7B0                            ; ===========================================================================
0001C7B0                            
0001C7B0                            Obj01_OutWater:
0001C7B0 08A8 0006 0022             		bclr	#6,$22(a0)
0001C7B6 67AE                       		beq.s	locret_12D80
0001C7B8 6100 0000                  		bsr.w	ResumeMusic
0001C7BC 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001C7C0 6100 0000                  		bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001C7C4 E1E8 0012                  		asl	$12(a0)
0001C7C8 6700 FF9C                  		beq.w	locret_12D80
0001C7CC 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001C7D2 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001C7D8 6E00                       		bgt.s	loc_12E0E
0001C7DA 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001C7E0                            
0001C7E0                            loc_12E0E:
0001C7E0 303C 0039                  		move.w	#$39,d0
0001C7E4 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play splash sound
0001C7EA                            ; End of function Sonic_Water
0001C7EA                            
0001C7EA                            ; ===========================================================================
0001C7EA                            ; ---------------------------------------------------------------------------
0001C7EA                            ; Start of subroutine Obj01_MdNormal (Ported from Sonic 2)
0001C7EA                            ; Called if Sonic is neither airborne nor rolling this frame
0001C7EA                            ; ---------------------------------------------------------------------------
0001C7EA                            ; loc_1A26E:
0001C7EA                            Obj01_MdNormal_Checks:
0001C7EA 1038 F603                      move.b  (Ctrl_1_Press_Logical).w,d0
0001C7EE 0200 0070                  	andi.b  #button_B_mask|button_C_mask|button_A_mask,d0
0001C7F2 6600                       	bne.s   Obj01_MdNormal
0001C7F4 0C28 000A 001C             	cmpi.b  #$A,anim(a0)
0001C7FA 6700                       	beq.s   return_1A2DE
0001C7FC 0C28 000A 001C             	cmpi.b  #$A,anim(a0)
0001C802 6700                       	beq.s   return_1A2DE
0001C804 0C28 0005 001C             	cmpi.b  #5,anim(a0)
0001C80A 6600                       	bne.s   Obj01_MdNormal
0001C80C 0C28 001E 001B             	cmpi.b  #$1E,anim_frame(a0)
0001C812 6500                       	blo.s   Obj01_MdNormal
0001C814 1038 F602                  	move.b  (Ctrl_1_Held_Logical).w,d0
0001C818 0200 007F                  	andi.b  #button_up_mask|button_down_mask|button_left_mask|button_right_mask|button_B_mask|button_C_mask|button_A_mask,d0
0001C81C 6700                       	beq.s	return_1A2DE
0001C81E 117C 000B 001C             	move.b	#$B,anim(a0)
0001C824 0C28 00AC 001B             	cmpi.b	#$AC,anim_frame(a0)
0001C82A 6500                       	blo.s   return_1A2DE
0001C82C 117C 000B 001C             	move.b	#$B,anim(a0)
0001C832 6000                       	bra.s	return_1A2DE
0001C834                            ; ---------------------------------------------------------------------------
0001C834                            ; Modes	for controlling	Sonic
0001C834                            ; ---------------------------------------------------------------------------
0001C834                            
0001C834                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001C834 4EB9 0000 0000             		jsr	Sonic_SpinDash
0001C83A 4EB9 0000 0000             		jsr	Sonic_Jump
0001C840 4EB9 0000 0000             		jsr	Sonic_SlopeResist
0001C846 4EB9 0000 0000             		jsr	Sonic_Move
0001C84C 4EB9 0000 0000             		jsr	Sonic_Roll
0001C852 4EB9 0000 0000             		jsr	Sonic_LevelBound
0001C858 4EBA 9388                  		jsr	SpeedToPos
0001C85C 4EB9 0000 0000             		jsr	Sonic_AnglePos
0001C862 4EB9 0000 0000             		jsr	Sonic_SlopeRepel
0001C868                            
0001C868                            return_1A2DE:
0001C868 4E75                               rts
0001C86A                            ; End of subroutine Obj01_MdNormal
0001C86A                            ; ===========================================================================
0001C86A                            ;Obj01_MdAir:
0001C86A                            Obj01_MdJump:				; XREF: Obj01_Modes
0001C86A 4228 0039                  		clr.b	$39(a0)
0001C86E 4EB9 0000 0000             		jsr	Sonic_JumpHeight
0001C874 4EB9 0000 0000             		jsr	Sonic_ChgJumpDir
0001C87A 4EB9 0000 0000             		jsr	Sonic_LevelBound
0001C880 4EBA 9340                  		jsr	ObjectFall
0001C884 0828 0006 0022             		btst	#6,status(a0)
0001C88A 6700                       		beq.s	loc_12E5C
0001C88C 0468 0028 0012             		subi.w	#$28,y_vel(a0)
0001C892                            
0001C892                            loc_12E5C:
0001C892 4EB9 0000 0000             		jsr	Sonic_JumpAngle
0001C898 4EB9 0000 0000             		jsr	Sonic_Floor
0001C89E 4E75                       		rts	
0001C8A0                            ; ===========================================================================
0001C8A0                            
0001C8A0                            Obj01_MdRoll:				; XREF: Obj01_Modes
0001C8A0 4EB9 0000 0000             		jsr	Sonic_Jump
0001C8A6 4EB9 0000 0000             		jsr	Sonic_RollRepel
0001C8AC 4EB9 0000 0000             		jsr	Sonic_RollSpeed
0001C8B2 4EB9 0000 0000             		jsr	Sonic_LevelBound
0001C8B8 4EBA 9328                  		jsr	SpeedToPos
0001C8BC 4EB9 0000 0000             		jsr	Sonic_AnglePos
0001C8C2 4EB9 0000 0000             		jsr	Sonic_SlopeRepel
0001C8C8 4E75                       		rts	
0001C8CA                            ; ===========================================================================
0001C8CA                            
0001C8CA                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001C8CA 4228 0039                  		clr.b	$39(a0)
0001C8CE 0C28 0002 001C             		cmpi.b	#2,anim(a0)    		; is Sonic rolling?
0001C8D4 6600 0000                  		bne.w	Obj01_MdJump3		; if not skip the 2 lines below
0001C8D8 4EB9 0000 0000             		jsr	Sonic_JumpDash	; JumpDash Code: Thanks to Selbi
0001C8DE 4EB9 0000 0000             		jsr	Sonic_Homingattack
0001C8E4                            Obj01_MdJump3:		
0001C8E4 4EB9 0000 0000             		jsr	Sonic_JumpHeight
0001C8EA 4EB9 0000 0000             		jsr	Sonic_ChgJumpDir
0001C8F0 4EB9 0000 0000             		jsr	Sonic_LevelBound
0001C8F6 4EBA 92CA                  		jsr	ObjectFall
0001C8FA 0828 0006 0022             		btst	#6,status(a0)
0001C900 6700                       		beq.s	loc_12EA6
0001C902 0468 0028 0012             		subi.w	#$28,y_vel(a0)
0001C908 3028 0010                  		move.w	x_vel(a0),d0		; move Sonic's X-velocity to d0
0001C90C 4A40                       		tst.w	d0			; is his speed positive? (is he running to the right?)
0001C90E 6A00                       		bpl.s	Obj01_MdJump2_Abs	; if yes, branch
0001C910 4440                       		neg.w	d0			; otherwise negate it
0001C912                            		
0001C912                            Obj01_MdJump2_Abs:
0001C912 0C40 0250                  		cmpi.w	#$250,d0		; if Sonic speed less than $250?
0001C916 6D00                       		blt.s	loc_12EA6		; if yes, branch
0001C918 3028 000C                  		move.w	$C(a0),d0		; move sonic's Y-position to d0
0001C91C 9078 F646                  		sub.w	($FFFFF646).w,d0	; sub the water height from it
0001C920 0C40 000F                  		cmpi.w	#$F,d0			; is Sonic slightly in the water?
0001C924 6E00                       		bgt.s	loc_12EA6		; if not, branch
0001C926 0468 0090 0012             		subi.w	#$90,y_vel(a0)		; jump out of water
0001C92C                            
0001C92C                            loc_12EA6:
0001C92C 4EB9 0000 0000             		jsr	Sonic_JumpAngle
0001C932 4EB9 0000 0000             		jsr	Sonic_Floor
0001C938 4E75                       		rts	
0001C93A                            ; ---------------------------------------------------------------------------
0001C93A                            ; Subroutine to	make Sonic walk/run
0001C93A                            ; ---------------------------------------------------------------------------
0001C93A                            
0001C93A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C93A                            
0001C93A                            
0001C93A                            Sonic_Move:				; XREF: Obj01_MdNormal
0001C93A 3C38 F760                  		move.w	($FFFFF760).w,d6
0001C93E 3A38 F762                  		move.w	($FFFFF762).w,d5
0001C942 3838 F764                  		move.w	($FFFFF764).w,d4
0001C946 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001C94A 6600 0000                  		bne.w	loc_12FEE
0001C94E 4A68 003E                  		tst.w	parent(a0)
0001C952 6600 0000                  		bne.w	Obj01_ResetScr
0001C956 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C95C 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001C95E 4EB9 0000 0000             		jsr	Sonic_MoveLeft
0001C964                            
0001C964                            Obj01_NotLeft:
0001C964 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C96A 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001C96C 4EB9 0000 0000             		jsr	Sonic_MoveRight
0001C972                            
0001C972                            Obj01_NotRight:
0001C972 1028 0026                  	move.b	angle(a0),d0
0001C976 0600 0020                  	addi.b	#$20,d0
0001C97A 0200 00C0                  	andi.b	#$C0,d0		; is Sonic on a slope?
0001C97E 6600 0000                  	bne.w	Obj01_ResetScr	; if yes, branch
0001C982 4A68 0020                  	tst.w	inertia(a0)	; is Sonic moving?
0001C986 6600 0000                  	bne.w	Obj01_ResetScr	; if yes, branch
0001C98A 08A8 0005 0022             	bclr	#5,status(a0)
0001C990 117C 0005 001C             	move.b	#5,anim(a0)	; use "standing" animation
0001C996 0828 0003 0022             	btst	#3,status(a0)
0001C99C 6700 0000                  	beq.w	Sonic_Balance
0001C9A0 7000                       	moveq	#0,d0
0001C9A2 1028 003D                  	move.b	interact(a0),d0
0001C9A6 ED48                       	lsl.w	#6,d0
0001C9A8 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
0001C9AC 43F1 0000                  	lea	(a1,d0.w),a1 ; a1=object
0001C9B0 4A29 0022                  	tst.b	status(a1)
0001C9B4 6B00 0000                  	bmi.w	Sonic_Lookup
0001C9B8 7200                       	moveq	#0,d1
0001C9BA 1229 0023                  	move.b	width_pixels(a1),d1
0001C9BE 3401                       	move.w	d1,d2
0001C9C0 D442                       	add.w	d2,d2
0001C9C2 5542                       	subq.w	#2,d2
0001C9C4 D268 0008                  	add.w	x_pos(a0),d1
0001C9C8 9269 0008                  	sub.w	x_pos(a1),d1
0001C9CC 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
0001C9D0 6600 0000                  	bne.w	SuperSonic_Balance
0001C9D4 0C41 0002                  	cmpi.w	#2,d1
0001C9D8 6D00                       	blt.s	Sonic_BalanceOnObjLeft
0001C9DA B242                       	cmp.w	d2,d1
0001C9DC 6C00                       	bge.s	Sonic_BalanceOnObjRight
0001C9DE 6000 0000                  	bra.w	Sonic_Lookup
0001C9E2                            ; ---------------------------------------------------------------------------
0001C9E2                            ; loc_1A3FE:
0001C9E2                            SuperSonic_Balance:
0001C9E2 0C41 0002                  		cmpi.w	#2,d1
0001C9E6 6D00 0000                  		blt.w	SuperSonic_BalanceOnObjLeft
0001C9EA B242                       		cmp.w	d2,d1
0001C9EC 6C00 0000                  		bge.w	SuperSonic_BalanceOnObjRight
0001C9F0 6000 0000                  		bra.w	Sonic_Lookup
0001C9F4                            ; ---------------------------------------------------------------------------
0001C9F4                            ; balancing checks for when you're on the right edge of an object
0001C9F4                            ; loc_1A410:
0001C9F4                            Sonic_BalanceOnObjRight:
0001C9F4 0828 0000 0022             		btst	#0,status(a0)
0001C9FA 6600                       		bne.s	@loc1
0001C9FC 117C 0006 001C             		move.b	#6,anim(a0)
0001CA02 5C42                       		addq.w	#6,d2
0001CA04 B242                       		cmp.w	d2,d1
0001CA06 6D00 0000                  		blt.w	Obj01_ResetScr
0001CA0A 117C 000C 001C             		move.b	#$C,anim(a0)
0001CA10 6000 0000                  		bra.w	Obj01_ResetScr
0001CA14                                ; on right edge of object but facing left:
0001CA14 08A8 0000 0022             @loc1:	bclr	#0,status(a0)
0001CA1A 117C 0006 001C             		move.b	#6,anim(a0)
0001CA20 5C42                       		addq.w	#6,d2
0001CA22 B242                       		cmp.w	d2,d1
0001CA24 6D00 0000                  		blt.w	Obj01_ResetScr
0001CA28 117C 000C 001C             		move.b	#$C,anim(a0)
0001CA2E 6000 0000                  		bra.w	Obj01_ResetScr
0001CA32                            ; ---------------------------------------------------------------------------
0001CA32                            ; balancing checks for when you're on the left edge of an object
0001CA32                            ; loc_1A44E:
0001CA32                            Sonic_BalanceOnObjLeft:
0001CA32 0828 0000 0022             		btst	#0,status(a0)
0001CA38 6700                       		beq.s	@loc2
0001CA3A 117C 0006 001C             		move.b	#6,anim(a0)
0001CA40 0C41 FFFC                  		cmpi.w	#-4,d1
0001CA44 6C00 0000                  		bge.w	Obj01_ResetScr
0001CA48 117C 000C 001C             		move.b	#$C,anim(a0)
0001CA4E 6000 0000                  		bra.w	Obj01_ResetScr
0001CA52                                ; on left edge of object but facing right:
0001CA52 08E8 0000 0022             @loc2:	bset	#0,status(a0)
0001CA58 117C 0006 001C             		move.b	#6,anim(a0)
0001CA5E 0C41 FFFC                  		cmpi.w	#-4,d1
0001CA62 6C00 0000                  		bge.w	Obj01_ResetScr
0001CA66 117C 000C 001C             		move.b	#$C,anim(a0)
0001CA6C 6000 0000                  		bra.w	Obj01_ResetScr
0001CA70                            ; ---------------------------------------------------------------------------
0001CA70                            ; balancing checks for when you're on the edge of part of the level
0001CA70                            ; loc_1A48C:
0001CA70                            Sonic_Balance:
0001CA70 3628 0008                  		move.w	x_pos(a0),d3
0001CA74 4EB9 0000 0000             		jsr	ObjHitFloor
0001CA7A 0C41 000C                  		cmpi.w	#$C,d1
0001CA7E 6D00 0000                  		blt.w	Sonic_Lookup
0001CA82 4A38 FE19                  		tst.b	(Super_Sonic_Flag).w
0001CA86 6600 0000                  		bne.w	SuperSonic_Balance2
0001CA8A 0C28 0003 0036             		cmpi.b	#3,next_tilt(a0)
0001CA90 6600                       		bne.s	Sonic_BalanceLeft
0001CA92 0828 0000 0022             		btst	#0,status(a0)
0001CA98 6600                       		bne.s	@loc3
0001CA9A 117C 0006 001C             		move.b	#6,anim(a0)
0001CAA0 3628 0008                  		move.w	x_pos(a0),d3
0001CAA4 5D43                       		subq.w	#6,d3
0001CAA6 4EB9 0000 0000             		jsr	ObjHitFloor2
0001CAAC 0C41 000C                  		cmpi.w	#$C,d1
0001CAB0 6D00 0000                  		blt.w	Obj01_ResetScr
0001CAB4 117C 000C 001C             		move.b	#$C,anim(a0)
0001CABA 6000 0000                  		bra.w	Obj01_ResetScr
0001CABE                                ; on right edge but facing left:
0001CABE 08A8 0000 0022             @loc3:	bclr	#0,status(a0)
0001CAC4 117C 0006 001C             		move.b	#6,anim(a0)
0001CACA 3628 0008                  		move.w	x_pos(a0),d3
0001CACE 5D43                       		subq.w	#6,d3
0001CAD0 4EB9 0000 0000             		jsr	ObjHitFloor2
0001CAD6 0C41 000C                  		cmpi.w	#$C,d1
0001CADA 6D00 0000                  		blt.w	Obj01_ResetScr
0001CADE 117C 000C 001C             		move.b	#$C,anim(a0)
0001CAE4 6000 0000                  		bra.w	Obj01_ResetScr
0001CAE8                            ; ---------------------------------------------------------------------------
0001CAE8                            
0001CAE8                            Sonic_BalanceLeft:
0001CAE8 0C28 0003 0037             		cmpi.b	#3,tilt(a0)
0001CAEE 6600                       		bne.s	Sonic_Lookup
0001CAF0 0828 0000 0022             		btst	#0,status(a0)
0001CAF6 6700                       		beq.s	@loc4
0001CAF8 117C 0006 001C             		move.b	#6,anim(a0)
0001CAFE 3628 0008                  		move.w	x_pos(a0),d3
0001CB02 5C43                       		addq.w	#6,d3
0001CB04 4EB9 0000 0000             		jsr	ObjHitFloor2
0001CB0A 0C41 000C                  		cmpi.w	#$C,d1
0001CB0E 6D00 0000                  		blt.w	Obj01_ResetScr
0001CB12 117C 000C 001C             		move.b	#$C,anim(a0)
0001CB18 6000 0000                  		bra.w	Obj01_ResetScr
0001CB1C                                ; on left edge but facing right:
0001CB1C 08E8 0000 0022             @loc4:	bset	#0,status(a0)
0001CB22 117C 0006 001C             		move.b	#6,anim(a0)
0001CB28 3628 0008                  		move.w	x_pos(a0),d3
0001CB2C 5C43                       		addq.w	#6,d3
0001CB2E 4EB9 0000 0000             		jsr	ObjHitFloor2
0001CB34 0C41 000C                  		cmpi.w	#$C,d1
0001CB38 6D00 0000                  		blt.w	Obj01_ResetScr
0001CB3C 117C 000C 001C             		move.b	#$C,anim(a0)
0001CB42 6000 0000                  		bra.w	Obj01_ResetScr
0001CB46                            ; ---------------------------------------------------------------------------
0001CB46                            ; loc_1A55E:
0001CB46                            SuperSonic_Balance2:
0001CB46 0C28 0003 0036             		cmpi.b  #3,next_tilt(a0)
0001CB4C 6600                       		bne.s   loc_1A56E
0001CB4E                            
0001CB4E                            ; loc_1A566:
0001CB4E                            SuperSonic_BalanceOnObjRight:
0001CB4E 08A8 0000 0022             		bclr    #0,status(a0)
0001CB54 6000                       		bra.s   loc_1A57C
0001CB56                            ; ---------------------------------------------------------------------------
0001CB56                            loc_1A56E:
0001CB56 0C28 0003 0037             		cmpi.b  #3,tilt(a0)
0001CB5C 6600                       		bne.s   Sonic_Lookup
0001CB5E                            
0001CB5E                            ; loc_1A576:
0001CB5E                            SuperSonic_BalanceOnObjLeft:
0001CB5E 08E8 0000 0022             		bset    #0,status(a0)
0001CB64                            
0001CB64                            loc_1A57C:
0001CB64 117C 0006 001C             		move.b  #6,anim(a0)
0001CB6A 6000                       		bra.s   Obj01_ResetScr
0001CB6C                            ; ---------------------------------------------------------------------------
0001CB6C                            
0001CB6C                            Sonic_LookUp:
0001CB6C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001CB72 6700                       		beq.s	Sonic_Duck	; if not, branch
0001CB74 117C 0007 001C             		move.b	#7,anim(a0)	; use "looking up" animation
0001CB7A 5238 C903                  		addq.b	#1,($FFFFC903).w
0001CB7E 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
0001CB84 6500 0000                  		bcs.w	Obj01_ResetScr_Part2
0001CB88 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
0001CB8E 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001CB94 6700 0000                  		beq.w	loc_12FC2
0001CB98 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001CB9C 6000 0000                  		bra.w	loc_12FC2
0001CBA0                            ; ===========================================================================
0001CBA0                             
0001CBA0                            Sonic_Duck:
0001CBA0 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001CBA6 6700                       		beq.s	Obj01_ResetScr	; if not, branch
0001CBA8 117C 0008 001C             		move.b	#8,anim(a0)	; use "ducking"	animation
0001CBAE 5238 C903                  		addq.b	#1,($FFFFC903).w
0001CBB2 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
0001CBB8 6500                       		bcs.s	Obj01_ResetScr_Part2
0001CBBA 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
0001CBC0 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
0001CBC6 6700                       		beq.s	loc_12FC2
0001CBC8 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001CBCC 6000                       		bra.s	loc_12FC2		
0001CBCE                            ; ===========================================================================
0001CBCE                            ; moves the screen back to its normal position after looking up or down
0001CBCE                             
0001CBCE                            Obj01_ResetScr:
0001CBCE 11FC 0000 C903             		move.b	#0,($FFFFC903).w
0001CBD4                             
0001CBD4                            Obj01_ResetScr_Part2:
0001CBD4 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001CBDA 6700                       		beq.s	loc_12FC2	; if yes, branch
0001CBDC 6400                       		bcc.s	loc_12FBE
0001CBDE 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001CBE2                             
0001CBE2                            loc_12FBE:
0001CBE2 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001CBE6                            
0001CBE6                            ; ---------------------------------------------------------------------------
0001CBE6                            ; updates Sonic's speed on the ground
0001CBE6                            ; ---------------------------------------------------------------------------
0001CBE6                            		
0001CBE6                            loc_12FC2:
0001CBE6 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001CBEA 6700 0000                  		beq.w	@cont
0001CBEE 3A3C 000C                  		move.w	#$C,d5
0001CBF2                            @cont:
0001CBF2 1038 F602                  		move.b	($FFFFF602).w,d0
0001CBF6 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
0001CBFA 6600                       		bne.s	loc_12FEE	; if yes, branch
0001CBFC 3028 0020                  		move.w	inertia(a0),d0
0001CC00 6700                       		beq.s	loc_12FEE
0001CC02 6B00                       		bmi.s	loc_12FE2
0001CC04 9045                       		sub.w	d5,d0
0001CC06 6400                       		bcc.s	loc_12FDC
0001CC08 303C 0000                  		move.w	#0,d0
0001CC0C                            
0001CC0C                            loc_12FDC:
0001CC0C 3140 0020                  		move.w	d0,inertia(a0)
0001CC10 6000                       		bra.s	loc_12FEE
0001CC12                            ; ===========================================================================
0001CC12                            
0001CC12                            loc_12FE2:
0001CC12 D045                       		add.w	d5,d0
0001CC14 6400                       		bcc.s	loc_12FEA
0001CC16 303C 0000                  		move.w	#0,d0
0001CC1A                            
0001CC1A                            loc_12FEA:
0001CC1A 3140 0020                  		move.w	d0,inertia(a0)
0001CC1E                            
0001CC1E                            loc_12FEE:
0001CC1E 1028 0026                  		move.b	$26(a0),d0
0001CC22 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001CC28 C3E8 0020                  		muls.w	inertia(a0),d1
0001CC2C E081                       		asr.l	#8,d1
0001CC2E 3141 0010                  		move.w	d1,x_vel(a0)
0001CC32 C1E8 0020                  		muls.w	inertia(a0),d0
0001CC36 E080                       		asr.l	#8,d0
0001CC38 3140 0012                  		move.w	d0,y_vel(a0)
0001CC3C                            
0001CC3C                            loc_1300C:
0001CC3C 1028 0026                  		move.b	$26(a0),d0
0001CC40 0600 0040                  		addi.b	#$40,d0
0001CC44 6B00                       		bmi.s	locret_1307C
0001CC46 123C 0040                  		move.b	#$40,d1
0001CC4A 4A68 0020                  		tst.w	inertia(a0)
0001CC4E 6700                       		beq.s	locret_1307C
0001CC50 6B00                       		bmi.s	loc_13024
0001CC52 4441                       		neg.w	d1
0001CC54                            
0001CC54                            loc_13024:
0001CC54 1028 0026                          move.b    $26(a0),d0
0001CC58 D001                               add.b    d1,d0
0001CC5A 3F00                               move.w    d0,-(sp)
0001CC5C 4EB9 0000 0000                     jsr    Sonic_WalkSpeed
0001CC62 301F                               move.w    (sp)+,d0
0001CC64 4A41                               tst.w    d1
0001CC66 6A00                               bpl.s    locret_1307C
0001CC68 E141                               asl.w    #8,d1
0001CC6A 0600 0020                          addi.b    #$20,d0
0001CC6E 0200 00C0                          andi.b    #$C0,d0
0001CC72 6700                               beq.s    loc_13078
0001CC74 0C00 0040                          cmpi.b    #$40,d0
0001CC78 6700                               beq.s    loc_13066
0001CC7A 0C00 0080                          cmpi.b    #$80,d0
0001CC7E 6700                               beq.s    loc_13060
0001CC80 0C68 0600 0010                     cmpi.w    #$600,x_vel(a0)
0001CC86                                  ;  bge.s    Sonic_WallRecoil
0001CC86 D368 0010                          add.w    d1,x_vel(a0)
0001CC8A 08E8 0005 0022                     bset    #5,status(a0)
0001CC90 317C 0000 0020                     move.w    #0,inertia(a0)
0001CC96 4E75                               rts
0001CC98                            ; ===========================================================================
0001CC98                            
0001CC98                            loc_13060:
0001CC98 9368 0012                          sub.w    d1,y_vel(a0)
0001CC9C 4E75                               rts    
0001CC9E                            ; ===========================================================================
0001CC9E                            
0001CC9E                            loc_13066:
0001CC9E 9368 0010                          sub.w    d1,x_vel(a0)
0001CCA2 08E8 0005 0022                     bset    #5,status(a0)
0001CCA8 317C 0000 0020                     move.w    #0,inertia(a0)
0001CCAE 4E75                               rts    
0001CCB0                            ; ===========================================================================
0001CCB0                            
0001CCB0                            loc_13078:
0001CCB0 D368 0012                          add.w    d1,y_vel(a0)
0001CCB4                            
0001CCB4                            locret_1307C:
0001CCB4 4E75                               rts    
0001CCB6                            ; -------------------
0001CCB6                            
0001CCB6                            Sonic_WallRecoil:        ; CODE XREF: Sonic_Move+180j
0001CCB6 4E75                               rts
0001CCB8                            
0001CCB8                            Sonic_WallRecoil_Right:        ; CODE XREF: Sonic_Move+1D2j
0001CCB8 4E75                               rts
0001CCBA                            ; End of function Sonic_Move
0001CCBA                            
0001CCBA                            
0001CCBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCBA                            
0001CCBA                            
0001CCBA                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
0001CCBA 3028 0020                  		move.w	inertia(a0),d0
0001CCBE 6700                       		beq.s	loc_13086
0001CCC0 6A00                       		bpl.s	loc_130B2
0001CCC2                             
0001CCC2                            loc_13086:
0001CCC2 08E8 0000 0022             		bset	#0,status(a0)
0001CCC8 6600                       		bne.s	loc_1309A
0001CCCA 08A8 0005 0022             		bclr	#5,status(a0)
0001CCD0 117C 0001 001D             		move.b	#1,next_anim(a0)
0001CCD6                             
0001CCD6                            loc_1309A:
0001CCD6 9045                       		sub.w	d5,d0
0001CCD8 3206                       		move.w	d6,d1
0001CCDA 4441                       		neg.w	d1
0001CCDC B041                       		cmp.w	d1,d0
0001CCDE 6E00                       		bgt.s	loc_130A6
0001CCE0 D045                       		add.w	d5,d0
0001CCE2 B041                       		cmp.w	d1,d0
0001CCE4 6F00                       		ble.s	loc_130A6
0001CCE6 3001                       		move.w	d1,d0
0001CCE8                             
0001CCE8                            loc_130A6:
0001CCE8 3140 0020                  		move.w	d0,inertia(a0)
0001CCEC 117C 0000 001C             		move.b	#0,anim(a0); use walking animation
0001CCF2 4E75                       		rts
0001CCF4                            ; ===========================================================================
0001CCF4                            
0001CCF4                            loc_130B2:				; XREF: Sonic_MoveLeft
0001CCF4 9044                       		sub.w	d4,d0
0001CCF6 6400                       		bcc.s	loc_130BA
0001CCF8 303C FF80                  		move.w	#-$80,d0
0001CCFC                            
0001CCFC                            loc_130BA:
0001CCFC 3140 0020                  		move.w	d0,inertia(a0)
0001CD00 1028 0026                  		move.b	$26(a0),d0
0001CD04 0600 0020                  		addi.b	#$20,d0
0001CD08 0200 00C0                  		andi.b	#$C0,d0
0001CD0C 6600                       		bne.s	locret_130E8
0001CD0E 0C40 0400                  		cmpi.w	#$400,d0
0001CD12 6D00                       		blt.s	locret_130E8
0001CD14 117C 000D 001C             		move.b	#$D,anim(a0)	; use "stopping" animation
0001CD1A 08A8 0000 0022             		bclr	#0,status(a0)
0001CD20 303C 0036                  		move.w	#$36,d0
0001CD24 4EB9 0000 3212             		jsr	(PlaySound).l ;	play stopping sound
0001CD2A                            ;		tst.b	($FFFFFE1E).w
0001CD2A                            ;		beq.w	locret_130E8
0001CD2A                            ;		tst.w	($FFFFF63A).w	; is the game paused?
0001CD2A                            ;		bne.s	locret_130E8	; if yes, branch
0001CD2A                            ;		move.b	#6,($FFFFD1C0+routine).w	; ??? $D11C only seems
0001CD2A                            ;		move.b	#$15,($FFFFD1C0+mapping_frame).w
0001CD2A                            locret_130E8:
0001CD2A 4E75                       		rts	
0001CD2C                            ; End of function Sonic_MoveLeft
0001CD2C                            
0001CD2C                            
0001CD2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD2C                            
0001CD2C                            
0001CD2C                            Sonic_MoveRight:	   ; XREF: Sonic_Move
0001CD2C 3028 0020                  		move.w	inertia(a0),d0
0001CD30 6B00                       		bmi.s	loc_13118
0001CD32 08A8 0000 0022             		bclr	#0,status(a0)
0001CD38 6700                       		beq.s	loc_13104
0001CD3A 08A8 0005 0022             		bclr	#5,status(a0)
0001CD40 117C 0001 001D             		move.b	#1,next_anim(a0)
0001CD46                             
0001CD46                            loc_13104:
0001CD46 D045                       		add.w	d5,d0
0001CD48 B046                       		cmp.w	d6,d0
0001CD4A 6D00                       		blt.s	loc_1310C
0001CD4C 9045                       		sub.w	d5,d0
0001CD4E B046                       		cmp.w	d6,d0
0001CD50 6C00                       		bge.s	loc_1310C
0001CD52 3006                       		move.w	d6,d0
0001CD54                             
0001CD54                            loc_1310C:
0001CD54 3140 0020                  		move.w	d0,inertia(a0)
0001CD58 117C 0000 001C             		move.b	#0,anim(a0); use walking animation
0001CD5E 4E75                       		rts
0001CD60                            ; ===========================================================================
0001CD60                            
0001CD60                            loc_13118:				; XREF: Sonic_MoveRight
0001CD60 D044                       		add.w	d4,d0
0001CD62 6400                       		bcc.s	loc_13120
0001CD64 303C 0080                  		move.w	#$80,d0
0001CD68                            
0001CD68                            loc_13120:
0001CD68 3140 0020                  		move.w	d0,inertia(a0)
0001CD6C 1028 0026                  		move.b	$26(a0),d0
0001CD70 0600 0020                  		addi.b	#$20,d0
0001CD74 0200 00C0                  		andi.b	#$C0,d0
0001CD78 6600                       		bne.s	locret_1314E
0001CD7A 0C40 FC00                  		cmpi.w	#-$400,d0
0001CD7E 6E00                       		bgt.s	locret_1314E
0001CD80 117C 000D 001C             		move.b	#$D,anim(a0)	; use "stopping" animation
0001CD86 08E8 0000 0022             		bset	#0,status(a0)
0001CD8C 303C 0036                  		move.w	#$36,d0
0001CD90 4EB9 0000 3212             		jsr	(PlaySound).l ;	play stopping sound
0001CD96                            ;		tst.b	($FFFFFE1E).w
0001CD96                            ;		beq.w	locret_1314E
0001CD96                            ;		tst.w	($FFFFF63A).w	; is the game paused?
0001CD96                            ;		bne.s	locret_1314E	; if yes, branch
0001CD96                            ;		move.b	#6,($FFFFD1C0+routine).w	; ??? $D11C only seems
0001CD96                            ;		move.b	#$15,($FFFFD1C0+mapping_frame).w
0001CD96                            locret_1314E:
0001CD96 4E75                       		rts	
0001CD98                            ; End of function Sonic_MoveRight
0001CD98                            
0001CD98                            ; ---------------------------------------------------------------------------
0001CD98                            ; Subroutine to	change Sonic's speed as he rolls
0001CD98                            ; ---------------------------------------------------------------------------
0001CD98                            
0001CD98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD98                            
0001CD98                            
0001CD98                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
0001CD98 3C38 F760                  		move.w	($FFFFF760).w,d6
0001CD9C E346                       		asl.w	#1,d6
0001CD9E 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
0001CDA0 3838 F764                  		move.w	($FFFFF764).w,d4
0001CDA4 E444                       		asr.w	#2,d4
0001CDA6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001CDAA 6600 0000                  		bne.w	loc_131CC
0001CDAE 4A68 003E                  		tst.w	parent(a0)
0001CDB2 6600                       		bne.s	loc_13188
0001CDB4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001CDBA 6700                       		beq.s	loc_1317C	; if not, branch
0001CDBC 4EB9 0000 0000             		jsr	Sonic_RollLeft
0001CDC2                            
0001CDC2                            loc_1317C:
0001CDC2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001CDC8 6700                       		beq.s	loc_13188	; if not, branch
0001CDCA 4EB9 0000 0000             		jsr	Sonic_RollRight
0001CDD0                            
0001CDD0                            loc_13188:
0001CDD0 3028 0020                  		move.w	inertia(a0),d0
0001CDD4 6700                       		beq.s	loc_131AA
0001CDD6 6B00                       		bmi.s	loc_1319E
0001CDD8 9045                       		sub.w	d5,d0
0001CDDA 6400                       		bcc.s	loc_13198
0001CDDC 303C 0000                  		move.w	#0,d0
0001CDE0                            
0001CDE0                            loc_13198:
0001CDE0 3140 0020                  		move.w	d0,inertia(a0)
0001CDE4 6000                       		bra.s	loc_131AA
0001CDE6                            ; ===========================================================================
0001CDE6                            
0001CDE6                            loc_1319E:				; XREF: Sonic_RollSpeed
0001CDE6 D045                       		add.w	d5,d0
0001CDE8 6400                       		bcc.s	loc_131A6
0001CDEA 303C 0000                  		move.w	#0,d0
0001CDEE                            
0001CDEE                            loc_131A6:
0001CDEE 3140 0020                  		move.w	d0,inertia(a0)
0001CDF2                            
0001CDF2                            loc_131AA:
0001CDF2 4A68 0020                  		tst.w	inertia(a0)		; is Sonic moving?
0001CDF6 6600                       		bne.s	loc_131CC	; if yes, branch
0001CDF8 08A8 0002 0022             		bclr	#2,$22(a0)
0001CDFE 117C 0013 0016             		move.b	#$13,$16(a0)
0001CE04 117C 0009 0017             		move.b	#9,$17(a0)
0001CE0A 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001CE10 5B68 000C                  		subq.w	#5,$C(a0)
0001CE14                            
0001CE14                            loc_131CC:
0001CE14 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
0001CE1A 6700                       		beq.s	@cont2
0001CE1C 6400                       		bcc.s	@cont1
0001CE1E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001CE22                             
0001CE22                            @cont1:
0001CE22 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001CE26                             
0001CE26                            @cont2:
0001CE26 1028 0026                  		move.b	$26(a0),d0
0001CE2A 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001CE30 C1E8 0020                  		muls.w	inertia(a0),d0
0001CE34 E080                       		asr.l	#8,d0
0001CE36 3140 0012                  		move.w	d0,y_vel(a0)
0001CE3A C3E8 0020                  		muls.w	inertia(a0),d1
0001CE3E E081                       		asr.l	#8,d1
0001CE40 0C41 1000                  		cmpi.w	#$1000,d1
0001CE44 6F00                       		ble.s	loc_131F0
0001CE46 323C 1000                  		move.w	#$1000,d1
0001CE4A                            
0001CE4A                            loc_131F0:
0001CE4A 0C41 F000                  		cmpi.w	#-$1000,d1
0001CE4E 6C00                       		bge.s	loc_131FA
0001CE50 323C F000                  		move.w	#-$1000,d1
0001CE54                            
0001CE54                            loc_131FA:
0001CE54 3141 0010                  		move.w	d1,x_vel(a0)
0001CE58 6000 FDE2                  		bra.w	loc_1300C
0001CE5C                            ; End of function Sonic_RollSpeed
0001CE5C                            
0001CE5C                            
0001CE5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE5C                            
0001CE5C                            
0001CE5C                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
0001CE5C 3028 0020                  		move.w	inertia(a0),d0
0001CE60 6700                       		beq.s	loc_1320A
0001CE62 6A00                       		bpl.s	loc_13218
0001CE64                            
0001CE64                            loc_1320A:
0001CE64 08E8 0000 0022             		bset	#0,status(a0)
0001CE6A 117C 0002 001C             		move.b	#2,anim(a0)	; use "rolling"	animation
0001CE70 4E75                       		rts	
0001CE72                            ; ===========================================================================
0001CE72                            
0001CE72                            loc_13218:
0001CE72 9044                       		sub.w	d4,d0
0001CE74 6400                       		bcc.s	loc_13220
0001CE76 303C FF80                  		move.w	#-$80,d0
0001CE7A                            
0001CE7A                            loc_13220:
0001CE7A 3140 0020                  		move.w	d0,inertia(a0)
0001CE7E 4E75                       		rts	
0001CE80                            ; End of function Sonic_RollLeft
0001CE80                            
0001CE80                            
0001CE80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE80                            
0001CE80                            
0001CE80                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
0001CE80 3028 0020                  		move.w	inertia(a0),d0
0001CE84 6B00                       		bmi.s	loc_1323A
0001CE86 08A8 0000 0022             		bclr	#0,status(a0)
0001CE8C 117C 0002 001C             		move.b	#2,anim(a0)	; use "rolling"	animation
0001CE92 4E75                       		rts	
0001CE94                            ; ===========================================================================
0001CE94                            
0001CE94                            loc_1323A:
0001CE94 D044                       		add.w	d4,d0
0001CE96 6400                       		bcc.s	loc_13242
0001CE98 303C 0080                  		move.w	#$80,d0
0001CE9C                            
0001CE9C                            loc_13242:
0001CE9C 3140 0020                  		move.w	d0,inertia(a0)
0001CEA0 4E75                       		rts	
0001CEA2                            ; End of function Sonic_RollRight
0001CEA2                            
0001CEA2                            ; ---------------------------------------------------------------------------
0001CEA2                            ; Subroutine to	change Sonic's direction while jumping
0001CEA2                            ; ---------------------------------------------------------------------------
0001CEA2                            
0001CEA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEA2                            
0001CEA2                            
0001CEA2                            Sonic_ChgJumpDir:		; XREF: Obj01_MdJump; Obj01_MdJump2
0001CEA2 3C38 F760                  		move.w	($FFFFF760).w,d6
0001CEA6 3A38 F762                  		move.w	($FFFFF762).w,d5
0001CEAA E345                       		asl.w	#1,d5
0001CEAC 0828 0004 0022             		btst	#4,status(a0)	
0001CEB2 6600                       		bne.s	Obj01_ResetScr2
0001CEB4 3028 0010                  		move.w	x_vel(a0),d0	
0001CEB8 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
0001CEBE 6700                       		beq.s	loc_13278; if not, branch	
0001CEC0 08E8 0000 0022             		bset	#0,status(a0)	
0001CEC6 9045                       		sub.w	d5,d0	
0001CEC8 3206                       		move.w	d6,d1	
0001CECA 4441                       		neg.w	d1	
0001CECC B041                       		cmp.w	d1,d0	
0001CECE 6E00                       		bgt.s	loc_13278	
0001CED0 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
0001CED2 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001CED4 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
0001CED6 3001                       		move.w	d1,d0
0001CED8                             
0001CED8                            loc_13278:
0001CED8 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
0001CEDE 6700                       		beq.s	Obj01_JumpMove; if not, branch	
0001CEE0 08A8 0000 0022             		bclr	#0,status(a0)	
0001CEE6 D045                       		add.w	d5,d0	
0001CEE8 B046                       		cmp.w	d6,d0	
0001CEEA 6D00                       		blt.s	Obj01_JumpMove
0001CEEC 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
0001CEEE B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001CEF0 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
0001CEF2 3006                       		move.w	d6,d0
0001CEF4                            
0001CEF4                            Obj01_JumpMove:
0001CEF4 3140 0010                  		move.w	d0,x_vel(a0)	; change Sonic's horizontal speed
0001CEF8                            
0001CEF8                            Obj01_ResetScr2:
0001CEF8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001CEFE 6700                       		beq.s	loc_132A4	; if yes, branch
0001CF00 6400                       		bcc.s	loc_132A0
0001CF02 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001CF06                            
0001CF06                            loc_132A0:
0001CF06 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001CF0A                            
0001CF0A                            loc_132A4:
0001CF0A 0C68 FC00 0012             		cmpi.w	#-$400,y_vel(a0)	; is Sonic moving faster than -$400 upwards?
0001CF10 6500                       		bcs.s	locret_132D2	; if yes, branch
0001CF12 3028 0010                  		move.w	x_vel(a0),d0
0001CF16 3200                       		move.w	d0,d1
0001CF18 EA41                       		asr.w	#5,d1
0001CF1A 6700                       		beq.s	locret_132D2
0001CF1C 6B00                       		bmi.s	loc_132C6
0001CF1E 9041                       		sub.w	d1,d0
0001CF20 6400                       		bcc.s	loc_132C0
0001CF22 303C 0000                  		move.w	#0,d0
0001CF26                            
0001CF26                            loc_132C0:
0001CF26 3140 0010                  		move.w	d0,x_vel(a0)
0001CF2A 4E75                       		rts	
0001CF2C                            ; ===========================================================================
0001CF2C                            
0001CF2C                            loc_132C6:
0001CF2C 9041                       		sub.w	d1,d0
0001CF2E 6500                       		bcs.s	loc_132CE
0001CF30 303C 0000                  		move.w	#0,d0
0001CF34                            
0001CF34                            loc_132CE:
0001CF34 3140 0010                  		move.w	d0,x_vel(a0)
0001CF38                            
0001CF38                            locret_132D2:
0001CF38 4E75                       		rts	
0001CF3A                            ; End of function Sonic_ChgJumpDir
0001CF3A                            
0001CF3A                            ; ===========================================================================
0001CF3A                            ; ---------------------------------------------------------------------------
0001CF3A                            ; Unused subroutine to squash Sonic
0001CF3A                            ; ---------------------------------------------------------------------------
0001CF3A 1028 0026                  		move.b	$26(a0),d0
0001CF3E 0600 0020                  		addi.b	#$20,d0
0001CF42 0200 00C0                  		andi.b	#$C0,d0
0001CF46 6600                       		bne.s	locret_13302
0001CF48 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001CF4C 4A41                       		tst.w	d1
0001CF4E 6A00                       		bpl.s	locret_13302
0001CF50 317C 0000 0020             		move.w	#0,inertia(a0)	; stop Sonic moving
0001CF56 317C 0000 0010             		move.w	#0,x_vel(a0)
0001CF5C 317C 0000 0012             		move.w	#0,y_vel(a0)
0001CF62 117C 000B 001C             		move.b	#$B,anim(a0)	; use "warping"	animation
0001CF68                            
0001CF68                            locret_13302:
0001CF68 4E75                       		rts
0001CF6A                            ; ---------------------------------------------------------------------------
0001CF6A                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
0001CF6A                            ; ---------------------------------------------------------------------------
0001CF6A                            
0001CF6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF6A                            
0001CF6A                            
0001CF6A                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
0001CF6A 2228 0008                  		move.l	8(a0),d1
0001CF6E 3028 0010                  		move.w	x_vel(a0),d0
0001CF72 48C0                       		ext.l	d0
0001CF74 E180                       		asl.l	#8,d0
0001CF76 D280                       		add.l	d0,d1
0001CF78 4841                       		swap	d1
0001CF7A 3038 F728                  		move.w	($FFFFF728).w,d0
0001CF7E 0640 0010                  		addi.w	#$10,d0
0001CF82 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001CF84 6200 0000                  		bhi.w	Boundary_Sides	; if yes, branch
0001CF88 3038 F72A                  		move.w	($FFFFF72A).w,d0
0001CF8C 0640 0128                  		addi.w	#$128,d0
0001CF90 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001CF94 6600                       		bne.s	loc_13332
0001CF96 0640 0040                  		addi.w	#$40,d0
0001CF9A                            
0001CF9A                            loc_13332:
0001CF9A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001CF9C 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001CF9E                            
0001CF9E                            loc_13336:
0001CF9E 3038 F726                  		move.w	($FFFFF726).w,d0
0001CFA2 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0001CFA6 6E00                       		bgt.s	@loc_64BE2
0001CFA8 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001CFAC                            
0001CFAC                            @loc_64BE2:	
0001CFAC 0640 00E0                  		addi.w	#$E0,d0
0001CFB0 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
0001CFB4 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
0001CFB6 4E75                       		rts	
0001CFB8                            		
0001CFB8                            ; ===========================================================================
0001CFB8                            
0001CFB8                            Boundary_Bottom:
0001CFB8 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
0001CFBE 6600 0000                  		bne.w	KillCharacter_JMP		; if not, kill Sonic
0001CFC2 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w	; is player at the sequence where Eggman presses the switch
0001CFC8 6500 0000                  		bcs.w	KillCharacter_JMP	; if not, kill Sonic
0001CFCC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
0001CFD2 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w	; set level	to SBZ3	(LZ4)
0001CFD8                            ;		rts
0001CFD8                            Boundary_Bottom_locret:
0001CFD8 4E75                       		rts
0001CFDA                            
0001CFDA                            KillCharacter_JMP:
0001CFDA 4EF9 0000 0000             		jmp	KillCharacter		
0001CFE0                            ; ===========================================================================
0001CFE0                            
0001CFE0                            Boundary_Sides:
0001CFE0 3140 0008                  		move.w	d0,8(a0)
0001CFE4 317C 0000 000A             		move.w	#0,$A(a0)
0001CFEA 317C 0000 0010             		move.w	#0,x_vel(a0)	; stop Sonic moving
0001CFF0 317C 0000 0020             		move.w	#0,inertia(a0)
0001CFF6 6000 FFA6                  		bra.w	loc_13336
0001CFFA                            ; End of function Sonic_LevelBound
0001CFFA                            
0001CFFA                            ; ---------------------------------------------------------------------------
0001CFFA                            ; Subroutine allowing Sonic to roll when he's moving
0001CFFA                            ; ---------------------------------------------------------------------------
0001CFFA                            
0001CFFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFFA                            
0001CFFA                            
0001CFFA                            Sonic_Roll:				; XREF: Obj01_MdNormal
0001CFFA 4A38 F7CA                  	tst.b	($FFFFF7CA).w
0001CFFE 6600                       	bne.s	Obj01_NoRoll
0001D000 1038 F602                  	move.b	(Ctrl_1_Held_Logical).w,d0
0001D004 0200 000C                  	andi.b	#$C,d0		; is left/right being pressed?
0001D008 6600                       	bne.s	Obj01_NoRoll	; if yes, branch
0001D00A 0838 0001 F602             	btst	#1,(Ctrl_1_Held_Logical).w	; is down being pressed?
0001D010 6700                       	beq.s	loc_11780
0001D012 3028 0020                  	move.w	inertia(a0),d0
0001D016 6A00                       	bpl.s	loc_13392
0001D018 4440                       	neg.w	d0
0001D01A                            loc_13392:
0001D01A 0C40 0100                  	cmpi.w	#$100,d0
0001D01E 6400                       	bcc.s	Obj01_ChkRoll
0001D020 0828 0003 0022             	btst	#3,status(a0)
0001D026 6600                       	bne.s	Obj01_NoRoll
0001D028 117C 0008 001C             	move.b	#8,anim(a0)
0001D02E                            
0001D02E                            Obj01_NoRoll:
0001D02E 4E75                       		rts	
0001D030                            		
0001D030                            loc_11780:
0001D030 0C28 0008 001C             	cmpi.b	#8,anim(a0)
0001D036 66F6                       	bne.s	Obj01_NoRoll
0001D038 117C 0000 001C             	move.b	#0,anim(a0)
0001D03E 4E75                       	rts
0001D040                            ; ===========================================================================
0001D040                            
0001D040                            Obj01_ChkRoll:
0001D040 0828 0002 0022             		btst	#2,status(a0)	; is Sonic already rolling?
0001D046 6700                       		beq.s	Obj01_DoRoll	; if not, branch
0001D048 4E75                       		rts	
0001D04A                            ; ===========================================================================
0001D04A                            
0001D04A                            Obj01_DoRoll:
0001D04A 08E8 0002 0022             		bset	#2,status(a0)
0001D050 117C 000E 0016             		move.b	#$E,$16(a0)
0001D056 117C 0007 0017             		move.b	#7,$17(a0)
0001D05C 117C 0002 001C             		move.b	#2,anim(a0)	; use "rolling"	animation
0001D062 5A68 000C                  		addq.w	#5,$C(a0)
0001D066 303C 003C                  		move.w	#$3C,d0
0001D06A 4EB9 0000 3212             		jsr	(PlaySound).l ;	play rolling sound
0001D070 4A68 0020                  		tst.w	inertia(a0)
0001D074 6600                       		bne.s	locret_133E8
0001D076 317C 0200 0020             		move.w	#$200,inertia(a0)
0001D07C                            
0001D07C                            locret_133E8:
0001D07C 4E75                       		rts	
0001D07E                            ; End of function Sonic_Roll
0001D07E                            
0001D07E                            ; ---------------------------------------------------------------------------
0001D07E                            ; Subroutine to perform a JumpDash
0001D07E                            ; ---------------------------------------------------------------------------
0001D07E                            
0001D07E                            Sonic_JumpDash:
0001D07E 4A38 FF7F                  		tst.b	($FFFFFF7F).w		; Sonic Homing Attack is chasing the monitor?
0001D082 6600 0000                  		bne.w	JD_End
0001D086 1038 F603                  		move.b	($FFFFF603).w,d0		; is ABC pressed? (part 1)
0001D08A 0200 0070                  		andi.b	#$70,d0			; is ABC pressed? (part 2)
0001D08E 6700 0000                  		beq.w	JD_End			; if not, branch
0001D092 0828 0007 0022             		btst	#7,$22(a0)		; was jumpdash flag set?
0001D098 6600 0000                  		bne.w	JD_End			; if yes, branch
0001D09C 08E8 0007 0022             		bset	#7,$22(a0)		; if not, set jumpdash flag
0001D0A2 303C 00B6                  		move.w	#$B6,d0			; set jumpdash sound
0001D0A6 4EB9 0000 3212             		jsr	(PlaySound).l		; play jumpdash sound
0001D0AC 08A8 0004 0022             		bclr	#4,status(a0)		; clear double jump flag
0001D0B2                            
0001D0B2                            ;JD_SetSpeed1:
0001D0B2                            JD_SetSpeed1:
0001D0B2 7200                       		moveq	#0,d1				; Quickly clear d1
0001D0B4 4A38 FE2E                  		tst.b	($FFFFFE2E).w		; Does Sonic have speedshoes?
0001D0B8 6700                       		beq.s	setJDspeed1				; If not, branch
0001D0BA 5201                       		addq.b	#1,d1				; Quickly add 1 to d1
0001D0BC                            setJDspeed1:
0001D0BC 0828 0006 0022             		btst	#6,status(a0)			; Is Sonic underwater?
0001D0C2 6700                       		beq.s	setJDspeed2				; If not, branch
0001D0C4 5401                       		addq.b	#2,d1				; Quickly add 2 to d1
0001D0C6                            setJDspeed2:
0001D0C6 4A38 FE19                  		tst.b	(Super_Sonic_flag).w		; Is Sonic Super?
0001D0CA 6700                       		beq.s	setJDspeed3				; If not, branch
0001D0CC 5801                       		addq.b	#4,d1				; Quickly add 4 to d1
0001D0CE                            setJDspeed3:
0001D0CE D201                       		add.b	d1,d1
0001D0D0 303B 1000                  		move.w	JDSpeedsettings(pc,d1.w),d0	; Load correct speed into d0
0001D0D4 0828 0000 0022             		btst	#0,status(a0)		; is sonic facing left?
0001D0DA 6700                       		beq.s	JD_Main			; if yes, branch
0001D0DC 4440                       		neg.w	d0			; if not, negate d0 (for jumping to the right)
0001D0DE                            
0001D0DE                            JD_Main:
0001D0DE 3140 0010                  		move.w	d0,x_vel(a0)		; move sonic forward (X-velocity)
0001D0E2 4268 0012                  		clr.w	y_vel(a0)			; clear Y-velocity to move sonic directly down
0001D0E6                            JD_End:
0001D0E6 4E75                       		rts				; return or finish jumpdash
0001D0E8                            ; End of function Sonic_JumpDash
0001D0E8                            
0001D0E8                            JDSpeedsettings:	
0001D0E8 0A00                       	dc.w	$A00		; $00	; Normal
0001D0EA 0B00                       	dc.w	$B00		; $08	; Normal with Speedshoes
0001D0EC 0600                       	dc.w	$600		; $16	; Normal Underwater
0001D0EE 0800                       	dc.w	$800		; $24	; Normal Underwater with Speedshoes
0001D0F0 0E00                       	dc.w	$E00		; $32	; Super
0001D0F2 0F00                       	dc.w	$F00		; $40	; Super with Speedshoes
0001D0F4 0A00                       	dc.w	$A00		; $48	; Super Underwater
0001D0F6 0B00                       	dc.w	$B00		; $56	; Super Underwater with Speedshoes
0001D0F8                            
0001D0F8                            ; ---------------------------------------------------------------------------
0001D0F8                            ; Subroutine Sonic_Homingattack
0001D0F8                            ; ---------------------------------------------------------------------------
0001D0F8                            
0001D0F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0F8                            
0001D0F8                            Sonic_Homingattack:
0001D0F8 4A38 FF7F                  		tst.b   ($FFFFFF7F).w      ; is Sonic chasing some object?
0001D0FC 6600 0000                  		bne.w   HA_Move            ; if yes, chase him
0001D100                            ;		jsr	Obj01_AfterImage_Start	; if yes, don't negate it
0001D100 1238 F603                  		move.b	($FFFFF603).w,d1	; read controller
0001D104 0201 0070                  		andi.b	#$70,d1				; is A, B or C pressed?
0001D108 6700 0000                  		beq.w	Sonic_HA_rts		; if not, branch
0001D10C                            
0001D10C 43F8 D800                  		lea		($FFFFD800).w,a1	; start at the first level object RAM
0001D110                            
0001D110                            ; ---------------------------------------------------------------------------
0001D110                            
0001D110                            HA_enemylist:
0001D110 4A11                       		tst.b	(a1)			; is a Null object
0001D112 6700                       		beq.s	HA_nextobject	; if yes, branch
0001D114 0C29 0005 0020             		cmpi.b	#5,collision_flags(a1)		; is not an enemy object? (spring, explosion, platform, collected ring, flame thrower (SBZ), among others)
0001D11A 6500 0000                  		bcs.w	HA_nextobject	; if yes, branch
0001D11E                            		; cmpi.b	#5,collision_flags(a1)		; is Burrobot enemy (LZ)
0001D11E                            		; beq.w	HA_calcdistance	; if yes, branch
0001D11E                            		; cmpi.b	#6,collision_flags(a1)		; is Crabmeat enemy (GHZ, SYZ)
0001D11E                            		; beq.s	HA_calcdistance	; if yes, branch
0001D11E                            		; cmpi.b	#8,collision_flags(a1)		; is Buzz Bomber enemy (GHZ, MZ, SYZ)
0001D11E                            		; beq.s	HA_calcdistance	; if yes, branch
0001D11E                            		; cmpi.b	#9,collision_flags(a1)		; is Chopper enemy (GHZ)
0001D11E                            		; beq.s	HA_calcdistance	; if yes, branch
0001D11E                            		; cmpi.b	#$A,collision_flags(a1)	; is Jaws enemy (LZ)
0001D11E                            		; beq.s	HA_calcdistance	; if yes, branch
0001D11E                            		; cmpi.b	#$B,collision_flags(a1)	; is Caterkiller enemy (MZ, SBZ) / Orbinaut enemy (LZ, SLZ, SBZ) / Basaran enemy (MZ)
0001D11E                            		; beq.s	HA_calcdistance	; if yes, branch
0001D11E                            		; cmpi.b	#$C,collision_flags(a1)	; is Roller enemy (SYZ) / Newtron enemy (GHZ)
0001D11E                            		; beq.s	HA_calcdistance	; if yes, branch	
0001D11E                            		; cmpi.b	#$D,collision_flags(a1)	; is Newtron enemy (GHZ)
0001D11E                            		; beq.s	HA_calcdistance	; if yes, branch
0001D11E                            		; cmpi.b	#$E,collision_flags(a1)	; is Roller enemy (SYZ)
0001D11E                            		; beq.s	HA_calcdistance	; if yes, branch
0001D11E                            		; cmpi.b	#$F,collision_flags(a1)	; is Eggman
0001D11E                            		; beq.s	HA_calcdistance	; if yes, branch
0001D11E 0C29 000F 0020             		cmpi.b	#$F,collision_flags(a1)		; is some enemy of the list above?
0001D124 6300                       		bls.s	HA_calcdistance ; if yes, branch
0001D126 0C29 0046 0020             		cmpi.b	#$46,collision_flags(a1)	; is the monitor?
0001D12C 6700                       		beq.s	HA_calcdistance ; if yes, branch
0001D12E                            		; cmpi.b	#$47,collision_flags(a1)		; is the ring?
0001D12E                            		; beq.s	HA_calcdistance 		; if yes, branch
0001D12E 0C29 0052 0020             		cmpi.b	#$52,collision_flags(a1)	; is giant ring for entry to special stage?
0001D134 6700                       		beq.s	HA_calcdistance ; if yes, branch
0001D136 0C29 00CC 0020             		cmpi.b	#$CC,collision_flags(a1)	; is Yadrin enemy (SYZ)
0001D13C 6700                       		beq.s	HA_calcdistance ; if yes, branch
0001D13E                            
0001D13E                            HA_nextobject:
0001D13E D2FC 0040                  		adda.w  #$40,a1			; jump to next object RAM entry
0001D142 B2FC F000                  		cmpa.w  #$F000,a1		; already tested all object RAM entry?
0001D146 6DC8                       		blt.s   HA_enemylist	; if not, return to enemy list
0001D148                            ;		bsr.w	Sonic_JumpDash		; if not, perform a simple jump dash :P
0001D148                            HA_nextobject_rts:
0001D148 4E75                       		rts
0001D14A                            
0001D14A                            ; ---------------------------------------------------------------------------
0001D14A                            
0001D14A                            HA_calcdistance:	; distance calculator
0001D14A 3229 0008                  		move.w  8(a1),d1	; move the object x-position to d1
0001D14E 3429 000C                  		move.w  $C(a1),d2	; move the object y-position to d2
0001D152 9268 0008                  		sub.w   8(a0),d1	; sub sonic x-position of object x-position
0001D156 9468 000C                  		sub.w   $C(a0),d2	; sub sonic y-position of object y-position
0001D15A                            ; ---------------------------------------------------------------------------
0001D15A                            
0001D15A                            ; test if the Sonic is facing the object
0001D15A 0828 0000 0022             		btst    #0,status(a0)	; is sonic facing left?
0001D160 6700                       		beq.s   HA_faceleft	; if yes, branch
0001D162 0C41 0008                  		cmpi.w  #8,d1		; is distance of Sonic, less than 8 pixels of the object?
0001D166 6D00                       		blt.s   HA_calcdistance2	; if yes, branch
0001D168 60D4                       		bra.s   HA_nextobject
0001D16A                            
0001D16A                            HA_faceleft:
0001D16A 0C41 FFF8                  		cmpi.w  #-8,d1		; is distance of Sonic, greater than -8 pixels of the object?
0001D16E 6E00                       		bgt.s   HA_calcdistance2	; if yes, branch
0001D170 60CC                       		bra.s   HA_nextobject
0001D172                            ; end of test
0001D172                            
0001D172                            ; ---------------------------------------------------------------------------
0001D172                            
0001D172                            HA_calcdistance2:		; continuation of distance calculator
0001D172                            ;		tst.b	(Transforming_Flag-1).w	; has Sonic transformed Once?
0001D172                            ;		beq.w	HA_calcdistance3		; if yes, branch (Keeps you from transforming multiple times while in the air)		
0001D172                            ;		move.b	#0,($FFFFFF7F).w
0001D172                            ;		bra.w	HA_Move
0001D172                            ;HA_calcdistance3:
0001D172 C3C1                       		muls.w  d1,d1	; horizontal distance squared
0001D174 C5C2                       		muls.w  d2,d2	; vertical distance squared
0001D176 D282                       		add.l   d2,d1	; add vertical distance to horizontal distance
0001D178 0C81 0000 4000             		cmp.l   #16384,d1		; is distance of Sonic, greater than or equal 128 pixels of the object? (128^2=16384 // $80^2=$4000)
0001D17E 6CBE                       		bge.s   HA_nextobject	; if yes, don't execute the homing attack
0001D180 08A8 0004 0022             		bclr   #4,status(a0)         ; clear "uncontrolled jump" flag
0001D186 117C 0002 001C             		move.b	#2,anim(a0)
0001D18C 303C 00B6                  		move.w   #$B6,d0            ; set homing attack sound
0001D190 4EB9 0000 3212             		jsr   (PlaySound).l         ; play homing attack sound
0001D196 11FC 001E FF7F             		move.b   #30,($FFFFFF7F).w   ; number of frames Sonic can chasing the object
0001D19C 21C9 FF02                  		move.l   a1,($FFFFFF02).w   ; save the object address that Sonic is chasing
0001D1A0 303C 00B6                  		move.w	#$B6,d0				; set homing attack sound
0001D1A4 4EB9 0000 3212             		jsr	(PlaySound).l			; play homing attack sound
0001D1AA 08A8 0004 0022             		bclr	#4,status(a0)			; clear "uncontrolled jump" flag
0001D1B0 11FC 001E FF7F             		move.b	#30,($FFFFFF7F).w	; number of frames Sonic can chasing the object
0001D1B6 21C9 FF02                  		move.l	a1,($FFFFFF02).w	; save the object address that Sonic is chasing
0001D1BA                            ; ---------------------------------------------------------------------------
0001D1BA                            
0001D1BA                            HA_Move:
0001D1BA 2278 FF02                  		movea.l	($FFFFFF02).w,a1	; load the object address that Sonic is chasing
0001D1BE 5338 FF7F                  		subi.b	#1,($FFFFFF7F).w	; sub 1 of frames counter
0001D1C2 4A38 FF7F                  		tst.b	($FFFFFF7F).w		; the time to the Sonic chasing some object is over?
0001D1C6 6700 0000                  		beq.w	Sonic_HA_rts		; if yes, don't make the Homing Attack
0001D1CA                            ; Recalculating the distance between the Sonic and the object (d1 = x distance / d2 = y distance)
0001D1CA 3229 0008                  		move.w  8(a1),d1   ; move the object x-position to d1
0001D1CE 3429 000C                  		move.w  $C(a1),d2   ; move the object y-position to d2
0001D1D2 9268 0008                  		sub.w   8(a0),d1   ; sub sonic x-position of object x-position
0001D1D6 9468 000C                  		sub.w   $C(a0),d2   ; sub sonic y-position of object y-position
0001D1DA 4A38 FF7F                  		tst.b   ($FFFFFF7F).w      ; the time to the Sonic chasing some object is over?
0001D1DE 6700 0000                  		beq.w   Sonic_HA_rts      ; if yes, don't make the Homing Attack
0001D1E2                            ; ---------------------------------------------------------------------------
0001D1E2                            
0001D1E2                            ; Recalculating the distance between the Sonic and the object (d1 = x distance / d2 = y distance)
0001D1E2 3229 0008                  		move.w  8(a1),d1	; move the object x-position to d1
0001D1E6 3429 000C                  		move.w  $C(a1),d2	; move the object y-position to d2
0001D1EA 9268 0008                  		sub.w   8(a0),d1	; sub sonic x-position of object x-position
0001D1EE 9468 000C                  		sub.w   $C(a0),d2	; sub sonic y-position of object y-position
0001D1F2                            
0001D1F2 4EB9 0000 9072             		jsr		(CalcAngle).l	; calculates the angle
0001D1F8 4EB9 0000 8DA4             		jsr		(CalcSine).l	; calculates the sine and the cosine
0001D1FE C3FC 000C                  		muls.w  #$C,d1			; multiply cosine by $C
0001D202 3141 0010                  		move.w  d1,x_vel(a0)		; move d1 to X-velocity
0001D206 C1FC 000C                  		muls.w  #$C,d0			; multiply sine by $C
0001D20A 3140 0012                  		move.w  d0,y_vel(a0)		; move d0 to Y-velocity
0001D20E                            
0001D20E                            Sonic_HA_rts:
0001D20E 4E75                       		rts						; return
0001D210                            ; Command of Homingattack end here
0001D210                            
0001D210                            ; ---------------------------------------------------------------------------
0001D210                            ; Subroutine allowing Sonic to jump
0001D210                            ; ---------------------------------------------------------------------------
0001D210                            
0001D210                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D210                            
0001D210                            
0001D210                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001D210 1038 F603                  		move.b	($FFFFF603).w,d0
0001D214 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001D218 6700 0000                  		beq.w	locret_1348E	; if not, branch
0001D21C 7000                       		moveq	#0,d0
0001D21E 1028 0026                  		move.b	$26(a0),d0
0001D222 0600 0080                  		addi.b	#$80,d0
0001D226 6100 0000                  		bsr.w	sub_14D48
0001D22A 0C41 0006                  		cmpi.w	#6,d1			; does Sonic have enough room to jump?
0001D22E 6D00 0000                  		blt.w	locret_1348E		; if not, branch
0001D232 343C 0680                  		move.w	#$680,d2
0001D236 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001D23A 6700                       		beq.s	@nochgjmpheight
0001D23C 343C 0800                  		move.w	#$800,d2	; set higher jump speed if super
0001D240                            @nochgjmpheight:
0001D240 0828 0006 0022             		btst	#6,status(a0)	; Test if underwater
0001D246 6700                       		beq.s	@chgjmpheightnotuw
0001D248 343C 0380                  		move.w	#$380,d2	; set lower jump speed if under
0001D24C                            @chgjmpheightnotuw:
0001D24C 7000                       		moveq	#0,d0
0001D24E 1028 0026                  		move.b	$26(a0),d0
0001D252 0400 0040                  		subi.b	#$40,d0
0001D256 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001D25C C3C2                       		muls.w	d2,d1
0001D25E E081                       		asr.l	#8,d1
0001D260 D368 0010                  		add.w	d1,x_vel(a0)	; make Sonic jump
0001D264 C1C2                       		muls.w	d2,d0
0001D266 E080                       		asr.l	#8,d0
0001D268 D168 0012                  		add.w	d0,y_vel(a0)	; make Sonic jump
0001D26C 08E8 0001 0022             		bset	#1,status(a0)
0001D272 08A8 0005 0022             		bclr	#5,status(a0)
0001D278 588F                       		addq.l	#4,sp
0001D27A 117C 0001 003C             		move.b	#1,$3C(a0)
0001D280 4228 0038                  		clr.b	$38(a0)
0001D284 303C 0062                  		move.w	#$62,d0
0001D288 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play jumping sound
0001D28E                            		;move.b	#$13,y_radius(a0)	; set to standing height	;<-- the offending lines
0001D28E                            		;move.b	#9,x_radius(a0)		; and width			;<--
0001D28E 0828 0002 0022             		btst	#2,status(a0)
0001D294 6600                       		bne.s	loc_13490
0001D296 117C 000E 0016             		move.b	#$E,$16(a0)
0001D29C 117C 0007 0017             		move.b	#7,$17(a0)
0001D2A2 117C 0002 001C             		move.b	#2,anim(a0)	; use "jumping"	animation
0001D2A8 08E8 0002 0022             		bset	#2,status(a0)
0001D2AE 5A68 000C                  		addq.w	#5,$C(a0)
0001D2B2                            
0001D2B2                            locret_1348E:
0001D2B2 4E75                       		rts	
0001D2B4                            ; ===========================================================================
0001D2B4                            
0001D2B4                            loc_13490:
0001D2B4 08E8 0004 0022             		bset	#4,status(a0)
0001D2BA 4E75                       		rts	
0001D2BC                            ; End of function Sonic_Jump
0001D2BC                            
0001D2BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2BC                            
0001D2BC                            
0001D2BC                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001D2BC 4A28 003C                  		tst.b	$3C(a0)
0001D2C0 6700                       		beq.s	loc_134C4
0001D2C2 323C FC00                  		move.w	#-$400,d1
0001D2C6 0828 0006 0022             		btst	#6,status(a0)
0001D2CC 6700                       		beq.s	loc_134AE
0001D2CE 323C FE00                  		move.w	#-$200,d1
0001D2D2                            
0001D2D2                            loc_134AE:
0001D2D2 B268 0012                  		cmp.w	y_vel(a0),d1
0001D2D6 6F00                       		ble.s	locret_134C2
0001D2D8 1038 F602                  		move.b	($FFFFF602).w,d0
0001D2DC 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001D2E0 6600                       		bne.s	locret_134C2	; if yes, branch
0001D2E2 3141 0012                  		move.w	d1,y_vel(a0)
0001D2E6                            
0001D2E6                            locret_134C2:
0001D2E6 4A38 F7CC                  		tst.b   (Control_Locked).w      ; Are Controls locked?
0001D2EA 6600                       		bne.s   locret_134D2            ; If so, branch, and do not bother with Super code
0001D2EC                            		;tst.b	y_vel(a0)				; is Sonic exactly at the height of his jump?		
0001D2EC 1038 F603                  		move.b  (Ctrl_1_Press_Logical).w,d0
0001D2F0 0200 0020                  		andi.b  #$20,d0 ; is A button pressed?
0001D2F4 6600                       		bne.s   Sonic_CheckGoSuper      ; if yes, test for turning into Super Sonic
0001D2F6 4E75                       		rts	
0001D2F8                            ; ===========================================================================
0001D2F8                            
0001D2F8                            loc_134C4:
0001D2F8 0C68 F040 0012             		cmpi.w	#-$FC0,y_vel(a0)
0001D2FE 6C00                       		bge.s	locret_134D2
0001D300 317C F040 0012             		move.w	#-$FC0,y_vel(a0)
0001D306                            
0001D306                            locret_134D2:
0001D306 4E75                       		rts	
0001D308                            ; End of function Sonic_JumpHeight
0001D308                            
0001D308                            ; ===========================================================================
0001D308                            
0001D308                            
0001D308                            PalLoad_Loop: ;Quick load
0001D308 34D9                       		move.w	(a1)+,(a2)+              ;Copy pallete data to RAM
0001D30A 51C8 FFFC                  		dbf	d0,PalLoad_Loop               ;Loop d0 (length)
0001D30E 4E75                       		rts
0001D310                            
0001D310                            nsup:
0001D310 4E75                            rts
0001D312                            
0001D312                            ; ===========================================================================
0001D312                            
0001D312                            ; ---------------------------------------------------------------------------
0001D312                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
0001D312                            ; if he has enough rings and all of the emeralds
0001D312                            ; ---------------------------------------------------------------------------
0001D312                            
0001D312                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001D312                            
0001D312                            ; loc_1AB38: test_set_SS:
0001D312                            Sonic_CheckGoSuper:
0001D312                            ;	tst.b	(Transforming_Flag-1).w	; has Sonic transformed Once?
0001D312                            ;	bne.w	return_1ABA4		; if yes, branch (Keeps you from transforming multiple times while in the air)
0001D312 4A38 FE1E                  	tst.b	(Update_HUD_timer).w	; has Sonic reached the end of the act?
0001D316 6700 0000                  	beq.w	return_1ABA4		; if yes, branch
0001D31A 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
0001D31E 6600 0000                  	bne.w	return_1ABA4	; if yes, branch
0001D322 0C38 0006 FE57             	cmpi.b	#6,($FFFFFE57).w	; does Sonic have exactly 7 emeralds?
0001D328 6600 0000                  	bne.w	return_1ABA4		; if not, branch
0001D32C 0C78 0032 FE20             	cmpi.w	#50,(Ring_count).w	; does Sonic have at least 50 rings?
0001D332 6500 0000                  	bcs.w	return_1ABA4		; if not, branch
0001D336 0828 0006 0022             	btst	#6,status(a0)	; Check if underwater, return if not
0001D33C 6700                       	beq.s	@loc
0001D33E 31FC 0500 F760             	move.w	#$500,(Sonic_top_speed).w
0001D344 31FC 0018 F762             	move.w	#$18,(Sonic_acceleration).w
0001D34A 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
0001D350                            @loc:
0001D350                            ;	move.b	#1,(Transforming_Flag-1).w
0001D350                            ;	lea	(MainCharacter).w,a1
0001D350 11FC 0001 F65F             	move.b	#1,(Super_Sonic_palette).w
0001D356 11FC 000F F65E             	move.b	#$F,(Palette_frame_count).w
0001D35C 4238 FF88                  	clr.b	($FFFFFF88).w
0001D360 217C 0000 0000 0004        	move.l	#Map_SuperSonic,mappings(a0)
0001D368 11FC 0001 FE19             	move.b	#1,(Super_Sonic_flag).w
0001D36E                            ;	moveq	#$44,d0
0001D36E                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001D36E 11FC 0001 F7C8             	move.b	#$1,($FFFFF7C8).w
0001D374 4EB9 0000 0000             	jsr	Super_and_Invincibility_Stars_Jmp
0001D37A 117C 0022 001C             	move.b	#$22,anim(a0)			; use transformation animation
0001D380 11FC 0000 FE2E             	move.b	#0,($FFFFFE2E).w	; clear Super Shoes	;Mercury Constants
0001D386 31FC 00E3 F00A             	move.w	#$E3,($FFFFF00A).w
0001D38C 4228 0034                  	clr.b	speedshoes_time(a0)	; clear time limit of the invincibility
0001D390 117C 0000 0032             	move.b	#0,invincibility_time(a0)
0001D396 11FC 0001 FE2D             	move.b	#1,($FFFFFE2D).w	; make Sonic invincible
0001D39C 45F8 F760                  	lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001D3A0 6100 0000                  	bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001D3A4 11FC 008E D200             	move.b	#$8E,($FFFFD200).w	; load Obj7E (super sonic stars object) at $FFFFD200
0001D3AA                            ;	moveq	#$26,d0
0001D3AA                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001D3AA                            ;	moveq	#$23,d0
0001D3AA                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001D3AA 4238 FF7F                  	clr.b	($FFFFFF7F).w 
0001D3AE 303C 0046                  	move.w	#$46,d0
0001D3B2 4EB9 0000 325C             	jsr	(PlaySound_Special).l	; Play transformation sound effect.
0001D3B8                            ;	tst.b	(Current_Boss_ID).w
0001D3B8                            ;	bne.s	return_1ABA4		; branch if in a boss fight
0001D3B8 303C 002D                  	move.w	#$2D,d0
0001D3BC 4EF9 0000 3212                 jmp    (PlaySound).l; load the Super Sonic song and return
0001D3C2 4E75                       	rts
0001D3C4                            	
0001D3C4                            ; ---------------------------------------------------------------------------
0001D3C4                            return_1ABA4:
0001D3C4 4E75                       	rts
0001D3C6                            ; End of subroutine Sonic_CheckGoSuper
0001D3C6                            
0001D3C6                            Super_and_Invincibility_Stars_Jmp:
0001D3C6 4EFA 8842                  	jmp	Super_and_Invincibility_Stars
0001D3CA 4E75                       	rts
0001D3CC                            ; ---------------------------------------------------------------------------
0001D3CC                            ; Subroutine doing the extra logic for Super Sonic
0001D3CC                            ; ---------------------------------------------------------------------------
0001D3CC                            
0001D3CC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001D3CC                            
0001D3CC                            ; loc_1ABA6:
0001D3CC                            Sonic_Super:
0001D3CC                            ;	tst.b	(Transforming_Flag-1).w	; has Sonic transformed Once?
0001D3CC                            ;	bne.w	return_1AC3C		; if yes, branch (Keeps you from transforming multiple times while in the air)
0001D3CC 4A38 FE19                      tst.b    ($FFFFFE19).w; Ignore all this code if not Super Sonic
0001D3D0 6700 0000                      beq.w    return_1AC3C 
0001D3D4 4A38 FE1E                      tst.b    ($FFFFFE1E).w
0001D3D8 6700                       	beq.s	Sonic_RevertToNormal; if yes, revert to normal
0001D3DA 217C 0000 0000 0004        	move.l	#Map_SuperSonic,4(a0)	; Load the Super Sonic map.
0001D3E2 45F9 0000 0000             	lea		(SuperSonicDynPLC).l,a2	; Load the Super Sonic DPLC.
0001D3E8 4A38 FE1E                  	tst.b	($FFFFFE1E).w		; check if the time counter is stopped
0001D3EC 6700                       	beq.s	Sonic_RevertToNormal; if yes, revert to normal
0001D3EE                            ;	tst.b	($FFFFFF70).w		; check if the time counter is stopped
0001D3EE                            ;	bne.s	Sonic_RevertToNormal; if yes, revert to normal
0001D3EE 5378 F670                      subq.w    #1,($FFFFF670).w
0001D3F2 6A00 0000                      bpl.w    return_1AC3C
0001D3F6 31FC 003C F670                 move.w    #60,($FFFFF670).w; Reset frame counter to 60
0001D3FC 4A78 FE20                      tst.w    ($FFFFFE20).w
0001D400 6700                           beq.s    Sonic_RevertToNormal
0001D402 0038 0001 FE1D                 ori.b    #1,($FFFFFE1D).w
0001D408 0C78 0001 FE20                 cmpi.w    #1,($FFFFFE20).w
0001D40E 6700                           beq.s    loc4
0001D410 0C78 000A FE20                 cmpi.w    #10,($FFFFFE20).w
0001D416 6700                           beq.s    loc4
0001D418 0C78 0064 FE20                 cmpi.w    #100,($FFFFFE20).w
0001D41E 6600                           bne.s    loc5
0001D420                            loc4:
0001D420 0038 0080 FE1D                 ori.b    #$80,($FFFFFE1D).w
0001D426                            loc5:
0001D426 5378 FE20                      subq.w    #1,($FFFFFE20).w
0001D42A 6600 0000                      bne.w    return_1AC3C
0001D42E                            ; loc_1ABF2:
0001D42E                            Sonic_RevertToNormal:
0001D42E                            ;	move.b	#1,(Transforming_Flag-1).w
0001D42E 4238 FF88                  	clr.b	($FFFFFF88).w
0001D432 21FC 0000 0000 D004        	move.l	#Map_Sonic,(MainCharacter+mappings).w	; Load the sonic map.
0001D43A                            ;	moveq	#$27,d0
0001D43A                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001D43A                            ;	tst.b	($FFFFFE2C).w		; is sonic super?
0001D43A                            ;	bne.w	Sonic_RevertToNormal_2		; if yes, branch
0001D43A                            ;	moveq	#$24,d0
0001D43A                            ;	jsr	(LoadPLC).l	; load Super Sonic's stars patterns
0001D43A                            ;	jmp	Sonic_RevertToNormal_3
0001D43A                            ;Sonic_RevertToNormal_2:
0001D43A                            ;	moveq	#$28,d0
0001D43A                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001D43A                            ;Sonic_RevertToNormal_3:
0001D43A                            ;	tst.b	(Current_Boss_ID).w
0001D43A                            ;	bne.w	Sonic_RevertToNormal_4		; branch if in a boss fight
0001D43A 4A38 F7AA                  	tst.b	(Current_Boss_ID).w
0001D43E 6700                       	beq.s	Sonic_RevertToNormalNonBoss		; branch if not in a boss fight
0001D440 4EB9 0000 0000             	jsr		super_GetBgm
0001D446 4EF9 0000 0000             	jmp		Sonic_RevertToNormal_4
0001D44C                            Sonic_RevertToNormalNonBoss:	
0001D44C 4EB9 0000 0000             	jsr		super_GetBgmRevert
0001D452                            Sonic_RevertToNormal_4:
0001D452 11FC 0002 F65F                 move.b    #2,($FFFFF65F).w; Remove rotating palette
0001D458 31FC 0028 F65C                 move.w    #$28,($FFFFF65C).w; Unknown
0001D45E 11FC 0000 FE19                 move.b    #0,($FFFFFE19).w
0001D464 117C 0001 001D                 move.b    #1,next_anim(a0); Change animation back to normal ?
0001D46A 11FC 0000 FE2D                 move.b    #0,($FFFFFE2D).w; Remove invincibility
0001D470 45F8 F760                  	lea	(Sonic_top_speed).w,a2		; Load Sonic_top_speed into a2
0001D474 6000 0000                  	bra.w	ApplySpeedSettings		; Fetch Speed settings and return
0001D478                            super_GetBgmRevert:
0001D478                            
0001D478                            super_GetBgm:
0001D478                            ;		Boss Only
0001D478                            ;		move.b	(a1,d0.w),d1
0001D478                            ;		btst	d0,d1
0001D478                            ;		beq.w	return_1AC3C
0001D478                            ;		move.w  (Level_Music).w,d0
0001D478 7000                       		moveq	#0,d0
0001D47A 4A38 F7AA                  		tst.b	(Current_Boss_ID).w		; Does character have speedshoes?
0001D47E 6600                       		bne.s	setmusiclevel
0001D480 3038 FF90                  		move.w  (Level_Music).w,d0
0001D484 4EF9 0000 0000             		jmp	loc_140A6_2
0001D48A                            setmusiclevel:
0001D48A 7000                       		moveq	#0,d0
0001D48C 4A38 F7AA                  		tst.b	(Current_Boss_ID).w		; Does character have speedshoes?
0001D490 6700                       		beq.s	setmusic1				; If not, branch
0001D492 5200                       		addq.b	#1,d0				; Quickly add 1 to d0
0001D494                            setmusic1:
0001D494 0C29 0004 0021             		cmpi.b	#$4,collision_property(a1)
0001D49A 6F00 0000                  		ble.w	setmusic2				; If not, branch
0001D49E 5400                       		addq.b	#2,d0				; Quickly add 2 to d0
0001D4A0                            setmusic2:
0001D4A0 D000                       		add.b	d0,d0				; Multiply itself
0001D4A2 323B 0000                  		move	BossMusicSettings(pc,d0.w),d1	; Load correct speed settings into a1
0001D4A6 3001                       		move.w	d1,d0
0001D4A8 4E75                       		rts					; Finish subroutine
0001D4AA                            	
0001D4AA                            BossMusicSettings:
0001D4AA 000E                       	dc.w	$0E
0001D4AC 000D                       	dc.w	$0D
0001D4AE                            ;	dc.w	Level_Music
0001D4AE                            	even
0001D4AE                            
0001D4AE                            
0001D4AE                            
0001D4AE                            loc_140A6_2:
0001D4AE 4EF9 0000 0000             	jmp	(PlayMusic).l
0001D4B4                            	
0001D4B4                            return_1AC3C:
0001D4B4 4E75                           rts
0001D4B6                            ; End of subroutine Sonic_Super
0001D4B6                            
0001D4B6                            ; ---------------------------------------------------------------------------
0001D4B6                            ; Subroutine to make Sonic perform a spindash
0001D4B6                            ; ---------------------------------------------------------------------------
0001D4B6                             
0001D4B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4B6                             
0001D4B6                             
0001D4B6                            Sonic_Spindash:
0001D4B6 4A28 0039                  		tst.b	$39(a0)			; already spindashing?
0001D4BA 6600 0000                  		bne.w	loc2_1AC8E		; if set, branch
0001D4BE 0C28 0008 001C             		cmpi.b	#8,anim(a0)		; is anim duck
0001D4C4 6600 0000                  		bne.w	locret2_1AC8C		; if not, return
0001D4C8 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
0001D4CC 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
0001D4D0 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
0001D4D4 117C 001F 001C             		move.b	#$1F,anim(a0)		; set spindash anim (9 in s2)
0001D4DA 303C 00AB                  		move.w	#$AB,d0			; spin sound ($E0 in s2)
0001D4DE 4EB9 0000 325C             		jsr	(PlaySound_Special).l	; play spin sound
0001D4E4 588F                       		addq.l	#4,sp			; increment stack ptr
0001D4E6 117C 0001 0039             		move.b	#1,$39(a0)		; set spindash flag
0001D4EC 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
0001D4F2 0C28 000C 0028             		cmpi.b	#$C,subtype(a0)		; ??? oxygen remaining?
0001D4F8 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; ??? $D11C only seems
0001D4FE                            						; to be used in spindash 
0001D4FE                            loc2_1AC84:
0001D4FE 4EBA FA6A                  		jsr	Sonic_LevelBound
0001D502 4EB9 0000 0000             		jsr	Sonic_AnglePos
0001D508                             
0001D508                            locret2_1AC8C:
0001D508 4E75                       		rts	
0001D50A                            ; ---------------------------------------------------------------------------
0001D50A                             
0001D50A                            loc2_1AC8E:
0001D50A 117C 001F 001C             		move.b	#$1F,anim(a0)
0001D510 1038 F602                  		move.b	($FFFFF602).w,d0	; read controller
0001D514 0800 0001                  		btst	#1,d0			; check down button
0001D518 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
0001D51C 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
0001D522 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
0001D528 117C 0002 001C             		move.b	#2,anim(a0)		; set animation to roll
0001D52E 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
0001D532 117C 0000 0039             		move.b	#0,$39(a0)		; clear Spin Dash flag
0001D538 7000                       		moveq	#0,d0
0001D53A 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
0001D53E D040                       		add.w	d0,d0			; double it
0001D540 317B 0000 0020             		move.w	spdsh_norm(pc,d0.w),inertia(a0) ; get normal speed
0001D546 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
0001D54A 6700                       		beq.s	loc2_1ACD0		; if no, branch
0001D54C 317B 0000 0020             		move.w	spdsh_super(pc,d0.w),inertia(a0) ; get super speed
0001D552                             
0001D552                            loc2_1ACD0:					; TODO: figure this out
0001D552 3028 0020                  		move.w	inertia(a0),d0		; get inertia
0001D556 0440 0800                  		subi.w	#$800,d0		; subtract $800
0001D55A D040                       		add.w	d0,d0			; double it
0001D55C 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
0001D560 4440                       		neg.w	d0			; negate it
0001D562 0640 2000                  		addi.w	#$2000,d0		; add $2000
0001D566 31C0 FC00                  		move.w	d0,($FFFFFC00).w	; move to $EED0
0001D56A 0828 0000 0022             		btst	#0,status(a0)		; is sonic facing right?
0001D570 6700                       		beq.s	loc2_1ACF4		; if not, branch
0001D572 4468 0020                  		neg.w	inertia(a0)			; negate inertia
0001D576                             
0001D576                            loc2_1ACF4:
0001D576 08E8 0002 0022             		bset	#2,status(a0)		; set unused (in s1) flag
0001D57C 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation
0001D582 303C 00B6                  		move.w	#$B6,d0			; spin release sound
0001D586 4EB9 0000 3212             		jsr	(PlaySound).l	; play it!
0001D58C 11FC 0008 FF5B             		move.b	#8,($FFFFFF5B).w 	; set afterimage counter to 8
0001D592 6000 0000                  		bra.w	loc2_1AD78
0001D596                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001D596                            
0001D596                            spdsh_norm:
0001D596 0800                       		dc.w  $800		; 0
0001D598 0880                       		dc.w  $880		; 1
0001D59A 0900                       		dc.w  $900		; 2
0001D59C 0980                       		dc.w  $980		; 3
0001D59E 0A00                       		dc.w  $A00		; 4
0001D5A0 0A80                       		dc.w  $A80		; 5
0001D5A2 0B00                       		dc.w  $B00		; 6
0001D5A4 0B80                       		dc.w  $B80		; 7
0001D5A6 0C00                       		dc.w  $C00		; 8
0001D5A8                             
0001D5A8                            spdsh_super:
0001D5A8 0B00                       		dc.w  $B00		; 0
0001D5AA 0B80                       		dc.w  $B80		; 1
0001D5AC 0C00                       		dc.w  $C00		; 2
0001D5AE 0C80                       		dc.w  $C80		; 3
0001D5B0 0D00                       		dc.w  $D00		; 4
0001D5B2 0D80                       		dc.w  $D80		; 5
0001D5B4 0E00                       		dc.w  $E00		; 6
0001D5B6 0E80                       		dc.w  $E80		; 7
0001D5B8 0F00                       		dc.w  $F00		; 8
0001D5BA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001D5BA                             
0001D5BA                            loc2_1AD30:				; If still charging the dash...
0001D5BA 4A68 003A                  		tst.w	$3A(a0)		; check charge count
0001D5BE 6700                       		beq.s	loc2_1AD48	; if zero, branch
0001D5C0 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
0001D5C4 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
0001D5C6 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
0001D5CA 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
0001D5CC 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
0001D5D2                             
0001D5D2                            loc2_1AD48:
0001D5D2 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
0001D5D6 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
0001D5DA 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
0001D5DE 317C 1F00 001C             		move.w	#$1F00,anim(a0)		; reset spdsh animation
0001D5E4 303C 00AB                  		move.w	#$AB,d0			; was $E0 in sonic 2
0001D5E8 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
0001D5EE 4EB9 0000 3212             		jsr	(PlaySound).l	; play charge sound
0001D5F4 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
0001D5FA 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
0001D600 6500                       		bcs.s	loc2_1AD78		; if not, then branch
0001D602 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
0001D608                             
0001D608                            loc2_1AD78:
0001D608 588F                       		addq.l	#4,sp			; increase stack ptr
0001D60A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
0001D610 6700                       		beq.s	loc2_1AD8C
0001D612 6400                       		bcc.s	loc2_1AD88
0001D614 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001D618                             
0001D618                            loc2_1AD88:
0001D618 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001D61C                             
0001D61C                            loc2_1AD8C:
0001D61C 4EBA F94C                  		jsr	Sonic_LevelBound
0001D620 4EB9 0000 0000             		jsr	Sonic_AnglePos
0001D626                            ;		move.w	#$60,($FFFFF73E).w	; reset looking up/down
0001D626 4E75                       		rts
0001D628                            ; End of function Sonic_SpinDash
0001D628                            
0001D628                            
0001D628                            ; ---------------------------------------------------------------------------
0001D628                            ; Subroutine to	slow Sonic walking up a	slope
0001D628                            ; ---------------------------------------------------------------------------
0001D628                            
0001D628                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D628                            
0001D628                            
0001D628                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
0001D628 1028 0026                  	move.b	angle(a0),d0
0001D62C 0600 0060                  	addi.b	#$60,d0
0001D630 0C00 00C0                  	cmpi.b	#$C0,d0
0001D634 6400                       	bcc.s	locret_13508
0001D636 1028 0026                  	move.b	angle(a0),d0
0001D63A 4EB9 0000 8DA4             	jsr	(CalcSine).l
0001D640 C1FC 0020                  	muls.w	#$20,d0
0001D644 E080                       	asr.l	#8,d0
0001D646 4A68 0020                  	tst.w	inertia(a0)
0001D64A 6700                       	beq.s	locret_13508
0001D64C 6B00                       	bmi.s	loc_13504
0001D64E 4A40                       	tst.w	d0
0001D650 6700                       	beq.s	locret_13502
0001D652 D168 0020                  	add.w	d0,inertia(a0)	; change Sonic's $14
0001D656                            
0001D656                            locret_13502:
0001D656 4E75                       		rts	
0001D658                            ; ===========================================================================
0001D658                            
0001D658                            loc_13504:
0001D658 D168 0020                  		add.w	d0,inertia(a0)
0001D65C                            
0001D65C                            locret_13508:
0001D65C 4E75                       		rts	
0001D65E                            ; End of function Sonic_SlopeResist
0001D65E                            
0001D65E                            ; ---------------------------------------------------------------------------
0001D65E                            ; Subroutine to	push Sonic down	a slope	while he's rolling
0001D65E                            ; ---------------------------------------------------------------------------
0001D65E                            
0001D65E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D65E                            
0001D65E                            
0001D65E                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
0001D65E 1028 0026                  		move.b	$26(a0),d0
0001D662 0600 0060                  		addi.b	#$60,d0
0001D666 0C00 00C0                  		cmpi.b	#-$40,d0
0001D66A 6400                       		bcc.s	locret_13544
0001D66C 1028 0026                  		move.b	$26(a0),d0
0001D670 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001D676 C1FC 0050                  		muls.w	#$50,d0
0001D67A E080                       		asr.l	#8,d0
0001D67C 4A68 0020                  		tst.w	inertia(a0)
0001D680 6B00                       		bmi.s	loc_1353A
0001D682 4A40                       		tst.w	d0
0001D684 6A00                       		bpl.s	loc_13534
0001D686 E480                       		asr.l	#2,d0
0001D688                            
0001D688                            loc_13534:
0001D688 D168 0020                  		add.w	d0,inertia(a0)
0001D68C 4E75                       		rts	
0001D68E                            ; ===========================================================================
0001D68E                            
0001D68E                            loc_1353A:
0001D68E 4A40                       		tst.w	d0
0001D690 6B00                       		bmi.s	loc_13540
0001D692 E480                       		asr.l	#2,d0
0001D694                            
0001D694                            loc_13540:
0001D694 D168 0020                  		add.w	d0,inertia(a0)
0001D698                            
0001D698                            locret_13544:
0001D698 4E75                       		rts	
0001D69A                            ; End of function Sonic_RollRepel
0001D69A                            
0001D69A                            ; ---------------------------------------------------------------------------
0001D69A                            ; Subroutine to	push Sonic down	a slope
0001D69A                            ; ---------------------------------------------------------------------------
0001D69A                            
0001D69A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D69A                            
0001D69A                            
0001D69A                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
0001D69A 4E71                       		nop	
0001D69C 4A28 0038                  		tst.b	$38(a0)
0001D6A0 6600                       		bne.s	locret_13580
0001D6A2 4A68 003E                  		tst.w	parent(a0)
0001D6A6 6600                       		bne.s	loc_13582
0001D6A8 1028 0026                  		move.b	$26(a0),d0
0001D6AC 0600 0020                  		addi.b	#$20,d0
0001D6B0 0200 00C0                  		andi.b	#$C0,d0
0001D6B4 6700                       		beq.s	locret_13580
0001D6B6 3028 0020                  		move.w	inertia(a0),d0
0001D6BA 6A00                       		bpl.s	loc_1356A
0001D6BC 4440                       		neg.w	d0
0001D6BE                            
0001D6BE                            loc_1356A:
0001D6BE 0C40 0280                  		cmpi.w	#$280,d0
0001D6C2 6400                       		bcc.s	locret_13580
0001D6C4 4268 0020                  		clr.w	inertia(a0)
0001D6C8 08E8 0001 0022             		bset	#1,status(a0)
0001D6CE 317C 001E 003E             		move.w	#$1E,parent(a0)
0001D6D4                            
0001D6D4                            locret_13580:
0001D6D4 4E75                       		rts	
0001D6D6                            ; ===========================================================================
0001D6D6                            
0001D6D6                            loc_13582:
0001D6D6 5368 003E                  		subq.w	#1,parent(a0)
0001D6DA 4E75                       		rts	
0001D6DC                            ; End of function Sonic_SlopeRepel
0001D6DC                            
0001D6DC                            ; ---------------------------------------------------------------------------
0001D6DC                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001D6DC                            ; ---------------------------------------------------------------------------
0001D6DC                            
0001D6DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6DC                            
0001D6DC                            
0001D6DC                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001D6DC 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001D6E0 6700                       		beq.s	Sonic_JumpFlip	; if already 0,	branch
0001D6E2 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001D6E4                            
0001D6E4 5400                       		addq.b	#2,d0		; increase angle
0001D6E6 6400                       		bcc.s	loc_13596
0001D6E8 7000                       		moveq	#0,d0
0001D6EA                            
0001D6EA                            loc_13596:
0001D6EA 6000                       		bra.s	loc_1359E
0001D6EC                            ; ===========================================================================
0001D6EC                            
0001D6EC                            loc_13598:
0001D6EC 5500                       		subq.b	#2,d0		; decrease angle
0001D6EE 6400                       		bcc.s	loc_1359E
0001D6F0 7000                       		moveq	#0,d0
0001D6F2                            
0001D6F2                            loc_1359E:
0001D6F2 1140 0026                  		move.b	d0,$26(a0)
0001D6F6                            
0001D6F6                            ;locret_135A2:
0001D6F6                            ;		rts	
0001D6F6                            ; End of function Sonic_JumpAngle
0001D6F6                            
0001D6F6                            ; ---------------------------------------------------------------------------
0001D6F6                            ; Updates Sonic's secondary angle if he's tumbling
0001D6F6                            ; ---------------------------------------------------------------------------
0001D6F6                            
0001D6F6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001D6F6                            
0001D6F6                            ; loc_1AE64:
0001D6F6                            Sonic_JumpFlip:
0001D6F6 1028 0031                  	move.b	flip_angle(a0),d0
0001D6FA 6700                       	beq.s	return_1AEA8
0001D6FC 4A68 0020                  	tst.w	inertia(a0)
0001D700 6B00                       	bmi.s	Sonic_JumpLeftFlip
0001D702                            ; loc_1AE70:
0001D702                            Sonic_JumpRightFlip:
0001D702 1228 0034                  	move.b	flip_speed(a0),d1
0001D706 D001                       	add.b	d1,d0
0001D708 6400                       	bcc.s	BranchTo_Sonic_JumpFlipSet
0001D70A 5328 0033                  	subq.b	#1,flips_remaining(a0)
0001D70E 6400                       	bcc.s	BranchTo_Sonic_JumpFlipSet
0001D710 117C 0000 0033             	move.b	#0,flips_remaining(a0)
0001D716 7000                       	moveq	#0,d0
0001D718                            
0001D718                            BranchTo_Sonic_JumpFlipSet 
0001D718 6000                       	bra.s	Sonic_JumpFlipSet
0001D71A                            ; ===========================================================================
0001D71A                            ; loc_1AE88:
0001D71A                            Sonic_JumpLeftFlip:
0001D71A 4A28 0035                  	tst.b	flip_turned(a0)
0001D71E 66E2                       	bne.s	Sonic_JumpRightFlip
0001D720 1228 0034                  	move.b	flip_speed(a0),d1
0001D724 9001                       	sub.b	d1,d0
0001D726 6400                       	bcc.s	Sonic_JumpFlipSet
0001D728 5328 0033                  	subq.b	#1,flips_remaining(a0)
0001D72C 6400                       	bcc.s	Sonic_JumpFlipSet
0001D72E 117C 0000 0033             	move.b	#0,flips_remaining(a0)
0001D734 7000                       	moveq	#0,d0
0001D736                            ; loc_1AEA4:
0001D736                            Sonic_JumpFlipSet:
0001D736 1140 0031                  	move.b	d0,flip_angle(a0)
0001D73A                            
0001D73A                            return_1AEA8:
0001D73A 4E75                       	rts
0001D73C                            ; End of function Sonic_JumpFlip
0001D73C                            
0001D73C                            ; ---------------------------------------------------------------------------
0001D73C                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001D73C                            ; ---------------------------------------------------------------------------
0001D73C                            
0001D73C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D73C                            
0001D73C                            
0001D73C                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
0001D73C 3228 0010                  		move.w	x_vel(a0),d1
0001D740 3428 0012                  		move.w	y_vel(a0),d2
0001D744 4EB9 0000 9072             		jsr	(CalcAngle).l
0001D74A 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001D74E 0400 0020                  		subi.b	#$20,d0
0001D752 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001D756 0200 00C0                  		andi.b	#$C0,d0
0001D75A 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001D75E 0C00 0040                  		cmpi.b	#$40,d0
0001D762 6700 0000                  		beq.w	loc_13680
0001D766 0C00 0080                  		cmpi.b	#$80,d0
0001D76A 6700 0000                  		beq.w	loc_136E2
0001D76E 0C00 00C0                  		cmpi.b	#-$40,d0
0001D772 6700 0000                  		beq.w	loc_1373E
0001D776 6100 0000                  		bsr.w	Sonic_HitWall
0001D77A 4A41                       		tst.w	d1
0001D77C 6A00                       		bpl.s	loc_135F0
0001D77E 9368 0008                  		sub.w	d1,8(a0)
0001D782 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D788                            
0001D788                            loc_135F0:
0001D788 6100 0000                  		bsr.w	sub_14EB4
0001D78C 4A41                       		tst.w	d1
0001D78E 6A00                       		bpl.s	loc_13602
0001D790 D368 0008                  		add.w	d1,8(a0)
0001D794 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D79A                            
0001D79A                            loc_13602:
0001D79A 6100 0000                  		bsr.w	Sonic_HitFloor
0001D79E 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
0001D7A2 4A41                       		tst.w	d1
0001D7A4 6A00                       		bpl.s	locret_1367E
0001D7A6 1428 0012                  		move.b	y_vel(a0),d2
0001D7AA 5002                       		addq.b	#8,d2
0001D7AC 4402                       		neg.b	d2
0001D7AE B202                       		cmp.b	d2,d1
0001D7B0 6C00                       		bge.s	loc_1361E
0001D7B2 B002                       		cmp.b	d2,d0
0001D7B4 6D00                       		blt.s	locret_1367E
0001D7B6                            
0001D7B6                            loc_1361E:
0001D7B6 D368 000C                  		add.w	d1,$C(a0)
0001D7BA 1143 0026                  		move.b	d3,$26(a0)
0001D7BE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001D7C2 117C 0000 001C             		move.b	#0,anim(a0)
0001D7C8 1003                       		move.b	d3,d0
0001D7CA 0600 0020                  		addi.b	#$20,d0
0001D7CE 0200 0040                  		andi.b	#$40,d0
0001D7D2 6600                       		bne.s	loc_1365C
0001D7D4 1003                       		move.b	d3,d0
0001D7D6 0600 0010                  		addi.b	#$10,d0
0001D7DA 0200 0020                  		andi.b	#$20,d0
0001D7DE 6700                       		beq.s	loc_1364E
0001D7E0 E0E8 0012                  		asr	y_vel(a0)
0001D7E4 6000                       		bra.s	loc_13670
0001D7E6                            ; ===========================================================================
0001D7E6                            
0001D7E6                            loc_1364E:
0001D7E6 317C 0000 0012             		move.w	#0,y_vel(a0)
0001D7EC 3168 0010 0020             		move.w	x_vel(a0),inertia(a0)
0001D7F2 4E75                       		rts	
0001D7F4                            ; ===========================================================================
0001D7F4                            
0001D7F4                            loc_1365C:
0001D7F4 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D7FA 0C68 0FC0 0012             		cmpi.w	#$FC0,y_vel(a0)
0001D800 6F00                       		ble.s	loc_13670
0001D802 317C 0FC0 0012             		move.w	#$FC0,y_vel(a0)
0001D808                            
0001D808                            loc_13670:
0001D808 3168 0012 0020             		move.w	y_vel(a0),inertia(a0)
0001D80E 4A03                       		tst.b	d3
0001D810 6A00                       		bpl.s	locret_1367E
0001D812 4468 0020                  		neg.w	inertia(a0)
0001D816                            
0001D816                            locret_1367E:
0001D816 4E75                       		rts	
0001D818                            ; ===========================================================================
0001D818                            
0001D818                            loc_13680:
0001D818 6100 0000                  		bsr.w	Sonic_HitWall
0001D81C 4A41                       		tst.w	d1
0001D81E 6A00                       		bpl.s	loc_1369A
0001D820 9368 0008                  		sub.w	d1,8(a0)
0001D824 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D82A 3168 0012 0020             		move.w	y_vel(a0),inertia(a0)
0001D830 4E75                       		rts	
0001D832                            ; ===========================================================================
0001D832                            
0001D832                            loc_1369A:
0001D832 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001D836 4A41                       		tst.w	d1
0001D838 6A00                       		bpl.s	loc_136B4
0001D83A 9368 000C                  		sub.w	d1,$C(a0)
0001D83E 4A68 0012                  		tst.w	y_vel(a0)
0001D842 6A00                       		bpl.s	locret_136B2
0001D844 317C 0000 0012             		move.w	#0,y_vel(a0)
0001D84A                            
0001D84A                            locret_136B2:
0001D84A 4E75                       		rts	
0001D84C                            ; ===========================================================================
0001D84C                            
0001D84C                            loc_136B4:
0001D84C 4A68 0012                  		tst.w	y_vel(a0)
0001D850 6B00                       		bmi.s	locret_136E0
0001D852 6100 0000                  		bsr.w	Sonic_HitFloor
0001D856 4A41                       		tst.w	d1
0001D858 6A00                       		bpl.s	locret_136E0
0001D85A D368 000C                  		add.w	d1,$C(a0)
0001D85E 1143 0026                  		move.b	d3,$26(a0)
0001D862 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001D866 117C 0000 001C             		move.b	#0,anim(a0)
0001D86C 317C 0000 0012             		move.w	#0,y_vel(a0)
0001D872 3168 0010 0020             		move.w	x_vel(a0),inertia(a0)
0001D878                            
0001D878                            locret_136E0:
0001D878 4E75                       		rts	
0001D87A                            ; ===========================================================================
0001D87A                            
0001D87A                            loc_136E2:
0001D87A 6100 0000                  		bsr.w	Sonic_HitWall
0001D87E 4A41                       		tst.w	d1
0001D880 6A00                       		bpl.s	loc_136F4
0001D882 9368 0008                  		sub.w	d1,8(a0)
0001D886 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D88C                            
0001D88C                            loc_136F4:
0001D88C 6100 0000                  		bsr.w	sub_14EB4
0001D890 4A41                       		tst.w	d1
0001D892 6A00                       		bpl.s	loc_13706
0001D894 D368 0008                  		add.w	d1,8(a0)
0001D898 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D89E                            
0001D89E                            loc_13706:
0001D89E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001D8A2 4A41                       		tst.w	d1
0001D8A4 6A00                       		bpl.s	locret_1373C
0001D8A6 9368 000C                  		sub.w	d1,$C(a0)
0001D8AA 1003                       		move.b	d3,d0
0001D8AC 0600 0020                  		addi.b	#$20,d0
0001D8B0 0200 0040                  		andi.b	#$40,d0
0001D8B4 6600                       		bne.s	loc_13726
0001D8B6 317C 0000 0012             		move.w	#0,y_vel(a0)
0001D8BC 4E75                       		rts	
0001D8BE                            ; ===========================================================================
0001D8BE                            
0001D8BE                            loc_13726:
0001D8BE 1143 0026                  		move.b	d3,$26(a0)
0001D8C2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001D8C6 3168 0012 0020             		move.w	y_vel(a0),inertia(a0)
0001D8CC 4A03                       		tst.b	d3
0001D8CE 6A00                       		bpl.s	locret_1373C
0001D8D0 4468 0020                  		neg.w	inertia(a0)
0001D8D4                            
0001D8D4                            locret_1373C:
0001D8D4 4E75                       		rts	
0001D8D6                            ; ===========================================================================
0001D8D6                            
0001D8D6                            loc_1373E:
0001D8D6 6100 0000                  		bsr.w	sub_14EB4
0001D8DA 4A41                       		tst.w	d1
0001D8DC 6A00                       		bpl.s	loc_13758
0001D8DE D368 0008                  		add.w	d1,8(a0)
0001D8E2 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D8E8 3168 0012 0020             		move.w	y_vel(a0),inertia(a0)
0001D8EE 4E75                       		rts	
0001D8F0                            ; ===========================================================================
0001D8F0                            
0001D8F0                            loc_13758:
0001D8F0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001D8F4 4A41                       		tst.w	d1
0001D8F6 6A00                       		bpl.s	loc_13772
0001D8F8 9368 000C                  		sub.w	d1,$C(a0)
0001D8FC 4A68 0012                  		tst.w	y_vel(a0)
0001D900 6A00                       		bpl.s	locret_13770
0001D902 317C 0000 0012             		move.w	#0,y_vel(a0)
0001D908                            
0001D908                            locret_13770:
0001D908 4E75                       		rts	
0001D90A                            ; ===========================================================================
0001D90A                            
0001D90A                            loc_13772:
0001D90A 4A68 0012                  		tst.w	y_vel(a0)
0001D90E 6B00                       		bmi.s	locret_1379E
0001D910 6100 0000                  		bsr.w	Sonic_HitFloor
0001D914 4A41                       		tst.w	d1
0001D916 6A00                       		bpl.s	locret_1379E
0001D918 D368 000C                  		add.w	d1,$C(a0)
0001D91C 1143 0026                  		move.b	d3,$26(a0)
0001D920 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001D924 117C 0000 001C             		move.b	#0,anim(a0)
0001D92A 317C 0000 0012             		move.w	#0,y_vel(a0)
0001D930 3168 0010 0020             		move.w	x_vel(a0),inertia(a0)
0001D936                            
0001D936                            locret_1379E:
0001D936 4E75                       		rts	
0001D938                            ; End of function Sonic_Floor
0001D938                            
0001D938                            ; ---------------------------------------------------------------------------
0001D938                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001D938                            ; ---------------------------------------------------------------------------
0001D938                            
0001D938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D938                            
0001D938                            
0001D938                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001D938                            ;		bclr    #7,status(a0)
0001D938                            ;		clr.b	(Transforming_Flag-1).w
0001D938 08A8 0007 0022             		bclr	#7,$22(a0)	; clear jumpdash flag
0001D93E 0828 0004 0022             		btst	#4,status(a0)
0001D944 6700                       		beq.s	loc_137AE
0001D946 4A28 0039                  		tst.b	spindash_flag(a0)
0001D94A 6600                       		bne.s	loc_137AE
0001D94C 117C 0000 001C             		move.b	#0,anim(a0)
0001D952                            
0001D952                            loc_137AE:
0001D952                            ;		clr.b	(Transforming_Flag).w
0001D952 4238 FF7F                  		clr.b	($FFFFFF7F).w 	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
0001D956 08A8 0005 0022             		bclr	#5,status(a0)
0001D95C 08A8 0001 0022             		bclr	#1,status(a0)
0001D962 08A8 0004 0022             		bclr	#4,status(a0)
0001D968 0828 0002 0022             		btst	#2,status(a0)
0001D96E 6700                       		beq.s	loc_137E4
0001D970 08A8 0002 0022             		bclr	#2,status(a0)
0001D976 117C 0013 0016             		move.b	#$13,$16(a0)
0001D97C 117C 0009 0017             		move.b	#9,$17(a0)
0001D982 117C 0000 001C             		move.b	#0,anim(a0)	; use running/walking animation
0001D988 5B68 000C                  		subq.w	#5,$C(a0)
0001D98C                            
0001D98C                            loc_137E4:
0001D98C 117C 0000 003C             		move.b	#0,$3C(a0)
0001D992 31FC 0000 F7D0             		move.w	#0,(Chain_Bonus_counter).w
0001D998 4E75                       		rts	
0001D99A                            ; End of function Sonic_ResetOnFloor
0001D99A                            
0001D99A                            ; ===========================================================================
0001D99A                            ; ---------------------------------------------------------------------------
0001D99A                            ; Sonic when he gets hurt
0001D99A                            ; ---------------------------------------------------------------------------
0001D99A                            ; loc_1B120: Obj_01_Sub_4:
0001D99A                            Obj01_Hurt:
0001D99A 4A78 FFFA                  	tst.w	($FFFFFFFA).w
0001D99E 6700                       	beq.s	Obj01_Hurt_Normal
0001D9A0 0838 0004 F605             	btst	#4,(Ctrl_1_Press).w
0001D9A6 6700                       	beq.s	Obj01_Hurt_Normal
0001D9A8 31FC 0001 FE08             	move.w	#1,(Debug_placement_mode).w
0001D9AE 4238 F7CC                  	clr.b	(Control_Locked).w
0001D9B2 4E75                       	rts
0001D9B4                            ; ---------------------------------------------------------------------------
0001D9B4                            ; loc_1B13A:
0001D9B4                            Obj01_Hurt_Normal:
0001D9B4 4A28 0025                  	tst.b	routine_secondary(a0)
0001D9B8 6B00 0000                  	bmi.w	Sonic_HurtInstantRecover
0001D9BC 4EBA 8224                  	jsr	SpeedToPos
0001D9C0 0668 0030 0012             	addi.w	#$30,y_vel(a0)
0001D9C6 0828 0006 0022             	btst	#6,status(a0)
0001D9CC 6700                       	beq.s	hurt1
0001D9CE 0468 0020 0012             	subi.w	#$20,y_vel(a0)
0001D9D4                            hurt1:
0001D9D4 0C78 FF00 F72C             	cmpi.w	#-$100,(Camera_Min_Y_pos).w
0001D9DA 6600                       	bne.s	hurt2
0001D9DC 0268 07FF 000C             	andi.w	#$7FF,y_pos(a0)
0001D9E2                            hurt2:
0001D9E2 6100 0000                  	bsr.w	Sonic_HurtStop
0001D9E6 6100 F582                  	bsr.w	Sonic_LevelBound
0001D9EA 6100 ED48                  	bsr.w	Sonic_RecordPos
0001D9EE 6100 ED6E                  	bsr.w	Sonic_Water
0001D9F2 6100 0000                  	bsr.w	Sonic_Animate
0001D9F6 6100 0000                  	bsr.w	LoadSonicDynPLC
0001D9FA 4EFA 824C                  	jmp	DisplaySprite
0001D9FE                            ; ===========================================================================
0001D9FE                            ; ---------------------------------------------------------------------------
0001D9FE                            ; Subroutine to	stop Sonic falling after he's been hurt
0001D9FE                            ; ---------------------------------------------------------------------------
0001D9FE                            
0001D9FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9FE                            
0001D9FE                            
0001D9FE                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001D9FE 3038 F72E                  	move.w	(Camera_Max_Y_pos_now).w,d0
0001DA02 0640 00E0                  	addi.w	#$E0,d0
0001DA06 B068 000C                  	cmp.w	y_pos(a0),d0
0001DA0A 6D00 F5CE                  	blt.w	KillCharacter_Jmp
0001DA0E 6100 FD2C                  	bsr.w	Sonic_Floor
0001DA12 0828 0001 0022             	btst	#1,status(a0)
0001DA18 6600                       	bne.s	return_1B1C8
0001DA1A 7000                       	moveq	#0,d0
0001DA1C 3140 0012                  	move.w	d0,y_vel(a0)
0001DA20 3140 0010                  	move.w	d0,x_vel(a0)
0001DA24 3140 0010                  	move.w	d0,x_vel(a0)
0001DA28 3140 0020                  	move.w	d0,inertia(a0)
0001DA2C 117C 0000 001C             	move.b	#0,anim(a0)
0001DA32 5528 0024                  	subq.b	#2,routine(a0)	; => Obj01_Control
0001DA36 117C 0078 0030             	move.b	#$78,invulnerable_time(a0)
0001DA3C 117C 0000 0039             	move.b	#0,spindash_flag(a0)
0001DA42                            
0001DA42                            return_1B1C8:
0001DA42 4E75                       	rts
0001DA44                            ; ===========================================================================
0001DA44                            ; makes Sonic recover control after being hurt before landing
0001DA44                            ; loc_1B1CA:
0001DA44                            Sonic_HurtInstantRecover:
0001DA44 5528 0024                  	subq.b	#2,routine(a0)	; => Obj01_Control
0001DA48 117C 0000 0025             	move.b	#0,routine_secondary(a0)
0001DA4E 4EBA ECE4                  	jsr	Sonic_RecordPos
0001DA52 4EB9 0000 0000             	jsr	Sonic_Animate
0001DA58 4EB9 0000 0000             	jsr	LoadSonicDynPLC
0001DA5E 4EFA 81E8                  	jmp	DisplaySprite
0001DA62                            ; ---------------------------------------------------------------------------
0001DA62                            ; Sonic	when he	dies
0001DA62                            ; ---------------------------------------------------------------------------
0001DA62                            
0001DA62                            Obj01_Death:				; XREF: Obj01_Index
0001DA62 4A78 FFFA                  	tst.w	($FFFFFFFA).w
0001DA66 6700                       	beq.s	@cont
0001DA68 0838 0004 F605             	btst	#4,(Ctrl_1_Press).w
0001DA6E 6700                       	beq.s	@cont
0001DA70 31FC 0001 FE08             	move.w	#1,(Debug_placement_mode).w
0001DA76 4238 F7CC                  	clr.b	(Control_Locked).w
0001DA7A 4E75                       	rts
0001DA7C                            @cont:
0001DA7C 4228 0034                  	clr.b	speedshoes_time(a0)
0001DA80 6100 0000                  	bsr.w	CheckGameOver
0001DA84 4EB9 0000 0000             	jsr	ObjectMoveAndFall
0001DA8A 6100 ECA8                  	bsr.w	Sonic_RecordPos
0001DA8E 6100 0000                  	bsr.w	Sonic_Animate
0001DA92 6100 0000                  	bsr.w	LoadSonicDynPLC
0001DA96 4EFA 81B0                  	jmp	DisplaySprite
0001DA9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA9A                            
0001DA9A                            
0001DA9A                            GameOver:				; XREF: Obj01_Death
0001DA9A 3038 F704                  		move.w	($FFFFF704).w,d0
0001DA9E 0640 0100                  		addi.w	#$100,d0
0001DAA2 B068 000C                  		cmp.w	$C(a0),d0
0001DAA6 6C00 0000                  		bge.w	locret_13900
0001DAAA 317C FFC8 0012             		move.w	#-$38,y_vel(a0)
0001DAB0 5428 0024                  		addq.b	#2,routine(a0)
0001DAB4 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001DAB8 0C38 0001 FE12             		cmpi.b	#1,($FFFFFE12).w	; are lives at min?
0001DABE 6D00                       		blt.s	@skipsub
0001DAC0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
0001DAC4 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
0001DAC8 6600                       		bne.s	loc_138D4
0001DACA 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
0001DAD2 4239 0020 0001             		clr.b	($200001).l ; set lives in sram to 0
0001DAD8 4239 0020 011F             		clr.b	($20011F).l ; set lives in sram to 0
0001DADE 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
0001DAE6                            
0001DAE6                            @skipsub:
0001DAE6 317C 0000 003A             		move.w	#0,$3A(a0)
0001DAEC 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
0001DAF2                            ;		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001DAF2                            ;		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
0001DAF2 4238 FE1A                  		clr.b	($FFFFFE1A).w
0001DAF6                            
0001DAF6                            loc_138C2:
0001DAF6 303C 0027                  		move.w	#$27,d0
0001DAFA 4EB9 0000 3212             		jsr	(PlaySound).l	; play game over music
0001DB00 7003                       		moveq	#3,d0
0001DB02 4EF9 0000 36F6             		jmp	(LoadPLC).l	; load game over patterns
0001DB08                            ; ===========================================================================
0001DB08                            
0001DB08                            loc_138D4:
0001DB08 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001DB0E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
0001DB12 6700                       		beq.s	locret_13900	; if not, branch
0001DB14 317C 0000 003A             		move.w	#0,$3A(a0)
0001DB1A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001DB20 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001DB26 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001DB2C 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001DB32 60C2                       		bra.s	loc_138C2
0001DB34                            ; ===========================================================================
0001DB34                            
0001DB34                            locret_13900:
0001DB34 4E75                       		rts	
0001DB36                            ; End of function GameOver
0001DB36                            
0001DB36                            ; ===========================================================================
0001DB36                            ; ---------------------------------------------------------------------------
0001DB36                            ; Sonic	when the level is restarted
0001DB36                            ; ---------------------------------------------------------------------------
0001DB36                            
0001DB36                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001DB36 4A68 003A                  		tst.w	spindash_counter(a0)
0001DB3A 6700                       		beq.s	locret_13914
0001DB3C 5368 003A                  		subq.w	#1,spindash_counter(a0)	; subtract 1 from time delay
0001DB40 6600                       		bne.s	locret_13914
0001DB42 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001DB48 4EB9 0001 483A             		jsr Save_Progress
0001DB4E                            
0001DB4E                            locret_13914:
0001DB4E 4E75                       		rts	
0001DB50                            
0001DB50                            ; ---------------------------------------------------------------------------
0001DB50                            ; Sonic when he's drowning
0001DB50                            ; ---------------------------------------------------------------------------
0001DB50                             
0001DB50                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001DB50                             
0001DB50                             
0001DB50                            Sonic_Drowned:
0001DB50 4EBA 8090                          jsr   SpeedToPos              ; Make Sonic able to move
0001DB54 0668 0010 0012                     addi.w  #$10,y_vel(a0)          ; Apply gravity
0001DB5A 4EBA EBD8                          jsr   Sonic_RecordPos    ; Record position
0001DB5E 4EB9 0000 0000                     jsr   Sonic_Animate           ; Animate Sonic
0001DB64 4EB9 0000 0000                     jsr   LoadSonicDynPLC           ; Load Sonic's DPLCs
0001DB6A 4EFA 80DC                          jmp   DisplaySprite           ; And finally, display Sonic
0001DB6E                            ; ---------------------------------------------------------------------------
0001DB6E                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001DB6E                            ; ---------------------------------------------------------------------------
0001DB6E                            
0001DB6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB6E                            
0001DB6E                            
0001DB6E                            Sonic_Loops:				; XREF: Obj01_Control
0001DB6E                            	;	cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?	; MJ: Commented out, we don't want SLZ having any rolling chunks =P
0001DB6E                            	;	beq.s	loc_13926	; if yes, branch
0001DB6E 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
0001DB72 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001DB76                            
0001DB76                            loc_13926:
0001DB76 3028 000C                  		move.w	$0C(a0),d0				; MJ: Load Y position
0001DB7A 3228 0008                  		move.w	$08(a0),d1				; MJ: Load X position
0001DB7E 0240 0780                  		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
0001DB82 E348                       		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
0001DB84 EE49                       		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
0001DB86 0201 007F                  		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
0001DB8A D041                       		add.w	d1,d0					; MJ: add together
0001DB8C 2278 A400                  		movea.l	($FFFFA400).w,a1			; MJ: Load address of layout
0001DB90 1231 0000                  		move.b	(a1,d0.w),d1				; MJ: collect correct 128x128 chunk ID based on the position of Sonic
0001DB94                            
0001DB94 0C01 0075                  		cmp.b	#$75,d1					; MJ: is the chunk 75 (Top top left S Bend)
0001DB98 6700 F4A6                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DB9C 0C01 0076                  		cmp.b	#$76,d1					; MJ: is the chunk 76 (Top top right S Bend)
0001DBA0 6700 F49E                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DBA4 0C01 0077                  		cmp.b	#$77,d1					; MJ: is the chunk 77 (Top bottom left S Bend)
0001DBA8 6700 F496                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DBAC 0C01 0078                  		cmp.b	#$78,d1					; MJ: is the chunk 78 (Top bottom right S Bend)
0001DBB0 6700 F48E                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DBB4 0C01 0079                  		cmp.b	#$79,d1					; MJ: is the chunk 79 (Bottom top left S Bend)
0001DBB8 6700 F486                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DBBC 0C01 007A                  		cmp.b	#$7A,d1					; MJ: is the chunk 7A (Bottom top right S Bend)
0001DBC0 6700 F47E                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DBC4 0C01 007B                  		cmp.b	#$7B,d1					; MJ: is the chunk 7B (Bottom bottom left S Bend)
0001DBC8 6700 F476                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DBCC 0C01 007C                  		cmp.b	#$7C,d1					; MJ: is the chunk 7C (Bottom bottom right S Bend)
0001DBD0 6700 F46E                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DBD4                            
0001DBD4                            	;	cmp.b	($FFFFF7AE).w,d1			; MJ: this shite is commented out as it's used for loops (Which will be delt with by pathswappers)
0001DBD4                            	;	beq.w	Obj01_ChkRoll
0001DBD4                            	;	cmp.b	($FFFFF7AF).w,d1
0001DBD4                            	;	beq.w	Obj01_ChkRoll
0001DBD4                            	;	cmp.b	($FFFFF7AC).w,d1
0001DBD4                            	;	beq.s	loc_13976
0001DBD4                            	;	cmp.b	($FFFFF7AD).w,d1
0001DBD4                            	;	beq.s	loc_13966
0001DBD4 08A8 0006 0001             		bclr	#6,1(a0)
0001DBDA 4E75                       		rts	
0001DBDC                            ; ===========================================================================
0001DBDC                            
0001DBDC                            loc_13966:
0001DBDC 0828 0001 0022             		btst	#1,$22(a0)
0001DBE2 6700                       		beq.s	loc_13976
0001DBE4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001DBEA 4E75                       		rts	
0001DBEC                            ; ===========================================================================
0001DBEC                            
0001DBEC                            loc_13976:
0001DBEC 3428 0008                  		move.w	8(a0),d2
0001DBF0 0C02 002C                  		cmpi.b	#$2C,d2
0001DBF4 6400                       		bcc.s	loc_13988
0001DBF6 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001DBFC 4E75                       		rts	
0001DBFE                            ; ===========================================================================
0001DBFE                            
0001DBFE                            loc_13988:
0001DBFE 0C02 00E0                  		cmpi.b	#-$20,d2
0001DC02 6500                       		bcs.s	loc_13996
0001DC04 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001DC0A 4E75                       		rts	
0001DC0C                            ; ===========================================================================
0001DC0C                            
0001DC0C                            loc_13996:
0001DC0C 0828 0006 0001             		btst	#6,1(a0)
0001DC12 6600                       		bne.s	loc_139B2
0001DC14 1228 0026                  		move.b	$26(a0),d1
0001DC18 6700                       		beq.s	locret_139C2
0001DC1A 0C01 0080                  		cmpi.b	#-$80,d1
0001DC1E 6200                       		bhi.s	locret_139C2
0001DC20 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001DC26 4E75                       		rts	
0001DC28                            ; ===========================================================================
0001DC28                            
0001DC28                            loc_139B2:
0001DC28 1228 0026                  		move.b	$26(a0),d1
0001DC2C 0C01 0080                  		cmpi.b	#-$80,d1
0001DC30 6300                       		bls.s	locret_139C2
0001DC32 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001DC38                            
0001DC38                            locret_139C2:
0001DC38 4E75                       		rts	
0001DC3A                            ; End of function Sonic_Loops
0001DC3A                            
0001DC3A                            ; ---------------------------------------------------------------------------
0001DC3A                            ; Subroutine to	animate	Sonic's sprites
0001DC3A                            ; ---------------------------------------------------------------------------
0001DC3A                            
0001DC3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC3A                            
0001DC3A                            
0001DC3A                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001DC3A                            
0001DC3A 43F9 0000 0000             		lea	(SonicAniData).l,a1
0001DC40 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001DC44 6700                       		beq.s	loc_12612
0001DC46 43F9 0000 0000             		lea	(SuperSonicAniData).l,a1
0001DC4C                            
0001DC4C                            loc_12612:
0001DC4C 7000                       		moveq	#0,d0
0001DC4E 1028 001C                  		move.b	anim(a0),d0
0001DC52 B028 001D                  		cmp.b	next_anim(a0),d0
0001DC56 6700                       		beq.s	SAnim_Do
0001DC58 1140 001D                  		move.b	d0,next_anim(a0)
0001DC5C 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001DC62 117C 0000 001E             		move.b	#0,anim_frame_duration(a0)
0001DC68 08A8 0005 0022             		bclr	#5,status(a0)
0001DC6E                            
0001DC6E                            SAnim_Do:
0001DC6E D040                       		add.w	d0,d0
0001DC70 D2F1 0000                  		adda.w	(a1,d0.w),a1
0001DC74 1011                       		move.b	(a1),d0
0001DC76 6B00                       		bmi.s	SAnim_WalkRun
0001DC78 1228 0022                  		move.b	status(a0),d1
0001DC7C 0201 0001                  		andi.b	#1,d1
0001DC80 0228 00FC 0001             		andi.b	#-4,render_flags(a0)
0001DC86 8328 0001                  		or.b	d1,render_flags(a0)
0001DC8A 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001DC8E 6A00                       		bpl.s	SAnim_Delay
0001DC90 1140 001E                  		move.b	d0,anim_frame_duration(a0)
0001DC94                            
0001DC94                            SAnim_Do2:
0001DC94                            					; Sonic_Animate+4A2j
0001DC94 7200                       		moveq	#0,d1
0001DC96 1228 001B                  		move.b	anim_frame(a0),d1	; load current frame number
0001DC9A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001DC9E 0C00 00FC                  		cmpi.b	#-4,d0				; MJ: is it a flag from FD to FF?
0001DCA2 6400                       		bcc.s	SAnim_End_FF				; MJ: if so, branch to flag routines
0001DCA4                            
0001DCA4                            SAnim_Next:
0001DCA4                            					; Sonic_Animate+96j
0001DCA4 1140 001A                  		move.b	d0,mapping_frame(a0)	; load sprite number
0001DCA8 5228 001B                  		addq.b	#1,anim_frame(a0)	; next frame number
0001DCAC                            
0001DCAC                            SAnim_Delay:
0001DCAC                            					; Sonic_Animate+440j ...
0001DCAC 4E75                       		rts
0001DCAE                            ; ---------------------------------------------------------------------------
0001DCAE                            
0001DCAE                            SAnim_End_FF:
0001DCAE 5200                       		addq.b	#1,d0
0001DCB0 6600                       		bne.s	SAnim_End_FE
0001DCB2 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001DCB8 1029 0001                  		move.b	1(a1),d0
0001DCBC 60E6                       		bra.s	SAnim_Next
0001DCBE                            ; ---------------------------------------------------------------------------
0001DCBE                            
0001DCBE                            SAnim_End_FE:
0001DCBE 5200                       		addq.b	#1,d0
0001DCC0 6600                       		bne.s	SAnim_End_FD
0001DCC2 1031 1002                  		move.b	2(a1,d1.w),d0
0001DCC6 9128 001B                  		sub.b	d0,anim_frame(a0)
0001DCCA 9200                       		sub.b	d0,d1
0001DCCC 1031 1001                  		move.b	1(a1,d1.w),d0
0001DCD0 60D2                       		bra.s	SAnim_Next
0001DCD2                            ; ---------------------------------------------------------------------------
0001DCD2                            
0001DCD2                            SAnim_End_FD:
0001DCD2 5200                       		addq.b	#1,d0
0001DCD4 6600                       		bne.s	SAnim_End
0001DCD6 1171 1002 001C             		move.b	2(a1,d1.w),anim(a0)
0001DCDC                            
0001DCDC                            SAnim_End:
0001DCDC 4E75                       		rts
0001DCDE                            ; ---------------------------------------------------------------------------
0001DCDE                            
0001DCDE                            SAnim_WalkRun:
0001DCDE 5200                       		addq.b	#1,d0		; is animation walking/running?
0001DCE0 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001DCE4                            ;		moveq	#0,d0
0001DCE4                            ;		tst.b	$2D(a0)
0001DCE4                            ;		bmi.w	SAnim_Tumble
0001DCE4                            ;		move.b	flip_angle(a0),d0
0001DCE4                            ;		bne.w	SAnim_Tumble
0001DCE4 7200                       		moveq	#0,d1
0001DCE6 1028 0026                  		move.b	angle(a0),d0	; get Sonic's angle
0001DCEA 6B00                       		bmi.s	loc_126C8
0001DCEC 6700                       		beq.s	loc_126C8
0001DCEE 5300                       		subq.b	#1,d0
0001DCF0                            
0001DCF0                            loc_126C8:
0001DCF0                            					; Sonic_Animate+C4j
0001DCF0 1428 0022                  		move.b	status(a0),d2
0001DCF4 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001DCF8 6600                       		bne.s	loc_126D4	; if yes, branch
0001DCFA 4600                       		not.b	d0		; reverse angle
0001DCFC                            
0001DCFC                            loc_126D4:
0001DCFC 0600 0010                  		addi.b	#$10,d0	; add $10 to angle
0001DD00 6A00                       		bpl.s	loc_126DC	; if angle is $0-$7F, branch
0001DD02 7203                       		moveq	#3,d1
0001DD04                            
0001DD04                            loc_126DC:
0001DD04 0228 00FC 0001             		andi.b	#-4,render_flags(a0)
0001DD0A B302                       		eor.b	d1,d2
0001DD0C 8528 0001                  		or.b	d2,render_flags(a0)
0001DD10 0828 0005 0022             		btst	#5,status(a0)
0001DD16 6600 0000                  		bne.w	SAnim_Push
0001DD1A E808                       		lsr.b	#4,d0
0001DD1C 0200 0006                  		andi.b	#6,d0
0001DD20 3428 0020                  		move.w	inertia(a0),d2
0001DD24 6A00                       		bpl.s	loc_12700
0001DD26 4442                       		neg.w	d2
0001DD28                            
0001DD28                            loc_12700:
0001DD28 4A28 002B                  		tst.b	status_secondary(a0)
0001DD2C 6A00 0000                  		bpl.w	loc_1270A
0001DD30 D442                       		add.w	d2,d2
0001DD32                            
0001DD32                            loc_1270A:
0001DD32 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001DD36 6600                       		bne.s	SAnim_Super
0001DD38 43F9 0000 0000             		lea	(SonAni_Run).l,a1	; use running animation
0001DD3E 0C42 0600                  		cmpi.w	#$600,d2		; is Sonic at running speed?
0001DD42 6400                       		bcc.s	loc_12724			; if so, use running animation
0001DD44 43F9 0000 0000             		lea	(SonAni_Walk).l,a1	; if not, use walking animation
0001DD4A D000                       		add.b	d0,d0
0001DD4C                            
0001DD4C                            loc_12724:
0001DD4C D000                       		add.b	d0,d0
0001DD4E 1600                       		move.b	d0,d3
0001DD50 7200                       		moveq	#0,d1
0001DD52 1228 001B                  		move.b	anim_frame(a0),d1
0001DD56 1031 1001                  		move.b	1(a1,d1.w),d0
0001DD5A 0C00 00FF                  		cmpi.b	#-1,d0
0001DD5E 6600                       		bne.s	loc_12742
0001DD60 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001DD66 1029 0001                  		move.b	1(a1),d0
0001DD6A                            
0001DD6A                            loc_12742:
0001DD6A 1140 001A                  		move.b	d0,mapping_frame(a0)
0001DD6E D728 001A                  		add.b	d3,mapping_frame(a0)
0001DD72 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001DD76 6A00                       		bpl.s	locret_12764
0001DD78 4442                       		neg.w	d2
0001DD7A 0642 0800                  		addi.w	#$800,d2
0001DD7E 6A00                       		bpl.s	loc_1275A
0001DD80 7400                       		moveq	#0,d2
0001DD82                            
0001DD82                            loc_1275A:
0001DD82 E04A                       		lsr.w	#8,d2
0001DD84 1142 001E                  		move.b	d2,anim_frame_duration(a0)	; modify frame duration
0001DD88 5228 001B                  		addq.b	#1,anim_frame(a0)		; modify frame number
0001DD8C                            
0001DD8C                            locret_12764:
0001DD8C 4E75                       		rts
0001DD8E                            ; ---------------------------------------------------------------------------
0001DD8E                            
0001DD8E                            SAnim_Super:
0001DD8E 43F9 0000 0000             		lea	(SupSonAni_Run).l,a1	; use fast animation
0001DD94 0C42 0800                  		cmpi.w	#$800,d2		; is Sonic moving fast?
0001DD98 6400                       		bcc.s	SAnim_SuperRun		; if yes, branch
0001DD9A 43F9 0000 0000             		lea	(SupSonAni_Walk).l,a1	; use slower animation
0001DDA0 D000                       		add.b	d0,d0
0001DDA2 D000                       		add.b	d0,d0
0001DDA4 6000                       		bra.s	SAnim_SuperWalk
0001DDA6                            ; ---------------------------------------------------------------------------
0001DDA6                            
0001DDA6                            SAnim_SuperRun:
0001DDA6 D000                       		add.b	d0,d0
0001DDA8                            
0001DDA8                            SAnim_SuperWalk:
0001DDA8 1600                       		move.b	d0,d3
0001DDAA 7200                       		moveq	#0,d1
0001DDAC 1228 001B                  		move.b	anim_frame(a0),d1
0001DDB0 1031 1001                  		move.b	1(a1,d1.w),d0
0001DDB4 0C00 00FF                  		cmpi.b	#-1,d0
0001DDB8 6600                       		bne.s	loc_1279C
0001DDBA 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001DDC0 1029 0001                  		move.b	1(a1),d0
0001DDC4                            
0001DDC4                            loc_1279C:
0001DDC4 1140 001A                  		move.b	d0,mapping_frame(a0)
0001DDC8 D728 001A                  		add.b	d3,mapping_frame(a0)
0001DDCC 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001DDD0 6A00                       		bpl.s	locret_127BE
0001DDD2 4442                       		neg.w	d2
0001DDD4 0642 0800                  		addi.w	#$800,d2
0001DDD8 6A00                       		bpl.s	loc_127B4
0001DDDA 7400                       		moveq	#0,d2
0001DDDC                            
0001DDDC                            loc_127B4:
0001DDDC E04A                       		lsr.w	#8,d2
0001DDDE 1142 001E                  		move.b	d2,anim_frame_duration(a0)
0001DDE2 5228 001B                  		addq.b	#1,anim_frame(a0)
0001DDE6                            
0001DDE6                            locret_127BE:
0001DDE6 4E75                       		rts
0001DDE8                            ; ---------------------------------------------------------------------------
0001DDE8                            ; loc_1B520:
0001DDE8                            
0001DDE8                            SAnim_Tumble:
0001DDE8 1028 0031                  	move.b	flip_angle(a0),d0
0001DDEC 7200                       	moveq	#0,d1
0001DDEE 1428 0022                  	move.b	status(a0),d2
0001DDF2 0202 0001                  	andi.b	#1,d2
0001DDF6 6600                       	bne.s	SAnim_Tumble_Left
0001DDF8                            
0001DDF8 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
0001DDFE 0600 000B                  	addi.b	#$B,d0
0001DE02 80FC 0016                  	divu.w	#$16,d0
0001DE06 0600 0031                  	addi.b	#$31,d0
0001DE0A 1140 001A                  	move.b	d0,mapping_frame(a0)
0001DE0E 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
0001DE14 4E75                       	rts
0001DE16                            ; ===========================================================================
0001DE16                            ; loc_1B54E:
0001DE16                            SAnim_Tumble_Left:
0001DE16 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
0001DE1C 4A28 0035                  	tst.b	flip_turned(a0)
0001DE20 6700                       	beq.s	loc_1B566
0001DE22 0028 0001 0001             	ori.b	#1,render_flags(a0)
0001DE28 0600 000B                  	addi.b	#$B,d0
0001DE2C 6000                       	bra.s	loc_1B572
0001DE2E                            ; ===========================================================================
0001DE2E                            
0001DE2E                            loc_1B566:
0001DE2E 0028 0003 0001             	ori.b	#3,render_flags(a0)
0001DE34 4400                       	neg.b	d0
0001DE36 0600 008F                  	addi.b	#$8F,d0
0001DE3A                            
0001DE3A                            loc_1B572:
0001DE3A 80FC 0016                  	divu.w	#$16,d0
0001DE3E 0600 0031                  	addi.b	#$31,d0
0001DE42 1140 001A                  	move.b	d0,mapping_frame(a0)
0001DE46 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
0001DE4C 4E75                       	rts
0001DE4E                            ; ===========================================================================
0001DE4E                            ; loc_1B586:
0001DE4E                            SAnim_RollJump:				; XREF: SAnim_WalkRun
0001DE4E 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
0001DE52 6A00 FE58                  		bpl.w	SAnim_Delay			; if time remains, branch
0001DE56 5200                       		addq.b	#1,d0		; is the start flag = $FE ?
0001DE58 6600                       		bne.s	SAnim_Push	; if not, branch
0001DE5A 3428 0020                  		move.w	inertia(a0),d2	; get Sonic's speed
0001DE5E 6A00                       		bpl.s	loc_13ADE
0001DE60 4442                       		neg.w	d2
0001DE62                            
0001DE62                            loc_13ADE:
0001DE62 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001DE68 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001DE6C 6400                       		bcc.s	loc_13AF0	; if yes, branch
0001DE6E 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001DE74                            
0001DE74                            loc_13AF0:
0001DE74 4442                       		neg.w	d2
0001DE76 0642 0400                  		addi.w	#$400,d2
0001DE7A 6A00                       		bpl.s	loc_13AFA
0001DE7C 7400                       		moveq	#0,d2
0001DE7E                            
0001DE7E                            loc_13AFA:
0001DE7E E04A                       		lsr.w	#8,d2
0001DE80 1142 001E                  		move.b	d2,anim_frame_duration(a0)	; modify frame duration
0001DE84 1228 0022                  		move.b	status(a0),d1
0001DE88 0201 0001                  		andi.b	#1,d1
0001DE8C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001DE92 8328 0001                  		or.b	d1,1(a0)
0001DE96 6000 FDFC                  		bra.w	SAnim_Do2
0001DE9A                            ; ===========================================================================
0001DE9A                            
0001DE9A                            SAnim_Push:				; XREF: SAnim_RollJump
0001DE9A 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
0001DE9E 6A00 FE0C                  		bpl.w	SAnim_Delay			; if time remains, branch
0001DEA2 3428 0020                  		move.w	inertia(a0),d2	; get Sonic's speed
0001DEA6 6B00                       		bmi.s	loc_13B1E
0001DEA8 4442                       		neg.w	d2
0001DEAA                            
0001DEAA                            loc_13B1E:
0001DEAA 0642 0800                  		addi.w	#$800,d2
0001DEAE 6A00                       		bpl.s	loc_13B26
0001DEB0 7400                       		moveq	#0,d2
0001DEB2                            
0001DEB2                            loc_13B26:
0001DEB2 EC4A                       		lsr.w	#6,d2
0001DEB4 1142 001E                  		move.b	d2,anim_frame_duration(a0)	; modify frame duration
0001DEB8 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001DEBE 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001DEC2 6700                       		beq.s	@setcorrectani
0001DEC4 43F9 0000 0000             		lea	(SupSonAni_Push).l,a1
0001DECA 6400 0000                  		bcc.w	@setcorrectani
0001DECE                            @setcorrectani:
0001DECE 1228 0022                  		move.b	status(a0),d1
0001DED2 0201 0001                  		andi.b	#1,d1
0001DED6 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001DEDC 8328 0001                  		or.b	d1,1(a0)
0001DEE0 6000 FDB2                  		bra.w	SAnim_Do2
0001DEE4                            ; ===========================================================================
0001DEE4                            ; End of function Sonic_Animate
0001DEE4                            
0001DEE4                            SonicAniData:
0001DEE4                            	include "_anim\Sonic.asm"
0001DEE4                            ; ---------------------------------------------------------------------------
0001DEE4                            ; Animation script - Sonic
0001DEE4                            ; ---------------------------------------------------------------------------
0001DEE4 0000                       		dc.w SonAni_Walk-SonicAniData	;0
0001DEE6 0000                       		dc.w SonAni_Run-SonicAniData	;1
0001DEE8 0000                       		dc.w SonAni_Roll-SonicAniData	;2
0001DEEA 0000                       		dc.w SonAni_Roll2-SonicAniData	;3
0001DEEC 0000                       		dc.w SonAni_Push-SonicAniData	;4
0001DEEE 0000                       		dc.w SonAni_Wait-SonicAniData	;5
0001DEF0 0000                       		dc.w SonAni_Balance-SonicAniData	;6
0001DEF2 0000                       		dc.w SonAni_LookUp-SonicAniData	;7
0001DEF4 0000                       		dc.w SonAni_Duck-SonicAniData	;8
0001DEF6 0000                       		dc.w SonAni_Warp1-SonicAniData	;9
0001DEF8 0000                       		dc.w SonAni_Warp2-SonicAniData	;A
0001DEFA 0000                       		dc.w SonAni_Warp3-SonicAniData	;B
0001DEFC 0000                       		dc.w SonAni_Warp4-SonicAniData	;C
0001DEFE 0000                       		dc.w SonAni_Stop-SonicAniData	;D
0001DF00 0000                       		dc.w SonAni_Float1-SonicAniData	;E
0001DF02 0000                       		dc.w SonAni_Float2-SonicAniData	;F
0001DF04 0000                       		dc.w SonAni_Spring-SonicAniData	;10
0001DF06 0000                       		dc.w SonAni_LZHang-SonicAniData	;11
0001DF08 0000                       		dc.w SonAni_Leap1-SonicAniData	;12
0001DF0A 0000                       		dc.w SonAni_Leap2-SonicAniData	;13
0001DF0C 0000                       		dc.w SonAni_Surf-SonicAniData	;14
0001DF0E 0000                       		dc.w SonAni_Bubble-SonicAniData	;15
0001DF10 0000                       		dc.w SonAni_Death1-SonicAniData	;16
0001DF12 0000                       		dc.w SonAni_Drown-SonicAniData	;17
0001DF14 0000                       		dc.w SonAni_Death2-SonicAniData	;18
0001DF16 0000                       		dc.w SonAni_Shrink-SonicAniData	;19
0001DF18 0000                       		dc.w SonAni_Hurt-SonicAniData	;1A
0001DF1A 0000                       		dc.w SonAni_LZSlide-SonicAniData	;1B
0001DF1C 0000                       		dc.w SonAni_Blank-SonicAniData	;1C
0001DF1E 0000                       		dc.w SonAni_Float3-SonicAniData	;1D
0001DF20 0000                       		dc.w SonAni_Float4-SonicAniData	;1E
0001DF22 0000                       		dc.w SonAni_Warp1-SonicAniData	;1F
0001DF24 0000                       		dc.w SonAni_Spring2-SonicAniData	;20
0001DF26 0000                       		dc.w SonAni_Spring3-SonicAniData	;21
0001DF28 0000                       		dc.w SupSonAni_Transform-SonicAniData	;22
0001DF2A 0000                       		dc.w SonAni_EndPose-SonicAniData	;23
0001DF2C FF07 0801 0203 0405 06FF   SonAni_Walk:	dc.b  $FF,   7,	  8,   1,   2,	 3,   4,   5,	6, $FF
0001DF36 FF21 2223 24FF FFFF FFFF   SonAni_Run:	dc.b  $FF, $21,	$22, $23, $24, $FF, $FF, $FF, $FF, $FF
0001DF40 FE96 9796 9896 9996 9AFF   SonAni_Roll:	dc.b  $FE, $96,	$97, $96, $98, $96, $99, $96, $9A, $FF
0001DF4A FE96 9796 9896 9996 9AFF   SonAni_Roll2:	dc.b  $FE, $96,	$97, $96, $98, $96, $99, $96, $9A, $FF
0001DF54 FDB6 B7B8 B9FF FFFF FFFF   SonAni_Push:	dc.b  $FD, $B6,	$B7, $B8, $B9, $FF, $FF, $FF, $FF, $FF
0001DF5E 05BA BABA BABA BABA BABA+  SonAni_Wait:	dc.b	5, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA
0001DF7E                            					; DATA XREF: ROM:00012AA6o
0001DF7E BABA BABA BABA BABA BABA+  		dc.b  $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BB, $BC, $BC, $BD, $BD, $BE, $BE,	$BD, $BD, $BE, $BE, $BD, $BD
0001DF9E BEBE BDBD BEBE BDBD BEBE+  		dc.b  $BE, $BE,	$BD, $BD, $BE, $BE, $BD, $BD, $BE, $BE,	$BD, $BD, $BE, $BE, $BD, $BD, $BE, $BE,	$BD, $BD, $BE, $BE, $AD, $AD, $AD, $AD,	$AD, $AD, $AE, $AE, $AE, $AE
0001DFBE AEAE AFD9 D9D9 D9D9 D9AF+  		dc.b  $AE, $AE,	$AF, $D9, $D9, $D9, $D9, $D9, $D9, $AF,	$AF, $FE, $35
0001DFCB 07A4 A5A6 FF               SonAni_Balance:	dc.b	7, $A4,	$A5, $A6, $FF ;	DATA XREF: ROM:00012AA6o
0001DFD0 05C3 C4FE 01               SonAni_LookUp:	dc.b	5, $C3,	$C4, $FE,   1 ;	DATA XREF: ROM:00012AA6o
0001DFD5 059B 9CFE 01               SonAni_Duck:	dc.b	5, $9B,	$9C, $FE,   1 ;	DATA XREF: ROM:00012AA6o
0001DFDA 0086 8786 8886 8986 8A86+  SonAni_Warp1:	dc.b	0, $86,	$87, $86, $88, $86, $89, $86, $8A, $86,	$8B, $FF
0001DFE6 09BA C5C6 C6C6 C6C6 C6C7+  SonAni_Warp2:	dc.b	9, $BA,	$C5, $C6, $C6, $C6, $C6, $C6, $C6, $C7,	$C7, $C7, $C7, $C7, $C7, $C7, $C7, $C7,	$C7, $C7, $C7, $FD,   0
0001DFFD 01BB FD00                  SonAni_Warp3:	dc.b   1,  $BB,$FD,  0
0001E001 05A1 A2A3 FF               SonAni_Warp4:	dc.b   5, $A1,	$A2, $A3, $FF
0001E006 039D 9E9F A0FD 00          SonAni_Stop:	dc.b	3, $9D,	$9E, $9F, $A0, $FD,   0	; DATA XREF: ROM:00012AA6o
0001E00D 07C8 FF                    SonAni_Float1:	dc.b	7, $C8,	$FF	; DATA XREF: ROM:00012AA6o
0001E010 07C8 C9CA CBCC CDCE CFFF   SonAni_Float2:	dc.b	7, $C8,	$C9, $CA, $CB, $CC, $CD, $CE, $CF, $FF
0001E01A 2F8E FD00                  SonAni_Spring:	dc.b  $2F, $8E,	$FD,   0 ; DATA	XREF: ROM:00012AA6o
0001E01E                            ;SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001E01E 01AA ABFF                  SonAni_LZHang:	dc.b	1, $AA,	$AB, $FF ; DATA	XREF: ROM:00012AA6o
0001E022 0F43 4343 FE01             SonAni_Leap1:	dc.b   $F, $43,	$43, $43, $FE,	 1 ; DATA XREF:	ROM:00012AA6o
0001E028 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001E02E 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
0001E032 0BAC AC03 04FD 00          SonAni_Bubble:		dc.b   $B, $AC,	$AC,   3,   4, $FD,   0	; DATA XREF: ROM:00012AA6o
0001E039 20A8 FF                    SonAni_Death1:	dc.b  $20, $A8,	$FF	; DATA XREF: ROM:00012AA6o
0001E03C 20A9 FF                    SonAni_Drown:	dc.b  $20, $A9,	$FF	; DATA XREF: ROM:00012AA6o
0001E03F 20A7 FF                    SonAni_Death2:	dc.b  $20, $A7,	$FF	; DATA XREF: ROM:00012AA6o
0001E042                            
0001E042 09D7 D8FF                  SonAni_Shrink:	 dc.b	9, $D7,	$D8, $FF ; DATA	XREF: ROM:00012AA6o
0001E046 408D FF                    SonAni_Hurt:	dc.b  $40, $8D,	$FF	; DATA XREF: ROM:00012AA6o
0001E049 098C 8DFF                  SonAni_LZSlide:	dc.b	9, $8C,	$8D, $FF ; DATA	XREF: ROM:00012AA6o
0001E04D                            					; ROM:00012C70t
0001E04D 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001E051 13D0 D1FF                  SonAni_Float3:	dc.b  $13, $D0,	$D1, $FF ; DATA	XREF: ROM:00012AA6o
0001E055                            					; ROM:00012C74t
0001E055 03CF C8C9 CACB FE04        SonAni_Float4:	dc.b	3, $CF,	$C8, $C9, $CA, $CB, $FE,   4 ; DATA XREF: ROM:00012AA6o
0001E05D 0058 5958 5A58 5B58 5C58+  SonAni_Spin_Dash:	dc.b 0, $58, $59, $58, $5A, $58, $5B, $58, $5C, $58, $5D, $FF
0001E069 015E 60FD 2100             SonAni_Spring2:	dc.b 1, $5E, $60, $FD, $21,  0
0001E06F 015E 60FD 2000             SonAni_Spring3:	dc.b 1, $5E, $60, $FD, $20,  0
0001E075 07B0 B2B2 B2B2 B2B2 B1B2+  SonAni_EndPose:	dc.b 7, $B0,	$B2, $B2, $B2, $B2, $B2, $B2, $B1, $B2,	$B3, $B2, $FE,	 4
0001E083 00                         		align 2
0001E083 00                         		align 2
0001E084                            SuperSonicAniData:     
0001E084                                include "_anim\Super Sonic.asm"
0001E084                            ; ---------------------------------------------------------------------------
0001E084                            ; Animation script - Super Sonic
0001E084                            ; ---------------------------------------------------------------------------
0001E084 0000                       		dc.w SupSonAni_Walk-SuperSonicAniData
0001E086 0000                       		dc.w SupSonAni_Run-SuperSonicAniData
0001E088 FEBC                       		dc.w SonAni_Roll-SuperSonicAniData
0001E08A FEC6                       		dc.w SonAni_Roll2-SuperSonicAniData
0001E08C 0000                       		dc.w SupSonAni_Push-SuperSonicAniData
0001E08E 0000                       		dc.w SupSonAni_Wait-SuperSonicAniData
0001E090 0000                       		dc.w SupSonAni_Balance-SuperSonicAniData
0001E092 FF4C                       		dc.w SonAni_LookUp-SuperSonicAniData
0001E094 0000                       		dc.w SupSonAni_Duck-SuperSonicAniData
0001E096 FF56                       		dc.w SonAni_Warp1-SuperSonicAniData
0001E098 FF62                       		dc.w SonAni_Warp2-SuperSonicAniData
0001E09A FF79                       		dc.w SonAni_Warp3-SuperSonicAniData
0001E09C FF7D                       		dc.w SonAni_Warp4-SuperSonicAniData
0001E09E FF82                       		dc.w SonAni_Stop-SuperSonicAniData
0001E0A0 FF89                       		dc.w SonAni_Float1-SuperSonicAniData
0001E0A2 FF8C                       		dc.w SonAni_Float2-SuperSonicAniData
0001E0A4 FF96                       		dc.w SonAni_Spring-SuperSonicAniData
0001E0A6 FF9A                       		dc.w SonAni_LZHang-SuperSonicAniData
0001E0A8 FF9E                       		dc.w SonAni_Leap1-SuperSonicAniData
0001E0AA FFA4                       		dc.w SonAni_Leap2-SuperSonicAniData
0001E0AC FFAA                       		dc.w SonAni_Surf-SuperSonicAniData
0001E0AE FFAE                       		dc.w SonAni_Bubble-SuperSonicAniData
0001E0B0 FFB5                       		dc.w SonAni_Death1-SuperSonicAniData
0001E0B2 FFB8                       		dc.w SonAni_Drown-SuperSonicAniData
0001E0B4 FFBB                       		dc.w SonAni_Death2-SuperSonicAniData
0001E0B6 FFBE                       		dc.w SonAni_Shrink-SuperSonicAniData
0001E0B8 FFC2                       		dc.w SonAni_Hurt-SuperSonicAniData
0001E0BA FFC5                       		dc.w SonAni_LZSlide-SuperSonicAniData
0001E0BC FFC9                       		dc.w SonAni_Blank-SuperSonicAniData
0001E0BE FFCD                       		dc.w SonAni_Float3-SuperSonicAniData
0001E0C0 FFD1                       		dc.w SonAni_Float4-SuperSonicAniData
0001E0C2 FF56                       		dc.w SonAni_Warp1-SuperSonicAniData	;1F
0001E0C4 FFE5                       		dc.w SonAni_Spring2-SuperSonicAniData	;20
0001E0C6 FFEB                       		dc.w SonAni_Spring3-SuperSonicAniData	;21
0001E0C8 0000                       		dc.w SupSonAni_Transform-SuperSonicAniData
0001E0CA FFF1                       		dc.w SonAni_EndPose-SuperSonicAniData	;23
0001E0CC FF07 0801 0203 0405 06FF   SupSonAni_Walk:	dc.b  $FF,   7,	  8,   1,   2,	 3,   4,   5,	6, $FF
0001E0D6 FF21 2223 24FF FFFF FFFF   SupSonAni_Run:	dc.b  $FF, $21,	$22, $23, $24, $FF, $FF, $FF, $FF, $FF
0001E0E0 FE96 9796 9896 9996 9AFF   SupSonAni_Roll:	dc.b  $FE, $96,	$97, $96, $98, $96, $99, $96, $9A, $FF
0001E0EA FE96 9796 9896 9996 9AFF   SupSonAni_Roll2:	dc.b  $FE, $96,	$97, $96, $98, $96, $99, $96, $9A, $FF
0001E0F4 FDB6 B7B8 B9FF FFFF FFFF   SupSonAni_Push:	dc.b  $FD, $B6,	$B7, $B8, $B9, $FF, $FF, $FF, $FF, $FF
0001E0FE 07C5 C6FF                  SupSonAni_Wait:	dc.b	7, $C5, $C6, $FF
0001E102 07A4 A5A6 FF               SupSonAni_Balance:	dc.b	7, $A4,	$A5, $A6, $FF ;	DATA XREF: ROM:00012AA6o
0001E107 059B 9CFE 01               SupSonAni_Duck:	dc.b	5, $9B,	$9C, $FE,   1 ;	DATA XREF: ROM:00012AA6o
0001E10C 02D2 D2D3 D3D4 D5D5 D5D5+  SupSonAni_Transform:	dc.b	2, $D2,	$D2, $D3, $D3, $D4, $D5, $D5, $D5, $D5,	$D5, $D5, $D5, $D5, $FD,   0
0001E11C                            					; DATA XREF: ROM:00012AA6o
0001E11C                            							align 2
0001E11C                            							align 2
0001E11C                                            even
0001E11C                            ; ---------------------------------------------------------------------------
0001E11C                            ; This table converts art using	palette	indexes	set for	S&K to palette indexes set for S2.
0001E11C                            ; Format: The rightmost	nybble of entry	X in any row = the new index that replaces color X.
0001E11C                            ; Similarly, the leftmost nybble of entry X in any column = the	new index that replaces	color X.
0001E11C                            ;
0001E11C                            ; Specific replacements:
0001E11C                            ;
0001E11C                            ; $0 ->	$0
0001E11C                            ; $1 ->	$6
0001E11C                            ; $2 ->	$5
0001E11C                            ; $3 ->	$3
0001E11C                            ; $4 ->	$2
0001E11C                            ; $5 ->	$4
0001E11C                            ; $6 ->	$C
0001E11C                            ; $7 ->	$D
0001E11C                            ; $8 ->	$E
0001E11C                            ; $9 ->	$F
0001E11C                            ; $A ->	$A
0001E11C                            ; $B ->	$B
0001E11C                            ; $C ->	$7
0001E11C                            ; $D ->	$8
0001E11C                            ; $E ->	$9
0001E11C                            ; $F ->	$1
0001E11C                            ; ---------------------------------------------------------------------------
0001E11C 0006 0503 0204 0C0D 0E0F+  ArtConvTable:	dc.b $00,$06,$05,$03,$02,$04,$0C,$0D,$0E,$0F,$0A,$0B,$07,$08,$09,$01; 0	; ...
0001E12C 6066 6563 6264 6C6D 6E6F+  		dc.b $60,$66,$65,$63,$62,$64,$6C,$6D,$6E,$6F,$6A,$6B,$67,$68,$69,$61; 16
0001E13C 5056 5553 5254 5C5D 5E5F+  		dc.b $50,$56,$55,$53,$52,$54,$5C,$5D,$5E,$5F,$5A,$5B,$57,$58,$59,$51; 32
0001E14C 3036 3533 3234 3C3D 3E3F+  		dc.b $30,$36,$35,$33,$32,$34,$3C,$3D,$3E,$3F,$3A,$3B,$37,$38,$39,$31; 48
0001E15C 2026 2523 2224 2C2D 2E2F+  		dc.b $20,$26,$25,$23,$22,$24,$2C,$2D,$2E,$2F,$2A,$2B,$27,$28,$29,$21; 64
0001E16C 4046 4543 4244 4C4D 4E4F+  		dc.b $40,$46,$45,$43,$42,$44,$4C,$4D,$4E,$4F,$4A,$4B,$47,$48,$49,$41; 80
0001E17C C0C6 C5C3 C2C4 CCCD CECF+  		dc.b $C0,$C6,$C5,$C3,$C2,$C4,$CC,$CD,$CE,$CF,$CA,$CB,$C7,$C8,$C9,$C1; 96
0001E18C D0D6 D5D3 D2D4 DCDD DEDF+  		dc.b $D0,$D6,$D5,$D3,$D2,$D4,$DC,$DD,$DE,$DF,$DA,$DB,$D7,$D8,$D9,$D1; 112
0001E19C E0E6 E5E3 E2E4 ECED EEEF+  		dc.b $E0,$E6,$E5,$E3,$E2,$E4,$EC,$ED,$EE,$EF,$EA,$EB,$E7,$E8,$E9,$E1; 128
0001E1AC F0F6 F5F3 F2F4 FCFD FEFF+  		dc.b $F0,$F6,$F5,$F3,$F2,$F4,$FC,$FD,$FE,$FF,$FA,$FB,$F7,$F8,$F9,$F1; 144
0001E1BC A0A6 A5A3 A2A4 ACAD AEAF+  		dc.b $A0,$A6,$A5,$A3,$A2,$A4,$AC,$AD,$AE,$AF,$AA,$AB,$A7,$A8,$A9,$A1; 160
0001E1CC B0B6 B5B3 B2B4 BCBD BEBF+  		dc.b $B0,$B6,$B5,$B3,$B2,$B4,$BC,$BD,$BE,$BF,$BA,$BB,$B7,$B8,$B9,$B1; 176
0001E1DC 7076 7573 7274 7C7D 7E7F+  		dc.b $70,$76,$75,$73,$72,$74,$7C,$7D,$7E,$7F,$7A,$7B,$77,$78,$79,$71; 192
0001E1EC 8086 8583 8284 8C8D 8E8F+  		dc.b $80,$86,$85,$83,$82,$84,$8C,$8D,$8E,$8F,$8A,$8B,$87,$88,$89,$81; 208
0001E1FC 9096 9593 9294 9C9D 9E9F+  		dc.b $90,$96,$95,$93,$92,$94,$9C,$9D,$9E,$9F,$9A,$9B,$97,$98,$99,$91; 224
0001E20C 1016 1513 1214 1C1D 1E1F+  		dc.b $10,$16,$15,$13,$12,$14,$1C,$1D,$1E,$1F,$1A,$1B,$17,$18,$19,$11; 240
0001E21C                            ; ---------------------------------------------------------------------------
0001E21C                            ; Sonic	pattern	loading	subroutine
0001E21C                            ; ---------------------------------------------------------------------------
0001E21C                            
0001E21C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E21C                            
0001E21C                            
0001E21C                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001E21C 7000                       		moveq	#0,d0
0001E21E 1028 001A                  		move.b	mapping_frame(a0),d0	; load frame number
0001E222 B038 F766                  		cmp.b	($FFFFF766).w,d0
0001E226 6700 0000                  		beq.w	locret_13C96
0001E22A 11C0 F766                  		move.b	d0,($FFFFF766).w
0001E22E 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001E234 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
0001E238 6700                       		beq.s	LoadSonicDynPLCCont	; if not, branch
0001E23A 45F9 0000 0000             		lea	(SuperSonicDynPLC).l,a2
0001E240                            
0001E240                            LoadSonicDynPLCCont:
0001E240 D040                       		add.w	d0,d0
0001E242 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E246 7A00                       		moveq	#0,d5
0001E248 1A1A                       		move.b	(a2)+,d5
0001E24A 5345                       		subq.w	#1,d5
0001E24C 6B00                       		bmi.s	locret_13C96
0001E24E 383C F000                  		move.w	#$F000,d4
0001E252 2C3C 0000 0000             		move.l	#Art_Sonic,d6		; load Sonic's art
0001E258                            
0001E258                            SPLC_ReadEntry:
0001E258 7200                       		moveq	#0,d1
0001E25A 121A                       		move.b	(a2)+,d1
0001E25C E149                       		lsl.w	#8,d1
0001E25E 121A                       		move.b	(a2)+,d1
0001E260 3601                       		move.w	d1,d3
0001E262 E04B                       		lsr.w	#8,d3
0001E264 0243 00F0                  		andi.w	#$F0,d3
0001E268 0643 0010                  		addi.w	#$10,d3
0001E26C 0241 0FFF                  		andi.w	#$FFF,d1
0001E270 EB89                       		lsl.l	#5,d1
0001E272 D286                       		add.l	d6,d1
0001E274 3404                       		move.w	d4,d2
0001E276 D843                       		add.w	d3,d4
0001E278 D843                       		add.w	d3,d4
0001E27A 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
0001E280 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
0001E284                            
0001E284                            locret_13C96:
0001E284 4E75                       		rts	
0001E286                            ; End of function LoadSonicDynPLC`
0001E286                            
0001E286                            ; ---------------------------------------------------------------------------
0001E286                            ; Subroutine to collect the right speed setting for a character
0001E286                            ; a0 must be character
0001E286                            ; a1 will be the result and have the correct speed settings
0001E286                            ; a2 is characters' speed
0001E286                            ; ---------------------------------------------------------------------------
0001E286                            
0001E286                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001E286                            
0001E286                            ApplySpeedSettings:
0001E286 7000                       	moveq	#0,d0				; Quickly clear d0
0001E288 4A28 0034                  	tst.b	speedshoes_time(a0)		; Does character have speedshoes?
0001E28C 6700                       	beq.s	setspeed1				; If not, branch
0001E28E 5200                       	addq.b	#1,d0				; Quickly add 1 to d0
0001E290                            setspeed1:
0001E290 0828 0006 0022             	btst	#6,status(a0)			; Is the character underwater?
0001E296 6700                       	beq.s	setspeed2				; If not, branch
0001E298 5400                       	addq.b	#2,d0				; Quickly add 2 to d0
0001E29A                            setspeed2:
0001E29A 4A38 FE19                  	tst.b	(Super_Sonic_flag).w		; Is the character Super?
0001E29E 6700                       	beq.s	setspeed3				; If not, branch
0001E2A0 5800                       	addq.b	#4,d0				; Quickly add 4 to d0
0001E2A2                            setspeed3:
0001E2A2 D000                       	add.b	d0,d0				; Multiply itself
0001E2A4 D000                       	add.b	d0,d0				; And again
0001E2A6 D000                       	add.b	d0,d0				; And again
0001E2A8 43FB 0000                  	lea	Speedsettings(pc,d0.w),a1	; Load correct speed settings into a1
0001E2AC 5489                       	addq.l	#2,a1				; Increment a1 by 2 quickly
0001E2AE 24D9                       	move.l	(a1)+,(a2)+			; Set character's new top speed and acceleration
0001E2B0 3491                       	move.w	(a1),(a2)			; Set character's deceleration
0001E2B2 4E75                       	rts					; Finish subroutine
0001E2B4                            ; ===========================================================================
0001E2B4                            ; ===========================================================================
0001E2B4                            ; ----------------------------------------------------------------------------
0001E2B4                            ; Speed Settings Array
0001E2B4                            
0001E2B4                            ; This array defines what speeds the character should be set to
0001E2B4                            ; ----------------------------------------------------------------------------
0001E2B4                            ;		blank	top_speed	acceleration	deceleration	; #	; Comment
0001E2B4                            Speedsettings:
0001E2B4 0000 0600 000C 0080        	dc.w	$0,	$600,		$C,		$80		; $00	; Normal
0001E2BC 0000 0C00 0018 0080        	dc.w	$0,	$C00,		$18,		$80		; $08	; Normal Speedshoes
0001E2C4 0000 0300 0006 0040        	dc.w	$0,	$300,		$6,		$40		; $16	; Normal Underwater
0001E2CC 0000 0600 000C 0040        	dc.w	$0,	$600,		$C,		$40		; $24	; Normal Underwater Speedshoes
0001E2D4 0000 0A00 0030 0100        	dc.w	$0,	$A00,		$30,		$100		; $32	; Super
0001E2DC 0000 0C00 0030 0100        	dc.w	$0,	$C00,		$30,		$100		; $40	; Super Speedshoes
0001E2E4 0000 0500 0018 0080        	dc.w	$0,	$500,		$18,		$80		; $48	; Super Underwater
0001E2EC 0000 0A00 0030 0080        	dc.w	$0,	$A00,		$30,		$80		; $56	; Super Underwater Speedshoes
0001E2F4                            ; ===========================================================================
0001E2F4                            ; ===========================================================================
0001E2F4                            ; ---------------------------------------------------------------------------
0001E2F4                            ; Object 8D - After Image
0001E2F4                            ; ---------------------------------------------------------------------------
0001E2F4                            
0001E2F4                            Obj8D:               ; XREF: Obj_Index
0001E2F4 0C38 0006 D024                   cmpi.b   #6,(MainCharacter+routine).w   ; is "death" animation?
0001E2FA 6600                             bne.s   Obj8DNormal      ; if not, skip the next line
0001E2FC 4EF9 0001 5BFC             	  jmp	DeleteObject
0001E302                            Obj8DNormal:
0001E302 0C38 0018 D01C                   cmpi.b   #$18,(MainCharacter+anim).w   ; is "death" animation?
0001E308 6700 0000                        beq.w   Obj8D_Delete      ; if yes, delete the After Image
0001E30C 4A38 FE08                        tst.b   ($FFFFFE08).w   ; is debug mode active?
0001E310 6600 0000                        bne.w   Obj8D_Delete      ; if yes, delete the After Image
0001E314 7000                             moveq   #0,d0
0001E316 1028 0024                        move.b   routine(a0),d0
0001E31A 323B 0000                        move.w   Obj8D_Index(pc,d0.w),d1
0001E31E 4EFB 1000                        jmp   Obj8D_Index(pc,d1.w)
0001E322                            
0001E322                            ; ===========================================================================
0001E322                            Obj8D_Index:
0001E322 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E324 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E326 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E328 0000                             dc.w Obj8D_Sprite_priority_start-Obj8D_Index
0001E32A 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E32C 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E32E 0000                             dc.w Obj8D_Sprite_priority_next-Obj8D_Index
0001E330 0000                             dc.w Obj8D_Delete-Obj8D_Index
0001E332                            ; ===========================================================================
0001E332                            Obj8D_NoShow:
0001E332 5428 0024                        addq.b   #2,routine(a0)         ; go to next item of index, at the next frame
0001E336 4E75                             rts
0001E338                            ; ===========================================================================
0001E338                            Obj8D_Sprite_priority_start:
0001E338 317C 0100 0018                   move.w   #$100,priority(a0)         ; set sprite priority to 2
0001E33E 6000                             bra.s   Obj8D_Show
0001E340                            ; ===========================================================================
0001E340                            Obj8D_Sprite_priority_next:
0001E340 0668 0080 0018                   addi.w   #$80,priority(a0)         ; set a lower sprite priority
0001E346                            ; ===========================================================================
0001E346                            Obj8D_Show:
0001E346 5428 0024                        addq.b   #2,routine(a0)            ; go to next item of index
0001E34A 7210                       		moveq	#$10,d1
0001E34C 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001E352 6700                       		beq.s	loc_1A4E4
0001E354 721C                       		moveq	#$1C,d1
0001E356                            
0001E356                            loc_1A4E4:
0001E356 3038 F7A8                  			move.w	(Sonic_Pos_Record_Index).w,d0
0001E35A 43F8 CB00                  			lea	(Sonic_Pos_Record_Buf).w,a1
0001E35E 9001                       			sub.b	d1,d0
0001E360 43F1 0000                  			lea	(a1,d0.w),a1
0001E364 3159 0008                  			move.w	(a1)+,x_pos(a0)
0001E368 3159 000C                  			move.w	(a1)+,y_pos(a0)
0001E36C                            Obj8D_Show_exception:
0001E36C 3178 D002 0002                   move.w   ($FFFFD002).w,2(a0)      ; copy Sonic map to after-image map
0001E372 1178 D001 0001                    move.b   ($FFFFD001).w,1(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001E378 2178 D01A 001A                    move.l   ($FFFFD01A).w,mapping_frame(a0)   ; copy the Sonic animation frame
0001E37E 4EF9 0001 5C48                   jmp   DisplaySprite
0001E384                            ; ===========================================================================
0001E384                            Obj8D_Delete:
0001E384 4EF9 0001 5BFC                   jmp   DeleteObject
0001E38A                            
0001E38A                            ; ===========================================================================
0001E38A                            
0001E38A                            ; ===========================================================================
0001E38A                            ; ---------------------------------------------------------------------------
0001E38A                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001E38A                            ; ---------------------------------------------------------------------------
0001E38A                            
0001E38A                            Obj0A:					; XREF: Obj_Index
0001E38A 7000                       		moveq	#0,d0
0001E38C 1028 0024                  		move.b	routine(a0),d0
0001E390 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001E394 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
0001E398                            ; ===========================================================================
0001E398 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001E39C 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001E3A0 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001E3A4 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
0001E3A8 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001E3AA                            ; ===========================================================================
0001E3AA                            
0001E3AA                            Obj0A_Main:				; XREF: Obj0A_Index
0001E3AA 5428 0024                  		addq.b	#2,routine(a0)
0001E3AE 217C 0001 BFD2 0004        		move.l	#Map_obj64,4(a0)
0001E3B6 317C 8348 0002             		move.w	#$8348,2(a0)
0001E3BC 117C 0084 0001             		move.b	#$84,1(a0)
0001E3C2 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001E3C8 317C 0080 0018             		move.w	#$80,priority(a0)
0001E3CE 1028 0028                  		move.b	subtype(a0),d0
0001E3D2 6A00                       		bpl.s	loc_13D00
0001E3D4 5028 0024                  		addq.b	#8,routine(a0)
0001E3D8 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
0001E3E0 317C 0440 0002             		move.w	#$440,2(a0)
0001E3E6 0240 007F                  		andi.w	#$7F,d0
0001E3EA 1140 0033                  		move.b	d0,$33(a0)
0001E3EE 6000 0000                  		bra.w	Obj0A_Countdown
0001E3F2                            ; ===========================================================================
0001E3F2                            
0001E3F2                            loc_13D00:
0001E3F2 1140 001C                  		move.b	d0,anim(a0)
0001E3F6 3168 0008 0030             		move.w	8(a0),$30(a0)
0001E3FC 317C FF78 0012             		move.w	#-$88,y_vel(a0)
0001E402                            
0001E402                            Obj0A_Animate:				; XREF: Obj0A_Index
0001E402 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001E408 4EB9 0001 2624             		jsr	AnimateSprite
0001E40E                            
0001E40E                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001E40E 3038 F646                  		move.w	($FFFFF646).w,d0
0001E412 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
0001E416 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001E418 117C 0006 0024             		move.b	#6,routine(a0)
0001E41E 5E28 001C                  		addq.b	#7,anim(a0)
0001E422 0C28 000D 001C             		cmpi.b	#$D,anim(a0)
0001E428 6700                       		beq.s	Obj0A_Display
0001E42A 6500                       		bcs.s	Obj0A_Display	;\Fix the bubble bug
0001E42C 117C 000D 001C             		move.b	#$D,anim(a0)     ;/
0001E432 6000                       		bra.s	Obj0A_Display
0001E434                            ; ===========================================================================
0001E434                            
0001E434                            Obj0A_Wobble:
0001E434 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001E438 6700                       		beq.s	loc_13D44
0001E43A 5868 0030                  		addq.w	#4,$30(a0)
0001E43E                            
0001E43E                            loc_13D44:
0001E43E 1028 0026                  		move.b	$26(a0),d0
0001E442 5228 0026                  		addq.b	#1,$26(a0)
0001E446 0240 007F                  		andi.w	#$7F,d0
0001E44A 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001E450 1031 0000                  		move.b	(a1,d0.w),d0
0001E454 4880                       		ext.w	d0
0001E456 D068 0030                  		add.w	$30(a0),d0
0001E45A 3140 0008                  		move.w	d0,8(a0)
0001E45E 6100                       		bsr.s	Obj0A_ShowNumber
0001E460 4EB9 0001 5BE2             		jsr	SpeedToPos
0001E466 4A28 0001                  		tst.b	1(a0)
0001E46A 6A00                       		bpl.s	Obj0A_Delete
0001E46C 4EF9 0001 5C48             		jmp	DisplaySprite
0001E472                            ; ===========================================================================
0001E472                            
0001E472                            Obj0A_Delete:
0001E472 4EF9 0001 5BFC             		jmp	DeleteObject
0001E478                            ; ===========================================================================
0001E478                            
0001E478                            Obj0A_Display:				; XREF: Obj0A_Index
0001E478 6100                       		bsr.s	Obj0A_ShowNumber
0001E47A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001E480 4EB9 0001 2624             		jsr	AnimateSprite
0001E486 4EF9 0001 5C48             		jmp	DisplaySprite
0001E48C                            ; ===========================================================================
0001E48C                            
0001E48C                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001E48C 4EF9 0001 5BFC             		jmp	DeleteObject
0001E492                            ; ===========================================================================
0001E492                            
0001E492                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001E492 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001E498 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
0001E49A 5368 0038                  		subq.w	#1,$38(a0)
0001E49E 6600                       		bne.s	Obj0A_Display2
0001E4A0 117C 000E 0024             		move.b	#$E,routine(a0)
0001E4A6 5E28 001C                  		addq.b	#7,anim(a0)
0001E4AA 60CC                       		bra.s	Obj0A_Display
0001E4AC                            ; ===========================================================================
0001E4AC                            
0001E4AC                            Obj0A_Display2:
0001E4AC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001E4B2 4EB9 0001 2624             		jsr	AnimateSprite
0001E4B8 4A28 0001                  		tst.b	1(a0)
0001E4BC 6A00                       		bpl.s	Obj0A_Delete3
0001E4BE 4EF9 0001 5C48             		jmp	DisplaySprite
0001E4C4                            ; ===========================================================================
0001E4C4                            
0001E4C4                            Obj0A_Delete3:
0001E4C4 4EF9 0001 5BFC             		jmp	DeleteObject
0001E4CA                            ; ===========================================================================
0001E4CA                            
0001E4CA                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001E4CA 4A68 0038                  		tst.w	$38(a0)
0001E4CE 6700                       		beq.s	locret_13E1A
0001E4D0 5368 0038                  		subq.w	#1,$38(a0)
0001E4D4 6600                       		bne.s	locret_13E1A
0001E4D6 0C28 0007 001C             		cmpi.b	#7,anim(a0)
0001E4DC 6400                       		bcc.s	locret_13E1A
0001E4DE 317C 000F 0038             		move.w	#$F,$38(a0)
0001E4E4 4268 0012                  		clr.w	y_vel(a0)
0001E4E8 117C 0080 0001             		move.b	#$80,1(a0)
0001E4EE 3028 0008                  		move.w	8(a0),d0
0001E4F2 9078 F700                  		sub.w	($FFFFF700).w,d0
0001E4F6 0640 0080                  		addi.w	#$80,d0
0001E4FA 3140 0008                  		move.w	d0,8(a0)
0001E4FE 3028 000C                  		move.w	$C(a0),d0
0001E502 9078 F704                  		sub.w	($FFFFF704).w,d0
0001E506 0640 0080                  		addi.w	#$80,d0
0001E50A 3140 000A                  		move.w	d0,$A(a0)
0001E50E 117C 000C 0024             		move.b	#$C,routine(a0)
0001E514                            
0001E514                            locret_13E1A:
0001E514 4E75                       		rts	
0001E516                            ; ===========================================================================
0001E516                            Obj0A_WobbleData:
0001E516 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001E527 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001E538 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001E549 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001E559 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001E566 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001E573 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001E580 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001E58D FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001E596 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001E5A7 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001E5B8 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001E5C9 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001E5D9 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001E5E6 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001E5F3 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001E600 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001E60D FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001E616                            ; ===========================================================================
0001E616                            
0001E616                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001E616 4A68 002C                  		tst.w	$2C(a0)
0001E61A 6600 0000                  		bne.w	loc_13F86
0001E61E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001E624 6400 0000                  		bcc.w	locret_1408C
0001E628 0838 0006 D022             		btst	#6,($FFFFD022).w
0001E62E 6700 0000                  		beq.w	locret_1408C
0001E632 5368 0038                  		subq.w	#1,$38(a0)
0001E636 6A00 0000                  		bpl.w	loc_13FAC
0001E63A 317C 003B 0038             		move.w	#59,$38(a0)
0001E640 317C 0001 0036             		move.w	#1,$36(a0)
0001E646 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001E64C 0240 0001                  		andi.w	#1,d0
0001E650 1140 0034                  		move.b	d0,$34(a0)
0001E654 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001E658 0C40 0019                  		cmpi.w	#$19,d0
0001E65C 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001E65E 0C40 0014                  		cmpi.w	#$14,d0
0001E662 6700                       		beq.s	Obj0A_WarnSound
0001E664 0C40 000F                  		cmpi.w	#$F,d0
0001E668 6700                       		beq.s	Obj0A_WarnSound
0001E66A 0C40 000C                  		cmpi.w	#$C,d0
0001E66E 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001E670 6600                       		bne.s	loc_13F02
0001E672 303C 0031                  		move.w	#$31,d0
0001E676 4EB9 0000 3212             		jsr	(PlaySound).l	; play countdown music
0001E67C                            		
0001E67C                            loc_13F02:
0001E67C 5328 0032                  		subq.b	#1,$32(a0)
0001E680 6A00                       		bpl.s	Obj0A_ReduceAir
0001E682 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001E688 08E8 0007 0036             		bset	#7,$36(a0)
0001E68E 6000                       		bra.s	Obj0A_ReduceAir
0001E690                            
0001E690                            ; ===========================================================================
0001E690                            
0001E690                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001E690 303C 00A9                  		move.w	#$A9,d0
0001E694 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
0001E69A                            
0001E69A                            Obj0A_ReduceAir:
0001E69A 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
0001E69E 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
0001E6A2 4EB9 0000 0000             		jsr	ResumeMusic
0001E6A8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001E6AE 303C 003B                  		move.w	#$3B,d0
0001E6B2 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play drowning sound
0001E6B8 117C 000A 0034             		move.b	#$A,$34(a0)
0001E6BE 317C 0001 0036             		move.w	#1,$36(a0)
0001E6C4 317C 0078 002C             		move.w	#$78,$2C(a0)
0001E6CA 2F08                       		move.l	a0,-(sp)
0001E6CC 41F8 D000                  		lea	($FFFFD000).w,a0
0001E6D0 4EBA F266                  		jsr	Sonic_ResetOnFloor
0001E6D4 117C 0017 001C             		move.b	#$17,anim(a0)	; use Sonic's drowning animation
0001E6DA 08E8 0001 0022             		bset	#1,status(a0)
0001E6E0 08E8 0007 0002             		bset	#7,2(a0)
0001E6E6 317C 0000 0012             		move.w	#0,y_vel(a0)
0001E6EC 317C 0000 0010             		move.w	#0,x_vel(a0)
0001E6F2 317C 0000 0020             		move.w	#0,inertia(a0)
0001E6F8 117C 000A 0024             		move.b  #$A,routine(a0)       ; Force the character to drown
0001E6FE 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001E704 11FC 0000 FE1E             		move.b  #0,(f_timecount).w      ; Stop the timer immediately
0001E70A 205F                       		movea.l	(sp)+,a0
0001E70C 4E75                       		rts	
0001E70E                            ; ===========================================================================
0001E70E                            
0001E70E                            loc_13F86:
0001E70E 5368 002C                                  subq.w  #1,$2C(a0)
0001E712 6600                                       bne.s   loc_13FAC                       ; Make it jump straight to this location
0001E714 11FC 0006 D024                             move.b  #6,(v_player+routine).w
0001E71A 4E75                                       rts
0001E71C                            ; ===========================================================================
0001E71C                            
0001E71C                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001E71C 6000                       		bra.s	Obj0A_MakeItem
0001E71E                            ; ===========================================================================
0001E71E                            
0001E71E                            loc_13FAC:
0001E71E 4A68 0036                  		tst.w	$36(a0)
0001E722 6700 0000                  		beq.w	locret_1408C
0001E726 5368 003A                  		subq.w	#1,$3A(a0)
0001E72A 6A00 0000                  		bpl.w	locret_1408C
0001E72E                            
0001E72E                            Obj0A_MakeItem:
0001E72E 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001E734 0240 000F                  		andi.w	#$F,d0
0001E738 3140 003A                  		move.w	d0,$3A(a0)
0001E73C 4EB9 0001 6714             		jsr	SingleObjLoad
0001E742 6600 0000                  		bne.w	locret_1408C
0001E746 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001E74A 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001E750 7006                       		moveq	#6,d0
0001E752 0838 0000 D022             		btst	#0,($FFFFD022).w
0001E758 6700                       		beq.s	loc_13FF2
0001E75A 4440                       		neg.w	d0
0001E75C 137C 0040 0026             		move.b	#$40,$26(a1)
0001E762                            
0001E762                            loc_13FF2:
0001E762 D169 0008                  		add.w	d0,8(a1)
0001E766 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001E76C 137C 0006 0028             		move.b	#6,subtype(a1)
0001E772 4A68 002C                  		tst.w	$2C(a0)
0001E776 6700 0000                  		beq.w	loc_1403E
0001E77A 0268 0007 003A             		andi.w	#7,$3A(a0)
0001E780 0668 0000 003A             		addi.w	#0,$3A(a0)
0001E786 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001E78A 0440 000C                  		subi.w	#$C,d0
0001E78E 3340 000C                  		move.w	d0,$C(a1)
0001E792 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001E798 1340 0026                  		move.b	d0,$26(a1)
0001E79C 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001E7A0 0200 0003                  		andi.b	#3,d0
0001E7A4 6600                       		bne.s	loc_14082
0001E7A6 137C 000E 0028             		move.b	#$E,subtype(a1)
0001E7AC 6000                       		bra.s	loc_14082
0001E7AE                            ; ===========================================================================
0001E7AE                            
0001E7AE                            loc_1403E:
0001E7AE 0828 0007 0036             		btst	#7,$36(a0)
0001E7B4 6700                       		beq.s	loc_14082
0001E7B6 3438 FE14                  		move.w	($FFFFFE14).w,d2
0001E7BA E24A                       		lsr.w	#1,d2
0001E7BC 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001E7C2 0240 0003                  		andi.w	#3,d0
0001E7C6 6600                       		bne.s	loc_1406A
0001E7C8 08E8 0006 0036             		bset	#6,$36(a0)
0001E7CE 6600                       		bne.s	loc_14082
0001E7D0 1342 0028                  		move.b	d2,subtype(a1)
0001E7D4 337C 001C 0038             		move.w	#$1C,$38(a1)
0001E7DA                            
0001E7DA                            loc_1406A:
0001E7DA 4A28 0034                  		tst.b	$34(a0)
0001E7DE 6600                       		bne.s	loc_14082
0001E7E0 08E8 0006 0036             		bset	#6,$36(a0)
0001E7E6 6600                       		bne.s	loc_14082
0001E7E8 1342 0028                  		move.b	d2,subtype(a1)
0001E7EC 337C 001C 0038             		move.w	#$1C,$38(a1)
0001E7F2                            
0001E7F2                            loc_14082:
0001E7F2 5328 0034                  		subq.b	#1,$34(a0)
0001E7F6 6A00                       		bpl.s	locret_1408C
0001E7F8 4268 0036                  		clr.w	$36(a0)
0001E7FC                            
0001E7FC                            locret_1408C:
0001E7FC 4E75                       		rts	
0001E7FE                            
0001E7FE                            ;		include	"_incObj\Sonic LoadGfx.asm"
0001E7FE                            ;		include	"_incObj\Sonic RecordPosition.asm"
0001E7FE                            		
0001E7FE                            ; ---------------------------------------------------------------------------
0001E7FE                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001E7FE                            ; ---------------------------------------------------------------------------
0001E7FE                            
0001E7FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E7FE                            
0001E7FE                            
0001E7FE                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir; Debug_Main;
0001E7FE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001E804                            
0001E804                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001E804                             
0001E804 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
0001E808                            ;		bcc.w	ResumeMusic_Part2
0001E808                            
0001E808 B2FC D000                  		cmpa.w	#MainCharacter,a1
0001E80C 6600                       		bne.s	loc_140AC	; branch if it isn't player 1
0001E80E                            		
0001E80E                            Air_GetBgm:
0001E80E 3038 FF90                  		move.w  (Level_Music).w,d0      ; prepare to play current level's music
0001E812 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001E816 6700                       		beq.s	loc_186A0		; if not branch
0001E818 303C 002C                  		move.w	#$2C,d0
0001E81C                            
0001E81C                            loc_186A0:
0001E81C 4A38 FE19                  		tst.b	($FFFFFE19).w	; is Sonic super?
0001E820 6700 0000                  		beq.w	Air_PlayMusic	; if not branch
0001E824 303C 002D                  		move.w	#$2D,d0
0001E828                             
0001E828                            Air_PlayMusic:
0001E828 4A38 F7AA                  		tst.b	(Current_Boss_ID).w ; Is this a boss fight?
0001E82C 6700                       		beq.s	loc_140A6		; if not branch
0001E82E 303C 000E                  		move.w	#$0E,d0	; prepare to play boss music
0001E832                            
0001E832                            loc_140A6:
0001E832 4EB9 0000 3212             		jsr	(PlaySound).l
0001E838                            
0001E838                            loc_140AC:
0001E838 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001E83E 4238 D372                  		clr.b	($FFFFD372).w
0001E842                            ;locret_Super:
0001E842 4E75                       		rts	
0001E844                            ; End of function ResumeMusic
0001E844                            BossModeMusic:
0001E844                            JsrNormalMode:
0001E844 0C28 0004 0021             	cmp.b	#$4,collision_property(a0)
0001E84A 6600 0000                  	bne.w JsrNormalMode2
0001E84E 4EF9 0000 0000             	jmp	PinchMode
0001E854                            
0001E854                            JsrNormalMode2:
0001E854 4EF9 0000 0000             	jmp	NormalMode
0001E85A 4E75                       	rts
0001E85C                            
0001E85C                            NormalMode:
0001E85C 303C 006E                  	move.w	#$6E,d0
0001E860 4EB9 0000 3212             	jsr	(PlaySound).l
0001E866 4E75                       	rts
0001E868                            
0001E868                            PinchMode:
0001E868 303C 006E                  	move.w	#$6E,d0
0001E86C 4EB9 0000 325C             	jsr	(PlaySound_Special).l
0001E872 303C 000D                  	move.w	#$0D,d0
0001E876 4EB9 0000 3212             	jsr	(PlaySound).l
0001E87C 4E75                       	rts
0001E87E                            	
0001E87E                            BossMusic:
0001E87E 0C78 0502 FE10             	cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0001E884 6700                       	beq.s	BossMusic2	; if not, branch	
0001E886                            ;	addi.b	#1,($FFFFFF0A).w
0001E886 4EFA FFBC                  	jmp	JsrNormalMode
0001E88A                            	
0001E88A                            BossMusic2:
0001E88A 303C 00AC                  	move.w	#$AC,d0
0001E88E 4EB9 0000 3212             	jsr	(PlaySound).l
0001E894 4E75                       	rts
0001E896                            
0001E896                            ; ===========================================================================
0001E896                            Ani_obj0A:
0001E896                            	include "_anim\obj0A.asm"
0001E896                            ; ---------------------------------------------------------------------------
0001E896                            ; Animation script - countdown numbers and bubbles (LZ)
0001E896                            ; ---------------------------------------------------------------------------
0001E896 0000                       		dc.w byte_140D6-Ani_obj0A
0001E898 0000                       		dc.w byte_140E0-Ani_obj0A
0001E89A 0000                       		dc.w byte_140EA-Ani_obj0A
0001E89C 0000                       		dc.w byte_140F4-Ani_obj0A
0001E89E 0000                       		dc.w byte_140FE-Ani_obj0A
0001E8A0 0000                       		dc.w byte_14108-Ani_obj0A
0001E8A2 0000                       		dc.w byte_14112-Ani_obj0A
0001E8A4 0000                       		dc.w byte_14118-Ani_obj0A
0001E8A6 0000                       		dc.w byte_14120-Ani_obj0A
0001E8A8 0000                       		dc.w byte_14128-Ani_obj0A
0001E8AA 0000                       		dc.w byte_14130-Ani_obj0A
0001E8AC 0000                       		dc.w byte_14138-Ani_obj0A
0001E8AE 0000                       		dc.w byte_14140-Ani_obj0A
0001E8B0 0000                       		dc.w byte_14148-Ani_obj0A
0001E8B2 0000                       		dc.w byte_1414A-Ani_obj0A
0001E8B4 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
0001E8BE 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001E8C8 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
0001E8D2 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001E8DC 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
0001E8E6 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
0001E8F0 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
0001E8F6 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
0001E8FE 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001E906 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001E90E 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
0001E916 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001E91E 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
0001E926 0EFC                       byte_14148:	dc.b $E, $FC
0001E928 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001E92E                            		even
0001E92E                            		even
0001E92E                            
0001E92E                            ; ---------------------------------------------------------------------------
0001E92E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001E92E                            ; ---------------------------------------------------------------------------
0001E92E                            Map_obj0A:
0001E92E                            	include "_maps\obj0A.asm"
0001E92E                            ; ---------------------------------------------------------------------------
0001E92E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001E92E                            ; ---------------------------------------------------------------------------
0001E92E 0000                       		dc.w byte_14152-Map_obj0A
0001E930 01                         byte_14152:	dc.b 1
0001E931 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001E936                            		even
0001E936                            		even
0001E936                            
0001E936                            ; ===========================================================================
0001E936                            
0001E936                            ; ---------------------------------------------------------------------------
0001E936                            ; Object 02 - Shield (A slightly modified port from Sonic 2F)
0001E936                            ; ---------------------------------------------------------------------------
0001E936                            Obj02:
0001E936 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; Is Sonic Invincible?
0001E93A 6600 0000                  		bne.w	loc_19500		; if yes, branch
0001E93E 223C 0000 0000             		move.l	#Unc_Shield,d1			        ; Call for Regular Shield Art
0001E944 343C A820                  		move.w	#$A820,d2			        ; Load Art from this location (VRAM location*20)
0001E948                            								; In this case, VRAM = $541*20
0001E948 363C 0200                  		move.w	#$200,d3
0001E94C 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
0001E952                            ;===============================================================================
0001E952                            ; Object 0x38 - Shield
0001E952                            ; [ Begin ]
0001E952                            ;===============================================================================	
0001E952                            loc_19500:
0001E952                            ; ----------------------------------------------------------------------------
0001E952                            ; Object 38 - Shield
0001E952                            ; ----------------------------------------------------------------------------
0001E952                            ; Sprite_1D8F2:
0001E952                            ;Obj38:
0001E952 7000                       	moveq	#0,d0
0001E954 1028 0024                  	move.b	routine(a0),d0
0001E958 323B 0000                  	move.w	Obj38_Index(pc,d0.w),d1
0001E95C 4EFB 1000                  	jmp	Obj38_Index(pc,d1.w)
0001E960                            ; ===========================================================================
0001E960                            ; off_1D900:
0001E960                            Obj38_Index:
0001E960 0000                       	dc.w Obj38_Main-Obj38_Index
0001E962 0000                       	dc.w Obj38_Shield-Obj38_Index; 1
0001E964                            ; ===========================================================================
0001E964                            ; loc_1D904:
0001E964                            Obj38_Main:
0001E964 5428 0024                  	addq.b	#2,routine(a0)
0001E968 217C 0000 0000 0004        	move.l	#Map_obj38_Sheild,mappings(a0)
0001E970 117C 0004 0001             	move.b	#4,render_flags(a0)
0001E976 317C 0080 0018             	move.w	#$80,priority(a0)
0001E97C 117C 0018 0023             	move.b	#$18,width_pixels(a0)
0001E982 317C 0541 0002             	move.w	#$541,art_tile(a0)
0001E988                            	;bsr.w	Adjust2PArtPointer
0001E988                            ; loc_1D92C:
0001E988                            Obj38_Shield:
0001E988                            ;	movea.w	parent(a0),a2 ; a2=character
0001E988 4A38 FE2D                  	tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001E98C 6600                       	bne.s	return_1D976	; if yes, branch
0001E98E 4A38 FE2C                  	tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001E992 6700                       	beq.s	JmpTo7_DeleteObject	; if the flag is not set, branch
0001E994 3178 D008 0008             	move.w	(MainCharacter+x_pos).w,x_pos(a0)	; Copy the X-position from Sonic
0001E99A 3178 D00C 000C             	move.w	(MainCharacter+y_pos).w,y_pos(a0)	; Copy the Y-position from Sonic
0001E9A0 1178 D022 0022             	move.b	(MainCharacter+status).w,status(a0)	; Copy Sonic's Status
0001E9A6 0268 7FFF 0002             	andi.w	#$7FFF,art_tile(a0)
0001E9AC 4A78 D002                  	tst.w	(MainCharacter+art_tile).w
0001E9B0 6A00                       	bpl.s	Obj38_Display
0001E9B2 0068 8000 0002             	ori.w	#$8000,art_tile(a0)
0001E9B8                            ; loc_1D964:
0001E9B8                            Obj38_Display:
0001E9B8 43F9 0000 0000             	lea	(Ani_Obj38_Shield).l,a1
0001E9BE 4EB9 0001 2624             	jsr	AnimateSprite
0001E9C4 4EF9 0001 5C48             	jmp	DisplaySprite
0001E9CA                            ; ===========================================================================
0001E9CA                            
0001E9CA                            return_1D976:
0001E9CA 4E75                       	rts
0001E9CC                            ; ===========================================================================
0001E9CC                            
0001E9CC                            JmpTo7_DeleteObject:
0001E9CC 4EF9 0001 5BFC             	jmp	DeleteObject
0001E9D2                            ; ===========================================================================
0001E9D2                            ;===============================================================================
0001E9D2                            ; Object 0x38 - Shield
0001E9D2                            ; [ End ]
0001E9D2                            ;===============================================================================
0001E9D2                            
0001E9D2                            
0001E9D2                            ; ---------------------------------------------------------------------------
0001E9D2                            ; Object 38 - invincibility stars
0001E9D2                            ; ---------------------------------------------------------------------------
0001E9D2                            
0001E9D2                            Obj38:					; XREF: Obj_Index
0001E9D2 4A38 FE1E                  		tst.b	(Update_HUD_timer).w	; has Sonic reached the end of the act?
0001E9D6 6700 0000                  		beq.w	Invincibility_Main		; if yes, branch
0001E9DA 223C 0000 0000             		move.l	#Unc_Stars,d1
0001E9E0 343C ABC0                  		move.w	#$ABC0,d2
0001E9E4 363C 0200                  		move.w	#$200,d3
0001E9E8 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
0001E9EE                            Invincibility_Main:
0001E9EE 7000                       		moveq	#0,d0
0001E9F0 1028 0024                  		move.b	$24(a0),d0
0001E9F4                            Invincibility_Init:
0001E9F4 323B 0000                  		move.w	off_18152(pc,d0.w),d1
0001E9F8 4EFB 1000                  		jmp	off_18152(pc,d1.w)
0001E9FC                            ; ---------------------------------------------------------------------------
0001E9FC 0000                       off_18152:	dc.w loc_1816A-off_18152 ; DATA	XREF: ROM:0001814Ar
0001E9FE                            					; ROM:off_18152o ...
0001E9FE 0000                       		dc.w loc_181C4-off_18152
0001EA00 0000                       		dc.w loc_1823E-off_18152
0001EA02 0000 0000                  		dc.l unk_18335
0001EA06 000B                       		dc.w $B
0001EA08 0000 0000                  		dc.l unk_1834A
0001EA0C 160D                       		dc.w $160D
0001EA0E 0000 0000                  		dc.l unk_18363
0001EA12 2C0D                       		dc.w $2C0D
0001EA14                            ; ---------------------------------------------------------------------------
0001EA14                            
0001EA14                            loc_1816A:				; DATA XREF: ROM:off_18152o
0001EA14 7400                       		moveq	#0,d2
0001EA16 45FA FFE4                  		lea	off_18152,a2
0001EA1A 43D0                       		lea	(a0),a1
0001EA1C 7203                       		moveq	#3,d1
0001EA1E                            
0001EA1E                            loc_18174:				; CODE XREF: ROM:000181B4j
0001EA1E 1290                       		move.b	(a0),(a1)
0001EA20 137C 0004 0024             		move.b	#4,$24(a1)
0001EA26 237C 0000 0000 0004        		move.l	#Map_obj38,4(a1)
0001EA2E 337C 055E 0002             		move.w	#$55E,2(a1)
0001EA34 137C 0004 0001             		move.b	#4,1(a1)
0001EA3A 08E9 0006 0001             		bset	#6,1(a1)
0001EA40 137C 0010 000E             		move.b	#$10,$E(a1)
0001EA46 137C 0002 000F             		move.b	#2,$F(a1)
0001EA4C 1342 0036                  		move.b	d2,$36(a1)
0001EA50 5242                       		addq.w	#1,d2
0001EA52 235A 0030                  		move.l	(a2)+,$30(a1)
0001EA56 335A 0034                  		move.w	(a2)+,$34(a1)
0001EA5A 43E9 0040                  		lea	$40(a1),a1
0001EA5E 51C9 FFBE                  		dbf	d1,loc_18174
0001EA62 117C 0002 0024             		move.b	#2,$24(a0)
0001EA68 117C 0004 0034             		move.b	#4,$34(a0)
0001EA6E                            
0001EA6E                            loc_181C4:				; DATA XREF: ROM:00018154o
0001EA6E 43F8 D000                  		lea	($FFFFD000).w,a1
0001EA72                            ;		tst.b	($FFFFFE19).w
0001EA72                            ;		bne.w	loc_181FA
0001EA72 4A38 FE2D                  		tst.b	($FFFFFE2D).w
0001EA76 6700 0000                  		beq.w	loc_181FA
0001EA7A 3029 0008                  		move.w	8(a1),d0
0001EA7E 3140 0008                  		move.w	d0,8(a0)
0001EA82 3229 000C                  		move.w	$C(a1),d1
0001EA86 3141 000C                  		move.w	d1,$C(a0)
0001EA8A 45E8 0010                  		lea	$10(a0),a2
0001EA8E 47F9 0000 0000             		lea	unk_18328,a3
0001EA94 7A00                       		moveq	#0,d5
0001EA96                            
0001EA96                            loc_181EA:				; CODE XREF: ROM:000181F8j
0001EA96 3428 0038                  		move.w	$38(a0),d2
0001EA9A 1A33 2000                  		move.b	(a3,d2.w),d5
0001EA9E 6A00                       		bpl.s	loc_18200
0001EAA0 4268 0038                  		clr.w	$38(a0)
0001EAA4 60F0                       		bra.s	loc_181EA
0001EAA6                            ; ---------------------------------------------------------------------------
0001EAA6                            
0001EAA6                            loc_181FA:				; CODE XREF: ROM:000181CCj
0001EAA6                            					; ROM:00018246j
0001EAA6 4EF9 0001 5BFC             		jmp	DeleteObject
0001EAAC                            ; ---------------------------------------------------------------------------
0001EAAC                            
0001EAAC                            loc_18200:				; CODE XREF: ROM:000181F2j
0001EAAC 5268 0038                  		addq.w	#1,$38(a0)
0001EAB0 4DF9 0000 0000             		lea	unk_182E8,a6
0001EAB6 1C28 0034                  		move.b	$34(a0),d6
0001EABA 4EB9 0000 0000             		jsr	sub_182D2
0001EAC0 34C2                       		move.w	d2,(a2)+
0001EAC2 34C3                       		move.w	d3,(a2)+
0001EAC4 34C5                       		move.w	d5,(a2)+
0001EAC6 0646 0020                  		addi.w	#$20,d6	; ' '
0001EACA 4EB9 0000 0000             		jsr	sub_182D2
0001EAD0 34C2                       		move.w	d2,(a2)+
0001EAD2 34C3                       		move.w	d3,(a2)+
0001EAD4 34C5                       		move.w	d5,(a2)+
0001EAD6 7012                       		moveq	#$12,d0
0001EAD8 0829 0000 0022             		btst	#0,$22(a1)
0001EADE 6700                       		beq.s	loc_18230
0001EAE0 4440                       		neg.w	d0
0001EAE2                            
0001EAE2                            loc_18230:				; CODE XREF: ROM:0001822Cj
0001EAE2 D128 0034                  		add.b	d0,$34(a0)
0001EAE6 303C 0080                  		move.w	#$80,d0	; '?'
0001EAEA 4EF9 0001 5C74             		jmp	DisplaySprite3
0001EAF0                            ; ---------------------------------------------------------------------------
0001EAF0                            
0001EAF0                            loc_1823E:				; DATA XREF: ROM:00018156o
0001EAF0 43F8 D000                  		lea	($FFFFD000).w,a1
0001EAF4 4A38 FE19                  		tst.b	($FFFFFE19).w
0001EAF8 66AC                       		bne.s	loc_181FA
0001EAFA 4A38 FE2D                  		tst.b	($FFFFFE2D).w
0001EAFE 67A6                       		beq.s	loc_181FA
0001EB00 4BF8 F7A8                  		lea	($FFFFF7A8).w,a5
0001EB04 4DF8 CB00                  		lea	($FFFFCB00).w,a6
0001EB08 1228 0036                  		move.b	$36(a0),d1
0001EB0C E509                       		lsl.b	#2,d1
0001EB0E 3401                       		move.w	d1,d2
0001EB10 D241                       		add.w	d1,d1
0001EB12 D242                       		add.w	d2,d1
0001EB14 3015                       		move.w	(a5),d0
0001EB16 9001                       		sub.b	d1,d0
0001EB18 45F6 0000                  		lea	(a6,d0.w),a2
0001EB1C 301A                       		move.w	(a2)+,d0
0001EB1E 321A                       		move.w	(a2)+,d1
0001EB20 3140 0008                  		move.w	d0,8(a0)
0001EB24 3141 000C                  		move.w	d1,$C(a0)
0001EB28 45E8 0010                  		lea	$10(a0),a2
0001EB2C 2668 0030                  		movea.l	$30(a0),a3
0001EB30                            
0001EB30                            loc_18278:				; CODE XREF: ROM:00018286j
0001EB30 3428 0038                  		move.w	$38(a0),d2
0001EB34 1A33 2000                  		move.b	(a3,d2.w),d5
0001EB38 6A00                       		bpl.s	loc_18288
0001EB3A 4268 0038                  		clr.w	$38(a0)
0001EB3E 60F0                       		bra.s	loc_18278
0001EB40                            ; ---------------------------------------------------------------------------
0001EB40                            
0001EB40                            loc_18288:				; CODE XREF: ROM:00018280j
0001EB40 4845                       		swap	d5
0001EB42 D428 0035                  		add.b	$35(a0),d2
0001EB46 1A33 2000                  		move.b	(a3,d2.w),d5
0001EB4A 5268 0038                  		addq.w	#1,$38(a0)
0001EB4E 4DF9 0000 0000             		lea	unk_182E8,a6
0001EB54 1C28 0034                  		move.b	$34(a0),d6
0001EB58 4EB9 0000 0000             		jsr	sub_182D2
0001EB5E 34C2                       		move.w	d2,(a2)+
0001EB60 34C3                       		move.w	d3,(a2)+
0001EB62 34C5                       		move.w	d5,(a2)+
0001EB64 0646 0020                  		addi.w	#$20,d6	; ' '
0001EB68 4845                       		swap	d5
0001EB6A 4EB9 0000 0000             		jsr	sub_182D2
0001EB70 34C2                       		move.w	d2,(a2)+
0001EB72 34C3                       		move.w	d3,(a2)+
0001EB74 34C5                       		move.w	d5,(a2)+
0001EB76 7002                       		moveq	#2,d0
0001EB78 0829 0000 0022             		btst	#0,$22(a1)
0001EB7E 6700                       		beq.s	loc_182C4
0001EB80 4440                       		neg.w	d0
0001EB82                            
0001EB82                            loc_182C4:				; CODE XREF: ROM:000182C0j
0001EB82 D128 0034                  		add.b	d0,$34(a0)
0001EB86 303C 0080                  		move.w	#$80,d0	; '?'
0001EB8A 4EF9 0001 5C74             		jmp	DisplaySprite3
0001EB90                            
0001EB90                            ; =============== S U B	R O U T	I N E =======================================
0001EB90                            
0001EB90                            
0001EB90                            sub_182D2:				; CODE XREF: ROM:0001820Cp
0001EB90                            					; ROM:0001821Ap ...
0001EB90 0246 003E                  		andi.w	#$3E,d6	; '>'
0001EB94 1436 6000                  		move.b	(a6,d6.w),d2
0001EB98 1636 6001                  		move.b	1(a6,d6.w),d3
0001EB9C 4882                       		ext.w	d2
0001EB9E 4883                       		ext.w	d3
0001EBA0 D440                       		add.w	d0,d2
0001EBA2 D641                       		add.w	d1,d3
0001EBA4 4E75                       		rts
0001EBA6                            ; End of function sub_182D2
0001EBA6                            
0001EBA6                            ; ---------------------------------------------------------------------------
0001EBA6 0F                         unk_182E8:	dc.b  $F		; DATA XREF: ROM:00018204o
0001EBA7                            					; ROM:00018296o
0001EBA7 00                         		dc.b   0
0001EBA8 0F                         		dc.b  $F
0001EBA9 03                         		dc.b   3
0001EBAA 0E                         		dc.b  $E
0001EBAB 06                         		dc.b   6
0001EBAC 0D                         		dc.b  $D
0001EBAD 08                         		dc.b   8
0001EBAE 0B                         		dc.b  $B
0001EBAF 0B                         		dc.b  $B
0001EBB0 08                         		dc.b   8
0001EBB1 0D                         		dc.b  $D
0001EBB2 06                         		dc.b   6
0001EBB3 0E                         		dc.b  $E
0001EBB4 03                         		dc.b   3
0001EBB5 0F                         		dc.b  $F
0001EBB6 00                         		dc.b   0
0001EBB7 10                         		dc.b $10
0001EBB8 FC                         		dc.b $FC ; u
0001EBB9 0F                         		dc.b  $F
0001EBBA F9                         		dc.b $F9 ; u
0001EBBB 0E                         		dc.b  $E
0001EBBC F7                         		dc.b $F7 ; ?
0001EBBD 0D                         		dc.b  $D
0001EBBE F4                         		dc.b $F4 ; o
0001EBBF 0B                         		dc.b  $B
0001EBC0 F2                         		dc.b $F2 ; o
0001EBC1 08                         		dc.b   8
0001EBC2 F1                         		dc.b $F1 ; n
0001EBC3 06                         		dc.b   6
0001EBC4 F0                         		dc.b $F0 ; ?
0001EBC5 03                         		dc.b   3
0001EBC6 F0                         		dc.b $F0 ; ?
0001EBC7 00                         		dc.b   0
0001EBC8 F0                         		dc.b $F0 ; ?
0001EBC9 FC                         		dc.b $FC ; u
0001EBCA F1                         		dc.b $F1 ; n
0001EBCB F9                         		dc.b $F9 ; u
0001EBCC F2                         		dc.b $F2 ; o
0001EBCD F7                         		dc.b $F7 ; ?
0001EBCE F4                         		dc.b $F4 ; o
0001EBCF F4                         		dc.b $F4 ; o
0001EBD0 F7                         		dc.b $F7 ; ?
0001EBD1 F2                         		dc.b $F2 ; o
0001EBD2 F9                         		dc.b $F9 ; u
0001EBD3 F1                         		dc.b $F1 ; n
0001EBD4 FC                         		dc.b $FC ; u
0001EBD5 F0                         		dc.b $F0 ; ?
0001EBD6 FF                         		dc.b $FF
0001EBD7 F0                         		dc.b $F0 ; ?
0001EBD8 03                         		dc.b   3
0001EBD9 F0                         		dc.b $F0 ; ?
0001EBDA 06                         		dc.b   6
0001EBDB F1                         		dc.b $F1 ; n
0001EBDC 08                         		dc.b   8
0001EBDD F2                         		dc.b $F2 ; o
0001EBDE 0B                         		dc.b  $B
0001EBDF F4                         		dc.b $F4 ; o
0001EBE0 0D                         		dc.b  $D
0001EBE1 F7                         		dc.b $F7 ; ?
0001EBE2 0E                         		dc.b  $E
0001EBE3 F9                         		dc.b $F9 ; u
0001EBE4 0F                         		dc.b  $F
0001EBE5 FC                         		dc.b $FC ; u
0001EBE6 08                         unk_18328:	dc.b   8		; DATA XREF: ROM:000181E4o
0001EBE7 05                         		dc.b   5
0001EBE8 07                         		dc.b   7
0001EBE9 06                         		dc.b   6
0001EBEA 06                         		dc.b   6
0001EBEB 07                         		dc.b   7
0001EBEC 05                         		dc.b   5
0001EBED 08                         		dc.b   8
0001EBEE 06                         		dc.b   6
0001EBEF 07                         		dc.b   7
0001EBF0 07                         		dc.b   7
0001EBF1 06                         		dc.b   6
0001EBF2 FF                         		dc.b $FF
0001EBF3 08                         unk_18335:	dc.b   8		; DATA XREF: ROM:00018158o
0001EBF4 07                         		dc.b   7
0001EBF5 06                         		dc.b   6
0001EBF6 05                         		dc.b   5
0001EBF7 04                         		dc.b   4
0001EBF8 03                         		dc.b   3
0001EBF9 04                         		dc.b   4
0001EBFA 05                         		dc.b   5
0001EBFB 06                         		dc.b   6
0001EBFC 07                         		dc.b   7
0001EBFD FF                         		dc.b $FF
0001EBFE 03                         		dc.b   3
0001EBFF 04                         		dc.b   4
0001EC00 05                         		dc.b   5
0001EC01 06                         		dc.b   6
0001EC02 07                         		dc.b   7
0001EC03 08                         		dc.b   8
0001EC04 07                         		dc.b   7
0001EC05 06                         		dc.b   6
0001EC06 05                         		dc.b   5
0001EC07 04                         		dc.b   4
0001EC08 08                         unk_1834A:	dc.b   8		; DATA XREF: ROM:0001815Eo
0001EC09 07                         		dc.b   7
0001EC0A 06                         		dc.b   6
0001EC0B 05                         		dc.b   5
0001EC0C 04                         		dc.b   4
0001EC0D 03                         		dc.b   3
0001EC0E 02                         		dc.b   2
0001EC0F 03                         		dc.b   3
0001EC10 04                         		dc.b   4
0001EC11 05                         		dc.b   5
0001EC12 06                         		dc.b   6
0001EC13 07                         		dc.b   7
0001EC14 FF                         		dc.b $FF
0001EC15 02                         		dc.b   2
0001EC16 03                         		dc.b   3
0001EC17 04                         		dc.b   4
0001EC18 05                         		dc.b   5
0001EC19 06                         		dc.b   6
0001EC1A 07                         		dc.b   7
0001EC1B 08                         		dc.b   8
0001EC1C 07                         		dc.b   7
0001EC1D 06                         		dc.b   6
0001EC1E 05                         		dc.b   5
0001EC1F 04                         		dc.b   4
0001EC20 03                         		dc.b   3
0001EC21 07                         unk_18363:	dc.b   7		; DATA XREF: ROM:00018164o
0001EC22 06                         		dc.b   6
0001EC23 05                         		dc.b   5
0001EC24 04                         		dc.b   4
0001EC25 03                         		dc.b   3
0001EC26 02                         		dc.b   2
0001EC27 01                         		dc.b   1
0001EC28 02                         		dc.b   2
0001EC29 03                         		dc.b   3
0001EC2A 04                         		dc.b   4
0001EC2B 05                         		dc.b   5
0001EC2C 06                         		dc.b   6
0001EC2D FF                         		dc.b $FF
0001EC2E 01                         		dc.b   1
0001EC2F 02                         		dc.b   2
0001EC30 03                         		dc.b   3
0001EC31 04                         		dc.b   4
0001EC32 05                         		dc.b   5
0001EC33 06                         		dc.b   6
0001EC34 07                         		dc.b   7
0001EC35 06                         		dc.b   6
0001EC36 05                         		dc.b   5
0001EC37 04                         		dc.b   4
0001EC38 03                         		dc.b   3
0001EC39 02                         		dc.b   2
0001EC3A 00                         		dc.b   0
0001EC3B 02                         		dc.b   2
0001EC3C 00                         		dc.b   0
0001EC3D 05                         		dc.b   5
0001EC3E 00                         		dc.b   0
0001EC3F 05                         		dc.b   5
0001EC40 01                         		dc.b   1
0001EC41 05                         		dc.b   5
0001EC42 02                         		dc.b   2
0001EC43 05                         		dc.b   5
0001EC44 03                         		dc.b   3
0001EC45 05                         		dc.b   5
0001EC46 04                         		dc.b   4
0001EC47 FF                         		dc.b $FF
0001EC48                            ; ---------------------------------------------------------------------------
0001EC48                            ; Object 4A - special stage entry from beta
0001EC48                            ; ---------------------------------------------------------------------------
0001EC48                            
0001EC48                            Obj4A:					; XREF: Obj_Index
0001EC48 7000                       		moveq	#0,d0
0001EC4A 1028 0024                  		move.b	routine(a0),d0
0001EC4E 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001EC52 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001EC56                            ; ===========================================================================
0001EC56 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001EC58 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001EC5A 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001EC5C                            ; ===========================================================================
0001EC5C                            
0001EC5C                            Obj4A_Main:				; XREF: Obj4A_Index
0001EC5C 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
0001EC60 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001EC62 4E75                       		rts	
0001EC64                            ; ===========================================================================
0001EC64                            
0001EC64                            Obj4A_Main2:
0001EC64 5428 0024                  		addq.b	#2,routine(a0)
0001EC68 217C 0000 0000 0004        		move.l	#Map_Rocket,4(a0)
0001EC70 117C 0004 0001             		move.b	#4,1(a0)
0001EC76 317C 0080 0018             		move.w	#$80,priority(a0)
0001EC7C 117C 0038 0023             		move.b	#$38,width_pixels(a0)
0001EC82 317C 0541 0002             		move.w	#$541,2(a0)
0001EC88 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001EC8E                            
0001EC8E                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001EC8E                            ;		move.w	($FFFFD008).w,8(a0)
0001EC8E                            ;		move.w	($FFFFD00C).w,$C(a0)
0001EC8E                            ;		move.b	($FFFFD022).w,status(a0)
0001EC8E 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001EC94 4EB9 0001 2624             		jsr	AnimateSprite
0001EC9A                            ;		cmpi.b	#2,mapping_frame(a0)
0001EC9A                            ;		bne.s	Obj4A_Display
0001EC9A                            ;		tst.b	($FFFFD000).w
0001EC9A                            ;		beq.s	Obj4A_Display
0001EC9A                            ;		move.b	#0,($FFFFD000).w ; remove Sonic
0001EC9A 303C 006A                  		move.w	#$6A,d0
0001EC9E 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001ECA4                            
0001ECA4                            Obj4A_Display:
0001ECA4 4EF9 0001 5C48             		jmp	DisplaySprite
0001ECAA                            ; ===========================================================================
0001ECAA                            
0001ECAA                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
0001ECAA                            ;		subq.w	#1,$30(a0)	; subtract 1 from time
0001ECAA                            ;		bne.s	Obj4A_Wait	; if time remains, branch
0001ECAA                            ;		move.b	#1,($FFFFD000).w ; load	Sonic object
0001ECAA 4EF9 0001 5BFC             		jmp	DeleteObject
0001ECB0                            ; ===========================================================================
0001ECB0                            
0001ECB0                            Obj4A_Wait:
0001ECB0 4E75                       		rts	
0001ECB2                            ; ===========================================================================
0001ECB2                            ; ---------------------------------------------------------------------------
0001ECB2                            ; Object 02 - Blank
0001ECB2                            ; ---------------------------------------------------------------------------
0001ECB2                            Obj04:
0001ECB2 0828 0006 0001             	btst	#6,render_flags(a0)	; is this a child sprite object?
0001ECB8 6600 0000                  	bne.w	dispchild			; if yes, branch
0001ECBC 4A78 D130                  	tst.w	($FFFFD130).w ; has title card sequence finished?
0001ECC0 6600 0000                  	bne.w	return_13684	; if not, branch
0001ECC4 4A78 D5C0                  	tst.w	($FFFFD5C0).w
0001ECC8 6600 0000                  	bne.w	return_13684
0001ECCC 223C 0000 0000             	move.l	#Unc_PauseMenu,d1			        ; Call for Regular Shield Art
0001ECD2 343C BC80                  	move.w	#$BC80,d2			        ; Load Art from this location (VRAM location*20)
0001ECD6                            								; In this case, VRAM = $541*20
0001ECD6 363C 0100                  	move.w	#$100,d3
0001ECDA 4EB9 0000 34E0             	jsr	(QueueDMATransfer).l
0001ECE0                            Obj04_Obj:
0001ECE0 7000                       	moveq	#0,d0
0001ECE2 1028 0024                  	move.b	routine(a0),d0
0001ECE6 323B 0000                  	move.w	Obj8F_States(pc,d0.w),d1
0001ECEA 4EBB 1000                  	jsr	Obj8F_States(pc,d1.w)
0001ECEE 4EF9 0001 5C48             	jmp	DisplaySprite
0001ECF4                            dispchild:	
0001ECF4 303C 0180                  	move.w	#$180,d0
0001ECF8 4EF9 0001 5C74             	jmp	DisplaySprite3
0001ECFE                            ; ===========================================================================
0001ECFE                            ; off_13612:
0001ECFE                            Obj8F_States:
0001ECFE 0000                       	dc.w Obj8F_Init-Obj8F_States	; 0
0001ED00 0000                       	dc.w Obj8F_Main-Obj8F_States	; 2
0001ED02                            ; ===========================================================================
0001ED02                            ; loc_13616:
0001ED02                            Obj8F_Init:
0001ED02 10BC 0004                  	move.b 	#4,(a0)	
0001ED06 5428 0024                  	addq.b	#2,routine(a0) ; => Obj0F_Main
0001ED0A 317C 0100 0008             	move.w	#$100,8(a0)
0001ED10 317C 0150 000A             	move.w	#$150,$A(a0)
0001ED16 217C 0000 0000 0004        	move.l	#Map_PauseMenu,mappings(a0)
0001ED1E 317C 05E4 0002             	move.w	#$5E4,art_tile(a0)
0001ED24 4EB8 32E8                  	jsr	LoadSpriteList
0001ED28                            ;	move.b	#0,priority(a0)
0001ED28 117C 0080 0001             	move.b	#$80,1(a0)
0001ED2E 117C 0000 0018             	move.b	#0,priority(a0)
0001ED34 0238 0001 FFBA             	andi.b	#1,($FFFFFFBA).w
0001ED3A 1178 FFBA 001A             	move.b	($FFFFFFBA).w,mapping_frame(a0)
0001ED40                            
0001ED40                            Obj8F_Animate:
0001ED40 43F9 0001 2610             	lea	(Ani_obj0F).l,a1
0001ED46 4EB9 0001 2624             	jsr	AnimateSprite
0001ED4C                            ;	jmp	DisplaySprite
0001ED4C                            ; loc_13644:
0001ED4C                            Obj8F_Main:
0001ED4C 7400                       	moveq	#0,d2
0001ED4E 1438 FFBA                  	move.b	($FFFFFFBA).w,d2
0001ED52 1038 F605                  	move.b	(Ctrl_1_Press).w,d0
0001ED56                            ;	or.b	(Ctrl_2_Press).w,d0
0001ED56 0800 0000                  	btst	#0,d0
0001ED5A 6700                       	beq.s	Branch1
0001ED5C 5302                       	subq.b	#1,d2
0001ED5E 6400                       	bcc.s	Branch1
0001ED60 143C 0002                  	move.b	#2,d2
0001ED64                            Branch1:
0001ED64 0800 0001                  	btst	#1,d0
0001ED68 6700                       	beq.s	Branch2
0001ED6A 5202                       	addq.b	#1,d2
0001ED6C 0C02 0003                  	cmpi.b	#3,d2
0001ED70 6500                       	bcs.s	Branch2
0001ED72 7400                       	moveq	#0,d2
0001ED74                            Branch2:
0001ED74 1142 001A                  	move.b	d2,mapping_frame(a0)
0001ED78 11C2 FFBA                  	move.b	d2,($FFFFFFBA).w
0001ED7C                            ;	andi.b	#3,d0
0001ED7C                            ;	beq.s	return_13684
0001ED7C                            ;	moveq	#$4D+$80,d0 ; selection blip sound
0001ED7C                            ;	jsr	Jmpto_PlaySound_Special
0001ED7C                            
0001ED7C                            return_13684:
0001ED7C 4E75                       	rts
0001ED7E                            
0001ED7E                            
0001ED7E                            	
0001ED7E                            Map_PauseMenu:
0001ED7E                            	include	"_maps\PauseMenuModMap.asm"
0001ED7E                            ; --------------------------------------------------------------------------------
0001ED7E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001ED7E                            ; --------------------------------------------------------------------------------
0001ED7E                            
0001ED7E                            SME_pVhg0:	
0001ED7E 0000 0000                  		dc.w SME_pVhg0_6-SME_pVhg0, SME_pVhg0_15B-SME_pVhg0	
0001ED82 0000                       		dc.w SME_pVhg0_2B0-SME_pVhg0	
0001ED84 44                         SME_pVhg0_6:	dc.b $44	
0001ED85 9000 A001 08               		dc.b $90, 0, $A0, 1, 8	
0001ED8A 9000 A005 10               		dc.b $90, 0, $A0, 5, $10	
0001ED8F 9000 A004 18               		dc.b $90, 0, $A0, 4, $18	
0001ED94 9000 A008 20               		dc.b $90, 0, $A0, 8, $20	
0001ED99 9000 A009 38               		dc.b $90, 0, $A0, 9, $38	
0001ED9E 9000 A002 40               		dc.b $90, 0, $A0, 2, $40	
0001EDA3 9800 8006 08               		dc.b $98, 0, $80, 6, 8	
0001EDA8 9800 8002 10               		dc.b $98, 0, $80, 2, $10	
0001EDAD 9800 8000 28               		dc.b $98, 0, $80, 0, $28	
0001EDB2 9800 8006 30               		dc.b $98, 0, $80, 6, $30	
0001EDB7 9800 8008 38               		dc.b $98, 0, $80, 8, $38	
0001EDBC A000 800A 08               		dc.b $A0, 0, $80, $A, 8	
0001EDC1 A000 8009 10               		dc.b $A0, 0, $80, 9, $10	
0001EDC6 A000 8003 18               		dc.b $A0, 0, $80, 3, $18	
0001EDCB A000 8008 20               		dc.b $A0, 0, $80, 8, $20	
0001EDD0 9000 800B F8               		dc.b $90, 0, $80, $B, $F8	
0001EDD5 9004 A003 28               		dc.b $90, 4, $A0, 3, $28	
0001EDDA 9804 8007 18               		dc.b $98, 4, $80, 7, $18	
0001EDDF 8804 881A F0               		dc.b $88, 4, $88, $1A, $F0	
0001EDE4 9004 8818 F0               		dc.b $90, 4, $88, $18, $F0	
0001EDE9 9804 8818 F0               		dc.b $98, 4, $88, $18, $F0	
0001EDEE A004 8818 F0               		dc.b $A0, 4, $88, $18, $F0	
0001EDF3 A804 981A F0               		dc.b $A8, 4, $98, $1A, $F0	
0001EDF8 A800 901A 00               		dc.b $A8, 0, $90, $1A, 0	
0001EDFD A800 901A 08               		dc.b $A8, 0, $90, $1A, 8	
0001EE02 A800 901A 10               		dc.b $A8, 0, $90, $1A, $10	
0001EE07 A800 901A 18               		dc.b $A8, 0, $90, $1A, $18	
0001EE0C A800 901A 20               		dc.b $A8, 0, $90, $1A, $20	
0001EE11 A800 901A 28               		dc.b $A8, 0, $90, $1A, $28	
0001EE16 A800 901A 30               		dc.b $A8, 0, $90, $1A, $30	
0001EE1B A800 901A 38               		dc.b $A8, 0, $90, $1A, $38	
0001EE20 A804 901A 40               		dc.b $A8, 4, $90, $1A, $40	
0001EE25 A004 8018 40               		dc.b $A0, 4, $80, $18, $40	
0001EE2A 9804 8018 40               		dc.b $98, 4, $80, $18, $40	
0001EE2F 9004 8018 40               		dc.b $90, 4, $80, $18, $40	
0001EE34 8804 801A 40               		dc.b $88, 4, $80, $1A, $40	
0001EE39 8800 801A 00               		dc.b $88, 0, $80, $1A, 0	
0001EE3E 8800 801A 08               		dc.b $88, 0, $80, $1A, 8	
0001EE43 8800 801A 10               		dc.b $88, 0, $80, $1A, $10	
0001EE48 8800 801A 18               		dc.b $88, 0, $80, $1A, $18	
0001EE4D 8800 801A 20               		dc.b $88, 0, $80, $1A, $20	
0001EE52 8800 801A 28               		dc.b $88, 0, $80, $1A, $28	
0001EE57 8800 801A 30               		dc.b $88, 0, $80, $1A, $30	
0001EE5C 8800 801A 38               		dc.b $88, 0, $80, $1A, $38	
0001EE61 A000 8018 00               		dc.b $A0, 0, $80, $18, 0	
0001EE66 9800 8018 00               		dc.b $98, 0, $80, $18, 0	
0001EE6B 9000 8018 00               		dc.b $90, 0, $80, $18, 0	
0001EE70 A000 8018 08               		dc.b $A0, 0, $80, $18, 8	
0001EE75 9000 8018 08               		dc.b $90, 0, $80, $18, 8	
0001EE7A A000 8018 10               		dc.b $A0, 0, $80, $18, $10	
0001EE7F 9800 8018 08               		dc.b $98, 0, $80, $18, 8	
0001EE84 9800 8018 10               		dc.b $98, 0, $80, $18, $10	
0001EE89 9000 8018 10               		dc.b $90, 0, $80, $18, $10	
0001EE8E A000 8018 18               		dc.b $A0, 0, $80, $18, $18	
0001EE93 9800 8018 18               		dc.b $98, 0, $80, $18, $18	
0001EE98 9000 8018 18               		dc.b $90, 0, $80, $18, $18	
0001EE9D A000 8018 20               		dc.b $A0, 0, $80, $18, $20	
0001EEA2 9800 8018 20               		dc.b $98, 0, $80, $18, $20	
0001EEA7 9000 8018 20               		dc.b $90, 0, $80, $18, $20	
0001EEAC 9000 8018 28               		dc.b $90, 0, $80, $18, $28	
0001EEB1 9800 8018 28               		dc.b $98, 0, $80, $18, $28	
0001EEB6 A000 8018 28               		dc.b $A0, 0, $80, $18, $28	
0001EEBB 9000 8018 30               		dc.b $90, 0, $80, $18, $30	
0001EEC0 9800 8018 30               		dc.b $98, 0, $80, $18, $30	
0001EEC5 A000 8018 30               		dc.b $A0, 0, $80, $18, $30	
0001EECA 9000 8018 38               		dc.b $90, 0, $80, $18, $38	
0001EECF 9800 8018 38               		dc.b $98, 0, $80, $18, $38	
0001EED4 A000 8018 38               		dc.b $A0, 0, $80, $18, $38	
0001EED9 44                         SME_pVhg0_15B:	dc.b $44	
0001EEDA 9800 800B F8               		dc.b $98, 0, $80, $B, $F8	
0001EEDF 9000 8001 08               		dc.b $90, 0, $80, 1, 8	
0001EEE4 9000 8005 10               		dc.b $90, 0, $80, 5, $10	
0001EEE9 9000 8004 18               		dc.b $90, 0, $80, 4, $18	
0001EEEE 9000 8008 20               		dc.b $90, 0, $80, 8, $20	
0001EEF3 9000 8009 38               		dc.b $90, 0, $80, 9, $38	
0001EEF8 9000 8002 40               		dc.b $90, 0, $80, 2, $40	
0001EEFD 9800 A006 08               		dc.b $98, 0, $A0, 6, 8	
0001EF02 9800 A002 10               		dc.b $98, 0, $A0, 2, $10	
0001EF07 9800 A000 28               		dc.b $98, 0, $A0, 0, $28	
0001EF0C 9800 A006 30               		dc.b $98, 0, $A0, 6, $30	
0001EF11 9800 A008 38               		dc.b $98, 0, $A0, 8, $38	
0001EF16 A000 800A 08               		dc.b $A0, 0, $80, $A, 8	
0001EF1B A000 8009 10               		dc.b $A0, 0, $80, 9, $10	
0001EF20 A000 8003 18               		dc.b $A0, 0, $80, 3, $18	
0001EF25 A000 8008 20               		dc.b $A0, 0, $80, 8, $20	
0001EF2A 9004 8003 28               		dc.b $90, 4, $80, 3, $28	
0001EF2F 9804 A007 18               		dc.b $98, 4, $A0, 7, $18	
0001EF34 8804 881A F0               		dc.b $88, 4, $88, $1A, $F0	
0001EF39 9004 8818 F0               		dc.b $90, 4, $88, $18, $F0	
0001EF3E 9804 8818 F0               		dc.b $98, 4, $88, $18, $F0	
0001EF43 A004 8818 F0               		dc.b $A0, 4, $88, $18, $F0	
0001EF48 A804 981A F0               		dc.b $A8, 4, $98, $1A, $F0	
0001EF4D A800 901A 00               		dc.b $A8, 0, $90, $1A, 0	
0001EF52 A800 901A 08               		dc.b $A8, 0, $90, $1A, 8	
0001EF57 A800 901A 10               		dc.b $A8, 0, $90, $1A, $10	
0001EF5C A800 901A 18               		dc.b $A8, 0, $90, $1A, $18	
0001EF61 A800 901A 20               		dc.b $A8, 0, $90, $1A, $20	
0001EF66 A800 901A 28               		dc.b $A8, 0, $90, $1A, $28	
0001EF6B A800 901A 30               		dc.b $A8, 0, $90, $1A, $30	
0001EF70 A800 901A 38               		dc.b $A8, 0, $90, $1A, $38	
0001EF75 A804 901A 40               		dc.b $A8, 4, $90, $1A, $40	
0001EF7A A004 8018 40               		dc.b $A0, 4, $80, $18, $40	
0001EF7F 9804 8018 40               		dc.b $98, 4, $80, $18, $40	
0001EF84 9004 8018 40               		dc.b $90, 4, $80, $18, $40	
0001EF89 8804 801A 40               		dc.b $88, 4, $80, $1A, $40	
0001EF8E 8800 801A 00               		dc.b $88, 0, $80, $1A, 0	
0001EF93 8800 801A 08               		dc.b $88, 0, $80, $1A, 8	
0001EF98 8800 801A 10               		dc.b $88, 0, $80, $1A, $10	
0001EF9D 8800 801A 18               		dc.b $88, 0, $80, $1A, $18	
0001EFA2 8800 801A 20               		dc.b $88, 0, $80, $1A, $20	
0001EFA7 8800 801A 28               		dc.b $88, 0, $80, $1A, $28	
0001EFAC 8800 801A 30               		dc.b $88, 0, $80, $1A, $30	
0001EFB1 8800 801A 38               		dc.b $88, 0, $80, $1A, $38	
0001EFB6 A000 8018 00               		dc.b $A0, 0, $80, $18, 0	
0001EFBB 9800 8018 00               		dc.b $98, 0, $80, $18, 0	
0001EFC0 9000 8018 00               		dc.b $90, 0, $80, $18, 0	
0001EFC5 A000 8018 08               		dc.b $A0, 0, $80, $18, 8	
0001EFCA 9000 8018 08               		dc.b $90, 0, $80, $18, 8	
0001EFCF A000 8018 10               		dc.b $A0, 0, $80, $18, $10	
0001EFD4 9800 8018 08               		dc.b $98, 0, $80, $18, 8	
0001EFD9 9800 8018 10               		dc.b $98, 0, $80, $18, $10	
0001EFDE 9000 8018 10               		dc.b $90, 0, $80, $18, $10	
0001EFE3 A000 8018 18               		dc.b $A0, 0, $80, $18, $18	
0001EFE8 9800 8018 18               		dc.b $98, 0, $80, $18, $18	
0001EFED 9000 8018 18               		dc.b $90, 0, $80, $18, $18	
0001EFF2 A000 8018 20               		dc.b $A0, 0, $80, $18, $20	
0001EFF7 9800 8018 20               		dc.b $98, 0, $80, $18, $20	
0001EFFC 9000 8018 20               		dc.b $90, 0, $80, $18, $20	
0001F001 9000 8018 28               		dc.b $90, 0, $80, $18, $28	
0001F006 9800 8018 28               		dc.b $98, 0, $80, $18, $28	
0001F00B A000 8018 28               		dc.b $A0, 0, $80, $18, $28	
0001F010 9000 8018 30               		dc.b $90, 0, $80, $18, $30	
0001F015 9800 8018 30               		dc.b $98, 0, $80, $18, $30	
0001F01A A000 8018 30               		dc.b $A0, 0, $80, $18, $30	
0001F01F 9000 8018 38               		dc.b $90, 0, $80, $18, $38	
0001F024 9800 8018 38               		dc.b $98, 0, $80, $18, $38	
0001F029 A000 8018 38               		dc.b $A0, 0, $80, $18, $38	
0001F02E 44                         SME_pVhg0_2B0:	dc.b $44	
0001F02F 9000 8001 08               		dc.b $90, 0, $80, 1, 8	
0001F034 9000 8005 10               		dc.b $90, 0, $80, 5, $10	
0001F039 9000 8004 18               		dc.b $90, 0, $80, 4, $18	
0001F03E 9000 8008 20               		dc.b $90, 0, $80, 8, $20	
0001F043 9000 8009 38               		dc.b $90, 0, $80, 9, $38	
0001F048 9000 8002 40               		dc.b $90, 0, $80, 2, $40	
0001F04D 9800 8006 08               		dc.b $98, 0, $80, 6, 8	
0001F052 9800 8002 10               		dc.b $98, 0, $80, 2, $10	
0001F057 9804 8007 18               		dc.b $98, 4, $80, 7, $18	
0001F05C 9800 8000 28               		dc.b $98, 0, $80, 0, $28	
0001F061 9800 8006 30               		dc.b $98, 0, $80, 6, $30	
0001F066 9800 8008 38               		dc.b $98, 0, $80, 8, $38	
0001F06B A000 800B F8               		dc.b $A0, 0, $80, $B, $F8	
0001F070 A000 A00A 08               		dc.b $A0, 0, $A0, $A, 8	
0001F075 A000 A009 10               		dc.b $A0, 0, $A0, 9, $10	
0001F07A A000 A003 18               		dc.b $A0, 0, $A0, 3, $18	
0001F07F A000 A008 20               		dc.b $A0, 0, $A0, 8, $20	
0001F084 9004 8003 28               		dc.b $90, 4, $80, 3, $28	
0001F089 8804 881A F0               		dc.b $88, 4, $88, $1A, $F0	
0001F08E 9004 8818 F0               		dc.b $90, 4, $88, $18, $F0	
0001F093 9804 8818 F0               		dc.b $98, 4, $88, $18, $F0	
0001F098 A004 8818 F0               		dc.b $A0, 4, $88, $18, $F0	
0001F09D A804 981A F0               		dc.b $A8, 4, $98, $1A, $F0	
0001F0A2 A800 901A 00               		dc.b $A8, 0, $90, $1A, 0	
0001F0A7 A800 901A 08               		dc.b $A8, 0, $90, $1A, 8	
0001F0AC A800 901A 10               		dc.b $A8, 0, $90, $1A, $10	
0001F0B1 A800 901A 18               		dc.b $A8, 0, $90, $1A, $18	
0001F0B6 A800 901A 20               		dc.b $A8, 0, $90, $1A, $20	
0001F0BB A800 901A 28               		dc.b $A8, 0, $90, $1A, $28	
0001F0C0 A800 901A 30               		dc.b $A8, 0, $90, $1A, $30	
0001F0C5 A800 901A 38               		dc.b $A8, 0, $90, $1A, $38	
0001F0CA A804 901A 40               		dc.b $A8, 4, $90, $1A, $40	
0001F0CF A004 8018 40               		dc.b $A0, 4, $80, $18, $40	
0001F0D4 9804 8018 40               		dc.b $98, 4, $80, $18, $40	
0001F0D9 9004 8018 40               		dc.b $90, 4, $80, $18, $40	
0001F0DE 8804 801A 40               		dc.b $88, 4, $80, $1A, $40	
0001F0E3 8800 801A 00               		dc.b $88, 0, $80, $1A, 0	
0001F0E8 8800 801A 08               		dc.b $88, 0, $80, $1A, 8	
0001F0ED 8800 801A 10               		dc.b $88, 0, $80, $1A, $10	
0001F0F2 8800 801A 18               		dc.b $88, 0, $80, $1A, $18	
0001F0F7 8800 801A 20               		dc.b $88, 0, $80, $1A, $20	
0001F0FC 8800 801A 28               		dc.b $88, 0, $80, $1A, $28	
0001F101 8800 801A 30               		dc.b $88, 0, $80, $1A, $30	
0001F106 8800 801A 38               		dc.b $88, 0, $80, $1A, $38	
0001F10B A000 8018 00               		dc.b $A0, 0, $80, $18, 0	
0001F110 9800 8018 00               		dc.b $98, 0, $80, $18, 0	
0001F115 9000 8018 00               		dc.b $90, 0, $80, $18, 0	
0001F11A A000 8018 08               		dc.b $A0, 0, $80, $18, 8	
0001F11F 9000 8018 08               		dc.b $90, 0, $80, $18, 8	
0001F124 A000 8018 10               		dc.b $A0, 0, $80, $18, $10	
0001F129 9800 8018 08               		dc.b $98, 0, $80, $18, 8	
0001F12E 9800 8018 10               		dc.b $98, 0, $80, $18, $10	
0001F133 9000 8018 10               		dc.b $90, 0, $80, $18, $10	
0001F138 A000 8018 18               		dc.b $A0, 0, $80, $18, $18	
0001F13D 9800 8018 18               		dc.b $98, 0, $80, $18, $18	
0001F142 9000 8018 18               		dc.b $90, 0, $80, $18, $18	
0001F147 A000 8018 20               		dc.b $A0, 0, $80, $18, $20	
0001F14C 9800 8018 20               		dc.b $98, 0, $80, $18, $20	
0001F151 9000 8018 20               		dc.b $90, 0, $80, $18, $20	
0001F156 9000 8018 28               		dc.b $90, 0, $80, $18, $28	
0001F15B 9800 8018 28               		dc.b $98, 0, $80, $18, $28	
0001F160 A000 8018 28               		dc.b $A0, 0, $80, $18, $28	
0001F165 9000 8018 30               		dc.b $90, 0, $80, $18, $30	
0001F16A 9800 8018 30               		dc.b $98, 0, $80, $18, $30	
0001F16F A000 8018 30               		dc.b $A0, 0, $80, $18, $30	
0001F174 9000 8018 38               		dc.b $90, 0, $80, $18, $38	
0001F179 9800 8018 38               		dc.b $98, 0, $80, $18, $38	
0001F17E A000 8018 38               		dc.b $A0, 0, $80, $18, $38	
0001F184 00                         		even
0001F184 00                         		even
0001F184                            
0001F184                            ;	rts
0001F184                            ; END OF FUNCTION CHUNK	FOR sub_33343A
0001F184                            		
0001F184                            ; ---------------------------------------------------------------------------
0001F184                            ; Object 08 - water splash (LZ)
0001F184                            ; ---------------------------------------------------------------------------
0001F184                            
0001F184                            Obj08:					; XREF: Obj_Index
0001F184 7000                       		moveq	#0,d0
0001F186 1028 0024                  		move.b	routine(a0),d0
0001F18A 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001F18E 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
0001F192                            ; ===========================================================================
0001F192 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
0001F194 0000                       		dc.w Obj08_Display-Obj08_Index
0001F196 0000                       		dc.w Obj08_Delete-Obj08_Index
0001F198                            ; ===========================================================================
0001F198                            
0001F198                            Obj08_Main:				; XREF: Obj08_Index
0001F198 5428 0024                  		addq.b	#2,routine(a0)
0001F19C 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
0001F1A4 0028 0004 0001             		ori.b	#4,1(a0)
0001F1AA 317C 0080 0018             		move.w	#$80,priority(a0)
0001F1B0 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001F1B6 317C 4259 0002             		move.w	#$4259,2(a0)
0001F1BC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
0001F1C2                            
0001F1C2                            Obj08_Display:				; XREF: Obj08_Index
0001F1C2 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001F1C8 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001F1CE 4EB9 0001 2624             		jsr	AnimateSprite
0001F1D4 4EF9 0001 5C48             		jmp	DisplaySprite
0001F1DA                            ; ===========================================================================
0001F1DA                            
0001F1DA                            Obj08_Delete:				; XREF: Obj08_Index
0001F1DA 4EF9 0001 5BFC             		jmp	DeleteObject	; delete when animation	is complete
0001F1E0                            ; ===========================================================================
0001F1E0                            Ani_obj38:
0001F1E0                            	include "_anim\obj38.asm"
0001F1E0                            ; ---------------------------------------------------------------------------
0001F1E0                            ; Animation script - shield and invincibility stars
0001F1E0                            ; ---------------------------------------------------------------------------
0001F1E0 0000                       		dc.w byte_14356-Ani_obj38
0001F1E2 0000                       		dc.w byte_1435E-Ani_obj38
0001F1E4 0000                       		dc.w byte_14364-Ani_obj38
0001F1E6 0000                       		dc.w byte_1437E-Ani_obj38
0001F1E8 0000                       		dc.w byte_14398-Ani_obj38
0001F1EA 0001 0302 0103 02FF        byte_14356:	dc.b 0,	1, 3, 2, 1, 3, 2, $FF
0001F1F2 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
0001F1F8 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001F209 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001F212 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001F223 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
0001F22C 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
0001F23D 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001F246                            		even
0001F246                            		even
0001F246 0000                       Ani_Obj38_Shield:dc.w byte_125C2-Ani_Obj38_Shield ; DATA XREF: ROM:00012448o
0001F248                            					; ROM:Ani_Obj38_Shieldo ...
0001F248 0000                       		dc.w byte_125CE-Ani_Obj38_Shield
0001F24A 0000                       		dc.w byte_125D4-Ani_Obj38_Shield
0001F24C 0000                       		dc.w byte_125EE-Ani_Obj38_Shield
0001F24E 0000                       		dc.w byte_12608-Ani_Obj38_Shield
0001F250 0005 0005 0105 0205 0305+  byte_125C2:	dc.b   0,  5,  0,  5,  1,  5,  2,  5,  3,  5,  4,$FF; 0
0001F25C                            					; DATA XREF: ROM:Ani_Obj38_Shieldo
0001F25C 0504 0506 07FF             byte_125CE:	dc.b   5,  4,  5,  6,  7,$FF; 0	; DATA XREF: ROM:000125BAo
0001F262 0004 0400 0404 0005 0500+  byte_125D4:	dc.b   0,  4,  4,  0,  4,  4,  0,  5,  5,  0,  5,  5,  0,  6,  6,  0; 0
0001F272                            					; DATA XREF: ROM:000125BCo
0001F272 0606 0007 0700 0707 00FF   		dc.b   6,  6,  0,  7,  7,  0,  7,  7,  0,$FF; 16
0001F27C 0004 0400 0400 0005 0500+  byte_125EE:	dc.b   0,  4,  4,  0,  4,  0,  0,  5,  5,  0,  5,  0,  0,  6,  6,  0; 0
0001F28C                            					; DATA XREF: ROM:000125BEo
0001F28C 0600 0007 0700 0700 00FF   		dc.b   6,  0,  0,  7,  7,  0,  7,  0,  0,$FF; 16
0001F296 0004 0000 0400 0005 0000+  byte_12608:	dc.b   0,  4,  0,  0,  4,  0,  0,  5,  0,  0,  5,  0,  0,  6,  0,  0; 0
0001F2A6                            					; DATA XREF: ROM:000125C0o
0001F2A6 0600 0007 0000 0700 00FF   		dc.b   6,  0,  0,  7,  0,  0,  7,  0,  0,$FF; 16
0001F2B0                            
0001F2B0                            ; ---------------------------------------------------------------------------
0001F2B0                            ; Sprite mappings - shield and invincibility stars
0001F2B0                            ; ---------------------------------------------------------------------------
0001F2B0                            Map_obj38:
0001F2B0                            	include "_maps\obj38_star.asm"
0001F2B0                            ; --------------------------------------------------------------------------------
0001F2B0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001F2B0                            ; --------------------------------------------------------------------------------
0001F2B0                            
0001F2B0                            SME_HtuJ7:	
0001F2B0 0000 0000                  		dc.w SME_HtuJ7_12-SME_HtuJ7, SME_HtuJ7_13-SME_HtuJ7	
0001F2B4 0000 0000                  		dc.w SME_HtuJ7_19-SME_HtuJ7, SME_HtuJ7_1F-SME_HtuJ7	
0001F2B8 0000 0000                  		dc.w SME_HtuJ7_25-SME_HtuJ7, SME_HtuJ7_2B-SME_HtuJ7	
0001F2BC 0000 0000                  		dc.w SME_HtuJ7_31-SME_HtuJ7, SME_HtuJ7_37-SME_HtuJ7	
0001F2C0 0000                       		dc.w SME_HtuJ7_3D-SME_HtuJ7	
0001F2C2 00                         SME_HtuJ7_12:	dc.b 0	
0001F2C3 01                         SME_HtuJ7_13:	dc.b 1	
0001F2C4 F801 0000 FC               		dc.b $F8, 1, 0, 0, $FC	
0001F2C9 01                         SME_HtuJ7_19:	dc.b 1	
0001F2CA F801 0002 FC               		dc.b $F8, 1, 0, 2, $FC	
0001F2CF 01                         SME_HtuJ7_1F:	dc.b 1	
0001F2D0 F801 0004 FC               		dc.b $F8, 1, 0, 4, $FC	
0001F2D5 01                         SME_HtuJ7_25:	dc.b 1	
0001F2D6 F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
0001F2DB 01                         SME_HtuJ7_2B:	dc.b 1	
0001F2DC F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0001F2E1 01                         SME_HtuJ7_31:	dc.b 1	
0001F2E2 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0001F2E7 01                         SME_HtuJ7_37:	dc.b 1	
0001F2E8 F805 000E F8               		dc.b $F8, 5, 0, $E, $F8	
0001F2ED 01                         SME_HtuJ7_3D:	dc.b 1	
0001F2EE F00F 0012 F0               		dc.b $F0, $F, 0, $12, $F0	
0001F2F4 00                         		even
0001F2F4 00                         		even
0001F2F4                            	
0001F2F4                            Map_obj38_Sheild:
0001F2F4                            	include	"_maps\obj38_Sheild.asm"
0001F2F4                            ; --------------------------------------------------------------------------------
0001F2F4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001F2F4                            ; --------------------------------------------------------------------------------
0001F2F4                            
0001F2F4                            SME_nhdJe:	
0001F2F4 0000 0000                  		dc.w SME_nhdJe_C-SME_nhdJe, SME_nhdJe_21-SME_nhdJe	
0001F2F8 0000 0000                  		dc.w SME_nhdJe_36-SME_nhdJe, SME_nhdJe_4B-SME_nhdJe	
0001F2FC 0000 0000                  		dc.w SME_nhdJe_60-SME_nhdJe, SME_nhdJe_75-SME_nhdJe	
0001F300 04                         SME_nhdJe_C:	dc.b 4	
0001F301 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
0001F306 F005 0800 00               		dc.b $F0, 5, 8, 0, 0	
0001F30B 0005 1000 F0               		dc.b 0, 5, $10, 0, $F0	
0001F310 0005 1800 00               		dc.b 0, 5, $18, 0, 0	
0001F315 04                         SME_nhdJe_21:	dc.b 4	
0001F316 F005 0004 F0               		dc.b $F0, 5, 0, 4, $F0	
0001F31B F005 0804 00               		dc.b $F0, 5, 8, 4, 0	
0001F320 0005 1004 F0               		dc.b 0, 5, $10, 4, $F0	
0001F325 0005 1804 00               		dc.b 0, 5, $18, 4, 0	
0001F32A 04                         SME_nhdJe_36:	dc.b 4	
0001F32B F005 0008 F0               		dc.b $F0, 5, 0, 8, $F0	
0001F330 F005 0808 00               		dc.b $F0, 5, 8, 8, 0	
0001F335 0005 1008 F0               		dc.b 0, 5, $10, 8, $F0	
0001F33A 0005 1808 00               		dc.b 0, 5, $18, 8, 0	
0001F33F 04                         SME_nhdJe_4B:	dc.b 4	
0001F340 F005 000C F0               		dc.b $F0, 5, 0, $C, $F0	
0001F345 F005 080C 00               		dc.b $F0, 5, 8, $C, 0	
0001F34A 0005 100C F0               		dc.b 0, 5, $10, $C, $F0	
0001F34F 0005 180C 00               		dc.b 0, 5, $18, $C, 0	
0001F354 04                         SME_nhdJe_60:	dc.b 4	
0001F355 F005 0010 F0               		dc.b $F0, 5, 0, $10, $F0	
0001F35A F005 0810 00               		dc.b $F0, 5, 8, $10, 0	
0001F35F 0005 1010 F0               		dc.b 0, 5, $10, $10, $F0	
0001F364 0005 1810 00               		dc.b 0, 5, $18, $10, 0	
0001F369 04                         SME_nhdJe_75:	dc.b 4	
0001F36A E80A 0014 E8               		dc.b $E8, $A, 0, $14, $E8	
0001F36F 000A 1014 E8               		dc.b 0, $A, $10, $14, $E8	
0001F374 E80A 0814 00               		dc.b $E8, $A, 8, $14, 0	
0001F379 000A 1814 00               		dc.b 0, $A, $18, $14, 0	
0001F37E                            		even
0001F37E                            		even
0001F37E                            
0001F37E                            
0001F37E                            Ani_obj4A:
0001F37E                            	include "_anim\obj4A.asm"
0001F37E                            ; ---------------------------------------------------------------------------
0001F37E                            ; Animation script - special stage entry effect from beta
0001F37E                            ; ---------------------------------------------------------------------------
0001F37E 0000                       		dc.w byte_14458-Ani_obj4A
0001F380 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
0001F394                            		even
0001F394                            		even
0001F394                            
0001F394                            ; ---------------------------------------------------------------------------
0001F394                            ; Sprite mappings - special stage entry	from beta
0001F394                            ; ---------------------------------------------------------------------------
0001F394                            Map_obj4A:
0001F394                            	include "_maps\obj4A.asm"
0001F394                            ; ---------------------------------------------------------------------------
0001F394                            ; Sprite mappings - special stage entry	from beta
0001F394                            ; ---------------------------------------------------------------------------
0001F394 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
0001F398 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
0001F39C 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
0001F3A0 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
0001F3A4 03                         byte_1447C:	dc.b 3
0001F3A5 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001F3AA 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001F3AF 0800 1000 08               		dc.b 8,	0, $10,	0, 8
0001F3B4 03                         byte_1448C:	dc.b 3
0001F3B5 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001F3BA 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001F3BF 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
0001F3C4 05                         byte_1449C:	dc.b 5
0001F3C5 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001F3CA EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001F3CF FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
0001F3D4 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001F3D9 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001F3DE 09                         byte_144B6:	dc.b 9
0001F3DF F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
0001F3E4 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001F3E9 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001F3EE 0005 0034 10               		dc.b 0,	5, 0, $34, $10
0001F3F3 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001F3F8 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001F3FD F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001F402 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001F407 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001F40C 12                         byte_144E4:	dc.b $12
0001F40D 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
0001F412 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001F417 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001F41C 0000 0025 00               		dc.b 0,	0, 0, $25, 0
0001F421 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001F426 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001F42B 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
0001F430 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001F435 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001F43A 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001F43F 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001F444 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001F449 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001F44E F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001F453 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001F458 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001F45D 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001F462 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001F467 11                         byte_1453F:	dc.b $11
0001F468 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001F46D F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001F472 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001F477 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001F47C 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001F481 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001F486 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001F48B F800 1025 30               		dc.b $F8, 0, $10, $25, $30
0001F490 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001F495 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001F49A 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001F49F 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001F4A4 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001F4A9 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001F4AE F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
0001F4B3 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001F4B8 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001F4BD 09                         byte_14595:	dc.b 9
0001F4BE FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
0001F4C3 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001F4C8 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001F4CD 0400 0826 40               		dc.b 4,	0, 8, $26, $40
0001F4D2 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001F4D7 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001F4DC 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
0001F4E1 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001F4E6 04                         		dc.b 4
0001F4E7 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
0001F4EC                            		even
0001F4EC                            		even
0001F4EC                            	
0001F4EC                            Map_Rocket:
0001F4EC                            	include "_maps\S4 Rocket.asm"
0001F4EC                            ; --------------------------------------------------------------------------------
0001F4EC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001F4EC                            ; --------------------------------------------------------------------------------
0001F4EC                            
0001F4EC                            SME_BAGbY:	
0001F4EC 0000                       		dc.w SME_BAGbY_2-SME_BAGbY	
0001F4EE 90                         SME_BAGbY_2:	dc.b $90	
0001F4EF 4800 0000 D3               		dc.b $48, 0, 0, 0, $D3	
0001F4F4 4800 0001 DB               		dc.b $48, 0, 0, 1, $DB	
0001F4F9 4800 0002 E3               		dc.b $48, 0, 0, 2, $E3	
0001F4FE 4800 0003 EB               		dc.b $48, 0, 0, 3, $EB	
0001F503 4800 0004 F3               		dc.b $48, 0, 0, 4, $F3	
0001F508 4800 0005 FB               		dc.b $48, 0, 0, 5, $FB	
0001F50D 4800 0006 03               		dc.b $48, 0, 0, 6, 3	
0001F512 4800 0007 0B               		dc.b $48, 0, 0, 7, $B	
0001F517 4800 0008 13               		dc.b $48, 0, 0, 8, $13	
0001F51C 4800 0009 1B               		dc.b $48, 0, 0, 9, $1B	
0001F521 4800 000A 23               		dc.b $48, 0, 0, $A, $23	
0001F526 4000 000B CB               		dc.b $40, 0, 0, $B, $CB	
0001F52B 4000 000C D3               		dc.b $40, 0, 0, $C, $D3	
0001F530 4000 000D DB               		dc.b $40, 0, 0, $D, $DB	
0001F535 4000 000E E3               		dc.b $40, 0, 0, $E, $E3	
0001F53A 4000 000F EB               		dc.b $40, 0, 0, $F, $EB	
0001F53F 4000 0010 F3               		dc.b $40, 0, 0, $10, $F3	
0001F544 4000 0011 FB               		dc.b $40, 0, 0, $11, $FB	
0001F549 4000 0012 03               		dc.b $40, 0, 0, $12, 3	
0001F54E 4000 0013 0B               		dc.b $40, 0, 0, $13, $B	
0001F553 4000 0014 13               		dc.b $40, 0, 0, $14, $13	
0001F558 4000 0015 1B               		dc.b $40, 0, 0, $15, $1B	
0001F55D 4000 0016 23               		dc.b $40, 0, 0, $16, $23	
0001F562 4000 0017 2B               		dc.b $40, 0, 0, $17, $2B	
0001F567 4000 0018 33               		dc.b $40, 0, 0, $18, $33	
0001F56C 3800 0019 CB               		dc.b $38, 0, 0, $19, $CB	
0001F571 3800 001A D3               		dc.b $38, 0, 0, $1A, $D3	
0001F576 3800 001B DB               		dc.b $38, 0, 0, $1B, $DB	
0001F57B 3800 001C E3               		dc.b $38, 0, 0, $1C, $E3	
0001F580 3800 001D EB               		dc.b $38, 0, 0, $1D, $EB	
0001F585 3800 001E F3               		dc.b $38, 0, 0, $1E, $F3	
0001F58A 3800 001F FB               		dc.b $38, 0, 0, $1F, $FB	
0001F58F 3800 0020 03               		dc.b $38, 0, 0, $20, 3	
0001F594 3800 0021 0B               		dc.b $38, 0, 0, $21, $B	
0001F599 3800 0022 13               		dc.b $38, 0, 0, $22, $13	
0001F59E 3800 0023 1B               		dc.b $38, 0, 0, $23, $1B	
0001F5A3 3800 0024 23               		dc.b $38, 0, 0, $24, $23	
0001F5A8 3800 0025 2B               		dc.b $38, 0, 0, $25, $2B	
0001F5AD 3800 0026 33               		dc.b $38, 0, 0, $26, $33	
0001F5B2 3000 0027 CB               		dc.b $30, 0, 0, $27, $CB	
0001F5B7 3000 0028 D3               		dc.b $30, 0, 0, $28, $D3	
0001F5BC 3000 0029 DB               		dc.b $30, 0, 0, $29, $DB	
0001F5C1 3000 002A E3               		dc.b $30, 0, 0, $2A, $E3	
0001F5C6 3000 002B EB               		dc.b $30, 0, 0, $2B, $EB	
0001F5CB 3000 002C F3               		dc.b $30, 0, 0, $2C, $F3	
0001F5D0 3000 002D FB               		dc.b $30, 0, 0, $2D, $FB	
0001F5D5 3000 002E 03               		dc.b $30, 0, 0, $2E, 3	
0001F5DA 3000 002F 0B               		dc.b $30, 0, 0, $2F, $B	
0001F5DF 3000 0030 13               		dc.b $30, 0, 0, $30, $13	
0001F5E4 3000 0031 1B               		dc.b $30, 0, 0, $31, $1B	
0001F5E9 3000 0032 23               		dc.b $30, 0, 0, $32, $23	
0001F5EE 3000 0033 2B               		dc.b $30, 0, 0, $33, $2B	
0001F5F3 2800 0034 D3               		dc.b $28, 0, 0, $34, $D3	
0001F5F8 2800 0035 DB               		dc.b $28, 0, 0, $35, $DB	
0001F5FD 2800 0036 E3               		dc.b $28, 0, 0, $36, $E3	
0001F602 2800 0037 EB               		dc.b $28, 0, 0, $37, $EB	
0001F607 2800 0038 F3               		dc.b $28, 0, 0, $38, $F3	
0001F60C 2800 0039 FB               		dc.b $28, 0, 0, $39, $FB	
0001F611 2800 003A 03               		dc.b $28, 0, 0, $3A, 3	
0001F616 2800 003B 0B               		dc.b $28, 0, 0, $3B, $B	
0001F61B 2800 003C 13               		dc.b $28, 0, 0, $3C, $13	
0001F620 2800 003D 1B               		dc.b $28, 0, 0, $3D, $1B	
0001F625 2800 003E 23               		dc.b $28, 0, 0, $3E, $23	
0001F62A 2000 003F D3               		dc.b $20, 0, 0, $3F, $D3	
0001F62F 2000 0040 DB               		dc.b $20, 0, 0, $40, $DB	
0001F634 2000 0041 E3               		dc.b $20, 0, 0, $41, $E3	
0001F639 2000 0042 EB               		dc.b $20, 0, 0, $42, $EB	
0001F63E 2000 0043 F3               		dc.b $20, 0, 0, $43, $F3	
0001F643 2000 0044 FB               		dc.b $20, 0, 0, $44, $FB	
0001F648 2000 0045 03               		dc.b $20, 0, 0, $45, 3	
0001F64D 2000 0046 0B               		dc.b $20, 0, 0, $46, $B	
0001F652 2000 0047 13               		dc.b $20, 0, 0, $47, $13	
0001F657 2000 0048 1B               		dc.b $20, 0, 0, $48, $1B	
0001F65C 2000 0049 23               		dc.b $20, 0, 0, $49, $23	
0001F661 1800 004A E3               		dc.b $18, 0, 0, $4A, $E3	
0001F666 1800 004B EB               		dc.b $18, 0, 0, $4B, $EB	
0001F66B 1800 004C F3               		dc.b $18, 0, 0, $4C, $F3	
0001F670 1800 004D FB               		dc.b $18, 0, 0, $4D, $FB	
0001F675 1800 004E 03               		dc.b $18, 0, 0, $4E, 3	
0001F67A 1800 004F 0B               		dc.b $18, 0, 0, $4F, $B	
0001F67F 1800 0050 13               		dc.b $18, 0, 0, $50, $13	
0001F684 1800 0051 1B               		dc.b $18, 0, 0, $51, $1B	
0001F689 1000 0052 DB               		dc.b $10, 0, 0, $52, $DB	
0001F68E 1000 0053 E3               		dc.b $10, 0, 0, $53, $E3	
0001F693 1000 0054 EB               		dc.b $10, 0, 0, $54, $EB	
0001F698 1000 0055 F3               		dc.b $10, 0, 0, $55, $F3	
0001F69D 1000 0056 FB               		dc.b $10, 0, 0, $56, $FB	
0001F6A2 1000 0057 03               		dc.b $10, 0, 0, $57, 3	
0001F6A7 1000 0058 0B               		dc.b $10, 0, 0, $58, $B	
0001F6AC 1000 0059 13               		dc.b $10, 0, 0, $59, $13	
0001F6B1 0800 005A E3               		dc.b 8, 0, 0, $5A, $E3	
0001F6B6 0800 005B EB               		dc.b 8, 0, 0, $5B, $EB	
0001F6BB 0800 005C F3               		dc.b 8, 0, 0, $5C, $F3	
0001F6C0 0800 005D FB               		dc.b 8, 0, 0, $5D, $FB	
0001F6C5 0800 005E 03               		dc.b 8, 0, 0, $5E, 3	
0001F6CA 0800 005F 0B               		dc.b 8, 0, 0, $5F, $B	
0001F6CF 0800 0060 13               		dc.b 8, 0, 0, $60, $13	
0001F6D4 0000 0061 E3               		dc.b 0, 0, 0, $61, $E3	
0001F6D9 0000 0062 EB               		dc.b 0, 0, 0, $62, $EB	
0001F6DE 0000 0063 F3               		dc.b 0, 0, 0, $63, $F3	
0001F6E3 0000 0064 FB               		dc.b 0, 0, 0, $64, $FB	
0001F6E8 0000 0065 03               		dc.b 0, 0, 0, $65, 3	
0001F6ED 0000 0066 0B               		dc.b 0, 0, 0, $66, $B	
0001F6F2 0000 0067 13               		dc.b 0, 0, 0, $67, $13	
0001F6F7 F800 0068 E3               		dc.b $F8, 0, 0, $68, $E3	
0001F6FC F800 0069 EB               		dc.b $F8, 0, 0, $69, $EB	
0001F701 F800 006A F3               		dc.b $F8, 0, 0, $6A, $F3	
0001F706 F800 006B FB               		dc.b $F8, 0, 0, $6B, $FB	
0001F70B F800 006C 03               		dc.b $F8, 0, 0, $6C, 3	
0001F710 F800 006D 0B               		dc.b $F8, 0, 0, $6D, $B	
0001F715 F800 006E 13               		dc.b $F8, 0, 0, $6E, $13	
0001F71A F000 006F E3               		dc.b $F0, 0, 0, $6F, $E3	
0001F71F F000 0070 EB               		dc.b $F0, 0, 0, $70, $EB	
0001F724 F000 0071 F3               		dc.b $F0, 0, 0, $71, $F3	
0001F729 F000 0072 FB               		dc.b $F0, 0, 0, $72, $FB	
0001F72E F000 0073 03               		dc.b $F0, 0, 0, $73, 3	
0001F733 F000 0074 0B               		dc.b $F0, 0, 0, $74, $B	
0001F738 F000 0075 13               		dc.b $F0, 0, 0, $75, $13	
0001F73D E800 0076 E3               		dc.b $E8, 0, 0, $76, $E3	
0001F742 E800 0077 EB               		dc.b $E8, 0, 0, $77, $EB	
0001F747 E800 0078 F3               		dc.b $E8, 0, 0, $78, $F3	
0001F74C E800 0079 FB               		dc.b $E8, 0, 0, $79, $FB	
0001F751 E800 007A 03               		dc.b $E8, 0, 0, $7A, 3	
0001F756 E800 007B 0B               		dc.b $E8, 0, 0, $7B, $B	
0001F75B E800 007C 13               		dc.b $E8, 0, 0, $7C, $13	
0001F760 E000 007D E3               		dc.b $E0, 0, 0, $7D, $E3	
0001F765 E000 007E EB               		dc.b $E0, 0, 0, $7E, $EB	
0001F76A E000 007F F3               		dc.b $E0, 0, 0, $7F, $F3	
0001F76F E000 0080 FB               		dc.b $E0, 0, 0, $80, $FB	
0001F774 E000 0081 03               		dc.b $E0, 0, 0, $81, 3	
0001F779 E000 0082 0B               		dc.b $E0, 0, 0, $82, $B	
0001F77E E000 0083 13               		dc.b $E0, 0, 0, $83, $13	
0001F783 D800 0084 EB               		dc.b $D8, 0, 0, $84, $EB	
0001F788 D800 0085 F3               		dc.b $D8, 0, 0, $85, $F3	
0001F78D D800 0086 FB               		dc.b $D8, 0, 0, $86, $FB	
0001F792 D800 0087 03               		dc.b $D8, 0, 0, $87, 3	
0001F797 D800 0088 0B               		dc.b $D8, 0, 0, $88, $B	
0001F79C D800 0089 13               		dc.b $D8, 0, 0, $89, $13	
0001F7A1 D000 008A F3               		dc.b $D0, 0, 0, $8A, $F3	
0001F7A6 D000 008B FB               		dc.b $D0, 0, 0, $8B, $FB	
0001F7AB D000 008C 03               		dc.b $D0, 0, 0, $8C, 3	
0001F7B0 D000 008D 0B               		dc.b $D0, 0, 0, $8D, $B	
0001F7B5 C800 008E FB               		dc.b $C8, 0, 0, $8E, $FB	
0001F7BA C800 008F 03               		dc.b $C8, 0, 0, $8F, 3	
0001F7C0 00                         		even
0001F7C0 00                         		even
0001F7C0                            	even
0001F7C0                            
0001F7C0                            Ani_obj08:
0001F7C0                            	include "_anim\obj08.asm"
0001F7C0                            ; ---------------------------------------------------------------------------
0001F7C0                            ; Animation script - water splash (LZ)
0001F7C0                            ; ---------------------------------------------------------------------------
0001F7C0 0000                       		dc.w byte_145C6-Ani_obj08
0001F7C2 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
0001F7C8                            		even
0001F7C8                            		even
0001F7C8                            
0001F7C8                            ; ---------------------------------------------------------------------------
0001F7C8                            ; Sprite mappings - water splash (LZ)
0001F7C8                            ; ---------------------------------------------------------------------------
0001F7C8                            Map_obj08:
0001F7C8                            	include "_maps\obj08.asm"
0001F7C8                            ; ---------------------------------------------------------------------------
0001F7C8                            ; Sprite mappings - water splash (LZ)
0001F7C8                            ; ---------------------------------------------------------------------------
0001F7C8 0000                       		dc.w byte_145D2-Map_obj08
0001F7CA 0000                       		dc.w byte_145DD-Map_obj08
0001F7CC 0000                       		dc.w byte_145E8-Map_obj08
0001F7CE 02                         byte_145D2:	dc.b 2
0001F7CF F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
0001F7D4 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001F7D9 02                         byte_145DD:	dc.b 2
0001F7DA E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001F7DF EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001F7E4 01                         byte_145E8:	dc.b 1
0001F7E5 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001F7EA                            		even
0001F7EA                            		even
0001F7EA                            ; ---------------------------------------------------------------------------
0001F7EA                            ; Object 03 - Collision plane/layer switcher (From Sonic 2 [Modified])
0001F7EA                            ; ---------------------------------------------------------------------------
0001F7EA                            
0001F7EA                            Obj03:
0001F7EA 7000                       		moveq	#0,d0
0001F7EC 1028 0024                  		move.b	$24(a0),d0
0001F7F0 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
0001F7F4 4EBB 1000                  		jsr	Obj03_Index(pc,d1.w)
0001F7F8 4EFA 9380                  		jmp	MarkObjGone3
0001F7FC                            ; ===========================================================================
0001F7FC                            ; ---------------------------------------------------------------------------
0001F7FC 0000                       Obj03_Index:	dc.w Obj03_Init-Obj03_Index
0001F7FE 0000                       		dc.w Obj03_MainX-Obj03_Index
0001F800 0000                       		dc.w Obj03_MainY-Obj03_Index
0001F802                            ; ---------------------------------------------------------------------------
0001F802                            ; ===========================================================================
0001F802                            ; ---------------------------------------------------------------------------
0001F802                            ; Initiation
0001F802                            ; ---------------------------------------------------------------------------
0001F802                            
0001F802                            Obj03_Init:
0001F802 5428 0024                  		addq.b	#2,$24(a0)
0001F806 217C 0000 FCD0 0004        		move.l	#Map_Obj19,$04(a0)
0001F80E 317C 27B2 0002             		move.w	#$27B2,$02(a0)
0001F814 0028 0004 0001             		ori.b	#4,$01(a0)
0001F81A 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001F820 317C 0280 0018             		move.w	#$280,priority(a0)
0001F826 1028 0028                  		move.b	$28(a0),d0
0001F82A 0800 0002                  		btst	#2,d0
0001F82E 6700                       		beq.s	Obj03_Init_CheckX
0001F830                            
0001F830                            ;Obj03_Init_CheckY:
0001F830 5428 0024                  		addq.b	#2,$24(a0) ; => Obj03_MainY
0001F834 0240 0007                  		andi.w	#7,d0
0001F838 1140 001A                  		move.b	d0,$1A(a0)
0001F83C 0240 0003                  		andi.w	#3,d0
0001F840 D040                       		add.w	d0,d0
0001F842 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001F848 3228 000C                  		move.w	$0C(a0),d1
0001F84C 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001F850 B269 000C                  		cmp.w	$0C(a1),d1
0001F854 6400                       		bcc.s	Obj03_Init_Next
0001F856 117C 0001 0034             		move.b	#1,$34(a0)
0001F85C                            Obj03_Init_Next:
0001F85C                            	;	lea	(Sidekick).w,a1 ; a1=character
0001F85C                            	;	cmp.w	$0C(a1),d1
0001F85C                            	;	bcc.s	+
0001F85C                            	;	move.b	#1,$35(a0)
0001F85C                            ;+
0001F85C 6000 0000                  		bra.w	Obj03_MainY
0001F860                            ; ===========================================================================
0001F860                            word_1FD68:
0001F860 0020                       	dc.w  $020
0001F862 0040                       	dc.w  $040	; 1
0001F864 0080                       	dc.w  $080	; 2
0001F866 0100                       	dc.w  $100	; 3
0001F868                            ; ===========================================================================
0001F868                            ; loc_1FD70:
0001F868                            Obj03_Init_CheckX:
0001F868 0240 0003                  		andi.w	#3,d0
0001F86C 1140 001A                  		move.b	d0,$1A(a0)
0001F870 D040                       		add.w	d0,d0
0001F872 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001F878 3228 0008                  		move.w	$08(a0),d1
0001F87C 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001F880 B269 0008                  		cmp.w	$08(a1),d1
0001F884 6400                       		bcc.s	Obj03_Init_CheckX_Next
0001F886 117C 0001 0034             		move.b	#1,$34(a0)
0001F88C                            Obj03_Init_CheckX_Next:
0001F88C                            	;	lea	(Sidekick).w,a1 ; a1=character
0001F88C                            	;	cmp.w	$08(a1),d1
0001F88C                            	;	bcc.s	+
0001F88C                            	;	move.b	#1,$35(a0)
0001F88C                            ;+
0001F88C                            
0001F88C                            Obj03_MainX:
0001F88C 4A78 FE08                  		tst.w	($FFFFFE08).w
0001F890 6600 0000                  		bne.w	return_1FEAC
0001F894 3228 0008                  		move.w	$08(a0),d1
0001F898 45E8 0034                  		lea	$34(a0),a2
0001F89C 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001F8A0                            ;		bsr.s	+
0001F8A0                            ;		lea	(Sidekick).w,a1 ; a1=character
0001F8A0                            
0001F8A0                            ;+
0001F8A0 4A1A                       		tst.b	(a2)+
0001F8A2 6600                       		bne.s	Obj03_MainX_Alt
0001F8A4 B269 0008                  		cmp.w	$08(a1),d1
0001F8A8 6200 0000                  		bhi.w	return_1FEAC
0001F8AC 157C 0001 FFFF             		move.b	#1,-1(a2)
0001F8B2 3428 000C                  		move.w	$0C(a0),d2
0001F8B6 3602                       		move.w	d2,d3
0001F8B8 3828 0032                  		move.w	$32(a0),d4
0001F8BC 9444                       		sub.w	d4,d2
0001F8BE D644                       		add.w	d4,d3
0001F8C0 3829 000C                  		move.w	$0C(a1),d4
0001F8C4 B842                       		cmp.w	d2,d4
0001F8C6 6D00 0000                  		blt.w	return_1FEAC
0001F8CA B843                       		cmp.w	d3,d4
0001F8CC 6C00 0000                  		bge.w	return_1FEAC
0001F8D0 1028 0028                  		move.b	$28(a0),d0
0001F8D4 6A00                       		bpl.s	Obj03_ICX_B1
0001F8D6 0829 0001 002B             		btst	#1,$2B(a1)
0001F8DC 6600 0000                  		bne.w	return_1FEAC
0001F8E0                            
0001F8E0                            Obj03_ICX_B1:
0001F8E0 0828 0000 0001             		btst	#0,$01(a0)
0001F8E6 6600                       		bne.s	Obj03_ICX_B2
0001F8E8 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001F8EE                            	;	move.b	#$C,$3E(a1)
0001F8EE                            	;	move.b	#$D,$3F(a1)
0001F8EE 0800 0003                  		btst	#3,d0
0001F8F2 6700                       		beq.s	Obj03_ICX_B2
0001F8F4 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001F8FA                            	;	move.b	#$E,$3E(a1)
0001F8FA                            	;	move.b	#$F,$3F(a1)
0001F8FA                            
0001F8FA                            Obj03_ICX_B2:
0001F8FA 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001F900 0800 0005                  		btst	#5,d0
0001F904 6700                       		beq.s	return_1FEAC
0001F906 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001F90C 6000                       		bra.s	return_1FEAC
0001F90E                            ; ===========================================================================
0001F90E                            
0001F90E                            Obj03_MainX_Alt:
0001F90E B269 0008                  		cmp.w	$08(a1),d1
0001F912 6300 0000                  		bls.w	return_1FEAC
0001F916 157C 0000 FFFF             		move.b	#0,-1(a2)
0001F91C 3428 000C                  		move.w	$0C(a0),d2
0001F920 3602                       		move.w	d2,d3
0001F922 3828 0032                  		move.w	$32(a0),d4
0001F926 9444                       		sub.w	d4,d2
0001F928 D644                       		add.w	d4,d3
0001F92A 3829 000C                  		move.w	$0C(a1),d4
0001F92E B842                       		cmp.w	d2,d4
0001F930 6D00 0000                  		blt.w	return_1FEAC
0001F934 B843                       		cmp.w	d3,d4
0001F936 6C00 0000                  		bge.w	return_1FEAC
0001F93A 1028 0028                  		move.b	$28(a0),d0
0001F93E 6A00                       		bpl.s	Obj03_MXA_B1
0001F940 0829 0001 002B             		btst	#1,$2B(a1)
0001F946 6600 0000                  		bne.w	return_1FEAC
0001F94A                            
0001F94A                            Obj03_MXA_B1:
0001F94A 0828 0000 0001             		btst	#0,$01(a0)
0001F950 6600                       		bne.s	Obj03_MXA_B2
0001F952 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001F958                            	;	move.b	#$C,$3E(a1)
0001F958                            	;	move.b	#$D,$3F(a1)
0001F958 0800 0004                  		btst	#4,d0
0001F95C 6700                       		beq.s	Obj03_MXA_B2
0001F95E 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001F964                            	;	move.b	#$E,$3E(a1)
0001F964                            	;	move.b	#$F,$3F(a1)
0001F964                            
0001F964                            Obj03_MXA_B2:
0001F964 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001F96A 0800 0006                  		btst	#6,d0
0001F96E 6700                       		beq.s	return_1FEAC
0001F970 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001F976                            
0001F976                            return_1FEAC:
0001F976 4E75                       		rts
0001F978                            
0001F978                            ; ===========================================================================
0001F978                            
0001F978                            Obj03_MainY:
0001F978 4A78 FE08                  		tst.w	($FFFFFE08).w
0001F97C 6600 0000                  		bne.w	return_1FFB6
0001F980 3228 000C                  		move.w	$0C(a0),d1
0001F984 45E8 0034                  		lea	$34(a0),a2
0001F988 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001F98C                            ;		bsr.s	+
0001F98C                            ;		lea	(Sidekick).w,a1 ; a1=character
0001F98C                            
0001F98C                            ;+
0001F98C 4A1A                       		tst.b	(a2)+
0001F98E 6600                       		bne.s	Obj03_MainY_Alt
0001F990 B269 000C                  		cmp.w	$0C(a1),d1
0001F994 6200 0000                  		bhi.w	return_1FFB6
0001F998 157C 0001 FFFF             		move.b	#1,-1(a2)
0001F99E 3428 0008                  		move.w	$08(a0),d2
0001F9A2 3602                       		move.w	d2,d3
0001F9A4 3828 0032                  		move.w	$32(a0),d4
0001F9A8 9444                       		sub.w	d4,d2
0001F9AA D644                       		add.w	d4,d3
0001F9AC 3829 0008                  		move.w	$08(a1),d4
0001F9B0 B842                       		cmp.w	d2,d4
0001F9B2 6D00 0000                  		blt.w	return_1FFB6
0001F9B6 B843                       		cmp.w	d3,d4
0001F9B8 6C00 0000                  		bge.w	return_1FFB6
0001F9BC 1028 0028                  		move.b	$28(a0),d0
0001F9C0 6A00                       		bpl.s	Obj03_MY_B1
0001F9C2 0829 0001 002B             		btst	#1,$2B(a1)
0001F9C8 6600 0000                  		bne.w	return_1FFB6
0001F9CC                            
0001F9CC                            Obj03_MY_B1:
0001F9CC 0828 0000 0001             		btst	#0,$01(a0)
0001F9D2 6600                       		bne.s	Obj03_MY_B2
0001F9D4 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001F9DA                            	;	move.b	#$C,$3E(a1)
0001F9DA                            	;	move.b	#$D,$3F(a1)
0001F9DA 0800 0003                  		btst	#3,d0
0001F9DE 6700                       		beq.s	Obj03_MY_B2
0001F9E0 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001F9E6                            	;	move.b	#$E,$3E(a1)
0001F9E6                            	;	move.b	#$F,$3F(a1)
0001F9E6                            
0001F9E6                            Obj03_MY_B2:
0001F9E6 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001F9EC 0800 0005                  		btst	#5,d0
0001F9F0 6700                       		beq.s	return_1FFB6
0001F9F2 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001F9F8 6000                       		bra.s	return_1FFB6
0001F9FA                            
0001F9FA                            ; ===========================================================================
0001F9FA                            
0001F9FA                            Obj03_MainY_Alt:
0001F9FA B269 000C                  		cmp.w	$0C(a1),d1
0001F9FE 6300 0000                  		bls.w	return_1FFB6
0001FA02 157C 0000 FFFF             		move.b	#0,-1(a2)
0001FA08 3428 0008                  		move.w	$08(a0),d2
0001FA0C 3602                       		move.w	d2,d3
0001FA0E 3828 0032                  		move.w	$32(a0),d4
0001FA12 9444                       		sub.w	d4,d2
0001FA14 D644                       		add.w	d4,d3
0001FA16 3829 0008                  		move.w	$08(a1),d4
0001FA1A B842                       		cmp.w	d2,d4
0001FA1C 6D00 0000                  		blt.w	return_1FFB6
0001FA20 B843                       		cmp.w	d3,d4
0001FA22 6C00 0000                  		bge.w	return_1FFB6
0001FA26 1028 0028                  		move.b	$28(a0),d0
0001FA2A 6A00                       		bpl.s	Obj03_MYA_B1
0001FA2C 0829 0001 002B             		btst	#1,$2B(a1)
0001FA32 6600 0000                  		bne.w	return_1FFB6
0001FA36                            
0001FA36                            Obj03_MYA_B1
0001FA36 0828 0000 0001             		btst	#0,$01(a0)
0001FA3C 6600                       		bne.s	Obj03_MYA_B2
0001FA3E 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001FA44                            	;	move.b	#$C,$3E(a1)
0001FA44                            	;	move.b	#$D,$3F(a1)
0001FA44 0800 0004                  		btst	#4,d0
0001FA48 6700                       		beq.s	Obj03_MYA_B2
0001FA4A 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001FA50                            	;	move.b	#$E,$3E(a1)
0001FA50                            	;	move.b	#$F,$3F(a1)
0001FA50                            
0001FA50                            Obj03_MYA_B2:
0001FA50 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001FA56 0800 0006                  		btst	#6,d0
0001FA5A 6700                       		beq.s	return_1FFB6
0001FA5C 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001FA62                            
0001FA62                            return_1FFB6:
0001FA62 4E75                       		rts
0001FA64                            
0001FA64                            ; ===========================================================================
0001FA64                            ; ----------------------------------------------
0001FA64                            ; Object 8E - Super Sonic stars
0001FA64                            ; ----------------------------------------------
0001FA64                            
0001FA64                            Obj8E:						  ; ...
0001FA64 223C 0000 0000             		move.l	#Unc_SuperSonic_stars,d1			        ; Call for Regular Shield Art
0001FA6A 343C ABC0                  		move.w	#$ABC0,d2			        ; Load Art from this location (VRAM location*20)
0001FA6E                            								; In this case, VRAM = $541*20
0001FA6E 363C 0100                  		move.w	#$100,d3
0001FA72 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
0001FA78 7000                       		moveq	#0,d0
0001FA7A 1028 0024                  		move.b	routine(a0),d0
0001FA7E 323B 0000                  		move.w	Obj8E_States(pc,d0.w),d1
0001FA82 4EFB 1000                  		jmp	Obj8E_States(pc,d1.w)
0001FA86                            ; ---------------------------------------------------------------------------
0001FA86 0000 0000                  Obj8E_States:	dc.w Obj8E_Init-Obj8E_States,Obj8E_Main-Obj8E_States; 0	; ...
0001FA8A                            ; ---------------------------------------------------------------------------
0001FA8A                            
0001FA8A                            Obj8E_Init:					  ; ...
0001FA8A 5428 0024                  		addq.b	#2,routine(a0)
0001FA8E 217C 0000 0000 0004        		move.l	#Obj8E_MapUnc_1E1BE,4(a0)
0001FA96 117C 0004 0001             		move.b	#4,1(a0)
0001FA9C 317C 0080 0018             		move.w	#$80,priority(a0)
0001FAA2 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001FAA8 317C 055E 0002             		move.w	#$55E,art_tile(a0)
0001FAAE                            ;	bsr.w	Adjust2PArtPointer
0001FAAE 0838 0007 D002             	btst	#7,(MainCharacter+art_tile).w
0001FAB4 6700                       	beq.s	Obj8E_Main
0001FAB6 08E8 0007 0002             	bset	#7,art_tile(a0)
0001FABC                            ; loc_1E138:
0001FABC                            Obj8E_Main:
0001FABC 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
0001FAC0 6700                       	beq.s	JmpTo8_DeleteObject
0001FAC2 4A28 0030                  	tst.b	objoff_30(a0)
0001FAC6 6700                       	beq.s	loc_1E188
0001FAC8 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
0001FACC 6A00                       	bpl.s	loc_1E170
0001FACE 117C 0001 001E             	move.b	#1,anim_frame_duration(a0)
0001FAD4 5228 001A                  	addq.b	#1,mapping_frame(a0)
0001FAD8 0C28 0006 001A             	cmpi.b	#6,mapping_frame(a0)
0001FADE 6500                       	bcs.s	loc_1E170
0001FAE0 117C 0000 001A             	move.b	#0,mapping_frame(a0)
0001FAE6 117C 0000 0030             	move.b	#0,objoff_30(a0)
0001FAEC 117C 0001 0031             	move.b	#1,objoff_31(a0)
0001FAF2 4E75                       	rts
0001FAF4                            ; ===========================================================================
0001FAF4                            
0001FAF4                            loc_1E170:
0001FAF4 4A28 0031                  	tst.b	objoff_31(a0)
0001FAF8 6600                       	bne.s	JmpTo6_DisplaySprite
0001FAFA                            
0001FAFA                            loc_1E176:
0001FAFA 3178 D008 0008             	move.w	(MainCharacter+x_pos).w,x_pos(a0)
0001FB00 3178 D00C 000C             	move.w	(MainCharacter+y_pos).w,y_pos(a0)
0001FB06                            
0001FB06                            JmpTo6_DisplaySprite: 
0001FB06 4EF9 0001 5C48             	jmp	DisplaySprite
0001FB0C                            ; ===========================================================================
0001FB0C                            
0001FB0C                            loc_1E188:
0001FB0C 4A38 F7C8                  	tst.b	($FFFFF7C8).w
0001FB10 6600                       	bne.s	loc_1E1AA
0001FB12 3038 D020                  	move.w	(MainCharacter+inertia).w,d0
0001FB16 6A00                       	bpl.s	loc_1E196
0001FB18 4440                       	neg.w	d0
0001FB1A                            
0001FB1A                            loc_1E196:
0001FB1A 0C40 0800                  	cmpi.w	#$800,d0
0001FB1E 6500                       	bcs.s	loc_1E1AA
0001FB20 117C 0000 001A             	move.b	#0,mapping_frame(a0)
0001FB26 117C 0001 0030             	move.b	#1,objoff_30(a0)
0001FB2C 60CC                       	bra.s	loc_1E176
0001FB2E                            ; ===========================================================================
0001FB2E                            
0001FB2E                            loc_1E1AA:
0001FB2E 117C 0000 0030             	move.b	#0,objoff_30(a0)
0001FB34 117C 0000 0031             	move.b	#0,objoff_31(a0)
0001FB3A 4E75                       	rts
0001FB3C                            ; ===========================================================================
0001FB3C                            
0001FB3C                            JmpTo8_DeleteObject:
0001FB3C 4EF9 0001 5BFC             	jmp	DeleteObject
0001FB42                            ; ===========================================================================
0001FB42                            
0001FB42                            ; -------------------------------------------------------------------------------
0001FB42                            ; sprite mappings
0001FB42                            ; -------------------------------------------------------------------------------
0001FB42                            ;Obj8F_MapUnc_1E1BE:
0001FB42                            Obj8E_MapUnc_1E1BE:	include "_maps/obj8F.asm"
0001FB42                            ; --------------------------------------------------------------------------------
0001FB42                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001FB42                            ; --------------------------------------------------------------------------------
0001FB42                            
0001FB42                            SME_n_qOM:	
0001FB42 0000 0000                  		dc.w SME_n_qOM_C-SME_n_qOM, SME_n_qOM_21-SME_n_qOM	
0001FB46 0000 0000                  		dc.w SME_n_qOM_36-SME_n_qOM, SME_n_qOM_4B-SME_n_qOM	
0001FB4A 0000 0000                  		dc.w SME_n_qOM_60-SME_n_qOM, SME_n_qOM_75-SME_n_qOM	
0001FB4E 04                         SME_n_qOM_C:	dc.b 4	
0001FB4F F800 0002 F8               		dc.b $F8, 0, 0, 2, $F8	
0001FB54 F800 0802 00               		dc.b $F8, 0, 8, 2, 0	
0001FB59 0000 1002 F8               		dc.b 0, 0, $10, 2, $F8	
0001FB5E 0000 1802 00               		dc.b 0, 0, $18, 2, 0	
0001FB63 04                         SME_n_qOM_21:	dc.b 4	
0001FB64 F005 0003 F0               		dc.b $F0, 5, 0, 3, $F0	
0001FB69 F005 0803 00               		dc.b $F0, 5, 8, 3, 0	
0001FB6E 0005 1003 F0               		dc.b 0, 5, $10, 3, $F0	
0001FB73 0005 1803 00               		dc.b 0, 5, $18, 3, 0	
0001FB78 04                         SME_n_qOM_36:	dc.b 4	
0001FB79 E80A 0007 E8               		dc.b $E8, $A, 0, 7, $E8	
0001FB7E E80A 0807 00               		dc.b $E8, $A, 8, 7, 0	
0001FB83 000A 1007 E8               		dc.b 0, $A, $10, 7, $E8	
0001FB88 000A 1807 00               		dc.b 0, $A, $18, 7, 0	
0001FB8D 04                         SME_n_qOM_4B:	dc.b 4	
0001FB8E F005 0003 F0               		dc.b $F0, 5, 0, 3, $F0	
0001FB93 F005 0803 00               		dc.b $F0, 5, 8, 3, 0	
0001FB98 0005 1003 F0               		dc.b 0, 5, $10, 3, $F0	
0001FB9D 0005 1803 00               		dc.b 0, 5, $18, 3, 0	
0001FBA2 04                         SME_n_qOM_60:	dc.b 4	
0001FBA3 F800 0002 F8               		dc.b $F8, 0, 0, 2, $F8	
0001FBA8 F800 0802 00               		dc.b $F8, 0, 8, 2, 0	
0001FBAD 0000 1002 F8               		dc.b 0, 0, $10, 2, $F8	
0001FBB2 0000 1802 00               		dc.b 0, 0, $18, 2, 0	
0001FBB7 00                         SME_n_qOM_75:	dc.b 0	
0001FBB8                            		even
0001FBB8                            		even
0001FBB8                            ; ===========================================================================
0001FBB8 4E71                       	nop
0001FBBA                            
0001FBBA                            ; ---------------------------------------------------------------------------
0001FBBA                            ; Object 8F - Pause Menu
0001FBBA                            ; ---------------------------------------------------------------------------
0001FBBA                             
0001FBBA                            Obj8F:
0001FBBA                            ; ----------------------------------------------------------------------------
0001FBBA                            ; Object 06 - Rotating cylinder in MTZ, twisting spiral pathway in EHZ
0001FBBA                            ; ----------------------------------------------------------------------------
0001FBBA                            ; Sprite_214C4:
0001FBBA                            ;Obj06:
0001FBBA 7000                       	moveq	#0,d0
0001FBBC 1028 0024                  	move.b	routine(a0),d0
0001FBC0 323B 0000                  	move.w	Obj06_Index(pc,d0.w),d1
0001FBC4 4EBB 1000                  	jsr	Obj06_Index(pc,d1.w)
0001FBC8 4EF9 0000 0000             	jmp	Obj06_ChkDel
0001FBCE 4E75                       	rts
0001FBD0                            ; ---------------------------------------------------------------------------
0001FBD0                            ; seems to be an optimization to delete the object the instant it goes offscreen
0001FBD0                            ; only in 1-player mode, because it would screw up the other player
0001FBD0                            ; loc_214DA:
0001FBD0                            Obj06_ChkDel:
0001FBD0 3028 0008                  	move.w	x_pos(a0),d0
0001FBD4 0240 FF80                  	andi.w	#$FF80,d0
0001FBD8 9078 F7DA                  	sub.w	(Camera_X_pos_coarse).w,d0
0001FBDC 0C40 0280                  	cmpi.w	#$280,d0
0001FBE0 6200                       	bhi.s	JmpTo19_DeleteObject
0001FBE2 4E75                       	rts
0001FBE4                            ; ---------------------------------------------------------------------------
0001FBE4                            JmpTo19_DeleteObject
0001FBE4 4EF9 0001 5BFC             	jmp	DeleteObject
0001FBEA                            
0001FBEA                            ; ===========================================================================
0001FBEA                            ; off_214F4:
0001FBEA                            Obj06_Index:
0001FBEA 0000                       	dc.w Obj06_Init-Obj06_Index		; 0
0001FBEC 0000                       	dc.w Obj06_Spiral-Obj06_Index		; 2
0001FBEE 0000                       	dc.w Obj06_Cylinder-Obj06_Index	; 4
0001FBF0                            
0001FBF0                            ; ===========================================================================
0001FBF0                            ; loc_214FA:
0001FBF0                            Obj06_Init:
0001FBF0 5428 0024                  	addq.b	#2,routine(a0) ; => Obj06_Spiral
0001FBF4 117C 00D0 0023             	move.b	#$D0,width_pixels(a0)
0001FBFA 4A28 0028                  	tst.b	subtype(a0)
0001FBFE 6A00                       	bpl.s	Obj06_Spiral
0001FC00 5428 0024                  	addq.b	#2,routine(a0) ; => Obj06_Cylinder
0001FC04 6000 0000                  	bra.w	Obj06_Cylinder
0001FC08                            
0001FC08                            ; ===========================================================================
0001FC08                            ; spiral pathway from EHZ
0001FC08                            ; loc_21512:
0001FC08                            Obj06_Spiral:
0001FC08 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
0001FC0C 7C03                       	moveq	#3,d6
0001FC0E                            ;	bsr.s	+
0001FC0E                            ;	lea	(Sidekick).w,a1 ; a1=character
0001FC0E                            ;	addq.b	#1,d6
0001FC0E                            ;+
0001FC0E 0D28 0022                  	btst	d6,status(a0)
0001FC12 6600 0000                  	bne.w	loc_215C0
0001FC16 0829 0001 0022             	btst	#1,status(a1)
0001FC1C 6600 0000                  	bne.w	return_215BE
0001FC20 0829 0003 0022             	btst	#3,status(a1)
0001FC26 6600                       	bne.s	loc_21580
0001FC28 3029 0008                  	move.w	x_pos(a1),d0
0001FC2C 9068 0008                  	sub.w	x_pos(a0),d0
0001FC30 4A69 0010                  	tst.w	x_vel(a1)
0001FC34 6B00                       	bmi.s	loc_21556
0001FC36 0C40 FF40                  	cmpi.w	#-$C0,d0
0001FC3A 6E00                       	bgt.s	return_215BE
0001FC3C 0C40 FF30                  	cmpi.w	#-$D0,d0
0001FC40 6D00                       	blt.s	return_215BE
0001FC42 6000                       	bra.s	loc_21562
0001FC44                            ; ---------------------------------------------------------------------------
0001FC44                            
0001FC44                            loc_21556:
0001FC44 0C40 00C0                  	cmpi.w	#$C0,d0
0001FC48 6D00                       	blt.s	return_215BE
0001FC4A 0C40 00D0                  	cmpi.w	#$D0,d0
0001FC4E 6E00                       	bgt.s	return_215BE
0001FC50                            
0001FC50                            loc_21562:
0001FC50 3229 000C                  	move.w	y_pos(a1),d1
0001FC54 9268 000C                  	sub.w	y_pos(a0),d1
0001FC58 0441 0010                  	subi.w	#$10,d1
0001FC5C 0C41 0030                  	cmpi.w	#$30,d1
0001FC60 6400                       	bcc.s	return_215BE
0001FC62 4A38 F7C8                  	tst.b	($FFFFF7C8).w
0001FC66 6600                       	bne.s	return_215BE
0001FC68 4EB9 0000 F108             	jsr	loc_74AE
0001FC6E 4E75                       	rts
0001FC70                            ; ---------------------------------------------------------------------------
0001FC70                            
0001FC70                            loc_21580:
0001FC70 3029 0008                  	move.w	x_pos(a1),d0
0001FC74 9068 0008                  	sub.w	x_pos(a0),d0
0001FC78 4A69 0010                  	tst.w	x_vel(a1)
0001FC7C 6B00                       	bmi.s	loc_2159C
0001FC7E 0C40 FF50                  	cmpi.w	#-$B0,d0
0001FC82 6E00                       	bgt.s	return_215BE
0001FC84 0C40 FF40                  	cmpi.w	#-$C0,d0
0001FC88 6D00                       	blt.s	return_215BE
0001FC8A 6000                       	bra.s	loc_215A8
0001FC8C                            ; ---------------------------------------------------------------------------
0001FC8C                            
0001FC8C                            loc_2159C:
0001FC8C 0C40 00B0                  	cmpi.w	#$B0,d0
0001FC90 6D00                       	blt.s	return_215BE
0001FC92 0C40 00C0                  	cmpi.w	#$C0,d0
0001FC96 6E00                       	bgt.s	return_215BE
0001FC98                            
0001FC98                            loc_215A8:
0001FC98 3229 000C                  	move.w	y_pos(a1),d1
0001FC9C 9268 000C                  	sub.w	y_pos(a0),d1
0001FCA0 0441 0010                  	subi.w	#$10,d1
0001FCA4 0C41 0030                  	cmpi.w	#$30,d1
0001FCA8 6400                       	bcc.s	return_215BE
0001FCAA 4EB9 0000 F108             	jsr	loc_74AE
0001FCB0                            
0001FCB0                            return_215BE:
0001FCB0 4E75                       	rts
0001FCB2                            ; ---------------------------------------------------------------------------
0001FCB2                            
0001FCB2                            loc_215C0:
0001FCB2 3029 0020                  	move.w	inertia(a1),d0
0001FCB6 6A00                       	bpl.s	loc_215C0_2
0001FCB8 4440                       	neg.w	d0
0001FCBA                            loc_215C0_2:
0001FCBA 0C40 0600                  	cmpi.w	#$600,d0
0001FCBE 6500                       	bcs.s	Obj06_Spiral_CharacterFallsOff
0001FCC0 0829 0001 0022             	btst	#1,status(a1)
0001FCC6 6600                       	bne.s	Obj06_Spiral_CharacterFallsOff
0001FCC8 3029 0008                  	move.w	x_pos(a1),d0
0001FCCC 9068 0008                  	sub.w	x_pos(a0),d0
0001FCD0 0640 00D0                  	addi.w	#$D0,d0
0001FCD4 6B00                       	bmi.s	Obj06_Spiral_CharacterFallsOff
0001FCD6 0C40 01A0                  	cmpi.w	#$1A0,d0
0001FCDA 6500                       	bcs.s	Obj06_Spiral_MoveCharacter
0001FCDC                            
0001FCDC                            ; loc_215EA:
0001FCDC                            Obj06_Spiral_CharacterFallsOff:
0001FCDC 08A9 0003 0022             	bclr	#3,status(a1)
0001FCE2 0DA8 0022                  	bclr	d6,status(a0)
0001FCE6 137C 0000 0033             	move.b	#0,flips_remaining(a1)
0001FCEC 137C 0004 0034             	move.b	#4,flip_speed(a1)
0001FCF2 4E75                       	rts
0001FCF4                            
0001FCF4                            ; ---------------------------------------------------------------------------
0001FCF4                            ; loc_21602:
0001FCF4                            Obj06_Spiral_MoveCharacter:
0001FCF4 0829 0003 0022             	btst	#3,status(a1)
0001FCFA 67B4                       	beq.s	return_215BE
0001FCFC 123B 0000                  	move.b	Obj06_CosineTable(pc,d0.w),d1
0001FD00 4881                       	ext.w	d1
0001FD02 3428 000C                  	move.w	y_pos(a0),d2
0001FD06 D441                       	add.w	d1,d2
0001FD08 7200                       	moveq	#0,d1
0001FD0A 1229 0016                  	move.b	y_radius(a1),d1
0001FD0E 0441 0013                  	subi.w	#$13,d1
0001FD12 9441                       	sub.w	d1,d2
0001FD14 3342 000C                  	move.w	d2,y_pos(a1)
0001FD18 E648                       	lsr.w	#3,d0
0001FD1A 0240 003F                  	andi.w	#$3F,d0
0001FD1E 137B 0000 0031             	move.b	Obj06_FlipAngleTable(pc,d0.w),flip_angle(a1)
0001FD24 4E75                       	rts
0001FD26                            
0001FD26                            ; ===========================================================================
0001FD26                            ; byte_21634:
0001FD26                            Obj06_FlipAngleTable:
0001FD26 0000 0101                  	dc.b	 0,    0,    1,	   1; 4
0001FD2A 1616 1616                  	dc.b   $16,  $16,  $16,	 $16; 8
0001FD2E 2C2C 2C2C                  	dc.b   $2C,  $2C,  $2C,	 $2C; 12
0001FD32 4242 4242                  	dc.b   $42,  $42,  $42,	 $42; 16
0001FD36 5858 5858                  	dc.b   $58,  $58,  $58,	 $58; 20
0001FD3A 6E6E 6E6E                  	dc.b   $6E,  $6E,  $6E,	 $6E; 24
0001FD3E 8484 8484                  	dc.b   $84,  $84,  $84,	 $84; 28
0001FD42 9A9A 9A9A                  	dc.b   $9A,  $9A,  $9A,	 $9A; 32
0001FD46 B0B0 B0B0                  	dc.b   $B0,  $B0,  $B0,	 $B0; 36
0001FD4A C6C6 C6C6                  	dc.b   $C6,  $C6,  $C6,	 $C6; 40
0001FD4E DCDC DCDC                  	dc.b   $DC,  $DC,  $DC,	 $DC; 44
0001FD52 F2F2 F2F2                  	dc.b   $F2,  $F2,  $F2,	 $F2; 48
0001FD56 0101 0000                  	dc.b	 1,    1,    0,	   0; 52
0001FD5A                            ; byte_21668:
0001FD5A                            Obj06_CosineTable:
0001FD5A 2020 2020 2020 2020 2020+  	dc.b  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32;  16
0001FD6A 2020 2020 2020 2020 2020+  	dc.b  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31;  32
0001FD7A 1F1F 1F1F 1F1F 1F1F 1F1F+  	dc.b  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30;  48
0001FD8A 1E1E 1E1E 1E1E 1D1D 1D1D+  	dc.b  30, 30, 30, 30, 30, 30, 29, 29, 29, 29, 29, 28, 28, 28, 28, 27;  64
0001FD9A 1B1B 1B1A 1A1A 1919 1918+  	dc.b  27, 27, 27, 26, 26, 26, 25, 25, 25, 24, 24, 24, 23, 23, 22, 22;  80
0001FDAA 1515 1414 1312 1211 1010+  	dc.b  21, 21, 20, 20, 19, 18, 18, 17, 16, 16, 15, 14, 14, 13, 12, 12;  96
0001FDBA 0B0A 0A09 0808 0706 0605+  	dc.b  11, 10, 10,  9,  8,  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1; 112
0001FDCA 00FF FEFE FDFC FCFB FAF9+  	dc.b   0, -1, -2, -2, -3, -4, -4, -5, -6, -7, -7, -8, -9, -9,-10,-10; 128
0001FDDA F5F5 F4F4 F3F2 F2F1 F1F0+  	dc.b -11,-11,-12,-12,-13,-14,-14,-15,-15,-16,-16,-17,-17,-18,-18,-19; 144
0001FDEA EDED ECEB EBEA EAE9 E9E8+  	dc.b -19,-19,-20,-21,-21,-22,-22,-23,-23,-24,-24,-25,-25,-26,-26,-27; 160
0001FDFA E5E4 E4E4 E3E3 E2E2 E2E1+  	dc.b -27,-28,-28,-28,-29,-29,-30,-30,-30,-31,-31,-31,-32,-32,-32,-33; 176
0001FE0A DFDF DFDE DEDE DDDD DDDD+  	dc.b -33,-33,-33,-34,-34,-34,-35,-35,-35,-35,-35,-35,-35,-35,-36,-36; 192
0001FE1A DCDC DCDC DCDC DCDB DBDB+  	dc.b -36,-36,-36,-36,-36,-36,-36,-37,-37,-37,-37,-37,-37,-37,-37,-37; 208
0001FE2A DBDB DBDB DBDB DBDB DBDB+  	dc.b -37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37; 224
0001FE3A DBDB DBDB DCDC DCDC DCDC+  	dc.b -37,-37,-37,-37,-36,-36,-36,-36,-36,-36,-36,-35,-35,-35,-35,-35; 240
0001FE4A DDDD DDDE DEDE DFDF DFDF+  	dc.b -35,-35,-35,-34,-34,-34,-33,-33,-33,-33,-32,-32,-32,-31,-31,-31; 256
0001FE5A E2E2 E2E3 E3E4 E4E4 E5E5+  	dc.b -30,-30,-30,-29,-29,-28,-28,-28,-27,-27,-26,-26,-25,-25,-24,-24; 272
0001FE6A E9E9 EAEA EBEB ECED EDEE+  	dc.b -23,-23,-22,-22,-21,-21,-20,-19,-19,-18,-18,-17,-16,-16,-15,-14; 288
0001FE7A F2F3 F4F5 F5F6 F7F8 F9F9+  	dc.b -14,-13,-12,-11,-11,-10, -9, -8, -7, -7, -6, -5, -4, -3, -2, -1; 304
0001FE8A 0001 0203 0405 0607 0808+  	dc.b   0,  1,  2,  3,  4,  5,  6,  7,  8,  8,  9, 10, 10, 11, 12, 13; 320
0001FE9A 0D0E 0E0F 0F10 1011 1112+  	dc.b  13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21; 336
0001FEAA 1516 1617 1718 1818 1919+  	dc.b  21, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26; 352
0001FEBA 1B1B 1B1B 1C1C 1C1C 1C1C+  	dc.b  27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29; 368
0001FECA 1D1E 1E1E 1E1E 1E1E 1F1F+  	dc.b  29, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31; 384
0001FEDA 1F1F 2020 2020 2020 2020+  	dc.b  31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32; 400
0001FEEA 2020 2020 2020 2020 2020+  	dc.b  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32; 416
0001FEFA                            
0001FEFA                            ; ===========================================================================
0001FEFA                            ; rotating meshed cage from MTZ
0001FEFA                            ; loc_21808:
0001FEFA                            Obj06_Cylinder:
0001FEFA 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
0001FEFE 45F8 F7B2                  	lea	($FFFFF7B2).w,a2
0001FF02 7C03                       	moveq	#3,d6
0001FF04                            ;	bsr.s	+
0001FF04                            ;	lea	(Sidekick).w,a1 ; a1=character
0001FF04                            ;	lea	($FFFFF7B3).w,a2
0001FF04                            ;	addq.b	#1,d6
0001FF04                            ;+
0001FF04 0D28 0022                  	btst	d6,status(a0)
0001FF08 6600 0000                  	bne.w	loc_2188C
0001FF0C 3029 0008                  	move.w	x_pos(a1),d0
0001FF10 9068 0008                  	sub.w	x_pos(a0),d0
0001FF14 0C40 FF40                  	cmpi.w	#-$C0,d0
0001FF18 6D00                       	blt.s	return_2188A
0001FF1A 0C40 00C0                  	cmpi.w	#$C0,d0
0001FF1E 6C00                       	bge.s	return_2188A
0001FF20 3028 000C                  	move.w	y_pos(a0),d0
0001FF24 0640 003C                  	addi.w	#$3C,d0
0001FF28 3429 000C                  	move.w	y_pos(a1),d2
0001FF2C 1229 0016                  	move.b	y_radius(a1),d1
0001FF30 4881                       	ext.w	d1
0001FF32 D242                       	add.w	d2,d1
0001FF34 5841                       	addq.w	#4,d1
0001FF36 9041                       	sub.w	d1,d0
0001FF38 6200                       	bhi.s	return_2188A
0001FF3A 0C40 FFF0                  	cmpi.w	#-$10,d0
0001FF3E 6500                       	bcs.s	return_2188A
0001FF40 0C29 0006 0024             	cmpi.b	#6,routine(a1)
0001FF46 6400                       	bcc.s	return_2188A
0001FF48 D440                       	add.w	d0,d2
0001FF4A 5642                       	addq.w	#3,d2
0001FF4C 3342 000C                  	move.w	d2,y_pos(a1)
0001FF50 137C 0001 0035             	move.b	#1,flip_turned(a1) ; face the other way
0001FF56 4EB9 0000 F108             	jsr	loc_74AE
0001FF5C 337C 0001 001C             	move.w	#1,anim(a1)
0001FF62 14BC 0000                  	move.b	#0,(a2)
0001FF66 4A69 0020                  	tst.w	inertia(a1)
0001FF6A 6600                       	bne.s	return_2188A
0001FF6C 337C 0001 0020             	move.w	#1,inertia(a1)
0001FF72                            
0001FF72                            return_2188A:
0001FF72 4E75                       	rts
0001FF74                            ; ===========================================================================
0001FF74                            
0001FF74                            loc_2188C:
0001FF74 0829 0001 0022             	btst	#1,status(a1)
0001FF7A 6600                       	bne.s	loc_218C6
0001FF7C 3029 0008                  	move.w	x_pos(a1),d0
0001FF80 9068 0008                  	sub.w	x_pos(a0),d0
0001FF84 0640 00C0                  	addi.w	#$C0,d0
0001FF88 6B00                       	bmi.s	loc_218A8
0001FF8A 0C40 0180                  	cmpi.w	#$180,d0
0001FF8E 6500                       	bcs.s	loc_218E0
0001FF90                            
0001FF90                            loc_218A8:
0001FF90 08A9 0003 0022             	bclr	#3,status(a1)
0001FF96 0DA8 0022                  	bclr	d6,status(a0)
0001FF9A 137C 0000 0033             	move.b	#0,flips_remaining(a1)
0001FFA0 137C 0004 0034             	move.b	#4,flip_speed(a1)
0001FFA6 08E9 0001 0022             	bset	#1,status(a1)
0001FFAC 4E75                       	rts
0001FFAE                            ; ---------------------------------------------------------------------------
0001FFAE                            loc_218C6:
0001FFAE 1012                       	move.b	(a2),d0
0001FFB0 0600 0020                  	addi.b	#$20,d0
0001FFB4 0C00 0040                  	cmpi.b	#$40,d0
0001FFB8 6400                       	bcc.s	loc_218C6_2
0001FFBA E0E9 0012                  	asr	y_vel(a1)
0001FFBE 60D0                       	bra.s	loc_218A8
0001FFC0                            ; ---------------------------------------------------------------------------
0001FFC0                            loc_218C6_2:
0001FFC0 337C 0000 0012             	move.w	#0,y_vel(a1)
0001FFC6 60C8                       	bra.s	loc_218A8
0001FFC8                            ; ===========================================================================
0001FFC8                            
0001FFC8                            loc_218E0:
0001FFC8 0829 0003 0022             	btst	#3,status(a1)
0001FFCE 67A2                       	beq.s	return_2188A
0001FFD0 1012                       	move.b	(a2),d0
0001FFD2 6100 0000                  	bsr.w	JmpTo6_CalcSine
0001FFD6 C3FC 2800                  	muls.w	#$2800,d1
0001FFDA 4841                       	swap	d1
0001FFDC 3428 000C                  	move.w	y_pos(a0),d2
0001FFE0 D441                       	add.w	d1,d2
0001FFE2 7200                       	moveq	#0,d1
0001FFE4 1229 0016                  	move.b	y_radius(a1),d1
0001FFE8 0441 0013                  	subi.w	#$13,d1
0001FFEC 9441                       	sub.w	d1,d2
0001FFEE 3342 000C                  	move.w	d2,y_pos(a1)
0001FFF2 1012                       	move.b	(a2),d0
0001FFF4 1340 0031                  	move.b	d0,flip_angle(a1)
0001FFF8 5812                       	addq.b	#4,(a2)
0001FFFA 4A69 0020                  	tst.w	inertia(a1)
0001FFFE 6600                       	bne.s	return_2191E
00020000 337C 0001 0020             	move.w	#1,inertia(a1)
00020006                            
00020006                            return_2191E:
00020006 4E75                       	rts
00020008                            ; ===========================================================================
00020008                            
00020008                            JmpTo6_CalcSine
00020008 4EF9 0000 8DA4             	jmp	(CalcSine).l
0002000E                            ; ===========================================================================
0002000E                            ;	rts
0002000E                            ; ---------------------------------------------------------------------------
0002000E                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0002000E                            ; ---------------------------------------------------------------------------
0002000E                            
0002000E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002000E                            
0002000E                            
0002000E                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0002000E 21F8 FFE2 F796             		move.l	($FFFFFFE2).w,($FFFFF796).w		; MJ: load first collision data location
00020014 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is second sollision set to be used?
00020018 6700                       		beq.s	SAP_First				; MJ: if not, branch
0002001A 21F8 FFE6 F796             		move.l	($FFFFFFE6).w,($FFFFF796).w		; MJ: load second collision data location
00020020                            
00020020                            SAP_First:
00020020 0828 0003 0022             		btst	#3,$22(a0)
00020026 6700                       		beq.s	loc_14602
00020028 7000                       		moveq	#0,d0
0002002A 11C0 F768                  		move.b	d0,($FFFFF768).w
0002002E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00020032 4E75                       		rts	
00020034                            ; ===========================================================================
00020034                            
00020034                            loc_14602:
00020034 7003                       		moveq	#3,d0
00020036 11C0 F768                  		move.b	d0,($FFFFF768).w
0002003A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0002003E 1028 0026                  		move.b	$26(a0),d0
00020042 0600 0020                  		addi.b	#$20,d0
00020046 6A00                       		bpl.s	loc_14624
00020048 1028 0026                  		move.b	$26(a0),d0
0002004C 6A00                       		bpl.s	loc_1461E
0002004E 5300                       		subq.b	#1,d0
00020050                            
00020050                            loc_1461E:
00020050 0600 0020                  		addi.b	#$20,d0
00020054 6000                       		bra.s	loc_14630
00020056                            ; ===========================================================================
00020056                            
00020056                            loc_14624:
00020056 1028 0026                  		move.b	$26(a0),d0
0002005A 6A00                       		bpl.s	loc_1462C
0002005C 5200                       		addq.b	#1,d0
0002005E                            
0002005E                            loc_1462C:
0002005E 0600 001F                  		addi.b	#$1F,d0
00020062                            
00020062                            loc_14630:
00020062 0200 00C0                  		andi.b	#$C0,d0
00020066 0C00 0040                  		cmpi.b	#$40,d0
0002006A 6700 0000                  		beq.w	Sonic_WalkVertL
0002006E 0C00 0080                  		cmpi.b	#$80,d0
00020072 6700 0000                  		beq.w	Sonic_WalkCeiling
00020076 0C00 00C0                  		cmpi.b	#$C0,d0
0002007A 6700 0000                  		beq.w	Sonic_WalkVertR
0002007E 3428 000C                  		move.w	$C(a0),d2
00020082 3628 0008                  		move.w	8(a0),d3
00020086 48A7 3000                  		movem.w d2-d3,-(sp)
0002008A 7000                       		moveq	#0,d0
0002008C 1028 0016                  		move.b	$16(a0),d0
00020090 4880                       		ext.w	d0
00020092 D440                       		add.w	d0,d2
00020094 1028 0017                  		move.b	$17(a0),d0
00020098 4880                       		ext.w	d0
0002009A D640                       		add.w	d0,d3
0002009C 49F8 F768                  		lea	($FFFFF768).w,a4
000200A0 367C 0010                  		movea.w	#$10,a3
000200A4 3C3C 0000                  		move.w	#0,d6					; MJ: set angle?
000200A8 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000200AA 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
000200AE 4C9F 000C                  		movem.w (sp)+,d2-d3
000200B2 3F01                       		move.w	d1,-(sp)
000200B4 7000                       		moveq	#0,d0
000200B6 1028 0016                  		move.b	$16(a0),d0
000200BA 4880                       		ext.w	d0
000200BC D440                       		add.w	d0,d2
000200BE 1028 0017                  		move.b	$17(a0),d0
000200C2 4880                       		ext.w	d0
000200C4 4440                       		neg.w	d0
000200C6 D640                       		add.w	d0,d3
000200C8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000200CC 367C 0010                  		movea.w	#$10,a3
000200D0 3C3C 0000                  		move.w	#0,d6
000200D4 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000200D6 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
000200DA 301F                       		move.w	(sp)+,d0
000200DC 6100 0000                  		bsr.w	Sonic_Angle
000200E0 4A41                       		tst.w	d1
000200E2 6700                       		beq.s	locret_146BE
000200E4 6A00                       		bpl.s	loc_146C0
000200E6 0C41 FFF2                  		cmpi.w	#-$E,d1
000200EA 6D00                       		blt.s	locret_146E6
000200EC D368 000C                  		add.w	d1,$C(a0)
000200F0                            
000200F0                            locret_146BE:
000200F0 4E75                       		rts	
000200F2                            ; ===========================================================================
000200F2                            
000200F2                            loc_146C0:
000200F2 1028 0010                  		move.b	x_vel(a0),d0
000200F6 6A00                       		bpl.s	@next1
000200F8 4400                       		neg.b	d0
000200FA                            @next1:
000200FA 5800                       		addq.b	#4,d0
000200FC 0C00 000E                  		cmpi.b	#$E,d0
00020100 6500                       		bcs.s	@next2
00020102 103C 000E                  		move.b	#$E,d0
00020106                            @next2:
00020106 B200                       		cmp.b	d0,d1
00020108 6E00                       		bgt.s	loc_146CC
0002010A                            
0002010A                            loc_146C6:
0002010A D368 000C                  		add.w	d1,$C(a0)
0002010E 4E75                       		rts	
00020110                            ; ===========================================================================
00020110                            
00020110                            loc_146CC:
00020110 4A28 0038                  		tst.b	$38(a0)
00020114 66F4                       		bne.s	loc_146C6
00020116 08E8 0001 0022             		bset	#1,status(a0)
0002011C 08A8 0005 0022             		bclr	#5,status(a0)
00020122 117C 0001 001D             		move.b	#1,next_anim(a0)
00020128 4E75                       		rts	
0002012A                            ; ===========================================================================
0002012A                            
0002012A                            locret_146E6:
0002012A 4E75                       		rts	
0002012C                            ; End of function Sonic_AnglePos
0002012C                            
0002012C                            ; ===========================================================================
0002012C 2428 0008                  		move.l	8(a0),d2
00020130 3028 0010                  		move.w	x_vel(a0),d0
00020134 48C0                       		ext.l	d0
00020136 E180                       		asl.l	#8,d0
00020138 9480                       		sub.l	d0,d2
0002013A 2142 0008                  		move.l	d2,8(a0)
0002013E 303C 0038                  		move.w	#$38,d0
00020142 48C0                       		ext.l	d0
00020144 E180                       		asl.l	#8,d0
00020146 9680                       		sub.l	d0,d3
00020148 2143 000C                  		move.l	d3,$C(a0)
0002014C 4E75                       		rts	
0002014E                            ; ===========================================================================
0002014E                            
0002014E                            locret_1470A:
0002014E 4E75                       		rts	
00020150                            ; ===========================================================================
00020150 2628 000C                  		move.l	$C(a0),d3
00020154 3028 0012                  		move.w	y_vel(a0),d0
00020158 0440 0038                  		subi.w	#$38,d0
0002015C 3140 0012                  		move.w	d0,y_vel(a0)
00020160 48C0                       		ext.l	d0
00020162 E180                       		asl.l	#8,d0
00020164 9680                       		sub.l	d0,d3
00020166 2143 000C                  		move.l	d3,$C(a0)
0002016A 4E75                       		rts	
0002016C 4E75                       		rts	
0002016E                            ; ===========================================================================
0002016E 2428 0008                  		move.l	8(a0),d2
00020172 2628 000C                  		move.l	$C(a0),d3
00020176 3028 0010                  		move.w	x_vel(a0),d0
0002017A 48C0                       		ext.l	d0
0002017C E180                       		asl.l	#8,d0
0002017E 9480                       		sub.l	d0,d2
00020180 3028 0012                  		move.w	y_vel(a0),d0
00020184 48C0                       		ext.l	d0
00020186 E180                       		asl.l	#8,d0
00020188 9680                       		sub.l	d0,d3
0002018A 2142 0008                  		move.l	d2,8(a0)
0002018E 2143 000C                  		move.l	d3,$C(a0)
00020192 4E75                       		rts	
00020194                            
00020194                            ; ---------------------------------------------------------------------------
00020194                            ; Subroutine to	change Sonic"s angle as he walks along the floor
00020194                            ; ---------------------------------------------------------------------------
00020194                            
00020194                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020194                            
00020194                            
00020194                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00020194 1438 F76A                  		move.b	($FFFFF76A).w,d2
00020198 B240                       		cmp.w	d0,d1
0002019A 6F00                       		ble.s	loc_1475E
0002019C 1438 F768                  		move.b	($FFFFF768).w,d2
000201A0 3200                       		move.w	d0,d1
000201A2                            
000201A2                            loc_1475E:
000201A2 0802 0000                  		btst	#0,d2
000201A6 6600                       		bne.s	loc_1476A
000201A8 1142 0026                  		move.b	d2,$26(a0)
000201AC 4E75                       		rts	
000201AE                            ; ===========================================================================
000201AE                            
000201AE                            loc_1476A:
000201AE 1428 0026                  		move.b	$26(a0),d2
000201B2 0602 0020                  		addi.b	#$20,d2
000201B6 0202 00C0                  		andi.b	#$C0,d2
000201BA 1142 0026                  		move.b	d2,$26(a0)
000201BE 4E75                       		rts	
000201C0                            ; End of function Sonic_Angle
000201C0                            
000201C0                            ; ---------------------------------------------------------------------------
000201C0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000201C0                            ; ---------------------------------------------------------------------------
000201C0                            
000201C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000201C0                            
000201C0                            
000201C0                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000201C0 3428 000C                  		move.w	$C(a0),d2
000201C4 3628 0008                  		move.w	8(a0),d3
000201C8 48A7 3000                  		movem.w d2-d3,-(sp)
000201CC 7000                       		moveq	#0,d0
000201CE 1028 0017                  		move.b	$17(a0),d0
000201D2 4880                       		ext.w	d0
000201D4 4440                       		neg.w	d0
000201D6 D440                       		add.w	d0,d2
000201D8 1028 0016                  		move.b	$16(a0),d0
000201DC 4880                       		ext.w	d0
000201DE D640                       		add.w	d0,d3
000201E0 49F8 F768                  		lea	($FFFFF768).w,a4
000201E4 367C 0010                  		movea.w	#$10,a3
000201E8 3C3C 0000                  		move.w	#0,d6
000201EC 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000201EE 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
000201F2 4C9F 000C                  		movem.w (sp)+,d2-d3		
000201F6 3F01                       		move.w	d1,-(sp)
000201F8 7000                       		moveq	#0,d0
000201FA 1028 0017                  		move.b	$17(a0),d0
000201FE 4880                       		ext.w	d0
00020200 D440                       		add.w	d0,d2
00020202 1028 0016                  		move.b	$16(a0),d0
00020206 4880                       		ext.w	d0
00020208 D640                       		add.w	d0,d3
0002020A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0002020E 367C 0010                  		movea.w	#$10,a3
00020212 3C3C 0000                  		move.w	#0,d6
00020216 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00020218 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
0002021C 301F                       		move.w	(sp)+,d0
0002021E 6100 FF74                  		bsr.w	Sonic_Angle
00020222 4A41                       		tst.w	d1
00020224 6700                       		beq.s	locret_147F0
00020226 6A00                       		bpl.s	loc_147F2
00020228 0C41 FFF2                  		cmpi.w	#-$E,d1
0002022C 6D00 FF20                  		blt.w	locret_1470A
00020230 D368 0008                  		add.w	d1,8(a0)
00020234                            
00020234                            locret_147F0:
00020234 4E75                       		rts	
00020236                            ; ===========================================================================
00020236                            
00020236                            loc_147F2:
00020236 0C41 000E                  		cmpi.w	#$E,d1
0002023A 6E00                       		bgt.s	loc_147FE
0002023C                            
0002023C                            loc_147F8:
0002023C D368 0008                  		add.w	d1,8(a0)
00020240 4E75                       		rts	
00020242                            ; ===========================================================================
00020242                            
00020242                            loc_147FE:
00020242 4A28 0038                  		tst.b	$38(a0)
00020246 66F4                       		bne.s	loc_147F8
00020248 08E8 0001 0022             		bset	#1,$22(a0)
0002024E 08A8 0005 0022             		bclr	#5,$22(a0)
00020254 117C 0001 001D             		move.b	#1,$1D(a0)
0002025A 4E75                       		rts	
0002025C                            ; End of function Sonic_WalkVertR
0002025C                            
0002025C                            ; ---------------------------------------------------------------------------
0002025C                            ; Subroutine allowing Sonic to walk upside-down
0002025C                            ; ---------------------------------------------------------------------------
0002025C                            
0002025C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002025C                            
0002025C                            
0002025C                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0002025C 3428 000C                  		move.w	$C(a0),d2
00020260 3628 0008                  		move.w	8(a0),d3
00020264 48A7 3000                  		movem.w d2-d3,-(sp)
00020268 7000                       		moveq	#0,d0
0002026A 1028 0016                  		move.b	$16(a0),d0
0002026E 4880                       		ext.w	d0
00020270 9440                       		sub.w	d0,d2
00020272 0A42 000F                  		eori.w	#$F,d2
00020276 1028 0017                  		move.b	$17(a0),d0
0002027A 4880                       		ext.w	d0
0002027C D640                       		add.w	d0,d3
0002027E 49F8 F768                  		lea	($FFFFF768).w,a4
00020282 367C FFF0                  		movea.w	#-$10,a3
00020286 3C3C 0800                  		move.w	#$0800,d6
0002028A 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0002028C 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
00020290 4C9F 000C                  		movem.w (sp)+,d2-d3
00020294 3F01                       		move.w	d1,-(sp)
00020296 7000                       		moveq	#0,d0
00020298 1028 0016                  		move.b	$16(a0),d0
0002029C 4880                       		ext.w	d0
0002029E 9440                       		sub.w	d0,d2
000202A0 0A42 000F                  		eori.w	#$F,d2
000202A4 1028 0017                  		move.b	$17(a0),d0
000202A8 4880                       		ext.w	d0
000202AA 9640                       		sub.w	d0,d3
000202AC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000202B0 367C FFF0                  		movea.w	#-$10,a3
000202B4 3C3C 0800                  		move.w	#$0800,d6
000202B8 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000202BA 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
000202BE 301F                       		move.w	(sp)+,d0
000202C0 6100 FED2                  		bsr.w	Sonic_Angle
000202C4 4A41                       		tst.w	d1
000202C6 6700                       		beq.s	locret_14892
000202C8 6A00                       		bpl.s	loc_14894
000202CA 0C41 FFF2                  		cmpi.w	#-$E,d1
000202CE 6D00 FE5A                  		blt.w	locret_146E6
000202D2 9368 000C                  		sub.w	d1,$C(a0)
000202D6                            
000202D6                            locret_14892:
000202D6 4E75                       		rts	
000202D8                            ; ===========================================================================
000202D8                            
000202D8                            loc_14894:
000202D8 0C41 000E                  		cmpi.w	#$E,d1
000202DC 6E00                       		bgt.s	loc_148A0
000202DE                            
000202DE                            loc_1489A:
000202DE 9368 000C                  		sub.w	d1,$C(a0)
000202E2 4E75                       		rts	
000202E4                            ; ===========================================================================
000202E4                            
000202E4                            loc_148A0:
000202E4 4A28 0038                  		tst.b	$38(a0)
000202E8 66F4                       		bne.s	loc_1489A
000202EA 08E8 0001 0022             		bset	#1,$22(a0)
000202F0 08A8 0005 0022             		bclr	#5,$22(a0)
000202F6 117C 0001 001D             		move.b	#1,$1D(a0)
000202FC 4E75                       		rts	
000202FE                            ; End of function Sonic_WalkCeiling
000202FE                            
000202FE                            ; ---------------------------------------------------------------------------
000202FE                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000202FE                            ; ---------------------------------------------------------------------------
000202FE                            
000202FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000202FE                            
000202FE                            
000202FE                            Sonic_WalkVertL:
000202FE 3428 000C                  		move.w	$C(a0),d2				; MJ: Load Y position
00020302 3628 0008                  		move.w	8(a0),d3				; MJ: Load X position
00020306 48A7 3000                  		movem.w d2-d3,-(sp)
0002030A 7000                       		moveq	#0,d0					; MJ: clear d0
0002030C 1028 0017                  		move.b	$17(a0),d0				; MJ: load height
00020310 4880                       		ext.w	d0					; MJ: set left byte pos or neg
00020312 9440                       		sub.w	d0,d2					; MJ: subtract from Y position
00020314 1028 0016                  		move.b	$16(a0),d0				; MJ: load width
00020318 4880                       		ext.w	d0					; MJ: set left byte pos or neg
0002031A 9640                       		sub.w	d0,d3					; MJ: subtract from X position
0002031C 0A43 000F                  		eori.w	#$F,d3
00020320 49F8 F768                  		lea	($FFFFF768).w,a4			; MJ: load address of the angle value set
00020324 367C FFF0                  		movea.w	#-$10,a3
00020328 3C3C 0400                  		move.w	#$400,d6
0002032C 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0002032E 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00020332 4C9F 000C                  		movem.w (sp)+,d2-d3
00020336 3F01                       		move.w	d1,-(sp)
00020338 7000                       		moveq	#0,d0
0002033A 1028 0017                  		move.b	$17(a0),d0
0002033E 4880                       		ext.w	d0
00020340 D440                       		add.w	d0,d2
00020342 1028 0016                  		move.b	$16(a0),d0
00020346 4880                       		ext.w	d0
00020348 9640                       		sub.w	d0,d3
0002034A 0A43 000F                  		eori.w	#$F,d3
0002034E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020352 367C FFF0                  		movea.w	#-$10,a3
00020356 3C3C 0400                  		move.w	#$400,d6
0002035A 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0002035C 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00020360 301F                       		move.w	(sp)+,d0
00020362 6100 FE30                  		bsr.w	Sonic_Angle
00020366 4A41                       		tst.w	d1
00020368 6700                       		beq.s	locret_14934
0002036A 6A00                       		bpl.s	loc_14936
0002036C 0C41 FFF2                  		cmpi.w	#-$E,d1
00020370 6D00 FDDC                  		blt.w	locret_1470A
00020374 9368 0008                  		sub.w	d1,8(a0)
00020378                            
00020378                            locret_14934:
00020378 4E75                       		rts	
0002037A                            ; ===========================================================================
0002037A                            
0002037A                            loc_14936:
0002037A 0C41 000E                  		cmpi.w	#$E,d1
0002037E 6E00                       		bgt.s	loc_14942
00020380                            
00020380                            loc_1493C:
00020380 9368 0008                  		sub.w	d1,8(a0)
00020384 4E75                       		rts	
00020386                            ; ===========================================================================
00020386                            
00020386                            loc_14942:
00020386 4A28 0038                  		tst.b	$38(a0)
0002038A 66F4                       		bne.s	loc_1493C
0002038C 08E8 0001 0022             		bset	#1,$22(a0)
00020392 08A8 0005 0022             		bclr	#5,$22(a0)
00020398 117C 0001 001D             		move.b	#1,$1D(a0)
0002039E 4E75                       		rts	
000203A0                            ; End of function Sonic_WalkVertL
000203A0                            
000203A0                            ; ---------------------------------------------------------------------------
000203A0                            ; Subroutine to	find which tile	the object is standing on
000203A0                            ; ---------------------------------------------------------------------------
000203A0                            
000203A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000203A0                            
000203A0                            
000203A0                            Floor_ChkTile:				; XREF: FindFloor; et al
000203A0 3002                       		move.w	d2,d0					; MJ: load Y position
000203A2 0240 0780                  		andi.w	#$780,d0				; MJ: get within 780 (E00 pixels) in multiples of 80
000203A6 D040                       		add.w	d0,d0					; MJ: multiply by 2
000203A8 3203                       		move.w	d3,d1					; MJ: load X position
000203AA EE49                       		lsr.w	#7,d1					; MJ: shift to right side
000203AC 0241 007F                  		andi.w	#$7F,d1					; MJ: get within 7F
000203B0 D041                       		add.w	d1,d0					; MJ: add calc'd Y to calc'd X
000203B2 72FF                       		moveq	#-1,d1					; MJ: prepare FFFF in d3
000203B4 2278 A400                  		movea.l	($FFFFA400).w,a1			; MJ: load address of Layout to a1
000203B8 1231 0000                  		move.b	(a1,d0.w),d1				; MJ: collect correct chunk ID based on the X and Y position
000203BC 0241 00FF                  		andi.w	#$FF,d1					; MJ: keep within FF
000203C0 EE59                       		ror.w	#7,d1					; MJ: ror round to the far left
000203C2 E459                       		ror.w	#2,d1					; MJ: ..plus an extra 2 (so it's 80, not 200)
000203C4 3002                       		move.w	d2,d0					; MJ: load Y position
000203C6 0240 0070                  		andi.w	#$070,d0				; MJ: keep Y within 80 pixels
000203CA D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
000203CC 3003                       		move.w	d3,d0					; MJ: load X position
000203CE E648                       		lsr.w	#3,d0					; MJ: divide by 8
000203D0 0240 000E                  		andi.w	#$0E,d0					; MJ: keep X within 10 pixels
000203D4 D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
000203D6                            
000203D6                            loc_14996:
000203D6 2241                       		movea.l	d1,a1					; MJ: set address (Chunk to read)
000203D8 0C28 0006 0024             		cmpi.b  #$06,$24(A0)
000203DE 6600                       		bne.s   Player_Not_Death
000203E0 0C10 0001                  		cmpi.b  #$01,(A0)          ; Is Sonic
000203E4 6600                       		bne.s   Player_Not_Death
000203E6 227C FFFF 0000             		move.l  #$FFFF0000, A1
000203EC                            Player_Not_Death:
000203EC 4E75                       		rts						; MJ: return
000203EE                            ; ===========================================================================
000203EE                            
000203EE                            loc_1499A:
000203EE 0241 007F                  		andi.w	#$7F,d1
000203F2 0828 0006 0001             		btst	#6,1(a0)
000203F8 6700                       		beq.s	loc_149B2
000203FA 5241                       		addq.w	#1,d1
000203FC 0C41 0029                  		cmpi.w	#$29,d1
00020400 6600                       		bne.s	loc_149B2
00020402 323C 0051                  		move.w	#$51,d1
00020406                            
00020406                            loc_149B2:
00020406 EE59                       		ror.w	#7,d1
00020408 E459                       		ror.w	#2,d1
0002040A 3002                       		move.w	d2,d0
0002040C D040                       		add.w	d0,d0
0002040E 0240 0070                  		andi.w	#$070,d0
00020412 D240                       		add.w	d0,d1
00020414 3003                       		move.w	d3,d0
00020416 E648                       		lsr.w	#3,d0
00020418 0240 000E                  		andi.w	#$0E,d0
0002041C D240                       		add.w	d0,d1
0002041E 2241                       		movea.l	d1,a1
00020420 4E75                       		rts
00020422                            ; End of function Floor_ChkTile
00020422                            
00020422                            
00020422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020422                            
00020422                            
00020422                            ColisionChkLayer:
00020422 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is collision set to first?
00020426 6700                       		beq.s	CCL_NoChange				; MJ: if so, branch
00020428 3800                       		move.w	d0,d4					; MJ: load block ID to d4
0002042A 0240 0FFF                  		and.w	#$0FFF,d0				; MJ: clear solid settings of d0
0002042E 0244 C000                  		and.w	#$C000,d4				; MJ: get only second solid settings of d4
00020432 E44C                       		lsr.w	#$02,d4					; MJ: shift them to first solid settings location
00020434 D044                       		add.w	d4,d0					; MJ: add to rest of block ID
00020436                            
00020436                            CCL_NoChange:
00020436 4E75                       		rts						; MJ: return
00020438                            
00020438                            
00020438                            FindFloor:
00020438 6100 FF66                  		bsr.w	Floor_ChkTile
0002043C 3011                       		move.w	(a1),d0
0002043E 61E2                       		bsr.s	ColisionChkLayer			; MJ: check solid settings to use
00020440 3800                       		move.w	d0,d4
00020442 0240 03FF                  		andi.w	#$3FF,d0
00020446 6700                       		beq.s	loc_149DE
00020448 0B04                       		btst	d5,d4
0002044A 6600                       		bne.s	loc_149EC
0002044C                            
0002044C                            loc_149DE:
0002044C D44B                       		add.w	a3,d2
0002044E 6100 0000                  		bsr.w	FindFloor2
00020452 944B                       		sub.w	a3,d2
00020454 0641 0010                  		addi.w	#$10,d1
00020458 4E75                       		rts	
0002045A                            ; ===========================================================================
0002045A                            
0002045A                            loc_149EC:
0002045A 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load collision index address
0002045E 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct Collision ID based on the Block ID
00020462 0240 00FF                  		andi.w	#$FF,d0					; MJ: clear the left byte
00020466 67E4                       		beq.s	loc_149DE				; MJ: if collision ID is 00, branch
00020468 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
0002046E 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: collect correct angle based on the collision ID
00020472 E948                       		lsl.w	#4,d0					; MJ: multiply collision ID by 10
00020474 3203                       		move.w	d3,d1					; MJ: load X position
00020476 0804 000A                  		btst	#$A,d4					; MJ: is the block mirrored?
0002047A 6700                       		beq.s	loc_14A12				; MJ: if not, branch
0002047C 4641                       		not.w	d1					; MJ: reverse bits of the X position
0002047E 4414                       		neg.b	(a4)					; MJ: reverse the angle ID
00020480                            
00020480                            loc_14A12:
00020480 0804 000B                  		btst	#$B,d4					; MJ: is the block flipped?
00020484 6700                       		beq.s	loc_14A22				; MJ: if not, branch
00020486 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle ID by 40..
0002048A 4414                       		neg.b	(a4)					; MJ: ..reverse the angle ID..
0002048C 0414 0040                  		subi.b	#$40,(a4)				; MJ: ..and subtract 40 again 
00020490                            
00020490                            loc_14A22:
00020490 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 (d1 is pixel based on the collision block)
00020494 D240                       		add.w	d0,d1					; MJ: add collision ID (x10) (d0 is the collision block being read)
00020496 45F9 0000 0000             		lea	(CollArray1).l,a2			; MJ: load collision array
0002049C 1032 1000                  		move.b	(a2,d1.w),d0				; MJ: load solid value
000204A0 4880                       		ext.w	d0					; MJ: clear left byte
000204A2 BD44                       		eor.w	d6,d4					; MJ: set ceiling/wall bits
000204A4 0804 000B                  		btst	#$B,d4					; MJ: is sonic walking on the left wall?
000204A8 6700                       		beq.s	loc_14A3E				; MJ: if not, branch
000204AA 4440                       		neg.w	d0					; MJ: reverse solid value
000204AC                            
000204AC                            loc_14A3E:
000204AC 4A40                       		tst.w	d0					; MJ: is the solid data null?
000204AE 679C                       		beq.s	loc_149DE				; MJ: if so, branch
000204B0 6B00                       		bmi.s	loc_14A5A				; MJ: if it's negative, branch
000204B2 0C00 0010                  		cmpi.b	#$10,d0					; MJ: is it 10?
000204B6 6700                       		beq.s	loc_14A66				; MJ: if so, branch
000204B8 3202                       		move.w	d2,d1					; MJ: load Y position
000204BA 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 pixels
000204BE D041                       		add.w	d1,d0					; MJ: add to solid value
000204C0 323C 000F                  		move.w	#$F,d1					; MJ: set F
000204C4 9240                       		sub.w	d0,d1					; MJ: minus solid value from F
000204C6 4E75                       		rts			; d1 = position?	; MJ: return
000204C8                            ; ===========================================================================
000204C8                            
000204C8                            loc_14A5A:
000204C8 3202                       		move.w	d2,d1
000204CA 0241 000F                  		andi.w	#$F,d1
000204CE D041                       		add.w	d1,d0
000204D0 6A00 FF7A                  		bpl.w	loc_149DE
000204D4                            
000204D4                            loc_14A66:
000204D4 944B                       		sub.w	a3,d2
000204D6 6100 0000                  		bsr.w	FindFloor2
000204DA D44B                       		add.w	a3,d2
000204DC 0441 0010                  		subi.w	#$10,d1
000204E0 4E75                       		rts	
000204E2                            ; End of function FindFloor
000204E2                            
000204E2                            
000204E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000204E2                            
000204E2                            
000204E2                            FindFloor2:				; XREF: FindFloor
000204E2 6100 FEBC                  		bsr.w	Floor_ChkTile
000204E6 3011                       		move.w	(a1),d0
000204E8 6100 FF38                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
000204EC 3800                       		move.w	d0,d4
000204EE 0240 03FF                  		andi.w	#$3FF,d0
000204F2 6700                       		beq.s	loc_14A86
000204F4 0B04                       		btst	d5,d4
000204F6 6600                       		bne.s	loc_14A94
000204F8                            
000204F8                            loc_14A86:
000204F8 323C 000F                  		move.w	#$F,d1
000204FC 3002                       		move.w	d2,d0
000204FE 0240 000F                  		andi.w	#$F,d0
00020502 9240                       		sub.w	d0,d1
00020504 4E75                       		rts	
00020506                            ; ===========================================================================
00020506                            
00020506                            loc_14A94:
00020506 2478 F796                  		movea.l	($FFFFF796).w,a2
0002050A 1032 0000                  		move.b	(a2,d0.w),d0
0002050E 0240 00FF                  		andi.w	#$FF,d0
00020512 67E4                       		beq.s	loc_14A86
00020514 45F9 0000 0000             		lea	(AngleMap).l,a2
0002051A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0002051E E948                       		lsl.w	#4,d0
00020520 3203                       		move.w	d3,d1
00020522 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00020526 6700                       		beq.s	loc_14ABA
00020528 4641                       		not.w	d1
0002052A 4414                       		neg.b	(a4)
0002052C                            
0002052C                            loc_14ABA:
0002052C 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00020530 6700                       		beq.s	loc_14ACA
00020532 0614 0040                  		addi.b	#$40,(a4)
00020536 4414                       		neg.b	(a4)
00020538 0414 0040                  		subi.b	#$40,(a4)
0002053C                            
0002053C                            loc_14ACA:
0002053C 0241 000F                  		andi.w	#$F,d1
00020540 D240                       		add.w	d0,d1
00020542 45F9 0000 0000             		lea	(CollArray1).l,a2
00020548 1032 1000                  		move.b	(a2,d1.w),d0
0002054C 4880                       		ext.w	d0
0002054E BD44                       		eor.w	d6,d4
00020550 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00020554 6700                       		beq.s	loc_14AE6
00020556 4440                       		neg.w	d0
00020558                            
00020558                            loc_14AE6:
00020558 4A40                       		tst.w	d0
0002055A 679C                       		beq.s	loc_14A86
0002055C 6B00                       		bmi.s	loc_14AFC
0002055E 3202                       		move.w	d2,d1
00020560 0241 000F                  		andi.w	#$F,d1
00020564 D041                       		add.w	d1,d0
00020566 323C 000F                  		move.w	#$F,d1
0002056A 9240                       		sub.w	d0,d1
0002056C 4E75                       		rts	
0002056E                            ; ===========================================================================
0002056E                            
0002056E                            loc_14AFC:
0002056E 3202                       		move.w	d2,d1
00020570 0241 000F                  		andi.w	#$F,d1
00020574 D041                       		add.w	d1,d0
00020576 6A00 FF80                  		bpl.w	loc_14A86
0002057A 4641                       		not.w	d1
0002057C 4E75                       		rts	
0002057E                            ; End of function FindFloor2
0002057E                            
0002057E                            
0002057E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002057E                            
0002057E                            
0002057E                            FindWall:
0002057E 6100 FE20                  		bsr.w	Floor_ChkTile				; MJ: get chunk/block location
00020582 3011                       		move.w	(a1),d0					; MJ: load block ID from chunk
00020584 6100 FE9C                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00020588 3800                       		move.w	d0,d4					; MJ: copy to d4
0002058A 0240 03FF                  		andi.w	#$3FF,d0				; MJ: clear flip/mirror/etc data
0002058E 6700                       		beq.s	loc_14B1E				; MJ: if it was null, branch
00020590 0B04                       		btst	d5,d4					; MJ: check solid set (C top solid | D Left/right solid)
00020592 6600                       		bne.s	loc_14B2C				; MJ: if the specific solid is set, branch
00020594                            
00020594                            loc_14B1E:
00020594 D64B                       		add.w	a3,d3					; MJ: add 10 to X position
00020596 6100 0000                  		bsr.w	FindWall2
0002059A 964B                       		sub.w	a3,d3					; MJ: minus 10 from X position
0002059C 0641 0010                  		addi.w	#$10,d1
000205A0 4E75                       		rts	
000205A2                            ; ===========================================================================
000205A2                            
000205A2                            loc_14B2C:
000205A2 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load address of collision for level
000205A6 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct colision ID based on the block ID
000205AA 0240 00FF                  		andi.w	#$FF,d0					; MJ: keep within FF
000205AE 67E4                       		beq.s	loc_14B1E				; MJ: if it's null, branch
000205B0 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
000205B6 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: load angle set location based on collision ID
000205BA E948                       		lsl.w	#4,d0					; MJ: multiply by 10
000205BC 3202                       		move.w	d2,d1					; MJ: load Y position
000205BE 0804 000B                  		btst	#$B,d4					; MJ: is the block ID flipped?
000205C2 6700                       		beq.s	loc_14B5A				; MJ: if not, branch
000205C4 4641                       		not.w	d1
000205C6 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle set by 40
000205CA 4414                       		neg.b	(a4)					; MJ: negate to opposite
000205CC 0414 0040                  		subi.b	#$40,(a4)				; MJ: decrease angle set by 40
000205D0                            
000205D0                            loc_14B5A:
000205D0 0804 000A                  		btst	#$A,d4					; MJ: is the block ID mirrored?
000205D4 6700                       		beq.s	loc_14B62				; MJ: if not, branch
000205D6 4414                       		neg.b	(a4)					; MJ: negate to opposite
000205D8                            
000205D8                            loc_14B62:
000205D8 0241 000F                  		andi.w	#$F,d1
000205DC D240                       		add.w	d0,d1
000205DE 45F9 0000 0000             		lea	(CollArray2).l,a2
000205E4 1032 1000                  		move.b	(a2,d1.w),d0
000205E8 4880                       		ext.w	d0
000205EA BD44                       		eor.w	d6,d4
000205EC 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
000205F0 6700                       		beq.s	loc_14B7E
000205F2 4440                       		neg.w	d0
000205F4                            
000205F4                            loc_14B7E:
000205F4 4A40                       		tst.w	d0
000205F6 679C                       		beq.s	loc_14B1E
000205F8 6B00                       		bmi.s	loc_14B9A
000205FA 0C00 0010                  		cmpi.b	#$10,d0
000205FE 6700                       		beq.s	loc_14BA6
00020600 3203                       		move.w	d3,d1
00020602 0241 000F                  		andi.w	#$F,d1
00020606 D041                       		add.w	d1,d0
00020608 323C 000F                  		move.w	#$F,d1
0002060C 9240                       		sub.w	d0,d1
0002060E 4E75                       		rts	
00020610                            ; ===========================================================================
00020610                            
00020610                            loc_14B9A:
00020610 3203                       		move.w	d3,d1
00020612 0241 000F                  		andi.w	#$F,d1
00020616 D041                       		add.w	d1,d0
00020618 6A00 FF7A                  		bpl.w	loc_14B1E
0002061C                            
0002061C                            loc_14BA6:
0002061C 964B                       		sub.w	a3,d3
0002061E 6100 0000                  		bsr.w	FindWall2
00020622 D64B                       		add.w	a3,d3
00020624 0441 0010                  		subi.w	#$10,d1
00020628 4E75                       		rts	
0002062A                            ; End of function FindWall
0002062A                            
0002062A                            
0002062A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002062A                            
0002062A                            
0002062A                            FindWall2:				; XREF: FindWall
0002062A 6100 FD74                  		bsr.w	Floor_ChkTile
0002062E 3011                       		move.w	(a1),d0
00020630 6100 FDF0                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00020634 3800                       		move.w	d0,d4
00020636 0240 03FF                  		andi.w	#$3FF,d0
0002063A 6700                       		beq.s	loc_14BC6
0002063C 0B04                       		btst	d5,d4
0002063E 6600                       		bne.s	loc_14BD4
00020640                            
00020640                            loc_14BC6:
00020640 323C 000F                  		move.w	#$F,d1
00020644 3003                       		move.w	d3,d0
00020646 0240 000F                  		andi.w	#$F,d0
0002064A 9240                       		sub.w	d0,d1
0002064C 4E75                       		rts	
0002064E                            ; ===========================================================================
0002064E                            
0002064E                            loc_14BD4:
0002064E 2478 F796                  		movea.l	($FFFFF796).w,a2
00020652 1032 0000                  		move.b	(a2,d0.w),d0
00020656 0240 00FF                  		andi.w	#$FF,d0
0002065A 67E4                       		beq.s	loc_14BC6
0002065C 45F9 0000 0000             		lea	(AngleMap).l,a2
00020662 18B2 0000                  		move.b	(a2,d0.w),(a4)
00020666 E948                       		lsl.w	#4,d0
00020668 3202                       		move.w	d2,d1
0002066A 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
0002066E 6700                       		beq.s	loc_14C02
00020670 4641                       		not.w	d1
00020672 0614 0040                  		addi.b	#$40,(a4)
00020676 4414                       		neg.b	(a4)
00020678 0414 0040                  		subi.b	#$40,(a4)
0002067C                            
0002067C                            loc_14C02:
0002067C 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00020680 6700                       		beq.s	loc_14C0A
00020682 4414                       		neg.b	(a4)
00020684                            
00020684                            loc_14C0A:
00020684 0241 000F                  		andi.w	#$F,d1
00020688 D240                       		add.w	d0,d1
0002068A 45F9 0000 0000             		lea	(CollArray2).l,a2
00020690 1032 1000                  		move.b	(a2,d1.w),d0
00020694 4880                       		ext.w	d0
00020696 BD44                       		eor.w	d6,d4
00020698 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
0002069C 6700                       		beq.s	loc_14C26
0002069E 4440                       		neg.w	d0
000206A0                            
000206A0                            loc_14C26:
000206A0 4A40                       		tst.w	d0
000206A2 679C                       		beq.s	loc_14BC6
000206A4 6B00                       		bmi.s	loc_14C3C
000206A6 3203                       		move.w	d3,d1
000206A8 0241 000F                  		andi.w	#$F,d1
000206AC D041                       		add.w	d1,d0
000206AE 323C 000F                  		move.w	#$F,d1
000206B2 9240                       		sub.w	d0,d1
000206B4 4E75                       		rts	
000206B6                            ; ===========================================================================
000206B6                            
000206B6                            loc_14C3C:
000206B6 3203                       		move.w	d3,d1
000206B8 0241 000F                  		andi.w	#$F,d1
000206BC D041                       		add.w	d1,d0
000206BE 6A00 FF80                  		bpl.w	loc_14BC6
000206C2 4641                       		not.w	d1
000206C4 4E75                       		rts	
000206C6                            ; End of function FindWall2
000206C6                            
000206C6                            ; ---------------------------------------------------------------------------
000206C6                            ; Unused floor/wall subroutine - logs something	to do with collision
000206C6                            ; ---------------------------------------------------------------------------
000206C6                            
000206C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000206C6                            
000206C6                            
000206C6                            FloorLog_Unk:				; XREF: Level
000206C6 4E75                       		rts	
000206C8                            
000206C8 43F9 0000 0000             		lea	(CollArray1).l,a1
000206CE 45F9 0000 0000             		lea	(CollArray1).l,a2
000206D4 363C 00FF                  		move.w	#$FF,d3
000206D8                            
000206D8                            loc_14C5E:
000206D8 7A10                       		moveq	#$10,d5
000206DA 343C 000F                  		move.w	#$F,d2
000206DE                            
000206DE                            loc_14C64:
000206DE 7800                       		moveq	#0,d4
000206E0 323C 000F                  		move.w	#$F,d1
000206E4                            
000206E4                            loc_14C6A:
000206E4 3019                       		move.w	(a1)+,d0
000206E6 EAA8                       		lsr.l	d5,d0
000206E8 D944                       		addx.w	d4,d4
000206EA 51C9 FFF8                  		dbf	d1,loc_14C6A
000206EE                            
000206EE 34C4                       		move.w	d4,(a2)+
000206F0 92FC 0020                  		suba.w	#$20,a1
000206F4 5345                       		subq.w	#1,d5
000206F6 51CA FFE6                  		dbf	d2,loc_14C64
000206FA                            
000206FA D2FC 0020                  		adda.w	#$20,a1
000206FE 51CB FFD8                  		dbf	d3,loc_14C5E
00020702                            
00020702 43F9 0000 0000             		lea	(CollArray1).l,a1
00020708 45F9 0000 0000             		lea	(CollArray2).l,a2
0002070E 6100                       		bsr.s	FloorLog_Unk2
00020710 43F9 0000 0000             		lea	(CollArray1).l,a1
00020716 45F9 0000 0000             		lea	(CollArray1).l,a2
0002071C                            
0002071C                            ; End of function FloorLog_Unk
0002071C                            
0002071C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002071C                            
0002071C                            
0002071C                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0002071C 363C 0FFF                  		move.w	#$FFF,d3
00020720                            
00020720                            loc_14CA6:
00020720 7400                       		moveq	#0,d2
00020722 323C 000F                  		move.w	#$F,d1
00020726 3019                       		move.w	(a1)+,d0
00020728 6700                       		beq.s	loc_14CD4
0002072A 6B00                       		bmi.s	loc_14CBE
0002072C                            
0002072C                            loc_14CB2:
0002072C E248                       		lsr.w	#1,d0
0002072E 6400                       		bcc.s	loc_14CB8
00020730 5202                       		addq.b	#1,d2
00020732                            
00020732                            loc_14CB8:
00020732 51C9 FFF8                  		dbf	d1,loc_14CB2
00020736                            
00020736 6000                       		bra.s	loc_14CD6
00020738                            ; ===========================================================================
00020738                            
00020738                            loc_14CBE:
00020738 0C40 FFFF                  		cmpi.w	#-1,d0
0002073C 6700                       		beq.s	loc_14CD0
0002073E                            
0002073E                            loc_14CC4:
0002073E E348                       		lsl.w	#1,d0
00020740 6400                       		bcc.s	loc_14CCA
00020742 5302                       		subq.b	#1,d2
00020744                            
00020744                            loc_14CCA:
00020744 51C9 FFF8                  		dbf	d1,loc_14CC4
00020748                            
00020748 6000                       		bra.s	loc_14CD6
0002074A                            ; ===========================================================================
0002074A                            
0002074A                            loc_14CD0:
0002074A 303C 0010                  		move.w	#$10,d0
0002074E                            
0002074E                            loc_14CD4:
0002074E 3400                       		move.w	d0,d2
00020750                            
00020750                            loc_14CD6:
00020750 14C2                       		move.b	d2,(a2)+
00020752 51CB FFCC                  		dbf	d3,loc_14CA6
00020756                            
00020756 4E75                       		rts	
00020758                            
00020758                            ; End of function FloorLog_Unk2
00020758                            
00020758                            
00020758                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020758                            
00020758                            
00020758                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00020758 2628 0008                  		move.l	8(a0),d3
0002075C 2428 000C                  		move.l	$C(a0),d2
00020760 3228 0010                  		move.w	x_vel(a0),d1
00020764 48C1                       		ext.l	d1
00020766 E181                       		asl.l	#8,d1
00020768 D681                       		add.l	d1,d3
0002076A 3228 0012                  		move.w	y_vel(a0),d1
0002076E 48C1                       		ext.l	d1
00020770 E181                       		asl.l	#8,d1
00020772 D481                       		add.l	d1,d2
00020774 4842                       		swap	d2
00020776 4843                       		swap	d3
00020778 11C0 F768                  		move.b	d0,($FFFFF768).w
0002077C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00020780 1200                       		move.b	d0,d1
00020782 0600 0020                  		addi.b	#$20,d0
00020786 6A00                       		bpl.s	loc_14D1A
00020788 1001                       		move.b	d1,d0
0002078A 6A00                       		bpl.s	loc_14D14
0002078C 5300                       		subq.b	#1,d0
0002078E                            
0002078E                            loc_14D14:
0002078E 0600 0020                  		addi.b	#$20,d0
00020792 6000                       		bra.s	loc_14D24
00020794                            ; ===========================================================================
00020794                            
00020794                            loc_14D1A:
00020794 1001                       		move.b	d1,d0
00020796 6A00                       		bpl.s	loc_14D20
00020798 5200                       		addq.b	#1,d0
0002079A                            
0002079A                            loc_14D20:
0002079A 0600 001F                  		addi.b	#$1F,d0
0002079E                            
0002079E                            loc_14D24:
0002079E 0200 00C0                  		andi.b	#$C0,d0
000207A2 6700 0000                  		beq.w	loc_14DF0
000207A6 0C00 0080                  		cmpi.b	#$80,d0
000207AA 6700 0000                  		beq.w	loc_14F7C
000207AE 0201 0038                  		andi.b	#$38,d1
000207B2 6600                       		bne.s	loc_14D3C
000207B4 5042                       		addq.w	#8,d2
000207B6                            
000207B6                            loc_14D3C:
000207B6 0C00 0040                  		cmpi.b	#$40,d0
000207BA 6700 0000                  		beq.w	loc_1504A
000207BE 6000 0000                  		bra.w	loc_14EBC
000207C2                            
000207C2                            ; End of function Sonic_WalkSpeed
000207C2                            
000207C2                            
000207C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000207C2                            
000207C2                            
000207C2                            sub_14D48:				; XREF: Sonic_Jump
000207C2 11C0 F768                  		move.b	d0,($FFFFF768).w
000207C6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000207CA 0600 0020                  		addi.b	#$20,d0
000207CE 0200 00C0                  		andi.b	#$C0,d0
000207D2 0C00 0040                  		cmpi.b	#$40,d0
000207D6 6700 0000                  		beq.w	loc_14FD6
000207DA 0C00 0080                  		cmpi.b	#$80,d0
000207DE 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000207E2 0C00 00C0                  		cmpi.b	#$C0,d0
000207E6 6700 0000                  		beq.w	sub_14E50
000207EA                            
000207EA                            ; End of function sub_14D48
000207EA                            
000207EA                            ; ---------------------------------------------------------------------------
000207EA                            ; Subroutine to	make Sonic land	on the floor after jumping
000207EA                            ; ---------------------------------------------------------------------------
000207EA                            
000207EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000207EA                            
000207EA                            
000207EA                            Sonic_HitFloor:				; XREF: Sonic_Floor
000207EA 3428 000C                  		move.w	$C(a0),d2
000207EE 3628 0008                  		move.w	8(a0),d3
000207F2 48A7 3000                  		movem.w d2-d3,-(sp)		
000207F6 7000                       		moveq	#0,d0
000207F8 1028 0016                  		move.b	$16(a0),d0
000207FC 4880                       		ext.w	d0
000207FE D440                       		add.w	d0,d2
00020800 1028 0017                  		move.b	$17(a0),d0
00020804 4880                       		ext.w	d0
00020806 D640                       		add.w	d0,d3
00020808 49F8 F768                  		lea	($FFFFF768).w,a4
0002080C 367C 0010                  		movea.w	#$10,a3
00020810 3C3C 0000                  		move.w	#0,d6
00020814 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00020816 6100 FC20                  		bsr.w	FindFloor				; MJ: check solidity
0002081A 4C9F 000C                  		movem.w (sp)+,d2-d3		
0002081E 3F01                       		move.w	d1,-(sp)
00020820 7000                       		moveq	#0,d0
00020822 1028 0016                  		move.b	$16(a0),d0
00020826 4880                       		ext.w	d0
00020828 D440                       		add.w	d0,d2
0002082A 1028 0017                  		move.b	$17(a0),d0
0002082E 4880                       		ext.w	d0
00020830 9640                       		sub.w	d0,d3
00020832 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020836 367C 0010                  		movea.w	#$10,a3
0002083A 3C3C 0000                  		move.w	#0,d6
0002083E 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00020840 6100 FBF6                  		bsr.w	FindFloor				; MJ: check solidity
00020844 301F                       		move.w	(sp)+,d0
00020846 143C 0000                  		move.b	#0,d2
0002084A                            
0002084A                            loc_14DD0:
0002084A 1638 F76A                  		move.b	($FFFFF76A).w,d3
0002084E B240                       		cmp.w	d0,d1
00020850 6F00                       		ble.s	loc_14DDE
00020852 1638 F768                  		move.b	($FFFFF768).w,d3
00020856 C141                       		exg	d0,d1
00020858                            
00020858                            loc_14DDE:
00020858 0803 0000                  		btst	#0,d3
0002085C 6700                       		beq.s	locret_14DE6
0002085E 1602                       		move.b	d2,d3
00020860                            
00020860                            locret_14DE6:
00020860 4E75                       		rts	
00020862                            
00020862                            ; End of function Sonic_HitFloor
00020862                            
00020862                            ; ===========================================================================
00020862 3428 000C                  		move.w	$C(a0),d2
00020866 3628 0008                  		move.w	8(a0),d3
0002086A                            
0002086A                            loc_14DF0:				; XREF: Sonic_WalkSpeed
0002086A 0642 000A                  		addi.w	#$A,d2
0002086E 49F8 F768                  		lea	($FFFFF768).w,a4
00020872 367C 0010                  		movea.w	#$10,a3
00020876 3C3C 0000                  		move.w	#0,d6
0002087A 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0002087C 6100 FBBA                  		bsr.w	FindFloor				; MJ: check solidity
00020880 143C 0000                  		move.b	#0,d2
00020884                            
00020884                            loc_14E0A:				; XREF: sub_14EB4
00020884 1638 F768                  		move.b	($FFFFF768).w,d3
00020888 0803 0000                  		btst	#0,d3
0002088C 6700                       		beq.s	locret_14E16
0002088E 1602                       		move.b	d2,d3
00020890                            
00020890                            locret_14E16:
00020890 4E75                       		rts	
00020892                            
00020892                            ; ---------------------------------------------------------------------------
00020892                            ; Subroutine allowing objects to interact with the floor
00020892                            ; ---------------------------------------------------------------------------
00020892                            
00020892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020892                            
00020892                            
00020892                            ObjHitFloor:
00020892 3628 0008                  		move.w	8(a0),d3
00020896                            
00020896                            ; End of function ObjHitFloor
00020896                            
00020896                            
00020896                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020896                            
00020896                            
00020896                            ObjHitFloor2:
00020896 3428 000C                  		move.w	$C(a0),d2
0002089A 7000                       		moveq	#0,d0
0002089C 1028 0016                  		move.b	$16(a0),d0
000208A0 4880                       		ext.w	d0
000208A2 D440                       		add.w	d0,d2
000208A4 49F8 F768                  		lea	($FFFFF768).w,a4
000208A8 18BC 0000                  		move.b	#0,(a4)
000208AC 367C 0010                  		movea.w	#$10,a3
000208B0 3C3C 0000                  		move.w	#0,d6
000208B4 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000208B6 6100 FB80                  		bsr.w	FindFloor				; MJ: check solidity
000208BA 1638 F768                  		move.b	($FFFFF768).w,d3
000208BE 0803 0000                  		btst	#0,d3
000208C2 6700                       		beq.s	locret_14E4E
000208C4 163C 0000                  		move.b	#0,d3
000208C8                            
000208C8                            locret_14E4E:
000208C8 4E75                       		rts	
000208CA                            ; End of function ObjHitFloor2
000208CA                            
000208CA                            
000208CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000208CA                            
000208CA                            
000208CA                            sub_14E50:				; XREF: sub_14D48
000208CA 3428 000C                  		move.w	$C(a0),d2
000208CE 3628 0008                  		move.w	8(a0),d3
000208D2 48A7 3000                  		movem.w d2-d3,-(sp)
000208D6 7000                       		moveq	#0,d0
000208D8 1028 0017                  		move.b	$17(a0),d0
000208DC 4880                       		ext.w	d0
000208DE 9440                       		sub.w	d0,d2
000208E0 1028 0016                  		move.b	$16(a0),d0
000208E4 4880                       		ext.w	d0
000208E6 D640                       		add.w	d0,d3
000208E8 49F8 F768                  		lea	($FFFFF768).w,a4
000208EC 367C 0010                  		movea.w	#$10,a3
000208F0 3C3C 0000                  		move.w	#0,d6
000208F4 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000208F6 6100 FC86                  		bsr.w	FindWall				; MJ: check solidity
000208FA 4C9F 000C                  		movem.w (sp)+,d2-d3
000208FE 3F01                       		move.w	d1,-(sp)
00020900 7000                       		moveq	#0,d0
00020902 1028 0017                  		move.b	$17(a0),d0
00020906 4880                       		ext.w	d0
00020908 D440                       		add.w	d0,d2
0002090A 1028 0016                  		move.b	$16(a0),d0
0002090E 4880                       		ext.w	d0
00020910 D640                       		add.w	d0,d3
00020912 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020916 367C 0010                  		movea.w	#$10,a3
0002091A 3C3C 0000                  		move.w	#0,d6
0002091E 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020920 6100 FC5C                  		bsr.w	FindWall				; MJ: check solidity
00020924 301F                       		move.w	(sp)+,d0
00020926 143C 00C0                  		move.b	#-$40,d2
0002092A 6000 FF1E                  		bra.w	loc_14DD0
0002092E                            
0002092E                            ; End of function sub_14E50
0002092E                            
0002092E                            
0002092E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002092E                            
0002092E                            
0002092E                            sub_14EB4:				; XREF: Sonic_Floor
0002092E 3428 000C                  		move.w	$C(a0),d2
00020932 3628 0008                  		move.w	8(a0),d3
00020936                            
00020936                            loc_14EBC:
00020936 0643 000A                  		addi.w	#$A,d3
0002093A 49F8 F768                  		lea	($FFFFF768).w,a4
0002093E 367C 0010                  		movea.w	#$10,a3
00020942 3C3C 0000                  		move.w	#0,d6
00020946 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020948 6100 FC34                  		bsr.w	FindWall				; MJ: check solidity
0002094C 143C 00C0                  		move.b	#-$40,d2
00020950 6000 FF32                  		bra.w	loc_14E0A
00020954                            
00020954                            ; End of function sub_14EB4
00020954                            
00020954                            ; ---------------------------------------------------------------------------
00020954                            ; Subroutine to	detect when an object hits a wall to its right
00020954                            ; ---------------------------------------------------------------------------
00020954                            
00020954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020954                            
00020954                            
00020954                            ObjHitWallRight:
00020954 D668 0008                  		add.w	8(a0),d3
00020958 3428 000C                  		move.w	$C(a0),d2
0002095C 49F8 F768                  		lea	($FFFFF768).w,a4
00020960 18BC 0000                  		move.b	#0,(a4)
00020964 367C 0010                  		movea.w	#$10,a3
00020968 3C3C 0000                  		move.w	#0,d6
0002096C 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0002096E 6100 FC0E                  		bsr.w	FindWall				; MJ: check solidity
00020972 1638 F768                  		move.b	($FFFFF768).w,d3
00020976 0803 0000                  		btst	#0,d3
0002097A 6700                       		beq.s	locret_14F06
0002097C 163C 00C0                  		move.b	#-$40,d3
00020980                            
00020980                            locret_14F06:
00020980 4E75                       		rts	
00020982                            
00020982                            ; End of function ObjHitWallRight
00020982                            
00020982                            
00020982                            ; ---------------------------------------------------------------------------
00020982                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00020982                            ; touches them
00020982                            ; ---------------------------------------------------------------------------
00020982                            
00020982                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020982                            
00020982                            
00020982                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00020982 3428 000C                  		move.w	$C(a0),d2
00020986 3628 0008                  		move.w	8(a0),d3
0002098A 48A7 3000                  		movem.w d2-d3,-(sp)
0002098E 7000                       		moveq	#0,d0
00020990 1028 0016                  		move.b	$16(a0),d0
00020994 4880                       		ext.w	d0
00020996 9440                       		sub.w	d0,d2
00020998 0A42 000F                  		eori.w	#$F,d2
0002099C 1028 0017                  		move.b	$17(a0),d0
000209A0 4880                       		ext.w	d0
000209A2 D640                       		add.w	d0,d3
000209A4 49F8 F768                  		lea	($FFFFF768).w,a4
000209A8 367C FFF0                  		movea.w	#-$10,a3
000209AC 3C3C 0800                  		move.w	#$0800,d6
000209B0 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000209B2 6100 FA84                  		bsr.w	FindFloor				; MJ: check solidity
000209B6 4C9F 000C                  		movem.w (sp)+,d2-d3		
000209BA 3F01                       		move.w	d1,-(sp)
000209BC 7000                       		moveq	#0,d0
000209BE 1028 0016                  		move.b	$16(a0),d0
000209C2 4880                       		ext.w	d0
000209C4 9440                       		sub.w	d0,d2
000209C6 0A42 000F                  		eori.w	#$F,d2
000209CA 1028 0017                  		move.b	$17(a0),d0
000209CE 4880                       		ext.w	d0
000209D0 9640                       		sub.w	d0,d3
000209D2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000209D6 367C FFF0                  		movea.w	#-$10,a3
000209DA 3C3C 0800                  		move.w	#$0800,d6
000209DE 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000209E0 6100 FA56                  		bsr.w	FindFloor				; MJ: check solidity
000209E4 301F                       		move.w	(sp)+,d0
000209E6 143C 0080                  		move.b	#-$80,d2
000209EA 6000 FE5E                  		bra.w	loc_14DD0
000209EE                            ; End of function Sonic_DontRunOnWalls
000209EE                            
000209EE                            ; ===========================================================================
000209EE 3428 000C                  		move.w	$C(a0),d2
000209F2 3628 0008                  		move.w	8(a0),d3
000209F6                            
000209F6                            loc_14F7C:
000209F6 0442 000A                  		subi.w	#$A,d2
000209FA 0A42 000F                  		eori.w	#$F,d2
000209FE 49F8 F768                  		lea	($FFFFF768).w,a4
00020A02 367C FFF0                  		movea.w	#-$10,a3
00020A06 3C3C 0800                  		move.w	#$0800,d6
00020A0A 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020A0C 6100 FA2A                  		bsr.w	FindFloor				; MJ: check solidity
00020A10 143C 0080                  		move.b	#-$80,d2
00020A14 6000 FE6E                  		bra.w	loc_14E0A
00020A18                            
00020A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A18                            
00020A18                            
00020A18                            ObjHitCeiling:
00020A18 3428 000C                  		move.w	$C(a0),d2
00020A1C 3628 0008                  		move.w	8(a0),d3
00020A20 7000                       		moveq	#0,d0
00020A22 1028 0016                  		move.b	$16(a0),d0
00020A26 4880                       		ext.w	d0
00020A28 9440                       		sub.w	d0,d2
00020A2A 0A42 000F                  		eori.w	#$F,d2
00020A2E 49F8 F768                  		lea	($FFFFF768).w,a4
00020A32 367C FFF0                  		movea.w	#-$10,a3
00020A36 3C3C 0800                  		move.w	#$0800,d6
00020A3A 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020A3C 6100 F9FA                  		bsr.w	FindFloor				; MJ: check solidity
00020A40 1638 F768                  		move.b	($FFFFF768).w,d3
00020A44 0803 0000                  		btst	#0,d3
00020A48 6700                       		beq.s	locret_14FD4
00020A4A 163C 0080                  		move.b	#-$80,d3
00020A4E                            
00020A4E                            locret_14FD4:
00020A4E 4E75                       		rts	
00020A50                            ; End of function ObjHitCeiling
00020A50                            
00020A50                            ; ===========================================================================
00020A50                            
00020A50                            loc_14FD6:				; XREF: sub_14D48
00020A50 3428 000C                  		move.w	$C(a0),d2
00020A54 3628 0008                  		move.w	8(a0),d3
00020A58 48A7 3000                  		movem.w d2-d3,-(sp)
00020A5C 7000                       		moveq	#0,d0
00020A5E 1028 0017                  		move.b	$17(a0),d0
00020A62 4880                       		ext.w	d0
00020A64 9440                       		sub.w	d0,d2
00020A66 1028 0016                  		move.b	$16(a0),d0
00020A6A 4880                       		ext.w	d0
00020A6C 9640                       		sub.w	d0,d3
00020A6E 0A43 000F                  		eori.w	#$F,d3
00020A72 49F8 F768                  		lea	($FFFFF768).w,a4
00020A76 367C FFF0                  		movea.w	#-$10,a3
00020A7A 3C3C 0400                  		move.w	#$400,d6
00020A7E 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020A80 6100 FAFC                  		bsr.w	FindWall				; MJ: check solidity
00020A84 4C9F 000C                  		movem.w (sp)+,d2-d3	
00020A88 3F01                       		move.w	d1,-(sp)
00020A8A 7000                       		moveq	#0,d0
00020A8C 1028 0017                  		move.b	$17(a0),d0
00020A90 4880                       		ext.w	d0
00020A92 D440                       		add.w	d0,d2
00020A94 1028 0016                  		move.b	$16(a0),d0
00020A98 4880                       		ext.w	d0
00020A9A 9640                       		sub.w	d0,d3
00020A9C 0A43 000F                  		eori.w	#$F,d3
00020AA0 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020AA4 367C FFF0                  		movea.w	#-$10,a3
00020AA8 3C3C 0400                  		move.w	#$400,d6
00020AAC 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020AAE 6100 FACE                  		bsr.w	FindWall				; MJ: check solidity
00020AB2 301F                       		move.w	(sp)+,d0
00020AB4 143C 0040                  		move.b	#$40,d2
00020AB8 6000 FD90                  		bra.w	loc_14DD0
00020ABC                            
00020ABC                            ; ---------------------------------------------------------------------------
00020ABC                            ; Subroutine to	stop Sonic when	he jumps at a wall
00020ABC                            ; ---------------------------------------------------------------------------
00020ABC                            
00020ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020ABC                            
00020ABC                            
00020ABC                            Sonic_HitWall:				; XREF: Sonic_Floor
00020ABC 3428 000C                  		move.w	$C(a0),d2
00020AC0 3628 0008                  		move.w	8(a0),d3
00020AC4                            
00020AC4                            loc_1504A:
00020AC4 0443 000A                  		subi.w	#$A,d3
00020AC8 0A43 000F                  		eori.w	#$F,d3
00020ACC 49F8 F768                  		lea	($FFFFF768).w,a4
00020AD0 367C FFF0                  		movea.w	#-$10,a3
00020AD4 3C3C 0400                  		move.w	#$400,d6
00020AD8 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020ADA 6100 FAA2                  		bsr.w	FindWall				; MJ: check solidity
00020ADE 143C 0040                  		move.b	#$40,d2
00020AE2 6000 FDA0                  		bra.w	loc_14E0A
00020AE6                            ; End of function Sonic_HitWall
00020AE6                            
00020AE6                            ; ---------------------------------------------------------------------------
00020AE6                            ; Subroutine to	detect when an object hits a wall to its left
00020AE6                            ; ---------------------------------------------------------------------------
00020AE6                            
00020AE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020AE6                            
00020AE6                            
00020AE6                            ObjHitWallLeft:
00020AE6 D668 0008                  		add.w	8(a0),d3
00020AEA 3428 000C                  		move.w	$C(a0),d2
00020AEE 49F8 F768                  		lea	($FFFFF768).w,a4
00020AF2 18BC 0000                  		move.b	#0,(a4)
00020AF6 367C FFF0                  		movea.w	#-$10,a3
00020AFA 3C3C 0400                  		move.w	#$400,d6
00020AFE 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020B00 6100 FA7C                  		bsr.w	FindWall				; MJ: check solidity
00020B04 1638 F768                  		move.b	($FFFFF768).w,d3
00020B08 0803 0000                  		btst	#0,d3
00020B0C 6700                       		beq.s	locret_15098
00020B0E 163C 0040                  		move.b	#$40,d3
00020B12                            
00020B12                            locret_15098:
00020B12 4E75                       		rts	
00020B14                            ; End of function ObjHitWallLeft
00020B14                            
00020B14                            ; ===========================================================================
00020B14                            ; ---------------------------------------------------------------------------
00020B14                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00020B14                            ; ---------------------------------------------------------------------------
00020B14                            
00020B14                            Obj66:					; XREF: Obj_Index
00020B14 7000                       		moveq	#0,d0
00020B16 1028 0024                  		move.b	routine(a0),d0
00020B1A 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00020B1E 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00020B22                            ; ===========================================================================
00020B22 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00020B24 0000                       		dc.w Obj66_Action-Obj66_Index
00020B26 0000                       		dc.w Obj66_Display-Obj66_Index
00020B28 0000                       		dc.w Obj66_Release-Obj66_Index
00020B2A                            ; ===========================================================================
00020B2A                            
00020B2A                            Obj66_Main:				; XREF: Obj66_Index
00020B2A 5428 0024                  		addq.b	#2,routine(a0)
00020B2E 323C 0001                  		move.w	#1,d1
00020B32 2248                       		movea.l	a0,a1
00020B34 6000                       		bra.s	Obj66_MakeItem
00020B36                            ; ===========================================================================
00020B36                            
00020B36                            Obj66_Loop:
00020B36 4EB9 0001 6714             		jsr	SingleObjLoad
00020B3C 6600                       		bne.s	loc_150FE
00020B3E 12BC 0066                  		move.b	#$66,0(a1)
00020B42 5829 0024                  		addq.b	#4,routine(a1)
00020B46 3368 0008 0008             		move.w	8(a0),8(a1)
00020B4C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00020B52 337C 0180 0018             		move.w	#$180,priority(a1)
00020B58 137C 0010 001A             		move.b	#$10,mapping_frame(a1)
00020B5E                            
00020B5E                            Obj66_MakeItem:				; XREF: Obj66_Main
00020B5E 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00020B66 337C 4348 0002             		move.w	#$4348,2(a1)
00020B6C 0029 0004 0001             		ori.b	#4,1(a1)
00020B72 137C 0038 0023             		move.b	#$38,width_pixels(a1)
00020B78                            
00020B78                            loc_150FE:
00020B78 51C9 FFBC                  		dbf	d1,Obj66_Loop
00020B7C                            
00020B7C 117C 0030 0023             		move.b	#$30,width_pixels(a0)
00020B82 317C 0200 0018             		move.w	#$200,priority(a0)
00020B88 317C 003C 0030             		move.w	#$3C,$30(a0)
00020B8E 117C 0001 0034             		move.b	#1,$34(a0)
00020B94 1168 0028 0038             		move.b	subtype(a0),$38(a0)
00020B9A                            
00020B9A                            Obj66_Action:				; XREF: Obj66_Index
00020B9A 4EB9 0000 0000             		jsr	Obj66_ChkSwitch
00020BA0 4A28 0001                  		tst.b	1(a0)
00020BA4 6A00 0000                  		bpl.w	Obj66_Display
00020BA8 323C 0030                  		move.w	#$30,d1
00020BAC 3401                       		move.w	d1,d2
00020BAE 3602                       		move.w	d2,d3
00020BB0 5243                       		addq.w	#1,d3
00020BB2 3828 0008                  		move.w	8(a0),d4
00020BB6 4EBA 8366                  		jsr	SolidObject
00020BBA 0828 0005 0022             		btst	#5,status(a0)
00020BC0 6700 0000                  		beq.w	Obj66_Display
00020BC4 43F8 D000                  		lea	($FFFFD000).w,a1
00020BC8 720E                       		moveq	#$E,d1
00020BCA 3029 0008                  		move.w	8(a1),d0
00020BCE B068 0008                  		cmp.w	8(a0),d0
00020BD2 6500                       		bcs.s	Obj66_GrabSonic
00020BD4 7207                       		moveq	#7,d1
00020BD6                            
00020BD6                            Obj66_GrabSonic:
00020BD6 B228 001A                  		cmp.b	mapping_frame(a0),d1
00020BDA 6600                       		bne.s	Obj66_Display
00020BDC 1141 0032                  		move.b	d1,$32(a0)
00020BE0 5828 0024                  		addq.b	#4,routine(a0)
00020BE4 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00020BEA 137C 0002 001C             		move.b	#2,anim(a1)	; make Sonic use "rolling" animation
00020BF0 337C 0800 0020             		move.w	#$800,collision_flags(a1)
00020BF6 337C 0000 0010             		move.w	#0,x_vel(a1)
00020BFC 337C 0000 0012             		move.w	#0,y_vel(a1)
00020C02 08A8 0005 0022             		bclr	#5,status(a0)
00020C08 08A9 0005 0022             		bclr	#5,status(a1)
00020C0E 08E9 0001 0022             		bset	#1,status(a1)
00020C14 3429 0008                  		move.w	8(a1),d2
00020C18 3629 000C                  		move.w	$C(a1),d3
00020C1C 4EB9 0000 0000             		jsr	Obj66_ChgPos
00020C22 D569 0008                  		add.w	d2,8(a1)
00020C26 D769 000C                  		add.w	d3,$C(a1)
00020C2A E0E9 0008                  		asr	8(a1)
00020C2E E0E9 000C                  		asr	$C(a1)
00020C32                            
00020C32                            Obj66_Display:				; XREF: Obj66_Index
00020C32 4EF9 0001 883A             		jmp	MarkObjGone
00020C38                            ; ===========================================================================
00020C38                            
00020C38                            Obj66_Release:				; XREF: Obj66_Index
00020C38 1028 001A                  		move.b	mapping_frame(a0),d0
00020C3C 0C00 0004                  		cmpi.b	#4,d0
00020C40 6700                       		beq.s	loc_151C8
00020C42 0C00 0007                  		cmpi.b	#7,d0
00020C46 6600                       		bne.s	loc_151F8
00020C48                            
00020C48                            loc_151C8:
00020C48 B028 0032                  		cmp.b	$32(a0),d0
00020C4C 6700                       		beq.s	loc_151F8
00020C4E 43F8 D000                  		lea	($FFFFD000).w,a1
00020C52 337C 0000 0010             		move.w	#0,x_vel(a1)
00020C58 337C 0800 0012             		move.w	#$800,y_vel(a1)
00020C5E 0C00 0004                  		cmpi.b	#4,d0
00020C62 6700                       		beq.s	loc_151F0
00020C64 337C 0800 0010             		move.w	#$800,x_vel(a1)
00020C6A 337C 0800 0012             		move.w	#$800,y_vel(a1)
00020C70                            
00020C70                            loc_151F0:
00020C70 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00020C74 5928 0024                  		subq.b	#4,routine(a0)
00020C78                            
00020C78                            loc_151F8:
00020C78 6100                       		bsr.s	Obj66_ChkSwitch
00020C7A 6100                       		bsr.s	Obj66_ChgPos
00020C7C 4EF9 0001 883A             		jmp	MarkObjGone
00020C82                            
00020C82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020C82                            
00020C82                            
00020C82                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00020C82 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00020C86 7000                       		moveq	#0,d0
00020C88 1028 0038                  		move.b	$38(a0),d0
00020C8C 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00020C92 6700                       		beq.s	loc_15224	; if not, branch
00020C94 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00020C98 6600                       		bne.s	Obj66_Animate	; if yes, branch
00020C9A 4428 0034                  		neg.b	$34(a0)
00020C9E 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00020CA4 6000                       		bra.s	Obj66_Animate
00020CA6                            ; ===========================================================================
00020CA6                            
00020CA6                            loc_15224:
00020CA6 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00020CAA                            
00020CAA                            Obj66_Animate:
00020CAA 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00020CAE 6A00                       		bpl.s	locret_15246
00020CB0 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
00020CB6 1228 0034                  		move.b	$34(a0),d1
00020CBA 1028 001A                  		move.b	mapping_frame(a0),d0
00020CBE D001                       		add.b	d1,d0
00020CC0 0200 000F                  		andi.b	#$F,d0
00020CC4 1140 001A                  		move.b	d0,mapping_frame(a0)
00020CC8                            
00020CC8                            locret_15246:
00020CC8 4E75                       		rts	
00020CCA                            ; End of function Obj66_ChkSwitch
00020CCA                            
00020CCA                            
00020CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020CCA                            
00020CCA                            
00020CCA                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00020CCA 43F8 D000                  		lea	($FFFFD000).w,a1
00020CCE 7000                       		moveq	#0,d0
00020CD0 1028 001A                  		move.b	mapping_frame(a0),d0
00020CD4 D040                       		add.w	d0,d0
00020CD6 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00020CDA 101A                       		move.b	(a2)+,d0
00020CDC 4880                       		ext.w	d0
00020CDE D068 0008                  		add.w	8(a0),d0
00020CE2 3340 0008                  		move.w	d0,8(a1)
00020CE6 101A                       		move.b	(a2)+,d0
00020CE8 4880                       		ext.w	d0
00020CEA D068 000C                  		add.w	$C(a0),d0
00020CEE 3340 000C                  		move.w	d0,$C(a1)
00020CF2 4E75                       		rts	
00020CF4                            ; End of function Obj66_ChgPos
00020CF4                            
00020CF4                            ; ===========================================================================
00020CF4 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00020CF8 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00020CFC 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00020D00 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00020D04 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00020D08 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00020D0C 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00020D10 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00020D14                            ; ---------------------------------------------------------------------------
00020D14                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00020D14                            ; ---------------------------------------------------------------------------
00020D14                            Map_obj66:
00020D14                            	include "_maps\obj66.asm"
00020D14                            ; ---------------------------------------------------------------------------
00020D14                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00020D14                            ; ---------------------------------------------------------------------------
00020D14 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00020D18 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00020D1C 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00020D20 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00020D24 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00020D28 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00020D2C 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00020D30 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00020D34 0000                       		dc.w byte_154A4-Map_obj66
00020D36 06                         byte_152B4:	dc.b 6
00020D37 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00020D3C 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00020D41 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00020D46 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00020D4B 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00020D50 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00020D55 06                         byte_152D3:	dc.b 6
00020D56 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00020D5B 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00020D60 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00020D65 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00020D6A 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00020D6F 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00020D74 06                         byte_152F2:	dc.b 6
00020D75 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00020D7A 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00020D7F 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00020D84 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00020D89 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00020D8E 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00020D93 06                         byte_15311:	dc.b 6
00020D94 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00020D99 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00020D9E 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00020DA3 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00020DA8 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00020DAD 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00020DB2 06                         byte_15330:	dc.b 6
00020DB3 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00020DB8 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00020DBD 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00020DC2 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00020DC7 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00020DCC 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00020DD1 06                         byte_1534F:	dc.b 6
00020DD2 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00020DD7 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00020DDC 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00020DE1 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00020DE6 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00020DEB 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00020DF0 06                         byte_1536E:	dc.b 6
00020DF1 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00020DF6 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00020DFB 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00020E00 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00020E05 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00020E0A 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00020E0F 06                         byte_1538D:	dc.b 6
00020E10 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00020E15 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00020E1A F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00020E1F F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00020E24 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00020E29 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00020E2E 06                         byte_153AC:	dc.b 6
00020E2F E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00020E34 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00020E39 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00020E3E E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00020E43 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00020E48 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00020E4D 06                         byte_153CB:	dc.b 6
00020E4E D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00020E53 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00020E58 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00020E5D DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00020E62 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00020E67 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00020E6C 06                         byte_153EA:	dc.b 6
00020E6D D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00020E72 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00020E77 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00020E7C D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00020E81 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00020E86 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00020E8B 06                         byte_15409:	dc.b 6
00020E8C D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00020E91 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00020E96 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00020E9B CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00020EA0 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00020EA5 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00020EAA 06                         byte_15428:	dc.b 6
00020EAB D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00020EB0 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00020EB5 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00020EBA C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00020EBF E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00020EC4 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00020EC9 06                         byte_15447:	dc.b 6
00020ECA D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00020ECF D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00020ED4 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00020ED9 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00020EDE E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00020EE3 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00020EE8 06                         byte_15466:	dc.b 6
00020EE9 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00020EEE D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00020EF3 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00020EF8 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00020EFD E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00020F02 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00020F07 06                         byte_15485:	dc.b 6
00020F08 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00020F0D D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00020F12 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00020F17 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00020F1C F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00020F21 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00020F26 0C                         byte_154A4:	dc.b $C
00020F27 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00020F2C D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00020F31 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00020F36 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00020F3B D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00020F40 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00020F45 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00020F4A 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00020F4F 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00020F54 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00020F59 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00020F5E 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00020F64 00                         		even
00020F64 00                         		even
00020F64                            
00020F64                            ; ===========================================================================
00020F64                            ; ---------------------------------------------------------------------------
00020F64                            ; Object 67 - disc that	you run	around (SBZ)
00020F64                            ; ---------------------------------------------------------------------------
00020F64                            
00020F64                            Obj67:					; XREF: Obj_Index
00020F64 7000                       		moveq	#0,d0
00020F66 1028 0024                  		move.b	routine(a0),d0
00020F6A 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00020F6E 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00020F72                            ; ===========================================================================
00020F72 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00020F74 0000                       		dc.w Obj67_Action-Obj67_Index
00020F76                            ; ===========================================================================
00020F76                            
00020F76                            Obj67_Main:				; XREF: Obj67_Index
00020F76 5428 0024                  		addq.b	#2,routine(a0)
00020F7A 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00020F82 317C C344 0002             		move.w	#$C344,2(a0)
00020F88 117C 0004 0001             		move.b	#4,1(a0)
00020F8E 317C 0200 0018             		move.w	#$200,priority(a0)
00020F94 117C 0008 0023             		move.b	#8,width_pixels(a0)
00020F9A 3168 0008 0032             		move.w	8(a0),$32(a0)
00020FA0 3168 000C 0030             		move.w	$C(a0),$30(a0)
00020FA6 117C 0018 0034             		move.b	#$18,$34(a0)
00020FAC 117C 0048 0038             		move.b	#$48,$38(a0)
00020FB2 1228 0028                  		move.b	subtype(a0),d1	; get object type
00020FB6 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00020FBA 6700                       		beq.s	loc_15546
00020FBC 117C 0010 0034             		move.b	#$10,$34(a0)
00020FC2 117C 0038 0038             		move.b	#$38,$38(a0)
00020FC8                            
00020FC8                            loc_15546:
00020FC8 1228 0028                  		move.b	subtype(a0),d1	; get object type
00020FCC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00020FD0 4881                       		ext.w	d1
00020FD2 E741                       		asl.w	#3,d1
00020FD4 3141 0036                  		move.w	d1,$36(a0)
00020FD8 1028 0022                  		move.b	status(a0),d0
00020FDC E418                       		ror.b	#2,d0
00020FDE 0200 00C0                  		andi.b	#-$40,d0
00020FE2 1140 0026                  		move.b	d0,$26(a0)
00020FE6                            
00020FE6                            Obj67_Action:				; XREF: Obj67_Index
00020FE6 4EB9 0000 0000             		jsr	Obj67_MoveSonic
00020FEC 4EB9 0000 0000             		jsr	Obj67_MoveSpot
00020FF2 6000 0000                  		bra.w	Obj67_ChkDel
00020FF6                            ; ===========================================================================
00020FF6                            
00020FF6                            Obj67_MoveSonic:			; XREF: Obj67_Action
00020FF6 7400                       		moveq	#0,d2
00020FF8 1428 0038                  		move.b	$38(a0),d2
00020FFC 3602                       		move.w	d2,d3
00020FFE D643                       		add.w	d3,d3
00021000 43F8 D000                  		lea	($FFFFD000).w,a1
00021004 3029 0008                  		move.w	8(a1),d0
00021008 9068 0032                  		sub.w	$32(a0),d0
0002100C D042                       		add.w	d2,d0
0002100E B043                       		cmp.w	d3,d0
00021010 6400                       		bcc.s	loc_155A8
00021012 3229 000C                  		move.w	$C(a1),d1
00021016 9268 0030                  		sub.w	$30(a0),d1
0002101A D242                       		add.w	d2,d1
0002101C B243                       		cmp.w	d3,d1
0002101E 6400                       		bcc.s	loc_155A8
00021020 0829 0001 0022             		btst	#1,status(a1)
00021026 6700                       		beq.s	loc_155B8
00021028 4228 003A                  		clr.b	$3A(a0)
0002102C 4E75                       		rts	
0002102E                            ; ===========================================================================
0002102E                            
0002102E                            loc_155A8:
0002102E 4A28 003A                  		tst.b	$3A(a0)
00021032 6700                       		beq.s	locret_155B6
00021034 4229 0038                  		clr.b	$38(a1)
00021038 4228 003A                  		clr.b	$3A(a0)
0002103C                            
0002103C                            locret_155B6:
0002103C 4E75                       		rts	
0002103E                            ; ===========================================================================
0002103E                            
0002103E                            loc_155B8:
0002103E 4A28 003A                  		tst.b	$3A(a0)
00021042 6600                       		bne.s	loc_155E2
00021044 117C 0001 003A             		move.b	#1,$3A(a0)
0002104A 0829 0002 0022             		btst	#2,status(a1)
00021050 6600                       		bne.s	loc_155D0
00021052 4229 001C                  		clr.b	anim(a1)
00021056                            
00021056                            loc_155D0:
00021056 08A9 0005 0022             		bclr	#5,status(a1)
0002105C 137C 0001 001D             		move.b	#1,next_anim(a1)
00021062 137C 0001 0038             		move.b	#1,$38(a1)
00021068                            
00021068                            loc_155E2:
00021068 3029 0020                  		move.w	inertia(a1),d0
0002106C 4A68 0036                  		tst.w	$36(a0)
00021070 6A00                       		bpl.s	loc_15608
00021072 0C40 FC00                  		cmpi.w	#-$400,d0
00021076 6F00                       		ble.s	loc_155FA
00021078 337C FC00 0020             		move.w	#-$400,inertia(a1)
0002107E 4E75                       		rts	
00021080                            ; ===========================================================================
00021080                            
00021080                            loc_155FA:
00021080 0C40 F100                  		cmpi.w	#-$F00,d0
00021084 6C00                       		bge.s	locret_15606
00021086 337C F100 0020             		move.w	#-$F00,inertia(a1)
0002108C                            
0002108C                            locret_15606:
0002108C 4E75                       		rts	
0002108E                            ; ===========================================================================
0002108E                            
0002108E                            loc_15608:
0002108E 0C40 0400                  		cmpi.w	#$400,d0
00021092 6C00                       		bge.s	loc_15616
00021094 337C 0400 0020             		move.w	#$400,inertia(a1)
0002109A 4E75                       		rts	
0002109C                            ; ===========================================================================
0002109C                            
0002109C                            loc_15616:
0002109C 0C40 0F00                  		cmpi.w	#$F00,d0
000210A0 6F00                       		ble.s	locret_15622
000210A2 337C 0F00 0020             		move.w	#$F00,inertia(a1)
000210A8                            
000210A8                            locret_15622:
000210A8 4E75                       		rts	
000210AA                            ; ===========================================================================
000210AA                            
000210AA                            Obj67_MoveSpot:				; XREF: Obj67_Action
000210AA 3028 0036                  		move.w	$36(a0),d0
000210AE D168 0026                  		add.w	d0,$26(a0)
000210B2 1028 0026                  		move.b	$26(a0),d0
000210B6 4EB9 0000 8DA4             		jsr	(CalcSine).l
000210BC 3428 0030                  		move.w	$30(a0),d2
000210C0 3628 0032                  		move.w	$32(a0),d3
000210C4 7800                       		moveq	#0,d4
000210C6 1828 0034                  		move.b	$34(a0),d4
000210CA E14C                       		lsl.w	#8,d4
000210CC 2A04                       		move.l	d4,d5
000210CE C9C0                       		muls.w	d0,d4
000210D0 4844                       		swap	d4
000210D2 CBC1                       		muls.w	d1,d5
000210D4 4845                       		swap	d5
000210D6 D842                       		add.w	d2,d4
000210D8 DA43                       		add.w	d3,d5
000210DA 3144 000C                  		move.w	d4,$C(a0)
000210DE 3145 0008                  		move.w	d5,8(a0)
000210E2 4E75                       		rts	
000210E4                            ; ===========================================================================
000210E4                            
000210E4                            Obj67_ChkDel:				; XREF: Obj67_Action
000210E4 3028 0032                  		move.w	$32(a0),d0
000210E8 0240 FF80                  		andi.w	#-$80,d0
000210EC 3238 F700                  		move.w	($FFFFF700).w,d1
000210F0 0441 0080                  		subi.w	#$80,d1
000210F4 0241 FF80                  		andi.w	#-$80,d1
000210F8 9041                       		sub.w	d1,d0
000210FA 0C40 0280                  		cmpi.w	#$280,d0
000210FE 6200                       		bhi.s	Obj67_Delete
00021100 4EF9 0001 5C48             		jmp	DisplaySprite
00021106                            ; ===========================================================================
00021106                            
00021106                            Obj67_Delete:
00021106 4EF9 0001 5BFC             		jmp	DeleteObject
0002110C                            ; ===========================================================================
0002110C                            ; ---------------------------------------------------------------------------
0002110C                            ; Sprite mappings - disc that you run around (SBZ)
0002110C                            ; (It's just a small blob that moves around in a circle. The disc itself is
0002110C                            ; part of the level tiles.)
0002110C                            ; ---------------------------------------------------------------------------
0002110C                            Map_obj67:
0002110C                            	include "_maps\obj67.asm"
0002110C                            ; ---------------------------------------------------------------------------
0002110C                            ; Sprite mappings - disc that you run around (SBZ)
0002110C                            ; (It's just a small blob that moves around in a circle. The disc itself is
0002110C                            ; part of the level tiles.)
0002110C                            ; ---------------------------------------------------------------------------
0002110C 0000                       		dc.w byte_15688-Map_obj67
0002110E 01                         byte_15688:	dc.b 1
0002110F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00021114                            		even
00021114                            		even
00021114                            
00021114                            ; ===========================================================================
00021114                            ; ---------------------------------------------------------------------------
00021114                            ; Object 68 - conveyor belts (SBZ)
00021114                            ; ---------------------------------------------------------------------------
00021114                            
00021114                            Obj68:					; XREF: Obj_Index
00021114 7000                       		moveq	#0,d0
00021116 1028 0024                  		move.b	routine(a0),d0
0002111A 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
0002111E 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00021122                            ; ===========================================================================
00021122 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00021124 0000                       		dc.w Obj68_Action-Obj68_Index
00021126                            ; ===========================================================================
00021126                            
00021126                            Obj68_Main:				; XREF: Obj68_Index
00021126 5428 0024                  		addq.b	#2,routine(a0)
0002112A 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00021130 1228 0028                  		move.b	subtype(a0),d1	; get object type
00021134 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00021138 6700                       		beq.s	loc_156BA	; if zero, branch
0002113A 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00021140                            
00021140                            loc_156BA:
00021140 1228 0028                  		move.b	subtype(a0),d1	; get object type
00021144 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00021148 4881                       		ext.w	d1
0002114A E841                       		asr.w	#4,d1
0002114C 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00021150                            
00021150                            Obj68_Action:				; XREF: Obj68_Index
00021150 6100                       		bsr.s	Obj68_MoveSonic
00021152 4EF9 0001 8B7A             		jmp		MarkObjGone3
00021158                            ; ===========================================================================
00021158                            
00021158                            Obj68_MoveSonic:			; XREF: Obj68_Action
00021158 7400                       		moveq	#0,d2
0002115A 1428 0038                  		move.b	$38(a0),d2
0002115E 3602                       		move.w	d2,d3
00021160 D643                       		add.w	d3,d3
00021162 43F8 D000                  		lea	($FFFFD000).w,a1
00021166 3029 0008                  		move.w	8(a1),d0
0002116A 9068 0008                  		sub.w	8(a0),d0
0002116E D042                       		add.w	d2,d0
00021170 B043                       		cmp.w	d3,d0
00021172 6400                       		bcc.s	locret_1572E
00021174 3229 000C                  		move.w	$C(a1),d1
00021178 9268 000C                  		sub.w	$C(a0),d1
0002117C 0641 0030                  		addi.w	#$30,d1
00021180 0C41 0030                  		cmpi.w	#$30,d1
00021184 6400                       		bcc.s	locret_1572E
00021186 0829 0001 0022             		btst	#1,status(a1)
0002118C 6600                       		bne.s	locret_1572E
0002118E 3028 0036                  		move.w	$36(a0),d0
00021192 D169 0008                  		add.w	d0,8(a1)
00021196                            
00021196                            locret_1572E:
00021196 4E75                       		rts	
00021198                            
00021198                            ; ===========================================================================
00021198                            ; ---------------------------------------------------------------------------
00021198                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00021198                            ; ---------------------------------------------------------------------------
00021198                            
00021198                            Obj69:					; XREF: Obj_Index
00021198 7000                       		moveq	#0,d0
0002119A 1028 0024                  		move.b	routine(a0),d0
0002119E 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000211A2 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000211A6                            ; ===========================================================================
000211A6 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000211A8 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000211AA 0000                       		dc.w Obj69_Spinner-Obj69_Index
000211AC                            ; ===========================================================================
000211AC                            
000211AC                            Obj69_Main:				; XREF: Obj69_Index
000211AC 5428 0024                  		addq.b	#2,routine(a0)
000211B0 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000211B8 317C 4492 0002             		move.w	#$4492,2(a0)
000211BE 0028 0004 0001             		ori.b	#4,1(a0)
000211C4 117C 0080 0023             		move.b	#$80,width_pixels(a0)
000211CA 7000                       		moveq	#0,d0
000211CC 1028 0028                  		move.b	subtype(a0),d0
000211D0 0240 000F                  		andi.w	#$F,d0
000211D4 C0FC 003C                  		mulu.w	#$3C,d0
000211D8 3140 0032                  		move.w	d0,$32(a0)
000211DC 4A28 0028                  		tst.b	subtype(a0)
000211E0 6A00                       		bpl.s	Obj69_Trapdoor
000211E2 5428 0024                  		addq.b	#2,routine(a0)
000211E6 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000211EE 317C 04DF 0002             		move.w	#$4DF,2(a0)
000211F4 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000211FA 117C 0002 001C             		move.b	#2,anim(a0)
00021200 7000                       		moveq	#0,d0
00021202 1028 0028                  		move.b	subtype(a0),d0	; get object type
00021206 3200                       		move.w	d0,d1
00021208 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0002120C C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00021210 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00021214 3140 0032                  		move.w	d0,$32(a0)
00021218 0241 0070                  		andi.w	#$70,d1
0002121C 0641 0010                  		addi.w	#$10,d1
00021220 E549                       		lsl.w	#2,d1
00021222 5341                       		subq.w	#1,d1
00021224 3141 0036                  		move.w	d1,$36(a0)
00021228 6000                       		bra.s	Obj69_Spinner
0002122A                            ; ===========================================================================
0002122A                            
0002122A                            Obj69_Trapdoor:				; XREF: Obj69_Index
0002122A 5368 0030                  		subq.w	#1,$30(a0)
0002122E 6A00                       		bpl.s	Obj69_Animate
00021230 3168 0032 0030             		move.w	$32(a0),$30(a0)
00021236 0868 0000 001C             		bchg	#0,anim(a0)
0002123C 4A28 0001                  		tst.b	1(a0)
00021240 6A00                       		bpl.s	Obj69_Animate
00021242 303C 00BB                  		move.w	#$BB,d0
00021246 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play door sound
0002124C                            
0002124C                            Obj69_Animate:
0002124C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00021252 4EB9 0001 2624             		jsr	AnimateSprite
00021258 4A28 001A                  		tst.b	mapping_frame(a0)		; is frame number 0 displayed?
0002125C 6600                       		bne.s	Obj69_NotSolid	; if not, branch
0002125E 323C 004B                  		move.w	#$4B,d1
00021262 343C 000C                  		move.w	#$C,d2
00021266 3602                       		move.w	d2,d3
00021268 5243                       		addq.w	#1,d3
0002126A 3828 0008                  		move.w	8(a0),d4
0002126E 4EB9 0001 8F1E             		jsr	SolidObject
00021274 4EF9 0001 883A             		jmp	MarkObjGone
0002127A                            ; ===========================================================================
0002127A                            
0002127A                            Obj69_NotSolid:
0002127A 0828 0003 0022             		btst	#3,status(a0)
00021280 6700                       		beq.s	Obj69_Display
00021282 43F8 D000                  		lea	($FFFFD000).w,a1
00021286 08A9 0003 0022             		bclr	#3,status(a1)
0002128C 08A8 0003 0022             		bclr	#3,status(a0)
00021292 4228 0025                  		clr.b	routine_secondary(a0)
00021296                            
00021296                            Obj69_Display:
00021296 4EF9 0001 883A             		jmp	MarkObjGone
0002129C                            ; ===========================================================================
0002129C                            
0002129C                            Obj69_Spinner:				; XREF: Obj69_Index
0002129C 3038 FE04                  		move.w	($FFFFFE04).w,d0
000212A0 C068 0036                  		and.w	$36(a0),d0
000212A4 6600                       		bne.s	Obj69_Delay
000212A6 117C 0001 0034             		move.b	#1,$34(a0)
000212AC                            
000212AC                            Obj69_Delay:
000212AC 4A28 0034                  		tst.b	$34(a0)
000212B0 6700                       		beq.s	Obj69_Animate2
000212B2 5368 0030                  		subq.w	#1,$30(a0)
000212B6 6A00                       		bpl.s	Obj69_Animate2
000212B8 3168 0032 0030             		move.w	$32(a0),$30(a0)
000212BE 4228 0034                  		clr.b	$34(a0)
000212C2 0868 0000 001C             		bchg	#0,anim(a0)
000212C8                            
000212C8                            Obj69_Animate2:
000212C8 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000212CE 4EB9 0001 2624             		jsr	AnimateSprite
000212D4 4A28 001A                  		tst.b	mapping_frame(a0)		; check	if frame number	0 is displayed
000212D8 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000212DA 323C 001B                  		move.w	#$1B,d1
000212DE 343C 0007                  		move.w	#7,d2
000212E2 3602                       		move.w	d2,d3
000212E4 5243                       		addq.w	#1,d3
000212E6 3828 0008                  		move.w	8(a0),d4
000212EA 4EB9 0001 8F1E             		jsr	SolidObject
000212F0 4EF9 0001 883A             		jmp	MarkObjGone
000212F6                            ; ===========================================================================
000212F6                            
000212F6                            Obj69_NotSolid2:
000212F6 0828 0003 0022             		btst	#3,status(a0)
000212FC 6700                       		beq.s	Obj69_Display2
000212FE 43F8 D000                  		lea	($FFFFD000).w,a1
00021302 08A9 0003 0022             		bclr	#3,status(a1)
00021308 08A8 0003 0022             		bclr	#3,status(a0)
0002130E 4228 0025                  		clr.b	routine_secondary(a0)
00021312                            
00021312                            Obj69_Display2:
00021312 4EF9 0001 883A             		jmp	MarkObjGone
00021318                            ; ===========================================================================
00021318                            Ani_obj69:
00021318                            	include "_anim\obj69.asm"
00021318                            ; ---------------------------------------------------------------------------
00021318                            ; Animation script - trapdoor (SBZ)
00021318                            ; ---------------------------------------------------------------------------
00021318 0000                       		dc.w byte_158AC-Ani_obj69
0002131A 0000                       		dc.w byte_158B2-Ani_obj69
0002131C 0000                       		dc.w byte_158B8-Ani_obj69
0002131E 0000                       		dc.w byte_158CC-Ani_obj69
00021320 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00021326 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
0002132C 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00021339 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00021340 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0002134D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00021354                            		even
00021354                            		even
00021354                            
00021354                            ; ---------------------------------------------------------------------------
00021354                            ; Sprite mappings - trapdoor (SBZ)
00021354                            ; ---------------------------------------------------------------------------
00021354                            Map_obj69:
00021354                            	include "_maps\obj69.asm"
00021354                            ; ---------------------------------------------------------------------------
00021354                            ; Sprite mappings - trapdoor (SBZ)
00021354                            ; ---------------------------------------------------------------------------
00021354 0000                       		dc.w byte_158E6-Map_obj69
00021356 0000                       		dc.w byte_158FB-Map_obj69
00021358 0000                       		dc.w byte_15924-Map_obj69
0002135A 04                         byte_158E6:	dc.b 4
0002135B F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00021360 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00021365 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0002136A F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0002136F 08                         byte_158FB:	dc.b 8
00021370 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00021375 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0002137A 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0002137F 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00021384 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00021389 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0002138E 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00021393 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00021398 04                         byte_15924:	dc.b 4
00021399 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0002139E 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000213A3 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000213A8 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000213AE 00                         		even
000213AE 00                         		even
000213AE                            
000213AE                            ; ---------------------------------------------------------------------------
000213AE                            ; Sprite mappings - spinning platforms (SBZ)
000213AE                            ; ---------------------------------------------------------------------------
000213AE                            Map_obj69a:
000213AE                            	include "_maps\obj69a.asm"
000213AE                            ; ---------------------------------------------------------------------------
000213AE                            ; Sprite mappings - spinning platforms (SBZ)
000213AE                            ; ---------------------------------------------------------------------------
000213AE 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000213B2 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000213B6 0000                       		dc.w byte_15970-Map_obj69a
000213B8 02                         byte_15944:	dc.b 2
000213B9 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000213BE F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000213C3 02                         byte_1594F:	dc.b 2
000213C4 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000213C9 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000213CE 02                         byte_1595A:	dc.b 2
000213CF F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000213D4 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000213D9 02                         byte_15965:	dc.b 2
000213DA F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000213DF 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000213E4 02                         byte_15970:	dc.b 2
000213E5 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000213EA 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000213F0 00                         		even
000213F0 00                         		even
000213F0                            
000213F0                            ; ===========================================================================
000213F0                            ; ---------------------------------------------------------------------------
000213F0                            ; Object 6A - ground saws and pizza cutters (SBZ)
000213F0                            ; ---------------------------------------------------------------------------
000213F0                            
000213F0                            Obj6A:					; XREF: Obj_Index
000213F0 7000                       		moveq	#0,d0
000213F2 1028 0024                  		move.b	routine(a0),d0
000213F6 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000213FA 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000213FE                            ; ===========================================================================
000213FE 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00021400 0000                       		dc.w Obj6A_Action-Obj6A_Index
00021402                            ; ===========================================================================
00021402                            
00021402                            Obj6A_Main:				; XREF: Obj6A_Index
00021402 5428 0024                  		addq.b	#2,routine(a0)
00021406 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
0002140E 317C 43B5 0002             		move.w	#$43B5,2(a0)
00021414 117C 0004 0001             		move.b	#4,1(a0)
0002141A 317C 0200 0018             		move.w	#$200,priority(a0)
00021420 117C 0020 0023             		move.b	#$20,width_pixels(a0)
00021426 3168 0008 003A             		move.w	8(a0),$3A(a0)
0002142C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00021432 0C28 0003 0028             		cmpi.b	#3,subtype(a0)
00021438 6400                       		bcc.s	Obj6A_Action
0002143A 117C 00A2 0020             		move.b	#$A2,collision_flags(a0)
00021440                            
00021440                            Obj6A_Action:				; XREF: Obj6A_Index
00021440 7000                       		moveq	#0,d0
00021442 1028 0028                  		move.b	subtype(a0),d0
00021446 0240 0007                  		andi.w	#7,d0
0002144A D040                       		add.w	d0,d0
0002144C 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00021450 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00021454 3028 003A                  		move.w	$3A(a0),d0
00021458 4EF9 0001 8870             		jmp		MarkObjGone2
0002145E                            ; ===========================================================================
0002145E 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00021462 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00021466 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00021468                            ; ===========================================================================
00021468                            
00021468                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00021468 4E75                       		rts	
0002146A                            ; ===========================================================================
0002146A                            
0002146A                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
0002146A 323C 0060                  		move.w	#$60,d1
0002146E 7000                       		moveq	#0,d0
00021470 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00021474 0828 0000 0022             		btst	#0,status(a0)
0002147A 6700                       		beq.s	Obj6A_Animate01
0002147C 4440                       		neg.w	d0
0002147E D041                       		add.w	d1,d0
00021480                            
00021480                            Obj6A_Animate01:
00021480 3228 003A                  		move.w	$3A(a0),d1
00021484 9240                       		sub.w	d0,d1
00021486 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
0002148A 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0002148E 6A00                       		bpl.s	loc_15A46
00021490 117C 0002 001E             		move.b	#2,anim_frame_duration(a0)	; time between frame changes
00021496 0868 0000 001A             		bchg	#0,mapping_frame(a0)	; change frame
0002149C                            
0002149C                            loc_15A46:
0002149C 4A28 0001                  		tst.b	1(a0)
000214A0 6A00                       		bpl.s	locret_15A60
000214A2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000214A6 0240 000F                  		andi.w	#$F,d0
000214AA 6600                       		bne.s	locret_15A60
000214AC 303C 00B0                  		move.w	#$B0,d0
000214B0 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play saw sound
000214B6                            
000214B6                            locret_15A60:
000214B6 4E75                       		rts	
000214B8                            ; ===========================================================================
000214B8                            
000214B8                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000214B8 323C 0030                  		move.w	#$30,d1
000214BC 7000                       		moveq	#0,d0
000214BE 1038 FE64                  		move.b	($FFFFFE64).w,d0
000214C2 0828 0000 0022             		btst	#0,status(a0)
000214C8 6700                       		beq.s	Obj6A_Animate02
000214CA 4440                       		neg.w	d0
000214CC 0640 0080                  		addi.w	#$80,d0
000214D0                            
000214D0                            Obj6A_Animate02:
000214D0 3228 0038                  		move.w	$38(a0),d1
000214D4 9240                       		sub.w	d0,d1
000214D6 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000214DA 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
000214DE 6A00                       		bpl.s	loc_15A96
000214E0 117C 0002 001E             		move.b	#2,anim_frame_duration(a0)
000214E6 0868 0000 001A             		bchg	#0,mapping_frame(a0)
000214EC                            
000214EC                            loc_15A96:
000214EC 4A28 0001                  		tst.b	1(a0)
000214F0 6A00                       		bpl.s	locret_15AB0
000214F2 1038 FE64                  		move.b	($FFFFFE64).w,d0
000214F6 0C00 0018                  		cmpi.b	#$18,d0
000214FA 6600                       		bne.s	locret_15AB0
000214FC 303C 00B0                  		move.w	#$B0,d0
00021500 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play saw sound
00021506                            
00021506                            locret_15AB0:
00021506 4E75                       		rts	
00021508                            ; ===========================================================================
00021508                            
00021508                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00021508 4A28 003D                  		tst.b	$3D(a0)
0002150C 6600                       		bne.s	Obj6A_Animate03
0002150E 3038 D008                  		move.w	($FFFFD008).w,d0
00021512 0440 00C0                  		subi.w	#$C0,d0
00021516 6500                       		bcs.s	loc_15B02
00021518 9068 0008                  		sub.w	8(a0),d0
0002151C 6500                       		bcs.s	loc_15B02
0002151E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00021522 0440 0080                  		subi.w	#$80,d0
00021526 B068 000C                  		cmp.w	$C(a0),d0
0002152A 6400                       		bcc.s	locret_15B04
0002152C 0640 0100                  		addi.w	#$100,d0
00021530 B068 000C                  		cmp.w	$C(a0),d0
00021534 6500                       		bcs.s	locret_15B04
00021536 117C 0001 003D             		move.b	#1,$3D(a0)
0002153C 317C 0600 0010             		move.w	#$600,x_vel(a0)	; move object to the right
00021542 117C 00A2 0020             		move.b	#$A2,collision_flags(a0)
00021548 117C 0002 001A             		move.b	#2,mapping_frame(a0)
0002154E 303C 00B0                  		move.w	#$B0,d0
00021552 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play saw sound
00021558                            
00021558                            loc_15B02:
00021558 588F                       		addq.l	#4,sp
0002155A                            
0002155A                            locret_15B04:
0002155A 4E75                       		rts	
0002155C                            ; ===========================================================================
0002155C                            
0002155C                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
0002155C 4EB9 0001 5BE2             		jsr	SpeedToPos
00021562 3168 0008 003A             		move.w	8(a0),$3A(a0)
00021568 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0002156C 6A00                       		bpl.s	locret_15B24
0002156E 117C 0002 001E             		move.b	#2,anim_frame_duration(a0)
00021574 0868 0000 001A             		bchg	#0,mapping_frame(a0)
0002157A                            
0002157A                            locret_15B24:
0002157A 4E75                       		rts	
0002157C                            ; ===========================================================================
0002157C                            
0002157C                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0002157C 4A28 003D                  		tst.b	$3D(a0)
00021580 6600                       		bne.s	Obj6A_Animate04
00021582 3038 D008                  		move.w	($FFFFD008).w,d0
00021586 0640 00E0                  		addi.w	#$E0,d0
0002158A 9068 0008                  		sub.w	8(a0),d0
0002158E 6400                       		bcc.s	loc_15B74
00021590 3038 D00C                  		move.w	($FFFFD00C).w,d0
00021594 0440 0080                  		subi.w	#$80,d0
00021598 B068 000C                  		cmp.w	$C(a0),d0
0002159C 6400                       		bcc.s	locret_15B76
0002159E 0640 0100                  		addi.w	#$100,d0
000215A2 B068 000C                  		cmp.w	$C(a0),d0
000215A6 6500                       		bcs.s	locret_15B76
000215A8 117C 0001 003D             		move.b	#1,$3D(a0)
000215AE 317C FA00 0010             		move.w	#-$600,x_vel(a0)	; move object to the left
000215B4 117C 00A2 0020             		move.b	#$A2,collision_flags(a0)
000215BA 117C 0002 001A             		move.b	#2,mapping_frame(a0)
000215C0 303C 00B0                  		move.w	#$B0,d0
000215C4 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play saw sound
000215CA                            
000215CA                            loc_15B74:
000215CA 588F                       		addq.l	#4,sp
000215CC                            
000215CC                            locret_15B76:
000215CC 4E75                       		rts	
000215CE                            ; ===========================================================================
000215CE                            
000215CE                            Obj6A_Animate04:
000215CE 4EB9 0001 5BE2             		jsr	SpeedToPos
000215D4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000215DA 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
000215DE 6A00                       		bpl.s	locret_15B96
000215E0 117C 0002 001E             		move.b	#2,anim_frame_duration(a0)
000215E6 0868 0000 001A             		bchg	#0,mapping_frame(a0)
000215EC                            
000215EC                            locret_15B96:
000215EC 4E75                       		rts	
000215EE                            ; ===========================================================================
000215EE                            ; ---------------------------------------------------------------------------
000215EE                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000215EE                            ; ---------------------------------------------------------------------------
000215EE                            Map_obj6A:
000215EE                            	include "_maps\obj6A.asm"
000215EE                            ; ---------------------------------------------------------------------------
000215EE                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000215EE                            ; ---------------------------------------------------------------------------
000215EE 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000215F2 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000215F6 07                         byte_15BA0:	dc.b 7
000215F7 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000215FC D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00021601 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00021606 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0002160B E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00021610 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00021615 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0002161A 07                         byte_15BC4:	dc.b 7
0002161B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00021620 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00021625 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0002162A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0002162F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00021634 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00021639 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0002163E 04                         byte_15BE8:	dc.b 4
0002163F E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00021644 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00021649 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0002164E 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00021653 04                         byte_15BFD:	dc.b 4
00021654 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00021659 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0002165E 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00021663 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00021668                            		even
00021668                            		even
00021668                            
00021668                            ; ===========================================================================
00021668                            ; ---------------------------------------------------------------------------
00021668                            ; Object 6B - stomper (SBZ)
00021668                            ; ---------------------------------------------------------------------------
00021668                            
00021668                            Obj6B:					; XREF: Obj_Index
00021668 7000                       		moveq	#0,d0
0002166A 1028 0024                  		move.b	routine(a0),d0
0002166E 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00021672 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00021676                            ; ===========================================================================
00021676 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00021678 0000                       		dc.w Obj6B_Action-Obj6B_Index
0002167A                            
0002167A 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0002167E 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00021682 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00021686 1C20 6004                  		dc.b  $1C, $20,	$60,   4
0002168A 8040 0005                  		dc.b  $80, $40,	  0,   5
0002168E                            ; ===========================================================================
0002168E                            
0002168E                            Obj6B_Main:				; XREF: Obj6B_Index
0002168E 5428 0024                  		addq.b	#2,routine(a0)
00021692 7000                       		moveq	#0,d0
00021694 1028 0028                  		move.b	subtype(a0),d0
00021698 E448                       		lsr.w	#2,d0
0002169A 0240 001C                  		andi.w	#$1C,d0
0002169E 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000216A2 115B 0023                  		move.b	(a3)+,width_pixels(a0)
000216A6 115B 0016                  		move.b	(a3)+,$16(a0)
000216AA E448                       		lsr.w	#2,d0
000216AC 1140 001A                  		move.b	d0,mapping_frame(a0)
000216B0 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000216B8 317C 22C0 0002             		move.w	#$22C0,2(a0)
000216BE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000216C4 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000216C6 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000216CC 6700                       		beq.s	Obj6B_SBZ3
000216CE                            
000216CE                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000216CE                            ;		lea	(v_objstate).w,a2
000216CE 7000                       		moveq	#0,d0
000216D0 3028 0014                  		move.w	respawn_index(a0),d0
000216D4                            ;        move.w	respawn_index(a0),d0
000216D4 3440                       	    movea.w	d0,a2
000216D6 6700                       		beq.s	Obj6B_Delete
000216D8 0892 0007                  		bclr	#7,(a2)
000216DC                            
000216DC                            Obj6B_Delete:
000216DC 4EF9 0001 5BFC             		jmp	DeleteObject
000216E2                            ; ===========================================================================
000216E2                            
000216E2                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000216E2 317C 41F0 0002             		move.w	#$41F0,2(a0)
000216E8 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000216EE 6600                       		bne.s	Obj6B_SBZ12
000216F0                            ;		lea	(v_objstate).w,a2
000216F0 7000                       		moveq	#0,d0
000216F2 3028 0014                  		move.w	respawn_index(a0),d0
000216F6                            ;        move.w	respawn_index(a0),d0
000216F6 3440                       	    movea.w	d0,a2
000216F8 6700                       		beq.s	Obj6B_SBZ12
000216FA 0812 0000                  		btst	#0,(a2)
000216FE 6700                       		beq.s	Obj6B_SBZ12
00021700 4238 F7CB                  		clr.b	($FFFFF7CB).w
00021704 60C8                       		bra.s	Obj6B_ChkGone
00021706                            ; ===========================================================================
00021706                            
00021706                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00021706 0028 0004 0001             		ori.b	#4,1(a0)
0002170C 317C 0200 0018             		move.w	#$200,priority(a0)
00021712 3168 0008 0034             		move.w	8(a0),$34(a0)
00021718 3168 000C 0030             		move.w	$C(a0),$30(a0)
0002171E 7000                       		moveq	#0,d0
00021720 101B                       		move.b	(a3)+,d0
00021722 3140 003C                  		move.w	d0,$3C(a0)
00021726 7000                       		moveq	#0,d0
00021728 1028 0028                  		move.b	subtype(a0),d0
0002172C 6A00                       		bpl.s	Obj6B_Action
0002172E 0200 000F                  		andi.b	#$F,d0
00021732 1140 003E                  		move.b	d0,parent(a0)
00021736 1153 0028                  		move.b	(a3),subtype(a0)
0002173A 0C13 0005                  		cmpi.b	#5,(a3)
0002173E 6600                       		bne.s	Obj6B_ChkGone2
00021740 08E8 0004 0001             		bset	#4,1(a0)
00021746                            
00021746                            Obj6B_ChkGone2:
00021746                            ;		lea	(v_objstate).w,a2
00021746 7000                       		moveq	#0,d0
00021748 3028 0014                  		move.w	respawn_index(a0),d0
0002174C                            ;        move.w	respawn_index(a0),d0
0002174C 3440                       	    movea.w	d0,a2
0002174E 6700                       		beq.s	Obj6B_Action
00021750 0892 0007                  		bclr	#7,(a2)
00021754                            
00021754                            Obj6B_Action:				; XREF: Obj6B_Index
00021754 3F28 0008                  		move.w	8(a0),-(sp)
00021758 7000                       		moveq	#0,d0
0002175A 1028 0028                  		move.b	subtype(a0),d0
0002175E 0240 000F                  		andi.w	#$F,d0
00021762 D040                       		add.w	d0,d0
00021764 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00021768 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
0002176C 381F                       		move.w	(sp)+,d4
0002176E 4A28 0001                  		tst.b	1(a0)
00021772 6A00                       		bpl.s	Obj6B_ChkDel
00021774 7200                       		moveq	#0,d1
00021776 1228 0023                  		move.b	width_pixels(a0),d1
0002177A 0641 000B                  		addi.w	#$B,d1
0002177E 7400                       		moveq	#0,d2
00021780 1428 0016                  		move.b	$16(a0),d2
00021784 3602                       		move.w	d2,d3
00021786 5243                       		addq.w	#1,d3
00021788 4EB9 0001 8F1E             		jsr	SolidObject
0002178E                            
0002178E                            Obj6B_ChkDel:
0002178E 3028 0034                  		move.w	$34(a0),d0
00021792 0240 FF80                  		andi.w	#$FF80,d0
00021796 3238 F700                  		move.w	($FFFFF700).w,d1
0002179A 0441 0080                  		subi.w	#$80,d1
0002179E 0241 FF80                  		andi.w	#$FF80,d1
000217A2 9041                       		sub.w	d1,d0
000217A4 0C40 0280                  		cmpi.w	#$280,d0
000217A8 6200                       		bhi.s	loc_15D64
000217AA 4EF9 0001 5C48             		jmp	DisplaySprite
000217B0                            ; ===========================================================================
000217B0                            
000217B0                            loc_15D64:
000217B0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000217B6 6600                       		bne.s	Obj6B_Delete2
000217B8 4238 F7CB                  		clr.b	($FFFFF7CB).w
000217BC                            ;		lea	(v_objstate).w,a2
000217BC 7000                       		moveq	#0,d0
000217BE 3028 0014                  		move.w	respawn_index(a0),d0
000217C2                            ;        move.w	respawn_index(a0),d0
000217C2 3440                       	    movea.w	d0,a2
000217C4 6700                       		beq.s	Obj6B_Delete2
000217C6 0892 0007                  		bclr	#7,(a2)
000217CA                            
000217CA                            Obj6B_Delete2:
000217CA 4EF9 0001 5BFC             		jmp	DeleteObject
000217D0                            ; ===========================================================================
000217D0 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000217D4 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000217D8 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000217DC                            ; ===========================================================================
000217DC                            
000217DC                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000217DC 4E75                       		rts	
000217DE                            ; ===========================================================================
000217DE                            
000217DE                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000217DE 4A28 0038                  		tst.b	$38(a0)
000217E2 6600                       		bne.s	loc_15DB4
000217E4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000217E8 7000                       		moveq	#0,d0
000217EA 1028 003E                  		move.b	parent(a0),d0
000217EE 0832 0000 0000             		btst	#0,(a2,d0.w)
000217F4 6700                       		beq.s	loc_15DC2
000217F6 117C 0001 0038             		move.b	#1,$38(a0)
000217FC                            
000217FC                            loc_15DB4:
000217FC 3028 003C                  		move.w	$3C(a0),d0
00021800 B068 003A                  		cmp.w	$3A(a0),d0
00021804 6700                       		beq.s	loc_15DE0
00021806 5468 003A                  		addq.w	#2,$3A(a0)
0002180A                            
0002180A                            loc_15DC2:
0002180A 3028 003A                  		move.w	$3A(a0),d0
0002180E 0828 0000 0022             		btst	#0,status(a0)
00021814 6700                       		beq.s	loc_15DD4
00021816 4440                       		neg.w	d0
00021818 0640 0080                  		addi.w	#$80,d0
0002181C                            
0002181C                            loc_15DD4:
0002181C 3228 0034                  		move.w	$34(a0),d1
00021820 9240                       		sub.w	d0,d1
00021822 3141 0008                  		move.w	d1,8(a0)
00021826 4E75                       		rts	
00021828                            ; ===========================================================================
00021828                            
00021828                            loc_15DE0:
00021828 5228 0028                  		addq.b	#1,subtype(a0)
0002182C 317C 00B4 0036             		move.w	#$B4,$36(a0)
00021832 4228 0038                  		clr.b	$38(a0)
00021836                            ;		lea	(v_objstate).w,a2
00021836 7000                       		moveq	#0,d0
00021838 3028 0014                  		move.w	respawn_index(a0),d0
0002183C                            ;        move.w	respawn_index(a0),d0
0002183C 3440                       	    movea.w	d0,a2
0002183E 67CA                       		beq.s	loc_15DC2
00021840 08D2 0000                  		bset	#0,(a2)
00021844 60C4                       		bra.s	loc_15DC2
00021846                            ; ===========================================================================
00021846                            
00021846                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00021846 4A28 0038                  		tst.b	$38(a0)
0002184A 6600                       		bne.s	loc_15E14
0002184C 5368 0036                  		subq.w	#1,$36(a0)
00021850 6600                       		bne.s	loc_15E1E
00021852 117C 0001 0038             		move.b	#1,$38(a0)
00021858                            
00021858                            loc_15E14:
00021858 4A68 003A                  		tst.w	$3A(a0)
0002185C 6700                       		beq.s	loc_15E3C
0002185E 5568 003A                  		subq.w	#2,$3A(a0)
00021862                            
00021862                            loc_15E1E:
00021862 3028 003A                  		move.w	$3A(a0),d0
00021866 0828 0000 0022             		btst	#0,status(a0)
0002186C 6700                       		beq.s	loc_15E30
0002186E 4440                       		neg.w	d0
00021870 0640 0080                  		addi.w	#$80,d0
00021874                            
00021874                            loc_15E30:
00021874 3228 0034                  		move.w	$34(a0),d1
00021878 9240                       		sub.w	d0,d1
0002187A 3141 0008                  		move.w	d1,8(a0)
0002187E 4E75                       		rts	
00021880                            ; ===========================================================================
00021880                            
00021880                            loc_15E3C:
00021880 5328 0028                  		subq.b	#1,subtype(a0)
00021884 4228 0038                  		clr.b	$38(a0)
00021888                            ;		lea	(v_objstate).w,a2
00021888 7000                       		moveq	#0,d0
0002188A 3028 0014                  		move.w	respawn_index(a0),d0
0002188E                            ;        move.w	respawn_index(a0),d0
0002188E 3440                       	    movea.w	d0,a2		
00021890 67D0                       		beq.s	loc_15E1E
00021892 0892 0000                  		bclr	#0,(a2)
00021896 60CA                       		bra.s	loc_15E1E
00021898                            ; ===========================================================================
00021898                            
00021898                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00021898 4A28 0038                  		tst.b	$38(a0)
0002189C 6600                       		bne.s	loc_15E7C
0002189E 4A68 003A                  		tst.w	$3A(a0)
000218A2 6700                       		beq.s	loc_15E6A
000218A4 5368 003A                  		subq.w	#1,$3A(a0)
000218A8 6000                       		bra.s	loc_15E8E
000218AA                            ; ===========================================================================
000218AA                            
000218AA                            loc_15E6A:
000218AA 5368 0036                  		subq.w	#1,$36(a0)
000218AE 6A00                       		bpl.s	loc_15E8E
000218B0 317C 003C 0036             		move.w	#$3C,$36(a0)
000218B6 117C 0001 0038             		move.b	#1,$38(a0)
000218BC                            
000218BC                            loc_15E7C:
000218BC 5068 003A                  		addq.w	#8,$3A(a0)
000218C0 3028 003A                  		move.w	$3A(a0),d0
000218C4 B068 003C                  		cmp.w	$3C(a0),d0
000218C8 6600                       		bne.s	loc_15E8E
000218CA 4228 0038                  		clr.b	$38(a0)
000218CE                            
000218CE                            loc_15E8E:
000218CE 3028 003A                  		move.w	$3A(a0),d0
000218D2 0828 0000 0022             		btst	#0,status(a0)
000218D8 6700                       		beq.s	loc_15EA0
000218DA 4440                       		neg.w	d0
000218DC 0640 0038                  		addi.w	#$38,d0
000218E0                            
000218E0                            loc_15EA0:
000218E0 3228 0030                  		move.w	$30(a0),d1
000218E4 D240                       		add.w	d0,d1
000218E6 3141 000C                  		move.w	d1,$C(a0)
000218EA 4E75                       		rts	
000218EC                            ; ===========================================================================
000218EC                            
000218EC                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000218EC 4A28 0038                  		tst.b	$38(a0)
000218F0 6600                       		bne.s	loc_15ED0
000218F2 4A68 003A                  		tst.w	$3A(a0)
000218F6 6700                       		beq.s	loc_15EBE
000218F8 5168 003A                  		subq.w	#8,$3A(a0)
000218FC 6000                       		bra.s	loc_15EF0
000218FE                            ; ===========================================================================
000218FE                            
000218FE                            loc_15EBE:
000218FE 5368 0036                  		subq.w	#1,$36(a0)
00021902 6A00                       		bpl.s	loc_15EF0
00021904 317C 003C 0036             		move.w	#$3C,$36(a0)
0002190A 117C 0001 0038             		move.b	#1,$38(a0)
00021910                            
00021910                            loc_15ED0:
00021910 3028 003A                  		move.w	$3A(a0),d0
00021914 B068 003C                  		cmp.w	$3C(a0),d0
00021918 6700                       		beq.s	loc_15EE0
0002191A 5068 003A                  		addq.w	#8,$3A(a0)
0002191E 6000                       		bra.s	loc_15EF0
00021920                            ; ===========================================================================
00021920                            
00021920                            loc_15EE0:
00021920 5368 0036                  		subq.w	#1,$36(a0)
00021924 6A00                       		bpl.s	loc_15EF0
00021926 317C 003C 0036             		move.w	#$3C,$36(a0)
0002192C 4228 0038                  		clr.b	$38(a0)
00021930                            
00021930                            loc_15EF0:
00021930 3028 003A                  		move.w	$3A(a0),d0
00021934 0828 0000 0022             		btst	#0,status(a0)
0002193A 6700                       		beq.s	loc_15F02
0002193C 4440                       		neg.w	d0
0002193E 0640 0038                  		addi.w	#$38,d0
00021942                            
00021942                            loc_15F02:
00021942 3228 0030                  		move.w	$30(a0),d1
00021946 D240                       		add.w	d0,d1
00021948 3141 000C                  		move.w	d1,$C(a0)
0002194C 4E75                       		rts	
0002194E                            ; ===========================================================================
0002194E                            
0002194E                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
0002194E 4A28 0038                  		tst.b	$38(a0)
00021952 6600                       		bne.s	loc_15F3E
00021954 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00021958 7000                       		moveq	#0,d0
0002195A 1028 003E                  		move.b	parent(a0),d0
0002195E 0832 0000 0000             		btst	#0,(a2,d0.w)
00021964 6700                       		beq.s	locret_15F5C
00021966 117C 0001 0038             		move.b	#1,$38(a0)
0002196C                            ;		lea	(v_objstate).w,a2
0002196C 7000                       		moveq	#0,d0
0002196E 3028 0014                  		move.w	respawn_index(a0),d0
00021972                            ;        move.w	respawn_index(a0),d0
00021972 3440                       	    movea.w	d0,a2		
00021974 6700                       		beq.s	loc_15F3E
00021976 08D2 0000                  		bset	#0,(a2)
0002197A                            
0002197A                            loc_15F3E:
0002197A 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00021982 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0002198A 3168 0008 0034             		move.w	8(a0),$34(a0)
00021990 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00021996 6700                       		beq.s	loc_15F5E
00021998                            
00021998                            locret_15F5C:
00021998 4E75                       		rts	
0002199A                            ; ===========================================================================
0002199A                            
0002199A                            loc_15F5E:
0002199A 4228 0028                  		clr.b	subtype(a0)
0002199E 4228 0038                  		clr.b	$38(a0)
000219A2 4E75                       		rts	
000219A4                            ; ===========================================================================
000219A4                            ; ---------------------------------------------------------------------------
000219A4                            ; Sprite mappings - stomper and	platforms (SBZ)
000219A4                            ; ---------------------------------------------------------------------------
000219A4                            Map_obj6B:
000219A4                            	include "_maps\obj6B.asm"
000219A4                            ; ---------------------------------------------------------------------------
000219A4                            ; Sprite mappings - stomper and	platforms (SBZ)
000219A4                            ; ---------------------------------------------------------------------------
000219A4 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000219A8 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000219AC 0000                       		dc.w byte_15FB0-Map_obj6B
000219AE 04                         byte_15F72:	dc.b 4
000219AF F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000219B4 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000219B9 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000219BE F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000219C3 08                         byte_15F87:	dc.b 8
000219C4 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000219C9 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000219CE E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000219D3 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000219D8 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000219DD 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000219E2 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000219E7 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000219EC 0E                         byte_15FB0:	dc.b $E
000219ED C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000219F2 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000219F7 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000219FC C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00021A01 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00021A06 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00021A0B C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00021A10 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00021A15 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00021A1A E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00021A1F E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00021A24 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00021A29 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00021A2E 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00021A34 00                         		even
00021A34 00                         		even
00021A34                            
00021A34                            ; ===========================================================================
00021A34                            ; ---------------------------------------------------------------------------
00021A34                            ; Object 6C - vanishing	platforms (SBZ)
00021A34                            ; ---------------------------------------------------------------------------
00021A34                            
00021A34                            Obj6C:					; XREF: Obj_Index
00021A34 7000                       		moveq	#0,d0
00021A36 1028 0024                  		move.b	routine(a0),d0
00021A3A 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00021A3E 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00021A42                            ; ===========================================================================
00021A42 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00021A44 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00021A46 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00021A48 0000                       		dc.w loc_16068-Obj6C_Index
00021A4A                            ; ===========================================================================
00021A4A                            
00021A4A                            Obj6C_Main:				; XREF: Obj6C_Index
00021A4A 5C28 0024                  		addq.b	#6,routine(a0)
00021A4E 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00021A56 317C 44C3 0002             		move.w	#$44C3,2(a0)
00021A5C 0028 0004 0001             		ori.b	#4,1(a0)
00021A62 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00021A68 317C 0200 0018             		move.w	#$200,priority(a0)
00021A6E 7000                       		moveq	#0,d0
00021A70 1028 0028                  		move.b	subtype(a0),d0	; get object type
00021A74 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00021A78 5240                       		addq.w	#1,d0		; add 1
00021A7A EF48                       		lsl.w	#7,d0		; multiply by $80
00021A7C 3200                       		move.w	d0,d1
00021A7E 5340                       		subq.w	#1,d0
00021A80 3140 0030                  		move.w	d0,$30(a0)
00021A84 3140 0032                  		move.w	d0,$32(a0)
00021A88 7000                       		moveq	#0,d0
00021A8A 1028 0028                  		move.b	subtype(a0),d0	; get object type
00021A8E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00021A92 0641 0080                  		addi.w	#$80,d1
00021A96 C0C1                       		mulu.w	d1,d0
00021A98 E088                       		lsr.l	#8,d0
00021A9A 3140 0036                  		move.w	d0,$36(a0)
00021A9E 5341                       		subq.w	#1,d1
00021AA0 3141 0038                  		move.w	d1,$38(a0)
00021AA4                            
00021AA4                            loc_16068:				; XREF: Obj6C_Index
00021AA4 3038 FE04                  		move.w	($FFFFFE04).w,d0
00021AA8 9068 0036                  		sub.w	$36(a0),d0
00021AAC C068 0038                  		and.w	$38(a0),d0
00021AB0 6600                       		bne.s	Obj6C_Animate
00021AB2 5928 0024                  		subq.b	#4,routine(a0)
00021AB6 6000                       		bra.s	Obj6C_Vanish
00021AB8                            ; ===========================================================================
00021AB8                            
00021AB8                            Obj6C_Animate:
00021AB8 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00021ABE 4EB9 0001 2624             		jsr	AnimateSprite
00021AC4 4EF9 0001 883A             		jmp	MarkObjGone
00021ACA                            ; ===========================================================================
00021ACA                            
00021ACA                            Obj6C_Vanish:				; XREF: Obj6C_Index
00021ACA 5368 0030                  		subq.w	#1,$30(a0)
00021ACE 6A00                       		bpl.s	loc_160AA
00021AD0 317C 007F 0030             		move.w	#127,$30(a0)
00021AD6 4A28 001C                  		tst.b	anim(a0)
00021ADA 6700                       		beq.s	loc_160A4
00021ADC 3168 0032 0030             		move.w	$32(a0),$30(a0)
00021AE2                            
00021AE2                            loc_160A4:
00021AE2 0868 0000 001C             		bchg	#0,anim(a0)
00021AE8                            
00021AE8                            loc_160AA:
00021AE8 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00021AEE 4EB9 0001 2624             		jsr	AnimateSprite
00021AF4 0828 0001 001A             		btst	#1,mapping_frame(a0)	; has platform vanished?
00021AFA 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00021AFC 0C28 0002 0024             		cmpi.b	#2,routine(a0)
00021B02 6600                       		bne.s	loc_160D6
00021B04 7200                       		moveq	#0,d1
00021B06 1228 0023                  		move.b	width_pixels(a0),d1
00021B0A 4EB9 0000 F0A6             		jsr	(PlatformObject).l
00021B10 4EF9 0001 883A             		jmp	MarkObjGone
00021B16                            ; ===========================================================================
00021B16                            
00021B16                            loc_160D6:
00021B16 7200                       		moveq	#0,d1
00021B18 1228 0023                  		move.b	width_pixels(a0),d1
00021B1C 4EB9 0000 F1E6             		jsr	(ExitPlatform).l
00021B22 3428 0008                  		move.w	8(a0),d2
00021B26 4EB9 0000 F44C             		jsr	(MvSonicOnPtfm2).l
00021B2C 4EF9 0001 883A             		jmp	MarkObjGone
00021B32                            ; ===========================================================================
00021B32                            
00021B32                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00021B32 0828 0003 0022             		btst	#3,status(a0)
00021B38 6700                       		beq.s	Obj6C_Display
00021B3A 43F8 D000                  		lea	($FFFFD000).w,a1
00021B3E 08A9 0003 0022             		bclr	#3,status(a1)
00021B44 08A8 0003 0022             		bclr	#3,status(a0)
00021B4A 117C 0002 0024             		move.b	#2,routine(a0)
00021B50 4228 0025                  		clr.b	routine_secondary(a0)
00021B54                            
00021B54                            Obj6C_Display:
00021B54 4EF9 0001 883A             		jmp	MarkObjGone
00021B5A                            ; ===========================================================================
00021B5A                            Ani_obj6C:
00021B5A                            	include "_anim\obj6C.asm"
00021B5A                            ; ---------------------------------------------------------------------------
00021B5A                            ; Animation script - vanishing platforms (SBZ)
00021B5A                            ; ---------------------------------------------------------------------------
00021B5A 0000                       		dc.w byte_1611A-Ani_obj6C
00021B5C 0000                       		dc.w byte_16122-Ani_obj6C
00021B5E 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00021B66 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00021B6E                            		even
00021B6E                            		even
00021B6E                            
00021B6E                            ; ---------------------------------------------------------------------------
00021B6E                            ; Sprite mappings - vanishing platforms	(SBZ)
00021B6E                            ; ---------------------------------------------------------------------------
00021B6E                            Map_obj6C:
00021B6E                            	include "_maps\obj6C.asm"
00021B6E                            ; ---------------------------------------------------------------------------
00021B6E                            ; Sprite mappings - vanishing platforms	(SBZ)
00021B6E                            ; ---------------------------------------------------------------------------
00021B6E 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00021B72 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00021B76 01                         byte_16132:	dc.b 1
00021B77 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00021B7C 01                         byte_16138:	dc.b 1
00021B7D F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00021B82 01                         byte_1613E:	dc.b 1
00021B83 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00021B88 00                         byte_16144:	dc.b 0
00021B8A 00                         		even
00021B8A 00                         		even
00021B8A                            
00021B8A                            ; ===========================================================================
00021B8A                            ; ---------------------------------------------------------------------------
00021B8A                            ; Object 6E - electrocution orbs (SBZ)
00021B8A                            ; ---------------------------------------------------------------------------
00021B8A                            
00021B8A                            Obj6E:					; XREF: Obj_Index
00021B8A 7000                       		moveq	#0,d0
00021B8C 1028 0024                  		move.b	routine(a0),d0
00021B90 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00021B94 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00021B98                            ; ===========================================================================
00021B98 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00021B9A 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00021B9C                            ; ===========================================================================
00021B9C                            
00021B9C                            Obj6E_Main:				; XREF: Obj6E_Index
00021B9C 5428 0024                  		addq.b	#2,routine(a0)
00021BA0 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00021BA8 317C 047E 0002             		move.w	#$47E,2(a0)
00021BAE 0028 0004 0001             		ori.b	#4,1(a0)
00021BB4 117C 0028 0023             		move.b	#$28,width_pixels(a0)
00021BBA 7000                       		moveq	#0,d0
00021BBC 1028 0028                  		move.b	subtype(a0),d0	; read object type
00021BC0 E948                       		lsl.w	#4,d0		; multiply by $10
00021BC2 5340                       		subq.w	#1,d0
00021BC4 3140 0034                  		move.w	d0,$34(a0)
00021BC8                            
00021BC8                            Obj6E_Shock:				; XREF: Obj6E_Index
00021BC8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00021BCC C068 0034                  		and.w	$34(a0),d0
00021BD0 6600                       		bne.s	Obj6E_Animate
00021BD2 117C 0001 001C             		move.b	#1,anim(a0)	; run "shocking" animation
00021BD8 4A28 0001                  		tst.b	1(a0)
00021BDC 6A00                       		bpl.s	Obj6E_Animate
00021BDE 303C 00B1                  		move.w	#$B1,d0
00021BE2 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play electricity sound
00021BE8                            
00021BE8                            Obj6E_Animate:
00021BE8 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00021BEE 4EB9 0001 2624             		jsr	AnimateSprite
00021BF4 117C 0000 0020             		move.b	#0,collision_flags(a0)
00021BFA 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)	; is frame number 4 displayed?
00021C00 6600                       		bne.s	Obj6E_Display	; if not, branch
00021C02 117C 00A4 0020             		move.b	#$A4,collision_flags(a0)	; if yes, make object hurt Sonic
00021C08                            
00021C08                            Obj6E_Display:
00021C08 4EF9 0001 883A             		jmp	MarkObjGone
00021C0E                            ; ===========================================================================
00021C0E                            Ani_obj6E:
00021C0E                            	include "_anim\obj6E.asm"
00021C0E                            ; ---------------------------------------------------------------------------
00021C0E                            ; Animation script - electrocution orbs (SBZ)
00021C0E                            ; ---------------------------------------------------------------------------
00021C0E 0000                       		dc.w byte_161CC-Ani_obj6E
00021C10 0000                       		dc.w byte_161D0-Ani_obj6E
00021C12 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00021C16 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00021C26                            		even
00021C26                            		even
00021C26                            
00021C26                            ; ---------------------------------------------------------------------------
00021C26                            ; Sprite mappings - electrocution orbs (SBZ)
00021C26                            ; ---------------------------------------------------------------------------
00021C26                            Map_obj6E:
00021C26                            	include "_maps\obj6E.asm"
00021C26                            ; ---------------------------------------------------------------------------
00021C26                            ; Sprite mappings - electrocution orbs (SBZ)
00021C26                            ; ---------------------------------------------------------------------------
00021C26 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00021C2A 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00021C2E 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00021C32 02                         byte_161EC:	dc.b 2
00021C33 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00021C38 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00021C3D 03                         byte_161F7:	dc.b 3
00021C3E F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00021C43 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00021C48 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00021C4D 05                         byte_16207:	dc.b 5
00021C4E F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00021C53 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00021C58 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00021C5D F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00021C62 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00021C67 04                         byte_16221:	dc.b 4
00021C68 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00021C6D 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00021C72 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00021C77 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00021C7C 06                         byte_16236:	dc.b 6
00021C7D F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00021C82 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00021C87 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00021C8C F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00021C91 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00021C96 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00021C9B 04                         byte_16255:	dc.b 4
00021C9C F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00021CA1 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00021CA6 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00021CAB F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00021CB0                            		even
00021CB0                            		even
00021CB0                            
00021CB0                            ; ===========================================================================
00021CB0                            ; ---------------------------------------------------------------------------
00021CB0                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00021CB0                            ; ---------------------------------------------------------------------------
00021CB0                            
00021CB0                            Obj6F:					; XREF: Obj_Index
00021CB0 7000                       		moveq	#0,d0
00021CB2 1028 0024                  		move.b	routine(a0),d0
00021CB6 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00021CBA 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00021CBE 3028 0030                  		move.w	$30(a0),d0
00021CC2 0240 FF80                  		andi.w	#$FF80,d0
00021CC6 3238 F700                  		move.w	($FFFFF700).w,d1
00021CCA 0441 0080                  		subi.w	#$80,d1
00021CCE 0241 FF80                  		andi.w	#$FF80,d1
00021CD2 9041                       		sub.w	d1,d0
00021CD4 0C40 0280                  		cmpi.w	#$280,d0
00021CD8 6200                       		bhi.s	loc_1629A
00021CDA                            
00021CDA                            Obj6F_Display:
00021CDA 4EF9 0001 5C48             		jmp	DisplaySprite
00021CE0                            ; ===========================================================================
00021CE0                            
00021CE0                            loc_1629A:
00021CE0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00021CE6 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00021CE8 0C40 FF80                  		cmpi.w	#-$80,d0
00021CEC 64EC                       		bcc.s	Obj6F_Display
00021CEE                            
00021CEE                            Obj6F_Act1or2:
00021CEE 1028 002F                  		move.b	$2F(a0),d0
00021CF2 6A00                       		bpl.s	Obj6F_Delete
00021CF4 0240 007F                  		andi.w	#$7F,d0
00021CF8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00021CFC 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00021D02                            
00021D02                            Obj6F_Delete:
00021D02 7000                       		moveq	#0,d0
00021D04 3028 0014                  		move.w	respawn_index(a0),d0
00021D08 3440                       		movea.w	d0,a2
00021D0A 0892 0007                  		bclr	#7,(a2)
00021D0E 4EF9 0001 5BFC             		jmp	DeleteObject
00021D14                            ; ===========================================================================
00021D14 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00021D16 0000                       		dc.w loc_163D8-Obj6F_Index
00021D18                            ; ===========================================================================
00021D18                            
00021D18                            Obj6F_Main:				; XREF: Obj6F_Index
00021D18 1028 0028                  		move.b	subtype(a0),d0
00021D1C 6B00 0000                  		bmi.w	loc_16380
00021D20 5428 0024                  		addq.b	#2,routine(a0)
00021D24 217C 0002 13AE 0004        		move.l	#Map_obj69a,4(a0)
00021D2C 317C 04DF 0002             		move.w	#$4DF,2(a0)
00021D32 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00021D38 0028 0004 0001             		ori.b	#4,1(a0)
00021D3E 317C 0200 0018             		move.w	#$200,priority(a0)
00021D44 7000                       		moveq	#0,d0
00021D46 1028 0028                  		move.b	subtype(a0),d0
00021D4A 3200                       		move.w	d0,d1
00021D4C E648                       		lsr.w	#3,d0
00021D4E 0240 001E                  		andi.w	#$1E,d0
00021D52 45FA 0000                  		lea	off_164A6(pc),a2
00021D56 D4F2 0000                  		adda.w	(a2,d0.w),a2
00021D5A 315A 0038                  		move.w	(a2)+,$38(a0)
00021D5E 315A 0030                  		move.w	(a2)+,$30(a0)
00021D62 214A 003C                  		move.l	a2,$3C(a0)
00021D66 0241 000F                  		andi.w	#$F,d1
00021D6A E549                       		lsl.w	#2,d1
00021D6C 1141 0038                  		move.b	d1,$38(a0)
00021D70 117C 0004 003A             		move.b	#4,$3A(a0)
00021D76 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00021D7A 6700                       		beq.s	loc_16356
00021D7C 117C 0001 003B             		move.b	#1,$3B(a0)
00021D82 4428 003A                  		neg.b	$3A(a0)
00021D86 7200                       		moveq	#0,d1
00021D88 1228 0038                  		move.b	$38(a0),d1
00021D8C D228 003A                  		add.b	$3A(a0),d1
00021D90 B228 0039                  		cmp.b	$39(a0),d1
00021D94 6500                       		bcs.s	loc_16352
00021D96 1001                       		move.b	d1,d0
00021D98 7200                       		moveq	#0,d1
00021D9A 4A00                       		tst.b	d0
00021D9C 6A00                       		bpl.s	loc_16352
00021D9E 1228 0039                  		move.b	$39(a0),d1
00021DA2 5901                       		subq.b	#4,d1
00021DA4                            
00021DA4                            loc_16352:
00021DA4 1141 0038                  		move.b	d1,$38(a0)
00021DA8                            
00021DA8                            loc_16356:
00021DA8 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00021DAE 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00021DB4 4A41                       		tst.w	d1
00021DB6 6600                       		bne.s	loc_1636C
00021DB8 117C 0001 001C             		move.b	#1,anim(a0)
00021DBE                            
00021DBE                            loc_1636C:
00021DBE 0C41 0008                  		cmpi.w	#8,d1
00021DC2 6600                       		bne.s	loc_16378
00021DC4 117C 0000 001C             		move.b	#0,anim(a0)
00021DCA                            
00021DCA                            loc_16378:
00021DCA 4EBA 9DB0                  		jsr	Obj63_ChangeDir
00021DCE 6000 0000                  		bra.w	loc_163D8
00021DD2                            ; ===========================================================================
00021DD2                            
00021DD2                            loc_16380:				; XREF: Obj6F_Main
00021DD2 1140 002F                  		move.b	d0,$2F(a0)
00021DD6 0240 007F                  		andi.w	#$7F,d0
00021DDA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00021DDE 08F2 0000 0000             		bset	#0,(a2,d0.w)
00021DE4 6700                       		beq.s	loc_1639A
00021DE6 4EF9 0001 5BFC             		jmp	DeleteObject
00021DEC                            ; ===========================================================================
00021DEC                            
00021DEC                            loc_1639A:
00021DEC D040                       		add.w	d0,d0
00021DEE 0240 001E                  		andi.w	#$1E,d0
00021DF2                            ;		addi.w	#$80,d0
00021DF2 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
00021DF8 D4F2 0000                  		adda.w	(a2,d0.w),a2
00021DFC 321A                       		move.w	(a2)+,d1
00021DFE 2248                       		movea.l	a0,a1
00021E00 6000                       		bra.s	Obj6F_LoadPform
00021E02                            ; ===========================================================================
00021E02                            
00021E02                            Obj6F_Loop:
00021E02 4EB9 0001 6714             		jsr	SingleObjLoad
00021E08 6600                       		bne.s	loc_163D0
00021E0A                            
00021E0A                            Obj6F_LoadPform:			; XREF: loc_1639A
00021E0A 12BC 006F                  		move.b	#$6F,0(a1)
00021E0E 335A 0008                  		move.w	(a2)+,8(a1)
00021E12 335A 000C                  		move.w	(a2)+,$C(a1)
00021E16 301A                       		move.w	(a2)+,d0
00021E18 1340 0028                  		move.b	d0,subtype(a1)
00021E1C                            
00021E1C                            loc_163D0:
00021E1C 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00021E20                            
00021E20 588F                       		addq.l	#4,sp
00021E22 4E75                       		rts	
00021E24                            ; ===========================================================================
00021E24                            
00021E24                            loc_163D8:				; XREF: Obj6F_Index
00021E24 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00021E2A 4EB9 0001 2624             		jsr	AnimateSprite
00021E30 4A28 001A                  		tst.b	mapping_frame(a0)
00021E34 6600                       		bne.s	loc_16404
00021E36 3F28 0008                  		move.w	8(a0),-(sp)
00021E3A 4EB9 0000 0000             		jsr	loc_16424
00021E40 323C 001B                  		move.w	#$1B,d1
00021E44 343C 0007                  		move.w	#7,d2
00021E48 3602                       		move.w	d2,d3
00021E4A 5243                       		addq.w	#1,d3
00021E4C 381F                       		move.w	(sp)+,d4
00021E4E 4EF9 0001 8F1E             		jmp	SolidObject
00021E54                            ; ===========================================================================
00021E54                            
00021E54                            loc_16404:
00021E54 0828 0003 0022             		btst	#3,status(a0)
00021E5A 6700                       		beq.s	loc_16420
00021E5C 43F8 D000                  		lea	($FFFFD000).w,a1
00021E60 08A9 0003 0022             		bclr	#3,status(a1)
00021E66 08A8 0003 0022             		bclr	#3,status(a0)
00021E6C 4228 0025                  		clr.b	routine_secondary(a0)
00021E70                            
00021E70                            loc_16420:
00021E70 6000 0002                  		bra.w	*+4
00021E74                            
00021E74                            loc_16424:
00021E74 3028 0008                  		move.w	8(a0),d0
00021E78 B068 0034                  		cmp.w	$34(a0),d0
00021E7C 6600                       		bne.s	loc_16484
00021E7E 3028 000C                  		move.w	$C(a0),d0
00021E82 B068 0036                  		cmp.w	$36(a0),d0
00021E86 6600                       		bne.s	loc_16484
00021E88 7200                       		moveq	#0,d1
00021E8A 1228 0038                  		move.b	$38(a0),d1
00021E8E D228 003A                  		add.b	$3A(a0),d1
00021E92 B228 0039                  		cmp.b	$39(a0),d1
00021E96 6500                       		bcs.s	loc_16456
00021E98 1001                       		move.b	d1,d0
00021E9A 7200                       		moveq	#0,d1
00021E9C 4A00                       		tst.b	d0
00021E9E 6A00                       		bpl.s	loc_16456
00021EA0 1228 0039                  		move.b	$39(a0),d1
00021EA4 5901                       		subq.b	#4,d1
00021EA6                            
00021EA6                            loc_16456:
00021EA6 1141 0038                  		move.b	d1,$38(a0)
00021EAA 2268 003C                  		movea.l	$3C(a0),a1
00021EAE 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00021EB4 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00021EBA 4A41                       		tst.w	d1
00021EBC 6600                       		bne.s	loc_16474
00021EBE 117C 0001 001C             		move.b	#1,anim(a0)
00021EC4                            
00021EC4                            loc_16474:
00021EC4 0C41 0008                  		cmpi.w	#8,d1
00021EC8 6600                       		bne.s	loc_16480
00021ECA 117C 0000 001C             		move.b	#0,anim(a0)
00021ED0                            
00021ED0                            loc_16480:
00021ED0 4EBA 9CAA                  		jsr	Obj63_ChangeDir
00021ED4                            
00021ED4                            loc_16484:
00021ED4 4EF9 0001 5BE2             		jmp	SpeedToPos
00021EDA                            ; ===========================================================================
00021EDA                            Ani_obj6F:
00021EDA                            	include "_anim\obj6F.asm"
00021EDA                            ; ---------------------------------------------------------------------------
00021EDA                            ; Animation script - platform on conveyor belt (SBZ)
00021EDA                            ; ---------------------------------------------------------------------------
00021EDA 0000                       		dc.w byte_1648E-Ani_obj6F
00021EDC 0000                       		dc.w byte_164A2-Ani_obj6F
00021EDE 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00021EEB 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00021EF2 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00021EF6 00                         		even
00021EF6 00                         		even
00021EF6                            
00021EF6 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00021EFC 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00021F02 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00021F16 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00021F2A 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00021F3E 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00021F52 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00021F66 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00021F7A                            ; ===========================================================================
00021F7A                            ; ---------------------------------------------------------------------------
00021F7A                            ; Object 70 - large girder block (SBZ)
00021F7A                            ; ---------------------------------------------------------------------------
00021F7A                            
00021F7A                            Obj70:					; XREF: Obj_Index
00021F7A 7000                       		moveq	#0,d0
00021F7C 1028 0024                  		move.b	routine(a0),d0
00021F80 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00021F84 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00021F88                            ; ===========================================================================
00021F88 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00021F8A 0000                       		dc.w Obj70_Action-Obj70_Index
00021F8C                            ; ===========================================================================
00021F8C                            
00021F8C                            Obj70_Main:				; XREF: Obj70_Index
00021F8C 5428 0024                  		addq.b	#2,routine(a0)
00021F90 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00021F98 317C 42F0 0002             		move.w	#$42F0,2(a0)
00021F9E 0028 0004 0001             		ori.b	#4,1(a0)
00021FA4 317C 0200 0018             		move.w	#$200,priority(a0)
00021FAA 117C 0060 0023             		move.b	#$60,width_pixels(a0)
00021FB0 117C 0018 0016             		move.b	#$18,$16(a0)
00021FB6 3168 0008 0032             		move.w	8(a0),$32(a0)
00021FBC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00021FC2 4EB9 0000 0000             		jsr	Obj70_Move2
00021FC8                            
00021FC8                            Obj70_Action:				; XREF: Obj70_Index
00021FC8 3F28 0008                  		move.w	8(a0),-(sp)
00021FCC 4A68 003A                  		tst.w	$3A(a0)
00021FD0 6700                       		beq.s	Obj70_Move
00021FD2 5368 003A                  		subq.w	#1,$3A(a0)
00021FD6 6600                       		bne.s	Obj70_Solid
00021FD8                            
00021FD8                            Obj70_Move:
00021FD8 4EB9 0001 5BE2             		jsr	SpeedToPos
00021FDE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00021FE2 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00021FE4 4EB9 0000 0000             		jsr	Obj70_Move2	; if time is zero, branch
00021FEA                            
00021FEA                            Obj70_Solid:
00021FEA 381F                       		move.w	(sp)+,d4
00021FEC 4A28 0001                  		tst.b	1(a0)
00021FF0 6A00                       		bpl.s	Obj70_ChkDel
00021FF2 7200                       		moveq	#0,d1
00021FF4 1228 0023                  		move.b	width_pixels(a0),d1
00021FF8 0641 000B                  		addi.w	#$B,d1
00021FFC 7400                       		moveq	#0,d2
00021FFE 1428 0016                  		move.b	$16(a0),d2
00022002 3602                       		move.w	d2,d3
00022004 5243                       		addq.w	#1,d3
00022006 4EB9 0001 8F1E             		jsr	SolidObject
0002200C                            
0002200C                            Obj70_ChkDel:
0002200C 3028 0032                  		move.w	$32(a0),d0
00022010 4EF9 0001 8870             		jmp		MarkObjGone2
00022016                            ; ===========================================================================
00022016                            
00022016                            Obj70_Move2:				; XREF: Obj70_Main
00022016 1028 0038                  		move.b	$38(a0),d0
0002201A 0240 0018                  		andi.w	#$18,d0
0002201E 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00022024 43F1 0000                  		lea	(a1,d0.w),a1
00022028 3159 0010                  		move.w	(a1)+,x_vel(a0)
0002202C 3159 0012                  		move.w	(a1)+,y_vel(a0)
00022030 3159 0034                  		move.w	(a1)+,$34(a0)
00022034 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00022038 317C 0007 003A             		move.w	#7,$3A(a0)
0002203E 4E75                       		rts	
00022040                            ; ===========================================================================
00022040 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00022048 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00022050 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00022058 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00022060                            ; ---------------------------------------------------------------------------
00022060                            ; Sprite mappings - large girder block (SBZ)
00022060                            ; ---------------------------------------------------------------------------
00022060                            Map_obj70:
00022060                            	include "_maps\obj70.asm"
00022060                            ; ---------------------------------------------------------------------------
00022060                            ; Sprite mappings - large girder block (SBZ)
00022060                            ; ---------------------------------------------------------------------------
00022060 0000                       		dc.w byte_1662A-Map_obj70
00022062 0C                         byte_1662A:	dc.b $C
00022063 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00022068 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0002206D E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00022072 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00022077 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0002207C 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00022081 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00022086 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0002208B E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00022090 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00022095 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0002209A 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000220A0 00                         		even
000220A0 00                         		even
000220A0                            
000220A0                            ; ===========================================================================
000220A0                            ; ---------------------------------------------------------------------------
000220A0                            ; Object 72 - teleporter (SBZ)
000220A0                            ; ---------------------------------------------------------------------------
000220A0                            
000220A0                            Obj72:					; XREF: Obj_Index
000220A0 7000                       		moveq	#0,d0
000220A2 1028 0024                  		move.b	$24(a0),d0
000220A6 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000220AA 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000220AE 4EF9 0001 8B7A             		jmp	MarkObjGone3
000220B4                            ; ===========================================================================
000220B4 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000220B6 0000                       		dc.w loc_166C8-Obj72_Index
000220B8 0000                       		dc.w loc_1675E-Obj72_Index
000220BA 0000                       		dc.w loc_16798-Obj72_Index
000220BC                            ; ===========================================================================
000220BC                            
000220BC                            Obj72_Main:				; XREF: Obj72_Index
000220BC 5428 0024                  		addq.b	#2,$24(a0)
000220C0 1028 0028                  		move.b	$28(a0),d0
000220C4 D040                       		add.w	d0,d0
000220C6 0240 001E                  		andi.w	#$1E,d0
000220CA 45FA 0000                  		lea	Obj72_Data(pc),a2
000220CE D4F2 0000                  		adda.w	(a2,d0.w),a2
000220D2 315A 003A                  		move.w	(a2)+,$3A(a0)
000220D6 214A 003C                  		move.l	a2,$3C(a0)
000220DA 315A 0036                  		move.w	(a2)+,$36(a0)
000220DE 315A 0038                  		move.w	(a2)+,$38(a0)
000220E2                            
000220E2                            loc_166C8:				; XREF: Obj72_Index
000220E2 43F8 D000                  		lea	($FFFFD000).w,a1
000220E6 3029 0008                  		move.w	8(a1),d0
000220EA 9068 0008                  		sub.w	8(a0),d0
000220EE 0828 0000 0022             		btst	#0,$22(a0)
000220F4 6700                       		beq.s	loc_166E0
000220F6 0640 000F                  		addi.w	#$F,d0
000220FA                            
000220FA                            loc_166E0:
000220FA 0C40 0010                  		cmpi.w	#$10,d0
000220FE 6400                       		bcc.s	locret_1675C
00022100 3229 000C                  		move.w	$C(a1),d1
00022104 9268 000C                  		sub.w	$C(a0),d1
00022108 0641 0020                  		addi.w	#$20,d1
0002210C 0C41 0040                  		cmpi.w	#$40,d1
00022110 6400                       		bcc.s	locret_1675C
00022112 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00022116 6600                       		bne.s	locret_1675C
00022118 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0002211E 6600                       		bne.s	loc_1670E
00022120 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00022126 6500                       		bcs.s	locret_1675C
00022128                            
00022128                            loc_1670E:
00022128 5428 0024                  		addq.b	#2,$24(a0)
0002212C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00022132 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00022138 337C 0800 0020             		move.w	#$800,inertia(a1)
0002213E 337C 0000 0010             		move.w	#0,$10(a1)
00022144 337C 0000 0012             		move.w	#0,$12(a1)
0002214A 08A8 0005 0022             		bclr	#5,$22(a0)
00022150 08A9 0005 0022             		bclr	#5,$22(a1)
00022156 08E9 0001 0022             		bset	#1,$22(a1)
0002215C 3368 0008 0008             		move.w	8(a0),8(a1)
00022162 3368 000C 000C             		move.w	$C(a0),$C(a1)
00022168 4228 0032                  		clr.b	$32(a0)
0002216C 303C 003C                  		move.w	#$3C,d0
00022170 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00022176                            
00022176                            locret_1675C:
00022176 4E75                       		rts	
00022178                            ; ===========================================================================
00022178                            
00022178                            loc_1675E:				; XREF: Obj72_Index
00022178 43F8 D000                  		lea	($FFFFD000).w,a1
0002217C 1028 0032                  		move.b	$32(a0),d0
00022180 5428 0032                  		addq.b	#2,$32(a0)
00022184 4EB9 0000 8DA4             		jsr	(CalcSine).l
0002218A EA40                       		asr.w	#5,d0
0002218C 3428 000C                  		move.w	$C(a0),d2
00022190 9440                       		sub.w	d0,d2
00022192 3342 000C                  		move.w	d2,$C(a1)
00022196 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0002219C 6600                       		bne.s	locret_16796
0002219E 6100 0000                  		bsr.w	sub_1681C
000221A2 5428 0024                  		addq.b	#2,$24(a0)
000221A6 303C 00B6                  		move.w	#$B6,d0
000221AA 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play teleport sound
000221B0                            
000221B0                            locret_16796:
000221B0 4E75                       		rts	
000221B2                            ; ===========================================================================
000221B2                            
000221B2                            loc_16798:				; XREF: Obj72_Index
000221B2 588F                       		addq.l	#4,sp
000221B4 43F8 D000                  		lea	($FFFFD000).w,a1
000221B8 5328 002E                  		subq.b	#1,$2E(a0)
000221BC 6A00                       		bpl.s	loc_167DA
000221BE 3368 0036 0008             		move.w	$36(a0),8(a1)
000221C4 3368 0038 000C             		move.w	$38(a0),$C(a1)
000221CA 7200                       		moveq	#0,d1
000221CC 1228 003A                  		move.b	$3A(a0),d1
000221D0 5801                       		addq.b	#4,d1
000221D2 B228 003B                  		cmp.b	$3B(a0),d1
000221D6 6500                       		bcs.s	loc_167C2
000221D8 7200                       		moveq	#0,d1
000221DA 6000                       		bra.s	loc_16800
000221DC                            ; ===========================================================================
000221DC                            
000221DC                            loc_167C2:
000221DC 1141 003A                  		move.b	d1,$3A(a0)
000221E0 2468 003C                  		movea.l	$3C(a0),a2
000221E4 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000221EA 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000221F0 6000 0000                  		bra.w	sub_1681C
000221F4                            ; ===========================================================================
000221F4                            
000221F4                            loc_167DA:
000221F4 2429 0008                  		move.l	8(a1),d2
000221F8 2629 000C                  		move.l	$C(a1),d3
000221FC 3029 0010                  		move.w	$10(a1),d0
00022200 48C0                       		ext.l	d0
00022202 E180                       		asl.l	#8,d0
00022204 D480                       		add.l	d0,d2
00022206 3029 0012                  		move.w	$12(a1),d0
0002220A 48C0                       		ext.l	d0
0002220C E180                       		asl.l	#8,d0
0002220E D680                       		add.l	d0,d3
00022210 2342 0008                  		move.l	d2,8(a1)
00022214 2343 000C                  		move.l	d3,$C(a1)
00022218 4E75                       		rts	
0002221A                            ; ===========================================================================
0002221A                            
0002221A                            loc_16800:
0002221A 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00022220 4228 0024                  		clr.b	$24(a0)
00022224 4238 F7C8                  		clr.b	($FFFFF7C8).w
00022228 337C 0000 0010             		move.w	#0,$10(a1)
0002222E 337C 0200 0012             		move.w	#$200,$12(a1)
00022234 4E75                       		rts	
00022236                            
00022236                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022236                            
00022236                            
00022236                            sub_1681C:
00022236 7000                       		moveq	#0,d0
00022238 343C 1000                  		move.w	#$1000,d2
0002223C 3028 0036                  		move.w	$36(a0),d0
00022240 9069 0008                  		sub.w	8(a1),d0
00022244 6C00                       		bge.s	loc_16830
00022246 4440                       		neg.w	d0
00022248 4442                       		neg.w	d2
0002224A                            
0002224A                            loc_16830:
0002224A 7200                       		moveq	#0,d1
0002224C 363C 1000                  		move.w	#$1000,d3
00022250 3228 0038                  		move.w	$38(a0),d1
00022254 9269 000C                  		sub.w	$C(a1),d1
00022258 6C00                       		bge.s	loc_16844
0002225A 4441                       		neg.w	d1
0002225C 4443                       		neg.w	d3
0002225E                            
0002225E                            loc_16844:
0002225E B240                       		cmp.w	d0,d1
00022260 6500                       		bcs.s	loc_1687A
00022262 7200                       		moveq	#0,d1
00022264 3228 0038                  		move.w	$38(a0),d1
00022268 9269 000C                  		sub.w	$C(a1),d1
0002226C 4841                       		swap	d1
0002226E 83C3                       		divs.w	d3,d1
00022270 7000                       		moveq	#0,d0
00022272 3028 0036                  		move.w	$36(a0),d0
00022276 9069 0008                  		sub.w	8(a1),d0
0002227A 6700                       		beq.s	loc_16866
0002227C 4840                       		swap	d0
0002227E 81C1                       		divs.w	d1,d0
00022280                            
00022280                            loc_16866:
00022280 3340 0010                  		move.w	d0,$10(a1)
00022284 3343 0012                  		move.w	d3,$12(a1)
00022288 4A41                       		tst.w	d1
0002228A 6A00                       		bpl.s	loc_16874
0002228C 4441                       		neg.w	d1
0002228E                            
0002228E                            loc_16874:
0002228E 3141 002E                  		move.w	d1,$2E(a0)
00022292 4E75                       		rts	
00022294                            ; ===========================================================================
00022294                            
00022294                            loc_1687A:
00022294 7000                       		moveq	#0,d0
00022296 3028 0036                  		move.w	$36(a0),d0
0002229A 9069 0008                  		sub.w	8(a1),d0
0002229E 4840                       		swap	d0
000222A0 81C2                       		divs.w	d2,d0
000222A2 7200                       		moveq	#0,d1
000222A4 3228 0038                  		move.w	$38(a0),d1
000222A8 9269 000C                  		sub.w	$C(a1),d1
000222AC 6700                       		beq.s	loc_16898
000222AE 4841                       		swap	d1
000222B0 83C0                       		divs.w	d0,d1
000222B2                            
000222B2                            loc_16898:
000222B2 3341 0012                  		move.w	d1,$12(a1)
000222B6 3342 0010                  		move.w	d2,$10(a1)
000222BA 4A40                       		tst.w	d0
000222BC 6A00                       		bpl.s	loc_168A6
000222BE 4440                       		neg.w	d0
000222C0                            
000222C0                            loc_168A6:
000222C0 3140 002E                  		move.w	d0,$2E(a0)
000222C4 4E75                       		rts	
000222C6                            ; End of function sub_1681C
000222C6                            
000222C6                            ; ===========================================================================
000222C6 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000222CC 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000222D2 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000222D6 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000222DC 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000222E2 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000222E8 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000222EE 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000222F4 0884 0298 0894             		dc.w $884, $298, $894
000222FA 0270 0894 0190             		dc.w $270, $894, $190
00022300 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00022306 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
0002230C 1184 0498 1158             		dc.w $1184, $498, $1158
00022312 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00022318 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0002231E 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00022324 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0002232A 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00022330 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00022336 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0002233C 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00022342 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00022348 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0002234E                            ; ===========================================================================
0002234E                            ; ---------------------------------------------------------------------------
0002234E                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0002234E                            ; ---------------------------------------------------------------------------
0002234E                            
0002234E                            Obj78:					; XREF: Obj_Index
0002234E 7000                       		moveq	#0,d0
00022350 1028 0024                  		move.b	routine(a0),d0
00022354 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00022358 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0002235C                            ; ===========================================================================
0002235C 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0002235E 0000                       		dc.w Obj78_Action-Obj78_Index
00022360 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00022362 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00022364 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00022366 0000                       		dc.w Obj78_Delete-Obj78_Index
00022368 0000                       		dc.w loc_16CC0-Obj78_Index
0002236A                            ; ===========================================================================
0002236A                            
0002236A                            locret_16950:
0002236A 4E75                       		rts	
0002236C                            ; ===========================================================================
0002236C                            
0002236C                            Obj78_Main:				; XREF: Obj78_Index
0002236C 117C 0007 0016             		move.b	#7,$16(a0)
00022372 117C 0008 0017             		move.b	#8,$17(a0)
00022378 4EB9 0001 5BC2             		jsr	ObjectFall
0002237E 4EBA E512                  		jsr	ObjHitFloor
00022382 4A41                       		tst.w	d1
00022384 6AE4                       		bpl.s	locret_16950
00022386 D368 000C                  		add.w	d1,$C(a0)
0002238A 4268 0012                  		clr.w	y_vel(a0)
0002238E 5428 0024                  		addq.b	#2,routine(a0)
00022392 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0002239A 317C 22B0 0002             		move.w	#$22B0,2(a0)
000223A0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000223A6 6700                       		beq.s	loc_16996
000223A8 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000223AE                            
000223AE                            loc_16996:
000223AE 0228 0003 0001             		andi.b	#3,1(a0)
000223B4 0028 0004 0001             		ori.b	#4,1(a0)
000223BA 1168 0001 0022             		move.b	1(a0),$22(a0)
000223C0 337C 0280 0018             		move.w	#$280,priority(a1)
000223C6 137C 0008 0023             		move.b	#8,width_pixels(a1)
000223CC 117C 000B 0020             		move.b	#$B,collision_flags(a0)
000223D2 3428 0008                  		move.w	8(a0),d2
000223D6 7A0C                       		moveq	#$C,d5
000223D8 0828 0000 0022             		btst	#0,$22(a0)
000223DE 6700                       		beq.s	loc_169CA
000223E0 4445                       		neg.w	d5
000223E2                            
000223E2                            loc_169CA:
000223E2 1C3C 0004                  		move.b	#4,d6
000223E6 7600                       		moveq	#0,d3
000223E8 7804                       		moveq	#4,d4
000223EA 2448                       		movea.l	a0,a2
000223EC 7202                       		moveq	#2,d1
000223EE                            
000223EE                            Obj78_LoadBody:
000223EE 4EB9 0001 672A             		jsr	SingleObjLoad2
000223F4 6600                       		bne.s	Obj78_QuitLoad
000223F6 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000223FA 1346 0024                  		move.b	d6,routine(a1)
000223FE 5406                       		addq.b	#2,d6
00022400 2368 0004 0004             		move.l	4(a0),4(a1)
00022406 3368 0002 0002             		move.w	2(a0),2(a1)
0002240C 337C 0280 0018             		move.w	#$280,priority(a1)
00022412 137C 0008 0023             		move.b	#8,width_pixels(a1)
00022418 137C 00CB 0020             		move.b	#$CB,collision_flags(a1)
0002241E D445                       		add.w	d5,d2
00022420 3342 0008                  		move.w	d2,8(a1)
00022424 3368 000C 000C             		move.w	$C(a0),$C(a1)
0002242A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00022430 1368 0022 0001             		move.b	$22(a0),1(a1)
00022436 137C 0008 001A             		move.b	#8,$1A(a1)
0002243C 234A 003C                  		move.l	a2,$3C(a1)
00022440 1344 003C                  		move.b	d4,$3C(a1)
00022444 5804                       		addq.b	#4,d4
00022446 2449                       		movea.l	a1,a2
00022448                            
00022448                            Obj78_QuitLoad:
00022448 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0002244C                            
0002244C 117C 0007 002A             		move.b	#7,objoff_2A(a0)
00022452 4228 003C                  		clr.b	$3C(a0)
00022456                            
00022456                            Obj78_Action:				; XREF: Obj78_Index
00022456 4A28 0022                  		tst.b	$22(a0)
0002245A 6B00 0000                  		bmi.w	loc_16C96
0002245E 7000                       		moveq	#0,d0
00022460 1028 0025                  		move.b	$25(a0),d0
00022464 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00022468 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0002246C 1228 002B                  		move.b	$2B(a0),d1
00022470 6A00                       		bpl.s	Obj78_Display
00022472 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00022478 1028 0026                  		move.b	$26(a0),d0
0002247C 0240 007F                  		andi.w	#$7F,d0
00022480 5828 0026                  		addq.b	#4,$26(a0)
00022484 1031 0000                  		move.b	(a1,d0.w),d0
00022488 6A00                       		bpl.s	Obj78_AniHead
0002248A 08A8 0007 002B             		bclr	#7,$2B(a0)
00022490 6000                       		bra.s	Obj78_Display
00022492                            ; ===========================================================================
00022492                            
00022492                            Obj78_AniHead:
00022492 0201 0010                  		andi.b	#$10,d1
00022496 D001                       		add.b	d1,d0
00022498 1140 001A                  		move.b	d0,$1A(a0)
0002249C                            
0002249C                            Obj78_Display:
0002249C 3028 0008                  		move.w	8(a0),d0
000224A0 0240 FF80                  		andi.w	#$FF80,d0
000224A4 3238 F700                  		move.w	($FFFFF700).w,d1
000224A8 0441 0080                  		subi.w	#$80,d1
000224AC 0241 FF80                  		andi.w	#$FF80,d1
000224B0 9041                       		sub.w	d1,d0
000224B2 0C40 0280                  		cmpi.w	#$280,d0
000224B6 6200 0000                  		bhi.w	Obj78_ChkGone
000224BA 4EF9 0001 5C48             		jmp	DisplaySprite
000224C0                            ; ===========================================================================
000224C0                            
000224C0                            Obj78_ChkGone:
000224C0                            ;		lea	(v_objstate).w,a2
000224C0 7000                       		moveq	#0,d0
000224C2 3028 0014                  		move.w	respawn_index(a0),d0
000224C6                            ;        move.w	respawn_index(a0),d0
000224C6 3440                       	    movea.w	d0,a2		
000224C8 6700                       		beq.s	loc_16ABC
000224CA 0892 0007                  		bclr	#7,(a2)
000224CE                            
000224CE                            loc_16ABC:
000224CE 117C 000A 0024             		move.b	#$A,routine(a0)	; run "Obj78_Delete" routine
000224D4 4E75                       		rts	
000224D6                            ; ===========================================================================
000224D6                            
000224D6                            Obj78_Delete:				; XREF: Obj78_Index
000224D6 4EF9 0001 5BFC             		jmp	DeleteObject
000224DC                            ; ===========================================================================
000224DC 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000224DE 0000                       		dc.w loc_16B02-Obj78_Index2
000224E0                            ; ===========================================================================
000224E0                            
000224E0                            Obj78_Move:				; XREF: Obj78_Index2
000224E0 5328 002A                  		subq.b	#1,objoff_2A(a0)
000224E4 6B00                       		bmi.s	Obj78_Move2
000224E6 4E75                       		rts	
000224E8                            ; ===========================================================================
000224E8                            
000224E8                            Obj78_Move2:
000224E8 5428 0025                  		addq.b	#2,$25(a0)
000224EC 117C 0010 002A             		move.b	#$10,objoff_2A(a0)
000224F2 317C FF40 0010             		move.w	#-$C0,x_vel(a0)
000224F8 317C 0040 001C             		move.w	#$40,$1C(a0)
000224FE 0868 0004 002B             		bchg	#4,$2B(a0)
00022504 6600                       		bne.s	loc_16AFC
00022506 4268 0010                  		clr.w	x_vel(a0)
0002250A 4468 001C                  		neg.w	$1C(a0)
0002250E                            
0002250E                            loc_16AFC:
0002250E 08E8 0007 002B             		bset	#7,$2B(a0)
00022514                            
00022514                            loc_16B02:				; XREF: Obj78_Index2
00022514 5328 002A                  		subq.b	#1,objoff_2A(a0)
00022518 6B00                       		bmi.s	loc_16B5E
0002251A 2F28 0008                  		move.l	8(a0),-(sp)
0002251E 2428 0008                  		move.l	8(a0),d2
00022522 3028 0010                  		move.w	x_vel(a0),d0
00022526 0828 0000 0022             		btst	#0,$22(a0)
0002252C 6700                       		beq.s	loc_16B1E
0002252E 4440                       		neg.w	d0
00022530                            
00022530                            loc_16B1E:
00022530 48C0                       		ext.l	d0
00022532 E180                       		asl.l	#8,d0
00022534 D480                       		add.l	d0,d2
00022536 2142 0008                  		move.l	d2,8(a0)
0002253A 4EBA E356                  		jsr	ObjHitFloor
0002253E 241F                       		move.l	(sp)+,d2
00022540 0C41 FFF8                  		cmpi.w	#-8,d1
00022544 6D00                       		blt.s	loc_16B70
00022546 0C41 000C                  		cmpi.w	#$C,d1
0002254A 6C00                       		bge.s	loc_16B70
0002254C D368 000C                  		add.w	d1,$C(a0)
00022550 4842                       		swap	d2
00022552 B468 0008                  		cmp.w	8(a0),d2
00022556 6700                       		beq.s	locret_16B5C
00022558 7000                       		moveq	#0,d0
0002255A 1028 003C                  		move.b	$3C(a0),d0
0002255E 5228 003C                  		addq.b	#1,$3C(a0)
00022562 0228 000F 003C             		andi.b	#$F,$3C(a0)
00022568 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0002256C                            
0002256C                            locret_16B5C:
0002256C 4E75                       		rts	
0002256E                            ; ===========================================================================
0002256E                            
0002256E                            loc_16B5E:
0002256E 5528 0025                  		subq.b	#2,$25(a0)
00022572 117C 0007 002A             		move.b	#7,objoff_2A(a0)
00022578 317C 0000 0010             		move.w	#0,x_vel(a0)
0002257E 4E75                       		rts	
00022580                            ; ===========================================================================
00022580                            
00022580                            loc_16B70:
00022580 2142 0008                  		move.l	d2,8(a0)
00022584 0868 0000 0022             		bchg	#0,$22(a0)
0002258A 1168 0022 0001             		move.b	$22(a0),1(a0)
00022590 7000                       		moveq	#0,d0
00022592 1028 003C                  		move.b	$3C(a0),d0
00022596 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0002259C 5228 003C                  		addq.b	#1,$3C(a0)
000225A0 0228 000F 003C             		andi.b	#$F,$3C(a0)
000225A6 4E75                       		rts	
000225A8                            ; ===========================================================================
000225A8                            
000225A8                            Obj78_BodySeg2:				; XREF: Obj78_Index
000225A8 2268 003C                  		movea.l	$3C(a0),a1
000225AC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000225B2 6A00                       		bpl.s	Obj78_BodySeg1
000225B4 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000225BA 1028 0026                  		move.b	$26(a0),d0
000225BE 0240 007F                  		andi.w	#$7F,d0
000225C2 5828 0026                  		addq.b	#4,$26(a0)
000225C6 4A31 0004                  		tst.b	4(a1,d0.w)
000225CA 6A00                       		bpl.s	Obj78_AniBody
000225CC 5828 0026                  		addq.b	#4,$26(a0)
000225D0                            
000225D0                            Obj78_AniBody:
000225D0 1031 0000                  		move.b	(a1,d0.w),d0
000225D4 5000                       		addq.b	#8,d0
000225D6 1140 001A                  		move.b	d0,$1A(a0)
000225DA                            
000225DA                            Obj78_BodySeg1:				; XREF: Obj78_Index
000225DA 2268 003C                  		movea.l	$3C(a0),a1
000225DE 4A28 0022                  		tst.b	$22(a0)
000225E2 6B00 0000                  		bmi.w	loc_16C90
000225E6 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000225EC 1169 0025 0025             		move.b	$25(a1),$25(a0)
000225F2 6700 0000                  		beq.w	loc_16C64
000225F6 3169 001C 001C             		move.w	$1C(a1),$1C(a0)
000225FC 3029 0010                  		move.w	x_vel(a1),d0
00022600 D069 001C                  		add.w	$1C(a1),d0
00022604 3140 0010                  		move.w	d0,x_vel(a0)
00022608 2428 0008                  		move.l	8(a0),d2
0002260C 2602                       		move.l	d2,d3
0002260E 3028 0010                  		move.w	x_vel(a0),d0
00022612 0828 0000 0022             		btst	#0,$22(a0)
00022618 6700                       		beq.s	loc_16C0C
0002261A 4440                       		neg.w	d0
0002261C                            
0002261C                            loc_16C0C:
0002261C 48C0                       		ext.l	d0
0002261E E180                       		asl.l	#8,d0
00022620 D480                       		add.l	d0,d2
00022622 2142 0008                  		move.l	d2,8(a0)
00022626 4843                       		swap	d3
00022628 B668 0008                  		cmp.w	8(a0),d3
0002262C 6700                       		beq.s	loc_16C64
0002262E 7000                       		moveq	#0,d0
00022630 1028 003C                  		move.b	$3C(a0),d0
00022634 1231 002C                  		move.b	$2C(a1,d0.w),d1
00022638 0C01 0080                  		cmpi.b	#-$80,d1
0002263C 6600                       		bne.s	loc_16C50
0002263E 4843                       		swap	d3
00022640 2143 0008                  		move.l	d3,8(a0)
00022644 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00022648 0868 0000 0022             		bchg	#0,$22(a0)
0002264E 1168 0022 0001             		move.b	$22(a0),1(a0)
00022654 5228 003C                  		addq.b	#1,$3C(a0)
00022658 0228 000F 003C             		andi.b	#$F,$3C(a0)
0002265E 6000                       		bra.s	loc_16C64
00022660                            ; ===========================================================================
00022660                            
00022660                            loc_16C50:
00022660 4881                       		ext.w	d1
00022662 D368 000C                  		add.w	d1,$C(a0)
00022666 5228 003C                  		addq.b	#1,$3C(a0)
0002266A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00022670 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00022674                            
00022674                            loc_16C64:
00022674 0C29 000C 0024             		cmpi.b	#$C,routine(a1)
0002267A 6700                       		beq.s	loc_16C90
0002267C 0C11 0027                  		cmpi.b	#$27,0(a1)
00022680 6700                       		beq.s	loc_16C7C
00022682 0C29 000A 0024             		cmpi.b	#$A,routine(a1)
00022688 6600                       		bne.s	loc_16C82
0002268A                            
0002268A                            loc_16C7C:
0002268A 117C 000A 0024             		move.b	#$A,routine(a0)
00022690                            
00022690                            loc_16C82:
00022690 4EF9 0001 5C48             		jmp	DisplaySprite
00022696                            
00022696                            ; ===========================================================================
00022696 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0002269E                            ; ===========================================================================
0002269E                            
0002269E                            loc_16C90:
0002269E 08E9 0007 0022             		bset	#7,$22(a1)
000226A4                            
000226A4                            loc_16C96:
000226A4 7000                       		moveq	#0,d0
000226A6 1028 0024                  		move.b	routine(a0),d0
000226AA 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000226AE 0828 0000 0022             		btst	#0,$22(a0)
000226B4 6700                       		beq.s	loc_16CAA
000226B6 4440                       		neg.w	d0
000226B8                            
000226B8                            loc_16CAA:
000226B8 3140 0010                  		move.w	d0,x_vel(a0)
000226BC 317C FC00 0012             		move.w	#-$400,y_vel(a0)
000226C2 117C 000C 0024             		move.b	#$C,routine(a0)
000226C8 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000226CE                            
000226CE                            loc_16CC0:				; XREF: Obj78_Index
000226CE 4EB9 0001 5BC2             		jsr	ObjectFall
000226D4 4A68 0012                  		tst.w	y_vel(a0)
000226D8 6B00                       		bmi.s	loc_16CE0
000226DA 4EBA E1B6                  		jsr	ObjHitFloor
000226DE 4A41                       		tst.w	d1
000226E0 6A00                       		bpl.s	loc_16CE0
000226E2 D368 000C                  		add.w	d1,$C(a0)
000226E6 317C FC00 0012             		move.w	#-$400,y_vel(a0)
000226EC                            
000226EC                            loc_16CE0:
000226EC 4A28 0001                  		tst.b	1(a0)
000226F0 6A00 FDCE                  		bpl.w	Obj78_ChkGone
000226F4 4EF9 0001 5C48             		jmp	DisplaySprite
000226FA                            ; ===========================================================================
000226FA                            Ani_obj78:
000226FA                            	include "_anim\obj78.asm"
000226FA                            ; ---------------------------------------------------------------------------
000226FA                            ; Animation script - Caterkiller enemy (uses non-standard format)
000226FA                            ; ---------------------------------------------------------------------------
000226FA 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0002270A 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0002271A 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0002272A 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0002273A 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0002274A 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0002275A 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0002276A 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0002277A                            	even
0002277A                            	even
0002277A                            
0002277A                            ; ---------------------------------------------------------------------------
0002277A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0002277A                            ; ---------------------------------------------------------------------------
0002277A                            Map_obj78:
0002277A                            	include "_maps\obj78.asm"
0002277A                            ; ---------------------------------------------------------------------------
0002277A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0002277A                            ; ---------------------------------------------------------------------------
0002277A 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0002277E 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00022782 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00022786 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0002278A 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0002278E 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00022792 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00022796 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0002279A 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0002279E 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000227A2 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000227A6 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000227AA 01                         byte_16D9E:	dc.b 1
000227AB F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000227B0 01                         byte_16DA4:	dc.b 1
000227B1 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000227B6 01                         byte_16DAA:	dc.b 1
000227B7 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000227BC 01                         byte_16DB0:	dc.b 1
000227BD EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000227C2 01                         byte_16DB6:	dc.b 1
000227C3 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000227C8 01                         byte_16DBC:	dc.b 1
000227C9 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000227CE 01                         byte_16DC2:	dc.b 1
000227CF EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000227D4 01                         byte_16DC8:	dc.b 1
000227D5 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000227DA 01                         byte_16DCE:	dc.b 1
000227DB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000227E0 01                         byte_16DD4:	dc.b 1
000227E1 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000227E6 01                         byte_16DDA:	dc.b 1
000227E7 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000227EC 01                         byte_16DE0:	dc.b 1
000227ED F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000227F2 01                         byte_16DE6:	dc.b 1
000227F3 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000227F8 01                         byte_16DEC:	dc.b 1
000227F9 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000227FE 01                         byte_16DF2:	dc.b 1
000227FF F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00022804 01                         byte_16DF8:	dc.b 1
00022805 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0002280A 01                         byte_16DFE:	dc.b 1
0002280B F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00022810 01                         byte_16E04:	dc.b 1
00022811 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00022816 01                         byte_16E0A:	dc.b 1
00022817 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0002281C 01                         byte_16E10:	dc.b 1
0002281D EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00022822 01                         byte_16E16:	dc.b 1
00022823 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00022828 01                         byte_16E1C:	dc.b 1
00022829 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0002282E 01                         byte_16E22:	dc.b 1
0002282F EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00022834 01                         byte_16E28:	dc.b 1
00022835 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0002283A                            		even
0002283A                            		even
0002283A                            
0002283A                            ; ===========================================================================
0002283A                            ; ---------------------------------------------------------------------------
0002283A                            ; Object 79 - Star pole / starpost / checkpoint (Modified port from Sonic 2F)
0002283A                            ; ---------------------------------------------------------------------------
0002283A                            
0002283A                            Obj79:					; XREF: Obj_Index
0002283A 7000                       		moveq	#0,d0
0002283C 1028 0024                  		move.b	routine(a0),d0
00022840 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00022844 4EFB 1000                  		jmp	Obj79_Index(pc,d1.w)
00022848                            ;		jmp	MarkObjGone
00022848                            ; ===========================================================================
00022848 0000                       Obj79_Index:	dc.w Obj79_Init-Obj79_Index; 0
0002284A 0000                       	dc.w Obj79_Main-Obj79_Index; 2
0002284C 0000                       	dc.w Obj79_Animate-Obj79_Index; 4
0002284E 0000                       	dc.w Obj79_Dongle-Obj79_Index; 6
00022850                            ;	dc.w Obj79_Star-Obj79_Index; 8
00022850                            ; ===========================================================================
00022850                            
00022850                            Obj79_Init:
00022850 5428 0024                  	addq.b	#2,routine(a0) ; => Obj79_Main
00022854 217C 0000 0000 0004        	move.l	#Map_obj79,4(a0)
0002285C 317C 06C0 0002             	move.w	#($D800/$20),2(a0)
00022862                            ;	bsr.w	JmpTo3_Adjust2PArtPointer
00022862 117C 0004 0001             	move.b	#4,render_flags(a0)
00022868 117C 0008 0023             	move.b	#8,width_pixels(a0)
0002286E 317C 0280 0018             	move.w	#$280,priority(a0)
00022874                            ;	lea	(v_objstate).w,a2
00022874 7000                       	moveq	#0,d0
00022876 3028 0014                  	move.w	respawn_index(a0),d0
0002287A 3440                           movea.w	d0,a2
0002287C                            ;	bclr	#7,(a2)
0002287C 0812 0000                  	btst	#0,(a2)
00022880 6600                       	bne.s	Obj79_FlashingLamp
00022882 1238 FE30                  	move.b	(Last_star_pole_hit).w,d1
00022886 0201 007F                  	andi.b	#$7F,d1
0002288A 1428 0028                  	move.b	subtype(a0),d2
0002288E 0202 007F                  	andi.b	#$7F,d2
00022892 B202                       	cmp.b	d2,d1
00022894 6500                       	bcs.s	Obj79_Main
00022896                            
00022896                            Obj79_FlashingLamp:
00022896 08D2 0000                  	bset	#0,(a2)
0002289A 117C 0002 001C             	move.b	#2,anim(a0)
000228A0                            
000228A0                            ; loc_1F12C:
000228A0                            Obj79_Main:
000228A0 4A78 FE08                  	tst.w	(Debug_placement_mode).w
000228A4 6600 0000                  	bne.w	Obj79_Animate
000228A8 47F8 D000                  	lea	(MainCharacter).w,a3 ; a3=character
000228AC 1238 FE30                  	move.b	(Last_star_pole_hit).w,d1
000228B0 6100                       	bsr.s	Obj79_CheckActivation
000228B2                            ;	tst.w	(Two_player_mode).w
000228B2                            ;	beq.w	Obj79_Animate
000228B2                            ;	lea	(Sidekick).w,a3 ; a3=character
000228B2                            ;	move.b	(Last_star_pole_hit_2P).w,d1
000228B2                            ;	bsr.s	Obj79_CheckActivation
000228B2 6000 0000                  	bra.w	Obj79_Animate
000228B6                            ; ---------------------------------------------------------------------------
000228B6                            ; loc_1F154:
000228B6                            Obj79_CheckActivation:
000228B6 0201 007F                  	andi.b	#$7F,d1
000228BA 1428 0028                  	move.b	subtype(a0),d2
000228BE 0202 007F                  	andi.b	#$7F,d2
000228C2 B202                       	cmp.b	d2,d1
000228C4 6400 0000                  	bcc.w	loc_1F222
000228C8 302B 0008                  	move.w	x_pos(a3),d0
000228CC 9068 0008                  	sub.w	x_pos(a0),d0
000228D0 5040                       	addi.w	#8,d0
000228D2 0C40 0010                  	cmpi.w	#$10,d0
000228D6 6400 0000                  	bcc.w	return_1F220
000228DA 302B 000C                  	move.w	y_pos(a3),d0
000228DE 9068 000C                  	sub.w	y_pos(a0),d0
000228E2 0640 0040                  	addi.w	#$40,d0
000228E6 0C40 0068                  	cmpi.w	#$68,d0
000228EA 6400 0000                  	bcc.w	return_1F220
000228EE 303C 0063                  	move.w	#$63,d0 ; checkpoint ding-dong sound
000228F2 4EB9 0000 3212             	jsr	(PlaySound).l
000228F8 4EB9 0001 6714             	jsr	(SingleObjLoad).l
000228FE 6600                       	bne.s	loc_1F206
00022900 12BC 0079                  	move.b	#$79,0(a1) ; load obj79
00022904 137C 0006 0024             	move.b	#6,routine(a1) ; => Obj79_Dongle
0002290A 3368 0008 0030             	move.w	x_pos(a0),objoff_30(a1)
00022910 3368 000C 0032             	move.w	y_pos(a0),objoff_32(a1)
00022916 0469 0014 0032             	subi.w	#$14,objoff_32(a1)
0002291C 2368 0004 0004             	move.l	mappings(a0),mappings(a1)
00022922 3368 0002 0002             	move.w	art_tile(a0),art_tile(a1)
00022928 137C 0004 0001             	move.b	#4,render_flags(a1)
0002292E 137C 0008 0023             	move.b	#8,width_pixels(a1)
00022934 337C 0200 0018             	move.w	#$200,priority(a1)
0002293A 137C 0002 001A             	move.b	#2,mapping_frame(a1)
00022940 337C 0020 0036             	move.w	#$20,objoff_36(a1)
00022946 3348 003E                  	move.w	a0,parent(a1)
0002294A                            ;	tst.w	(Two_player_mode).w
0002294A                            ;	bne.s	loc_1F206
0002294A                            ;	cmpi.b	#7,(Emerald_count).w
0002294A                            ;	beq.s	loc_1F206
0002294A                            ;	cmpi.w	#$32,(Ring_count).w
0002294A                            ;	bcs.s	loc_1F206
0002294A                            ;	move.w	(Player_option).w,d0
0002294A                            ;	cmpi.b	#3,d0	; is the player Metal?
0002294A                            ;	beq.w	loc_1F206
0002294A                            ;	bsr.w	Obj79_MakeSpecialStars
0002294A                            
0002294A                            loc_1F206:
0002294A 117C 0001 001C             	move.b	#1,anim(a0)
00022950 6100 0000                  	bsr.w	Obj79_StoreInfo
00022954                            ;	lea	(v_objstate).w,a2
00022954 7000                       	moveq	#0,d0
00022956 3028 0014                  	move.w	respawn_index(a0),d0
0002295A 3440                           movea.w	d0,a2
0002295C 08D2 0000                  	bset	#0,(a2)
00022960                            
00022960                            return_1F220:
00022960 4E75                       	rts
00022962                            ; ===========================================================================
00022962                            
00022962                            loc_1F222:
00022962 4A28 001C                  	tst.b	anim(a0)
00022966 6600                       	bne.s	return_1F22E
00022968 117C 0002 001C             	move.b	#2,anim(a0)
0002296E                            
0002296E                            return_1F22E:
0002296E 4E75                       	rts
00022970                            ; ===========================================================================
00022970                            ; loc_1F230:
00022970                            Obj79_Animate:
00022970 43F9 0000 0000             	lea	(Ani_Obj79).l,a1
00022976 6100 0000                  	bsr.w	JmpTo2_AnimateSprite
0002297A 4EF9 0001 883A             	jmp	MarkObjGone
00022980                            ; ===========================================================================
00022980                            ; loc_1F240:
00022980                            Obj79_Dongle:
00022980 5368 0036                  	subq.w	#1,objoff_36(a0)
00022984 6A00                       	bpl.s	Obj79_MoveDonglyThing
00022986 3268 003E                  	movea.w	parent(a0),a1 ; a1=object
0002298A 0C11 0079                  	cmpi.b	#$79,(a1)
0002298E 6600                       	bne.s	@dongle
00022990 137C 0002 001C             	move.b	#2,anim(a1)
00022996 137C 0000 001A             	move.b	#0,mapping_frame(a1)
0002299C                            @dongle:
0002299C 4EF9 0001 5BFC             	jmp	DeleteObject
000229A2                            ; ===========================================================================
000229A2                            ; loc_1F262:
000229A2                            Obj79_MoveDonglyThing:
000229A2 1028 0026                  	move.b	angle(a0),d0
000229A6 0428 0010 0026             	subi.b	#$10,angle(a0)
000229AC 0400 0040                  	subi.b	#$40,d0
000229B0 4EB9 0000 8DA4             	jsr	(CalcSine).l
000229B6 C3FC 0C00                  	muls.w	#$C00,d1
000229BA 4841                       	swap	d1
000229BC D268 0030                  	add.w	objoff_30(a0),d1
000229C0 3141 0008                  	move.w	d1,x_pos(a0)
000229C4 C1FC 0C00                  	muls.w	#$C00,d0
000229C8 4840                       	swap	d0
000229CA D068 0032                  	add.w	objoff_32(a0),d0
000229CE 3140 000C                  	move.w	d0,y_pos(a0)
000229D2 4EF9 0001 883A             	jmp	MarkObjGone
000229D8                            ; ---------------------------------------------------------------------------
000229D8                            ; Subroutine to	store information when you hit a starpost
000229D8                            ; ---------------------------------------------------------------------------
000229D8                            
000229D8                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000229D8 11E8 0028 FE30             		move.b	subtype(a0),($FFFFFE30).w 		; lamppost number
000229DE 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000229E4 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000229EA 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000229F0 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000229F6                            ;		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000229F6 21F8 FE22 FE38             		move.l	(Timer).w,($FFFFFE38).w 	; time
000229FC 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00022A02 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00022A08 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00022A0E 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00022A14 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00022A1A 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00022A20 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00022A26 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00022A2C 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00022A32 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00022A38 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00022A3E 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00022A44 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00022A4A 4E75                       		rts	
00022A4C                            
00022A4C                            ; ---------------------------------------------------------------------------
00022A4C                            ; Subroutine to	load stored info when you start	a level	from a starpost
00022A4C                            ; ---------------------------------------------------------------------------
00022A4C                            
00022A4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022A4C                            
00022A4C                            
00022A4C                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00022A4C 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00022A52 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00022A58 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00022A5E 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00022A64                            ;		move.b	($FFFFFE54).w,($FFFFFE1B).w
00022A64 4278 FE20                  		clr.w	($FFFFFE20).w
00022A68 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
00022A6E 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(Timer).w
00022A74 11FC 003B FE25             		move.b	#59,(Timer_Centisecond).w
00022A7A 5338 FE24                  		subq.b	#1,(Timer_Second).w
00022A7E 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00022A84 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00022A8A 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00022A90 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00022A96 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00022A9C 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00022AA2 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00022AA8 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00022AAE 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00022AB4 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00022ABA 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00022AC0 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00022AC6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00022ACC 6600                       		bne.s	loc_170E4
00022ACE 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00022AD4 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00022ADA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00022AE0                            
00022AE0                            loc_170E4:
00022AE0 4A38 FE30                  		tst.b	($FFFFFE30).w
00022AE4 6A00                       		bpl.s	locret_170F6
00022AE6 3038 FE32                  		move.w	($FFFFFE32).w,d0
00022AEA 0440 00A0                  		subi.w	#$A0,d0
00022AEE 31C0 F728                  		move.w	d0,($FFFFF728).w
00022AF2                            
00022AF2                            locret_170F6:
00022AF2 4E75                       		rts	
00022AF4                            ; End of function Obj79_LoadInfo
00022AF4                            
00022AF4 0000                       Ani_Obj79:	dc.w byte_1F41A-Ani_Obj79
00022AF6 0000                       	dc.w byte_1F41D-Ani_Obj79
00022AF8 0000                       	dc.w byte_1F420-Ani_Obj79
00022AFA                            byte_1F41A:
00022AFA 0F00 FF                    	dc.b  $F,  0,$FF
00022AFD                            byte_1F41D:
00022AFD 0F01 FF                    	dc.b  $F,  1,$FF
00022B00                            byte_1F420:
00022B00 0300 04FF                  	dc.b   3,  0,  4,$FF
00022B04                            	even
00022B04                            
00022B04                            ; ===========================================================================
00022B04                            ; ---------------------------------------------------------------------------
00022B04                            ; Sprite mappings - starpost
00022B04                            ; ---------------------------------------------------------------------------
00022B04                            Map_obj79:
00022B04                            	include "_maps\obj79s2.asm"
00022B04                            ; --------------------------------------------------------------------------------
00022B04                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00022B04                            ; --------------------------------------------------------------------------------
00022B04                            
00022B04                            SME_Y2pSa:	
00022B04 0000 0000                  		dc.w SME_Y2pSa_A-SME_Y2pSa, SME_Y2pSa_1F-SME_Y2pSa	
00022B08 0000 0000                  		dc.w SME_Y2pSa_2F-SME_Y2pSa, SME_Y2pSa_35-SME_Y2pSa	
00022B0C 0000                       		dc.w SME_Y2pSa_3B-SME_Y2pSa	
00022B0E 04                         SME_Y2pSa_A:	dc.b 4	
00022B0F E801 2004 FC               		dc.b $E8, 1, $20, 4, $FC	
00022B14 F803 2006 F8               		dc.b $F8, 3, $20, 6, $F8	
00022B19 F803 2806 00               		dc.b $F8, 3, $28, 6, 0	
00022B1E D805 0000 F8               		dc.b $D8, 5, 0, 0, $F8	
00022B23 03                         SME_Y2pSa_1F:	dc.b 3	
00022B24 E801 2004 FC               		dc.b $E8, 1, $20, 4, $FC	
00022B29 F803 2006 F8               		dc.b $F8, 3, $20, 6, $F8	
00022B2E F803 2806 00               		dc.b $F8, 3, $28, 6, 0	
00022B33 01                         SME_Y2pSa_2F:	dc.b 1	
00022B34 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00022B39 01                         SME_Y2pSa_35:	dc.b 1	
00022B3A F805 2000 F8               		dc.b $F8, 5, $20, 0, $F8	
00022B3F 04                         SME_Y2pSa_3B:	dc.b 4	
00022B40 E801 2004 FC               		dc.b $E8, 1, $20, 4, $FC	
00022B45 F803 2006 F8               		dc.b $F8, 3, $20, 6, $F8	
00022B4A F803 2806 00               		dc.b $F8, 3, $28, 6, 0	
00022B4F D805 2000 F8               		dc.b $D8, 5, $20, 0, $F8	
00022B54                            		even
00022B54                            		even
00022B54                            
00022B54                            ; ===========================================================================
00022B54                            JmpTo2_AnimateSprite:
00022B54 4EF9 0001 2624             	jmp	AnimateSprite
00022B5A                            ;	rts
00022B5A                            
00022B5A                            JmpTo10_DeleteObject:
00022B5A 4EF9 0001 5BFC             	jmp	DeleteObject
00022B60                            ; ===========================================================================
00022B60 4E71                       	nop
00022B62                            
00022B62                            JmpTo_MarkObjGone:
00022B62 4EF9 0001 883A             	jmp	MarkObjGone
00022B68                            ; ===========================================================================
00022B68                            
00022B68                            ;JmpTo2_AnimateSprite
00022B68                            ;	jmp	AnimateSprite
00022B68                            ; ===========================================================================
00022B68                            ; ---------------------------------------------------------------------------
00022B68                            ; Object 7D - hidden points at the end of a level
00022B68                            ; ---------------------------------------------------------------------------
00022B68                            
00022B68                            Obj7D:					; XREF: Obj_Index
00022B68 7000                       		moveq	#0,d0
00022B6A 1028 0024                  		move.b	routine(a0),d0
00022B6E 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00022B72 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00022B76                            ; ===========================================================================
00022B76 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00022B78 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00022B7A                            ; ===========================================================================
00022B7A                            
00022B7A                            Obj7D_Main:				; XREF: Obj7D_Index
00022B7A 7410                       		moveq	#$10,d2
00022B7C 3602                       		move.w	d2,d3
00022B7E D643                       		add.w	d3,d3
00022B80 43F8 D000                  		lea	($FFFFD000).w,a1
00022B84 3029 0008                  		move.w	8(a1),d0
00022B88 9068 0008                  		sub.w	8(a0),d0
00022B8C D042                       		add.w	d2,d0
00022B8E B043                       		cmp.w	d3,d0
00022B90 6400                       		bcc.s	Obj7D_ChkDel
00022B92 3229 000C                  		move.w	$C(a1),d1
00022B96 9268 000C                  		sub.w	$C(a0),d1
00022B9A D242                       		add.w	d2,d1
00022B9C B243                       		cmp.w	d3,d1
00022B9E 6400                       		bcc.s	Obj7D_ChkDel
00022BA0 4A78 FE08                  		tst.w	($FFFFFE08).w
00022BA4 6600                       		bne.s	Obj7D_ChkDel
00022BA6 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00022BAA 6600                       		bne.s	Obj7D_ChkDel
00022BAC 5428 0024                  		addq.b	#2,routine(a0)
00022BB0 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00022BB8 317C 84B6 0002             		move.w	#$84B6,2(a0)
00022BBE 0028 0004 0001             		ori.b	#4,1(a0)
00022BC4 117C 0000 0018             		move.b	#0,priority(a0)
00022BCA 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00022BD0 1168 0028 001A             		move.b	subtype(a0),mapping_frame(a0)
00022BD6 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00022BDC 303C 00C9                  		move.w	#$C9,d0
00022BE0 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play bonus sound
00022BE6 7000                       		moveq	#0,d0
00022BE8 1028 0028                  		move.b	subtype(a0),d0
00022BEC D040                       		add.w	d0,d0
00022BEE 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00022BF2 4EB9 0000 0000             		jsr	AddPoints
00022BF8                            
00022BF8                            Obj7D_ChkDel:
00022BF8 4EF9 0001 8B7A             		jmp	MarkObjGone3
00022BFE                            ; ===========================================================================
00022BFE 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00022C00 03E8                       		dc.w 1000
00022C02 0064                       		dc.w 100
00022C04 0001                       		dc.w 1
00022C06                            ; ===========================================================================
00022C06                            
00022C06                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00022C06 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00022C0A 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00022C0C 3028 0008                  		move.w	8(a0),d0
00022C10 0240 FF80                  		andi.w	#-$80,d0
00022C14 3238 F700                  		move.w	($FFFFF700).w,d1
00022C18 0441 0080                  		subi.w	#$80,d1
00022C1C 0241 FF80                  		andi.w	#-$80,d1
00022C20 9041                       		sub.w	d1,d0
00022C22 0C40 0280                  		cmpi.w	#$280,d0
00022C26 6200                       		bhi.s	Obj7D_Delete2
00022C28 4EF9 0001 5C48             		jmp	DisplaySprite
00022C2E                            ; ===========================================================================
00022C2E                            
00022C2E                            Obj7D_Delete2:
00022C2E 4EF9 0001 5BFC             		jmp	DeleteObject
00022C34                            ; ===========================================================================
00022C34                            ; ---------------------------------------------------------------------------
00022C34                            ; Sprite mappings - hidden points at the end of	a level
00022C34                            ; ---------------------------------------------------------------------------
00022C34                            Map_obj7D:
00022C34                            	include "_maps\obj7D.asm"
00022C34                            ; ---------------------------------------------------------------------------
00022C34                            ; Sprite mappings - hidden points at the end of	a level
00022C34                            ; ---------------------------------------------------------------------------
00022C34 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00022C38 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00022C3C 00                         byte_17250:	dc.b 0
00022C3D 01                         byte_17251:	dc.b 1
00022C3E F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00022C43 01                         byte_17257:	dc.b 1
00022C44 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00022C49 01                         byte_1725D:	dc.b 1
00022C4A F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00022C50 00                         		even
00022C50 00                         		even
00022C50                            
00022C50                            ; ===========================================================================
00022C50                            ; ---------------------------------------------------------------------------
00022C50                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00022C50                            ; ---------------------------------------------------------------------------
00022C50                            
00022C50                            Obj8A:					; XREF: Obj_Index
00022C50 7000                       		moveq	#0,d0
00022C52 1028 0024                  		move.b	routine(a0),d0
00022C56 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00022C5A 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00022C5E                            ; ===========================================================================
00022C5E 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00022C60 0000                       		dc.w Obj8A_Display-Obj8A_Index
00022C62                            ; ===========================================================================
00022C62                            
00022C62                            Obj8A_Main:				; XREF: Obj8A_Index
00022C62 5428 0024                  		addq.b	#2,routine(a0)
00022C66 317C 0120 0008             		move.w	#$120,8(a0)
00022C6C 317C 00F0 000A             		move.w	#$F0,$A(a0)
00022C72 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00022C7A 317C 05A0 0002             		move.w	#$5A0,2(a0)
00022C80 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00022C84 1140 001A                  		move.b	d0,mapping_frame(a0)	; display appropriate sprite
00022C88 117C 0000 0001             		move.b	#0,1(a0)
00022C8E 117C 0000 0018             		move.b	#0,priority(a0)
00022C94 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00022C9A 6600                       		bne.s	Obj8A_Display	; if not, branch
00022C9C 317C 00A6 0002             		move.w	#$A6,2(a0)
00022CA2 117C 000A 001A             		move.b	#$A,mapping_frame(a0)	; display "SONIC TEAM PRESENTS"
00022CA8 4A38 FFD3                  		tst.b	($FFFFFFD3).w	; is hidden credits cheat on?
00022CAC 4E71                       		nop	Obj8A_Display	; if not, branch
00022CAE 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00022CB4 6600                       		bne.s	Obj8A_Display	; if not, branch
00022CB6 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00022CBC 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00022CC2 4EF9 0001 5BFC             		jmp	DeleteObject
00022CC8                            ; ===========================================================================
00022CC8                            
00022CC8                            Obj8A_Display:				; XREF: Obj8A_Index
00022CC8 4EF9 0001 5C48             		jmp	DisplaySprite
00022CCE                            ; ===========================================================================
00022CCE                            ; ---------------------------------------------------------------------------
00022CCE                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00022CCE                            ; ---------------------------------------------------------------------------
00022CCE                            Map_obj8A:
00022CCE                            	include "_maps\obj8A.asm"
00022CCE                            ; ---------------------------------------------------------------------------
00022CCE                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00022CCE                            ; ---------------------------------------------------------------------------
00022CCE 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00022CD2 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00022CD6 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00022CDA 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00022CDE 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00022CE2 0000                       		dc.w byte_176A9-Map_obj8A
00022CE4 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00022CE5 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00022CEA F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00022CEF F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00022CF4 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00022CF9 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00022CFE F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00022D03 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00022D08 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00022D0D F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00022D12 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00022D17 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00022D1C F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00022D21 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00022D26 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00022D2B 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00022D2C D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00022D31 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00022D36 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00022D3B D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00022D40 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00022D45 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00022D4A D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00022D4F D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00022D54 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00022D59 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00022D5E 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00022D63 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00022D68 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00022D6D 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00022D72 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00022D77 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00022D7C 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00022D7D D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00022D82 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00022D87 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00022D8C D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00022D91 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00022D96 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00022D9B D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00022DA0 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00022DA5 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00022DAA 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00022DAF 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00022DB0 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00022DB5 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00022DBA D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00022DBF D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00022DC4 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00022DC9 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00022DCE D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00022DD3 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00022DD8 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00022DDD D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00022DE2 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00022DE7 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00022DEC D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00022DF1 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00022DF6 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00022DFB 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00022E00 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00022E05 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00022E0A 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00022E0F 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00022E14 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00022E19 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00022E1E 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00022E23 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00022E28 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00022E29 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00022E2E D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00022E33 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00022E38 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00022E3D D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00022E42 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00022E47 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00022E4C 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00022E51 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00022E56 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00022E5B 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00022E60 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00022E65 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00022E6A 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00022E6F 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00022E74 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00022E79 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00022E7E 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00022E83 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00022E88 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00022E8D 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00022E8E D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00022E93 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00022E98 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00022E9D D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00022EA2 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00022EA7 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00022EAC D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00022EB1 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00022EB6 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00022EBB D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00022EC0 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00022EC5 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00022ECA 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00022ECF 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00022ED4 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00022ED9 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00022EDE 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00022EE3 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00022EE8 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00022EED 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00022EF2 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00022EF7 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00022EFC 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00022F01 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00022F06 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00022F0B 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00022F10 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00022F11 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00022F16 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00022F1B D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00022F20 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00022F25 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00022F2A D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00022F2F D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00022F34 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00022F39 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00022F3E D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00022F43 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00022F48 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00022F4D 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00022F52 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00022F57 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
00022F5C 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00022F61 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00022F66 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00022F6B 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00022F70 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00022F75 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00022F7A 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00022F7F 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00022F84 48                         byte_17598:	dc.b $48	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL THANKS
00022F85 D805 002E 84               		dc.b $D8, 5, 0, $2E, $84	; S
00022F8A D805 0012 94               		dc.b $D8, 5, 0, $12, $94	; P
00022F8F D805 000E A4               		dc.b $D8, 5, 0, $0E, $A4	; E
00022F94 D805 001E B4               		dc.b $D8, 5, 0, $1E, $B4	; C
00022F99 D801 0046 C4               		dc.b $D8, 1, 0, $46, $C4	; I
00022F9E D805 0004 CC               		dc.b $D8, 5, 0, 4, $CC		; A
00022FA3 D805 0016 DC               		dc.b $D8, 5, 0, $16, $DC	; L
00022FA8 D805 003E FC               		dc.b $D8, 5, 0, $3E, $FC	; T
00022FAD D805 003A 0C               		dc.b $D8, 5, 0, $3A, $C	; H
00022FB2 D805 0004 1C               		dc.b $D8, 5, 0, 4, $1C		; A
00022FB7 D805 001A 2C               		dc.b $D8, 5, 0, $1A, $2C	; N
00022FBC D805 0058 3C               		dc.b $D8, 5, 0, $58, $3C	; K
00022FC1 D805 002E 4C               		dc.b $D8, 5, 0, $2E, $4C	; S
00022FC6                            
00022FC6 0005 005C B0               		dc.b $0, 5, 0, $5C, $B0	; F
00022FCB 0005 0032 C0               		dc.b $0, 5, 0, $32, $C0	; U
00022FD0 0005 004C D0               		dc.b $0, 5, 0, $4C, $D0	; J
00022FD5 0001 0046 E0               		dc.b $0, 1, 0, $46, $E0	; I
00022FDA 0005 0026 E8               		dc.b $0, 5, 0, $26, $E8	; O
00022FDF 0009 0008 00               		dc.b $0, 9, 0, 8, 0		; M
00022FE4 0001 0046 14               		dc.b $0, 1, 0, $46, $14	; I
00022FE9 0005 001A 1C               		dc.b $0, 5, 0, $1A, $1C	; N
00022FEE 0005 000E 2C               		dc.b $0, 5, 0, $0E, $2C	; E
00022FF3 0005 0000 3C               		dc.b $0, 5, 0, 0, $3C		; G
00022FF8 0001 0046 4C               		dc.b $0, 1, 0, $46, $4C	; I
00022FFD 0005 002E 54               		dc.b $0, 5, 0, $2E, $54	; S
00023002 0005 003A 64               		dc.b $0, 5, 0, $3A, $64	; H
00023007 0001 0046 74               		dc.b $0, 1, 0, $46, $74	; I
0002300C                            ; ERROR: UNKOWN SIGN
0002300C                            ; ERROR: UNKOWN SIGN
0002300C 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	; P
00023011 2005 0004 08               		dc.b $20, 5, 0, 4, $8		; A
00023016 2005 0012 18               		dc.b $20, 5, 0, $12, $18	; P
0002301B 2005 0004 28               		dc.b $20, 5, 0, 4, $28		; A
00023020                            ; ERROR: UNKOWN SIGN
00023020                            ; ERROR: UNKOWN SIGN
00023020 3005 0022 E0               		dc.b $30, 5, 0, $22, $E0	; R
00023025 3005 000E F0               		dc.b $30, 5, 0, $0E, $F0	; E
0002302A 3005 0042 00               		dc.b $30, 5, 0, $42, $0	; D
0002302F 3005 003A 10               		dc.b $30, 5, 0, $3A, $10	; H
00023034 3005 0026 20               		dc.b $30, 5, 0, $26, $20	; O
00023039 3005 003E 30               		dc.b $30, 5, 0, $3E, $30	; T
0002303E 3005 002E 40               		dc.b $30, 5, 0, $2E, $40	; S
00023043 3005 0026 50               		dc.b $30, 5, 0, $26, $50	; O
00023048 3005 001A 60               		dc.b $30, 5, 0, $1A, $60	; N
0002304D 3001 0046 70               		dc.b $30, 1, 0, $46, $70	; I
00023052 3005 001E 78               		dc.b $30, 5, 0, $1E, $78	; C
00023057                            ; ERROR: UNKOWN SIGN
00023057                            ; ERROR: UNKOWN SIGN
00023057 4009 0008 A8               		dc.b $40, 9, 0, 8, $A8		; M
0002305C 4005 0004 BC               		dc.b $40, 5, 0, 4, $BC		; A
00023061 4005 0022 CC               		dc.b $40, 5, 0, $22, $CC	; R
00023066 4005 0058 DC               		dc.b $40, 5, 0, $58, $DC	; K
0002306B 4005 000E EC               		dc.b $40, 5, 0, $0E, $EC	; E
00023070 4005 002A FC               		dc.b $40, 5, 0, $2A, $FC	; Y
00023075 4005 004C 0C               		dc.b $40, 5, 0, $4C, $C	; J
0002307A 4005 000E 1C               		dc.b $40, 5, 0, $0E, $1C	; E
0002307F 4005 002E 2C               		dc.b $40, 5, 0, $2E, $2C	; S
00023084 4005 003E 3C               		dc.b $40, 5, 0, $3E, $3C	; T
00023089 4005 000E 4C               		dc.b $40, 5, 0, $0E, $4C	; E
0002308E 4005 0022 5C               		dc.b $40, 5, 0, $22, $5C	; R
00023093                            ; ERROR: UNKOWN SIGN
00023093                            ; ERROR: UNKOWN SIGN
00023093 5005 002E 8C               		dc.b $50, 5, 0, $2E, $8C	; S
00023098 5005 000E 9C               		dc.b $50, 5, 0, $0E, $9C	; E
0002309D 5005 0016 AC               		dc.b $50, 5, 0, $16, $AC	; L
000230A2 5005 0048 BC               		dc.b $50, 5, 0, $48, $BC	; B
000230A7 5001 0046 CC               		dc.b $50, 1, 0, $46, $CC	; I
000230AC 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
000230AD F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
000230B2 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
000230B7 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
000230BC F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
000230C1 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
000230C6 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
000230CB F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
000230D0 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
000230D5 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
000230DA F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
000230DF F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
000230E4 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
000230E9 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
000230EE F805 0000 60               		dc.b $F8, 5, 0,	0, $60
000230F3 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
000230F8 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
000230F9 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
000230FE 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00023103 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
00023108 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0002310D 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00023112 3005 0004 18               		dc.b $30, 5, 0,	4, $18
00023117 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0002311C 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00023121 17                         byte_176A9:	dc.b $17	;  SONIC TEAM PRESENTS | THERETROGUY PRODUCTIONS
00023122 E805 003E 80               		dc.b $E8, 5, 0, $3E, $80	; T
00023127 E805 003A 90               		dc.b $E8, 5, 0, $3A, $90	; H
0002312C E805 000E A0               		dc.b $E8, 5, 0, $0E, $A0	; E
00023131 E805 0022 B0               		dc.b $E8, 5, 0, $22, $B0	; R
00023136 E805 000E C0               		dc.b $E8, 5, 0, $0E, $C0	; E
0002313B E805 003E D0               		dc.b $E8, 5, 0, $3E, $D0	; T
00023140 E805 0022 E0               		dc.b $E8, 5, 0, $22, $E0	; R
00023145 E805 0026 F0               		dc.b $E8, 5, 0, $26, $F0	; O
0002314A E805 0000 00               		dc.b $E8, 5, 0, 0, $0		; G
0002314F E805 0032 10               		dc.b $E8, 5, 0, $32, $10	; U
00023154 E805 002A 20               		dc.b $E8, 5, 0, $2A, $20	; Y
00023159                            
00023159 0005 0012 C8               		dc.b $0, 5, 0, $12, $C8	; P
0002315E 0005 0022 D8               		dc.b $0, 5, 0, $22, $D8	; R
00023163 0005 0026 E8               		dc.b $0, 5, 0, $26, $E8	; O
00023168 0005 0042 F8               		dc.b $0, 5, 0, $42, $F8	; D
0002316D 0005 0032 08               		dc.b $0, 5, 0, $32, $8	; U
00023172 0005 001E 18               		dc.b $0, 5, 0, $1E, $18	; C
00023177 0005 003E 28               		dc.b $0, 5, 0, $3E, $28	; T
0002317C 0001 0046 38               		dc.b $0, 1, 0, $46, $38	; I
00023181 0005 0026 40               		dc.b $0, 5, 0, $26, $40	; O
00023186 0005 001A 50               		dc.b $0, 5, 0, $1A, $50	; N
0002318B 0005 002E 60               		dc.b $0, 5, 0, $2E, $60	; S
00023190                            		even
00023190                            		even
00023190                            
00023190                            ; ===========================================================================
00023190                            ; ---------------------------------------------------------------------------
00023190                            ; Object 3D - Eggman (GHZ)
00023190                            ; ---------------------------------------------------------------------------
00023190                            
00023190                            Obj3D:					; XREF: Obj_Index
00023190 7000                       		moveq	#0,d0
00023192 1028 0024                  		move.b	$24(a0),d0
00023196 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0002319A 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0002319E                            ; ===========================================================================
0002319E 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000231A0 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000231A2 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000231A4 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000231A6                            
000231A6 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000231A8 0401                       		dc.b 4,	1
000231AA 0607                       		dc.b 6,	7
000231AC                            ; ===========================================================================
000231AC                            
000231AC                            Obj3D_Main:				; XREF: Obj3D_Index
000231AC 45F9 0002 31A6             		lea	(Obj3D_ObjData).l,a2
000231B2 2248                       		movea.l	a0,a1
000231B4 7202                       		moveq	#2,d1
000231B6 6000                       		bra.s	Obj3D_LoadBoss
000231B8                            ; ===========================================================================
000231B8                            
000231B8                            Obj3D_Loop:
000231B8 4EB9 0001 672A             		jsr	SingleObjLoad2
000231BE 6600                       		bne.s	loc_17772
000231C0                            
000231C0                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000231C0 135A 0024                  		move.b	(a2)+,$24(a1)
000231C4 12BC 003D                  		move.b	#$3D,0(a1)
000231C8 3368 0008 0008             		move.w	8(a0),8(a1)
000231CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000231D4 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000231DC 337C 0400 0002             		move.w	#$400,2(a1)
000231E2 137C 0004 0001             		move.b	#4,1(a1)
000231E8 137C 0020 0023             		move.b	#$20,width_pixels(a1)
000231EE 337C 0180 0018             		move.w	#$180,priority(a1)
000231F4 135A 001C                  		move.b	(a2)+,$1C(a1)
000231F8 2348 0034                  		move.l	a0,$34(a1)
000231FC 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00023200                            
00023200                            loc_17772:
00023200 3168 0008 0030             		move.w	8(a0),$30(a0)
00023206 3168 000C 0038             		move.w	$C(a0),$38(a0)
0002320C 117C 000F 0020             		move.b	#$F,$20(a0)
00023212 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00023218                            
00023218                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00023218 7000                       		moveq	#0,d0
0002321A 1028 0025                  		move.b	$25(a0),d0
0002321E 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00023222 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00023226 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0002322C 4EB9 0001 2624             		jsr	AnimateSprite
00023232 1028 0022                  		move.b	$22(a0),d0
00023236 0200 0003                  		andi.b	#3,d0
0002323A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00023240 8128 0001                  		or.b	d0,1(a0)
00023244 4EF9 0001 5C48             		jmp	DisplaySprite
0002324A                            ; ===========================================================================
0002324A 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
0002324C 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0002324E 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00023250 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00023252 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00023254 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00023256 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00023258                            ; ===========================================================================
00023258                            
00023258                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00023258 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
0002325E 6100 0000                  		bsr.w	BossMove
00023262 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00023268 6600                       		bne.s	loc_177E6
0002326A 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00023270 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00023274                            
00023274                            loc_177E6:
00023274 1028 003F                  		move.b	$3F(a0),d0
00023278 4EB9 0000 8DA4             		jsr	(CalcSine).l
0002327E EC40                       		asr.w	#6,d0
00023280 D068 0038                  		add.w	$38(a0),d0
00023284 3140 000C                  		move.w	d0,$C(a0)
00023288 3168 0030 0008             		move.w	$30(a0),8(a0)
0002328E 5428 003F                  		addq.b	#2,$3F(a0)
00023292 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00023298 6400                       		bcc.s	locret_1784A
0002329A 4A28 0022                  		tst.b	$22(a0)
0002329E 6B00                       		bmi.s	loc_1784C
000232A0 4A28 0020                  		tst.b	$20(a0)
000232A4 6600                       		bne.s	locret_1784A
000232A6 4A28 003E                  		tst.b	$3E(a0)
000232AA 6600                       		bne.s	Obj3D_ShipFlash
000232AC 4238 FF7F                  		clr.b	($FFFFFF7F).w	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
000232B0 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000232B6                            ;		move.w	#$AC,d0
000232B6 4EB9 0001 E844             		jsr	(BossModeMusic).l ;	play boss damage sound
000232BC                            
000232BC                            Obj3D_ShipFlash:
000232BC 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000232C0 7000                       		moveq	#0,d0		; move 0 (black) to d0
000232C2 4A51                       		tst.w	(a1)
000232C4 6600                       		bne.s	loc_1783C
000232C6 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000232CA                            
000232CA                            loc_1783C:
000232CA 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000232CC 5328 003E                  		subq.b	#1,$3E(a0)
000232D0 6600                       		bne.s	locret_1784A
000232D2 117C 000F 0020             		move.b	#$F,$20(a0)
000232D8                            
000232D8                            locret_1784A:
000232D8 4E75                       		rts	
000232DA                            ; ===========================================================================
000232DA                            
000232DA                            loc_1784C:				; XREF: loc_177E6
000232DA 7064                       		moveq	#100,d0
000232DC 6100 0000                  		bsr.w	AddPoints
000232E0 117C 0008 0025             		move.b	#8,$25(a0)
000232E6 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000232EC 4E75                       		rts	
000232EE                            
000232EE                            ; ---------------------------------------------------------------------------
000232EE                            ; Defeated boss	subroutine
000232EE                            ; ---------------------------------------------------------------------------
000232EE                            
000232EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000232EE                            
000232EE                            
000232EE                            BossDefeated:
000232EE 4238 FF7F                  		clr.b	($FFFFFF7F).w	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
000232F2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000232F6 0200 0007                  		andi.b	#7,d0
000232FA 6600                       		bne.s	locret_178A2
000232FC 4EB9 0001 6714             		jsr	SingleObjLoad
00023302 6600                       		bne.s	locret_178A2
00023304 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00023308 3368 0008 0008             		move.w	8(a0),8(a1)
0002330E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00023314 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0002331A 3200                       		move.w	d0,d1
0002331C 7200                       		moveq	#0,d1
0002331E 1200                       		move.b	d0,d1
00023320 E409                       		lsr.b	#2,d1
00023322 0441 0020                  		subi.w	#$20,d1
00023326 D369 0008                  		add.w	d1,8(a1)
0002332A E048                       		lsr.w	#8,d0
0002332C E608                       		lsr.b	#3,d0
0002332E D169 000C                  		add.w	d0,$C(a1)
00023332                            
00023332                            locret_178A2:
00023332 4E75                       		rts	
00023334                            ; End of function BossDefeated
00023334                            
00023334                            ; ---------------------------------------------------------------------------
00023334                            ; Subroutine to	move a boss
00023334                            ; ---------------------------------------------------------------------------
00023334                            
00023334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00023334                            
00023334                            
00023334                            BossMove:
00023334 2428 0030                  		move.l	$30(a0),d2
00023338 2628 0038                  		move.l	$38(a0),d3
0002333C 3028 0010                  		move.w	$10(a0),d0
00023340 48C0                       		ext.l	d0
00023342 E180                       		asl.l	#8,d0
00023344 D480                       		add.l	d0,d2
00023346 3028 0012                  		move.w	$12(a0),d0
0002334A 48C0                       		ext.l	d0
0002334C E180                       		asl.l	#8,d0
0002334E D680                       		add.l	d0,d3
00023350 2142 0030                  		move.l	d2,$30(a0)
00023354 2143 0038                  		move.l	d3,$38(a0)
00023358 4E75                       		rts	
0002335A                            ; End of function BossMove
0002335A                            
0002335A                            ; ===========================================================================
0002335A                            
0002335A                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
0002335A 317C FF00 0010             		move.w	#-$100,$10(a0)
00023360 317C FFC0 0012             		move.w	#-$40,$12(a0)
00023366 6100 FFCC                  		bsr.w	BossMove
0002336A 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00023370 6600                       		bne.s	loc_17916
00023372 317C 0000 0010             		move.w	#0,$10(a0)
00023378 317C 0000 0012             		move.w	#0,$12(a0)
0002337E 5428 0025                  		addq.b	#2,$25(a0)
00023382 4EB9 0001 672A             		jsr	SingleObjLoad2
00023388 6600                       		bne.s	loc_17910
0002338A 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0002338E 3368 0030 0008             		move.w	$30(a0),8(a1)
00023394 3368 0038 000C             		move.w	$38(a0),$C(a1)
0002339A 2348 0034                  		move.l	a0,$34(a1)
0002339E                            
0002339E                            loc_17910:
0002339E 317C 0077 003C             		move.w	#$77,$3C(a0)
000233A4                            
000233A4                            loc_17916:
000233A4 6000 FECE                  		bra.w	loc_177E6
000233A8                            ; ===========================================================================
000233A8                            
000233A8                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
000233A8 5368 003C                  		subq.w	#1,$3C(a0)
000233AC 6A00                       		bpl.s	Obj3D_Reverse
000233AE 5428 0025                  		addq.b	#2,$25(a0)
000233B2 317C 003F 003C             		move.w	#$3F,$3C(a0)
000233B8 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
000233BE 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000233C4 6600                       		bne.s	Obj3D_Reverse
000233C6 317C 007F 003C             		move.w	#$7F,$3C(a0)
000233CC 317C 0040 0010             		move.w	#$40,$10(a0)
000233D2                            
000233D2                            Obj3D_Reverse:
000233D2 0828 0000 0022             		btst	#0,$22(a0)
000233D8 6600                       		bne.s	loc_17950
000233DA 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
000233DE                            
000233DE                            loc_17950:
000233DE 6000 FE94                  		bra.w	loc_177E6
000233E2                            ; ===========================================================================
000233E2                            
000233E2                            loc_17954:				; XREF: Obj3D_ShipIndex
000233E2 5368 003C                  		subq.w	#1,$3C(a0)
000233E6 6B00                       		bmi.s	loc_17960
000233E8 6100 FF4A                  		bsr.w	BossMove
000233EC 6000                       		bra.s	loc_17976
000233EE                            ; ===========================================================================
000233EE                            
000233EE                            loc_17960:
000233EE 0868 0000 0022             		bchg	#0,$22(a0)
000233F4 317C 003F 003C             		move.w	#$3F,$3C(a0)
000233FA 5528 0025                  		subq.b	#2,$25(a0)
000233FE 317C 0000 0010             		move.w	#0,$10(a0)
00023404                            
00023404                            loc_17976:
00023404 6000 FE6E                  		bra.w	loc_177E6
00023408                            ; ===========================================================================
00023408                            
00023408                            loc_1797A:				; XREF: Obj3D_ShipIndex
00023408 5368 003C                  		subq.w	#1,$3C(a0)
0002340C 6B00                       		bmi.s	loc_17984
0002340E 6000 FEDE                  		bra.w	BossDefeated
00023412                            ; ===========================================================================
00023412                            
00023412                            loc_17984:
00023412 08E8 0000 0022             		bset	#0,$22(a0)
00023418 08A8 0007 0022             		bclr	#7,$22(a0)
0002341E 4268 0010                  		clr.w	$10(a0)
00023422 5428 0025                  		addq.b	#2,$25(a0)
00023426 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0002342C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00023430 6600                       		bne.s	locret_179AA
00023432 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00023438                            
00023438                            locret_179AA:
00023438 4E75                       		rts	
0002343A                            ; ===========================================================================
0002343A                            
0002343A                            loc_179AC:				; XREF: Obj3D_ShipIndex
0002343A 5268 003C                  		addq.w	#1,$3C(a0)
0002343E 6700                       		beq.s	loc_179BC
00023440 6A00                       		bpl.s	loc_179C2
00023442 0668 0018 0012             		addi.w	#$18,$12(a0)
00023448 6000                       		bra.s	loc_179EE
0002344A                            ; ===========================================================================
0002344A                            
0002344A                            loc_179BC:
0002344A 4268 0012                  		clr.w	$12(a0)
0002344E 6000                       		bra.s	loc_179EE
00023450                            ; ===========================================================================
00023450                            
00023450                            loc_179C2:
00023450 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00023456 6500                       		bcs.s	loc_179DA
00023458 6700                       		beq.s	loc_179E0
0002345A 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00023460 6500                       		bcs.s	loc_179EE
00023462 5428 0025                  		addq.b	#2,$25(a0)
00023466 6000                       		bra.s	loc_179EE
00023468                            ; ===========================================================================
00023468                            
00023468                            loc_179DA:
00023468 5168 0012                  		subq.w	#8,$12(a0)
0002346C 6000                       		bra.s	loc_179EE
0002346E                            ; ===========================================================================
0002346E                            
0002346E                            loc_179E0:
0002346E 4268 0012                  		clr.w	$12(a0)
00023472                            	;	move.w	#$81,d0
00023472 4EB9 0001 D478             		jsr	(super_GetBgm).l	; play GHZ music
00023478                            
00023478                            loc_179EE:
00023478 6100 FEBA                  		bsr.w	BossMove
0002347C 6000 FDF6                  		bra.w	loc_177E6
00023480                            ; ===========================================================================
00023480                            
00023480                            loc_179F6:				; XREF: Obj3D_ShipIndex
00023480 317C 0400 0010             		move.w	#$400,$10(a0)
00023486 317C FFC0 0012             		move.w	#-$40,$12(a0)
0002348C 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00023492 6700                       		beq.s	loc_17A10
00023494 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00023498 6000                       		bra.s	loc_17A16
0002349A                            ; ===========================================================================
0002349A                            
0002349A                            loc_17A10:
0002349A 4A28 0001                  		tst.b	1(a0)
0002349E 6A00                       		bpl.s	Obj3D_ShipDel
000234A0                            
000234A0                            loc_17A16:
000234A0 6100 FE92                  		bsr.w	BossMove
000234A4 6000 FDCE                  		bra.w	loc_177E6
000234A8                            ; ===========================================================================
000234A8                            
000234A8                            Obj3D_ShipDel:
000234A8 4EF9 0001 5BFC             		jmp	DeleteObject
000234AE                            ; ===========================================================================
000234AE                            
000234AE                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000234AE 7000                       		moveq	#0,d0
000234B0 7201                       		moveq	#1,d1
000234B2 2268 0034                  		movea.l	$34(a0),a1
000234B6 1029 0025                  		move.b	$25(a1),d0
000234BA 5900                       		subq.b	#4,d0
000234BC 6600                       		bne.s	loc_17A3E
000234BE 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000234C4 6600                       		bne.s	loc_17A46
000234C6 7204                       		moveq	#4,d1
000234C8                            
000234C8                            loc_17A3E:
000234C8 5D00                       		subq.b	#6,d0
000234CA 6B00                       		bmi.s	loc_17A46
000234CC 720A                       		moveq	#$A,d1
000234CE 6000                       		bra.s	loc_17A5A
000234D0                            ; ===========================================================================
000234D0                            
000234D0                            loc_17A46:
000234D0 4A29 0020                  		tst.b	$20(a1)
000234D4 6600                       		bne.s	loc_17A50
000234D6 7205                       		moveq	#5,d1
000234D8 6000                       		bra.s	loc_17A5A
000234DA                            ; ===========================================================================
000234DA                            
000234DA                            loc_17A50:
000234DA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000234E0 6500                       		bcs.s	loc_17A5A
000234E2 7204                       		moveq	#4,d1
000234E4                            
000234E4                            loc_17A5A:
000234E4 1141 001C                  		move.b	d1,$1C(a0)
000234E8 5500                       		subq.b	#2,d0
000234EA 6600                       		bne.s	Obj3D_FaceDisp
000234EC 117C 0006 001C             		move.b	#6,$1C(a0)
000234F2 4A28 0001                  		tst.b	1(a0)
000234F6 6A00                       		bpl.s	Obj3D_FaceDel
000234F8                            
000234F8                            Obj3D_FaceDisp:
000234F8 6000                       		bra.s	Obj3D_Display
000234FA                            ; ===========================================================================
000234FA                            
000234FA                            Obj3D_FaceDel:
000234FA 4EF9 0001 5BFC             		jmp	DeleteObject
00023500                            ; ===========================================================================
00023500                            
00023500                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00023500 117C 0007 001C             		move.b	#7,$1C(a0)
00023506 2268 0034                  		movea.l	$34(a0),a1
0002350A 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00023510 6600                       		bne.s	loc_17A96
00023512 117C 000B 001C             		move.b	#$B,$1C(a0)
00023518 4A28 0001                  		tst.b	1(a0)
0002351C 6A00                       		bpl.s	Obj3D_FlameDel
0002351E 6000                       		bra.s	Obj3D_FlameDisp
00023520                            ; ===========================================================================
00023520                            
00023520                            loc_17A96:
00023520 3029 0010                  		move.w	$10(a1),d0
00023524 6700                       		beq.s	Obj3D_FlameDisp
00023526 117C 0008 001C             		move.b	#8,$1C(a0)
0002352C                            
0002352C                            Obj3D_FlameDisp:
0002352C 6000                       		bra.s	Obj3D_Display
0002352E                            ; ===========================================================================
0002352E                            
0002352E                            Obj3D_FlameDel:
0002352E 4EF9 0001 5BFC             		jmp	DeleteObject
00023534                            ; ===========================================================================
00023534                            
00023534                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00023534 2268 0034                  		movea.l	$34(a0),a1
00023538 3169 0008 0008             		move.w	8(a1),8(a0)
0002353E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00023544 1169 0022 0022             		move.b	$22(a1),$22(a0)
0002354A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00023550 4EB9 0001 2624             		jsr	AnimateSprite
00023556 1028 0022                  		move.b	$22(a0),d0
0002355A 0200 0003                  		andi.b	#3,d0
0002355E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00023564 8128 0001                  		or.b	d0,1(a0)
00023568 4EF9 0001 5C48             		jmp	DisplaySprite
0002356E                            ; ===========================================================================
0002356E                            ; ---------------------------------------------------------------------------
0002356E                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0002356E                            ; ---------------------------------------------------------------------------
0002356E                            
0002356E                            Obj48:					; XREF: Obj_Index
0002356E 7000                       		moveq	#0,d0
00023570 1028 0024                  		move.b	$24(a0),d0
00023574 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00023578 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0002357C                            ; ===========================================================================
0002357C 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0002357E 0000                       		dc.w Obj48_Base-Obj48_Index
00023580 0000                       		dc.w Obj48_Display2-Obj48_Index
00023582 0000                       		dc.w loc_17C68-Obj48_Index
00023584 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00023586                            ; ===========================================================================
00023586                            
00023586                            Obj48_Main:				; XREF: Obj48_Index
00023586 5428 0024                  		addq.b	#2,$24(a0)
0002358A 317C 4080 0026             		move.w	#$4080,$26(a0)
00023590 317C FE00 003E             		move.w	#-$200,$3E(a0)
00023596 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0002359E 317C 046C 0002             		move.w	#$46C,2(a0)
000235A4 45E8 0028                  		lea	$28(a0),a2
000235A8 14FC 0000                  		move.b	#0,(a2)+
000235AC 7205                       		moveq	#5,d1
000235AE 2248                       		movea.l	a0,a1
000235B0 6000                       		bra.s	loc_17B60
000235B2                            ; ===========================================================================
000235B2                            
000235B2                            Obj48_MakeLinks:
000235B2 4EB9 0001 672A             		jsr	SingleObjLoad2
000235B8 6600                       		bne.s	Obj48_MakeBall
000235BA 3368 0008 0008             		move.w	8(a0),8(a1)
000235C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000235C6 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000235CA 137C 0006 0024             		move.b	#6,$24(a1)
000235D0 237C 0000 F580 0004        		move.l	#Map_obj15,4(a1)
000235D8 337C 0380 0002             		move.w	#$380,2(a1)
000235DE 137C 0001 001A             		move.b	#1,$1A(a1)
000235E4 5228 0028                  		addq.b	#1,$28(a0)
000235E8                            
000235E8                            loc_17B60:				; XREF: Obj48_Main
000235E8 3A09                       		move.w	a1,d5
000235EA 0445 D000                  		subi.w	#$D000,d5
000235EE EC4D                       		lsr.w	#6,d5
000235F0 0245 007F                  		andi.w	#$7F,d5
000235F4 14C5                       		move.b	d5,(a2)+
000235F6 137C 0004 0001             		move.b	#4,1(a1)
000235FC 137C 0008 0023             		move.b	#8,width_pixels(a1)
00023602 337C 0300 0018             		move.w	#$300,priority(a1)
00023608 2368 0034 0034             		move.l	$34(a0),$34(a1)
0002360E 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00023612                            
00023612                            Obj48_MakeBall:
00023612 137C 0008 0024             		move.b	#8,$24(a1)
00023618 237C 0000 FD88 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00023620 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00023626 137C 0001 001A             		move.b	#1,$1A(a1)
0002362C 337C 0280 0018             		move.w	#$280,priority(a1)
00023632 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00023638 4E75                       		rts	
0002363A                            ; ===========================================================================
0002363A                            
0002363A 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00023640                            
00023640                            ; ===========================================================================
00023640                            
00023640                            Obj48_Base:				; XREF: Obj48_Index
00023640 47F9 0002 363A             		lea	(Obj48_PosData).l,a3
00023646 45E8 0028                  		lea	$28(a0),a2
0002364A 7C00                       		moveq	#0,d6
0002364C 1C1A                       		move.b	(a2)+,d6
0002364E                            
0002364E                            loc_17BC6:
0002364E 7800                       		moveq	#0,d4
00023650 181A                       		move.b	(a2)+,d4
00023652 ED4C                       		lsl.w	#6,d4
00023654 0684 00FF D000             		addi.l	#$FFD000,d4
0002365A 2244                       		movea.l	d4,a1
0002365C 101B                       		move.b	(a3)+,d0
0002365E B029 003C                  		cmp.b	$3C(a1),d0
00023662 6700                       		beq.s	loc_17BE0
00023664 5229 003C                  		addq.b	#1,$3C(a1)
00023668                            
00023668                            loc_17BE0:
00023668 51CE FFE4                  		dbf	d6,loc_17BC6
0002366C                            
0002366C B029 003C                  		cmp.b	$3C(a1),d0
00023670 6600                       		bne.s	loc_17BFA
00023672 2268 0034                  		movea.l	$34(a0),a1
00023676 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0002367C 6600                       		bne.s	loc_17BFA
0002367E 5428 0024                  		addq.b	#2,$24(a0)
00023682                            
00023682                            loc_17BFA:
00023682 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00023688 6700                       		beq.s	Obj48_Display
0002368A 5268 0032                  		addq.w	#1,$32(a0)
0002368E                            
0002368E                            Obj48_Display:
0002368E 6100 0000                  		bsr.w	sub_17C2A
00023692 1028 0026                  		move.b	$26(a0),d0
00023696 4EB9 0000 F4E6             		jsr	(Obj15_Move2).l
0002369C 4EF9 0001 5C48             		jmp	DisplaySprite
000236A2                            ; ===========================================================================
000236A2                            
000236A2                            Obj48_Display2:				; XREF: Obj48_Index
000236A2 6100 0000                  		bsr.w	sub_17C2A
000236A6 4EB9 0000 F4A6             		jsr	(Obj48_Move).l
000236AC 4EF9 0001 5C48             		jmp	DisplaySprite
000236B2                            
000236B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000236B2                            
000236B2                            
000236B2                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000236B2 2268 0034                  		movea.l	$34(a0),a1
000236B6 0628 0020 001B             		addi.b	#$20,$1B(a0)
000236BC 6400                       		bcc.s	loc_17C3C
000236BE 0868 0000 001A             		bchg	#0,$1A(a0)
000236C4                            
000236C4                            loc_17C3C:
000236C4 3169 0008 003A             		move.w	8(a1),$3A(a0)
000236CA 3029 000C                  		move.w	$C(a1),d0
000236CE D068 0032                  		add.w	$32(a0),d0
000236D2 3140 0038                  		move.w	d0,$38(a0)
000236D6 1169 0022 0022             		move.b	$22(a1),$22(a0)
000236DC 4A29 0022                  		tst.b	$22(a1)
000236E0 6A00                       		bpl.s	locret_17C66
000236E2 10BC 003F                  		move.b	#$3F,0(a0)
000236E6 117C 0000 0024             		move.b	#0,$24(a0)
000236EC                            
000236EC                            locret_17C66:
000236EC 4E75                       		rts	
000236EE                            ; End of function sub_17C2A
000236EE                            
000236EE                            ; ===========================================================================
000236EE                            
000236EE                            loc_17C68:				; XREF: Obj48_Index
000236EE 2268 0034                  		movea.l	$34(a0),a1
000236F2 4A29 0022                  		tst.b	$22(a1)
000236F6 6A00                       		bpl.s	Obj48_Display3
000236F8 10BC 003F                  		move.b	#$3F,0(a0)
000236FC 117C 0000 0024             		move.b	#0,$24(a0)
00023702                            
00023702                            Obj48_Display3:
00023702 4EF9 0001 5C48             		jmp	DisplaySprite
00023708                            ; ===========================================================================
00023708                            
00023708                            Obj48_ChkVanish:			; XREF: Obj48_Index
00023708 7000                       		moveq	#0,d0
0002370A 4A28 001A                  		tst.b	$1A(a0)
0002370E 6600                       		bne.s	Obj48_Vanish
00023710 5200                       		addq.b	#1,d0
00023712                            
00023712                            Obj48_Vanish:
00023712 1140 001A                  		move.b	d0,$1A(a0)
00023716 2268 0034                  		movea.l	$34(a0),a1
0002371A 4A29 0022                  		tst.b	$22(a1)
0002371E 6A00                       		bpl.s	Obj48_Display4
00023720 117C 0000 0020             		move.b	#0,$20(a0)
00023726 6100 FBC6                  		bsr.w	BossDefeated
0002372A 5328 003C                  		subq.b	#1,$3C(a0)
0002372E 6A00                       		bpl.s	Obj48_Display4
00023730 10BC 003F                  		move.b	#$3F,(a0)
00023734 117C 0000 0024             		move.b	#0,$24(a0)
0002373A                            
0002373A                            Obj48_Display4:
0002373A 4EF9 0001 5C48             		jmp	DisplaySprite
00023740                            ; ===========================================================================
00023740                            Ani_Eggman:
00023740                            	include "_anim\Eggman.asm"
00023740                            ; ---------------------------------------------------------------------------
00023740                            ; Animation script - Eggman (bosses)
00023740                            ; ---------------------------------------------------------------------------
00023740 0000                       		dc.w byte_17CD4-Ani_Eggman
00023742 0000                       		dc.w byte_17CD8-Ani_Eggman
00023744 0000                       		dc.w byte_17CDC-Ani_Eggman
00023746 0000                       		dc.w byte_17CE0-Ani_Eggman
00023748 0000                       		dc.w byte_17CE4-Ani_Eggman
0002374A 0000                       		dc.w byte_17CE8-Ani_Eggman
0002374C 0000                       		dc.w byte_17CEC-Ani_Eggman
0002374E 0000                       		dc.w byte_17CF0-Ani_Eggman
00023750 0000                       		dc.w byte_17CF4-Ani_Eggman
00023752 0000                       		dc.w byte_17CF8-Ani_Eggman
00023754 0000                       		dc.w byte_17CFC-Ani_Eggman
00023756 0000                       		dc.w byte_17D00-Ani_Eggman
00023758 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0002375C 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00023760 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00023764 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00023768 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0002376C 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00023770 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00023774 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00023778 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0002377C 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00023780 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00023784 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00023790                            		even
00023790                            		even
00023790                            
00023790                            ; ---------------------------------------------------------------------------
00023790                            ; Sprite mappings - Eggman (boss levels)
00023790                            ; ---------------------------------------------------------------------------
00023790                            Map_Eggman:
00023790                            	include "_maps\Eggman.asm"
00023790                            ; ---------------------------------------------------------------------------
00023790                            ; Sprite mappings - Eggman (boss levels)
00023790                            ; ---------------------------------------------------------------------------
00023790 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00023794 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00023798 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
0002379C 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
000237A0 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
000237A4 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
000237A8 0000                       		dc.w byte_17DC8-Map_Eggman
000237AA 06                         byte_17D26:	dc.b 6
000237AB EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
000237B0 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
000237B5 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
000237BA FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
000237BF 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
000237C4 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
000237C9 02                         byte_17D45:	dc.b 2
000237CA E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
000237CF EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
000237D4 02                         byte_17D50:	dc.b 2
000237D5 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
000237DA EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
000237DF 03                         byte_17D5B:	dc.b 3
000237E0 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
000237E5 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
000237EA EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
000237EF 03                         byte_17D6B:	dc.b 3
000237F0 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
000237F5 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
000237FA EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
000237FF 03                         byte_17D7B:	dc.b 3
00023800 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00023805 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0002380A EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0002380F 03                         byte_17D8B:	dc.b 3
00023810 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00023815 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0002381A EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0002381F 04                         byte_17D9B:	dc.b 4
00023820 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00023825 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0002382A EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0002382F EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00023834 01                         byte_17DB0:	dc.b 1
00023835 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
0002383A 01                         byte_17DB6:	dc.b 1
0002383B 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00023840 00                         byte_17DBC:	dc.b 0
00023841 02                         byte_17DBD:	dc.b 2
00023842 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00023847 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
0002384C 02                         byte_17DC8:	dc.b 2
0002384D F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00023852 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00023858 00                         		even
00023858 00                         		even
00023858                            ;	even
00023858                            ; ---------------------------------------------------------------------------
00023858                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00023858                            ; ---------------------------------------------------------------------------
00023858                            Map_BossItems:
00023858                            	include "_maps\Boss items.asm"
00023858                            ; ---------------------------------------------------------------------------
00023858                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00023858                            ; ---------------------------------------------------------------------------
00023858 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0002385C 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00023860 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00023864 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00023868 01                         byte_17DE4:	dc.b 1
00023869 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0002386E 02                         byte_17DEA:	dc.b 2
0002386F FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00023874 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00023879 00                         		dc.b 0
0002387A 01                         byte_17DF6:	dc.b 1
0002387B FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00023880 01                         byte_17DFC:	dc.b 1
00023881 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00023886 01                         byte_17E02:	dc.b 1
00023887 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0002388C 04                         byte_17E08:	dc.b 4
0002388D F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00023892 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00023897 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0002389C 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000238A1 00                         		dc.b 0
000238A2 02                         byte_17E1E:	dc.b 2
000238A3 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000238A8 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000238AD 00                         		dc.b 0
000238AE 02                         byte_17E2A:	dc.b 2
000238AF 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000238B4 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000238BA 00                         		even
000238BA 00                         		even
000238BA                            ;	even
000238BA                            
000238BA                            ; ---------------------------------------------------------------------------
000238BA                            ; Object 77 - Eggman (LZ)
000238BA                            ; ---------------------------------------------------------------------------
000238BA                            
000238BA                            Obj77:					; XREF: Obj_Index
000238BA 7000                       		moveq	#0,d0
000238BC 1028 0024                  		move.b	$24(a0),d0
000238C0 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
000238C4 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
000238C8                            ; ===========================================================================
000238C8 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
000238CA 0000                       		dc.w Obj77_ShipMain-Obj77_Index
000238CC 0000                       		dc.w Obj77_FaceMain-Obj77_Index
000238CE 0000                       		dc.w Obj77_FlameMain-Obj77_Index
000238D0                            
000238D0 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
000238D2 0401                       		dc.b 4,	1
000238D4 0607                       		dc.b 6,	7
000238D6                            ; ===========================================================================
000238D6                            
000238D6                            Obj77_Main:				; XREF: Obj77_Index
000238D6 317C 1E10 0008             		move.w	#$1E10,8(a0)
000238DC 317C 05C0 000C             		move.w	#$5C0,$C(a0)
000238E2 3168 0008 0030             		move.w	8(a0),$30(a0)
000238E8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000238EE 117C 000F 0020             		move.b	#$F,$20(a0)
000238F4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000238FA 317C 0200 0018             		move.w	#$200,priority(a0)
00023900 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00023904 2248                       		movea.l	a0,a1
00023906 7202                       		moveq	#2,d1
00023908 6000                       		bra.s	Obj77_LoadBoss
0002390A                            ; ===========================================================================
0002390A                            
0002390A                            Obj77_Loop:
0002390A 4EB9 0001 672A             		jsr	SingleObjLoad2
00023910 6600                       		bne.s	Obj77_ShipMain
00023912 12BC 0077                  		move.b	#$77,0(a1)
00023916 3368 0008 0008             		move.w	8(a0),8(a1)
0002391C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00023922                            
00023922                            Obj77_LoadBoss:				; XREF: Obj77_Main
00023922 08A8 0000 0022             		bclr	#0,$22(a0)
00023928 4229 0025                  		clr.b	$25(a1)
0002392C 135A 0024                  		move.b	(a2)+,$24(a1)
00023930 135A 001C                  		move.b	(a2)+,$1C(a1)
00023934 3368 0018 0018             		move.w	priority(a0),priority(a1)
0002393A 237C 0002 3790 0004        		move.l	#Map_Eggman,4(a1)
00023942 337C 0400 0002             		move.w	#$400,2(a1)
00023948 137C 0004 0001             		move.b	#4,1(a1)
0002394E 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00023954 2348 0034                  		move.l	a0,$34(a1)
00023958 51C9 FFB0                  		dbf	d1,Obj77_Loop
0002395C                            
0002395C                            Obj77_ShipMain:
0002395C 43F8 D000                  		lea	($FFFFD000).w,a1
00023960 7000                       		moveq	#0,d0
00023962 1028 0025                  		move.b	$25(a0),d0
00023966 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0002396A 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0002396E 43F9 0002 3740             		lea	(Ani_Eggman).l,a1
00023974 4EB9 0001 2624             		jsr	AnimateSprite
0002397A 7003                       		moveq	#3,d0
0002397C C028 0022                  		and.b	$22(a0),d0
00023980 0228 00FC 0001             		andi.b	#$FC,1(a0)
00023986 8128 0001                  		or.b	d0,1(a0)
0002398A 4EF9 0001 5C48             		jmp	DisplaySprite
00023990                            ; ===========================================================================
00023990 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00023994 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00023998 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0002399C 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000239A0                            ; ===========================================================================
000239A0                            
000239A0                            loc_17F1E:				; XREF: Obj77_ShipIndex
000239A0 3029 0008                  		move.w	8(a1),d0
000239A4 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000239A8 6500                       		bcs.s	loc_17F38
000239AA 317C FE80 0012             		move.w	#-$180,$12(a0)
000239B0 317C 0060 0010             		move.w	#$60,$10(a0)
000239B6 5428 0025                  		addq.b	#2,$25(a0)
000239BA                            
000239BA                            loc_17F38:
000239BA 6100 F978                  		bsr.w	BossMove
000239BE 3168 0038 000C             		move.w	$38(a0),$C(a0)
000239C4 3168 0030 0008             		move.w	$30(a0),8(a0)
000239CA                            
000239CA                            loc_17F48:
000239CA 4A28 003D                  		tst.b	$3D(a0)
000239CE 6600                       		bne.s	loc_17F8E
000239D0 4A28 0022                  		tst.b	$22(a0)
000239D4 6B00                       		bmi.s	loc_17F92
000239D6 4A28 0020                  		tst.b	$20(a0)
000239DA 6600                       		bne.s	locret_17F8C
000239DC 4A28 003E                  		tst.b	$3E(a0)
000239E0 6600                       		bne.s	loc_17F70
000239E2 4238 FF7F                  		clr.b	($FFFFFF7F).w	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
000239E6 117C 0020 003E             		move.b	#$20,$3E(a0)
000239EC                            ;		move.w	#$AC,d0
000239EC 4EB9 0001 E844             		jsr	(BossModeMusic).l
000239F2                            
000239F2                            loc_17F70:
000239F2 43F8 FB22                  		lea	($FFFFFB22).w,a1
000239F6 7000                       		moveq	#0,d0
000239F8 4A51                       		tst.w	(a1)
000239FA 6600                       		bne.s	loc_17F7E
000239FC 303C 0EEE                  		move.w	#$EEE,d0
00023A00                            
00023A00                            loc_17F7E:
00023A00 3280                       		move.w	d0,(a1)
00023A02 5328 003E                  		subq.b	#1,$3E(a0)
00023A06 6600                       		bne.s	locret_17F8C
00023A08 117C 000F 0020             		move.b	#$F,$20(a0)
00023A0E                            
00023A0E                            locret_17F8C:
00023A0E 4E75                       		rts	
00023A10                            ; ===========================================================================
00023A10                            
00023A10                            loc_17F8E:				; XREF: loc_17F48
00023A10 6000 F8DC                  		bra.w	BossDefeated
00023A14                            ; ===========================================================================
00023A14                            
00023A14                            loc_17F92:				; XREF: loc_17F48
00023A14 7064                       		moveq	#100,d0
00023A16 6100 0000                  		bsr.w	AddPoints
00023A1A 117C 00FF 003D             		move.b	#-1,$3D(a0)
00023A20 4E75                       		rts	
00023A22                            ; ===========================================================================
00023A22                            
00023A22                            loc_17FA0:				; XREF: Obj77_ShipIndex
00023A22 70FE                       		moveq	#-2,d0
00023A24 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00023A2A 6500                       		bcs.s	loc_17FB6
00023A2C 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00023A32 4268 0010                  		clr.w	$10(a0)
00023A36 5240                       		addq.w	#1,d0
00023A38                            
00023A38                            loc_17FB6:
00023A38 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00023A3E 6E00                       		bgt.s	loc_17FCA
00023A40 317C 0500 0038             		move.w	#$500,$38(a0)
00023A46 4268 0012                  		clr.w	$12(a0)
00023A4A 5240                       		addq.w	#1,d0
00023A4C                            
00023A4C                            loc_17FCA:
00023A4C 6600                       		bne.s	loc_17FDC
00023A4E 317C 0140 0010             		move.w	#$140,$10(a0)
00023A54 317C FE00 0012             		move.w	#-$200,$12(a0)
00023A5A 5428 0025                  		addq.b	#2,$25(a0)
00023A5E                            
00023A5E                            loc_17FDC:
00023A5E 6000 FF5A                  		bra.w	loc_17F38
00023A62                            ; ===========================================================================
00023A62                            
00023A62                            loc_17FE0:				; XREF: Obj77_ShipIndex
00023A62 70FE                       		moveq	#-2,d0
00023A64 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00023A6A 6500                       		bcs.s	loc_17FF6
00023A6C 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00023A72 4268 0010                  		clr.w	$10(a0)
00023A76 5240                       		addq.w	#1,d0
00023A78                            
00023A78                            loc_17FF6:
00023A78 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00023A7E 6E00                       		bgt.s	loc_1800A
00023A80 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00023A86 4268 0012                  		clr.w	$12(a0)
00023A8A 5240                       		addq.w	#1,d0
00023A8C                            
00023A8C                            loc_1800A:
00023A8C 6600                       		bne.s	loc_1801A
00023A8E 317C FE80 0012             		move.w	#-$180,$12(a0)
00023A94 5428 0025                  		addq.b	#2,$25(a0)
00023A98 4228 003F                  		clr.b	$3F(a0)
00023A9C                            
00023A9C                            loc_1801A:
00023A9C 6000 FF1C                  		bra.w	loc_17F38
00023AA0                            ; ===========================================================================
00023AA0                            
00023AA0                            loc_1801E:				; XREF: Obj77_ShipIndex
00023AA0 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00023AA6 6E00                       		bgt.s	loc_1804E
00023AA8 317C 0100 0038             		move.w	#$100,$38(a0)
00023AAE 317C 0140 0010             		move.w	#$140,$10(a0)
00023AB4 317C FF80 0012             		move.w	#-$80,$12(a0)
00023ABA 4A28 003D                  		tst.b	$3D(a0)
00023ABE 6700                       		beq.s	loc_18046
00023AC0 E1E8 0010                  		asl	$10(a0)
00023AC4 E1E8 0012                  		asl	$12(a0)
00023AC8                            
00023AC8                            loc_18046:
00023AC8 5428 0025                  		addq.b	#2,$25(a0)
00023ACC 6000 FEEC                  		bra.w	loc_17F38
00023AD0                            ; ===========================================================================
00023AD0                            
00023AD0                            loc_1804E:
00023AD0 08E8 0000 0022             		bset	#0,$22(a0)
00023AD6 5428 003F                  		addq.b	#2,$3F(a0)
00023ADA 1028 003F                  		move.b	$3F(a0),d0
00023ADE 4EB9 0000 8DA4             		jsr	(CalcSine).l
00023AE4 4A41                       		tst.w	d1
00023AE6 6A00                       		bpl.s	loc_1806C
00023AE8 08A8 0000 0022             		bclr	#0,$22(a0)
00023AEE                            
00023AEE                            loc_1806C:
00023AEE E840                       		asr.w	#4,d0
00023AF0 4840                       		swap	d0
00023AF2 4240                       		clr.w	d0
00023AF4 D0A8 0030                  		add.l	$30(a0),d0
00023AF8 4840                       		swap	d0
00023AFA 3140 0008                  		move.w	d0,8(a0)
00023AFE 3028 0012                  		move.w	$12(a0),d0
00023B02 3238 D00C                  		move.w	($FFFFD00C).w,d1
00023B06 9268 000C                  		sub.w	$C(a0),d1
00023B0A 6500                       		bcs.s	loc_180A2
00023B0C 0441 0048                  		subi.w	#$48,d1
00023B10 6500                       		bcs.s	loc_180A2
00023B12 E240                       		asr.w	#1,d0
00023B14 0441 0028                  		subi.w	#$28,d1
00023B18 6500                       		bcs.s	loc_180A2
00023B1A E240                       		asr.w	#1,d0
00023B1C 0441 0028                  		subi.w	#$28,d1
00023B20 6500                       		bcs.s	loc_180A2
00023B22 7000                       		moveq	#0,d0
00023B24                            
00023B24                            loc_180A2:
00023B24 48C0                       		ext.l	d0
00023B26 E180                       		asl.l	#8,d0
00023B28 4A28 003D                  		tst.b	$3D(a0)
00023B2C 6700                       		beq.s	loc_180AE
00023B2E D080                       		add.l	d0,d0
00023B30                            
00023B30                            loc_180AE:
00023B30 D1A8 0038                  		add.l	d0,$38(a0)
00023B34 3168 0038 000C             		move.w	$38(a0),$C(a0)
00023B3A 6000 FE8E                  		bra.w	loc_17F48
00023B3E                            ; ===========================================================================
00023B3E                            
00023B3E                            loc_180BC:				; XREF: Obj77_ShipIndex
00023B3E 70FE                       		moveq	#-2,d0
00023B40 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00023B46 6500                       		bcs.s	loc_180D2
00023B48 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00023B4E 4268 0010                  		clr.w	$10(a0)
00023B52 5240                       		addq.w	#1,d0
00023B54                            
00023B54                            loc_180D2:
00023B54 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00023B5A 6E00                       		bgt.s	loc_180E6
00023B5C 317C 00C0 0038             		move.w	#$C0,$38(a0)
00023B62 4268 0012                  		clr.w	$12(a0)
00023B66 5240                       		addq.w	#1,d0
00023B68                            
00023B68                            loc_180E6:
00023B68 6600                       		bne.s	loc_180F2
00023B6A 5428 0025                  		addq.b	#2,$25(a0)
00023B6E 08A8 0000 0022             		bclr	#0,$22(a0)
00023B74                            
00023B74                            loc_180F2:
00023B74 6000 FE44                  		bra.w	loc_17F38
00023B78                            ; ===========================================================================
00023B78                            
00023B78                            loc_180F6:				; XREF: Obj77_ShipIndex
00023B78 4A28 003D                  		tst.b	$3D(a0)
00023B7C 6600                       		bne.s	loc_18112
00023B7E 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00023B84 6D00                       		blt.s	loc_18126
00023B86 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00023B8C 6E00                       		bgt.s	loc_18126
00023B8E 117C 0032 003C             		move.b	#$32,$3C(a0)
00023B94                            
00023B94                            loc_18112:
00023B94                            	;	move.w	(Level_Music).w,d0
00023B94 4EB9 0001 D478             		jsr	(super_GetBgm).l	; play LZ music
00023B9A 08E8 0000 0022             		bset	#0,$22(a0)
00023BA0 5428 0025                  		addq.b	#2,$25(a0)
00023BA4                            
00023BA4                            loc_18126:
00023BA4 6000 FE14                  		bra.w	loc_17F38
00023BA8                            ; ===========================================================================
00023BA8                            
00023BA8                            loc_1812A:				; XREF: Obj77_ShipIndex
00023BA8 4A28 003D                  		tst.b	$3D(a0)
00023BAC 6600                       		bne.s	loc_18136
00023BAE 5328 003C                  		subq.b	#1,$3C(a0)
00023BB2 6600                       		bne.s	loc_1814E
00023BB4                            
00023BB4                            loc_18136:
00023BB4 4228 003C                  		clr.b	$3C(a0)
00023BB8 317C 0400 0010             		move.w	#$400,$10(a0)
00023BBE 317C FFC0 0012             		move.w	#-$40,$12(a0)
00023BC4 4228 003D                  		clr.b	$3D(a0)
00023BC8 5428 0025                  		addq.b	#2,$25(a0)
00023BCC                            
00023BCC                            loc_1814E:
00023BCC 6000 FDEC                  		bra.w	loc_17F38
00023BD0                            ; ===========================================================================
00023BD0                            
00023BD0                            loc_18152:				; XREF: Obj77_ShipIndex
00023BD0 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00023BD6 6400                       		bcc.s	loc_18160
00023BD8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00023BDC 6000                       		bra.s	loc_18166
00023BDE                            ; ===========================================================================
00023BDE                            
00023BDE                            loc_18160:
00023BDE 4A28 0001                  		tst.b	1(a0)
00023BE2 6A00                       		bpl.s	Obj77_ShipDel
00023BE4                            
00023BE4                            loc_18166:
00023BE4 6000 FDD4                  		bra.w	loc_17F38
00023BE8                            ; ===========================================================================
00023BE8                            
00023BE8                            Obj77_ShipDel:
00023BE8 4EF9 0001 5BFC             		jmp	DeleteObject
00023BEE                            ; ===========================================================================
00023BEE                            
00023BEE                            Obj77_FaceMain:				; XREF: Obj77_Index
00023BEE 2268 0034                  		movea.l	$34(a0),a1
00023BF2 1011                       		move.b	(a1),d0
00023BF4 B010                       		cmp.b	(a0),d0
00023BF6 6600                       		bne.s	Obj77_FaceDel
00023BF8 7000                       		moveq	#0,d0
00023BFA 1029 0025                  		move.b	$25(a1),d0
00023BFE 7201                       		moveq	#1,d1
00023C00 4A28 003D                  		tst.b	$3D(a0)
00023C04 6700                       		beq.s	loc_1818C
00023C06 720A                       		moveq	#$A,d1
00023C08 6000                       		bra.s	loc_181A0
00023C0A                            ; ===========================================================================
00023C0A                            
00023C0A                            loc_1818C:
00023C0A 4A29 0020                  		tst.b	$20(a1)
00023C0E 6600                       		bne.s	loc_18196
00023C10 7205                       		moveq	#5,d1
00023C12 6000                       		bra.s	loc_181A0
00023C14                            ; ===========================================================================
00023C14                            
00023C14                            loc_18196:
00023C14 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00023C1A 6500                       		bcs.s	loc_181A0
00023C1C 7204                       		moveq	#4,d1
00023C1E                            
00023C1E                            loc_181A0:
00023C1E 1141 001C                  		move.b	d1,$1C(a0)
00023C22 0C00 000E                  		cmpi.b	#$E,d0
00023C26 6600                       		bne.s	loc_181B6
00023C28 117C 0006 001C             		move.b	#6,$1C(a0)
00023C2E 4A28 0001                  		tst.b	1(a0)
00023C32 6A00                       		bpl.s	Obj77_FaceDel
00023C34                            
00023C34                            loc_181B6:
00023C34 6000                       		bra.s	Obj77_Display
00023C36                            ; ===========================================================================
00023C36                            
00023C36                            Obj77_FaceDel:
00023C36 4EF9 0001 5BFC             		jmp	DeleteObject
00023C3C                            ; ===========================================================================
00023C3C                            
00023C3C                            Obj77_FlameMain:			; XREF: Obj77_Index
00023C3C 117C 0007 001C             		move.b	#7,$1C(a0)
00023C42 2268 0034                  		movea.l	$34(a0),a1
00023C46 1011                       		move.b	(a1),d0
00023C48 B010                       		cmp.b	(a0),d0
00023C4A 6600                       		bne.s	Obj77_FlameDel
00023C4C 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00023C52 6600                       		bne.s	loc_181F0
00023C54 117C 000B 001C             		move.b	#$B,$1C(a0)
00023C5A 4A28 0001                  		tst.b	1(a0)
00023C5E 6A00                       		bpl.s	Obj77_FlameDel
00023C60 6000                       		bra.s	loc_181F0
00023C62                            ; ===========================================================================
00023C62 4A69 0010                  		tst.w	$10(a1)
00023C66 6700                       		beq.s	loc_181F0
00023C68 117C 0008 001C             		move.b	#8,$1C(a0)
00023C6E                            
00023C6E                            loc_181F0:
00023C6E 6000                       		bra.s	Obj77_Display
00023C70                            ; ===========================================================================
00023C70                            
00023C70                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00023C70 4EF9 0001 5BFC             		jmp	DeleteObject
00023C76                            ; ===========================================================================
00023C76                            
00023C76                            Obj77_Display:
00023C76 43F9 0002 3740             		lea	(Ani_Eggman).l,a1
00023C7C 4EB9 0001 2624             		jsr	AnimateSprite
00023C82 2268 0034                  		movea.l	$34(a0),a1
00023C86 3169 0008 0008             		move.w	8(a1),8(a0)
00023C8C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00023C92 1169 0022 0022             		move.b	$22(a1),$22(a0)
00023C98 7003                       		moveq	#3,d0
00023C9A C028 0022                  		and.b	$22(a0),d0
00023C9E 0228 00FC 0001             		andi.b	#-4,1(a0)
00023CA4 8128 0001                  		or.b	d0,1(a0)
00023CA8 4EF9 0001 5C48             		jmp	DisplaySprite
00023CAE                            ; ===========================================================================
00023CAE                            ; ---------------------------------------------------------------------------
00023CAE                            ; Object 73 - Eggman (MZ)
00023CAE                            ; ---------------------------------------------------------------------------
00023CAE                            
00023CAE                            Obj73:					; XREF: Obj_Index
00023CAE 7000                       		moveq	#0,d0
00023CB0 1028 0024                  		move.b	$24(a0),d0
00023CB4 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00023CB8 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00023CBC                            ; ===========================================================================
00023CBC 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00023CBE 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00023CC0 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00023CC2 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00023CC4 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00023CC6                            
00023CC6 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00023CC9 0401 04                    		dc.b 4,	1, 4
00023CCC 0607 04                    		dc.b 6,	7, 4
00023CCF 0800 03                    		dc.b 8,	0, 3
00023CD2                            ; ===========================================================================
00023CD2                            
00023CD2                            Obj73_Main:				; XREF: Obj73_Index
00023CD2 3168 0008 0030             		move.w	8(a0),$30(a0)
00023CD8 3168 000C 0038             		move.w	$C(a0),$38(a0)
00023CDE 117C 000F 0020             		move.b	#$F,$20(a0)
00023CE4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00023CEA 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00023CEE 2248                       		movea.l	a0,a1
00023CF0 7203                       		moveq	#3,d1
00023CF2 6000                       		bra.s	Obj73_LoadBoss
00023CF4                            ; ===========================================================================
00023CF4                            
00023CF4                            Obj73_Loop:
00023CF4 4EB9 0001 672A             		jsr	SingleObjLoad2
00023CFA 6600                       		bne.s	Obj73_ShipMain
00023CFC 12BC 0073                  		move.b	#$73,0(a1)
00023D00 3368 0008 0008             		move.w	8(a0),8(a1)
00023D06 3368 000C 000C             		move.w	$C(a0),$C(a1)
00023D0C                            
00023D0C                            Obj73_LoadBoss:				; XREF: Obj73_Main
00023D0C 08A8 0000 0022             		bclr	#0,$22(a0)
00023D12 4229 0025                  		clr.b	$25(a1)
00023D16 135A 0024                  		move.b	(a2)+,$24(a1)
00023D1A 135A 001C                  		move.b	(a2)+,$1C(a1)
00023D1E 135A 0018                  		move.b	(a2)+,priority(a1)
00023D22 3029 0018                  		move.w  priority(a1),d0
00023D26 E248                               lsr.w   #1,d0
00023D28 0240 0380                          andi.w  #$380,d0
00023D2C 3340 0018                          move.w  d0,priority(a1)
00023D30 237C 0002 3790 0004        		move.l	#Map_Eggman,4(a1)
00023D38 337C 0400 0002             		move.w	#$400,2(a1)
00023D3E 137C 0004 0001             		move.b	#4,1(a1)
00023D44 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00023D4A 2348 0034                  		move.l	a0,$34(a1)
00023D4E 51C9 FFA4                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00023D52                            
00023D52                            Obj73_ShipMain:
00023D52 7000                       		moveq	#0,d0
00023D54 1028 0025                  		move.b	$25(a0),d0
00023D58 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00023D5C 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00023D60 43F9 0002 3740             		lea	(Ani_Eggman).l,a1
00023D66 4EB9 0001 2624             		jsr	AnimateSprite
00023D6C 7003                       		moveq	#3,d0
00023D6E C028 0022                  		and.b	$22(a0),d0
00023D72 0228 00FC 0001             		andi.b	#$FC,1(a0)
00023D78 8128 0001                  		or.b	d0,1(a0)
00023D7C 4EF9 0001 5C48             		jmp	DisplaySprite
00023D82                            ; ===========================================================================
00023D82 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00023D84 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00023D86 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00023D88 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00023D8A 0000                       		dc.w loc_18582-Obj73_ShipIndex
00023D8C                            ; ===========================================================================
00023D8C                            
00023D8C                            loc_18302:				; XREF: Obj73_ShipIndex
00023D8C 1028 003F                  		move.b	$3F(a0),d0
00023D90 5428 003F                  		addq.b	#2,$3F(a0)
00023D94 4EB9 0000 8DA4             		jsr	(CalcSine).l
00023D9A E440                       		asr.w	#2,d0
00023D9C 3140 0012                  		move.w	d0,$12(a0)
00023DA0 317C FF00 0010             		move.w	#-$100,$10(a0)
00023DA6 6100 F58C                  		bsr.w	BossMove
00023DAA 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00023DB0 6600                       		bne.s	loc_18334
00023DB2 5428 0025                  		addq.b	#2,$25(a0)
00023DB6 4228 0028                  		clr.b	$28(a0)
00023DBA 42A8 0010                  		clr.l	$10(a0)
00023DBE                            
00023DBE                            loc_18334:
00023DBE 4EB9 0000 8D7E             		jsr	(RandomNumber).l
00023DC4 1140 0034                  		move.b	d0,$34(a0)
00023DC8                            
00023DC8                            loc_1833E:
00023DC8 3168 0038 000C             		move.w	$38(a0),$C(a0)
00023DCE 3168 0030 0008             		move.w	$30(a0),8(a0)
00023DD4 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00023DDA 6400                       		bcc.s	locret_18390
00023DDC 4A28 0022                  		tst.b	$22(a0)
00023DE0 6B00                       		bmi.s	loc_18392
00023DE2 4A28 0020                  		tst.b	$20(a0)
00023DE6 6600                       		bne.s	locret_18390
00023DE8 4A28 003E                  		tst.b	$3E(a0)
00023DEC 6600                       		bne.s	loc_18374
00023DEE 117C 0028 003E             		move.b	#$28,$3E(a0)
00023DF4                            ;		move.w	#$AC,d0
00023DF4 4EB9 0001 E844             		jsr	(BossModeMusic).l ;	play boss damage sound
00023DFA                            
00023DFA                            loc_18374:
00023DFA 43F8 FB22                  		lea	($FFFFFB22).w,a1
00023DFE 7000                       		moveq	#0,d0
00023E00 4A51                       		tst.w	(a1)
00023E02 6600                       		bne.s	loc_18382
00023E04 303C 0EEE                  		move.w	#$EEE,d0
00023E08                            
00023E08                            loc_18382:
00023E08 3280                       		move.w	d0,(a1)
00023E0A 5328 003E                  		subq.b	#1,$3E(a0)
00023E0E 6600                       		bne.s	locret_18390
00023E10 117C 000F 0020             		move.b	#$F,$20(a0)
00023E16                            
00023E16                            locret_18390:
00023E16 4E75                       		rts	
00023E18                            ; ===========================================================================
00023E18                            
00023E18                            loc_18392:				; XREF: loc_1833E
00023E18 7064                       		moveq	#100,d0
00023E1A 6100 0000                  		bsr.w	AddPoints
00023E1E 117C 0004 0025             		move.b	#4,$25(a0)
00023E24 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00023E2A 4268 0010                  		clr.w	$10(a0)
00023E2E 4E75                       		rts	
00023E30                            ; ===========================================================================
00023E30                            
00023E30                            loc_183AA:				; XREF: Obj73_ShipIndex
00023E30 7000                       		moveq	#0,d0
00023E32 1028 0028                  		move.b	$28(a0),d0
00023E36 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00023E3A 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00023E3E 0228 0006 0028             		andi.b	#6,$28(a0)
00023E44 6000 FF82                  		bra.w	loc_1833E
00023E48                            ; ===========================================================================
00023E48 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00023E4A 0000                       		dc.w Obj73_MakeLava2-off_183C2
00023E4C 0000                       		dc.w loc_183CA-off_183C2
00023E4E 0000                       		dc.w Obj73_MakeLava2-off_183C2
00023E50                            ; ===========================================================================
00023E50                            
00023E50                            loc_183CA:				; XREF: off_183C2
00023E50 4A68 0010                  		tst.w	$10(a0)
00023E54 6600                       		bne.s	loc_183FE
00023E56 7040                       		moveq	#$40,d0
00023E58 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00023E5E 6700                       		beq.s	loc_183E6
00023E60 6500                       		bcs.s	loc_183DE
00023E62 4440                       		neg.w	d0
00023E64                            
00023E64                            loc_183DE:
00023E64 3140 0012                  		move.w	d0,$12(a0)
00023E68 6000 F4CA                  		bra.w	BossMove
00023E6C                            ; ===========================================================================
00023E6C                            
00023E6C                            loc_183E6:
00023E6C 317C 0200 0010             		move.w	#$200,$10(a0)
00023E72 317C 0100 0012             		move.w	#$100,$12(a0)
00023E78 0828 0000 0022             		btst	#0,$22(a0)
00023E7E 6600                       		bne.s	loc_183FE
00023E80 4468 0010                  		neg.w	$10(a0)
00023E84                            
00023E84                            loc_183FE:
00023E84 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00023E8A 6400                       		bcc.s	Obj73_MakeLava
00023E8C 6100 F4A6                  		bsr.w	BossMove
00023E90 5968 0012                  		subq.w	#4,$12(a0)
00023E94                            
00023E94                            Obj73_MakeLava:
00023E94 5328 0034                  		subq.b	#1,$34(a0)
00023E98 6400                       		bcc.s	loc_1845C
00023E9A 4EB9 0001 6714             		jsr	SingleObjLoad
00023EA0 6600                       		bne.s	loc_1844A
00023EA2 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00023EA6 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00023EAC 4EB9 0000 8D7E             		jsr	(RandomNumber).l
00023EB2 0280 0000 FFFF             		andi.l	#$FFFF,d0
00023EB8 80FC 0050                  		divu.w	#$50,d0
00023EBC 4840                       		swap	d0
00023EBE 0640 1878                  		addi.w	#$1878,d0
00023EC2 3340 0008                  		move.w	d0,8(a1)
00023EC6 EE09                       		lsr.b	#7,d1
00023EC8 337C 00FF 0028             		move.w	#$FF,$28(a1)
00023ECE                            
00023ECE                            loc_1844A:
00023ECE 4EB9 0000 8D7E             		jsr	(RandomNumber).l
00023ED4 0200 001F                  		andi.b	#$1F,d0
00023ED8 0600 0040                  		addi.b	#$40,d0
00023EDC 1140 0034                  		move.b	d0,$34(a0)
00023EE0                            
00023EE0                            loc_1845C:
00023EE0 0828 0000 0022             		btst	#0,$22(a0)
00023EE6 6700                       		beq.s	loc_18474
00023EE8 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00023EEE 6D00                       		blt.s	locret_1849C
00023EF0 317C 1910 0030             		move.w	#$1910,$30(a0)
00023EF6 6000                       		bra.s	loc_18482
00023EF8                            ; ===========================================================================
00023EF8                            
00023EF8                            loc_18474:
00023EF8 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00023EFE 6E00                       		bgt.s	locret_1849C
00023F00 317C 1830 0030             		move.w	#$1830,$30(a0)
00023F06                            
00023F06                            loc_18482:
00023F06 4268 0010                  		clr.w	$10(a0)
00023F0A 317C FE80 0012             		move.w	#-$180,$12(a0)
00023F10 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00023F16 6400                       		bcc.s	loc_18498
00023F18 4468 0012                  		neg.w	$12(a0)
00023F1C                            
00023F1C                            loc_18498:
00023F1C 5428 0028                  		addq.b	#2,$28(a0)
00023F20                            
00023F20                            locret_1849C:
00023F20 4E75                       		rts	
00023F22                            ; ===========================================================================
00023F22                            
00023F22                            Obj73_MakeLava2:			; XREF: off_183C2
00023F22 6100 F410                  		bsr.w	BossMove
00023F26 3028 0038                  		move.w	$38(a0),d0
00023F2A 0440 022C                  		subi.w	#$22C,d0
00023F2E 6E00                       		bgt.s	locret_184F4
00023F30 303C 022C                  		move.w	#$22C,d0
00023F34 4A68 0012                  		tst.w	$12(a0)
00023F38 6700                       		beq.s	loc_184EA
00023F3A 4268 0012                  		clr.w	$12(a0)
00023F3E 317C 0050 003C             		move.w	#$50,$3C(a0)
00023F44 0868 0000 0022             		bchg	#0,$22(a0)
00023F4A 4EB9 0001 6714             		jsr	SingleObjLoad
00023F50 6600                       		bne.s	loc_184EA
00023F52 3368 0030 0008             		move.w	$30(a0),8(a1)
00023F58 3368 0038 000C             		move.w	$38(a0),$C(a1)
00023F5E 0669 0018 000C             		addi.w	#$18,$C(a1)
00023F64 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00023F68 137C 0001 0028             		move.b	#1,$28(a1)
00023F6E                            
00023F6E                            loc_184EA:
00023F6E 5368 003C                  		subq.w	#1,$3C(a0)
00023F72 6600                       		bne.s	locret_184F4
00023F74 5428 0028                  		addq.b	#2,$28(a0)
00023F78                            
00023F78                            locret_184F4:
00023F78 4E75                       		rts	
00023F7A                            ; ===========================================================================
00023F7A                            
00023F7A                            loc_184F6:				; XREF: Obj73_ShipIndex
00023F7A 5368 003C                  		subq.w	#1,$3C(a0)
00023F7E 6B00                       		bmi.s	loc_18500
00023F80 6000 F36C                  		bra.w	BossDefeated
00023F84                            ; ===========================================================================
00023F84                            
00023F84                            loc_18500:
00023F84 08E8 0000 0022             		bset	#0,$22(a0)
00023F8A 08A8 0007 0022             		bclr	#7,$22(a0)
00023F90 4268 0010                  		clr.w	$10(a0)
00023F94 5428 0025                  		addq.b	#2,$25(a0)
00023F98 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00023F9E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00023FA2 6600                       		bne.s	locret_1852A
00023FA4 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00023FAA 4268 0012                  		clr.w	$12(a0)
00023FAE                            
00023FAE                            locret_1852A:
00023FAE 4E75                       		rts	
00023FB0                            ; ===========================================================================
00023FB0                            
00023FB0                            loc_1852C:				; XREF: Obj73_ShipIndex
00023FB0 5268 003C                  		addq.w	#1,$3C(a0)
00023FB4 6700                       		beq.s	loc_18544
00023FB6 6A00                       		bpl.s	loc_1854E
00023FB8 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00023FBE 6400                       		bcc.s	loc_18544
00023FC0 0668 0018 0012             		addi.w	#$18,$12(a0)
00023FC6 6000                       		bra.s	loc_1857A
00023FC8                            ; ===========================================================================
00023FC8                            
00023FC8                            loc_18544:
00023FC8 4268 0012                  		clr.w	$12(a0)
00023FCC 4268 003C                  		clr.w	$3C(a0)
00023FD0 6000                       		bra.s	loc_1857A
00023FD2                            ; ===========================================================================
00023FD2                            
00023FD2                            loc_1854E:
00023FD2 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00023FD8 6500                       		bcs.s	loc_18566
00023FDA 6700                       		beq.s	loc_1856C
00023FDC 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00023FE2 6500                       		bcs.s	loc_1857A
00023FE4 5428 0025                  		addq.b	#2,$25(a0)
00023FE8 6000                       		bra.s	loc_1857A
00023FEA                            ; ===========================================================================
00023FEA                            
00023FEA                            loc_18566:
00023FEA 5168 0012                  		subq.w	#8,$12(a0)
00023FEE 6000                       		bra.s	loc_1857A
00023FF0                            ; ===========================================================================
00023FF0                            
00023FF0                            loc_1856C:
00023FF0 4268 0012                  		clr.w	$12(a0)
00023FF4                            	;	move.w	(Level_Music).w,d0
00023FF4 4EB9 0001 D478             		jsr	(super_GetBgm).l	; play MZ music
00023FFA                            
00023FFA                            loc_1857A:
00023FFA 6100 F338                  		bsr.w	BossMove
00023FFE 6000 FDC8                  		bra.w	loc_1833E
00024002                            ; ===========================================================================
00024002                            
00024002                            loc_18582:				; XREF: Obj73_ShipIndex
00024002 317C 0500 0010             		move.w	#$500,$10(a0)
00024008 317C FFC0 0012             		move.w	#-$40,$12(a0)
0002400E 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00024014 6400                       		bcc.s	loc_1859C
00024016 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0002401A 6000                       		bra.s	loc_185A2
0002401C                            ; ===========================================================================
0002401C                            
0002401C                            loc_1859C:
0002401C 4A28 0001                  		tst.b	1(a0)
00024020 6A00                       		bpl.s	Obj73_ShipDel
00024022                            
00024022                            loc_185A2:
00024022 6100 F310                  		bsr.w	BossMove
00024026 6000 FDA0                  		bra.w	loc_1833E
0002402A                            ; ===========================================================================
0002402A                            
0002402A                            Obj73_ShipDel:
0002402A 4EF9 0001 5BFC             		jmp	DeleteObject
00024030                            ; ===========================================================================
00024030                            
00024030                            Obj73_FaceMain:				; XREF: Obj73_Index
00024030 7000                       		moveq	#0,d0
00024032 7201                       		moveq	#1,d1
00024034 2268 0034                  		movea.l	$34(a0),a1
00024038 1029 0025                  		move.b	$25(a1),d0
0002403C 5540                       		subq.w	#2,d0
0002403E 6600                       		bne.s	loc_185D2
00024040 0829 0001 0028             		btst	#1,$28(a1)
00024046 6700                       		beq.s	loc_185DA
00024048 4A69 0012                  		tst.w	$12(a1)
0002404C 6600                       		bne.s	loc_185DA
0002404E 7204                       		moveq	#4,d1
00024050 6000                       		bra.s	loc_185EE
00024052                            ; ===========================================================================
00024052                            
00024052                            loc_185D2:
00024052 5500                       		subq.b	#2,d0
00024054 6B00                       		bmi.s	loc_185DA
00024056 720A                       		moveq	#$A,d1
00024058 6000                       		bra.s	loc_185EE
0002405A                            ; ===========================================================================
0002405A                            
0002405A                            loc_185DA:
0002405A 4A29 0020                  		tst.b	$20(a1)
0002405E 6600                       		bne.s	loc_185E4
00024060 7205                       		moveq	#5,d1
00024062 6000                       		bra.s	loc_185EE
00024064                            ; ===========================================================================
00024064                            
00024064                            loc_185E4:
00024064 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0002406A 6500                       		bcs.s	loc_185EE
0002406C 7204                       		moveq	#4,d1
0002406E                            
0002406E                            loc_185EE:
0002406E 1141 001C                  		move.b	d1,$1C(a0)
00024072 5900                       		subq.b	#4,d0
00024074 6600                       		bne.s	loc_18602
00024076 117C 0006 001C             		move.b	#6,$1C(a0)
0002407C 4A28 0001                  		tst.b	1(a0)
00024080 6A00                       		bpl.s	Obj73_FaceDel
00024082                            
00024082                            loc_18602:
00024082 6000                       		bra.s	Obj73_Display
00024084                            ; ===========================================================================
00024084                            
00024084                            Obj73_FaceDel:
00024084 4EF9 0001 5BFC             		jmp	DeleteObject
0002408A                            ; ===========================================================================
0002408A                            
0002408A                            Obj73_FlameMain:			; XREF: Obj73_Index
0002408A 117C 0007 001C             		move.b	#7,$1C(a0)
00024090 2268 0034                  		movea.l	$34(a0),a1
00024094 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0002409A 6D00                       		blt.s	loc_1862A
0002409C 117C 000B 001C             		move.b	#$B,$1C(a0)
000240A2 4A28 0001                  		tst.b	1(a0)
000240A6 6A00                       		bpl.s	Obj73_FlameDel
000240A8 6000                       		bra.s	loc_18636
000240AA                            ; ===========================================================================
000240AA                            
000240AA                            loc_1862A:
000240AA 4A69 0010                  		tst.w	$10(a1)
000240AE 6700                       		beq.s	loc_18636
000240B0 117C 0008 001C             		move.b	#8,$1C(a0)
000240B6                            
000240B6                            loc_18636:
000240B6 6000                       		bra.s	Obj73_Display
000240B8                            ; ===========================================================================
000240B8                            
000240B8                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
000240B8 4EF9 0001 5BFC             		jmp	DeleteObject
000240BE                            ; ===========================================================================
000240BE                            
000240BE                            Obj73_Display:
000240BE 43F9 0002 3740             		lea	(Ani_Eggman).l,a1
000240C4 4EB9 0001 2624             		jsr	AnimateSprite
000240CA                            
000240CA                            loc_1864A:
000240CA 2268 0034                  		movea.l	$34(a0),a1
000240CE 3169 0008 0008             		move.w	8(a1),8(a0)
000240D4 3169 000C 000C             		move.w	$C(a1),$C(a0)
000240DA 1169 0022 0022             		move.b	$22(a1),$22(a0)
000240E0 7003                       		moveq	#3,d0
000240E2 C028 0022                  		and.b	$22(a0),d0
000240E6 0228 00FC 0001             		andi.b	#-4,1(a0)
000240EC 8128 0001                  		or.b	d0,1(a0)
000240F0 4EF9 0001 5C48             		jmp	DisplaySprite
000240F6                            ; ===========================================================================
000240F6                            
000240F6                            Obj73_TubeMain:				; XREF: Obj73_Index
000240F6 2268 0034                  		movea.l	$34(a0),a1
000240FA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00024100 6600                       		bne.s	loc_18688
00024102 4A28 0001                  		tst.b	1(a0)
00024106 6A00                       		bpl.s	Obj73_TubeDel
00024108                            
00024108                            loc_18688:
00024108 217C 0002 3858 0004        		move.l	#Map_BossItems,4(a0)
00024110 317C 246C 0002             		move.w	#$246C,2(a0)
00024116 117C 0004 001A             		move.b	#4,$1A(a0)
0002411C 60AC                       		bra.s	loc_1864A
0002411E                            ; ===========================================================================
0002411E                            
0002411E                            Obj73_TubeDel:
0002411E 4EF9 0001 5BFC             		jmp	DeleteObject
00024124                            ; ===========================================================================
00024124                            ; ---------------------------------------------------------------------------
00024124                            ; Object 74 - lava that	Eggman drops (MZ)
00024124                            ; ---------------------------------------------------------------------------
00024124                            
00024124                            Obj74:					; XREF: Obj_Index
00024124 7000                       		moveq	#0,d0
00024126 1028 0024                  		move.b	$24(a0),d0
0002412A 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0002412E 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00024132 4EF9 0001 5C48             		jmp	DisplaySprite
00024138                            ; ===========================================================================
00024138 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0002413A 0000                       		dc.w Obj74_Action-Obj74_Index
0002413C 0000                       		dc.w loc_18886-Obj74_Index
0002413E 0000                       		dc.w Obj74_Delete3-Obj74_Index
00024140                            ; ===========================================================================
00024140                            
00024140                            Obj74_Main:				; XREF: Obj74_Index
00024140 117C 0008 0016             		move.b	#8,$16(a0)
00024146 117C 0008 0017             		move.b	#8,$17(a0)
0002414C 217C 0001 345A 0004        		move.l	#Map_obj14,4(a0)
00024154 317C 0345 0002             		move.w	#$345,2(a0)
0002415A 117C 0004 0001             		move.b	#4,1(a0)
00024160 317C 0280 0018             		move.w	#$280,priority(a0)
00024166 3168 000C 0038             		move.w	$C(a0),$38(a0)
0002416C 117C 0008 0023             		move.b	#8,width_pixels(a0)
00024172 5428 0024                  		addq.b	#2,$24(a0)
00024176 4A28 0028                  		tst.b	$28(a0)
0002417A 6600                       		bne.s	loc_1870A
0002417C 117C 008B 0020             		move.b	#$8B,$20(a0)
00024182 5428 0024                  		addq.b	#2,$24(a0)
00024186 6000 0000                  		bra.w	loc_18886
0002418A                            ; ===========================================================================
0002418A                            
0002418A                            loc_1870A:
0002418A 117C 001E 0029             		move.b	#$1E,$29(a0)
00024190 303C 00AE                  		move.w	#$AE,d0
00024194 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play lava sound
0002419A                            
0002419A                            Obj74_Action:				; XREF: Obj74_Index
0002419A 7000                       		moveq	#0,d0
0002419C 1028 0025                  		move.b	$25(a0),d0
000241A0 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
000241A4 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
000241A8 4EB9 0001 5BE2             		jsr	SpeedToPos
000241AE 43F9 0001 7704             		lea	(Ani_obj14).l,a1
000241B4 4EB9 0001 2624             		jsr	AnimateSprite
000241BA 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
000241C0 6200                       		bhi.s	Obj74_Delete
000241C2 4E75                       		rts	
000241C4                            ; ===========================================================================
000241C4                            
000241C4                            Obj74_Delete:
000241C4 4EF9 0001 5BFC             		jmp	DeleteObject
000241CA                            ; ===========================================================================
000241CA 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
000241CC 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
000241CE 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
000241D0 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
000241D2                            ; ===========================================================================
000241D2                            
000241D2                            Obj74_Drop:				; XREF: Obj74_Index2
000241D2 08E8 0001 0022             		bset	#1,$22(a0)
000241D8 5328 0029                  		subq.b	#1,$29(a0)
000241DC 6A00                       		bpl.s	locret_18780
000241DE 117C 008B 0020             		move.b	#$8B,$20(a0)
000241E4 4228 0028                  		clr.b	$28(a0)
000241E8 0668 0018 0012             		addi.w	#$18,$12(a0)
000241EE 08A8 0001 0022             		bclr	#1,$22(a0)
000241F4 6100 C69C                  		bsr.w	ObjHitFloor
000241F8 4A41                       		tst.w	d1
000241FA 6A00                       		bpl.s	locret_18780
000241FC 5428 0025                  		addq.b	#2,$25(a0)
00024200                            
00024200                            locret_18780:
00024200 4E75                       		rts	
00024202                            ; ===========================================================================
00024202                            
00024202                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00024202 5568 000C                  		subq.w	#2,$C(a0)
00024206 08E8 0007 0002             		bset	#7,2(a0)
0002420C 317C 00A0 0010             		move.w	#$A0,$10(a0)
00024212 4268 0012                  		clr.w	$12(a0)
00024216 3168 0008 0030             		move.w	8(a0),$30(a0)
0002421C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00024222 117C 0003 0029             		move.b	#3,$29(a0)
00024228 4EB9 0001 672A             		jsr	SingleObjLoad2
0002422E 6600                       		bne.s	loc_187CA
00024230 47D1                       		lea	(a1),a3
00024232 45D0                       		lea	(a0),a2
00024234 7003                       		moveq	#3,d0
00024236                            
00024236                            Obj74_Loop:
00024236 26DA                       		move.l	(a2)+,(a3)+
00024238 26DA                       		move.l	(a2)+,(a3)+
0002423A 26DA                       		move.l	(a2)+,(a3)+
0002423C 26DA                       		move.l	(a2)+,(a3)+
0002423E 51C8 FFF6                  		dbf	d0,Obj74_Loop
00024242                            
00024242 4469 0010                  		neg.w	$10(a1)
00024246 5429 0025                  		addq.b	#2,$25(a1)
0002424A                            
0002424A                            loc_187CA:
0002424A 5428 0025                  		addq.b	#2,$25(a0)
0002424E 4E75                       		rts	
00024250                            
00024250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00024250                            
00024250                            
00024250                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00024250 4EB9 0001 672A             		jsr	SingleObjLoad2
00024256 6600                       		bne.s	locret_187EE
00024258 3368 0008 0008             		move.w	8(a0),8(a1)
0002425E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00024264 12BC 0074                  		move.b	#$74,(a1)
00024268 337C 0067 0028             		move.w	#$67,$28(a1)
0002426E                            
0002426E                            locret_187EE:
0002426E 4E75                       		rts	
00024270                            ; End of function Obj74_Duplicate2
00024270                            
00024270                            ; ===========================================================================
00024270                            
00024270                            Obj74_Duplicate:			; XREF: Obj74_Index2
00024270 6100 C620                  		bsr.w	ObjHitFloor
00024274 4A41                       		tst.w	d1
00024276 6A00                       		bpl.s	loc_18826
00024278 3028 0008                  		move.w	8(a0),d0
0002427C 0C40 1940                  		cmpi.w	#$1940,d0
00024280 6E00                       		bgt.s	loc_1882C
00024282 3228 0030                  		move.w	$30(a0),d1
00024286 B240                       		cmp.w	d0,d1
00024288 6700                       		beq.s	loc_1881E
0002428A 0240 0010                  		andi.w	#$10,d0
0002428E 0241 0010                  		andi.w	#$10,d1
00024292 B240                       		cmp.w	d0,d1
00024294 6700                       		beq.s	loc_1881E
00024296 61B8                       		bsr.s	Obj74_Duplicate2
00024298 3168 0008 0032             		move.w	8(a0),$32(a0)
0002429E                            
0002429E                            loc_1881E:
0002429E 3168 0008 0030             		move.w	8(a0),$30(a0)
000242A4 4E75                       		rts	
000242A6                            ; ===========================================================================
000242A6                            
000242A6                            loc_18826:
000242A6 5428 0025                  		addq.b	#2,$25(a0)
000242AA 4E75                       		rts	
000242AC                            ; ===========================================================================
000242AC                            
000242AC                            loc_1882C:
000242AC 5428 0024                  		addq.b	#2,$24(a0)
000242B0 4E75                       		rts	
000242B2                            ; ===========================================================================
000242B2                            
000242B2                            Obj74_FallEdge:				; XREF: Obj74_Index2
000242B2 08A8 0001 0022             		bclr	#1,$22(a0)
000242B8 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
000242BE 3028 0008                  		move.w	8(a0),d0
000242C2 9068 0032                  		sub.w	$32(a0),d0
000242C6 6A00                       		bpl.s	loc_1884A
000242C8 4440                       		neg.w	d0
000242CA                            
000242CA                            loc_1884A:
000242CA 0C40 0012                  		cmpi.w	#$12,d0
000242CE 6600                       		bne.s	loc_18856
000242D0 08A8 0007 0002             		bclr	#7,2(a0)
000242D6                            
000242D6                            loc_18856:
000242D6 6100 C5BA                  		bsr.w	ObjHitFloor
000242DA 4A41                       		tst.w	d1
000242DC 6A00                       		bpl.s	locret_1887E
000242DE 5328 0029                  		subq.b	#1,$29(a0)
000242E2 6700                       		beq.s	Obj74_Delete2
000242E4 4268 0012                  		clr.w	$12(a0)
000242E8 3168 0032 0008             		move.w	$32(a0),8(a0)
000242EE 3168 0038 000C             		move.w	$38(a0),$C(a0)
000242F4 08E8 0007 0002             		bset	#7,2(a0)
000242FA 5528 0025                  		subq.b	#2,$25(a0)
000242FE                            
000242FE                            locret_1887E:
000242FE 4E75                       		rts	
00024300                            ; ===========================================================================
00024300                            
00024300                            Obj74_Delete2:
00024300 4EF9 0001 5BFC             		jmp	DeleteObject
00024306                            ; ===========================================================================
00024306                            
00024306                            loc_18886:				; XREF: Obj74_Index
00024306 08E8 0007 0002             		bset	#7,2(a0)
0002430C 5328 0029                  		subq.b	#1,$29(a0)
00024310 6600                       		bne.s	Obj74_Animate
00024312 117C 0001 001C             		move.b	#1,$1C(a0)
00024318 5968 000C                  		subq.w	#4,$C(a0)
0002431C 4228 0020                  		clr.b	$20(a0)
00024320                            
00024320                            Obj74_Animate:
00024320 43F9 0001 7704             		lea	(Ani_obj14).l,a1
00024326 4EF9 0001 2624             		jmp	AnimateSprite
0002432C                            ; ===========================================================================
0002432C                            
0002432C                            Obj74_Delete3:				; XREF: Obj74_Index
0002432C 4EF9 0001 5BFC             		jmp	DeleteObject
00024332                            ; ===========================================================================
00024332                            
00024332                            Obj7A_Delete:
00024332 4EF9 0001 5BFC             		jmp	DeleteObject
00024338                            ; ===========================================================================
00024338                            ; ---------------------------------------------------------------------------
00024338                            ; Object 7A - Eggman (SLZ)
00024338                            ; ---------------------------------------------------------------------------
00024338                            
00024338                            Obj7A:					; XREF: Obj_Index
00024338 7000                       		moveq	#0,d0
0002433A 1028 0024                  		move.b	$24(a0),d0
0002433E 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00024342 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00024346                            ; ===========================================================================
00024346 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00024348 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0002434A 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0002434C 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0002434E 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00024350                            
00024350 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00024353 0401 04                    		dc.b 4,	1, 4
00024356 0607 04                    		dc.b 6,	7, 4
00024359 0800 03                    		dc.b 8,	0, 3
0002435C                            ; ===========================================================================
0002435C                            
0002435C                            Obj7A_Main:				; XREF: Obj7A_Index
0002435C 317C 2188 0008             		move.w	#$2188,8(a0)
00024362 317C 0228 000C             		move.w	#$228,$C(a0)
00024368 3168 0008 0030             		move.w	8(a0),$30(a0)
0002436E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00024374 117C 000F 0020             		move.b	#$F,$20(a0)
0002437A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00024380 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00024384 2248                       		movea.l	a0,a1
00024386 7203                       		moveq	#3,d1
00024388 6000                       		bra.s	Obj7A_LoadBoss
0002438A                            ; ===========================================================================
0002438A                            
0002438A                            Obj7A_Loop:
0002438A 4EB9 0001 672A             		jsr	SingleObjLoad2
00024390 6600                       		bne.s	loc_1895C
00024392 12BC 007A                  		move.b	#$7A,0(a1)
00024396 3368 0008 0008             		move.w	8(a0),8(a1)
0002439C 3368 000C 000C             		move.w	$C(a0),$C(a1)
000243A2                            
000243A2                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
000243A2 08A8 0000 0022             		bclr	#0,$22(a0)
000243A8 4229 0025                  		clr.b	$25(a1)
000243AC 135A 0024                  		move.b	(a2)+,$24(a1)
000243B0 135A 001C                  		move.b	(a2)+,$1C(a1)
000243B4 135A 0018                  		move.b	(a2)+,priority(a1)
000243B8 3029 0018                          move.w  priority(a1),d0
000243BC E248                               lsr.w   #1,d0
000243BE 0240 0380                          andi.w  #$380,d0
000243C2 3340 0018                          move.w  d0,priority(a1)
000243C6 237C 0002 3790 0004        		move.l	#Map_Eggman,4(a1)
000243CE 337C 0400 0002             		move.w	#$400,2(a1)
000243D4 137C 0004 0001             		move.b	#4,1(a1)
000243DA 137C 0020 0023             		move.b	#$20,width_pixels(a1)
000243E0 2348 0034                  		move.l	a0,$34(a1)
000243E4 51C9 FFA4                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
000243E8                            
000243E8                            loc_1895C:
000243E8 43F8 D040                  		lea	($FFFFD040).w,a1
000243EC 45E8 002A                  		lea	$2A(a0),a2
000243F0 705E                       		moveq	#$5E,d0
000243F2 723E                       		moveq	#$3E,d1
000243F4                            
000243F4                            loc_18968:
000243F4 B011                       		cmp.b	(a1),d0
000243F6 6600                       		bne.s	loc_18974
000243F8 4A29 0028                  		tst.b	$28(a1)
000243FC 6700                       		beq.s	loc_18974
000243FE 34C9                       		move.w	a1,(a2)+
00024400                            
00024400                            loc_18974:
00024400 D2FC 0040                  		adda.w	#$40,a1
00024404 51C9 FFEE                  		dbf	d1,loc_18968
00024408                            
00024408                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00024408 7000                       		moveq	#0,d0
0002440A 1028 0025                  		move.b	$25(a0),d0
0002440E 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00024412 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00024416 43F9 0002 3740             		lea	(Ani_Eggman).l,a1
0002441C 4EB9 0001 2624             		jsr	AnimateSprite
00024422 7003                       		moveq	#3,d0
00024424 C028 0022                  		and.b	$22(a0),d0
00024428 0228 00FC 0001             		andi.b	#$FC,1(a0)
0002442E 8128 0001                  		or.b	d0,1(a0)
00024432 4EF9 0001 5C48             		jmp	DisplaySprite
00024438                            ; ===========================================================================
00024438 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0002443A 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0002443C 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0002443E 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00024440 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00024442 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00024444                            ; ===========================================================================
00024444                            
00024444                            loc_189B8:				; XREF: Obj7A_ShipIndex
00024444 317C FF00 0010             		move.w	#-$100,$10(a0)
0002444A 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00024450 6400                       		bcc.s	loc_189CA
00024452 5428 0025                  		addq.b	#2,$25(a0)
00024456                            
00024456                            loc_189CA:
00024456 6100 EEDC                  		bsr.w	BossMove
0002445A 1028 003F                  		move.b	$3F(a0),d0
0002445E 5428 003F                  		addq.b	#2,$3F(a0)
00024462 4EB9 0000 8DA4             		jsr	(CalcSine).l
00024468 EC40                       		asr.w	#6,d0
0002446A D068 0038                  		add.w	$38(a0),d0
0002446E 3140 000C                  		move.w	d0,$C(a0)
00024472 3168 0030 0008             		move.w	$30(a0),8(a0)
00024478 6000                       		bra.s	loc_189FE
0002447A                            ; ===========================================================================
0002447A                            
0002447A                            loc_189EE:
0002447A 6100 EEB8                  		bsr.w	BossMove
0002447E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00024484 3168 0030 0008             		move.w	$30(a0),8(a0)
0002448A                            
0002448A                            loc_189FE:
0002448A 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00024490 6400                       		bcc.s	locret_18A44
00024492 4A28 0022                  		tst.b	$22(a0)
00024496 6B00                       		bmi.s	loc_18A46
00024498 4A28 0020                  		tst.b	$20(a0)
0002449C 6600                       		bne.s	locret_18A44
0002449E 4A28 003E                  		tst.b	$3E(a0)
000244A2 6600                       		bne.s	loc_18A28
000244A4 117C 0020 003E             		move.b	#$20,$3E(a0)
000244AA                            ;		move.w	#$AC,d0
000244AA 4EB9 0001 E844             		jsr	(BossModeMusic).l ;	play boss damage sound
000244B0                            
000244B0                            loc_18A28:
000244B0 43F8 FB22                  		lea	($FFFFFB22).w,a1
000244B4 7000                       		moveq	#0,d0
000244B6 4A51                       		tst.w	(a1)
000244B8 6600                       		bne.s	loc_18A36
000244BA 303C 0EEE                  		move.w	#$EEE,d0
000244BE                            
000244BE                            loc_18A36:
000244BE 3280                       		move.w	d0,(a1)
000244C0 5328 003E                  		subq.b	#1,$3E(a0)
000244C4 6600                       		bne.s	locret_18A44
000244C6 117C 000F 0020             		move.b	#$F,$20(a0)
000244CC                            
000244CC                            locret_18A44:
000244CC 4E75                       		rts	
000244CE                            ; ===========================================================================
000244CE                            
000244CE                            loc_18A46:
000244CE 7064                       		moveq	#100,d0
000244D0 6100 0000                  		bsr.w	AddPoints
000244D4 117C 0006 0025             		move.b	#6,$25(a0)
000244DA 117C 0078 003C             		move.b	#$78,$3C(a0)
000244E0 4268 0010                  		clr.w	$10(a0)
000244E4 4E75                       		rts	
000244E6                            ; ===========================================================================
000244E6                            
000244E6                            loc_18A5E:				; XREF: Obj7A_ShipIndex
000244E6 3028 0030                  		move.w	$30(a0),d0
000244EA 317C 0200 0010             		move.w	#$200,$10(a0)
000244F0 0828 0000 0022             		btst	#0,$22(a0)
000244F6 6600                       		bne.s	loc_18A7C
000244F8 4468 0010                  		neg.w	$10(a0)
000244FC 0C40 2008                  		cmpi.w	#$2008,d0
00024500 6E00                       		bgt.s	loc_18A88
00024502 6000                       		bra.s	loc_18A82
00024504                            ; ===========================================================================
00024504                            
00024504                            loc_18A7C:
00024504 0C40 2138                  		cmpi.w	#$2138,d0
00024508 6D00                       		blt.s	loc_18A88
0002450A                            
0002450A                            loc_18A82:
0002450A 0868 0000 0022             		bchg	#0,$22(a0)
00024510                            
00024510                            loc_18A88:
00024510 3028 0008                  		move.w	8(a0),d0
00024514 72FF                       		moveq	#-1,d1
00024516 7402                       		moveq	#2,d2
00024518 45E8 002A                  		lea	$2A(a0),a2
0002451C 7828                       		moveq	#$28,d4
0002451E 4A68 0010                  		tst.w	$10(a0)
00024522 6A00                       		bpl.s	loc_18A9E
00024524 4444                       		neg.w	d4
00024526                            
00024526                            loc_18A9E:
00024526 321A                       		move.w	(a2)+,d1
00024528 2641                       		movea.l	d1,a3
0002452A 082B 0003 0022             		btst	#3,$22(a3)
00024530 6600                       		bne.s	loc_18AB4
00024532 362B 0008                  		move.w	8(a3),d3
00024536 D644                       		add.w	d4,d3
00024538 9640                       		sub.w	d0,d3
0002453A 6700                       		beq.s	loc_18AC0
0002453C                            
0002453C                            loc_18AB4:
0002453C 51CA FFE8                  		dbf	d2,loc_18A9E
00024540                            
00024540 1142 0028                  		move.b	d2,$28(a0)
00024544 6000 FF10                  		bra.w	loc_189CA
00024548                            ; ===========================================================================
00024548                            
00024548                            loc_18AC0:
00024548 1142 0028                  		move.b	d2,$28(a0)
0002454C 5428 0025                  		addq.b	#2,$25(a0)
00024550 117C 0028 003C             		move.b	#$28,$3C(a0)
00024556 6000 FEFE                  		bra.w	loc_189CA
0002455A                            ; ===========================================================================
0002455A                            
0002455A                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0002455A 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00024560 6600                       		bne.s	loc_18B36
00024562 70FF                       		moveq	#-1,d0
00024564 1028 0028                  		move.b	$28(a0),d0
00024568 4880                       		ext.w	d0
0002456A 6B00                       		bmi.s	loc_18B40
0002456C 5540                       		subq.w	#2,d0
0002456E 4440                       		neg.w	d0
00024570 D040                       		add.w	d0,d0
00024572 43E8 002A                  		lea	$2A(a0),a1
00024576 3031 0000                  		move.w	(a1,d0.w),d0
0002457A 2440                       		movea.l	d0,a2
0002457C 43F8 D040                  		lea	($FFFFD040).w,a1
00024580 723E                       		moveq	#$3E,d1
00024582                            
00024582                            loc_18AFA:
00024582 B0A9 003C                  		cmp.l	$3C(a1),d0
00024586 6700                       		beq.s	loc_18B40
00024588 D2FC 0040                  		adda.w	#$40,a1
0002458C 51C9 FFF4                  		dbf	d1,loc_18AFA
00024590                            
00024590 2F08                       		move.l	a0,-(sp)
00024592 41D2                       		lea	(a2),a0
00024594 4EB9 0001 672A             		jsr	SingleObjLoad2
0002459A 205F                       		movea.l	(sp)+,a0
0002459C 6600                       		bne.s	loc_18B40
0002459E 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
000245A2 3368 0008 0008             		move.w	8(a0),8(a1)
000245A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000245AE 0669 0020 000C             		addi.w	#$20,$C(a1)
000245B4 136A 0022 0022             		move.b	$22(a2),$22(a1)
000245BA 234A 003C                  		move.l	a2,$3C(a1)
000245BE                            
000245BE                            loc_18B36:
000245BE 5328 003C                  		subq.b	#1,$3C(a0)
000245C2 6700                       		beq.s	loc_18B40
000245C4 6000 FEC4                  		bra.w	loc_189FE
000245C8                            ; ===========================================================================
000245C8                            
000245C8                            loc_18B40:
000245C8 5528 0025                  		subq.b	#2,$25(a0)
000245CC 6000 FE88                  		bra.w	loc_189CA
000245D0                            ; ===========================================================================
000245D0                            
000245D0                            loc_18B48:				; XREF: Obj7A_ShipIndex
000245D0 5328 003C                  		subq.b	#1,$3C(a0)
000245D4 6B00                       		bmi.s	loc_18B52
000245D6 6000 ED16                  		bra.w	BossDefeated
000245DA                            ; ===========================================================================
000245DA                            
000245DA                            loc_18B52:
000245DA 5428 0025                  		addq.b	#2,$25(a0)
000245DE 4268 0012                  		clr.w	$12(a0)
000245E2 08E8 0000 0022             		bset	#0,$22(a0)
000245E8 08A8 0007 0022             		bclr	#7,$22(a0)
000245EE 4268 0010                  		clr.w	$10(a0)
000245F2 117C 00E8 003C             		move.b	#-$18,$3C(a0)
000245F8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000245FC 6600                       		bne.s	loc_18B7C
000245FE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00024604                            
00024604                            loc_18B7C:
00024604 6000 FE84                  		bra.w	loc_189FE
00024608                            ; ===========================================================================
00024608                            
00024608                            loc_18B80:				; XREF: Obj7A_ShipIndex
00024608 5228 003C                  		addq.b	#1,$3C(a0)
0002460C 6700                       		beq.s	loc_18B90
0002460E 6A00                       		bpl.s	loc_18B96
00024610 0668 0018 0012             		addi.w	#$18,$12(a0)
00024616 6000                       		bra.s	loc_18BC2
00024618                            ; ===========================================================================
00024618                            
00024618                            loc_18B90:
00024618 4268 0012                  		clr.w	$12(a0)
0002461C 6000                       		bra.s	loc_18BC2
0002461E                            ; ===========================================================================
0002461E                            
0002461E                            loc_18B96:
0002461E 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00024624 6500                       		bcs.s	loc_18BAE
00024626 6700                       		beq.s	loc_18BB4
00024628 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0002462E 6500                       		bcs.s	loc_18BC2
00024630 5428 0025                  		addq.b	#2,$25(a0)
00024634 6000                       		bra.s	loc_18BC2
00024636                            ; ===========================================================================
00024636                            
00024636                            loc_18BAE:
00024636 5168 0012                  		subq.w	#8,$12(a0)
0002463A 6000                       		bra.s	loc_18BC2
0002463C                            ; ===========================================================================
0002463C                            
0002463C                            loc_18BB4:
0002463C 4268 0012                  		clr.w	$12(a0)
00024640                            	;	move.w	(Level_Music).w,d0
00024640 4EB9 0001 D478             		jsr	(super_GetBgm).l	; play SLZ music
00024646                            
00024646                            loc_18BC2:
00024646 6000 FE32                  		bra.w	loc_189EE
0002464A                            ; ===========================================================================
0002464A                            
0002464A                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0002464A 317C 0400 0010             		move.w	#$400,$10(a0)
00024650 317C FFC0 0012             		move.w	#-$40,$12(a0)
00024656 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0002465C 6400                       		bcc.s	loc_18BE0
0002465E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00024662 6000                       		bra.s	loc_18BE8
00024664                            ; ===========================================================================
00024664                            
00024664                            loc_18BE0:
00024664 4A28 0001                  		tst.b	1(a0)
00024668 6A00 FCC8                  		bpl.w	Obj7A_Delete
0002466C                            
0002466C                            loc_18BE8:
0002466C 6100 ECC6                  		bsr.w	BossMove
00024670 6000 FDE4                  		bra.w	loc_189CA
00024674                            ; ===========================================================================
00024674                            
00024674                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00024674 7000                       		moveq	#0,d0
00024676 7201                       		moveq	#1,d1
00024678 2268 0034                  		movea.l	$34(a0),a1
0002467C 1029 0025                  		move.b	$25(a1),d0
00024680 0C00 0006                  		cmpi.b	#6,d0
00024684 6B00                       		bmi.s	loc_18C06
00024686 720A                       		moveq	#$A,d1
00024688 6000                       		bra.s	loc_18C1A
0002468A                            ; ===========================================================================
0002468A                            
0002468A                            loc_18C06:
0002468A 4A29 0020                  		tst.b	$20(a1)
0002468E 6600                       		bne.s	loc_18C10
00024690 7205                       		moveq	#5,d1
00024692 6000                       		bra.s	loc_18C1A
00024694                            ; ===========================================================================
00024694                            
00024694                            loc_18C10:
00024694 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0002469A 6500                       		bcs.s	loc_18C1A
0002469C 7204                       		moveq	#4,d1
0002469E                            
0002469E                            loc_18C1A:
0002469E 1141 001C                  		move.b	d1,$1C(a0)
000246A2 0C00 000A                  		cmpi.b	#$A,d0
000246A6 6600                       		bne.s	loc_18C32
000246A8 117C 0006 001C             		move.b	#6,$1C(a0)
000246AE 4A28 0001                  		tst.b	1(a0)
000246B2 6A00 FC7E                  		bpl.w	Obj7A_Delete
000246B6                            
000246B6                            loc_18C32:
000246B6 6000                       		bra.s	loc_18C6C
000246B8                            ; ===========================================================================
000246B8                            
000246B8                            Obj7A_FlameMain:			; XREF: Obj7A_Index
000246B8 117C 0008 001C             		move.b	#8,$1C(a0)
000246BE 2268 0034                  		movea.l	$34(a0),a1
000246C2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000246C8 6600                       		bne.s	loc_18C56
000246CA 4A28 0001                  		tst.b	1(a0)
000246CE 6A00 FC62                  		bpl.w	Obj7A_Delete
000246D2 117C 000B 001C             		move.b	#$B,$1C(a0)
000246D8 6000                       		bra.s	loc_18C6C
000246DA                            ; ===========================================================================
000246DA                            
000246DA                            loc_18C56:
000246DA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000246E0 6E00                       		bgt.s	loc_18C6C
000246E2 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000246E8 6D00                       		blt.s	loc_18C6C
000246EA 117C 0007 001C             		move.b	#7,$1C(a0)
000246F0                            
000246F0                            loc_18C6C:
000246F0 43F9 0002 3740             		lea	(Ani_Eggman).l,a1
000246F6 4EB9 0001 2624             		jsr	AnimateSprite
000246FC                            
000246FC                            loc_18C78:
000246FC 2268 0034                  		movea.l	$34(a0),a1
00024700 3169 0008 0008             		move.w	8(a1),8(a0)
00024706 3169 000C 000C             		move.w	$C(a1),$C(a0)
0002470C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00024712 7003                       		moveq	#3,d0
00024714 C028 0022                  		and.b	$22(a0),d0
00024718 0228 00FC 0001             		andi.b	#-4,1(a0)
0002471E 8128 0001                  		or.b	d0,1(a0)
00024722 4EF9 0001 5C48             		jmp	DisplaySprite
00024728                            ; ===========================================================================
00024728                            
00024728                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00024728 2268 0034                  		movea.l	$34(a0),a1
0002472C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00024732 6600                       		bne.s	loc_18CB8
00024734 4A28 0001                  		tst.b	1(a0)
00024738 6A00 FBF8                  		bpl.w	Obj7A_Delete
0002473C                            
0002473C                            loc_18CB8:
0002473C 217C 0002 3858 0004        		move.l	#Map_BossItems,4(a0)
00024744 317C 246C 0002             		move.w	#$246C,2(a0)
0002474A 117C 0003 001A             		move.b	#3,$1A(a0)
00024750 60AA                       		bra.s	loc_18C78
00024752                            ; ===========================================================================
00024752                            ; ---------------------------------------------------------------------------
00024752                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00024752                            ; ---------------------------------------------------------------------------
00024752                            
00024752                            Obj7B:					; XREF: Obj_Index
00024752 7000                       		moveq	#0,d0
00024754 1028 0024                  		move.b	$24(a0),d0
00024758 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0002475C 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00024760 3028 0030                  		move.w	$30(a0),d0
00024764 0240 FF80                  		andi.w	#$FF80,d0
00024768 3238 F700                  		move.w	($FFFFF700).w,d1
0002476C 0441 0080                  		subi.w	#$80,d1
00024770 0241 FF80                  		andi.w	#$FF80,d1
00024774 9041                       		sub.w	d1,d0
00024776 6B00 FBBA                  		bmi.w	Obj7A_Delete
0002477A 0C40 0280                  		cmpi.w	#$280,d0
0002477E 6200 FBB2                  		bhi.w	Obj7A_Delete
00024782 4EF9 0001 5C48             		jmp	DisplaySprite
00024788                            ; ===========================================================================
00024788 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0002478A 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0002478C 0000                       		dc.w loc_18DC6-Obj7B_Index
0002478E 0000                       		dc.w loc_18EAA-Obj7B_Index
00024790 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00024792 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00024794                            ; ===========================================================================
00024794                            
00024794                            Obj7B_Main:				; XREF: Obj7B_Index
00024794 217C 0001 B002 0004        		move.l	#Map_obj5Ea,4(a0)
0002479C 317C 0518 0002             		move.w	#$518,2(a0)
000247A2 117C 0001 001A             		move.b	#1,$1A(a0)
000247A8 0028 0004 0001             		ori.b	#4,1(a0)
000247AE 317C 0200 0018             		move.w	#$200,priority(a0)
000247B4 117C 008B 0020             		move.b	#$8B,$20(a0)
000247BA 117C 000C 0023             		move.b	#$C,width_pixels(a0)
000247C0 2268 003C                  		movea.l	$3C(a0),a1
000247C4 3169 0008 0030             		move.w	8(a1),$30(a0)
000247CA 3169 000C 0034             		move.w	$C(a1),$34(a0)
000247D0 08E8 0000 0022             		bset	#0,$22(a0)
000247D6 3028 0008                  		move.w	8(a0),d0
000247DA B069 0008                  		cmp.w	8(a1),d0
000247DE 6E00                       		bgt.s	loc_18D68
000247E0 08A8 0000 0022             		bclr	#0,$22(a0)
000247E6 117C 0002 003A             		move.b	#2,$3A(a0)
000247EC                            
000247EC                            loc_18D68:
000247EC 5428 0024                  		addq.b	#2,$24(a0)
000247F0                            
000247F0                            Obj7B_Fall:				; XREF: Obj7B_Index
000247F0 4EB9 0001 5BC2             		jsr	ObjectFall
000247F6 2268 003C                  		movea.l	$3C(a0),a1
000247FA 45F9 0000 0000             		lea	(word_19018).l,a2
00024800 7000                       		moveq	#0,d0
00024802 1029 001A                  		move.b	$1A(a1),d0
00024806 3228 0008                  		move.w	8(a0),d1
0002480A 9268 0030                  		sub.w	$30(a0),d1
0002480E 6400                       		bcc.s	loc_18D8E
00024810 5440                       		addq.w	#2,d0
00024812                            
00024812                            loc_18D8E:
00024812 D040                       		add.w	d0,d0
00024814 3228 0034                  		move.w	$34(a0),d1
00024818 D272 0000                  		add.w	(a2,d0.w),d1
0002481C B268 000C                  		cmp.w	$C(a0),d1
00024820 6E00                       		bgt.s	locret_18DC4
00024822 2268 003C                  		movea.l	$3C(a0),a1
00024826 7202                       		moveq	#2,d1
00024828 0828 0000 0022             		btst	#0,$22(a0)
0002482E 6700                       		beq.s	loc_18DAE
00024830 7200                       		moveq	#0,d1
00024832                            
00024832                            loc_18DAE:
00024832 317C 00F0 0028             		move.w	#$F0,$28(a0)
00024838 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0002483E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00024844 6000 0000                  		bra.w	loc_18FA2
00024848                            ; ===========================================================================
00024848                            
00024848                            locret_18DC4:
00024848 4E75                       		rts	
0002484A                            ; ===========================================================================
0002484A                            
0002484A                            loc_18DC6:				; XREF: Obj7B_Index
0002484A 2268 003C                  		movea.l	$3C(a0),a1
0002484E 7000                       		moveq	#0,d0
00024850 1028 003A                  		move.b	$3A(a0),d0
00024854 9029 003A                  		sub.b	$3A(a1),d0
00024858 6700                       		beq.s	loc_18E2A
0002485A 6400                       		bcc.s	loc_18DDA
0002485C 4400                       		neg.b	d0
0002485E                            
0002485E                            loc_18DDA:
0002485E 323C F7E8                  		move.w	#-$818,d1
00024862 343C FEEC                  		move.w	#-$114,d2
00024866 0C00 0001                  		cmpi.b	#1,d0
0002486A 6700                       		beq.s	loc_18E00
0002486C 323C F6A0                  		move.w	#-$960,d1
00024870 343C FF0C                  		move.w	#-$F4,d2
00024874 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0002487A 6D00                       		blt.s	loc_18E00
0002487C 323C F5E0                  		move.w	#-$A20,d1
00024880 343C FF80                  		move.w	#-$80,d2
00024884                            
00024884                            loc_18E00:
00024884 3141 0012                  		move.w	d1,$12(a0)
00024888 3142 0010                  		move.w	d2,$10(a0)
0002488C 3028 0008                  		move.w	8(a0),d0
00024890 9068 0030                  		sub.w	$30(a0),d0
00024894 6400                       		bcc.s	loc_18E16
00024896 4468 0010                  		neg.w	$10(a0)
0002489A                            
0002489A                            loc_18E16:
0002489A 117C 0001 001A             		move.b	#1,$1A(a0)
000248A0 317C 0020 0028             		move.w	#$20,$28(a0)
000248A6 5428 0024                  		addq.b	#2,$24(a0)
000248AA 6000 0000                  		bra.w	loc_18EAA
000248AE                            ; ===========================================================================
000248AE                            
000248AE                            loc_18E2A:				; XREF: loc_18DC6
000248AE 45F9 0000 0000             		lea	(word_19018).l,a2
000248B4 7000                       		moveq	#0,d0
000248B6 1029 001A                  		move.b	$1A(a1),d0
000248BA 343C 0028                  		move.w	#$28,d2
000248BE 3228 0008                  		move.w	8(a0),d1
000248C2 9268 0030                  		sub.w	$30(a0),d1
000248C6 6400                       		bcc.s	loc_18E48
000248C8 4442                       		neg.w	d2
000248CA 5440                       		addq.w	#2,d0
000248CC                            
000248CC                            loc_18E48:
000248CC D040                       		add.w	d0,d0
000248CE 3228 0034                  		move.w	$34(a0),d1
000248D2 D272 0000                  		add.w	(a2,d0.w),d1
000248D6 3141 000C                  		move.w	d1,$C(a0)
000248DA D468 0030                  		add.w	$30(a0),d2
000248DE 3142 0008                  		move.w	d2,8(a0)
000248E2 4268 000E                  		clr.w	$E(a0)
000248E6 4268 000A                  		clr.w	$A(a0)
000248EA 5368 0028                  		subq.w	#1,$28(a0)
000248EE 6600                       		bne.s	loc_18E7A
000248F0 317C 0020 0028             		move.w	#$20,$28(a0)
000248F6 117C 0008 0024             		move.b	#8,$24(a0)
000248FC 4E75                       		rts	
000248FE                            ; ===========================================================================
000248FE                            
000248FE                            loc_18E7A:
000248FE 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00024904 6600                       		bne.s	loc_18E88
00024906 117C 0005 001F             		move.b	#5,$1F(a0)
0002490C                            
0002490C                            loc_18E88:
0002490C 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00024912 6600                       		bne.s	loc_18E96
00024914 117C 0002 001F             		move.b	#2,$1F(a0)
0002491A                            
0002491A                            loc_18E96:
0002491A 5328 001E                  		subq.b	#1,$1E(a0)
0002491E 6E00                       		bgt.s	locret_18EA8
00024920 0868 0000 001A             		bchg	#0,$1A(a0)
00024926 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0002492C                            
0002492C                            locret_18EA8:
0002492C 4E75                       		rts	
0002492E                            ; ===========================================================================
0002492E                            
0002492E                            loc_18EAA:				; XREF: Obj7B_Index
0002492E 43F8 D040                  		lea	($FFFFD040).w,a1
00024932 707A                       		moveq	#$7A,d0
00024934 7240                       		moveq	#$40,d1
00024936 743E                       		moveq	#$3E,d2
00024938                            
00024938                            loc_18EB4:
00024938 B011                       		cmp.b	(a1),d0
0002493A 6700                       		beq.s	loc_18EC0
0002493C D2C1                       		adda.w	d1,a1
0002493E 51CA FFF8                  		dbf	d2,loc_18EB4
00024942                            
00024942 6000                       		bra.s	loc_18F38
00024944                            ; ===========================================================================
00024944                            
00024944                            loc_18EC0:
00024944 3029 0008                  		move.w	8(a1),d0
00024948 3229 000C                  		move.w	$C(a1),d1
0002494C 3428 0008                  		move.w	8(a0),d2
00024950 3628 000C                  		move.w	$C(a0),d3
00024954 45FA 0000                  		lea	byte_19022(pc),a2
00024958 47FA 0000                  		lea	byte_19026(pc),a3
0002495C 181A                       		move.b	(a2)+,d4
0002495E 4884                       		ext.w	d4
00024960 D044                       		add.w	d4,d0
00024962 181B                       		move.b	(a3)+,d4
00024964 4884                       		ext.w	d4
00024966 D444                       		add.w	d4,d2
00024968 B440                       		cmp.w	d0,d2
0002496A 6500                       		bcs.s	loc_18F38
0002496C 181A                       		move.b	(a2)+,d4
0002496E 4884                       		ext.w	d4
00024970 D044                       		add.w	d4,d0
00024972 181B                       		move.b	(a3)+,d4
00024974 4884                       		ext.w	d4
00024976 D444                       		add.w	d4,d2
00024978 B042                       		cmp.w	d2,d0
0002497A 6500                       		bcs.s	loc_18F38
0002497C 181A                       		move.b	(a2)+,d4
0002497E 4884                       		ext.w	d4
00024980 D244                       		add.w	d4,d1
00024982 181B                       		move.b	(a3)+,d4
00024984 4884                       		ext.w	d4
00024986 D644                       		add.w	d4,d3
00024988 B641                       		cmp.w	d1,d3
0002498A 6500                       		bcs.s	loc_18F38
0002498C 181A                       		move.b	(a2)+,d4
0002498E 4884                       		ext.w	d4
00024990 D244                       		add.w	d4,d1
00024992 181B                       		move.b	(a3)+,d4
00024994 4884                       		ext.w	d4
00024996 D644                       		add.w	d4,d3
00024998 B243                       		cmp.w	d3,d1
0002499A 6500                       		bcs.s	loc_18F38
0002499C 5428 0024                  		addq.b	#2,$24(a0)
000249A0 4268 0028                  		clr.w	$28(a0)
000249A4 4229 0020                  		clr.b	$20(a1)
000249A8 5329 0021                  		subq.b	#1,$21(a1)
000249AC 6600                       		bne.s	loc_18F38
000249AE 08E9 0007 0022             		bset	#7,$22(a1)
000249B4 4268 0010                  		clr.w	$10(a0)
000249B8 4268 0012                  		clr.w	$12(a0)
000249BC                            
000249BC                            loc_18F38:
000249BC 4A68 0012                  		tst.w	$12(a0)
000249C0 6A00                       		bpl.s	loc_18F5C
000249C2 4EB9 0001 5BC2             		jsr	ObjectFall
000249C8 3028 0034                  		move.w	$34(a0),d0
000249CC 0440 002F                  		subi.w	#$2F,d0
000249D0 B068 000C                  		cmp.w	$C(a0),d0
000249D4 6E00                       		bgt.s	loc_18F58
000249D6 4EB9 0001 5BC2             		jsr	ObjectFall
000249DC                            
000249DC                            loc_18F58:
000249DC 6000 FF20                  		bra.w	loc_18E7A
000249E0                            ; ===========================================================================
000249E0                            
000249E0                            loc_18F5C:
000249E0 4EB9 0001 5BC2             		jsr	ObjectFall
000249E6 2268 003C                  		movea.l	$3C(a0),a1
000249EA 45F9 0000 0000             		lea	(word_19018).l,a2
000249F0 7000                       		moveq	#0,d0
000249F2 1029 001A                  		move.b	$1A(a1),d0
000249F6 3228 0008                  		move.w	8(a0),d1
000249FA 9268 0030                  		sub.w	$30(a0),d1
000249FE 6400                       		bcc.s	loc_18F7E
00024A00 5440                       		addq.w	#2,d0
00024A02                            
00024A02                            loc_18F7E:
00024A02 D040                       		add.w	d0,d0
00024A04 3228 0034                  		move.w	$34(a0),d1
00024A08 D272 0000                  		add.w	(a2,d0.w),d1
00024A0C B268 000C                  		cmp.w	$C(a0),d1
00024A10 6ECA                       		bgt.s	loc_18F58
00024A12 2268 003C                  		movea.l	$3C(a0),a1
00024A16 7202                       		moveq	#2,d1
00024A18 4A68 0010                  		tst.w	$10(a0)
00024A1C 6B00                       		bmi.s	loc_18F9C
00024A1E 7200                       		moveq	#0,d1
00024A20                            
00024A20                            loc_18F9C:
00024A20 317C 0000 0028             		move.w	#0,$28(a0)
00024A26                            
00024A26                            loc_18FA2:
00024A26 1341 003A                  		move.b	d1,$3A(a1)
00024A2A 1141 003A                  		move.b	d1,$3A(a0)
00024A2E B229 001A                  		cmp.b	$1A(a1),d1
00024A32 6700                       		beq.s	loc_19008
00024A34 08A9 0003 0022             		bclr	#3,$22(a1)
00024A3A 6700                       		beq.s	loc_19008
00024A3C 4229 0025                  		clr.b	$25(a1)
00024A40 137C 0002 0024             		move.b	#2,$24(a1)
00024A46 45F8 D000                  		lea	($FFFFD000).w,a2
00024A4A 3568 0012 0012             		move.w	$12(a0),$12(a2)
00024A50 446A 0012                  		neg.w	$12(a2)
00024A54 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00024A5A 6600                       		bne.s	loc_18FDC
00024A5C E0EA 0012                  		asr	$12(a2)
00024A60                            
00024A60                            loc_18FDC:
00024A60 08EA 0001 0022             		bset	#1,$22(a2)
00024A66 08AA 0003 0022             		bclr	#3,$22(a2)
00024A6C 422A 003C                  		clr.b	$3C(a2)
00024A70 2F08                       		move.l	a0,-(sp)
00024A72 41D2                       		lea	(a2),a0
00024A74 4EBA 85CA                  		jsr	Obj01_ChkRoll
00024A78 205F                       		movea.l	(sp)+,a0
00024A7A 157C 0002 0024             		move.b	#2,$24(a2)
00024A80 303C 00B1                  		move.w	#$B1,d0
00024A84 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play "spring" sound
00024A8A                            
00024A8A                            loc_19008:
00024A8A 4268 0010                  		clr.w	$10(a0)
00024A8E 4268 0012                  		clr.w	$12(a0)
00024A92 5428 0024                  		addq.b	#2,$24(a0)
00024A96 6000 FE66                  		bra.w	loc_18E7A
00024A9A                            ; ===========================================================================
00024A9A FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00024AA4                            		even
00024AA4 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00024AA8                            		even
00024AA8 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00024AAC                            		even
00024AAC                            ; ===========================================================================
00024AAC                            
00024AAC                            Obj7B_Explode:				; XREF: Obj7B_Index
00024AAC 10BC 003F                  		move.b	#$3F,(a0)
00024AB0 4228 0024                  		clr.b	$24(a0)
00024AB4 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00024ABA 6700                       		beq.s	Obj7B_MakeFrag
00024ABC 4E75                       		rts	
00024ABE                            ; ===========================================================================
00024ABE                            
00024ABE                            Obj7B_MakeFrag:
00024ABE 3168 0034 000C             		move.w	$34(a0),$C(a0)
00024AC4 7203                       		moveq	#3,d1
00024AC6 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00024ACA                            
00024ACA                            Obj7B_Loop:
00024ACA 4EB9 0001 6714             		jsr	SingleObjLoad
00024AD0 6600                       		bne.s	loc_1909A
00024AD2 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00024AD6 137C 000A 0024             		move.b	#$A,$24(a1)
00024ADC 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00024AE4 337C 0180 0018             		move.w	#$180,priority(a1)
00024AEA 337C 0518 0002             		move.w	#$518,2(a1)
00024AF0 3368 0008 0008             		move.w	8(a0),8(a1)
00024AF6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00024AFC 335A 0010                  		move.w	(a2)+,$10(a1)
00024B00 335A 0012                  		move.w	(a2)+,$12(a1)
00024B04 137C 0098 0020             		move.b	#$98,$20(a1)
00024B0A 0029 0004 0001             		ori.b	#4,1(a1)
00024B10 08E9 0007 0001             		bset	#7,1(a1)
00024B16 137C 000C 0023             		move.b	#$C,width_pixels(a1)
00024B1C                            
00024B1C                            loc_1909A:
00024B1C 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00024B20                            
00024B20 4E75                       		rts	
00024B22                            ; ===========================================================================
00024B22 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00024B26 FF60 FDC0                  		dc.w $FF60, $FDC0
00024B2A 0100 FCC0                  		dc.w $100, $FCC0
00024B2E 00A0 FDC0                  		dc.w $A0, $FDC0
00024B32                            ; ===========================================================================
00024B32                            
00024B32                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00024B32 4EB9 0001 5BE2             		jsr	SpeedToPos
00024B38 3168 0008 0030             		move.w	8(a0),$30(a0)
00024B3E 3168 000C 0034             		move.w	$C(a0),$34(a0)
00024B44 0668 0018 0012             		addi.w	#$18,$12(a0)
00024B4A 7004                       		moveq	#4,d0
00024B4C C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00024B50 E448                       		lsr.w	#2,d0
00024B52 1140 001A                  		move.b	d0,$1A(a0)
00024B56 4A28 0001                  		tst.b	1(a0)
00024B5A 6A00 F7D6                  		bpl.w	Obj7A_Delete
00024B5E 4E75                       		rts	
00024B60                            ; ===========================================================================
00024B60                            ; ---------------------------------------------------------------------------
00024B60                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00024B60                            ; ---------------------------------------------------------------------------
00024B60                            Map_obj7B:
00024B60                            	include "_maps\obj7B.asm"
00024B60                            ; ---------------------------------------------------------------------------
00024B60                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00024B60                            ; ---------------------------------------------------------------------------
00024B60 0000                       		dc.w byte_190E2-Map_obj7B
00024B62 0000                       		dc.w byte_190E8-Map_obj7B
00024B64 01                         byte_190E2:	dc.b 1
00024B65 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00024B6A 01                         byte_190E8:	dc.b 1
00024B6B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00024B70                            		even
00024B70                            		even
00024B70                            
00024B70                            ; ===========================================================================
00024B70                            ; ---------------------------------------------------------------------------
00024B70                            ; Object 75 - Eggman (SYZ)
00024B70                            ; ---------------------------------------------------------------------------
00024B70                            
00024B70                            Obj75:					; XREF: Obj_Index
00024B70 7000                       		moveq	#0,d0
00024B72 1028 0024                  		move.b	$24(a0),d0
00024B76 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00024B7A 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00024B7E                            ; ===========================================================================
00024B7E 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00024B80 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00024B82 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00024B84 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00024B86 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00024B88                            
00024B88 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00024B8B 0401 05                    		dc.b 4,	1, 5
00024B8E 0607 05                    		dc.b 6,	7, 5
00024B91 0800 05                    		dc.b 8,	0, 5
00024B94                            ; ===========================================================================
00024B94                            
00024B94                            Obj75_Main:				; XREF: Obj75_Index
00024B94 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00024B9A 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00024BA0 3168 0008 0030             		move.w	8(a0),$30(a0)
00024BA6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00024BAC 117C 000F 0020             		move.b	#$F,$20(a0)
00024BB2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00024BB8 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00024BBC 2248                       		movea.l	a0,a1
00024BBE 7203                       		moveq	#3,d1
00024BC0 6000                       		bra.s	Obj75_LoadBoss
00024BC2                            ; ===========================================================================
00024BC2                            
00024BC2                            Obj75_Loop:
00024BC2 4EB9 0001 672A             		jsr	SingleObjLoad2
00024BC8 6600                       		bne.s	Obj75_ShipMain
00024BCA 12BC 0075                  		move.b	#$75,(a1)
00024BCE 3368 0008 0008             		move.w	8(a0),8(a1)
00024BD4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00024BDA                            
00024BDA                            Obj75_LoadBoss:				; XREF: Obj75_Main
00024BDA 08A8 0000 0022             		bclr	#0,$22(a0)
00024BE0 4229 0025                  		clr.b	$25(a1)
00024BE4 135A 0024                  		move.b	(a2)+,$24(a1)
00024BE8 135A 001C                  		move.b	(a2)+,$1C(a1)
00024BEC 135A 0018                  		move.b	(a2)+,priority(a1)
00024BF0 3029 0018                          move.w  priority(a1),d0
00024BF4 E248                               lsr.w   #1,d0
00024BF6 0240 0380                          andi.w  #$380,d0
00024BFA 3340 0018                          move.w  d0,priority(a1)
00024BFE 237C 0002 3790 0004        		move.l	#Map_Eggman,4(a1)
00024C06 337C 0400 0002             		move.w	#$400,2(a1)
00024C0C 137C 0004 0001             		move.b	#4,1(a1)
00024C12 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00024C18 2348 0034                  		move.l	a0,$34(a1)
00024C1C 51C9 FFA4                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00024C20                            
00024C20                            Obj75_ShipMain:				; XREF: Obj75_Index
00024C20 7000                       		moveq	#0,d0
00024C22 1028 0025                  		move.b	$25(a0),d0
00024C26 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00024C2A 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00024C2E 43F9 0002 3740             		lea	(Ani_Eggman).l,a1
00024C34 4EB9 0001 2624             		jsr	AnimateSprite
00024C3A 7003                       		moveq	#3,d0
00024C3C C028 0022                  		and.b	$22(a0),d0
00024C40 0228 00FC 0001             		andi.b	#$FC,1(a0)
00024C46 8128 0001                  		or.b	d0,1(a0)
00024C4A 4EF9 0001 5C48             		jmp	DisplaySprite
00024C50                            ; ===========================================================================
00024C50 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00024C54 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00024C58 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00024C5C                            ; ===========================================================================
00024C5C                            
00024C5C                            loc_191CC:				; XREF: Obj75_ShipIndex
00024C5C 317C FF00 0010             		move.w	#-$100,$10(a0)
00024C62 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00024C68 6400                       		bcc.s	loc_191DE
00024C6A 5428 0025                  		addq.b	#2,$25(a0)
00024C6E                            
00024C6E                            loc_191DE:
00024C6E 1028 003F                  		move.b	$3F(a0),d0
00024C72 5428 003F                  		addq.b	#2,$3F(a0)
00024C76 4EB9 0000 8DA4             		jsr	(CalcSine).l
00024C7C E440                       		asr.w	#2,d0
00024C7E 3140 0012                  		move.w	d0,$12(a0)
00024C82                            
00024C82                            loc_191F2:
00024C82 6100 E6B0                  		bsr.w	BossMove
00024C86 3168 0038 000C             		move.w	$38(a0),$C(a0)
00024C8C 3168 0030 0008             		move.w	$30(a0),8(a0)
00024C92                            
00024C92                            loc_19202:
00024C92 3028 0008                  		move.w	8(a0),d0
00024C96 0440 2C00                  		subi.w	#$2C00,d0
00024C9A EA48                       		lsr.w	#5,d0
00024C9C 1140 0034                  		move.b	d0,$34(a0)
00024CA0 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00024CA6 6400                       		bcc.s	locret_19256
00024CA8 4A28 0022                  		tst.b	$22(a0)
00024CAC 6B00                       		bmi.s	loc_19258
00024CAE 4A28 0020                  		tst.b	$20(a0)
00024CB2 6600                       		bne.s	locret_19256
00024CB4 4A28 003E                  		tst.b	$3E(a0)
00024CB8 6600                       		bne.s	loc_1923A
00024CBA 117C 0020 003E             		move.b	#$20,$3E(a0)
00024CC0                            ;		move.w	#$AC,d0
00024CC0 4EB9 0001 E844             		jsr	(BossModeMusic).l ;	play boss damage sound
00024CC6                            
00024CC6                            loc_1923A:
00024CC6 43F8 FB22                  		lea	($FFFFFB22).w,a1
00024CCA 7000                       		moveq	#0,d0
00024CCC 4A51                       		tst.w	(a1)
00024CCE 6600                       		bne.s	loc_19248
00024CD0 303C 0EEE                  		move.w	#$EEE,d0
00024CD4                            
00024CD4                            loc_19248:
00024CD4 3280                       		move.w	d0,(a1)
00024CD6 5328 003E                  		subq.b	#1,$3E(a0)
00024CDA 6600                       		bne.s	locret_19256
00024CDC 117C 000F 0020             		move.b	#$F,$20(a0)
00024CE2                            
00024CE2                            locret_19256:
00024CE2 4E75                       		rts	
00024CE4                            ; ===========================================================================
00024CE4                            
00024CE4                            loc_19258:				; XREF: loc_19202
00024CE4 7064                       		moveq	#100,d0
00024CE6 6100 0000                  		bsr.w	AddPoints
00024CEA 117C 0006 0025             		move.b	#6,$25(a0)
00024CF0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00024CF6 4268 0010                  		clr.w	$10(a0)
00024CFA 4E75                       		rts	
00024CFC                            ; ===========================================================================
00024CFC                            
00024CFC                            loc_19270:				; XREF: Obj75_ShipIndex
00024CFC 3028 0030                  		move.w	$30(a0),d0
00024D00 317C 0140 0010             		move.w	#$140,$10(a0)
00024D06 0828 0000 0022             		btst	#0,$22(a0)
00024D0C 6600                       		bne.s	loc_1928E
00024D0E 4468 0010                  		neg.w	$10(a0)
00024D12 0C40 2C08                  		cmpi.w	#$2C08,d0
00024D16 6E00                       		bgt.s	loc_1929E
00024D18 6000                       		bra.s	loc_19294
00024D1A                            ; ===========================================================================
00024D1A                            
00024D1A                            loc_1928E:
00024D1A 0C40 2D38                  		cmpi.w	#$2D38,d0
00024D1E 6D00                       		blt.s	loc_1929E
00024D20                            
00024D20                            loc_19294:
00024D20 0868 0000 0022             		bchg	#0,$22(a0)
00024D26 4228 003D                  		clr.b	$3D(a0)
00024D2A                            
00024D2A                            loc_1929E:
00024D2A 0440 2C10                  		subi.w	#$2C10,d0
00024D2E 0240 001F                  		andi.w	#$1F,d0
00024D32 0440 001F                  		subi.w	#$1F,d0
00024D36 6A00                       		bpl.s	loc_192AE
00024D38 4440                       		neg.w	d0
00024D3A                            
00024D3A                            loc_192AE:
00024D3A 5340                       		subq.w	#1,d0
00024D3C 6E00                       		bgt.s	loc_192E8
00024D3E 4A28 003D                  		tst.b	$3D(a0)
00024D42 6600                       		bne.s	loc_192E8
00024D44 3238 D008                  		move.w	($FFFFD008).w,d1
00024D48 0441 2C00                  		subi.w	#$2C00,d1
00024D4C EA41                       		asr.w	#5,d1
00024D4E B228 0034                  		cmp.b	$34(a0),d1
00024D52 6600                       		bne.s	loc_192E8
00024D54 7000                       		moveq	#0,d0
00024D56 1028 0034                  		move.b	$34(a0),d0
00024D5A EB40                       		asl.w	#5,d0
00024D5C 0640 2C10                  		addi.w	#$2C10,d0
00024D60 3140 0030                  		move.w	d0,$30(a0)
00024D64 6100 0000                  		bsr.w	Obj75_FindBlocks
00024D68 5428 0025                  		addq.b	#2,$25(a0)
00024D6C 4268 0028                  		clr.w	$28(a0)
00024D70 4268 0010                  		clr.w	$10(a0)
00024D74                            
00024D74                            loc_192E8:
00024D74 6000 FEF8                  		bra.w	loc_191DE
00024D78                            ; ===========================================================================
00024D78                            
00024D78                            loc_192EC:				; XREF: Obj75_ShipIndex
00024D78 7000                       		moveq	#0,d0
00024D7A 1028 0028                  		move.b	$28(a0),d0
00024D7E 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00024D82 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00024D86                            ; ===========================================================================
00024D86 0000                       off_192FA:	dc.w loc_19302-off_192FA
00024D88 0000                       		dc.w loc_19348-off_192FA
00024D8A 0000                       		dc.w loc_1938E-off_192FA
00024D8C 0000                       		dc.w loc_193D0-off_192FA
00024D8E                            ; ===========================================================================
00024D8E                            
00024D8E                            loc_19302:				; XREF: off_192FA
00024D8E 317C 0180 0012             		move.w	#$180,$12(a0)
00024D94 3028 0038                  		move.w	$38(a0),d0
00024D98 0C40 0556                  		cmpi.w	#$556,d0
00024D9C 6500                       		bcs.s	loc_19344
00024D9E 317C 0556 0038             		move.w	#$556,$38(a0)
00024DA4 4268 003C                  		clr.w	$3C(a0)
00024DA8 70FF                       		moveq	#-1,d0
00024DAA 3028 0036                  		move.w	$36(a0),d0
00024DAE 6700                       		beq.s	loc_1933C
00024DB0 2240                       		movea.l	d0,a1
00024DB2 137C 00FF 0029             		move.b	#-1,$29(a1)
00024DB8 117C 00FF 0029             		move.b	#-1,$29(a0)
00024DBE 2348 0034                  		move.l	a0,$34(a1)
00024DC2 317C 0032 003C             		move.w	#$32,$3C(a0)
00024DC8                            
00024DC8                            loc_1933C:
00024DC8 4268 0012                  		clr.w	$12(a0)
00024DCC 5428 0028                  		addq.b	#2,$28(a0)
00024DD0                            
00024DD0                            loc_19344:
00024DD0 6000 FEB0                  		bra.w	loc_191F2
00024DD4                            ; ===========================================================================
00024DD4                            
00024DD4                            loc_19348:				; XREF: off_192FA
00024DD4 5368 003C                  		subq.w	#1,$3C(a0)
00024DD8 6A00                       		bpl.s	loc_19366
00024DDA 5428 0028                  		addq.b	#2,$28(a0)
00024DDE 317C F800 0012             		move.w	#-$800,$12(a0)
00024DE4 4A68 0036                  		tst.w	$36(a0)
00024DE8 6600                       		bne.s	loc_19362
00024DEA E0E8 0012                  		asr	$12(a0)
00024DEE                            
00024DEE                            loc_19362:
00024DEE 7000                       		moveq	#0,d0
00024DF0 6000                       		bra.s	loc_1937C
00024DF2                            ; ===========================================================================
00024DF2                            
00024DF2                            loc_19366:
00024DF2 7000                       		moveq	#0,d0
00024DF4 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00024DFA 6E00                       		bgt.s	loc_1937C
00024DFC 7002                       		moveq	#2,d0
00024DFE 0828 0001 003D             		btst	#1,$3D(a0)
00024E04 6700                       		beq.s	loc_1937C
00024E06 4440                       		neg.w	d0
00024E08                            
00024E08                            loc_1937C:
00024E08 D068 0038                  		add.w	$38(a0),d0
00024E0C 3140 000C                  		move.w	d0,$C(a0)
00024E10 3168 0030 0008             		move.w	$30(a0),8(a0)
00024E16 6000 FE7A                  		bra.w	loc_19202
00024E1A                            ; ===========================================================================
00024E1A                            
00024E1A                            loc_1938E:				; XREF: off_192FA
00024E1A 303C 04DA                  		move.w	#$4DA,d0
00024E1E 4A68 0036                  		tst.w	$36(a0)
00024E22 6700                       		beq.s	loc_1939C
00024E24 0440 0018                  		subi.w	#$18,d0
00024E28                            
00024E28                            loc_1939C:
00024E28 B068 0038                  		cmp.w	$38(a0),d0
00024E2C 6D00                       		blt.s	loc_193BE
00024E2E 317C 0008 003C             		move.w	#8,$3C(a0)
00024E34 4A68 0036                  		tst.w	$36(a0)
00024E38 6700                       		beq.s	loc_193B4
00024E3A 317C 002D 003C             		move.w	#$2D,$3C(a0)
00024E40                            
00024E40                            loc_193B4:
00024E40 5428 0028                  		addq.b	#2,$28(a0)
00024E44 4268 0012                  		clr.w	$12(a0)
00024E48 6000                       		bra.s	loc_193CC
00024E4A                            ; ===========================================================================
00024E4A                            
00024E4A                            loc_193BE:
00024E4A 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00024E50 6C00                       		bge.s	loc_193CC
00024E52 0668 000C 0012             		addi.w	#$C,$12(a0)
00024E58                            
00024E58                            loc_193CC:
00024E58 6000 FE28                  		bra.w	loc_191F2
00024E5C                            ; ===========================================================================
00024E5C                            
00024E5C                            loc_193D0:				; XREF: off_192FA
00024E5C 5368 003C                  		subq.w	#1,$3C(a0)
00024E60 6E00                       		bgt.s	loc_19406
00024E62 6B00                       		bmi.s	loc_193EE
00024E64 70FF                       		moveq	#-1,d0
00024E66 3028 0036                  		move.w	$36(a0),d0
00024E6A 6700                       		beq.s	loc_193E8
00024E6C 2240                       		movea.l	d0,a1
00024E6E 137C 000A 0029             		move.b	#$A,$29(a1)
00024E74                            
00024E74                            loc_193E8:
00024E74 4268 0036                  		clr.w	$36(a0)
00024E78 6000                       		bra.s	loc_19406
00024E7A                            ; ===========================================================================
00024E7A                            
00024E7A                            loc_193EE:
00024E7A 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00024E80 6600                       		bne.s	loc_19406
00024E82 4228 0029                  		clr.b	$29(a0)
00024E86 5528 0025                  		subq.b	#2,$25(a0)
00024E8A 117C 00FF 003D             		move.b	#-1,$3D(a0)
00024E90 6000                       		bra.s	loc_19446
00024E92                            ; ===========================================================================
00024E92                            
00024E92                            loc_19406:
00024E92 7001                       		moveq	#1,d0
00024E94 4A68 0036                  		tst.w	$36(a0)
00024E98 6700                       		beq.s	loc_19410
00024E9A 7002                       		moveq	#2,d0
00024E9C                            
00024E9C                            loc_19410:
00024E9C 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00024EA2 6700                       		beq.s	loc_19424
00024EA4 6D00                       		blt.s	loc_1941C
00024EA6 4440                       		neg.w	d0
00024EA8                            
00024EA8                            loc_1941C:
00024EA8 4A68 0036                  		tst.w	$36(a0)
00024EAC D168 0038                  		add.w	d0,$38(a0)
00024EB0                            
00024EB0                            loc_19424:
00024EB0 7000                       		moveq	#0,d0
00024EB2 4A68 0036                  		tst.w	$36(a0)
00024EB6 6700                       		beq.s	loc_19438
00024EB8 7002                       		moveq	#2,d0
00024EBA 0828 0000 003D             		btst	#0,$3D(a0)
00024EC0 6700                       		beq.s	loc_19438
00024EC2 4440                       		neg.w	d0
00024EC4                            
00024EC4                            loc_19438:
00024EC4 D068 0038                  		add.w	$38(a0),d0
00024EC8 3140 000C                  		move.w	d0,$C(a0)
00024ECC 3168 0030 0008             		move.w	$30(a0),8(a0)
00024ED2                            
00024ED2                            loc_19446:
00024ED2 6000 FDBE                  		bra.w	loc_19202
00024ED6                            
00024ED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00024ED6                            
00024ED6                            
00024ED6                            Obj75_FindBlocks:			; XREF: loc_192AE
00024ED6 4268 0036                  		clr.w	$36(a0)
00024EDA 43F8 D040                  		lea	($FFFFD040).w,a1
00024EDE 703E                       		moveq	#$3E,d0
00024EE0 7276                       		moveq	#$76,d1
00024EE2 1428 0034                  		move.b	$34(a0),d2
00024EE6                            
00024EE6                            Obj75_FindLoop:
00024EE6 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00024EE8 6600                       		bne.s	loc_1946A	; if not, branch
00024EEA B429 0028                  		cmp.b	$28(a1),d2
00024EEE 6600                       		bne.s	loc_1946A
00024EF0 3149 0036                  		move.w	a1,$36(a0)
00024EF4 6000                       		bra.s	locret_19472
00024EF6                            ; ===========================================================================
00024EF6                            
00024EF6                            loc_1946A:
00024EF6 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00024EFA 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00024EFE                            
00024EFE                            locret_19472:
00024EFE 4E75                       		rts	
00024F00                            ; End of function Obj75_FindBlocks
00024F00                            
00024F00                            ; ===========================================================================
00024F00                            
00024F00                            loc_19474:				; XREF: Obj75_ShipIndex
00024F00 5368 003C                  		subq.w	#1,$3C(a0)
00024F04 6B00                       		bmi.s	loc_1947E
00024F06 6000 E3E6                  		bra.w	BossDefeated
00024F0A                            ; ===========================================================================
00024F0A                            
00024F0A                            loc_1947E:
00024F0A 5428 0025                  		addq.b	#2,$25(a0)
00024F0E 4268 0012                  		clr.w	$12(a0)
00024F12 08E8 0000 0022             		bset	#0,$22(a0)
00024F18 08A8 0007 0022             		bclr	#7,$22(a0)
00024F1E 4268 0010                  		clr.w	$10(a0)
00024F22 317C FFFF 003C             		move.w	#-1,$3C(a0)
00024F28 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00024F2C 6600                       		bne.s	loc_194A8
00024F2E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00024F34                            
00024F34                            loc_194A8:
00024F34 6000 FD5C                  		bra.w	loc_19202
00024F38                            ; ===========================================================================
00024F38                            
00024F38                            loc_194AC:				; XREF: Obj75_ShipIndex
00024F38 5268 003C                  		addq.w	#1,$3C(a0)
00024F3C 6700                       		beq.s	loc_194BC
00024F3E 6A00                       		bpl.s	loc_194C2
00024F40 0668 0018 0012             		addi.w	#$18,$12(a0)
00024F46 6000                       		bra.s	loc_194EE
00024F48                            ; ===========================================================================
00024F48                            
00024F48                            loc_194BC:
00024F48 4268 0012                  		clr.w	$12(a0)
00024F4C 6000                       		bra.s	loc_194EE
00024F4E                            ; ===========================================================================
00024F4E                            
00024F4E                            loc_194C2:
00024F4E 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00024F54 6500                       		bcs.s	loc_194DA
00024F56 6700                       		beq.s	loc_194E0
00024F58 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00024F5E 6500                       		bcs.s	loc_194EE
00024F60 5428 0025                  		addq.b	#2,$25(a0)
00024F64 6000                       		bra.s	loc_194EE
00024F66                            ; ===========================================================================
00024F66                            
00024F66                            loc_194DA:
00024F66 5168 0012                  		subq.w	#8,$12(a0)
00024F6A 6000                       		bra.s	loc_194EE
00024F6C                            ; ===========================================================================
00024F6C                            
00024F6C                            loc_194E0:
00024F6C 4268 0012                  		clr.w	$12(a0)
00024F70                            	;	move.w	#$85,d0
00024F70 4EB9 0001 D478             		jsr	(super_GetBgm).l	; play SYZ music
00024F76                            
00024F76                            loc_194EE:
00024F76 6000 FD0A                  		bra.w	loc_191F2
00024F7A                            ; ===========================================================================
00024F7A                            
00024F7A                            loc_194F2:				; XREF: Obj75_ShipIndex
00024F7A 317C 0400 0010             		move.w	#$400,$10(a0)
00024F80 317C FFC0 0012             		move.w	#-$40,$12(a0)
00024F86 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00024F8C 6400                       		bcc.s	loc_1950C
00024F8E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00024F92 6000                       		bra.s	loc_19512
00024F94                            ; ===========================================================================
00024F94                            
00024F94                            loc_1950C:
00024F94 4A28 0001                  		tst.b	1(a0)
00024F98 6A00                       		bpl.s	Obj75_ShipDelete
00024F9A                            
00024F9A                            loc_19512:
00024F9A 6100 E398                  		bsr.w	BossMove
00024F9E 6000 FCCE                  		bra.w	loc_191DE
00024FA2                            ; ===========================================================================
00024FA2                            
00024FA2                            Obj75_ShipDelete:
00024FA2 4EF9 0001 5BFC             		jmp	DeleteObject
00024FA8                            ; ===========================================================================
00024FA8                            
00024FA8                            Obj75_FaceMain:				; XREF: Obj75_Index
00024FA8 7201                       		moveq	#1,d1
00024FAA 2268 0034                  		movea.l	$34(a0),a1
00024FAE 7000                       		moveq	#0,d0
00024FB0 1029 0025                  		move.b	$25(a1),d0
00024FB4 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00024FB8 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00024FBC 1141 001C                  		move.b	d1,$1C(a0)
00024FC0 1010                       		move.b	(a0),d0
00024FC2 B011                       		cmp.b	(a1),d0
00024FC4 6600                       		bne.s	Obj75_FaceDelete
00024FC6 6000                       		bra.s	loc_195BE
00024FC8                            ; ===========================================================================
00024FC8                            
00024FC8                            Obj75_FaceDelete:
00024FC8 4EF9 0001 5BFC             		jmp	DeleteObject
00024FCE                            ; ===========================================================================
00024FCE 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00024FD2 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00024FD6 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00024FDA                            ; ===========================================================================
00024FDA                            
00024FDA                            loc_19552:				; XREF: off_19546
00024FDA 720A                       		moveq	#$A,d1
00024FDC 4E75                       		rts	
00024FDE                            ; ===========================================================================
00024FDE                            
00024FDE                            loc_19556:				; XREF: off_19546
00024FDE 7206                       		moveq	#6,d1
00024FE0 4E75                       		rts	
00024FE2                            ; ===========================================================================
00024FE2                            
00024FE2                            loc_1955A:				; XREF: off_19546
00024FE2 7000                       		moveq	#0,d0
00024FE4 1029 0028                  		move.b	$28(a1),d0
00024FE8 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00024FEC 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00024FF0                            ; ===========================================================================
00024FF0 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00024FF4 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00024FF8                            ; ===========================================================================
00024FF8                            
00024FF8                            loc_19570:				; XREF: off_19568
00024FF8 6000                       		bra.s	loc_19574
00024FFA                            ; ===========================================================================
00024FFA                            
00024FFA                            loc_19572:				; XREF: off_19568
00024FFA 7206                       		moveq	#6,d1
00024FFC                            
00024FFC                            loc_19574:				; XREF: off_19546
00024FFC 4A29 0020                  		tst.b	$20(a1)
00025000 6600                       		bne.s	loc_1957E
00025002 7205                       		moveq	#5,d1
00025004 4E75                       		rts	
00025006                            ; ===========================================================================
00025006                            
00025006                            loc_1957E:
00025006 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0002500C 6500                       		bcs.s	locret_19588
0002500E 7204                       		moveq	#4,d1
00025010                            
00025010                            locret_19588:
00025010 4E75                       		rts	
00025012                            ; ===========================================================================
00025012                            
00025012                            Obj75_FlameMain:			; XREF: Obj75_Index
00025012 117C 0007 001C             		move.b	#7,$1C(a0)
00025018 2268 0034                  		movea.l	$34(a0),a1
0002501C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00025022 6600                       		bne.s	loc_195AA
00025024 117C 000B 001C             		move.b	#$B,$1C(a0)
0002502A 4A28 0001                  		tst.b	1(a0)
0002502E 6A00                       		bpl.s	Obj75_FlameDelete
00025030 6000                       		bra.s	loc_195B6
00025032                            ; ===========================================================================
00025032                            
00025032                            loc_195AA:
00025032 4A69 0010                  		tst.w	$10(a1)
00025036 6700                       		beq.s	loc_195B6
00025038 117C 0008 001C             		move.b	#8,$1C(a0)
0002503E                            
0002503E                            loc_195B6:
0002503E 6000                       		bra.s	loc_195BE
00025040                            ; ===========================================================================
00025040                            
00025040                            Obj75_FlameDelete:
00025040 4EF9 0001 5BFC             		jmp	DeleteObject
00025046                            ; ===========================================================================
00025046                            
00025046                            loc_195BE:
00025046 43F9 0002 3740             		lea	(Ani_Eggman).l,a1
0002504C 4EB9 0001 2624             		jsr	AnimateSprite
00025052 2268 0034                  		movea.l	$34(a0),a1
00025056 3169 0008 0008             		move.w	8(a1),8(a0)
0002505C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00025062                            
00025062                            loc_195DA:
00025062 1169 0022 0022             		move.b	$22(a1),$22(a0)
00025068 7003                       		moveq	#3,d0
0002506A C028 0022                  		and.b	$22(a0),d0
0002506E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00025074 8128 0001                  		or.b	d0,1(a0)
00025078 4EF9 0001 5C48             		jmp	DisplaySprite
0002507E                            ; ===========================================================================
0002507E                            
0002507E                            Obj75_SpikeMain:			; XREF: Obj75_Index
0002507E 217C 0002 3858 0004        		move.l	#Map_BossItems,4(a0)
00025086 317C 246C 0002             		move.w	#$246C,2(a0)
0002508C 117C 0005 001A             		move.b	#5,$1A(a0)
00025092 2268 0034                  		movea.l	$34(a0),a1
00025096 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0002509C 6600                       		bne.s	loc_1961C
0002509E 4A28 0001                  		tst.b	1(a0)
000250A2 6A00                       		bpl.s	Obj75_SpikeDelete
000250A4                            
000250A4                            loc_1961C:
000250A4 3169 0008 0008             		move.w	8(a1),8(a0)
000250AA 3169 000C 000C             		move.w	$C(a1),$C(a0)
000250B0 3028 003C                  		move.w	$3C(a0),d0
000250B4 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000250BA 6600                       		bne.s	loc_19652
000250BC 0C29 0006 0028             		cmpi.b	#6,$28(a1)
000250C2 6700                       		beq.s	loc_1964C
000250C4 4A29 0028                  		tst.b	$28(a1)
000250C8 6600                       		bne.s	loc_19658
000250CA 0C40 0094                  		cmpi.w	#$94,d0
000250CE 6C00                       		bge.s	loc_19658
000250D0 5E40                       		addq.w	#7,d0
000250D2 6000                       		bra.s	loc_19658
000250D4                            ; ===========================================================================
000250D4                            
000250D4                            loc_1964C:
000250D4 4A69 003C                  		tst.w	$3C(a1)
000250D8 6A00                       		bpl.s	loc_19658
000250DA                            
000250DA                            loc_19652:
000250DA 4A40                       		tst.w	d0
000250DC 6F00                       		ble.s	loc_19658
000250DE 5B40                       		subq.w	#5,d0
000250E0                            
000250E0                            loc_19658:
000250E0 3140 003C                  		move.w	d0,$3C(a0)
000250E4 E440                       		asr.w	#2,d0
000250E6 D168 000C                  		add.w	d0,$C(a0)
000250EA 117C 0008 0023             		move.b	#8,width_pixels(a0)
000250F0 117C 000C 0016             		move.b	#$C,$16(a0)
000250F6 4228 0020                  		clr.b	$20(a0)
000250FA 2268 0034                  		movea.l	$34(a0),a1
000250FE 4A29 0020                  		tst.b	$20(a1)
00025102 6700                       		beq.s	loc_19688
00025104 4A29 0029                  		tst.b	$29(a1)
00025108 6600                       		bne.s	loc_19688
0002510A 117C 0084 0020             		move.b	#$84,$20(a0)
00025110                            
00025110                            loc_19688:
00025110 6000 FF50                  		bra.w	loc_195DA
00025114                            ; ===========================================================================
00025114                            
00025114                            Obj75_SpikeDelete:
00025114 4EF9 0001 5BFC             		jmp	DeleteObject
0002511A                            ; ===========================================================================
0002511A                            ; ---------------------------------------------------------------------------
0002511A                            ; Object 76 - blocks that Eggman picks up (SYZ)
0002511A                            ; ---------------------------------------------------------------------------
0002511A                            
0002511A                            Obj76:					; XREF: Obj_Index
0002511A 7000                       		moveq	#0,d0
0002511C 1028 0024                  		move.b	$24(a0),d0
00025120 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00025124 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00025128                            ; ===========================================================================
00025128 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0002512A 0000                       		dc.w Obj76_Action-Obj76_Index
0002512C 0000                       		dc.w loc_19762-Obj76_Index
0002512E                            ; ===========================================================================
0002512E                            
0002512E                            Obj76_Main:				; XREF: Obj76_Index
0002512E 7800                       		moveq	#0,d4
00025130 3A3C 2C10                  		move.w	#$2C10,d5
00025134 7C09                       		moveq	#9,d6
00025136 43D0                       		lea	(a0),a1
00025138 6000                       		bra.s	Obj76_MakeBlock
0002513A                            ; ===========================================================================
0002513A                            
0002513A                            Obj76_Loop:
0002513A 4EB9 0001 6714             		jsr	SingleObjLoad
00025140 6600                       		bne.s	Obj76_ExitLoop
00025142                            
00025142                            Obj76_MakeBlock:			; XREF: Obj76_Main
00025142 12BC 0076                  		move.b	#$76,(a1)
00025146 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0002514E 337C 4000 0002             		move.w	#$4000,2(a1)
00025154 137C 0004 0001             		move.b	#4,1(a1)
0002515A 137C 0010 0023             		move.b	#$10,width_pixels(a1)
00025160 137C 0010 0016             		move.b	#$10,$16(a1)
00025166 337C 0180 0018             		move.w	#$180,priority(a1)
0002516C 3345 0008                  		move.w	d5,8(a1)	; set x-position
00025170 337C 0582 000C             		move.w	#$582,$C(a1)
00025176 3344 0028                  		move.w	d4,$28(a1)
0002517A 0644 0101                  		addi.w	#$101,d4
0002517E 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00025182 5429 0024                  		addq.b	#2,$24(a1)
00025186 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0002518A                            
0002518A                            Obj76_ExitLoop:
0002518A 4E75                       		rts	
0002518C                            ; ===========================================================================
0002518C                            
0002518C                            Obj76_Action:				; XREF: Obj76_Index
0002518C 1028 0029                  		move.b	$29(a0),d0
00025190 B028 0028                  		cmp.b	$28(a0),d0
00025194 6700                       		beq.s	Obj76_Solid
00025196 4A00                       		tst.b	d0
00025198 6B00                       		bmi.s	loc_19718
0002519A                            
0002519A                            loc_19712:
0002519A 6100 0000                  		bsr.w	Obj76_Break
0002519E 6000                       		bra.s	Obj76_Display
000251A0                            ; ===========================================================================
000251A0                            
000251A0                            loc_19718:
000251A0 2268 0034                  		movea.l	$34(a0),a1
000251A4 4A29 0021                  		tst.b	$21(a1)
000251A8 67F0                       		beq.s	loc_19712
000251AA 3169 0008 0008             		move.w	8(a1),8(a0)
000251B0 3169 000C 000C             		move.w	$C(a1),$C(a0)
000251B6 0668 002C 000C             		addi.w	#$2C,$C(a0)
000251BC B2C8                       		cmpa.w	a0,a1
000251BE 6500                       		bcs.s	Obj76_Display
000251C0 3029 0012                  		move.w	$12(a1),d0
000251C4 48C0                       		ext.l	d0
000251C6 E080                       		asr.l	#8,d0
000251C8 D168 000C                  		add.w	d0,$C(a0)
000251CC 6000                       		bra.s	Obj76_Display
000251CE                            ; ===========================================================================
000251CE                            
000251CE                            Obj76_Solid:				; XREF: Obj76_Action
000251CE 323C 001B                  		move.w	#$1B,d1
000251D2 343C 0010                  		move.w	#$10,d2
000251D6 363C 0011                  		move.w	#$11,d3
000251DA 3828 0008                  		move.w	8(a0),d4
000251DE 4EB9 0001 8F1E             		jsr	SolidObject
000251E4                            
000251E4                            Obj76_Display:				; XREF: Obj76_Action
000251E4 4EF9 0001 5C48             		jmp	DisplaySprite
000251EA                            ; ===========================================================================
000251EA                            
000251EA                            loc_19762:				; XREF: Obj76_Index
000251EA 4A28 0001                  		tst.b	1(a0)
000251EE 6A00                       		bpl.s	Obj76_Delete
000251F0 4EB9 0001 5BC2             		jsr	ObjectFall
000251F6 4EF9 0001 5C48             		jmp	DisplaySprite
000251FC                            ; ===========================================================================
000251FC                            
000251FC                            Obj76_Delete:
000251FC 4EF9 0001 5BFC             		jmp	DeleteObject
00025202                            
00025202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00025202                            
00025202                            
00025202                            Obj76_Break:				; XREF: Obj76_Action
00025202 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00025206 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0002520A 7801                       		moveq	#1,d4
0002520C 7203                       		moveq	#3,d1
0002520E 7438                       		moveq	#$38,d2
00025210 5428 0024                  		addq.b	#2,$24(a0)
00025214 117C 0008 0023             		move.b	#8,width_pixels(a0)
0002521A 117C 0008 0016             		move.b	#8,$16(a0)
00025220 43D0                       		lea	(a0),a1
00025222 6000                       		bra.s	Obj76_MakeFrag
00025224                            ; ===========================================================================
00025224                            
00025224                            Obj76_LoopFrag:
00025224 4EB9 0001 672A             		jsr	SingleObjLoad2
0002522A 6600                       		bne.s	loc_197D4
0002522C                            
0002522C                            Obj76_MakeFrag:
0002522C 45D0                       		lea	(a0),a2
0002522E 47D1                       		lea	(a1),a3
00025230 7603                       		moveq	#3,d3
00025232                            
00025232                            loc_197AA:
00025232 26DA                       		move.l	(a2)+,(a3)+
00025234 26DA                       		move.l	(a2)+,(a3)+
00025236 26DA                       		move.l	(a2)+,(a3)+
00025238 26DA                       		move.l	(a2)+,(a3)+
0002523A 51CB FFF6                  		dbf	d3,loc_197AA
0002523E                            
0002523E 335C 0010                  		move.w	(a4)+,$10(a1)
00025242 335C 0012                  		move.w	(a4)+,$12(a1)
00025246 361D                       		move.w	(a5)+,d3
00025248 D769 0008                  		add.w	d3,8(a1)
0002524C 361D                       		move.w	(a5)+,d3
0002524E D769 000C                  		add.w	d3,$C(a1)
00025252 1344 001A                  		move.b	d4,$1A(a1)
00025256 5244                       		addq.w	#1,d4
00025258 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0002525C                            
0002525C                            loc_197D4:
0002525C 303C 00D6                  		move.w	#$D6,d0
00025260 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play smashing sound
00025266                            ; End of function Obj76_Break
00025266                            
00025266                            ; ===========================================================================
00025266 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0002526A 0180 FE00                  		dc.w $180, $FE00
0002526E FF00 FF00                  		dc.w $FF00, $FF00
00025272 0100 FF00                  		dc.w $100, $FF00
00025276 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0002527A 0010 0000                  		dc.w $10, 0
0002527E 0000 0010                  		dc.w 0,	$10
00025282 0010 0010                  		dc.w $10, $10
00025286                            ; ---------------------------------------------------------------------------
00025286                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00025286                            ; ---------------------------------------------------------------------------
00025286                            Map_obj76:
00025286                            	include "_maps\obj76.asm"
00025286                            ; ---------------------------------------------------------------------------
00025286                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00025286                            ; ---------------------------------------------------------------------------
00025286 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0002528A 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0002528E 0000                       		dc.w byte_19826-Map_obj76
00025290 02                         byte_19808:	dc.b 2
00025291 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00025296 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0002529B 00                         		dc.b 0
0002529C 01                         byte_19814:	dc.b 1
0002529D F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
000252A2 01                         byte_1981A:	dc.b 1
000252A3 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
000252A8 01                         byte_19820:	dc.b 1
000252A9 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
000252AE 01                         byte_19826:	dc.b 1
000252AF F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
000252B4                            		even
000252B4                            		even
000252B4                            
000252B4                            ; ===========================================================================
000252B4                            
000252B4                            loc_1982C:				; XREF: loc_19C62; loc_19C80
000252B4 4EF9 0001 5BFC             		jmp	DeleteObject
000252BA                            ; ===========================================================================
000252BA                            ; ---------------------------------------------------------------------------
000252BA                            ; Object 82 - Eggman (SBZ2)
000252BA                            ; ---------------------------------------------------------------------------
000252BA                            
000252BA                            Obj82:					; XREF: Obj_Index
000252BA 7000                       		moveq	#0,d0
000252BC 1028 0024                  		move.b	$24(a0),d0
000252C0 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
000252C4 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
000252C8                            ; ===========================================================================
000252C8 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
000252CA 0000                       		dc.w Obj82_Eggman-Obj82_Index
000252CC 0000                       		dc.w Obj82_Switch-Obj82_Index
000252CE                            
000252CE 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
000252D1 0400 03                    		dc.b 4,	0, 3
000252D4                            ; ===========================================================================
000252D4                            
000252D4                            Obj82_Main:				; XREF: Obj82_Index
000252D4 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
000252D8 317C 2160 0008             		move.w	#$2160,8(a0)
000252DE 317C 05A4 000C             		move.w	#$5A4,$C(a0)
000252E4 117C 000F 0020             		move.b	#$F,$20(a0)
000252EA 117C 0010 0021             		move.b	#$10,$21(a0)
000252F0 08A8 0000 0022             		bclr	#0,$22(a0)
000252F6 4228 0025                  		clr.b	$25(a0)
000252FA 115A 0024                  		move.b	(a2)+,$24(a0)
000252FE 115A 001C                  		move.b	(a2)+,$1C(a0)
00025302 115A 0018                  		move.b	(a2)+,priority(a0)
00025306 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0002530E 317C 0400 0002             		move.w	#$400,2(a0)
00025314 117C 0004 0001             		move.b	#4,1(a0)
0002531A 08E8 0007 0001             		bset	#7,1(a0)
00025320 117C 0020 0023             		move.b	#$20,width_pixels(a0)
00025326 4EB9 0001 672A             		jsr	SingleObjLoad2
0002532C 6600                       		bne.s	Obj82_Eggman
0002532E 2348 0034                  		move.l	a0,$34(a1)
00025332 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00025336 337C 2130 0008             		move.w	#$2130,8(a1)
0002533C 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00025342 4228 0025                  		clr.b	$25(a0)
00025346 135A 0024                  		move.b	(a2)+,$24(a1)
0002534A 135A 001C                  		move.b	(a2)+,$1C(a1)
0002534E 135A 0018                  		move.b	(a2)+,priority(a1)
00025352 237C 0001 3F38 0004        		move.l	#Map_obj32,4(a1)
0002535A 337C 04A4 0002             		move.w	#$4A4,2(a1)
00025360 137C 0004 0001             		move.b	#4,1(a1)
00025366 08E9 0007 0001             		bset	#7,1(a1)
0002536C 137C 0010 0023             		move.b	#$10,width_pixels(a1)
00025372 137C 0000 001A             		move.b	#0,$1A(a1)
00025378                            
00025378                            Obj82_Eggman:				; XREF: Obj82_Index
00025378 7000                       		moveq	#0,d0
0002537A 1028 0025                  		move.b	$25(a0),d0
0002537E 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00025382 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00025386 43FA 0000                  		lea	Ani_obj82(pc),a1
0002538A 4EB9 0001 2624             		jsr	AnimateSprite
00025390 4EF9 0001 5C48             		jmp	DisplaySprite
00025396                            ; ===========================================================================
00025396 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00025398 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0002539A 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0002539C 0000                       		dc.w loc_19934-Obj82_EggIndex
0002539E                            ; ===========================================================================
0002539E                            
0002539E                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0002539E 3028 0008                  		move.w	8(a0),d0
000253A2 9078 D008                  		sub.w	($FFFFD008).w,d0
000253A6 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
000253AA 6400                       		bcc.s	loc_19934	; if not, branch
000253AC 5428 0025                  		addq.b	#2,$25(a0)
000253B0 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
000253B6 117C 0001 001C             		move.b	#1,$1C(a0)
000253BC                            
000253BC                            loc_19934:				; XREF: Obj82_EggIndex
000253BC 4EF9 0001 5BE2             		jmp	SpeedToPos
000253C2                            ; ===========================================================================
000253C2                            
000253C2                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
000253C2 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
000253C6 6600                       		bne.s	loc_19954	; if time remains, branch
000253C8 5428 0025                  		addq.b	#2,$25(a0)
000253CC 117C 0002 001C             		move.b	#2,$1C(a0)
000253D2 5868 000C                  		addq.w	#4,$C(a0)
000253D6 317C 000F 003C             		move.w	#15,$3C(a0)
000253DC                            
000253DC                            loc_19954:
000253DC 60DE                       		bra.s	loc_19934
000253DE                            ; ===========================================================================
000253DE                            
000253DE                            Obj82_Leap:				; XREF: Obj82_EggIndex
000253DE 5368 003C                  		subq.w	#1,$3C(a0)
000253E2 6E00                       		bgt.s	loc_199D0
000253E4 6600                       		bne.s	loc_1996A
000253E6 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
000253EC 317C FC40 0012             		move.w	#-$3C0,$12(a0)
000253F2                            
000253F2                            loc_1996A:
000253F2 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
000253F8 6E00                       		bgt.s	loc_19976
000253FA 4268 0010                  		clr.w	$10(a0)
000253FE                            
000253FE                            loc_19976:
000253FE 0668 0024 0012             		addi.w	#$24,$12(a0)
00025404 4A68 0012                  		tst.w	$12(a0)
00025408 6B00                       		bmi.s	Obj82_FindBlocks
0002540A 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00025410 6500                       		bcs.s	Obj82_FindBlocks
00025412 317C 5357 0028             		move.w	#$5357,$28(a0)
00025418 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0002541E 6500                       		bcs.s	Obj82_FindBlocks
00025420 317C 059B 000C             		move.w	#$59B,$C(a0)
00025426 4268 0012                  		clr.w	$12(a0)
0002542A                            
0002542A                            Obj82_FindBlocks:
0002542A 3028 0010                  		move.w	$10(a0),d0
0002542E 8068 0012                  		or.w	$12(a0),d0
00025432 6600                       		bne.s	loc_199D0
00025434 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00025438 703E                       		moveq	#$3E,d0
0002543A 7240                       		moveq	#$40,d1
0002543C                            
0002543C                            Obj82_FindLoop:	
0002543C D2C1                       		adda.w	d1,a1		; jump to next object RAM
0002543E 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00025442 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00025446                            
00025446 6600                       		bne.s	loc_199D0
00025448 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0002544E 5428 0025                  		addq.b	#2,$25(a0)
00025452 117C 0001 001C             		move.b	#1,$1C(a0)
00025458                            
00025458                            loc_199D0:
00025458 6000 FF62                  		bra.w	loc_19934
0002545C                            ; ===========================================================================
0002545C                            
0002545C                            Obj82_Switch:				; XREF: Obj82_Index
0002545C 7000                       		moveq	#0,d0
0002545E 1028 0025                  		move.b	$25(a0),d0
00025462 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00025466 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0002546A                            ; ===========================================================================
0002546A 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0002546C 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0002546E                            ; ===========================================================================
0002546E                            
0002546E                            loc_199E6:				; XREF: Obj82_SwIndex
0002546E 2268 0034                  		movea.l	$34(a0),a1
00025472 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00025478 6600                       		bne.s	Obj82_SwDisplay
0002547A 117C 0001 001A             		move.b	#1,$1A(a0)
00025480 5428 0025                  		addq.b	#2,$25(a0)
00025484                            
00025484                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00025484 4EF9 0001 5C48             		jmp	DisplaySprite
0002548A                            ; ===========================================================================
0002548A                            Ani_obj82:
0002548A                            	include "_anim\obj82.asm"
0002548A                            ; ---------------------------------------------------------------------------
0002548A                            ; Animation script - Eggman (SBZ2)
0002548A                            ; ---------------------------------------------------------------------------
0002548A 0000                       		dc.w byte_19A10-Ani_obj82
0002548C 0000                       		dc.w byte_19A14-Ani_obj82
0002548E 0000                       		dc.w byte_19A18-Ani_obj82
00025490 0000                       		dc.w byte_19A20-Ani_obj82
00025492 0000                       		dc.w byte_19A24-Ani_obj82
00025494 0000                       		dc.w byte_19A2A-Ani_obj82
00025496 0000                       		dc.w byte_19A30-Ani_obj82
00025498 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0002549C 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
000254A0 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
000254A8 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
000254AC 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
000254B2 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
000254B8 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
000254BC                            		even
000254BC                            		even
000254BC                            
000254BC                            ; ---------------------------------------------------------------------------
000254BC                            ; Sprite mappings - Eggman (SBZ2)
000254BC                            ; ---------------------------------------------------------------------------
000254BC                            Map_obj82:
000254BC                            	include "_maps\obj82.asm"
000254BC                            ; ---------------------------------------------------------------------------
000254BC                            ; Sprite mappings - Eggman (SBZ2)
000254BC                            ; ---------------------------------------------------------------------------
000254BC 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
000254C0 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
000254C4 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
000254C8 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
000254CC 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
000254D0 0000                       		dc.w byte_19B4F-Map_obj82
000254D2 03                         byte_19A4A:	dc.b 3
000254D3 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
000254D8 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
000254DD 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
000254E2 04                         byte_19A5A:	dc.b 4
000254E3 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
000254E8 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
000254ED 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
000254F2 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
000254F7 00                         		dc.b 0
000254F8 04                         byte_19A70:	dc.b 4
000254F9 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
000254FE E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00025503 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
00025508 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0002550D 00                         		dc.b 0
0002550E 04                         byte_19A86:	dc.b 4
0002550F F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00025514 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
00025519 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0002551E EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
00025523 00                         		dc.b 0
00025524 04                         byte_19A9C:	dc.b 4
00025525 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0002552A F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0002552F 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
00025534 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00025539 00                         		dc.b 0
0002553A 04                         byte_19AB2:	dc.b 4
0002553B E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00025540 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00025545 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0002554A 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0002554F 00                         		dc.b 0
00025550 07                         byte_19AC8:	dc.b 7
00025551 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00025556 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0002555B 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00025560 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00025565 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0002556A F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0002556F F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
00025574 05                         byte_19AEC:	dc.b 5
00025575 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0002557A F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0002557F 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00025584 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00025589 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0002558E 06                         byte_19B06:	dc.b 6
0002558F EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
00025594 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
00025599 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0002559E 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
000255A3 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
000255A8 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
000255AD 00                         		dc.b 0
000255AE 08                         byte_19B26:	dc.b 8
000255AF E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
000255B4 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
000255B9 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
000255BE 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
000255C3 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
000255C8 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
000255CD 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
000255D2 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
000255D7 03                         byte_19B4F:	dc.b 3
000255D8 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
000255DD F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
000255E2 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
000255E8 00                         		even
000255E8 00                         		even
000255E8                            
000255E8                            ; ===========================================================================
000255E8                            ; ---------------------------------------------------------------------------
000255E8                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
000255E8                            ; ---------------------------------------------------------------------------
000255E8                            
000255E8                            Obj83:					; XREF: Obj_Index
000255E8 7000                       		moveq	#0,d0
000255EA 1028 0024                  		move.b	$24(a0),d0
000255EE 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
000255F2 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
000255F6                            ; ===========================================================================
000255F6 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
000255F8 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
000255FA 0000                       		dc.w loc_19C36-Obj83_Index
000255FC 0000                       		dc.w loc_19C62-Obj83_Index
000255FE 0000                       		dc.w loc_19C72-Obj83_Index
00025600 0000                       		dc.w loc_19C80-Obj83_Index
00025602                            ; ===========================================================================
00025602                            
00025602                            Obj83_Main:				; XREF: Obj83_Index
00025602 317C 2080 0008             		move.w	#$2080,8(a0)
00025608 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0002560E 117C 0080 0023             		move.b	#$80,width_pixels(a0)
00025614 117C 0010 0016             		move.b	#$10,$16(a0)
0002561A 117C 0004 0001             		move.b	#4,1(a0)
00025620 08E8 0007 0001             		bset	#7,1(a0)
00025626 7800                       		moveq	#0,d4
00025628 3A3C 2010                  		move.w	#$2010,d5
0002562C 7C07                       		moveq	#7,d6
0002562E 45E8 0030                  		lea	$30(a0),a2
00025632                            
00025632                            Obj83_MakeBlock:
00025632 4EB9 0001 6714             		jsr	SingleObjLoad
00025638 6600                       		bne.s	Obj83_ExitMake
0002563A 34C9                       		move.w	a1,(a2)+
0002563C 12BC 0083                  		move.b	#$83,(a1)	; load block object
00025640 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00025648 337C 4518 0002             		move.w	#$4518,2(a1)
0002564E 137C 0004 0001             		move.b	#4,1(a1)
00025654 137C 0010 0023             		move.b	#$10,width_pixels(a1)
0002565A 137C 0010 0016             		move.b	#$10,$16(a1)
00025660 337C 0180 0018             		move.w	#$180,priority(a1)
00025666 3345 0008                  		move.w	d5,8(a1)	; set X	position
0002566A 337C 05D0 000C             		move.w	#$5D0,$C(a1)
00025670 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
00025674 137C 0008 0024             		move.b	#8,$24(a1)
0002567A 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0002567E                            
0002567E                            Obj83_ExitMake:
0002567E 5428 0024                  		addq.b	#2,$24(a0)
00025682 4E75                       		rts	
00025684                            ; ===========================================================================
00025684                            
00025684                            Obj83_ChkBreak:				; XREF: Obj83_Index
00025684 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0002568A 6600                       		bne.s	Obj83_Solid	; if not, branch
0002568C 4228 001A                  		clr.b	$1A(a0)
00025690 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
00025694                            
00025694                            Obj83_Solid:
00025694 7000                       		moveq	#0,d0
00025696 1028 001A                  		move.b	$1A(a0),d0
0002569A 4400                       		neg.b	d0
0002569C 4880                       		ext.w	d0
0002569E 5040                       		addq.w	#8,d0
000256A0 E940                       		asl.w	#4,d0
000256A2 383C 2100                  		move.w	#$2100,d4
000256A6 9840                       		sub.w	d0,d4
000256A8 1140 0023                  		move.b	d0,width_pixels(a0)
000256AC 3144 0008                  		move.w	d4,8(a0)
000256B0 720B                       		moveq	#$B,d1
000256B2 D240                       		add.w	d0,d1
000256B4 7410                       		moveq	#$10,d2
000256B6 7611                       		moveq	#$11,d3
000256B8 4EF9 0001 8F1E             		jmp	SolidObject
000256BE                            ; ===========================================================================
000256BE                            
000256BE                            loc_19C36:				; XREF: Obj83_Index
000256BE 0428 000E 001E             		subi.b	#$E,$1E(a0)
000256C4 6400                       		bcc.s	Obj83_Solid2
000256C6 70FF                       		moveq	#-1,d0
000256C8 1028 001A                  		move.b	$1A(a0),d0
000256CC 4880                       		ext.w	d0
000256CE D040                       		add.w	d0,d0
000256D0 3030 0030                  		move.w	$30(a0,d0.w),d0
000256D4 2240                       		movea.l	d0,a1
000256D6 337C 474F 0028             		move.w	#$474F,$28(a1)
000256DC 5228 001A                  		addq.b	#1,$1A(a0)
000256E0 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
000256E6 6700                       		beq.s	loc_19C62
000256E8                            
000256E8                            Obj83_Solid2:
000256E8 60AA                       		bra.s	Obj83_Solid
000256EA                            ; ===========================================================================
000256EA                            
000256EA                            loc_19C62:				; XREF: Obj83_Index
000256EA 08A8 0003 0022             		bclr	#3,$22(a0)
000256F0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
000256F6 6000 FBBC                  		bra.w	loc_1982C
000256FA                            ; ===========================================================================
000256FA                            
000256FA                            loc_19C72:				; XREF: Obj83_Index
000256FA 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00025700 6700                       		beq.s	Obj83_Break	; if yes, branch
00025702 4EF9 0001 5C48             		jmp	DisplaySprite
00025708                            ; ===========================================================================
00025708                            
00025708                            loc_19C80:				; XREF: Obj83_Index
00025708 4A28 0001                  		tst.b	1(a0)
0002570C 6A00 FBA6                  		bpl.w	loc_1982C
00025710 4EB9 0001 5BC2             		jsr	ObjectFall
00025716 4EF9 0001 5C48             		jmp	DisplaySprite
0002571C                            ; ===========================================================================
0002571C                            
0002571C                            Obj83_Break:				; XREF: loc_19C72
0002571C 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
00025720 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
00025724 7801                       		moveq	#1,d4
00025726 7203                       		moveq	#3,d1
00025728 7438                       		moveq	#$38,d2
0002572A 5428 0024                  		addq.b	#2,$24(a0)
0002572E 117C 0008 0023             		move.b	#8,width_pixels(a0)
00025734 117C 0008 0016             		move.b	#8,$16(a0)
0002573A 43D0                       		lea	(a0),a1
0002573C 6000                       		bra.s	Obj83_MakeFrag
0002573E                            ; ===========================================================================
0002573E                            
0002573E                            Obj83_LoopFrag:
0002573E 4EB9 0001 672A             		jsr	SingleObjLoad2
00025744 6600                       		bne.s	Obj83_BreakSnd
00025746                            
00025746                            Obj83_MakeFrag:				; XREF: Obj83_Break
00025746 45D0                       		lea	(a0),a2
00025748 47D1                       		lea	(a1),a3
0002574A 7603                       		moveq	#3,d3
0002574C                            
0002574C                            loc_19CC4:
0002574C 26DA                       		move.l	(a2)+,(a3)+
0002574E 26DA                       		move.l	(a2)+,(a3)+
00025750 26DA                       		move.l	(a2)+,(a3)+
00025752 26DA                       		move.l	(a2)+,(a3)+
00025754 51CB FFF6                  		dbf	d3,loc_19CC4
00025758                            
00025758 335C 0012                  		move.w	(a4)+,$12(a1)
0002575C 361D                       		move.w	(a5)+,d3
0002575E D769 0008                  		add.w	d3,8(a1)
00025762 361D                       		move.w	(a5)+,d3
00025764 D769 000C                  		add.w	d3,$C(a1)
00025768 1344 001A                  		move.b	d4,$1A(a1)
0002576C 5244                       		addq.w	#1,d4
0002576E 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
00025772                            
00025772                            Obj83_BreakSnd:
00025772 303C 00D6                  		move.w	#$D6,d0
00025776 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play smashing sound
0002577C 4EF9 0001 5C48             		jmp	DisplaySprite
00025782                            ; ===========================================================================
00025782 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
00025786 0120 00C0                  		dc.w $120, $C0
0002578A FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0002578E 0010 0000                  		dc.w $10, 0
00025792 0000 0010                  		dc.w 0,	$10
00025796 0010 0010                  		dc.w $10, $10
0002579A                            ; ---------------------------------------------------------------------------
0002579A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0002579A                            ; ---------------------------------------------------------------------------
0002579A                            Map_obj83:
0002579A                            	include "_maps\obj83.asm"
0002579A                            ; ---------------------------------------------------------------------------
0002579A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0002579A                            ; ---------------------------------------------------------------------------
0002579A 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0002579E 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
000257A2 0000                       		dc.w byte_19D46-Map_obj83
000257A4 01                         byte_19D1C:	dc.b 1
000257A5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000257AA 02                         byte_19D22:	dc.b 2
000257AB F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
000257B0 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
000257B5 00                         		dc.b 0
000257B6 02                         byte_19D2E:	dc.b 2
000257B7 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000257BC F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
000257C1 00                         		dc.b 0
000257C2 02                         byte_19D3A:	dc.b 2
000257C3 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
000257C8 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
000257CD 00                         		dc.b 0
000257CE 02                         byte_19D46:	dc.b 2
000257CF F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
000257D4 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
000257DA 00                         		even
000257DA 00                         		even
000257DA                            
000257DA                            ; ===========================================================================
000257DA                            ; ---------------------------------------------------------------------------
000257DA                            ; Object 85 - Eggman (FZ)
000257DA                            ; ---------------------------------------------------------------------------
000257DA                            
000257DA                            Obj85_Delete:
000257DA 4EF9 0001 5BFC             		jmp	DeleteObject
000257E0                            ; ===========================================================================
000257E0                            
000257E0                            Obj85:					; XREF: Obj_Index
000257E0 7000                       		moveq	#0,d0
000257E2 1028 0024                  		move.b	$24(a0),d0
000257E6 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
000257EA 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
000257EE                            ; ===========================================================================
000257EE 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
000257F0 0000                       		dc.w Obj85_Eggman-Obj85_Index
000257F2 0000                       		dc.w loc_1A38E-Obj85_Index
000257F4 0000                       		dc.w loc_1A346-Obj85_Index
000257F6 0000                       		dc.w loc_1A2C6-Obj85_Index
000257F8 0000                       		dc.w loc_1A3AC-Obj85_Index
000257FA 0000                       		dc.w loc_1A264-Obj85_Index
000257FC                            
000257FC 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
00025802 0002 54BC                  		dc.l Map_obj82		; mappings pointer
00025806 25B0 0590 0300             		dc.w $25B0, $590, $300
0002580C 0000 0000                  		dc.l Map_obj84
00025810 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
00025816 0000 0000                  		dc.l Map_FZBoss
0002581A 26E0 0596 0470             		dc.w $26E0, $596, $470
00025820 0002 54BC                  		dc.l Map_obj82
00025824 26E0 0596 0400             		dc.w $26E0, $596, $400
0002582A 0002 3790                  		dc.l Map_Eggman
0002582E 26E0 0596 0400             		dc.w $26E0, $596, $400
00025834 0002 3790                  		dc.l Map_Eggman
00025838                            
00025838 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0002583D 0400 0112 08               		dc.b 4,	0, 1, $12, 8
00025842 0600 0300 00               		dc.b 6,	0, 3, 0, 0
00025847 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0002584C 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
00025851 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
00025856                            ; ===========================================================================
00025856                            
00025856                            Obj85_Main:				; XREF: Obj85_Index
00025856 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0002585A 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0002585E 2248                       		movea.l	a0,a1
00025860 7205                       		moveq	#5,d1
00025862 6000                       		bra.s	Obj85_LoadBoss
00025864                            ; ===========================================================================
00025864                            
00025864                            Obj85_Loop:
00025864 4EB9 0001 672A             		jsr	SingleObjLoad2
0002586A 6600                       		bne.s	loc_19E20
0002586C                            
0002586C                            Obj85_LoadBoss:				; XREF: Obj85_Main
0002586C 12BC 0085                  		move.b	#$85,(a1)
00025870 335A 0008                  		move.w	(a2)+,8(a1)
00025874 335A 000C                  		move.w	(a2)+,$C(a1)
00025878 335A 0002                  		move.w	(a2)+,2(a1)
0002587C 235A 0004                  		move.l	(a2)+,4(a1)
00025880 135B 0024                  		move.b	(a3)+,$24(a1)
00025884 135B 001C                  		move.b	(a3)+,$1C(a1)
00025888 135B 0018                  		move.b	(a3)+,priority(a1)
0002588C 3029 0018                          move.w  priority(a1),d0
00025890 E248                               lsr.w   #1,d0
00025892 0240 0380                          andi.w  #$380,d0
00025896 3340 0018                          move.w  d0,priority(a1)
0002589A 135B 0017                  		move.b	(a3)+,$17(a1)
0002589E 135B 0016                  		move.b	(a3)+,$16(a1)
000258A2 137C 0004 0001             		move.b	#4,1(a1)
000258A8 08E8 0007 0001             		bset	#7,1(a0)
000258AE 2348 0034                  		move.l	a0,$34(a1)
000258B2 51C9 FFB0                  		dbf	d1,Obj85_Loop
000258B6                            
000258B6                            loc_19E20:
000258B6 45E8 0036                  		lea	$36(a0),a2
000258BA 4EB9 0001 6714             		jsr	SingleObjLoad
000258C0 6600                       		bne.s	loc_19E5A
000258C2 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
000258C6 3489                       		move.w	a1,(a2)
000258C8 2348 0034                  		move.l	a0,$34(a1)
000258CC 45E8 0038                  		lea	$38(a0),a2
000258D0 7400                       		moveq	#0,d2
000258D2 7203                       		moveq	#3,d1
000258D4                            
000258D4                            loc_19E3E:
000258D4 4EB9 0001 672A             		jsr	SingleObjLoad2
000258DA 6600                       		bne.s	loc_19E5A
000258DC 34C9                       		move.w	a1,(a2)+
000258DE 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
000258E2 2348 0034                  		move.l	a0,$34(a1)
000258E6 1342 0028                  		move.b	d2,$28(a1)
000258EA 5442                       		addq.w	#2,d2
000258EC 51C9 FFE6                  		dbf	d1,loc_19E3E
000258F0                            
000258F0                            loc_19E5A:
000258F0 317C 0000 0034             		move.w	#0,$34(a0)
000258F6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000258FC 317C FFFF 0030             		move.w	#-1,$30(a0)
00025902                            
00025902                            Obj85_Eggman:				; XREF: Obj85_Index
00025902 7000                       		moveq	#0,d0
00025904 1028 0034                  		move.b	$34(a0),d0
00025908 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0002590C 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
00025910 4EF9 0001 5C48             		jmp	DisplaySprite
00025916                            ; ===========================================================================
00025916 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0002591A 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0002591E 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
00025922 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
00025926                            ; ===========================================================================
00025926                            
00025926                            loc_19E90:				; XREF: off_19E80
00025926 4AB8 F680                  		tst.l	($FFFFF680).w
0002592A 6600                       		bne.s	loc_19EA2
0002592C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00025932 6500                       		bcs.s	loc_19EA2
00025934 5428 0034                  		addq.b	#2,$34(a0)
00025938                            
00025938                            loc_19EA2:
00025938 52B8 F636                  		addq.l	#1,($FFFFF636).w
0002593C 4E75                       		rts	
0002593E                            ; ===========================================================================
0002593E                            
0002593E                            loc_19EA8:				; XREF: off_19E80
0002593E 4A68 0030                  		tst.w	$30(a0)
00025942 6A00                       		bpl.s	loc_19F10
00025944 4268 0030                  		clr.w	$30(a0)
00025948 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0002594E 0240 000C                  		andi.w	#$C,d0
00025952 3200                       		move.w	d0,d1
00025954 5441                       		addq.w	#2,d1
00025956 4A80                       		tst.l	d0
00025958 6A00                       		bpl.s	loc_19EC6
0002595A C141                       		exg	d1,d0
0002595C                            
0002595C                            loc_19EC6:
0002595C 43FA 0000                  		lea	word_19FD6(pc),a1
00025960 3031 0000                  		move.w	(a1,d0.w),d0
00025964 3231 1000                  		move.w	(a1,d1.w),d1
00025968 3140 0030                  		move.w	d0,$30(a0)
0002596C 74FF                       		moveq	#-1,d2
0002596E 3430 0038                  		move.w	$38(a0,d0.w),d2
00025972 2242                       		movea.l	d2,a1
00025974 137C 00FF 0029             		move.b	#-1,$29(a1)
0002597A 337C FFFF 0030             		move.w	#-1,$30(a1)
00025980 3430 1038                  		move.w	$38(a0,d1.w),d2
00025984 2242                       		movea.l	d2,a1
00025986 137C 0001 0029             		move.b	#1,$29(a1)
0002598C 337C 0000 0030             		move.w	#0,$30(a1)
00025992 317C 0001 0032             		move.w	#1,$32(a0)
00025998 4228 0035                  		clr.b	$35(a0)
0002599C 303C 00B7                  		move.w	#$B7,d0
000259A0 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play rumbling sound
000259A6                            
000259A6                            loc_19F10:
000259A6 4A68 0032                  		tst.w	$32(a0)
000259AA 6B00 0000                  		bmi.w	loc_19FA6
000259AE 08A8 0000 0022             		bclr	#0,$22(a0)
000259B4 3038 D008                  		move.w	($FFFFD008).w,d0
000259B8 9068 0008                  		sub.w	8(a0),d0
000259BC 6500                       		bcs.s	loc_19F2E
000259BE 08E8 0000 0022             		bset	#0,$22(a0)
000259C4                            
000259C4                            loc_19F2E:
000259C4 323C 002B                  		move.w	#$2B,d1
000259C8 343C 0014                  		move.w	#$14,d2
000259CC 363C 0014                  		move.w	#$14,d3
000259D0 3828 0008                  		move.w	8(a0),d4
000259D4 4EB9 0001 8F1E             		jsr	SolidObject
000259DA 4A44                       		tst.w	d4
000259DC 6E00                       		bgt.s	loc_19F50
000259DE                            
000259DE                            loc_19F48:
000259DE 4A28 0035                  		tst.b	$35(a0)
000259E2 6600                       		bne.s	loc_19F88
000259E4 6000                       		bra.s	loc_19F96
000259E6                            ; ===========================================================================
000259E6                            
000259E6                            loc_19F50:
000259E6 5E78 F636                  		addq.w	#7,($FFFFF636).w
000259EA 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
000259F0 66EC                       		bne.s	loc_19F48
000259F2 303C 0300                  		move.w	#$300,d0
000259F6 0828 0000 0022             		btst	#0,$22(a0)
000259FC 6600                       		bne.s	loc_19F6A
000259FE 4440                       		neg.w	d0
00025A00                            
00025A00                            loc_19F6A:
00025A00 31C0 D010                  		move.w	d0,($FFFFD010).w
00025A04 4A28 0035                  		tst.b	$35(a0)
00025A08 6600                       		bne.s	loc_19F88
00025A0A 5328 0021                  		subq.b	#1,$21(a0)
00025A0E 117C 0064 0035             		move.b	#$64,$35(a0)
00025A14 303C 00AC                  		move.w	#$AC,d0
00025A18 4EB9 0000 325C             		jsr	(PlaySound_Special).l
00025A1E                            
00025A1E                            loc_19F88:
00025A1E 5328 0035                  		subq.b	#1,$35(a0)
00025A22 6700                       		beq.s	loc_19F96
00025A24 117C 0003 001C             		move.b	#3,$1C(a0)
00025A2A 6000                       		bra.s	loc_19F9C
00025A2C                            ; ===========================================================================
00025A2C                            
00025A2C                            loc_19F96:
00025A2C 117C 0001 001C             		move.b	#1,$1C(a0)
00025A32                            
00025A32                            loc_19F9C:
00025A32 43FA FA56                  		lea	Ani_obj82(pc),a1
00025A36 4EF9 0001 2624             		jmp	AnimateSprite
00025A3C                            ; ===========================================================================
00025A3C                            
00025A3C                            loc_19FA6:
00025A3C 4A28 0021                  		tst.b	$21(a0)
00025A40 6700                       		beq.s	loc_19FBC
00025A42 5428 0034                  		addq.b	#2,$34(a0)
00025A46 317C FFFF 0030             		move.w	#-1,$30(a0)
00025A4C 4268 0032                  		clr.w	$32(a0)
00025A50 4E75                       		rts	
00025A52                            ; ===========================================================================
00025A52                            
00025A52                            loc_19FBC:
00025A52 117C 0006 0034             		move.b	#6,$34(a0)
00025A58 317C 25C0 0008             		move.w	#$25C0,8(a0)
00025A5E 317C 053C 000C             		move.w	#$53C,$C(a0)
00025A64 117C 0014 0016             		move.b	#$14,$16(a0)
00025A6A 4E75                       		rts	
00025A6C                            ; ===========================================================================
00025A6C 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
00025A7C                            ; ===========================================================================
00025A7C                            
00025A7C                            loc_19FE6:				; XREF: off_19E80
00025A7C 70FF                       		moveq	#-1,d0
00025A7E 3028 0036                  		move.w	$36(a0),d0
00025A82 2240                       		movea.l	d0,a1
00025A84 4A68 0030                  		tst.w	$30(a0)
00025A88 6A00                       		bpl.s	loc_1A000
00025A8A 4268 0030                  		clr.w	$30(a0)
00025A8E 137C 00FF 0029             		move.b	#-1,$29(a1)
00025A94 6100                       		bsr.s	loc_1A020
00025A96                            
00025A96                            loc_1A000:
00025A96 700F                       		moveq	#$F,d0
00025A98 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00025A9C 6600                       		bne.s	loc_1A00A
00025A9E 6100                       		bsr.s	loc_1A020
00025AA0                            
00025AA0                            loc_1A00A:
00025AA0 4A68 0032                  		tst.w	$32(a0)
00025AA4 6700                       		beq.s	locret_1A01E
00025AA6 5528 0034                  		subq.b	#2,$34(a0)
00025AAA 317C FFFF 0030             		move.w	#-1,$30(a0)
00025AB0 4268 0032                  		clr.w	$32(a0)
00025AB4                            
00025AB4                            locret_1A01E:
00025AB4 4E75                       		rts	
00025AB6                            ; ===========================================================================
00025AB6                            
00025AB6                            loc_1A020:
00025AB6 303C 00B1                  		move.w	#$B1,d0
00025ABA 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play electricity sound
00025AC0                            ; ===========================================================================
00025AC0                            
00025AC0                            loc_1A02A:				; XREF: off_19E80
00025AC0 117C 0030 0017             		move.b	#$30,$17(a0)
00025AC6 08E8 0000 0022             		bset	#0,$22(a0)
00025ACC 4EB9 0001 5BE2             		jsr	SpeedToPos
00025AD2 117C 0006 001A             		move.b	#6,$1A(a0)
00025AD8 0668 0010 0012             		addi.w	#$10,$12(a0)
00025ADE 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
00025AE4 6500                       		bcs.s	loc_1A070
00025AE6 317C 059C 000C             		move.w	#$59C,$C(a0)
00025AEC 5428 0034                  		addq.b	#2,$34(a0)
00025AF0 117C 0020 0017             		move.b	#$20,$17(a0)
00025AF6 317C 0100 0010             		move.w	#$100,$10(a0)
00025AFC 317C FF00 0012             		move.w	#-$100,$12(a0)
00025B02 5438 F742                  		addq.b	#2,($FFFFF742).w
00025B06                            
00025B06                            loc_1A070:
00025B06 6000 0000                  		bra.w	loc_1A166
00025B0A                            ; ===========================================================================
00025B0A                            
00025B0A                            loc_1A074:				; XREF: off_19E80
00025B0A 08E8 0000 0022             		bset	#0,$22(a0)
00025B10 117C 0004 001C             		move.b	#4,$1C(a0)
00025B16 4EB9 0001 5BE2             		jsr	SpeedToPos
00025B1C 0668 0010 0012             		addi.w	#$10,$12(a0)
00025B22 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
00025B28 6500                       		bcs.s	loc_1A09A
00025B2A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00025B30                            
00025B30                            loc_1A09A:
00025B30 317C 0400 0010             		move.w	#$400,$10(a0)
00025B36 3028 0008                  		move.w	8(a0),d0
00025B3A 9078 D008                  		sub.w	($FFFFD008).w,d0
00025B3E 6A00                       		bpl.s	loc_1A0B4
00025B40 317C 0500 0010             		move.w	#$500,$10(a0)
00025B46 6000 0000                  		bra.w	loc_1A0F2
00025B4A                            ; ===========================================================================
00025B4A                            
00025B4A                            loc_1A0B4:
00025B4A 0440 0070                  		subi.w	#$70,d0
00025B4E 6500                       		bcs.s	loc_1A0F2
00025B50 0468 0100 0010             		subi.w	#$100,$10(a0)
00025B56 5140                       		subq.w	#8,d0
00025B58 6500                       		bcs.s	loc_1A0F2
00025B5A 0468 0100 0010             		subi.w	#$100,$10(a0)
00025B60 5140                       		subq.w	#8,d0
00025B62 6500                       		bcs.s	loc_1A0F2
00025B64 0468 0080 0010             		subi.w	#$80,$10(a0)
00025B6A 5140                       		subq.w	#8,d0
00025B6C 6500                       		bcs.s	loc_1A0F2
00025B6E 0468 0080 0010             		subi.w	#$80,$10(a0)
00025B74 5140                       		subq.w	#8,d0
00025B76 6500                       		bcs.s	loc_1A0F2
00025B78 0468 0080 0010             		subi.w	#$80,$10(a0)
00025B7E 0440 0038                  		subi.w	#$38,d0
00025B82 6500                       		bcs.s	loc_1A0F2
00025B84 4268 0010                  		clr.w	$10(a0)
00025B88                            
00025B88                            loc_1A0F2:
00025B88 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
00025B8E 6500                       		bcs.s	loc_1A110
00025B90 317C 26A0 0008             		move.w	#$26A0,8(a0)
00025B96 317C 0240 0010             		move.w	#$240,$10(a0)
00025B9C 317C FB40 0012             		move.w	#-$4C0,$12(a0)
00025BA2 5428 0034                  		addq.b	#2,$34(a0)
00025BA6                            
00025BA6                            loc_1A110:
00025BA6 6000                       		bra.s	loc_1A15C
00025BA8                            ; ===========================================================================
00025BA8                            
00025BA8                            loc_1A112:				; XREF: off_19E80
00025BA8 4EB9 0001 5BE2             		jsr	SpeedToPos
00025BAE 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
00025BB4 6500                       		bcs.s	loc_1A124
00025BB6 4268 0010                  		clr.w	$10(a0)
00025BBA                            
00025BBA                            loc_1A124:
00025BBA 0668 0034 0012             		addi.w	#$34,$12(a0)
00025BC0 4A68 0012                  		tst.w	$12(a0)
00025BC4 6B00                       		bmi.s	loc_1A142
00025BC6 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
00025BCC 6500                       		bcs.s	loc_1A142
00025BCE 317C 0592 000C             		move.w	#$592,$C(a0)
00025BD4 4268 0012                  		clr.w	$12(a0)
00025BD8                            
00025BD8                            loc_1A142:
00025BD8 3028 0010                  		move.w	$10(a0),d0
00025BDC 8068 0012                  		or.w	$12(a0),d0
00025BE0 6600                       		bne.s	loc_1A15C
00025BE2 5428 0034                  		addq.b	#2,$34(a0)
00025BE6 317C FE80 0012             		move.w	#-$180,$12(a0)
00025BEC 117C 0001 0021             		move.b	#1,$21(a0)
00025BF2                            
00025BF2                            loc_1A15C:
00025BF2 43FA F896                  		lea	Ani_obj82(pc),a1
00025BF6 4EB9 0001 2624             		jsr	AnimateSprite
00025BFC                            
00025BFC                            loc_1A166:
00025BFC 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
00025C02 6C00                       		bge.s	loc_1A172
00025C04 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00025C08                            
00025C08                            loc_1A172:
00025C08 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
00025C0E 6C00                       		bge.s	locret_1A190
00025C10 323C 001B                  		move.w	#$1B,d1
00025C14 343C 0070                  		move.w	#$70,d2
00025C18 363C 0071                  		move.w	#$71,d3
00025C1C 3828 0008                  		move.w	8(a0),d4
00025C20 4EF9 0001 8F1E             		jmp	SolidObject
00025C26                            ; ===========================================================================
00025C26                            
00025C26                            locret_1A190:
00025C26 4E75                       		rts	
00025C28                            ; ===========================================================================
00025C28                            
00025C28                            loc_1A192:				; XREF: off_19E80
00025C28 217C 0002 3790 0004        		move.l	#Map_Eggman,4(a0)
00025C30 317C 0400 0002             		move.w	#$400,2(a0)
00025C36 117C 0000 001C             		move.b	#0,$1C(a0)
00025C3C 08E8 0000 0022             		bset	#0,$22(a0)
00025C42 4EB9 0001 5BE2             		jsr	SpeedToPos
00025C48 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
00025C4E 6400                       		bcc.s	loc_1A1D0
00025C50 317C 0180 0010             		move.w	#$180,$10(a0)
00025C56 317C FFE8 0012             		move.w	#-$18,$12(a0)
00025C5C 117C 000F 0020             		move.b	#$F,$20(a0)
00025C62 5428 0034                  		addq.b	#2,$34(a0)
00025C66                            
00025C66                            loc_1A1D0:
00025C66 6000 FF8A                  		bra.w	loc_1A15C
00025C6A                            ; ===========================================================================
00025C6A                            
00025C6A                            loc_1A1D4:				; XREF: off_19E80
00025C6A 08E8 0000 0022             		bset	#0,$22(a0)
00025C70 4EB9 0001 5BE2             		jsr	SpeedToPos
00025C76 4A68 0030                  		tst.w	$30(a0)
00025C7A 6600                       		bne.s	loc_1A1FC
00025C7C 4A28 0020                  		tst.b	$20(a0)
00025C80 6600                       		bne.s	loc_1A216
00025C82 317C 001E 0030             		move.w	#$1E,$30(a0)
00025C88                            ;		move.w	#$AC,d0
00025C88 4EB9 0001 E844             		jsr	(BossModeMusic).l
00025C8E                            
00025C8E                            loc_1A1FC:
00025C8E 5368 0030                  		subq.w	#1,$30(a0)
00025C92 6600                       		bne.s	loc_1A216
00025C94 4A28 0022                  		tst.b	$22(a0)
00025C98 6A00                       		bpl.s	loc_1A210
00025C9A 317C 0060 0012             		move.w	#$60,$12(a0)
00025CA0 6000                       		bra.s	loc_1A216
00025CA2                            ; ===========================================================================
00025CA2                            
00025CA2                            loc_1A210:
00025CA2 117C 000F 0020             		move.b	#$F,$20(a0)
00025CA8                            
00025CA8                            loc_1A216:
00025CA8 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
00025CAE 6D00                       		blt.s	loc_1A23A
00025CB0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
00025CB6 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00025CBC 4278 D020                  		clr.w	(MainCharacter+inertia).w
00025CC0 4A68 0012                  		tst.w	$12(a0)
00025CC4 6A00                       		bpl.s	loc_1A248
00025CC6 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
00025CCC                            
00025CCC                            loc_1A23A:
00025CCC 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
00025CD2 6D00                       		blt.s	loc_1A248
00025CD4 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
00025CDA                            
00025CDA                            loc_1A248:
00025CDA 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
00025CE0 6500                       		bcs.s	loc_1A260
00025CE2 4A28 0001                  		tst.b	1(a0)
00025CE6 6B00                       		bmi.s	loc_1A260
00025CE8 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
00025CEE 6000 FAEA                  		bra.w	Obj85_Delete
00025CF2                            ; ===========================================================================
00025CF2                            
00025CF2                            loc_1A260:
00025CF2 6000 FEFE                  		bra.w	loc_1A15C
00025CF6                            ; ===========================================================================
00025CF6                            
00025CF6                            loc_1A264:				; XREF: Obj85_Index
00025CF6 2268 0034                  		movea.l	$34(a0),a1
00025CFA 1011                       		move.b	(a1),d0
00025CFC B010                       		cmp.b	(a0),d0
00025CFE 6600 FADA                  		bne.w	Obj85_Delete
00025D02 117C 0007 001C             		move.b	#7,$1C(a0)
00025D08 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
00025D0E 6C00                       		bge.s	loc_1A280
00025D10 6000                       		bra.s	loc_1A2A6
00025D12                            ; ===========================================================================
00025D12                            
00025D12                            loc_1A280:
00025D12 4A69 0010                  		tst.w	$10(a1)
00025D16 6700                       		beq.s	loc_1A28C
00025D18 117C 000B 001C             		move.b	#$B,$1C(a0)
00025D1E                            
00025D1E                            loc_1A28C:
00025D1E 43FA DA20                  		lea	Ani_Eggman(pc),a1
00025D22 4EB9 0001 2624             		jsr	AnimateSprite
00025D28                            
00025D28                            loc_1A296:
00025D28 2268 0034                  		movea.l	$34(a0),a1
00025D2C 3169 0008 0008             		move.w	8(a1),8(a0)
00025D32 3169 000C 000C             		move.w	$C(a1),$C(a0)
00025D38                            
00025D38                            loc_1A2A6:
00025D38 2268 0034                  		movea.l	$34(a0),a1
00025D3C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00025D42 7003                       		moveq	#3,d0
00025D44 C028 0022                  		and.b	$22(a0),d0
00025D48 0228 00FC 0001             		andi.b	#-4,1(a0)
00025D4E 8128 0001                  		or.b	d0,1(a0)
00025D52 4EF9 0001 5C48             		jmp	DisplaySprite
00025D58                            ; ===========================================================================
00025D58                            
00025D58                            loc_1A2C6:				; XREF: Obj85_Index
00025D58 2268 0034                  		movea.l	$34(a0),a1
00025D5C 1011                       		move.b	(a1),d0
00025D5E B010                       		cmp.b	(a0),d0
00025D60 6600 FA78                  		bne.w	Obj85_Delete
00025D64 0CA9 0002 3790 0004        		cmpi.l	#Map_Eggman,4(a1)
00025D6C 6700                       		beq.s	loc_1A2E4
00025D6E 117C 000A 001A             		move.b	#$A,$1A(a0)
00025D74 60C2                       		bra.s	loc_1A2A6
00025D76                            ; ===========================================================================
00025D76                            
00025D76                            loc_1A2E4:
00025D76 117C 0001 001C             		move.b	#1,$1C(a0)
00025D7C 4A29 0021                  		tst.b	$21(a1)
00025D80 6F00                       		ble.s	loc_1A312
00025D82 117C 0006 001C             		move.b	#6,$1C(a0)
00025D88 217C 0002 3790 0004        		move.l	#Map_Eggman,4(a0)
00025D90 317C 0400 0002             		move.w	#$400,2(a0)
00025D96 43FA D9A8                  		lea	Ani_Eggman(pc),a1
00025D9A 4EB9 0001 2624             		jsr	AnimateSprite
00025DA0 6000 FF86                  		bra.w	loc_1A296
00025DA4                            ; ===========================================================================
00025DA4                            
00025DA4                            loc_1A312:
00025DA4 4A28 0001                  		tst.b	1(a0)
00025DA8 6A00 FA30                  		bpl.w	Obj85_Delete
00025DAC 6100 D540                  		bsr.w	BossDefeated
00025DB0 317C 0100 0018             		move.w	#$100,priority(a0)
00025DB6 117C 0000 001C             		move.b	#0,$1C(a0)
00025DBC 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
00025DC4 317C 03A0 0002             		move.w	#$3A0,2(a0)
00025DCA 43FA 0000                  		lea	Ani_obj85(pc),a1
00025DCE 4EB9 0001 2624             		jsr	AnimateSprite
00025DD4 6000 FF52                  		bra.w	loc_1A296
00025DD8                            ; ===========================================================================
00025DD8                            
00025DD8                            loc_1A346:				; XREF: Obj85_Index
00025DD8 08E8 0000 0022             		bset	#0,$22(a0)
00025DDE 2268 0034                  		movea.l	$34(a0),a1
00025DE2 0CA9 0002 3790 0004        		cmpi.l	#Map_Eggman,4(a1)
00025DEA 6700                       		beq.s	loc_1A35E
00025DEC 6000 FF4A                  		bra.w	loc_1A2A6
00025DF0                            ; ===========================================================================
00025DF0                            
00025DF0                            loc_1A35E:
00025DF0 3169 0008 0008             		move.w	8(a1),8(a0)
00025DF6 3169 000C 000C             		move.w	$C(a1),$C(a0)
00025DFC 4A28 001E                  		tst.b	$1E(a0)
00025E00 6600                       		bne.s	loc_1A376
00025E02 117C 0014 001E             		move.b	#$14,$1E(a0)
00025E08                            
00025E08                            loc_1A376:
00025E08 5328 001E                  		subq.b	#1,$1E(a0)
00025E0C 6E00                       		bgt.s	loc_1A38A
00025E0E 5228 001A                  		addq.b	#1,$1A(a0)
00025E12 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00025E18 6E00 F9C0                  		bgt.w	Obj85_Delete
00025E1C                            
00025E1C                            loc_1A38A:
00025E1C 6000 FF0A                  		bra.w	loc_1A296
00025E20                            ; ===========================================================================
00025E20                            
00025E20                            loc_1A38E:				; XREF: Obj85_Index
00025E20 117C 000B 001A             		move.b	#$B,$1A(a0)
00025E26 3038 D008                  		move.w	($FFFFD008).w,d0
00025E2A 9068 0008                  		sub.w	8(a0),d0
00025E2E 6500                       		bcs.s	loc_1A3A6
00025E30 4A28 0001                  		tst.b	1(a0)
00025E34 6A00 F9A4                  		bpl.w	Obj85_Delete
00025E38                            
00025E38                            loc_1A3A6:
00025E38 4EF9 0001 5C48             		jmp	DisplaySprite
00025E3E                            ; ===========================================================================
00025E3E                            
00025E3E                            loc_1A3AC:				; XREF: Obj85_Index
00025E3E 117C 0000 001A             		move.b	#0,$1A(a0)
00025E44 08E8 0000 0022             		bset	#0,$22(a0)
00025E4A 2268 0034                  		movea.l	$34(a0),a1
00025E4E 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
00025E54 6600                       		bne.s	loc_1A3D0
00025E56 0CA9 0002 3790 0004        		cmpi.l	#Map_Eggman,4(a1)
00025E5E 6700 F97A                  		beq.w	Obj85_Delete
00025E62                            
00025E62                            loc_1A3D0:
00025E62 6000 FED4                  		bra.w	loc_1A2A6
00025E66                            ; ===========================================================================
00025E66                            Ani_obj85:
00025E66                            	include "_anim\obj85.asm"
00025E66                            ; ---------------------------------------------------------------------------
00025E66                            ; Animation script - Eggman (FZ)
00025E66                            ; ---------------------------------------------------------------------------
00025E66 0000                       		dc.w byte_1A3D6-Ani_obj85
00025E68 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
00025E6C                            		even
00025E6C                            		even
00025E6C                            
00025E6C                            Map_Eggman2:
00025E6C                            	include "_maps\Eggman2.asm"
00025E6C                            ; ---------------------------------------------------------------------------
00025E6C                            ; Sprite mappings - Eggman (FZ)
00025E6C                            ; ---------------------------------------------------------------------------
00025E6C 0000                       		dc.w byte_1A3DE-Map_Eggman2
00025E6E 0000                       		dc.w byte_1A3FD-Map_Eggman2
00025E70 06                         byte_1A3DE:	dc.b 6
00025E71 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
00025E76 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
00025E7B EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
00025E80 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
00025E85 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
00025E8A 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
00025E8F 06                         byte_1A3FD:	dc.b 6
00025E90 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
00025E95 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
00025E9A EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
00025E9F FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
00025EA4 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
00025EA9 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
00025EAE                            		even
00025EAE                            		even
00025EAE                            
00025EAE                            Map_FZBoss:
00025EAE                            	include "_maps\FZ boss.asm"
00025EAE                            ; ---------------------------------------------------------------------------
00025EAE                            ; Sprite mappings - boss (FZ)
00025EAE                            ; ---------------------------------------------------------------------------
00025EAE 0000                       		dc.w byte_1A422-Map_FZBoss
00025EB0 0000                       		dc.w byte_1A42D-Map_FZBoss
00025EB2 0000                       		dc.w byte_1A43D-Map_FZBoss
00025EB4 02                         byte_1A422:	dc.b 2
00025EB5 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
00025EBA 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
00025EBF 03                         byte_1A42D:	dc.b 3
00025EC0 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
00025EC5 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
00025ECA 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
00025ECF 02                         byte_1A43D:	dc.b 2
00025ED0 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
00025ED5 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
00025EDA                            		even
00025EDA                            		even
00025EDA                            
00025EDA                            ; ===========================================================================
00025EDA                            
00025EDA                            Obj84_Delete:
00025EDA 4EF9 0001 5BFC             		jmp	DeleteObject
00025EE0                            ; ===========================================================================
00025EE0                            ; ---------------------------------------------------------------------------
00025EE0                            ; Object 84 - cylinder Eggman	hides in (FZ)
00025EE0                            ; ---------------------------------------------------------------------------
00025EE0                            
00025EE0                            Obj84:					; XREF: Obj_Index
00025EE0 7000                       		moveq	#0,d0
00025EE2 1028 0024                  		move.b	$24(a0),d0
00025EE6 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
00025EEA 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
00025EEE                            ; ===========================================================================
00025EEE 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
00025EF0 0000                       		dc.w loc_1A4CE-Obj84_Index
00025EF2 0000                       		dc.w loc_1A57E-Obj84_Index
00025EF4                            
00025EF4 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
00025EF8 2550 0620                  		dc.w $2550, $620
00025EFC 2490 04C0                  		dc.w $2490, $4C0
00025F00 2510 04C0                  		dc.w $2510, $4C0
00025F04                            ; ===========================================================================
00025F04                            
00025F04                            Obj84_Main:				; XREF: Obj84_Index
00025F04 43FA FFEE                  		lea	Obj84_PosData(pc),a1
00025F08 7000                       		moveq	#0,d0
00025F0A 1028 0028                  		move.b	$28(a0),d0
00025F0E D040                       		add.w	d0,d0
00025F10 D2C0                       		adda.w	d0,a1
00025F12 117C 0004 0001             		move.b	#4,1(a0)
00025F18 08E8 0007 0001             		bset	#7,1(a0)
00025F1E 08E8 0004 0001             		bset	#4,1(a0)
00025F24 317C 0300 0002             		move.w	#$300,2(a0)
00025F2A 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
00025F32 3159 0008                  		move.w	(a1)+,8(a0)
00025F36 3151 000C                  		move.w	(a1),$C(a0)
00025F3A 3159 0038                  		move.w	(a1)+,$38(a0)
00025F3E 117C 0020 0016             		move.b	#$20,$16(a0)
00025F44 117C 0060 0017             		move.b	#$60,$17(a0)
00025F4A 117C 0020 0023             		move.b	#$20,width_pixels(a0)
00025F50 117C 0060 0016             		move.b	#$60,$16(a0)
00025F56 317C 0180 0018             		move.w	#$180,priority(a0)
00025F5C 5428 0024                  		addq.b	#2,$24(a0)
00025F60                            
00025F60                            loc_1A4CE:				; XREF: Obj84_Index
00025F60 0C28 0002 0028             		cmpi.b	#2,$28(a0)
00025F66 6F00                       		ble.s	loc_1A4DC
00025F68 08E8 0001 0001             		bset	#1,1(a0)
00025F6E                            
00025F6E                            loc_1A4DC:
00025F6E 42A8 003C                  		clr.l	$3C(a0)
00025F72 4A28 0029                  		tst.b	$29(a0)
00025F76 6700                       		beq.s	loc_1A4EA
00025F78 5428 0024                  		addq.b	#2,$24(a0)
00025F7C                            
00025F7C                            loc_1A4EA:
00025F7C 2028 003C                  		move.l	$3C(a0),d0
00025F80 2228 0038                  		move.l	$38(a0),d1
00025F84 D280                       		add.l	d0,d1
00025F86 4841                       		swap	d1
00025F88 3141 000C                  		move.w	d1,$C(a0)
00025F8C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
00025F92 6600                       		bne.s	loc_1A524
00025F94 4A68 0030                  		tst.w	$30(a0)
00025F98 6A00                       		bpl.s	loc_1A524
00025F9A 70F6                       		moveq	#-$A,d0
00025F9C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
00025FA2 6F00                       		ble.s	loc_1A514
00025FA4 700E                       		moveq	#$E,d0
00025FA6                            
00025FA6                            loc_1A514:
00025FA6 D240                       		add.w	d0,d1
00025FA8 2268 0034                  		movea.l	$34(a0),a1
00025FAC 3341 000C                  		move.w	d1,$C(a1)
00025FB0 3368 0008 0008             		move.w	8(a0),8(a1)
00025FB6                            
00025FB6                            loc_1A524:
00025FB6 323C 002B                  		move.w	#$2B,d1
00025FBA 343C 0060                  		move.w	#$60,d2
00025FBE 363C 0061                  		move.w	#$61,d3
00025FC2 3828 0008                  		move.w	8(a0),d4
00025FC6 4EB9 0001 8F1E             		jsr	SolidObject
00025FCC 7000                       		moveq	#0,d0
00025FCE 3228 003C                  		move.w	$3C(a0),d1
00025FD2 6A00                       		bpl.s	loc_1A550
00025FD4 4441                       		neg.w	d1
00025FD6 5141                       		subq.w	#8,d1
00025FD8 6500                       		bcs.s	loc_1A55C
00025FDA 5200                       		addq.b	#1,d0
00025FDC E841                       		asr.w	#4,d1
00025FDE D041                       		add.w	d1,d0
00025FE0 6000                       		bra.s	loc_1A55C
00025FE2                            ; ===========================================================================
00025FE2                            
00025FE2                            loc_1A550:
00025FE2 0441 0027                  		subi.w	#$27,d1
00025FE6 6500                       		bcs.s	loc_1A55C
00025FE8 5200                       		addq.b	#1,d0
00025FEA E841                       		asr.w	#4,d1
00025FEC D041                       		add.w	d1,d0
00025FEE                            
00025FEE                            loc_1A55C:
00025FEE 1140 001A                  		move.b	d0,$1A(a0)
00025FF2 3038 D008                  		move.w	($FFFFD008).w,d0
00025FF6 9068 0008                  		sub.w	8(a0),d0
00025FFA 6B00                       		bmi.s	loc_1A578
00025FFC 0440 0140                  		subi.w	#$140,d0
00026000 6B00                       		bmi.s	loc_1A578
00026002 4A28 0001                  		tst.b	1(a0)
00026006 6A00 FED2                  		bpl.w	Obj84_Delete
0002600A                            
0002600A                            loc_1A578:
0002600A 4EF9 0001 5C48             		jmp	DisplaySprite
00026010                            ; ===========================================================================
00026010                            
00026010                            loc_1A57E:				; XREF: Obj84_Index
00026010 7000                       		moveq	#0,d0
00026012 1028 0028                  		move.b	$28(a0),d0
00026016 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0002601A 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0002601E 6000 FF5C                  		bra.w	loc_1A4EA
00026022                            ; ===========================================================================
00026022 0000                       off_1A590:	dc.w loc_1A598-off_1A590
00026024 0000                       		dc.w loc_1A598-off_1A590
00026026 0000                       		dc.w loc_1A604-off_1A590
00026028 0000                       		dc.w loc_1A604-off_1A590
0002602A                            ; ===========================================================================
0002602A                            
0002602A                            loc_1A598:				; XREF: off_1A590
0002602A 4A28 0029                  		tst.b	$29(a0)
0002602E 6600                       		bne.s	loc_1A5D4
00026030 2268 0034                  		movea.l	$34(a0),a1
00026034 4A29 0021                  		tst.b	$21(a1)
00026038 6600                       		bne.s	loc_1A5B4
0002603A 6100 D2B2                  		bsr.w	BossDefeated
0002603E 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
00026046                            
00026046                            loc_1A5B4:
00026046 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0002604E 6400                       		bcc.s	locret_1A602
00026050 42A8 003C                  		clr.l	$3C(a0)
00026054 2268 0034                  		movea.l	$34(a0),a1
00026058 5369 0032                  		subq.w	#1,$32(a1)
0002605C 4269 0030                  		clr.w	$30(a1)
00026060 5528 0024                  		subq.b	#2,$24(a0)
00026064 4E75                       		rts	
00026066                            ; ===========================================================================
00026066                            
00026066                            loc_1A5D4:
00026066 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0002606C 6C00                       		bge.s	loc_1A5E4
0002606E 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
00026076                            
00026076                            loc_1A5E4:
00026076 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0002607E 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
00026084 6E00                       		bgt.s	locret_1A602
00026086 4268 003E                  		clr.w	$3E(a0)
0002608A 317C FF60 003C             		move.w	#-$A0,$3C(a0)
00026090 4228 0029                  		clr.b	$29(a0)
00026094                            
00026094                            locret_1A602:
00026094 4E75                       		rts	
00026096                            ; ===========================================================================
00026096                            
00026096                            loc_1A604:				; XREF: off_1A590
00026096 08E8 0001 0001             		bset	#1,1(a0)
0002609C 4A28 0029                  		tst.b	$29(a0)
000260A0 6600                       		bne.s	loc_1A646
000260A2 2268 0034                  		movea.l	$34(a0),a1
000260A6 4A29 0021                  		tst.b	$21(a1)
000260AA 6600                       		bne.s	loc_1A626
000260AC 6100 D240                  		bsr.w	BossDefeated
000260B0 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
000260B8                            
000260B8                            loc_1A626:
000260B8 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
000260C0 6400                       		bcc.s	locret_1A674
000260C2 42A8 003C                  		clr.l	$3C(a0)
000260C6 2268 0034                  		movea.l	$34(a0),a1
000260CA 5369 0032                  		subq.w	#1,$32(a1)
000260CE 4269 0030                  		clr.w	$30(a1)
000260D2 5528 0024                  		subq.b	#2,$24(a0)
000260D6 4E75                       		rts	
000260D8                            ; ===========================================================================
000260D8                            
000260D8                            loc_1A646:
000260D8 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
000260DE 6D00                       		blt.s	loc_1A656
000260E0 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
000260E8                            
000260E8                            loc_1A656:
000260E8 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
000260F0 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
000260F6 6D00                       		blt.s	locret_1A674
000260F8 4268 003E                  		clr.w	$3E(a0)
000260FC 317C 00A0 003C             		move.w	#$A0,$3C(a0)
00026102 4228 0029                  		clr.b	$29(a0)
00026106                            
00026106                            locret_1A674:
00026106 4E75                       		rts	
00026108                            ; ===========================================================================
00026108                            ; ---------------------------------------------------------------------------
00026108                            ; Sprite mappings - cylinders Eggman hides in (FZ)
00026108                            ; ---------------------------------------------------------------------------
00026108                            Map_obj84:
00026108                            	include "_maps\obj84.asm"
00026108                            ; ---------------------------------------------------------------------------
00026108                            ; Sprite mappings - cylinders Eggman hides in (FZ)
00026108                            ; ---------------------------------------------------------------------------
00026108 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0002610C 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
00026110 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
00026114 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
00026118 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0002611C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
00026120 06                         byte_1A68E:	dc.b 6
00026121 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00026126 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0002612B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
00026130 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00026135 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0002613A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0002613F 08                         byte_1A6AD:	dc.b 8
00026140 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00026145 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0002614A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0002614F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00026154 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00026159 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0002615E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
00026163 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00026168 0A                         byte_1A6D6:	dc.b $A
00026169 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0002616E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00026173 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
00026178 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0002617D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00026182 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
00026187 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0002618C D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00026191 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
00026196 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0002619B 0C                         byte_1A709:	dc.b $C
0002619C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
000261A1 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
000261A6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
000261AB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
000261B0 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
000261B5 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
000261BA D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
000261BF D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
000261C4 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
000261C9 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
000261CE 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
000261D3 180F 4840 00               		dc.b $18, $F, $48, $40,	0
000261D8 0D                         byte_1A746:	dc.b $D
000261D9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
000261DE A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
000261E3 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
000261E8 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
000261ED B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
000261F2 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
000261F7 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
000261FC D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00026201 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
00026206 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0002620B 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
00026210 180F 4840 00               		dc.b $18, $F, $48, $40,	0
00026215 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0002621A 0E                         byte_1A788:	dc.b $E
0002621B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00026220 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00026225 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0002622A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0002622F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00026234 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
00026239 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0002623E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00026243 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
00026248 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0002624D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
00026252 180F 4840 00               		dc.b $18, $F, $48, $40,	0
00026257 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0002625C 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
00026261 02                         byte_1A7CF:	dc.b 2
00026262 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
00026267 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0002626C                            		even
0002626C                            		even
0002626C                            
0002626C                            ; ===========================================================================
0002626C                            ; ---------------------------------------------------------------------------
0002626C                            ; Object 86 - energy balls (FZ)
0002626C                            ; ---------------------------------------------------------------------------
0002626C                            
0002626C                            Obj86:					; XREF: Obj_Index
0002626C 7000                       		moveq	#0,d0
0002626E 1028 0024                  		move.b	$24(a0),d0
00026272 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
00026276 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0002627A                            ; ===========================================================================
0002627A 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0002627C 0000                       		dc.w Obj86_Generator-Obj86_Index
0002627E 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
00026280 0000                       		dc.w loc_1A962-Obj86_Index
00026282 0000                       		dc.w loc_1A982-Obj86_Index
00026284                            ; ===========================================================================
00026284                            
00026284                            Obj86_Main:				; XREF: Obj86_Index
00026284 317C 2588 0008             		move.w	#$2588,8(a0)
0002628A 317C 053C 000C             		move.w	#$53C,$C(a0)
00026290 317C 0300 0002             		move.w	#$300,2(a0)
00026296 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0002629E 117C 0000 001C             		move.b	#0,$1C(a0)
000262A4 317C 0180 0018             		move.w	#$180,priority(a0)
000262AA 117C 0008 0017             		move.b	#8,$17(a0)
000262B0 117C 0008 0016             		move.b	#8,$16(a0)
000262B6 117C 0004 0001             		move.b	#4,1(a0)
000262BC 08E8 0007 0001             		bset	#7,1(a0)
000262C2 5428 0024                  		addq.b	#2,$24(a0)
000262C6                            
000262C6                            Obj86_Generator:			; XREF: Obj86_Index
000262C6 2268 0034                  		movea.l	$34(a0),a1
000262CA 0C29 0006 0034             		cmpi.b	#6,$34(a1)
000262D0 6600                       		bne.s	loc_1A850
000262D2 10BC 003F                  		move.b	#$3F,(a0)
000262D6 117C 0000 0024             		move.b	#0,$24(a0)
000262DC 4EF9 0001 5C48             		jmp	DisplaySprite
000262E2                            ; ===========================================================================
000262E2                            
000262E2                            loc_1A850:
000262E2 117C 0000 001C             		move.b	#0,$1C(a0)
000262E8 4A28 0029                  		tst.b	$29(a0)
000262EC 6700                       		beq.s	loc_1A86C
000262EE 5428 0024                  		addq.b	#2,$24(a0)
000262F2 117C 0001 001C             		move.b	#1,$1C(a0)
000262F8 117C 003E 0028             		move.b	#$3E,$28(a0)
000262FE                            
000262FE                            loc_1A86C:
000262FE 323C 0013                  		move.w	#$13,d1
00026302 343C 0008                  		move.w	#8,d2
00026306 363C 0011                  		move.w	#$11,d3
0002630A 3828 0008                  		move.w	8(a0),d4
0002630E 4EB9 0001 8F1E             		jsr	SolidObject
00026314 3038 D008                  		move.w	($FFFFD008).w,d0
00026318 9068 0008                  		sub.w	8(a0),d0
0002631C 6B00                       		bmi.s	loc_1A89A
0002631E 0440 0140                  		subi.w	#$140,d0
00026322 6B00                       		bmi.s	loc_1A89A
00026324 4A28 0001                  		tst.b	1(a0)
00026328 6A00 FBB0                  		bpl.w	Obj84_Delete
0002632C                            
0002632C                            loc_1A89A:
0002632C 43FA 0000                  		lea	Ani_obj86(pc),a1
00026330 4EB9 0001 2624             		jsr	AnimateSprite
00026336 4EF9 0001 5C48             		jmp	DisplaySprite
0002633C                            ; ===========================================================================
0002633C                            
0002633C                            Obj86_MakeBalls:			; XREF: Obj86_Index
0002633C 4A28 0029                  		tst.b	$29(a0)
00026340 6700 0000                  		beq.w	loc_1A954
00026344 4228 0029                  		clr.b	$29(a0)
00026348 D068 0030                  		add.w	$30(a0),d0
0002634C 0240 001E                  		andi.w	#$1E,d0
00026350 D4C0                       		adda.w	d0,a2
00026352 5868 0030                  		addq.w	#4,$30(a0)
00026356 4268 0032                  		clr.w	$32(a0)
0002635A 7403                       		moveq	#3,d2
0002635C                            
0002635C                            Obj86_Loop:
0002635C 4EB9 0001 672A             		jsr	SingleObjLoad2
00026362 6600 0000                  		bne.w	loc_1A954
00026366 12BC 0086                  		move.b	#$86,(a1)
0002636A 3368 0008 0008             		move.w	8(a0),8(a1)
00026370 337C 053C 000C             		move.w	#$53C,$C(a1)
00026376 137C 0008 0024             		move.b	#8,$24(a1)
0002637C 337C 2300 0002             		move.w	#$2300,2(a1)
00026382 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0002638A 137C 000C 0016             		move.b	#$C,$16(a1)
00026390 137C 000C 0017             		move.b	#$C,$17(a1)
00026396 137C 0000 0020             		move.b	#0,$20(a1)
0002639C 337C 0180 0018             		move.w	#$180,priority(a1)
000263A2 337C 003E 0028             		move.w	#$3E,$28(a1)
000263A8 137C 0004 0001             		move.b	#4,1(a1)
000263AE 08E9 0007 0001             		bset	#7,1(a1)
000263B4 2348 0034                  		move.l	a0,$34(a1)
000263B8 4EB9 0000 8D7E             		jsr	(RandomNumber).l
000263BE 3228 0032                  		move.w	$32(a0),d1
000263C2 C3FC FFB1                  		muls.w	#-$4F,d1
000263C6 0641 2578                  		addi.w	#$2578,d1
000263CA 0240 001F                  		andi.w	#$1F,d0
000263CE 0440 0010                  		subi.w	#$10,d0
000263D2 D041                       		add.w	d1,d0
000263D4 3340 0030                  		move.w	d0,$30(a1)
000263D8 5268 0032                  		addq.w	#1,$32(a0)
000263DC 3168 0032 0038             		move.w	$32(a0),$38(a0)
000263E2 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
000263E6                            
000263E6                            loc_1A954:
000263E6 4A68 0032                  		tst.w	$32(a0)
000263EA 6600                       		bne.s	loc_1A95E
000263EC 5428 0024                  		addq.b	#2,$24(a0)
000263F0                            
000263F0                            loc_1A95E:
000263F0 6000 FF0C                  		bra.w	loc_1A86C
000263F4                            ; ===========================================================================
000263F4                            
000263F4                            loc_1A962:				; XREF: Obj86_Index
000263F4 117C 0002 001C             		move.b	#2,$1C(a0)
000263FA 4A68 0038                  		tst.w	$38(a0)
000263FE 6600                       		bne.s	loc_1A97E
00026400 117C 0002 0024             		move.b	#2,$24(a0)
00026406 2268 0034                  		movea.l	$34(a0),a1
0002640A 337C FFFF 0032             		move.w	#-1,$32(a1)
00026410                            
00026410                            loc_1A97E:
00026410 6000 FEEC                  		bra.w	loc_1A86C
00026414                            ; ===========================================================================
00026414                            
00026414                            loc_1A982:				; XREF: Obj86_Index
00026414 7000                       		moveq	#0,d0
00026416 1028 0025                  		move.b	$25(a0),d0
0002641A 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0002641E 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
00026422 43FA 0000                  		lea	Ani_obj86a(pc),a1
00026426 4EB9 0001 2624             		jsr	AnimateSprite
0002642C 4EF9 0001 5C48             		jmp	DisplaySprite
00026432                            ; ===========================================================================
00026432 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
00026434 0000                       		dc.w loc_1A9C0-Obj86_Index2
00026436 0000                       		dc.w loc_1AA1E-Obj86_Index2
00026438                            ; ===========================================================================
00026438                            
00026438                            loc_1A9A6:				; XREF: Obj86_Index2
00026438 3028 0030                  		move.w	$30(a0),d0
0002643C 9068 0008                  		sub.w	8(a0),d0
00026440 E940                       		asl.w	#4,d0
00026442 3140 0010                  		move.w	d0,$10(a0)
00026446 317C 00B4 0028             		move.w	#$B4,$28(a0)
0002644C 5428 0025                  		addq.b	#2,$25(a0)
00026450 4E75                       		rts	
00026452                            ; ===========================================================================
00026452                            
00026452                            loc_1A9C0:				; XREF: Obj86_Index2
00026452 4A68 0010                  		tst.w	$10(a0)
00026456 6700                       		beq.s	loc_1A9E6
00026458 4EB9 0001 5BE2             		jsr	SpeedToPos
0002645E 3028 0008                  		move.w	8(a0),d0
00026462 9068 0030                  		sub.w	$30(a0),d0
00026466 6400                       		bcc.s	loc_1A9E6
00026468 4268 0010                  		clr.w	$10(a0)
0002646C D168 0008                  		add.w	d0,8(a0)
00026470 2268 0034                  		movea.l	$34(a0),a1
00026474 5369 0032                  		subq.w	#1,$32(a1)
00026478                            
00026478                            loc_1A9E6:
00026478 117C 0000 001C             		move.b	#0,$1C(a0)
0002647E 5368 0028                  		subq.w	#1,$28(a0)
00026482 6600                       		bne.s	locret_1AA1C
00026484 5428 0025                  		addq.b	#2,$25(a0)
00026488 117C 0001 001C             		move.b	#1,$1C(a0)
0002648E 117C 009A 0020             		move.b	#$9A,$20(a0)
00026494 317C 00B4 0028             		move.w	#$B4,$28(a0)
0002649A 7000                       		moveq	#0,d0
0002649C 3038 D008                  		move.w	($FFFFD008).w,d0
000264A0 9068 0008                  		sub.w	8(a0),d0
000264A4 3140 0010                  		move.w	d0,$10(a0)
000264A8 317C 0140 0012             		move.w	#$140,$12(a0)
000264AE                            
000264AE                            locret_1AA1C:
000264AE 4E75                       		rts	
000264B0                            ; ===========================================================================
000264B0                            
000264B0                            loc_1AA1E:				; XREF: Obj86_Index2
000264B0 4EB9 0001 5BE2             		jsr	SpeedToPos
000264B6 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
000264BC 6400                       		bcc.s	loc_1AA34
000264BE 5368 0028                  		subq.w	#1,$28(a0)
000264C2 6700                       		beq.s	loc_1AA34
000264C4 4E75                       		rts	
000264C6                            ; ===========================================================================
000264C6                            
000264C6                            loc_1AA34:
000264C6 2268 0034                  		movea.l	$34(a0),a1
000264CA 5369 0038                  		subq.w	#1,$38(a1)
000264CE 6000 FA0A                  		bra.w	Obj84_Delete
000264D2                            ; ===========================================================================
000264D2                            Ani_obj86:
000264D2                            	include "_anim\obj86.asm"
000264D2                            ; ---------------------------------------------------------------------------
000264D2                            ; Animation script - energy ball launcher (FZ)
000264D2                            ; ---------------------------------------------------------------------------
000264D2 0000                       		dc.w byte_1AA46-Ani_obj86
000264D4 0000                       		dc.w byte_1AA4A-Ani_obj86
000264D6 0000                       		dc.w byte_1AA50-Ani_obj86
000264D8 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
000264DC 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
000264E2 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
000264E8                            		even
000264E8                            		even
000264E8                            
000264E8                            ; ---------------------------------------------------------------------------
000264E8                            ; Sprite mappings - energy ball	launcher (FZ)
000264E8                            ; ---------------------------------------------------------------------------
000264E8                            Map_obj86:
000264E8                            	include "_maps\obj86.asm"
000264E8                            ; ---------------------------------------------------------------------------
000264E8                            ; Sprite mappings - energy ball	launcher (FZ)
000264E8                            ; ---------------------------------------------------------------------------
000264E8 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
000264EC 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
000264F0 01                         byte_1AA5E:	dc.b 1
000264F1 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
000264F6 01                         byte_1AA64:	dc.b 1
000264F7 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
000264FC 01                         byte_1AA6A:	dc.b 1
000264FD F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
00026502 01                         byte_1AA70:	dc.b 1
00026503 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
00026508                            		even
00026508                            		even
00026508                            
00026508                            Ani_obj86a:
00026508                            	include "_anim\obj86a.asm"
00026508                            ; ---------------------------------------------------------------------------
00026508                            ; Animation script - energy balls (FZ)
00026508                            ; ---------------------------------------------------------------------------
00026508 0000                       		dc.w byte_1AA7A-Ani_obj86a
0002650A 0000                       		dc.w byte_1AA9C-Ani_obj86a
0002650C 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0002651B 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0002652A 0A05 FF00                  		dc.b $A, 5, $FF, 0
0002652E 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
00026538                            		even
00026538                            		even
00026538                            
00026538                            ; ---------------------------------------------------------------------------
00026538                            ; Sprite mappings - energy balls (FZ)
00026538                            ; ---------------------------------------------------------------------------
00026538                            Map_obj86a:
00026538                            	include "_maps\obj86a.asm"
00026538                            ; ---------------------------------------------------------------------------
00026538                            ; Sprite mappings - energy balls (FZ)
00026538                            ; ---------------------------------------------------------------------------
00026538 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0002653C 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
00026540 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
00026544 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
00026548 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0002654C 0000                       		dc.w byte_1AB20-Map_obj86a
0002654E 02                         byte_1AABC:	dc.b 2
0002654F F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
00026554 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
00026559 02                         byte_1AAC7:	dc.b 2
0002655A F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0002655F F402 1882 04               		dc.b $F4, 2, $18, $82, 4
00026564 02                         byte_1AAD2:	dc.b 2
00026565 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0002656A 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0002656F 02                         byte_1AADD:	dc.b 2
00026570 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
00026575 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0002657A 02                         byte_1AAE8:	dc.b 2
0002657B F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
00026580 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
00026585 02                         byte_1AAF3:	dc.b 2
00026586 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0002658B F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
00026590 01                         byte_1AAFE:	dc.b 1
00026591 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
00026596 01                         byte_1AB04:	dc.b 1
00026597 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0002659C 02                         byte_1AB0A:	dc.b 2
0002659D F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
000265A2 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
000265A7 02                         byte_1AB15:	dc.b 2
000265A8 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
000265AD F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
000265B2 00                         byte_1AB20:	dc.b 0
000265B4 00                         		even
000265B4 00                         		even
000265B4                            
000265B4                            ; ===========================================================================
000265B4                            ; ---------------------------------------------------------------------------
000265B4                            ; Object 3E - prison capsule
000265B4                            ; ---------------------------------------------------------------------------
000265B4                            
000265B4                            Obj3E:					; XREF: Obj_Index
000265B4 7000                       		moveq	#0,d0
000265B6 1028 0024                  		move.b	$24(a0),d0
000265BA 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
000265BE 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
000265C2 4EF9 0001 883A             		jmp	MarkObjGone
000265C8                            ; ===========================================================================
000265C8 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
000265CA 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
000265CC 0000                       		dc.w Obj3E_Switched-Obj3E_Index
000265CE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
000265D0 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
000265D2 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
000265D4 0000                       		dc.w Obj3E_Animals-Obj3E_Index
000265D6 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
000265D8                            
000265D8 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
000265DC 040C 0501                  		dc.b 4,	$C, 5, 1
000265E0 0610 0403                  		dc.b 6,	$10, 4,	3
000265E4 0810 0305                  		dc.b 8,	$10, 3,	5
000265E8                            ; ===========================================================================
000265E8                            
000265E8                            Obj3E_Main:				; XREF: Obj3E_Index
000265E8 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
000265F0 317C 049D 0002             		move.w	#$49D,2(a0)
000265F6 117C 0004 0001             		move.b	#4,1(a0)
000265FC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00026602 7000                       		moveq	#0,d0
00026604 1028 0028                  		move.b	$28(a0),d0
00026608 E548                       		lsl.w	#2,d0
0002660A 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0002660E 1159 0024                  		move.b	(a1)+,$24(a0)
00026612 1159 0023                  		move.b	(a1)+,width_pixels(a0)
00026616 1159 0018                  		move.b	(a1)+,priority(a0)
0002661A 3028 0018                          move.w  priority(a0),d0
0002661E E248                               lsr.w   #1,d0
00026620 0240 0380                          andi.w  #$380,d0
00026624 3140 0018                          move.w  d0,priority(a0)
00026628 1159 001A                  		move.b	(a1)+,$1A(a0)
0002662C 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
00026630 6600                       		bne.s	Obj3E_Not02	; if not, branch
00026632 117C 0006 0020             		move.b	#6,$20(a0)
00026638 117C 0008 0021             		move.b	#8,$21(a0)
0002663E                            
0002663E                            Obj3E_Not02:
0002663E 4E75                       		rts	
00026640                            ; ===========================================================================
00026640                            
00026640                            Obj3E_BodyMain:				; XREF: Obj3E_Index
00026640 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
00026646 6700                       		beq.s	Obj3E_ChkOpened
00026648 323C 002B                  		move.w	#$2B,d1
0002664C 343C 0018                  		move.w	#$18,d2
00026650 363C 0018                  		move.w	#$18,d3
00026654 3828 0008                  		move.w	8(a0),d4
00026658 4EF9 0001 8F1E             		jmp	SolidObject
0002665E                            ; ===========================================================================
0002665E                            
0002665E                            Obj3E_ChkOpened:
0002665E 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
00026662 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
00026664 4228 0025                  		clr.b	$25(a0)
00026668 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0002666E 08F8 0001 D022             		bset	#1,($FFFFD022).w
00026674                            
00026674                            Obj3E_DoOpen:
00026674 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0002667A 4E75                       		rts	
0002667C                            ; ===========================================================================
0002667C                            
0002667C                            Obj3E_Switched:				; XREF: Obj3E_Index
0002667C 323C 0017                  		move.w	#$17,d1
00026680 343C 0008                  		move.w	#8,d2
00026684 363C 0008                  		move.w	#8,d3
00026688 3828 0008                  		move.w	8(a0),d4
0002668C 4EB9 0001 8F1E             		jsr	SolidObject
00026692 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
00026698 4EB9 0001 2624             		jsr	AnimateSprite
0002669E 3168 0030 000C             		move.w	$30(a0),$C(a0)
000266A4 4A28 0025                  		tst.b	$25(a0)
000266A8 6700                       		beq.s	locret_1AC60
000266AA 5068 000C                  		addq.w	#8,$C(a0)
000266AE 117C 000A 0024             		move.b	#$A,$24(a0)
000266B4 317C 003C 001E             		move.w	#$3C,$1E(a0)
000266BA 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000266BE 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
000266C2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000266C8 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
000266CE 4228 0025                  		clr.b	$25(a0)
000266D2 08B8 0003 D022             		bclr	#3,($FFFFD022).w
000266D8 08F8 0001 D022             		bset	#1,($FFFFD022).w
000266DE                            
000266DE                            locret_1AC60:
000266DE 4E75                       		rts	
000266E0                            ; ===========================================================================
000266E0                            
000266E0                            Obj3E_Explosion:			; XREF: Obj3E_Index
000266E0 7007                       		moveq	#7,d0
000266E2 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
000266E6 6600                       		bne.s	loc_1ACA0
000266E8 4EB9 0001 6714             		jsr	SingleObjLoad
000266EE 6600                       		bne.s	loc_1ACA0
000266F0 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000266F4 3368 0008 0008             		move.w	8(a0),8(a1)
000266FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00026700 4EB9 0000 8D7E             		jsr	(RandomNumber).l
00026706 7200                       		moveq	#0,d1
00026708 1200                       		move.b	d0,d1
0002670A E409                       		lsr.b	#2,d1
0002670C 0441 0020                  		subi.w	#$20,d1
00026710 D369 0008                  		add.w	d1,8(a1)
00026714 E048                       		lsr.w	#8,d0
00026716 E608                       		lsr.b	#3,d0
00026718 D169 000C                  		add.w	d0,$C(a1)
0002671C                            
0002671C                            loc_1ACA0:
0002671C 5368 001E                  		subq.w	#1,$1E(a0)
00026720 6700                       		beq.s	Obj3E_MakeAnimal
00026722 4E75                       		rts	
00026724                            ; ===========================================================================
00026724                            
00026724                            Obj3E_MakeAnimal:
00026724 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0002672A 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
00026730 117C 0006 001A             		move.b	#6,$1A(a0)
00026736 317C 0096 001E             		move.w	#$96,$1E(a0)
0002673C 0668 0020 000C             		addi.w	#$20,$C(a0)
00026742 7C07                       		moveq	#7,d6
00026744 3A3C 009A                  		move.w	#$9A,d5
00026748 78E4                       		moveq	#-$1C,d4
0002674A                            
0002674A                            Obj3E_Loop:
0002674A 4EB9 0001 6714             		jsr	SingleObjLoad
00026750 6600                       		bne.s	locret_1ACF8
00026752 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00026756 3368 0008 0008             		move.w	8(a0),8(a1)
0002675C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00026762 D969 0008                  		add.w	d4,8(a1)
00026766 5E44                       		addq.w	#7,d4
00026768 3345 0036                  		move.w	d5,$36(a1)
0002676C 5145                       		subq.w	#8,d5
0002676E 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
00026772                            
00026772                            locret_1ACF8:
00026772 4E75                       		rts	
00026774                            ; ===========================================================================
00026774                            
00026774                            Obj3E_Animals:				; XREF: Obj3E_Index
00026774 7007                       		moveq	#7,d0
00026776 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0002677A 6600                       		bne.s	loc_1AD38
0002677C 4EB9 0001 6714             		jsr	SingleObjLoad
00026782 6600                       		bne.s	loc_1AD38
00026784 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00026788 3368 0008 0008             		move.w	8(a0),8(a1)
0002678E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00026794 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0002679A 0240 001F                  		andi.w	#$1F,d0
0002679E 5D40                       		subq.w	#6,d0
000267A0 4A41                       		tst.w	d1
000267A2 6A00                       		bpl.s	loc_1AD2E
000267A4 4440                       		neg.w	d0
000267A6                            
000267A6                            loc_1AD2E:
000267A6 D169 0008                  		add.w	d0,8(a1)
000267AA 337C 000C 0036             		move.w	#$C,$36(a1)
000267B0                            
000267B0                            loc_1AD38:
000267B0 5368 001E                  		subq.w	#1,$1E(a0)
000267B4 6600                       		bne.s	locret_1AD48
000267B6 5428 0024                  		addq.b	#2,$24(a0)
000267BA 317C 00B4 001E             		move.w	#180,$1E(a0)
000267C0                            
000267C0                            locret_1AD48:
000267C0 4E75                       		rts	
000267C2                            ; ===========================================================================
000267C2                            
000267C2                            Obj3E_EndAct:				; XREF: Obj3E_Index
000267C2 703E                       		moveq	#$3E,d0
000267C4 7228                       		moveq	#$28,d1
000267C6 7440                       		moveq	#$40,d2
000267C8 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
000267CC                            
000267CC                            Obj3E_FindObj28:
000267CC B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
000267CE 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
000267D0 D2C2                       		adda.w	d2,a1		; next object RAM
000267D2 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
000267D6                            
000267D6 4EB9 0001 7E4E             		jsr	GotThroughAct
000267DC 4EF9 0001 5BFC             		jmp	DeleteObject
000267E2                            ; ===========================================================================
000267E2                            
000267E2                            Obj3E_Obj28Found:
000267E2 4E75                       		rts	
000267E4                            ; ===========================================================================
000267E4                            Ani_obj3E:
000267E4                            	include "_anim\obj3E.asm"
000267E4                            ; ---------------------------------------------------------------------------
000267E4                            ; Animation script - prison capsule
000267E4                            ; ---------------------------------------------------------------------------
000267E4 0000                       		dc.w byte_1AD70-Ani_obj3E
000267E6 0000                       		dc.w byte_1AD70-Ani_obj3E
000267E8 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
000267EC                            		even
000267EC                            		even
000267EC                            
000267EC                            ; ---------------------------------------------------------------------------
000267EC                            ; Sprite mappings - prison capsule
000267EC                            ; ---------------------------------------------------------------------------
000267EC                            Map_obj3E:
000267EC                            	include "_maps\obj3E.asm"
000267EC                            ; ---------------------------------------------------------------------------
000267EC                            ; Sprite mappings - prison capsule
000267EC                            ; ---------------------------------------------------------------------------
000267EC 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
000267F0 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
000267F4 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
000267F8 0000                       		dc.w byte_1ADE2-Map_obj3E
000267FA 07                         byte_1AD82:	dc.b 7
000267FB E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
00026800 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
00026805 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0002680A F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0002680F F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
00026814 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
00026819 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0002681E 01                         byte_1ADA6:	dc.b 1
0002681F F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
00026824 06                         byte_1ADAC:	dc.b 6
00026825 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0002682A 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0002682F 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
00026834 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
00026839 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0002683E 100D 2034 00               		dc.b $10, $D, $20, $34,	0
00026843 01                         byte_1ADCB:	dc.b 1
00026844 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
00026849 02                         byte_1ADD1:	dc.b 2
0002684A E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0002684F 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
00026854 01                         byte_1ADDC:	dc.b 1
00026855 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0002685A 00                         byte_1ADE2:	dc.b 0
0002685C 00                         		even
0002685C 00                         		even
0002685C                            
0002685C                            ; ---------------------------------------------------------------------------
0002685C                            ; Object touch response	subroutine - collision_flags(a0) in	the object RAM
0002685C                            ; ---------------------------------------------------------------------------
0002685C                            
0002685C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002685C                            
0002685C                            
0002685C                            TouchResponse:				; XREF: Obj01
0002685C 4E71                       		nop	
0002685E 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
00026862 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
00026866 5142                       		subq.w	#8,d2
00026868 7A00                       		moveq	#0,d5
0002686A 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0002686E 5705                       		subq.b	#3,d5
00026870 9645                       		sub.w	d5,d3
00026872 0C28 0039 001A             		cmpi.b	#$39,mapping_frame(a0)	; is Sonic ducking?
00026878 6600                       		bne.s	Touch_NoDuck	; if not, branch
0002687A 0643 000C                  		addi.w	#$C,d3
0002687E 7A0A                       		moveq	#$A,d5
00026880                            
00026880                            Touch_NoDuck:
00026880 383C 0010                  		move.w	#$10,d4
00026884 DA45                       		add.w	d5,d5
00026886 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0002688A 3C3C 005F                  		move.w	#$5F,d6
0002688E                            
0002688E                            Touch_Loop:
0002688E 4A29 0001                  		tst.b	1(a1)
00026892 6A00                       		bpl.s	Touch_NextObj
00026894 1029 0020                  		move.b	collision_flags(a1),d0	; load touch response number
00026898 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0002689A                            
0002689A                            Touch_NextObj:
0002689A 43E9 0040                  		lea	object_size(a1),a1	; next object RAM
0002689E 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
000268A2                            
000268A2 7000                       		moveq	#0,d0
000268A4 4E75                       		rts	
000268A6                            ; ===========================================================================
000268A6 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
000268A8 0C14                       		dc.b   $C, $14
000268AA 140C                       		dc.b  $14,  $C
000268AC 0410                       		dc.b	4, $10
000268AE 0C12                       		dc.b   $C, $12
000268B0 1010                       		dc.b  $10, $10
000268B2 0606                       		dc.b	6,   6
000268B4 180C                       		dc.b  $18,  $C
000268B6 0C10                       		dc.b   $C, $10
000268B8 100C                       		dc.b  $10,  $C
000268BA 0808                       		dc.b	8,   8
000268BC 1410                       		dc.b  $14, $10
000268BE 1408                       		dc.b  $14,   8
000268C0 0E0E                       		dc.b   $E,  $E
000268C2 1818                       		dc.b  $18, $18
000268C4 2810                       		dc.b  $28, $10
000268C6 1018                       		dc.b  $10, $18
000268C8 0810                       		dc.b	8, $10
000268CA 2070                       		dc.b  $20, $70
000268CC 4020                       		dc.b  $40, $20
000268CE 8020                       		dc.b  $80, $20
000268D0 2020                       		dc.b  $20, $20
000268D2 0808                       		dc.b	8,   8
000268D4 0404                       		dc.b	4,   4
000268D6 2008                       		dc.b  $20,   8
000268D8 0C0C                       		dc.b   $C,  $C
000268DA 0804                       		dc.b	8,   4
000268DC 1804                       		dc.b  $18,   4
000268DE 2804                       		dc.b  $28,   4
000268E0 0408                       		dc.b	4,   8
000268E2 0418                       		dc.b	4, $18
000268E4 0428                       		dc.b	4, $28
000268E6 0420                       		dc.b	4, $20
000268E8 1818                       		dc.b  $18, $18
000268EA 0C18                       		dc.b   $C, $18
000268EC 4808                       		dc.b  $48,   8
000268EE                            ; ===========================================================================
000268EE                            
000268EE                            Touch_Height:				; XREF: TouchResponse
000268EE 0240 003F                  		andi.w	#$3F,d0
000268F2 D040                       		add.w	d0,d0
000268F4 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
000268F8 7200                       		moveq	#0,d1
000268FA 121A                       		move.b	(a2)+,d1
000268FC 3029 0008                  		move.w	8(a1),d0
00026900 9041                       		sub.w	d1,d0
00026902 9042                       		sub.w	d2,d0
00026904 6400                       		bcc.s	loc_1AE98
00026906 D241                       		add.w	d1,d1
00026908 D041                       		add.w	d1,d0
0002690A 6500                       		bcs.s	Touch_Width
0002690C 6000 FF8C                  		bra.w	Touch_NextObj
00026910                            ; ===========================================================================
00026910                            
00026910                            loc_1AE98:
00026910 B044                       		cmp.w	d4,d0
00026912 6200 FF86                  		bhi.w	Touch_NextObj
00026916                            
00026916                            Touch_Width:
00026916 7200                       		moveq	#0,d1
00026918 121A                       		move.b	(a2)+,d1
0002691A 3029 000C                  		move.w	$C(a1),d0
0002691E 9041                       		sub.w	d1,d0
00026920 9043                       		sub.w	d3,d0
00026922 6400                       		bcc.s	loc_1AEB6
00026924 D241                       		add.w	d1,d1
00026926 D240                       		add.w	d0,d1
00026928 6500                       		bcs.s	Touch_ChkValue
0002692A 6000 FF6E                  		bra.w	Touch_NextObj
0002692E                            ; ===========================================================================
0002692E                            
0002692E                            loc_1AEB6:
0002692E B045                       		cmp.w	d5,d0
00026930 6200 FF68                  		bhi.w	Touch_NextObj
00026934                            
00026934                            Touch_ChkValue:
00026934 1229 0020                  		move.b	collision_flags(a1),d1	; load touch response number
00026938 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0002693C 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
00026940 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
00026944 6700 0000                  		beq.w	Touch_Special	; if yes, branch
00026948 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0002694A 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0002694E                            
0002694E                            ; touch	response is $40-$7F
0002694E                            
0002694E 1029 0020                  		move.b	collision_flags(a1),d0
00026952 0200 003F                  		andi.b	#$3F,d0
00026956 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0002695A 6700                       		beq.s	Touch_Monitor	; if yes, branch
0002695C 0C28 005A 0030             		cmpi.b	#$5A,invulnerable_time(a0)
00026962 6400 0000                  		bcc.w	locret_1AEF2
00026966 5429 0024                  		addq.b	#2,routine(a1)	; advance the object's routine counter
0002696A                            
0002696A                            locret_1AEF2:
0002696A 4E75                       		rts	
0002696C                            ; ===========================================================================
0002696C                            
0002696C                            Touch_Monitor:
0002696C                            ;		tst.b	($FFFFFF7F).w		; Sonic Homing Attack is chasing the monitor?
0002696C                            ;		bne.s	loc_1AF1E_bounce	; if yes, destroy the monitor
0002696C 4A68 0012                  		tst.w	y_vel(a0)		; is Sonic moving upwards?
00026970 6A00                       		bpl.s	loc_1AF1E	; if not, branch
00026972 3028 000C                  		move.w	$C(a0),d0
00026976 0440 0010                  		subi.w	#$10,d0
0002697A B069 000C                  		cmp.w	$C(a1),d0
0002697E 6500                       		bcs.s	loc_1AF1E       ; Changed to loc_1AF1E instead of locret_1AF2E
00026980 4468 0012                  		neg.w	y_vel(a0)		; reverse Sonic's y-motion
00026984 337C FE80 0012             		move.w	#-$180,y_vel(a1)
0002698A 4A29 0025                  		tst.b	routine_secondary(a1)
0002698E 6600                       		bne.s	locret_1AF2E
00026990 5829 0025                  		addq.b	#4,routine_secondary(a1)	; advance the monitor's routine counter
00026994 4E75                       		rts	
00026996                            ; ===========================================================================
00026996                            
00026996                            loc_1AF1E:
00026996 0C28 0002 001C             		cmpi.b	#2,anim(a0)	; is Sonic rolling/jumping?
0002699C 6600                               bne.s   locret_1AF2E
0002699E                            ;        clr.b   ($FFFFFF7F).w    ; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
0002699E 4A68 0012                          tst.w   y_vel(a0)       ; is Sonic moving upwards?
000269A2 6D00                               blt.s   loc_1AF1E_2               ; if so, branch, we want Sonic to carry on moving up
000269A4 4468 0012                          neg.w   y_vel(a0)       ; reverse Sonic's y-motion, to give him that bounce off the monitor
000269A8                            loc_1AF1E_2:
000269A8 5429 0024                          addq.b	#2,routine(a1)	; advance the monitor's routine counter
000269AC 3348 003E                          move.w  a0,parent(a1)
000269B0 4A38 FF7F                  		tst.b	($FFFFFF7F).w	; is Sonic chasing some object?
000269B4 6700 0000                  		beq.w	BounceJD
000269B8 0838 0007 D022             		btst	#7,(MainCharacter+status).w	; was the monitor destroyed with a jumpdash?
000269BE 6600 0000                  		bne.w	BounceJD	; if yes, branch	
000269C2                            		
000269C2                            		
000269C2                            locret_1AF2E:
000269C2 4E75                       		rts	
000269C4                            ; ===========================================================================
000269C4                            ; ---------------------------------------------------------------------------
000269C4                            ; Subroutine to Bounce Sonic upwards in Homing Attack
000269C4                            ; ---------------------------------------------------------------------------
000269C4                            
000269C4                            HA_Bounceup:
000269C4 4EF9 0000 0000             	jmp	BounceJD
000269CA                            
000269CA                            ; ===========================================================================
000269CA                            
000269CA                            Touch_Enemy:				; XREF: Touch_ChkValue
000269CA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
000269CE 6600                       		bne.s	loc_1AF40	; if yes, branch
000269D0 0C28 001F 001C             		cmpi.b	#$1F,anim(a0)	; is Sonic Spin Dashing?
000269D6 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
000269DA 0C28 0002 001C             		cmpi.b	#2,anim(a0)	; is Sonic rolling?
000269E0 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
000269E4                            
000269E4                            loc_1AF40:
000269E4 4A29 0021                  		tst.b	collision_property(a1)
000269E8 6700                       		beq.s	Touch_KillEnemy
000269EA 4468 0010                  		neg.w	x_vel(a0)
000269EE 4468 0012                  		neg.w	y_vel(a0)
000269F2 E0E8 0010                  		asr	x_vel(a0)
000269F6 E0E8 0012                  		asr	y_vel(a0)
000269FA 137C 0000 0020             		move.b	#0,collision_flags(a1)
00026A00 5329 0021                  		subq.b	#1,collision_property(a1)
00026A04 6600                       		bne.s	locret_1AF68
00026A06 08E9 0007 0022             		bset	#7,status(a1)
00026A0C                            
00026A0C                            locret_1AF68:
00026A0C 4E75                       		rts	
00026A0E                            ; ===========================================================================
00026A0E                            
00026A0E                            Touch_KillEnemy:
00026A0E 08E9 0007 0022             		bset	#7,status(a1)
00026A14 7000                       		moveq	#0,d0
00026A16 3038 F7D0                  		move.w	(Chain_Bonus_counter).w,d0
00026A1A 5478 F7D0                  		addq.w	#2,(Chain_Bonus_counter).w ; add 2 to item bonus counter
00026A1E 0C40 0006                  		cmpi.w	#6,d0
00026A22 6500                       		bcs.s	loc_1AF82
00026A24 7006                       		moveq	#6,d0
00026A26                            
00026A26                            loc_1AF82:
00026A26 3340 003E                  		move.w	d0,parent(a1)
00026A2A 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
00026A2E 0C78 0020 F7D0             		cmpi.w	#$20,(Chain_Bonus_counter).w ; have 16 enemies been destroyed?
00026A34 6500                       		bcs.s	loc_1AF9C	; if not, branch
00026A36 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
00026A3A 337C 000A 003E             		move.w	#$A,parent(a1)
00026A40                            
00026A40                            loc_1AF9C:
00026A40 4EB9 0000 0000             		jsr	AddPoints
00026A46 4EBA FF7C                  		jsr	HA_Bounceup	; Bounce Sonic upwards if is Homing Attack
00026A4A                            ;		clr.b   ($FFFFFF7F).w    ; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
00026A4A 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
00026A4E 137C 0000 0024             		move.b	#0,routine(a1)
00026A54 0828 0007 0022             		btst	#7,$22(a0)	; was the enemy destroyed with a jumpdash?
00026A5A 6600                       		bne.s	JSR_BounceJD	; if yes, branch
00026A5C 6000                       		bra.s	loc_1AF9C_cont	; if not, skip
00026A5E                            		
00026A5E                            JSR_BounceJD:
00026A5E 4EB9 0000 0000             		jsr	BounceJD	; jump to BounceJD
00026A64                            		
00026A64                            loc_1AF9C_cont:
00026A64 4A68 0012                  		tst.w	y_vel(a0)
00026A68 6B00                       		bmi.s	loc_1AFC2
00026A6A 3028 000C                  		move.w	$C(a0),d0
00026A6E B069 000C                  		cmp.w	$C(a1),d0
00026A72 6400                       		bcc.s	loc_1AFCA
00026A74 4468 0012                  		neg.w	y_vel(a0)
00026A78 4E75                       		rts	
00026A7A                            ; ===========================================================================
00026A7A                            
00026A7A                            loc_1AFC2:
00026A7A 0668 0100 0012             		addi.w	#$100,y_vel(a0)
00026A80 4E75                       		rts	
00026A82                            ; ===========================================================================
00026A82                            
00026A82                            loc_1AFCA:
00026A82 0468 0100 0012             		subi.w	#$100,y_vel(a0)
00026A88 4E75                       		rts	
00026A8A                            ; ===========================================================================
00026A8A 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
00026A92                            ; ===========================================================================
00026A92                            
00026A92                            
00026A92                            
00026A92                            ; -------------------------------------------------------------------------
00026A92                            ; Subroutine to stop Sonic, bounce him up and to give him the ability to
00026A92                            ; Jumpdash again when he has performed a Jumpdash
00026A92                            ; -------------------------------------------------------------------------
00026A92                            
00026A92                            BounceJD:
00026A92 08B8 0007 D022             		bclr	#7,(MainCharacter+status).w	; clear jumpdash flag
00026A98 4A38 FF7F                  		tst.b	($FFFFFF7F).w		; is Sonic using his Homing Attack?
00026A9C 6700                       		beq.s	BounceJD_End	; if not, branch
00026A9E 4238 FF7F                  		clr.b	($FFFFFF7F).w	; if yes, clear HA flag (allow Sonic to HA again)
00026AA2 4268 0010                  		clr.w	$10(a0)		; clear X-velocity (stop sonic)
00026AA6 317C FA10 0012             		move.w	#-$5F0,$12(a0)	; move sonic upwards
00026AAC 0828 0006 0022             		btst	#6,$22(a0)	; is sonic underwater?
00026AB2 6700                       		beq.s	BounceJD_Shoes	; if not, branch
00026AB4 317C FCE0 0012             		move.w	#-$320,$12(a0)
00026ABA                            		
00026ABA                            BounceJD_Shoes:
00026ABA 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does sonic has speed shoes?
00026ABE 6700                       		beq.s	BounceJD_End	; if not, branch
00026AC0 317C F9E0 0012             		move.w	#-$620,$12(a0)	; use -$620 for Y-velocity (move sonic upwards)
00026AC6                            		
00026AC6                            BounceJD_End:
00026AC6 4E75                       		rts			; return
00026AC8                            ; End of function BounceJD
00026AC8                            
00026AC8                            loc_1AFDA:				; XREF: Touch_CatKiller
00026AC8 08E9 0007 0022             		bset	#7,status(a1)
00026ACE                            
00026ACE                            Touch_ChkHurt:				; XREF: Touch_ChkValue
00026ACE 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00026AD4 6700                       		beq.s	loc_1AFE6
00026AD6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
00026ADA 6700                       		beq.s	Touch_Hurt	; if not, branch
00026ADC                            
00026ADC                            loc_1AFE6:				; XREF: Touch_Hurt
00026ADC 70FF                       		moveq	#-1,d0
00026ADE 4E75                       		rts	
00026AE0                            ; ===========================================================================
00026AE0                            
00026AE0                            Touch_Hurt:				; XREF: Touch_ChkHurt
00026AE0 4E71                       		nop	
00026AE2 4A28 0030                  		tst.b	$30(a0)
00026AE6 66F4                       		bne.s	loc_1AFE6
00026AE8 2449                       		movea.l	a1,a2
00026AEA                            
00026AEA                            ; End of function TouchResponse
00026AEA                            ; continue straight to HurtSonic
00026AEA                            
00026AEA                            ; ---------------------------------------------------------------------------
00026AEA                            ; Hurting Sonic	subroutine
00026AEA                            ; ---------------------------------------------------------------------------
00026AEA                            
00026AEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026AEA                            
00026AEA                            
00026AEA                            HurtSonic:
00026AEA 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
00026AEE 6600                       		bne.s	Hurt_Shield	; if yes, branch
00026AF0 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
00026AF4 6700 0000                  		beq.w	KillCharacter	; if not, branch
00026AF8 4EB9 0001 6714             		jsr	SingleObjLoad
00026AFE 6600                       		bne.s	Hurt_Shield
00026B00 0C28 0006 003B             		cmpi.b	#6,$3B(a0) ; has Sonic been hurt 6 times already?
00026B06 6700                       		beq.s	@LoadRings ; if yes, branch
00026B08 5228 003B                  		addq.b	#1,$3B(a0) ; increase the hit counter
00026B0C                            @LoadRings:
00026B0C 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
00026B10 3368 0008 0008             		move.w	8(a0),8(a1)
00026B16 3368 000C 000C             		move.w	$C(a0),$C(a1)
00026B1C                            
00026B1C                            Hurt_Shield:
00026B1C 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
00026B22 117C 0004 0024             		move.b	#4,routine(a0)
00026B28 4EB9 0001 D938             		jsr	Sonic_ResetOnFloor
00026B2E 08E8 0001 0022             		bset	#1,status(a0)
00026B34 317C FC00 0012             		move.w	#-$400,y_vel(a0)	; make Sonic bounce away from the object
00026B3A 317C FE00 0010             		move.w	#-$200,x_vel(a0)
00026B40 0828 0006 0022             		btst	#6,status(a0)
00026B46 6700                       		beq.s	Hurt_Reverse
00026B48 317C FE00 0012             		move.w	#-$200,y_vel(a0)
00026B4E 317C FF00 0010             		move.w	#-$100,x_vel(a0)
00026B54                            
00026B54                            Hurt_Reverse:
00026B54 3028 0008                  		move.w	8(a0),d0
00026B58 B06A 0008                  		cmp.w	8(a2),d0
00026B5C 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
00026B5E 4468 0010                  		neg.w	x_vel(a0)		; if Sonic is right of the object, reverse
00026B62                            
00026B62                            Hurt_ChkSpikes:
00026B62 117C 0000 0039             		move.b	#0,$39(a0)	; clear Spin Dash flag
00026B68 317C 0000 0020             		move.w	#0,inertia(a0)
00026B6E 117C 001A 001C             		move.b	#$1A,anim(a0)
00026B74 317C 0078 0030             		move.w	#$78,$30(a0)
00026B7A 317C 0000 0020             		move.w	#0,inertia(a0)
00026B80 117C 001A 001C             		move.b	#$1A,anim(a0)
00026B86 117C 0078 0030             		move.b	#$78,$30(a0)
00026B8C 303C 0035                  		move.w	#$35,d0		; load normal damage sound
00026B90 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
00026B94 6600                       		bne.s	Hurt_Sound	; if not, branch
00026B96 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
00026B9A 6600                       		bne.s	Hurt_Sound	; if not, branch
00026B9C 303C 0037                  		move.w	#$37,d0		; load spikes damage sound
00026BA0                            
00026BA0                            Hurt_Sound:
00026BA0 4EB9 0000 3212             		jsr	(PlaySound).l
00026BA6 70FF                       		moveq	#-1,d0
00026BA8 4E75                       		rts	
00026BAA                            ; ===========================================================================
00026BAA                            
00026BAA                            KillCharacter_Superrestorespeed:
00026BAA 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
00026BAE 4EB9 0001 E286             		jsr	ApplySpeedSettings	; Fetch Speed settings
00026BB4 4E75                       		rts
00026BB6                            ; End of function HurtSonic
00026BB6                            
00026BB6                            ; ---------------------------------------------------------------------------
00026BB6                            ; Subroutine to	kill Sonic
00026BB6                            ; ---------------------------------------------------------------------------
00026BB6                            
00026BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026BB6                            
00026BB6                            
00026BB6                            KillCharacter:				; CODE XREF: sub_5352+38p
00026BB6                            					; ROM:0000CF6Ap ...
00026BB6 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00026BBC 6700 0000                  		beq.w	Kill_NoDeath
00026BC0 4A78 FE08                  		tst.w	($FFFFFE08).w
00026BC4 6600 0000                  		bne.w	Kill_NoDeath
00026BC8 11FC 0001 FFC6             		move.b	#1,(sonickilled).w   ; Mark sonic as dead
00026BCE 11FC 0000 FFBE             		move.b	#0,(palcheck).w   ; Mark sonic as dead
00026BD4 4A38 FE19                  		tst.b	($FFFFFE19).w
00026BD8 6700                       		beq.s	Kill_NotSuper
00026BDA 4238 FE19                  		clr.b	($FFFFFE19).w
00026BDE 21FC 0000 0000 D004        		move.l	#Map_Sonic,(MainCharacter+mappings).w	; Load Sonic's normal mappings.
00026BE6 4EB9 0001 D478             		jsr		super_GetBgm
00026BEC 11FC 0002 F65F             		move.b    #2,($FFFFF65F).w; Remove rotating palette
00026BF2 31FC 0028 F65C             		move.w    #$28,($FFFFF65C).w; Unknown
00026BF8 11FC 0000 FE19             		move.b    #0,($FFFFFE19).w
00026BFE 117C 0001 001D             		move.b    #1,next_anim(a0); Change animation back to normal ?
00026C04 4EB9 0002 6BAA             		jsr		(KillCharacter_Superrestorespeed).l
00026C0A                            
00026C0A                            Kill_NotSuper:				; CODE XREF: sub_1F3D8+Aj
00026C0A 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w	; clear lives counter
00026C10 11FC 0000 FE1A             		move.b	#0,($FFFFFE1A).w
00026C16 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00026C1C 42B8 FE2C                  		clr.l	($FFFFFE2C).w
00026C20                            ;KillSubSRAM:
00026C20                            ;		cmpi.b #0,($FFFFFE12).w
00026C20                            ;		beq.w	KillZero
00026C20                            ;		subi.b	#$1,($200001).l
00026C20                            ;		move.b	($200001).l,($20011F).l
00026C20                            ;		subi.b	#$1,($200080).l
00026C20                            ;KillZero:
00026C20 117C 0006 0024             		move.b	#6,routine(a0)
00026C26 4EB9 0001 D938             		jsr	Sonic_ResetOnFloor
00026C2C 08E8 0001 0022             		bset	#1,status(a0)
00026C32 317C F900 0012             		move.w	#-$700,y_vel(a0)
00026C38 317C 0000 0010             		move.w	#0,x_vel(a0)
00026C3E 317C 0000 0020             		move.w	#0,inertia(a0)
00026C44 3168 000C 0038             		move.w	$C(a0),$38(a0)
00026C4A 117C 0018 001C             		move.b	#$18,anim(a0)
00026C50 08E8 0007 0002             		bset	#7,2(a0)
00026C56 303C 0035                  		move.w	#$35,d0	; '?'
00026C5A 0C12 0036                  		cmpi.b	#$36,(a2) ; '6'
00026C5E 6600                       		bne.s	loc_1F444
00026C60 303C 0037                  		move.w	#$37,d0	; '|'
00026C64                            
00026C64                            loc_1F444:				; CODE XREF: sub_1F3D8+66j
00026C64 4EB9 0000 325C             		jsr	(PlaySound_Special).l
00026C6A                            
00026C6A                            Kill_NoDeath:				; CODE XREF: sub_1F3D8+4j
00026C6A 70FF                       		moveq	#-1,d0
00026C6C 4E75                       		rts
00026C6E                            		
00026C6E                            ; End of function KillCharacter
00026C6E                            
00026C6E                            
00026C6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026C6E                            
00026C6E                            
00026C6E                            Touch_Special:				; XREF: Touch_ChkValue
00026C6E 1229 0020                  		move.b	collision_flags(a1),d1
00026C72 0201 003F                  		andi.b	#$3F,d1
00026C76 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
00026C7A 6700                       		beq.s	Touch_CatKiller	; if yes, branch
00026C7C 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
00026C80 6700                       		beq.s	Touch_Yadrin	; if yes, branch
00026C82 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
00026C86 6700                       		beq.s	Touch_D7orE1	; if yes, branch
00026C88 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
00026C8C 6700                       		beq.s	Touch_D7orE1	; if yes, branch
00026C8E 4E75                       		rts	
00026C90                            ; ===========================================================================
00026C90                            
00026C90                            Touch_CatKiller:			; XREF: Touch_Special
00026C90 6000 FE36                  		bra.w	loc_1AFDA
00026C94                            ; ===========================================================================
00026C94                            
00026C94                            Touch_Yadrin:				; XREF: Touch_Special
00026C94 9A40                       		sub.w	d0,d5
00026C96 0C45 0008                  		cmpi.w	#8,d5
00026C9A 6400                       		bcc.s	loc_1B144
00026C9C 3029 0008                  		move.w	8(a1),d0
00026CA0 5940                       		subq.w	#4,d0
00026CA2 0829 0000 0022             		btst	#0,status(a1)
00026CA8 6700                       		beq.s	loc_1B130
00026CAA 0440 0010                  		subi.w	#$10,d0
00026CAE                            
00026CAE                            loc_1B130:
00026CAE 9042                       		sub.w	d2,d0
00026CB0 6400                       		bcc.s	loc_1B13C
00026CB2 0640 0018                  		addi.w	#$18,d0
00026CB6 6500                       		bcs.s	loc_1B140
00026CB8 6000                       		bra.s	loc_1B144
00026CBA                            ; ===========================================================================
00026CBA                            
00026CBA                            loc_1B13C:
00026CBA B044                       		cmp.w	d4,d0
00026CBC 6200                       		bhi.s	loc_1B144
00026CBE                            
00026CBE                            loc_1B140:
00026CBE 6000 FE0E                  		bra.w	Touch_ChkHurt
00026CC2                            ; ===========================================================================
00026CC2                            
00026CC2                            loc_1B144:
00026CC2 6000 FD06                  		bra.w	Touch_Enemy
00026CC6                            ; ===========================================================================
00026CC6                            
00026CC6                            Touch_D7orE1:				; XREF: Touch_Special
00026CC6 5229 0021                  		addq.b	#1,collision_property(a1)
00026CCA 4E75                       		rts	
00026CCC                            ; End of function Touch_Special
00026CCC                            
00026CCC                            ; ---------------------------------------------------------------------------
00026CCC                            ; Subroutine to	show the special stage layout
00026CCC                            ; ---------------------------------------------------------------------------
00026CCC                            
00026CCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026CCC                            
00026CCC                            
00026CCC                            SS_ShowLayout:				; XREF: SpecialStage
00026CCC 4EB9 0000 0000             		jsr	SS_AniWallsRings
00026CD2 4EB9 0000 0000             		jsr	SS_AniItems
00026CD8 3F05                       		move.w	d5,-(sp)
00026CDA 43F8 8000                  		lea	($FFFF8000).w,a1
00026CDE 1038 F780                  		move.b	($FFFFF780).w,d0
00026CE2                            ;		andi.b	#$FC,d0
00026CE2 4EB9 0000 8DA4             		jsr	(CalcSine).l
00026CE8 3800                       		move.w	d0,d4
00026CEA 3A01                       		move.w	d1,d5
00026CEC C9FC 0018                  		muls.w	#$18,d4
00026CF0 CBFC 0018                  		muls.w	#$18,d5
00026CF4 7400                       		moveq	#0,d2
00026CF6 3438 F700                  		move.w	($FFFFF700).w,d2
00026CFA 84FC 0018                  		divu.w	#$18,d2
00026CFE 4842                       		swap	d2
00026D00 4442                       		neg.w	d2
00026D02 0642 FF4C                  		addi.w	#-$B4,d2
00026D06 7600                       		moveq	#0,d3
00026D08 3638 F704                  		move.w	($FFFFF704).w,d3
00026D0C 86FC 0018                  		divu.w	#$18,d3
00026D10 4843                       		swap	d3
00026D12 4443                       		neg.w	d3
00026D14 0643 FF4C                  		addi.w	#-$B4,d3
00026D18 3E3C 000F                  		move.w	#$F,d7
00026D1C                            
00026D1C                            loc_1B19E:
00026D1C 48A7 E000                  		movem.w	d0-d2,-(sp)
00026D20 48A7 C000                  		movem.w	d0-d1,-(sp)
00026D24 4440                       		neg.w	d0
00026D26 C3C2                       		muls.w	d2,d1
00026D28 C1C3                       		muls.w	d3,d0
00026D2A 2C00                       		move.l	d0,d6
00026D2C DC81                       		add.l	d1,d6
00026D2E 4C9F 0003                  		movem.w	(sp)+,d0-d1
00026D32 C1C2                       		muls.w	d2,d0
00026D34 C3C3                       		muls.w	d3,d1
00026D36 D280                       		add.l	d0,d1
00026D38 2406                       		move.l	d6,d2
00026D3A 3C3C 000F                  		move.w	#$F,d6
00026D3E                            
00026D3E                            loc_1B1C0:
00026D3E 2002                       		move.l	d2,d0
00026D40 E080                       		asr.l	#8,d0
00026D42 32C0                       		move.w	d0,(a1)+
00026D44 2001                       		move.l	d1,d0
00026D46 E080                       		asr.l	#8,d0
00026D48 32C0                       		move.w	d0,(a1)+
00026D4A D485                       		add.l	d5,d2
00026D4C D284                       		add.l	d4,d1
00026D4E 51CE FFEE                  		dbf	d6,loc_1B1C0
00026D52                            
00026D52 4C9F 0007                  		movem.w	(sp)+,d0-d2
00026D56 0643 0018                  		addi.w	#$18,d3
00026D5A 51CF FFC0                  		dbf	d7,loc_1B19E
00026D5E                            
00026D5E 3A1F                       		move.w	(sp)+,d5
00026D60 41F9 00FF 0000             		lea	($FF0000).l,a0
00026D66 7000                       		moveq	#0,d0
00026D68 3038 F704                  		move.w	($FFFFF704).w,d0
00026D6C 80FC 0018                  		divu.w	#$18,d0
00026D70 C0FC 0080                  		mulu.w	#$80,d0
00026D74 D1C0                       		adda.l	d0,a0
00026D76 7000                       		moveq	#0,d0
00026D78 3038 F700                  		move.w	($FFFFF700).w,d0
00026D7C 80FC 0018                  		divu.w	#$18,d0
00026D80 D0C0                       		adda.w	d0,a0
00026D82 49F8 8000                  		lea	($FFFF8000).w,a4
00026D86 3E3C 000F                  		move.w	#$F,d7
00026D8A                            
00026D8A                            loc_1B20C:
00026D8A 3C3C 000F                  		move.w	#$F,d6
00026D8E                            
00026D8E                            loc_1B210:
00026D8E 7000                       		moveq	#0,d0
00026D90 1018                       		move.b	(a0)+,d0
00026D92 6700                       		beq.s	loc_1B268
00026D94 0C00 004E                  		cmpi.b	#$4E,d0
00026D98 6200                       		bhi.s	loc_1B268
00026D9A 3614                       		move.w	(a4),d3
00026D9C 0643 0120                  		addi.w	#$120,d3
00026DA0 0C43 0070                  		cmpi.w	#$70,d3
00026DA4 6500                       		bcs.s	loc_1B268
00026DA6 0C43 01D0                  		cmpi.w	#$1D0,d3
00026DAA 6400                       		bcc.s	loc_1B268
00026DAC 342C 0002                  		move.w	2(a4),d2
00026DB0 0642 00F0                  		addi.w	#$F0,d2
00026DB4 0C42 0070                  		cmpi.w	#$70,d2
00026DB8 6500                       		bcs.s	loc_1B268
00026DBA 0C42 0170                  		cmpi.w	#$170,d2
00026DBE 6400                       		bcc.s	loc_1B268
00026DC0 4BF9 00FF 4000             		lea	($FF4000).l,a5
00026DC6 E748                       		lsl.w	#3,d0
00026DC8 4BF5 0000                  		lea	(a5,d0.w),a5
00026DCC 225D                       		movea.l	(a5)+,a1
00026DCE 321D                       		move.w	(a5)+,d1
00026DD0 D241                       		add.w	d1,d1
00026DD2 D2F1 1000                  		adda.w	(a1,d1.w),a1
00026DD6 365D                       		movea.w	(a5)+,a3
00026DD8 7200                       		moveq	#0,d1
00026DDA 1219                       		move.b	(a1)+,d1
00026DDC 5301                       		subq.b	#1,d1
00026DDE 6B00                       		bmi.s	loc_1B268
00026DE0 4EB9 0001 5EA4             		jsr	sub_D762
00026DE6                            
00026DE6                            loc_1B268:
00026DE6 584C                       		addq.w	#4,a4
00026DE8 51CE FFA4                  		dbf	d6,loc_1B210
00026DEC                            
00026DEC 41E8 0070                  		lea	$70(a0),a0
00026DF0 51CF FF98                  		dbf	d7,loc_1B20C
00026DF4                            
00026DF4 11C5 F62C                  		move.b	d5,($FFFFF62C).w
00026DF8 0C05 0050                  		cmpi.b	#$50,d5
00026DFC 6700                       		beq.s	loc_1B288
00026DFE 24BC 0000 0000             		move.l	#0,(a2)
00026E04 4E75                       		rts	
00026E06                            ; ===========================================================================
00026E06                            
00026E06                            loc_1B288:
00026E06 157C 0000 FFFB             		move.b	#0,-5(a2)
00026E0C 4E75                       		rts	
00026E0E                            ; End of function SS_ShowLayout
00026E0E                            
00026E0E                            ; ---------------------------------------------------------------------------
00026E0E                            ; Subroutine to	animate	walls and rings	in the special stage
00026E0E                            ; ---------------------------------------------------------------------------
00026E0E                            
00026E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026E0E                            
00026E0E                            
00026E0E                            SS_AniWallsRings:			; XREF: SS_ShowLayout
00026E0E                            ;		lea	($FF400C).l,a1
00026E0E                            ;		moveq	#0,d0
00026E0E                            ;		move.b	($FFFFF780).w,d0
00026E0E                            ;		lsr.b	#2,d0
00026E0E                            ;		andi.w	#$F,d0
00026E0E                            ;		moveq	#$23,d1
00026E0E                            
00026E0E                            ;loc_1B2A4:
00026E0E                            ;		move.w	d0,(a1)
00026E0E                            ;		addq.w	#8,a1
00026E0E                            ;		dbf	d1,loc_1B2A4
00026E0E                            
00026E0E 43F9 00FF 4005             		lea	($FF4005).l,a1
00026E14 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00026E18 6A00                       		bpl.s	loc_1B2C8
00026E1A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00026E20 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00026E24 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00026E2A                            
00026E2A                            loc_1B2C8:
00026E2A 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
00026E30 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00026E34 6A00                       		bpl.s	loc_1B2E4
00026E36 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00026E3C 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00026E40 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
00026E46                            
00026E46                            loc_1B2E4:
00026E46 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
00026E4A 1340 0138                  		move.b	d0,$138(a1)
00026E4E 1340 0160                  		move.b	d0,$160(a1)
00026E52 1340 0148                  		move.b	d0,$148(a1)
00026E56 1340 0150                  		move.b	d0,$150(a1)
00026E5A 1340 01D8                  		move.b	d0,$1D8(a1)
00026E5E 1340 01E0                  		move.b	d0,$1E0(a1)
00026E62 1340 01E8                  		move.b	d0,$1E8(a1)
00026E66 1340 01F0                  		move.b	d0,$1F0(a1)
00026E6A 1340 01F8                  		move.b	d0,$1F8(a1)
00026E6E 1340 0200                  		move.b	d0,$200(a1)
00026E72 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00026E76 6A00                       		bpl.s	loc_1B326
00026E78 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
00026E7E 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
00026E82 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
00026E88                            
00026E88                            loc_1B326:
00026E88 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
00026E8C 1340 0168                  		move.b	d0,$168(a1)
00026E90 1340 0170                  		move.b	d0,$170(a1)
00026E94 1340 0178                  		move.b	d0,$178(a1)
00026E98 1340 0180                  		move.b	d0,$180(a1)
00026E9C 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00026EA0 6A00                       		bpl.s	loc_1B350
00026EA2 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
00026EA8 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00026EAC 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00026EB2                            
00026EB2                            loc_1B350:
00026EB2 43F9 00FF 4016             		lea	($FF4016).l,a1
00026EB8 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
00026EBE 7000                       		moveq	#0,d0
00026EC0 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00026EC4 D040                       		add.w	d0,d0
00026EC6 41F0 0000                  		lea	(a0,d0.w),a0
00026ECA 3290                       		move.w	(a0),(a1)
00026ECC 3368 0002 0008             		move.w	2(a0),8(a1)
00026ED2 3368 0004 0010             		move.w	4(a0),$10(a1)
00026ED8 3368 0006 0018             		move.w	6(a0),priority(a1)
00026EDE 3368 0008 0020             		move.w	8(a0),$20(a1)
00026EE4 3368 000A 0028             		move.w	$A(a0),$28(a1)
00026EEA 3368 000C 0030             		move.w	$C(a0),$30(a1)
00026EF0 3368 000E 0038             		move.w	$E(a0),$38(a1)
00026EF6 D0FC 0020                  		adda.w	#$20,a0
00026EFA D2FC 0048                  		adda.w	#$48,a1
00026EFE 3290                       		move.w	(a0),(a1)
00026F00 3368 0002 0008             		move.w	2(a0),8(a1)
00026F06 3368 0004 0010             		move.w	4(a0),$10(a1)
00026F0C 3368 0006 0018             		move.w	6(a0),priority(a1)
00026F12 3368 0008 0020             		move.w	8(a0),$20(a1)
00026F18 3368 000A 0028             		move.w	$A(a0),$28(a1)
00026F1E 3368 000C 0030             		move.w	$C(a0),$30(a1)
00026F24 3368 000E 0038             		move.w	$E(a0),$38(a1)
00026F2A D0FC 0020                  		adda.w	#$20,a0
00026F2E D2FC 0048                  		adda.w	#$48,a1
00026F32 3290                       		move.w	(a0),(a1)
00026F34 3368 0002 0008             		move.w	2(a0),8(a1)
00026F3A 3368 0004 0010             		move.w	4(a0),$10(a1)
00026F40 3368 0006 0018             		move.w	6(a0),priority(a1)
00026F46 3368 0008 0020             		move.w	8(a0),$20(a1)
00026F4C 3368 000A 0028             		move.w	$A(a0),$28(a1)
00026F52 3368 000C 0030             		move.w	$C(a0),$30(a1)
00026F58 3368 000E 0038             		move.w	$E(a0),$38(a1)
00026F5E D0FC 0020                  		adda.w	#$20,a0
00026F62 D2FC 0048                  		adda.w	#$48,a1
00026F66 3290                       		move.w	(a0),(a1)
00026F68 3368 0002 0008             		move.w	2(a0),8(a1)
00026F6E 3368 0004 0010             		move.w	4(a0),$10(a1)
00026F74 3368 0006 0018             		move.w	6(a0),priority(a1)
00026F7A 3368 0008 0020             		move.w	8(a0),$20(a1)
00026F80 3368 000A 0028             		move.w	$A(a0),$28(a1)
00026F86 3368 000C 0030             		move.w	$C(a0),$30(a1)
00026F8C 3368 000E 0038             		move.w	$E(a0),$38(a1)
00026F92 D0FC 0020                  		adda.w	#$20,a0
00026F96 D2FC 0048                  		adda.w	#$48,a1
00026F9A 4E75                       		rts	
00026F9C                            ; End of function SS_AniWallsRings
00026F9C                            
00026F9C                            SS_LoadWalls:
00026F9C 7000                       		moveq	#0,d0
00026F9E 1038 F780                  		move.b	(v_ssangle).w,d0	; get the Special Stage angle
00026FA2 E408                       		lsr.b	#2,d0			; modify so it can be used as a frame ID
00026FA4 0240 000F                  		andi.w	#$F,d0
00026FA8 B038 F784                  		cmp.b	(v_ssangleprev).w,d0	; does the modified angle match the recorded value?
00026FAC 6700                       		beq.s	@return			; if so, branch
00026FAE                            	
00026FAE 4DF9 00C0 0000             		lea	($C00000).l,a6
00026FB4 43F9 0000 0000             		lea	(Art_SSWalls).l,a1	; load wall art
00026FBA 3200                       		move.w	d0,d1
00026FBC E149                       		lsl.w	#8,d1
00026FBE D241                       		add.w	d1,d1
00026FC0 D2C1                       		add.w	d1,a1
00026FC2                            		
00026FC2 23FC 6840 0000 00C0 0004   		move.l  #$68400000,($C00004).l			; VRAM address
00026FCC                            		
00026FCC 323C 000F                  		move.w	#$F,d1			; number of 8x8 tiles
00026FD0 4EB9 0000 0000             		jsr	LoadTiles
00026FD6 11C0 F784                  		move.b	d0,(v_ssangleprev).w	; record the modified angle for comparison
00026FDA                            		
00026FDA                            	@return:
00026FDA 4E75                       		rts
00026FDC                            
00026FDC                            ; ===========================================================================
00026FDC 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
00026FEC 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
00026FFC 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0002700C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0002701C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0002702C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0002703C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0002704C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0002705C                            ; ---------------------------------------------------------------------------
0002705C                            ; Subroutine to	remove items when you collect them in the special stage
0002705C                            ; ---------------------------------------------------------------------------
0002705C                            
0002705C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002705C                            
0002705C                            
0002705C                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0002705C 45F9 00FF 4400             		lea	($FF4400).l,a2
00027062 303C 001F                  		move.w	#$1F,d0
00027066                            
00027066                            loc_1B4C4:
00027066 4A12                       		tst.b	(a2)
00027068 6700                       		beq.s	locret_1B4CE
0002706A 504A                       		addq.w	#8,a2
0002706C 51C8 FFF8                  		dbf	d0,loc_1B4C4
00027070                            
00027070                            locret_1B4CE:
00027070 4E75                       		rts	
00027072                            ; End of function SS_RemoveCollectedItem
00027072                            
00027072                            
00027072                            
00027072                            ; ---------------------------------------------------------------------------
00027072                            ; Subroutine to	animate	special	stage items when you touch them
00027072                            ; ---------------------------------------------------------------------------
00027072                            
00027072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027072                            
00027072                            
00027072                            SS_AniItems:				; XREF: SS_ShowLayout
00027072 41F9 00FF 4400             		lea	($FF4400).l,a0
00027078 3E3C 001F                  		move.w	#$1F,d7
0002707C                            
0002707C                            loc_1B4DA:
0002707C 7000                       		moveq	#0,d0
0002707E 1010                       		move.b	(a0),d0
00027080 6700                       		beq.s	loc_1B4E8
00027082 E548                       		lsl.w	#2,d0
00027084 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
00027088 4E91                       		jsr	(a1)
0002708A                            
0002708A                            loc_1B4E8:
0002708A 5048                       		addq.w	#8,a0
0002708C                            
0002708C                            loc_1B4EA:
0002708C 51CF FFEE                  		dbf	d7,loc_1B4DA
00027090                            
00027090 4E75                       		rts	
00027092                            ; End of function SS_AniItems
00027092                            
00027092                            ; ===========================================================================
00027092 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
00027096 0000 0000                  		dc.l SS_AniBumper
0002709A 0000 0000                  		dc.l SS_Ani1Up
0002709E 0000 0000                  		dc.l SS_AniReverse
000270A2 0000 0000                  		dc.l SS_AniEmeraldSparks
000270A6 0000 0000                  		dc.l SS_AniGlassBlock
000270AA                            ; ===========================================================================
000270AA                            
000270AA                            SS_AniRingSparks:			; XREF: SS_AniIndex
000270AA 5328 0002                  		subq.b	#1,2(a0)
000270AE 6A00                       		bpl.s	locret_1B530
000270B0 117C 0005 0002             		move.b	#5,2(a0)
000270B6 7000                       		moveq	#0,d0
000270B8 1028 0003                  		move.b	3(a0),d0
000270BC 5228 0003                  		addq.b	#1,3(a0)
000270C0 2268 0004                  		movea.l	4(a0),a1
000270C4 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
000270C8 1280                       		move.b	d0,(a1)
000270CA 6600                       		bne.s	locret_1B530
000270CC 4290                       		clr.l	(a0)
000270CE 42A8 0004                  		clr.l	4(a0)
000270D2                            
000270D2                            locret_1B530:
000270D2 4E75                       		rts	
000270D4                            ; ===========================================================================
000270D4 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
000270DA                            ; ===========================================================================
000270DA                            
000270DA                            SS_AniBumper:				; XREF: SS_AniIndex
000270DA 5328 0002                  		subq.b	#1,2(a0)
000270DE 6A00                       		bpl.s	locret_1B566
000270E0 117C 0007 0002             		move.b	#7,2(a0)
000270E6 7000                       		moveq	#0,d0
000270E8 1028 0003                  		move.b	3(a0),d0
000270EC 5228 0003                  		addq.b	#1,3(a0)
000270F0 2268 0004                  		movea.l	4(a0),a1
000270F4 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
000270F8 6600                       		bne.s	loc_1B564
000270FA 4290                       		clr.l	(a0)
000270FC 42A8 0004                  		clr.l	4(a0)
00027100 12BC 0025                  		move.b	#$25,(a1)
00027104 4E75                       		rts	
00027106                            ; ===========================================================================
00027106                            
00027106                            loc_1B564:
00027106 1280                       		move.b	d0,(a1)
00027108                            
00027108                            locret_1B566:
00027108 4E75                       		rts	
0002710A                            ; ===========================================================================
0002710A 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
00027110                            ; ===========================================================================
00027110                            
00027110                            SS_Ani1Up:				; XREF: SS_AniIndex
00027110 5328 0002                  		subq.b	#1,2(a0)
00027114 6A00                       		bpl.s	locret_1B596
00027116 117C 0005 0002             		move.b	#5,2(a0)
0002711C 7000                       		moveq	#0,d0
0002711E 1028 0003                  		move.b	3(a0),d0
00027122 5228 0003                  		addq.b	#1,3(a0)
00027126 2268 0004                  		movea.l	4(a0),a1
0002712A 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0002712E 1280                       		move.b	d0,(a1)
00027130 6600                       		bne.s	locret_1B596
00027132 4290                       		clr.l	(a0)
00027134 42A8 0004                  		clr.l	4(a0)
00027138                            
00027138                            locret_1B596:
00027138 4E75                       		rts	
0002713A                            ; ===========================================================================
0002713A 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
00027140                            ; ===========================================================================
00027140                            
00027140                            SS_AniReverse:				; XREF: SS_AniIndex
00027140 5328 0002                  		subq.b	#1,2(a0)
00027144 6A00                       		bpl.s	locret_1B5CC
00027146 117C 0007 0002             		move.b	#7,2(a0)
0002714C 7000                       		moveq	#0,d0
0002714E 1028 0003                  		move.b	3(a0),d0
00027152 5228 0003                  		addq.b	#1,3(a0)
00027156 2268 0004                  		movea.l	4(a0),a1
0002715A 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0002715E 6600                       		bne.s	loc_1B5CA
00027160 4290                       		clr.l	(a0)
00027162 42A8 0004                  		clr.l	4(a0)
00027166 12BC 002B                  		move.b	#$2B,(a1)
0002716A 4E75                       		rts	
0002716C                            ; ===========================================================================
0002716C                            
0002716C                            loc_1B5CA:
0002716C 1280                       		move.b	d0,(a1)
0002716E                            
0002716E                            locret_1B5CC:
0002716E 4E75                       		rts	
00027170                            ; ===========================================================================
00027170 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
00027176                            ; ===========================================================================
00027176                            
00027176                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
00027176 5328 0002                  		subq.b	#1,2(a0)
0002717A 6A00                       		bpl.s	locret_1B60C
0002717C 117C 0005 0002             		move.b	#5,2(a0)
00027182 7000                       		moveq	#0,d0
00027184 1028 0003                  		move.b	3(a0),d0
00027188 5228 0003                  		addq.b	#1,3(a0)
0002718C 2268 0004                  		movea.l	4(a0),a1
00027190 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
00027194 1280                       		move.b	d0,(a1)
00027196 6600                       		bne.s	locret_1B60C
00027198 4290                       		clr.l	(a0)
0002719A 42A8 0004                  		clr.l	4(a0)
0002719E 11FC 0004 D024             		move.b	#4,($FFFFD024).w
000271A4 303C 006A                  		move.w	#$6A,d0
000271A8 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
000271AE                            
000271AE                            locret_1B60C:
000271AE 4E75                       		rts	
000271B0                            ; ===========================================================================
000271B0 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
000271B6                            ; ===========================================================================
000271B6                            
000271B6                            SS_AniGlassBlock:			; XREF: SS_AniIndex
000271B6 5328 0002                  		subq.b	#1,2(a0)
000271BA 6A00                       		bpl.s	locret_1B640
000271BC 117C 0001 0002             		move.b	#1,2(a0)
000271C2 7000                       		moveq	#0,d0
000271C4 1028 0003                  		move.b	3(a0),d0
000271C8 5228 0003                  		addq.b	#1,3(a0)
000271CC 2268 0004                  		movea.l	4(a0),a1
000271D0 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
000271D4 1280                       		move.b	d0,(a1)
000271D6 6600                       		bne.s	locret_1B640
000271D8 12A8 0004                  		move.b	4(a0),(a1)
000271DC 4290                       		clr.l	(a0)
000271DE 42A8 0004                  		clr.l	4(a0)
000271E2                            
000271E2                            locret_1B640:
000271E2 4E75                       		rts	
000271E4                            ; ===========================================================================
000271E4 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
000271EE                            ; ---------------------------------------------------------------------------
000271EE                            ; Special stage	layout pointers
000271EE                            ; ---------------------------------------------------------------------------
000271EE                            SS_LayoutIndex:
000271EE                            	include "_inc\Special stage layout pointers.asm"
000271EE                            ; ---------------------------------------------------------------------------
000271EE                            ; Special stage	layout pointers
000271EE                            ; ---------------------------------------------------------------------------
000271EE 0000 0000                  	dc.l SS_1
000271F2 0000 0000                  	dc.l SS_2
000271F6 0000 0000                  	dc.l SS_3
000271FA 0000 0000                  	dc.l SS_4
000271FE 0000 0000                  	dc.l SS_5
00027202 0000 0000                  	dc.l SS_6
00027206 0000 0000                  	dc.l SS_7	
0002720A                            	even
0002720A                            	even
0002720A                            
0002720A                            ; ---------------------------------------------------------------------------
0002720A                            ; Special stage	start locations
0002720A                            ; ---------------------------------------------------------------------------
0002720A                            SS_StartLoc:	incbin	misc\sloc_ss.bin
00027222                            		even
00027222                            
00027222                            ; ---------------------------------------------------------------------------
00027222                            ; Subroutine to	load special stage layout
00027222                            ; ---------------------------------------------------------------------------
00027222                            
00027222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027222                            
00027222                            
00027222                            SS_Load:				; XREF: SpecialStage
00027222 7000                       		moveq	#0,d0
00027224 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
00027228 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0002722C 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
00027232 6500                       		bcs.s	SS_ChkEmldNum
00027234 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0002723A                            
0002723A                            SS_ChkEmldNum:
0002723A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
00027240 6700                       		beq.s	SS_LoadData	; if yes, branch
00027242 7200                       		moveq	#0,d1
00027244 1238 FE57                  		move.b	($FFFFFE57).w,d1
00027248 5301                       		subq.b	#1,d1
0002724A 6500                       		bcs.s	SS_LoadData
0002724C 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
00027250                            
00027250                            SS_ChkEmldLoop:	
00027250 B033 1000                  		cmp.b	(a3,d1.w),d0
00027254 6600                       		bne.s	SS_ChkEmldRepeat
00027256 60CA                       		bra.s	SS_Load
00027258                            ; ===========================================================================
00027258                            
00027258                            SS_ChkEmldRepeat:
00027258 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0002725C                            
0002725C                            SS_LoadData:
0002725C E548                       		lsl.w	#2,d0
0002725E 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
00027262 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
00027266 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0002726A 207B 0082                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0002726E 43F9 00FF 4000             		lea	($FF4000).l,a1
00027274 303C 0000                  		move.w	#0,d0
00027278 4EB9 0000 389E             		jsr	(EniDec).l
0002727E 43F9 00FF 0000             		lea	($FF0000).l,a1
00027284 303C 0FFF                  		move.w	#$FFF,d0
00027288                            
00027288                            SS_ClrRAM3:
00027288 4299                       		clr.l	(a1)+
0002728A 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0002728E                            
0002728E 43F9 00FF 1020             		lea	($FF1020).l,a1
00027294 41F9 00FF 4000             		lea	($FF4000).l,a0
0002729A 723F                       		moveq	#$3F,d1
0002729C                            
0002729C                            loc_1B6F6:
0002729C 743F                       		moveq	#$3F,d2
0002729E                            
0002729E                            loc_1B6F8:
0002729E 12D8                       		move.b	(a0)+,(a1)+
000272A0 51CA FFFC                  		dbf	d2,loc_1B6F8
000272A4                            
000272A4 43E9 0040                  		lea	object_size(a1),a1
000272A8 51C9 FFF2                  		dbf	d1,loc_1B6F6
000272AC                            
000272AC 43F9 00FF 4008             		lea	($FF4008).l,a1
000272B2 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
000272B8 724D                       		moveq	#$4D,d1
000272BA                            
000272BA                            loc_1B714:
000272BA 22D8                       		move.l	(a0)+,(a1)+
000272BC 32FC 0000                  		move.w	#0,(a1)+
000272C0 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
000272C6 32D8                       		move.w	(a0)+,(a1)+
000272C8 51C9 FFF0                  		dbf	d1,loc_1B714
000272CC                            
000272CC 43F9 00FF 4400             		lea	($FF4400).l,a1
000272D2 323C 003F                  		move.w	#$3F,d1
000272D6                            
000272D6                            loc_1B730:
000272D6                            
000272D6 4299                       		clr.l	(a1)+
000272D8 51C9 FFFC                  		dbf	d1,loc_1B730
000272DC                            
000272DC 4E75                       		rts	
000272DE                            ; End of function SS_Load
000272DE                            
000272DE                            ; ===========================================================================
000272DE                            ; ---------------------------------------------------------------------------
000272DE                            ; Special stage	mappings and VRAM pointers
000272DE                            ; ---------------------------------------------------------------------------
000272DE                            SS_MapIndex:
000272DE                            	include "_inc\Special stage mappings and VRAM pointers.asm"
000272DE                            ; ---------------------------------------------------------------------------
000272DE                            ; Special stage	mappings and VRAM pointers
000272DE                            ; ---------------------------------------------------------------------------
000272DE 0000 0000                  	dc.l Map_SSWalls	; address of mappings
000272E2 0142                       	dc.w $142		; VRAM setting
000272E4 0000 0000                  	dc.l Map_SSWalls
000272E8 0142                       	dc.w $142
000272EA 0000 0000                  	dc.l Map_SSWalls
000272EE 0142                       	dc.w $142
000272F0 0000 0000                  	dc.l Map_SSWalls
000272F4 0142                       	dc.w $142
000272F6 0000 0000                  	dc.l Map_SSWalls
000272FA 0142                       	dc.w $142
000272FC 0000 0000                  	dc.l Map_SSWalls
00027300 0142                       	dc.w $142
00027302 0000 0000                  	dc.l Map_SSWalls
00027306 0142                       	dc.w $142
00027308 0000 0000                  	dc.l Map_SSWalls
0002730C 0142                       	dc.w $142
0002730E 0000 0000                  	dc.l Map_SSWalls
00027312 0142                       	dc.w $142
00027314 0000 0000                  	dc.l Map_SSWalls
00027318 2142                       	dc.w $2142
0002731A 0000 0000                  	dc.l Map_SSWalls
0002731E 2142                       	dc.w $2142
00027320 0000 0000                  	dc.l Map_SSWalls
00027324 2142                       	dc.w $2142
00027326 0000 0000                  	dc.l Map_SSWalls
0002732A 2142                       	dc.w $2142
0002732C 0000 0000                  	dc.l Map_SSWalls
00027330 2142                       	dc.w $2142
00027332 0000 0000                  	dc.l Map_SSWalls
00027336 2142                       	dc.w $2142
00027338 0000 0000                  	dc.l Map_SSWalls
0002733C 2142                       	dc.w $2142
0002733E 0000 0000                  	dc.l Map_SSWalls
00027342 2142                       	dc.w $2142
00027344 0000 0000                  	dc.l Map_SSWalls
00027348 2142                       	dc.w $2142
0002734A 0000 0000                  	dc.l Map_SSWalls
0002734E 4142                       	dc.w $4142
00027350 0000 0000                  	dc.l Map_SSWalls
00027354 4142                       	dc.w $4142
00027356 0000 0000                  	dc.l Map_SSWalls
0002735A 4142                       	dc.w $4142
0002735C 0000 0000                  	dc.l Map_SSWalls
00027360 4142                       	dc.w $4142
00027362 0000 0000                  	dc.l Map_SSWalls
00027366 4142                       	dc.w $4142
00027368 0000 0000                  	dc.l Map_SSWalls
0002736C 4142                       	dc.w $4142
0002736E 0000 0000                  	dc.l Map_SSWalls
00027372 4142                       	dc.w $4142
00027374 0000 0000                  	dc.l Map_SSWalls
00027378 4142                       	dc.w $4142
0002737A 0000 0000                  	dc.l Map_SSWalls
0002737E 4142                       	dc.w $4142
00027380 0000 0000                  	dc.l Map_SSWalls
00027384 6142                       	dc.w $6142
00027386 0000 0000                  	dc.l Map_SSWalls
0002738A 6142                       	dc.w $6142
0002738C 0000 0000                  	dc.l Map_SSWalls
00027390 6142                       	dc.w $6142
00027392 0000 0000                  	dc.l Map_SSWalls
00027396 6142                       	dc.w $6142
00027398 0000 0000                  	dc.l Map_SSWalls
0002739C 6142                       	dc.w $6142
0002739E 0000 0000                  	dc.l Map_SSWalls
000273A2 6142                       	dc.w $6142
000273A4 0000 0000                  	dc.l Map_SSWalls
000273A8 6142                       	dc.w $6142
000273AA 0000 0000                  	dc.l Map_SSWalls
000273AE 6142                       	dc.w $6142
000273B0 0000 0000                  	dc.l Map_SSWalls
000273B4 6142                       	dc.w $6142
000273B6 0001 7CCE                  	dc.l Map_obj47
000273BA 023B                       	dc.w $23B
000273BC 0000 0000                  	dc.l Map_SS_R
000273C0 0570                       	dc.w $570
000273C2 0000 0000                  	dc.l Map_SS_R
000273C6 0251                       	dc.w $251
000273C8 0000 0000                  	dc.l Map_SS_R
000273CC 0370                       	dc.w $370
000273CE 0000 0000                  	dc.l Map_SS_Up
000273D2 0263                       	dc.w $263
000273D4 0000 0000                  	dc.l Map_SS_Down
000273D8 0263                       	dc.w $263
000273DA 0000 0000                  	dc.l Map_SS_R
000273DE 22F0                       	dc.w $22F0
000273E0 0000 0000                  	dc.l Map_SS_Glass
000273E4 0470                       	dc.w $470
000273E6 0000 0000                  	dc.l Map_SS_Glass
000273EA 05F0                       	dc.w $5F0
000273EC 0000 0000                  	dc.l Map_SS_Glass
000273F0 65F0                       	dc.w $65F0
000273F2 0000 0000                  	dc.l Map_SS_Glass
000273F6 25F0                       	dc.w $25F0
000273F8 0000 0000                  	dc.l Map_SS_Glass
000273FC 45F0                       	dc.w $45F0
000273FE 0000 0000                  	dc.l Map_SS_R
00027402 02F0                       	dc.w $2F0
00027404 0101 7CCE                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
00027408 023B                       	dc.w $23B
0002740A 0201 7CCE                  	dc.l Map_obj47+$2000000
0002740E 023B                       	dc.w $23B
00027410 0000 0000                  	dc.l Map_SS_R
00027414 0797                       	dc.w $797
00027416 0000 0000                  	dc.l Map_SS_R
0002741A 07A0                       	dc.w $7A0
0002741C 0000 0000                  	dc.l Map_SS_R
00027420 07A9                       	dc.w $7A9
00027422 0000 0000                  	dc.l Map_SS_R
00027426 0797                       	dc.w $797
00027428 0000 0000                  	dc.l Map_SS_R
0002742C 07A0                       	dc.w $7A0
0002742E 0000 0000                  	dc.l Map_SS_R
00027432 07A9                       	dc.w $7A9
00027434 0001 1D18                  	dc.l Map_obj25
00027438 27B2                       	dc.w $27B2
0002743A 0000 0000                  	dc.l Map_SS_Chaos3
0002743E 0770                       	dc.w $770
00027440 0000 0000                  	dc.l Map_SS_Chaos3
00027444 2770                       	dc.w $2770
00027446 0000 0000                  	dc.l Map_SS_Chaos3
0002744A 4770                       	dc.w $4770
0002744C 0000 0000                  	dc.l Map_SS_Chaos3
00027450 6770                       	dc.w $6770
00027452 0000 0000                  	dc.l Map_SS_Chaos1
00027456 0770                       	dc.w $770
00027458 0000 0000                  	dc.l Map_SS_Chaos2
0002745C 0770                       	dc.w $770
0002745E 0000 0000                  	dc.l Map_SS_R
00027462 04F0                       	dc.w $4F0
00027464 0401 1D18                  	dc.l Map_obj25+$4000000
00027468 27B2                       	dc.w $27B2
0002746A 0501 1D18                  	dc.l Map_obj25+$5000000
0002746E 27B2                       	dc.w $27B2
00027470 0601 1D18                  	dc.l Map_obj25+$6000000
00027474 27B2                       	dc.w $27B2
00027476 0701 1D18                  	dc.l Map_obj25+$7000000
0002747A 27B2                       	dc.w $27B2
0002747C 0000 0000                  	dc.l Map_SS_Glass
00027480 23F0                       	dc.w $23F0
00027482 0000 0000                  	dc.l Map_SS_Glass+$1000000
00027486 23F0                       	dc.w $23F0
00027488 0000 0000                  	dc.l Map_SS_Glass+$2000000
0002748C 23F0                       	dc.w $23F0
0002748E 0000 0000                  	dc.l Map_SS_Glass+$3000000
00027492 23F0                       	dc.w $23F0
00027494 0000 0000                  	dc.l Map_SS_R+$2000000
00027498 04F0                       	dc.w $4F0
0002749A 0000 0000                  	dc.l Map_SS_Glass
0002749E 05F0                       	dc.w $5F0
000274A0 0000 0000                  	dc.l Map_SS_Glass
000274A4 65F0                       	dc.w $65F0
000274A6 0000 0000                  	dc.l Map_SS_Glass
000274AA 25F0                       	dc.w $25F0
000274AC 0000 0000                  	dc.l Map_SS_Glass
000274B0 45F0                       	dc.w $45F0
000274B0 45F0                       	dc.w $45F0
000274B2                            
000274B2                            ; ---------------------------------------------------------------------------
000274B2                            ; Sprite mappings - special stage "R" block
000274B2                            ; ---------------------------------------------------------------------------
000274B2                            Map_SS_R:
000274B2                            	include "_maps\SSRblock.asm"
000274B2                            ; ---------------------------------------------------------------------------
000274B2                            ; Sprite mappings - special stage "R" block
000274B2                            ; ---------------------------------------------------------------------------
000274B2 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
000274B6 0000                       		dc.w byte_1B91E-Map_SS_R
000274B8 01                         byte_1B912:	dc.b 1
000274B9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000274BE 01                         byte_1B918:	dc.b 1
000274BF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000274C4 00                         byte_1B91E:	dc.b 0
000274C6 00                         		even
000274C6 00                         		even
000274C6                            
000274C6                            ; ---------------------------------------------------------------------------
000274C6                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
000274C6                            ; ---------------------------------------------------------------------------
000274C6                            Map_SS_Glass:
000274C6                            	include "_maps\SSglassblock.asm"
000274C6                            ; ---------------------------------------------------------------------------
000274C6                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
000274C6                            ; ---------------------------------------------------------------------------
000274C6 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
000274CA 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
000274CE 01                         byte_1B928:	dc.b 1
000274CF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000274D4 01                         byte_1B92E:	dc.b 1
000274D5 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
000274DA 01                         byte_1B934:	dc.b 1
000274DB F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
000274E0 01                         byte_1B93A:	dc.b 1
000274E1 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
000274E6                            		even
000274E6                            		even
000274E6                            
000274E6                            ; ---------------------------------------------------------------------------
000274E6                            ; Sprite mappings - special stage "UP" block
000274E6                            ; ---------------------------------------------------------------------------
000274E6                            Map_SS_Up:
000274E6                            	include "_maps\SSUPblock.asm"
000274E6                            ; ---------------------------------------------------------------------------
000274E6                            ; Sprite mappings - special stage "UP" block
000274E6                            ; ---------------------------------------------------------------------------
000274E6 0000                       		dc.w byte_1B944-Map_SS_Up
000274E8 0000                       		dc.w byte_1B94A-Map_SS_Up
000274EA 01                         byte_1B944:	dc.b 1
000274EB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000274F0 01                         byte_1B94A:	dc.b 1
000274F1 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000274F6                            		even
000274F6                            		even
000274F6                            
000274F6                            ; ---------------------------------------------------------------------------
000274F6                            ; Sprite mappings - special stage "DOWN" block
000274F6                            ; ---------------------------------------------------------------------------
000274F6                            Map_SS_Down:
000274F6                            	include "_maps\SSDOWNblock.asm"
000274F6                            ; ---------------------------------------------------------------------------
000274F6                            ; Sprite mappings - special stage "DOWN" block
000274F6                            ; ---------------------------------------------------------------------------
000274F6 0000                       		dc.w byte_1B954-Map_SS_Down
000274F8 0000                       		dc.w byte_1B95A-Map_SS_Down
000274FA 01                         byte_1B954:	dc.b 1
000274FB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00027500 01                         byte_1B95A:	dc.b 1
00027501 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00027506                            		even
00027506                            		even
00027506                            
00027506                            ; ---------------------------------------------------------------------------
00027506                            ; Sprite mappings - special stage chaos	emeralds
00027506                            ; ---------------------------------------------------------------------------
00027506 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
00027508 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0002750A 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0002750C 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0002750E 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
00027510 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
00027512 01                         byte_1B96C:	dc.b 1
00027513 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00027518 01                         byte_1B972:	dc.b 1
00027519 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0002751E 01                         byte_1B978:	dc.b 1
0002751F F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00027524 01                         byte_1B97E:	dc.b 1
00027525 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0002752A                            		even
0002752A                            ; ===========================================================================
0002752A                            ; ---------------------------------------------------------------------------
0002752A                            ; Object 09 - Sonic (special stage)
0002752A                            ; ---------------------------------------------------------------------------
0002752A                            
0002752A                            Obj09:					; XREF: Obj_Index
0002752A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0002752E 6700                       		beq.s	Obj09_Normal	; if not, branch
00027530 4EB9 0000 0000             		jsr	SS_FixCamera
00027536 6000 0000                  		bra.w	DebugMode
0002753A                            ; ===========================================================================
0002753A                            
0002753A                            Obj09_Normal:
0002753A 7000                       		moveq	#0,d0
0002753C 1028 0024                  		move.b	routine(a0),d0
00027540 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
00027544 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
00027548                            ; ===========================================================================
00027548 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0002754A 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0002754C 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0002754E 0000                       		dc.w Obj09_Exit2-Obj09_Index
00027550                            ; ===========================================================================
00027550                            
00027550                            Obj09_Main:				; XREF: Obj09_Index
00027550 5428 0024                  		addq.b	#2,routine(a0)
00027554 117C 000E 0016             		move.b	#$E,$16(a0)
0002755A 117C 0007 0017             		move.b	#7,$17(a0)
00027560 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00027568 317C 0780 0002             		move.w	#$780,2(a0)
0002756E 117C 0004 0001             		move.b	#4,1(a0)
00027574 117C 0000 0018             		move.b	#0,priority(a0)
0002757A 117C 0002 001C             		move.b	#2,anim(a0)
00027580 08E8 0002 0022             		bset	#2,status(a0)
00027586 08E8 0001 0022             		bset	#1,status(a0)
0002758C                            
0002758C                            Obj09_ChkDebug:				; XREF: Obj09_Index
0002758C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
00027590 6700                       		beq.s	Obj09_NoDebug	; if not, branch
00027592 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
00027598 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0002759A 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
000275A0                            
000275A0                            Obj09_NoDebug:
000275A0 117C 0000 0030             		move.b	#0,$30(a0)
000275A6 7000                       		moveq	#0,d0
000275A8 1028 0022                  		move.b	status(a0),d0
000275AC 0240 0002                  		andi.w	#2,d0
000275B0 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
000275B4 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
000275B8 4EB9 0001 E21C             		jsr	LoadSonicDynPLC
000275BE 4EF9 0001 5C48             		jmp	DisplaySprite
000275C4                            ; ===========================================================================
000275C4 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
000275C6 0000                       		dc.w Obj09_InAir-Obj09_Modes
000275C8                            ; ===========================================================================
000275C8                            
000275C8                            Obj09_OnWall:				; XREF: Obj09_Modes
000275C8 08A8 0007 0022             		bclr	#7,status(a0)	; clear "Sonic has jumped" flag
000275CE 4EB9 0000 0000             		jsr	Obj09_Jump
000275D4 4EB9 0000 0000             		jsr	Obj09_Move
000275DA 4EB9 0000 0000             		jsr	Obj09_Fall
000275E0 6000                       		bra.s	Obj09_Display
000275E2                            ; ===========================================================================
000275E2                            
000275E2                            Obj09_InAir:				; XREF: Obj09_Modes
000275E2 4EB9 0000 0000             		jsr	Obj09_JumpHeight
000275E8 4EB9 0000 0000             		jsr	Obj09_Move
000275EE 4EB9 0000 0000             		jsr	Obj09_Fall
000275F4                            
000275F4                            Obj09_Display:				; XREF: Obj09_OnWall
000275F4 4EB9 0000 0000             		jsr	Obj09_ChkItems
000275FA 4EB9 0000 0000             		jsr	Obj09_ChkItems2
00027600 4EB9 0001 5BE2             		jsr	SpeedToPos
00027606 4EB9 0000 0000             		jsr	SS_FixCamera
0002760C 3038 F780                  		move.w	($FFFFF780).w,d0
00027610 D078 F782                  		add.w	($FFFFF782).w,d0
00027614 31C0 F780                  		move.w	d0,($FFFFF780).w
00027618 4EB9 0001 DC3A             		jsr	Sonic_Animate
0002761E 4E75                       		rts	
00027620                            
00027620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027620                            
00027620                            
00027620                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
00027620 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00027626 6700                       		beq.s	Obj09_ChkRight	; if not, branch
00027628 4EB9 0000 0000             		jsr	Obj09_MoveLeft
0002762E                            
0002762E                            Obj09_ChkRight:
0002762E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00027634 6700                       		beq.s	loc_1BA78	; if not, branch
00027636 4EB9 0000 0000             		jsr	Obj09_MoveRight
0002763C                            
0002763C                            loc_1BA78:
0002763C 1038 F602                  		move.b	($FFFFF602).w,d0
00027640 0200 000C                  		andi.b	#$C,d0
00027644 6600                       		bne.s	loc_1BAA8
00027646 3028 0020                  		move.w	inertia(a0),d0
0002764A 6700                       		beq.s	loc_1BAA8
0002764C 6B00                       		bmi.s	loc_1BA9A
0002764E 0440 000C                  		subi.w	#$C,d0
00027652 6400                       		bcc.s	loc_1BA94
00027654 303C 0000                  		move.w	#0,d0
00027658                            
00027658                            loc_1BA94:
00027658 3140 0020                  		move.w	d0,inertia(a0)
0002765C 6000                       		bra.s	loc_1BAA8
0002765E                            ; ===========================================================================
0002765E                            
0002765E                            loc_1BA9A:
0002765E 0640 000C                  		addi.w	#$C,d0
00027662 6400                       		bcc.s	loc_1BAA4
00027664 303C 0000                  		move.w	#0,d0
00027668                            
00027668                            loc_1BAA4:
00027668 3140 0020                  		move.w	d0,inertia(a0)
0002766C                            
0002766C                            loc_1BAA8:
0002766C 1038 F780                  		move.b	($FFFFF780).w,d0
00027670 0600 0020                  		addi.b	#$20,d0
00027674 0200 00C0                  		andi.b	#$C0,d0
00027678 4400                       		neg.b	d0
0002767A 4EB9 0000 8DA4             		jsr	(CalcSine).l
00027680 C3E8 0020                  		muls.w	inertia(a0),d1
00027684 D3A8 0008                  		add.l	d1,8(a0)
00027688 C1E8 0020                  		muls.w	inertia(a0),d0
0002768C D1A8 000C                  		add.l	d0,$C(a0)
00027690 48E7 C000                  		movem.l	d0-d1,-(sp)
00027694 2428 000C                  		move.l	$C(a0),d2
00027698 2628 0008                  		move.l	8(a0),d3
0002769C 4EB9 0000 0000             		jsr	sub_1BCE8
000276A2 6700                       		beq.s	loc_1BAF2
000276A4 4CDF 0003                  		movem.l	(sp)+,d0-d1
000276A8 93A8 0008                  		sub.l	d1,8(a0)
000276AC 91A8 000C                  		sub.l	d0,$C(a0)
000276B0 317C 0000 0020             		move.w	#0,inertia(a0)
000276B6 4E75                       		rts	
000276B8                            ; ===========================================================================
000276B8                            
000276B8                            loc_1BAF2:
000276B8 4CDF 0003                  		movem.l	(sp)+,d0-d1
000276BC 4E75                       		rts	
000276BE                            ; End of function Obj09_Move
000276BE                            
000276BE                            
000276BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000276BE                            
000276BE                            
000276BE                            Obj09_MoveLeft:				; XREF: Obj09_Move
000276BE 08E8 0000 0022             		bset	#0,status(a0)
000276C4 3028 0020                  		move.w	inertia(a0),d0
000276C8 6700                       		beq.s	loc_1BB06
000276CA 6A00                       		bpl.s	loc_1BB1A
000276CC                            
000276CC                            loc_1BB06:
000276CC 0440 000C                  		subi.w	#$C,d0
000276D0 0C40 F800                  		cmpi.w	#-$800,d0
000276D4 6E00                       		bgt.s	loc_1BB14
000276D6 303C F800                  		move.w	#-$800,d0
000276DA                            
000276DA                            loc_1BB14:
000276DA 3140 0020                  		move.w	d0,inertia(a0)
000276DE 4E75                       		rts	
000276E0                            ; ===========================================================================
000276E0                            
000276E0                            loc_1BB1A:
000276E0 0440 0040                  		subi.w	#$40,d0
000276E4 6400                       		bcc.s	loc_1BB22
000276E6 4E71                       		nop	
000276E8                            
000276E8                            loc_1BB22:
000276E8 3140 0020                  		move.w	d0,inertia(a0)
000276EC 4E75                       		rts	
000276EE                            ; End of function Obj09_MoveLeft
000276EE                            
000276EE                            
000276EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000276EE                            
000276EE                            
000276EE                            Obj09_MoveRight:			; XREF: Obj09_Move
000276EE 08A8 0000 0022             		bclr	#0,status(a0)
000276F4 3028 0020                  		move.w	inertia(a0),d0
000276F8 6B00                       		bmi.s	loc_1BB48
000276FA 0640 000C                  		addi.w	#$C,d0
000276FE 0C40 0800                  		cmpi.w	#$800,d0
00027702 6D00                       		blt.s	loc_1BB42
00027704 303C 0800                  		move.w	#$800,d0
00027708                            
00027708                            loc_1BB42:
00027708 3140 0020                  		move.w	d0,inertia(a0)
0002770C 6000                       		bra.s	locret_1BB54
0002770E                            ; ===========================================================================
0002770E                            
0002770E                            loc_1BB48:
0002770E 0640 0040                  		addi.w	#$40,d0
00027712 6400                       		bcc.s	loc_1BB50
00027714 4E71                       		nop	
00027716                            
00027716                            loc_1BB50:
00027716 3140 0020                  		move.w	d0,inertia(a0)
0002771A                            
0002771A                            locret_1BB54:
0002771A 4E75                       		rts	
0002771C                            ; End of function Obj09_MoveRight
0002771C                            
0002771C                            
0002771C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002771C                            
0002771C                            
0002771C                            Obj09_Jump:				; XREF: Obj09_OnWall
0002771C 1038 F603                  		move.b	($FFFFF603).w,d0
00027720 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00027724 6700                       		beq.s	Obj09_NoJump	; if not, branch
00027726 1038 F780                  		move.b	($FFFFF780).w,d0
0002772A 0200 00FC                  		andi.b	#$FC,d0
0002772E 4400                       		neg.b	d0
00027730 0400 0040                  		subi.b	#$40,d0
00027734 4EB9 0000 8DA4             		jsr	(CalcSine).l
0002773A C3FC 0680                  		muls.w	#$680,d1
0002773E E081                       		asr.l	#8,d1
00027740 3141 0010                  		move.w	d1,x_vel(a0)
00027744 C1FC 0680                  		muls.w	#$680,d0
00027748 E080                       		asr.l	#8,d0
0002774A 3140 0012                  		move.w	d0,y_vel(a0)
0002774E 08E8 0001 0022             		bset	#1,status(a0)
00027754 08E8 0007 0022             		bset	#7,status(a0)	; set "Sonic has jumped" flag
0002775A 303C 0062                  		move.w	#$62,d0
0002775E 4EB9 0000 3212             		jsr	(PlaySound).l ;	play jumping sound
00027764                            
00027764                            Obj09_NoJump:
00027764 4E75                       		rts	
00027766                            ; End of function Obj09_Jump
00027766                            
00027766                            ; ===========================================================================
00027766                            ; ---------------------------------------------------------------------------
00027766                            ; Subroutine to limit Sonic's upward vertical speed
00027766                            ; ---------------------------------------------------------------------------
00027766                             
00027766                            Obj09_JumpHeight:			; XREF: Obj09_InAir
00027766 1038 F602                  		move.b	($FFFFF602).w,d0	; is the jump button up?
0002776A 0200 0070                  		andi.b	#$70,d0
0002776E 6600                       		bne.s	locret_1BBB4		; if not, branch to return
00027770 0828 0007 0022             		btst	#7,status(a0)		; did Sonic jump or is he just falling or hit by a bumper?
00027776 6700                       		beq.s	locret_1BBB4		; if not, branch to return
00027778 1038 F780                  		move.b	($FFFFF780).w,d0	; get SS angle
0002777C 0200 00FC                  		andi.b	#$FC,d0
00027780 4400                       		neg.b	d0
00027782 0400 0040                  		subi.b	#$40,d0
00027786 4EB9 0000 8DA4             		jsr	(CalcSine).l			
0002778C 3428 0012                  		move.w	y_vel(a0),d2		; get Y speed
00027790 C1C2                       		muls.w	d2,d0			; multiply Y speed by sin
00027792 E080                       		asr.l	#8,d0			; find the new Y speed
00027794 3428 0010                  		move.w	x_vel(a0),d2		; get X speed
00027798 C3C2                       		muls.w	d2,d1			; multiply X speed by cos
0002779A E081                       		asr.l	#8,d1			; find the new X speed
0002779C D240                       		add.w	d0,d1			; combine the two speeds
0002779E 0C41 0400                  		cmpi.w	#$400,d1		; compare the combined speed with the jump release speed
000277A2 6F00                       		ble.s	locret_1BBB4		; if it's less, branch to return
000277A4 1038 F780                  		move.b	($FFFFF780).w,d0
000277A8 0200 00FC                  		andi.b	#$FC,d0
000277AC 4400                       		neg.b	d0
000277AE 0400 0040                  		subi.b	#$40,d0
000277B2 4EB9 0000 8DA4             		jsr	(CalcSine).l
000277B8 C3FC 0400                  		muls.w	#$400,d1
000277BC E081                       		asr.l	#8,d1
000277BE 3141 0010                  		move.w	d1,x_vel(a0)
000277C2 C1FC 0400                  		muls.w	#$400,d0
000277C6 E080                       		asr.l	#8,d0
000277C8 3140 0012                  		move.w	d0,y_vel(a0)		; set the speed to the jump release speed
000277CC 08A8 0007 0022             		bclr	#7,status(a0)		; clear "Sonic has jumped" flag
000277D2                             
000277D2                            locret_1BBB4:
000277D2 4E75                       		rts
000277D4                            
000277D4                            ; ---------------------------------------------------------------------------
000277D4                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
000277D4                            ; ---------------------------------------------------------------------------
000277D4                            
000277D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000277D4                            
000277D4                            
000277D4                            SS_FixCamera:				; XREF: Obj09
000277D4 3428 000C                  		move.w	$C(a0),d2
000277D8 3628 0008                  		move.w	8(a0),d3
000277DC 3038 F700                  		move.w	($FFFFF700).w,d0
000277E0 0443 00A0                  		subi.w	#$A0,d3
000277E4 6500                       		bcs.s	loc_1BBCE
000277E6 9043                       		sub.w	d3,d0
000277E8 9178 F700                  		sub.w	d0,($FFFFF700).w
000277EC                            
000277EC                            loc_1BBCE:
000277EC 3038 F704                  		move.w	($FFFFF704).w,d0
000277F0 0442 0070                  		subi.w	#$70,d2
000277F4 6500                       		bcs.s	locret_1BBDE
000277F6 9042                       		sub.w	d2,d0
000277F8 9178 F704                  		sub.w	d0,($FFFFF704).w
000277FC                            
000277FC                            locret_1BBDE:
000277FC 4E75                       		rts	
000277FE                            ; End of function SS_FixCamera
000277FE                            
000277FE                            ; ===========================================================================
000277FE                            
000277FE                            Obj09_ExitStage:			; XREF: Obj09_Index
000277FE 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
00027804 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0002780A 6600                       		bne.s	loc_1BBF4
0002780C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
00027812                            
00027812                            loc_1BBF4:
00027812 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
00027818 6D00                       		blt.s	loc_1BC12
0002781A 31FC 0000 F782             		move.w	#0,($FFFFF782).w
00027820 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
00027826 5428 0024                  		addq.b	#2,routine(a0)
0002782A 317C 003C 0038             		move.w	#$3C,$38(a0)
00027830                            
00027830                            loc_1BC12:
00027830 3038 F780                  		move.w	($FFFFF780).w,d0
00027834 D078 F782                  		add.w	($FFFFF782).w,d0
00027838 31C0 F780                  		move.w	d0,($FFFFF780).w
0002783C 4EB9 0001 DC3A             		jsr	Sonic_Animate
00027842 4EB9 0001 E21C             		jsr	LoadSonicDynPLC
00027848 4EBA FF8A                  		jsr	SS_FixCamera
0002784C 4EF9 0001 5C48             		jmp	DisplaySprite
00027852                            ; ===========================================================================
00027852                            
00027852                            Obj09_Exit2:				; XREF: Obj09_Index
00027852 5368 0038                  		subq.w	#1,$38(a0)
00027856 6600                       		bne.s	loc_1BC40
00027858 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0002785E                            
0002785E                            loc_1BC40:
0002785E 4EB9 0001 DC3A             		jsr	Sonic_Animate
00027864 4EB9 0001 E21C             		jsr	LoadSonicDynPLC
0002786A 4EBA FF68                  		jsr	SS_FixCamera
0002786E 4EF9 0001 5C48             		jmp	DisplaySprite
00027874                            
00027874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027874                            
00027874                            
00027874                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
00027874 2428 000C                  		move.l	$C(a0),d2
00027878 2628 0008                  		move.l	8(a0),d3
0002787C 1038 F780                  		move.b	($FFFFF780).w,d0
00027880 0200 00FC                  		andi.b	#$FC,d0
00027884 4EB9 0000 8DA4             		jsr	(CalcSine).l
0002788A 3828 0010                  		move.w	x_vel(a0),d4
0002788E 48C4                       		ext.l	d4
00027890 E184                       		asl.l	#8,d4
00027892 C1FC 002A                  		muls.w	#$2A,d0
00027896 D084                       		add.l	d4,d0
00027898 3828 0012                  		move.w	y_vel(a0),d4
0002789C 48C4                       		ext.l	d4
0002789E E184                       		asl.l	#8,d4
000278A0 C3FC 002A                  		muls.w	#$2A,d1
000278A4 D284                       		add.l	d4,d1
000278A6 D680                       		add.l	d0,d3
000278A8 4EB9 0000 0000             		jsr	sub_1BCE8
000278AE 6700                       		beq.s	loc_1BCB0
000278B0 9680                       		sub.l	d0,d3
000278B2 7000                       		moveq	#0,d0
000278B4 3140 0010                  		move.w	d0,x_vel(a0)
000278B8 08A8 0001 0022             		bclr	#1,status(a0)
000278BE D481                       		add.l	d1,d2
000278C0 4EB9 0000 0000             		jsr	sub_1BCE8
000278C6 6700                       		beq.s	loc_1BCC6
000278C8 9481                       		sub.l	d1,d2
000278CA 7200                       		moveq	#0,d1
000278CC 3141 0012                  		move.w	d1,y_vel(a0)
000278D0 4E75                       		rts	
000278D2                            ; ===========================================================================
000278D2                            
000278D2                            loc_1BCB0:
000278D2 D481                       		add.l	d1,d2
000278D4 4EB9 0000 0000             		jsr	sub_1BCE8
000278DA 6700                       		beq.s	loc_1BCD4
000278DC 9481                       		sub.l	d1,d2
000278DE 7200                       		moveq	#0,d1
000278E0 3141 0012                  		move.w	d1,y_vel(a0)
000278E4 08A8 0001 0022             		bclr	#1,status(a0)
000278EA                            
000278EA                            loc_1BCC6:
000278EA E080                       		asr.l	#8,d0
000278EC E081                       		asr.l	#8,d1
000278EE 3140 0010                  		move.w	d0,x_vel(a0)
000278F2 3141 0012                  		move.w	d1,y_vel(a0)
000278F6 4E75                       		rts	
000278F8                            ; ===========================================================================
000278F8                            
000278F8                            loc_1BCD4:
000278F8 E080                       		asr.l	#8,d0
000278FA E081                       		asr.l	#8,d1
000278FC 3140 0010                  		move.w	d0,x_vel(a0)
00027900 3141 0012                  		move.w	d1,y_vel(a0)
00027904 08E8 0001 0022             		bset	#1,status(a0)
0002790A 4E75                       		rts	
0002790C                            ; End of function Obj09_Fall
0002790C                            
0002790C                            
0002790C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002790C                            
0002790C                            
0002790C                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0002790C 43F9 00FF 0000             		lea	($FF0000).l,a1
00027912 7800                       		moveq	#0,d4
00027914 4842                       		swap	d2
00027916 3802                       		move.w	d2,d4
00027918 4842                       		swap	d2
0002791A 0644 0044                  		addi.w	#$44,d4
0002791E 88FC 0018                  		divu.w	#$18,d4
00027922 C8FC 0080                  		mulu.w	#$80,d4
00027926 D3C4                       		adda.l	d4,a1
00027928 7800                       		moveq	#0,d4
0002792A 4843                       		swap	d3
0002792C 3803                       		move.w	d3,d4
0002792E 4843                       		swap	d3
00027930 0644 0014                  		addi.w	#$14,d4
00027934 88FC 0018                  		divu.w	#$18,d4
00027938 D2C4                       		adda.w	d4,a1
0002793A 7A00                       		moveq	#0,d5
0002793C 1819                       		move.b	(a1)+,d4
0002793E 6100                       		bsr.s	sub_1BD30
00027940 1819                       		move.b	(a1)+,d4
00027942 6100                       		bsr.s	sub_1BD30
00027944 D2FC 007E                  		adda.w	#$7E,a1
00027948 1819                       		move.b	(a1)+,d4
0002794A 6100                       		bsr.s	sub_1BD30
0002794C 1819                       		move.b	(a1)+,d4
0002794E 6100                       		bsr.s	sub_1BD30
00027950 4A05                       		tst.b	d5
00027952 4E75                       		rts	
00027954                            ; End of function sub_1BCE8
00027954                            
00027954                            
00027954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027954                            
00027954                            
00027954                            sub_1BD30:				; XREF: sub_1BCE8
00027954 6700                       		beq.s	locret_1BD44
00027956 0C04 0028                  		cmpi.b	#$28,d4
0002795A 6700                       		beq.s	locret_1BD44
0002795C 0C04 003A                  		cmpi.b	#$3A,d4
00027960 6500                       		bcs.s	loc_1BD46
00027962 0C04 004B                  		cmpi.b	#$4B,d4
00027966 6400                       		bcc.s	loc_1BD46
00027968                            
00027968                            locret_1BD44:
00027968 4E75                       		rts	
0002796A                            ; ===========================================================================
0002796A                            
0002796A                            loc_1BD46:
0002796A 1144 0030                  		move.b	d4,$30(a0)
0002796E 2149 0032                  		move.l	a1,$32(a0)
00027972 7AFF                       		moveq	#-1,d5
00027974 4E75                       		rts	
00027976                            ; End of function sub_1BD30
00027976                            
00027976                            
00027976                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027976                            
00027976                            
00027976                            Obj09_ChkItems:				; XREF: Obj09_Display
00027976 43F9 00FF 0000             		lea	($FF0000).l,a1
0002797C 7800                       		moveq	#0,d4
0002797E 3828 000C                  		move.w	$C(a0),d4
00027982 0644 0050                  		addi.w	#$50,d4
00027986 88FC 0018                  		divu.w	#$18,d4
0002798A C8FC 0080                  		mulu.w	#$80,d4
0002798E D3C4                       		adda.l	d4,a1
00027990 7800                       		moveq	#0,d4
00027992 3828 0008                  		move.w	8(a0),d4
00027996 0644 0020                  		addi.w	#$20,d4
0002799A 88FC 0018                  		divu.w	#$18,d4
0002799E D2C4                       		adda.w	d4,a1
000279A0 1811                       		move.b	(a1),d4
000279A2 6600                       		bne.s	Obj09_ChkCont
000279A4 4A28 003A                  		tst.b	$3A(a0)
000279A8 6600 0000                  		bne.w	Obj09_MakeGhostSolid
000279AC 7800                       		moveq	#0,d4
000279AE 4E75                       		rts	
000279B0                            ; ===========================================================================
000279B0                            
000279B0                            Obj09_ChkCont:
000279B0 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
000279B4 6600                       		bne.s	Obj09_Chk1Up
000279B6 4EBA F6A4                  		jsr	SS_RemoveCollectedItem
000279BA 6600                       		bne.s	Obj09_GetCont
000279BC 14BC 0001                  		move.b	#1,(a2)
000279C0 2549 0004                  		move.l	a1,4(a2)
000279C4                            
000279C4                            Obj09_GetCont:
000279C4 4EB9 0001 1932             		jsr	CollectRing
000279CA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
000279D0 6500                       		bcs.s	Obj09_NoCont
000279D2 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
000279D8 6600                       		bne.s	Obj09_NoCont
000279DA 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
000279DE 303C 00AC                  		move.w	#$AC,d0
000279E2 4EB9 0000 3212             		jsr	(PlaySound).l	; play extra continue sound
000279E8                            
000279E8                            Obj09_NoCont:
000279E8 7800                       		moveq	#0,d4
000279EA 4E75                       		rts	
000279EC                            ; ===========================================================================
000279EC                            
000279EC                            Obj09_Chk1Up:
000279EC 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
000279F0 6600                       		bne.s	Obj09_ChkEmer
000279F2 0C38 0063 FE12             		cmpi.b	#$63,($FFFFFE12).w
000279F8 6E00                       		bgt.b	Obj09_Get1Upcont
000279FA 4EBA F660                  		jsr	SS_RemoveCollectedItem
000279FE 6600                       		bne.s	Obj09_Get1Up
00027A00 14BC 0003                  		move.b	#3,(a2)
00027A04 2549 0004                  		move.l	a1,4(a2)
00027A08                            
00027A08                            Obj09_Get1Up:
00027A08 0C38 0063 FE12             		cmpi.b	#$63,($FFFFFE12).w
00027A0E 6C00                       		bge.s	Obj09_Get1Upcont
00027A10 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
00027A14 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
00027A18                            Obj09_Get1Upcont:
00027A18 303C 0088                  		move.w	#$88,d0
00027A1C 4EB9 0000 3212             		jsr	(PlaySound).l	; play extra life music
00027A22 7800                       		moveq	#0,d4
00027A24 4E75                       		rts	
00027A26                            
00027A26                            ; ===========================================================================
00027A26                            
00027A26                            Obj09_ChkEmer:
00027A26 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
00027A2A 6500                       		bcs.s	Obj09_ChkGhost
00027A2C 0C04 0040                  		cmpi.b	#$40,d4
00027A30 6200                       		bhi.s	Obj09_ChkGhost
00027A32 4EBA F628                  		jsr	SS_RemoveCollectedItem
00027A36 6600                       		bne.s	Obj09_GetEmer
00027A38 14BC 0005                  		move.b	#5,(a2)
00027A3C 2549 0004                  		move.l	a1,4(a2)
00027A40                            
00027A40                            Obj09_GetEmer:
00027A40 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
00027A46 6C00                       		bge.s	Obj09_NoEmer	; if yes, branch
00027A48 0404 003B                  		subi.b	#$3B,d4
00027A4C 7000                       		moveq	#0,d0
00027A4E 1038 FE57                  		move.b	($FFFFFE57).w,d0
00027A52 45F8 FE58                  		lea	($FFFFFE58).w,a2
00027A56 1584 0000                  		move.b	d4,(a2,d0.w)
00027A5A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
00027A60 6C00                       		bge.s	Obj09_NoEmer_2	; if yes, branch
00027A62 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
00027A66 4EF9 0000 0000             		jmp	Obj09_EmerSND
00027A6C                            
00027A6C                            Obj09_NoEmer_2:
00027A6C 11FC 0006 FE57             		move.b	#6,($FFFFFE57).w ; add 1 to number of emeralds
00027A72 4EF9 0000 0000             		jmp	Obj09_EmerSND
00027A78                            Obj09_NoEmer:
00027A78 303C 002B                  		move.w	#$2B,d0
00027A7C                            Obj09_EmerSND:
00027A7C 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play emerald music
00027A82 7800                       		moveq	#0,d4
00027A84 4E75                       		rts	
00027A86                            ; ===========================================================================
00027A86                            
00027A86                            Obj09_ChkGhost:
00027A86 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
00027A8A 6600                       		bne.s	Obj09_ChkGhostTag
00027A8C 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
00027A92                            
00027A92                            Obj09_ChkGhostTag:
00027A92 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
00027A96 6600                       		bne.s	Obj09_NoGhost
00027A98 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
00027A9E 6600                       		bne.s	Obj09_NoGhost	; if not, branch
00027AA0 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
00027AA6                            
00027AA6                            Obj09_NoGhost:
00027AA6 78FF                       		moveq	#-1,d4
00027AA8 4E75                       		rts	
00027AAA                            ; ===========================================================================
00027AAA                            
00027AAA                            Obj09_MakeGhostSolid:
00027AAA 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
00027AB0 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
00027AB2 43F9 00FF 1020             		lea	($FF1020).l,a1
00027AB8 723F                       		moveq	#$3F,d1
00027ABA                            
00027ABA                            Obj09_GhostLoop2:
00027ABA 743F                       		moveq	#$3F,d2
00027ABC                            
00027ABC                            Obj09_GhostLoop:
00027ABC 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
00027AC0 6600                       		bne.s	Obj09_NoReplace	; if not, branch
00027AC2 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
00027AC6                            
00027AC6                            Obj09_NoReplace:
00027AC6 5249                       		addq.w	#1,a1
00027AC8 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
00027ACC 43E9 0040                  		lea	object_size(a1),a1
00027AD0 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
00027AD4                            
00027AD4                            Obj09_GhostNotSolid:
00027AD4 4228 003A                  		clr.b	$3A(a0)
00027AD8 7800                       		moveq	#0,d4
00027ADA 4E75                       		rts	
00027ADC                            ; End of function Obj09_ChkItems
00027ADC                            
00027ADC                            
00027ADC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027ADC                            
00027ADC                            
00027ADC                            Obj09_ChkItems2:			; XREF: Obj09_Display
00027ADC 1028 0030                  		move.b	$30(a0),d0
00027AE0 6600                       		bne.s	Obj09_ChkBumper
00027AE2 5328 0036                  		subq.b	#1,$36(a0)
00027AE6 6A00                       		bpl.s	loc_1BEA0
00027AE8 117C 0000 0036             		move.b	#0,$36(a0)
00027AEE                            
00027AEE                            loc_1BEA0:
00027AEE 5328 0037                  		subq.b	#1,$37(a0)
00027AF2 6A00                       		bpl.s	locret_1BEAC
00027AF4 117C 0000 0037             		move.b	#0,$37(a0)
00027AFA                            
00027AFA                            locret_1BEAC:
00027AFA 4E75                       		rts	
00027AFC                            ; ===========================================================================
00027AFC                            
00027AFC                            Obj09_ChkBumper:
00027AFC 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
00027B00 6600                       		bne.s	Obj09_GOAL
00027B02 2228 0032                  		move.l	$32(a0),d1
00027B06 0481 00FF 0001             		subi.l	#$FF0001,d1
00027B0C 3401                       		move.w	d1,d2
00027B0E 0241 007F                  		andi.w	#$7F,d1
00027B12 C2FC 0018                  		mulu.w	#$18,d1
00027B16 0441 0014                  		subi.w	#$14,d1
00027B1A EE4A                       		lsr.w	#7,d2
00027B1C 0242 007F                  		andi.w	#$7F,d2
00027B20 C4FC 0018                  		mulu.w	#$18,d2
00027B24 0442 0044                  		subi.w	#$44,d2
00027B28 9268 0008                  		sub.w	8(a0),d1
00027B2C 9468 000C                  		sub.w	$C(a0),d2
00027B30 4EB9 0000 9072             		jsr	(CalcAngle).l
00027B36 4EB9 0000 8DA4             		jsr	(CalcSine).l
00027B3C C3FC F900                  		muls.w	#-$700,d1
00027B40 E081                       		asr.l	#8,d1
00027B42 3141 0010                  		move.w	d1,x_vel(a0)
00027B46 C1FC F900                  		muls.w	#-$700,d0
00027B4A E080                       		asr.l	#8,d0
00027B4C 3140 0012                  		move.w	d0,y_vel(a0)
00027B50 08E8 0001 0022             		bset	#1,status(a0)
00027B56 08A8 0007 0022             		bclr	#7,status(a0)	; clear "Sonic has jumped" flag
00027B5C 4EBA F4FE                  		jsr	SS_RemoveCollectedItem
00027B60 6600                       		bne.s	Obj09_BumpSnd
00027B62 14BC 0002                  		move.b	#2,(a2)
00027B66 2028 0032                  		move.l	$32(a0),d0
00027B6A 5380                       		subq.l	#1,d0
00027B6C 2540 0004                  		move.l	d0,4(a2)
00027B70                            
00027B70                            Obj09_BumpSnd:
00027B70 303C 00AA                  		move.w	#$AA,d0
00027B74 4EF9 0000 3212             		jmp	(PlaySound).l ;	play bumper sound
00027B7A                            ; ===========================================================================
00027B7A                            
00027B7A                            Obj09_GOAL:
00027B7A 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
00027B7E 6600                       		bne.s	Obj09_UPblock
00027B80 5428 0024                  		addq.b	#2,routine(a0)	; run routine "Obj09_ExitStage"
00027B84 303C 006A                  		move.w	#$6A,d0		; change item
00027B88 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
00027B8E 4E75                       		rts	
00027B90                            ; ===========================================================================
00027B90                            
00027B90                            Obj09_UPblock:
00027B90 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
00027B94 6600                       		bne.s	Obj09_DOWNblock
00027B96 4A28 0036                  		tst.b	$36(a0)
00027B9A 6600 0000                  		bne.w	Obj09_NoGlass
00027B9E 117C 001E 0036             		move.b	#$1E,$36(a0)
00027BA4 0838 0006 F783             		btst	#6,($FFFFF783).w
00027BAA 6700                       		beq.s	Obj09_UPsnd
00027BAC E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
00027BB0 2268 0032                  		movea.l	$32(a0),a1
00027BB4 5389                       		subq.l	#1,a1
00027BB6 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
00027BBA                            
00027BBA                            Obj09_UPsnd:
00027BBA 303C 006B                  		move.w	#$6B,d0
00027BBE 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play up/down sound
00027BC4                            ; ===========================================================================
00027BC4                            
00027BC4                            Obj09_DOWNblock:
00027BC4 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
00027BC8 6600                       		bne.s	Obj09_Rblock
00027BCA 4A28 0036                  		tst.b	$36(a0)
00027BCE 6600 0000                  		bne.w	Obj09_NoGlass
00027BD2 117C 001E 0036             		move.b	#$1E,$36(a0)
00027BD8 0838 0006 F783             		btst	#6,($FFFFF783).w
00027BDE 6600                       		bne.s	Obj09_DOWNsnd
00027BE0 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
00027BE4 2268 0032                  		movea.l	$32(a0),a1
00027BE8 5389                       		subq.l	#1,a1
00027BEA 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
00027BEE                            
00027BEE                            Obj09_DOWNsnd:
00027BEE 303C 006B                  		move.w	#$6B,d0
00027BF2 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play up/down sound
00027BF8                            ; ===========================================================================
00027BF8                            
00027BF8                            Obj09_Rblock:
00027BF8 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
00027BFC 6600                       		bne.s	Obj09_ChkGlass
00027BFE 4A28 0037                  		tst.b	$37(a0)
00027C02 6600 0000                  		bne.w	Obj09_NoGlass
00027C06 117C 001E 0037             		move.b	#$1E,$37(a0)
00027C0C 4EBA F44E                  		jsr	SS_RemoveCollectedItem
00027C10 6600                       		bne.s	Obj09_RevStage
00027C12 14BC 0004                  		move.b	#4,(a2)
00027C16 2028 0032                  		move.l	$32(a0),d0
00027C1A 5380                       		subq.l	#1,d0
00027C1C 2540 0004                  		move.l	d0,4(a2)
00027C20                            
00027C20                            Obj09_RevStage:
00027C20 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
00027C24 303C 006B                  		move.w	#$6B,d0
00027C28 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play sound
00027C2E                            ; ===========================================================================
00027C2E                            
00027C2E                            Obj09_ChkGlass:
00027C2E 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
00027C32 6700                       		beq.s	Obj09_Glass	; if yes, branch
00027C34 0C00 002E                  		cmpi.b	#$2E,d0
00027C38 6700                       		beq.s	Obj09_Glass
00027C3A 0C00 002F                  		cmpi.b	#$2F,d0
00027C3E 6700                       		beq.s	Obj09_Glass
00027C40 0C00 0030                  		cmpi.b	#$30,d0
00027C44 6600                       		bne.s	Obj09_NoGlass	; if not, branch
00027C46                            
00027C46                            Obj09_Glass:
00027C46 4EBA F414                  		jsr	SS_RemoveCollectedItem
00027C4A 6600                       		bne.s	Obj09_GlassSnd
00027C4C 14BC 0006                  		move.b	#6,(a2)
00027C50 2268 0032                  		movea.l	$32(a0),a1
00027C54 5389                       		subq.l	#1,a1
00027C56 2549 0004                  		move.l	a1,4(a2)
00027C5A 1011                       		move.b	(a1),d0
00027C5C 5200                       		addq.b	#1,d0		; change glass type when touched
00027C5E 0C00 0030                  		cmpi.b	#$30,d0
00027C62 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
00027C64 4200                       		clr.b	d0		; remove the glass block when it's destroyed
00027C66                            
00027C66                            Obj09_GlassUpdate:
00027C66 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
00027C6A                            
00027C6A                            Obj09_GlassSnd:
00027C6A 303C 00B5                  		move.w	#$B5,d0
00027C6E 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play glass block sound
00027C74                            ; ===========================================================================
00027C74                            
00027C74                            Obj09_NoGlass:
00027C74 4E75                       		rts	
00027C76                            ; End of function Obj09_ChkItems2
00027C76                            
00027C76                            ; ===========================================================================
00027C76                            ; ---------------------------------------------------------------------------
00027C76                            ; Object 10 - blank
00027C76                            ; ---------------------------------------------------------------------------
00027C76                            
00027C76                            Obj10:					; XREF: Obj_Index
00027C76                            ; ----------------------------------------------------------------------------
00027C76                            ; Object 86 - Flipper from CNZ
00027C76                            ; ----------------------------------------------------------------------------
00027C76                            ; Sprite_2B140:
00027C76 7000                       	moveq	#0,d0
00027C78 1028 0024                  	move.b	routine(a0),d0
00027C7C 323B 0000                  	move.w	off_2B152(pc,d0.w),d1
00027C80 4EBB 1000                  	jsr	off_2B152(pc,d1.w)
00027C84 6000 0000                  	bra.w	JmpTo27_MarkObjGone
00027C88                            ; ===========================================================================
00027C88                            off_2B152:
00027C88 0000                       	dc.w loc_2B158-off_2B152
00027C8A 0000                       	dc.w loc_2B194-off_2B152; 1
00027C8C 0000                       	dc.w loc_2B312-off_2B152; 2
00027C8E                            ; ===========================================================================
00027C8E                            
00027C8E                            loc_2B158:
00027C8E 5428 0024                  	addq.b	#2,routine(a0)
00027C92 217C 0000 0000 0004        	move.l	#Obj86_MapUnc_2B45A,mappings(a0)
00027C9A 317C 43B2 0002             	move.w	#$43B2,art_tile(a0)
00027CA0                            ;	bsr.w	JmpTo50_Adjust2PArtPointer
00027CA0 0028 0004 0001             	ori.b	#4,render_flags(a0)
00027CA6 117C 0018 0023             	move.b	#$18,width_pixels(a0)
00027CAC 317C 0200 0018             	move.w	#$200,priority(a0)
00027CB2 4A28 0028                  	tst.b	subtype(a0)
00027CB6 6700                       	beq.s	loc_2B194
00027CB8 5428 0024                  	addq.b	#2,routine(a0)
00027CBC 117C 0002 001C             	move.b	#2,anim(a0)
00027CC2 6000 0000                  	bra.w	loc_2B312
00027CC6                            ; ===========================================================================
00027CC6                            
00027CC6                            loc_2B194:
00027CC6                            
00027CC6 4A78 FE08                  	tst.w	(Debug_placement_mode).w
00027CCA 6600                       	bne.s	return_2B208
00027CCC 45F9 0000 0000             	lea	(byte_2B3C6).l,a2
00027CD2 1028 001A                  	move.b	mapping_frame(a0),d0
00027CD6 6700                       	beq.s	loc_2B1B6
00027CD8 45F9 0000 0000             	lea	(byte_2B3EA).l,a2
00027CDE 5300                       	subq.b	#1,d0
00027CE0 6700                       	beq.s	loc_2B1B6
00027CE2 45F9 0000 0000             	lea	(byte_2B40E).l,a2
00027CE8                            
00027CE8                            loc_2B1B6:
00027CE8 323C 0023                  	move.w	#$23,d1
00027CEC 343C 0006                  	move.w	#6,d2
00027CF0 3828 0008                  	move.w	x_pos(a0),d4
00027CF4 6100 0000                  	bsr.w	JmpTo2_SolidObject86_30
00027CF8 47E8 0036                  	lea	objoff_36(a0),a3
00027CFC 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
00027D00 3A38 F602                  	move.w	(Ctrl_1_Logical).w,d5
00027D04 7C03                       	moveq	#3,d6
00027D06 6100                       	bsr.s	loc_2B20A
00027D08 524B                       	addq.w	#1,a3
00027D0A 43F8 D040                  	lea	(Sidekick).w,a1 ; a1=character
00027D0E 3A38 F606                  	move.w	(Ctrl_2).w,d5
00027D12 7C04                       	moveq	#4,d6
00027D14 6100                       	bsr.s	loc_2B20A
00027D16 4A28 0038                  	tst.b	objoff_38(a0)
00027D1A 6700                       	beq.s	loc_2B1FE
00027D1C 4228 0038                  	clr.b	objoff_38(a0)
00027D20 6100 0000                  	bsr.w	loc_2B290
00027D24 534B                       	subq.w	#1,a3
00027D26 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
00027D2A 7C03                       	moveq	#3,d6
00027D2C 6100 0000                  	bsr.w	loc_2B290
00027D30                            
00027D30                            loc_2B1FE:
00027D30 43F9 0000 0000             	lea	(off_2B432).l,a1
00027D36 6000 0000                  	bra.w	JmpTo9_AnimateSprite
00027D3A                            ; ===========================================================================
00027D3A                            
00027D3A                            return_2B208:
00027D3A 4E75                       	rts
00027D3C                            ; ===========================================================================
00027D3C                            
00027D3C                            loc_2B20A:
00027D3C 1013                       	move.b	(a3),d0
00027D3E 6600                       	bne.s	loc_2B23C
00027D40 0D28 0022                  	btst	d6,status(a0)
00027D44 67F4                       	beq.s	return_2B208
00027D46 11FC 0001 F7CC             	move.b	#1,(Control_locked).w
00027D4C 137C 000E 0016             	move.b	#$E,y_radius(a1)
00027D52 137C 0007 0017             	move.b	#7,x_radius(a1)
00027D58 137C 0002 001C             	move.b	#2,anim(a1)
00027D5E 08E9 0002 0022             	bset	#2,status(a1)
00027D64 6600                       	bne.s	loc_2B238
00027D66 5A69 000C                  	addq.w	#5,y_pos(a1)
00027D6A                            
00027D6A                            loc_2B238:
00027D6A 5213                       	addq.b	#1,(a3)
00027D6C 4E75                       	rts
00027D6E                            ; ===========================================================================
00027D6E                            
00027D6E                            loc_2B23C:
00027D6E 0245 0070                  	andi.w	#$70,d5
00027D72 6600                       	bne.s	loc_2B288
00027D74 0D28 0022                  	btst	d6,status(a0)
00027D78 6600                       	bne.s	loc_2B254
00027D7A 11FC 0000 F7CC             	move.b	#0,(Control_locked).w
00027D80 16BC 0000                  	move.b	#0,(a3)
00027D84 4E75                       	rts
00027D86                            ; ===========================================================================
00027D86                            
00027D86                            loc_2B254:
00027D86 7200                       	moveq	#0,d1
00027D88 1228 001A                  	move.b	mapping_frame(a0),d1
00027D8C 5341                       	subq.w	#1,d1
00027D8E 08E9 0000 0022             	bset	#0,status(a1)
00027D94 0828 0000 0022             	btst	#0,status(a0)
00027D9A 6600                       	bne.s	loc_2B272
00027D9C 4441                       	neg.w	d1
00027D9E 08A9 0000 0022             	bclr	#0,status(a1)
00027DA4                            
00027DA4                            loc_2B272:
00027DA4 D369 0008                  	add.w	d1,x_pos(a1)
00027DA8 E149                       	lsl.w	#8,d1
00027DAA 3341 0010                  	move.w	d1,x_vel(a1)
00027DAE 3341 0020                  	move.w	d1,inertia(a1)
00027DB2 337C 0000 0012             	move.w	#0,y_vel(a1)
00027DB8 4E75                       	rts
00027DBA                            ; ===========================================================================
00027DBA                            
00027DBA                            loc_2B288:
00027DBA 117C 0001 0038             	move.b	#1,objoff_38(a0)
00027DC0 4E75                       	rts
00027DC2                            ; ===========================================================================
00027DC2                            
00027DC2                            loc_2B290:
00027DC2 0DA8 0022                  	bclr	d6,status(a0)
00027DC6 6700 FF72                  	beq.w	return_2B208
00027DCA 3029 0008                  	move.w	x_pos(a1),d0
00027DCE 9068 0008                  	sub.w	x_pos(a0),d0
00027DD2 0828 0000 0022             	btst	#0,status(a0)
00027DD8 6700                       	beq.s	loc_2B2AA
00027DDA 4440                       	neg.w	d0
00027DDC                            
00027DDC                            loc_2B2AA:
00027DDC 0640 0023                  	addi.w	#$23,d0
00027DE0 3400                       	move.w	d0,d2
00027DE2 0C42 0040                  	cmpi.w	#$40,d2
00027DE6 6500                       	bcs.s	loc_2B2BA
00027DE8 343C 0040                  	move.w	#$40,d2
00027DEC                            
00027DEC                            loc_2B2BA:
00027DEC EB4A                       	lsl.w	#5,d2
00027DEE 0642 0800                  	addi.w	#$800,d2
00027DF2 4442                       	neg.w	d2
00027DF4 E440                       	asr.w	#2,d0
00027DF6 0640 0040                  	addi.w	#$40,d0
00027DFA 6100 0000                  	bsr.w	JmpTo11_CalcSine
00027DFE C1C2                       	muls.w	d2,d0
00027E00 C3C2                       	muls.w	d2,d1
00027E02 E080                       	asr.l	#8,d0
00027E04 E081                       	asr.l	#8,d1
00027E06 3340 0012                  	move.w	d0,y_vel(a1)
00027E0A 0828 0000 0022             	btst	#0,status(a0)
00027E10 6700                       	beq.s	loc_2B2E2
00027E12 4441                       	neg.w	d1
00027E14                            
00027E14                            loc_2B2E2:
00027E14 3341 0010                  	move.w	d1,x_vel(a1)
00027E18 08E9 0001 0022             	bset	#1,status(a1)
00027E1E 08A9 0003 0022             	bclr	#3,status(a1)
00027E24 137C 0002 0024             	move.b	#2,routine(a1)
00027E2A 11FC 0000 F7CC             	move.b	#0,(Control_locked).w
00027E30 117C 0001 001C             	move.b	#1,anim(a0)
00027E36 16BC 0000                  	move.b	#0,(a3)
00027E3A 303C 00DB                  	move.w	#$DB,d0
00027E3E 4EF9 0000 3212             	jmp	(PlaySound).l
00027E44                            ; ===========================================================================
00027E44                            
00027E44                            loc_2B312:
00027E44                            
00027E44 323C 0013                  	move.w	#$13,d1
00027E48 343C 0018                  	move.w	#$18,d2
00027E4C 363C 0019                  	move.w	#$19,d3
00027E50 3828 0008                  	move.w	x_pos(a0),d4
00027E54 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
00027E58 7C03                       	moveq	#3,d6
00027E5A 48E7 7800                  	movem.l	d1-d4,-(sp)
00027E5E 6100 0000                  	bsr.w	JmpTo6_loc_1978E
00027E62 0828 0005 0022             	btst	#5,status(a0)
00027E68 6700                       	beq.s	loc_2B352
00027E6A 6100                       	bsr.s	loc_2B35C
00027E6C                            
00027E6C                            ;loc_2B33A:
00027E6C                            ;	movem.l	(sp)+,d1-d4
00027E6C                            ;	lea	(Sidekick).w,a1 ; a1=character
00027E6C                            ;	moveq	#4,d6
00027E6C                            ;	bsr.w	JmpTo6_loc_1978E
00027E6C                            ;	btst	#6,status(a0)
00027E6C                            ;	beq.s	loc_2B352
00027E6C                            ;	bsr.s	loc_2B35C
00027E6C                            
00027E6C                            loc_2B352:
00027E6C 43F9 0000 0000             	lea	(off_2B432).l,a1
00027E72 6000 0000                  	bra.w	JmpTo9_AnimateSprite
00027E76                            ; ===========================================================================
00027E76                            
00027E76                            loc_2B35C:
00027E76 317C 0300 001C             	move.w	#$300,anim(a0)
00027E7C 337C F000 0010             	move.w	#-$1000,x_vel(a1)
00027E82 5069 0008                  	addq.w	#8,x_pos(a1)
00027E86 08E9 0000 0022             	bset	#0,status(a1)
00027E8C 3028 0008                  	move.w	x_pos(a0),d0
00027E90 9069 0008                  	sub.w	x_pos(a1),d0
00027E94 6400                       	bcc.s	loc_2B392
00027E96 08A9 0000 0022             	bclr	#0,status(a1)
00027E9C 0469 0010 0008             	subi.w	#$10,x_pos(a1)
00027EA2 4469 0010                  	neg.w	x_vel(a1)
00027EA6 317C 0400 001C             	move.w	#$400,anim(a0)
00027EAC                            
00027EAC                            loc_2B392:
00027EAC 337C 000F 002E             	move.w	#$F,move_lock(a1)
00027EB2 3369 0010 0020             	move.w	x_vel(a1),inertia(a1)
00027EB8 137C 000E 0016             	move.b	#$E,y_radius(a1)
00027EBE 137C 0007 0017             	move.b	#7,x_radius(a1)
00027EC4 137C 0002 001C             	move.b	#2,anim(a1)
00027ECA 08E9 0002 0022             	bset	#2,status(a1)
00027ED0 6600                       	bne.s	loc_2B3BC
00027ED2 5A69 000C                  	addq.w	#5,y_pos(a1)
00027ED6                            
00027ED6                            loc_2B3BC:
00027ED6 303C 00DB                  	move.w	#$DB,d0
00027EDA 4EF9 0000 3212             	jmp	(PlaySound).l
00027EE0                            ; ===========================================================================
00027EE0                            byte_2B3C6:
00027EE0 0707 0707 0707 0708 090A+  	dc.b   7,  7,  7,  7,  7,  7,  7,  8,  9, $A, $B, $A,  9,  8,  7,  6
00027EF0 0504 0302 0100 FFFE FDFC+  	dc.b   5,  4,  3,  2,  1,  0,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6; 16
00027F00 F5F4 F3F2                  	dc.b $F5,$F4,$F3,$F2	; 32
00027F04                            byte_2B3EA:
00027F04 0606 0606 0606 0708 0909+  	dc.b   6,  6,  6,  6,  6,  6,  7,  8,  9,  9,  9,  9,  9,  9,  8,  8
00027F14 0808 0808 0707 0707 0606+  	dc.b   8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  4,  4; 16
00027F24 0404 0404                  	dc.b   4,  4,  4,  4	; 32
00027F28                            byte_2B40E:
00027F28 0505 0505 0506 0708 090A+  	dc.b   5,  5,  5,  5,  5,  6,  7,  8,  9, $A, $B, $B, $C, $C, $D, $D
00027F38 0E0E 0F0F 1010 1111 1212+  	dc.b  $E, $E, $F, $F,$10,$10,$11,$11,$12,$12,$11,$11,$10,$10,$10,$10; 16
00027F48 1010 1010                  	dc.b $10,$10,$10,$10	; 32
00027F4C                            
00027F4C                            ; animation script
00027F4C                            off_2B432:
00027F4C 0000                       	dc.w byte_2B43C-off_2B432
00027F4E 0000                       	dc.w byte_2B43F-off_2B432; 1
00027F50 0000                       	dc.w byte_2B445-off_2B432; 2
00027F52 0000                       	dc.w byte_2B448-off_2B432; 3
00027F54 0000                       	dc.w byte_2B451-off_2B432; 4
00027F56 0F00 FF                    byte_2B43C:	dc.b  $F,  0,$FF
00027F59 0301 0201 FD00             byte_2B43F:	dc.b   3,  1,  2,  1,$FD,  0
00027F5F 0F04 FF                    byte_2B445:	dc.b  $F,  4,$FF
00027F62 0005 0403 0303 03FD 02     byte_2B448:	dc.b   0,  5,  4,  3,  3,  3,  3,$FD,  2
00027F6B 0003 0405 0505 05FD 02     byte_2B451:	dc.b   0,  3,  4,  5,  5,  5,  5,$FD,  2
00027F74                            	even
00027F74                            ; ----------------------------------------------------------------------------
00027F74                            ; sprite mappings
00027F74                            ; ----------------------------------------------------------------------------
00027F74                            Map_obj10:
00027F74                            Obj86_MapUnc_2B45A:	include "mappings/sprite/Flippers.asm"
00027F74                            ; --------------------------------------------------------------------------------
00027F74                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00027F74                            ; --------------------------------------------------------------------------------
00027F74                            
00027F74                            SME_ifQsP:	
00027F74 0000 0000                  		dc.w SME_ifQsP_C-SME_ifQsP, SME_ifQsP_1C-SME_ifQsP	
00027F78 0000 0000                  		dc.w SME_ifQsP_27-SME_ifQsP, SME_ifQsP_37-SME_ifQsP	
00027F7C 0000 0000                  		dc.w SME_ifQsP_47-SME_ifQsP, SME_ifQsP_5C-SME_ifQsP	
00027F80 03                         SME_ifQsP_C:	dc.b 3	
00027F81 F70B 000C E7               		dc.b $F7, $B, 0, $C, $E7	
00027F86 FE01 0018 FF               		dc.b $FE, 1, 0, $18, $FF	
00027F8B 0105 001A 07               		dc.b 1, 5, 0, $1A, 7	
00027F90 02                         SME_ifQsP_1C:	dc.b 2	
00027F91 F80D 0000 E8               		dc.b $F8, $D, 0, 0, $E8	
00027F96 F805 0008 08               		dc.b $F8, 5, 0, 8, 8	
00027F9B 03                         SME_ifQsP_27:	dc.b 3	
00027F9C E90B 100C E7               		dc.b $E9, $B, $10, $C, $E7	
00027FA1 F201 1018 FF               		dc.b $F2, 1, $10, $18, $FF	
00027FA6 EF05 101A 07               		dc.b $EF, 5, $10, $1A, 7	
00027FAB 03                         SME_ifQsP_37:	dc.b 3	
00027FAC E709 0024 F1               		dc.b $E7, 9, 0, $24, $F1	
00027FB1 F709 002A EF               		dc.b $F7, 9, 0, $2A, $EF	
00027FB6 0705 0030 EF               		dc.b 7, 5, 0, $30, $EF	
00027FBB 04                         SME_ifQsP_47:	dc.b 4	
00027FBC E803 001E F8               		dc.b $E8, 3, 0, $1E, $F8	
00027FC1 E803 081E 00               		dc.b $E8, 3, 8, $1E, 0	
00027FC6 0801 0022 F8               		dc.b 8, 1, 0, $22, $F8	
00027FCB 0801 0822 00               		dc.b 8, 1, 8, $22, 0	
00027FD0 03                         SME_ifQsP_5C:	dc.b 3	
00027FD1 E709 0824 F7               		dc.b $E7, 9, 8, $24, $F7	
00027FD6 F709 082A F9               		dc.b $F7, 9, 8, $2A, $F9	
00027FDB 0705 0830 01               		dc.b 7, 5, 8, $30, 1	
00027FE0                            		even
00027FE0                            		even
00027FE0                            	even
00027FE0                            ; ===========================================================================
00027FE0 4E71                       	nop
00027FE2                            
00027FE2                            JmpTo27_MarkObjGone:
00027FE2 4EF9 0001 883A             	jmp	MarkObjGone
00027FE8                            ; ===========================================================================
00027FE8                            
00027FE8                            JmpTo9_AnimateSprite:
00027FE8 4EF9 0001 2624             	jmp	AnimateSprite
00027FEE                            ; ===========================================================================
00027FEE                            
00027FEE                            ;JmpTo50_Adjust2PArtPointer
00027FEE                            ;	jmp	Adjust2PArtPointer
00027FEE                            ; ===========================================================================
00027FEE                            
00027FEE                            JmpTo11_CalcSine:
00027FEE 4EF9 0000 8DA4             	jmp	(CalcSine).l
00027FF4                            ; ===========================================================================
00027FF4                            
00027FF4                            JmpTo6_loc_1978E:
00027FF4 4EF9 0001 8F1E             	jmp	SolidObject
00027FFA                            ; ===========================================================================
00027FFA                            
00027FFA                            JmpTo2_SolidObject86_30:
00027FFA 4EF9 0001 8FB2             	jmp	SolidObject71
00028000                            ; ===========================================================================
00028000                            ; ---------------------------------------------------------------------------
00028000                            ; Subroutine to	animate	level graphics
00028000                            ; ---------------------------------------------------------------------------
00028000                            
00028000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028000                            
00028000                            
00028000                            AniArt_Load:				; XREF: Demo_Time; loc_F54
00028000 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00028004 6600                       		bne.s	AniArt_Pause	; if yes, branch
00028006 4DF9 00C0 0000             		lea	($C00000).l,a6
0002800C 4EB9 0000 0000             		jsr	AniArt_GiantRing
00028012 7000                       		moveq	#0,d0
00028014 1038 FE10                  		move.b	($FFFFFE10).w,d0
00028018 D040                       		add.w	d0,d0
0002801A 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0002801E 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
00028022                            ; ===========================================================================
00028022                            
00028022                            AniArt_Pause:
00028022 4E75                       		rts	
00028024                            ; End of function AniArt_Load
00028024                            
00028024                            ; ===========================================================================
00028024 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
00028028 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0002802C 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
00028030 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_none-AniArt_Index
00028034                            ; ===========================================================================
00028034                            ; ---------------------------------------------------------------------------
00028034                            ; Animated pattern routine - Green Hill
00028034                            ; ---------------------------------------------------------------------------
00028034                            
00028034                            AniArt_GHZ:				; XREF: AniArt_Index
00028034 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
00028038 6A00                       		bpl.s	loc_1C08A
0002803A 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
00028040 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
00028046 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0002804A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0002804E 0240 0001                  		andi.w	#1,d0
00028052 6700                       		beq.s	loc_1C078
00028054 43E9 0100                  		lea	$100(a1),a1	; load next frame
00028058                            
00028058                            loc_1C078:
00028058 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
00028062 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
00028066 6000 0000                  		bra.w	LoadTiles
0002806A                            ; ===========================================================================
0002806A                            
0002806A                            loc_1C08A:
0002806A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0002806E 6A00                       		bpl.s	loc_1C0C0
00028070 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
00028076 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0002807C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
00028080 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00028084 0240 0001                  		andi.w	#1,d0
00028088 6700                       		beq.s	loc_1C0AE
0002808A 43E9 0200                  		lea	$200(a1),a1
0002808E                            
0002808E                            loc_1C0AE:
0002808E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
00028098 323C 000F                  		move.w	#$F,d1
0002809C 6000 0000                  		bra.w	LoadTiles
000280A0                            ; ===========================================================================
000280A0                            
000280A0                            loc_1C0C0:
000280A0 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
000280A4 6A00                       		bpl.s	locret_1C10C
000280A6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
000280AC 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
000280B0 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
000280B4 0240 0003                  		andi.w	#3,d0
000280B8 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
000280BC 0800 0000                  		btst	#0,d0
000280C0 6600                       		bne.s	loc_1C0E8
000280C2 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
000280C8                            
000280C8                            loc_1C0E8:
000280C8 EF48                       		lsl.w	#7,d0
000280CA 3200                       		move.w	d0,d1
000280CC D040                       		add.w	d0,d0
000280CE D041                       		add.w	d1,d0
000280D0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
000280DA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
000280E0 43F1 0000                  		lea	(a1,d0.w),a1
000280E4 323C 000B                  		move.w	#$B,d1
000280E8 4EB9 0000 0000             		jsr	LoadTiles
000280EE                            
000280EE                            locret_1C10C:
000280EE 4E75                       		rts	
000280F0                            ; ===========================================================================
000280F0 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
000280F4                            ; ===========================================================================
000280F4                            ; ---------------------------------------------------------------------------
000280F4                            ; Animated pattern routine - Marble
000280F4                            ; ---------------------------------------------------------------------------
000280F4                            
000280F4                            AniArt_MZ:				; XREF: AniArt_Index
000280F4 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
000280F8 6A00                       		bpl.s	loc_1C150
000280FA 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
00028100 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
00028106 7000                       		moveq	#0,d0
00028108 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0002810C 5200                       		addq.b	#1,d0
0002810E 0C00 0003                  		cmpi.b	#3,d0
00028112 6600                       		bne.s	loc_1C134
00028114 7000                       		moveq	#0,d0
00028116                            
00028116                            loc_1C134:
00028116 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0002811A C0FC 0100                  		mulu.w	#$100,d0
0002811E D2C0                       		adda.w	d0,a1
00028120 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0002812A 323C 0007                  		move.w	#7,d1
0002812E 4EB9 0000 0000             		jsr	LoadTiles
00028134                            
00028134                            loc_1C150:
00028134 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00028138 6A00                       		bpl.s	loc_1C1AE
0002813A 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
00028140 7000                       		moveq	#0,d0
00028142 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00028146 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0002814C EE58                       		ror.w	#7,d0
0002814E D8C0                       		adda.w	d0,a4
00028150 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0002815A 7600                       		moveq	#0,d3
0002815C 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
00028160 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00028164 1638 FE68                  		move.b	($FFFFFE68).w,d3
00028168 343C 0003                  		move.w	#3,d2
0002816C                            
0002816C                            loc_1C188:
0002816C 3003                       		move.w	d3,d0
0002816E D040                       		add.w	d0,d0
00028170 0240 001E                  		andi.w	#$1E,d0
00028174 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0002817A 3033 0000                  		move.w	(a3,d0.w),d0
0002817E 47F3 0000                  		lea	(a3,d0.w),a3
00028182 224C                       		movea.l	a4,a1
00028184 323C 001F                  		move.w	#$1F,d1
00028188 4E93                       		jsr	(a3)
0002818A 5843                       		addq.w	#4,d3
0002818C 51CA FFDE                  		dbf	d2,loc_1C188
00028190 4E75                       		rts	
00028192                            ; ===========================================================================
00028192                            
00028192                            loc_1C1AE:
00028192 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
00028196 6A00 0000                  		bpl.w	locret_1C1EA
0002819A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
000281A0 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
000281A6 7000                       		moveq	#0,d0
000281A8 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
000281AC 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
000281B0 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
000281B6 C0FC 00C0                  		mulu.w	#$C0,d0
000281BA D2C0                       		adda.w	d0,a1
000281BC 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
000281C6 323C 0005                  		move.w	#5,d1
000281CA 6000 0000                  		bra.w	LoadTiles
000281CE                            ; ===========================================================================
000281CE                            
000281CE                            locret_1C1EA:
000281CE 4E75                       		rts	
000281D0                            ; ===========================================================================
000281D0                            ; ---------------------------------------------------------------------------
000281D0                            ; Animated pattern routine - Scrap Brain
000281D0                            ; ---------------------------------------------------------------------------
000281D0                            
000281D0                            AniArt_SBZ:				; XREF: AniArt_Index
000281D0 7000                       		moveq	#0,d0
000281D2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000281D6 D040                       		add.w	d0,d0
000281D8 303B 0000                  		move.w	AniArt_SBZ_Index(pc,d0.w),d0
000281DC 4EFB 0000                  		jmp	AniArt_SBZ_Index(pc,d0.w)
000281E0                            
000281E0                            AniArt_SBZ_Index:
000281E0 0000                       		dc.w AniArt_SBZOut-AniArt_SBZ_Index
000281E2 0000                       		dc.w AniArt_SBZIn-AniArt_SBZ_Index
000281E4 0000                       		dc.w AniArt_SBZIn-AniArt_SBZ_Index
000281E6 0000                       		dc.w AniArt_SBZOut-AniArt_SBZ_Index ; this if you have a 4th SB act using outside bg
000281E8                            AniArt_SBZIn:
000281E8 4E75                       		rts
000281EA                            
000281EA                            AniArt_SBZOut:
000281EA                            ; ===========================================================================
000281EA                            
000281EA                            loc_1C1F8:
000281EA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
000281EE 6A00                       		bpl.s	loc_1C250
000281F0 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
000281F6 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
000281FC 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
00028206 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0002820A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0002820E 0240 0007                  		andi.w	#7,d0
00028212 6700                       		beq.s	loc_1C234
00028214 5340                       		subq.w	#1,d0
00028216 C0FC 0180                  		mulu.w	#$180,d0
0002821A 43F1 0000                  		lea	(a1,d0.w),a1
0002821E 323C 000B                  		move.w	#$B,d1
00028222 6000 0000                  		bra.w	LoadTiles
00028226                            ; ===========================================================================
00028226                            
00028226                            loc_1C234:
00028226 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0002822C                            
0002822C                            loc_1C23A:
0002822C 323C 0005                  		move.w	#5,d1
00028230 4EB9 0000 0000             		jsr	LoadTiles
00028236 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0002823C 323C 0005                  		move.w	#5,d1
00028240 6000 0000                  		bra.w	LoadTiles
00028244                            ; ===========================================================================
00028244                            
00028244                            loc_1C250:
00028244 4A38 F7B5                  		tst.b	($FFFFF7B5).w
00028248 6700                       		beq.s	loc_1C25C
0002824A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0002824E 6000                       		bra.s	locret_1C2A0
00028250                            ; ===========================================================================
00028250                            
00028250                            loc_1C25C:
00028250 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00028254 6A00                       		bpl.s	locret_1C2A0
00028256 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0002825C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
00028262 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0002826C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
00028270 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00028274 0240 0007                  		andi.w	#7,d0
00028278 6700                       		beq.s	loc_1C298
0002827A 5340                       		subq.w	#1,d0
0002827C C0FC 0180                  		mulu.w	#$180,d0
00028280 43F1 0000                  		lea	(a1,d0.w),a1
00028284 323C 000B                  		move.w	#$B,d1
00028288 6000 0000                  		bra.w	LoadTiles
0002828C                            ; ===========================================================================
0002828C                            
0002828C                            loc_1C298:
0002828C 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
00028292 6098                       		bra.s	loc_1C23A
00028294                            ; ===========================================================================
00028294                            
00028294                            locret_1C2A0:
00028294 4E75                       		rts	
00028296                            ; ===========================================================================
00028296                            ; ---------------------------------------------------------------------------
00028296                            ; Animated pattern routine - ending sequence
00028296                            ; ---------------------------------------------------------------------------
00028296                            
00028296                            AniArt_Ending:				; XREF: AniArt_Index
00028296 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0002829A 6A00                       		bpl.s	loc_1C2F4
0002829C 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
000282A2 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
000282A8 45F8 9400                  		lea	($FFFF9400).w,a2
000282AC 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
000282B0 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
000282B4 0240 0001                  		andi.w	#1,d0
000282B8 6700                       		beq.s	loc_1C2CE
000282BA 43E9 0200                  		lea	$200(a1),a1
000282BE 45EA 0200                  		lea	$200(a2),a2
000282C2                            
000282C2                            loc_1C2CE:
000282C2 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
000282CC 323C 000F                  		move.w	#$F,d1
000282D0 4EB9 0000 0000             		jsr	LoadTiles
000282D6 224A                       		movea.l	a2,a1
000282D8 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
000282E2 323C 000F                  		move.w	#$F,d1
000282E6 6000 0000                  		bra.w	LoadTiles
000282EA                            ; ===========================================================================
000282EA                            
000282EA                            loc_1C2F4:
000282EA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
000282EE 6A00                       		bpl.s	loc_1C33C
000282F0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
000282F6 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
000282FA 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
000282FE 0240 0007                  		andi.w	#7,d0
00028302 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
00028306 EF48                       		lsl.w	#7,d0
00028308 3200                       		move.w	d0,d1
0002830A D040                       		add.w	d0,d0
0002830C D041                       		add.w	d1,d0
0002830E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
00028318 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0002831E 43F1 0000                  		lea	(a1,d0.w),a1
00028322 323C 000B                  		move.w	#$B,d1
00028326 6000 0000                  		bra.w	LoadTiles
0002832A                            ; ===========================================================================
0002832A 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
00028332                            ; ===========================================================================
00028332                            
00028332                            loc_1C33C:
00028332 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
00028336 6A00                       		bpl.s	loc_1C37A
00028338 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0002833E 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
00028342 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
00028346 0240 0003                  		andi.w	#3,d0
0002834A 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0002834E E148                       		lsl.w	#8,d0
00028350 D040                       		add.w	d0,d0
00028352 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0002835C 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
00028360 43F1 0000                  		lea	(a1,d0.w),a1
00028364 323C 000F                  		move.w	#$F,d1
00028368 6000 0000                  		bra.w	LoadTiles
0002836C                            ; ===========================================================================
0002836C 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
00028370                            ; ===========================================================================
00028370                            
00028370                            loc_1C37A:
00028370 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
00028374 6A00                       		bpl.s	locret_1C3B4
00028376 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0002837C 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
00028380 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
00028384 0240 0003                  		andi.w	#3,d0
00028388 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0002838C E148                       		lsl.w	#8,d0
0002838E D040                       		add.w	d0,d0
00028390 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0002839A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0002839E 43F1 0000                  		lea	(a1,d0.w),a1
000283A2 323C 000F                  		move.w	#$F,d1
000283A6 6000 0000                  		bra.w	LoadTiles
000283AA                            ; ===========================================================================
000283AA                            
000283AA                            locret_1C3B4:
000283AA 4E75                       		rts	
000283AC                            ; ===========================================================================
000283AC                            
000283AC                            AniArt_none:				; XREF: AniArt_Index
000283AC 4E75                       		rts	
000283AE                            
000283AE                            ; ---------------------------------------------------------------------------
000283AE                            ; Subroutine to	load (d1 - 1) 8x8 tiles
000283AE                            ; ---------------------------------------------------------------------------
000283AE                            
000283AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000283AE                            
000283AE                            
000283AE                            LoadTiles:
000283AE 2C99                       		move.l	(a1)+,(a6)
000283B0 2C99                       		move.l	(a1)+,(a6)
000283B2 2C99                       		move.l	(a1)+,(a6)
000283B4 2C99                       		move.l	(a1)+,(a6)
000283B6 2C99                       		move.l	(a1)+,(a6)
000283B8 2C99                       		move.l	(a1)+,(a6)
000283BA 2C99                       		move.l	(a1)+,(a6)
000283BC 2C99                       		move.l	(a1)+,(a6)
000283BE 51C9 FFEE                  		dbf	d1,LoadTiles
000283C2 4E75                       		rts	
000283C4                            ; End of function LoadTiles
000283C4                            
000283C4                            ; ===========================================================================
000283C4                            ; ---------------------------------------------------------------------------
000283C4                            ; Animated pattern routine - more Marble Zone
000283C4                            ; ---------------------------------------------------------------------------
000283C4 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
000283C8 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
000283CC 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
000283D0 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
000283D4 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
000283D8 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
000283DC 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
000283E0 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
000283E4                            ; ===========================================================================
000283E4                            
000283E4                            loc_1C3EE:				; XREF: AniArt_MZextra
000283E4 2C91                       		move.l	(a1),(a6)
000283E6 43E9 0010                  		lea	x_vel(a1),a1
000283EA 51C9 FFF8                  		dbf	d1,loc_1C3EE
000283EE 4E75                       		rts	
000283F0                            ; ===========================================================================
000283F0                            
000283F0                            loc_1C3FA:				; XREF: AniArt_MZextra
000283F0 2029 0002                  		move.l	2(a1),d0
000283F4 1029 0001                  		move.b	1(a1),d0
000283F8 E098                       		ror.l	#8,d0
000283FA 2C80                       		move.l	d0,(a6)
000283FC 43E9 0010                  		lea	x_vel(a1),a1
00028400 51C9 FFEE                  		dbf	d1,loc_1C3FA
00028404 4E75                       		rts	
00028406                            ; ===========================================================================
00028406                            
00028406                            loc_1C410:				; XREF: AniArt_MZextra
00028406 2CA9 0002                  		move.l	2(a1),(a6)
0002840A 43E9 0010                  		lea	x_vel(a1),a1
0002840E 51C9 FFF6                  		dbf	d1,loc_1C410
00028412 4E75                       		rts	
00028414                            ; ===========================================================================
00028414                            
00028414                            loc_1C41E:				; XREF: AniArt_MZextra
00028414 2029 0004                  		move.l	4(a1),d0
00028418 1029 0003                  		move.b	3(a1),d0
0002841C E098                       		ror.l	#8,d0
0002841E 2C80                       		move.l	d0,(a6)
00028420 43E9 0010                  		lea	x_vel(a1),a1
00028424 51C9 FFEE                  		dbf	d1,loc_1C41E
00028428 4E75                       		rts	
0002842A                            ; ===========================================================================
0002842A                            
0002842A                            loc_1C434:				; XREF: AniArt_MZextra
0002842A 2CA9 0004                  		move.l	4(a1),(a6)
0002842E 43E9 0010                  		lea	x_vel(a1),a1
00028432 51C9 FFF6                  		dbf	d1,loc_1C434
00028436 4E75                       		rts	
00028438                            ; ===========================================================================
00028438                            
00028438                            loc_1C442:				; XREF: AniArt_MZextra
00028438 2029 0006                  		move.l	6(a1),d0
0002843C 1029 0005                  		move.b	5(a1),d0
00028440 E098                       		ror.l	#8,d0
00028442 2C80                       		move.l	d0,(a6)
00028444 43E9 0010                  		lea	x_vel(a1),a1
00028448 51C9 FFEE                  		dbf	d1,loc_1C442
0002844C 4E75                       		rts	
0002844E                            ; ===========================================================================
0002844E                            
0002844E                            loc_1C458:				; XREF: AniArt_MZextra
0002844E 2CA9 0006                  		move.l	6(a1),(a6)
00028452 43E9 0010                  		lea	x_vel(a1),a1
00028456 51C9 FFF6                  		dbf	d1,loc_1C458
0002845A 4E75                       		rts	
0002845C                            ; ===========================================================================
0002845C                            
0002845C                            loc_1C466:				; XREF: AniArt_MZextra
0002845C 2029 0008                  		move.l	8(a1),d0
00028460 1029 0007                  		move.b	7(a1),d0
00028464 E098                       		ror.l	#8,d0
00028466 2C80                       		move.l	d0,(a6)
00028468 43E9 0010                  		lea	x_vel(a1),a1
0002846C 51C9 FFEE                  		dbf	d1,loc_1C466
00028470 4E75                       		rts	
00028472                            ; ===========================================================================
00028472                            
00028472                            loc_1C47C:				; XREF: AniArt_MZextra
00028472 2CA9 0008                  		move.l	8(a1),(a6)
00028476 43E9 0010                  		lea	x_vel(a1),a1
0002847A 51C9 FFF6                  		dbf	d1,loc_1C47C
0002847E 4E75                       		rts	
00028480                            ; ===========================================================================
00028480                            
00028480                            loc_1C48A:				; XREF: AniArt_MZextra
00028480 2029 000A                  		move.l	$A(a1),d0
00028484 1029 0009                  		move.b	9(a1),d0
00028488 E098                       		ror.l	#8,d0
0002848A 2C80                       		move.l	d0,(a6)
0002848C 43E9 0010                  		lea	x_vel(a1),a1
00028490 51C9 FFEE                  		dbf	d1,loc_1C48A
00028494 4E75                       		rts	
00028496                            ; ===========================================================================
00028496                            
00028496                            loc_1C4A0:				; XREF: AniArt_MZextra
00028496 2CA9 000A                  		move.l	$A(a1),(a6)
0002849A 43E9 0010                  		lea	x_vel(a1),a1
0002849E 51C9 FFF6                  		dbf	d1,loc_1C4A0
000284A2 4E75                       		rts	
000284A4                            ; ===========================================================================
000284A4                            
000284A4                            loc_1C4AE:				; XREF: AniArt_MZextra
000284A4 2029 000C                  		move.l	$C(a1),d0
000284A8 1029 000B                  		move.b	$B(a1),d0
000284AC E098                       		ror.l	#8,d0
000284AE 2C80                       		move.l	d0,(a6)
000284B0 43E9 0010                  		lea	x_vel(a1),a1
000284B4 51C9 FFEE                  		dbf	d1,loc_1C4AE
000284B8 4E75                       		rts	
000284BA                            ; ===========================================================================
000284BA                            
000284BA                            loc_1C4C4:				; XREF: AniArt_MZextra
000284BA 2CA9 000C                  		move.l	$C(a1),(a6)
000284BE 43E9 0010                  		lea	x_vel(a1),a1
000284C2 51C9 FFF6                  		dbf	d1,loc_1C4C4
000284C6 4E75                       		rts	
000284C8                            ; ===========================================================================
000284C8                            
000284C8                            loc_1C4D2:				; XREF: AniArt_MZextra
000284C8 2029 000C                  		move.l	$C(a1),d0
000284CC E198                       		rol.l	#8,d0
000284CE 1011                       		move.b	0(a1),d0
000284D0 2C80                       		move.l	d0,(a6)
000284D2 43E9 0010                  		lea	x_vel(a1),a1
000284D6 51C9 FFF0                  		dbf	d1,loc_1C4D2
000284DA 4E75                       		rts	
000284DC                            ; ===========================================================================
000284DC                            
000284DC                            loc_1C4E8:				; XREF: AniArt_MZextra
000284DC 3CA9 000E                  		move.w	$E(a1),(a6)
000284E0 3C91                       		move.w	0(a1),(a6)
000284E2 43E9 0010                  		lea	x_vel(a1),a1
000284E6 51C9 FFF4                  		dbf	d1,loc_1C4E8
000284EA 4E75                       		rts	
000284EC                            ; ===========================================================================
000284EC                            
000284EC                            loc_1C4FA:				; XREF: AniArt_MZextra
000284EC 2011                       		move.l	0(a1),d0
000284EE 1029 000F                  		move.b	$F(a1),d0
000284F2 E098                       		ror.l	#8,d0
000284F4 2C80                       		move.l	d0,(a6)
000284F6 43E9 0010                  		lea	x_vel(a1),a1
000284FA 51C9 FFF0                  		dbf	d1,loc_1C4FA
000284FE 4E75                       		rts	
00028500                            
00028500                            ; ---------------------------------------------------------------------------
00028500                            ; Animated pattern routine - giant ring
00028500                            ; ---------------------------------------------------------------------------
00028500                            
00028500                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028500                            
00028500                            
00028500                            AniArt_GiantRing:			; XREF: AniArt_Load
00028500 4A78 F7BE                  		tst.w	($FFFFF7BE).w
00028504 6600                       		bne.s	loc_1C518
00028506 4E75                       		rts	
00028508                            ; ===========================================================================
00028508                            
00028508                            loc_1C518:
00028508 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0002850E 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
00028514 7000                       		moveq	#0,d0
00028516 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0002851A 43F1 0000                  		lea	(a1,d0.w),a1
0002851E 0640 8000                  		addi.w	#$8000,d0
00028522 E588                       		lsl.l	#2,d0
00028524 E448                       		lsr.w	#2,d0
00028526 0040 4000                  		ori.w	#$4000,d0
0002852A 4840                       		swap	d0
0002852C 2D40 0004                  		move.l	d0,4(a6)
00028530 323C 000D                  		move.w	#$D,d1
00028534 6000 FE78                  		bra.w	LoadTiles
00028538                            ; End of function AniArt_GiantRing
00028538                            ;-----------------------------------------------------------------------------------------------
00028538                            ; Code to move the HUD when the level starts
00028538                            ;-----------------------------------------------------------------------------------------------
00028538                            HudMove_DisplayCol:
00028538 4EB9 0001 5BE2             							jsr     SpeedToPos			; Call the routine to move an object
0002853E 0C68 0090 0008             							cmpi.w  #$90,8(a0)			; Is the position equal to $90?
00028544 6C00                       							bge.s   HUD_NoMove			; if yes, branch
00028546 317C 0C00 0010             							move.w  #$C00,$10(a0)		; make the object move to the right
0002854C 6000 0000                  							bra     HudMove_Rts1			; branch to the rest of the code
00028550                            HUD_NoMove:												; XREF: HudMove_DisplayCol
00028550 4268 0010                  							clr.w   $10(a0)				; Clear X movement
00028554 317C 0090 0008             							move.w  #$90,8(a0)			; Move HUD to $90 to make sure it's at the
0002855A                            														; right X coordinate
0002855A                            HudMove_Rts1:											; XREF: Hudmove_DisplayCol
0002855A 4E75                       							rts							; return
0002855C                            
0002855C                            ; ===========================================================================
0002855C                            ; ===========================================================================
0002855C                            ; ---------------------------------------------------------------------------
0002855C                            ; Object 21 - SCORE, TIME, RINGS
0002855C                            ; ---------------------------------------------------------------------------
0002855C                            
0002855C                            Obj21:					; XREF: Obj_Index
0002855C 0C38 003A D5C0             		cmpi.b	#$3A,($FFFFD5C0).w	; is the level finished?
00028562 6600                       		bne.s	Obj21_HUD	; if not, branch
00028564 4EF9 0001 5BFC             		jmp		DeleteObject
0002856A                            Obj21_HUD:
0002856A 4EB9 0001 5C24             		jsr		LoadLivesCounterArt
00028570                            ;		tst.w	(Game_paused).w	; is the game paused?
00028570                            ;		beq.s	Obj21_HUD	; if not, branch
00028570                            ;		jmp		Obj04
00028570                            ;Obj21_HUD:
00028570 7000                       		moveq	#0,d0
00028572 1028 0024                  		move.b	routine(a0),d0
00028576 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0002857A 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0002857E                            ; ===========================================================================
0002857E 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
00028580 0000                       		dc.w Obj21_Flash-Obj21_Index
00028582                            ; ===========================================================================
00028582                            
00028582                            Obj21_Main:				; XREF: Obj21_Main
00028582 5428 0024                  		addq.b	#2,routine(a0)
00028586 317C 0000 0008             		move.w	#0,8(a0)
0002858C 317C 0108 000A             		move.w	#$108,$A(a0)
00028592 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0002859A                            ;	if HUDInSpecialStage=1	;Mercury HUD in Special Stage
0002859A 0C38 0010 F600             		cmpi.b	#$10,(Game_Mode).w ; test if in Special Stage Mode
000285A0 6600                       		bne.s	@skipload	; if yes, branch
000285A2 217C 0000 0000 0004        		move.l	#Map_obj21SS,mappings(a0)
000285AA                            	@skipload:
000285AA 317C 06CA 0002             		move.w	#$6CA,2(a0)	;Mercury HUD Centiseconds
000285B0                            
000285B0                            
000285B0                            ;	endc	;end HUD in Special Stage
000285B0 117C 0000 0001             		move.b	#0,1(a0)
000285B6 117C 0000 0018             		move.b	#0,priority(a0)
000285BC                            
000285BC                            Obj21_Flash:
000285BC 0C38 0009 D000             		cmpi.b	#9,(v_player).w ; test if Special Stage Sonic is present
000285C2 6700                       		beq.s	@Obj21_Flash	; if yes, branch
000285C4 4EBA FF72                  		jsr      HudMove_DisplayCol
000285C8 4EF9 0000 0000             		jmp		@Obj21_Flash2
000285CE                            @Obj21_Flash:
000285CE 317C 0090 0008             		move.w  #$90,8(a0)
000285D4                            @Obj21_Flash2:
000285D4 4A78 FE20                          tst.w    ($FFFFFE20).w; do you have any rings?
000285D8 6700                               beq.s    Obj21_Flash2; if not, branch
000285DA 7000                               moveq    #0,d0
000285DC 0838 0003 FE05                     btst    #3,($FFFFFE05).w
000285E2 6600                               bne.s    Obj21_Display
000285E4 0C38 0009 FE23                     cmpi.b    #9,(Timer_minute).w; have    9 minutes elapsed?
000285EA 6600                               bne.s    Obj21_Display; if not, branch
000285EC 5440                               addq.w    #2,d0    ; make time counter flash red
000285EE 6000                               bra.s    Obj21_Display
000285F0                            ; ===========================================================================
000285F0                            
000285F0                            Obj21_Flash2:
000285F0 7000                               moveq    #0,d0
000285F2 0838 0003 FE05                     btst    #3,($FFFFFE05).w
000285F8 6600                               bne.s    Obj21_Display
000285FA 5240                               addq.w    #1,d0    ; make ring counter flash red
000285FC 0C38 0009 FE23                     cmpi.b    #9,(Timer_minute).w; have    9 minutes elapsed?
00028602 6600                               bne.s    Obj21_Display; if not, branch
00028604 5440                               addq.w    #2,d0    ; make time counter flash red 
00028606                            		
00028606                            Obj21_Display:
00028606 1140 001A                  		move.b	d0,mapping_frame(a0)
0002860A 4EF9 0001 5C48             		jmp	DisplaySprite
00028610                            ; ===========================================================================
00028610                            ; ---------------------------------------------------------------------------
00028610                            ; Sprite mappings - SCORE, TIME, RINGS
00028610                            ; ---------------------------------------------------------------------------
00028610                            Map_obj21:
00028610                            	include "_maps\obj21.asm"
00028610                            ; ---------------------------------------------------------------------------
00028610                            ; Sprite mappings - SCORE, TIME, RINGS
00028610                            ; ---------------------------------------------------------------------------
00028610 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
00028614 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
00028618                            		
00028618                            		; Y-Pos, layout, VDP (2bytes - plane, pallet line (2bits), flip, mirror, first tile (11bits) - ), X-Pos
00028618 0C                         byte_1C5BC:	dc.b $C
00028619 800D A000 00               		dc.b $80, $D, $A0, 0, 0		; SCOR
0002861E 800D A018 20               		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028623 800D A020 40               		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028628 900D A00E 00               		dc.b $90, $D, $A0, $E,	0	; TIME
0002862D 900D A028 28               		dc.b $90, $D, $A0, $28,	$28	; minutes : seconds
00028632 9001 A016 49               		dc.b $90, 1, $A0, $16, $49	; "
00028637 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	; centiseconds
0002863C A00D A006 00               		dc.b $A0, $D, $A0, 8-2, 0		; RING
00028641 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20	; S
00028646 A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	; number of rings
0002864B 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; lives icon
00028650 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	; lives counter
00028655 00                         		dc.b 0
00028656 0A                         byte_1C5F0:	dc.b $A
00028657 800D A000 00               		dc.b $80, $D, $A0, 0, 0		; SCOR
0002865C 800D A018 20               		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028661 800D A020 40               		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028666 900D A00E 00               		dc.b $90, $D, $A0, $E,	0	; TIME
0002866B 900D A028 28               		dc.b $90, $D, $A0, $28,	$28	; minutes : seconds
00028670 9001 A016 49               		dc.b $90, 1, $A0, $16, $49	; "
00028675 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	; centiseconds
0002867A                            ;		dc.b $A0, $D, $A0, 8, 0		; RING
0002867A                            ;		dc.b $A0, 1, $A0, 0, $1E	; S
0002867A A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	; number of rings
0002867F 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; lives icon
00028684 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	; lives counter
00028689 00                         		dc.b 0
0002868A 0B                         byte_1C624:	dc.b $B
0002868B 800D A000 00               		dc.b $80, $D, $A0, 0, 0		; SCOR
00028690 800D A018 20               		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028695 800D A020 40               		dc.b $80, $D, $A0, $20,	$40	; score right numbers
0002869A                            ;		dc.b $90, $D, $A0, $10,	0	; TIME
0002869A 900D A028 28               		dc.b $90, $D, $A0, $28,	$28	; minutes : seconds
0002869F 9001 A016 49               		dc.b $90, 1, $A0, $16, $49	; "
000286A4 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	; centiseconds
000286A9 A00D A006 00               		dc.b $A0, $D, $A0, 8-2, 0		; RING
000286AE A001 A000 20               		dc.b $A0, 1, $A0, 0, $20	; S
000286B3 A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	; number of rings
000286B8 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; lives icon
000286BD 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	; lives counter
000286C2 00                         		dc.b 0
000286C3 09                         byte_1C658:	dc.b $9
000286C4 800D A000 00               		dc.b $80, $D, $A0, 0, 0		; SCOR
000286C9 800D A018 20               		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
000286CE 800D A020 40               		dc.b $80, $D, $A0, $20,	$40	; score right numbers
000286D3                            ;		dc.b $90, $D, $A0, $10,	0	; TIME
000286D3 900D A028 28               		dc.b $90, $D, $A0, $28,	$28	; minutes : seconds
000286D8 9001 A016 49               		dc.b $90, 1, $A0, $16, $49	; "
000286DD 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	; centiseconds
000286E2                            ;		dc.b $A0, $D, $A0, 8, -2		; RING
000286E2                            ;		dc.b $A0, 1, $A0, 0, $1E	; S
000286E2 A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	; number of rings
000286E7 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; lives icon
000286EC 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	; lives counter
000286F2 00                         		even
000286F2 00                         		even
000286F2                            Map_obj21SS:
000286F2                            	include "_maps\obj21ss.asm"
000286F2                            ; ---------------------------------------------------------------------------
000286F2                            ; Sprite mappings - SCORE, TIME, RINGS
000286F2                            ; ---------------------------------------------------------------------------
000286F2 0000 0000                  		dc.w byte_1C5BC_SS-Map_obj21SS, byte_1C5F0_SS-Map_obj21SS
000286F6 0000 0000                  		dc.w byte_1C624_SS-Map_obj21SS, byte_1C658_SS-Map_obj21SS
000286FA                            		
000286FA                            		; Y-Pos, layout, VDP (2bytes - plane, pallet line (2bits), flip, mirror, first tile (11bits) - ), X-Pos
000286FA 05                         byte_1C5BC_SS:	dc.b 5
000286FB                            ;		dc.b $80, $D, $A0, 0, 0		; SCOR
000286FB                            ;		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
000286FB                            ;		dc.b $80, $D, $A0, $20,	$40	; score right numbers
000286FB 800D A00E 00               		dc.b $80, $D, $A0, $E,	0	; TIME
00028700 800D A028 28               		dc.b $80, $D, $A0, $28,	$28	; minutes : seconds
00028705                            ;		dc.b $90, 1, $A0, $16, $49	; "
00028705                            ;		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028705 900D A006 00               		dc.b $90, $D, $A0, 8-2, 0		; RING
0002870A 9001 A000 20               		dc.b $90, 1, $A0, 0, $20	; S
0002870F 9009 A030 30               		dc.b $90, 9, $A0, $30, $30	; number of rings
00028714                            ;		dc.b $40, 5, $81, $A, 0		; lives icon
00028714                            ;		dc.b $40, $D, $A1, $E, $10	; lives counter
00028714 00                         		dc.b 0
00028715 05                         byte_1C5F0_SS:	dc.b 5
00028716                            ;		dc.b $80, $D, $A0, 0, 0		; SCOR
00028716                            ;		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028716                            ;		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028716 800D A00E 00               		dc.b $80, $D, $A0, $E,	0	; TIME
0002871B 800D A028 28               		dc.b $80, $D, $A0, $28,	$28	; minutes : seconds
00028720                            ;		dc.b $90, 1, $A0, $16, $49	; "
00028720                            ;		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028720 900D A008 00               		dc.b $90, $D, $A0, 8, 0		; RING
00028725 9001 A000 1E               		dc.b $90, 1, $A0, 0, $1E	; S
0002872A 9009 A030 30               		dc.b $90, 9, $A0, $30, $30	; number of rings
0002872F                            ;		dc.b $40, 5, $81, $A, 0		; lives icon
0002872F                            ;		dc.b $40, $D, $A1, $E, $10	; lives counter
0002872F 00                         		dc.b 0
00028730 05                         byte_1C624_SS:	dc.b 5
00028731                            ;		dc.b $80, $D, $A0, 0, 0		; SCOR
00028731                            ;		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028731                            ;		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028731 800D A010 00               		dc.b $80, $D, $A0, $10,	0	; TIME
00028736 800D A028 28               		dc.b $80, $D, $A0, $28,	$28	; minutes : seconds
0002873B                            ;		dc.b $90, 1, $A0, $16, $49	; "
0002873B                            ;		dc.b $90, 5, $A0, $E4, $50	; centiseconds
0002873B 900D A006 00               		dc.b $90, $D, $A0, 8-2, 0		; RING
00028740 9001 A000 20               		dc.b $90, 1, $A0, 0, $20	; S
00028745 9009 A030 30               		dc.b $90, 9, $A0, $30, $30	; number of rings
0002874A                            ;		dc.b $40, 5, $81, $A, 0		; lives icon
0002874A                            ;		dc.b $40, $D, $A1, $E, $10	; lives counter
0002874A 00                         		dc.b 0
0002874B 05                         byte_1C658_SS:	dc.b 5
0002874C                            ;		dc.b $80, $D, $A0, 0, 0		; SCOR
0002874C                            ;		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
0002874C                            ;		dc.b $80, $D, $A0, $20,	$40	; score right numbers
0002874C 800D A010 00               		dc.b $80, $D, $A0, $10,	0	; TIME
00028751 800D A028 28               		dc.b $80, $D, $A0, $28,	$28	; minutes : seconds
00028756                            ;		dc.b $90, 1, $A0, $16, $49	; "
00028756                            ;		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028756 900D A008 FE               		dc.b $90, $D, $A0, 8, -2		; RING
0002875B 9001 A000 1E               		dc.b $90, 1, $A0, 0, $1E	; S
00028760 9009 A030 30               		dc.b $90, 9, $A0, $30, $30	; number of rings
00028765                            ;		dc.b $40, 5, $81, $A, 0		; lives icon
00028765                            ;		dc.b $40, $D, $A1, $E, $10	; lives counter
00028766 00                         		even
00028766 00                         		even
00028766                            
00028766                            ; ----------------------------------------------------------------------------
00028766                            ; HUD code
00028766                            ; ----------------------------------------------------------------------------
00028766                            loc_40804:
00028766 4A78 FE20                  	tst.w	(Ring_count).w
0002876A 6700                       	beq.s	loc_40820
0002876C 7200                       	moveq	#0,d1
0002876E 0838 0003 FE05             	btst	#3,($FFFFFE05).w
00028774 6600                       	bne.s	BranchTo_loc_40836
00028776 0C38 0009 FE23             	cmpi.b	#9,(Timer_minute).w
0002877C 6600                       	bne.s	BranchTo_loc_40836
0002877E 5441                       	addq.w	#2,d1
00028780                            
00028780                            BranchTo_loc_40836:
00028780 6000                       	bra.s	loc_40836
00028782                            ; ===========================================================================
00028782                            
00028782                            loc_40820:
00028782 7200                       	moveq	#0,d1
00028784 0838 0003 FE05             	btst	#3,($FFFFFE05).w
0002878A 6600                       	bne.s	loc_40836
0002878C 5241                       	addq.w	#1,d1
0002878E 0C38 0009 FE23             	cmpi.b	#9,(Timer_minute).w
00028794 6600                       	bne.s	loc_40836
00028796 5441                       	addq.w	#2,d1
00028798                            
00028798                            loc_40836:
00028798 3638 D388                  	move.w	(Object_RAM+$380+x_pos).w,d3
0002879C 343C 0108                  	move.w	#$108,d2
000287A0 43F9 0002 8610             	lea	(Map_obj21).l,a1
000287A6 367C 06CA                  	movea.w	#$6CA,a3
000287AA D241                       	add.w	d1,d1
000287AC D2F1 1000                  	adda.w	(a1,d1.w),a1
000287B0 7200                       	moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
000287B2 3219                       	move.w	(a1)+,d1
000287B4 5341                       	subq.w	#1,d1
000287B6 6B00                       	bmi.s	return_40858
000287B8 6100 0000                  	bsr.w	JmpTo_loc_1682A
000287BC                            
000287BC                            return_40858:
000287BC 4E75                       	rts
000287BE                            ; End of function h
000287BE                            
000287BE                            ; =============== S U B	R O U T	I N E =======================================
000287BE                            
000287BE                            
000287BE                            Hud_CentSec:				; CODE XREF: HUDUpdate:
000287BE 0C38 0001 FE09             		cmpi.b	#1,($FFFFFE09).w
000287C4 6600 0000                  		bne.w	Hud_CentSec2
000287C8 4EF9 0000 0000             		jmp		Hud_LoadZero2
000287CE                            Hud_CentSec2:
000287CE 7200                       		moveq	#0,d1
000287D0 1238 FE25                  		move.b	(Timer_frame).w,d1
000287D4 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
000287DA 6600                       		bne.s	Hud_CentSec3			; if not, branch
000287DC 123B 1000                  		move.b	CentSecTable(pc,d1.w),d1	
000287E0 4EF9 0000 0000             		jmp		Hud_CentSec4
000287E6                            Hud_CentSec3:
000287E6 123B 1000                  		move.b	CentSecTablePAL(pc,d1.w),d1
000287EA                            Hud_CentSec4:
000287EA 203C 75C0 0003             		move.l	#$75C00003,d0
000287F0 4EF9 0000 0000             		jmp	Hud_Secs
000287F6                            ; End of function Hud_CentSec
000287F6                            
000287F6                            ; ---------------------------------------------------------------------------
000287F6 0001 0305                  CentSecTable:	dc.b 0,	1, 3, 5		; DATA XREF: Hud_CentSec2:
000287FA 0608 0A0B                  		dc.b 6,	8, 10, 11
000287FE 0D0F 1012                  		dc.b 13, 15, 16, 18
00028802 1415 1719                  		dc.b 20, 21, 23, 25
00028806 1B1C 1E20                  		dc.b 27, 28, 30, 32
0002880A 2123 2526                  		dc.b 33, 35, 37, 38
0002880E 282A 2B2D                  		dc.b 40, 42, 43, 45
00028812 2F31 3234                  		dc.b 47, 49, 50, 52
00028816 3637 393B                  		dc.b 54, 55, 57, 59
0002881A 3C3E 4041                  		dc.b 60, 62, 64, 65
0002881E 4345 4648                  		dc.b 67, 69, 70, 72
00028822 4A4C 4D4F                  		dc.b 74, 76, 77, 79
00028826 5152 5456                  		dc.b 81, 82, 84, 86
0002882A 5759 5B5C                  		dc.b 87, 89, 91, 92
0002882E 5E60 6263                  		dc.b 94, 96, 98, 99
00028832                            		even			; added this to avoid alignment errors
00028832                            
00028832                            
00028832 0002 0406                  CentSecTablePAL:	dc.b 0,	2, 4, 6		; DATA XREF: Hud_CentSec2:
00028836 080A 0C0E                  		dc.b 8,	10, 12, 14
0002883A 1012 1416                  		dc.b 16, 18, 20, 22
0002883E 181A 1C1E                  		dc.b 24, 26, 28, 30
00028842 2022 2426                  		dc.b 32, 34, 36, 38
00028846 282A 2C2E                  		dc.b 40, 42, 44, 46
0002884A 3032 3436                  		dc.b 48, 50, 52, 54
0002884E 383A 3C3E                  		dc.b 56, 58, 60, 62
00028852 4042 4446                  		dc.b 64, 66, 68, 70
00028856 484A 4C4E                  		dc.b 72, 74, 76, 78
0002885A 5052 5456                  		dc.b 80, 82, 84, 86
0002885E 585A 5C5E                  		dc.b 88, 90, 92, 94
00028862 6063                       		dc.b 96, 99
00028864                            		even			; added this to avoid alignment errors
00028864                            ; ---------------------------------------------------------------------------
00028864                            ; Add points subroutine
00028864                            ; ---------------------------------------------------------------------------
00028864                            
00028864                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028864                            
00028864                            
00028864                            AddPoints:					  ; ...
00028864 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0002886A 47F8 FE26                  		lea	($FFFFFE26).w,a3
0002886E D193                       		add.l	d0,(a3)
00028870 223C 000F 423F             		move.l	#999999,d1
00028876 B293                       		cmp.l	(a3),d1
00028878 6200                       		bhi.s	loc_339488
0002887A 2681                       		move.l	d1,(a3)
0002887C                            
0002887C                            loc_339488:					  ; ...
0002887C 2013                       		move.l	(a3),d0
0002887E B0B8 FFC0                  		cmp.l	($FFFFFFC0).w,d0
00028882 6500                       		bcs.s	return_3394AA
00028884 B0B8 FFC0                  		cmp.l	($FFFFFFC0).w,d0
00028888 6500                       		bcs.s	return_3394AA
0002888A 06B8 0000 1388 FFC0        		add.l	#$1388,($FFFFFFC0).w
00028892                            ;		cmpi.b	#$63,($FFFFFE12).w	; are lives at max?
00028892                            ;		bge.s	@playbgm
00028892 4EF9 0001 210E             		jmp		ExtraLife
00028898                            ; ===========================================================================
00028898                            
00028898                            return_3394AA:
00028898 4E75                       	rts
0002889A                            ; End of function AddPoints
0002889A                            
0002889A                            ; ---------------------------------------------------------------------------
0002889A                            ; Subroutine to update the HUD
0002889A                            ; ---------------------------------------------------------------------------
0002889A                            
0002889A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0002889A                            
0002889A                            ; sub_40D8A:
0002889A                            HudUpdate:
0002889A 4E71                       	nop
0002889C 4DF9 00C0 0000             	lea	(VDP_data_port).l,a6
000288A2                            ;	tst.w	(Two_player_mode).w
000288A2                            ;	bne.w	loc_40F50
000288A2 0C38 0001 FE09             	cmpi.b	#1,($FFFFFE09).w
000288A8 6700 0000                  	beq.w	loc_40E9A
000288AC 6100 FF10                  	bsr.w	Hud_CentSec
000288B0 4A38 FE1F                  	tst.b	(Update_HUD_score).w	; does the score need updating?
000288B4 6700                       	beq.s	Hud_ChkRings	; if not, branch
000288B6 4238 FE1F                  	clr.b	(Update_HUD_score).w
000288BA 203C 5C80 0003             	move.l	#$5C800003,d0	; set VRAM address
000288C0 2238 FE26                  	move.l	(Score).w,d1	; load score
000288C4 6100 0000                  	bsr.w	Hud_Score
000288C8                            ; loc_40DBA:
000288C8                            Hud_ChkRings:
000288C8 4A38 FE1D                  	tst.b	(Update_HUD_rings).w	; does the ring counter need updating?
000288CC 6700                       	beq.s	Hud_ChkTime	; if not, branch
000288CE 6A00                       	bpl.s	loc_40DC6
000288D0 6100 0000                  	bsr.w	Hud_LoadZero
000288D4                            ;	bsr.w	Hud_LoadZero2
000288D4                            
000288D4                            loc_40DC6:
000288D4 4238 FE1D                  	clr.b	(Update_HUD_rings).w
000288D8 203C 5F40 0003             	move.l	#$5F400003,d0
000288DE 7200                       	moveq	#0,d1
000288E0 3238 FE20                  	move.w	(Ring_count).w,d1
000288E4 0C41 03E8                  	cmpi.w	#1000,d1
000288E8 6500                       	blo.s	@cappedrings
000288EA 323C 03E7                  	move.w	#999,d1
000288EE 31C1 FE20                  	move.w	d1,(Ring_count).w
000288F2                            
000288F2                            @cappedrings:
000288F2 6100 0000                  	bsr.w	Hud_Rings
000288F6                            ; loc_40DDA:
000288F6                            Hud_ChkTime:
000288F6 4A38 FE1E                  	tst.b	(Update_HUD_timer).w	; does the time need updating?
000288FA 6700 0000                  	beq.w	Hud_ChkLives	; if not, branch
000288FE 4A78 F63A                  	tst.w	(Game_paused).w	; is the game paused?
00028902 6600 0000                  	bne.w	Hud_ChkLives	; if yes, branch
00028906 43F8 FE22                  	lea	(Timer).w,a1
0002890A                            ;	if HUDCentiseconds=1	;Mercury HUD Centiseconds
0002890A                            ;		cmpi.l	#$93B3B,(a1)+	; is the time 9'59"99?
0002890A                            ;		bge.w	loc_40E84	; if yes, branch	; if yes, branch	;Mercury HUD In Special Stage (bsr.s => bsr.w)
0002890A                            ;		move.b	(v_centstep).w,d1
0002890A                            ;		addi.b	#1,d1
0002890A                            ;		cmpi.b	#3,d1
0002890A                            ;		bne.s	@skip
0002890A                            ;		move.b	#0,d1
0002890A                            		
0002890A                            ;	@skip:
0002890A                            ;		move.b	d1,(v_centstep).w
0002890A                            ;		cmpi.b	#2,d1
0002890A                            ;		beq.s	@skip2
0002890A                            ;		addi.b	#1,d1
0002890A                            ;		
0002890A                            ;	@skip2:
0002890A                            ;		add.b	d1,-(a1)
0002890A                            ;		cmpi.b	#100,(a1)
0002890A                            ;		bcs.s	Hud_DoCent
0002890A                            ;	else
0002890A 0838 0006 FFF8             	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00028910 6700                       	beq.s	Hud_TimeOverNotPAL			; if not, branch
00028912 0C99 0009 3B31             	cmpi.l	#$93B31,(a1)+	; is the time 9.59?
00028918 6C00 0000                  	bge.w	loc_40E84	; if yes, branch
0002891C 4EF9 0000 0000             	jmp		Hud_TimeOverNotPAL2
00028922                            Hud_TimeOverNotPAL:
00028922 0C99 0009 3B3B             	cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
00028928 6C00 0000                  	bge.w	loc_40E84	; if yes, branch
0002892C                            Hud_TimeOverNotPAL2:
0002892C 5221                       	addq.b	#1,-(a1)
0002892E 0838 0006 FFF8             	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00028934 6600                       	bne.s	Hud_ChkTimePAL
00028936 0C11 003C                  	cmpi.b	#60,(a1)
0002893A 6500 0000                  	bcs.w	Hud_ChkLives
0002893E 4EF9 0000 0000             	jmp		Hud_ChkTimeNotPAL
00028944                            ;	endc	;end HUD Centiseconds
00028944                            Hud_ChkTimePAL:
00028944 0C11 0032                  	cmpi.b	#50,(a1)
00028948 6500                       	bcs.s	Hud_ChkLives
0002894A                            	
0002894A                            Hud_ChkTimeNotPAL:	
0002894A 0C38 0009 FE23             	cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
00028950 6D00                       	blt.s	ContinueHUDU	; if not, branch
00028952 0C38 0028 FE24             	cmpi.b	#40,(Timer_second).w
00028958 6D00                       	blt.s	ContinueHUDU
0002895A 33FC 0100 00A1 1100 0839+  	stopZ80
0002896C 13FC 00A7 00A0 1C0A        	move.b	#$A7,($A01C0A).l
00028974 33FC 0000 00A1 1100        	startZ80
0002897C                            ContinueHUDU:
0002897C                            ;	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
0002897C                            ;	bne.s	ContinueHUDUPAL
0002897C 12BC 0000                  	move.b	#0,(a1)
00028980 5221                       	addq.b	#1,-(a1)
00028982 0C11 003C                  	cmpi.b	#60,(a1)
00028986 6500                       	bcs.s	loc_40E18
00028988 12BC 0000                  	move.b	#0,(a1)
0002898C 5221                       	addq.b	#1,-(a1)
0002898E 0C11 0009                  	cmpi.b	#9,(a1)
00028992 6500                       	bcs.s	loc_40E18
00028994 12BC 0009                  	move.b	#9,(a1)
00028998                            ;	jmp		loc_40E18
00028998                            ;ContinueHUDUPAL:
00028998                            ;	move.b	#0,(a1)
00028998                            ;	addq.b	#1,-(a1)
00028998                            ;	cmpi.b	#60,(a1)
00028998                            ;	bcs.s	loc_40E18
00028998                            ;	move.b	#0,(a1)
00028998                            ;	addq.b	#1,-(a1)
00028998                            ;	cmpi.b	#9,(a1)
00028998                            ;	bcs.s	loc_40E18
00028998                            ;	move.b	#9,(a1)
00028998                            	
00028998                            loc_40E18:		
00028998                            
00028998 203C 5E40 0003             	move.l	#$5E400003,d0
0002899E 7200                       	moveq	#0,d1
000289A0 1238 FE23                  	move.b	(Timer_minute).w,d1
000289A4 6100 0000                  	bsr.w	Hud_Mins
000289A8 203C 5EC0 0003             	move.l	#$5EC00003,d0
000289AE 7200                       	moveq	#0,d1
000289B0 1238 FE24                  	move.b	(Timer_second).w,d1
000289B4 6100 0000                  	bsr.w	Hud_Secs
000289B8                            ;	move.l	#$75C00003,d0
000289B8                            ;	moveq	#0,d1
000289B8                            ;	move.b	(Timer_frame).w,d1
000289B8                            ;	bsr.w	Hud_Secs
000289B8                            	
000289B8                            ;	if HUDCentiseconds=1	;Mercury HUD Centiseconds
000289B8                            ;Hud_DoCent:
000289B8                            ;		move.l	#$75C00003,d0	;Mercury Macros
000289B8                            ;		moveq	#0,d1
000289B8                            ;		move.b	(Timer_Centisecond).w,d1 ; load	seconds
000289B8                            ;		bsr.w	Hud_Secs
000289B8                            ;	endc	;end HUD Centiseconds
000289B8                            ; loc_40E38:
000289B8                            Hud_ChkLives:
000289B8                            ;	bsr.s	CentiSecond
000289B8 4A38 FE1C                  	tst.b	(Update_HUD_lives).w	; does the lives counter need updating?
000289BC 6700                       	beq.s	Hud_ChkBonus	; if not, branch
000289BE 4238 FE1C                  	clr.b	(Update_HUD_lives).w
000289C2 6100 0000                  	bsr.w	Hud_Lives
000289C6                            ; loc_40E46:
000289C6                            Hud_ChkBonus:
000289C6 4A38 F7D6                  		tst.b	(Update_Bonus_score).w	; do time/ring bonus counters need updating?
000289CA 6700                       		beq.s	Hud_End		; if not, branch
000289CC 4238 F7D6                  		clr.b	(Update_Bonus_score).w
000289D0 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
000289DA 7200                       		moveq	#0,d1
000289DC 3238 F7D2                  		move.w	(Bonus_Countdown_1).w,d1 ; load	time bonus
000289E0 4EB9 0000 0000             		jsr	Hud_TimeRingBonus
000289E6 7200                       		moveq	#0,d1
000289E8 3238 F7D4                  		move.w	(Bonus_Countdown_2).w,d1 ; load	ring bonus
000289EC 0C41 2706                  		cmpi.w	#9990,d1
000289F0 6500                       		blo.s	@cappedringbonus
000289F2 323C 2706                  		move.w	#9990,d1
000289F6                            
000289F6                            @cappedringbonus:
000289F6 4EB9 0000 0000             		jsr	Hud_TimeRingBonus
000289FC                            ; return_40E82:
000289FC                            Hud_End:
000289FC 4E75                       	rts
000289FE                            
000289FE                            ; End of function sub_23BB4
000289FE                            ;Debug_Timeover:
000289FE                            ;		clr.w (Timer).w
000289FE                            ;		clr.b (Timer_minute).w
000289FE                            ;		clr.b (Timer_Second).w
000289FE                            ;		clr.b (Timer_Centisecond).w
000289FE                            ;		rts
000289FE                            
000289FE                            ; ===========================================================================
000289FE                            
000289FE                            loc_40E84:
000289FE 11FC 0000 FE1E             	move.b	#0,(Update_HUD_timer).w
00028A04 41F8 D000                  	lea	(MainCharacter).w,a0 ; a0=character
00028A08 2448                       	movea.l	a0,a2
00028A0A 6100 E1AA                  	bsr.w	KillCharacter
00028A0E 11FC 0001 FE1A             	move.b	#1,(Time_Over_flag).w
00028A14 4E75                       	rts
00028A16                            ; ===========================================================================
00028A16                            
00028A16                            loc_40E9A:
00028A16 6100 0000                  	bsr.w	HudDb_XY
00028A1A 6100 FDA2                  	bsr.w	Hud_CentSec
00028A1E 4A38 FE1D                  	tst.b	(Update_HUD_rings).w
00028A22 6700                       	beq.s	loc_40EBE
00028A24 6A00                       	bpl.s	loc_40EAA
00028A26 6100 0000                  	bsr.w	Hud_LoadZero
00028A2A                            ;	bsr.w	Hud_LoadZero2
00028A2A                            
00028A2A                            loc_40EAA:
00028A2A 4238 FE1D                  	clr.b	(Update_HUD_rings).w
00028A2E 203C 5F40 0003             	move.l	#$5F400003,d0
00028A34 7200                       	moveq	#0,d1
00028A36 3238 FE20                  	move.w	(Ring_count).w,d1
00028A3A 6100 0000                  	bsr.w	Hud_Rings
00028A3E                            
00028A3E                            loc_40EBE:
00028A3E 203C 5EC0 0003             	move.l	#$5EC00003,d0
00028A44 7200                       	moveq	#0,d1
00028A46 1238 F62C                  	move.b	($FFFFF62C).w,d1
00028A4A 6100 0000                  	bsr.w	Hud_Secs
00028A4E 4A38 FE1C                  	tst.b	(Update_HUD_lives).w
00028A52 6700                       	beq.s	loc_40EDC
00028A54 4238 FE1C                  	clr.b	(Update_HUD_lives).w
00028A58 6100 0000                  	bsr.w	Hud_Lives
00028A5C                            
00028A5C                            loc_40EDC:
00028A5C 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
00028A60 6700                       		beq.s	loc_40F18	; if not, branch
00028A62 4238 F7D6                  		clr.b	($FFFFF7D6).w
00028A66 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
00028A70 7200                       		moveq	#0,d1
00028A72 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
00028A76 6100 0000                  		bsr.w	Hud_TimeRingBonus
00028A7A 7200                       		moveq	#0,d1
00028A7C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
00028A80 0C41 2706                  		cmpi.w	#9990,d1
00028A84 6500                       		blo.s	@cappedringbonus
00028A86 323C 2706                  		move.w	#9990,d1
00028A8A                            
00028A8A                            @cappedringbonus:
00028A8A 6100 0000                  		bsr.w	Hud_TimeRingBonus
00028A8E                            
00028A8E                            loc_40F18:
00028A8E 4A78 F63A                  	tst.w	(Game_paused).w
00028A92 6600                       	bne.s	return_40F4E
00028A94 43F8 FE22                  	lea	(Timer).w,a1
00028A98                            ;		move.b	(v_centstep).w,d1
00028A98                            ;		addi.b	#1,d1
00028A98                            ;		cmpi.b	#3,d1
00028A98                            ;		bne.s	@skipno2
00028A98                            ;		move.b	#0,d1
00028A98                            ;		
00028A98                            ;	@skipno2:
00028A98                            ;		move.b	d1,(v_centstep).w
00028A98                            ;		cmpi.b	#2,d1
00028A98                            ;		beq.s	@skip2no2
00028A98                            ;		addi.b	#1,d1
00028A98                            ;		
00028A98                            ;	@skip2no2:
00028A98                            ;		add.b	d1,-(a1)
00028A98                            ;		cmpi.b	#100,(a1)
00028A98                            ;		bcs.w	Hud_DoCent
00028A98 0838 0006 FFF8             	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00028A9E 6700                       	beq.s	HUpdateNPALTimeOver
00028AA0 0C99 0009 3B31             	cmpi.l	#$93B31,(a1)+
00028AA6 4EF9 0000 0000             	jmp		HUpdateNotPALTimeOver
00028AAC                            HUpdateNPALTimeOver:
00028AAC 0C99 0009 3B3B             	cmpi.l	#$93B3B,(a1)+
00028AB2                            HUpdateNotPALTimeOver:
00028AB2 4E71                       	nop
00028AB4 5221                       	addq.b	#1,-(a1)
00028AB6 0838 0006 FFF8             	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00028ABC 6700                       	beq.s	HUpdateNotPAL
00028ABE 0C11 0032                  	cmpi.b	#50,(a1)
00028AC2 6500                       	bcs.s	return_40F4E
00028AC4                            ;	move.b	#0,(a1)
00028AC4                            ;	addq.b	#1,-(a1)
00028AC4                            ;	cmpi.b	#50,(a1)
00028AC4                            ;	bcs.s	return_40F4E
00028AC4                            ;	move.b	#0,(a1)
00028AC4                            ;	addq.b	#1,-(a1)
00028AC4                            ;	cmpi.b	#9,(a1)
00028AC4                            ;	bcs.s	return_40F4E
00028AC4                            ;	move.b	#9,(a1)
00028AC4 4EF9 0000 0000             	jmp		HUpdateNotPAL2
00028ACA                            HUpdateNotPAL:
00028ACA 0C11 003C                  	cmpi.b	#$3C,(a1)
00028ACE 6500                       	bcs.s	return_40F4E
00028AD0                            HUpdateNotPAL2:
00028AD0 12BC 0000                  	move.b	#0,(a1)
00028AD4 5221                       	addq.b	#1,-(a1)
00028AD6 0C11 003C                  	cmpi.b	#$3C,(a1)
00028ADA 6500                       	bcs.s	return_40F4E
00028ADC 12BC 0000                  	move.b	#0,(a1)
00028AE0 5221                       	addq.b	#1,-(a1)
00028AE2 0C11 0009                  	cmpi.b	#9,(a1)
00028AE6 6500                       	bcs.s	return_40F4E
00028AE8 12BC 0009                  	move.b	#9,(a1)
00028AEC                            return_40F4E:
00028AEC 4E75                       	rts
00028AEE                            ; ===========================================================================
00028AEE                            
00028AEE                            loc_40F50:
00028AEE 4A78 FFFA                  	tst.w	($FFFFFFFA).w
00028AF2 6600 0000                  	bne.w	HudDb_XY
00028AF6 4E75                       	rts
00028AF8                            
00028AF8                            ;loc_40F90:
00028AF8                            ;	tst.b	(Update_HUD_timer_2P).w
00028AF8                            ;	beq.s	loc_40FC8
00028AF8                            ;	lea	(Timer_2P).w,a1
00028AF8                            ;	cmpi.l	#$93B3B,(a1)+
00028AF8                            ;	beq.w	TimeOver2
00028AF8                            ;	addq.b	#1,-(a1)
00028AF8                            ;	cmpi.b	#$3C,(a1)
00028AF8                            ;	bcs.s	loc_40FC8
00028AF8                            ;	move.b	#0,(a1)
00028AF8                            ;	addq.b	#1,-(a1)
00028AF8                            ;	cmpi.b	#$3C,(a1)
00028AF8                            ;	bcs.s	loc_40FC8
00028AF8                            ;	move.b	#0,(a1)
00028AF8                            ;	addq.b	#1,-(a1)
00028AF8                            ;	cmpi.b	#9,(a1)
00028AF8                            ;	bcs.s	loc_40FC8
00028AF8                            ;	move.b	#9,(a1)
00028AF8                            
00028AF8                            ;loc_40FC8:
00028AF8                            ;	bsr.w	CentiSecond
00028AF8                            ;	tst.b	(Update_HUD_lives).w
00028AF8                            ;	beq.s	loc_40FD6
00028AF8                            ;	clr.b	(Update_HUD_lives).w
00028AF8                            ;	bsr.w	Hud_Lives
00028AF8                            
00028AF8                            ;loc_40FD6:
00028AF8                            ;	tst.b	(Update_HUD_lives_2P).w
00028AF8                            ;	beq.s	loc_40FE4
00028AF8                            ;	clr.b	(Update_HUD_lives_2P).w
00028AF8                            ;	bsr.w	Hud_Lives
00028AF8                            
00028AF8                            ;loc_40FE4:
00028AF8                            ;	move.b	(Update_HUD_timer).w,d0
00028AF8                            ;	or.b	(Update_HUD_timer_2P).w,d0
00028AF8                            ;	beq.s	return_4101A
00028AF8                            ;	lea	(Loser_Time_Left).w,a1
00028AF8                            ;	tst.w	(a1)+
00028AF8                            ;	beq.s	return_4101A
00028AF8                            ;	subq.b	#1,-(a1)
00028AF8                            ;	bhi.s	return_4101A
00028AF8                            ;	move.b	#$3C,(a1)
00028AF8                            ;	cmpi.b	#$C,-1(a1)
00028AF8                            ;	bne.s	loc_41010
00028AF8                            ;	move.w	#$92,d0
00028AF8                            ;	jsr	(PlayMusic).l
00028AF8                            
00028AF8                            ;loc_41010:
00028AF8                            ;	subq.b	#1,-(a1)
00028AF8                            ;	bcc.s	return_4101A
00028AF8                            ;	move.w	#0,(a1)
00028AF8                            ;	bsr.s	TimeOver0
00028AF8                            
00028AF8                            ;return_4101A:
00028AF8                            
00028AF8                            ;	rts
00028AF8                            ; End of function HudUpdate
00028AF8                            
00028AF8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00028AF8                            
00028AF8                            ; sub_4101C:
00028AF8                            TimeOver0:
00028AF8                            ;	tst.w ($FFFFFFFA).w ; is debug mode on?
00028AF8                            ;	bne.w Debug_Timeover ; if yes, branch
00028AF8 4A38 FE1E                  	tst.b	(Update_HUD_timer).w
00028AFC 6600                       	bne.s	TimeOver
00028AFE                            ;	tst.b	(Update_HUD_timer_2P).w
00028AFE                            ;	bne.s	TimeOver2
00028AFE 4E75                       	rts
00028B00                            ; ===========================================================================
00028B00                            ; loc_4102A:
00028B00                            TimeOver:
00028B00                            
00028B00 4238 FE1E                  	clr.b	(Update_HUD_timer).w
00028B04 41F8 D000                  	lea	(MainCharacter).w,a0 ; a0=character
00028B08 2448                       	movea.l	a0,a2
00028B0A 6100 E0AA                  	bsr.w	KillCharacter
00028B0E 11FC 0001 FE1A             	move.b	#1,(Time_Over_flag).w
00028B14                            ;	tst.b	(Update_HUD_timer_2P).w
00028B14                            ;	beq.s	return_41058
00028B14                            ; loc_41044:
00028B14                            ;TimeOver2:
00028B14                            
00028B14                            ;	clr.b	(Update_HUD_timer_2P).w
00028B14                            ;	lea	(Sidekick).w,a0 ; a0=character
00028B14                            ;	movea.l	a0,a2
00028B14                            ;	bsr.w	KillCharacter
00028B14                            ;	move.b	#1,(Time_Over_flag_2P).w
00028B14                            
00028B14                            return_41058:
00028B14 4E75                       	rts
00028B16                            ; End of function TimeOver0
00028B16                            Hud_LoadZero2:
00028B16 7200                       		moveq	#0,d1
00028B18                            ;		move.b	($FFFFFE25).w,d1
00028B18                            ;		move.b	CentSecTable(pc,d1.w),d1
00028B18 203C 75C0 0003             		move.l	#$75C00003,d0
00028B1E 4EB9 0000 0000             		jsr	Hud_Secs		
00028B24 4E75                       		rts
00028B26                            ; ---------------------------------------------------------------------------
00028B26                            ; Subroutine to	load "0" on the	HUD
00028B26                            ; ---------------------------------------------------------------------------
00028B26                            
00028B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028B26                            
00028B26                            
00028B26                            Hud_LoadZero:				; XREF: HudUpdate
00028B26                            ;		bsr.w	Hud_LoadZero2
00028B26 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
00028B30 45FA 0000                  		lea	Hud_TilesZero(pc),a2
00028B34 343C 0002                  		move.w	#2,d2
00028B38 6000                       		bra.s	loc_1C83E
00028B3A                            ; End of function Hud_LoadZero
00028B3A                            
00028B3A                            ; ---------------------------------------------------------------------------
00028B3A                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
00028B3A                            ; ---------------------------------------------------------------------------
00028B3A                            
00028B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028B3A                            
00028B3A                            
00028B3A                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
00028B3A 4DF9 00C0 0000             		lea	($C00000).l,a6
00028B40 4EB9 0000 0000             		jsr	Hud_Lives
00028B46 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
00028B50 45FA 0000                  		lea	Hud_TilesBase(pc),a2
00028B54 343C 000E                  		move.w	#$E,d2
00028B58                            
00028B58                            loc_1C83E:				; XREF: Hud_LoadZero
00028B58 43FA 0000                  		lea	Art_Hud(pc),a1
00028B5C                            
00028B5C                            loc_1C842:
00028B5C 323C 000F                  		move.w	#$F,d1
00028B60 101A                       		move.b	(a2)+,d0
00028B62 6B00                       		bmi.s	loc_1C85E
00028B64 4880                       		ext.w	d0
00028B66 EB48                       		lsl.w	#5,d0
00028B68 47F1 0000                  		lea	(a1,d0.w),a3
00028B6C                            
00028B6C                            loc_1C852:
00028B6C 2C9B                       		move.l	(a3)+,(a6)
00028B6E 51C9 FFFC                  		dbf	d1,loc_1C852
00028B72                            
00028B72                            loc_1C858:
00028B72 51CA FFE8                  		dbf	d2,loc_1C842
00028B76                            
00028B76 4E75                       		rts	
00028B78                            ; ===========================================================================
00028B78                            
00028B78                            loc_1C85E:
00028B78 2CBC 0000 0000             		move.l	#0,(a6)
00028B7E 51C9 FFF8                  		dbf	d1,loc_1C85E
00028B82                            
00028B82 60EE                       		bra.s	loc_1C858
00028B84                            ; End of function Hud_Base
00028B84                            
00028B84                            ; ===========================================================================
00028B84                            ;	if HUDCentiseconds=1	;Mercury HUD Centiseconds
00028B84                            ;Hud_TilesMarks:	dc.b $1A, 0, 0, 0
00028B84                            ;Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $18, 0, 0
00028B84                            ;	else
00028B84 1618 1818 1818 1800 0014+  Hud_TilesBase:	dc.b $16, $18, $18, $18, $18, $18, $18,	0, 0, $14, 0, 0
00028B90                            ;	endc	;end HUD Centiseconds
00028B90 1818 0000                  Hud_TilesZero:	dc.b $18, $18, 0, 0
00028B94 0000 0000                  Hud_TilesZero2:	dc.b 0, 0, 0, 0
00028B98                            ; ---------------------------------------------------------------------------
00028B98                            ; Subroutine to	load debug mode	numbers	patterns
00028B98                            ; ---------------------------------------------------------------------------
00028B98                            
00028B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028B98                            
00028B98                            
00028B98                            HudDb_XY:				; XREF: HudDebug
00028B98 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
00028BA2 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
00028BA6 4841                       		swap	d1
00028BA8 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
00028BAC 6100                       		bsr.s	HudDb_XY2
00028BAE 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
00028BB2 4841                       		swap	d1
00028BB4 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
00028BB8                            ; End of function HudDb_XY
00028BB8                            
00028BB8                            
00028BB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028BB8                            
00028BB8                            
00028BB8                            HudDb_XY2:
00028BB8 7C07                       		moveq	#7,d6
00028BBA 43F9 0000 0000             		lea	(Art_Text2).l,a1
00028BC0                            
00028BC0                            HudDb_XYLoop:
00028BC0 E959                       		rol.w	#4,d1
00028BC2 3401                       		move.w	d1,d2
00028BC4 0242 000F                  		andi.w	#$F,d2
00028BC8 0C42 000A                  		cmpi.w	#$A,d2
00028BCC 6500                       		bcs.s	loc_1C8B2
00028BCE 5E42                       		addq.w	#7,d2
00028BD0                            
00028BD0                            loc_1C8B2:
00028BD0 EB4A                       		lsl.w	#5,d2
00028BD2 47F1 2000                  		lea	(a1,d2.w),a3
00028BD6                            		rept 8
00028BD6                            		move.l	(a3)+,(a6)
00028BD6 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
00028BE6 4841                       		swap	d1
00028BE8 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
00028BEC                            
00028BEC 4E75                       		rts	
00028BEE                            ; End of function HudDb_XY2
00028BEE                            
00028BEE                            ; ---------------------------------------------------------------------------
00028BEE                            ; Subroutine to	load rings numbers patterns
00028BEE                            ; ---------------------------------------------------------------------------
00028BEE                            
00028BEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028BEE                            
00028BEE                            
00028BEE                            Hud_Rings:				; XREF: HudUpdate
00028BEE 45F9 0000 0000             		lea	(Hud_100).l,a2
00028BF4 7C02                       		moveq	#2,d6
00028BF6 6000                       		bra.s	Hud_LoadArt
00028BF8                            ; End of function Hud_Rings
00028BF8                            
00028BF8                            ; ---------------------------------------------------------------------------
00028BF8                            ; Subroutine to	load score numbers patterns
00028BF8                            ; ---------------------------------------------------------------------------
00028BF8                            
00028BF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028BF8                            
00028BF8                            
00028BF8                            Hud_Score:				; XREF: HudUpdate
00028BF8 45F9 0000 0000             		lea	(Hud_100000).l,a2
00028BFE 7C05                       		moveq	#5,d6
00028C00                            
00028C00                            Hud_LoadArt:
00028C00 43FA 0000                  		lea	Art_Hud(pc),a1
00028C04 283C 0080 0000             		move.l	#$800000,d4
00028C0A                            Hud_ScoreLoop:
00028C0A 7400                       		moveq	#0,d2
00028C0C 261A                       		move.l	(a2)+,d3
00028C0E                            
00028C0E                            loc_1C8EC:
00028C0E 9283                       		sub.l	d3,d1
00028C10 6500                       		bcs.s	loc_1C8F4
00028C12 5242                       		addq.w	#1,d2
00028C14 60F8                       		bra.s	loc_1C8EC
00028C16                            ; ===========================================================================
00028C16                            
00028C16                            loc_1C8F4:
00028C16 D283                       		add.l	d3,d1
00028C18 4A42                       		tst.w	d2
00028C1A 6700                       		beq.s	loc_1C8FE
00028C1C 383C 0001                  		move.w	#1,d4
00028C20                            
00028C20                            loc_1C8FE:
00028C20                            ;	if HUDHasLeadingZeroes=0	;Mercury HUD Has Leading Zeroes
00028C20 4A44                       		tst.w	d4
00028C22 6700                       		beq.s	loc_1C92C
00028C24                            ;	endc	;end HUD Has Leading Zeroes
00028C24 ED4A                       		lsl.w	#6,d2
00028C26 2D40 0004                  		move.l	d0,4(a6)
00028C2A 47F1 2000                  		lea	(a1,d2.w),a3
00028C2E                            		rept 16
00028C2E                            		move.l	(a3)+,(a6)
00028C2E 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
00028C4E                            
00028C4E                            loc_1C92C:
00028C4E 0680 0040 0000             		addi.l	#$400000,d0
00028C54 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
00028C58                            
00028C58 4E75                       		rts	
00028C5A                            ; End of function Hud_Score
00028C5A                            
00028C5A                            ; ---------------------------------------------------------------------------
00028C5A                            ; Subroutine to	load countdown numbers on the continue screen
00028C5A                            ; ---------------------------------------------------------------------------
00028C5A                            
00028C5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028C5A                            
00028C5A                            
00028C5A                            ContScrCounter:				; XREF: ContinueScreen
00028C5A 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
00028C64 4DF9 00C0 0000             		lea	($C00000).l,a6
00028C6A 45F9 0000 0000             		lea	(Hud_10).l,a2
00028C70 7C01                       		moveq	#1,d6
00028C72 7800                       		moveq	#0,d4
00028C74 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
00028C78                            
00028C78                            ContScr_Loop:
00028C78 7400                       		moveq	#0,d2
00028C7A 261A                       		move.l	(a2)+,d3
00028C7C                            
00028C7C                            loc_1C95A:
00028C7C 9283                       		sub.l	d3,d1
00028C7E 6500                       		bcs.s	loc_1C962
00028C80 5242                       		addq.w	#1,d2
00028C82 60F8                       		bra.s	loc_1C95A
00028C84                            ; ===========================================================================
00028C84                            
00028C84                            loc_1C962:
00028C84 D283                       		add.l	d3,d1
00028C86 ED4A                       		lsl.w	#6,d2
00028C88 47F1 2000                  		lea	(a1,d2.w),a3
00028C8C                            		rept 16
00028C8C                            		move.l	(a3)+,(a6)
00028C8C 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
00028CAC 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
00028CB0                            
00028CB0 4E75                       		rts	
00028CB2                            ; End of function ContScrCounter
00028CB2                            
00028CB2                            ; ===========================================================================
00028CB2                            ; ---------------------------------------------------------------------------
00028CB2                            ; HUD counter sizes
00028CB2                            ; ---------------------------------------------------------------------------
00028CB2 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
00028CB6 0000 2710                  Hud_10000:	dc.l 10000
00028CBA 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
00028CBE 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
00028CC2 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
00028CC6 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
00028CCA                            
00028CCA                            ; ---------------------------------------------------------------------------
00028CCA                            ; Subroutine to	load time numbers patterns
00028CCA                            ; ---------------------------------------------------------------------------
00028CCA                            
00028CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028CCA                            
00028CCA                            
00028CCA                            Hud_Mins:				; XREF: Hud_ChkTime
00028CCA 45F9 0002 8CC6             		lea	(Hud_1).l,a2
00028CD0 7C00                       		moveq	#0,d6
00028CD2 6000                       		bra.s	loc_1C9BA
00028CD4                            ; End of function Hud_Mins
00028CD4                            
00028CD4                            
00028CD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028CD4                            
00028CD4                            
00028CD4                            Hud_Secs:				; XREF: Hud_ChkTime
00028CD4 45F9 0002 8CC2             		lea	(Hud_10).l,a2
00028CDA 7C01                       		moveq	#1,d6
00028CDC                            
00028CDC                            loc_1C9BA:
00028CDC 7800                       		moveq	#0,d4
00028CDE 43FA 0000                  		lea	Art_Hud(pc),a1
00028CE2                            ;		move.l	#$800000,d4
00028CE2                            Hud_TimeLoop:
00028CE2 7400                       		moveq	#0,d2
00028CE4 261A                       		move.l	(a2)+,d3
00028CE6                            
00028CE6                            loc_1C9C4:
00028CE6 9283                       		sub.l	d3,d1
00028CE8 6500                       		bcs.s	loc_1C9CC
00028CEA 5242                       		addq.w	#1,d2
00028CEC 60F8                       		bra.s	loc_1C9C4
00028CEE                            ; ===========================================================================
00028CEE                            
00028CEE                            loc_1C9CC:
00028CEE D283                       		add.l	d3,d1
00028CF0 4A42                       		tst.w	d2
00028CF2 6700                       		beq.s	loc_1C9D6
00028CF4 383C 0001                  		move.w	#1,d4
00028CF8                            
00028CF8                            loc_1C9D6:
00028CF8 ED4A                       		lsl.w	#6,d2
00028CFA 2D40 0004                  		move.l	d0,4(a6)
00028CFE 47F1 2000                  		lea	(a1,d2.w),a3
00028D02                            		rept 16
00028D02                            		move.l	(a3)+,(a6)
00028D02 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
00028D22 0680 0040 0000             		addi.l	#$400000,d0
00028D28 51CE FFB8                  		dbf	d6,Hud_TimeLoop
00028D2C                            
00028D2C 4E75                       		rts	
00028D2E                            ; End of function Hud_Secs
00028D2E                            
00028D2E                            ; ---------------------------------------------------------------------------
00028D2E                            ; Subroutine to	load time/ring bonus numbers patterns
00028D2E                            ; ---------------------------------------------------------------------------
00028D2E                            
00028D2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028D2E                            
00028D2E                            
00028D2E                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
00028D2E 45F9 0002 8CBA             		lea	(Hud_1000).l,a2
00028D34 7C03                       		moveq	#3,d6
00028D36 7800                       		moveq	#0,d4
00028D38 43FA 0000                  		lea	Art_Hud(pc),a1
00028D3C 283C 0080 0000             		move.l	#$800000,d4
00028D42                            Hud_BonusLoop:
00028D42 7400                       		moveq	#0,d2
00028D44 261A                       		move.l	(a2)+,d3
00028D46                            
00028D46                            
00028D46                            loc_1CA1E:
00028D46 9283                       		sub.l	d3,d1
00028D48 6500                       		bcs.s	loc_1CA26
00028D4A 5242                       		addq.w	#1,d2
00028D4C 60F8                       		bra.s	loc_1CA1E
00028D4E                            ; ===========================================================================
00028D4E                            
00028D4E                            loc_1CA26:
00028D4E D283                       		add.l	d3,d1
00028D50 4A42                       		tst.w	d2
00028D52 6700                       		beq.s	loc_1CA30
00028D54 383C 0001                  		move.w	#1,d4
00028D58                            
00028D58                            loc_1CA30:
00028D58 4A44                       		tst.w	d4
00028D5A 6700                       		beq.s	Hud_ClrBonus
00028D5C ED4A                       		lsl.w	#6,d2
00028D5E 47F1 2000                  		lea	(a1,d2.w),a3
00028D62                            		rept 16
00028D62                            		move.l	(a3)+,(a6)
00028D62 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
00028D82                            
00028D82                            loc_1CA5A:
00028D82 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
00028D86                            
00028D86 4E75                       		rts	
00028D88                            ; ===========================================================================
00028D88                            
00028D88                            Hud_ClrBonus:
00028D88 7A0F                       		moveq	#$F,d5
00028D8A                            
00028D8A                            Hud_ClrBonusLoop:
00028D8A 2CBC 0000 0000             		move.l	#0,(a6)
00028D90 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
00028D94                            
00028D94 60EC                       		bra.s	loc_1CA5A
00028D96                            ; End of function Hud_TimeRingBonus
00028D96                            
00028D96                            ; ---------------------------------------------------------------------------
00028D96                            ; Subroutine to	load uncompressed lives	counter	patterns
00028D96                            ; ---------------------------------------------------------------------------
00028D96                            
00028D96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028D96                            
00028D96                            
00028D96                            Hud_Lives:				; XREF: Hud_ChkLives
00028D96 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
00028D9C 7200                       		moveq	#0,d1
00028D9E 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
00028DA2 0C01 0064                  		cmpi.b	#100,d1
00028DA6 6500                       		blo.s	@cappedlives
00028DA8 123C 0063                  		move.b	#99,d1
00028DAC 11C1 FE12                  		move.b	d1,($FFFFFE12).w
00028DB0                            ;		tst.b	d1				; just a feature that was used in games like
00028DB0                            ;		beq.s 	@skipsub		; Sonic Adventure and it's sequel SA2
00028DB0                            ;		sub.b	#1,d1			; This simply tests if number of lives is 0 
00028DB0                            								; and if not it then subtracts one from the 
00028DB0                            								; life number in d1
00028DB0                            ;@skipsub:
00028DB0                            @cappedlives
00028DB0 45F9 0002 8CC2             		lea	(Hud_10).l,a2
00028DB6 7C01                       		moveq	#1,d6
00028DB8 7800                       		moveq	#0,d4
00028DBA 43FA 0000                  		lea	Art_LivesNums(pc),a1
00028DBE                            
00028DBE                            Hud_LivesLoop:
00028DBE 2D40 0004                  		move.l	d0,4(a6)
00028DC2 7400                       		moveq	#0,d2
00028DC4 261A                       		move.l	(a2)+,d3
00028DC6                            
00028DC6                            loc_1CA90:
00028DC6 9283                       		sub.l	d3,d1
00028DC8 6500                       		bcs.s	loc_1CA98
00028DCA 5242                       		addq.w	#1,d2
00028DCC 60F8                       		bra.s	loc_1CA90
00028DCE                            ; ===========================================================================
00028DCE                            
00028DCE                            loc_1CA98:
00028DCE D283                       		add.l	d3,d1
00028DD0 4A42                       		tst.w	d2
00028DD2 6700                       		beq.s	loc_1CAA2
00028DD4 383C 0001                  		move.w	#1,d4
00028DD8                            
00028DD8                            loc_1CAA2:
00028DD8                            
00028DD8                            loc_1CAA6:
00028DD8 EB4A                       		lsl.w	#5,d2
00028DDA 47F1 2000                  		lea	(a1,d2.w),a3
00028DDE                            		rept 8
00028DDE                            		move.l	(a3)+,(a6)
00028DDE 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
00028DEE                            
00028DEE                            loc_1CABC:
00028DEE 0680 0040 0000             		addi.l	#$400000,d0
00028DF4 51CE FFC8                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00028DF8                            
00028DF8 4E75                       		rts	
00028DFA                            ; ===========================================================================
00028DFA                            
00028DFA                            Hud_ClrLives:
00028DFA 4A46                       		tst.w	d6
00028DFC 67DA                       		beq.s	loc_1CAA6
00028DFE 7A07                       		moveq	#7,d5
00028E00                            
00028E00                            Hud_ClrLivesLoop:
00028E00 2CBC 0000 0000             		move.l	#0,(a6)
00028E06 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00028E0A 60E2                       		bra.s	loc_1CABC
00028E0C                            ; End of function Hud_Lives
00028E0C                            
00028E0C                            
00028E0C                            ; ===========================================================================
00028E0C                            Art_Hud:	incbin	#artunc\HUD.bin		; 8x16 pixel numbers on HUD
0002914C                            		even
0002914C                            Art_LivesNums:	incbin	#artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
000297AC                            		even
000297AC                            Art_Text2:	incbin	#artunc\menutext.bin	; text used in debug mode
00029CCC                            		even
00029CCC                            Art_Text:	incbin	#artunc\menutextascii.bin	; text used in level select
0002A7CC                            		even
0002A7CC                            ; ===========================================================================
0002A7CC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0002A7CC                            
0002A7CC                            
0002A7CC                            JmpTo_loc_1682A:
0002A7CC 4EF9 0001 5EAA             	jmp	sub_D762_2
0002A7D2                            ; End of function JmpTo_loc_1682A
0002A7D2                            
0002A7D2                            ; ---------------------------------------------------------------------------
0002A7D2                            ; When debug mode is currently in use
0002A7D2                            ; ---------------------------------------------------------------------------
0002A7D2                            
0002A7D2                            DebugMode:				; XREF: Obj01; Obj09
0002A7D2 7000                       		moveq	#0,d0
0002A7D4 1038 FE08                  		move.b	($FFFFFE08).w,d0
0002A7D8 323B 0000                  		move.w	Debug_Index(pc,d0),d1
0002A7DC 4EFB 1000                  		jmp	Debug_Index(pc,d1)
0002A7E0                            ; ===========================================================================
0002A7E0 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0002A7E2 0000                       		dc.w Debug_Skip-Debug_Index
0002A7E4                            ; ===========================================================================
0002A7E4                            Debug_Main:
0002A7E4 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0002A7E8                            ;		move.l	(MainCharacter+mappings).w,($FFFFFF7A).w
0002A7E8 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w
0002A7EE 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w
0002A7F4 0C38 0010 FE10             		cmpi.b	#$10,($FFFFFE10).w ; is	game mode = $10	(special stage)?
0002A7FA 6600                       		bne.s	loc_3D852	; if not, branch
0002A7FC 31FC 0000 F728             		move.w	#0,($FFFFF728).w
0002A802 31FC 3FFF F72A             		move.w	#$3FFF,($FFFFF72A).w
0002A808                            ;		cmpi.b	#6,routine(a0)
0002A808                            ;		bcc.s	loc_3D852
0002A808                            ;		move.w	(MainCharacter+art_tile).w,($FFFFFF7E).w
0002A808                            loc_3D852:
0002A808 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0002A80E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0002A814 0278 07FF F70C             		andi.w	#$7FF,($FFFFF70C).w
0002A81A 08A8 0006 0022             		bclr	#6,status(a0)
0002A820 6700                       		beq.s	Debug_NotUnderWater
0002A822 2248                       		movea.l	a0,a1
0002A824 4EB9 0001 E7FE             		jsr	(ResumeMusic).l
0002A82A 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0002A82E 4EB9 0001 E286             		jsr	ApplySpeedSettings	; Fetch Speed settings
0002A834                            
0002A834                            Debug_NotUnderWater:
0002A834 117C 0000 001A             		move.b	#0,$1A(a0)
0002A83A 117C 0000 001C             		move.b	#0,$1C(a0)
0002A840 08A8 0001 0022             		bclr	#1,status(a0)
0002A846 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0002A84C 6600                       		bne.s	Debug_Zone	; if not, branch
0002A84E 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0002A854 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0002A85A 7006                       		moveq	#6,d0		; use 6th debug	item list
0002A85C 6000                       		bra.s	Debug_UseList
0002A85E                            ; ===========================================================================
0002A85E                            
0002A85E                            Debug_Zone:
0002A85E 7000                       		moveq	#0,d0
0002A860 1038 FE10                  		move.b	($FFFFFE10).w,d0
0002A864                            
0002A864                            Debug_UseList:
0002A864 45F9 0000 0000             		lea	(DebugList).l,a2 
0002A86A D040                       		add.w	d0,d0
0002A86C D4F2 0000                  		adda.w	(a2,d0.w),a2
0002A870 3C1A                       		move.w	(a2)+,d6
0002A872 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0002A876 6200                       		bhi.s	loc_3D89C
0002A878 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0002A87E                            		
0002A87E                            loc_3D89C:
0002A87E 6100 0000                  		bsr.w	Debug_ShowItem
0002A882 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0002A888 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0002A88E                            		
0002A88E                            Debug_Skip:
0002A88E 7006                       		moveq	#6,d0
0002A890 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0002A896 6700                       		beq.s	loc_3D8BC
0002A898 7000                       		moveq	#0,d0
0002A89A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0002A89E                            		
0002A89E                            loc_3D8BC:
0002A89E 45F9 0000 0000             		lea	(DebugList).l,a2 
0002A8A4 D040                       		add.w	d0,d0
0002A8A6 D4F2 0000                  		adda.w	(a2,d0.w),a2
0002A8AA 3C1A                       		move.w	(a2)+,d6
0002A8AC 6100 0000                  		bsr.w	Debug_Control
0002A8B0 4EF9 0001 5C48             		jmp	DisplaySprite 
0002A8B6                            		
0002A8B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002A8B6                            
0002A8B6                            
0002A8B6                            Debug_Control:
0002A8B6 7800                       		moveq	#0,d4
0002A8B8 323C 0001                  		move.w	#1,d1
0002A8BC 1838 F605                  		move.b	($FFFFF605).w,d4
0002A8C0 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0002A8C4 6600                       		bne.s	loc_3D916	; if yes, branch
0002A8C6 1038 F604                  		move.b	($FFFFF604).w,d0
0002A8CA 0240 000F                  		andi.w	#$F,d0
0002A8CE 6600                       		bne.s	loc_3D8FE
0002A8D0 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0002A8D6 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0002A8DC 6000 0000                  		bra.w	Debug_BackItem
0002A8E0                            
0002A8E0                            loc_3D8FE:
0002A8E0 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0002A8E4 6600                       		bne.s	loc_3D91A
0002A8E6 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0002A8EC 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0002A8F0 6600                       		bne.s	loc_3D916
0002A8F2 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0002A8F8                            
0002A8F8                            loc_3D916:
0002A8F8 1838 F604                  		move.b	($FFFFF604).w,d4
0002A8FC                            		
0002A8FC                            loc_3D91A:
0002A8FC 7200                       		moveq	#0,d1
0002A8FE 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0002A902 5241                       		addq.w	#1,d1
0002A904 4841                       		swap.w	d1
0002A906 E881                       		asr.l	#4,d1
0002A908 2428 000C                  		move.l	$C(a0),d2
0002A90C 2628 0008                  		move.l	8(a0),d3
0002A910 0804 0000                  		btst	#0,d4		; is up	being pressed?
0002A914 6700                       		beq.s	loc_3D944	; if not, branch
0002A916 9481                       		sub.l	d1,d2
0002A918 7000                       		moveq	#0,d0
0002A91A 3038 F72C                  		move.w	($FFFFF72C).w,d0
0002A91E 4840                       		swap.w	d0
0002A920 B480                       		cmp.l	d0,d2
0002A922 6C00                       		bge.s	loc_3D944
0002A924 2400                       		move.l	d0,d2
0002A926                            		
0002A926                            loc_3D944:
0002A926 0804 0001                  		btst	#1,d4		; is down being	pressed?
0002A92A 6700                       		beq.s	loc_3D95E	; if not, branch
0002A92C D481                       		add.l	d1,d2
0002A92E 7000                       		moveq	#0,d0
0002A930 3038 F726                  		move.w	($FFFFF726).w,d0
0002A934 0640 00DF                  		addi.w	#$DF,d0
0002A938 4840                       		swap.w	d0
0002A93A B480                       		cmp.l	d0,d2
0002A93C 6D00                       		blt.s	loc_3D95E
0002A93E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0002A944 6700                       		beq.s	loc_3D95E
0002A946 2400                       		move.l	d0,d2
0002A948                            		
0002A948                            loc_3D95E:
0002A948 0804 0002                  		btst	#2,d4
0002A94C 6700                       		beq.s	loc_3D96A
0002A94E 9681                       		sub.l	d1,d3
0002A950 6400                       		bcc.s	loc_3D96A
0002A952 7600                       		moveq	#0,d3
0002A954                            
0002A954                            loc_3D96A:
0002A954 0804 0003                  		btst	#3,d4
0002A958 6700                       		beq.s	loc_3D972
0002A95A D681                       		add.l	d1,d3
0002A95C                            
0002A95C                            loc_3D972:
0002A95C 2142 000C                  		move.l	d2,$C(a0)
0002A960 2143 0008                  		move.l	d3,8(a0)
0002A964                            
0002A964                            Debug_BackItem:
0002A964 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0002A96A 6700                       		beq.s	Debug_MakeItem	; if not, branch
0002A96C 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0002A972 6700                       		beq.s	Debug_NextItem	; if not, branch
0002A974 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0002A978 6400                       		bcc.s	Debug_NoLoop
0002A97A DD38 FE06                  		add.b	d6,($FFFFFE06).w
0002A97E 6000                       		bra.s	Debug_NoLoop
0002A980                            ; ===========================================================================
0002A980                            
0002A980                            Debug_NextItem:
0002A980 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0002A986 6700                       		beq.s	Debug_MakeItem	; if not, branch
0002A988 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0002A98C BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0002A990 6200                       		bhi.s	Debug_NoLoop
0002A992 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0002A998                            
0002A998                            Debug_NoLoop:
0002A998 6000 0000                  		bra	Debug_ShowItem
0002A99C                            ; ===========================================================================
0002A99C                            
0002A99C                            Debug_MakeItem:
0002A99C 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0002A9A2 6700                       		beq.s	Debug_Exit	; if not, branch
0002A9A4                            ;----------------------------------------------------
0002A9A4                            ; Debug glitch fix ; Neto - Sonic 2D
0002A9A4 0C38 0006 D024             		cmpi.b  #$06, ($FFFFD024).w  
0002A9AA 6600                       		bne.s   Player_Ok                              
0002A9AC 4E75                       		rts                                          
0002A9AE                            Player_Ok:                
0002A9AE                            ;--------------------------------------------------- 
0002A9AE 4EB9 0000 0000             		jsr	SingleObjectLoad 
0002A9B4 6600                       		bne.s	Debug_Exit
0002A9B6 3368 0008 0008             		move.w	8(a0),8(a1)
0002A9BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0002A9C2 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0002A9C6 1368 0001 0001             		move.b	1(a0),1(a1)
0002A9CC 1368 0001 0022             		move.b	1(a0),$22(a1)
0002A9D2 0229 007F 0022             		andi.b	#$7F,$22(a1)
0002A9D8 7000                       		moveq	#0,d0
0002A9DA 1038 FE06                  		move.b	($FFFFFE06).w,d0
0002A9DE E748                       		lsl.w	#3,d0
0002A9E0 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0002A9E6 4E75                       		rts
0002A9E8                            ; ===========================================================================
0002A9E8                            
0002A9E8                            Debug_Exit:
0002A9E8 0838 0004 F605             		btst	#4,($FFFFF605).w
0002A9EE 6700 0000                  		beq.w	Debug_DoNothing
0002A9F2 7000                       		moveq	#0,d0
0002A9F4 31C0 FE08                  		move.w	d0,(Debug_placement_mode).w
0002A9F8 46FC 2700                  		move	#$2700,sr
0002A9FC 4EB9 0002 8B3A             		jsr	(Hud_Base).l
0002AA02 11FC 0001 FE1F             		move.b	#1,(Update_HUD_score).w
0002AA08 11FC 0080 FE1D             		move.b	#-$80,(Update_HUD_rings).w
0002AA0E 46FC 2300                  		move	#$2300,sr
0002AA12 43F8 D000                  		lea	(MainCharacter).w,a1
0002AA16                            		;bcc.w	Debug_Exit_2
0002AA16                            		
0002AA16                            Debug_Exit_2:
0002AA16 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
0002AA1A 6700                       		beq.s	Debug_Exit_3	; if not, branch
0002AA1C 237C 0000 0000 0004        		move.l	#Map_SuperSonic,mappings(a1)
0002AA24 4EF9 0000 0000             		jmp	Debug_Exit_Final
0002AA2A                            		
0002AA2A                            Debug_Exit_3:
0002AA2A 237C 0000 0000 0004        		move.l	#Map_Sonic,mappings(a1)
0002AA32                            ;		bcc.w	Debug_Exit_Final
0002AA32                            
0002AA32                            Debug_Exit_Final:		
0002AA32 337C 0780 0002             		move.w	#$780,art_tile(a1)
0002AA38 1340 001C                  		move.b	d0,anim(a1)
0002AA3C 3340 000A                  		move.w	d0,$A(a1)
0002AA40 3340 000E                  		move.w	d0,$E(a1)
0002AA44 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0002AA4A 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0002AA50 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in the special stage?
0002AA56 6600                       		bne.s	Debug_Exitnormal ; if not, branch
0002AA58 4278 F780                  		clr.w ($FFFFF780).w ; Clear special stage rotation
0002AA5C 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0002AA62 237C 0000 0000 0004        		move.l	#Map_Sonic,mappings(a1); use mappings
0002AA6A                            ;		move.w	#$780,art_tile(a1) ; Use right art
0002AA6A 137C 0002 001C                     move.b  #2,anim(a1)
0002AA70 08E9 0002 0022                     bset    #2,status(a1)
0002AA76 08E9 0001 0022                     bset    #1,status(a1)
0002AA7C 4E75                       		rts ; retrun
0002AA7E                            Debug_Exitnormal:
0002AA7E                            ;		move.l	($FFFFFF7A).w,(MainCharacter+mappings).w
0002AA7E                            ;		move.w	($FFFFFF7E).w,(MainCharacter+art_tile).w
0002AA7E 6100                       		bsr.s	sub_92C54
0002AA80 137C 0013 0016             		move.b	#$13,$16(a1) ; Set Sonic's vertical size
0002AA86 137C 0009 0017             		move.b	#9,$17(a1) ; Set Sonic's horizontal size
0002AA8C                            ;		clr.w ($FFFFD010).w ; Clear Sonic's horizontal speed
0002AA8C                            ;		clr.l ($FFFFD012).w ; Clear Sonic's vertical speed & inertia
0002AA8C                            ;		clr.b 	jumping(a0) ; Clear standing on object flag
0002AA8C                            ;		clr.b	($FFFFD022).w ; Set Sonic to air (Will clear any other state)
0002AA8C                            ;		clr.b	(MainCharacter+anim).w ; Set to roll animation
0002AA8C                            ;		clr.b ($FFFFD025).w ; Clear secondary routine counter
0002AA8C                            ;		addq.l	#4,sp ; Make Sonic unable to jump for small period of time (If I'm correct, it is 1 frame)
0002AA8C                            
0002AA8C                            Debug_DoNothing:
0002AA8C 4E75                       		rts	
0002AA8E                            ; End of function Debug_Control
0002AA8E                            sub_92C54:
0002AA8E 1340 001C                  		move.b	d0,anim(a1)
0002AA92 3340 000A                  		move.w	d0,2+x_pos(a1) ; subpixel x
0002AA96 3340 000E                  		move.w	d0,2+y_pos(a1) ; subpixel y
0002AA9A 11C0 F7C8                  		move.b	d0,($FFFFF7C8).w
0002AA9E 1340 0039                  		move.b	d0,spindash_flag(a1)
0002AAA2 3340 0010                  		move.w	d0,x_vel(a1)
0002AAA6 3340 0012                  		move.w	d0,y_vel(a1)
0002AAAA 3340 0020                  		move.w	d0,inertia(a1)
0002AAAE 1340 0038                  		move.b	d0,$38(a1)
0002AAB2 0229 0001 0022             		andi.b	#1,status(a1)
0002AAB8 0029 0002 0022             		ori.b	#2,status(a1)
0002AABE 137C 0002 0024             		move.b	#2,routine(a1)
0002AAC4 4E75                       		rts
0002AAC6                            ; End of function sub_92C54
0002AAC6                            
0002AAC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002AAC6                            
0002AAC6                            
0002AAC6                            Debug_ShowItem:				; XREF: Debug_Main
0002AAC6 7000                       		moveq	#0,d0
0002AAC8 1038 FE06                  		move.b	($FFFFFE06).w,d0
0002AACC E748                       		lsl.w	#3,d0
0002AACE 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0002AAD4 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0002AADA 1172 0005 001A             		move.b	5(a2,d0.w),mapping_frame(a0) ; load frame	number for item
0002AAE0 4E75                       		rts	
0002AAE2                            ; End of function Debug_ShowItem
0002AAE2                            
0002AAE2                            ; ===========================================================================
0002AAE2                            
0002AAE2                            dbglistobj macro   obj, mapaddr,  decl, frame, flags, vram
0002AAE2                            	dc.l obj<<24|mapaddr
0002AAE2                            	dc.w decl<<8|frame
0002AAE2                            	dc.w flags<<12|vram
0002AAE2                                endm
0002AAE2                            
0002AAE2                            ; ---------------------------------------------------------------------------
0002AAE2                            ; Debug	list pointers
0002AAE2                            ; ---------------------------------------------------------------------------
0002AAE2                            DebugList:
0002AAE2                            	include "_inc\Debug list pointers.asm"
0002AAE2                            ; ---------------------------------------------------------------------------
0002AAE2                            ; Debug	list pointers
0002AAE2                            ; ---------------------------------------------------------------------------
0002AAE2 0000                       	dc.w Debug_GHZ-DebugList
0002AAE4 0000                       	dc.w Debug_LZ-DebugList
0002AAE6 0000                       	dc.w Debug_MZ-DebugList
0002AAE8 0000                       	dc.w Debug_SLZ-DebugList
0002AAEA 0000                       	dc.w Debug_SYZ-DebugList
0002AAEC 0000                       	dc.w Debug_SBZ-DebugList
0002AAEE 0000                       	dc.w Debug_Ending-DebugList
0002AAF0 0000                       	dc.w Debug_ABZ-DebugList
0002AAF0 0000                       	dc.w Debug_ABZ-DebugList
0002AAF2                            
0002AAF2                            ; ---------------------------------------------------------------------------
0002AAF2                            ; Debug	list - Green Hill
0002AAF2                            ; ---------------------------------------------------------------------------
0002AAF2                            Debug_GHZ:
0002AAF2                            	include "_inc\Debug list - GHZ.asm"
0002AAF2                            ; ---------------------------------------------------------------------------
0002AAF2                            ; Debug	list - Green Hill
0002AAF2                            ; ---------------------------------------------------------------------------
0002AAF2 0000                       	dc.w (((Debug_GHz_End-Debug_GHz-$02)/$08))			; number of items in list
0002AAF4 2501 1D18                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0002AAF8 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0002AAFC 2601 23D2                  	dc.l Map_obj26+$26000000
0002AB00 080A 0680                  	dc.b 8,	$A, 6, $80
0002AB04 2601 23D2                  	dc.l Map_obj26+$26000000
0002AB08 0608 0680                  	dc.b 6,	8, 6, $80
0002AB0C 2601 23D2                  	dc.l Map_obj26+$26000000
0002AB10 0507 0680                  	dc.b 5,	7, 6, $80
0002AB14 2601 23D2                  	dc.l Map_obj26+$26000000
0002AB18 0406 0680                  	dc.b 4,	6, 6, $80
0002AB1C 2601 23D2                  	dc.l Map_obj26+$26000000
0002AB20 0305 0680                  	dc.b 3,	5, 6, $80
0002AB24 2601 23D2                  	dc.l Map_obj26+$26000000
0002AB28 0204 0680                  	dc.b 2,	4, 6, $80
0002AB2C 2601 23D2                  	dc.l Map_obj26+$26000000
0002AB30 0103 0680                  	dc.b 1,	3, 6, $80
0002AB34 1F01 13C2                  	dc.l Map_obj1F+$1F000000
0002AB38 0000 0400                  	dc.b 0,	0, 4, 0
0002AB3C 2201 16BA                  	dc.l Map_obj22+$22000000
0002AB40 0000 0444                  	dc.b 0,	0, 4, $44
0002AB44 2B01 2CBE                  	dc.l Map_obj2B+$2B000000
0002AB48 0000 047B                  	dc.b 0,	0, 4, $7B
0002AB4C 3601 54D0                  	dc.l Map_obj36+$36000000
0002AB50 0000 051B                  	dc.b 0,	0, 5, $1B
0002AB54 1800 FA68                  	dc.l Map_obj18+$18000000
0002AB58 0000 4000                  	dc.b 0,	0, $40,	0
0002AB5C 3B01 563E                  	dc.l Map_obj3B+$3B000000
0002AB60 0000 63D0                  	dc.b 0,	0, $63,	$D0
0002AB64 4001 8954                  	dc.l Map_obj40+$40000000
0002AB68 0000 04F0                  	dc.b 0,	0, 4, $F0
0002AB6C 4101 6F3E                  	dc.l Map_obj41+$41000000
0002AB70 0000 0523                  	dc.b 0,	0, 5, $23
0002AB74 4101 6F3E                  	dc.l Map_obj41+$41000000
0002AB78 1003 0533                  	dc.b $10,	3, 5, $33
0002AB7C 4101 6F3E                  	dc.l Map_obj41+$41000000
0002AB80 2006 0523                  	dc.b $20,	6, 5, $23
0002AB84                            ;	dc.l Map_obj41+$41000000
0002AB84                            ;	dc.b 1,	0, 5, $23
0002AB84                            ;	dc.l Map_obj41+$41000000
0002AB84                            ;	dc.b $40,	$A, 5, $23
0002AB84 3E02 67EC                  	dc.l Map_obj3E+$3E000000
0002AB88 0000 0024                  	dc.b 0,	0, 0, $24
0002AB8C 3E03 67EC                  	dc.l Map_obj3E+$3E010000
0002AB90 0100 0024                  	dc.b 1,	0, 0, $24
0002AB94 4201 71D8                  	dc.l Map_obj42+$42000000
0002AB98 0000 249B                  	dc.b 0,	0, $24,	$9B
0002AB9C 4401 74A2                  	dc.l Map_obj44+$44000000
0002ABA0 0000 434C                  	dc.b 0,	0, $43,	$4C
0002ABA4 1900 FD88                  	dc.l Map_obj48+$19000000
0002ABA8 0000 43AA                  	dc.b 0,	0, $43,	$AA
0002ABAC 4F01 8ADA                  	dc.l Map_SpdBooster+$4F000000
0002ABB0 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002ABB4 1002 7F74                  	dc.l Map_obj10+$10000000
0002ABB8 0100 43B2                  	dc.b 1,	0,  $43,$B2
0002ABBC 1900 FCD0                  	dc.l Map_obj19+$19000000
0002ABC0 0100 43B2                  	dc.b 1,	0,  $43,$B2
0002ABC4 7902 2B04                  	dc.l Map_obj79+$79000000
0002ABC8 0100 06C0                  	dc.b 1,	0, 6, $C0
0002ABCC 4B01 1D58                  	dc.l Map_obj4B+$4B000000
0002ABD0 0000 2400                  	dc.b 0,	0, $24,	0
0002ABD4 7D02 2C34                  	dc.l Map_obj7D+$7D000000
0002ABD8 0101 84B6                  	dc.b 1,	1, $84,	$B6
0002ABDC 1100 F218                  	dc.l Map_obj11+$11000000
0002ABE0 0C00 438E                  	dc.b $C,	0, $43,	$8E
0002ABE4                            	even
0002ABE4                            	even
0002ABE4                            Debug_GHZ_End:
0002ABE4                            
0002ABE4                            ; ---------------------------------------------------------------------------
0002ABE4                            ; Debug	list - Labyrinth
0002ABE4                            ; ---------------------------------------------------------------------------
0002ABE4                            Debug_LZ:
0002ABE4                            	include "_inc\Debug list - LZ.asm"
0002ABE4                            ; ---------------------------------------------------------------------------
0002ABE4                            ; Debug	list - Labyrinth
0002ABE4                            ; ---------------------------------------------------------------------------
0002ABE4 001F                       	dc.w $1F
0002ABE6 2501 1D18                  	dc.l Map_obj25+$25000000
0002ABEA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002ABEE 2601 23D2                  	dc.l Map_obj26+$26000000
0002ABF2 080A 0680                  	dc.b 8,	$A, 6, $80
0002ABF6 2601 23D2                  	dc.l Map_obj26+$26000000
0002ABFA 0608 0680                  	dc.b 6,	8, 6, $80
0002ABFE 2601 23D2                  	dc.l Map_obj26+$26000000
0002AC02 0507 0680                  	dc.b 5,	7, 6, $80
0002AC06 2601 23D2                  	dc.l Map_obj26+$26000000
0002AC0A 0406 0680                  	dc.b 4,	6, 6, $80
0002AC0E 2601 23D2                  	dc.l Map_obj26+$26000000
0002AC12 0305 0680                  	dc.b 3,	5, 6, $80
0002AC16 2601 23D2                  	dc.l Map_obj26+$26000000
0002AC1A 0204 0680                  	dc.b 2,	4, 6, $80
0002AC1E 2601 23D2                  	dc.l Map_obj26+$26000000
0002AC22 0103 0680                  	dc.b 1,	3, 6, $80
0002AC26 4101 6F3E                  	dc.l Map_obj41+$41000000
0002AC2A 0000 0523                  	dc.b 0,	0, 5, $23
0002AC2E 2C01 2D66                  	dc.l Map_obj2C+$2C000000
0002AC32 0800 2486                  	dc.b 8,	0, $24,	$86
0002AC36 2D01 2F5A                  	dc.l Map_obj2D+$2D000000
0002AC3A 0002 84A6                  	dc.b 0,	2, $84,	$A6
0002AC3E 1601 B5B4                  	dc.l Map_obj16+$16000000
0002AC42 0000 03CC                  	dc.b 0,	0, 3, $CC
0002AC46 1601 B5B4                  	dc.l Map_obj16+$16000000
0002AC4A 0203 03CC                  	dc.b 2,	3, 3, $CC
0002AC4E 3301 437C                  	dc.l Map_obj33+$33000000
0002AC52 0000 43DE                  	dc.b 0,	0, $43,	$DE
0002AC56 3201 3F38                  	dc.l Map_obj32+$32000000
0002AC5A 0000 0513                  	dc.b 0,	0, 5, $13
0002AC5E 3601 54D0                  	dc.l Map_obj36+$36000000
0002AC62 0000 051B                  	dc.b 0,	0, 5, $1B
0002AC66 5201 9792                  	dc.l Map_obj52a+$52000000
0002AC6A 0400 43BC                  	dc.b 4,	0, $43,	$BC
0002AC6E 6101 B7CC                  	dc.l Map_obj61+$61000000
0002AC72 0100 43E6                  	dc.b 1,	0, $43,	$E6
0002AC76 6101 B7CC                  	dc.l Map_obj61+$61000000
0002AC7A 1301 43E6                  	dc.b $13, 1, $43, $E6
0002AC7E 6101 B7CC                  	dc.l Map_obj61+$61000000
0002AC82 0500 43E6                  	dc.b 5,	0, $43,	$E6
0002AC86 6201 B924                  	dc.l Map_obj62+$62000000
0002AC8A 0000 443E                  	dc.b 0,	0, $44,	$3E
0002AC8E 6101 B7CC                  	dc.l Map_obj61+$61000000
0002AC92 2702 43E6                  	dc.b $27, 2, $43, $E6
0002AC96 6101 B7CC                  	dc.l Map_obj61+$61000000
0002AC9A 3003 43E6                  	dc.b $30, 3, $43, $E6
0002AC9E 6301 BC88                  	dc.l Map_obj63+$63000000
0002ACA2 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0002ACA6 6001 B4FC                  	dc.l Map_obj60+$60000000
0002ACAA 0000 0467                  	dc.b 0,	0, 4, $67
0002ACAE 6401 BFD2                  	dc.l Map_obj64+$64000000
0002ACB2 8413 8348                  	dc.b $84, $13, $83, $48
0002ACB6 6501 C15A                  	dc.l Map_obj65+$65000000
0002ACBA 0202 C259                  	dc.b 2,	2, $C2,	$59
0002ACBE 6501 C15A                  	dc.l Map_obj65+$65000000
0002ACC2 0909 C259                  	dc.b 9,	9, $C2,	$59
0002ACC6 0B01 A96A                  	dc.l Map_obj0B+$B000000
0002ACCA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0002ACCE 0C01 AA3C                  	dc.l Map_obj0C+$C000000
0002ACD2 0200 4328                  	dc.b 2,	0, $43,	$28
0002ACD6 7902 2B04                  	dc.l Map_obj79+$79000000
0002ACDA 0100 06C0                  	dc.b 1,	0, 6, $C0
0002ACDE 4B01 1D58                  	dc.l Map_obj4B+$4B000000
0002ACE2 0000 2400                  	dc.b 0,	0, $24,	0
0002ACE6                            	even
0002ACE6                            	even
0002ACE6                            Debug_LZ_End:
0002ACE6                            
0002ACE6                            ; ---------------------------------------------------------------------------
0002ACE6                            ; Debug	list - Marble
0002ACE6                            ; ---------------------------------------------------------------------------
0002ACE6                            Debug_MZ:
0002ACE6                            	include "_inc\Debug list - MZ.asm"
0002ACE6                            ; ---------------------------------------------------------------------------
0002ACE6                            ; Debug	list - Marble
0002ACE6                            ; ---------------------------------------------------------------------------
0002ACE6 0019                       	dc.w $19
0002ACE8 2501 1D18                  	dc.l Map_obj25+$25000000
0002ACEC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002ACF0 2601 23D2                  	dc.l Map_obj26+$26000000
0002ACF4 080A 0680                  	dc.b 8,	$A, 6, $80
0002ACF8 2601 23D2                  	dc.l Map_obj26+$26000000
0002ACFC 0608 0680                  	dc.b 6,	8, 6, $80
0002AD00 2601 23D2                  	dc.l Map_obj26+$26000000
0002AD04 0507 0680                  	dc.b 5,	7, 6, $80
0002AD08 2601 23D2                  	dc.l Map_obj26+$26000000
0002AD0C 0406 0680                  	dc.b 4,	6, 6, $80
0002AD10 2601 23D2                  	dc.l Map_obj26+$26000000
0002AD14 0305 0680                  	dc.b 3,	5, 6, $80
0002AD18 2601 23D2                  	dc.l Map_obj26+$26000000
0002AD1C 0204 0680                  	dc.b 2,	4, 6, $80
0002AD20 2601 23D2                  	dc.l Map_obj26+$26000000
0002AD24 0103 0680                  	dc.b 1,	3, 6, $80
0002AD28 2201 16BA                  	dc.l Map_obj22+$22000000
0002AD2C 0000 0444                  	dc.b 0,	0, 4, $44
0002AD30 3601 54D0                  	dc.l Map_obj36+$36000000
0002AD34 0000 051B                  	dc.b 0,	0, 5, $1B
0002AD38 4101 6F3E                  	dc.l Map_obj41+$41000000
0002AD3C 0000 0523                  	dc.b 0,	0, 5, $23
0002AD40 1301 345A                  	dc.l Map_obj14+$13000000
0002AD44 0000 0345                  	dc.b 0,	0, 3, $45
0002AD48 4601 7B10                  	dc.l Map_obj46+$46000000
0002AD4C 0000 4000                  	dc.b 0,	0, $40,	0
0002AD50 4C01 83D8                  	dc.l Map_obj4C+$4C000000
0002AD54 0000 63A8                  	dc.b 0,	0, $63,	$A8
0002AD58 4E01 86BC                  	dc.l Map_obj4E+$4E000000
0002AD5C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0002AD60 3301 437C                  	dc.l Map_obj33+$33000000
0002AD64 0000 42B8                  	dc.b 0,	0, $42,	$B8
0002AD68 5001 8D08                  	dc.l Map_obj50+$50000000
0002AD6C 0000 247B                  	dc.b 0,	0, $24,	$7B
0002AD70 5101 94EE                  	dc.l Map_obj51+$51000000
0002AD74 0000 42B8                  	dc.b 0,	0, $42,	$B8
0002AD78 5201 973C                  	dc.l Map_obj52+$52000000
0002AD7C 0000 02B8                  	dc.b 0,	0, 2, $B8
0002AD80 5301 0374                  	dc.l Map_obj53+$53000000
0002AD84 0000 62B8                  	dc.b 0,	0, $62,	$B8
0002AD88 5401 839E                  	dc.l Map_obj54+$54000000
0002AD8C 0000 8680                  	dc.b 0,	0, $86,	$80
0002AD90 5501 9936                  	dc.l Map_obj55+$55000000
0002AD94 0000 04B8                  	dc.b 0,	0, 4, $B8
0002AD98 7802 277A                  	dc.l Map_obj78+$78000000
0002AD9C 0000 24FF                  	dc.b 0,	0, $24,	$FF
0002ADA0 4F01 8ADA                  	dc.l Map_SpdBooster+$4F000000
0002ADA4 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002ADA8 7902 2B04                  	dc.l Map_obj79+$79000000
0002ADAC 0100 06C0                  	dc.b 1,	0, 6, $C0
0002ADB0 4B01 1D58                  	dc.l Map_obj4B+$4B000000
0002ADB4 0000 2400                  	dc.b 0,	0, $24,	0
0002ADB8                            	even
0002ADB8                            	even
0002ADB8                            Debug_MZ_End:
0002ADB8                            
0002ADB8                            ; ---------------------------------------------------------------------------
0002ADB8                            ; Debug	list - Star Light
0002ADB8                            ; ---------------------------------------------------------------------------
0002ADB8                            Debug_SLZ:
0002ADB8                            	include "_inc\Debug list - SLZ.asm"
0002ADB8                            ; ---------------------------------------------------------------------------
0002ADB8                            ; Debug	list - Star Light
0002ADB8                            ; ---------------------------------------------------------------------------
0002ADB8 0016                       	dc.w $16
0002ADBA 2501 1D18                  	dc.l Map_obj25+$25000000
0002ADBE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002ADC2 2601 23D2                  	dc.l Map_obj26+$26000000
0002ADC6 080A 0680                  	dc.b 8,	$A, 6, $80
0002ADCA 2601 23D2                  	dc.l Map_obj26+$26000000
0002ADCE 0608 0680                  	dc.b 6,	8, 6, $80
0002ADD2 2601 23D2                  	dc.l Map_obj26+$26000000
0002ADD6 0507 0680                  	dc.b 5,	7, 6, $80
0002ADDA 2601 23D2                  	dc.l Map_obj26+$26000000
0002ADDE 0406 0680                  	dc.b 4,	6, 6, $80
0002ADE2 2601 23D2                  	dc.l Map_obj26+$26000000
0002ADE6 0305 0680                  	dc.b 3,	5, 6, $80
0002ADEA 2601 23D2                  	dc.l Map_obj26+$26000000
0002ADEE 0204 0680                  	dc.b 2,	4, 6, $80
0002ADF2 2601 23D2                  	dc.l Map_obj26+$26000000
0002ADF6 0103 0680                  	dc.b 1,	3, 6, $80
0002ADFA 5901 A3C4                  	dc.l Map_obj59+$59000000
0002ADFE 0000 4000                  	dc.b 0,	0, $40,	0
0002AE02 5301 0374                  	dc.l Map_obj53+$53000000
0002AE06 0002 44E0                  	dc.b 0,	2, $44,	$E0
0002AE0A 1800 FAC6                  	dc.l Map_obj18b+$18000000
0002AE0E 0000 4000                  	dc.b 0,	0, $40,	0
0002AE12 5A01 A4E6                  	dc.l Map_obj5A+$5A000000
0002AE16 0000 4000                  	dc.b 0,	0, $40,	0
0002AE1A 5B01 A684                  	dc.l Map_obj5B+$5B000000
0002AE1E 0000 4000                  	dc.b 0,	0, $40,	0
0002AE22 5D01 AC48                  	dc.l Map_obj5D+$5D000000
0002AE26 0000 43A0                  	dc.b 0,	0, $43,	$A0
0002AE2A 5E01 AFC0                  	dc.l Map_obj5E+$5E000000
0002AE2E 0000 0374                  	dc.b 0,	0, 3, $74
0002AE32 4101 6F3E                  	dc.l Map_obj41+$41000000
0002AE36 0000 0523                  	dc.b 0,	0, 5, $23
0002AE3A 1301 345A                  	dc.l Map_obj14+$13000000
0002AE3E 0000 0480                  	dc.b 0,	0, 4, $80
0002AE42 1C01 0476                  	dc.l Map_obj1C+$1C000000
0002AE46 0000 44D8                  	dc.b 0,	0, $44,	$D8
0002AE4A 5F01 B248                  	dc.l Map_obj5F+$5F000000
0002AE4E 0000 0400                  	dc.b 0,	0, 4, 0
0002AE52 6001 B4FC                  	dc.l Map_obj60+$60000000
0002AE56 0000 2429                  	dc.b 0,	0, $24,	$29
0002AE5A 4F01 8ADA                  	dc.l Map_SpdBooster+$4F000000
0002AE5E 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002AE62 7902 2B04                  	dc.l Map_obj79+$79000000
0002AE66 0100 06C0                  	dc.b 1,	0, 6, $C0
0002AE6A 4B01 1D58                  	dc.l Map_obj4B+$4B000000
0002AE6E 0000 2400                  	dc.b 0,	0, $24,	0
0002AE72                            	even
0002AE72                            	even
0002AE72                            Debug_SLZ_End:
0002AE72                            
0002AE72                            ; ---------------------------------------------------------------------------
0002AE72                            ; Debug	list - Spring Yard
0002AE72                            ; ---------------------------------------------------------------------------
0002AE72                            Debug_SYZ:
0002AE72                            	include "_inc\Debug list - SYZ.asm"
0002AE72                            ; ---------------------------------------------------------------------------
0002AE72                            ; Debug	list - Spring Yard
0002AE72                            ; ---------------------------------------------------------------------------
0002AE72 0016                       	dc.w $16
0002AE74 2501 1D18                  	dc.l Map_obj25+$25000000
0002AE78 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002AE7C 2601 23D2                  	dc.l Map_obj26+$26000000
0002AE80 080A 0680                  	dc.b 8,	$A, 6, $80
0002AE84 2601 23D2                  	dc.l Map_obj26+$26000000
0002AE88 0608 0680                  	dc.b 6,	8, 6, $80
0002AE8C 2601 23D2                  	dc.l Map_obj26+$26000000
0002AE90 0507 0680                  	dc.b 5,	7, 6, $80
0002AE94 2601 23D2                  	dc.l Map_obj26+$26000000
0002AE98 0406 0680                  	dc.b 4,	6, 6, $80
0002AE9C 2601 23D2                  	dc.l Map_obj26+$26000000
0002AEA0 0305 0680                  	dc.b 3,	5, 6, $80
0002AEA4 2601 23D2                  	dc.l Map_obj26+$26000000
0002AEA8 0204 0680                  	dc.b 2,	4, 6, $80
0002AEAC 2601 23D2                  	dc.l Map_obj26+$26000000
0002AEB0 0103 0680                  	dc.b 1,	3, 6, $80
0002AEB4 3601 54D0                  	dc.l Map_obj36+$36000000
0002AEB8 0000 051B                  	dc.b 0,	0, 5, $1B
0002AEBC 4101 6F3E                  	dc.l Map_obj41+$41000000
0002AEC0 0000 0523                  	dc.b 0,	0, 5, $23
0002AEC4 4301 740E                  	dc.l Map_obj43+$43000000
0002AEC8 0000 04B8                  	dc.b 0,	0, 4, $B8
0002AECC 1201 7B72                  	dc.l Map_obj12+$12000000
0002AED0 0000 0000                  	dc.b 0,	0, 0, 0
0002AED4 4701 7CCE                  	dc.l Map_obj47+$47000000
0002AED8 0000 0380                  	dc.b 0,	0, 3, $80
0002AEDC 1F01 13C2                  	dc.l Map_obj1F+$1F000000
0002AEE0 0000 0400                  	dc.b 0,	0, 4, 0
0002AEE4 2201 16BA                  	dc.l Map_obj22+$22000000
0002AEE8 0000 0444                  	dc.b 0,	0, 4, $44
0002AEEC 5001 8D08                  	dc.l Map_obj50+$50000000
0002AEF0 0000 247B                  	dc.b 0,	0, $24,	$7B
0002AEF4 1800 FAB4                  	dc.l Map_obj18a+$18000000
0002AEF8 0000 4000                  	dc.b 0,	0, $40,	0
0002AEFC 5601 9DC8                  	dc.l Map_obj56+$56000000
0002AF00 0000 4000                  	dc.b 0,	0, $40,	0
0002AF04 3201 3F38                  	dc.l Map_obj32+$32000000
0002AF08 0000 0513                  	dc.b 0,	0, 5, $13
0002AF0C 7802 277A                  	dc.l Map_obj78+$78000000
0002AF10 0000 24FF                  	dc.b 0,	0, $24,	$FF
0002AF14 4F01 8ADA                  	dc.l Map_SpdBooster+$4F000000
0002AF18 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002AF1C 7902 2B04                  	dc.l Map_obj79+$79000000
0002AF20 0100 06C0                  	dc.b 1,	0, 6, $C0
0002AF24                            	even
0002AF24                            	even
0002AF24                            Debug_SYZ_End:
0002AF24                            
0002AF24                            ; ---------------------------------------------------------------------------
0002AF24                            ; Debug	list - Scrap Brain
0002AF24                            ; ---------------------------------------------------------------------------
0002AF24                            Debug_SBZ:
0002AF24                            	include "_inc\Debug list - SBZ.asm"
0002AF24                            ; ---------------------------------------------------------------------------
0002AF24                            ; Debug	list - Scrap Brain
0002AF24                            ; ---------------------------------------------------------------------------
0002AF24 0024                       	dc.w $24
0002AF26 2501 1D18                  	dc.l Map_obj25+$25000000
0002AF2A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002AF2E 2601 23D2                  	dc.l Map_obj26+$26000000
0002AF32 080A 0680                  	dc.b 8,	$A, 6, $80
0002AF36 2601 23D2                  	dc.l Map_obj26+$26000000
0002AF3A 0608 0680                  	dc.b 6,	8, 6, $80
0002AF3E 2601 23D2                  	dc.l Map_obj26+$26000000
0002AF42 0507 0680                  	dc.b 5,	7, 6, $80
0002AF46 2601 23D2                  	dc.l Map_obj26+$26000000
0002AF4A 0406 0680                  	dc.b 4,	6, 6, $80
0002AF4E 2601 23D2                  	dc.l Map_obj26+$26000000
0002AF52 0305 0680                  	dc.b 3,	5, 6, $80
0002AF56 2601 23D2                  	dc.l Map_obj26+$26000000
0002AF5A 0204 0680                  	dc.b 2,	4, 6, $80
0002AF5E 2601 23D2                  	dc.l Map_obj26+$26000000
0002AF62 0103 0680                  	dc.b 1,	3, 6, $80
0002AF66 5F01 B248                  	dc.l Map_obj5F+$5F000000
0002AF6A 0000 0400                  	dc.b 0,	0, 4, 0
0002AF6E 6001 B4FC                  	dc.l Map_obj60+$60000000
0002AF72 0000 0429                  	dc.b 0,	0, 4, $29
0002AF76 7802 277A                  	dc.l Map_obj78+$78000000
0002AF7A 0000 22B0                  	dc.b 0,	0, $22,	$B0
0002AF7E 1501 A14A                  	dc.l Map_obj15b+$15000000
0002AF82 0702 4391                  	dc.b 7,	2, $43,	$91
0002AF86 6702 110C                  	dc.l Map_obj67+$67000000
0002AF8A E000 C344                  	dc.b $E0, 0, $C3, $44
0002AF8E 5201 973C                  	dc.l Map_obj52+$52000000
0002AF92 2802 22C0                  	dc.b $28, 2, $22, $C0
0002AF96 3201 3F38                  	dc.l Map_obj32+$32000000
0002AF9A 0000 0513                  	dc.b 0,	0, 5, $13
0002AF9E 6902 1354                  	dc.l Map_obj69+$69000000
0002AFA2 0300 4492                  	dc.b 3,	0, $44,	$92
0002AFA6 6902 13AE                  	dc.l Map_obj69a+$69000000
0002AFAA 8300 04DF                  	dc.b $83, 0, 4,	$DF
0002AFAE 6A02 15EE                  	dc.l Map_obj6A+$6A000000
0002AFB2 0200 43B5                  	dc.b 2,	0, $43,	$B5
0002AFB6 5301 0374                  	dc.l Map_obj53+$53000000
0002AFBA 0000 43F5                  	dc.b 0,	0, $43,	$F5
0002AFBE 5201 973C                  	dc.l Map_obj52+$52000000
0002AFC2 3903 4460                  	dc.b $39, 3, $44, $60
0002AFC6 6B02 19A4                  	dc.l Map_obj6B+$6B000000
0002AFCA 0000 22C0                  	dc.b 0,	0, $22,	$C0
0002AFCE 2A01 05F6                  	dc.l Map_obj2A+$2A000000
0002AFD2 0000 42E8                  	dc.b 0,	0, $42,	$E8
0002AFD6 6B02 19A4                  	dc.l Map_obj6B+$6B000000
0002AFDA 1301 22C0                  	dc.b $13, 1, $22, $C0
0002AFDE 6A02 15EE                  	dc.l Map_obj6A+$6A000000
0002AFE2 0100 43B5                  	dc.b 1,	0, $43,	$B5
0002AFE6 6B02 19A4                  	dc.l Map_obj6B+$6B000000
0002AFEA 2401 22C0                  	dc.b $24, 1, $22, $C0
0002AFEE 6A02 15EE                  	dc.l Map_obj6A+$6A000000
0002AFF2 0402 43B5                  	dc.b 4,	2, $43,	$B5
0002AFF6 6B02 19A4                  	dc.l Map_obj6B+$6B000000
0002AFFA 3401 22C0                  	dc.b $34, 1, $22, $C0
0002AFFE 6C02 1B6E                  	dc.l Map_obj6C+$6C000000
0002B002 0000 44C3                  	dc.b 0,	0, $44,	$C3
0002B006 6D01 7818                  	dc.l Map_obj6D+$6D000000
0002B00A 6400 83D9                  	dc.b $64, 0, $83, $D9
0002B00E 6D01 7818                  	dc.l Map_obj6D+$6D000000
0002B012 640B 83D9                  	dc.b $64, $B, $83, $D9
0002B016 6E02 1C26                  	dc.l Map_obj6E+$6E000000
0002B01A 0400 047E                  	dc.b 4,	0, 4, $7E
0002B01E 7002 2060                  	dc.l Map_obj70+$70000000
0002B022 0000 42F0                  	dc.b 0,	0, $42,	$F0
0002B026 7101 AB0A                  	dc.l Map_obj71+$71000000
0002B02A 1100 8680                  	dc.b $11, 0, $86, $80
0002B02E 1E01 0A90                  	dc.l Map_obj1E+$1E000000
0002B032 0400 2302                  	dc.b 4,	0, $23,	2
0002B036 4F01 8ADA                  	dc.l Map_SpdBooster+$4F000000
0002B03A 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002B03E 7902 2B04                  	dc.l Map_obj79+$79000000
0002B042 0100 06C0                  	dc.b 1,	0, 6, $C0
0002B046                            	even
0002B046                            	even
0002B046                            Debug_SBZ_End:
0002B046                            
0002B046                            ; ---------------------------------------------------------------------------
0002B046                            ; Debug	list - ending sequence / special stage
0002B046                            ; ---------------------------------------------------------------------------
0002B046                            Debug_Ending:
0002B046                            	include "_inc\Debug list - Ending and SS.asm"
0002B046                            ; ---------------------------------------------------------------------------
0002B046                            ; Debug	list - ending sequence / special stage
0002B046                            ; ---------------------------------------------------------------------------
0002B046 000D                       	dc.w $D
0002B048 2501 1D18                  	dc.l Map_obj25+$25000000
0002B04C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002B050 4701 7CCE                  	dc.l Map_obj47+$47000000
0002B054 0000 0380                  	dc.b 0,	0, 3, $80
0002B058 2801 10DC                  	dc.l Map_obj28a+$28000000
0002B05C 0A00 05A0                  	dc.b $A, 0, 5, $A0
0002B060 2801 10DC                  	dc.l Map_obj28a+$28000000
0002B064 0B00 05A0                  	dc.b $B, 0, 5, $A0
0002B068 2801 10DC                  	dc.l Map_obj28a+$28000000
0002B06C 0C00 05A0                  	dc.b $C, 0, 5, $A0
0002B070 2801 10C4                  	dc.l Map_obj28+$28000000
0002B074 0D00 0553                  	dc.b $D, 0, 5, $53
0002B078 2801 10C4                  	dc.l Map_obj28+$28000000
0002B07C 0E00 0553                  	dc.b $E, 0, 5, $53
0002B080 2801 10C4                  	dc.l Map_obj28+$28000000
0002B084 0F00 0573                  	dc.b $F, 0, 5, $73
0002B088 2801 10C4                  	dc.l Map_obj28+$28000000
0002B08C 1000 0573                  	dc.b $10, 0, 5,	$73
0002B090 2801 10DC                  	dc.l Map_obj28a+$28000000
0002B094 1100 0585                  	dc.b $11, 0, 5,	$85
0002B098 2801 10F4                  	dc.l Map_obj28b+$28000000
0002B09C 1200 0593                  	dc.b $12, 0, 5,	$93
0002B0A0 2801 10DC                  	dc.l Map_obj28a+$28000000
0002B0A4 1300 0565                  	dc.b $13, 0, 5,	$65
0002B0A8 2801 10F4                  	dc.l Map_obj28b+$28000000
0002B0AC 1400 05B3                  	dc.b $14, 0, 5,	$B3
0002B0B0                            	even
0002B0B0                            	even
0002B0B0                            Debug_Ending_End:
0002B0B0                            	
0002B0B0                            ; ---------------------------------------------------------------------------
0002B0B0                            ; Debug	list - Alpha Beta
0002B0B0                            ; ---------------------------------------------------------------------------
0002B0B0                            Debug_ABZ:
0002B0B0                            	include "_inc\Debug list - ABZ.asm"
0002B0B0                            ; ---------------------------------------------------------------------------
0002B0B0                            ; Debug	list - Alpha Beta
0002B0B0                            ; ---------------------------------------------------------------------------
0002B0B0 0000                       	dc.w (((Debug_ABz_End-Debug_ABz-$02)/$08))
0002B0B2 2501 1D18                  	dc.l Map_obj25+$25000000
0002B0B6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002B0BA 2601 23D2                  	dc.l Map_obj26+$26000000
0002B0BE 080A 0680                  	dc.b 8,	$A, 6, $80
0002B0C2 2601 23D2                  	dc.l Map_obj26+$26000000
0002B0C6 0608 0680                  	dc.b 6,	8, 6, $80
0002B0CA 2601 23D2                  	dc.l Map_obj26+$26000000
0002B0CE 0507 0680                  	dc.b 5,	7, 6, $80
0002B0D2 2601 23D2                  	dc.l Map_obj26+$26000000
0002B0D6 0406 0680                  	dc.b 4,	6, 6, $80
0002B0DA 2601 23D2                  	dc.l Map_obj26+$26000000
0002B0DE 0305 0680                  	dc.b 3,	5, 6, $80
0002B0E2 2601 23D2                  	dc.l Map_obj26+$26000000
0002B0E6 0204 0680                  	dc.b 2,	4, 6, $80
0002B0EA 2601 23D2                  	dc.l Map_obj26+$26000000
0002B0EE 0103 0680                  	dc.b 1,	3, 6, $80
0002B0F2 7902 2B04                  	dc.l Map_obj79+$79000000
0002B0F6 0100 06C0                  	dc.b 1,	0, 6, $C0
0002B0FA                            	even
0002B0FA                            	even
0002B0FA                            Debug_ABZ_End:
0002B0FA                            ; ---------------------------------------------------------------------------
0002B0FA                            ; Main level load blocks
0002B0FA                            ; ---------------------------------------------------------------------------
0002B0FA                            MainLoadBlocks:
0002B0FA                            	include "_inc\Main level load blocks.asm"
0002B0FA                            ; ---------------------------------------------------------------------------
0002B0FA                            ; Main level load blocks
0002B0FA                            ;
0002B0FA                            ; ===FORMAT===
0002B0FA                            ; level	patterns + (1st	PLC num	* 10^6)
0002B0FA                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0002B0FA                            ; 256x256 mappings
0002B0FA                            ; blank, music (unused), pal index (unused), pal index
0002B0FA                            ; ---------------------------------------------------------------------------
0002B0FA 0000 0000                  	dc.l Nem_GHZ+$4000000  ;changed from Nem_GHZ_2nd
0002B0FE 0000 0000                  	dc.l Blk16_GHZ+$5000000
0002B102 0000 0000                  	dc.l Blk256_GHZ
0002B106 0081 0404                  	dc.b 0,	$81, 4,	4
0002B10A 0000 0000                  	dc.l Nem_LZ+$6000000
0002B10E 0000 0000                  	dc.l Blk16_LZ+$7000000
0002B112 0000 0000                  	dc.l Blk256_LZ
0002B116 0082 0505                  	dc.b 0,	$82, 5,	5
0002B11A 0000 0000                  	dc.l Nem_MZ+$8000000
0002B11E 0000 0000                  	dc.l Blk16_MZ+$9000000
0002B122 0000 0000                  	dc.l Blk256_MZ
0002B126 0083 0606                  	dc.b 0,	$83, 6,	6
0002B12A 0000 0000                  	dc.l Nem_SLZ+$A000000
0002B12E 0000 0000                  	dc.l Blk16_SLZ+$B000000
0002B132 0000 0000                  	dc.l Blk256_SLZ
0002B136 0084 0707                  	dc.b 0,	$84, 7,	7
0002B13A 0000 0000                  	dc.l Nem_SYZ+$C000000
0002B13E 0000 0000                  	dc.l Blk16_SYZ+$D000000
0002B142 0000 0000                  	dc.l Blk256_SYZ
0002B146 0085 0808                  	dc.b 0,	$85, 8,	8
0002B14A 0000 0000                  	dc.l Nem_SBZ+$E000000
0002B14E 0000 0000                  	dc.l Blk16_SBZ+$F000000
0002B152 0000 0000                  	dc.l Blk256_SBZ
0002B156 0086 0909                  	dc.b 0,	$86, 9,	9
0002B15A 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0002B15E 0000 0000                  	dc.l Blk16_GHZ
0002B162 0000 0000                  	dc.l Blk256_GHZ
0002B166 0086 1313                  	dc.b 0,	$86, $13, $13
0002B16A 0000 0000                  	dc.l Nem_ABZ+$20000000
0002B16E 0000 0000                  	dc.l Blk16_ABZ+$21000000
0002B172 0000 0000                  	dc.l Blk256_ABZ
0002B176 008C 1414                  	dc.b 0,	$8C, $14, $14
0002B17A                            	even
0002B17A                            	even
0002B17A                            MainLoadBlocks2:
0002B17A                            	include "_inc\Main level load blocks2.asm"
0002B17A                            ; ---------------------------------------------------------------------------
0002B17A                            ; Main level load blocks
0002B17A                            ;
0002B17A                            ; ===FORMAT===
0002B17A                            ; level	patterns + (1st	PLC num	* 10^6)
0002B17A                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0002B17A                            ; 256x256 mappings
0002B17A                            ; blank, music (unused), pal index (unused), pal index
0002B17A                            ; ---------------------------------------------------------------------------
0002B17A 0000 0000                  	dc.l Nem_GHZ2+$4000000
0002B17E 0000 0000                  	dc.l Blk16_GHZ2+$5000000
0002B182 0000 0000                  	dc.l Blk256_GHZ2
0002B186 0081 0404                  	dc.b 0,	$81, 4,	4
0002B18A 0000 0000                  	dc.l Nem_LZ2+$6000000
0002B18E 0000 0000                  	dc.l Blk16_LZ2+$7000000
0002B192 0000 0000                  	dc.l Blk256_LZ2
0002B196 0082 0505                  	dc.b 0,	$82, 5,	5
0002B19A 0000 0000                  	dc.l Nem_MZ2+$8000000
0002B19E 0000 0000                  	dc.l Blk16_MZ2+$9000000
0002B1A2 0000 0000                  	dc.l Blk256_MZ2
0002B1A6 0083 0606                  	dc.b 0,	$83, 6,	6
0002B1AA 0000 0000                  	dc.l Nem_SLZ2+$A000000
0002B1AE 0000 0000                  	dc.l Blk16_SLZ2+$B000000
0002B1B2 0000 0000                  	dc.l Blk256_SLZ2
0002B1B6 0084 0707                  	dc.b 0,	$84, 7,	7
0002B1BA 0000 0000                  	dc.l Nem_SYZ2+$C000000
0002B1BE 0000 0000                  	dc.l Blk16_SYZ2+$D000000
0002B1C2 0000 0000                  	dc.l Blk256_SYZ2
0002B1C6 0085 0808                  	dc.b 0,	$85, 8,	8
0002B1CA 0000 0000                  	dc.l Nem_SBZ2+$E000000
0002B1CE 0000 0000                  	dc.l Blk16_SBZ2+$F000000
0002B1D2 0000 0000                  	dc.l Blk256_SBZ2
0002B1D6 0086 0909                  	dc.b 0,	$86, 9,	9
0002B1DA 0000 0000                  	dc.l Nem_GHZ2_2nd; main load block for ending
0002B1DE 0000 0000                  	dc.l Blk16_GHZ2
0002B1E2 0000 0000                  	dc.l Blk256_GHZ2
0002B1E6 0086 1313                  	dc.b 0,	$86, $13, $13
0002B1EA 0000 0000                  	dc.l Nem_ABZ+$20000000
0002B1EE 0000 0000                  	dc.l Blk16_ABZ+$21000000
0002B1F2 0000 0000                  	dc.l Blk256_ABZ
0002B1F6 008C 1414                  	dc.b 0,	$8C, $14, $14
0002B1FA                            	even
0002B1FA                            	even
0002B1FA                            MainLoadBlocks3:
0002B1FA                            	include "_inc\Main level load blocks3.asm"
0002B1FA                            ; ---------------------------------------------------------------------------
0002B1FA                            ; Main level load blocks
0002B1FA                            ;
0002B1FA                            ; ===FORMAT===
0002B1FA                            ; level	patterns + (1st	PLC num	* 10^6)
0002B1FA                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0002B1FA                            ; 256x256 mappings
0002B1FA                            ; blank, music (unused), pal index (unused), pal index
0002B1FA                            ; ---------------------------------------------------------------------------
0002B1FA 0000 0000                  	dc.l Nem_GHZ3+$4000000
0002B1FE 0000 0000                  	dc.l Blk16_GHZ3+$5000000
0002B202 0000 0000                  	dc.l Blk256_GHZ3
0002B206 0081 0404                  	dc.b 0,	$81, 4,	4
0002B20A 0000 0000                  	dc.l Nem_LZ3+$6000000
0002B20E 0000 0000                  	dc.l Blk16_LZ3+$7000000
0002B212 0000 0000                  	dc.l Blk256_LZ3
0002B216 0082 0505                  	dc.b 0,	$82, 5,	5
0002B21A 0000 0000                  	dc.l Nem_MZ3+$8000000
0002B21E 0000 0000                  	dc.l Blk16_MZ3+$9000000
0002B222 0000 0000                  	dc.l Blk256_MZ3
0002B226 0083 0606                  	dc.b 0,	$83, 6,	6
0002B22A 0000 0000                  	dc.l Nem_SLZ3+$A000000
0002B22E 0000 0000                  	dc.l Blk16_SLZ3+$B000000
0002B232 0000 0000                  	dc.l Blk256_SLZ3
0002B236 0084 0707                  	dc.b 0,	$84, 7,	7
0002B23A 0000 0000                  	dc.l Nem_SYZ3+$C000000
0002B23E 0000 0000                  	dc.l Blk16_SYZ3+$D000000
0002B242 0000 0000                  	dc.l Blk256_SYZ3
0002B246 0085 0808                  	dc.b 0,	$85, 8,	8
0002B24A 0000 0000                  	dc.l Nem_SBZ3+$E000000
0002B24E 0000 0000                  	dc.l Blk16_SBZ3+$F000000
0002B252 0000 0000                  	dc.l Blk256_SBZ3
0002B256 0086 0909                  	dc.b 0,	$86, 9,	9
0002B25A 0000 0000                  	dc.l Nem_GHZ3_2nd; main load block for ending
0002B25E 0000 0000                  	dc.l Blk16_GHZ3
0002B262 0000 0000                  	dc.l Blk256_GHZ3
0002B266 0086 1313                  	dc.b 0,	$86, $13, $13
0002B26A                            	even
0002B26A                            	even
0002B26A                            ;MainLoadBlocks4:
0002B26A                            ;	include "_inc\Main level load blocks4.asm"
0002B26A                            
0002B26A                            ; ---------------------------------------------------------------------------
0002B26A                            ; Pattern load cues
0002B26A                            ; ---------------------------------------------------------------------------
0002B26A                            ArtLoadCues:
0002B26A                            	include "_inc\Pattern load cues.asm"
0002B26A                            ; ---------------------------------------------------------------------------
0002B26A                            ; Pattern load cues - index
0002B26A                            ; ---------------------------------------------------------------------------
0002B26A 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	;2
0002B26E 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	;4
0002B272 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues	;6
0002B276 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0002B27A 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0002B27E 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0002B282 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0002B286 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0002B28A 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0002B28E 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0002B292 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0002B296 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0002B29A 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0002B29E 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0002B2A2 0000                       	dc.w PLC_Ending-ArtLoadCues			; 28 - 1C
0002B2A4 0000                       	dc.w PLC_TryAgain-ArtLoadCues		; 29 - 1D
0002B2A6 0000                       	dc.w PLC_EggmanSBZ2-ArtLoadCues		; 30 - 1E
0002B2A8 0000                       	dc.w PLC_FZBoss-ArtLoadCues			; 31 - 1F
0002B2AA 0000 0000 0000             	dc.w PLC_ABZ-ArtLoadCues, PLC_ABZ2-ArtLoadCues, PLC_ABZAnimals-ArtLoadCues
0002B2B0 0000                       	dc.w PLC_Main-ArtLoadCues		; 37 - 23
0002B2B2 0000                       	dc.w PLC_Main-ArtLoadCues	; 40 - 24
0002B2B4 0000                       	dc.w RingPLC-ArtLoadCues	; 41 - 25
0002B2B6 0000                       	dc.w PLC_Main-ArtLoadCues	; 42 - 26
0002B2B8 0000                       	dc.w PLC_Main-ArtLoadCues	; 42 - 27
0002B2BA                            ;	dc.w PLC_Shield-ArtLoadCues	
0002B2BA 0000                       	dc.w PLC_TitleCard2-ArtLoadCues ; 43 - 28
0002B2BC                            	
0002B2BC                            plcm:	macro gfx,vram
0002B2BC                            	dc.l gfx
0002B2BC                            	dc.w vram
0002B2BC                            	endm
0002B2BC                            ; ---------------------------------------------------------------------------
0002B2BC                            ; Pattern load cues - standard block 1
0002B2BC                            ; ---------------------------------------------------------------------------
0002B2BC 0000                       PLC_Main:	dc.w ((PLC_Main_End-PLC_Main-2)/6)-1
0002B2BE 0001 8B0C                          dc.l Artnem_SpdBooster	; spikes
0002B2C2 BD80                       		dc.w $BD80
0002B2C4 0000 0000                  		dc.l Nem_Lamp		; lamppost
0002B2C8 D800                       		dc.w $D800
0002B2CA 0000 0000                  		dc.l Nem_Hud		; HUD
0002B2CE D940                       		dc.w $D940
0002B2D0                            ;		dc.l Nem_Lives		; lives	counter
0002B2D0                            ;		dc.w $FA80
0002B2D0 0000 0000                  		dc.l Nem_Ring_S		; rings
0002B2D4 F640                       		dc.w $F640
0002B2D6                            ;		dc.l Nem_Points		; points from enemy
0002B2D6                            ;		dc.w $F2E0
0002B2D6                            PLC_Main_End:
0002B2D6                            ; ---------------------------------------------------------------------------
0002B2D6                            ; Pattern load cues - standard block 2
0002B2D6                            ; ---------------------------------------------------------------------------
0002B2D6 0000                       PLC_Main2:	dc.w ((PLC_Main2_End-PLC_Main2-2)/6)-1
0002B2D8 0000 0000                  		dc.l Nem_Monitors	; monitors
0002B2DC D000                       		dc.w $D000
0002B2DE                            ;		dc.l Nem_Shield		; shield
0002B2DE                            ;		dc.w $A820
0002B2DE                            ;		dc.l Nem_Stars		; invincibility	stars
0002B2DE                            ;		dc.w $ABC0
0002B2DE                            PLC_Main2_End:
0002B2DE                            ; ---------------------------------------------------------------------------
0002B2DE                            ; Pattern load cues - explosion
0002B2DE                            ; ---------------------------------------------------------------------------
0002B2DE 0000                       PLC_Explode:	dc.w ((PLC_Explode_End-PLC_Explode-2)/6)-1
0002B2E0 0000 0000                  		dc.l Nem_Explode	; explosion
0002B2E4 B400                       		dc.w $B400
0002B2E6                            ;		dc.l Nem_PauseMenu	; explosion
0002B2E6                            ;		dc.w $BC80
0002B2E6 0001 8B0C                  		dc.l Artnem_SpdBooster	; spikes
0002B2EA BE80                       		dc.w $BE80
0002B2EC                            PLC_Explode_End:
0002B2EC                            ; ---------------------------------------------------------------------------
0002B2EC                            ; Pattern load cues - Super Stars
0002B2EC                            ; ---------------------------------------------------------------------------
0002B2EC                            ;SuperPLC_Star:	dc.w ((SuperPLC_Starend-SuperPLC_Star-2)/6)-1
0002B2EC                            ;		dc.l Nem_SuperSonic_stars
0002B2EC                            ;		dc.w $ABC0
0002B2EC                            ;	SuperPLC_Starend:
0002B2EC                            ; ---------------------------------------------------------------------------
0002B2EC                            ; Pattern load cues - Super Stars
0002B2EC                            ; ---------------------------------------------------------------------------
0002B2EC 0000                       RingPLC:	dc.w ((RingPLC_Ringend-RingPLC-2)/6)-1
0002B2EE 0000 0000                  		dc.l Nem_Ring		; rings
0002B2F2 F640                       		dc.w $F640
0002B2F4                            	RingPLC_Ringend:
0002B2F4                            ; ---------------------------------------------------------------------------
0002B2F4                            ; Pattern load cues - Super Sonic Lives 
0002B2F4                            ; ---------------------------------------------------------------------------
0002B2F4                            ;SuperLives:	dc.w ((SuperLivesend-SuperLives-2)/6)-1
0002B2F4                            ;		dc.l Nem_SuperLives		; lives	counter
0002B2F4                            ;		dc.w $FA80
0002B2F4                            ;	SuperLivesend:
0002B2F4                            ; ---------------------------------------------------------------------------
0002B2F4                            ; Pattern load cues - Super Sonic Lives 
0002B2F4                            ; ---------------------------------------------------------------------------
0002B2F4                            ;NormalLives:	dc.w ((NormalLivesend-NormalLives-2)/6)-1
0002B2F4                            ;		dc.l Nem_Lives		; lives	counter
0002B2F4                            ;		dc.w $FA80
0002B2F4                            ;	NormalLivesend:
0002B2F4                            ; ---------------------------------------------------------------------------
0002B2F4                            ; Pattern load cues - invincibility stars
0002B2F4                            ; ---------------------------------------------------------------------------
0002B2F4                            ;PLC_Invincibility:	dc.w ((PLC_Invincibilityend-PLC_Invincibility-2)/6)-1
0002B2F4                            ;		dc.l Nem_Stars
0002B2F4                            ;		dc.w $ABC0
0002B2F4                            ;	PLC_Invincibilityend:
0002B2F4                            ; ---------------------------------------------------------------------------
0002B2F4                            ; Pattern load cues - Shield
0002B2F4                            ; ---------------------------------------------------------------------------
0002B2F4                            ;PLC_Shield:	dc.w ((PLC_Shieldend-PLC_Shield-2)/6)-1
0002B2F4                            ;		dc.l Nem_Shield		; shield
0002B2F4                            ;		dc.w $A820
0002B2F4                            ;	PLC_Shieldend:
0002B2F4                            ; ---------------------------------------------------------------------------
0002B2F4                            ; Pattern load cues - game/time	over
0002B2F4                            ; ---------------------------------------------------------------------------
0002B2F4 0000                       PLC_GameOver:	dc.w ((PLC_GameOver_End-PLC_GameOver-2)/6)-1
0002B2F6 0000 0000                  		dc.l Nem_GameOver	; game/time over
0002B2FA ABC0                       		dc.w $ABC0
0002B2FC                            PLC_GameOver_End:
0002B2FC                            		
0002B2FC                            ; ---------------------------------------------------------------------------
0002B2FC                            ; Pattern load cues - Green Hill
0002B2FC                            ; ---------------------------------------------------------------------------
0002B2FC 0000                       PLC_GHZ:	dc.w ((PLC_GHZ_End-PLC_GHZ-2)/6)-1
0002B2FE                            ;		dc.l Nem_GHZ; GHZ main patterns
0002B2FE                            ;		dc.w 0
0002B2FE 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0002B302 6B00                       		dc.w $6B00
0002B304 0000 0000                  		dc.l Nem_PplRock	; purple rock
0002B308 7A00                       		dc.w $7A00
0002B30A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0002B30E 8000                       		dc.w $8000
0002B310 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0002B314 8880                       		dc.w $8880
0002B316 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0002B31A 8F60                       		dc.w $8F60
0002B31C 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0002B320 9360                       		dc.w $9360
0002B322 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0002B326 9E00                       		dc.w $9E00
0002B328 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B32C A360                       		dc.w $A360
0002B32E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B332 A460                       		dc.w $A460
0002B334 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B338 A660                       		dc.w $A660
0002B33A                            PLC_GHZ_End
0002B33A 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2_End-PLC_GHZ2-2)/6)-1
0002B33C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0002B340 7000                       		dc.w $7000
0002B342 0000 0000                  		dc.l Nem_Bridge		; bridge
0002B346 71C0                       		dc.w $71C0
0002B348 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0002B34C 7300                       		dc.w $7300
0002B34E 0000 0000                  		dc.l Nem_Ball		; giant	ball
0002B352 7540                       		dc.w $7540
0002B354 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0002B358 A1E0                       		dc.w $A1E0
0002B35A 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0002B35E 6980                       		dc.w $6980
0002B360                            PLC_GHZ2_End
0002B360                            ; ---------------------------------------------------------------------------
0002B360                            ; Pattern load cues - Labyrinth
0002B360                            ; ---------------------------------------------------------------------------
0002B360 0000                       PLC_LZ:		dc.w ((PLC_LZ_End-PLC_LZ-2)/6)-1
0002B362                            ;		dc.l Nem_LZ		; LZ main patterns
0002B362                            ;		dc.w 0
0002B362 0000 0000                  		dc.l Nem_LzBlock1	; block
0002B366 3C00                       		dc.w $3C00
0002B368 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0002B36C 3E00                       		dc.w $3E00
0002B36E 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0002B372 4B20                       		dc.w $4B20
0002B374 0000 0000                  		dc.l Nem_Water		; water	surface
0002B378 6000                       		dc.w $6000
0002B37A 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0002B37E 6200                       		dc.w $6200
0002B380 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0002B384 6500                       		dc.w $6500
0002B386 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0002B38A 6900                       		dc.w $6900
0002B38C 0000 0000                  		dc.l Nem_LzBlock3	; block
0002B390 7780                       		dc.w $7780
0002B392 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0002B396 7880                       		dc.w $7880
0002B398 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0002B39C 7980                       		dc.w $7980
0002B39E 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0002B3A2 94C0                       		dc.w $94C0
0002B3A4                            PLC_LZ_End
0002B3A4 0000                       PLC_LZ2:	dc.w ((PLC_LZ2_End-PLC_LZ2-2)/6)-1
0002B3A6 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0002B3AA 7BC0                       		dc.w $7BC0
0002B3AC 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0002B3B0 7CC0                       		dc.w $7CC0
0002B3B2 0000 0000                  		dc.l Nem_LzWheel	; wheel
0002B3B6 7EC0                       		dc.w $7EC0
0002B3B8 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0002B3BC 5D20                       		dc.w $5D20
0002B3BE 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0002B3C2 8800                       		dc.w $8800
0002B3C4 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0002B3C8 89E0                       		dc.w $89E0
0002B3CA 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0002B3CE 8CE0                       		dc.w $8CE0
0002B3D0 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0002B3D4 90C0                       		dc.w $90C0
0002B3D6 0000 0000                  		dc.l Nem_LzSwitch	; switch
0002B3DA A1E0                       		dc.w $A1E0
0002B3DC 0000 0000                  		dc.l Nem_Cork		; cork block
0002B3E0 A000                       		dc.w $A000
0002B3E2 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B3E6 A360                       		dc.w $A360
0002B3E8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B3EC A460                       		dc.w $A460
0002B3EE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B3F2 A660                       		dc.w $A660
0002B3F4                            PLC_LZ2_End:
0002B3F4                            ; ---------------------------------------------------------------------------
0002B3F4                            ; Pattern load cues - Marble
0002B3F4                            ; ---------------------------------------------------------------------------
0002B3F4 0000                       PLC_MZ:		dc.w ((PLC_MZ_End-PLC_MZ-2)/6)-1
0002B3F6                            ;		dc.l Nem_MZ		; MZ main patterns
0002B3F6                            ;		dc.w 0
0002B3F6 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0002B3FA 6000                       		dc.w $6000
0002B3FC 0000 0000                  		dc.l Nem_MzFire		; fireballs
0002B400 68A0                       		dc.w $68A0
0002B402 0000 0000                  		dc.l Nem_Swing		; swinging platform
0002B406 7000                       		dc.w $7000
0002B408 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0002B40C 71C0                       		dc.w $71C0
0002B40E 0000 0000                  		dc.l Nem_Lava		; lava
0002B412 7500                       		dc.w $7500
0002B414 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0002B418 8880                       		dc.w $8880
0002B41A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0002B41E 8F60                       		dc.w $8F60
0002B420 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0002B424 9700                       		dc.w $9700
0002B426 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0002B42A 9FE0                       		dc.w $9FE0
0002B42C                            PLC_MZ_End:
0002B42C 0000                       PLC_MZ2:	dc.w ((PLC_MZ2_End-PLC_MZ2-2)/6)-1
0002B42E 0000 0000                  		dc.l Nem_MzSwitch	; switch
0002B432 A260                       		dc.w $A260
0002B434 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B438 A360                       		dc.w $A360
0002B43A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B43E A460                       		dc.w $A460
0002B440 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B444 A660                       		dc.w $A660
0002B446 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0002B44A 5700                       		dc.w $5700
0002B44C                            PLC_MZ2_End:
0002B44C                            ; ---------------------------------------------------------------------------
0002B44C                            ; Pattern load cues - Star Light
0002B44C                            ; ---------------------------------------------------------------------------
0002B44C 0000                       PLC_SLZ:	dc.w ((PLC_SLZ_End-PLC_SLZ-2)/6)-1
0002B44E                            ;		dc.l Nem_SLZ		; SLZ main patterns
0002B44E                            ;		dc.w 0
0002B44E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0002B452 8000                       		dc.w $8000
0002B454 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0002B458 8520                       		dc.w $8520
0002B45A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0002B45E 9000                       		dc.w $9000
0002B460 0000 0000                  		dc.l Nem_SlzBlock	; block
0002B464 9C00                       		dc.w $9C00
0002B466 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0002B46A A260                       		dc.w $A260
0002B46C 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B470 A360                       		dc.w $A360
0002B472 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B476 A460                       		dc.w $A460
0002B478 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B47C A660                       		dc.w $A660
0002B47E                            PLC_SLZ_End
0002B47E 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2_End-PLC_SLZ2-2)/6)-1
0002B480 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0002B484 6E80                       		dc.w $6E80
0002B486 0000 0000                  		dc.l Nem_Fan		; fan
0002B48A 7400                       		dc.w $7400
0002B48C 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0002B490 7980                       		dc.w $7980
0002B492 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0002B496 7B80                       		dc.w $7B80
0002B498 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0002B49C 9B00                       		dc.w $9B00
0002B49E 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0002B4A2 9E00                       		dc.w $9E00
0002B4A4                            PLC_SLZ2_End
0002B4A4                            ; ---------------------------------------------------------------------------
0002B4A4                            ; Pattern load cues - Spring Yard
0002B4A4                            ; ---------------------------------------------------------------------------
0002B4A4 0000                       PLC_SYZ:	dc.w ((PLC_SYZ_End-PLC_SYZ-2)/6)-1
0002B4A6                            ;		dc.l Nem_SYZ		; SYZ main patterns
0002B4A6                            ;		dc.w 0
0002B4A6 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0002B4AA 8000                       		dc.w $8000
0002B4AC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0002B4B0 8880                       		dc.w $8880
0002B4B2 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0002B4B6 8F60                       		dc.w $8F60
0002B4B8 0000 0000                  		dc.l Nem_Roller		; roller enemy
0002B4BC 9700                       		dc.w $9700
0002B4BE                            PLC_SYZ_End:
0002B4BE 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2_End-PLC_SYZ2-2)/6)-1
0002B4C0 0000 0000                  		dc.l Nem_Bumper		; bumper
0002B4C4 7000                       		dc.w $7000
0002B4C6 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0002B4CA 72C0                       		dc.w $72C0
0002B4CC 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0002B4D0 7740                       		dc.w $7740
0002B4D2 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0002B4D6 9FE0                       		dc.w $9FE0
0002B4D8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0002B4DC A1E0                       		dc.w $A1E0
0002B4DE 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B4E2 A360                       		dc.w $A360
0002B4E4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B4E8 A460                       		dc.w $A460
0002B4EA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B4EE A660                       		dc.w $A660
0002B4F0                            PLC_SYZ2_End:
0002B4F0                            ; ---------------------------------------------------------------------------
0002B4F0                            ; Pattern load cues - Scrap Brain
0002B4F0                            ; ---------------------------------------------------------------------------
0002B4F0 0000                       PLC_SBZ:	dc.w ((PLC_SBZ_End-PLC_SBZ-2)/6)-1
0002B4F2                            ;		dc.l Nem_SBZ		; SBZ main patterns
0002B4F2                            ;		dc.w 0
0002B4F2 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0002B4F6 5800                       		dc.w $5800
0002B4F8 0000 0000                  		dc.l Nem_SbzDoor1	; door
0002B4FC 5D00                       		dc.w $5D00
0002B4FE 0000 0000                  		dc.l Nem_Girder		; girder
0002B502 5E00                       		dc.w $5E00
0002B504 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0002B508 6040                       		dc.w $6040
0002B50A 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0002B50E 6880                       		dc.w $6880
0002B510 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0002B514 6900                       		dc.w $6900
0002B516 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0002B51A 7220                       		dc.w $7220
0002B51C 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0002B520 76A0                       		dc.w $76A0
0002B522 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0002B526 7B20                       		dc.w $7B20
0002B528 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0002B52C 7EA0                       		dc.w $7EA0
0002B52E 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0002B532 9860                       		dc.w $9860
0002B534                            PLC_SBZ_End
0002B534 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2_End-PLC_SBZ2-2)/6)-1
0002B536 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0002B53A 5600                       		dc.w $5600
0002B53C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0002B540 8000                       		dc.w $8000
0002B542 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0002B546 8520                       		dc.w $8520
0002B548 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0002B54C 8C00                       		dc.w $8C00
0002B54E 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0002B552 8DE0                       		dc.w $8DE0
0002B554 0000 0000                  		dc.l Nem_Electric	; electric orb
0002B558 8FC0                       		dc.w $8FC0
0002B55A 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0002B55E 9240                       		dc.w $9240
0002B560 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0002B564 7F20                       		dc.w $7F20
0002B566 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0002B56A 9BE0                       		dc.w $9BE0
0002B56C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0002B570 A1E0                       		dc.w $A1E0
0002B572 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B576 A360                       		dc.w $A360
0002B578 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B57C A460                       		dc.w $A460
0002B57E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B582 A660                       		dc.w $A660
0002B584                            PLC_SBZ2_End
0002B584                            ; ---------------------------------------------------------------------------
0002B584                            ; Pattern load cues - title card
0002B584                            ; ---------------------------------------------------------------------------
0002B584 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCard_End-PLC_TitleCard-2)/6)-1
0002B586 0000 0000                  		dc.l Nem_TitleCard
0002B58A B000                       		dc.w $B000
0002B58C                            PLC_TitleCard_End
0002B58C                            PLC_TitleCard2:
0002B58C 0000                       		dc.w ((PLC_TitleCard2_End-PLC_TitleCard2-2)/6)-1
0002B58E 0000 0000                  		dc.l Nem_TitleCard2
0002B592 B000                       		dc.w $B000
0002B594 0000 0000                  		dc.l Nem_TitleCard3
0002B598 D000                       		dc.w $D000
0002B59A                            PLC_TitleCard2_End
0002B59A                            ; ---------------------------------------------------------------------------
0002B59A                            ; Pattern load cues - act 3 boss
0002B59A                            ; ---------------------------------------------------------------------------
0002B59A 0000                       PLC_Boss:	dc.w ((PLC_Boss_End-PLC_Boss-2)/6)-1
0002B59C 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0002B5A0 8000                       		dc.w $8000
0002B5A2 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0002B5A6 8D80                       		dc.w $8D80
0002B5A8 0000 0000                  		dc.l Nem_Prison		; prison capsule
0002B5AC 93A0                       		dc.w $93A0
0002B5AE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0002B5B2 A300                       		dc.w $A300
0002B5B4 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0002B5B8 A300                       		dc.w $A300
0002B5BA 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0002B5BE A540                       		dc.w $A540
0002B5C0 0000 0000                  		dc.l Nem_BossExplode	; explosion
0002B5C4 B400                       		dc.w $B400
0002B5C6                            PLC_Boss_End
0002B5C6                            ; ---------------------------------------------------------------------------
0002B5C6                            ; Pattern load cues - act 1/2 signpost
0002B5C6                            ; ---------------------------------------------------------------------------
0002B5C6 0000                       PLC_Signpost:	dc.w ((PLC_Signpost_End-PLC_Signpost-2)/6)-1
0002B5C8 0000 0000                  		dc.l Nem_SignPost	; signpost
0002B5CC D000                       		dc.w $D000
0002B5CE 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0002B5D2 96C0                       		dc.w $96C0
0002B5D4 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0002B5D8 8C40                       		dc.w $8C40
0002B5DA                            PLC_Signpost_End
0002B5DA                            ; ---------------------------------------------------------------------------
0002B5DA                            ; Pattern load cues - beta special stage warp effect
0002B5DA                            ; ---------------------------------------------------------------------------
0002B5DA                            PLC_Warp:
0002B5DA 0000                       		dc.w ((PLC_Warpend-PLC_Warp-2)/6)-1
0002B5DC 0000 0000                  		dc.l Nem_Warp
0002B5E0 A820                       		dc.w $A820
0002B5E2                            	PLC_Warpend:
0002B5E2                            ; ---------------------------------------------------------------------------
0002B5E2                            ; Pattern load cues - special stage
0002B5E2                            ; ---------------------------------------------------------------------------
0002B5E2 0000                       PLC_SpeStage:	dc.w ((PLC_SpeStage_End-PLC_SpeStage-2)/6)-1
0002B5E4 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0002B5E8 0000                       		dc.w 0
0002B5EA 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0002B5EE 0A20                       		dc.w $A20
0002B5F0                            ;		dc.l Nem_SSWalls	; walls
0002B5F0                            ;		dc.w $2840
0002B5F0 0000 0000                  		dc.l Nem_Bumper		; bumper
0002B5F4 4760                       		dc.w $4760
0002B5F6 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0002B5FA 4A20                       		dc.w $4A20
0002B5FC 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0002B600 4C60                       		dc.w $4C60
0002B602 0000 0000                  		dc.l Nem_SSRBlock	; R block
0002B606 5E00                       		dc.w $5E00
0002B608 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0002B60C 6E00                       		dc.w $6E00
0002B60E 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0002B612 7E00                       		dc.w $7E00
0002B614 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0002B618 8E00                       		dc.w $8E00
0002B61A 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0002B61E 9E00                       		dc.w $9E00
0002B620 0000 0000                  		dc.l Nem_SSWBlock	; W block
0002B624 AE00                       		dc.w $AE00
0002B626 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0002B62A BE00                       		dc.w $BE00
0002B62C 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0002B630 EE00                       		dc.w $EE00
0002B632 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0002B636 F2E0                       		dc.w $F2E0
0002B638 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0002B63C F400                       		dc.w $F400
0002B63E 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0002B642 F520                       		dc.w $F520
0002B644 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0002B648 F2E0                       		dc.w $F2E0
0002B64A 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0002B64E F400                       		dc.w $F400
0002B650 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0002B654 F520                       		dc.w $F520
0002B656                            PLC_SpeStage_End
0002B656                            ; ---------------------------------------------------------------------------
0002B656                            ; Pattern load cues - GHZ animals
0002B656                            ; ---------------------------------------------------------------------------
0002B656 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimals_End-PLC_GHZAnimals-2)/6)-1
0002B658 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0002B65C B000                       		dc.w $B000
0002B65E 0000 0000                  		dc.l Nem_Flicky		; flicky
0002B662 B240                       		dc.w $B240
0002B664                            PLC_GHZAnimals_End
0002B664                            ; ---------------------------------------------------------------------------
0002B664                            ; Pattern load cues - LZ animals
0002B664                            ; ---------------------------------------------------------------------------
0002B664 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimals_End-PLC_LZAnimals-2)/6)-1
0002B666 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0002B66A B000                       		dc.w $B000
0002B66C 0000 0000                  		dc.l Nem_Seal		; seal
0002B670 B240                       		dc.w $B240
0002B672                            PLC_LZAnimals_End
0002B672                            ; ---------------------------------------------------------------------------
0002B672                            ; Pattern load cues - MZ animals
0002B672                            ; ---------------------------------------------------------------------------
0002B672 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimals_End-PLC_MZAnimals-2)/6)-1
0002B674 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0002B678 B000                       		dc.w $B000
0002B67A 0000 0000                  		dc.l Nem_Seal		; seal
0002B67E B240                       		dc.w $B240
0002B680                            PLC_MZAnimals_End
0002B680                            ; ---------------------------------------------------------------------------
0002B680                            ; Pattern load cues - SLZ animals
0002B680                            ; ---------------------------------------------------------------------------
0002B680 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimals_End-PLC_SLZAnimals-2)/6)-1
0002B682 0000 0000                  		dc.l Nem_Pig		; pig
0002B686 B000                       		dc.w $B000
0002B688 0000 0000                  		dc.l Nem_Flicky		; flicky
0002B68C B240                       		dc.w $B240
0002B68E                            PLC_SLZAnimals_End
0002B68E                            ; ---------------------------------------------------------------------------
0002B68E                            ; Pattern load cues - SYZ animals
0002B68E                            ; ---------------------------------------------------------------------------
0002B68E 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimals_End-PLC_SYZAnimals-2)/6)-1
0002B690 0000 0000                  		dc.l Nem_Pig		; pig
0002B694 B000                       		dc.w $B000
0002B696 0000 0000                  		dc.l Nem_Chicken	; chicken
0002B69A B240                       		dc.w $B240
0002B69C                            PLC_SYZAnimals_End
0002B69C                            ; ---------------------------------------------------------------------------
0002B69C                            ; Pattern load cues - SBZ animals
0002B69C                            ; ---------------------------------------------------------------------------
0002B69C 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimals_End-PLC_SBZAnimals-2)/6)-1
0002B69E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0002B6A2 B000                       		dc.w $B000
0002B6A4 0000 0000                  		dc.l Nem_Chicken	; chicken
0002B6A8 B240                       		dc.w $B240
0002B6AA                            PLC_SBZAnimals_End
0002B6AA                            ; ---------------------------------------------------------------------------
0002B6AA                            ; Pattern load cues - MZ animals
0002B6AA                            ; ---------------------------------------------------------------------------
0002B6AA 0000                       PLC_ABZAnimals:	dc.w ((PLC_ABZAnimals_End-PLC_ABZAnimals-2)/6)-1
0002B6AC 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0002B6B0 B000                       		dc.w $B000
0002B6B2 0000 0000                  		dc.l Nem_Seal		; seal
0002B6B6 B240                       		dc.w $B240
0002B6B8                            PLC_ABZAnimals_End
0002B6B8                            ; ---------------------------------------------------------------------------
0002B6B8                            ; Pattern load cues - special stage results screen
0002B6B8                            ; ---------------------------------------------------------------------------
0002B6B8 0000                       PLC_SpeStResult:dc.w ((PLC_SpeStResult_End-PLC_SpeStResult-2)/6)-1
0002B6BA 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0002B6BE A820                       		dc.w $A820
0002B6C0 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0002B6C4 AA20                       		dc.w $AA20
0002B6C6                            PLC_SpeStResult_End			
0002B6C6                            ; ---------------------------------------------------------------------------
0002B6C6                            ; Pattern load cues - ending sequence
0002B6C6                            ; ---------------------------------------------------------------------------
0002B6C6 0000                       PLC_Ending:	dc.w ((PLC_Ending_End-PLC_Ending-2)/6)-1
0002B6C8                            ;		dc.l Nem_GHZ_1st	; GHZ main patterns
0002B6C8                            ;		dc.w 0
0002B6C8                            ;		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0002B6C8                            ;		dc.w $39A0
0002B6C8 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0002B6CC 6B00                       		dc.w $6B00
0002B6CE 0000 0000                  		dc.l Nem_EndFlower	; flowers
0002B6D2 7400                       		dc.w $7400
0002B6D4 0000 0000                  		dc.l Nem_EndEm		; emeralds
0002B6D8 78A0                       		dc.w $78A0
0002B6DA 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0002B6DE 7C20                       		dc.w $7C20
0002B6E0 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0002B6E4 A480                       		dc.w $A480
0002B6E6 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0002B6EA AA60                       		dc.w $AA60
0002B6EC 0000 0000                  		dc.l Nem_Chicken	; chicken
0002B6F0 ACA0                       		dc.w $ACA0
0002B6F2 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0002B6F6 AE60                       		dc.w $AE60
0002B6F8 0000 0000                  		dc.l Nem_Seal		; seal
0002B6FC B0A0                       		dc.w $B0A0
0002B6FE 0000 0000                  		dc.l Nem_Pig		; pig
0002B702 B260                       		dc.w $B260
0002B704 0000 0000                  		dc.l Nem_Flicky		; flicky
0002B708 B4A0                       		dc.w $B4A0
0002B70A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0002B70E B660                       		dc.w $B660
0002B710 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0002B714 B8A0                       		dc.w $B8A0
0002B716                            PLC_Ending_End
0002B716                            ; ---------------------------------------------------------------------------
0002B716                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0002B716                            ; ---------------------------------------------------------------------------
0002B716 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgain_End-PLC_TryAgain-2)/6)-1
0002B718 0000 0000                  		dc.l Nem_EndEm		; emeralds
0002B71C 78A0                       		dc.w $78A0
0002B71E 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0002B722 7C20                       		dc.w $7C20
0002B724 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0002B728 B400                       		dc.w $B400
0002B72A                            PLC_TryAgain_End
0002B72A                            ; ---------------------------------------------------------------------------
0002B72A                            ; Pattern load cues - Eggman on SBZ 2
0002B72A                            ; ---------------------------------------------------------------------------
0002B72A 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2_End-PLC_EggmanSBZ2-2)/6)-1
0002B72C 0000 0000                  		dc.l Nem_SbzBlock	; block
0002B730 A300                       		dc.w $A300
0002B732 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0002B736 8000                       		dc.w $8000
0002B738 0000 0000                  		dc.l Nem_LzSwitch	; switch
0002B73C 9400                       		dc.w $9400
0002B73E                            PLC_EggmanSBZ2_End
0002B73E                            ; ---------------------------------------------------------------------------
0002B73E                            ; Pattern load cues - final boss
0002B73E                            ; ---------------------------------------------------------------------------
0002B73E 0000                       PLC_FZBoss:	dc.w ((PLC_FZBoss_End-PLC_FZBoss-2)/6)-1
0002B740 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0002B744 7400                       		dc.w $7400
0002B746 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0002B74A 6000                       		dc.w $6000
0002B74C 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0002B750 8000                       		dc.w $8000
0002B752 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0002B756 8E00                       		dc.w $8E00
0002B758 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0002B75C A540                       		dc.w $A540
0002B75E 0000 0000                  		dc.l Nem_BossExplode	; explosion
0002B762 B400                       		dc.w $B400
0002B764                            PLC_FZBoss_End:
0002B764                            ; ---------------------------------------------------------------------------
0002B764                            ; Pattern load cues - Alpha Beta
0002B764                            ; ---------------------------------------------------------------------------
0002B764 0000                       PLC_ABZ:	dc.w ((PLC_ABZ_End-PLC_ABZ-2)/6)-1
0002B766                            		;dc.l Nem_ABZ		; ABZ main patterns
0002B766                            		;dc.w 0
0002B766                            PLC_ABZ_End
0002B766 0000                       PLC_ABZ2:	dc.w ((PLC_ABZ2_End-PLC_ABZ2-2)/6)-1
0002B768 0000 0000                  		dc.l Nem_MzSwitch	; switch
0002B76C A260                       		dc.w $A260
0002B76E 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B772 A360                       		dc.w $A360
0002B774 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B778 A460                       		dc.w $A460
0002B77A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B77E A660                       		dc.w $A660
0002B780                            PLC_ABZ2_End
0002B780                            		even
0002B780                            		even
0002B780                            
0002B780                            		incbin	misc\padding.bin
0002B86E                            		even
0002B86E                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0002BCD0                            		even
0002BCD0                            ;Sega_Spr: 
0002BCD0                            ;		incbin 'data/sprites/sega.nem'
0002BCD0                            ;Sega_Blocks_Spr: 
0002BCD0                            ;		incbin 'data/sprites/sega_blk.nem'
0002BCD0                            ;Sega_Mappings: 
0002BCD0                            ;		incbin 'data/all/sega.eni' 
0002BCD0                            ;Metal_Sonic: 
0002BCD0                            ;		incbin 'data/dez/metal_snc.nem' 
0002BCD0                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0002BDC8                            		even
0002BDC8                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0002BED2                            		even
0002BED2                            Nem_TitleFg:	incbin	artnem\titlefgv2.bin	; title screen foreground
0002CE52                            		even
0002CE52                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
0002E820                            		even
0002E820                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
0002E854                            		even
0002E854                            Eni_SSRGBG:	incbin	mapeni\ssrgbg.bin
0002E8F2 00                         		even
0002E8F2                            Nem_SSRGBG:	incbin	artnem\ssrgbg.bin
0002EF90                            		even
0002EF90                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
0002EFCE                            		even
0002EFCE                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002F476                            		even
0002F476                            Unc_SuperSonic_stars:	incbin	artnem\superstarsfixunc.bin ; Super Sonic stars
0002F676                            		even
0002F676                            Nem_MenuFont:	incbin	artnem\menufont.bin ; level select s2 font
0002FC52 00                         		even
0002FC52                            Nem_MenuBox:	incbin	artnem\menubox.bin  ; menu options box
0002FCD2                            		even
0002FCD2                            Eni_MenuBox:	incbin	mapeni\menubox.bin	; menu options box (mappings)
0002FCFE                            		even
0002FCFE                            ;Eni_MenuBg:	incbin  'data\menu\menubg.eni'	; level select s2 background (mappings)
0002FCFE                            ;		even
0002FCFE                            ;Nem_LevelIcons:	incbin	artnem\levelico.bin	; level select s2 icons
0002FCFE                            ;		even
0002FCFE                            ; ---------------------------------------------------------------------------
0002FCFE                            ; Sprite mappings - Sonic
0002FCFE                            ; ---------------------------------------------------------------------------
0002FCFE                            ;Map_Sonic:
0002FCFE                            ;	INCLUDE	"mappings/spriteDPLC/SonicS2.asm"
0002FCFE                            ;	even
0002FCFE                            Map_Sonic:
0002FCFE                            	include "_maps\Sonic.asm"
0002FCFE                            ; --------------------------------------------------------------------------------
0002FCFE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002FCFE                            ; --------------------------------------------------------------------------------
0002FCFE                            
0002FCFE                            SME_KM9WW:	
0002FCFE 0000 0000                  		dc.w SME_KM9WW_1B4-SME_KM9WW, SME_KM9WW_1B5-SME_KM9WW	
0002FD02 0000 0000                  		dc.w SME_KM9WW_1C5-SME_KM9WW, SME_KM9WW_1D5-SME_KM9WW	
0002FD06 0000 0000                  		dc.w SME_KM9WW_1E5-SME_KM9WW, SME_KM9WW_1F0-SME_KM9WW	
0002FD0A 0000 0000                  		dc.w SME_KM9WW_200-SME_KM9WW, SME_KM9WW_210-SME_KM9WW	
0002FD0E 0000 0000                  		dc.w SME_KM9WW_220-SME_KM9WW, SME_KM9WW_22B-SME_KM9WW	
0002FD12 0000 0000                  		dc.w SME_KM9WW_240-SME_KM9WW, SME_KM9WW_255-SME_KM9WW	
0002FD16 0000 0000                  		dc.w SME_KM9WW_26A-SME_KM9WW, SME_KM9WW_27F-SME_KM9WW	
0002FD1A 0000 0000                  		dc.w SME_KM9WW_294-SME_KM9WW, SME_KM9WW_2A9-SME_KM9WW	
0002FD1E 0000 0000                  		dc.w SME_KM9WW_2BE-SME_KM9WW, SME_KM9WW_2D3-SME_KM9WW	
0002FD22 0000 0000                  		dc.w SME_KM9WW_2E3-SME_KM9WW, SME_KM9WW_2F3-SME_KM9WW	
0002FD26 0000 0000                  		dc.w SME_KM9WW_303-SME_KM9WW, SME_KM9WW_30E-SME_KM9WW	
0002FD2A 0000 0000                  		dc.w SME_KM9WW_31E-SME_KM9WW, SME_KM9WW_333-SME_KM9WW	
0002FD2E 0000 0000                  		dc.w SME_KM9WW_343-SME_KM9WW, SME_KM9WW_34E-SME_KM9WW	
0002FD32 0000 0000                  		dc.w SME_KM9WW_363-SME_KM9WW, SME_KM9WW_378-SME_KM9WW	
0002FD36 0000 0000                  		dc.w SME_KM9WW_38D-SME_KM9WW, SME_KM9WW_3A2-SME_KM9WW	
0002FD3A 0000 0000                  		dc.w SME_KM9WW_3B7-SME_KM9WW, SME_KM9WW_3CC-SME_KM9WW	
0002FD3E 0000 0000                  		dc.w SME_KM9WW_3E1-SME_KM9WW, SME_KM9WW_3F6-SME_KM9WW	
0002FD42 0000 0000                  		dc.w SME_KM9WW_401-SME_KM9WW, SME_KM9WW_40C-SME_KM9WW	
0002FD46 0000 0000                  		dc.w SME_KM9WW_417-SME_KM9WW, SME_KM9WW_422-SME_KM9WW	
0002FD4A 0000 0000                  		dc.w SME_KM9WW_437-SME_KM9WW, SME_KM9WW_442-SME_KM9WW	
0002FD4E 0000 0000                  		dc.w SME_KM9WW_457-SME_KM9WW, SME_KM9WW_462-SME_KM9WW	
0002FD52 0000 0000                  		dc.w SME_KM9WW_46D-SME_KM9WW, SME_KM9WW_478-SME_KM9WW	
0002FD56 0000 0000                  		dc.w SME_KM9WW_483-SME_KM9WW, SME_KM9WW_48E-SME_KM9WW	
0002FD5A 0000 0000                  		dc.w SME_KM9WW_49E-SME_KM9WW, SME_KM9WW_4A9-SME_KM9WW	
0002FD5E 0000 0000                  		dc.w SME_KM9WW_4B9-SME_KM9WW, SME_KM9WW_4C4-SME_KM9WW	
0002FD62 0000 0000                  		dc.w SME_KM9WW_4D4-SME_KM9WW, SME_KM9WW_4E9-SME_KM9WW	
0002FD66 0000 0000                  		dc.w SME_KM9WW_4FE-SME_KM9WW, SME_KM9WW_513-SME_KM9WW	
0002FD6A 0000 0000                  		dc.w SME_KM9WW_528-SME_KM9WW, SME_KM9WW_538-SME_KM9WW	
0002FD6E 0000 0000                  		dc.w SME_KM9WW_543-SME_KM9WW, SME_KM9WW_54E-SME_KM9WW	
0002FD72 0000 0000                  		dc.w SME_KM9WW_55E-SME_KM9WW, SME_KM9WW_573-SME_KM9WW	
0002FD76 0000 0000                  		dc.w SME_KM9WW_57E-SME_KM9WW, SME_KM9WW_589-SME_KM9WW	
0002FD7A 0000 0000                  		dc.w SME_KM9WW_599-SME_KM9WW, SME_KM9WW_59F-SME_KM9WW	
0002FD7E 0000 0000                  		dc.w SME_KM9WW_5AF-SME_KM9WW, SME_KM9WW_5C4-SME_KM9WW	
0002FD82 0000 0000                  		dc.w SME_KM9WW_5D9-SME_KM9WW, SME_KM9WW_5EE-SME_KM9WW	
0002FD86 0000 0000                  		dc.w SME_KM9WW_5F9-SME_KM9WW, SME_KM9WW_5FF-SME_KM9WW	
0002FD8A 0000 0000                  		dc.w SME_KM9WW_60A-SME_KM9WW, SME_KM9WW_610-SME_KM9WW	
0002FD8E 0000 0000                  		dc.w SME_KM9WW_61B-SME_KM9WW, SME_KM9WW_62B-SME_KM9WW	
0002FD92 0000 0000                  		dc.w SME_KM9WW_640-SME_KM9WW, SME_KM9WW_655-SME_KM9WW	
0002FD96 0000 0000                  		dc.w SME_KM9WW_665-SME_KM9WW, SME_KM9WW_675-SME_KM9WW	
0002FD9A 0000 0000                  		dc.w SME_KM9WW_685-SME_KM9WW, SME_KM9WW_68B-SME_KM9WW	
0002FD9E 0000 0000                  		dc.w SME_KM9WW_6A0-SME_KM9WW, SME_KM9WW_6B5-SME_KM9WW	
0002FDA2 0000 0000                  		dc.w SME_KM9WW_6C0-SME_KM9WW, SME_KM9WW_6D0-SME_KM9WW	
0002FDA6 0000 0000                  		dc.w SME_KM9WW_6E0-SME_KM9WW, SME_KM9WW_6EB-SME_KM9WW	
0002FDAA 0000 0000                  		dc.w SME_KM9WW_700-SME_KM9WW, SME_KM9WW_710-SME_KM9WW	
0002FDAE 0000 0000                  		dc.w SME_KM9WW_71B-SME_KM9WW, SME_KM9WW_726-SME_KM9WW	
0002FDB2 0000 0000                  		dc.w SME_KM9WW_73B-SME_KM9WW, SME_KM9WW_74B-SME_KM9WW	
0002FDB6 0000 0000                  		dc.w SME_KM9WW_756-SME_KM9WW, SME_KM9WW_766-SME_KM9WW	
0002FDBA 0000 0000                  		dc.w SME_KM9WW_76C-SME_KM9WW, SME_KM9WW_777-SME_KM9WW	
0002FDBE 0000 0000                  		dc.w SME_KM9WW_787-SME_KM9WW, SME_KM9WW_78D-SME_KM9WW	
0002FDC2 0000 0000                  		dc.w SME_KM9WW_798-SME_KM9WW, SME_KM9WW_7A3-SME_KM9WW	
0002FDC6 0000 0000                  		dc.w SME_KM9WW_7B3-SME_KM9WW, SME_KM9WW_7B9-SME_KM9WW	
0002FDCA 0000 0000                  		dc.w SME_KM9WW_7C4-SME_KM9WW, SME_KM9WW_7D4-SME_KM9WW	
0002FDCE 0000 0000                  		dc.w SME_KM9WW_7DA-SME_KM9WW, SME_KM9WW_7E5-SME_KM9WW	
0002FDD2 0000 0000                  		dc.w SME_KM9WW_7F0-SME_KM9WW, SME_KM9WW_805-SME_KM9WW	
0002FDD6 0000 0000                  		dc.w SME_KM9WW_815-SME_KM9WW, SME_KM9WW_825-SME_KM9WW	
0002FDDA 0000 0000                  		dc.w SME_KM9WW_830-SME_KM9WW, SME_KM9WW_840-SME_KM9WW	
0002FDDE 0000 0000                  		dc.w SME_KM9WW_850-SME_KM9WW, SME_KM9WW_860-SME_KM9WW	
0002FDE2 0000 0000                  		dc.w SME_KM9WW_86B-SME_KM9WW, SME_KM9WW_880-SME_KM9WW	
0002FDE6 0000 0000                  		dc.w SME_KM9WW_890-SME_KM9WW, SME_KM9WW_8A0-SME_KM9WW	
0002FDEA 0000 0000                  		dc.w SME_KM9WW_8AB-SME_KM9WW, SME_KM9WW_8BB-SME_KM9WW	
0002FDEE 0000 0000                  		dc.w SME_KM9WW_8C1-SME_KM9WW, SME_KM9WW_8D6-SME_KM9WW	
0002FDF2 0000 0000                  		dc.w SME_KM9WW_8EB-SME_KM9WW, SME_KM9WW_8FB-SME_KM9WW	
0002FDF6 0000 0000                  		dc.w SME_KM9WW_910-SME_KM9WW, SME_KM9WW_925-SME_KM9WW	
0002FDFA 0000 0000                  		dc.w SME_KM9WW_93A-SME_KM9WW, SME_KM9WW_94A-SME_KM9WW	
0002FDFE 0000 0000                  		dc.w SME_KM9WW_95F-SME_KM9WW, SME_KM9WW_974-SME_KM9WW	
0002FE02 0000 0000                  		dc.w SME_KM9WW_989-SME_KM9WW, SME_KM9WW_999-SME_KM9WW	
0002FE06 0000 0000                  		dc.w SME_KM9WW_9AE-SME_KM9WW, SME_KM9WW_9BE-SME_KM9WW	
0002FE0A 0000 0000                  		dc.w SME_KM9WW_9C9-SME_KM9WW, SME_KM9WW_9D9-SME_KM9WW	
0002FE0E 0000 0000                  		dc.w SME_KM9WW_9E4-SME_KM9WW, SME_KM9WW_9EF-SME_KM9WW	
0002FE12 0000 0000                  		dc.w SME_KM9WW_9FA-SME_KM9WW, SME_KM9WW_A05-SME_KM9WW	
0002FE16 0000 0000                  		dc.w SME_KM9WW_A10-SME_KM9WW, SME_KM9WW_A20-SME_KM9WW	
0002FE1A 0000 0000                  		dc.w SME_KM9WW_A30-SME_KM9WW, SME_KM9WW_A3B-SME_KM9WW	
0002FE1E 0000 0000                  		dc.w SME_KM9WW_A4B-SME_KM9WW, SME_KM9WW_A60-SME_KM9WW	
0002FE22 0000 0000                  		dc.w SME_KM9WW_A75-SME_KM9WW, SME_KM9WW_A8A-SME_KM9WW	
0002FE26 0000 0000                  		dc.w SME_KM9WW_A95-SME_KM9WW, SME_KM9WW_AAF-SME_KM9WW	
0002FE2A 0000 0000                  		dc.w SME_KM9WW_AC9-SME_KM9WW, SME_KM9WW_ACF-SME_KM9WW	
0002FE2E 0000 0000                  		dc.w SME_KM9WW_AD5-SME_KM9WW, SME_KM9WW_ADB-SME_KM9WW	
0002FE32 0000 0000                  		dc.w SME_KM9WW_AE1-SME_KM9WW, SME_KM9WW_AE7-SME_KM9WW	
0002FE36 0000 0000                  		dc.w SME_KM9WW_AF2-SME_KM9WW, SME_KM9WW_AFD-SME_KM9WW	
0002FE3A 0000 0000                  		dc.w SME_KM9WW_B12-SME_KM9WW, SME_KM9WW_B27-SME_KM9WW	
0002FE3E 0000 0000                  		dc.w SME_KM9WW_B3C-SME_KM9WW, SME_KM9WW_B4C-SME_KM9WW	
0002FE42 0000 0000                  		dc.w SME_KM9WW_B5C-SME_KM9WW, SME_KM9WW_B71-SME_KM9WW	
0002FE46 0000 0000                  		dc.w SME_KM9WW_B81-SME_KM9WW, SME_KM9WW_B96-SME_KM9WW	
0002FE4A 0000 0000                  		dc.w SME_KM9WW_BA6-SME_KM9WW, SME_KM9WW_BBB-SME_KM9WW	
0002FE4E 0000 0000                  		dc.w SME_KM9WW_BCB-SME_KM9WW, SME_KM9WW_BDB-SME_KM9WW	
0002FE52 0000 0000                  		dc.w SME_KM9WW_BEB-SME_KM9WW, SME_KM9WW_BFB-SME_KM9WW	
0002FE56 0000 0000                  		dc.w SME_KM9WW_C0B-SME_KM9WW, SME_KM9WW_C20-SME_KM9WW	
0002FE5A 0000 0000                  		dc.w SME_KM9WW_C35-SME_KM9WW, SME_KM9WW_C4A-SME_KM9WW	
0002FE5E 0000 0000                  		dc.w SME_KM9WW_C5F-SME_KM9WW, SME_KM9WW_C6A-SME_KM9WW	
0002FE62 0000 0000                  		dc.w SME_KM9WW_C7A-SME_KM9WW, SME_KM9WW_C8A-SME_KM9WW	
0002FE66 0000 0000                  		dc.w SME_KM9WW_C9A-SME_KM9WW, SME_KM9WW_CAA-SME_KM9WW	
0002FE6A 0000 0000                  		dc.w SME_KM9WW_CBA-SME_KM9WW, SME_KM9WW_CCA-SME_KM9WW	
0002FE6E 0000 0000                  		dc.w SME_KM9WW_CDA-SME_KM9WW, SME_KM9WW_CEA-SME_KM9WW	
0002FE72 0000 0000                  		dc.w SME_KM9WW_CFA-SME_KM9WW, SME_KM9WW_D0F-SME_KM9WW	
0002FE76 0000 0000                  		dc.w SME_KM9WW_D1F-SME_KM9WW, SME_KM9WW_D34-SME_KM9WW	
0002FE7A 0000 0000                  		dc.w SME_KM9WW_D49-SME_KM9WW, SME_KM9WW_D5E-SME_KM9WW	
0002FE7E 0000 0000                  		dc.w SME_KM9WW_D73-SME_KM9WW, SME_KM9WW_D88-SME_KM9WW	
0002FE82 0000 0000                  		dc.w SME_KM9WW_D93-SME_KM9WW, SME_KM9WW_DA8-SME_KM9WW	
0002FE86 0000 0000                  		dc.w SME_KM9WW_DBD-SME_KM9WW, SME_KM9WW_DD2-SME_KM9WW	
0002FE8A 0000 0000                  		dc.w SME_KM9WW_DE2-SME_KM9WW, SME_KM9WW_DF7-SME_KM9WW	
0002FE8E 0000 0000                  		dc.w SME_KM9WW_E0C-SME_KM9WW, SME_KM9WW_E1C-SME_KM9WW	
0002FE92 0000 0000                  		dc.w SME_KM9WW_E2C-SME_KM9WW, SME_KM9WW_E37-SME_KM9WW	
0002FE96 0000 0000                  		dc.w SME_KM9WW_E47-SME_KM9WW, SME_KM9WW_E57-SME_KM9WW	
0002FE9A 0000 0000                  		dc.w SME_KM9WW_E62-SME_KM9WW, SME_KM9WW_E6D-SME_KM9WW	
0002FE9E 0000 0000                  		dc.w SME_KM9WW_E78-SME_KM9WW, SME_KM9WW_E88-SME_KM9WW	
0002FEA2 0000 0000                  		dc.w SME_KM9WW_E98-SME_KM9WW, SME_KM9WW_E9E-SME_KM9WW	
0002FEA6 0000 0000                  		dc.w SME_KM9WW_EAE-SME_KM9WW, SME_KM9WW_EB9-SME_KM9WW	
0002FEAA 0000 0000                  		dc.w SME_KM9WW_EC9-SME_KM9WW, SME_KM9WW_ED9-SME_KM9WW	
0002FEAE 0000 0000                  		dc.w SME_KM9WW_EE9-SME_KM9WW, SME_KM9WW_EF9-SME_KM9WW	
0002FEB2 00                         SME_KM9WW_1B4:	dc.b 0	
0002FEB3 03                         SME_KM9WW_1B5:	dc.b 3	
0002FEB4 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	
0002FEB9 FC06 0008 04               		dc.b $FC, 6, 0, 8, 4	
0002FEBE FC0A 000E EC               		dc.b $FC, $A, 0, $E, $EC	
0002FEC3 03                         SME_KM9WW_1C5:	dc.b 3	
0002FEC4 FD0E 0000 EC               		dc.b $FD, $E, 0, 0, $EC	
0002FEC9 0501 000C 0C               		dc.b 5, 1, 0, $C, $C	
0002FECE ED0D 000E EC               		dc.b $ED, $D, 0, $E, $EC	
0002FED3 03                         SME_KM9WW_1D5:	dc.b 3	
0002FED4 FE0A 0000 F4               		dc.b $FE, $A, 0, 0, $F4	
0002FED9 F60C 0009 EC               		dc.b $F6, $C, 0, 9, $EC	
0002FEDE EE08 000D F4               		dc.b $EE, 8, 0, $D, $F4	
0002FEE3 02                         SME_KM9WW_1E5:	dc.b 2	
0002FEE4 FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
0002FEE9 EC09 000C F4               		dc.b $EC, 9, 0, $C, $F4	
0002FEEE 03                         SME_KM9WW_1F0:	dc.b 3	
0002FEEF FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
0002FEF4 FC01 000C 0E               		dc.b $FC, 1, 0, $C, $E	
0002FEF9 EC09 000E F4               		dc.b $EC, 9, 0, $E, $F4	
0002FEFE 03                         SME_KM9WW_200:	dc.b 3	
0002FEFF FD0E 0000 ED               		dc.b $FD, $E, 0, 0, $ED	
0002FF04 0501 000C 0D               		dc.b 5, 1, 0, $C, $D	
0002FF09 ED09 000E F4               		dc.b $ED, 9, 0, $E, $F4	
0002FF0E 03                         SME_KM9WW_210:	dc.b 3	
0002FF0F FE0A 0000 F4               		dc.b $FE, $A, 0, 0, $F4	
0002FF14 F60C 0009 EC               		dc.b $F6, $C, 0, 9, $EC	
0002FF19 EE08 000D F4               		dc.b $EE, 8, 0, $D, $F4	
0002FF1E 02                         SME_KM9WW_220:	dc.b 2	
0002FF1F FC0A 0000 F4               		dc.b $FC, $A, 0, 0, $F4	
0002FF24 EC0D 0009 EC               		dc.b $EC, $D, 0, 9, $EC	
0002FF29 04                         SME_KM9WW_22B:	dc.b 4	
0002FF2A FD0B 0000 FB               		dc.b $FD, $B, 0, 0, $FB	
0002FF2F ED0D 000C EB               		dc.b $ED, $D, 0, $C, $EB	
0002FF34 F500 0014 0B               		dc.b $F5, 0, 0, $14, $B	
0002FF39 FD05 0015 EB               		dc.b $FD, 5, 0, $15, $EB	
0002FF3E 04                         SME_KM9WW_240:	dc.b 4	
0002FF3F 020E 0000 FC               		dc.b 2, $E, 0, 0, $FC	
0002FF44 F20D 000C EC               		dc.b $F2, $D, 0, $C, $EC	
0002FF49 FA04 0014 0C               		dc.b $FA, 4, 0, $14, $C	
0002FF4E 0204 0016 EC               		dc.b 2, 4, 0, $16, $EC	
0002FF53 04                         SME_KM9WW_255:	dc.b 4	
0002FF54 FB0A 0000 FD               		dc.b $FB, $A, 0, 0, $FD	
0002FF59 EB04 0009 F5               		dc.b $EB, 4, 0, 9, $F5	
0002FF5E F30C 000B ED               		dc.b $F3, $C, 0, $B, $ED	
0002FF63 FB05 000F ED               		dc.b $FB, 5, 0, $F, $ED	
0002FF68 04                         SME_KM9WW_26A:	dc.b 4	
0002FF69 FD0E 0000 FC               		dc.b $FD, $E, 0, 0, $FC	
0002FF6E ED0D 000C EC               		dc.b $ED, $D, 0, $C, $EC	
0002FF73 FD04 0014 EC               		dc.b $FD, 4, 0, $14, $EC	
0002FF78 0500 0016 F4               		dc.b 5, 0, 0, $16, $F4	
0002FF7D 04                         SME_KM9WW_27F:	dc.b 4	
0002FF7E FE0B 0000 FC               		dc.b $FE, $B, 0, 0, $FC	
0002FF83 EE0D 000C EC               		dc.b $EE, $D, 0, $C, $EC	
0002FF88 EE01 0014 0C               		dc.b $EE, 1, 0, $14, $C	
0002FF8D FE06 0016 EC               		dc.b $FE, 6, 0, $16, $EC	
0002FF92 04                         SME_KM9WW_294:	dc.b 4	
0002FF93 FC0F 0000 FB               		dc.b $FC, $F, 0, 0, $FB	
0002FF98 EC09 0010 EB               		dc.b $EC, 9, 0, $10, $EB	
0002FF9D F408 0016 03               		dc.b $F4, 8, 0, $16, 3	
0002FFA2 FC05 0019 EB               		dc.b $FC, 5, 0, $19, $EB	
0002FFA7 04                         SME_KM9WW_2A9:	dc.b 4	
0002FFA8 FF0A 0000 FA               		dc.b $FF, $A, 0, 0, $FA	
0002FFAD EF0D 0009 EA               		dc.b $EF, $D, 0, 9, $EA	
0002FFB2 FF04 0011 EA               		dc.b $FF, 4, 0, $11, $EA	
0002FFB7 0700 0013 F2               		dc.b 7, 0, 0, $13, $F2	
0002FFBC 04                         SME_KM9WW_2BE:	dc.b 4	
0002FFBD FE0A 0000 FC               		dc.b $FE, $A, 0, 0, $FC	
0002FFC2 EE08 0009 EC               		dc.b $EE, 8, 0, 9, $EC	
0002FFC7 F60C 000C EC               		dc.b $F6, $C, 0, $C, $EC	
0002FFCC FE05 0010 EC               		dc.b $FE, 5, 0, $10, $EC	
0002FFD1 03                         SME_KM9WW_2D3:	dc.b 3	
0002FFD2 ED09 0000 FC               		dc.b $ED, 9, 0, 0, $FC	
0002FFD7 FD0A 0006 FC               		dc.b $FD, $A, 0, 6, $FC	
0002FFDC F507 000F EC               		dc.b $F5, 7, 0, $F, $EC	
0002FFE1 03                         SME_KM9WW_2E3:	dc.b 3	
0002FFE2 F50B 0000 FC               		dc.b $F5, $B, 0, 0, $FC	
0002FFE7 ED04 000C 04               		dc.b $ED, 4, 0, $C, 4	
0002FFEC F507 000E EC               		dc.b $F5, 7, 0, $E, $EC	
0002FFF1 03                         SME_KM9WW_2F3:	dc.b 3	
0002FFF2 F50A 0000 FC               		dc.b $F5, $A, 0, 0, $FC	
0002FFF7 F506 0009 EC               		dc.b $F5, 6, 0, 9, $EC	
0002FFFC 0D00 000F F4               		dc.b $D, 0, 0, $F, $F4	
00030001 02                         SME_KM9WW_303:	dc.b 2	
00030002 F30B 0000 FC               		dc.b $F3, $B, 0, 0, $FC	
00030007 F307 000C EC               		dc.b $F3, 7, 0, $C, $EC	
0003000C 03                         SME_KM9WW_30E:	dc.b 3	
0003000D EB04 0000 FC               		dc.b $EB, 4, 0, 0, $FC	
00030012 F30B 0002 FC               		dc.b $F3, $B, 0, 2, $FC	
00030017 F307 000E EC               		dc.b $F3, 7, 0, $E, $EC	
0003001C 04                         SME_KM9WW_31E:	dc.b 4	
0003001D EC04 0000 04               		dc.b $EC, 4, 0, 0, 4	
00030022 F40B 0002 FC               		dc.b $F4, $B, 0, 2, $FC	
00030027 F406 000E EC               		dc.b $F4, 6, 0, $E, $EC	
0003002C 0C00 0014 F4               		dc.b $C, 0, 0, $14, $F4	
00030031 03                         SME_KM9WW_333:	dc.b 3	
00030032 F50A 0000 FC               		dc.b $F5, $A, 0, 0, $FC	
00030037 F506 0009 EC               		dc.b $F5, 6, 0, 9, $EC	
0003003C 0D00 000F F4               		dc.b $D, 0, 0, $F, $F4	
00030041 02                         SME_KM9WW_343:	dc.b 2	
00030042 F50A 0000 FC               		dc.b $F5, $A, 0, 0, $FC	
00030047 F507 0009 EC               		dc.b $F5, 7, 0, 9, $EC	
0003004C 04                         SME_KM9WW_34E:	dc.b 4	
0003004D EF0E 0000 FE               		dc.b $EF, $E, 0, 0, $FE	
00030052 EF06 000C EE               		dc.b $EF, 6, 0, $C, $EE	
00030057 070C 0012 EE               		dc.b 7, $C, 0, $12, $EE	
0003005C 0F08 0016 EE               		dc.b $F, 8, 0, $16, $EE	
00030061 04                         SME_KM9WW_363:	dc.b 4	
00030062 E70B 0000 00               		dc.b $E7, $B, 0, 0, 0	
00030067 E701 000C F8               		dc.b $E7, 1, 0, $C, $F8	
0003006C F705 000E F0               		dc.b $F7, 5, 0, $E, $F0	
00030071 0709 0012 F0               		dc.b 7, 9, 0, $12, $F0	
00030076 04                         SME_KM9WW_378:	dc.b 4	
00030077 EF0A 0000 FD               		dc.b $EF, $A, 0, 0, $FD	
0003007C F705 0009 ED               		dc.b $F7, 5, 0, 9, $ED	
00030081 070C 000D ED               		dc.b 7, $C, 0, $D, $ED	
00030086 0F04 0011 F5               		dc.b $F, 4, 0, $11, $F5	
0003008B 04                         SME_KM9WW_38D:	dc.b 4	
0003008C E70B 0000 00               		dc.b $E7, $B, 0, 0, 0	
00030091 F705 000C F0               		dc.b $F7, 5, 0, $C, $F0	
00030096 070C 0010 F0               		dc.b 7, $C, 0, $10, $F0	
0003009B 0F08 0014 F0               		dc.b $F, 8, 0, $14, $F0	
000300A0 04                         SME_KM9WW_3A2:	dc.b 4	
000300A1 EE0E 0000 FF               		dc.b $EE, $E, 0, 0, $FF	
000300A6 EE06 000C EF               		dc.b $EE, 6, 0, $C, $EF	
000300AB 060D 0012 EF               		dc.b 6, $D, 0, $12, $EF	
000300B0 0600 001A 0F               		dc.b 6, 0, 0, $1A, $F	
000300B5 04                         SME_KM9WW_3B7:	dc.b 4	
000300B6 E80F 0000 FF               		dc.b $E8, $F, 0, 0, $FF	
000300BB E802 0010 F7               		dc.b $E8, 2, 0, $10, $F7	
000300C0 0004 0013 EF               		dc.b 0, 4, 0, $13, $EF	
000300C5 080D 0015 EF               		dc.b 8, $D, 0, $15, $EF	
000300CA 04                         SME_KM9WW_3CC:	dc.b 4	
000300CB EE0A 0000 FE               		dc.b $EE, $A, 0, 0, $FE	
000300D0 F605 0009 EE               		dc.b $F6, 5, 0, 9, $EE	
000300D5 060C 000D EE               		dc.b 6, $C, 0, $D, $EE	
000300DA 0E08 0011 EE               		dc.b $E, 8, 0, $11, $EE	
000300DF 04                         SME_KM9WW_3E1:	dc.b 4	
000300E0 EE0A 0000 FE               		dc.b $EE, $A, 0, 0, $FE	
000300E5 F605 0009 EE               		dc.b $F6, 5, 0, 9, $EE	
000300EA 060C 000D EE               		dc.b 6, $C, 0, $D, $EE	
000300EF 0E08 0011 EE               		dc.b $E, 8, 0, $11, $EE	
000300F4 02                         SME_KM9WW_3F6:	dc.b 2	
000300F5 EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
000300FA F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
000300FF 02                         SME_KM9WW_401:	dc.b 2	
00030100 EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
00030105 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
0003010A 02                         SME_KM9WW_40C:	dc.b 2	
0003010B EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
00030110 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
00030115 02                         SME_KM9WW_417:	dc.b 2	
00030116 EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
0003011B F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
00030120 04                         SME_KM9WW_422:	dc.b 4	
00030121 EF0E 0000 ED               		dc.b $EF, $E, 0, 0, $ED	
00030126 FF00 000C 0D               		dc.b $FF, 0, 0, $C, $D	
0003012B 070C 000D F5               		dc.b 7, $C, 0, $D, $F5	
00030130 0F08 0011 F5               		dc.b $F, 8, 0, $11, $F5	
00030135 02                         SME_KM9WW_437:	dc.b 2	
00030136 EE08 0000 F0               		dc.b $EE, 8, 0, 0, $F0	
0003013B F60F 0003 F0               		dc.b $F6, $F, 0, 3, $F0	
00030140 04                         SME_KM9WW_442:	dc.b 4	
00030141 EF0E 0000 ED               		dc.b $EF, $E, 0, 0, $ED	
00030146 FF00 000C 0D               		dc.b $FF, 0, 0, $C, $D	
0003014B 070C 000D F5               		dc.b 7, $C, 0, $D, $F5	
00030150 0F08 0011 F5               		dc.b $F, 8, 0, $11, $F5	
00030155 02                         SME_KM9WW_457:	dc.b 2	
00030156 EE08 0000 F0               		dc.b $EE, 8, 0, 0, $F0	
0003015B F60F 0003 F0               		dc.b $F6, $F, 0, 3, $F0	
00030160 02                         SME_KM9WW_462:	dc.b 2	
00030161 F002 0000 EC               		dc.b $F0, 2, 0, 0, $EC	
00030166 F00F 0003 F4               		dc.b $F0, $F, 0, 3, $F4	
0003016B 02                         SME_KM9WW_46D:	dc.b 2	
0003016C F002 0000 EC               		dc.b $F0, 2, 0, 0, $EC	
00030171 F00F 0003 F4               		dc.b $F0, $F, 0, 3, $F4	
00030176 02                         SME_KM9WW_478:	dc.b 2	
00030177 F002 0000 EC               		dc.b $F0, 2, 0, 0, $EC	
0003017C F00F 0003 F4               		dc.b $F0, $F, 0, 3, $F4	
00030181 02                         SME_KM9WW_483:	dc.b 2	
00030182 F002 0000 EC               		dc.b $F0, 2, 0, 0, $EC	
00030187 F00F 0003 F4               		dc.b $F0, $F, 0, 3, $F4	
0003018C 03                         SME_KM9WW_48E:	dc.b 3	
0003018D EA04 0000 FE               		dc.b $EA, 4, 0, 0, $FE	
00030192 F20B 0002 EE               		dc.b $F2, $B, 0, 2, $EE	
00030197 F206 000E 06               		dc.b $F2, 6, 0, $E, 6	
0003019C 02                         SME_KM9WW_49E:	dc.b 2	
0003019D F702 0000 ED               		dc.b $F7, 2, 0, 0, $ED	
000301A2 EF0F 0003 F5               		dc.b $EF, $F, 0, 3, $F5	
000301A7 03                         SME_KM9WW_4A9:	dc.b 3	
000301A8 EA04 0000 FE               		dc.b $EA, 4, 0, 0, $FE	
000301AD F20B 0002 EE               		dc.b $F2, $B, 0, 2, $EE	
000301B2 F206 000E 06               		dc.b $F2, 6, 0, $E, 6	
000301B7 02                         SME_KM9WW_4B9:	dc.b 2	
000301B8 F702 0000 ED               		dc.b $F7, 2, 0, 0, $ED	
000301BD EF0F 0003 F5               		dc.b $EF, $F, 0, 3, $F5	
000301C2 03                         SME_KM9WW_4C4:	dc.b 3	
000301C3 EC08 0000 F2               		dc.b $EC, 8, 0, 0, $F2	
000301C8 F40E 0003 F2               		dc.b $F4, $E, 0, 3, $F2	
000301CD 0C08 000F F2               		dc.b $C, 8, 0, $F, $F2	
000301D2 04                         SME_KM9WW_4D4:	dc.b 4	
000301D3 EA09 0000 F3               		dc.b $EA, 9, 0, 0, $F3	
000301D8 FA0C 0006 F3               		dc.b $FA, $C, 0, 6, $F3	
000301DD 0208 000A F3               		dc.b 2, 8, 0, $A, $F3	
000301E2 0A04 000D FB               		dc.b $A, 4, 0, $D, $FB	
000301E7 04                         SME_KM9WW_4E9:	dc.b 4	
000301E8 F004 0000 F9               		dc.b $F0, 4, 0, 0, $F9	
000301ED F808 0002 F1               		dc.b $F8, 8, 0, 2, $F1	
000301F2 000C 0005 F1               		dc.b 0, $C, 0, 5, $F1	
000301F7 0804 0009 F9               		dc.b 8, 4, 0, 9, $F9	
000301FC 04                         SME_KM9WW_4FE:	dc.b 4	
000301FD EF08 0000 F9               		dc.b $EF, 8, 0, 0, $F9	
00030202 F70C 0003 F1               		dc.b $F7, $C, 0, 3, $F1	
00030207 FF08 0007 F1               		dc.b $FF, 8, 0, 7, $F1	
0003020C 070C 000A F1               		dc.b 7, $C, 0, $A, $F1	
00030211 04                         SME_KM9WW_513:	dc.b 4	
00030212 EF04 0000 F4               		dc.b $EF, 4, 0, 0, $F4	
00030217 F708 0002 F4               		dc.b $F7, 8, 0, 2, $F4	
0003021C FF0C 0005 F4               		dc.b $FF, $C, 0, 5, $F4	
00030221 0708 0009 F4               		dc.b 7, 8, 0, 9, $F4	
00030226 03                         SME_KM9WW_528:	dc.b 3	
00030227 EA04 0000 F9               		dc.b $EA, 4, 0, 0, $F9	
0003022C F20D 0002 F1               		dc.b $F2, $D, 0, 2, $F1	
00030231 0209 000A F1               		dc.b 2, 9, 0, $A, $F1	
00030236 02                         SME_KM9WW_538:	dc.b 2	
00030237 EC0F 0000 F0               		dc.b $EC, $F, 0, 0, $F0	
0003023C 0C08 0010 F0               		dc.b $C, 8, 0, $10, $F0	
00030241 02                         SME_KM9WW_543:	dc.b 2	
00030242 EE0B 0000 F4               		dc.b $EE, $B, 0, 0, $F4	
00030247 0E00 000C FC               		dc.b $E, 0, 0, $C, $FC	
0003024C 03                         SME_KM9WW_54E:	dc.b 3	
0003024D EE04 0000 F0               		dc.b $EE, 4, 0, 0, $F0	
00030252 F60D 0002 F0               		dc.b $F6, $D, 0, 2, $F0	
00030257 0608 000A F0               		dc.b 6, 8, 0, $A, $F0	
0003025C 04                         SME_KM9WW_55E:	dc.b 4	
0003025D F008 0000 F5               		dc.b $F0, 8, 0, 0, $F5	
00030262 F80C 0003 ED               		dc.b $F8, $C, 0, 3, $ED	
00030267 0008 0007 F5               		dc.b 0, 8, 0, 7, $F5	
0003026C 0804 000A F5               		dc.b 8, 4, 0, $A, $F5	
00030271 02                         SME_KM9WW_573:	dc.b 2	
00030272 EC0A 0000 F4               		dc.b $EC, $A, 0, 0, $F4	
00030277 0405 0009 FC               		dc.b 4, 5, 0, 9, $FC	
0003027C 02                         SME_KM9WW_57E:	dc.b 2	
0003027D EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00030282 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00030287 03                         SME_KM9WW_589:	dc.b 3	
00030288 E600 0000 FA               		dc.b $E6, 0, 0, 0, $FA	
0003028D EE0B 0001 F2               		dc.b $EE, $B, 0, 1, $F2	
00030292 0E08 000D F2               		dc.b $E, 8, 0, $D, $F2	
00030297 01                         SME_KM9WW_599:	dc.b 1	
00030298 F00B 0000 F3               		dc.b $F0, $B, 0, 0, $F3	
0003029D 03                         SME_KM9WW_59F:	dc.b 3	
0003029E F108 0000 EF               		dc.b $F1, 8, 0, 0, $EF	
000302A3 F90D 0003 EF               		dc.b $F9, $D, 0, 3, $EF	
000302A8 0904 000B F7               		dc.b 9, 4, 0, $B, $F7	
000302AD 04                         SME_KM9WW_5AF:	dc.b 4	
000302AE F208 0000 F8               		dc.b $F2, 8, 0, 0, $F8	
000302B3 FA0C 0003 F0               		dc.b $FA, $C, 0, 3, $F0	
000302B8 0208 0007 F0               		dc.b 2, 8, 0, 7, $F0	
000302BD 0A04 000A F8               		dc.b $A, 4, 0, $A, $F8	
000302C2 04                         SME_KM9WW_5C4:	dc.b 4	
000302C3 EF09 0000 F8               		dc.b $EF, 9, 0, 0, $F8	
000302C8 FF0C 0006 F0               		dc.b $FF, $C, 0, 6, $F0	
000302CD 0708 000A F0               		dc.b 7, 8, 0, $A, $F0	
000302D2 0F04 000D F8               		dc.b $F, 4, 0, $D, $F8	
000302D7 04                         SME_KM9WW_5D9:	dc.b 4	
000302D8 EC09 0000 F8               		dc.b $EC, 9, 0, 0, $F8	
000302DD FC08 0006 F0               		dc.b $FC, 8, 0, 6, $F0	
000302E2 040C 0009 F0               		dc.b 4, $C, 0, 9, $F0	
000302E7 0C08 000D F0               		dc.b $C, 8, 0, $D, $F0	
000302EC 02                         SME_KM9WW_5EE:	dc.b 2	
000302ED EC0B 0000 F5               		dc.b $EC, $B, 0, 0, $F5	
000302F2 0C08 000C F5               		dc.b $C, 8, 0, $C, $F5	
000302F7 01                         SME_KM9WW_5F9:	dc.b 1	
000302F8 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
000302FD 02                         SME_KM9WW_5FF:	dc.b 2	
000302FE F60D 0000 F2               		dc.b $F6, $D, 0, 0, $F2	
00030303 0608 0008 F2               		dc.b 6, 8, 0, 8, $F2	
00030308 01                         SME_KM9WW_60A:	dc.b 1	
00030309 F30B 0000 F3               		dc.b $F3, $B, 0, 0, $F3	
0003030E 02                         SME_KM9WW_610:	dc.b 2	
0003030F EB04 0000 FB               		dc.b $EB, 4, 0, 0, $FB	
00030314 F30B 0002 F3               		dc.b $F3, $B, 0, 2, $F3	
00030319 03                         SME_KM9WW_61B:	dc.b 3	
0003031A EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0003031F F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00030324 0409 000B F8               		dc.b 4, 9, 0, $B, $F8	
00030329 04                         SME_KM9WW_62B:	dc.b 4	
0003032A E80A 0000 FC               		dc.b $E8, $A, 0, 0, $FC	
0003032F F005 0009 EC               		dc.b $F0, 5, 0, 9, $EC	
00030334 000C 000D EC               		dc.b 0, $C, 0, $D, $EC	
00030339 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
0003033E 04                         SME_KM9WW_640:	dc.b 4	
0003033F EA08 0000 FA               		dc.b $EA, 8, 0, 0, $FA	
00030344 F20D 0003 F2               		dc.b $F2, $D, 0, 3, $F2	
00030349 0208 000B F2               		dc.b 2, 8, 0, $B, $F2	
0003034E 0A05 000E F2               		dc.b $A, 5, 0, $E, $F2	
00030353 03                         SME_KM9WW_655:	dc.b 3	
00030354 EB09 0000 F8               		dc.b $EB, 9, 0, 0, $F8	
00030359 FB0C 0006 F0               		dc.b $FB, $C, 0, 6, $F0	
0003035E 0308 000A F8               		dc.b 3, 8, 0, $A, $F8	
00030363 03                         SME_KM9WW_665:	dc.b 3	
00030364 F108 0000 F3               		dc.b $F1, 8, 0, 0, $F3	
00030369 F90D 0003 F3               		dc.b $F9, $D, 0, 3, $F3	
0003036E 0908 000B F3               		dc.b 9, 8, 0, $B, $F3	
00030373 03                         SME_KM9WW_675:	dc.b 3	
00030374 EE04 0000 FB               		dc.b $EE, 4, 0, 0, $FB	
00030379 F60D 0002 F3               		dc.b $F6, $D, 0, 2, $F3	
0003037E 0604 000A FB               		dc.b 6, 4, 0, $A, $FB	
00030383 01                         SME_KM9WW_685:	dc.b 1	
00030384 F20F 0000 EE               		dc.b $F2, $F, 0, 0, $EE	
00030389 04                         SME_KM9WW_68B:	dc.b 4	
0003038A EA00 0000 02               		dc.b $EA, 0, 0, 0, 2	
0003038F F20D 0001 F2               		dc.b $F2, $D, 0, 1, $F2	
00030394 FA00 0009 EA               		dc.b $FA, 0, 0, 9, $EA	
00030399 020D 000A EA               		dc.b 2, $D, 0, $A, $EA	
0003039E 04                         SME_KM9WW_6A0:	dc.b 4	
0003039F EC04 0000 FB               		dc.b $EC, 4, 0, 0, $FB	
000303A4 F408 0002 F3               		dc.b $F4, 8, 0, 2, $F3	
000303A9 FC0A 0005 EB               		dc.b $FC, $A, 0, 5, $EB	
000303AE FC05 000E 03               		dc.b $FC, 5, 0, $E, 3	
000303B3 02                         SME_KM9WW_6B5:	dc.b 2	
000303B4 ED04 0000 FF               		dc.b $ED, 4, 0, 0, $FF	
000303B9 F50E 0002 EF               		dc.b $F5, $E, 0, 2, $EF	
000303BE 03                         SME_KM9WW_6C0:	dc.b 3	
000303BF EF04 0000 FA               		dc.b $EF, 4, 0, 0, $FA	
000303C4 F70D 0002 F2               		dc.b $F7, $D, 0, 2, $F2	
000303C9 0704 000A FA               		dc.b 7, 4, 0, $A, $FA	
000303CE 03                         SME_KM9WW_6D0:	dc.b 3	
000303CF ED00 0000 00               		dc.b $ED, 0, 0, 0, 0	
000303D4 F50A 0001 F8               		dc.b $F5, $A, 0, 1, $F8	
000303D9 FD04 000A E8               		dc.b $FD, 4, 0, $A, $E8	
000303DE 02                         SME_KM9WW_6E0:	dc.b 2	
000303DF F00F 0000 EF               		dc.b $F0, $F, 0, 0, $EF	
000303E4 F800 0010 0F               		dc.b $F8, 0, 0, $10, $F	
000303E9 04                         SME_KM9WW_6EB:	dc.b 4	
000303EA EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000303EF F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
000303F4 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
000303F9 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
000303FE 03                         SME_KM9WW_700:	dc.b 3	
000303FF EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00030404 F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00030409 0409 000B F7               		dc.b 4, 9, 0, $B, $F7	
0003040E 02                         SME_KM9WW_710:	dc.b 2	
0003040F EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00030414 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
00030419 02                         SME_KM9WW_71B:	dc.b 2	
0003041A EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
0003041F 0C08 000C F3               		dc.b $C, 8, 0, $C, $F3	
00030424 04                         SME_KM9WW_726:	dc.b 4	
00030425 EC08 0000 F7               		dc.b $EC, 8, 0, 0, $F7	
0003042A F40C 0003 EF               		dc.b $F4, $C, 0, 3, $EF	
0003042F FC08 0007 F7               		dc.b $FC, 8, 0, 7, $F7	
00030434 040D 000A EF               		dc.b 4, $D, 0, $A, $EF	
00030439 03                         SME_KM9WW_73B:	dc.b 3	
0003043A EC0A 0000 F6               		dc.b $EC, $A, 0, 0, $F6	
0003043F 040C 0009 EE               		dc.b 4, $C, 0, 9, $EE	
00030444 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
00030449 02                         SME_KM9WW_74B:	dc.b 2	
0003044A EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
0003044F 0C08 000C F3               		dc.b $C, 8, 0, $C, $F3	
00030454 03                         SME_KM9WW_756:	dc.b 3	
00030455 F50A 0000 EC               		dc.b $F5, $A, 0, 0, $EC	
0003045A F509 0009 04               		dc.b $F5, 9, 0, 9, 4	
0003045F 0500 000F 14               		dc.b 5, 0, 0, $F, $14	
00030464 01                         SME_KM9WW_766:	dc.b 1	
00030465 F40E 0000 FC               		dc.b $F4, $E, 0, 0, $FC	
0003046A 02                         SME_KM9WW_76C:	dc.b 2	
0003046B F40E 0000 E2               		dc.b $F4, $E, 0, 0, $E2	
00030470 F402 000C 02               		dc.b $F4, 2, 0, $C, 2	
00030475 03                         SME_KM9WW_777:	dc.b 3	
00030476 F505 0000 E5               		dc.b $F5, 5, 0, 0, $E5	
0003047B F50E 0004 F5               		dc.b $F5, $E, 0, 4, $F5	
00030480 0500 0010 E5               		dc.b 5, 0, 0, $10, $E5	
00030485 01                         SME_KM9WW_787:	dc.b 1	
00030486 F40E 0000 F6               		dc.b $F4, $E, 0, 0, $F6	
0003048B 02                         SME_KM9WW_78D:	dc.b 2	
0003048C FC00 0000 DA               		dc.b $FC, 0, 0, 0, $DA	
00030491 F40E 0001 E2               		dc.b $F4, $E, 0, 1, $E2	
00030496 02                         SME_KM9WW_798:	dc.b 2	
00030497 F00A 0000 EC               		dc.b $F0, $A, 0, 0, $EC	
0003049C F806 0009 04               		dc.b $F8, 6, 0, 9, 4	
000304A1 03                         SME_KM9WW_7A3:	dc.b 3	
000304A2 E80A 0000 F5               		dc.b $E8, $A, 0, 0, $F5	
000304A7 0005 0009 F5               		dc.b 0, 5, 0, 9, $F5	
000304AC 1008 000D F5               		dc.b $10, 8, 0, $D, $F5	
000304B1 01                         SME_KM9WW_7B3:	dc.b 1	
000304B2 F10B 0000 F3               		dc.b $F1, $B, 0, 0, $F3	
000304B7 02                         SME_KM9WW_7B9:	dc.b 2	
000304B8 EB0B 0000 F4               		dc.b $EB, $B, 0, 0, $F4	
000304BD 0B08 000C F4               		dc.b $B, 8, 0, $C, $F4	
000304C2 03                         SME_KM9WW_7C4:	dc.b 3	
000304C3 E808 0000 F4               		dc.b $E8, 8, 0, 0, $F4	
000304C8 F004 0003 F4               		dc.b $F0, 4, 0, 3, $F4	
000304CD F80B 0005 F4               		dc.b $F8, $B, 0, 5, $F4	
000304D2 01                         SME_KM9WW_7D4:	dc.b 1	
000304D3 F00B 0000 F2               		dc.b $F0, $B, 0, 0, $F2	
000304D8 02                         SME_KM9WW_7DA:	dc.b 2	
000304D9 E800 0000 FA               		dc.b $E8, 0, 0, 0, $FA	
000304DE F00B 0001 F2               		dc.b $F0, $B, 0, 1, $F2	
000304E3 02                         SME_KM9WW_7E5:	dc.b 2	
000304E4 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
000304E9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000304EE 04                         SME_KM9WW_7F0:	dc.b 4	
000304EF EC04 0000 F0               		dc.b $EC, 4, 0, 0, $F0	
000304F4 F40C 0002 F0               		dc.b $F4, $C, 0, 2, $F0	
000304F9 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000304FE 0C04 000C F8               		dc.b $C, 4, 0, $C, $F8	
00030503 03                         SME_KM9WW_805:	dc.b 3	
00030504 EC00 0000 FB               		dc.b $EC, 0, 0, 0, $FB	
00030509 F40D 0001 EB               		dc.b $F4, $D, 0, 1, $EB	
0003050E 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00030513 03                         SME_KM9WW_815:	dc.b 3	
00030514 F000 0000 00               		dc.b $F0, 0, 0, 0, 0	
00030519 F80D 0001 F0               		dc.b $F8, $D, 0, 1, $F0	
0003051E 0808 0009 F0               		dc.b 8, 8, 0, 9, $F0	
00030523 02                         SME_KM9WW_825:	dc.b 2	
00030524 F806 0000 EC               		dc.b $F8, 6, 0, 0, $EC	
00030529 F00B 0006 FC               		dc.b $F0, $B, 0, 6, $FC	
0003052E 03                         SME_KM9WW_830:	dc.b 3	
0003052F F000 0000 FC               		dc.b $F0, 0, 0, 0, $FC	
00030534 F80A 0001 EC               		dc.b $F8, $A, 0, 1, $EC	
00030539 F805 000A 04               		dc.b $F8, 5, 0, $A, 4	
0003053E 03                         SME_KM9WW_840:	dc.b 3	
0003053F F004 0000 F8               		dc.b $F0, 4, 0, 0, $F8	
00030544 F809 0002 F0               		dc.b $F8, 9, 0, 2, $F0	
00030549 080C 0008 F0               		dc.b 8, $C, 0, 8, $F0	
0003054E 03                         SME_KM9WW_850:	dc.b 3	
0003054F F009 0000 F8               		dc.b $F0, 9, 0, 0, $F8	
00030554 000C 0006 F0               		dc.b 0, $C, 0, 6, $F0	
00030559 0804 000A 00               		dc.b 8, 4, 0, $A, 0	
0003055E 02                         SME_KM9WW_860:	dc.b 2	
0003055F F000 0000 00               		dc.b $F0, 0, 0, 0, 0	
00030564 F80E 0001 F0               		dc.b $F8, $E, 0, 1, $F0	
00030569 04                         SME_KM9WW_86B:	dc.b 4	
0003056A F004 0000 F4               		dc.b $F0, 4, 0, 0, $F4	
0003056F F800 0002 EC               		dc.b $F8, 0, 0, 2, $EC	
00030574 0800 0003 EC               		dc.b 8, 0, 0, 3, $EC	
00030579 F80E 0004 F4               		dc.b $F8, $E, 0, 4, $F4	
0003057E 03                         SME_KM9WW_880:	dc.b 3	
0003057F F004 0000 FC               		dc.b $F0, 4, 0, 0, $FC	
00030584 F80E 0002 EC               		dc.b $F8, $E, 0, 2, $EC	
00030589 F802 000E 0C               		dc.b $F8, 2, 0, $E, $C	
0003058E 03                         SME_KM9WW_890:	dc.b 3	
0003058F F004 0000 F8               		dc.b $F0, 4, 0, 0, $F8	
00030594 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0	
00030599 0808 000A F8               		dc.b 8, 8, 0, $A, $F8	
0003059E 02                         SME_KM9WW_8A0:	dc.b 2	
0003059F F000 0000 F4               		dc.b $F0, 0, 0, 0, $F4	
000305A4 F80A 0001 F4               		dc.b $F8, $A, 0, 1, $F4	
000305A9 03                         SME_KM9WW_8AB:	dc.b 3	
000305AA F008 0000 F0               		dc.b $F0, 8, 0, 0, $F0	
000305AF F80D 0003 F0               		dc.b $F8, $D, 0, 3, $F0	
000305B4 0808 000B F0               		dc.b 8, 8, 0, $B, $F0	
000305B9 01                         SME_KM9WW_8BB:	dc.b 1	
000305BA F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
000305BF 04                         SME_KM9WW_8C1:	dc.b 4	
000305C0 E70C 0000 EE               		dc.b $E7, $C, 0, 0, $EE	
000305C5 EF08 0004 EE               		dc.b $EF, 8, 0, 4, $EE	
000305CA F70D 0007 EE               		dc.b $F7, $D, 0, 7, $EE	
000305CF 070D 000F F6               		dc.b 7, $D, 0, $F, $F6	
000305D4 04                         SME_KM9WW_8D6:	dc.b 4	
000305D5 E604 0000 E9               		dc.b $E6, 4, 0, 0, $E9	
000305DA EE0E 0002 E1               		dc.b $EE, $E, 0, 2, $E1	
000305DF F606 000E 01               		dc.b $F6, 6, 0, $E, 1	
000305E4 0608 0014 E9               		dc.b 6, 8, 0, $14, $E9	
000305E9 03                         SME_KM9WW_8EB:	dc.b 3	
000305EA F108 0000 E6               		dc.b $F1, 8, 0, 0, $E6	
000305EF F90E 0003 E6               		dc.b $F9, $E, 0, 3, $E6	
000305F4 E907 000F 06               		dc.b $E9, 7, 0, $F, 6	
000305F9 04                         SME_KM9WW_8FB:	dc.b 4	
000305FA EE08 0000 F5               		dc.b $EE, 8, 0, 0, $F5	
000305FF F604 0003 FD               		dc.b $F6, 4, 0, 3, $FD	
00030604 0601 0005 E5               		dc.b 6, 1, 0, 5, $E5	
00030609 FE0F 0007 ED               		dc.b $FE, $F, 0, 7, $ED	
0003060E 04                         SME_KM9WW_910:	dc.b 4	
0003060F 120C 1800 F1               		dc.b $12, $C, $18, 0, $F1	
00030614 0A08 1804 F9               		dc.b $A, 8, $18, 4, $F9	
00030619 FA0D 1807 F1               		dc.b $FA, $D, $18, 7, $F1	
0003061E EA0D 180F E9               		dc.b $EA, $D, $18, $F, $E9	
00030623 04                         SME_KM9WW_925:	dc.b 4	
00030624 1304 1800 04               		dc.b $13, 4, $18, 0, 4	
00030629 FB0E 1802 FC               		dc.b $FB, $E, $18, 2, $FC	
0003062E F306 180E EC               		dc.b $F3, 6, $18, $E, $EC	
00030633 F308 1814 FC               		dc.b $F3, 8, $18, $14, $FC	
00030638 03                         SME_KM9WW_93A:	dc.b 3	
00030639 0708 1800 01               		dc.b 7, 8, $18, 0, 1	
0003063E EF0E 1803 F9               		dc.b $EF, $E, $18, 3, $F9	
00030643 F707 180F E9               		dc.b $F7, 7, $18, $F, $E9	
00030648 04                         SME_KM9WW_94A:	dc.b 4	
00030649 0C08 1800 F3               		dc.b $C, 8, $18, 0, $F3	
0003064E 0404 1803 F3               		dc.b 4, 4, $18, 3, $F3	
00030653 EC01 1805 13               		dc.b $EC, 1, $18, 5, $13	
00030658 E40F 1807 F3               		dc.b $E4, $F, $18, 7, $F3	
0003065D 04                         SME_KM9WW_95F:	dc.b 4	
0003065E E80E 0000 EF               		dc.b $E8, $E, 0, 0, $EF	
00030663 E800 000C 0F               		dc.b $E8, 0, 0, $C, $F	
00030668 0004 000D F7               		dc.b 0, 4, 0, $D, $F7	
0003066D 0809 000F EF               		dc.b 8, 9, 0, $F, $EF	
00030672 04                         SME_KM9WW_974:	dc.b 4	
00030673 E80C 0000 EE               		dc.b $E8, $C, 0, 0, $EE	
00030678 F00D 0004 EE               		dc.b $F0, $D, 0, 4, $EE	
0003067D 0005 000C F6               		dc.b 0, 5, 0, $C, $F6	
00030682 1008 0010 EE               		dc.b $10, 8, 0, $10, $EE	
00030687 03                         SME_KM9WW_989:	dc.b 3	
00030688 E808 0000 F4               		dc.b $E8, 8, 0, 0, $F4	
0003068D F00C 0003 EC               		dc.b $F0, $C, 0, 3, $EC	
00030692 F80B 0007 F4               		dc.b $F8, $B, 0, 7, $F4	
00030697 04                         SME_KM9WW_999:	dc.b 4	
00030698 E800 0000 EA               		dc.b $E8, 0, 0, 0, $EA	
0003069D E80D 0001 F2               		dc.b $E8, $D, 0, 1, $F2	
000306A2 F808 0009 F2               		dc.b $F8, 8, 0, 9, $F2	
000306A7 0006 000C FA               		dc.b 0, 6, 0, $C, $FA	
000306AC 03                         SME_KM9WW_9AE:	dc.b 3	
000306AD E80E 0000 ED               		dc.b $E8, $E, 0, 0, $ED	
000306B2 0009 000C F5               		dc.b 0, 9, 0, $C, $F5	
000306B7 1004 0012 F5               		dc.b $10, 4, 0, $12, $F5	
000306BC 02                         SME_KM9WW_9BE:	dc.b 2	
000306BD E80E 0000 EF               		dc.b $E8, $E, 0, 0, $EF	
000306C2 0006 000C F7               		dc.b 0, 6, 0, $C, $F7	
000306C7 03                         SME_KM9WW_9C9:	dc.b 3	
000306C8 F808 0000 FC               		dc.b $F8, 8, 0, 0, $FC	
000306CD 000D 0003 F4               		dc.b 0, $D, 0, 3, $F4	
000306D2 1008 000B F4               		dc.b $10, 8, 0, $B, $F4	
000306D7 02                         SME_KM9WW_9D9:	dc.b 2	
000306D8 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
000306DD 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
000306E2 02                         SME_KM9WW_9E4:	dc.b 2	
000306E3 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
000306E8 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
000306ED 02                         SME_KM9WW_9EF:	dc.b 2	
000306EE F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
000306F3 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
000306F8 02                         SME_KM9WW_9FA:	dc.b 2	
000306F9 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
000306FE 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00030703 02                         SME_KM9WW_A05:	dc.b 2	
00030704 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00030709 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
0003070E 03                         SME_KM9WW_A10:	dc.b 3	
0003070F F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC	
00030714 F002 000C 0C               		dc.b $F0, 2, 0, $C, $C	
00030719 0808 000F F4               		dc.b 8, 8, 0, $F, $F4	
0003071E 03                         SME_KM9WW_A20:	dc.b 3	
0003071F EF0E 0000 EC               		dc.b $EF, $E, 0, 0, $EC	
00030724 EF02 000C 0C               		dc.b $EF, 2, 0, $C, $C	
00030729 0708 000F F4               		dc.b 7, 8, 0, $F, $F4	
0003072E 02                         SME_KM9WW_A30:	dc.b 2	
0003072F E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00030734 0805 000C F9               		dc.b 8, 5, 0, $C, $F9	
00030739 03                         SME_KM9WW_A3B:	dc.b 3	
0003073A F10C 0000 E9               		dc.b $F1, $C, 0, 0, $E9	
0003073F F905 0004 E9               		dc.b $F9, 5, 0, 4, $E9	
00030744 F90A 0008 F9               		dc.b $F9, $A, 0, 8, $F9	
00030749 04                         SME_KM9WW_A4B:	dc.b 4	
0003074A E809 0000 F0               		dc.b $E8, 9, 0, 0, $F0	
0003074F F80C 0006 F0               		dc.b $F8, $C, 0, 6, $F0	
00030754 0008 000A F0               		dc.b 0, 8, 0, $A, $F0	
00030759 0809 000D F8               		dc.b 8, 9, 0, $D, $F8	
0003075E 04                         SME_KM9WW_A60:	dc.b 4	
0003075F E609 0000 F0               		dc.b $E6, 9, 0, 0, $F0	
00030764 F60C 0006 F0               		dc.b $F6, $C, 0, 6, $F0	
00030769 FE08 000A F0               		dc.b $FE, 8, 0, $A, $F0	
0003076E 060D 000D F8               		dc.b 6, $D, 0, $D, $F8	
00030773 04                         SME_KM9WW_A75:	dc.b 4	
00030774 E808 0000 F0               		dc.b $E8, 8, 0, 0, $F0	
00030779 F00E 0003 F0               		dc.b $F0, $E, 0, 3, $F0	
0003077E 0000 000F 10               		dc.b 0, 0, 0, $F, $10	
00030783 0804 0010 00               		dc.b 8, 4, 0, $10, 0	
00030788 02                         SME_KM9WW_A8A:	dc.b 2	
00030789 E808 0000 F0               		dc.b $E8, 8, 0, 0, $F0	
0003078E F00E 0003 F0               		dc.b $F0, $E, 0, 3, $F0	
00030793 05                         SME_KM9WW_A95:	dc.b 5	
00030794 E80D 0000 F2               		dc.b $E8, $D, 0, 0, $F2	
00030799 E804 0008 F7               		dc.b $E8, 4, 0, 8, $F7	
0003079E F009 000A F7               		dc.b $F0, 9, 0, $A, $F7	
000307A3 0005 0010 F7               		dc.b 0, 5, 0, $10, $F7	
000307A8 1008 0014 F7               		dc.b $10, 8, 0, $14, $F7	
000307AD 05                         SME_KM9WW_AAF:	dc.b 5	
000307AE E808 0000 F6               		dc.b $E8, 8, 0, 0, $F6	
000307B3 E804 0003 F7               		dc.b $E8, 4, 0, 3, $F7	
000307B8 F009 0005 F7               		dc.b $F0, 9, 0, 5, $F7	
000307BD 0005 000B F7               		dc.b 0, 5, 0, $B, $F7	
000307C2 1008 000F F7               		dc.b $10, 8, 0, $F, $F7	
000307C7 01                         SME_KM9WW_AC9:	dc.b 1	
000307C8 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000307CD 01                         SME_KM9WW_ACF:	dc.b 1	
000307CE F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000307D3 01                         SME_KM9WW_AD5:	dc.b 1	
000307D4 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000307D9 01                         SME_KM9WW_ADB:	dc.b 1	
000307DA F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000307DF 01                         SME_KM9WW_AE1:	dc.b 1	
000307E0 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000307E5 02                         SME_KM9WW_AE7:	dc.b 2	
000307E6 EC00 0000 00               		dc.b $EC, 0, 0, 0, 0	
000307EB F40B 0001 F8               		dc.b $F4, $B, 0, 1, $F8	
000307F0 02                         SME_KM9WW_AF2:	dc.b 2	
000307F1 F400 0000 03               		dc.b $F4, 0, 0, 0, 3	
000307F6 FC0E 0001 F3               		dc.b $FC, $E, 0, 1, $F3	
000307FB 04                         SME_KM9WW_AFD:	dc.b 4	
000307FC EB0A 0000 F5               		dc.b $EB, $A, 0, 0, $F5	
00030801 F301 0009 ED               		dc.b $F3, 1, 0, 9, $ED	
00030806 030C 000B F5               		dc.b 3, $C, 0, $B, $F5	
0003080B 0B08 000F FD               		dc.b $B, 8, 0, $F, $FD	
00030810 04                         SME_KM9WW_B12:	dc.b 4	
00030811 EB0A 0000 F6               		dc.b $EB, $A, 0, 0, $F6	
00030816 F301 0009 EE               		dc.b $F3, 1, 0, 9, $EE	
0003081B 030C 000B F6               		dc.b 3, $C, 0, $B, $F6	
00030820 0B08 000F FE               		dc.b $B, 8, 0, $F, $FE	
00030825 04                         SME_KM9WW_B27:	dc.b 4	
00030826 EA08 0000 F9               		dc.b $EA, 8, 0, 0, $F9	
0003082B F20D 0003 F1               		dc.b $F2, $D, 0, 3, $F1	
00030830 0208 000B F9               		dc.b 2, 8, 0, $B, $F9	
00030835 0A04 000E 01               		dc.b $A, 4, 0, $E, 1	
0003083A 03                         SME_KM9WW_B3C:	dc.b 3	
0003083B EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00030840 F40E 0003 EF               		dc.b $F4, $E, 0, 3, $EF	
00030845 0C08 000F F7               		dc.b $C, 8, 0, $F, $F7	
0003084A 03                         SME_KM9WW_B4C:	dc.b 3	
0003084B EC0D 0000 EB               		dc.b $EC, $D, 0, 0, $EB	
00030850 EC00 0008 0B               		dc.b $EC, 0, 0, 8, $B	
00030855 FC0A 0009 EB               		dc.b $FC, $A, 0, 9, $EB	
0003085A 04                         SME_KM9WW_B5C:	dc.b 4	
0003085B E500 0000 F4               		dc.b $E5, 0, 0, 0, $F4	
00030860 ED0E 0001 EC               		dc.b $ED, $E, 0, 1, $EC	
00030865 ED00 000D E4               		dc.b $ED, 0, 0, $D, $E4	
0003086A 0509 000E EC               		dc.b 5, 9, 0, $E, $EC	
0003086F 03                         SME_KM9WW_B71:	dc.b 3	
00030870 E400 0000 FB               		dc.b $E4, 0, 0, 0, $FB	
00030875 EC0F 0001 EB               		dc.b $EC, $F, 0, 1, $EB	
0003087A 0C08 0011 EB               		dc.b $C, 8, 0, $11, $EB	
0003087F 04                         SME_KM9WW_B81:	dc.b 4	
00030880 EC08 0000 F2               		dc.b $EC, 8, 0, 0, $F2	
00030885 F40E 0003 E2               		dc.b $F4, $E, 0, 3, $E2	
0003088A F401 000F 02               		dc.b $F4, 1, 0, $F, 2	
0003088F 0C08 0011 EA               		dc.b $C, 8, 0, $11, $EA	
00030894 03                         SME_KM9WW_B96:	dc.b 3	
00030895 EC0F 0000 EB               		dc.b $EC, $F, 0, 0, $EB	
0003089A 0400 0010 E3               		dc.b 4, 0, 0, $10, $E3	
0003089F 0C08 0011 EB               		dc.b $C, 8, 0, $11, $EB	
000308A4 04                         SME_KM9WW_BA6:	dc.b 4	
000308A5 ED08 0000 F2               		dc.b $ED, 8, 0, 0, $F2	
000308AA F50E 0003 E2               		dc.b $F5, $E, 0, 3, $E2	
000308AF F501 000F 02               		dc.b $F5, 1, 0, $F, 2	
000308B4 0D08 0011 EA               		dc.b $D, 8, 0, $11, $EA	
000308B9 03                         SME_KM9WW_BBB:	dc.b 3	
000308BA EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
000308BF F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
000308C4 F400 0013 10               		dc.b $F4, 0, 0, $13, $10	
000308C9 03                         SME_KM9WW_BCB:	dc.b 3	
000308CA EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
000308CF F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
000308D4 F400 0013 10               		dc.b $F4, 0, 0, $13, $10	
000308D9 03                         SME_KM9WW_BDB:	dc.b 3	
000308DA EC04 0000 F8               		dc.b $EC, 4, 0, 0, $F8	
000308DF F40F 0002 F0               		dc.b $F4, $F, 0, 2, $F0	
000308E4 F400 0012 10               		dc.b $F4, 0, 0, $12, $10	
000308E9 03                         SME_KM9WW_BEB:	dc.b 3	
000308EA F40E 0000 E6               		dc.b $F4, $E, 0, 0, $E6	
000308EF F400 000C 06               		dc.b $F4, 0, 0, $C, 6	
000308F4 FC09 000D 06               		dc.b $FC, 9, 0, $D, 6	
000308F9 03                         SME_KM9WW_BFB:	dc.b 3	
000308FA F40E 0000 E6               		dc.b $F4, $E, 0, 0, $E6	
000308FF F400 000C 06               		dc.b $F4, 0, 0, $C, 6	
00030904 FC09 000D 06               		dc.b $FC, 9, 0, $D, 6	
00030909 04                         SME_KM9WW_C0B:	dc.b 4	
0003090A EC0F 0000 EC               		dc.b $EC, $F, 0, 0, $EC	
0003090F 0400 0010 0C               		dc.b 4, 0, 0, $10, $C	
00030914 0C04 0011 EC               		dc.b $C, 4, 0, $11, $EC	
00030919 0C04 0013 04               		dc.b $C, 4, 0, $13, 4	
0003091E 04                         SME_KM9WW_C20:	dc.b 4	
0003091F EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030924 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030929 0404 000B F6               		dc.b 4, 4, 0, $B, $F6	
0003092E 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
00030933 04                         SME_KM9WW_C35:	dc.b 4	
00030934 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030939 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
0003093E 0404 000B F6               		dc.b 4, 4, 0, $B, $F6	
00030943 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
00030948 04                         SME_KM9WW_C4A:	dc.b 4	
00030949 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
0003094E F40C 0003 E6               		dc.b $F4, $C, 0, 3, $E6	
00030953 FC0D 0007 EE               		dc.b $FC, $D, 0, 7, $EE	
00030958 0C08 000F F6               		dc.b $C, 8, 0, $F, $F6	
0003095D 02                         SME_KM9WW_C5F:	dc.b 2	
0003095E EC0D 0000 EA               		dc.b $EC, $D, 0, 0, $EA	
00030963 FC0A 0008 F2               		dc.b $FC, $A, 0, 8, $F2	
00030968 03                         SME_KM9WW_C6A:	dc.b 3	
00030969 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
0003096E F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00030973 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
00030978 03                         SME_KM9WW_C7A:	dc.b 3	
00030979 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
0003097E F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00030983 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
00030988 03                         SME_KM9WW_C8A:	dc.b 3	
00030989 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
0003098E F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00030993 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
00030998 03                         SME_KM9WW_C9A:	dc.b 3	
00030999 E60B 0000 F5               		dc.b $E6, $B, 0, 0, $F5	
0003099E 0608 000C F5               		dc.b 6, 8, 0, $C, $F5	
000309A3 0E05 000F F5               		dc.b $E, 5, 0, $F, $F5	
000309A8 03                         SME_KM9WW_CAA:	dc.b 3	
000309A9 E60B 0000 F5               		dc.b $E6, $B, 0, 0, $F5	
000309AE 0608 000C F5               		dc.b 6, 8, 0, $C, $F5	
000309B3 0E05 000F F5               		dc.b $E, 5, 0, $F, $F5	
000309B8 03                         SME_KM9WW_CBA:	dc.b 3	
000309B9 EC04 0000 FD               		dc.b $EC, 4, 0, 0, $FD	
000309BE F40A 0002 F5               		dc.b $F4, $A, 0, 2, $F5	
000309C3 0C0C 000B ED               		dc.b $C, $C, 0, $B, $ED	
000309C8 03                         SME_KM9WW_CCA:	dc.b 3	
000309C9 EC04 0000 FD               		dc.b $EC, 4, 0, 0, $FD	
000309CE F40A 0002 F5               		dc.b $F4, $A, 0, 2, $F5	
000309D3 0C04 000B F5               		dc.b $C, 4, 0, $B, $F5	
000309D8 03                         SME_KM9WW_CDA:	dc.b 3	
000309D9 EC04 0000 FD               		dc.b $EC, 4, 0, 0, $FD	
000309DE F409 0002 F5               		dc.b $F4, 9, 0, 2, $F5	
000309E3 040D 0008 ED               		dc.b 4, $D, 0, 8, $ED	
000309E8 03                         SME_KM9WW_CEA:	dc.b 3	
000309E9 EC04 0000 FD               		dc.b $EC, 4, 0, 0, $FD	
000309EE F40A 0002 F5               		dc.b $F4, $A, 0, 2, $F5	
000309F3 0C04 000B F5               		dc.b $C, 4, 0, $B, $F5	
000309F8 04                         SME_KM9WW_CFA:	dc.b 4	
000309F9 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
000309FE EC08 0009 F0               		dc.b $EC, 8, 0, 9, $F0	
00030A03 F40C 000C F0               		dc.b $F4, $C, 0, $C, $F0	
00030A08 FC00 0010 F0               		dc.b $FC, 0, 0, $10, $F0	
00030A0D 03                         SME_KM9WW_D0F:	dc.b 3	
00030A0E ED08 0000 EE               		dc.b $ED, 8, 0, 0, $EE	
00030A13 F50D 0003 EE               		dc.b $F5, $D, 0, 3, $EE	
00030A18 0509 000B F6               		dc.b 5, 9, 0, $B, $F6	
00030A1D 04                         SME_KM9WW_D1F:	dc.b 4	
00030A1E EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030A23 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030A28 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
00030A2D 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030A32 04                         SME_KM9WW_D34:	dc.b 4	
00030A33 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030A38 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030A3D 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
00030A42 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030A47 04                         SME_KM9WW_D49:	dc.b 4	
00030A48 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030A4D F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030A52 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
00030A57 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030A5C 04                         SME_KM9WW_D5E:	dc.b 4	
00030A5D EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030A62 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030A67 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
00030A6C 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030A71 04                         SME_KM9WW_D73:	dc.b 4	
00030A72 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030A77 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030A7C 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
00030A81 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030A86 02                         SME_KM9WW_D88:	dc.b 2	
00030A87 EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
00030A8C 0C0C 000C F3               		dc.b $C, $C, 0, $C, $F3	
00030A91 04                         SME_KM9WW_D93:	dc.b 4	
00030A92 EC08 0000 F3               		dc.b $EC, 8, 0, 0, $F3	
00030A97 F40D 0003 F3               		dc.b $F4, $D, 0, 3, $F3	
00030A9C 0408 000B F3               		dc.b 4, 8, 0, $B, $F3	
00030AA1 0C0C 000E F3               		dc.b $C, $C, 0, $E, $F3	
00030AA6 04                         SME_KM9WW_DA8:	dc.b 4	
00030AA7 EC08 0000 ED               		dc.b $EC, 8, 0, 0, $ED	
00030AAC F40D 0003 ED               		dc.b $F4, $D, 0, 3, $ED	
00030AB1 0408 000B F5               		dc.b 4, 8, 0, $B, $F5	
00030AB6 0C08 000E F5               		dc.b $C, 8, 0, $E, $F5	
00030ABB 04                         SME_KM9WW_DBD:	dc.b 4	
00030ABC EE08 0000 ED               		dc.b $EE, 8, 0, 0, $ED	
00030AC1 F60C 0003 E5               		dc.b $F6, $C, 0, 3, $E5	
00030AC6 FE0C 0007 ED               		dc.b $FE, $C, 0, 7, $ED	
00030ACB 0609 000B F5               		dc.b 6, 9, 0, $B, $F5	
00030AD0 03                         SME_KM9WW_DD2:	dc.b 3	
00030AD1 EC0E 0000 ED               		dc.b $EC, $E, 0, 0, $ED	
00030AD6 0408 000C F5               		dc.b 4, 8, 0, $C, $F5	
00030ADB 0C08 000F F5               		dc.b $C, 8, 0, $F, $F5	
00030AE0 04                         SME_KM9WW_DE2:	dc.b 4	
00030AE1 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030AE6 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030AEB 0408 000B F6               		dc.b 4, 8, 0, $B, $F6	
00030AF0 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030AF5 04                         SME_KM9WW_DF7:	dc.b 4	
00030AF6 EC08 0000 F5               		dc.b $EC, 8, 0, 0, $F5	
00030AFB F40C 0003 ED               		dc.b $F4, $C, 0, 3, $ED	
00030B00 FC09 0007 F5               		dc.b $FC, 9, 0, 7, $F5	
00030B05 0C08 000D F5               		dc.b $C, 8, 0, $D, $F5	
00030B0A 03                         SME_KM9WW_E0C:	dc.b 3	
00030B0B F40A 0000 FB               		dc.b $F4, $A, 0, 0, $FB	
00030B10 FC04 0009 EB               		dc.b $FC, 4, 0, 9, $EB	
00030B15 0408 000B E3               		dc.b 4, 8, 0, $B, $E3	
00030B1A 03                         SME_KM9WW_E1C:	dc.b 3	
00030B1B F409 0000 F4               		dc.b $F4, 9, 0, 0, $F4	
00030B20 040C 0006 EC               		dc.b 4, $C, 0, 6, $EC	
00030B25 0400 000A 0C               		dc.b 4, 0, 0, $A, $C	
00030B2A 02                         SME_KM9WW_E2C:	dc.b 2	
00030B2B F409 0000 F7               		dc.b $F4, 9, 0, 0, $F7	
00030B30 040C 0006 EF               		dc.b 4, $C, 0, 6, $EF	
00030B35 03                         SME_KM9WW_E37:	dc.b 3	
00030B36 F409 0800 F3               		dc.b $F4, 9, 8, 0, $F3	
00030B3B 040C 0806 F3               		dc.b 4, $C, 8, 6, $F3	
00030B40 0400 080A EB               		dc.b 4, 0, 8, $A, $EB	
00030B45 03                         SME_KM9WW_E47:	dc.b 3	
00030B46 F40A 0800 EE               		dc.b $F4, $A, 8, 0, $EE	
00030B4B FC04 0809 06               		dc.b $FC, 4, 8, 9, 6	
00030B50 0408 080B 06               		dc.b 4, 8, 8, $B, 6	
00030B55 02                         SME_KM9WW_E57:	dc.b 2	
00030B56 F40E 0000 F2               		dc.b $F4, $E, 0, 0, $F2	
00030B5B 0400 000C EA               		dc.b 4, 0, 0, $C, $EA	
00030B60 02                         SME_KM9WW_E62:	dc.b 2	
00030B61 F409 0000 F7               		dc.b $F4, 9, 0, 0, $F7	
00030B66 040C 0006 EF               		dc.b 4, $C, 0, 6, $EF	
00030B6B 02                         SME_KM9WW_E6D:	dc.b 2	
00030B6C F40E 0800 EF               		dc.b $F4, $E, 8, 0, $EF	
00030B71 0400 080C 0F               		dc.b 4, 0, 8, $C, $F	
00030B76 03                         SME_KM9WW_E78:	dc.b 3	
00030B77 F80E 0000 EC               		dc.b $F8, $E, 0, 0, $EC	
00030B7C F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00030B81 1008 000F F4               		dc.b $10, 8, 0, $F, $F4	
00030B86 03                         SME_KM9WW_E88:	dc.b 3	
00030B87 F70E 0000 EC               		dc.b $F7, $E, 0, 0, $EC	
00030B8C F702 000C 0C               		dc.b $F7, 2, 0, $C, $C	
00030B91 0F08 000F F4               		dc.b $F, 8, 0, $F, $F4	
00030B96 01                         SME_KM9WW_E98:	dc.b 1	
00030B97 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00030B9C 03                         SME_KM9WW_E9E:	dc.b 3	
00030B9D E809 0000 F3               		dc.b $E8, 9, 0, 0, $F3	
00030BA2 F80D 0006 F3               		dc.b $F8, $D, 0, 6, $F3	
00030BA7 0809 000E F3               		dc.b 8, 9, 0, $E, $F3	
00030BAC 02                         SME_KM9WW_EAE:	dc.b 2	
00030BAD E80F 0000 F0               		dc.b $E8, $F, 0, 0, $F0	
00030BB2 0809 0010 F0               		dc.b 8, 9, 0, $10, $F0	
00030BB7 03                         SME_KM9WW_EB9:	dc.b 3	
00030BB8 E80A 0000 F2               		dc.b $E8, $A, 0, 0, $F2	
00030BBD 000C 0009 F0               		dc.b 0, $C, 0, 9, $F0	
00030BC2 0809 000D F0               		dc.b 8, 9, 0, $D, $F0	
00030BC7 03                         SME_KM9WW_EC9:	dc.b 3	
00030BC8 E80A 0000 F2               		dc.b $E8, $A, 0, 0, $F2	
00030BCD 000C 0009 F0               		dc.b 0, $C, 0, 9, $F0	
00030BD2 0809 000D F0               		dc.b 8, 9, 0, $D, $F0	
00030BD7 03                         SME_KM9WW_ED9:	dc.b 3	
00030BD8 F40E 0000 E8               		dc.b $F4, $E, 0, 0, $E8	
00030BDD F402 000C 08               		dc.b $F4, 2, 0, $C, 8	
00030BE2 0C08 000F F0               		dc.b $C, 8, 0, $F, $F0	
00030BE7 03                         SME_KM9WW_EE9:	dc.b 3	
00030BE8 F30E 0000 E8               		dc.b $F3, $E, 0, 0, $E8	
00030BED F302 000C 08               		dc.b $F3, 2, 0, $C, 8	
00030BF2 0B08 000F F0               		dc.b $B, 8, 0, $F, $F0	
00030BF7 04                         SME_KM9WW_EF9:	dc.b 4	
00030BF8 EC0E 0000 E8               		dc.b $EC, $E, 0, 0, $E8	
00030BFD FC00 000C 08               		dc.b $FC, 0, 0, $C, 8	
00030C02 040C 000D F0               		dc.b 4, $C, 0, $D, $F0	
00030C07 0C08 0011 F8               		dc.b $C, 8, 0, $11, $F8	
00030C0C                            		even
00030C0C                            		even
00030C0C                            ;Map_Metal:
00030C0C                            ;	include "_maps\Metal.asm"
00030C0C                            Map_SuperSonic:
00030C0C                            		include	_maps\SuperSonic.asm
00030C0C                            ; --------------------------------------------------------------------------------
00030C0C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00030C0C                            ; --------------------------------------------------------------------------------
00030C0C                            
00030C0C                            SME_tvPJu:	
00030C0C 0000 0000                  		dc.w SME_tvPJu_1AC-SME_tvPJu, SME_tvPJu_1AD-SME_tvPJu	
00030C10 0000 0000                  		dc.w SME_tvPJu_1BD-SME_tvPJu, SME_tvPJu_1CD-SME_tvPJu	
00030C14 0000 0000                  		dc.w SME_tvPJu_1DD-SME_tvPJu, SME_tvPJu_1ED-SME_tvPJu	
00030C18 0000 0000                  		dc.w SME_tvPJu_202-SME_tvPJu, SME_tvPJu_217-SME_tvPJu	
00030C1C 0000 0000                  		dc.w SME_tvPJu_227-SME_tvPJu, SME_tvPJu_232-SME_tvPJu	
00030C20 0000 0000                  		dc.w SME_tvPJu_247-SME_tvPJu, SME_tvPJu_25C-SME_tvPJu	
00030C24 0000 0000                  		dc.w SME_tvPJu_271-SME_tvPJu, SME_tvPJu_286-SME_tvPJu	
00030C28 0000 0000                  		dc.w SME_tvPJu_29B-SME_tvPJu, SME_tvPJu_2B0-SME_tvPJu	
00030C2C 0000 0000                  		dc.w SME_tvPJu_2C5-SME_tvPJu, SME_tvPJu_2DA-SME_tvPJu	
00030C30 0000 0000                  		dc.w SME_tvPJu_2EA-SME_tvPJu, SME_tvPJu_2FA-SME_tvPJu	
00030C34 0000 0000                  		dc.w SME_tvPJu_30A-SME_tvPJu, SME_tvPJu_31A-SME_tvPJu	
00030C38 0000 0000                  		dc.w SME_tvPJu_32F-SME_tvPJu, SME_tvPJu_344-SME_tvPJu	
00030C3C 0000 0000                  		dc.w SME_tvPJu_354-SME_tvPJu, SME_tvPJu_35F-SME_tvPJu	
00030C40 0000 0000                  		dc.w SME_tvPJu_374-SME_tvPJu, SME_tvPJu_389-SME_tvPJu	
00030C44 0000 0000                  		dc.w SME_tvPJu_39E-SME_tvPJu, SME_tvPJu_3B3-SME_tvPJu	
00030C48 0000 0000                  		dc.w SME_tvPJu_3C8-SME_tvPJu, SME_tvPJu_3DD-SME_tvPJu	
00030C4C 0000 0000                  		dc.w SME_tvPJu_3F2-SME_tvPJu, SME_tvPJu_407-SME_tvPJu	
00030C50 0000 0000                  		dc.w SME_tvPJu_41C-SME_tvPJu, SME_tvPJu_431-SME_tvPJu	
00030C54 0000 0000                  		dc.w SME_tvPJu_446-SME_tvPJu, SME_tvPJu_45B-SME_tvPJu	
00030C58 0000 0000                  		dc.w SME_tvPJu_470-SME_tvPJu, SME_tvPJu_485-SME_tvPJu	
00030C5C 0000 0000                  		dc.w SME_tvPJu_49A-SME_tvPJu, SME_tvPJu_4AF-SME_tvPJu	
00030C60 0000 0000                  		dc.w SME_tvPJu_4C4-SME_tvPJu, SME_tvPJu_4D9-SME_tvPJu	
00030C64 0000 0000                  		dc.w SME_tvPJu_4EE-SME_tvPJu, SME_tvPJu_503-SME_tvPJu	
00030C68 0000 0000                  		dc.w SME_tvPJu_518-SME_tvPJu, SME_tvPJu_52D-SME_tvPJu	
00030C6C 0000 0000                  		dc.w SME_tvPJu_542-SME_tvPJu, SME_tvPJu_557-SME_tvPJu	
00030C70 0000 0000                  		dc.w SME_tvPJu_567-SME_tvPJu, SME_tvPJu_57C-SME_tvPJu	
00030C74 0000 0000                  		dc.w SME_tvPJu_591-SME_tvPJu, SME_tvPJu_5A6-SME_tvPJu	
00030C78 0000 0000                  		dc.w SME_tvPJu_5BB-SME_tvPJu, SME_tvPJu_5CB-SME_tvPJu	
00030C7C 0000 0000                  		dc.w SME_tvPJu_5D6-SME_tvPJu, SME_tvPJu_5E1-SME_tvPJu	
00030C80 0000 0000                  		dc.w SME_tvPJu_5F1-SME_tvPJu, SME_tvPJu_606-SME_tvPJu	
00030C84 0000 0000                  		dc.w SME_tvPJu_611-SME_tvPJu, SME_tvPJu_61C-SME_tvPJu	
00030C88 0000 0000                  		dc.w SME_tvPJu_62C-SME_tvPJu, SME_tvPJu_632-SME_tvPJu	
00030C8C 0000 0000                  		dc.w SME_tvPJu_642-SME_tvPJu, SME_tvPJu_657-SME_tvPJu	
00030C90 0000 0000                  		dc.w SME_tvPJu_66C-SME_tvPJu, SME_tvPJu_681-SME_tvPJu	
00030C94 0000 0000                  		dc.w SME_tvPJu_68C-SME_tvPJu, SME_tvPJu_692-SME_tvPJu	
00030C98 0000 0000                  		dc.w SME_tvPJu_69D-SME_tvPJu, SME_tvPJu_6A3-SME_tvPJu	
00030C9C 0000 0000                  		dc.w SME_tvPJu_6AE-SME_tvPJu, SME_tvPJu_6BE-SME_tvPJu	
00030CA0 0000 0000                  		dc.w SME_tvPJu_6D3-SME_tvPJu, SME_tvPJu_6E8-SME_tvPJu	
00030CA4 0000 0000                  		dc.w SME_tvPJu_6F8-SME_tvPJu, SME_tvPJu_708-SME_tvPJu	
00030CA8 0000 0000                  		dc.w SME_tvPJu_718-SME_tvPJu, SME_tvPJu_71E-SME_tvPJu	
00030CAC 0000 0000                  		dc.w SME_tvPJu_733-SME_tvPJu, SME_tvPJu_748-SME_tvPJu	
00030CB0 0000 0000                  		dc.w SME_tvPJu_753-SME_tvPJu, SME_tvPJu_763-SME_tvPJu	
00030CB4 0000 0000                  		dc.w SME_tvPJu_773-SME_tvPJu, SME_tvPJu_77E-SME_tvPJu	
00030CB8 0000 0000                  		dc.w SME_tvPJu_793-SME_tvPJu, SME_tvPJu_7A3-SME_tvPJu	
00030CBC 0000 0000                  		dc.w SME_tvPJu_7AE-SME_tvPJu, SME_tvPJu_7B9-SME_tvPJu	
00030CC0 0000 0000                  		dc.w SME_tvPJu_7CE-SME_tvPJu, SME_tvPJu_7DE-SME_tvPJu	
00030CC4 0000 0000                  		dc.w SME_tvPJu_7E9-SME_tvPJu, SME_tvPJu_7F9-SME_tvPJu	
00030CC8 0000 0000                  		dc.w SME_tvPJu_7FF-SME_tvPJu, SME_tvPJu_80A-SME_tvPJu	
00030CCC 0000 0000                  		dc.w SME_tvPJu_81A-SME_tvPJu, SME_tvPJu_820-SME_tvPJu	
00030CD0 0000 0000                  		dc.w SME_tvPJu_82B-SME_tvPJu, SME_tvPJu_836-SME_tvPJu	
00030CD4 0000 0000                  		dc.w SME_tvPJu_846-SME_tvPJu, SME_tvPJu_84C-SME_tvPJu	
00030CD8 0000 0000                  		dc.w SME_tvPJu_857-SME_tvPJu, SME_tvPJu_867-SME_tvPJu	
00030CDC 0000 0000                  		dc.w SME_tvPJu_86D-SME_tvPJu, SME_tvPJu_878-SME_tvPJu	
00030CE0 0000 0000                  		dc.w SME_tvPJu_883-SME_tvPJu, SME_tvPJu_898-SME_tvPJu	
00030CE4 0000 0000                  		dc.w SME_tvPJu_8A8-SME_tvPJu, SME_tvPJu_8B8-SME_tvPJu	
00030CE8 0000 0000                  		dc.w SME_tvPJu_8C3-SME_tvPJu, SME_tvPJu_8D3-SME_tvPJu	
00030CEC 0000 0000                  		dc.w SME_tvPJu_8E3-SME_tvPJu, SME_tvPJu_8F3-SME_tvPJu	
00030CF0 0000 0000                  		dc.w SME_tvPJu_8FE-SME_tvPJu, SME_tvPJu_913-SME_tvPJu	
00030CF4 0000 0000                  		dc.w SME_tvPJu_923-SME_tvPJu, SME_tvPJu_933-SME_tvPJu	
00030CF8 0000 0000                  		dc.w SME_tvPJu_93E-SME_tvPJu, SME_tvPJu_94E-SME_tvPJu	
00030CFC 0000 0000                  		dc.w SME_tvPJu_954-SME_tvPJu, SME_tvPJu_969-SME_tvPJu	
00030D00 0000 0000                  		dc.w SME_tvPJu_97E-SME_tvPJu, SME_tvPJu_98E-SME_tvPJu	
00030D04 0000 0000                  		dc.w SME_tvPJu_9A3-SME_tvPJu, SME_tvPJu_9B8-SME_tvPJu	
00030D08 0000 0000                  		dc.w SME_tvPJu_9CD-SME_tvPJu, SME_tvPJu_9DD-SME_tvPJu	
00030D0C 0000 0000                  		dc.w SME_tvPJu_9F2-SME_tvPJu, SME_tvPJu_A07-SME_tvPJu	
00030D10 0000 0000                  		dc.w SME_tvPJu_A1C-SME_tvPJu, SME_tvPJu_A2C-SME_tvPJu	
00030D14 0000 0000                  		dc.w SME_tvPJu_A41-SME_tvPJu, SME_tvPJu_A51-SME_tvPJu	
00030D18 0000 0000                  		dc.w SME_tvPJu_A5C-SME_tvPJu, SME_tvPJu_A6C-SME_tvPJu	
00030D1C 0000 0000                  		dc.w SME_tvPJu_A77-SME_tvPJu, SME_tvPJu_A82-SME_tvPJu	
00030D20 0000 0000                  		dc.w SME_tvPJu_A8D-SME_tvPJu, SME_tvPJu_A98-SME_tvPJu	
00030D24 0000 0000                  		dc.w SME_tvPJu_AA3-SME_tvPJu, SME_tvPJu_AB3-SME_tvPJu	
00030D28 0000 0000                  		dc.w SME_tvPJu_AC3-SME_tvPJu, SME_tvPJu_ACE-SME_tvPJu	
00030D2C 0000 0000                  		dc.w SME_tvPJu_ADE-SME_tvPJu, SME_tvPJu_AF3-SME_tvPJu	
00030D30 0000 0000                  		dc.w SME_tvPJu_B08-SME_tvPJu, SME_tvPJu_B1D-SME_tvPJu	
00030D34 0000 0000                  		dc.w SME_tvPJu_B28-SME_tvPJu, SME_tvPJu_B42-SME_tvPJu	
00030D38 0000 0000                  		dc.w SME_tvPJu_B5C-SME_tvPJu, SME_tvPJu_B62-SME_tvPJu	
00030D3C 0000 0000                  		dc.w SME_tvPJu_B68-SME_tvPJu, SME_tvPJu_B6E-SME_tvPJu	
00030D40 0000 0000                  		dc.w SME_tvPJu_B74-SME_tvPJu, SME_tvPJu_B7A-SME_tvPJu	
00030D44 0000 0000                  		dc.w SME_tvPJu_B85-SME_tvPJu, SME_tvPJu_B90-SME_tvPJu	
00030D48 0000 0000                  		dc.w SME_tvPJu_BA5-SME_tvPJu, SME_tvPJu_BBA-SME_tvPJu	
00030D4C 0000 0000                  		dc.w SME_tvPJu_BCF-SME_tvPJu, SME_tvPJu_BDF-SME_tvPJu	
00030D50 0000 0000                  		dc.w SME_tvPJu_BF4-SME_tvPJu, SME_tvPJu_C09-SME_tvPJu	
00030D54 0000 0000                  		dc.w SME_tvPJu_C1E-SME_tvPJu, SME_tvPJu_C33-SME_tvPJu	
00030D58 0000 0000                  		dc.w SME_tvPJu_C48-SME_tvPJu, SME_tvPJu_C5D-SME_tvPJu	
00030D5C 0000 0000                  		dc.w SME_tvPJu_C6D-SME_tvPJu, SME_tvPJu_C7D-SME_tvPJu	
00030D60 0000 0000                  		dc.w SME_tvPJu_C8D-SME_tvPJu, SME_tvPJu_C9D-SME_tvPJu	
00030D64 0000 0000                  		dc.w SME_tvPJu_CAD-SME_tvPJu, SME_tvPJu_CC2-SME_tvPJu	
00030D68 0000 0000                  		dc.w SME_tvPJu_CD7-SME_tvPJu, SME_tvPJu_CEC-SME_tvPJu	
00030D6C 0000 0000                  		dc.w SME_tvPJu_D01-SME_tvPJu, SME_tvPJu_D0C-SME_tvPJu	
00030D70 0000 0000                  		dc.w SME_tvPJu_D1C-SME_tvPJu, SME_tvPJu_D2C-SME_tvPJu	
00030D74 0000 0000                  		dc.w SME_tvPJu_D3C-SME_tvPJu, SME_tvPJu_D4C-SME_tvPJu	
00030D78 0000 0000                  		dc.w SME_tvPJu_D5C-SME_tvPJu, SME_tvPJu_D6C-SME_tvPJu	
00030D7C 0000 0000                  		dc.w SME_tvPJu_D7C-SME_tvPJu, SME_tvPJu_D8C-SME_tvPJu	
00030D80 0000 0000                  		dc.w SME_tvPJu_D9C-SME_tvPJu, SME_tvPJu_DB1-SME_tvPJu	
00030D84 0000 0000                  		dc.w SME_tvPJu_DC6-SME_tvPJu, SME_tvPJu_DD6-SME_tvPJu	
00030D88 0000 0000                  		dc.w SME_tvPJu_DEB-SME_tvPJu, SME_tvPJu_E00-SME_tvPJu	
00030D8C 0000 0000                  		dc.w SME_tvPJu_E10-SME_tvPJu, SME_tvPJu_E25-SME_tvPJu	
00030D90 0000 0000                  		dc.w SME_tvPJu_E3A-SME_tvPJu, SME_tvPJu_E4A-SME_tvPJu	
00030D94 0000 0000                  		dc.w SME_tvPJu_E5F-SME_tvPJu, SME_tvPJu_E74-SME_tvPJu	
00030D98 0000 0000                  		dc.w SME_tvPJu_E89-SME_tvPJu, SME_tvPJu_E9E-SME_tvPJu	
00030D9C 0000 0000                  		dc.w SME_tvPJu_EAE-SME_tvPJu, SME_tvPJu_EBE-SME_tvPJu	
00030DA0 0000 0000                  		dc.w SME_tvPJu_ECE-SME_tvPJu, SME_tvPJu_ED9-SME_tvPJu	
00030DA4 0000 0000                  		dc.w SME_tvPJu_EE9-SME_tvPJu, SME_tvPJu_EF9-SME_tvPJu	
00030DA8 0000 0000                  		dc.w SME_tvPJu_F04-SME_tvPJu, SME_tvPJu_F0F-SME_tvPJu	
00030DAC 0000 0000                  		dc.w SME_tvPJu_F1A-SME_tvPJu, SME_tvPJu_F2A-SME_tvPJu	
00030DB0 0000 0000                  		dc.w SME_tvPJu_F3A-SME_tvPJu, SME_tvPJu_F40-SME_tvPJu	
00030DB4 0000 0000                  		dc.w SME_tvPJu_F50-SME_tvPJu, SME_tvPJu_F5B-SME_tvPJu	
00030DB8 00                         SME_tvPJu_1AC:	dc.b 0	
00030DB9 03                         SME_tvPJu_1AD:	dc.b 3	
00030DBA FC0A 0000 EC               		dc.b $FC, $A, 0, 0, $EC	
00030DBF FC06 0009 04               		dc.b $FC, 6, 0, 9, 4	
00030DC4 E40E 000F EC               		dc.b $E4, $E, 0, $F, $EC	
00030DC9 03                         SME_tvPJu_1BD:	dc.b 3	
00030DCA FD0E 0000 EC               		dc.b $FD, $E, 0, 0, $EC	
00030DCF 0501 000C 0C               		dc.b 5, 1, 0, $C, $C	
00030DD4 E50E 000E EC               		dc.b $E5, $E, 0, $E, $EC	
00030DD9 03                         SME_tvPJu_1CD:	dc.b 3	
00030DDA E60D 0000 EC               		dc.b $E6, $D, 0, 0, $EC	
00030DDF FE0A 0008 F4               		dc.b $FE, $A, 0, 8, $F4	
00030DE4 F608 0011 F4               		dc.b $F6, 8, 0, $11, $F4	
00030DE9 03                         SME_tvPJu_1DD:	dc.b 3	
00030DEA FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
00030DEF EC09 000C F4               		dc.b $EC, 9, 0, $C, $F4	
00030DF4 E40C 0012 EC               		dc.b $E4, $C, 0, $12, $EC	
00030DF9 04                         SME_tvPJu_1ED:	dc.b 4	
00030DFA FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
00030DFF FC01 000C 0E               		dc.b $FC, 1, 0, $C, $E	
00030E04 E40C 000E EC               		dc.b $E4, $C, 0, $E, $EC	
00030E09 EC09 0012 F4               		dc.b $EC, 9, 0, $12, $F4	
00030E0E 04                         SME_tvPJu_202:	dc.b 4	
00030E0F FD0E 0000 ED               		dc.b $FD, $E, 0, 0, $ED	
00030E14 0501 000C 0D               		dc.b 5, 1, 0, $C, $D	
00030E19 E50C 000E EC               		dc.b $E5, $C, 0, $E, $EC	
00030E1E ED09 0012 F4               		dc.b $ED, 9, 0, $12, $F4	
00030E23 03                         SME_tvPJu_217:	dc.b 3	
00030E24 FE0A 0000 F4               		dc.b $FE, $A, 0, 0, $F4	
00030E29 F608 0009 F4               		dc.b $F6, 8, 0, 9, $F4	
00030E2E E60D 000C EC               		dc.b $E6, $D, 0, $C, $EC	
00030E33 02                         SME_tvPJu_227:	dc.b 2	
00030E34 FC0A 0000 F4               		dc.b $FC, $A, 0, 0, $F4	
00030E39 E40E 0009 EC               		dc.b $E4, $E, 0, 9, $EC	
00030E3E 04                         SME_tvPJu_232:	dc.b 4	
00030E3F FB0B 0000 FB               		dc.b $FB, $B, 0, 0, $FB	
00030E44 E304 000C EB               		dc.b $E3, 4, 0, $C, $EB	
00030E49 EB0B 000E E3               		dc.b $EB, $B, 0, $E, $E3	
00030E4E EB09 001A FB               		dc.b $EB, 9, 0, $1A, $FB	
00030E53 04                         SME_tvPJu_247:	dc.b 4	
00030E54 FF0E 0000 FB               		dc.b $FF, $E, 0, 0, $FB	
00030E59 E704 000C EB               		dc.b $E7, 4, 0, $C, $EB	
00030E5E EF0A 000E E3               		dc.b $EF, $A, 0, $E, $E3	
00030E63 EF0D 0017 FB               		dc.b $EF, $D, 0, $17, $FB	
00030E68 04                         SME_tvPJu_25C:	dc.b 4	
00030E69 FB0A 0000 FB               		dc.b $FB, $A, 0, 0, $FB	
00030E6E EB0D 0009 E3               		dc.b $EB, $D, 0, 9, $E3	
00030E73 F300 0011 03               		dc.b $F3, 0, 0, $11, 3	
00030E78 FB04 0012 EB               		dc.b $FB, 4, 0, $12, $EB	
00030E7D 04                         SME_tvPJu_271:	dc.b 4	
00030E7E FB0E 0000 FB               		dc.b $FB, $E, 0, 0, $FB	
00030E83 EB0B 000C E3               		dc.b $EB, $B, 0, $C, $E3	
00030E88 E300 0018 EB               		dc.b $E3, 0, 0, $18, $EB	
00030E8D EB05 0019 FB               		dc.b $EB, 5, 0, $19, $FB	
00030E92 04                         SME_tvPJu_286:	dc.b 4	
00030E93 FB0B 0000 FB               		dc.b $FB, $B, 0, 0, $FB	
00030E98 E30A 000C E3               		dc.b $E3, $A, 0, $C, $E3	
00030E9D EB09 0015 FB               		dc.b $EB, 9, 0, $15, $FB	
00030EA2 FB06 001B EB               		dc.b $FB, 6, 0, $1B, $EB	
00030EA7 04                         SME_tvPJu_29B:	dc.b 4	
00030EA8 FB0F 0000 FB               		dc.b $FB, $F, 0, 0, $FB	
00030EAD EB0D 0010 E3               		dc.b $EB, $D, 0, $10, $E3	
00030EB2 F308 0018 03               		dc.b $F3, 8, 0, $18, 3	
00030EB7 FB05 001B EB               		dc.b $FB, 5, 0, $1B, $EB	
00030EBC 04                         SME_tvPJu_2B0:	dc.b 4	
00030EBD FB0A 0000 FB               		dc.b $FB, $A, 0, 0, $FB	
00030EC2 E309 0009 EB               		dc.b $E3, 9, 0, 9, $EB	
00030EC7 F30A 000F E3               		dc.b $F3, $A, 0, $F, $E3	
00030ECC F304 0018 FB               		dc.b $F3, 4, 0, $18, $FB	
00030ED1 04                         SME_tvPJu_2C5:	dc.b 4	
00030ED2 FB0A 0000 FB               		dc.b $FB, $A, 0, 0, $FB	
00030ED7 EB0D 0009 E3               		dc.b $EB, $D, 0, 9, $E3	
00030EDC F300 0011 03               		dc.b $F3, 0, 0, $11, 3	
00030EE1 FB08 0012 E3               		dc.b $FB, 8, 0, $12, $E3	
00030EE6 03                         SME_tvPJu_2DA:	dc.b 3	
00030EE7 EC09 0000 FC               		dc.b $EC, 9, 0, 0, $FC	
00030EEC FC0A 0006 FC               		dc.b $FC, $A, 0, 6, $FC	
00030EF1 F40B 000F E4               		dc.b $F4, $B, 0, $F, $E4	
00030EF6 03                         SME_tvPJu_2EA:	dc.b 3	
00030EF7 EC04 0000 05               		dc.b $EC, 4, 0, 0, 5	
00030EFC F40B 0002 FD               		dc.b $F4, $B, 0, 2, $FD	
00030F01 F40B 000E E5               		dc.b $F4, $B, 0, $E, $E5	
00030F06 03                         SME_tvPJu_2FA:	dc.b 3	
00030F07 F40A 0000 FE               		dc.b $F4, $A, 0, 0, $FE	
00030F0C F40A 0009 E6               		dc.b $F4, $A, 0, 9, $E6	
00030F11 0C04 0012 E6               		dc.b $C, 4, 0, $12, $E6	
00030F16 03                         SME_tvPJu_30A:	dc.b 3	
00030F17 F20B 0000 FC               		dc.b $F2, $B, 0, 0, $FC	
00030F1C F40A 000C E4               		dc.b $F4, $A, 0, $C, $E4	
00030F21 0C00 0015 E4               		dc.b $C, 0, 0, $15, $E4	
00030F26 04                         SME_tvPJu_31A:	dc.b 4	
00030F27 F20B 0000 FC               		dc.b $F2, $B, 0, 0, $FC	
00030F2C EA04 000C FC               		dc.b $EA, 4, 0, $C, $FC	
00030F31 F40A 000E E4               		dc.b $F4, $A, 0, $E, $E4	
00030F36 0C00 0017 E4               		dc.b $C, 0, 0, $17, $E4	
00030F3B 04                         SME_tvPJu_32F:	dc.b 4	
00030F3C F30B 0000 FD               		dc.b $F3, $B, 0, 0, $FD	
00030F41 EB04 000C 05               		dc.b $EB, 4, 0, $C, 5	
00030F46 F40A 000E E5               		dc.b $F4, $A, 0, $E, $E5	
00030F4B 0C00 0017 E5               		dc.b $C, 0, 0, $17, $E5	
00030F50 03                         SME_tvPJu_344:	dc.b 3	
00030F51 F40A 0000 FE               		dc.b $F4, $A, 0, 0, $FE	
00030F56 F40A 0009 E6               		dc.b $F4, $A, 0, 9, $E6	
00030F5B 0C04 0012 E6               		dc.b $C, 4, 0, $12, $E6	
00030F60 02                         SME_tvPJu_354:	dc.b 2	
00030F61 F40A 0000 FC               		dc.b $F4, $A, 0, 0, $FC	
00030F66 F40B 0009 E4               		dc.b $F4, $B, 0, 9, $E4	
00030F6B 04                         SME_tvPJu_35F:	dc.b 4	
00030F6C EC0E 0000 FC               		dc.b $EC, $E, 0, 0, $FC	
00030F71 EC06 000C EC               		dc.b $EC, 6, 0, $C, $EC	
00030F76 040E 0012 E4               		dc.b 4, $E, 0, $12, $E4	
00030F7B 0400 001E 04               		dc.b 4, 0, 0, $1E, 4	
00030F80 04                         SME_tvPJu_374:	dc.b 4	
00030F81 E40B 0000 00               		dc.b $E4, $B, 0, 0, 0	
00030F86 E407 000C F0               		dc.b $E4, 7, 0, $C, $F0	
00030F8B 040D 0014 E8               		dc.b 4, $D, 0, $14, $E8	
00030F90 1404 001C F0               		dc.b $14, 4, 0, $1C, $F0	
00030F95 04                         SME_tvPJu_389:	dc.b 4	
00030F96 EC0A 0000 FC               		dc.b $EC, $A, 0, 0, $FC	
00030F9B F400 0009 F4               		dc.b $F4, 0, 0, 9, $F4	
00030FA0 FC04 000A EC               		dc.b $FC, 4, 0, $A, $EC	
00030FA5 040A 000C EC               		dc.b 4, $A, 0, $C, $EC	
00030FAA 04                         SME_tvPJu_39E:	dc.b 4	
00030FAB E40B 0000 FC               		dc.b $E4, $B, 0, 0, $FC	
00030FB0 F405 000C EC               		dc.b $F4, 5, 0, $C, $EC	
00030FB5 040E 0010 E4               		dc.b 4, $E, 0, $10, $E4	
00030FBA 0400 001C 04               		dc.b 4, 0, 0, $1C, 4	
00030FBF 04                         SME_tvPJu_3B3:	dc.b 4	
00030FC0 EC0E 0000 FC               		dc.b $EC, $E, 0, 0, $FC	
00030FC5 EC06 000C EC               		dc.b $EC, 6, 0, $C, $EC	
00030FCA 040A 0012 E4               		dc.b 4, $A, 0, $12, $E4	
00030FCF 0409 001B FC               		dc.b 4, 9, 0, $1B, $FC	
00030FD4 04                         SME_tvPJu_3C8:	dc.b 4	
00030FD5 E40F 0000 FC               		dc.b $E4, $F, 0, 0, $FC	
00030FDA E403 0010 F4               		dc.b $E4, 3, 0, $10, $F4	
00030FDF FC00 0014 EC               		dc.b $FC, 0, 0, $14, $EC	
00030FE4 040E 0015 EC               		dc.b 4, $E, 0, $15, $EC	
00030FE9 04                         SME_tvPJu_3DD:	dc.b 4	
00030FEA EC0A 0000 FC               		dc.b $EC, $A, 0, 0, $FC	
00030FEF F405 0009 EC               		dc.b $F4, 5, 0, 9, $EC	
00030FF4 040E 000D E4               		dc.b 4, $E, 0, $D, $E4	
00030FF9 0400 0019 04               		dc.b 4, 0, 0, $19, 4	
00030FFE 04                         SME_tvPJu_3F2:	dc.b 4	
00030FFF EC0A 0000 FC               		dc.b $EC, $A, 0, 0, $FC	
00031004 F405 0009 EC               		dc.b $F4, 5, 0, 9, $EC	
00031009 0409 000D EC               		dc.b 4, 9, 0, $D, $EC	
0003100E 1404 0013 F4               		dc.b $14, 4, 0, $13, $F4	
00031013 04                         SME_tvPJu_407:	dc.b 4	
00031014 EB0D 0000 ED               		dc.b $EB, $D, 0, 0, $ED	
00031019 FB08 0008 F5               		dc.b $FB, 8, 0, 8, $F5	
0003101E 0309 000B E5               		dc.b 3, 9, 0, $B, $E5	
00031023 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
00031028 04                         SME_tvPJu_41C:	dc.b 4	
00031029 EB0D 0000 ED               		dc.b $EB, $D, 0, 0, $ED	
0003102E FB08 0008 F5               		dc.b $FB, 8, 0, 8, $F5	
00031033 0309 000B E5               		dc.b 3, 9, 0, $B, $E5	
00031038 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
0003103D 04                         SME_tvPJu_431:	dc.b 4	
0003103E EB0D 0000 ED               		dc.b $EB, $D, 0, 0, $ED	
00031043 FB08 0008 F5               		dc.b $FB, 8, 0, 8, $F5	
00031048 0309 000B E5               		dc.b 3, 9, 0, $B, $E5	
0003104D 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
00031052 04                         SME_tvPJu_446:	dc.b 4	
00031053 EB0D 0000 ED               		dc.b $EB, $D, 0, 0, $ED	
00031058 FB08 0008 F5               		dc.b $FB, 8, 0, 8, $F5	
0003105D 0309 000B E5               		dc.b 3, 9, 0, $B, $E5	
00031062 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
00031067 04                         SME_tvPJu_45B:	dc.b 4	
00031068 EA04 0000 F4               		dc.b $EA, 4, 0, 0, $F4	
0003106D F20D 0002 EC               		dc.b $F2, $D, 0, 2, $EC	
00031072 FA00 000A E4               		dc.b $FA, 0, 0, $A, $E4	
00031077 020E 000B EC               		dc.b 2, $E, 0, $B, $EC	
0003107C 04                         SME_tvPJu_470:	dc.b 4	
0003107D E904 0000 F4               		dc.b $E9, 4, 0, 0, $F4	
00031082 F10D 0002 EC               		dc.b $F1, $D, 0, 2, $EC	
00031087 F900 000A E4               		dc.b $F9, 0, 0, $A, $E4	
0003108C 010E 000B EC               		dc.b 1, $E, 0, $B, $EC	
00031091 04                         SME_tvPJu_485:	dc.b 4	
00031092 EA04 0000 F4               		dc.b $EA, 4, 0, 0, $F4	
00031097 F20D 0002 EC               		dc.b $F2, $D, 0, 2, $EC	
0003109C FA00 000A E4               		dc.b $FA, 0, 0, $A, $E4	
000310A1 020E 000B EC               		dc.b 2, $E, 0, $B, $EC	
000310A6 04                         SME_tvPJu_49A:	dc.b 4	
000310A7 E904 0000 F4               		dc.b $E9, 4, 0, 0, $F4	
000310AC F10D 0002 EC               		dc.b $F1, $D, 0, 2, $EC	
000310B1 F900 000A E4               		dc.b $F9, 0, 0, $A, $E4	
000310B6 010E 000B EC               		dc.b 1, $E, 0, $B, $EC	
000310BB 04                         SME_tvPJu_4AF:	dc.b 4	
000310BC F40E 0000 EB               		dc.b $F4, $E, 0, 0, $EB	
000310C1 0C04 000C EB               		dc.b $C, 4, 0, $C, $EB	
000310C6 0400 000E 0B               		dc.b 4, 0, 0, $E, $B	
000310CB 0C05 000F 03               		dc.b $C, 5, 0, $F, 3	
000310D0 04                         SME_tvPJu_4C4:	dc.b 4	
000310D1 F40E 0000 EB               		dc.b $F4, $E, 0, 0, $EB	
000310D6 0C04 000C EB               		dc.b $C, 4, 0, $C, $EB	
000310DB 0400 000E 0B               		dc.b 4, 0, 0, $E, $B	
000310E0 0C05 000F 03               		dc.b $C, 5, 0, $F, 3	
000310E5 04                         SME_tvPJu_4D9:	dc.b 4	
000310E6 F40E 0000 EB               		dc.b $F4, $E, 0, 0, $EB	
000310EB 0C04 000C EB               		dc.b $C, 4, 0, $C, $EB	
000310F0 0400 000E 0B               		dc.b 4, 0, 0, $E, $B	
000310F5 0C05 000F 03               		dc.b $C, 5, 0, $F, 3	
000310FA 04                         SME_tvPJu_4EE:	dc.b 4	
000310FB F40E 0000 EB               		dc.b $F4, $E, 0, 0, $EB	
00031100 0C04 000C EB               		dc.b $C, 4, 0, $C, $EB	
00031105 0400 000E 0B               		dc.b 4, 0, 0, $E, $B	
0003110A 0C05 000F 03               		dc.b $C, 5, 0, $F, 3	
0003110F 04                         SME_tvPJu_503:	dc.b 4	
00031110 F40C 0000 F2               		dc.b $F4, $C, 0, 0, $F2	
00031115 FC0D 0004 EA               		dc.b $FC, $D, 0, 4, $EA	
0003111A FC06 000C 0A               		dc.b $FC, 6, 0, $C, $A	
0003111F 0C05 0012 F2               		dc.b $C, 5, 0, $12, $F2	
00031124 04                         SME_tvPJu_518:	dc.b 4	
00031125 F408 0000 F1               		dc.b $F4, 8, 0, 0, $F1	
0003112A FC0D 0003 E9               		dc.b $FC, $D, 0, 3, $E9	
0003112F FC06 000B 09               		dc.b $FC, 6, 0, $B, 9	
00031134 0C05 0011 F1               		dc.b $C, 5, 0, $11, $F1	
00031139 04                         SME_tvPJu_52D:	dc.b 4	
0003113A F40C 0000 F2               		dc.b $F4, $C, 0, 0, $F2	
0003113F FC0D 0004 EA               		dc.b $FC, $D, 0, 4, $EA	
00031144 FC06 000C 0A               		dc.b $FC, 6, 0, $C, $A	
00031149 0C05 0012 F2               		dc.b $C, 5, 0, $12, $F2	
0003114E 04                         SME_tvPJu_542:	dc.b 4	
0003114F F408 0000 F1               		dc.b $F4, 8, 0, 0, $F1	
00031154 FC0D 0003 E9               		dc.b $FC, $D, 0, 3, $E9	
00031159 FC06 000B 09               		dc.b $FC, 6, 0, $B, 9	
0003115E 0C05 0011 F1               		dc.b $C, 5, 0, $11, $F1	
00031163 03                         SME_tvPJu_557:	dc.b 3	
00031164 EC08 0000 F2               		dc.b $EC, 8, 0, 0, $F2	
00031169 F40E 0003 F2               		dc.b $F4, $E, 0, 3, $F2	
0003116E 0C08 000F F2               		dc.b $C, 8, 0, $F, $F2	
00031173 04                         SME_tvPJu_567:	dc.b 4	
00031174 EA09 0000 F3               		dc.b $EA, 9, 0, 0, $F3	
00031179 FA0C 0006 F3               		dc.b $FA, $C, 0, 6, $F3	
0003117E 0208 000A F3               		dc.b 2, 8, 0, $A, $F3	
00031183 0A04 000D FB               		dc.b $A, 4, 0, $D, $FB	
00031188 04                         SME_tvPJu_57C:	dc.b 4	
00031189 F004 0000 F9               		dc.b $F0, 4, 0, 0, $F9	
0003118E F808 0002 F1               		dc.b $F8, 8, 0, 2, $F1	
00031193 000C 0005 F1               		dc.b 0, $C, 0, 5, $F1	
00031198 0804 0009 F9               		dc.b 8, 4, 0, 9, $F9	
0003119D 04                         SME_tvPJu_591:	dc.b 4	
0003119E EF08 0000 F9               		dc.b $EF, 8, 0, 0, $F9	
000311A3 F70C 0003 F1               		dc.b $F7, $C, 0, 3, $F1	
000311A8 FF08 0007 F1               		dc.b $FF, 8, 0, 7, $F1	
000311AD 070C 000A F1               		dc.b 7, $C, 0, $A, $F1	
000311B2 04                         SME_tvPJu_5A6:	dc.b 4	
000311B3 EF04 0000 F4               		dc.b $EF, 4, 0, 0, $F4	
000311B8 F708 0002 F4               		dc.b $F7, 8, 0, 2, $F4	
000311BD FF0C 0005 F4               		dc.b $FF, $C, 0, 5, $F4	
000311C2 0708 0009 F4               		dc.b 7, 8, 0, 9, $F4	
000311C7 03                         SME_tvPJu_5BB:	dc.b 3	
000311C8 EA04 0000 F9               		dc.b $EA, 4, 0, 0, $F9	
000311CD F20D 0002 F1               		dc.b $F2, $D, 0, 2, $F1	
000311D2 0209 000A F1               		dc.b 2, 9, 0, $A, $F1	
000311D7 02                         SME_tvPJu_5CB:	dc.b 2	
000311D8 EC0F 0000 F0               		dc.b $EC, $F, 0, 0, $F0	
000311DD 0C08 0010 F0               		dc.b $C, 8, 0, $10, $F0	
000311E2 02                         SME_tvPJu_5D6:	dc.b 2	
000311E3 EE0B 0000 F4               		dc.b $EE, $B, 0, 0, $F4	
000311E8 0E00 000C FC               		dc.b $E, 0, 0, $C, $FC	
000311ED 03                         SME_tvPJu_5E1:	dc.b 3	
000311EE EE04 0000 F0               		dc.b $EE, 4, 0, 0, $F0	
000311F3 F60D 0002 F0               		dc.b $F6, $D, 0, 2, $F0	
000311F8 0608 000A F0               		dc.b 6, 8, 0, $A, $F0	
000311FD 04                         SME_tvPJu_5F1:	dc.b 4	
000311FE F008 0000 F5               		dc.b $F0, 8, 0, 0, $F5	
00031203 F80C 0003 ED               		dc.b $F8, $C, 0, 3, $ED	
00031208 0008 0007 F5               		dc.b 0, 8, 0, 7, $F5	
0003120D 0804 000A F5               		dc.b 8, 4, 0, $A, $F5	
00031212 02                         SME_tvPJu_606:	dc.b 2	
00031213 EC0A 0000 F4               		dc.b $EC, $A, 0, 0, $F4	
00031218 0405 0009 FC               		dc.b 4, 5, 0, 9, $FC	
0003121D 02                         SME_tvPJu_611:	dc.b 2	
0003121E EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00031223 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00031228 03                         SME_tvPJu_61C:	dc.b 3	
00031229 E600 0000 FA               		dc.b $E6, 0, 0, 0, $FA	
0003122E EE0B 0001 F2               		dc.b $EE, $B, 0, 1, $F2	
00031233 0E08 000D F2               		dc.b $E, 8, 0, $D, $F2	
00031238 01                         SME_tvPJu_62C:	dc.b 1	
00031239 F00B 0000 F3               		dc.b $F0, $B, 0, 0, $F3	
0003123E 03                         SME_tvPJu_632:	dc.b 3	
0003123F F108 0000 EF               		dc.b $F1, 8, 0, 0, $EF	
00031244 F90D 0003 EF               		dc.b $F9, $D, 0, 3, $EF	
00031249 0904 000B F7               		dc.b 9, 4, 0, $B, $F7	
0003124E 04                         SME_tvPJu_642:	dc.b 4	
0003124F F208 0000 F8               		dc.b $F2, 8, 0, 0, $F8	
00031254 FA0C 0003 F0               		dc.b $FA, $C, 0, 3, $F0	
00031259 0208 0007 F0               		dc.b 2, 8, 0, 7, $F0	
0003125E 0A04 000A F8               		dc.b $A, 4, 0, $A, $F8	
00031263 04                         SME_tvPJu_657:	dc.b 4	
00031264 EF09 0000 F8               		dc.b $EF, 9, 0, 0, $F8	
00031269 FF0C 0006 F0               		dc.b $FF, $C, 0, 6, $F0	
0003126E 0708 000A F0               		dc.b 7, 8, 0, $A, $F0	
00031273 0F04 000D F8               		dc.b $F, 4, 0, $D, $F8	
00031278 04                         SME_tvPJu_66C:	dc.b 4	
00031279 EC09 0000 F8               		dc.b $EC, 9, 0, 0, $F8	
0003127E FC08 0006 F0               		dc.b $FC, 8, 0, 6, $F0	
00031283 040C 0009 F0               		dc.b 4, $C, 0, 9, $F0	
00031288 0C08 000D F0               		dc.b $C, 8, 0, $D, $F0	
0003128D 02                         SME_tvPJu_681:	dc.b 2	
0003128E EC0B 0000 F5               		dc.b $EC, $B, 0, 0, $F5	
00031293 0C08 000C F5               		dc.b $C, 8, 0, $C, $F5	
00031298 01                         SME_tvPJu_68C:	dc.b 1	
00031299 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
0003129E 02                         SME_tvPJu_692:	dc.b 2	
0003129F F60D 0000 F2               		dc.b $F6, $D, 0, 0, $F2	
000312A4 0608 0008 F2               		dc.b 6, 8, 0, 8, $F2	
000312A9 01                         SME_tvPJu_69D:	dc.b 1	
000312AA F30B 0000 F3               		dc.b $F3, $B, 0, 0, $F3	
000312AF 02                         SME_tvPJu_6A3:	dc.b 2	
000312B0 EB04 0000 FB               		dc.b $EB, 4, 0, 0, $FB	
000312B5 F30B 0002 F3               		dc.b $F3, $B, 0, 2, $F3	
000312BA 03                         SME_tvPJu_6AE:	dc.b 3	
000312BB EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000312C0 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
000312C5 0409 000B F8               		dc.b 4, 9, 0, $B, $F8	
000312CA 04                         SME_tvPJu_6BE:	dc.b 4	
000312CB E80A 0000 FC               		dc.b $E8, $A, 0, 0, $FC	
000312D0 F005 0009 EC               		dc.b $F0, 5, 0, 9, $EC	
000312D5 000C 000D EC               		dc.b 0, $C, 0, $D, $EC	
000312DA 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
000312DF 04                         SME_tvPJu_6D3:	dc.b 4	
000312E0 EA08 0000 FA               		dc.b $EA, 8, 0, 0, $FA	
000312E5 F20D 0003 F2               		dc.b $F2, $D, 0, 3, $F2	
000312EA 0208 000B F2               		dc.b 2, 8, 0, $B, $F2	
000312EF 0A05 000E F2               		dc.b $A, 5, 0, $E, $F2	
000312F4 03                         SME_tvPJu_6E8:	dc.b 3	
000312F5 EB09 0000 F8               		dc.b $EB, 9, 0, 0, $F8	
000312FA FB0C 0006 F0               		dc.b $FB, $C, 0, 6, $F0	
000312FF 0308 000A F8               		dc.b 3, 8, 0, $A, $F8	
00031304 03                         SME_tvPJu_6F8:	dc.b 3	
00031305 F108 0000 F3               		dc.b $F1, 8, 0, 0, $F3	
0003130A F90D 0003 F3               		dc.b $F9, $D, 0, 3, $F3	
0003130F 0908 000B F3               		dc.b 9, 8, 0, $B, $F3	
00031314 03                         SME_tvPJu_708:	dc.b 3	
00031315 EE04 0000 FB               		dc.b $EE, 4, 0, 0, $FB	
0003131A F60D 0002 F3               		dc.b $F6, $D, 0, 2, $F3	
0003131F 0604 000A FB               		dc.b 6, 4, 0, $A, $FB	
00031324 01                         SME_tvPJu_718:	dc.b 1	
00031325 F20F 0000 EE               		dc.b $F2, $F, 0, 0, $EE	
0003132A 04                         SME_tvPJu_71E:	dc.b 4	
0003132B EA00 0000 02               		dc.b $EA, 0, 0, 0, 2	
00031330 F20D 0001 F2               		dc.b $F2, $D, 0, 1, $F2	
00031335 FA00 0009 EA               		dc.b $FA, 0, 0, 9, $EA	
0003133A 020D 000A EA               		dc.b 2, $D, 0, $A, $EA	
0003133F 04                         SME_tvPJu_733:	dc.b 4	
00031340 EC04 0000 FB               		dc.b $EC, 4, 0, 0, $FB	
00031345 F408 0002 F3               		dc.b $F4, 8, 0, 2, $F3	
0003134A FC0A 0005 EB               		dc.b $FC, $A, 0, 5, $EB	
0003134F FC05 000E 03               		dc.b $FC, 5, 0, $E, 3	
00031354 02                         SME_tvPJu_748:	dc.b 2	
00031355 ED04 0000 FF               		dc.b $ED, 4, 0, 0, $FF	
0003135A F50E 0002 EF               		dc.b $F5, $E, 0, 2, $EF	
0003135F 03                         SME_tvPJu_753:	dc.b 3	
00031360 EF04 0000 FA               		dc.b $EF, 4, 0, 0, $FA	
00031365 F70D 0002 F2               		dc.b $F7, $D, 0, 2, $F2	
0003136A 0704 000A FA               		dc.b 7, 4, 0, $A, $FA	
0003136F 03                         SME_tvPJu_763:	dc.b 3	
00031370 ED00 0000 00               		dc.b $ED, 0, 0, 0, 0	
00031375 F50A 0001 F8               		dc.b $F5, $A, 0, 1, $F8	
0003137A FD04 000A E8               		dc.b $FD, 4, 0, $A, $E8	
0003137F 02                         SME_tvPJu_773:	dc.b 2	
00031380 F00F 0000 EF               		dc.b $F0, $F, 0, 0, $EF	
00031385 F800 0010 0F               		dc.b $F8, 0, 0, $10, $F	
0003138A 04                         SME_tvPJu_77E:	dc.b 4	
0003138B EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00031390 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00031395 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
0003139A 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
0003139F 03                         SME_tvPJu_793:	dc.b 3	
000313A0 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
000313A5 F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
000313AA 0409 000B F7               		dc.b 4, 9, 0, $B, $F7	
000313AF 02                         SME_tvPJu_7A3:	dc.b 2	
000313B0 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
000313B5 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
000313BA 02                         SME_tvPJu_7AE:	dc.b 2	
000313BB EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
000313C0 0C08 000C F3               		dc.b $C, 8, 0, $C, $F3	
000313C5 04                         SME_tvPJu_7B9:	dc.b 4	
000313C6 EC08 0000 F7               		dc.b $EC, 8, 0, 0, $F7	
000313CB F40C 0003 EF               		dc.b $F4, $C, 0, 3, $EF	
000313D0 FC08 0007 F7               		dc.b $FC, 8, 0, 7, $F7	
000313D5 040D 000A EF               		dc.b 4, $D, 0, $A, $EF	
000313DA 03                         SME_tvPJu_7CE:	dc.b 3	
000313DB EC0A 0000 F6               		dc.b $EC, $A, 0, 0, $F6	
000313E0 040C 0009 EE               		dc.b 4, $C, 0, 9, $EE	
000313E5 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
000313EA 02                         SME_tvPJu_7DE:	dc.b 2	
000313EB EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
000313F0 0C08 000C F3               		dc.b $C, 8, 0, $C, $F3	
000313F5 03                         SME_tvPJu_7E9:	dc.b 3	
000313F6 F50A 0000 EC               		dc.b $F5, $A, 0, 0, $EC	
000313FB F509 0009 04               		dc.b $F5, 9, 0, 9, 4	
00031400 0500 000F 14               		dc.b 5, 0, 0, $F, $14	
00031405 01                         SME_tvPJu_7F9:	dc.b 1	
00031406 F40E 0000 FC               		dc.b $F4, $E, 0, 0, $FC	
0003140B 02                         SME_tvPJu_7FF:	dc.b 2	
0003140C F40E 0000 E2               		dc.b $F4, $E, 0, 0, $E2	
00031411 F402 000C 02               		dc.b $F4, 2, 0, $C, 2	
00031416 03                         SME_tvPJu_80A:	dc.b 3	
00031417 F505 0000 E5               		dc.b $F5, 5, 0, 0, $E5	
0003141C F50E 0004 F5               		dc.b $F5, $E, 0, 4, $F5	
00031421 0500 0010 E5               		dc.b 5, 0, 0, $10, $E5	
00031426 01                         SME_tvPJu_81A:	dc.b 1	
00031427 F40E 0000 F6               		dc.b $F4, $E, 0, 0, $F6	
0003142C 02                         SME_tvPJu_820:	dc.b 2	
0003142D FC00 0000 DA               		dc.b $FC, 0, 0, 0, $DA	
00031432 F40E 0001 E2               		dc.b $F4, $E, 0, 1, $E2	
00031437 02                         SME_tvPJu_82B:	dc.b 2	
00031438 F00A 0000 EC               		dc.b $F0, $A, 0, 0, $EC	
0003143D F806 0009 04               		dc.b $F8, 6, 0, 9, 4	
00031442 03                         SME_tvPJu_836:	dc.b 3	
00031443 E80A 0000 F5               		dc.b $E8, $A, 0, 0, $F5	
00031448 0005 0009 F5               		dc.b 0, 5, 0, 9, $F5	
0003144D 1008 000D F5               		dc.b $10, 8, 0, $D, $F5	
00031452 01                         SME_tvPJu_846:	dc.b 1	
00031453 F10B 0000 F3               		dc.b $F1, $B, 0, 0, $F3	
00031458 02                         SME_tvPJu_84C:	dc.b 2	
00031459 EB0B 0000 F4               		dc.b $EB, $B, 0, 0, $F4	
0003145E 0B08 000C F4               		dc.b $B, 8, 0, $C, $F4	
00031463 03                         SME_tvPJu_857:	dc.b 3	
00031464 E808 0000 F4               		dc.b $E8, 8, 0, 0, $F4	
00031469 F004 0003 F4               		dc.b $F0, 4, 0, 3, $F4	
0003146E F80B 0005 F4               		dc.b $F8, $B, 0, 5, $F4	
00031473 01                         SME_tvPJu_867:	dc.b 1	
00031474 F00B 0000 F2               		dc.b $F0, $B, 0, 0, $F2	
00031479 02                         SME_tvPJu_86D:	dc.b 2	
0003147A E800 0000 FA               		dc.b $E8, 0, 0, 0, $FA	
0003147F F00B 0001 F2               		dc.b $F0, $B, 0, 1, $F2	
00031484 02                         SME_tvPJu_878:	dc.b 2	
00031485 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
0003148A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0003148F 04                         SME_tvPJu_883:	dc.b 4	
00031490 EC04 0000 F0               		dc.b $EC, 4, 0, 0, $F0	
00031495 F40C 0002 F0               		dc.b $F4, $C, 0, 2, $F0	
0003149A FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
0003149F 0C04 000C F8               		dc.b $C, 4, 0, $C, $F8	
000314A4 03                         SME_tvPJu_898:	dc.b 3	
000314A5 EC00 0000 FB               		dc.b $EC, 0, 0, 0, $FB	
000314AA F40D 0001 EB               		dc.b $F4, $D, 0, 1, $EB	
000314AF 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
000314B4 03                         SME_tvPJu_8A8:	dc.b 3	
000314B5 F000 0000 00               		dc.b $F0, 0, 0, 0, 0	
000314BA F80D 0001 F0               		dc.b $F8, $D, 0, 1, $F0	
000314BF 0808 0009 F0               		dc.b 8, 8, 0, 9, $F0	
000314C4 02                         SME_tvPJu_8B8:	dc.b 2	
000314C5 F806 0000 EC               		dc.b $F8, 6, 0, 0, $EC	
000314CA F00B 0006 FC               		dc.b $F0, $B, 0, 6, $FC	
000314CF 03                         SME_tvPJu_8C3:	dc.b 3	
000314D0 F000 0000 FC               		dc.b $F0, 0, 0, 0, $FC	
000314D5 F80A 0001 EC               		dc.b $F8, $A, 0, 1, $EC	
000314DA F805 000A 04               		dc.b $F8, 5, 0, $A, 4	
000314DF 03                         SME_tvPJu_8D3:	dc.b 3	
000314E0 F004 0000 F8               		dc.b $F0, 4, 0, 0, $F8	
000314E5 F809 0002 F0               		dc.b $F8, 9, 0, 2, $F0	
000314EA 080C 0008 F0               		dc.b 8, $C, 0, 8, $F0	
000314EF 03                         SME_tvPJu_8E3:	dc.b 3	
000314F0 F009 0000 F8               		dc.b $F0, 9, 0, 0, $F8	
000314F5 000C 0006 F0               		dc.b 0, $C, 0, 6, $F0	
000314FA 0804 000A 00               		dc.b 8, 4, 0, $A, 0	
000314FF 02                         SME_tvPJu_8F3:	dc.b 2	
00031500 F000 0000 00               		dc.b $F0, 0, 0, 0, 0	
00031505 F80E 0001 F0               		dc.b $F8, $E, 0, 1, $F0	
0003150A 04                         SME_tvPJu_8FE:	dc.b 4	
0003150B F004 0000 F4               		dc.b $F0, 4, 0, 0, $F4	
00031510 F800 0002 EC               		dc.b $F8, 0, 0, 2, $EC	
00031515 0800 0003 EC               		dc.b 8, 0, 0, 3, $EC	
0003151A F80E 0004 F4               		dc.b $F8, $E, 0, 4, $F4	
0003151F 03                         SME_tvPJu_913:	dc.b 3	
00031520 F004 0000 FC               		dc.b $F0, 4, 0, 0, $FC	
00031525 F80E 0002 EC               		dc.b $F8, $E, 0, 2, $EC	
0003152A F802 000E 0C               		dc.b $F8, 2, 0, $E, $C	
0003152F 03                         SME_tvPJu_923:	dc.b 3	
00031530 F004 0000 F8               		dc.b $F0, 4, 0, 0, $F8	
00031535 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0	
0003153A 0808 000A F8               		dc.b 8, 8, 0, $A, $F8	
0003153F 02                         SME_tvPJu_933:	dc.b 2	
00031540 F000 0000 F4               		dc.b $F0, 0, 0, 0, $F4	
00031545 F80A 0001 F4               		dc.b $F8, $A, 0, 1, $F4	
0003154A 03                         SME_tvPJu_93E:	dc.b 3	
0003154B F008 0000 F0               		dc.b $F0, 8, 0, 0, $F0	
00031550 F80D 0003 F0               		dc.b $F8, $D, 0, 3, $F0	
00031555 0808 000B F0               		dc.b 8, 8, 0, $B, $F0	
0003155A 01                         SME_tvPJu_94E:	dc.b 1	
0003155B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
00031560 04                         SME_tvPJu_954:	dc.b 4	
00031561 E70C 0000 EE               		dc.b $E7, $C, 0, 0, $EE	
00031566 EF08 0004 EE               		dc.b $EF, 8, 0, 4, $EE	
0003156B F70D 0007 EE               		dc.b $F7, $D, 0, 7, $EE	
00031570 070D 000F F6               		dc.b 7, $D, 0, $F, $F6	
00031575 04                         SME_tvPJu_969:	dc.b 4	
00031576 E604 0000 E9               		dc.b $E6, 4, 0, 0, $E9	
0003157B EE0E 0002 E1               		dc.b $EE, $E, 0, 2, $E1	
00031580 F606 000E 01               		dc.b $F6, 6, 0, $E, 1	
00031585 0608 0014 E9               		dc.b 6, 8, 0, $14, $E9	
0003158A 03                         SME_tvPJu_97E:	dc.b 3	
0003158B F108 0000 E6               		dc.b $F1, 8, 0, 0, $E6	
00031590 F90E 0003 E6               		dc.b $F9, $E, 0, 3, $E6	
00031595 E907 000F 06               		dc.b $E9, 7, 0, $F, 6	
0003159A 04                         SME_tvPJu_98E:	dc.b 4	
0003159B EE08 0000 F5               		dc.b $EE, 8, 0, 0, $F5	
000315A0 F604 0003 FD               		dc.b $F6, 4, 0, 3, $FD	
000315A5 0601 0005 E5               		dc.b 6, 1, 0, 5, $E5	
000315AA FE0F 0007 ED               		dc.b $FE, $F, 0, 7, $ED	
000315AF 04                         SME_tvPJu_9A3:	dc.b 4	
000315B0 120C 1800 F1               		dc.b $12, $C, $18, 0, $F1	
000315B5 0A08 1804 F9               		dc.b $A, 8, $18, 4, $F9	
000315BA FA0D 1807 F1               		dc.b $FA, $D, $18, 7, $F1	
000315BF EA0D 180F E9               		dc.b $EA, $D, $18, $F, $E9	
000315C4 04                         SME_tvPJu_9B8:	dc.b 4	
000315C5 1304 1800 04               		dc.b $13, 4, $18, 0, 4	
000315CA FB0E 1802 FC               		dc.b $FB, $E, $18, 2, $FC	
000315CF F306 180E EC               		dc.b $F3, 6, $18, $E, $EC	
000315D4 F308 1814 FC               		dc.b $F3, 8, $18, $14, $FC	
000315D9 03                         SME_tvPJu_9CD:	dc.b 3	
000315DA 0708 1800 01               		dc.b 7, 8, $18, 0, 1	
000315DF EF0E 1803 F9               		dc.b $EF, $E, $18, 3, $F9	
000315E4 F707 180F E9               		dc.b $F7, 7, $18, $F, $E9	
000315E9 04                         SME_tvPJu_9DD:	dc.b 4	
000315EA 0C08 1800 F3               		dc.b $C, 8, $18, 0, $F3	
000315EF 0404 1803 F3               		dc.b 4, 4, $18, 3, $F3	
000315F4 EC01 1805 13               		dc.b $EC, 1, $18, 5, $13	
000315F9 E40F 1807 F3               		dc.b $E4, $F, $18, 7, $F3	
000315FE 04                         SME_tvPJu_9F2:	dc.b 4	
000315FF E80E 0000 EF               		dc.b $E8, $E, 0, 0, $EF	
00031604 E800 000C 0F               		dc.b $E8, 0, 0, $C, $F	
00031609 0004 000D F7               		dc.b 0, 4, 0, $D, $F7	
0003160E 0809 000F EF               		dc.b 8, 9, 0, $F, $EF	
00031613 04                         SME_tvPJu_A07:	dc.b 4	
00031614 E80C 0000 EE               		dc.b $E8, $C, 0, 0, $EE	
00031619 F00D 0004 EE               		dc.b $F0, $D, 0, 4, $EE	
0003161E 0005 000C F6               		dc.b 0, 5, 0, $C, $F6	
00031623 1008 0010 EE               		dc.b $10, 8, 0, $10, $EE	
00031628 03                         SME_tvPJu_A1C:	dc.b 3	
00031629 E808 0000 F4               		dc.b $E8, 8, 0, 0, $F4	
0003162E F00C 0003 EC               		dc.b $F0, $C, 0, 3, $EC	
00031633 F80B 0007 F4               		dc.b $F8, $B, 0, 7, $F4	
00031638 04                         SME_tvPJu_A2C:	dc.b 4	
00031639 E800 0000 EA               		dc.b $E8, 0, 0, 0, $EA	
0003163E E80D 0001 F2               		dc.b $E8, $D, 0, 1, $F2	
00031643 F808 0009 F2               		dc.b $F8, 8, 0, 9, $F2	
00031648 0006 000C FA               		dc.b 0, 6, 0, $C, $FA	
0003164D 03                         SME_tvPJu_A41:	dc.b 3	
0003164E E80E 0000 ED               		dc.b $E8, $E, 0, 0, $ED	
00031653 0009 000C F5               		dc.b 0, 9, 0, $C, $F5	
00031658 1004 0012 F5               		dc.b $10, 4, 0, $12, $F5	
0003165D 02                         SME_tvPJu_A51:	dc.b 2	
0003165E E80E 0000 EF               		dc.b $E8, $E, 0, 0, $EF	
00031663 0006 000C F7               		dc.b 0, 6, 0, $C, $F7	
00031668 03                         SME_tvPJu_A5C:	dc.b 3	
00031669 F808 0000 FC               		dc.b $F8, 8, 0, 0, $FC	
0003166E 000D 0003 F4               		dc.b 0, $D, 0, 3, $F4	
00031673 1008 000B F4               		dc.b $10, 8, 0, $B, $F4	
00031678 02                         SME_tvPJu_A6C:	dc.b 2	
00031679 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
0003167E 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00031683 02                         SME_tvPJu_A77:	dc.b 2	
00031684 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00031689 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
0003168E 02                         SME_tvPJu_A82:	dc.b 2	
0003168F F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00031694 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00031699 02                         SME_tvPJu_A8D:	dc.b 2	
0003169A F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
0003169F 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
000316A4 02                         SME_tvPJu_A98:	dc.b 2	
000316A5 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
000316AA 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
000316AF 03                         SME_tvPJu_AA3:	dc.b 3	
000316B0 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC	
000316B5 F002 000C 0C               		dc.b $F0, 2, 0, $C, $C	
000316BA 0808 000F F4               		dc.b 8, 8, 0, $F, $F4	
000316BF 03                         SME_tvPJu_AB3:	dc.b 3	
000316C0 EF0E 0000 EC               		dc.b $EF, $E, 0, 0, $EC	
000316C5 EF02 000C 0C               		dc.b $EF, 2, 0, $C, $C	
000316CA 0708 000F F4               		dc.b 7, 8, 0, $F, $F4	
000316CF 02                         SME_tvPJu_AC3:	dc.b 2	
000316D0 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
000316D5 0805 000C F9               		dc.b 8, 5, 0, $C, $F9	
000316DA 03                         SME_tvPJu_ACE:	dc.b 3	
000316DB F10C 0000 E9               		dc.b $F1, $C, 0, 0, $E9	
000316E0 F905 0004 E9               		dc.b $F9, 5, 0, 4, $E9	
000316E5 F90A 0008 F9               		dc.b $F9, $A, 0, 8, $F9	
000316EA 04                         SME_tvPJu_ADE:	dc.b 4	
000316EB E809 0000 F0               		dc.b $E8, 9, 0, 0, $F0	
000316F0 F80C 0006 F0               		dc.b $F8, $C, 0, 6, $F0	
000316F5 0008 000A F0               		dc.b 0, 8, 0, $A, $F0	
000316FA 0809 000D F8               		dc.b 8, 9, 0, $D, $F8	
000316FF 04                         SME_tvPJu_AF3:	dc.b 4	
00031700 E609 0000 F0               		dc.b $E6, 9, 0, 0, $F0	
00031705 F60C 0006 F0               		dc.b $F6, $C, 0, 6, $F0	
0003170A FE08 000A F0               		dc.b $FE, 8, 0, $A, $F0	
0003170F 060D 000D F8               		dc.b 6, $D, 0, $D, $F8	
00031714 04                         SME_tvPJu_B08:	dc.b 4	
00031715 E808 0000 F0               		dc.b $E8, 8, 0, 0, $F0	
0003171A F00E 0003 F0               		dc.b $F0, $E, 0, 3, $F0	
0003171F 0000 000F 10               		dc.b 0, 0, 0, $F, $10	
00031724 0804 0010 00               		dc.b 8, 4, 0, $10, 0	
00031729 02                         SME_tvPJu_B1D:	dc.b 2	
0003172A E808 0000 F0               		dc.b $E8, 8, 0, 0, $F0	
0003172F F00E 0003 F0               		dc.b $F0, $E, 0, 3, $F0	
00031734 05                         SME_tvPJu_B28:	dc.b 5	
00031735 E80D 0000 F2               		dc.b $E8, $D, 0, 0, $F2	
0003173A E804 0008 F7               		dc.b $E8, 4, 0, 8, $F7	
0003173F F009 000A F7               		dc.b $F0, 9, 0, $A, $F7	
00031744 0005 0010 F7               		dc.b 0, 5, 0, $10, $F7	
00031749 1008 0014 F7               		dc.b $10, 8, 0, $14, $F7	
0003174E 05                         SME_tvPJu_B42:	dc.b 5	
0003174F E808 0000 F6               		dc.b $E8, 8, 0, 0, $F6	
00031754 E804 0003 F7               		dc.b $E8, 4, 0, 3, $F7	
00031759 F009 0005 F7               		dc.b $F0, 9, 0, 5, $F7	
0003175E 0005 000B F7               		dc.b 0, 5, 0, $B, $F7	
00031763 1008 000F F7               		dc.b $10, 8, 0, $F, $F7	
00031768 01                         SME_tvPJu_B5C:	dc.b 1	
00031769 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0003176E 01                         SME_tvPJu_B62:	dc.b 1	
0003176F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00031774 01                         SME_tvPJu_B68:	dc.b 1	
00031775 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0003177A 01                         SME_tvPJu_B6E:	dc.b 1	
0003177B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00031780 01                         SME_tvPJu_B74:	dc.b 1	
00031781 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00031786 02                         SME_tvPJu_B7A:	dc.b 2	
00031787 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
0003178C 0400 0010 10               		dc.b 4, 0, 0, $10, $10	
00031791 02                         SME_tvPJu_B85:	dc.b 2	
00031792 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00031797 0400 0010 10               		dc.b 4, 0, 0, $10, $10	
0003179C 04                         SME_tvPJu_B90:	dc.b 4	
0003179D EB0A 0000 F5               		dc.b $EB, $A, 0, 0, $F5	
000317A2 F301 0009 ED               		dc.b $F3, 1, 0, 9, $ED	
000317A7 030C 000B F5               		dc.b 3, $C, 0, $B, $F5	
000317AC 0B08 000F FD               		dc.b $B, 8, 0, $F, $FD	
000317B1 04                         SME_tvPJu_BA5:	dc.b 4	
000317B2 EB0A 0000 F6               		dc.b $EB, $A, 0, 0, $F6	
000317B7 F301 0009 EE               		dc.b $F3, 1, 0, 9, $EE	
000317BC 030C 000B F6               		dc.b 3, $C, 0, $B, $F6	
000317C1 0B08 000F FE               		dc.b $B, 8, 0, $F, $FE	
000317C6 04                         SME_tvPJu_BBA:	dc.b 4	
000317C7 EA08 0000 F9               		dc.b $EA, 8, 0, 0, $F9	
000317CC F20D 0003 F1               		dc.b $F2, $D, 0, 3, $F1	
000317D1 0208 000B F9               		dc.b 2, 8, 0, $B, $F9	
000317D6 0A04 000E 01               		dc.b $A, 4, 0, $E, 1	
000317DB 03                         SME_tvPJu_BCF:	dc.b 3	
000317DC EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
000317E1 F40E 0003 EF               		dc.b $F4, $E, 0, 3, $EF	
000317E6 0C08 000F F7               		dc.b $C, 8, 0, $F, $F7	
000317EB 04                         SME_tvPJu_BDF:	dc.b 4	
000317EC F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
000317F1 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
000317F6 E50D 0008 E8               		dc.b $E5, $D, 0, 8, $E8	
000317FB F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031800 04                         SME_tvPJu_BF4:	dc.b 4	
00031801 F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
00031806 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
0003180B E50D 0008 E8               		dc.b $E5, $D, 0, 8, $E8	
00031810 F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031815 04                         SME_tvPJu_C09:	dc.b 4	
00031816 F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
0003181B 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
00031820 E50D 0008 EA               		dc.b $E5, $D, 0, 8, $EA	
00031825 F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
0003182A 04                         SME_tvPJu_C1E:	dc.b 4	
0003182B F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
00031830 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
00031835 E50D 0008 E8               		dc.b $E5, $D, 0, 8, $E8	
0003183A F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
0003183F 04                         SME_tvPJu_C33:	dc.b 4	
00031840 F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
00031845 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
0003184A E50D 0008 E8               		dc.b $E5, $D, 0, 8, $E8	
0003184F F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031854 04                         SME_tvPJu_C48:	dc.b 4	
00031855 F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
0003185A 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
0003185F E50D 0008 EA               		dc.b $E5, $D, 0, 8, $EA	
00031864 F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031869 03                         SME_tvPJu_C5D:	dc.b 3	
0003186A EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
0003186F F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
00031874 F400 0013 10               		dc.b $F4, 0, 0, $13, $10	
00031879 03                         SME_tvPJu_C6D:	dc.b 3	
0003187A EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
0003187F F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
00031884 F400 0013 10               		dc.b $F4, 0, 0, $13, $10	
00031889 03                         SME_tvPJu_C7D:	dc.b 3	
0003188A EC04 0000 F8               		dc.b $EC, 4, 0, 0, $F8	
0003188F F40F 0002 F0               		dc.b $F4, $F, 0, 2, $F0	
00031894 F400 0012 10               		dc.b $F4, 0, 0, $12, $10	
00031899 03                         SME_tvPJu_C8D:	dc.b 3	
0003189A F40E 0000 E6               		dc.b $F4, $E, 0, 0, $E6	
0003189F F400 000C 06               		dc.b $F4, 0, 0, $C, 6	
000318A4 FC09 000D 06               		dc.b $FC, 9, 0, $D, 6	
000318A9 03                         SME_tvPJu_C9D:	dc.b 3	
000318AA F40E 0000 E6               		dc.b $F4, $E, 0, 0, $E6	
000318AF F400 000C 06               		dc.b $F4, 0, 0, $C, 6	
000318B4 FC09 000D 06               		dc.b $FC, 9, 0, $D, 6	
000318B9 04                         SME_tvPJu_CAD:	dc.b 4	
000318BA EC0F 0000 EC               		dc.b $EC, $F, 0, 0, $EC	
000318BF 0400 0010 0C               		dc.b 4, 0, 0, $10, $C	
000318C4 0C04 0011 EC               		dc.b $C, 4, 0, $11, $EC	
000318C9 0C04 0013 04               		dc.b $C, 4, 0, $13, 4	
000318CE 04                         SME_tvPJu_CC2:	dc.b 4	
000318CF EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
000318D4 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
000318D9 0404 000B F6               		dc.b 4, 4, 0, $B, $F6	
000318DE 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
000318E3 04                         SME_tvPJu_CD7:	dc.b 4	
000318E4 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
000318E9 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
000318EE 0404 000B F6               		dc.b 4, 4, 0, $B, $F6	
000318F3 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
000318F8 04                         SME_tvPJu_CEC:	dc.b 4	
000318F9 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
000318FE F40C 0003 E6               		dc.b $F4, $C, 0, 3, $E6	
00031903 FC0D 0007 EE               		dc.b $FC, $D, 0, 7, $EE	
00031908 0C08 000F F6               		dc.b $C, 8, 0, $F, $F6	
0003190D 02                         SME_tvPJu_D01:	dc.b 2	
0003190E EC0D 0000 EA               		dc.b $EC, $D, 0, 0, $EA	
00031913 FC0A 0008 F2               		dc.b $FC, $A, 0, 8, $F2	
00031918 03                         SME_tvPJu_D0C:	dc.b 3	
00031919 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
0003191E F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00031923 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
00031928 03                         SME_tvPJu_D1C:	dc.b 3	
00031929 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
0003192E F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00031933 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
00031938 03                         SME_tvPJu_D2C:	dc.b 3	
00031939 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
0003193E F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00031943 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
00031948 03                         SME_tvPJu_D3C:	dc.b 3	
00031949 E60B 0000 F5               		dc.b $E6, $B, 0, 0, $F5	
0003194E 0608 000C F5               		dc.b 6, 8, 0, $C, $F5	
00031953 0E05 000F F5               		dc.b $E, 5, 0, $F, $F5	
00031958 03                         SME_tvPJu_D4C:	dc.b 3	
00031959 E60B 0000 F5               		dc.b $E6, $B, 0, 0, $F5	
0003195E 0608 000C F5               		dc.b 6, 8, 0, $C, $F5	
00031963 0E05 000F F5               		dc.b $E, 5, 0, $F, $F5	
00031968 03                         SME_tvPJu_D5C:	dc.b 3	
00031969 E408 0000 ED               		dc.b $E4, 8, 0, 0, $ED	
0003196E EC0F 0003 ED               		dc.b $EC, $F, 0, 3, $ED	
00031973 0C0C 0013 ED               		dc.b $C, $C, 0, $13, $ED	
00031978 03                         SME_tvPJu_D6C:	dc.b 3	
00031979 E508 0000 ED               		dc.b $E5, 8, 0, 0, $ED	
0003197E ED0F 0003 ED               		dc.b $ED, $F, 0, 3, $ED	
00031983 0D08 0013 ED               		dc.b $D, 8, 0, $13, $ED	
00031988 03                         SME_tvPJu_D7C:	dc.b 3	
00031989 E400 0000 FD               		dc.b $E4, 0, 0, 0, $FD	
0003198E EC0F 0001 ED               		dc.b $EC, $F, 0, 1, $ED	
00031993 0C0C 0011 ED               		dc.b $C, $C, 0, $11, $ED	
00031998 03                         SME_tvPJu_D8C:	dc.b 3	
00031999 E508 0000 ED               		dc.b $E5, 8, 0, 0, $ED	
0003199E ED0F 0003 ED               		dc.b $ED, $F, 0, 3, $ED	
000319A3 0D08 0013 ED               		dc.b $D, 8, 0, $13, $ED	
000319A8 04                         SME_tvPJu_D9C:	dc.b 4	
000319A9 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
000319AE E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
000319B3 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
000319B8 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
000319BD 04                         SME_tvPJu_DB1:	dc.b 4	
000319BE FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
000319C3 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
000319C8 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
000319CD FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
000319D2 03                         SME_tvPJu_DC6:	dc.b 3	
000319D3 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
000319D8 E40E 0009 E8               		dc.b $E4, $E, 0, 9, $E8	
000319DD FC00 0011 F0               		dc.b $FC, 0, 0, $11, $F0	
000319E2 04                         SME_tvPJu_DD6:	dc.b 4	
000319E3 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
000319E8 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
000319ED F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
000319F2 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
000319F7 04                         SME_tvPJu_DEB:	dc.b 4	
000319F8 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
000319FD E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031A02 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031A07 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031A0C 03                         SME_tvPJu_E00:	dc.b 3	
00031A0D FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031A12 E40E 0009 E8               		dc.b $E4, $E, 0, 9, $E8	
00031A17 FC00 0011 F0               		dc.b $FC, 0, 0, $11, $F0	
00031A1C 04                         SME_tvPJu_E10:	dc.b 4	
00031A1D FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031A22 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031A27 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031A2C FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031A31 04                         SME_tvPJu_E25:	dc.b 4	
00031A32 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031A37 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031A3C F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031A41 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031A46 03                         SME_tvPJu_E3A:	dc.b 3	
00031A47 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031A4C E40E 0009 E8               		dc.b $E4, $E, 0, 9, $E8	
00031A51 FC00 0011 F0               		dc.b $FC, 0, 0, $11, $F0	
00031A56 04                         SME_tvPJu_E4A:	dc.b 4	
00031A57 EC08 0000 ED               		dc.b $EC, 8, 0, 0, $ED	
00031A5C F40D 0003 ED               		dc.b $F4, $D, 0, 3, $ED	
00031A61 0408 000B F5               		dc.b 4, 8, 0, $B, $F5	
00031A66 0C08 000E F5               		dc.b $C, 8, 0, $E, $F5	
00031A6B 04                         SME_tvPJu_E5F:	dc.b 4	
00031A6C EE08 0000 ED               		dc.b $EE, 8, 0, 0, $ED	
00031A71 F60C 0003 E5               		dc.b $F6, $C, 0, 3, $E5	
00031A76 FE0C 0007 ED               		dc.b $FE, $C, 0, 7, $ED	
00031A7B 0609 000B F5               		dc.b 6, 9, 0, $B, $F5	
00031A80 04                         SME_tvPJu_E74:	dc.b 4	
00031A81 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031A86 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031A8B F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031A90 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031A95 04                         SME_tvPJu_E89:	dc.b 4	
00031A96 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031A9B E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031AA0 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031AA5 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031AAA 03                         SME_tvPJu_E9E:	dc.b 3	
00031AAB FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031AB0 E40E 0009 E8               		dc.b $E4, $E, 0, 9, $E8	
00031AB5 FC00 0011 F0               		dc.b $FC, 0, 0, $11, $F0	
00031ABA 03                         SME_tvPJu_EAE:	dc.b 3	
00031ABB F40A 0000 FB               		dc.b $F4, $A, 0, 0, $FB	
00031AC0 FC04 0009 EB               		dc.b $FC, 4, 0, 9, $EB	
00031AC5 0408 000B E3               		dc.b 4, 8, 0, $B, $E3	
00031ACA 03                         SME_tvPJu_EBE:	dc.b 3	
00031ACB F409 0000 F4               		dc.b $F4, 9, 0, 0, $F4	
00031AD0 040C 0006 EC               		dc.b 4, $C, 0, 6, $EC	
00031AD5 0400 000A 0C               		dc.b 4, 0, 0, $A, $C	
00031ADA 02                         SME_tvPJu_ECE:	dc.b 2	
00031ADB F409 0000 F7               		dc.b $F4, 9, 0, 0, $F7	
00031AE0 040C 0006 EF               		dc.b 4, $C, 0, 6, $EF	
00031AE5 03                         SME_tvPJu_ED9:	dc.b 3	
00031AE6 F409 0800 F3               		dc.b $F4, 9, 8, 0, $F3	
00031AEB 040C 0806 F3               		dc.b 4, $C, 8, 6, $F3	
00031AF0 0400 080A EB               		dc.b 4, 0, 8, $A, $EB	
00031AF5 03                         SME_tvPJu_EE9:	dc.b 3	
00031AF6 F40A 0800 EE               		dc.b $F4, $A, 8, 0, $EE	
00031AFB FC04 0809 06               		dc.b $FC, 4, 8, 9, 6	
00031B00 0408 080B 06               		dc.b 4, 8, 8, $B, 6	
00031B05 02                         SME_tvPJu_EF9:	dc.b 2	
00031B06 F40E 0000 F2               		dc.b $F4, $E, 0, 0, $F2	
00031B0B 0400 000C EA               		dc.b 4, 0, 0, $C, $EA	
00031B10 02                         SME_tvPJu_F04:	dc.b 2	
00031B11 F409 0000 F7               		dc.b $F4, 9, 0, 0, $F7	
00031B16 040C 0006 EF               		dc.b 4, $C, 0, 6, $EF	
00031B1B 02                         SME_tvPJu_F0F:	dc.b 2	
00031B1C F40E 0800 EF               		dc.b $F4, $E, 8, 0, $EF	
00031B21 0400 080C 0F               		dc.b 4, 0, 8, $C, $F	
00031B26 03                         SME_tvPJu_F1A:	dc.b 3	
00031B27 F80E 0000 EC               		dc.b $F8, $E, 0, 0, $EC	
00031B2C F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00031B31 1008 000F F4               		dc.b $10, 8, 0, $F, $F4	
00031B36 03                         SME_tvPJu_F2A:	dc.b 3	
00031B37 F70E 0000 EC               		dc.b $F7, $E, 0, 0, $EC	
00031B3C F702 000C 0C               		dc.b $F7, 2, 0, $C, $C	
00031B41 0F08 000F F4               		dc.b $F, 8, 0, $F, $F4	
00031B46 01                         SME_tvPJu_F3A:	dc.b 1	
00031B47 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00031B4C 03                         SME_tvPJu_F40:	dc.b 3	
00031B4D E809 0000 F3               		dc.b $E8, 9, 0, 0, $F3	
00031B52 F80D 0006 F3               		dc.b $F8, $D, 0, 6, $F3	
00031B57 0809 000E F3               		dc.b 8, 9, 0, $E, $F3	
00031B5C 02                         SME_tvPJu_F50:	dc.b 2	
00031B5D E80F 0000 F0               		dc.b $E8, $F, 0, 0, $F0	
00031B62 0809 0010 F0               		dc.b 8, 9, 0, $10, $F0	
00031B67 03                         SME_tvPJu_F5B:	dc.b 3	
00031B68 E80A 0000 F2               		dc.b $E8, $A, 0, 0, $F2	
00031B6D 000C 0009 F0               		dc.b 0, $C, 0, 9, $F0	
00031B72 0809 000D F0               		dc.b 8, 9, 0, $D, $F0	
00031B78 00                         		even
00031B78 00                         		even
00031B78                            		even
00031B78                            ; ---------------------------------------------------------------------------
00031B78                            ; Uncompressed graphics	loading	array for Sonic
00031B78                            ; ---------------------------------------------------------------------------
00031B78                            ;SonicDynPLC:
00031B78                            ;	INCLUDE	"mappings/spriteDPLC/SonicS2Cues.asm"
00031B78                            ;	even
00031B78                            SonicDynPLC:
00031B78                            	include "_inc\Sonic dynamic pattern load cues.asm"
00031B78                            ; --------------------------------------------------------------------------------
00031B78                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00031B78                            
00031B78                            SME_kbS1m:	
00031B78 0000 0000                  		dc.w SME_kbS1m_1B4-SME_kbS1m, SME_kbS1m_1B5-SME_kbS1m	
00031B7C 0000 0000                  		dc.w SME_kbS1m_1BC-SME_kbS1m, SME_kbS1m_1C3-SME_kbS1m	
00031B80 0000 0000                  		dc.w SME_kbS1m_1CA-SME_kbS1m, SME_kbS1m_1CF-SME_kbS1m	
00031B84 0000 0000                  		dc.w SME_kbS1m_1D6-SME_kbS1m, SME_kbS1m_1DD-SME_kbS1m	
00031B88 0000 0000                  		dc.w SME_kbS1m_1E4-SME_kbS1m, SME_kbS1m_1E9-SME_kbS1m	
00031B8C 0000 0000                  		dc.w SME_kbS1m_1F2-SME_kbS1m, SME_kbS1m_1FB-SME_kbS1m	
00031B90 0000 0000                  		dc.w SME_kbS1m_204-SME_kbS1m, SME_kbS1m_20D-SME_kbS1m	
00031B94 0000 0000                  		dc.w SME_kbS1m_216-SME_kbS1m, SME_kbS1m_21F-SME_kbS1m	
00031B98 0000 0000                  		dc.w SME_kbS1m_228-SME_kbS1m, SME_kbS1m_231-SME_kbS1m	
00031B9C 0000 0000                  		dc.w SME_kbS1m_238-SME_kbS1m, SME_kbS1m_23F-SME_kbS1m	
00031BA0 0000 0000                  		dc.w SME_kbS1m_246-SME_kbS1m, SME_kbS1m_24B-SME_kbS1m	
00031BA4 0000 0000                  		dc.w SME_kbS1m_252-SME_kbS1m, SME_kbS1m_25B-SME_kbS1m	
00031BA8 0000 0000                  		dc.w SME_kbS1m_262-SME_kbS1m, SME_kbS1m_267-SME_kbS1m	
00031BAC 0000 0000                  		dc.w SME_kbS1m_270-SME_kbS1m, SME_kbS1m_279-SME_kbS1m	
00031BB0 0000 0000                  		dc.w SME_kbS1m_282-SME_kbS1m, SME_kbS1m_28B-SME_kbS1m	
00031BB4 0000 0000                  		dc.w SME_kbS1m_294-SME_kbS1m, SME_kbS1m_29D-SME_kbS1m	
00031BB8 0000 0000                  		dc.w SME_kbS1m_2A6-SME_kbS1m, SME_kbS1m_2AF-SME_kbS1m	
00031BBC 0000 0000                  		dc.w SME_kbS1m_2B4-SME_kbS1m, SME_kbS1m_2B9-SME_kbS1m	
00031BC0 0000 0000                  		dc.w SME_kbS1m_2BE-SME_kbS1m, SME_kbS1m_2C3-SME_kbS1m	
00031BC4 0000 0000                  		dc.w SME_kbS1m_2CC-SME_kbS1m, SME_kbS1m_2D1-SME_kbS1m	
00031BC8 0000 0000                  		dc.w SME_kbS1m_2DA-SME_kbS1m, SME_kbS1m_2DF-SME_kbS1m	
00031BCC 0000 0000                  		dc.w SME_kbS1m_2E4-SME_kbS1m, SME_kbS1m_2E9-SME_kbS1m	
00031BD0 0000 0000                  		dc.w SME_kbS1m_2EE-SME_kbS1m, SME_kbS1m_2F3-SME_kbS1m	
00031BD4 0000 0000                  		dc.w SME_kbS1m_2FA-SME_kbS1m, SME_kbS1m_2FF-SME_kbS1m	
00031BD8 0000 0000                  		dc.w SME_kbS1m_306-SME_kbS1m, SME_kbS1m_30B-SME_kbS1m	
00031BDC 0000 0000                  		dc.w SME_kbS1m_312-SME_kbS1m, SME_kbS1m_31B-SME_kbS1m	
00031BE0 0000 0000                  		dc.w SME_kbS1m_324-SME_kbS1m, SME_kbS1m_32D-SME_kbS1m	
00031BE4 0000 0000                  		dc.w SME_kbS1m_336-SME_kbS1m, SME_kbS1m_33D-SME_kbS1m	
00031BE8 0000 0000                  		dc.w SME_kbS1m_342-SME_kbS1m, SME_kbS1m_347-SME_kbS1m	
00031BEC 0000 0000                  		dc.w SME_kbS1m_34E-SME_kbS1m, SME_kbS1m_357-SME_kbS1m	
00031BF0 0000 0000                  		dc.w SME_kbS1m_35C-SME_kbS1m, SME_kbS1m_361-SME_kbS1m	
00031BF4 0000 0000                  		dc.w SME_kbS1m_368-SME_kbS1m, SME_kbS1m_36B-SME_kbS1m	
00031BF8 0000 0000                  		dc.w SME_kbS1m_372-SME_kbS1m, SME_kbS1m_37B-SME_kbS1m	
00031BFC 0000 0000                  		dc.w SME_kbS1m_384-SME_kbS1m, SME_kbS1m_38D-SME_kbS1m	
00031C00 0000 0000                  		dc.w SME_kbS1m_392-SME_kbS1m, SME_kbS1m_395-SME_kbS1m	
00031C04 0000 0000                  		dc.w SME_kbS1m_39A-SME_kbS1m, SME_kbS1m_39D-SME_kbS1m	
00031C08 0000 0000                  		dc.w SME_kbS1m_3A2-SME_kbS1m, SME_kbS1m_3A9-SME_kbS1m	
00031C0C 0000 0000                  		dc.w SME_kbS1m_3B2-SME_kbS1m, SME_kbS1m_3BB-SME_kbS1m	
00031C10 0000 0000                  		dc.w SME_kbS1m_3C2-SME_kbS1m, SME_kbS1m_3C9-SME_kbS1m	
00031C14 0000 0000                  		dc.w SME_kbS1m_3D0-SME_kbS1m, SME_kbS1m_3D3-SME_kbS1m	
00031C18 0000 0000                  		dc.w SME_kbS1m_3DC-SME_kbS1m, SME_kbS1m_3E5-SME_kbS1m	
00031C1C 0000 0000                  		dc.w SME_kbS1m_3EA-SME_kbS1m, SME_kbS1m_3F1-SME_kbS1m	
00031C20 0000 0000                  		dc.w SME_kbS1m_3F8-SME_kbS1m, SME_kbS1m_3FD-SME_kbS1m	
00031C24 0000 0000                  		dc.w SME_kbS1m_406-SME_kbS1m, SME_kbS1m_40D-SME_kbS1m	
00031C28 0000 0000                  		dc.w SME_kbS1m_412-SME_kbS1m, SME_kbS1m_417-SME_kbS1m	
00031C2C 0000 0000                  		dc.w SME_kbS1m_420-SME_kbS1m, SME_kbS1m_427-SME_kbS1m	
00031C30 0000 0000                  		dc.w SME_kbS1m_42C-SME_kbS1m, SME_kbS1m_433-SME_kbS1m	
00031C34 0000 0000                  		dc.w SME_kbS1m_436-SME_kbS1m, SME_kbS1m_43B-SME_kbS1m	
00031C38 0000 0000                  		dc.w SME_kbS1m_442-SME_kbS1m, SME_kbS1m_445-SME_kbS1m	
00031C3C 0000 0000                  		dc.w SME_kbS1m_44A-SME_kbS1m, SME_kbS1m_44F-SME_kbS1m	
00031C40 0000 0000                  		dc.w SME_kbS1m_456-SME_kbS1m, SME_kbS1m_459-SME_kbS1m	
00031C44 0000 0000                  		dc.w SME_kbS1m_45E-SME_kbS1m, SME_kbS1m_465-SME_kbS1m	
00031C48 0000 0000                  		dc.w SME_kbS1m_468-SME_kbS1m, SME_kbS1m_46D-SME_kbS1m	
00031C4C 0000 0000                  		dc.w SME_kbS1m_472-SME_kbS1m, SME_kbS1m_47B-SME_kbS1m	
00031C50 0000 0000                  		dc.w SME_kbS1m_482-SME_kbS1m, SME_kbS1m_489-SME_kbS1m	
00031C54 0000 0000                  		dc.w SME_kbS1m_48E-SME_kbS1m, SME_kbS1m_495-SME_kbS1m	
00031C58 0000 0000                  		dc.w SME_kbS1m_49C-SME_kbS1m, SME_kbS1m_4A3-SME_kbS1m	
00031C5C 0000 0000                  		dc.w SME_kbS1m_4A8-SME_kbS1m, SME_kbS1m_4B1-SME_kbS1m	
00031C60 0000 0000                  		dc.w SME_kbS1m_4B8-SME_kbS1m, SME_kbS1m_4BF-SME_kbS1m	
00031C64 0000 0000                  		dc.w SME_kbS1m_4C4-SME_kbS1m, SME_kbS1m_4CB-SME_kbS1m	
00031C68 0000 0000                  		dc.w SME_kbS1m_4CE-SME_kbS1m, SME_kbS1m_4D7-SME_kbS1m	
00031C6C 0000 0000                  		dc.w SME_kbS1m_4E0-SME_kbS1m, SME_kbS1m_4E7-SME_kbS1m	
00031C70 0000 0000                  		dc.w SME_kbS1m_4F0-SME_kbS1m, SME_kbS1m_4F9-SME_kbS1m	
00031C74 0000 0000                  		dc.w SME_kbS1m_502-SME_kbS1m, SME_kbS1m_509-SME_kbS1m	
00031C78 0000 0000                  		dc.w SME_kbS1m_512-SME_kbS1m, SME_kbS1m_51B-SME_kbS1m	
00031C7C 0000 0000                  		dc.w SME_kbS1m_524-SME_kbS1m, SME_kbS1m_52B-SME_kbS1m	
00031C80 0000 0000                  		dc.w SME_kbS1m_534-SME_kbS1m, SME_kbS1m_53B-SME_kbS1m	
00031C84 0000 0000                  		dc.w SME_kbS1m_540-SME_kbS1m, SME_kbS1m_547-SME_kbS1m	
00031C88 0000 0000                  		dc.w SME_kbS1m_54C-SME_kbS1m, SME_kbS1m_551-SME_kbS1m	
00031C8C 0000 0000                  		dc.w SME_kbS1m_556-SME_kbS1m, SME_kbS1m_55B-SME_kbS1m	
00031C90 0000 0000                  		dc.w SME_kbS1m_560-SME_kbS1m, SME_kbS1m_567-SME_kbS1m	
00031C94 0000 0000                  		dc.w SME_kbS1m_56E-SME_kbS1m, SME_kbS1m_573-SME_kbS1m	
00031C98 0000 0000                  		dc.w SME_kbS1m_57A-SME_kbS1m, SME_kbS1m_583-SME_kbS1m	
00031C9C 0000 0000                  		dc.w SME_kbS1m_58C-SME_kbS1m, SME_kbS1m_595-SME_kbS1m	
00031CA0 0000 0000                  		dc.w SME_kbS1m_59A-SME_kbS1m, SME_kbS1m_5A5-SME_kbS1m	
00031CA4 0000 0000                  		dc.w SME_kbS1m_5B0-SME_kbS1m, SME_kbS1m_5B3-SME_kbS1m	
00031CA8 0000 0000                  		dc.w SME_kbS1m_5B6-SME_kbS1m, SME_kbS1m_5B9-SME_kbS1m	
00031CAC 0000 0000                  		dc.w SME_kbS1m_5BC-SME_kbS1m, SME_kbS1m_5BF-SME_kbS1m	
00031CB0 0000 0000                  		dc.w SME_kbS1m_5C4-SME_kbS1m, SME_kbS1m_5C9-SME_kbS1m	
00031CB4 0000 0000                  		dc.w SME_kbS1m_5D2-SME_kbS1m, SME_kbS1m_5DB-SME_kbS1m	
00031CB8 0000 0000                  		dc.w SME_kbS1m_5E4-SME_kbS1m, SME_kbS1m_5EB-SME_kbS1m	
00031CBC 0000 0000                  		dc.w SME_kbS1m_5F2-SME_kbS1m, SME_kbS1m_5FB-SME_kbS1m	
00031CC0 0000 0000                  		dc.w SME_kbS1m_602-SME_kbS1m, SME_kbS1m_60B-SME_kbS1m	
00031CC4 0000 0000                  		dc.w SME_kbS1m_612-SME_kbS1m, SME_kbS1m_61B-SME_kbS1m	
00031CC8 0000 0000                  		dc.w SME_kbS1m_622-SME_kbS1m, SME_kbS1m_629-SME_kbS1m	
00031CCC 0000 0000                  		dc.w SME_kbS1m_630-SME_kbS1m, SME_kbS1m_637-SME_kbS1m	
00031CD0 0000 0000                  		dc.w SME_kbS1m_63E-SME_kbS1m, SME_kbS1m_647-SME_kbS1m	
00031CD4 0000 0000                  		dc.w SME_kbS1m_650-SME_kbS1m, SME_kbS1m_659-SME_kbS1m	
00031CD8 0000 0000                  		dc.w SME_kbS1m_662-SME_kbS1m, SME_kbS1m_667-SME_kbS1m	
00031CDC 0000 0000                  		dc.w SME_kbS1m_66E-SME_kbS1m, SME_kbS1m_675-SME_kbS1m	
00031CE0 0000 0000                  		dc.w SME_kbS1m_67C-SME_kbS1m, SME_kbS1m_683-SME_kbS1m	
00031CE4 0000 0000                  		dc.w SME_kbS1m_68A-SME_kbS1m, SME_kbS1m_691-SME_kbS1m	
00031CE8 0000 0000                  		dc.w SME_kbS1m_698-SME_kbS1m, SME_kbS1m_69F-SME_kbS1m	
00031CEC 0000 0000                  		dc.w SME_kbS1m_6A6-SME_kbS1m, SME_kbS1m_6AF-SME_kbS1m	
00031CF0 0000 0000                  		dc.w SME_kbS1m_6B6-SME_kbS1m, SME_kbS1m_6BF-SME_kbS1m	
00031CF4 0000 0000                  		dc.w SME_kbS1m_6C8-SME_kbS1m, SME_kbS1m_6D1-SME_kbS1m	
00031CF8 0000 0000                  		dc.w SME_kbS1m_6DA-SME_kbS1m, SME_kbS1m_6E3-SME_kbS1m	
00031CFC 0000 0000                  		dc.w SME_kbS1m_6E8-SME_kbS1m, SME_kbS1m_6F1-SME_kbS1m	
00031D00 0000 0000                  		dc.w SME_kbS1m_6FA-SME_kbS1m, SME_kbS1m_703-SME_kbS1m	
00031D04 0000 0000                  		dc.w SME_kbS1m_70A-SME_kbS1m, SME_kbS1m_713-SME_kbS1m	
00031D08 0000 0000                  		dc.w SME_kbS1m_71C-SME_kbS1m, SME_kbS1m_723-SME_kbS1m	
00031D0C 0000 0000                  		dc.w SME_kbS1m_72A-SME_kbS1m, SME_kbS1m_72F-SME_kbS1m	
00031D10 0000 0000                  		dc.w SME_kbS1m_736-SME_kbS1m, SME_kbS1m_73D-SME_kbS1m	
00031D14 0000 0000                  		dc.w SME_kbS1m_742-SME_kbS1m, SME_kbS1m_747-SME_kbS1m	
00031D18 0000 0000                  		dc.w SME_kbS1m_74C-SME_kbS1m, SME_kbS1m_753-SME_kbS1m	
00031D1C 0000 0000                  		dc.w SME_kbS1m_75A-SME_kbS1m, SME_kbS1m_75D-SME_kbS1m	
00031D20 0000 0000                  		dc.w SME_kbS1m_764-SME_kbS1m, SME_kbS1m_769-SME_kbS1m	
00031D24 0000 0000                  		dc.w SME_kbS1m_770-SME_kbS1m, SME_kbS1m_777-SME_kbS1m	
00031D28 0000 0000                  		dc.w SME_kbS1m_77E-SME_kbS1m, SME_kbS1m_785-SME_kbS1m	
00031D2C 00                         SME_kbS1m_1B4:	dc.b 0	
00031D2D 0370 0050 0880 0E          SME_kbS1m_1B5:	dc.b 3, $70, 0, $50, 8, $80, $E	
00031D34 03B0 1710 2370 00          SME_kbS1m_1BC:	dc.b 3, $B0, $17, $10, $23, $70, 0	
00031D3B 0380 2530 2E20 32          SME_kbS1m_1C3:	dc.b 3, $80, $25, $30, $2E, $20, $32	
00031D42 02B0 3550 41               SME_kbS1m_1CA:	dc.b 2, $B0, $35, $50, $41	
00031D47 03B0 4710 5350 41          SME_kbS1m_1CF:	dc.b 3, $B0, $47, $10, $53, $50, $41	
00031D4E 03B0 5510 6150 41          SME_kbS1m_1D6:	dc.b 3, $B0, $55, $10, $61, $50, $41	
00031D55 0380 6330 2E20 32          SME_kbS1m_1DD:	dc.b 3, $80, $63, $30, $2E, $20, $32	
00031D5C 0280 6C70 00               SME_kbS1m_1E4:	dc.b 2, $80, $6C, $70, 0	
00031D61 04B0 AF70 BB00 C330 C4     SME_kbS1m_1E9:	dc.b 4, $B0, $AF, $70, $BB, 0, $C3, $30, $C4	
00031D6A 04B0 C870 D410 DC10 DE     SME_kbS1m_1F2:	dc.b 4, $B0, $C8, $70, $D4, $10, $DC, $10, $DE	
00031D73 0480 E010 E930 EB30 EF     SME_kbS1m_1FB:	dc.b 4, $80, $E0, $10, $E9, $30, $EB, $30, $EF	
00031D7C 04B0 F370 FF11 0701 09     SME_kbS1m_204:	dc.b 4, $B0, $F3, $70, $FF, $11, 7, 1, 9	
00031D85 04B1 0A71 1611 1E51 20     SME_kbS1m_20D:	dc.b 4, $B1, $A, $71, $16, $11, $1E, $51, $20	
00031D8E 04F1 2651 3621 3C31 3F     SME_kbS1m_216:	dc.b 4, $F1, $26, $51, $36, $21, $3C, $31, $3F	
00031D97 0481 4371 4C11 5401 56     SME_kbS1m_21F:	dc.b 4, $81, $43, $71, $4C, $11, $54, 1, $56	
00031DA0 0481 5721 6031 6331 67     SME_kbS1m_228:	dc.b 4, $81, $57, $21, $60, $31, $63, $31, $67	
00031DA9 0351 EF81 F571 FE          SME_kbS1m_231:	dc.b 3, $51, $EF, $81, $F5, $71, $FE	
00031DB0 03B2 0612 1272 14          SME_kbS1m_238:	dc.b 3, $B2, 6, $12, $12, $72, $14	
00031DB7 0382 1C52 2502 2B          SME_kbS1m_23F:	dc.b 3, $82, $1C, $52, $25, 2, $2B	
00031DBE 02B2 2C72 38               SME_kbS1m_246:	dc.b 2, $B2, $2C, $72, $38	
00031DC3 0312 40B2 4272 38          SME_kbS1m_24B:	dc.b 3, $12, $40, $B2, $42, $72, $38	
00031DCA 0412 4EB2 5052 5C02 62     SME_kbS1m_252:	dc.b 4, $12, $4E, $B2, $50, $52, $5C, 2, $62	
00031DD3 0382 6352 2502 2B          SME_kbS1m_25B:	dc.b 3, $82, $63, $52, $25, 2, $2B	
00031DDA 0282 6C71 FE               SME_kbS1m_262:	dc.b 2, $82, $6C, $71, $FE	
00031DDF 04B2 E352 EF32 F522 F9     SME_kbS1m_267:	dc.b 4, $B2, $E3, $52, $EF, $32, $F5, $22, $F9	
00031DE8 04B2 FC13 0833 0A53 0E     SME_kbS1m_270:	dc.b 4, $B2, $FC, $13, 8, $33, $A, $53, $E	
00031DF1 0483 1433 1D33 2113 25     SME_kbS1m_279:	dc.b 4, $83, $14, $33, $1D, $33, $21, $13, $25	
00031DFA 04B3 2733 3333 3723 3B     SME_kbS1m_282:	dc.b 4, $B3, $27, $33, $33, $33, $37, $23, $3B	
00031E03 04B3 3E53 4A73 5003 58     SME_kbS1m_28B:	dc.b 4, $B3, $3E, $53, $4A, $73, $50, 3, $58	
00031E0C 04F3 5923 6913 6C73 6E     SME_kbS1m_294:	dc.b 4, $F3, $59, $23, $69, $13, $6C, $73, $6E	
00031E15 0483 7633 7F33 8323 87     SME_kbS1m_29D:	dc.b 4, $83, $76, $33, $7F, $33, $83, $23, $87	
00031E1E 0483 8A33 9333 9723 9B     SME_kbS1m_2A6:	dc.b 4, $83, $8A, $33, $93, $33, $97, $23, $9B	
00031E27 0224 21F4 24               SME_kbS1m_2AF:	dc.b 2, $24, $21, $F4, $24	
00031E2C 0224 34F4 37               SME_kbS1m_2B4:	dc.b 2, $24, $34, $F4, $37	
00031E31 0224 21F4 47               SME_kbS1m_2B9:	dc.b 2, $24, $21, $F4, $47	
00031E36 0224 34F4 57               SME_kbS1m_2BE:	dc.b 2, $24, $34, $F4, $57	
00031E3B 04B4 8B04 9734 9824 9C     SME_kbS1m_2C3:	dc.b 4, $B4, $8B, 4, $97, $34, $98, $24, $9C	
00031E44 0224 9FF4 A2               SME_kbS1m_2CC:	dc.b 2, $24, $9F, $F4, $A2	
00031E49 04B4 B204 BE34 BF24 C3     SME_kbS1m_2D1:	dc.b 4, $B4, $B2, 4, $BE, $34, $BF, $24, $C3	
00031E52 0224 9FF4 C6               SME_kbS1m_2DA:	dc.b 2, $24, $9F, $F4, $C6	
00031E57 0225 04F5 07               SME_kbS1m_2DF:	dc.b 2, $25, 4, $F5, 7	
00031E5C 0225 17F5 1A               SME_kbS1m_2E4:	dc.b 2, $25, $17, $F5, $1A	
00031E61 0225 04F5 2A               SME_kbS1m_2E9:	dc.b 2, $25, 4, $F5, $2A	
00031E66 0225 17F5 3A               SME_kbS1m_2EE:	dc.b 2, $25, $17, $F5, $3A	
00031E6B 0315 70B5 7255 7E          SME_kbS1m_2F3:	dc.b 3, $15, $70, $B5, $72, $55, $7E	
00031E72 0225 84F5 87               SME_kbS1m_2FA:	dc.b 2, $25, $84, $F5, $87	
00031E77 0315 97B5 9955 A5          SME_kbS1m_2FF:	dc.b 3, $15, $97, $B5, $99, $55, $A5	
00031E7E 0225 84F5 AB               SME_kbS1m_306:	dc.b 2, $25, $84, $F5, $AB	
00031E83 0325 E6B5 E925 F5          SME_kbS1m_30B:	dc.b 3, $25, $E6, $B5, $E9, $25, $F5	
00031E8A 0455 F835 FE26 0216 05     SME_kbS1m_312:	dc.b 4, $55, $F8, $35, $FE, $26, 2, $16, 5	
00031E93 0416 0726 0936 0C16 10     SME_kbS1m_31B:	dc.b 4, $16, 7, $26, 9, $36, $C, $16, $10	
00031E9C 0426 1236 1526 1936 1C     SME_kbS1m_324:	dc.b 4, $26, $12, $36, $15, $26, $19, $36, $1C	
00031EA5 0416 2026 2236 2526 29     SME_kbS1m_32D:	dc.b 4, $16, $20, $26, $22, $36, $25, $26, $29	
00031EAE 0316 2C76 2E56 36          SME_kbS1m_336:	dc.b 3, $16, $2C, $76, $2E, $56, $36	
00031EB5 02F6 3C26 4C               SME_kbS1m_33D:	dc.b 2, $F6, $3C, $26, $4C	
00031EBA 02B6 4F06 5B               SME_kbS1m_342:	dc.b 2, $B6, $4F, 6, $5B	
00031EBF 0316 5C76 5E26 66          SME_kbS1m_347:	dc.b 3, $16, $5C, $76, $5E, $26, $66	
00031EC6 0426 6936 6C26 7016 73     SME_kbS1m_34E:	dc.b 4, $26, $69, $36, $6C, $26, $70, $16, $73	
00031ECF 0286 7536 7E               SME_kbS1m_357:	dc.b 2, $86, $75, $36, $7E	
00031ED4 02B6 8226 8E               SME_kbS1m_35C:	dc.b 2, $B6, $82, $26, $8E	
00031ED9 0306 91B6 9226 9E          SME_kbS1m_361:	dc.b 3, 6, $91, $B6, $92, $26, $9E	
00031EE0 01B6 A1                    SME_kbS1m_368:	dc.b 1, $B6, $A1	
00031EE3 0326 AD76 B016 B8          SME_kbS1m_36B:	dc.b 3, $26, $AD, $76, $B0, $16, $B8	
00031EEA 0426 BA36 BD26 C116 C4     SME_kbS1m_372:	dc.b 4, $26, $BA, $36, $BD, $26, $C1, $16, $C4	
00031EF3 0456 C636 CC26 D016 D3     SME_kbS1m_37B:	dc.b 4, $56, $C6, $36, $CC, $26, $D0, $16, $D3	
00031EFC 0456 D526 DB36 DE26 E2     SME_kbS1m_384:	dc.b 4, $56, $D5, $26, $DB, $36, $DE, $26, $E2	
00031F05 02B6 E526 F1               SME_kbS1m_38D:	dc.b 2, $B6, $E5, $26, $F1	
00031F0A 01B6 F4                    SME_kbS1m_392:	dc.b 1, $B6, $F4	
00031F0D 0277 0027 08               SME_kbS1m_395:	dc.b 2, $77, 0, $27, 8	
00031F12 01B7 0B                    SME_kbS1m_39A:	dc.b 1, $B7, $B	
00031F15 0217 17B7 19               SME_kbS1m_39D:	dc.b 2, $17, $17, $B7, $19	
00031F1A 0327 2577 2857 30          SME_kbS1m_3A2:	dc.b 3, $27, $25, $77, $28, $57, $30	
00031F21 0487 3637 3F37 4327 47     SME_kbS1m_3A9:	dc.b 4, $87, $36, $37, $3F, $37, $43, $27, $47	
00031F2A 0427 4A77 4D27 5537 58     SME_kbS1m_3B2:	dc.b 4, $27, $4A, $77, $4D, $27, $55, $37, $58	
00031F33 0357 5C37 6227 66          SME_kbS1m_3BB:	dc.b 3, $57, $5C, $37, $62, $27, $66	
00031F3A 0327 6977 6C27 74          SME_kbS1m_3C2:	dc.b 3, $27, $69, $77, $6C, $27, $74	
00031F41 0317 7777 7917 81          SME_kbS1m_3C9:	dc.b 3, $17, $77, $77, $79, $17, $81	
00031F48 01F7 83                    SME_kbS1m_3D0:	dc.b 1, $F7, $83	
00031F4B 0407 9377 9407 9C77 9D     SME_kbS1m_3D3:	dc.b 4, 7, $93, $77, $94, 7, $9C, $77, $9D	
00031F54 0417 A527 A787 AA37 B3     SME_kbS1m_3DC:	dc.b 4, $17, $A5, $27, $A7, $87, $AA, $37, $B3	
00031F5D 0217 B7B7 B9               SME_kbS1m_3E5:	dc.b 2, $17, $B7, $B7, $B9	
00031F62 0317 C577 C717 CF          SME_kbS1m_3EA:	dc.b 3, $17, $C5, $77, $C7, $17, $CF	
00031F69 0307 D187 D217 DB          SME_kbS1m_3F1:	dc.b 3, 7, $D1, $87, $D2, $17, $DB	
00031F70 02F7 DD07 ED               SME_kbS1m_3F8:	dc.b 2, $F7, $DD, 7, $ED	
00031F75 0428 0078 0328 0B28 0E     SME_kbS1m_3FD:	dc.b 4, $28, 0, $78, 3, $28, $B, $28, $E	
00031F7E 0328 1178 1458 1C          SME_kbS1m_406:	dc.b 3, $28, $11, $78, $14, $58, $1C	
00031F85 02B8 2238 2E               SME_kbS1m_40D:	dc.b 2, $B8, $22, $38, $2E	
00031F8A 02B8 3228 3E               SME_kbS1m_412:	dc.b 2, $B8, $32, $28, $3E	
00031F8F 0428 4138 4428 4878 4B     SME_kbS1m_417:	dc.b 4, $28, $41, $38, $44, $28, $48, $78, $4B	
00031F98 0388 5338 5C28 60          SME_kbS1m_420:	dc.b 3, $88, $53, $38, $5C, $28, $60	
00031F9F 02B8 6328 6F               SME_kbS1m_427:	dc.b 2, $B8, $63, $28, $6F	
00031FA4 0388 7258 7B08 81          SME_kbS1m_42C:	dc.b 3, $88, $72, $58, $7B, 8, $81	
00031FAB 01B8 82                    SME_kbS1m_433:	dc.b 1, $B8, $82	
00031FAE 02B8 8E28 9A               SME_kbS1m_436:	dc.b 2, $B8, $8E, $28, $9A	
00031FB3 0338 9DB8 A108 AD          SME_kbS1m_43B:	dc.b 3, $38, $9D, $B8, $A1, 8, $AD	
00031FBA 01B8 AE                    SME_kbS1m_442:	dc.b 1, $B8, $AE	
00031FBD 0208 BAB8 BB               SME_kbS1m_445:	dc.b 2, 8, $BA, $B8, $BB	
00031FC2 0288 C758 D0               SME_kbS1m_44A:	dc.b 2, $88, $C7, $58, $D0	
00031FC7 0388 D638 DF28 E3          SME_kbS1m_44F:	dc.b 3, $88, $D6, $38, $DF, $28, $E3	
00031FCE 01B8 E6                    SME_kbS1m_456:	dc.b 1, $B8, $E6	
00031FD1 02B8 F228 FE               SME_kbS1m_459:	dc.b 2, $B8, $F2, $28, $FE	
00031FD6 0329 0119 04B9 06          SME_kbS1m_45E:	dc.b 3, $29, 1, $19, 4, $B9, 6	
00031FDD 01B9 12                    SME_kbS1m_465:	dc.b 1, $B9, $12	
00031FE0 0209 1EB9 1F               SME_kbS1m_468:	dc.b 2, 9, $1E, $B9, $1F	
00031FE5 02B9 2B29 37               SME_kbS1m_46D:	dc.b 2, $B9, $2B, $29, $37	
00031FEA 0419 3A39 3C59 4019 46     SME_kbS1m_472:	dc.b 4, $19, $3A, $39, $3C, $59, $40, $19, $46	
00031FF3 0309 4879 4929 51          SME_kbS1m_47B:	dc.b 3, 9, $48, $79, $49, $29, $51	
00031FFA 0309 5479 5529 5D          SME_kbS1m_482:	dc.b 3, 9, $54, $79, $55, $29, $5D	
00032001 0259 60B9 66               SME_kbS1m_489:	dc.b 2, $59, $60, $B9, $66	
00032006 0309 7289 7339 7C          SME_kbS1m_48E:	dc.b 3, 9, $72, $89, $73, $39, $7C	
0003200D 0319 8059 8239 88          SME_kbS1m_495:	dc.b 3, $19, $80, $59, $82, $39, $88	
00032014 0359 8C39 9219 96          SME_kbS1m_49C:	dc.b 3, $59, $8C, $39, $92, $19, $96	
0003201B 0209 98B9 99               SME_kbS1m_4A3:	dc.b 2, 9, $98, $B9, $99	
00032020 0419 A509 A709 A8B9 A9     SME_kbS1m_4A8:	dc.b 4, $19, $A5, 9, $A7, 9, $A8, $B9, $A9	
00032029 0319 B5B9 B729 C3          SME_kbS1m_4B1:	dc.b 3, $19, $B5, $B9, $B7, $29, $C3	
00032030 0319 C679 C829 D0          SME_kbS1m_4B8:	dc.b 3, $19, $C6, $79, $C8, $29, $D0	
00032037 0209 D389 D4               SME_kbS1m_4BF:	dc.b 2, 9, $D3, $89, $D4	
0003203C 0329 DD79 E029 E8          SME_kbS1m_4C4:	dc.b 3, $29, $DD, $79, $E0, $29, $E8	
00032043 01B9 EB                    SME_kbS1m_4CB:	dc.b 1, $B9, $EB	
00032046 0439 F729 FB79 FE7A 06     SME_kbS1m_4CE:	dc.b 4, $39, $F7, $29, $FB, $79, $FE, $7A, 6	
0003204F 041A 0EBA 105A 1C2A 22     SME_kbS1m_4D7:	dc.b 4, $1A, $E, $BA, $10, $5A, $1C, $2A, $22	
00032058 032A 25BA 287A 34          SME_kbS1m_4E0:	dc.b 3, $2A, $25, $BA, $28, $7A, $34	
0003205F 042A 3C1A 3F1A 41FA 43     SME_kbS1m_4E7:	dc.b 4, $2A, $3C, $1A, $3F, $1A, $41, $FA, $43	
00032068 0439 F729 FB79 FE7A 06     SME_kbS1m_4F0:	dc.b 4, $39, $F7, $29, $FB, $79, $FE, $7A, 6	
00032071 041A 0EBA 105A 1C2A 22     SME_kbS1m_4F9:	dc.b 4, $1A, $E, $BA, $10, $5A, $1C, $2A, $22	
0003207A 032A 25BA 287A 34          SME_kbS1m_502:	dc.b 3, $2A, $25, $BA, $28, $7A, $34	
00032081 042A 3C1A 3F1A 41FA 43     SME_kbS1m_509:	dc.b 4, $2A, $3C, $1A, $3F, $1A, $41, $FA, $43	
0003208A 04BA 530A 5F1A 605A 62     SME_kbS1m_512:	dc.b 4, $BA, $53, $A, $5F, $1A, $60, $5A, $62	
00032093 043A 687A 6C3A 742A 78     SME_kbS1m_51B:	dc.b 4, $3A, $68, $7A, $6C, $3A, $74, $2A, $78	
0003209C 032A 7B3A 7EBA 82          SME_kbS1m_524:	dc.b 3, $2A, $7B, $3A, $7E, $BA, $82	
000320A3 040A 8E7A 8F2A 975A 9A     SME_kbS1m_52B:	dc.b 4, $A, $8E, $7A, $8F, $2A, $97, $5A, $9A	
000320AC 03BA A05A AC1A B2          SME_kbS1m_534:	dc.b 3, $BA, $A0, $5A, $AC, $1A, $B2	
000320B3 02BA B45A C0               SME_kbS1m_53B:	dc.b 2, $BA, $B4, $5A, $C0	
000320B8 032A C67A C92A D1          SME_kbS1m_540:	dc.b 3, $2A, $C6, $7A, $C9, $2A, $D1	
000320BF 02BA D42A E0               SME_kbS1m_547:	dc.b 2, $BA, $D4, $2A, $E0	
000320C4 02BA E32A E0               SME_kbS1m_54C:	dc.b 2, $BA, $E3, $2A, $E0	
000320C9 02BA EF2A E0               SME_kbS1m_551:	dc.b 2, $BA, $EF, $2A, $E0	
000320CE 02BA FB2A E0               SME_kbS1m_556:	dc.b 2, $BA, $FB, $2A, $E0	
000320D3 02BB 072A E0               SME_kbS1m_55B:	dc.b 2, $BB, 7, $2A, $E0	
000320D8 03BB 132B 1F2B 22          SME_kbS1m_560:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
000320DF 03BB 252B 1F2B 22          SME_kbS1m_567:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
000320E6 02B7 EF37 FB               SME_kbS1m_56E:	dc.b 2, $B7, $EF, $37, $FB	
000320EB 033B 313B 358B 39          SME_kbS1m_573:	dc.b 3, $3B, $31, $3B, $35, $8B, $39	
000320F2 045B 423B 482B 4C5B 4F     SME_kbS1m_57A:	dc.b 4, $5B, $42, $3B, $48, $2B, $4C, $5B, $4F	
000320FB 045B 553B 5B2B 5F7B 62     SME_kbS1m_583:	dc.b 4, $5B, $55, $3B, $5B, $2B, $5F, $7B, $62	
00032104 042B 6ABB 6D0B 791B 7A     SME_kbS1m_58C:	dc.b 4, $2B, $6A, $BB, $6D, $B, $79, $1B, $7A	
0003210D 022B 6ABB 7C               SME_kbS1m_595:	dc.b 2, $2B, $6A, $BB, $7C	
00032112 057B 881B 935B 953B 9B2B+  SME_kbS1m_59A:	dc.b 5, $7B, $88, $1B, $93, $5B, $95, $3B, $9B, $2B, $9F	
0003211D 052B 901B 935B 953B 9B2B+  SME_kbS1m_5A5:	dc.b 5, $2B, $90, $1B, $93, $5B, $95, $3B, $9B, $2B, $9F	
00032128 01FB A2                    SME_kbS1m_5B0:	dc.b 1, $FB, $A2	
0003212B 01FB B2                    SME_kbS1m_5B3:	dc.b 1, $FB, $B2	
0003212E 01FB C2                    SME_kbS1m_5B6:	dc.b 1, $FB, $C2	
00032131 01FB D2                    SME_kbS1m_5B9:	dc.b 1, $FB, $D2	
00032134 01FB E2                    SME_kbS1m_5BC:	dc.b 1, $FB, $E2	
00032137 020B F2BB F3               SME_kbS1m_5BF:	dc.b 2, $B, $F2, $BB, $F3	
0003213C 020B FFBC 00               SME_kbS1m_5C4:	dc.b 2, $B, $FF, $BC, 0	
00032141 048C 0C1C 153C 172C 1B     SME_kbS1m_5C9:	dc.b 4, $8C, $C, $1C, $15, $3C, $17, $2C, $1B	
0003214A 048C 0C1C 1E3C 202C 24     SME_kbS1m_5D2:	dc.b 4, $8C, $C, $1C, $1E, $3C, $20, $2C, $24	
00032153 042C 277C 2A2C 321C 35     SME_kbS1m_5DB:	dc.b 4, $2C, $27, $7C, $2A, $2C, $32, $1C, $35	
0003215C 032C 37BC 3A2C 46          SME_kbS1m_5E4:	dc.b 3, $2C, $37, $BC, $3A, $2C, $46	
00032163 037C 490C 518C 52          SME_kbS1m_5EB:	dc.b 3, $7C, $49, $C, $51, $8C, $52	
0003216A 040C 5BBC 5C0C 685C 69     SME_kbS1m_5F2:	dc.b 4, $C, $5B, $BC, $5C, $C, $68, $5C, $69	
00032173 030C 6FFC 702C 80          SME_kbS1m_5FB:	dc.b 3, $C, $6F, $FC, $70, $2C, $80	
0003217A 042C 83BC 861C 922C 94     SME_kbS1m_602:	dc.b 4, $2C, $83, $BC, $86, $1C, $92, $2C, $94	
00032183 03FC 970C A72C A8          SME_kbS1m_60B:	dc.b 3, $FC, $97, $C, $A7, $2C, $A8	
0003218A 042C 83BC AB1C B72C B9     SME_kbS1m_612:	dc.b 4, $2C, $83, $BC, $AB, $1C, $B7, $2C, $B9	
00032193 032C BCFC BF0C CF          SME_kbS1m_61B:	dc.b 3, $2C, $BC, $FC, $BF, $C, $CF	
0003219A 032C D0FC D30C CF          SME_kbS1m_622:	dc.b 3, $2C, $D0, $FC, $D3, $C, $CF	
000321A1 031C E3FC E50C CF          SME_kbS1m_629:	dc.b 3, $1C, $E3, $FC, $E5, $C, $CF	
000321A8 03BC F50D 015D 02          SME_kbS1m_630:	dc.b 3, $BC, $F5, $D, 1, $5D, 2	
000321AF 03BD 080D 145D 15          SME_kbS1m_637:	dc.b 3, $BD, 8, $D, $14, $5D, $15	
000321B6 04FD 1B0D 2B1D 2C1D 2E     SME_kbS1m_63E:	dc.b 4, $FD, $1B, $D, $2B, $1D, $2C, $1D, $2E	
000321BF 042D 307D 331D 3B2D 3D     SME_kbS1m_647:	dc.b 4, $2D, $30, $7D, $33, $1D, $3B, $2D, $3D	
000321C8 042D 307D 401D 3B2D 3D     SME_kbS1m_650:	dc.b 4, $2D, $30, $7D, $40, $1D, $3B, $2D, $3D	
000321D1 042D 483D 4B7D 4F2D 3D     SME_kbS1m_659:	dc.b 4, $2D, $48, $3D, $4B, $7D, $4F, $2D, $3D	
000321DA 027D 768D 7E               SME_kbS1m_662:	dc.b 2, $7D, $76, $8D, $7E	
000321DF 032D 877D 8A5D 92          SME_kbS1m_667:	dc.b 3, $2D, $87, $7D, $8A, $5D, $92	
000321E6 032D 877D 985D 92          SME_kbS1m_66E:	dc.b 3, $2D, $87, $7D, $98, $5D, $92	
000321ED 032D 877D A05D 92          SME_kbS1m_675:	dc.b 3, $2D, $87, $7D, $A0, $5D, $92	
000321F4 03BD A82D B43D B7          SME_kbS1m_67C:	dc.b 3, $BD, $A8, $2D, $B4, $3D, $B7	
000321FB 03BD BB2D C73D CA          SME_kbS1m_683:	dc.b 3, $BD, $BB, $2D, $C7, $3D, $CA	
00032202 031D CE8D D03D D9          SME_kbS1m_68A:	dc.b 3, $1D, $CE, $8D, $D0, $3D, $D9	
00032209 031D CE8D DD1D E6          SME_kbS1m_691:	dc.b 3, $1D, $CE, $8D, $DD, $1D, $E6	
00032210 031D CE5D E87D EE          SME_kbS1m_698:	dc.b 3, $1D, $CE, $5D, $E8, $7D, $EE	
00032217 031D CE8D F61D FF          SME_kbS1m_69F:	dc.b 3, $1D, $CE, $8D, $F6, $1D, $FF	
0003221E 048E 0128 113E 0A08 15     SME_kbS1m_6A6:	dc.b 4, $8E, 1, $28, $11, $3E, $A, 8, $15	
00032227 032E 0E7E 115E 19          SME_kbS1m_6AF:	dc.b 3, $2E, $E, $7E, $11, $5E, $19	
0003222E 042E 1F7E 222E 2A2E 2D     SME_kbS1m_6B6:	dc.b 4, $2E, $1F, $7E, $22, $2E, $2A, $2E, $2D	
00032237 042D 877E 302E 2A2E 2D     SME_kbS1m_6BF:	dc.b 4, $2D, $87, $7E, $30, $2E, $2A, $2E, $2D	
00032240 042D 877E 302E 2A2E 38     SME_kbS1m_6C8:	dc.b 4, $2D, $87, $7E, $30, $2E, $2A, $2E, $38	
00032249 042D 877E 3B2E 2A2E 2D     SME_kbS1m_6D1:	dc.b 4, $2D, $87, $7E, $3B, $2E, $2A, $2E, $2D	
00032252 042D 877E 3B2E 2A2E 38     SME_kbS1m_6DA:	dc.b 4, $2D, $87, $7E, $3B, $2E, $2A, $2E, $38	
0003225B 02BE 433E 4F               SME_kbS1m_6E3:	dc.b 2, $BE, $43, $3E, $4F	
00032260 042E 537E 562E 5E3E 4F     SME_kbS1m_6E8:	dc.b 4, $2E, $53, $7E, $56, $2E, $5E, $3E, $4F	
00032269 042E 617E 642E 6C2E 6F     SME_kbS1m_6F1:	dc.b 4, $2E, $61, $7E, $64, $2E, $6C, $2E, $6F	
00032272 042E 723E 753E 795E 7D     SME_kbS1m_6FA:	dc.b 4, $2E, $72, $3E, $75, $3E, $79, $5E, $7D	
0003227B 03BE 832E 8F2E 6F          SME_kbS1m_703:	dc.b 3, $BE, $83, $2E, $8F, $2E, $6F	
00032282 042E 927E 952E 9D2E A0     SME_kbS1m_70A:	dc.b 4, $2E, $92, $7E, $95, $2E, $9D, $2E, $A0	
0003228B 042E A33E A65E AA2E 6F     SME_kbS1m_713:	dc.b 4, $2E, $A3, $3E, $A6, $5E, $AA, $2E, $6F	
00032294 038E B01E B92E BB          SME_kbS1m_71C:	dc.b 3, $8E, $B0, $1E, $B9, $2E, $BB	
0003229B 035E BE3E C40E C8          SME_kbS1m_723:	dc.b 3, $5E, $BE, $3E, $C4, $E, $C8	
000322A2 025E C93E CF               SME_kbS1m_72A:	dc.b 2, $5E, $C9, $3E, $CF	
000322A7 035E BE3E C40E C8          SME_kbS1m_72F:	dc.b 3, $5E, $BE, $3E, $C4, $E, $C8	
000322AE 038E B01E B92E BB          SME_kbS1m_736:	dc.b 3, $8E, $B0, $1E, $B9, $2E, $BB	
000322B5 02BE D30E DF               SME_kbS1m_73D:	dc.b 2, $BE, $D3, $E, $DF	
000322BA 025E E03E E6               SME_kbS1m_742:	dc.b 2, $5E, $E0, $3E, $E6	
000322BF 02BE D30E DF               SME_kbS1m_747:	dc.b 2, $BE, $D3, $E, $DF	
000322C4 03BB 132B 1F2B 22          SME_kbS1m_74C:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
000322CB 03BB 252B 1F2B 22          SME_kbS1m_753:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
000322D2 01BF 1C                    SME_kbS1m_75A:	dc.b 1, $BF, $1C	
000322D5 035F 287F 2E5F 36          SME_kbS1m_75D:	dc.b 3, $5F, $28, $7F, $2E, $5F, $36	
000322DC 02FF 3C5F 4C               SME_kbS1m_764:	dc.b 2, $FF, $3C, $5F, $4C	
000322E1 038F 523F 5B5F 5F          SME_kbS1m_769:	dc.b 3, $8F, $52, $3F, $5B, $5F, $5F	
000322E8 038F 653F 5B5F 5F          SME_kbS1m_770:	dc.b 3, $8F, $65, $3F, $5B, $5F, $5F	
000322EF 03BB 132B 1F2B 22          SME_kbS1m_777:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
000322F6 03BB 252B 1F2B 22          SME_kbS1m_77E:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
000322FD 04BD 570D 633D 642D 68     SME_kbS1m_785:	dc.b 4, $BD, $57, $D, $63, $3D, $64, $2D, $68	
00032306                            		even
00032306                            		even
00032306                            SuperSonicDynPLC:
00032306                            		include	"_inc\Super Sonic dynamic pattern load cues.asm"
00032306                            ; --------------------------------------------------------------------------------
00032306                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00032306                            
00032306                            SME_eiGQM:	
00032306 0000 0000                  		dc.w SME_eiGQM_1AC-SME_eiGQM, SME_eiGQM_1AD-SME_eiGQM	
0003230A 0000 0000                  		dc.w SME_eiGQM_1B4-SME_eiGQM, SME_eiGQM_1BB-SME_eiGQM	
0003230E 0000 0000                  		dc.w SME_eiGQM_1C2-SME_eiGQM, SME_eiGQM_1C9-SME_eiGQM	
00032312 0000 0000                  		dc.w SME_eiGQM_1D2-SME_eiGQM, SME_eiGQM_1DB-SME_eiGQM	
00032316 0000 0000                  		dc.w SME_eiGQM_1E2-SME_eiGQM, SME_eiGQM_1E7-SME_eiGQM	
0003231A 0000 0000                  		dc.w SME_eiGQM_1F0-SME_eiGQM, SME_eiGQM_1F9-SME_eiGQM	
0003231E 0000 0000                  		dc.w SME_eiGQM_202-SME_eiGQM, SME_eiGQM_20B-SME_eiGQM	
00032322 0000 0000                  		dc.w SME_eiGQM_214-SME_eiGQM, SME_eiGQM_21D-SME_eiGQM	
00032326 0000 0000                  		dc.w SME_eiGQM_226-SME_eiGQM, SME_eiGQM_22F-SME_eiGQM	
0003232A 0000 0000                  		dc.w SME_eiGQM_236-SME_eiGQM, SME_eiGQM_23D-SME_eiGQM	
0003232E 0000 0000                  		dc.w SME_eiGQM_244-SME_eiGQM, SME_eiGQM_24B-SME_eiGQM	
00032332 0000 0000                  		dc.w SME_eiGQM_254-SME_eiGQM, SME_eiGQM_25D-SME_eiGQM	
00032336 0000 0000                  		dc.w SME_eiGQM_264-SME_eiGQM, SME_eiGQM_269-SME_eiGQM	
0003233A 0000 0000                  		dc.w SME_eiGQM_272-SME_eiGQM, SME_eiGQM_27B-SME_eiGQM	
0003233E 0000 0000                  		dc.w SME_eiGQM_284-SME_eiGQM, SME_eiGQM_28D-SME_eiGQM	
00032342 0000 0000                  		dc.w SME_eiGQM_296-SME_eiGQM, SME_eiGQM_29F-SME_eiGQM	
00032346 0000 0000                  		dc.w SME_eiGQM_2A8-SME_eiGQM, SME_eiGQM_2B1-SME_eiGQM	
0003234A 0000 0000                  		dc.w SME_eiGQM_2BA-SME_eiGQM, SME_eiGQM_2C3-SME_eiGQM	
0003234E 0000 0000                  		dc.w SME_eiGQM_2CC-SME_eiGQM, SME_eiGQM_2D5-SME_eiGQM	
00032352 0000 0000                  		dc.w SME_eiGQM_2DE-SME_eiGQM, SME_eiGQM_2E7-SME_eiGQM	
00032356 0000 0000                  		dc.w SME_eiGQM_2F0-SME_eiGQM, SME_eiGQM_2F9-SME_eiGQM	
0003235A 0000 0000                  		dc.w SME_eiGQM_302-SME_eiGQM, SME_eiGQM_30B-SME_eiGQM	
0003235E 0000 0000                  		dc.w SME_eiGQM_314-SME_eiGQM, SME_eiGQM_31D-SME_eiGQM	
00032362 0000 0000                  		dc.w SME_eiGQM_326-SME_eiGQM, SME_eiGQM_32F-SME_eiGQM	
00032366 0000 0000                  		dc.w SME_eiGQM_338-SME_eiGQM, SME_eiGQM_341-SME_eiGQM	
0003236A 0000 0000                  		dc.w SME_eiGQM_348-SME_eiGQM, SME_eiGQM_351-SME_eiGQM	
0003236E 0000 0000                  		dc.w SME_eiGQM_35A-SME_eiGQM, SME_eiGQM_363-SME_eiGQM	
00032372 0000 0000                  		dc.w SME_eiGQM_36C-SME_eiGQM, SME_eiGQM_373-SME_eiGQM	
00032376 0000 0000                  		dc.w SME_eiGQM_378-SME_eiGQM, SME_eiGQM_37D-SME_eiGQM	
0003237A 0000 0000                  		dc.w SME_eiGQM_384-SME_eiGQM, SME_eiGQM_38D-SME_eiGQM	
0003237E 0000 0000                  		dc.w SME_eiGQM_392-SME_eiGQM, SME_eiGQM_397-SME_eiGQM	
00032382 0000 0000                  		dc.w SME_eiGQM_39E-SME_eiGQM, SME_eiGQM_3A1-SME_eiGQM	
00032386 0000 0000                  		dc.w SME_eiGQM_3A8-SME_eiGQM, SME_eiGQM_3B1-SME_eiGQM	
0003238A 0000 0000                  		dc.w SME_eiGQM_3BA-SME_eiGQM, SME_eiGQM_3C3-SME_eiGQM	
0003238E 0000 0000                  		dc.w SME_eiGQM_3C8-SME_eiGQM, SME_eiGQM_3CB-SME_eiGQM	
00032392 0000 0000                  		dc.w SME_eiGQM_3D0-SME_eiGQM, SME_eiGQM_3D3-SME_eiGQM	
00032396 0000 0000                  		dc.w SME_eiGQM_3D8-SME_eiGQM, SME_eiGQM_3DF-SME_eiGQM	
0003239A 0000 0000                  		dc.w SME_eiGQM_3E8-SME_eiGQM, SME_eiGQM_3F1-SME_eiGQM	
0003239E 0000 0000                  		dc.w SME_eiGQM_3F8-SME_eiGQM, SME_eiGQM_3FF-SME_eiGQM	
000323A2 0000 0000                  		dc.w SME_eiGQM_406-SME_eiGQM, SME_eiGQM_409-SME_eiGQM	
000323A6 0000 0000                  		dc.w SME_eiGQM_412-SME_eiGQM, SME_eiGQM_41B-SME_eiGQM	
000323AA 0000 0000                  		dc.w SME_eiGQM_420-SME_eiGQM, SME_eiGQM_427-SME_eiGQM	
000323AE 0000 0000                  		dc.w SME_eiGQM_42E-SME_eiGQM, SME_eiGQM_433-SME_eiGQM	
000323B2 0000 0000                  		dc.w SME_eiGQM_43C-SME_eiGQM, SME_eiGQM_443-SME_eiGQM	
000323B6 0000 0000                  		dc.w SME_eiGQM_448-SME_eiGQM, SME_eiGQM_44D-SME_eiGQM	
000323BA 0000 0000                  		dc.w SME_eiGQM_456-SME_eiGQM, SME_eiGQM_45D-SME_eiGQM	
000323BE 0000 0000                  		dc.w SME_eiGQM_462-SME_eiGQM, SME_eiGQM_469-SME_eiGQM	
000323C2 0000 0000                  		dc.w SME_eiGQM_46C-SME_eiGQM, SME_eiGQM_471-SME_eiGQM	
000323C6 0000 0000                  		dc.w SME_eiGQM_478-SME_eiGQM, SME_eiGQM_47B-SME_eiGQM	
000323CA 0000 0000                  		dc.w SME_eiGQM_480-SME_eiGQM, SME_eiGQM_485-SME_eiGQM	
000323CE 0000 0000                  		dc.w SME_eiGQM_48C-SME_eiGQM, SME_eiGQM_48F-SME_eiGQM	
000323D2 0000 0000                  		dc.w SME_eiGQM_494-SME_eiGQM, SME_eiGQM_49B-SME_eiGQM	
000323D6 0000 0000                  		dc.w SME_eiGQM_49E-SME_eiGQM, SME_eiGQM_4A3-SME_eiGQM	
000323DA 0000 0000                  		dc.w SME_eiGQM_4A8-SME_eiGQM, SME_eiGQM_4B1-SME_eiGQM	
000323DE 0000 0000                  		dc.w SME_eiGQM_4B8-SME_eiGQM, SME_eiGQM_4BF-SME_eiGQM	
000323E2 0000 0000                  		dc.w SME_eiGQM_4C4-SME_eiGQM, SME_eiGQM_4CB-SME_eiGQM	
000323E6 0000 0000                  		dc.w SME_eiGQM_4D2-SME_eiGQM, SME_eiGQM_4D9-SME_eiGQM	
000323EA 0000 0000                  		dc.w SME_eiGQM_4DE-SME_eiGQM, SME_eiGQM_4E7-SME_eiGQM	
000323EE 0000 0000                  		dc.w SME_eiGQM_4EE-SME_eiGQM, SME_eiGQM_4F5-SME_eiGQM	
000323F2 0000 0000                  		dc.w SME_eiGQM_4FA-SME_eiGQM, SME_eiGQM_501-SME_eiGQM	
000323F6 0000 0000                  		dc.w SME_eiGQM_504-SME_eiGQM, SME_eiGQM_50D-SME_eiGQM	
000323FA 0000 0000                  		dc.w SME_eiGQM_516-SME_eiGQM, SME_eiGQM_51D-SME_eiGQM	
000323FE 0000 0000                  		dc.w SME_eiGQM_526-SME_eiGQM, SME_eiGQM_52F-SME_eiGQM	
00032402 0000 0000                  		dc.w SME_eiGQM_538-SME_eiGQM, SME_eiGQM_53F-SME_eiGQM	
00032406 0000 0000                  		dc.w SME_eiGQM_548-SME_eiGQM, SME_eiGQM_551-SME_eiGQM	
0003240A 0000 0000                  		dc.w SME_eiGQM_55A-SME_eiGQM, SME_eiGQM_561-SME_eiGQM	
0003240E 0000 0000                  		dc.w SME_eiGQM_56A-SME_eiGQM, SME_eiGQM_571-SME_eiGQM	
00032412 0000 0000                  		dc.w SME_eiGQM_576-SME_eiGQM, SME_eiGQM_57D-SME_eiGQM	
00032416 0000 0000                  		dc.w SME_eiGQM_582-SME_eiGQM, SME_eiGQM_587-SME_eiGQM	
0003241A 0000 0000                  		dc.w SME_eiGQM_58C-SME_eiGQM, SME_eiGQM_591-SME_eiGQM	
0003241E 0000 0000                  		dc.w SME_eiGQM_596-SME_eiGQM, SME_eiGQM_59D-SME_eiGQM	
00032422 0000 0000                  		dc.w SME_eiGQM_5A4-SME_eiGQM, SME_eiGQM_5A9-SME_eiGQM	
00032426 0000 0000                  		dc.w SME_eiGQM_5B0-SME_eiGQM, SME_eiGQM_5B9-SME_eiGQM	
0003242A 0000 0000                  		dc.w SME_eiGQM_5C2-SME_eiGQM, SME_eiGQM_5CB-SME_eiGQM	
0003242E 0000 0000                  		dc.w SME_eiGQM_5D0-SME_eiGQM, SME_eiGQM_5DB-SME_eiGQM	
00032432 0000 0000                  		dc.w SME_eiGQM_5E6-SME_eiGQM, SME_eiGQM_5E9-SME_eiGQM	
00032436 0000 0000                  		dc.w SME_eiGQM_5EC-SME_eiGQM, SME_eiGQM_5EF-SME_eiGQM	
0003243A 0000 0000                  		dc.w SME_eiGQM_5F2-SME_eiGQM, SME_eiGQM_5F5-SME_eiGQM	
0003243E 0000 0000                  		dc.w SME_eiGQM_5FA-SME_eiGQM, SME_eiGQM_5FF-SME_eiGQM	
00032442 0000 0000                  		dc.w SME_eiGQM_608-SME_eiGQM, SME_eiGQM_611-SME_eiGQM	
00032446 0000 0000                  		dc.w SME_eiGQM_61A-SME_eiGQM, SME_eiGQM_621-SME_eiGQM	
0003244A 0000 0000                  		dc.w SME_eiGQM_62A-SME_eiGQM, SME_eiGQM_633-SME_eiGQM	
0003244E 0000 0000                  		dc.w SME_eiGQM_63C-SME_eiGQM, SME_eiGQM_645-SME_eiGQM	
00032452 0000 0000                  		dc.w SME_eiGQM_64E-SME_eiGQM, SME_eiGQM_657-SME_eiGQM	
00032456 0000 0000                  		dc.w SME_eiGQM_65E-SME_eiGQM, SME_eiGQM_665-SME_eiGQM	
0003245A 0000 0000                  		dc.w SME_eiGQM_66C-SME_eiGQM, SME_eiGQM_673-SME_eiGQM	
0003245E 0000 0000                  		dc.w SME_eiGQM_67A-SME_eiGQM, SME_eiGQM_683-SME_eiGQM	
00032462 0000 0000                  		dc.w SME_eiGQM_68C-SME_eiGQM, SME_eiGQM_695-SME_eiGQM	
00032466 0000 0000                  		dc.w SME_eiGQM_69E-SME_eiGQM, SME_eiGQM_6A3-SME_eiGQM	
0003246A 0000 0000                  		dc.w SME_eiGQM_6AA-SME_eiGQM, SME_eiGQM_6B1-SME_eiGQM	
0003246E 0000 0000                  		dc.w SME_eiGQM_6B8-SME_eiGQM, SME_eiGQM_6BF-SME_eiGQM	
00032472 0000 0000                  		dc.w SME_eiGQM_6C6-SME_eiGQM, SME_eiGQM_6CD-SME_eiGQM	
00032476 0000 0000                  		dc.w SME_eiGQM_6D4-SME_eiGQM, SME_eiGQM_6DB-SME_eiGQM	
0003247A 0000 0000                  		dc.w SME_eiGQM_6E2-SME_eiGQM, SME_eiGQM_6EB-SME_eiGQM	
0003247E 0000 0000                  		dc.w SME_eiGQM_6F4-SME_eiGQM, SME_eiGQM_6FD-SME_eiGQM	
00032482 0000 0000                  		dc.w SME_eiGQM_706-SME_eiGQM, SME_eiGQM_70F-SME_eiGQM	
00032486 0000 0000                  		dc.w SME_eiGQM_718-SME_eiGQM, SME_eiGQM_721-SME_eiGQM	
0003248A 0000 0000                  		dc.w SME_eiGQM_72A-SME_eiGQM, SME_eiGQM_733-SME_eiGQM	
0003248E 0000 0000                  		dc.w SME_eiGQM_73C-SME_eiGQM, SME_eiGQM_745-SME_eiGQM	
00032492 0000 0000                  		dc.w SME_eiGQM_74E-SME_eiGQM, SME_eiGQM_757-SME_eiGQM	
00032496 0000 0000                  		dc.w SME_eiGQM_760-SME_eiGQM, SME_eiGQM_767-SME_eiGQM	
0003249A 0000 0000                  		dc.w SME_eiGQM_76E-SME_eiGQM, SME_eiGQM_773-SME_eiGQM	
0003249E 0000 0000                  		dc.w SME_eiGQM_77A-SME_eiGQM, SME_eiGQM_781-SME_eiGQM	
000324A2 0000 0000                  		dc.w SME_eiGQM_786-SME_eiGQM, SME_eiGQM_78B-SME_eiGQM	
000324A6 0000 0000                  		dc.w SME_eiGQM_790-SME_eiGQM, SME_eiGQM_797-SME_eiGQM	
000324AA 0000 0000                  		dc.w SME_eiGQM_79E-SME_eiGQM, SME_eiGQM_7A1-SME_eiGQM	
000324AE 0000 0000                  		dc.w SME_eiGQM_7A8-SME_eiGQM, SME_eiGQM_7AD-SME_eiGQM	
000324B2 00                         SME_eiGQM_1AC:	dc.b 0	
000324B3 0380 0E50 08B0 75          SME_eiGQM_1AD:	dc.b 3, $80, $E, $50, 8, $B0, $75	
000324BA 03B0 1710 23B0 81          SME_eiGQM_1B4:	dc.b 3, $B0, $17, $10, $23, $B0, $81	
000324C1 0370 8D80 2520 95          SME_eiGQM_1BB:	dc.b 3, $70, $8D, $80, $25, $20, $95	
000324C8 03B0 3550 9830 9E          SME_eiGQM_1C2:	dc.b 3, $B0, $35, $50, $98, $30, $9E	
000324CF 04B0 4710 5330 A250 A6     SME_eiGQM_1C9:	dc.b 4, $B0, $47, $10, $53, $30, $A2, $50, $A6	
000324D8 04B0 5510 6130 9E50 98     SME_eiGQM_1D2:	dc.b 4, $B0, $55, $10, $61, $30, $9E, $50, $98	
000324E1 0380 6320 AC70 8D          SME_eiGQM_1DB:	dc.b 3, $80, $63, $20, $AC, $70, $8D	
000324E8 0280 6CB0 81               SME_eiGQM_1E2:	dc.b 2, $80, $6C, $B0, $81	
000324ED 04B0 AF11 6BB1 6D51 79     SME_eiGQM_1E7:	dc.b 4, $B0, $AF, $11, $6B, $B1, $6D, $51, $79	
000324F6 04B0 C811 7F81 8171 8A     SME_eiGQM_1F0:	dc.b 4, $B0, $C8, $11, $7F, $81, $81, $71, $8A	
000324FF 0480 E071 9201 9A11 9B     SME_eiGQM_1F9:	dc.b 4, $80, $E0, $71, $92, 1, $9A, $11, $9B	
00032508 04B0 F3B1 9D01 A931 AA     SME_eiGQM_202:	dc.b 4, $B0, $F3, $B1, $9D, 1, $A9, $31, $AA	
00032511 04B1 0A81 AE51 B751 BD     SME_eiGQM_20B:	dc.b 4, $B1, $A, $81, $AE, $51, $B7, $51, $BD	
0003251A 04F1 2671 C321 CB31 CE     SME_eiGQM_214:	dc.b 4, $F1, $26, $71, $C3, $21, $CB, $31, $CE	
00032523 0481 4351 D281 D811 E1     SME_eiGQM_21D:	dc.b 4, $81, $43, $51, $D2, $81, $D8, $11, $E1	
0003252C 0481 5771 E301 EB21 EC     SME_eiGQM_226:	dc.b 4, $81, $57, $71, $E3, 1, $EB, $21, $EC	
00032535 0351 EF81 F5B2 75          SME_eiGQM_22F:	dc.b 3, $51, $EF, $81, $F5, $B2, $75	
0003253C 0312 81B2 83B2 8F          SME_eiGQM_236:	dc.b 3, $12, $81, $B2, $83, $B2, $8F	
00032543 0382 9B82 A412 AD          SME_eiGQM_23D:	dc.b 3, $82, $9B, $82, $A4, $12, $AD	
0003254A 03B2 2C82 AF02 B8          SME_eiGQM_244:	dc.b 3, $B2, $2C, $82, $AF, 2, $B8	
00032551 04B2 4212 4082 B902 C2     SME_eiGQM_24B:	dc.b 4, $B2, $42, $12, $40, $82, $B9, 2, $C2	
0003255A 04B2 C312 CF82 AF02 B8     SME_eiGQM_254:	dc.b 4, $B2, $C3, $12, $CF, $82, $AF, 2, $B8	
00032563 0382 D182 DA12 AD          SME_eiGQM_25D:	dc.b 3, $82, $D1, $82, $DA, $12, $AD	
0003256A 0282 6CB2 8F               SME_eiGQM_264:	dc.b 2, $82, $6C, $B2, $8F	
0003256F 04B2 E353 9EB3 A403 B0     SME_eiGQM_269:	dc.b 4, $B2, $E3, $53, $9E, $B3, $A4, 3, $B0	
00032578 04B2 FC73 B173 B913 C1     SME_eiGQM_272:	dc.b 4, $B2, $FC, $73, $B1, $73, $B9, $13, $C1	
00032581 0483 1403 C313 C483 C6     SME_eiGQM_27B:	dc.b 4, $83, $14, 3, $C3, $13, $C4, $83, $C6	
0003258A 04B3 2733 CFB3 D303 3A     SME_eiGQM_284:	dc.b 4, $B3, $27, $33, $CF, $B3, $D3, 3, $3A	
00032593 04B3 3E53 DF83 E553 EE     SME_eiGQM_28D:	dc.b 4, $B3, $3E, $53, $DF, $83, $E5, $53, $EE	
0003259C 04F3 5933 F403 F8B3 F9     SME_eiGQM_296:	dc.b 4, $F3, $59, $33, $F4, 3, $F8, $B3, $F9	
000325A5 0483 7634 05B4 0903 86     SME_eiGQM_29F:	dc.b 4, $83, $76, $34, 5, $B4, 9, 3, $86	
000325AE 0483 8A34 1554 1914 1F     SME_eiGQM_2A8:	dc.b 4, $83, $8A, $34, $15, $54, $19, $14, $1F	
000325B7 0474 6724 6F54 7214 78     SME_eiGQM_2B1:	dc.b 4, $74, $67, $24, $6F, $54, $72, $14, $78	
000325C0 0474 7A24 8254 8514 78     SME_eiGQM_2BA:	dc.b 4, $74, $7A, $24, $82, $54, $85, $14, $78	
000325C9 0474 6724 6F54 7214 78     SME_eiGQM_2C3:	dc.b 4, $74, $67, $24, $6F, $54, $72, $14, $78	
000325D2 0474 7A24 8254 8514 78     SME_eiGQM_2CC:	dc.b 4, $74, $7A, $24, $82, $54, $85, $14, $78	
000325DB 0414 D674 D804 E0B4 E1     SME_eiGQM_2D5:	dc.b 4, $14, $D6, $74, $D8, 4, $E0, $B4, $E1	
000325E4 0414 ED74 EF04 F7B4 F8     SME_eiGQM_2DE:	dc.b 4, $14, $ED, $74, $EF, 4, $F7, $B4, $F8	
000325ED 0414 D674 D804 E0B4 E1     SME_eiGQM_2E7:	dc.b 4, $14, $D6, $74, $D8, 4, $E0, $B4, $E1	
000325F6 0414 ED74 EF04 F7B4 F8     SME_eiGQM_2F0:	dc.b 4, $14, $ED, $74, $EF, 4, $F7, $B4, $F8	
000325FF 04B5 4A15 5605 5835 59     SME_eiGQM_2F9:	dc.b 4, $B5, $4A, $15, $56, 5, $58, $35, $59	
00032608 04B5 5D15 6905 6B35 6C     SME_eiGQM_302:	dc.b 4, $B5, $5D, $15, $69, 5, $6B, $35, $6C	
00032611 04B5 4A15 5605 5835 59     SME_eiGQM_30B:	dc.b 4, $B5, $4A, $15, $56, 5, $58, $35, $59	
0003261A 04B5 5D15 6905 6B35 6C     SME_eiGQM_314:	dc.b 4, $B5, $5D, $15, $69, 5, $6B, $35, $6C	
00032623 0435 BB75 BF55 C735 CD     SME_eiGQM_31D:	dc.b 4, $35, $BB, $75, $BF, $55, $C7, $35, $CD	
0003262C 0425 D175 D455 DC35 E2     SME_eiGQM_326:	dc.b 4, $25, $D1, $75, $D4, $55, $DC, $35, $E2	
00032635 0435 BB75 BF55 C735 CD     SME_eiGQM_32F:	dc.b 4, $35, $BB, $75, $BF, $55, $C7, $35, $CD	
0003263E 0425 D175 D455 DC35 E2     SME_eiGQM_338:	dc.b 4, $25, $D1, $75, $D4, $55, $DC, $35, $E2	
00032647 0325 E6B5 E925 F5          SME_eiGQM_341:	dc.b 3, $25, $E6, $B5, $E9, $25, $F5	
0003264E 0455 F835 FE26 0216 05     SME_eiGQM_348:	dc.b 4, $55, $F8, $35, $FE, $26, 2, $16, 5	
00032657 0416 0726 0936 0C16 10     SME_eiGQM_351:	dc.b 4, $16, 7, $26, 9, $36, $C, $16, $10	
00032660 0426 1236 1526 1936 1C     SME_eiGQM_35A:	dc.b 4, $26, $12, $36, $15, $26, $19, $36, $1C	
00032669 0416 2026 2236 2526 29     SME_eiGQM_363:	dc.b 4, $16, $20, $26, $22, $36, $25, $26, $29	
00032672 0316 2C76 2E56 36          SME_eiGQM_36C:	dc.b 3, $16, $2C, $76, $2E, $56, $36	
00032679 02F6 3C26 4C               SME_eiGQM_373:	dc.b 2, $F6, $3C, $26, $4C	
0003267E 02B6 4F06 5B               SME_eiGQM_378:	dc.b 2, $B6, $4F, 6, $5B	
00032683 0316 5C76 5E26 66          SME_eiGQM_37D:	dc.b 3, $16, $5C, $76, $5E, $26, $66	
0003268A 0426 6936 6C26 7016 73     SME_eiGQM_384:	dc.b 4, $26, $69, $36, $6C, $26, $70, $16, $73	
00032693 0286 7536 7E               SME_eiGQM_38D:	dc.b 2, $86, $75, $36, $7E	
00032698 02B6 8226 8E               SME_eiGQM_392:	dc.b 2, $B6, $82, $26, $8E	
0003269D 0306 91B6 9226 9E          SME_eiGQM_397:	dc.b 3, 6, $91, $B6, $92, $26, $9E	
000326A4 01B6 A1                    SME_eiGQM_39E:	dc.b 1, $B6, $A1	
000326A7 0326 AD76 B016 B8          SME_eiGQM_3A1:	dc.b 3, $26, $AD, $76, $B0, $16, $B8	
000326AE 0426 BA36 BD26 C116 C4     SME_eiGQM_3A8:	dc.b 4, $26, $BA, $36, $BD, $26, $C1, $16, $C4	
000326B7 0456 C636 CC26 D016 D3     SME_eiGQM_3B1:	dc.b 4, $56, $C6, $36, $CC, $26, $D0, $16, $D3	
000326C0 0456 D526 DB36 DE26 E2     SME_eiGQM_3BA:	dc.b 4, $56, $D5, $26, $DB, $36, $DE, $26, $E2	
000326C9 02B6 E526 F1               SME_eiGQM_3C3:	dc.b 2, $B6, $E5, $26, $F1	
000326CE 01B6 F4                    SME_eiGQM_3C8:	dc.b 1, $B6, $F4	
000326D1 0277 0027 08               SME_eiGQM_3CB:	dc.b 2, $77, 0, $27, 8	
000326D6 01B7 0B                    SME_eiGQM_3D0:	dc.b 1, $B7, $B	
000326D9 0217 17B7 19               SME_eiGQM_3D3:	dc.b 2, $17, $17, $B7, $19	
000326DE 0327 2577 2857 30          SME_eiGQM_3D8:	dc.b 3, $27, $25, $77, $28, $57, $30	
000326E5 0487 3637 3F37 4327 47     SME_eiGQM_3DF:	dc.b 4, $87, $36, $37, $3F, $37, $43, $27, $47	
000326EE 0427 4A77 4D27 5537 58     SME_eiGQM_3E8:	dc.b 4, $27, $4A, $77, $4D, $27, $55, $37, $58	
000326F7 0357 5C37 6227 66          SME_eiGQM_3F1:	dc.b 3, $57, $5C, $37, $62, $27, $66	
000326FE 0327 6977 6C27 74          SME_eiGQM_3F8:	dc.b 3, $27, $69, $77, $6C, $27, $74	
00032705 0317 7777 7917 81          SME_eiGQM_3FF:	dc.b 3, $17, $77, $77, $79, $17, $81	
0003270C 01F7 83                    SME_eiGQM_406:	dc.b 1, $F7, $83	
0003270F 0407 9377 9407 9C77 9D     SME_eiGQM_409:	dc.b 4, 7, $93, $77, $94, 7, $9C, $77, $9D	
00032718 0417 A527 A787 AA37 B3     SME_eiGQM_412:	dc.b 4, $17, $A5, $27, $A7, $87, $AA, $37, $B3	
00032721 0217 B7B7 B9               SME_eiGQM_41B:	dc.b 2, $17, $B7, $B7, $B9	
00032726 0317 C577 C717 CF          SME_eiGQM_420:	dc.b 3, $17, $C5, $77, $C7, $17, $CF	
0003272D 0307 D187 D217 DB          SME_eiGQM_427:	dc.b 3, 7, $D1, $87, $D2, $17, $DB	
00032734 02F7 DD07 ED               SME_eiGQM_42E:	dc.b 2, $F7, $DD, 7, $ED	
00032739 0428 0078 0328 0B28 0E     SME_eiGQM_433:	dc.b 4, $28, 0, $78, 3, $28, $B, $28, $E	
00032742 0328 1178 1458 1C          SME_eiGQM_43C:	dc.b 3, $28, $11, $78, $14, $58, $1C	
00032749 02B8 2238 2E               SME_eiGQM_443:	dc.b 2, $B8, $22, $38, $2E	
0003274E 02B8 3228 3E               SME_eiGQM_448:	dc.b 2, $B8, $32, $28, $3E	
00032753 0428 4138 4428 4878 4B     SME_eiGQM_44D:	dc.b 4, $28, $41, $38, $44, $28, $48, $78, $4B	
0003275C 0388 5338 5C28 60          SME_eiGQM_456:	dc.b 3, $88, $53, $38, $5C, $28, $60	
00032763 02B8 6328 6F               SME_eiGQM_45D:	dc.b 2, $B8, $63, $28, $6F	
00032768 0388 7258 7B08 81          SME_eiGQM_462:	dc.b 3, $88, $72, $58, $7B, 8, $81	
0003276F 01B8 82                    SME_eiGQM_469:	dc.b 1, $B8, $82	
00032772 02B8 8E28 9A               SME_eiGQM_46C:	dc.b 2, $B8, $8E, $28, $9A	
00032777 0338 9DB8 A108 AD          SME_eiGQM_471:	dc.b 3, $38, $9D, $B8, $A1, 8, $AD	
0003277E 01B8 AE                    SME_eiGQM_478:	dc.b 1, $B8, $AE	
00032781 0208 BAB8 BB               SME_eiGQM_47B:	dc.b 2, 8, $BA, $B8, $BB	
00032786 0288 C758 D0               SME_eiGQM_480:	dc.b 2, $88, $C7, $58, $D0	
0003278B 0388 D638 DF28 E3          SME_eiGQM_485:	dc.b 3, $88, $D6, $38, $DF, $28, $E3	
00032792 01B8 E6                    SME_eiGQM_48C:	dc.b 1, $B8, $E6	
00032795 02B8 F228 FE               SME_eiGQM_48F:	dc.b 2, $B8, $F2, $28, $FE	
0003279A 0329 0119 04B9 06          SME_eiGQM_494:	dc.b 3, $29, 1, $19, 4, $B9, 6	
000327A1 01B9 12                    SME_eiGQM_49B:	dc.b 1, $B9, $12	
000327A4 0209 1EB9 1F               SME_eiGQM_49E:	dc.b 2, 9, $1E, $B9, $1F	
000327A9 02B9 2B29 37               SME_eiGQM_4A3:	dc.b 2, $B9, $2B, $29, $37	
000327AE 0419 3A39 3C59 4019 46     SME_eiGQM_4A8:	dc.b 4, $19, $3A, $39, $3C, $59, $40, $19, $46	
000327B7 0309 4879 4929 51          SME_eiGQM_4B1:	dc.b 3, 9, $48, $79, $49, $29, $51	
000327BE 0309 5479 5529 5D          SME_eiGQM_4B8:	dc.b 3, 9, $54, $79, $55, $29, $5D	
000327C5 0259 60B9 66               SME_eiGQM_4BF:	dc.b 2, $59, $60, $B9, $66	
000327CA 0309 7289 7339 7C          SME_eiGQM_4C4:	dc.b 3, 9, $72, $89, $73, $39, $7C	
000327D1 0319 8059 8239 88          SME_eiGQM_4CB:	dc.b 3, $19, $80, $59, $82, $39, $88	
000327D8 0359 8C39 9219 96          SME_eiGQM_4D2:	dc.b 3, $59, $8C, $39, $92, $19, $96	
000327DF 0209 98B9 99               SME_eiGQM_4D9:	dc.b 2, 9, $98, $B9, $99	
000327E4 0419 A509 A709 A8B9 A9     SME_eiGQM_4DE:	dc.b 4, $19, $A5, 9, $A7, 9, $A8, $B9, $A9	
000327ED 0319 B5B9 B729 C3          SME_eiGQM_4E7:	dc.b 3, $19, $B5, $B9, $B7, $29, $C3	
000327F4 0319 C679 C829 D0          SME_eiGQM_4EE:	dc.b 3, $19, $C6, $79, $C8, $29, $D0	
000327FB 0209 D389 D4               SME_eiGQM_4F5:	dc.b 2, 9, $D3, $89, $D4	
00032800 0329 DD79 E029 E8          SME_eiGQM_4FA:	dc.b 3, $29, $DD, $79, $E0, $29, $E8	
00032807 01B9 EB                    SME_eiGQM_501:	dc.b 1, $B9, $EB	
0003280A 0439 F729 FB79 FE7A 06     SME_eiGQM_504:	dc.b 4, $39, $F7, $29, $FB, $79, $FE, $7A, 6	
00032813 041A 0EBA 105A 1C2A 22     SME_eiGQM_50D:	dc.b 4, $1A, $E, $BA, $10, $5A, $1C, $2A, $22	
0003281C 032A 25BA 287A 34          SME_eiGQM_516:	dc.b 3, $2A, $25, $BA, $28, $7A, $34	
00032823 042A 3C1A 3F1A 41FA 43     SME_eiGQM_51D:	dc.b 4, $2A, $3C, $1A, $3F, $1A, $41, $FA, $43	
0003282C 0439 F729 FB79 FE7A 06     SME_eiGQM_526:	dc.b 4, $39, $F7, $29, $FB, $79, $FE, $7A, 6	
00032835 041A 0EBA 105A 1C2A 22     SME_eiGQM_52F:	dc.b 4, $1A, $E, $BA, $10, $5A, $1C, $2A, $22	
0003283E 032A 25BA 287A 34          SME_eiGQM_538:	dc.b 3, $2A, $25, $BA, $28, $7A, $34	
00032845 042A 3C1A 3F1A 41FA 43     SME_eiGQM_53F:	dc.b 4, $2A, $3C, $1A, $3F, $1A, $41, $FA, $43	
0003284E 04BA 530A 5F1A 605A 62     SME_eiGQM_548:	dc.b 4, $BA, $53, $A, $5F, $1A, $60, $5A, $62	
00032857 043A 687A 6C3A 742A 78     SME_eiGQM_551:	dc.b 4, $3A, $68, $7A, $6C, $3A, $74, $2A, $78	
00032860 032A 7B3A 7EBA 82          SME_eiGQM_55A:	dc.b 3, $2A, $7B, $3A, $7E, $BA, $82	
00032867 040A 8E7A 8F2A 975A 9A     SME_eiGQM_561:	dc.b 4, $A, $8E, $7A, $8F, $2A, $97, $5A, $9A	
00032870 03BA A05A AC1A B2          SME_eiGQM_56A:	dc.b 3, $BA, $A0, $5A, $AC, $1A, $B2	
00032877 02BA B45A C0               SME_eiGQM_571:	dc.b 2, $BA, $B4, $5A, $C0	
0003287C 032A C67A C92A D1          SME_eiGQM_576:	dc.b 3, $2A, $C6, $7A, $C9, $2A, $D1	
00032883 02BA D42A E0               SME_eiGQM_57D:	dc.b 2, $BA, $D4, $2A, $E0	
00032888 02BA E32A E0               SME_eiGQM_582:	dc.b 2, $BA, $E3, $2A, $E0	
0003288D 02BA EF2A E0               SME_eiGQM_587:	dc.b 2, $BA, $EF, $2A, $E0	
00032892 02BA FB2A E0               SME_eiGQM_58C:	dc.b 2, $BA, $FB, $2A, $E0	
00032897 02BB 072A E0               SME_eiGQM_591:	dc.b 2, $BB, 7, $2A, $E0	
0003289C 03BB 132B 1F2B 22          SME_eiGQM_596:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
000328A3 03BB 252B 1F2B 22          SME_eiGQM_59D:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
000328AA 02B7 EF37 FB               SME_eiGQM_5A4:	dc.b 2, $B7, $EF, $37, $FB	
000328AF 033B 313B 358B 39          SME_eiGQM_5A9:	dc.b 3, $3B, $31, $3B, $35, $8B, $39	
000328B6 045B 423B 482B 4C5B 4F     SME_eiGQM_5B0:	dc.b 4, $5B, $42, $3B, $48, $2B, $4C, $5B, $4F	
000328BF 045B 553B 5B2B 5F7B 62     SME_eiGQM_5B9:	dc.b 4, $5B, $55, $3B, $5B, $2B, $5F, $7B, $62	
000328C8 042B 6ABB 6D0B 791B 7A     SME_eiGQM_5C2:	dc.b 4, $2B, $6A, $BB, $6D, $B, $79, $1B, $7A	
000328D1 022B 6ABB 7C               SME_eiGQM_5CB:	dc.b 2, $2B, $6A, $BB, $7C	
000328D6 057B 881B 935B 953B 9B2B+  SME_eiGQM_5D0:	dc.b 5, $7B, $88, $1B, $93, $5B, $95, $3B, $9B, $2B, $9F	
000328E1 052B 901B 935B 953B 9B2B+  SME_eiGQM_5DB:	dc.b 5, $2B, $90, $1B, $93, $5B, $95, $3B, $9B, $2B, $9F	
000328EC 01FB A2                    SME_eiGQM_5E6:	dc.b 1, $FB, $A2	
000328EF 01FB B2                    SME_eiGQM_5E9:	dc.b 1, $FB, $B2	
000328F2 01FB C2                    SME_eiGQM_5EC:	dc.b 1, $FB, $C2	
000328F5 01FB D2                    SME_eiGQM_5EF:	dc.b 1, $FB, $D2	
000328F8 01FB E2                    SME_eiGQM_5F2:	dc.b 1, $FB, $E2	
000328FB 02FF C30F D3               SME_eiGQM_5F5:	dc.b 2, $FF, $C3, $F, $D3	
00032900 02FF C30F D3               SME_eiGQM_5FA:	dc.b 2, $FF, $C3, $F, $D3	
00032905 048C 0C1C 153C 172C 1B     SME_eiGQM_5FF:	dc.b 4, $8C, $C, $1C, $15, $3C, $17, $2C, $1B	
0003290E 048C 0C1C 1E3C 202C 24     SME_eiGQM_608:	dc.b 4, $8C, $C, $1C, $1E, $3C, $20, $2C, $24	
00032917 042C 277C 2A2C 321C 35     SME_eiGQM_611:	dc.b 4, $2C, $27, $7C, $2A, $2C, $32, $1C, $35	
00032920 032C 37BC 3A2C 46          SME_eiGQM_61A:	dc.b 3, $2C, $37, $BC, $3A, $2C, $46	
00032927 043E EA3E EE7E F25E FA     SME_eiGQM_621:	dc.b 4, $3E, $EA, $3E, $EE, $7E, $F2, $5E, $FA	
00032930 043E EA3E EE7F 005F 08     SME_eiGQM_62A:	dc.b 4, $3E, $EA, $3E, $EE, $7F, 0, $5F, 8	
00032939 043E EA3E EE7F 0E5F 16     SME_eiGQM_633:	dc.b 4, $3E, $EA, $3E, $EE, $7F, $E, $5F, $16	
00032942 043E EA3E EE7E F25E FA     SME_eiGQM_63C:	dc.b 4, $3E, $EA, $3E, $EE, $7E, $F2, $5E, $FA	
0003294B 043E EA3E EE7F 005F 08     SME_eiGQM_645:	dc.b 4, $3E, $EA, $3E, $EE, $7F, 0, $5F, 8	
00032954 043E EA3E EE7F 0E5F 16     SME_eiGQM_64E:	dc.b 4, $3E, $EA, $3E, $EE, $7F, $E, $5F, $16	
0003295D 032C BCFC BF0C CF          SME_eiGQM_657:	dc.b 3, $2C, $BC, $FC, $BF, $C, $CF	
00032964 032C D0FC D30C CF          SME_eiGQM_65E:	dc.b 3, $2C, $D0, $FC, $D3, $C, $CF	
0003296B 031C E3FC E50C CF          SME_eiGQM_665:	dc.b 3, $1C, $E3, $FC, $E5, $C, $CF	
00032972 03BC F50D 015D 02          SME_eiGQM_66C:	dc.b 3, $BC, $F5, $D, 1, $5D, 2	
00032979 03BD 080D 145D 15          SME_eiGQM_673:	dc.b 3, $BD, 8, $D, $14, $5D, $15	
00032980 04FD 1B0D 2B1D 2C1D 2E     SME_eiGQM_67A:	dc.b 4, $FD, $1B, $D, $2B, $1D, $2C, $1D, $2E	
00032989 042D 307D 331D 3B2D 3D     SME_eiGQM_683:	dc.b 4, $2D, $30, $7D, $33, $1D, $3B, $2D, $3D	
00032992 042D 307D 401D 3B2D 3D     SME_eiGQM_68C:	dc.b 4, $2D, $30, $7D, $40, $1D, $3B, $2D, $3D	
0003299B 042D 483D 4B7D 4F2D 3D     SME_eiGQM_695:	dc.b 4, $2D, $48, $3D, $4B, $7D, $4F, $2D, $3D	
000329A4 027D 768D 7E               SME_eiGQM_69E:	dc.b 2, $7D, $76, $8D, $7E	
000329A9 032D 877D 8A5D 92          SME_eiGQM_6A3:	dc.b 3, $2D, $87, $7D, $8A, $5D, $92	
000329B0 032D 877D 985D 92          SME_eiGQM_6AA:	dc.b 3, $2D, $87, $7D, $98, $5D, $92	
000329B7 032D 877D A05D 92          SME_eiGQM_6B1:	dc.b 3, $2D, $87, $7D, $A0, $5D, $92	
000329BE 03BD A82D B43D B7          SME_eiGQM_6B8:	dc.b 3, $BD, $A8, $2D, $B4, $3D, $B7	
000329C5 03BD BB2D C73D CA          SME_eiGQM_6BF:	dc.b 3, $BD, $BB, $2D, $C7, $3D, $CA	
000329CC 032F 6EFF 713F 81          SME_eiGQM_6C6:	dc.b 3, $2F, $6E, $FF, $71, $3F, $81	
000329D3 032F 85FF 882F 98          SME_eiGQM_6CD:	dc.b 3, $2F, $85, $FF, $88, $2F, $98	
000329DA 030F 9BFF 9C3F AC          SME_eiGQM_6D4:	dc.b 3, $F, $9B, $FF, $9C, $3F, $AC	
000329E1 032F 85FF B02F C0          SME_eiGQM_6DB:	dc.b 3, $2F, $85, $FF, $B0, $2F, $C0	
000329E8 048E 017F D42F DC0F DF     SME_eiGQM_6E2:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
000329F1 048E 017F E02F E80F EB     SME_eiGQM_6EB:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
000329FA 048E 017F D42F DC0F DF     SME_eiGQM_6F4:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032A03 048E 017F E02F E80F EB     SME_eiGQM_6FD:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032A0C 048E 017F D42F DC0F DF     SME_eiGQM_706:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032A15 048E 017F E02F E80F EB     SME_eiGQM_70F:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032A1E 048E 017F D42F DC0F DF     SME_eiGQM_718:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032A27 048E 017F E02F E80F EB     SME_eiGQM_721:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032A30 048E 017F D42F DC0F DF     SME_eiGQM_72A:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032A39 042E 617E 642E 6C2E 6F     SME_eiGQM_733:	dc.b 4, $2E, $61, $7E, $64, $2E, $6C, $2E, $6F	
00032A42 042E 723E 753E 795E 7D     SME_eiGQM_73C:	dc.b 4, $2E, $72, $3E, $75, $3E, $79, $5E, $7D	
00032A4B 048E 017F E02F E80F EB     SME_eiGQM_745:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032A54 048E 017F D42F DC0F DF     SME_eiGQM_74E:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032A5D 048E 017F E02F E80F EB     SME_eiGQM_757:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032A66 038E B01E B92E BB          SME_eiGQM_760:	dc.b 3, $8E, $B0, $1E, $B9, $2E, $BB	
00032A6D 035E BE3E C40E C8          SME_eiGQM_767:	dc.b 3, $5E, $BE, $3E, $C4, $E, $C8	
00032A74 025E C93E CF               SME_eiGQM_76E:	dc.b 2, $5E, $C9, $3E, $CF	
00032A79 035E BE3E C40E C8          SME_eiGQM_773:	dc.b 3, $5E, $BE, $3E, $C4, $E, $C8	
00032A80 038E B01E B92E BB          SME_eiGQM_77A:	dc.b 3, $8E, $B0, $1E, $B9, $2E, $BB	
00032A87 02BE D30E DF               SME_eiGQM_781:	dc.b 2, $BE, $D3, $E, $DF	
00032A8C 025E E03E E6               SME_eiGQM_786:	dc.b 2, $5E, $E0, $3E, $E6	
00032A91 02BE D30E DF               SME_eiGQM_78B:	dc.b 2, $BE, $D3, $E, $DF	
00032A96 03BB 132B 1F2B 22          SME_eiGQM_790:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
00032A9D 03BB 252B 1F2B 22          SME_eiGQM_797:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
00032AA4 01BF 1C                    SME_eiGQM_79E:	dc.b 1, $BF, $1C	
00032AA7 035F 287F 2E5F 36          SME_eiGQM_7A1:	dc.b 3, $5F, $28, $7F, $2E, $5F, $36	
00032AAE 02FF 3C5F 4C               SME_eiGQM_7A8:	dc.b 2, $FF, $3C, $5F, $4C	
00032AB3 038F 523F 5B5F 5F          SME_eiGQM_7AD:	dc.b 3, $8F, $52, $3F, $5B, $5F, $5F	
00032ABA                            		even
00032ABA                            		even
00032ABA                            ;MetalSonicDynPLC:
00032ABA                            ;	include "_inc\Metal Sonic dynamic pattern load cues.asm"
00032ABA                            
00032ABA                            ; ---------------------------------------------------------------------------
00032ABA                            ; Uncompressed graphics	- Sonic
00032ABA                            ; ---------------------------------------------------------------------------
00032ABA                            ;	align $20
00032ABA                            ;Art_Sonic:	INCBIN	"art/uncompressed/Sonic's art.bin"
00032ABA                            ;	dc.b 0,0,0,0,0,0
00032ABA                            Art_Sonic:	incbin	#artunc\sonic.bin	; Sonic
00052B7A                            		even
00052B7A                            ; ---------------------------------------------------------------------------
00052B7A                            ; Uncompressed graphics - Metal Sonic
00052B7A                            ; ---------------------------------------------------------------------------
00052B7A                            ;Art_MetalSonic:	incbin	#artunc\msonic.bin; Metal Sonic
00052B7A                            ;		even
00052B7A                            ;Art_ASCII:	incbin	#artunc\ascii.bin	; ascii font
00052B7A                            ;		even
00052B7A                            		
00052B7A                            ; ---------------------------------------------------------------------------
00052B7A                            ; Uncompressed graphics	- Tails
00052B7A                            ; ---------------------------------------------------------------------------
00052B7A                            ;Art_Tails:	incbin	#artunc\tails.bin	; Tails
00052B7A                            ;		even
00052B7A                            ; ---------------------------------------------------------------------------
00052B7A                            ; Uncompressed graphics	- Slot Machine Pictures
00052B7A                            ; ---------------------------------------------------------------------------
00052B7A                            Art_Slot:	incbin	#artunc\Slotpictures.bin	; Tails
0005377A                            		even
0005377A                            ; ---------------------------------------------------------------------------
0005377A                            ; Uncompressed graphics - Super Sonic
0005377A                            ; ---------------------------------------------------------------------------
0005377A                            ;Art_SSonic:	incbin	#artunc\ssonic.bin; Super Sonic
0005377A                            ;		even
0005377A                            ; ---------------------------------------------------------------------------
0005377A                            ; Compressed graphics - various
0005377A                            ; ---------------------------------------------------------------------------
0005377A                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0005387E                            		even
0005387E                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000538B8                            		even
000538B8                            ;Nem_Shield:	incbin	artnem\shields2.bin	; shield
000538B8                            ;		even
000538B8                            Unc_Shield:	incbin	artnem\shields2mod.bin
00053C58                            		even
00053C58                            Unc_Stars:	incbin	artnem\InvStarsUnc.bin	; invincibility stars
00054098                            		even
00054098                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
000541A2                            		even
000541A2                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
000541F4                            		even
000541F4                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0005443C                            		even
0005443C                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
000545C2                            		even
000545C2                            		include	"_maps\SS Walls Dynamic.asm"
000545C2                            ; ---------------------------------------------------------------------------
000545C2                            ; Sprite mappings - walls of the special stage
000545C2                            ; ---------------------------------------------------------------------------
000545C2 0000                       Map_SSWalls:	dc.w byte_2C584-Map_SSWalls
000545C4 01                         byte_2C584:	dc.b 1
000545C5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000545CA                            		even
000545CA                            		even
000545CA                            
000545CA                            ; ---------------------------------------------------------------------------
000545CA                            ; Compressed graphics - special stage
000545CA                            ; ---------------------------------------------------------------------------
000545CA                            
000545CA                            ;	if DynamicSpecialStageWalls=1	;Mercury Dynamic Special Stage Walls
000545CA                            Art_SSWalls:	incbin	"#artunc\Special Walls.bin" ; special stage walls
000564EA                            		even
000564EA                            ;	else
000564EA                            ;Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
000564EA                            ;		even
000564EA                            ;	endc	;Mercury Dynamic Special Stage Walls
000564EA                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0005661E                            		even
0005661E                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
000572AE                            		even
000572AE                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000575AE                            		even
000575AE                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00057AA2                            		even
00057AA2                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00057B90                            		even
00057B90                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00057C7C                            		even
00057C7C                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00057D72                            		even
00057D72                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00057DD0                            		even
00057DD0                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00057E62                            		even
00057E62                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00057F24                            		even
00057F24                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00057FF2                            		even
00057FF2                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
000580BE                            		even
000580BE                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00058186                            		even
00058186                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00058250                            		even
00058250                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00058320                            		even
00058320                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00058514                            		even
00058514                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0005865C 00                         		even
0005865C                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0005870C                            		even
0005870C                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000587E6                            		even
000587E6                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0005886A                            		even
0005886A                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000589BC                            		even
000589BC                            ; ---------------------------------------------------------------------------
000589BC                            ; Compressed graphics - GHZ stuff
000589BC                            ; ---------------------------------------------------------------------------
000589BC                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00058A06                            		even
00058A06                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00058B20                            		even
00058B20                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00058C16 00                         		even
00058C16                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00058DB4                            		even
00058DB4                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00058DFC                            		even
00058DFC                            Nem_Spikes:	incbin	artnem\spikess3.bin	; spikes
00058E62 00                         		even
00058E62                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00059076                            		even
00059076                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000591A2                            		even
000591A2                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
000592D0                            		even
000592D0                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0005936E                            		even
0005936E                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
000593CE                            		even
000593CE                            ; ---------------------------------------------------------------------------
000593CE                            ; Compressed graphics - LZ stuff
000593CE                            ; ---------------------------------------------------------------------------
000593CE                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000594F2                            		even
000594F2                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00059CE6                            		even
00059CE6                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00059E66                            		even
00059E66                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00059FD0                            		even
00059FD0                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0005A626                            		even
0005A626                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0005A6DC                            		even
0005A6DC                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0005A77E                            		even
0005A77E                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0005A8DA                            		even
0005A8DA                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0005A93E                            		even
0005A93E                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0005AA90                            		even
0005AA90                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0005AF72                            		even
0005AF72                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0005B0E2                            		even
0005B0E2                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0005B39A                            		even
0005B39A                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0005B4D2                            		even
0005B4D2                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0005B5FC                            		even
0005B5FC                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0005B70C                            		even
0005B70C                            ; ---------------------------------------------------------------------------
0005B70C                            ; Compressed graphics - MZ stuff
0005B70C                            ; ---------------------------------------------------------------------------
0005B70C                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0005B99A                            		even
0005B99A                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0005BA1E 00                         		even
0005BA1E                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0005BAD6                            		even
0005BAD6                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0005BB2A                            		even
0005BB2A                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0005BE08                            		even
0005BE08                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0005C71E                            		even
0005C71E                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0005C882                            		even
0005C882                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0005C90A                            		even
0005C90A                            ; ---------------------------------------------------------------------------
0005C90A                            ; Compressed graphics - SLZ stuff
0005C90A                            ; ---------------------------------------------------------------------------
0005C90A                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0005CB46                            		even
0005CB46                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0005CC8C                            		even
0005CC8C                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0005CED0                            		even
0005CED0                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0005CF32                            		even
0005CF32                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0005D014                            		even
0005D014                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0005D1F6                            		even
0005D1F6                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0005D302                            		even
0005D302                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0005D3A6                            		even
0005D3A6                            ; ---------------------------------------------------------------------------
0005D3A6                            ; Compressed graphics - SYZ stuff
0005D3A6                            ; ---------------------------------------------------------------------------
0005D3A6                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0005D516                            		even
0005D516                            Nem_Flipper:	incbin	artnem\Flippers.bin	; Pinball Flippers
0005D83A                            		even
0005D83A                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0005D89C                            		even
0005D89C                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0005D94C                            		even
0005D94C                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0005DBDA                            		even
0005DBDA                            ; ---------------------------------------------------------------------------
0005DBDA                            ; Compressed graphics - SBZ stuff
0005DBDA                            ; ---------------------------------------------------------------------------
0005DBDA                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0005DC2E                            		even
0005DC2E                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0005DECA                            		even
0005DECA                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0005E0CE                            		even
0005E0CE                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0005E26C                            		even
0005E26C                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0005E59C                            		even
0005E59C                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0005E77A                            		even
0005E77A                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0005E7D2                            		even
0005E7D2                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0005E952                            		even
0005E952                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0005EA50                            		even
0005EA50                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0005EBDC                            		even
0005EBDC                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0005EC2C                            		even
0005EC2C                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0005EC84                            		even
0005EC84                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0005ED80                            		even
0005ED80                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0005EE96                            		even
0005EE96                            ; ---------------------------------------------------------------------------
0005EE96                            ; Compressed graphics - enemies
0005EE96                            ; ---------------------------------------------------------------------------
0005EE96                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0005F256                            		even
0005F256                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0005F744                            		even
0005F744                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0005FAEA                            		even
0005FAEA                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0005FCD2                            		even
0005FCD2                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
000603BC                            		even
000603BC                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00060604                            		even
00060604                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0006088E                            		even
0006088E                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00060DB2                            		even
00060DB2                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0006103C                            		even
0006103C                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0006165A                            		even
0006165A                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00061A42                            		even
00061A42                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
00061D3E                            		even
00061D3E                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00061F86                            		even
00061F86                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0006221E                            		even
0006221E                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
000623FC                            		even
000623FC                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0006258A                            		even
0006258A                            ; ---------------------------------------------------------------------------
0006258A                            ; Compressed graphics - various
0006258A                            ; ---------------------------------------------------------------------------
0006258A                            Nem_GTA:	incbin	artnem\GotThrough.bin
00062AE0                            		even
00062AE0                            Nem_TitleCard:
00062AE0                            			incbin	artnem\ttlcards.bin	; title cards
000630D0                            		even
000630D0                            ArtNem_TitleCard:
000630D0                            Nem_TitleCard2:
000630D0                            			incbin	'art/nemesis/Title card.bin'	; title cards
0006342E                            		even
0006342E                            ArtNem_TitleCard2:
0006342E                            Nem_TitleCard3:
0006342E                            			incbin	'art/nemesis/Font using large broken letters.bin'	; title cards
00063834                            		even
00063834                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00063954 00                         		even
00063954                            Unc_Lives:	incbin	artnem\lifeiconunc.bin	; life counter icon
00063AD4                            		even
00063AD4                            Unc_SuperLives:	incbin	"artnem\Super Sonic lives counter uncompressed.bin"	; life counter icon
00063C54                            		even
00063C54                            Nem_TailsLives:	incbin	artnem\mlifeicon.bin	; life counter icon
00063D34                            		even
00063D34                            Nem_MilesLives:	incbin	artnem\mileslifeicon.bin	; life counter icon
00063E1C 00                         		even
00063E1C                            Nem_Ring:	incbin	artnem\ringsnew.bin	; rings
00063F12                            		even
00063F12                            Nem_Ring_S:	incbin	artnem\ringsnew.bin	; rings
00064008                            		even
00064008                            Nem_Monitors:	incbin	"artnem\(Mercury) Monitors (optimised alt).bin"
00064498 00                         		even
00064498                            Nem_TailsMonitors:	incbin	artnem\tailsmonitors.bin	; monitors
000648E8                            		even
000648E8                            Nem_Explode:	incbin	artnem\explosios3.bin	; explosion
00064C5C                            		even
00064C5C                            Nem_BossExplode:	incbin	artnem\bexplosio.bin	; explosion
00064FA8                            		even
00064FA8                            Unc_PauseMenu:	incbin	artnem\PauseMenuStuffunc.bin
00065128                            		even
00065128                            Unc_Points:	incbin	artnem\pointsunc.bin	; points from destroyed enemy or object
00065248                            		even
00065248                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
00065476                            		even
00065476                            Nem_HSpring:	incbin	artnem\springh2nd.bin	; horizontal spring
000655A0 00                         		even
000655A0                            Nem_VSpring:	incbin	artnem\springv2nd.bin	; vertical spring
0006568C 00                         		even
0006568C                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
00065AEC                            		even
00065AEC                            Nem_TailsSignPost:	incbin	artnem\tailssignpost.bin	; end of level signpost
00065F56 00                         		even
00065F56                            Nem_SignPostMetal:	incbin	artnem\msignpost.bin	; end of level signpost
000663C0 00                         		even
000663C0                            Nem_Lamp:	incbin	artnem\lampposts2.bin	; lamppost
000664BE                            		even
000664BE                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
00066632                            		even
00066632                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00066934                            		even
00066934                            Unc_PauseMenuBG:	incbin	"#artunc\Pause BG.bin"
000669B4                            		even
000669B4                            ; ---------------------------------------------------------------------------
000669B4                            ; Compressed graphics - continue screen
000669B4                            ; ---------------------------------------------------------------------------
000669B4                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00066C64                            		even
00066C64                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00066E9E                            		even
00066E9E                            ; ---------------------------------------------------------------------------
00066E9E                            ; Compressed graphics - animals
00066E9E                            ; ---------------------------------------------------------------------------
00066E9E                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00066FF6                            		even
00066FF6                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00067152                            		even
00067152                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
000672CE                            		even
000672CE                            Nem_Seal:	incbin	artnem\seal.bin		; seal
000673EA                            		even
000673EA                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00067520                            		even
00067520                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0006765A                            		even
0006765A                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000677B6                            		even
000677B6                            ; ---------------------------------------------------------------------------
000677B6                            ; Compressed graphics - primary patterns and block mappings
000677B6                            ; ---------------------------------------------------------------------------
000677B6                            Blk16_Title:	incbin	map16\titlebg.bin
000679F4                            		even
000679F4                            Blk256_Title:	incbin	map256\titlebg.bin
00067B98                            		even
00067B98                            Blk16_GHZ:	incbin	"map16\map16 128\ghz.bin"
000681BE                            		even
000681BE                            Nem_GHZ:		incbin	artnem\8x8ghzkos.bin	 ; New GHZ file.
0006A1DA                            				even
0006A1DA                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1kos.bin; GHZ primary patterns
0006B642                            		even
0006B642                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2kos.bin; GHZ secondary patterns
0006C904                            		even
0006C904                            Blk16_TS:	incbin	map16\ts.bin
0006D2A4                            		even
0006D2A4                            Nem_TS_1st:	incbin	artnem\8x8ts1.bin; GHZ primary patterns
0006E8B6                            		even
0006E8B6                            Blk256_GHZ:	incbin	"map256\map256 128\ghz.bin"
0006EB32                            		even
0006EB32                            Blk16_LZ:	incbin	"map16\map16 128\lz.bin"
0006F018                            		even
0006F018                            Nem_LZ:		incbin	artnem\8x8lzkos.bin; LZ primary patterns
00070ABE 00                         		even
00070ABE                            Blk256_LZ:	incbin	"map256\map256 128\lz.bin"
00072F46                            		even
00072F46                            Blk16_MZ:	incbin	"map16\map16 128\mz.bin"
0007379E                            		even
0007379E                            Nem_MZ:		incbin	artnem\8x8mzkos.bin; MZ primary patterns
000758DA 00                         		even
000758DA                            Blk256_MZ:	incbin	"map256\map256 128\mz.bin"
00077012                            		even
00077012                            Blk16_SLZ:	incbin	"map16\map16 128\slz.bin"
00077A38                            		even
00077A38                            Nem_SLZ:	incbin	artnem\8x8slzkos.bin; SLZ primary patterns
0007A39E 00                         		even
0007A39E                            Blk256_SLZ:	incbin	"map256\map256 128\slz.bin"
0007C31A                            		even
0007C31A                            Blk16_SYZ:	incbin	"map16\map16 128\syz.bin"
0007CD30                            		even
0007CD30                            Nem_SYZ:	incbin	artnem\8x8syzkos.bin; SYZ primary patterns
0007F580                            		even
0007F580                            Blk256_SYZ:	incbin	"map256\map256 128\syz.bin"
0008186A                            		even
0008186A                            Blk16_SBZ:	incbin	"map16\map16 128\sbz.bin"
000825C8                            		even
000825C8                            Nem_SBZ:	incbin	artnem\8x8sbzkos.bin; SBZ primary patterns
000849BA 00                         		even
000849BA                            Blk256_SBZ:	incbin	"map256\map256 128\sbz.bin"
0008753E 00                         		even
0008753E                            Blk16_ABZ:	incbin	"LevelConverter\abz1\Blocks.bin"
000877DC                            		even
000877DC                            Nem_ABZ:	incbin	artnem\8x8abzkos.bin	; ABZ primary patterns
00087FCE                            		even
00087FCE                            Blk256_ABZ:	incbin	"LevelConverter\abz1\Chunks.bin"
00088156                            		even
00088156                            ; ---------------------------------------------------------------------------
00088156                            ; Act2
00088156                            ; ---------------------------------------------------------------------------
00088156                            Blk16_GHZ2:	incbin	"map16\map16 128 2\ghz2.bin"
00088406                            		even
00088406                            Nem_GHZ2:		incbin	artnem\8x8ghzkos_2.bin	 ; New GHZ file.
0008A326                            				even
0008A326                            Nem_GHZ2_1st:	incbin	artnem\8x8ghz12.bin; GHZ primary patterns
0008B986                            		even
0008B986                            Nem_GHZ2_2nd:	incbin	artnem\8x8ghz22kos.bin; GHZ secondary patterns
0008CC48                            		even
0008CC48                            Blk256_GHZ2:	incbin	"map256\map256 128 2\ghz2.bin"
0008CDAE                            		even
0008CDAE                            Blk16_LZ2:	incbin	"map16\map16 128 2\lz2.bin"
0008D294                            		even
0008D294                            Nem_LZ2:	incbin	artnem\8x8lz2kos.bin; LZ primary patterns
0008ED3A 00                         		even
0008ED3A                            Blk256_LZ2:	incbin	"map256\map256 128 2\lz2.bin"
000911C2                            		even
000911C2                            Blk16_MZ2:	incbin	"map16\map16 128 2\mz2.bin"
00091A1A                            		even
00091A1A                            Nem_MZ2:	incbin	artnem\8x8mz2kos.bin; MZ primary patterns
00093B56 00                         		even
00093B56                            Blk256_MZ2:	incbin	"map256\map256 128 2\mz2.bin"
0009528E                            		even
0009528E                            Blk16_SLZ2:	incbin	"map16\map16 128 2\slz2.bin"
00095CB4                            		even
00095CB4                            Nem_SLZ2:	incbin	artnem\8x8slz2kos.bin; SLZ primary patterns
0009861A 00                         		even
0009861A                            Blk256_SLZ2:	incbin	"map256\map256 128 2\slz2.bin"
0009A596                            		even
0009A596                            Blk16_SYZ2:	incbin	"map16\map16 128 2\syz2.bin"
0009AFAC                            		even
0009AFAC                            Nem_SYZ2:	incbin	artnem\8x8syz2kos.bin; SYZ primary patterns
0009D7FC                            		even
0009D7FC                            Blk256_SYZ2:	incbin	"map256\map256 128 2\syz2.bin"
0009FAE6                            		even
0009FAE6                            Blk16_SBZ2:	incbin	"map16\map16 128 2\sbz2.bin"
000A0844                            		even
000A0844                            Nem_SBZ2:	incbin	artnem\8x8sbz2kos.bin; SBZ primary patterns
000A2C36 00                         		even
000A2C36                            Blk256_SBZ2:	incbin	"map256\map256 128 2\sbz2.bin"
000A57BA 00                         		even
000A57BA                            Blk16_ABZ2:	incbin	"LevelConverter\abz2\Blocks.bin"
000A5A58                            		even
000A5A58                            Nem_ABZ2:	incbin	artnem\8x8abz2kos.bin	; ABZ primary patterns
000A624A                            		even
000A624A                            Blk256_ABZ2:	incbin	"LevelConverter\abz2\Chunks.bin"
000A63CC                            		even
000A63CC                            ; ---------------------------------------------------------------------------
000A63CC                            ; Act3
000A63CC                            ; ---------------------------------------------------------------------------
000A63CC                            Blk16_GHZ3:	incbin	"map16\map16 128 3\ghz3.bin"
000A667C                            		even
000A667C                            Nem_GHZ3:		incbin	artnem\8x8ghzkos_3.bin	 ; New GHZ file.
000A859C                            				even
000A859C                            Nem_GHZ3_1st:	incbin	artnem\8x8ghz13.bin; GHZ primary patterns
000A9BFC                            		even
000A9BFC                            Nem_GHZ3_2nd:	incbin	artnem\8x8ghz23kos.bin; GHZ secondary patterns
000AAEBE                            		even
000AAEBE                            Blk256_GHZ3:	incbin	"map256\map256 128 3\ghz3.bin"
000AB024                            		even
000AB024                            Blk16_LZ3:	incbin	"map16\map16 128 3\lz3.bin"
000AB50A                            		even
000AB50A                            Nem_LZ3:	incbin	artnem\8x8lz3kos.bin; LZ primary patterns
000ACFB0 00                         		even
000ACFB0                            Blk256_LZ3:	incbin	"map256\map256 128 3\lz3.bin"
000AF438                            		even
000AF438                            Blk16_MZ3:	incbin	"map16\map16 128 3\mz3.bin"
000AFC90                            		even
000AFC90                            Nem_MZ3:	incbin	artnem\8x8mz3kos.bin; MZ primary patterns
000B1DCC 00                         		even
000B1DCC                            Blk256_MZ3:	incbin	"map256\map256 128 3\mz3.bin"
000B3504                            		even
000B3504                            Blk16_SLZ3:	incbin	"map16\map16 128 3\slz3.bin"
000B3F2A                            		even
000B3F2A                            Nem_SLZ3:	incbin	artnem\8x8slz3kos.bin; SLZ primary patterns
000B6890 00                         		even
000B6890                            Blk256_SLZ3:	incbin	"map256\map256 128 3\slz3.bin"
000B880C                            		even
000B880C                            Blk16_SYZ3:	incbin	"map16\map16 128 3\syz3.bin"
000B9222                            		even
000B9222                            Nem_SYZ3:	incbin	artnem\8x8syz3kos.bin; SYZ primary patterns
000BBA72                            		even
000BBA72                            Blk256_SYZ3:	incbin	"map256\map256 128 3\syz3.bin"
000BDD5C                            		even
000BDD5C                            Blk16_SBZ3:	incbin	"map16\map16 128 3\sbz3.bin"
000BEABA                            		even
000BEABA                            Nem_SBZ3:	incbin	artnem\8x8sbz3kos.bin; SBZ primary patterns
000C0EAC 00                         		even
000C0EAC                            Blk256_SBZ3:	incbin	"map256\map256 128 3\sbz3.bin"
000C3A30 00                         		even
000C3A30                            Blk16_ABZ3:	incbin	"LevelConverter\abz2\Blocks.bin"
000C3CCE                            		even
000C3CCE                            Nem_ABZ3:	incbin	artnem\8x8abz3kos.bin	; ABZ primary patterns
000C44C0                            		even
000C44C0                            Blk256_ABZ3:	incbin	"LevelConverter\abz2\Chunks.bin"
000C4642                            		even
000C4642                            ; ---------------------------------------------------------------------------
000C4642                            ; Kosiniski Compressed graphics - level art
000C4642                            ; ---------------------------------------------------------------------------
000C4642                            ;Kos_GHZ:	incbin	artkos\8x8ghz_kos.bin	; GHZ primary patterns
000C4642                            ;		even
000C4642                            ;Kos_LZ:	incbin	artkos\8x8lz_kos.bin	; LZ primary patterns
000C4642                            ;		even
000C4642                            ;Kos_MZ:	incbin	artkos\8x8mz_kos.bin	; MZ primary patterns
000C4642                            ;		even
000C4642                            ;Kos_SYZ:	incbin	artkos\8x8syz_kos.bin	; SYZ primary patterns
000C4642                            ;		even
000C4642                            ;Kos_SLZ:	incbin	artkos\8x8slz_kos.bin	; SLZ primary patterns
000C4642                            ;		even
000C4642                            ;Kos_SBZ:	incbin	artkos\8x8sbz_kos.bin	; SBZ primary patterns
000C4642                            ;		even
000C4642                            ;Kos_ABZ:	incbin	artkos\8x8abz_kos.bin	; ABZ primary patterns
000C4642                            ;		even
000C4642                            ;Kos_GHZ_2nd:	incbin	artnem\8x8ghz2_kos.bin; GHZ secondary patterns
000C4642                            ;		even
000C4642                            ; ---------------------------------------------------------------------------
000C4642                            ; Compressed graphics - bosses and ending sequence
000C4642                            ; ---------------------------------------------------------------------------
000C4642                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000C4EA6                            		even
000C4EA6                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000C5190                            		even
000C5190                            Nem_Rocket:	incbin	artnem\s4rocket.bin	; boss add-ons and weapons
000C56A4                            		even
000C56A4                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000C5F28                            		even
000C5F28                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000C6754                            		even
000C6754                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000C6EBC                            		even
000C6EBC                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000C743C                            		even
000C743C                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000C755C                            		even
000C755C                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000C775A                            		even
000C775A                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000C8938                            		even
000C8938                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000C927C                            		even
000C927C                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000C9652                            		even
000C9652                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
000C9BE2                            		even
000C9BE2                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000C9E6A                            		even
000C9E6A                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000CA0AC                            		even
000CA0AC                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000CA376 00                         		even
000CA376                            		incbin	misc\padding2.bin
000CA47A                            		even
000CA47A                            ; ---------------------------------------------------------------------------
000CA47A                            ; Collision data
000CA47A                            ; ---------------------------------------------------------------------------
000CA47A                            AngleMap:	incbin	"collide\collide 128\anglemap.bin"	; floor angle map
000CA57A                            		even
000CA57A                            CollArray1:	incbin	"collide\collide 128\carray_n.bin"	; normal collision array
000CB57A                            		even
000CB57A                            CollArray2:	incbin	"collide\collide 128\carray_r.bin"	; rotated collision array
000CC57A                            		even
000CC57A                            Col_GHZ_1:	incbin	"collide\collide 128\ghz1.bin"	; GHZ index 1
000CC638 00                         		even
000CC638                            Col_GHZ_2:	incbin	"collide\collide 128\ghz2.bin"	; GHZ index 2
000CC6F6 00                         		even
000CC6F6                            Col_LZ_1:	incbin	"collide\collide 128\lz1.bin"	; LZ index 1
000CC7BA                            		even
000CC7BA                            Col_LZ_2:	incbin	"collide\collide 128\lz2.bin"		; LZ index 2
000CC87E                            		even
000CC87E                            Col_MZ_1:	incbin	"collide\collide 128\mz1.bin"		; MZ index 1
000CCA0E                            		even
000CCA0E                            Col_MZ_2:	incbin	"collide\collide 128\mz2.bin"		; MZ index 2
000CCB9E                            		even
000CCB9E                            Col_SLZ_1:	incbin	"collide\collide 128\slz1.bin"	; SLZ index 1
000CCD3C                            		even
000CCD3C                            Col_SLZ_2:	incbin	"collide\collide 128\slz2.bin"	; SLZ index 2
000CCEDA                            		even
000CCEDA                            Col_SYZ_1:	incbin	"collide\collide 128\syz1.bin"	; SYZ index 1
000CD0CE                            		even
000CD0CE                            Col_SYZ_2:	incbin	"collide\collide 128\syz2.bin"	; SYZ index 2
000CD2C2                            		even
000CD2C2                            Col_SBZ_1:	incbin	"collide\collide 128\sbz1.bin"	; SBZ index 1
000CD51A                            		even
000CD51A                            Col_SBZ_2:	incbin	"collide\collide 128\sbz2.bin"	; SBZ index 2
000CD772                            		even
000CD772                            Col_ABZ_1:	incbin	"LevelConverter\abz1\Indexes1.bin"		; ABZ index
000CD77E                            		even
000CD77E                            Col_ABZ_2:	incbin	"LevelConverter\abz1\Indexes2.bin"		; ABZ index
000CD78A                            		even
000CD78A                            ; ---------------------------------------------------------------------------
000CD78A                            ; Special layouts
000CD78A                            ; ---------------------------------------------------------------------------
000CD78A                            SS_1:		incbin	sslayout\1.bin
000CDA04                            		even
000CDA04                            SS_2:		incbin	sslayout\2.bin
000CDE16                            		even
000CDE16                            SS_3:		incbin	sslayout\3.bin
000CE172                            		even
000CE172                            SS_4:		incbin	sslayout\4.bin
000CE64C                            		even
000CE64C                            SS_5:		incbin	sslayout\5.bin
000CEB1E                            		even
000CEB1E                            SS_6:		incbin	sslayout\6.bin
000CEE2E                            		even
000CEE2E                            SS_7:		incbin	sslayout\7.bin
000CF12C                            		even
000CF12C                            ; ---------------------------------------------------------------------------
000CF12C                            ; Animated uncompressed graphics
000CF12C                            ; ---------------------------------------------------------------------------
000CF12C                            Art_GhzWater:	incbin	#artunc\ghzwater.bin	; GHZ waterfall
000CF32C                            		even
000CF32C                            Art_GhzFlower1:	incbin	#artunc\ghzflowl.bin	; GHZ large flower
000CF72C                            		even
000CF72C                            Art_GhzFlower2:	incbin	#artunc\ghzflows.bin	; GHZ small flower
000CFBAC                            		even
000CFBAC                            Art_MzLava1:	incbin	#artunc\mzlava1.bin	; MZ lava surface
000CFEAC                            		even
000CFEAC                            Art_MzLava2:	incbin	#artunc\mzlava2.bin	; MZ lava
000D04AC                            		even
000D04AC                            Art_MzTorch:	incbin	#artunc\mztorch.bin	; MZ torch in background
000D07AC                            		even
000D07AC                            Art_SbzSmoke:	incbin	#artunc\sbzsmoke.bin	; SBZ smoke in background
000D122C                            		even
000D122C                            
000D122C                            ; ---------------------------------------------------------------------------
000D122C                            ; Level	layout index
000D122C                            ; ---------------------------------------------------------------------------
000D122C 0000 0000 0000 0000 0000+  Level_Index:	dc.l Level_GHZ1, Level_GHZbg, byte_68D70
000D1238 0000 0000 0000 0000 0000+  		dc.l Level_GHZ2, Level_GHZbg, byte_68E3C
000D1244 0000 0000 0000 0000 0000+  		dc.l Level_GHZ3, Level_GHZbg, byte_68F84
000D1250 0000 0000 0000 0000 0000+  		dc.l byte_68F88, byte_68F88, byte_68F88
000D125C 0000 0000 0000 0000 0000+  		dc.l Level_LZ1, Level_LZbg, byte_69190
000D1268 0000 0000 0000 0000 0000+  		dc.l Level_LZ2, Level_LZbg, byte_6922E
000D1274 0000 0000 0000 0000 0000+  		dc.l Level_LZ3, Level_LZbg, byte_6934C
000D1280 0000 0000 0000 0000 0000+  		dc.l Level_SBZ3, Level_LZbg, byte_6940A
000D128C 0000 0000 0000 0000 0000+  		dc.l Level_MZ1, Level_MZ1bg, Level_MZ1
000D1298 0000 0000 0000 0000 0000+  		dc.l Level_MZ2, Level_MZ2bg, byte_6965C
000D12A4 0000 0000 0000 0000 0000+  		dc.l Level_MZ3, Level_MZ3bg, byte_697E6
000D12B0 0000 0000 0000 0000 0000+  		dc.l byte_697EA, byte_697EA, byte_697EA
000D12BC 0000 0000 0000 0000 0000+  		dc.l Level_SLZ1, Level_SLZbg, byte_69B84
000D12C8 0000 0000 0000 0000 0000+  		dc.l Level_SLZ2, Level_SLZbg, byte_69B84
000D12D4 0000 0000 0000 0000 0000+  		dc.l Level_SLZ3, Level_SLZbg, byte_69B84
000D12E0 0000 0000 0000 0000 0000+  		dc.l byte_69B84, byte_69B84, byte_69B84
000D12EC 0000 0000 0000 0000 0000+  		dc.l Level_SYZ1, Level_SYZbg, byte_69C7E
000D12F8 0000 0000 0000 0000 0000+  		dc.l Level_SYZ2, Level_SYZbg, byte_69D86
000D1304 0000 0000 0000 0000 0000+  		dc.l Level_SYZ3, Level_SYZbg, byte_69EE4
000D1310 0000 0000 0000 0000 0000+  		dc.l byte_69EE8, byte_69EE8, byte_69EE8
000D131C 0000 0000 0000 0000 0000+  		dc.l Level_SBZ1, Level_SBZ1bg, Level_SBZ1bg
000D1328 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, Level_SBZ2bg
000D1334 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, byte_6A2F8
000D1340 0000 0000 0000 0000 0000+  		dc.l byte_6A2FC, byte_6A2FC, byte_6A2FC
000D134C 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
000D1358 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
000D1364 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
000D1370 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
000D137C 0000 0000 0000 0000 0000+  		dc.l Level_ABZ1, Level_ABZbg, byte_6A320
000D1388 0000 0000 0000 0000 0000+  		dc.l Level_ABZ2, Level_ABZbg, byte_6A320
000D1394 0000 0000 0000 0000 0000+  		dc.l Level_ABZ3, Level_ABZbg, byte_6A320
000D13A0 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
000D13AC                            
000D13AC                            Level_GHZ1:	incbin	"levels\levels 128\ghz1.bin"
000D23AC                            		even
000D23AC 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000D23B0                            Level_GHZ2:	incbin	"levels\levels 128\ghz2.bin"
000D33B0                            		even
000D33B0 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000D33B4                            Level_GHZ3:	incbin	"levels\levels 128\ghz3.bin"
000D43B4                            		even
000D43B4                            Level_GHZbg:	incbin	"levels\levels 128\ghzbg.bin"
000D43D6                            		even
000D43D6 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000D43DA 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000D43DE                            
000D43DE                            Level_LZ1:	incbin	"levels\levels 128\lz1.bin"
000D53DE                            		even
000D53DE                            Level_LZbg:	incbin	"levels\levels 128\lzbg.bin"
000D54E0                            		even
000D54E0 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000D54E4                            Level_LZ2:	incbin	"levels\levels 128\lz2.bin"
000D64E4                            		even
000D64E4 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
000D64E8                            Level_LZ3:	incbin	"levels\levels 128\lz3.bin"
000D74E8                            		even
000D74E8                            Level_LZ3_WALL:	incbin	"levels\levels 128\lz3_wall.bin"	; MJ: layout with LZ's wall change (When the switch is pressed) data is not in ram anymore,
000D84E8                            		even
000D84E8 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
000D84EC                            Level_SBZ3:	incbin	"levels\levels 128\sbz3.bin"
000D94EC                            		even
000D94EC 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000D94F0                            
000D94F0                            Level_MZ1:	incbin	"levels\levels 128\mz1.bin"
000DA4F0                            		even
000DA4F0                            Level_MZ1bg:	incbin	"levels\levels 128\mz1bg.bin"
000DA56A                            		even
000DA56A                            Level_MZ2:	incbin	"levels\levels 128\mz2.bin"
000DB56A                            		even
000DB56A                            Level_MZ2bg:	incbin	"levels\levels 128\mz2bg.bin"
000DB5FC                            		even
000DB5FC 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
000DB600                            Level_MZ3:	incbin	"levels\levels 128\mz3.bin"
000DC600                            		even
000DC600                            Level_MZ3bg:	incbin	"levels\levels 128\mz3bg.bin"
000DC6A4                            		even
000DC6A4 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000DC6A8 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000DC6AC                            
000DC6AC                            Level_SLZ1:	incbin	"levels\levels 128\slz1.bin"
000DD6AC                            		even
000DD6AC                            Level_SLZbg:	incbin	"levels\levels 128\slzbg.bin"
000DD726                            		even
000DD726                            Level_SLZ2:	incbin	"levels\levels 128\slz2.bin"
000DE726                            		even
000DE726                            Level_SLZ3:	incbin	"levels\levels 128\slz3.bin"
000DF726                            		even
000DF726 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000DF72A                            
000DF72A                            Level_SYZ1:	incbin	"levels\levels 128\syz1.bin"
000E072A                            		even
000E072A                            Level_SYZbg:	incbin	"levels\levels 128\syzbg.bin"
000E0764                            		even
000E0764 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
000E0768                            Level_SYZ2:	incbin	"levels\levels 128\syz2.bin"
000E1768                            		even
000E1768 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
000E176C                            Level_SYZ3:	incbin	"levels\levels 128\syz3.bin"
000E276C                            		even
000E276C 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000E2770 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000E2774                            
000E2774                            Level_SBZ1:	incbin	"levels\levels 128\sbz1.bin"
000E3774                            		even
000E3774                            Level_SBZ1bg:	incbin	"levels\levels 128\sbz1bg.bin"
000E37B2                            		even
000E37B2                            Level_SBZ2:	incbin	"levels\levels 128\sbz2.bin"
000E47B2                            		even
000E47B2                            Level_SBZ2bg:	incbin	"levels\levels 128\sbz2bg.bin"
000E491C                            		even
000E491C 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000E4920 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000E4924                            Level_End:	incbin	"levels\levels 128\ending.bin"
000E5924                            		even
000E5924 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000E5928                            Level_ABZ1:	incbin	"LevelConverter\abz1\Layout.bin"
000E5998                            		even
000E5998                            Level_ABZ2:	incbin	"LevelConverter\abz2\Layout.bin"
000E5A04                            		even
000E5A04                            Level_ABZ3:	incbin	"LevelConverter\abz2\Layout.bin"
000E5A70                            		even
000E5A70                            Level_ABZbg:	incbin	levels\abzbg.bin
000E5B3A                            		even
000E5B3A                            
000E5B3A                            ; ---------------------------------------------------------------------------
000E5B3A                            ; Animated uncompressed giant ring graphics
000E5B3A                            ; ---------------------------------------------------------------------------
000E5B3A                            Art_BigRing:	incbin	#artunc\bigring.bin
000E677A                            		even
000E677A                            
000E677A                            		incbin	misc\padding3.bin
000E6816                            		even
000E6816                            
000E6816                            ; ---------------------------------------------------------------------------
000E6816                            ; Sprite locations index
000E6816                            ; ---------------------------------------------------------------------------
000E6816 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E681A 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E681E 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6822 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6826 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E682A 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E682E 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6832 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6836 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E683A 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E683E 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6842 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6846 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E684A 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E684E 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6852 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6856 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E685A 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E685E 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6862 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6866 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E686A 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E686E 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6872 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6876 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E687A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E687E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6882 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6886 0000 0000                  		dc.w ObjPos_ABZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E688A 0000 0000                  		dc.w ObjPos_ABZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E688E 0000 0000                  		dc.w ObjPos_ABZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6892                            ObjPos_LZxpf_Index:		
000E6892 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
000E6896 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
000E689A 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
000E689E 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
000E68A2                            ObjPos_SBZ1pf_Index:
000E68A2 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
000E68A6 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
000E68AA 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
000E68AE 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
000E68B2 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000E68B8                            ObjPos_GHZ1:	incbin	"LevelConverter\Green Hill Zone Act 1\Objects.bin"
000E6DDA                            		even
000E6DDA                            ObjPos_GHZ2:	incbin	"LevelConverter\Green Hill Zone Act 2\Objects.bin"
000E73AA                            		even
000E73AA                            ObjPos_GHZ3:	incbin	"LevelConverter\Green Hill Zone Act 3\Objects.bin"
000E7A76                            		even
000E7A76                            ObjPos_LZ1:	incbin	"LevelConverter\Labyrinth Zone Act 1\Objects.bin"
000E7EE4                            		even
000E7EE4                            ObjPos_LZ2:	incbin	"LevelConverter\Labyrinth Zone Act 2\Objects.bin"
000E8226                            		even
000E8226                            ObjPos_LZ3:	incbin	"LevelConverter\Labyrinth Zone Act 3\Objects.bin"
000E8808                            		even
000E8808                            ObjPos_SBZ3:	incbin	"LevelConverter\Scrap Brain Zone Act 3\Objects.bin"
000E8CA0                            		even
000E8CA0                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000E8CD2                            		even
000E8CD2                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000E8D04                            		even
000E8D04                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000E8D36                            		even
000E8D36                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000E8D68                            		even
000E8D68                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000E8DB2                            		even
000E8DB2                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000E8DF0                            		even
000E8DF0                            ObjPos_MZ1:	incbin	"LevelConverter\Marble Zone Act 1\Objects.bin"
000E915C                            		even
000E915C                            ObjPos_MZ2:	incbin	"LevelConverter\Marble Zone Act 2\Objects.bin"
000E9606                            		even
000E9606                            ObjPos_MZ3:	incbin	"LevelConverter\Marble Zone Act 3\Objects.bin"
000E9B7C                            		even
000E9B7C                            ObjPos_SLZ1:	incbin	"LevelConverter\Star Light Zone Act 1\Objects.bin"
000EA0D4                            		even
000EA0D4                            ObjPos_SLZ2:	incbin	"LevelConverter\Star Light Zone Act 2\Objects.bin"
000EA590                            		even
000EA590                            ObjPos_SLZ3:	incbin	"LevelConverter\Star Light Zone Act 3\Objects.bin"
000EABBA                            		even
000EABBA                            ObjPos_SYZ1:	incbin	"LevelConverter\Spring Yard Zone Act 1\Objects.bin"
000EB046                            		even
000EB046                            ObjPos_SYZ2:	incbin	"LevelConverter\Spring Yard Zone Act 2\Objects.bin"
000EB5B0                            		even
000EB5B0                            ObjPos_SYZ3:	incbin	"LevelConverter\Spring Yard Zone Act 3\Objects.bin"
000EBBB6                            		even
000EBBB6                            ObjPos_SBZ1:	incbin	"LevelConverter\Scrap Brain Zone Act 1\Objects.bin"
000EC2F4                            		even
000EC2F4                            ObjPos_SBZ2:	incbin	"LevelConverter\Scrap Brain Zone Act 2\Objects.bin"
000EC9D2                            		even
000EC9D2                            ObjPos_FZ:	incbin	"LevelConverter\Final Zone\Objects.bin"
000EC9E4                            		even
000EC9E4                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000ECA16                            		even
000ECA16                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000ECA48                            		even
000ECA48                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000ECA7A                            		even
000ECA7A                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000ECAAC                            		even
000ECAAC                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000ECADE                            		even
000ECADE                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000ECB16                            		even
000ECB16                            ObjPos_End:	incbin	"LevelConverter\Ending\Objects.bin"
000ECC72                            		even
000ECC72                            ObjPos_ABZ1:	incbin	"LevelConverter\abz1\Objects.bin"
000ECC84                            		even
000ECC84                            ObjPos_ABZ2:	incbin	"LevelConverter\abz2\Objects.bin"
000ECC8A                            		even
000ECC8A                            ObjPos_ABZ3:	incbin	"LevelConverter\abz2\Objects.bin"
000ECC90                            		even
000ECC90 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000ECC96                            ; ---------------------------------------------------------------------------
000ECC96                            		incbin	misc\padding4.bin
000ED2C0                            		even
000ED2C0                            
000ED2C0                            	include	'#screens\DAC_Player.asm'
000ED2C0                            DAC_Player:
000ED2C0 70E4                       	moveq	#$FFFFFFE4,d0
000ED2C2 4EB8 325C                  	jsr	PlaySound_Special
000ED2C6                            
000ED2C6 4EB8 3754                  	jsr	ClearPLC
000ED2CA 4EB8 4528                  	jsr	Pal_FadeFrom
000ED2CE 4DF9 00C0 0004             	lea	($C00004).l,a6
000ED2D4                            
000ED2D4                            	; store VDP registers
000ED2D4 3CBC 8004                  	move.w	#$8004,(a6)	; $00
000ED2D8 3CBC 8230                  	move.w	#$8230,(a6)	; $02, set Plane A nametable offset in VRAM
000ED2DC 3CBC 8407                  	move.w	#$8407,(a6)	; $04, set Plane B nametable offset in VRAM
000ED2E0 3CBC 8700                  	move.w	#$8700,(a6)     ; $07, set Blackdrop Color
000ED2E4 3CBC 8B00                  	move.w	#$8B00,(a6)	; $0B, set Scrolling Mode
000ED2E8                            
000ED2E8 4238 F64E                  	clr.b	($FFFFF64E).w	; clear water palette state
000ED2EC 46FC 2700                  	move	#$2700,sr	; disable interrupts
000ED2F0 33FC 8134 00C0 0004        	move.w	#$8134,($C00004).l
000ED2F8 4EB8 3084                  	jsr	ClearScreen
000ED2FC                            
000ED2FC 4DF9 00C0 0000             	lea	($C00000).l,a6
000ED30C 41F9 0002 9CCC             	lea	(Art_Text).l,a0
000ED312 7216                       	moveq	#$16,d1
000ED314 2C98                       @0	move.l	(a0)+,(a6)
000ED316 2C98                       	move.l	(a0)+,(a6)
000ED318 2C98                       	move.l	(a0)+,(a6)
000ED31A 2C98                       	move.l	(a0)+,(a6)
000ED31C 2C98                       	move.l	(a0)+,(a6)
000ED31E 2C98                       	move.l	(a0)+,(a6)
000ED320 2C98                       	move.l	(a0)+,(a6)
000ED322 2C98                       	move.l	(a0)+,(a6)
000ED324 51C9 FFEE                          dbf	d1,@0
000ED328                            
000ED328 7003                       	moveq	#3,d0		; load Sonic's pallet
000ED32A 4EB8 47FA                  	jsr	PalLoad1
000ED32E 0838 0007 F604             	btst	#7,($FFFFF604).w ; is Start button pressed?
000ED334 6700                       	beq.s	DAC_DoNothing	; if not, branch
000ED336 11FC 0000 F600             	move.b	#0,($FFFFF600).w
000ED33C 4E75                       	rts
000ED33E                            DAC_DoNothing:
000ED33E 4EB8 446E                  	jsr	Pal_FadeTo
000ED342                            
000ED342 33FC 8174 00C0 0004        	move.w	#$8174,($C00004).l
000ED34A 7C80                       	moveq	#$FFFFFF80,d6	; start sample
000ED34C 2E06                       	move.l	d6,d7
000ED34E 7600                       	moveq	#0,d3
000ED350 7A00                       	moveq	#0,d5
000ED352 4879 0000 0000             	pea	Player_MainProcess
000ED358                            
000ED358                            ; ==========================================================
000ED358                            
000ED358                            Player_Redraw:
000ED358                            
000ED358                            	; Draw Cursor
000ED358 7001                       	moveq	#1,d0		; cursor pattern
000ED35A 4A45                       	tst.w	d5
000ED35C 6700                       	beq.s	@2
000ED35E 4840                       	swap	d0
000ED36A 3C80                       	move.w	d0,(a6)
000ED36C 4840                       	swap	d0
000ED378 3C80                       	move.w	d0,(a6)
000ED37A                            
000ED37A                            	; Draw Sample numbers
000ED384 3006                       	move.w	d6,d0		; load PCM A Number
000ED386 6100                       	bsr.s	@Draw
000ED388 3007                       	move.w	d7,d0		; load PCM B Number
000ED394 6100                       	bsr.s	@Draw
000ED396                            	
000ED396                            	; Debug draw
000ED3A0 3004                       	move.w	d4,d0
000ED3A2                            
000ED3A2                            @Draw:
000ED3A2 3200                       	move.w	d0,d1
000ED3A4 E809                       	lsr.b	#4,d1
000ED3A6 0241 000F                  	andi.w	#$F,d1
000ED3AA 0C41 000A                  	cmpi.w	#$A,d1
000ED3AE 6500                       	bcs.s	@0
000ED3B0 5841                       	addq.w	#4,d1
000ED3B2 5241                       @0	addq.w	#1,d1
000ED3B4 3C81                       	move.w	d1,(a6)
000ED3B6                            
000ED3B6 3200                       	move.w	d0,d1
000ED3B8 0241 000F                  	andi.w	#$F,d1
000ED3BC 0C41 000A                  	cmpi.w	#$A,d1
000ED3C0 6500                       	bcs.s	@1
000ED3C2 5841                       	addq.w	#4,d1
000ED3C4 5241                       @1	addq.w	#1,d1
000ED3C6 3C81                       	move.w	d1,(a6)
000ED3C8 4E75                       	rts
000ED3CA                            
000ED3CA                            ; ==========================================================
000ED3CA                            
000ED3CA                            Player_MainProcess:
000ED3CA 11FC 0002 F62A             	move.b	#2,($FFFFF62A).w
000ED3D0 4EB9 0000 8D72             	jsr	DelayProgram
000ED3D6 6100 0000                  	bsr	DebugShit
000ED3DA 1238 F605                  	move.b	Joypad|Press,d1
000ED3DE 67EA                       	beq.s	Player_MainProcess
000ED3E0 6A00                       	bpl.s	@ControlPlayer
000ED3E2 4E75                       	rts
000ED3E4                            
000ED3E4                            @ControlPlayer:     
000ED3E4 487A FFE4                  	pea	Player_MainProcess
000ED3E8 74FF                       	moveq	#-1,d2
000ED3EA 0801 0002                  	btst	#iLeft,d1
000ED3EE 6600                       	bne.s	@ChangeNumber
000ED3F0 0801 0003                  	btst	#iRight,d1
000ED3F4 6700                       	beq.s	@ChangeCursor
000ED3F6 7401                       	moveq	#1,d2
000ED3F8                            
000ED3F8                            @ChangeNumber:  
000ED3F8 4A45                       	tst.w	d5
000ED3FA 6700                       	beq.s	@0
000ED3FC DE42                       	add.w	d2,d7		; PCM B
000ED3FE 6000 FF58                  	bra	Player_Redraw
000ED402 DC42                       @0	add.w	d2,d6		; PCM A
000ED404 6000 FF52                  	bra	Player_Redraw
000ED408                            
000ED408                            @ChangeCursor:
000ED408 1401                       	move.b	d1,d2
000ED40A 0202 0003                  	andi.b	#Up+Down,d2
000ED40E 6700                       	beq.s	@ChangeMode
000ED410 4645                       	not.w	d5
000ED412 6000 FF44                  	bra	Player_Redraw
000ED416                            
000ED416                            @ChangeMode:
000ED416 0801 0006                  	btst	#iA,d1
000ED41A 6700                       	beq.s	@PlaySample
000ED41C 4643                       	not.w	d3
000ED41E 3003                       	move.w	d3,d0
000ED420 4EF8 31DC                  	jmp	Set_MegaPCM_Mode
000ED424                            
000ED424                            @PlaySample:
000ED424 4A45                       	tst.w	d5
000ED426 6700                       	beq.s	@1
000ED428 3007                       	move.w	d7,d0
000ED42A 4EF8 31B0                  	jmp	PlaySample_2
000ED42E 3006                       @1	move.w	d6,d0
000ED430 4EF8 3184                  	jmp	PlaySample
000ED434                            
000ED434                            ; ==========================================================
000ED434                            DebugShit:
000ED434 33FC 0100 00A1 1100        	move.w	#$100,($A11100).l	; stop the Z80
000ED43C 0839 0000 00A1 1100        @0	btst	#0,($A11100).l
000ED444 66F6                       	bne.s	@0
000ED446 1839 00A0 1FF2             	move.b	$A01ff2,d4
000ED44C 33FC 0000 00A1 1100        	move.w	#0,($A11100).l
000ED454 6000 FF02                  	bra	Player_Redraw
000ED454 6000 FF02                  	bra	Player_Redraw
000ED458                            	
000ED458                            ;	include	'_inc\ASCII texts.asm'
000ED458                            ;	include '_inc\Selchar.asm'
000ED458                            ;	include '_inc\pausemenu.asm'
000ED458                            ; end of 'ROM'
000ED458                            	include	"SSRG\SSRG.asm"
000ED458                            ; ===========================================================================
000ED458                            ; ---------------------------------------------------------------------------
000ED458                            ; SSRG Splash Screen
000ED458                            ; ---------------------------------------------------------------------------
000ED458                            
000ED458                            SSRGScreen:
000ED458 70E4                       		moveq	#$FFFFFFE4,d0				; set music ID to "stop music"
000ED45A 4EB8 325C                  		jsr	PlaySound_Special			; play ID
000ED45E 4EB8 3754                  		jsr	ClearPLC				; clear pattern load cues list
000ED462 4EB8 4528                  		jsr	Pal_FadeFrom				; fade palettes out
000ED466 4EB8 3084                  		jsr	ClearScreen				; clear the plane mappings
000ED46A 43F8 D000                  		lea	($FFFFD000).w,a1			; load object ram address to a1
000ED46E 7000                       		moveq	#$00,d0					; clear d0
000ED470 323C 01FF                  		move.w	#$01FF,d1				; set repeat times
000ED474                            
000ED474                            SRG_ClearObjects:
000ED474 22C0                       		move.l	d0,(a1)+				; clear object ram
000ED476 22C0                       		move.l	d0,(a1)+				; ''
000ED478 22C0                       		move.l	d0,(a1)+				; ''
000ED47A 22C0                       		move.l	d0,(a1)+				; ''
000ED47C 51C9 FFF6                  		dbf	d1,SRG_ClearObjects			; repeat til all object slots are cleared
000ED480 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
000ED484 4DF9 00C0 0004             		lea	($C00004).l,a6				; load VDP address port address
000ED48A 3CBC 8700                  		move.w	#$8700,(a6)				; set backdrop colour to the very first colour
000ED48E 3CBC 8B03                  		move.w	#$8B03,(a6)				; set scroll mode to horizontal sliced (by line)
000ED492 21FC FFF8 FFD4 F616        		move.l	#$FFF8FFD4,($FFFFF616).w		; set Y scroll positions
000ED49A 23FC 4020 0000 00C0 0004   		move.l	#$40200000,($C00004).l			; set VDP to V-Ram write mode with address
000ED4A4 41FA 0000                  		lea	ArtMain_SSRG(pc),a0			; load compressed art address
000ED4A8 4EB8 3596                  		jsr	NemDec					; decompress and dump
000ED4AC 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l			; set VDP to V-Ram write mode with address
000ED4B6 41FA 0000                  		lea	ArtSquare_SSRG(pc),a0			; load compressed art address
000ED4BA 4EB8 3596                  		jsr	NemDec					; decompress and dump
000ED4BE 23FC 4000 0002 00C0 0004   		move.l	#$40000002,($C00004).l			; set VDP to V-Ram write mode with address
000ED4C8 41FA 0000                  		lea	ArtSonic_SSRG(pc),a0			; load compressed art address
000ED4CC 4EB8 3596                  		jsr	NemDec					; decompress and dump
000ED4D0 23FC 5000 0002 00C0 0004   		move.l	#$50000002,($C00004).l			; set VDP to V-Ram write mode with address
000ED4DA 41FA 0000                  		lea	ArtLink_SSRG(pc),a0			; load compressed art address
000ED4DE 4EB8 3596                  		jsr	NemDec					; decompress and dump
000ED4E2 41FA 0000                  		lea	MapLink_SSRG(pc),a0			; load compressed mappings address
000ED4E6 43F9 FFFF 0000             		lea	($FFFF0000).l,a1			; set temporary ram space to dump to
000ED4EC 4EB8 3A26                  		jsr	KosDec					; decompress and dump
000ED4F0 4BF9 FFFF 0000             		lea	($FFFF0000).l,a5			; load mappings to read
000ED4F6 701F                       		moveq	#$1F,d0					; set number of columns
000ED4F8 7200                       		moveq	#$00,d1					; set number of rows
000ED4FA 243C 4C08 0003             		move.l	#$4C080003,d2				; set to write to FG plane
000ED500 6100 0000                  		bsr	MapScreen				; write to the map plane
000ED504 41FA 0000                  		lea	MapMain_SSRG(pc),a0			; load compressed mappings address
000ED508 43F9 FFFF 0000             		lea	($FFFF0000).l,a1			; set temporary ram space to dump to
000ED50E 4EB8 3A26                  		jsr	KosDec					; decompress and dump
000ED512 41FA 0000                  		lea	MapSquare_SSRG(pc),a0			; load compressed mappings address
000ED516 43F9 FFFF 4000             		lea	($FFFF4000).l,a1			; set temporary ram space to dump to
000ED51C 4EB8 3A26                  		jsr	KosDec					; decompress and dump
000ED520 41FA 0000                  		lea	Pal_SSRG(pc),a0				; load palette address to a0
000ED524 43F8 FB80                  		lea	($FFFFFB80).w,a1			; load palette buffer address to a1
000ED528 7E07                       		moveq	#$07,d7					; set repeat times
000ED52A                            
000ED52A                            SRG_DumpPal:
000ED52A 22D8                       		move.l	(a0)+,(a1)+				; dump palette
000ED52C 22D8                       		move.l	(a0)+,(a1)+				; ''
000ED52E 22D8                       		move.l	(a0)+,(a1)+				; ''
000ED530 22D8                       		move.l	(a0)+,(a1)+				; ''
000ED532 51CF FFF6                  		dbf	d7,SRG_DumpPal				; repeat until done
000ED536 43F8 D000                  		lea	($FFFFD000).w,a1			; load object ram to a1
000ED53A 12BC 0001                  		move.b	#$01,(a1)				; set "S"
000ED53E 137C 0002 0040             		move.b	#$02,$40(a1)				; set "S"
000ED544 137C 0003 0080             		move.b	#$03,$80(a1)				; set "R"
000ED54A 137C 0004 00C0             		move.b	#$04,$C0(a1)				; set "G"
000ED550 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
000ED554 4EB8 446E                  		jsr	Pal_FadeTo				; fade palettes in
000ED558 7000                       		moveq	#$00,d0					; clear d0
000ED55A 23C0 FFFF 7800             		move.l	d0,($FFFF7800).l			; reset SSRG timer/flags
000ED560 23C0 FFFF 7804             		move.l	d0,($FFFF7804).l			; ''
000ED566 23C0 FFFF 7808             		move.l	d0,($FFFF7808).l			; ''
000ED56C                            
000ED56C                            ; ---------------------------------------------------------------------------
000ED56C                            ; SSRG Splash Screen main loop
000ED56C                            ; ---------------------------------------------------------------------------
000ED56C                            
000ED56C                            SSRGScreen_Loop:
000ED56C 11FC 0004 F62A             		move.b	#$04,($FFFFF62A).w			; set V-Blank routine to run
000ED572 4EB9 0000 8D72             		jsr	DelayProgram				; hult til V-Blank begins
000ED578 5279 FFFF 7800             		addq.w	#$01,($FFFF7800).l			; increase timer
000ED57E 41F8 D000                  		lea	($FFFFD000).w,a0			; load "S" object ram
000ED582 6100 0000                  		bsr	ObjectLetters				; run "S"
000ED586 41E8 0040                  		lea	$40(a0),a0				; load "S" object ram
000ED58A 6100 0000                  		bsr	ObjectLetters				; run "S"
000ED58E 41E8 0040                  		lea	$40(a0),a0				; load "R" object ram
000ED592 6100 0000                  		bsr	ObjectLetters				; run "R"
000ED596 41E8 0040                  		lea	$40(a0),a0				; load "G" object ram
000ED59A 6100 0000                  		bsr	ObjectLetters				; run "G"
000ED59E 41E8 0040                  		lea	$40(a0),a0				; load Square object ram
000ED5A2 6100 0000                  		bsr	ObjectSquare				; run Square
000ED5A6 41F8 D140                  		lea	($FFFFD140).w,a0			; load Neon Sonic object ram
000ED5AA 6100 0000                  		bsr	ObjectSonicNeon				; run Neon Sonic
000ED5AE 6100 0000                  		bsr	SRG_ScrollFG				; scroll the FG plane correctly
000ED5B2 6100 0000                  		bsr	SRG_DrawFG				; draw the FG plane correctly
000ED5B6 4EB9 0001 5C98             		jsr	BuildSprites				; present all object sprites on screen
000ED5BC 4A38 F605                  		tst.b	($FFFFF605).w				; has player 1 pressed start button?
000ED5C0 6B00 0000                  		bmi	SSRGScreen_Finish			; if so, branch
000ED5C4 0C79 0200 FFFF 7800        		cmpi.w	#$0200,($FFFF7800).l			; has timer finished?
000ED5CC 6D9E                       		blt	SSRGScreen_Loop				; if not, loop
000ED5CE                            
000ED5CE                            SSRGScreen_Finish:
000ED5CE 4EB9 0000 0000             		jsr	SRScreen ; go to next screen
000ED5D4 4E75                       		rts						; return
000ED5D6                            
000ED5D6                            ; ===========================================================================
000ED5D6                            ; ---------------------------------------------------------------------------
000ED5D6                            ; Subroutine to control the FG scrolling
000ED5D6                            ; ---------------------------------------------------------------------------
000ED5D6                            
000ED5D6                            SRG_ScrollFG:
000ED5D6 43F8 CDCC                  		lea	($FFFFCDCC).w,a1			; load the horizontal scroll buffer address
000ED5DA 7000                       		moveq	#$00,d0					; clear d0
000ED5DC 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer as position
000ED5E2 0640 0030                  		addi.w	#$0030,d0				; increase to scroll in sooner
000ED5E6 0C40 00F7                  		cmpi.w	#$00F7,d0				; has timer reached finish?
000ED5EA 6C00 0000                  		bge	SRG_FinFGScroll				; if not, branch
000ED5EE D040                       		add.w	d0,d0					; multiply by 2
000ED5F0 4440                       		neg.w	d0					; negate to move left insted
000ED5F2 4840                       		swap	d0					; send left for FG
000ED5F4 7E1F                       		moveq	#$1F,d7					; set repeat times
000ED5F6                            
000ED5F6                            SRG_SFG_Scroll01:
000ED5F6 22C0                       		move.l	d0,(a1)+				; dump to buffer
000ED5F8 51CF FFFC                  		dbf	d7,SRG_SFG_Scroll01			; repeat til this section is done
000ED5FC                            
000ED5FC                            SRG_FinFGScroll:
000ED5FC 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load the horizontal scroll buffer address
000ED600 3039 FFFF 7808             		move.w	($FFFF7808).l,d0			; set BG position
000ED606 3E3C 00DF                  		move.w	#$00DF,d7				; set repeat times
000ED60A                            
000ED60A                            SRG_SBG_Scroll02:
000ED60A 5449                       		addq.w	#$02,a1					; skip FG
000ED60C 32C0                       		move.w	d0,(a1)+				; dump BG
000ED60E 51CF FFFA                  		dbf	d7,SRG_SBG_Scroll02			; repeat for all scanlines
000ED612 4E75                       		rts						; return
000ED614                            
000ED614                            ; ===========================================================================
000ED614                            ; ---------------------------------------------------------------------------
000ED614                            ; Subroutine to control the FG map/drawing
000ED614                            ; ---------------------------------------------------------------------------
000ED614                            
000ED614                            SRG_DrawFG:
000ED614 7000                       		moveq	#$00,d0					; clear d0
000ED616 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer as position
000ED61C D040                       		add.w	d0,d0					; multiply by 2
000ED61E 0440 0040                  		subi.w	#$0040,d0				; subtract starting point
000ED622 0C40 0110                  		cmpi.w	#$0110,d0				; has the scrolling surpassed the starting or ending par?
000ED626 6200 0000                  		bhi	SRG_DFG_FlashOn				; if so, branch
000ED62A 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
000ED62E 49F9 FFFF 0000             		lea	($FFFF0000).l,a4			; load map buffer space address to a4
000ED634 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port address to a5
000ED63A 4DED 0004                  		lea	$04(a5),a6				; load VDP address port address to a6
000ED63E 2C3C 4704 0003             		move.l	#$47040003,d6				; set starting V-Ram
000ED644 0240 01F8                  		andi.w	#$01F8,d0				; get within 8 pixels
000ED648 E448                       		lsr.w	#$02,d0					; divide by 4
000ED64A 3200                       		move.w	d0,d1					; copy to d1
000ED64C 4840                       		swap	d0					; align
000ED64E DC80                       		add.l	d0,d6					; add to V-Ram address
000ED650 D8C1                       		adda.w	d1,a4					; add to map buffer address
000ED652 3CBC 8F80                  		move.w	#$8F80,(a6)				; set increment mode to 80 (new line)
000ED656 323C 2000                  		move.w	#$2000,d1				; prepare palette line add value
000ED65A 2C86                       		move.l	d6,(a6)					; set VDP mode and address
000ED65C 3014                       		move.w	(a4),d0					; load map tile
000ED65E D041                       		add.w	d1,d0					; increase palette to next line
000ED660 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
000ED662 49EC 0046                  		lea	$46(a4),a4				; advance to next line
000ED666 3014                       		move.w	(a4),d0					; load map tile
000ED668 D041                       		add.w	d1,d0					; increase palette to next line
000ED66A 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
000ED66C 49EC 0046                  		lea	$46(a4),a4				; advance to next line
000ED670 3014                       		move.w	(a4),d0					; load map tile
000ED672 D041                       		add.w	d1,d0					; increase palette to next line
000ED674 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
000ED676 3CBC 8F02                  		move.w	#$8F02,(a6)				; set increment mode to 02 (standard word)
000ED67A 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
000ED67E 4E75                       		rts						; return
000ED680                            
000ED680                            SRG_DFG_FlashOn:
000ED680 0440 0170                  		subi.w	#$0170,d0				; minus starting point
000ED684 6B00 0000                  		bmi	SRG_DFG_NoDraw				; if not reached the starting point, branch
000ED688 7A00                       		moveq	#$00,d5					; set tile add value (Light)
000ED68A 0C40 0060                  		cmpi.w	#$0060,d0				; has it reached PASSED the ending point?
000ED68E 6200 0000                  		bhi	SRG_DFG_NoDraw				; if so, branch to skip the lot
000ED692 0C40 0050                  		cmpi.w	#$0050,d0				; has it reached the ending point?
000ED696 6200 0000                  		bhi	SRG_DFG_DrawFlash			; if so, branch for lights on
000ED69A 0200 0008                  		andi.b	#$08,d0					; get within 8
000ED69E 6700 0000                  		beq	SRG_DFG_DrawFlash			; if from 0 to 7 insted of 8 to F, branch
000ED6A2 3A3C 2000                  		move.w	#$2000,d5				; set tile add value (Faded)
000ED6A6                            
000ED6A6                            SRG_DFG_DrawFlash:
000ED6A6 4BF9 FFFF 0000             		lea	($FFFF0000).l,a5			; load mappings to read
000ED6AC 7022                       		moveq	#$22,d0					; set number of columns
000ED6AE 7202                       		moveq	#$02,d1					; set number of rows
000ED6B0 243C 4704 0003             		move.l	#$47040003,d2				; set to write to FG plane
000ED6B6 6100 0000                  		bsr	MapScreenAdd				; write to the map plane
000ED6BA                            
000ED6BA                            SRG_DFG_NoDraw:
000ED6BA 4E75                       		rts						; return
000ED6BC                            
000ED6BC                            ; ===========================================================================
000ED6BC                            ; ---------------------------------------------------------------------------
000ED6BC                            ; Subroutine to control a Neon Sonic object
000ED6BC                            ; ---------------------------------------------------------------------------
000ED6BC                            
000ED6BC                            ObjectSonicNeon:
000ED6BC 4A28 0024                  		tst.b	$24(a0)					; has the object alread been setup?
000ED6C0 6600 0000                  		bne	OSN_SetupDone				; if so, branch
000ED6C4 10BC 0001                  		move.b	#$01,(a0)				; engine doesn't like the ID being null
000ED6C8 317C 6400 0002             		move.w	#$6400,$02(a0)				; set V-Ram address read
000ED6CE 217C 0000 0000 0004        		move.l	#ObjSonNeonMap,$04(a0)			; set mappings to use
000ED6D6 217C 0000 00DE 0008        		move.l	#$000000DE,$08(a0)			; set starting X and Y positions
000ED6DE 317C 0100 0018             		move.w	#$100,priority(a0)			; set priority
000ED6E4 117C 0020 0023             		move.b	#$20,width_pixels(a0)			; set width
000ED6EA 117C 0020 0016             		move.b	#$20,$16(a0)				; set height
000ED6F0 317C 00C0 002A             		move.w	#$00C0,$2A(a0)				; set timer
000ED6F6 317C 0400 0010             		move.w	#$0400,$10(a0)				; set X speed
000ED6FC 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED700                            
000ED700                            OSN_SetupDone:
000ED700 4A68 002A                  		tst.w	$2A(a0)					; has timer finished?
000ED704 6700 0000                  		beq	OSN_MoveIn				; if not, branch
000ED708 5368 002A                  		subq.w	#$01,$2A(a0)				; decrease timer
000ED70C 4E75                       		rts						; return
000ED70E                            
000ED70E                            OSN_MoveIn:
000ED70E 0C28 0002 0024             		cmpi.b	#$02,$24(a0)				; is the routine counter still at sonic moving?
000ED714 6E00 0000                  		bgt	OSN_NoStop				; if not, branch
000ED718 0C68 00DE 0008             		cmpi.w	#$00DE,$08(a0)				; has sonic moved to the square yet?
000ED71E 6D00 0000                  		blt	OSN_NoStop				; if not, branch
000ED722 317C 00DE 0008             		move.w	#$00DE,$08(a0)				; set him directly at the square
000ED728 4268 0010                  		clr.w	$10(a0)					; stop sonic moving (no X speed)
000ED72C 303C 003C                  		move.w	#$3C,d0				; set to play spinning SFX
000ED730 4EB8 325C                  		jsr	PlaySound_Special			; play SFX
000ED734 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED738                            
000ED738                            OSN_NoStop:
000ED738 0668 0040 002C             		addi.w	#$0040,$2C(a0)				; increase map speed
000ED73E 1028 002C                  		move.b	$2C(a0),d0				; load current map speed
000ED742 0C00 0006                  		cmpi.b	#$06,d0					; has the map ID supassed 5?
000ED746 6D00 0000                  		blt	OSN_NoResetAni				; if not, branch
000ED74A 7000                       		moveq	#$00,d0					; reset to 0
000ED74C 3140 002C                  		move.w	d0,$2C(a0)				; reset map speed
000ED750                            
000ED750                            OSN_NoResetAni:
000ED750 1140 001A                  		move.b	d0,$1A(a0)				; set map ID
000ED754 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer
000ED75A 0200 0007                  		andi.b	#$07,d0					; keep within 8 frames
000ED75E 6600 0000                  		bne	OSN_NoCyclePalette			; if it's not been 8 frames, branch
000ED762 43F8 FB68                  		lea	($FFFFFB68).w,a1			; load palette green buffer address to a1
000ED766 45D1                       		lea	(a1),a2					; '' to a2
000ED768 3019                       		move.w	(a1)+,d0				; store first colour
000ED76A 34D9                       		move.w	(a1)+,(a2)+				; shift colours back
000ED76C 34D9                       		move.w	(a1)+,(a2)+				; ''
000ED76E 34D1                       		move.w	(a1),(a2)+				; ''
000ED770 3280                       		move.w	d0,(a1)					; save first colour as last
000ED772                            
000ED772                            OSN_NoCyclePalette:
000ED772 6100 0000                  		bsr	SpeedToPosHud				; convert speed to position
000ED776 4EF9 0001 5C48             		jmp	DisplaySprite				; save object for displaying
000ED77C                            
000ED77C                            ; ===========================================================================
000ED77C                            ; ---------------------------------------------------------------------------
000ED77C 0000                       ObjSonNeonMap:	dc.w	ObjSon00-ObjSonNeonMap			; 00
000ED77E 0000                       		dc.w	ObjSon01-ObjSonNeonMap			; 01
000ED780 0000                       		dc.w	ObjSon02-ObjSonNeonMap			; 02
000ED782 0000                       		dc.w	ObjSon03-ObjSonNeonMap			; 03
000ED784 0000                       		dc.w	ObjSon04-ObjSonNeonMap			; 04
000ED786 0000                       		dc.w	ObjSon05-ObjSonNeonMap			; 05
000ED788                            ; ---------------------------------------------------------------------------
000ED788 04                         ObjSon00:	dc.b	$04
000ED789 EB0D 0000 EC               		dc.b	$EB,$0D,$00,$00,$EC
000ED78E FB09 0008 EC               		dc.b	$FB,$09,$00,$08,$EC
000ED793 FB06 000E 04               		dc.b	$FB,$06,$00,$0E,$04
000ED798 0B04 0014 EC               		dc.b	$0B,$04,$00,$14,$EC
000ED79D 02                         ObjSon01:	dc.b	$02
000ED79E EC0D 0000 ED               		dc.b	$EC,$0D,$00,$00,$ED
000ED7A3 FC0E 0016 F5               		dc.b	$FC,$0E,$00,$16,$F5
000ED7A8 02                         ObjSon02:	dc.b	$02
000ED7A9 ED09 0022 F3               		dc.b	$ED,$09,$00,$22,$F3
000ED7AE FD0A 0028 F3               		dc.b	$FD,$0A,$00,$28,$F3
000ED7B3 04                         ObjSon03:	dc.b	$04
000ED7B4 EB09 0022 F4               		dc.b	$EB,$09,$00,$22,$F4
000ED7B9 FB09 0031 EC               		dc.b	$FB,$09,$00,$31,$EC
000ED7BE FB06 0037 04               		dc.b	$FB,$06,$00,$37,$04
000ED7C3 0B04 003D EC               		dc.b	$0B,$04,$00,$3D,$EC
000ED7C8 02                         ObjSon04:	dc.b	$02
000ED7C9 EC09 0022 F3               		dc.b	$EC,$09,$00,$22,$F3
000ED7CE FC0E 003F EB               		dc.b	$FC,$0E,$00,$3F,$EB
000ED7D3 03                         ObjSon05:	dc.b	$03
000ED7D4 ED0D 0000 EC               		dc.b	$ED,$0D,$00,$00,$EC
000ED7D9 FD0C 004B F4               		dc.b	$FD,$0C,$00,$4B,$F4
000ED7DE 0509 004F F4               		dc.b	$05,$09,$00,$4F,$F4
000ED7E4 00                         		even
000ED7E4                            ; ---------------------------------------------------------------------------
000ED7E4                            ; ===========================================================================
000ED7E4                            ; ---------------------------------------------------------------------------
000ED7E4                            ; Subroutine to control the Square much like objects
000ED7E4                            ; ---------------------------------------------------------------------------
000ED7E4                            
000ED7E4                            ObjectSquare:
000ED7E4 7000                       		moveq	#$00,d0					; clear d0
000ED7E6 1028 0024                  		move.b	$24(a0),d0				; load routine counter
000ED7EA 303B 0000                  		move.w	OS_Index(pc,d0.w),d0			; load correct PC add address
000ED7EE 4EFB 0000                  		jmp	OS_Index(pc,d0.w)			; add and jump
000ED7F2                            
000ED7F2                            ; ===========================================================================
000ED7F2                            ; ---------------------------------------------------------------------------
000ED7F2 0000                       OS_Index:	dc.w	OS_Startup-OS_Index			; 00
000ED7F4 0000                       		dc.w	OL_WaitTime-OS_Index			; 02
000ED7F6 0000                       		dc.w	OS_PlaySound-OS_Index			; 04
000ED7F8 0000                       		dc.w	OS_SpinIn-OS_Index			; 06
000ED7FA 0000                       		dc.w	OS_UpAndLand-OS_Index			; 08
000ED7FC 0000                       		dc.w	OS_FinishSpin-OS_Index			; 0A
000ED7FE                            ; ---------------------------------------------------------------------------
000ED7FE                            ; ===========================================================================
000ED7FE                            ; ---------------------------------------------------------------------------
000ED7FE                            ; Startup
000ED7FE                            ; ---------------------------------------------------------------------------
000ED7FE                            
000ED7FE                            OS_Startup:
000ED7FE 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED802 217C FF40 0020 0008        		move.l	#$FF400020,$08(a0)			; set starting X and Y positions
000ED80A 317C 00A0 002A             		move.w	#$00A0,$2A(a0)				; set time to wait for
000ED810 217C 0800 0000 0010        		move.l	#$08000000,$10(a0)			; set X and Y starting speeds
000ED818 6000 0000                  		bra	UpdateScrollPositions			; update positions
000ED81C                            
000ED81C                            ; ===========================================================================
000ED81C                            ; ---------------------------------------------------------------------------
000ED81C                            ; Playing spin sound once
000ED81C                            ; ---------------------------------------------------------------------------
000ED81C                            
000ED81C                            OS_PlaySound:
000ED81C 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED820 70B6                       		moveq	#$FFFFFFB6,d0				; set to play spin release SFX
000ED822 4EB8 325C                  		jsr	PlaySound_Special			; play SFX
000ED826                            
000ED826                            ; ===========================================================================
000ED826                            ; ---------------------------------------------------------------------------
000ED826                            ; Spinning in and hitting the SSRG letters
000ED826                            ; ---------------------------------------------------------------------------
000ED826                            
000ED826                            OS_SpinIn:
000ED826 5468 002A                  		addq.w	#$02,$2A(a0)				; increase spin counter
000ED82A 3028 0008                  		move.w	$08(a0),d0				; load X position
000ED82E 0C40 0060                  		cmpi.w	#$0060,d0				; has the square hit the letters?
000ED832 6D00 0000                  		blt	OS_Display				; if not, branch
000ED836 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED83A 7096                       		moveq	#$FFFFFF96,d0				; set to play spiked chandelier SFX
000ED83C 4EB8 325C                  		jsr	PlaySound_Special			; play SFX
000ED840 217C FF00 FC00 0010        		move.l	#$FF00FC00,$10(a0)			; set X and Y bounce off speeds
000ED848 43F9 FFFF D010             		lea	($FFFFD010).l,a1			; load object ram's X and Y speeds
000ED84E 22BC 0300 FC00             		move.l	#$0300FC00,(a1)				; save "S" X and Y speeds
000ED854 237C 0300 FD00 0040        		move.l	#$0300FD00,$40(a1)			; save "S" X and Y speeds
000ED85C 237C 0300 FE00 0080        		move.l	#$0300FE00,$80(a1)			; save "R" X and Y speeds
000ED864 237C 0300 FF00 00C0        		move.l	#$0300FF00,$C0(a1)			; save "G" X and Y speeds
000ED86C 6000 0000                  		bra	OS_Display				; continue
000ED870                            
000ED870                            ; ===========================================================================
000ED870                            ; ---------------------------------------------------------------------------
000ED870                            ; Spinning in and hitting the SSRG letters
000ED870                            ; ---------------------------------------------------------------------------
000ED870                            
000ED870                            OS_UpAndLand:
000ED870 5168 002A                  		subq.w	#$08,$2A(a0)				; increase spin counter
000ED874 0668 0020 0012             		addi.w	#$0020,$12(a0)				; increase gravity
000ED87A 6B00 0000                  		bmi	OS_Display				; if not going down, branch
000ED87E 0C68 0020 000A             		cmpi.w	#$0020,$0A(a0)				; has the square hit the ground?
000ED884 6D00 0000                  		blt	OS_Display				; if not, branch
000ED888 317C 0020 000A             		move.w	#$0020,$0A(a0)				; set to the ground
000ED88E 7000                       		moveq	#$00,d0					; clear d0
000ED890 2140 0010                  		move.l	d0,$10(a0)				; clear X and Y speeds
000ED894 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED898 317C 0A40 002C             		move.w	#$0A40,$2C(a0)				; set speed of spin
000ED89E 6000 0000                  		bra	OS_Display				; continue
000ED8A2                            
000ED8A2                            ; ===========================================================================
000ED8A2                            ; ---------------------------------------------------------------------------
000ED8A2                            ; Finishing the spin by slowing down
000ED8A2                            ; ---------------------------------------------------------------------------
000ED8A2                            
000ED8A2                            OS_FinishSpin:
000ED8A2 3028 002C                  		move.w	$2C(a0),d0				; has spin speed finished?
000ED8A6 6A00 0000                  		bpl	OS_NoFinish				; if not, branch
000ED8AA 43F8 FB62                  		lea	($FFFFFB62).w,a1			; load palette buffer address
000ED8AE 0C51 0E0E                  		cmpi.w	#$0E0E,(a1)				; has the colour finished changing?
000ED8B2 6700 0000                  		beq	OS_NoColour01				; if so, branch
000ED8B6 0651 0202                  		addi.w	#$0202,(a1)				; increase the colour
000ED8BA                            
000ED8BA                            OS_NoColour01:
000ED8BA 5849                       		addq.w	#$04,a1					; goto next 2nd colour
000ED8BC 0C51 0404                  		cmpi.w	#$0404,(a1)				; has the colour finished changing?
000ED8C0 6700 0000                  		beq	OS_Display				; if so, branch
000ED8C4 0451 0202                  		subi.w	#$0202,(a1)				; decrease the colour
000ED8C8 6000 0000                  		bra	OS_Display				; continue
000ED8CC                            
000ED8CC                            OS_NoFinish:
000ED8CC 0440 0018                  		subi.w	#$18,d0					; decrease spin speed
000ED8D0 3200                       		move.w	d0,d1					; copy to d1
000ED8D2 E049                       		lsr.w	#$08,d1					; get left byte only
000ED8D4 9368 002A                  		sub.w	d1,$2A(a0)				; subtract that from the spin position
000ED8D8 3140 002C                  		move.w	d0,$2C(a0)				; update spin speed
000ED8DC                            
000ED8DC                            ; ===========================================================================
000ED8DC                            ; ---------------------------------------------------------------------------
000ED8DC                            ; Displaying the square
000ED8DC                            ; ---------------------------------------------------------------------------
000ED8DC                            
000ED8DC                            OS_Display:
000ED8DC 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000ED8E2 6100 0000                  		bsr	UpdateScrollPositions			; update positions
000ED8E6                            
000ED8E6                            OS_DiplayEnd:
000ED8E6 3F28 002A                  		move.w	$2A(a0),-(sp)				; store spin counter
000ED8EA 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
000ED8EE 7010                       		moveq	#$10,d0					; set number of columns
000ED8F0 7210                       		moveq	#$10,d1					; set number of rows
000ED8F2 243C 6000 0003             		move.l	#$60000003,d2				; set to write to BG plane
000ED8F8 7A00                       		moveq	#$00,d5					; set blank tile
000ED8FA 6100 0000                  		bsr	MapScreenSingle				; write to the map plane
000ED8FE 301F                       		move.w	(sp)+,d0				; load spin counter
000ED900 0240 0018                  		andi.w	#$0018,d0				; keep in range
000ED904 D040                       		add.w	d0,d0					; multiply by 2
000ED906 49FB 0000                  		lea	MapRamData(pc,d0.w),a4			; load map ram address data
000ED90A 2A5C                       		movea.l	(a4)+,a5				; load mappings to read
000ED90C 241C                       		move.l	(a4)+,d2				; load V-Ram address
000ED90E 301C                       		move.w	(a4)+,d0				; load X draw amount
000ED910 321C                       		move.w	(a4)+,d1				; load Y draw amount
000ED912 6100 0000                  		bsr	MapScreen				; write to the map plane
000ED916 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
000ED91A 4E75                       		rts						; return
000ED91C                            
000ED91C                            ; ---------------------------------------------------------------------------
000ED91C                            ; Updating the scroll positions for the BG plane
000ED91C                            ; ---------------------------------------------------------------------------
000ED91C                            
000ED91C                            UpdateScrollPositions:
000ED91C 33E8 0008 FFFF 7808        		move.w	$08(a0),($FFFF7808).l			; load X position as X scroll BG
000ED924 3028 000A                  		move.w	$0A(a0),d0				; load Y position
000ED928 4440                       		neg.w	d0					; negate opposite direction
000ED92A 31C0 F618                  		move.w	d0,($FFFFF618).w			; save as Y scroll BG
000ED92E 4E75                       		rts						; return
000ED930                            
000ED930                            ; ===========================================================================
000ED930                            ; ---------------------------------------------------------------------------
000ED930 FFFF 4000                  MapRamData:	dc.l	$FFFF4000				; Map address
000ED934 6104 0003                  		dc.l	$61040003				; V-Ram address
000ED938 000B 000B                  		dc.l	$000B000B				; X and Y draw amount
000ED93C 0000 0000                  		dc.l	$00000000				; null/spare
000ED940 FFFF 4120                  		dc.l	$FFFF4120				; ''
000ED944 6000 0003                  		dc.l	$60000003				; ''
000ED948 000F 000F                  		dc.l	$000F000F				; ''
000ED94C 0000 0000                  		dc.l	$00000000				; ''
000ED950 FFFF 4320                  		dc.l	$FFFF4320				; ''
000ED954 6000 0003                  		dc.l	$60000003				; ''
000ED958 0010 0010                  		dc.l	$00100010				; ''
000ED95C 0000 0000                  		dc.l	$00000000				; ''
000ED960 FFFF 4562                  		dc.l	$FFFF4562				; ''
000ED964 6000 0003                  		dc.l	$60000003				; ''
000ED968 000F 000F                  		dc.l	$000F000F				; ''
000ED96C 0000 0000                  		dc.l	$00000000				; ''
000ED970                            ; ---------------------------------------------------------------------------
000ED970                            ; ===========================================================================
000ED970                            ; ---------------------------------------------------------------------------
000ED970                            ; Subroutine to control the "SSRG" letter sprites
000ED970                            ; ---------------------------------------------------------------------------
000ED970                            
000ED970                            ObjectLetters:
000ED970 7000                       		moveq	#$00,d0					; clear d0
000ED972 1028 0024                  		move.b	$24(a0),d0				; load routine counter
000ED976 303B 0000                  		move.w	OL_Index(pc,d0.w),d0			; load correct PC add address
000ED97A 4EFB 0000                  		jmp	OL_Index(pc,d0.w)			; add and jump
000ED97E                            
000ED97E                            ; ===========================================================================
000ED97E                            ; ---------------------------------------------------------------------------
000ED97E 0000                       OL_Index:	dc.w	OL_Startup-OL_Index			; 00
000ED980 0000                       		dc.w	OL_WaitTime-OL_Index			; 02
000ED982 0000                       		dc.w	OL_FlyUp-OL_Index			; 04
000ED984 0000                       		dc.w	OL_Spring-OL_Index			; 06
000ED986 0000                       		dc.w	OL_SlowDown-OL_Index			; 08
000ED988 0000                       		dc.w	OL_Idle-OL_Index			; 0A
000ED98A                            ; ---------------------------------------------------------------------------
000ED98A                            ; ===========================================================================
000ED98A                            ; ---------------------------------------------------------------------------
000ED98A                            ; Object data	dc.w	$XXXX,$YYYY,$VRAM,$TIME,$XSPD,$YSPD,$MAPI,$????
000ED98A                            ; ---------------------------------------------------------------------------
000ED98A 0182 0180 0001 0001 FF00+  OL_Data:	dc.w	$0182,$0180,$0001,$0001,$FF00,$F400,$0000,$0000
000ED99A 01A8 0180 0001 0011 FF00+  		dc.w	$01A8,$0180,$0001,$0011,$FF00,$F400,$0000,$0000
000ED9AA 01D0 0180 0011 0021 FF00+  		dc.w	$01D0,$0180,$0011,$0021,$FF00,$F400,$0000,$0000
000ED9BA 01F8 0180 0021 0031 FF00+  		dc.w	$01F8,$0180,$0021,$0031,$FF00,$F400,$0000,$0000
000ED9CA                            ; ---------------------------------------------------------------------------
000ED9CA                            ; ===========================================================================
000ED9CA                            ; ---------------------------------------------------------------------------
000ED9CA                            ; Startup
000ED9CA                            ; ---------------------------------------------------------------------------
000ED9CA                            
000ED9CA                            OL_Startup:
000ED9CA 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED9CE 1010                       		move.b	(a0),d0					; load object type
000ED9D0 5300                       		subq.b	#$01,d0					; decrease by 1
000ED9D2 E948                       		lsl.w	#$04,d0					; multiply by 10
000ED9D4 43FB 00B4                  		lea	OL_Data(pc,d0.w),a1			; load correct data address
000ED9D8 2159 0008                  		move.l	(a1)+,$08(a0)				; set X & Y position
000ED9DC 3159 0002                  		move.w	(a1)+,$02(a0)				; set V-Ram
000ED9E0 3159 002A                  		move.w	(a1)+,$2A(a0)				; set Timer
000ED9E4 2159 0010                  		move.l	(a1)+,$10(a0)				; set X and Y speeds
000ED9E8 3019                       		move.w	(a1)+,d0				; load map ID
000ED9EA 1140 001A                  		move.b	d0,$1A(a0)				; set map ID
000ED9EE 217C 0000 0000 0004        		move.l	#ObjLet_Map,$04(a0)			; set mappings to use
000ED9F6 317C 0100 0018             		move.w	#$100,priority(a0)			; set priority
000ED9FC 117C 0020 0023             		move.b	#$20,width_pixels(a0)			; set width
000EDA02 117C 0020 0016             		move.b	#$20,$16(a0)				; set height
000EDA08                            
000EDA08                            ; ===========================================================================
000EDA08                            ; ---------------------------------------------------------------------------
000EDA08                            ; Delay/Time wait
000EDA08                            ; ---------------------------------------------------------------------------
000EDA08                            
000EDA08                            OL_WaitTime:
000EDA08 5368 002A                  		subq.w	#$01,$2A(a0)				; decrease timer
000EDA0C 6600 0000                  		bne	OL_WT_Wait				; if not finished, branch
000EDA10 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000EDA14                            
000EDA14                            OL_WT_Wait:
000EDA14 4EF9 0001 5C48             		jmp	DisplaySprite				; save object for displaying
000EDA1A                            
000EDA1A                            ; ===========================================================================
000EDA1A                            ; ---------------------------------------------------------------------------
000EDA1A                            ; Flying up and landing
000EDA1A                            ; ---------------------------------------------------------------------------
000EDA1A                            
000EDA1A                            OL_FlyUp:
000EDA1A 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000EDA20 0668 0040 0012             		addi.w	#$0040,$12(a0)				; increase speed
000EDA26 6B00 0000                  		bmi	OL_NoStopDown				; if still moving up, branch
000EDA2A 303C 00F0                  		move.w	#$00F0,d0				; set Y speed to check
000EDA2E B068 000A                  		cmp.w	$0A(a0),d0				; has the letter dropped to the landing line?
000EDA32 6C00 0000                  		bge	OL_NoStopDown				; if not, branch
000EDA36 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000EDA3A                            
000EDA3A                            OL_NoStopDown:
000EDA3A 4EF9 0001 5C48             		jmp	DisplaySprite				; save object for displaying
000EDA40                            
000EDA40                            ; ===========================================================================
000EDA40                            ; ---------------------------------------------------------------------------
000EDA40                            ; Springing under the land and back up again
000EDA40                            ; ---------------------------------------------------------------------------
000EDA40                            
000EDA40                            OL_Spring:
000EDA40 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000EDA46 0468 0080 0012             		subi.w	#$0080,$12(a0)				; decrease speed
000EDA4C 6A00 0000                  		bpl	OL_NoStopUp				; if still moving down, branch
000EDA50 303C 00E8                  		move.w	#$00E8,d0				; set Y speed to check
000EDA54 B068 000A                  		cmp.w	$0A(a0),d0				; has the letter moved up to the landing line?
000EDA58 6D00 0000                  		blt	OL_NoStopUp				; if not, branch
000EDA5C 4268 0012                  		clr.w	$12(a0)					; set no Y speed
000EDA60 4268 002A                  		clr.w	$2A(a0)					; clear timer
000EDA64 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000EDA68                            
000EDA68                            OL_NoStopUp:
000EDA68 4EF9 0001 5C48             		jmp	DisplaySprite				; save object for displaying
000EDA6E                            
000EDA6E                            ; ===========================================================================
000EDA6E                            ; ---------------------------------------------------------------------------
000EDA6E                            ; Slowing the letter down on X
000EDA6E                            ; ---------------------------------------------------------------------------
000EDA6E                            
000EDA6E                            OL_SlowDown:
000EDA6E 4A68 0010                  		tst.w	$10(a0)					; is there any left movement on X?
000EDA72 6A00 0000                  		bpl	OL_NoMove				; if not, branch
000EDA76 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000EDA7C 0668 0020 0010             		addi.w	#$0020,$10(a0)				; increase X speed to slow down to move right
000EDA82 4EF9 0001 5C48             		jmp	DisplaySprite				; save object for displaying
000EDA88                            
000EDA88                            OL_NoMove:
000EDA88 5228 002A                  		addi.b	#$01,$2A(a0)				; increase timer
000EDA8C 1028 002A                  		move.b	$2A(a0),d0				; load timer
000EDA90 0200 0001                  		andi.b	#$01,d0					; get only the odd bit
000EDA94 6700 0000                  		beq	OL_Idle					; if null, branch to skip (Slows the flash down)
000EDA98 7040                       		moveq	#$40,d0					; set colour line to check value on
000EDA9A B028 0002                  		cmp.b	$02(a0),d0				; has colour line reached last?
000EDA9E 6E00 0000                  		bgt	OL_NoFinish				; if not, branch
000EDAA2 0228 009F 0002             		andi.b	#$9F,$02(a0)				; reset colour line to first
000EDAA8 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000EDAAC 7000                       		moveq	#$00,d0					; clear d0
000EDAAE 2140 0010                  		move.l	d0,$10(a0)				; clear X and Y speeds
000EDAB2 0268 01FF 000A             		andi.w	#$01FF,$0A(a0)				; reset Y position range correctly
000EDAB8 317C 00E4 000A             		move.w	#$00E4,$0A(a0)				; set Y position
000EDABE 4EF9 0001 5C48             		jmp	DisplaySprite				; save object for displaying
000EDAC4                            
000EDAC4                            OL_NoFinish:
000EDAC4 0628 0020 0002             		addi.b	#$20,$02(a0)				; increase palette line being used
000EDACA                            
000EDACA                            ; ===========================================================================
000EDACA                            ; ---------------------------------------------------------------------------
000EDACA                            ; Idle (Finish)
000EDACA                            ; ---------------------------------------------------------------------------
000EDACA                            
000EDACA                            OL_Idle:
000EDACA 6100 0000                  		bsr	SpeedToPosHud				; convert speed to position
000EDACE 0C68 00E4 000A             		cmpi.w	#$00E4,$0A(a0)				; has the letter moved up to the landing line?
000EDAD4 6700 0000                  		beq	OL_CheckXSpeed				; if so, branch
000EDAD8 6D00 0000                  		blt	OL_CheckYSpeed				; if not, branch
000EDADC 4268 0012                  		clr.w	$12(a0)					; set no Y speed
000EDAE0 317C 00E4 000A             		move.w	#$00E4,$0A(a0)				; set Y position
000EDAE6 6000 0000                  		bra	OL_CheckXSpeed				; continue
000EDAEA                            
000EDAEA                            OL_CheckYSpeed:
000EDAEA 0668 0080 0012             		addi.w	#$0080,$12(a0)				; increase gravity
000EDAF0                            
000EDAF0                            OL_CheckXSpeed:
000EDAF0 303C 0040                  		move.w	#$0040,d0				; set speed decrease
000EDAF4 4A68 0010                  		tst.w	$10(a0)					; is there any X speed?
000EDAF8 6700 0000                  		beq	OL_Display				; if not, branch
000EDAFC 6A00 0000                  		bpl	OL_DecreaseRight			; if it's moving right, branch
000EDB00 4440                       		neg.w	d0					; negate decreasing speed
000EDB02                            
000EDB02                            OL_DecreaseRight:
000EDB02 9168 0010                  		sub.w	d0,$10(a0)				; decrease speed
000EDB06                            
000EDB06                            OL_Display:
000EDB06 4EF9 0001 5C48             		jmp	DisplaySprite				; save object for displaying
000EDB0C                            
000EDB0C                            ; ===========================================================================
000EDB0C                            ; ---------------------------------------------------------------------------
000EDB0C 0000                       ObjLet_Map:	dc.w	ObjLet_SSRG-ObjLet_Map			; 00
000EDB0E                            ; ---------------------------------------------------------------------------
000EDB0E 01                         ObjLet_SSRG:	dc.b	$01
000EDB0F F00F 0000 F0               		dc.b	$F0,$0F,$00,$00,$F0
000EDB14                            		even
000EDB14                            ; ---------------------------------------------------------------------------
000EDB14                            ; ===========================================================================
000EDB14                            ; ---------------------------------------------------------------------------
000EDB14                            ; Subroutine to convert speed to position for HUD objects
000EDB14                            ; ---------------------------------------------------------------------------
000EDB14                            
000EDB14                            SpeedToPosHud:
000EDB14 3028 0010                  		move.w	$10(a0),d0				; load X speed
000EDB18 48C0                       		ext.l	d0					; extend incase it's negative
000EDB1A E180                       		asl.l	#$08,d0					; multiply by 100
000EDB1C 4840                       		swap	d0					; get X add position
000EDB1E D168 0008                  		add.w	d0,$08(a0)				; save new X position
000EDB22 3028 0012                  		move.w	$12(a0),d0				; load Y speed
000EDB26 48C0                       		ext.l	d0					; extend incase it's negative
000EDB28 E180                       		asl.l	#$08,d0					; multiply by 100
000EDB2A D1A8 000A                  		add.l	d0,$0A(a0)				; save new Y position
000EDB2E 4E75                       		rts						; return
000EDB30                            
000EDB30                            ; ===========================================================================
000EDB30                            ; ---------------------------------------------------------------------------
000EDB30                            ; Subroutine to map tile to VDP screen
000EDB30                            ; ---------------------------------------------------------------------------
000EDB30                            
000EDB30                            MapScreen:
000EDB30 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
000EDB36 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
000EDB3A 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
000EDB40                            
000EDB40                            MapScreen_Row:
000EDB40 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
000EDB42 3600                       		move.w	d0,d3					; reload number of columns
000EDB44                            
000EDB44                            MapScreen_Column:
000EDB44 3C9D                       		move.w	(a5)+,(a6)				; dump map to VDP map slot
000EDB46 51CB FFFC                  		dbf	d3,MapScreen_Column			; repeat til columns have dumped
000EDB4A D484                       		add.l	d4,d2					; increae to next row on VRam
000EDB4C 51C9 FFF2                  		dbf	d1,MapScreen_Row			; repeat til all rows have dumped
000EDB50 4E75                       		rts						; return
000EDB52                            
000EDB52                            ; ===========================================================================
000EDB52                            ; ---------------------------------------------------------------------------
000EDB52                            ; Subroutine to map tile to VDP screen (Adding contents of d5)
000EDB52                            ; ---------------------------------------------------------------------------
000EDB52                            
000EDB52                            MapScreenAdd:
000EDB52 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
000EDB58 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
000EDB5C 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
000EDB62                            
000EDB62                            MapScreenAdd_Row:
000EDB62 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
000EDB64 3600                       		move.w	d0,d3					; reload number of columns
000EDB66                            
000EDB66                            MapScreenAdd_Column:
000EDB66 3C1D                       		move.w	(a5)+,d6				; load map ID
000EDB68 DC45                       		add.w	d5,d6					; add d5 contents
000EDB6A 3C86                       		move.w	d6,(a6)					; dump map to VDP map slot
000EDB6C 51CB FFF8                  		dbf	d3,MapScreenAdd_Column			; repeat til columns have dumped
000EDB70 D484                       		add.l	d4,d2					; increae to next row on VRam
000EDB72 51C9 FFEE                  		dbf	d1,MapScreenAdd_Row			; repeat til all rows have dumped
000EDB76 4E75                       		rts						; return
000EDB78                            
000EDB78                            ; ===========================================================================
000EDB78                            ; ---------------------------------------------------------------------------
000EDB78                            ; Subroutine to map a single tile to VDP screen
000EDB78                            ; ---------------------------------------------------------------------------
000EDB78                            
000EDB78                            MapScreenSingle:
000EDB78 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
000EDB7E 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
000EDB82 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
000EDB88                            
000EDB88                            MapScreenSingle_Row:
000EDB88 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
000EDB8A 3600                       		move.w	d0,d3					; reload number of columns
000EDB8C                            
000EDB8C                            MapScreenSingle_Column:
000EDB8C 3C85                       		move.w	d5,(a6)					; dump map to VDP map slot
000EDB8E 51CB FFFC                  		dbf	d3,MapScreenSingle_Column		; repeat til columns have dumped
000EDB92 D484                       		add.l	d4,d2					; increae to next row on VRam
000EDB94 51C9 FFF2                  		dbf	d1,MapScreenSingle_Row			; repeat til all rows have dumped
000EDB98 4E75                       		rts						; return
000EDB9A                            
000EDB9A                            ; ===========================================================================
000EDB9A                            ; ---------------------------------------------------------------------------
000EDB9A                            ; SSRG Data
000EDB9A                            ; ---------------------------------------------------------------------------
000EDB9A                            Pal_SSRG:	incbin	"SSRG/SSRG.pal"
000EDC1A                            		even
000EDC1A                            ; ---------------------------------------------------------------------------
000EDC1A                            ArtMain_SSRG:	incbin	"SSRG/ArtMain.nem"
000EE28E 00                         		even
000EE28E                            ArtSquare_SSRG:	incbin	"SSRG/ArtSquare.nem"
000EE6FA 00                         		even
000EE6FA                            ArtSonic_SSRG:	incbin	"SSRG/ArtSonic.nem"
000EE9D8                            		even
000EE9D8                            ArtLink_SSRG:	incbin	"SSRG/ArtLink.nem"
000EEAC0                            		even
000EEAC0                            ; ---------------------------------------------------------------------------
000EEAC0                            MapMain_SSRG:	incbin	"SSRG/MapMain.kos"
000EEB72 00                         		even
000EEB72                            MapSquare_SSRG:	incbin	"SSRG/MapSquare.kos"
000EEDBC                            		even
000EEDBC                            MapLink_SSRG:	incbin	"SSRG/MapLink.kos"
000EEDF2                            		even
000EEDF2                            ; ---------------------------------------------------------------------------
000EEDF2                            ; ===========================================================================
000EEDF2                            ; ===========================================================================
000EEDF2                            ; Sonic 2 Options and level select	
000EEDF2                            s2_menuasm:
000EEDF2                            		include 's2_menu.asm'
000EEDF2                            ;===============================================================================
000EEDF2                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
000EEDF2                            ; [ Início ]
000EEDF2                            ;
000EEDF2                            ; O código deste menu foi desenvolvido para funcionar com
000EEDF2                            ; o disassembly do Sonic 1 feito por -> drx (www.hacking-cult.org)
000EEDF2                            ; 
000EEDF2                            ; Se estiver usando um disassembly diferente modifique os jumps no final do 
000EEDF2                            ; código para que aponte para as rotinas equivalentes.
000EEDF2                            ; 
000EEDF2                            ; Para pode utilizar este menu basta fazer a seguinte modificação no código 
000EEDF2                            ; original:
000EEDF2                            ; Localize o label  -> loc_3242 adicione -> jmp     Level_Select_Menu
000EEDF2                            ; O código deve ficar como abaixo
000EEDF2                            ;               ......................
000EEDF2                            ; loc_3242:
000EEDF2                            ;		tst.b	($FFFFFFD0).w
000EEDF2                            ;		beq.w	PlayLevel	
000EEDF2                            ;		btst	#6,($FFFFF604).w 
000EEDF2                            ;		beq.w	PlayLevel	  		
000EEDF2                            ;		jmp     Level_Select_Menu ; <- Carrega o Menu do Sonic 2	
000EEDF2                            ;		moveq	#2,d0		
000EEDF2                            ;		bsr.w	PalLoad		 
000EEDF2                            ;               ...............
000EEDF2                            ;
000EEDF2                            ; Não esqueça de incluir este asm em seu código com a diretiva include:
000EEDF2                            ;               include 's2_menu.asm'
000EEDF2                            ;===============================================================================  
000EEDF2                            ;Slow_Motion_Flag      equ $FFFFFFD1
000EEDF2                            ;Debug_Mode_Flag       equ $FFFFFFD2
000EEDF2                            
000EEDF2 =00000010                  Main_Menu_Snd   = $0010
000EEDF2 =0000002B                  Emerald_Snd             = $002B
000EEDF2 =00000033                  Ring_Snd                = $0033
000EEDF2 =000000E1                  Volume_Down             = $00E1
000EEDF2 =000000E0                  Stop_Sound              = $00E0
000EEDF2                            ;-------------------------------------------------------------------------------
000EEDF2                            ; Options and Level Select Code from Sonic 2 Rev02 (Sonic Classics Version) 
000EEDF2                            ;-------------------------------------------------------------------------------
000EEDF2                            MenuScreen:
000EEDF2                            Main_Menu_Screen: ; Offset_0x008B50:   
000EEDF2 4EB8 4528                                  jsr     Pal_FadeFrom                           ; Offset_0x002426
000EEDF6 46FC 2700                                  move    #$2700, SR
000EEDFA 3038 F60C                                  move.w  ($FFFFF60C).w, D0
000EEDFE 0200 00BF                                  andi.b  #$BF, D0                                     ; $00C00004
000EEE02 33C0 00C0 0004                             move.w  D0, ($00C00004)
000EEE08 4EB8 3084                                  jsr     ClearScreen                            ; Offset_0x0011C4
000EEE0C 4DF9 00C0 0004                             lea     ($00C00004), A6                       ; $00C00004
000EEE12 3CBC 8004                                  move.w  #$8004, (A6)
000EEE16 3CBC 8230                                  move.w  #$8230, (A6)
000EEE1A 3CBC 8407                                  move.w  #$8407, (A6)
000EEE1E 3CBC 8230                                  move.w  #$8230, (A6)
000EEE22 3CBC 8700                                  move.w  #$8700, (A6)
000EEE26 3CBC 8C81                                  move.w  #$8C81, (A6)
000EEE2A 3CBC 9001                                  move.w  #$9001, (A6)
000EEE2E 43F8 AC00                                  lea     ($FFFFAC00).w, A1
000EEE32 7000                                       moveq   #$00, D0
000EEE34 323C 00FF                                  move.w  #$00FF, D1
000EEE38                            Offset_0x008B96:
000EEE38 22C0                                       move.l  D0, (A1)+
000EEE3A 51C9 FFFC                                  dbra    D1, Offset_0x008B96
000EEE3E 43F8 D000                                  lea     ($FFFFD000).w, A1
000EEE42 7000                                       moveq   #$00, D0
000EEE44 323C 07FF                                  move.w  #$07FF, D1
000EEE48                            Offset_0x008BA6:
000EEE48 22C0                                       move.l  D0, (A1)+
000EEE4A 51C9 FFFC                                  dbra    D1, Offset_0x008BA6
000EEE4E 4278 C800                                  clr.w   ($FFFFC800).w
000EEE52 21FC FFFF C800 C8FC                        move.l  #$FFFFC800, ($FFFFC8FC).w
000EEE5A 23FC 4200 0000 00C0 0004                   move.l  #$42000000, ($00C00004)               ; $00C00004
000EEE64 41F9 0002 F676                             lea     (Nem_MenuFont), A0                        ; Offset_0x07C43A
000EEE6A 4EB8 3596                                  jsr     NemDec                             ; Offset_0x00149A
000EEE6E 23FC 4E00 0000 00C0 0004                   move.l  #$4E000000, ($00C00004)               ; $00C00004
000EEE78 41F9 0000 0000                             lea     (Menu_Frame), A0                       ; Offset_0x07D990
000EEE7E 4EB8 3596                                  jsr     NemDec                             ; Offset_0x00149A
000EEE82 23FC 5200 0000 00C0 0004                   move.l  #$52000000, ($00C00004)               ; $00C00004
000EEE8C 41F9 0000 0000                             lea     (Level_Icons), A0                      ; Offset_0x07DA10
000EEE92 4EB8 3596                                  jsr     NemDec                             ; Offset_0x00149A
000EEE96 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EEE9C 41F9 0000 0000                             lea     (Versus_Menu_Bg_Mappings), A0          ; Offset_0x07CB80
000EEEA2 303C 6000                                  move.w  #$6000, D0
000EEEA6 4EB8 389E                                  jsr     EniDec                              ; Offset_0x00177A
000EEEAA 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EEEB0 203C 6000 0003                             move.l  #$60000003, D0
000EEEB6 7227                                       moveq   #$27, D1
000EEEB8 741B                                       moveq   #$1B, D2
000EEEBA 4EB8 34A0                                  jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EEEBE 0C38 002C F600                             cmpi.b  #$2C, ($FFFFF600).w         ; $24, $FFFFF600
000EEEC4 6700 0000                  				beq     Options_Menu                           ; Offset_0x008F56
000EEEC8 4EF9 0000 0000             				jmp    	Level_Select_Menu                ; Offset_0x00928C
000EEECE                            Offset_0x008F48:
000EEECE 7200                                       moveq   #$00, D1
000EEED0 1219                                       move.b  (A1)+, D1
000EEED2                            Offset_0x008F4C:
000EEED2 1019                                       move.b  (A1)+, D0
000EEED4 34C0                                       move.w  D0, (A2)+
000EEED6 51C9 FFFA                                  dbra    D1, Offset_0x008F4C
000EEEDA 4E75                                       rts                
000EEEDC                            ;===============================================================================                
000EEEDC                            Options_Menu: ; Offset_0x008F56:
000EEEDC 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EEEE2 41F9 0000 0000                             lea     (Options_Frame_Mappings), A0           ; Offset_0x009A60
000EEEE8 303C 0070                                  move.w  #$0070, D0
000EEEEC 4EB8 389E                                  jsr     EniDec                              ; Offset_0x00177A
000EEEF0 43F9 FFFF 0160                             lea     ($FFFF0160), A1
000EEEF6 41F9 0000 0000                             lea     (Options_Frame_Mappings), A0           ; Offset_0x009A60
000EEEFC 303C 2070                                  move.w  #$2070, D0
000EEF00 4EB8 389E                                  jsr     EniDec                              ; Offset_0x00177A
000EEF04 4238 FF8C                                  clr.b   ($FFFFFF8C).w
000EEF08 6100 0000                                  bsr     Offset_0x009118
000EEF0C 5238 FF8C                                  addq.b  #$01, ($FFFFFF8C).w
000EEF10 6100 0000                                  bsr     Offset_0x00918C
000EEF14 5238 FF8C                                  addq.b  #$01, ($FFFFFF8C).w
000EEF18 6100 0000                                  bsr     Offset_0x00918C
000EEF1C 4238 FF8C                                  clr.b   ($FFFFFF8C).w
000EEF20 4238 F711                                  clr.b   ($FFFFF711).w
000EEF24 4278 F7F0                                  clr.w   ($FFFFF7F0).w
000EEF28 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x00874E
000EEF2E 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
000EEF34 7014                                       moveq   #$14, D0
000EEF36 4EB8 47FA                                  jsr     PalLoad1                               ; Offset_0x0026CE
000EEF3A 103C 0010                                  move.b  #Main_Menu_Snd, D0      ; $91
000EEF3E 4EB8 325C                                  jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EEF42                            ;                clr.w   (Two_Player_Flag).w                          ; $FFFFFFB8
000EEF42 42B8 F700                                  clr.l   ($FFFFF700).w
000EEF46 42B8 F704                                  clr.l   ($FFFFF704).w
000EEF4A 4278 FFE4                                  clr.w   ($FFFFFFE4).w
000EEF4E 4278 FFE6                                  clr.w   ($FFFFFFE6).w
000EEF52 11FC 0016 F62A                             move.b  #$16, ($FFFFF62A).w                       ; $FFFFF62A
000EEF58 4EB9 0000 8D72                             jsr     DelayProgram                           ; Offset_0x00333E
000EEF5E 3038 F60C                                  move.w  ($FFFFF60C).w, D0
000EEF62 0000 0040                                  ori.b   #$40, D0
000EEF66 33C0 00C0 0004                             move.w  D0, ($C00004)                       ; $00C00004
000EEF6C 4EB8 446E                                  jsr     Pal_FadeTo                             ; Offset_0x002382
000EEF70                            Offset_0x008FEE:
000EEF70 11FC 0016 F62A                             move.b  #$16, ($FFFFF62A).w                       ; $FFFFF62A
000EEF76 4EB9 0000 8D72                             jsr     DelayProgram                           ; Offset_0x00333E
000EEF7C 46FC 2700                                  move    #$2700, SR
000EEF80 6100 0000                                  bsr     Offset_0x00918C
000EEF84 6100 0000                                  bsr     Offset_0x009070
000EEF88 6100 0000                                  bsr     Offset_0x009118
000EEF8C 46FC 2300                                  move    #$2300, SR
000EEF90 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x00874E
000EEF96 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
000EEF9C 1038 F605                                  move.b  ($FFFFF605).w, D0
000EEFA0 8038 F607                                  or.b    ($FFFFF607).w, D0
000EEFA4 0200 0080                                  andi.b  #$80, D0
000EEFA8 6600                                       bne.s   Menu_Go_Play_Mode                      ; Offset_0x00902A
000EEFAA 60C4                                       bra     Offset_0x008FEE
000EEFAC                            Menu_Go_Play_Mode: ; Offset_0x00902A:
000EEFAC 1038 FF8C                                  move.b  ($FFFFFF8C).w, D0
000EEFB0 6600                                       bne.s   Menu_Go_Versus_Mode                    ; Offset_0x009046
000EEFB2 7000                                       moveq   #$00, D0
000EEFB4                            ;                move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFB8
000EEFB4 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
000EEFB8 31C0 FE10                                  move.w  D0, ($FFFFFE10).w                             ; $FFFFFE10
000EEFBC 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w             ; $0C, $FFFFF600
000EEFC2 4E75                                       rts
000EEFC4                            Menu_Go_Versus_Mode: ; Offset_0x009046:
000EEFC4 5300                                       subq.b  #$01, D0
000EEFC6 6600                                       bne.s   Offset_0x009068
000EEFC8 7001                                       moveq   #$01, D0
000EEFCA                              ;              move.w  D0, (Two_Player_Flag).w      ; $FFFFFFB8
000EEFCA 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
000EEFCE 11FC 003C F600                             move.b  #$3C, ($FFFFF600).w     ; $1C, $FFFFF600
000EEFD4 11FC 0000 FF88                             move.b  #$00, ($FFFFFF88).w
000EEFDA 31FC 0000 FF7A                             move.w  #$0000, ($FFFFFF7A).w
000EEFE0 4E75                                       rts
000EEFE2                            Offset_0x009068:
000EEFE2 11FC 0000 F600                             move.b  #$00, ($FFFFF600).w     ; $FFFFF600
000EEFE8 4E75                                       rts
000EEFEA                            Offset_0x009070:
000EEFEA 7400                                       moveq   #$00, D2
000EEFEC 1438 FF8C                                  move.b  ($FFFFFF8C).w, D2
000EEFF0 1038 F605                                  move.b  ($FFFFF605).w, D0
000EEFF4 8038 F607                                  or.b    ($FFFFF607).w, D0
000EEFF8 0800 0000                                  btst    #$00, D0
000EEFFC 6700                                       beq.s   Offset_0x00908C
000EEFFE 4EB9 0000 A13A             				jsr		Sound_Select_Options
000EF004 5302                                       subq.b  #$01, D2
000EF006 6400                                       bcc.s   Offset_0x00908C
000EF008 143C 0002                                  move.b  #$02, D2
000EF00C                            Offset_0x00908C:
000EF00C 0800 0001                                  btst    #$01, D0
000EF010 6700                                       beq.s   Offset_0x00909C
000EF012 4EB9 0000 A13A             				jsr		Sound_Select_Options
000EF018 5202                                       addq.b  #$01, D2
000EF01A 0C02 0003                                  cmpi.b  #$03, D2
000EF01E 6500                                       bcs.s   Offset_0x00909C
000EF020 7400                                       moveq   #$00, D2
000EF022                            Offset_0x00909C:
000EF022 11C2 FF8C                                  move.b  D2, ($FFFFFF8C).w
000EF026 E54A                                       lsl.w   #$02, D2
000EF028 163B 2000                                  move.b  Menu_Options_Boundaries(PC, D2), D3    ; Offset_0x00910C
000EF02C 227B 2000                                  move.l  Menu_Options_Boundaries(PC, D2), A1    ; Offset_0x00910C
000EF030 3411                                       move.w  (A1), D2                      
000EF032 0800 0002                                  btst    #$02, D0
000EF036 6700                                       beq.s   Offset_0x0090B8
000EF038 5302                                       subq.b  #$01, D2
000EF03A 6400                                       bcc.s   Offset_0x0090B8
000EF03C 1403                                       move.b  D3, D2
000EF03E                            Offset_0x0090B8:
000EF03E 0800 0003                                  btst    #$03, D0
000EF042 6700                                       beq.s   Offset_0x0090C6
000EF044 5202                                       addq.b  #$01, D2
000EF046 B403                                       cmp.b   D3, D2
000EF048 6300                                       bls.s   Offset_0x0090C6
000EF04A 7400                                       moveq   #$00, D2
000EF04C                            Offset_0x0090C6:
000EF04C 0800 0006                                  btst    #button_A, D0
000EF050 6700                                       beq.s   Offset_0x0090C6_2
000EF052 0602 0010                  				addi.b  #$10, D2
000EF056 4EF9 0000 0000             				jmp		Offset_0x0090C6_3
000EF05C                            Offset_0x0090C6_2:
000EF05C 0800 0004                  				btst	#button_B,d0
000EF060 6700                       				beq.s	Offset_0x0090D6
000EF062 0402 0010                  				subi.b	#$10,d2
000EF066                            Offset_0x0090C6_3: 
000EF066 B403                                       cmp.b   D3, D2
000EF068 6300                                       bls.s   Offset_0x0090D6
000EF06A 7400                                       moveq   #$00, D2
000EF06C                            Offset_0x0090D6:
000EF06C 3282                                       move.w  D2, (A1)
000EF06E 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EF074 6600                                       bne.s   Offset_0x00910A
000EF076 0240 0020                                  andi.w	#button_C_mask,d0
000EF07A 6700                                       beq.s   Offset_0x00910A
000EF07C 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EF080 4EB8 325C                  				jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EF084 41F9 0000 0000                             lea     (Code_Level_Select), A0                ; Offset_0x00975C
000EF08A 45F9 0000 0000                             lea     (Code_14_Continues), A2                ; Offset_0x009762
000EF090 43F8 FFD0                                  lea     ($FFFFFFD0).w, A1
000EF094 7400                                       moveq   #$00, D2
000EF096 6100 0000                                  bsr     Offset_0x0096EA
000EF09A                            Offset_0x00910A:
000EF09A 4E75                                       rts
000EF09C                            ;-------------------------------------------------------------------------------                 
000EF09C                            Menu_Options_Boundaries: ; Offset_0x00910C:
000EF09C 02FF FF74                  		dc.l (3-1)<<24|($FFFFFF74&$FFFFFF)
000EF0A0 FFFF FF94                  		dc.l (2-1)<<24|(Level_Music+4&$FFFFFF)
000EF0A4 FFFF FF84                  		dc.l ($FF)<<24|(Sound_test_sound&$FFFFFF)  
000EF0A8                            ;------------------------------------------------------------------------------- 
000EF0A8                            Offset_0x009118:
000EF0A8 6100 0000                                  bsr     Offset_0x0091FE
000EF0AC 7200                                       moveq   #$00, D1
000EF0AE 1238 FF8C                                  move.b  ($FFFFFF8C).w, D1
000EF0B2 E749                                       lsl.w   #$03, D1
000EF0B4 47F9 0000 0000                             lea     (Menu_Options_Idx), A3                 ; Offset_0x009250
000EF0BA 47F3 1000                                  lea     $00(A3, D1), A3
000EF0BE 303C 6000                                  move.w  #$6000, D0
000EF0C2 45F9 FFFF 0030                             lea     ($FFFF0030), A2
000EF0C8 225B                                       move.l  (A3)+, A1
000EF0CA 6100 FE02                                  bsr     Offset_0x008F48
000EF0CE 45F9 FFFF 00B6                             lea     ($FFFF00B6), A2
000EF0D4 7200                                       moveq   #$00, D1
000EF0D6 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EF0DC 6700                                       beq.s   Offset_0x009160
000EF0DE 1238 FF8C                                  move.b  ($FFFFFF8C).w, D1
000EF0E2 E549                                       lsl.w   #$02, D1
000EF0E4 43FA FFB6                                  lea     Menu_Options_Boundaries(PC), A1        ; Offset_0x00910C
000EF0E8 2271 1000                                  move.l  $00(A1, D1), A1
000EF0EC 3211                                       move.w  (A1), D1
000EF0EE E549                                       lsl.w   #$02, D1
000EF0F0                            Offset_0x009160:
000EF0F0 2274 1000                                  move.l  $00(A4, D1), A1
000EF0F4 6100 FDD8                                  bsr     Offset_0x008F48
000EF0F8 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EF0FE 6600                                       bne.s   Offset_0x00917A
000EF100 45F9 FFFF 00C2                             lea     ($FFFF00C2), A2
000EF106 6100 0000                                  bsr     Offset_0x00922C
000EF10A                            Offset_0x00917A:
000EF10A 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EF110 201B                                       move.l  (A3)+, D0
000EF112 7215                                       moveq   #$15, D1
000EF114 7407                                       moveq   #$07, D2
000EF116 4EF8 34A0                                  jmp     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EF11A                            Offset_0x00918C:
000EF11A 6100 0000                                  bsr     Offset_0x0091FE
000EF11E 7200                                       moveq   #$00, D1
000EF120 1238 FF8C                                  move.b  ($FFFFFF8C).w, D1
000EF124 E749                                       lsl.w   #$03, D1
000EF126 47F9 0000 0000                             lea     (Menu_Options_Idx), A3                 ; Offset_0x009250
000EF12C 47F3 1000                                  lea     $00(A3, D1), A3
000EF130 7000                                       moveq   #$00, D0
000EF132 45F9 FFFF 0190                             lea     ($FFFF0190), A2
000EF138 225B                                       move.l  (A3)+, A1
000EF13A 6100 FD92                                  bsr     Offset_0x008F48
000EF13E 45F9 FFFF 0216                             lea     ($FFFF0216), A2
000EF144 7200                                       moveq   #$00, D1
000EF146 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EF14C 6700                                       beq.s   Offset_0x0091D2
000EF14E 1238 FF8C                                  move.b  ($FFFFFF8C).w, D1
000EF152 E549                                       lsl.w   #$02, D1
000EF154 43FA FF46                                  lea     Menu_Options_Boundaries(PC), A1        ; Offset_0x00910C
000EF158 2271 1000                                  move.l  $00(A1, D1), A1
000EF15C 3211                                       move.w  (A1), D1
000EF15E E549                                       lsl.w   #$02, D1
000EF160                            Offset_0x0091D2:
000EF160 2274 1000                                  move.l  $00(A4, D1), A1
000EF164 6100 FD68                                  bsr     Offset_0x008F48
000EF168 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EF16E 6600                                       bne.s   Offset_0x0091EC
000EF170 45F9 FFFF 0222                             lea     ($FFFF0222), A2
000EF176 6100 0000                                  bsr     Offset_0x00922C
000EF17A                            Offset_0x0091EC:
000EF17A 43F9 FFFF 0160                             lea     ($FFFF0160), A1
000EF180 201B                                       move.l  (A3)+, D0
000EF182 7215                                       moveq   #$15, D1
000EF184 7407                                       moveq   #$07, D2
000EF186 4EF8 34A0                                  jmp     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EF18A                            Offset_0x0091FE:
000EF18A 49F9 0000 0000                            lea     (Map_Player_Select_Jap_Idx), A4        ; Offset_0x009268
000EF190 4A38 FFF8                                 tst.b   ($FFFFFFF8).w                              ; $FFFFFFD8
000EF194 6A00                                      bpl.s   Offset_0x009210
000EF196 49F9 0000 0000                            lea     (Map_Player_Select_Idx), A4            ; Offset_0x009274
000EF19C                            Offset_0x009210:
000EF19C 4A38 FF8C                                  tst.b   ($FFFFFF8C).w
000EF1A0 6700                                       beq.s   Offset_0x00921C
000EF1A2 49F9 0000 0000                             lea     (Map_Vs_Mode_Items_Idx), A4            ; Offset_0x009280
000EF1A8                            Offset_0x00921C:
000EF1A8 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EF1AE 6600                                       bne.s   Offset_0x00922A
000EF1B0 49F9 0000 0000                             lea     (Map_Sound_Test_Idx), A4               ; Offset_0x009288
000EF1B6                            Offset_0x00922A:
000EF1B6 4E75                                       rts
000EF1B8                            Offset_0x00922C:
000EF1B8 3238 FF84                                  move.w  ($FFFFFF84).w, D1                     ; $FFFFFF64
000EF1BC 1401                                       move.b  D1, D2
000EF1BE E809                                       lsr.b   #$04, D1
000EF1C0 6100                                       bsr.s   Offset_0x009238
000EF1C2 1202                                       move.b  D2, D1
000EF1C4                            Offset_0x009238:
000EF1C4 0241 000F                                  andi.w  #$000F, D1
000EF1C8 0C01 000A                                  cmpi.b  #$0A, D1
000EF1CC 6500                                       bcs.s   Offset_0x009246
000EF1CE 5801                                       addi.b  #$04, D1
000EF1D0                            Offset_0x009246:
000EF1D0 0601 0010                                  addi.b  #$10, D1
000EF1D4 1001                                       move.b  D1, D0
000EF1D6 34C0                                       move.w  D0, (A2)+
000EF1D8 4E75                                       rts
000EF1DA                            ;-------------------------------------------------------------------------------                
000EF1DA                            Menu_Options_Idx: ; Offset_0x009250:
000EF1DA 0000 0000                                  dc.l    Map_Player_Select_Caption              ; Offset_0x009778
000EF1DE 4192 0003                                  dc.w    $4192, $0003
000EF1E2 0000 0000                                  dc.l    Map_Vs_Mode_Items_Caption              ; Offset_0x0097DA       
000EF1E6 4592 0003                                  dc.w    $4592, $0003
000EF1EA 0000 0000                                  dc.l    Map_Sound_Test_Caption                 ; Offset_0x00980C   
000EF1EE 4992 0003                                  dc.w    $4992, $0003  
000EF1F2                            ;-------------------------------------------------------------------------------                
000EF1F2                            Map_Player_Select_Jap_Idx: ; Offset_0x009268: 
000EF1F2 0000 0000                                  dc.l    Map_Sonic_And_Miles                    ; Offset_0x00978A                 
000EF1F6 0000 0000                                  dc.l    Map_Sonic_Alone                        ; Offset_0x0097AA  
000EF1FA 0000 0000                                  dc.l    Map_Miles_Alone                        ; Offset_0x0097BA 
000EF1FE                            ;-------------------------------------------------------------------------------                
000EF1FE                            Map_Player_Select_Idx: ; Offset_0x009274  
000EF1FE 0000 0000                                  dc.l    Map_Sonic_And_Tails                    ; Offset_0x00979A 
000EF202 0000 0000                                  dc.l    Map_Sonic_Alone                        ; Offset_0x0097AA
000EF206 0000 0000                                  dc.l    Map_Tails_Alone                        ; Offset_0x0097CA               
000EF20A                            ;-------------------------------------------------------------------------------                
000EF20A                            Map_Vs_Mode_Items_Idx: ; Offset_0x009280:  
000EF20A 0000 0000                                  dc.l    Map_All_Kinds_Items                    ; Offset_0x0097EC  
000EF20E 0000 0000                                  dc.l    Map_Teleport_Only                      ; Offset_0x0097FC
000EF212                            ;-------------------------------------------------------------------------------                
000EF212                            Map_Sound_Test_Idx: ; Offset_0x009288:          
000EF212 0000 0000                                  dc.l    Map_Sound_Test_Sound                   ; Offset_0x00981E
000EF216                            ;===============================================================================
000EF216                            
000EF216                            Level_Select_Menu: ; Offset_0x00928C:
000EF216 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EF21C 41F9 0000 0000                             lea     (Menu_Level_Select_Text), A0           ; Offset_0x009A8C
000EF222 303C 0000                                  move.w  #$0000, D0
000EF226 4EB8 389E                                  jsr     EniDec                              ; Offset_0x00177A
000EF22A 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EF230 203C 4000 0003                             move.l  #$40000003, D0
000EF236 7227                                       moveq   #$27, D1
000EF238 741B                                       moveq   #$1B, D2
000EF23A 4EB8 34A0                                  jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EF23E 7600                                       moveq   #$00, D3
000EF240 6100 0000                                  bsr     Offset_0x0095FC
000EF244 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
000EF24A 41F9 0000 0000                             lea     (Menu_Icons_Mappings), A0              ; Offset_0x009BE0
000EF250 303C 0090                                  move.w  #$0090, D0
000EF254 4EB8 389E                                  jsr     EniDec                              ; Offset_0x00177A
000EF258 6100 0000                                  bsr     Menu_Display_Icon                      ; Offset_0x00962A
000EF25C 4278 FF7A                                  clr.w   ($FFFFFF7A).w
000EF260 4278 FF10                                  clr.w   ($FFFFFF10).w
000EF264 4238 F711                                  clr.b   ($FFFFF711).w
000EF268 4278 F7F0                                  clr.w   ($FFFFF7F0).w
000EF26C 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x00874E
000EF272 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
000EF278 7014                                       moveq   #$14, D0
000EF27A 4EB8 47FA                                  jsr     PalLoad1                               ; Offset_0x0026CE
000EF27E 43F8 FB40                                  lea     ($FFFFFB40).w, A1
000EF282 45F8 FBC0                                  lea     ($FFFFFBC0).w, A2
000EF286 7207                                       moveq   #$07, D1
000EF288                            Offset_0x009300:
000EF288 24D1                                       move.l  (A1), (A2)+
000EF28A 4299                                       clr.l   (A1)+
000EF28C 51C9 FFFA                                  dbra    D1, Offset_0x009300
000EF290 103C 000F                                  move.b  #$0F, D0      ; $91
000EF294 4EB8 325C                                  jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EF298 31FC 0707 F614                             move.w  #$0707, ($FFFFF614).w
000EF29E                            ;               clr.w   (Two_Player_Flag).w                          ; $FFFFFFB8
000EF29E 42B8 F700                                  clr.l   ($FFFFF700).w
000EF2A2 42B8 F704                                  clr.l   ($FFFFF704).w
000EF2A6 4278 FF0C                                  clr.w   ($FFFFFF0C).w
000EF2AA 4278 FF0E                                  clr.w   ($FFFFFF0E).w
000EF2AE 11FC 0016 F62A                             move.b  #$16, ($FFFFF62A).w                       ; $FFFFF62A
000EF2B4 4EB9 0000 8D72                             jsr     DelayProgram                           ; Offset_0x00333E
000EF2BA 3038 F60C                                  move.w  ($FFFFF60C).w, D0
000EF2BE 0000 0040                                  ori.b   #$40, D0
000EF2C2 33C0 00C0 0004                             move.w  D0, ($00C00004)                       ; $00C00004
000EF2C8 4EB8 446E                                  jsr     Pal_FadeTo                             ; Offset_0x002382
000EF2CC                            Level_Select_Menu_Main_Loop: ; Offset_0x009348:
000EF2CC 11FC 0016 F62A                             move.b  #$16, ($FFFFF62A).w                       ; $FFFFF62A
000EF2D2 4EB9 0000 8D72                             jsr     DelayProgram                           ; Offset_0x00333E
000EF2D8 46FC 2700                                  move    #$2700, SR
000EF2DC 7600                                       moveq   #$00, D3
000EF2DE 6100 0000                                  bsr     Offset_0x00955A
000EF2E2 6100 0000                                  bsr     Offset_0x00947C
000EF2E6 363C 6000                                  move.w  #$6000, D3
000EF2EA 6100 0000                                  bsr     Offset_0x00955A
000EF2EE 6100 0000                                  bsr     Menu_Display_Icon                      ; Offset_0x00962A
000EF2F2 46FC 2300                                  move    #$2300, SR
000EF2F6 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x00874E
000EF2FC 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
000EF302 1038 F605                                  move.b  ($FFFFF605).w, D0
000EF306 8038 F607                                  or.b    ($FFFFF607).w, D0
000EF30A 0200 0080                                  andi.b  #$80, D0
000EF30E 6600                                       bne.s   Offset_0x00938E
000EF310 60BA                                       bra     Level_Select_Menu_Main_Loop            ; Offset_0x009348
000EF312                            Offset_0x00938E:
000EF312 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EF316 D040                                       add.w   D0, D0
000EF318 303B 0000                                  move.w  Menu_Level_Select_Array(PC, D0), D0    ; Offset_0x0093F2
000EF31C 6B00 0000                                  bmi     Menu_Game_Reset                        ; Offset_0x0093EA
000EF320 0C40 0600                                  cmpi.w  #$0600, D0
000EF324 6700 0000                                  beq     Menu_Test_Stage
000EF328 0C40 4000                                  cmpi.w  #$4000, D0
000EF32C 6600 0000                                  bne.w   Menu_Load_Level                        ; Offset_0x00941E
000EF330 11FC 0010 F600                             move.b  #$10, ($FFFFF600).w         ; $10, $FFFFF600
000EF336 4278 FE10                                  clr.w   ($FFFFFE10).w                                 ; $FFFFFE10
000EF33A 4EB9 0000 99F8                             jsr (LoadLivesLS).l
000EF340                            ;				move.b  #$03, ($FFFFFEC6).w
000EF340 7000                                       moveq   #$00, D0
000EF342 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
000EF346 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
000EF34A 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
000EF34E 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
000EF352 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
000EF356 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
000EF35A 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
000EF362                            ;               move.l  #$00001388, ($FFFFFFC4).w
000EF362 31F8 FF7C FF7A                             move.w  ($FFFFFF7C).w, ($FFFFFF7A).w
000EF368 4E75                                       rts
000EF36A                            Menu_Game_Reset: ; Offset_0x0093EA:
000EF36A 11FC 0000 F600                             move.b  #$00, ($FFFFF600).w           ; $00, $FFFFF600
000EF370 4E75                                       rts
000EF372                            Menu_Test_Stage:
000EF372                            ;                move.b	#$0018,($FFFFF600).w
000EF372                            ;				move.w	#$0701,($FFFFFE10).w
000EF372 4EB9 0000 0000             				jsr		Menu_Load_Level
000EF378 4E75                       				rts
000EF37A                            ;-------------------------------------------------------------------------------                
000EF37A                            Menu_Level_Select_Array: ; Offset_0x0093F2:
000EF37A 0000 0001 0002                             dc.w    $0000, $0001, $0002
000EF380 0100 0101 0102                             dc.w    $0100, $0101, $0102
000EF386 0200 0201 0202                             dc.w    $0200, $0201, $0202
000EF38C 0300 0301 0302                             dc.w    $0300, $0301, $0302
000EF392 0400 0401 0402                             dc.w    $0400, $0401, $0402
000EF398 0500 0501 0103                             dc.w    $0500, $0501, $0103
000EF39E 0502 4000 0701                             dc.w    $0502, $4000, $0701
000EF3A4 FFFF                                       dc.w    $FFFF
000EF3A6                            ;------------------------------------------------------------------------------- 
000EF3A6                            Menu_Load_Level: ; Offset_0x00941E:
000EF3A6 0240 3FFF                                  andi.w  #$3FFF, D0
000EF3AA 31C0 FE10                                  move.w  D0, ($FFFFFE10).w                             ; $FFFFFE10
000EF3AE 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w             ; $0C, $FFFFF600
000EF3B4 4EB9 0000 99F8                             jsr (LoadLivesLS).l
000EF3BA                            ;                move.b  #$03, ($FFFFFEC6).w
000EF3BA 7000                                       moveq   #$00, D0
000EF3BC 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
000EF3C0 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
000EF3C4 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
000EF3C8 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
000EF3CC 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
000EF3D0 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
000EF3D4 11C0 FE18                                  move.b  D0, ($FFFFFE18).w
000EF3D8 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
000EF3E0                            ;				move.l  #$00001388, ($FFFFFFC4).w
000EF3E0 103C 00E1                                  move.b  #Volume_Down, D0        ; $F9
000EF3E4 4EB8 3212                                  jsr     (PlaySound)                             ; Offset_0x00132C
000EF3E8 7000                                       moveq   #$00, D0
000EF3EA 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
000EF3EE 31C0 FFE8                                  move.w  D0, ($FFFFFFE8).w
000EF3F2 4E75                                       rts 
000EF3F4                            ;------------------------------------------------------------------------------- 
000EF3F4                            Offset_0x00947C:
000EF3F4 1238 F605                                  move.b  ($FFFFF605).w, D1
000EF3F8 0201 0003                                  andi.b  #$03, D1
000EF3FC 6600                                       bne.s   Offset_0x00948C
000EF3FE 5378 FF80                                  subq.w  #$01, ($FFFFFF80).w
000EF402 6A00                                       bpl.s   Offset_0x0094C2
000EF404                            Offset_0x00948C:
000EF404                            ;                move.w  #$000B, ($FFFFFF80).w
000EF404 0838 0006 FFF8             				btst	#6,(Graphics_Flags).w
000EF40A 6600                       				bne.s	Offset_0x00948C_2
000EF40C 31FC 000B FF80             				move.w  #$000B, ($FFFFFF80).w
000EF412 6000 0000                  				bra.w	Offset_0x00948C_3
000EF416                            Offset_0x00948C_2:
000EF416 31FC 0009 FF80             				move.w  #$0009, ($FFFFFF80).w
000EF41C                            Offset_0x00948C_3:
000EF41C 1238 F604                                  move.b  ($FFFFF604).w, D1
000EF420 0201 0003                                  andi.b  #button_up_mask|button_down_mask, D1
000EF424 6700                                       beq.s   Offset_0x0094C2
000EF426 4EB9 0000 A13A             				jsr		Sound_Select_Options
000EF42C 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EF430 0801 0000                                  btst    #$00, D1
000EF434 6700                                       beq.s   Offset_0x0094AC
000EF436 5340                                       subq.w  #$01, D0
000EF438 6400                                       bcc.s   Offset_0x0094AC
000EF43A 7015                                       moveq   #$15, D0
000EF43C                            Offset_0x0094AC:
000EF43C 0801 0001                                  btst    #$01, D1
000EF440 6700                                       beq.s   Offset_0x0094BC
000EF442 5240                                       addq.w  #$01, D0
000EF444 0C40 0016                                  cmpi.w  #$0016, D0
000EF448 6500                                       bcs.s   Offset_0x0094BC
000EF44A 7000                                       moveq   #$00, D0
000EF44C                            Offset_0x0094BC:
000EF44C 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
000EF450 4E75                                       rts
000EF452                            Offset_0x0094C2:
000EF452 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w
000EF458 6600                                       bne.s   Offset_0x00952C
000EF45A 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EF45E 1238 F605                                  move.b  ($FFFFF605).w, D1
000EF462 0801 0002                                  btst    #$02, D1
000EF466 6700                                       beq.s   Offset_0x0094DE
000EF468 5300                                       subq.b  #$01, D0
000EF46A                            ;                bcc.w   Offset_0x0094DE
000EF46A                                    ;        moveq   #$7F, D0
000EF46A                            Offset_0x0094DE:
000EF46A 0801 0003                                  btst    #$03, D1
000EF46E 6700                                       beq.s   Offset_0x0094EE
000EF470 5200                                       addq.b  #$01, D0
000EF472                               ;             cmpi.w  #$0080, D0
000EF472                              ;              bcs.s   Offset_0x0094EE
000EF472                             ;               moveq   #$00, D0
000EF472                            Offset_0x0094EE:
000EF472 0801 0006                  	btst	#button_A,d1
000EF476 6700                       	beq.s	Offset_0x0094EE_2
000EF478 0600 0010                  	addi.b	#$10,d0
000EF47C                            Offset_0x0094EE_2:
000EF47C 0801 0004                  	btst	#button_B,d1
000EF480 6700                       	beq.s	Offset_0x0094FC
000EF482 0400 0010                  	subi.b	#$10,d0
000EF486                            ;	andi.b	#$FF,d0
000EF486                            
000EF486                            Offset_0x0094FC:
000EF486 31C0 FF84                                  move.w  D0, ($FFFFFF84).w                     ; $FFFFFF64
000EF48A 0241 0020                                  andi.w  #button_C_mask, D1
000EF48E 6700                                       beq.s   Offset_0x00952A
000EF490 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EF494 4EB8 3212                                  jsr     (PlaySound)                           ; Offset_0x00131A
000EF498 41F9 0000 0000                             lea     (Code_Debug_Mode), A0                  ; Offset_0x009768
000EF49E 45F9 0000 0000                             lea     (Code_All_Emeralds), A2                ; Offset_0x009772
000EF4A4 43F8 FFD0                                  lea     ($FFFFFFD0).w, A1
000EF4A8 7401                                       moveq   #$01, D2
000EF4AA 6100 0000                                  bsr     Offset_0x0096EA
000EF4AE                            Offset_0x00952A:
000EF4AE 4E75                                       rts
000EF4B0                            Offset_0x00952C:
000EF4B0 1238 F605                                  move.b  ($FFFFF605).w, D1
000EF4B4 0201 000C                                  andi.b  #$0C, D1
000EF4B8 6700                                       beq.s   Offset_0x009542
000EF4BA 4EB9 0000 A13A             				jsr		Sound_Select_Options
000EF4C0 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EF4C4 103B 0000                                  move.b  Menu_Left_Right_Select(PC, D0), D0     ; Offset_0x009544
000EF4C8 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
000EF4CC                            Offset_0x009542:
000EF4CC 4E75                                       rts
000EF4CE                            ;-------------------------------------------------------------------------------
000EF4CE                            Menu_Left_Right_Select: ; Offset_0x009544:
000EF4CE 0F10 1112 1212 1313 1314+                  dc.b    $0F, $10, $11, $12, $12, $12, $13, $13, $13, $14, $14, $14, $15, $15, $15
000EF4DD 0001 0203 0609 0C                          dc.b    $00, $01, $02, $03, $06, $09, $0C                                                               
000EF4E4                            ;-------------------------------------------------------------------------------  
000EF4E4                            Offset_0x00955A:
000EF4E4 49F9 FFFF 0000                             lea     ($FFFF0000), A4
000EF4EA 4BF9 0000 0000                             lea     (Menu_Text_Highlight), A5              ; Offset_0x009692
000EF4F0 4DF9 00C0 0000                             lea     ($00C00000), A6                          ; $00C00000
000EF4F6 7000                                       moveq   #$00, D0
000EF4F8 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EF4FC E548                                       lsl.w   #$02, D0
000EF4FE 47F5 0000                                  lea     $00(A5, D0), A3
000EF502 7000                                       moveq   #$00, D0
000EF504 1013                                       move.b  (A3), D0
000EF506 C0FC 0050                                  mulu.w  #$0050, D0
000EF50A 7200                                       moveq   #$00, D1
000EF50C 122B 0001                                  move.b  $0001(A3), D1
000EF510 D041                                       add.w   D1, D0
000EF512 43F4 0000                                  lea     $00(A4, D0), A1
000EF516 7200                                       moveq   #$00, D1
000EF518 1213                                       move.b  (A3), D1
000EF51A EF49                                       lsl.w   #$07, D1
000EF51C D22B 0001                                  add.b   $0001(A3), D1
000EF520 0641 C000                                  addi.w  #$C000, D1
000EF524 E589                                       lsl.l   #$02, D1
000EF526 E449                                       lsr.w   #$02, D1
000EF528 0041 4000                                  ori.w   #$4000, D1
000EF52C 4841                                       swap.w  D1
000EF52E 2D41 0004                                  move.l  D1, $0004(A6)
000EF532 740D                                       moveq   #$0D, D2
000EF534                            Offset_0x0095AA:
000EF534 3019                                       move.w  (A1)+, D0
000EF536 D043                                       add.w   D3, D0
000EF538 3C80                                       move.w  D0, (A6)
000EF53A 51CA FFF8                                  dbra    D2, Offset_0x0095AA
000EF53E 544B                                       addq.w  #$02, A3
000EF540 7000                                       moveq   #$00, D0
000EF542 1013                                       move.b  (A3), D0
000EF544 6700                                       beq.s   Offset_0x0095EE
000EF546 C0FC 0050                                  mulu.w  #$0050, D0
000EF54A 7200                                       moveq   #$00, D1
000EF54C 122B 0001                                  move.b  $0001(A3), D1
000EF550 D041                                       add.w   D1, D0
000EF552 43F4 0000                                  lea     $00(A4, D0), A1
000EF556 7200                                       moveq   #$00, D1
000EF558 1213                                       move.b  (A3), D1
000EF55A EF49                                       lsl.w   #$07, D1
000EF55C D22B 0001                                  add.b   $0001(A3), D1
000EF560 0641 C000                                  addi.w  #$C000, D1
000EF564 E589                                       lsl.l   #$02, D1
000EF566 E449                                       lsr.w   #$02, D1
000EF568 0041 4000                                  ori.w   #$4000, D1
000EF56C 4841                                       swap.w  D1
000EF56E 2D41 0004                                  move.l  D1, $0004(A6)
000EF572 3019                                       move.w  (A1)+, D0
000EF574 D043                                       add.w   D3, D0
000EF576 3C80                                       move.w  D0, (A6)
000EF578                            Offset_0x0095EE:
000EF578 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w
000EF57E 6600                                       bne.s   Offset_0x0095FA
000EF580 6100 0000                                  bsr     Offset_0x0095FC
000EF584                            Offset_0x0095FA:
000EF584 4E75                                       rts       
000EF586                            ;------------------------------------------------------------------------------- 
000EF586                            Offset_0x0095FC:
000EF586 23FC 49C4 0003 00C0 0004                   move.l  #$49C40003, ($00C00004) ; Posição dos números do Sound Test
000EF590 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EF594 1400                                       move.b  D0, D2
000EF596 E808                                       lsr.b   #$04, D0
000EF598 6100                                       bsr.s   Offset_0x009612
000EF59A 1002                                       move.b  D2, D0
000EF59C                            Offset_0x009612:
000EF59C 0240 000F                                  andi.w  #$000F, D0
000EF5A0 0C00 000A                                  cmpi.b  #$0A, D0
000EF5A4 6500                                       bcs.s   Offset_0x009620
000EF5A6 5800                                       addi.b  #$04, D0
000EF5A8                            Offset_0x009620:
000EF5A8 0600 0010                                  addi.b  #$10, D0
000EF5AC D043                                       add.w   D3, D0
000EF5AE 3C80                                       move.w  D0, (A6)
000EF5B0 4E75                                       rts
000EF5B2                            Offset_0x0096EA:
000EF5B2 3038 FF0C                                  move.w  ($FFFFFF0C).w, D0
000EF5B6 D0C0                                       adda.w  D0, A0
000EF5B8 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EF5BC B010                                       cmp.b   (A0), D0
000EF5BE 6600                                       bne.s   Offset_0x009710
000EF5C0 5278 FF0C                                  addq.w  #$01, ($FFFFFF0C).w
000EF5C4 4A28 0001                                  tst.b   $0001(A0)
000EF5C8 6600                                       bne.s   Offset_0x009716
000EF5CA 22BC 0101 0101                             move.l  #$01010101, (A1)
000EF5D0 31D1 FFD0                  				move.w	(A1),($FFFFFFD0).w	; activate slow motion & frame advance cheat flag
000EF5D4 11FC 0001 FFD2             				move.b	#$01,($FFFFFFD2).w	; activate debug mode cheat flag
000EF5DA 11FC 0001 FFFA             				move.b	#$01,($FFFFFFFA).w	; activate debug mode cheat flag
000EF5E0 103C 0033                                  move.b  #$33, D0           ; $B5
000EF5E4 4EB8 325C                                  jsr     (PlaySound_Special)                             ; Offset_0x00132C
000EF5E8                            Offset_0x009710:
000EF5E8 31FC 0000 FF0C                             move.w  #$0000, ($FFFFFF0C).w
000EF5EE                            Offset_0x009716:
000EF5EE 3038 FF0E                                  move.w  ($FFFFFF0E).w, D0
000EF5F2 D4C0                                       adda.w  D0, A2
000EF5F4 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EF5F8 B012                                       cmp.b   (A2), D0
000EF5FA 6600                                       bne.s   Offset_0x009754
000EF5FC 5278 FF0E                                  addq.w  #$01, ($FFFFFF0E).w
000EF600 4A2A 0001                                  tst.b   $0001(A2)
000EF604 6600                                       bne.s   Offset_0x00975A
000EF606 4A42                                       tst.w   D2
000EF608 6600                                       bne.s   Offset_0x009744
000EF60A 11FC 000F FE18                             move.b  #$0F, ($FFFFFE18).w
000EF610 103C 00BF                                  move.b  #$BF, D0 ; $3F - Referência incorreta
000EF614 4EB8 325C                                  jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EF618 6000                                       bra.s   Offset_0x009754
000EF61A                            Offset_0x009744:
000EF61A 13FC 0001 00A1 30F1        				move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000EF622 11FC 0006 FE57             				move.b	#$6,(Emeralds_flag).w	; set number of chaos emeralds to 6
000EF628 13FC 0006 0020 0121        				move.b	#$6,($200121).l
000EF630 31FC 0102 FE58             				move.w	#$0102,(Emeralds_flag+1).w	; set number of chaos emeralds to 6
000EF636 13FC 0001 0020 0123        				move.b	#$1,($200123).l
000EF63E 31FC 0304 FE5A             				move.w	#$0304,(Emeralds_flag+3).w	; set number of chaos emeralds to 6	
000EF644 13FC 0002 0020 0125        				move.b	#$2,($200125).l
000EF64C 11FC 0005 FE5C             				move.b	#$05,(Emeralds_flag+5).w	; set number of chaos emeralds to 6
000EF652 13FC 0003 0020 0127        				move.b	#$3,($200127).l
000EF65A 13FC 0004 0020 0129        				move.b	#$4,($200129).l
000EF662 13FC 0005 0020 012B        				move.b	#$5,($20012B).l
000EF66A 13FC 0000 00A1 30F1        				move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000EF672 103C 002B                                  move.b  #Emerald_Snd, D0        ; $9D
000EF676 4EB8 325C                                  jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EF67A                            Offset_0x009754:
000EF67A 31FC 0000 FF0E                             move.w  #$0000, ($FFFFFF0E).w
000EF680                            Offset_0x00975A:
000EF680 4E75                                       rts
000EF682                            ;-------------------------------------------------------------------------------                    
000EF682                            Code_Level_Select: ;  Offset_0x00975C:
000EF682 1965 0917 0000                             dc.b    $19, $65, $09, $17, $00, $00
000EF688                            ;-------------------------------------------------------------------------------                 
000EF688                            Code_14_Continues: ; Offset_0x009762:
000EF688 0101 0204 0000                             dc.b    $01, $01, $02, $04, $00, $00
000EF68E                            ;-------------------------------------------------------------------------------                  
000EF68E                            Code_Debug_Mode: ; Offset_0x009768:
000EF68E 0109 0902 0101 0204 0000                   dc.b    $01, $09, $09, $02, $01, $01, $02, $04, $00, $00
000EF698                            ;-------------------------------------------------------------------------------                 
000EF698                            Code_All_Emeralds: ; Offset_0x009772:
000EF698 0401 0206 0000                             dc.b    $04, $01, $02, $06, $00, $00
000EF69E                            ;-------------------------------------------------------------------------------  
000EF69E =00000000                  __ = $00
000EF69E =00000010                  _0 = $10
000EF69E =00000011                  _1 = $11
000EF69E =00000012                  _2 = $12
000EF69E =00000013                  _3 = $13
000EF69E =00000014                  _4 = $14
000EF69E =00000015                  _5 = $15
000EF69E =00000016                  _6 = $16
000EF69E =00000017                  _7 = $17
000EF69E =00000018                  _8 = $18
000EF69E =00000019                  _9 = $19
000EF69E =0000001E                  _A = $1E
000EF69E =0000001F                  _B = $1F
000EF69E =00000020                  _C = $20
000EF69E =00000021                  _D = $21
000EF69E =00000022                  _E = $22    
000EF69E =00000023                  _F = $23
000EF69E =00000024                  _G = $24
000EF69E =00000025                  _H = $25
000EF69E =00000026                  _I = $26
000EF69E =00000027                  _J = $27
000EF69E =00000028                  _K = $28
000EF69E =00000029                  _L = $29
000EF69E =0000002A                  _M = $2A
000EF69E =0000002B                  _N = $2B
000EF69E =0000002C                  _O = $2C
000EF69E =0000002D                  _P = $2D
000EF69E =0000002E                  _Q = $2E
000EF69E =0000002F                  _R = $2F
000EF69E =00000030                  _S = $30
000EF69E =00000031                  _T = $31
000EF69E =00000032                  _U = $32
000EF69E =00000033                  _V = $33
000EF69E =00000034                  _W = $34
000EF69E =00000035                  _X = $35
000EF69E =00000036                  _Y = $36
000EF69E =00000037                  _Z = $37
000EF69E =0000001A                  _st = $1A
000EF69E                            
000EF69E                            Map_Player_Select_Caption: ; Offset_0x009778:
000EF69E 10                                         dc.b    $10
000EF69F 1A00 2D29 1E36 222F 0030+                  dc.b    _st,__,_P,_L,_A,_Y,_E,_R,__,_S,_E,_L,_E,_C,_T,__,_st                   
000EF6B0                            Map_Sonic_And_Miles: ; Offset_0x00978A: 
000EF6B0 0E                                         dc.b    $0E
000EF6B1 302C 2B26 2000 1E2B 2100+                  dc.b    _S,_O,_N,_I,_C,__,_A,_N,_D,__,_M,_I,_L,_E,_S 
000EF6C0                            Map_Sonic_And_Tails: ; Offset_0x00979A: 
000EF6C0 0E                                         dc.b    $0E
000EF6C1 302C 2B26 2000 1E2B 2100+                  dc.b    _S,_O,_N,_I,_C,__,_A,_N,_D,__,_T,_A,_I,_L,_S   
000EF6D0                            Map_Sonic_Alone: ; Offset_0x0097AA:
000EF6D0 0E                                         dc.b    $0E
000EF6D1 0000 0000 2B32 2929 0000+                  dc.b    __,__,__,__,_N,_U,_L,_L,__,__,__,__,__,__,__
000EF6E0                            Map_Miles_Alone: ; Offset_0x0097BA:
000EF6E0 0E                                         dc.b    $0E
000EF6E1 0000 0000 2B32 2929 0000+                  dc.b    __,__,__,__,_N,_U,_L,_L,__,__,__,__,__,__,__
000EF6F0                            Map_Tails_Alone: ; Offset_0x0097CA:
000EF6F0 0E                                         dc.b    $0E
000EF6F1 0000 0000 2B32 2929 0000+                  dc.b    __,__,__,__,_N,_U,_L,_L,__,__,__,__,__,__,__
000EF700                            ;-------------------------------------------------------------------------------     
000EF700                            Map_Vs_Mode_Items_Caption: ; Offset_0x0097DA:
000EF700 10                                         dc.b    $10
000EF701 1A1E 2931 222F 2B1E 3122+                  dc.b    _st,_A,_L,_T,_E,_R,_N,_A,_T,_E,__,_M,_U,_S,_I,_C,_st  
000EF712                            Map_All_Kinds_Items: ; Offset_0x0097EC:  
000EF712 0E                                         dc.b    $0E
000EF713 0000 0000 0000 2C23 2300+                  dc.b    __,__,__,__,__,__,_O,_F,_F,__,__,__,__,__,__
000EF722                            Map_Teleport_Only: ; Offset_0x0097FC:
000EF722 0E                                         dc.b    $0E
000EF723 0000 0000 0000 2C2B 0000+                  dc.b    __,__,__,__,__,__,_O,_N,__,__,__,__,__,__,__
000EF732                            ;-------------------------------------------------------------------------------   
000EF732                            Map_Sound_Test_Caption: ; Offset_0x00980C:
000EF732 10                                         dc.b    $10
000EF733 1A00 0030 2C32 2B21 0031+                  dc.b    _st,__,__,_S,_O,_U,_N,_D,__,_T,_E,_S,_T,__,__,__,_st
000EF744                            Map_Sound_Test_Sound: ; Offset_0x00981E:   
000EF744 0E                                         dc.b    $0E
000EF745 0000 0000 0000 1010 0000+                  dc.b    __,__,__,__,__,__,_0,_0,__,__,__,__,__,__,__   
000EF754                            ;-------------------------------------------------------------------------------                               
000EF754                            Menu_Display_Icon: ; Offset_0x00962A:
000EF754 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EF758 47F9 0000 0000                             lea     (Menu_Icon_List), A3                   ; Offset_0x00967C
000EF75E 47F3 0000                                  lea     $00(A3, D0), A3
000EF762 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
000EF768 7000                                       moveq   #$00, D0
000EF76A 1013                                       move.b  (A3), D0
000EF76C E748                                       lsl.w   #$03, D0
000EF76E 3200                                       move.w  D0, D1
000EF770 D040                                       add.w   D0, D0
000EF772 D041                                       add.w   D1, D0
000EF774 43F1 0000                                  lea     $00(A1, D0), A1
000EF778 203C 4B36 0003                             move.l  #$4B360003, D0
000EF77E 7203                                       moveq   #$03, D1
000EF780 7402                                       moveq   #$02, D2
000EF782 4EB8 34A0                                  jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EF786 43F9 0000 0000                             lea     (Pal_Levels_Icons), A1                 ; Offset_0x00982E
000EF78C 7000                                       moveq   #$00, D0
000EF78E 1013                                       move.b  (A3), D0
000EF790 EB48                                       lsl.w   #$05, D0
000EF792 43F1 0000                                  lea     $00(A1, D0), A1
000EF796 45F8 FB40                                  lea     ($FFFFFB40).w, A2
000EF79A 7207                                       moveq   #$07, D1
000EF79C                            Offset_0x009674:
000EF79C 24D9                                       move.l  (A1)+, (A2)+
000EF79E 51C9 FFFC                                  dbra    D1, Offset_0x009674
000EF7A2 4E75                                       rts
000EF7A4                            
000EF7A4                            ;--------------------------------------------------------------------------------
000EF7A4                            Dynamic_Normal: 
000EF7A4 47F8 F7F0                  		lea	($FFFFF7F0).w,a3 
000EF7A8                            loc_3BD74: 
000EF7A8 3C1A                       		move.w	(a2)+,d6
000EF7AA                            Dynamic_Normal_Loop: 
000EF7AA 5313                       		subq.b	#1,(a3)
000EF7AC 6400                       		bcc.s	loc_3BDBC
000EF7AE 7000                       		moveq	#0,d0
000EF7B0 102B 0001                  		move.b	1(a3),d0
000EF7B4 B02A 0006                  		cmp.b	6(a2),d0
000EF7B8 6500                       		bcs.s	loc_3BD8C
000EF7BA 7000                       		moveq	#0,d0
000EF7BC 1740 0001                  		move.b	d0,1(a3)
000EF7C0                            loc_3BD8C:
000EF7C0 522B 0001                  		addq.b	#1,1(a3)
000EF7C4 1692                       		move.b	(a2),(a3)
000EF7C6 6A00                       		bpl.s	loc_3BD9A
000EF7C8 D040                       		add.w	d0,d0
000EF7CA 16B2 0009                  		move.b	9(a2,d0),(a3)
000EF7CE                            loc_3BD9A:
000EF7CE 1032 0008                  		move.b	8(a2,d0),d0
000EF7D2 EB48                       		lsl.w	#5,d0
000EF7D4 342A 0004                  		move.w	4(a2),d2
000EF7D8 2212                       		move.l	(a2),d1
000EF7DA 0281 00FF FFFF             		and.l	#$FFFFFF,d1
000EF7E0 D280                       		add.l	d0,d1
000EF7E2 7600                       		moveq	#0,d3
000EF7E4 162A 0007                  		move.b	7(a2),d3
000EF7E8 E94B                       		lsl.w	#4,d3
000EF7EA 4EB8 34E0                  		jsr	QueueDMATransfer 
000EF7EE                            loc_3BDBC:
000EF7EE 102A 0006                  		move.b	6(a2),d0
000EF7F2 4A12                       		tst.b	(a2)
000EF7F4 6A00                       		bpl.s	loc_3BDC6
000EF7F6 D000                       		add.b	d0,d0
000EF7F8                            loc_3BDC6:
000EF7F8 5200                       		addq.b	#1,d0
000EF7FA 0240 00FE                  		and.w	#$FE,d0
000EF7FE 45F2 0008                  		lea	8(a2,d0),a2
000EF802 544B                       		addq.w	#2,a3
000EF804 51CE FFA4                  		dbra	d6,dynamic_Normal_Loop 
000EF808 4E75                       		rts
000EF80A                            
000EF80A                            Menu_Animate: ; Offset_0x00874E:  
000EF80A 0000                       	dc.w   0
000EF80C                            ; Sonic/Miles animated background
000EF80C 0000 0000                  	dc.l ($FF<<$18)|Sonic_Miles
000EF810 0020                       	dc.w $20
000EF812 05                         	dc.b 5
000EF813 0A                         	dc.b $A
000EF814 0000                       	dc.b   0,0
000EF816 0A05                       	dc.b  $A,  5	; 2
000EF818 1405                       	dc.b $14,  5	; 4
000EF81A 1E05                       	dc.b $1E,  5	; 10
000EF81C 0000                       	dc.b   0,0
000EF81E                            Pal_Levels_Icons: ; Offset_0x00982E:                
000EF81E                                            incbin  'data\menus\lvsicons.pal'
000EF9FE                            Menu_Palette:
000EF9FE                                            incbin  'data\menu\menu.pal'
000EFA7E                            ;-------------------------------------------------------------------------------                  
000EFA7E                            Menu_Icon_List: ; Offset_0x00967C:
000EFA7E 0000 0008 0808 0202 0206+                  dc.b    $00, $00, $00, $08, $08, $08, $02, $02, $02, $06, $06, $06, $07, $07, $07, $04
000EFA8E 0404 010C 0B0E                             dc.b    $04, $04, $01, $0C, $0B, $0E  
000EFA94                            ;-------------------------------------------------------------------------------  
000EFA94                            Menu_Text_Highlight: ; Offset_0x009692: 
000EFA94 0306 0324 0306 0424 0306+                  dc.w    $0306, $0324, $0306, $0424, $0306, $0524, $0706, $0724
000EFAA4 0706 0824 0706 0924 0B06+                  dc.w    $0706, $0824, $0706, $0924, $0B06, $0B24, $0B06, $0C24
000EFAB4 0B06 0D24 0F06 0F24 0F06+                  dc.w    $0B06, $0D24, $0F06, $0F24, $0F06, $1024, $0F06, $1124
000EFAC4 1306 1324 1306 1424 1306+                  dc.w    $1306, $1324, $1306, $1424, $1306, $1524, $032C, $034A
000EFAD4 032C 044A 032C 054A 072C+                  dc.w    $032C, $044A, $032C, $054A, $072C, $0000, $0B2C, $0000
000EFAE4 0F2C 0F48 132C 1348                        dc.w    $0F2C, $0F48, $132C, $1348                  
000EFAEC                            
000EFAEC                            ;-------------------------------------------------------------------------------
000EFAEC                            ;Nem_MenuFont:                                                    ; Offset_0x07C43A:
000EFAEC                             ;               incbin  'data\sprites\menufont.nem'  
000EFAEC                            Menu_Frame:                                                   ; Offset_0x07D990:
000EFAEC                                            incbin  'data\menus\menu_frm.nem'  
000EFB6C                            Level_Icons:
000EFB6C                                            incbin  'data\menus\levelico.nem' 
000F09C6                            Menu_Icons_Mappings: ; Offset_0x009BE0: 
000F09C6                                            incbin  'data\menus\iconsmap.eni'   
000F09F8                            Versus_Menu_Bg_Mappings:                                      ; Offset_0x07CB80:
000F09F8                                            INCBIN	'data\menu\menubg.eni'     
000F0BE8                            ;-------------------------------------------------------------------------------                 
000F0BE8                            Menu_Level_Select_Text: ; Offset_0x009A8C:
000F0BE8                                            incbin  'data\menus\menutext.eni'  
000F0D2E                            Sonic_Miles:                                                  ; Offset_0x07CD2C: 
000F0D2E                                            incbin  'data\menu\soncmils.bin'         
000F122E                            ;-------------------------------------------------------------------------------   
000F122E                            Options_Frame_Mappings: ; Offset_0x009A60:
000F122E                                            incbin  'data\menus\optframe.eni'
000F122E                                            incbin  'data\menus\optframe.eni'
000F125A                            ;OptionsMenu:
000F125A                            ;		include	"_inc\s2_option.asm"
000F125A                            ;Splashscreen:
000F125A                            ;		include _inc\splash.asm
000F125A                            ;		even
000F125A                            
000F125A                            Art_Dust:		incbin	#artunc\spindust.bin	; Spindash dust
000F2B9A                            		even	
000F2B9A                            
000F2B9A                            Splashscreen2:
000F2B9A                            		include _inc\splash2.asm
000F2B9A 103C 00E0                  Splash2:			move.b	#$E0,d0
000F2B9E 4EB9 0000 0000             			jsr	PlayMusic				  ; Stop the music
000F2BA4 4EB8 3754                  			jsr	ClearPLC			; Clear the PLC
000F2BA8 4EB8 4678                  			jsr	Pal_MakeFlash			; Fade out
000F2BAC 46FC 2700                  			move	#$2700,sr
000F2BB0                            
000F2BB0 4DF9 00C0 0004             Splash2_SetupVDP:	lea	($C00004).l,a6			; Setup teh VDP
000F2BB6 3CBC 8004                  			move.w	#$8004,(a6)			; Mode register 1 setting
000F2BBA 3CBC 8230                  			move.w	#$8230,(a6)			; Map Plane A setting
000F2BBE 3CBC 8407                  			move.w	#$8407,(a6)			; Map Plane B setting
000F2BC2 3CBC 9001                  			move.w	#$9001,(a6)			; Plane size setting
000F2BC6 3CBC 9200                  			move.w	#$9200,(a6)			; Window vertical position
000F2BCA 3CBC 8B03                  			move.w	#$8B03,(a6)			; Mode register 3 setting
000F2BCE 3CBC 8720                  			move.w	#$8720,(a6)			; Backdrop color setting
000F2BD2 4238 F64E                  			clr.b	($FFFFF64E).w
000F2BD6 4EB8 3084                  			jsr	ClearScreen			; Clear the actual screen
000F2BDA 43F8 D000                  			lea	($FFFFD000).w,a1		; Clear $FFD000-$FFD7FF
000F2BDE 7000                       			moveq	#0,d0
000F2BE0 323C 07FF                  			move.w	#$7FF,d1
000F2BE4                            
000F2BE4                            Splash2_ClrObjRam:
000F2BE4 22C0                       			move.l	d0,(a1)+
000F2BE6 51C9 FFFC                  			dbf	d1,Splash2_ClrObjRam
000F2BEA                            				
000F2BEA 23FC 4000 0000 00C0 0004   Splash2_Art:		move.l	#$40000000,($C00004).l		; VRAM $0000
000F2BF4 41F9 0000 0000             			lea	(Art_Splash2).l,a0		; Image's tiles
000F2BFA 4EB8 3596                  			jsr	NemDec				; Decompress
000F2BFE                            ;Here, you may add the art used for your objects
000F2BFE                            ;		   move.l	#$54C00000,($C00004).l
000F2BFE                            ;		   lea	(Nem_ObjSplash2).l,a0
000F2BFE                            ;		   jsr	NemDec
000F2BFE                            				
000F2BFE                            Splash2_Mappings:
000F2BFE 43F9 00FF 0000             			lea	($FF0000).l,a1			; Load screen mappings
000F2C04 41F9 0000 0000             			lea	(Map_Splash2).l,a0
000F2C0A 303C 0000                  			move.w	#0,d0
000F2C0E 4EB8 389E                  			jsr	EniDec
000F2C12                            				
000F2C12 43F9 00FF 0000             Splash2_ShowOnVDP:	lea	($FF0000).l,a1			; Show screen
000F2C18 203C 4000 0003             			move.l	#$40000003,d0			; Location
000F2C1E 7227                       			moveq	#$27,d1
000F2C20 741B                       			moveq	#$1B,d2
000F2C22 4EB8 34A0                  			jsr	ShowVDPGraphics				
000F2C26                            
000F2C26                            Splash2_Palette:
000F2C26 43F9 0000 0000             		lea	(Pal_Splash2).l,a1
000F2C2C 45F8 FB80                  		lea	($FFFFFB80).w,a2
000F2C30 701F                       		moveq	#$1F,d0
000F2C32 24D9                       	loop3:	move.l	(a1)+,(a2)+
000F2C34 51C8 FFFC                  		dbf	d0,loop3
000F2C38                            				
000F2C38 303C 0046                  Splash2_Music:		move.w	#$46,d0		; Play music
000F2C3C 4EB8 3212                  			jsr	PlaySound
000F2C40                            ; The own palette for your object.
000F2C40                            ;			moveq	#$19,d0		; load Sonic's pallet
000F2C40                            ;			jsr	PalLoad2				
000F2C40                            Splash2_LoadObj:
000F2C40 4EB8 4678                  			jsr	Pal_MakeFlash
000F2C44 4EB8 446E                  			jsr	Pal_Fadeto
000F2C48                            ;Set the object's ID on $FFFFB000
000F2C48                            			;move.b	#$00,($FFFFB000).w ; load your object
000F2C48 4EB9 0000 0000             			jsr	RunObjects
000F2C4E 4EB9 0001 5C98             			jsr	BuildSprites
000F2C54                            ; ---------------------------------------------------------------------------------------------------------------------
000F2C54 11FC 0002 F62A             Splash2_Loop:		move.b	#2,(Delay_Time).w		; Function 2 in vInt
000F2C5A 31FC 02F8 F614             		move.w	#760,(Demo_Time_left).w	; run Sonic Team Screen for 300 frames		
000F2C60 4EB9 0000 0000             		jsr	RunObjects
000F2C66 4EB9 0001 5C98             		jsr	BuildSprites
000F2C6C 6000 0000                  		bra.w Sega2_WaitEnd2
000F2C70                            
000F2C70                            Sega2_WaitEnd2:	
000F2C70 11FC 0002 F62A             		move.b	#2,(Delay_Time).w
000F2C76 4EB9 0000 8D72             		jsr	DelayProgram
000F2C7C 5378 F614                  		sub.w	#1,(Demo_Time_left).w	; add 1 to frame counter
000F2C80 0C78 0168 F614             		cmp.w	#360,(Demo_Time_left).w	; is the frame 360?
000F2C86 6700 0000                  		beq.w	Sega2_GotoTitle
000F2C8A 0238 0080 F605             		andi.b	#$80,(Ctrl_1_Press).w ; is	Start button pressed?
000F2C90 6700 FFDE                  		beq.w	Sega2_WaitEnd2	; if not, branch
000F2C94                            
000F2C94                            Sega2_GotoTitle:
000F2C94 4278 F614                  		clr.w	(Demo_Time_left).w	; clear frame counter
000F2C98 11FC 0004 F600             		move.b	#$4,(Game_Mode).w	; go to title screen
000F2C9E 4E75                       		rts
000F2CA0                            		
000F2CA0                            Pal_Splash2:		incbin	"STPAL.BIN"
000F2CC0                            			even
000F2CC0                            Art_Splash2:		incbin	"STTILES.BIN"
000F3746 00                         			even
000F3746                            Map_Splash2:		incbin	"STMAP.BIN"
000F37BE                            			even
000F37BE                            SplashScreen3:
000F37BE 4EBA 9C98                  	jsr		ssrgscreen
000F37C2                            	even
000F37C2                            	even
000F37C2                            		even
000F37C2                            
000F37C2                            SonicRetroscreen:
000F37C2                            		include _inc\SonicRetro.asm
000F37C2                            
000F37C2                            SRScreen:
000F37C2 4EF9 0000 0000             	jmp		RetroScreen
000F37C8                            
000F37C8                            unk_3140:	incbin	SonicRetroPal.bin
000F3848                            		even
000F3848                            
000F3848                            
000F3848                            ; ---------------------------------------------------------------------------
000F3848                            
000F3848                            RetroScreen:				; DATA XREF: ROM:00000394o
000F3848 31FC 0000 FF38             		move.w	#0,($FFFFFF38).w
000F384E 103C 00E4                  		move.b	#$E4,d0
000F3852 4EB8 325C                  		jsr	PlaySound_Special
000F3856 4EB8 3754                  		jsr	ClearPLC
000F385A 4EB8 4528                  		jsr	Pal_FadeFrom
000F385E                            ;		jsr	VDP_ClrCRAM
000F385E 46FC 2700                  		move	#$2700,sr
000F3862 43F8 D000                  		lea	($FFFFD000).w,a1
000F3866 7000                       		moveq	#0,d0
000F3868 323C 07FF                  		move.w	#$7FF,d1
000F386C                            
000F386C                            loc_6EA56:				; CODE XREF: ROM:0006EA5Cj
000F386C 22FC 0000 0000             		move.l	#0,(a1)+
000F3872 51C9 FFF8                  		dbf	d1,loc_6EA56
000F3876 46FC 2300                  		move	#$2300,sr
000F387A 4278 C800                  		clr.w	($FFFFC800).w				;	clear the VDP buffer to prevent a minor bug that causes glitchy tiles
000F387E 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w	;	from the level select to appear on the Splash Screen star emblem
000F3886 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000F3890 41F9 0000 0000             		lea	(unk_6F694).l,a0
000F3896 4EB8 3596                  		jsr	NemDec
000F389A 23FC 6040 0000 00C0 0004   		move.l	#$60400000,($C00004).l
000F38A4 41F9 0000 0000             		lea	(unk_701FA).l,a0
000F38AA 4EB8 3596                  		jsr	NemDec
000F38AE 23FC 6AE0 0000 00C0 0004   		move.l	#$6AE00000,($C00004).l
000F38B8 41F9 0000 0000             		lea	(unk_7074C).l,a0
000F38BE 4EB8 3596                  		jsr	NemDec
000F38C2 4EB8 3084                  		jsr	ClearScreen
000F38C6 46FC 2300                  		move	#$2300,sr
000F38CA 7000                       		moveq	#0,d0
000F38CC 43F9 0000 0000             		lea	(byte_6F46A).l,a1
000F38D2 E748                       		lsl.w	#3,d0
000F38D4 D2C0                       		adda.w	d0,a1
000F38D6 2459                       		movea.l	(a1)+,a2
000F38D8 3659                       		movea.w	(a1)+,a3
000F38DA D6FC 0080                  		adda.w	#$80,a3	; ''
000F38DE 3E19                       		move.w	(a1)+,d7
000F38E0                            
000F38E0                            loc_6EABE:				; CODE XREF: ROM:0006EAC0j
000F38E0 26DA                       		move.l	(a2)+,(a3)+
000F38E2 51CF FFFC                  		dbf	d7,loc_6EABE
000F38E6 43F9 000F 37C8             		lea	(unk_3140).l,a1		; Load palette
000F38EC 45F8 FB80                  		lea	($FFFFFB80).w,a2
000F38F0 103C 0040                  		move.b	#$40,d0
000F38F4 24D9                       @loop:	move.l	(a1)+,(a2)+
000F38F6 4A40                       		tst.w	d0
000F38F8 6700                       		beq.s	@endloop
000F38FA 5340                       		sub.w	#1,d0
000F38FC 60F6                       		bra.s	@loop
000F38FE                            @endloop:
000F38FE 103C 0019                  		move.b	#$19,d0
000F3902 4EB8 3212                  		jsr	PlaySound
000F3906 6100 0000                  		bsr.w	sub_6EB68
000F390A                            ;		move.w	#3,d0
000F390A                            ;		jsr	PalLoad1
000F390A 11FC 0001 D000             		move.b	#1,($FFFFD000).w
000F3910 11FC 0000 D028             		move.b	#0,($FFFFD028).w
000F3916 11FC 0001 D040             		move.b	#1,($FFFFD040).w
000F391C 11FC 0001 D068             		move.b	#1,($FFFFD068).w
000F3922 11FC 0001 D080             		move.b	#1,($FFFFD080).w
000F3928 11FC 0002 D0A8             		move.b	#2,($FFFFD0A8).w
000F392E 4EB9 0000 0000             		jsr	loc_6F4F2
000F3934 4EB9 0001 5C98             		jsr	BuildSprites
000F393A 4EB8 446E                  		jsr	Pal_FadeTo
000F393E                            
000F393E                            loc_6EB04:				; CODE XREF: ROM:0006EB56j
000F393E 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000F3944 4EB9 0000 8D72             		jsr	DelayProgram
000F394A 5278 FF38                  		addq.w	#1,($FFFFFF38).w
000F394E 4EB9 0000 0000             		jsr	loc_6F4F2
000F3954 4EB9 0001 5C98             		jsr	BuildSprites
000F395A 7200                       		moveq	#0,d1
000F395C 123C 0050                  		move.b	#$50,d1	; 'P'
000F3960 0C78 0340 FF38             		cmpi.w	#$340,($FFFFFF38).w
000F3966 6C00                       		bge.s	loc_6EB5A
000F3968 7200                       		moveq	#0,d1
000F396A 123C 0050                  		move.b	#$50,d1	; 'P'
000F396E 1038 F605                  		move.b	($FFFFF605).w,d0
000F3972 0800 0004                  		btst	#4,d0
000F3976 6600 0000                  		bne.w	loc_6EB5A
000F397A 0800 0005                  		btst	#5,d0
000F397E 6600 0000                  		bne.w	loc_6EB5A
000F3982 0800 0006                  		btst	#6,d0
000F3986 6600 0000                  		bne.w	loc_6EB5A
000F398A 0800 0007                  		btst	#7,d0
000F398E 6600 0000                  		bne.w	loc_6EB5A
000F3992 6000 FFAA                  		bra.w	loc_6EB04
000F3996                            ; ---------------------------------------------------------------------------
000F3996                            
000F3996                            loc_6EB5A:				; CODE XREF: ROM:0006EB2Aj
000F3996                            					; ROM:0006EB3Aj ...
000F3996 31FC 0000 FF38             		move.w	#0,($FFFFFF38).w
000F399C 4EBA F1FC                  		jsr	SplashScreen2	; go to title screen
000F39A0 4E75                       		rts
000F39A2                            
000F39A2                            ; =============== S U B	R O U T	I N E =======================================
000F39A2                            
000F39A2                            
000F39A2                            sub_6EB68:				; CODE XREF: ROM:0006EACCp
000F39A2 43F9 0000 0000             		lea	(unk_6EBAA).l,a1
000F39A8 4DF9 00C0 0000             		lea	($C00000).l,a6
000F39AE 283C 4000 0003             		move.l	#$40000003,d4
000F39B4 721B                       		moveq	#$1B,d1
000F39B6                            
000F39B6                            loc_6EB7C:				; CODE XREF: sub_6EB68+22j
000F39B6 2D44 0004                  		move.l	d4,4(a6)
000F39BA 6100 0000                  		bsr.w	sub_6EB90
000F39BE 0684 0080 0000             		addi.l	#$800000,d4
000F39C4 51C9 FFF0                  		dbf	d1,loc_6EB7C
000F39C8 4E75                       		rts
000F39CA                            ; End of function sub_6EB68
000F39CA                            
000F39CA                            
000F39CA                            ; =============== S U B	R O U T	I N E =======================================
000F39CA                            
000F39CA                            
000F39CA                            sub_6EB90:				; CODE XREF: sub_6EB68+18p
000F39CA 7427                       		moveq	#$27,d2	; '''
000F39CC                            
000F39CC                            loc_6EB92:				; CODE XREF: sub_6EB90+Cj
000F39CC                            					; sub_6EB90+14j
000F39CC 7000                       		moveq	#0,d0
000F39CE 3019                       		move.w	(a1)+,d0
000F39D0 6A00                       		bpl.s	loc_6EBA2
000F39D2 3CBC 0000                  		move.w	#0,(a6)
000F39D6 51CA FFF4                  		dbf	d2,loc_6EB92
000F39DA 4E75                       		rts
000F39DC                            ; ---------------------------------------------------------------------------
000F39DC                            
000F39DC                            loc_6EBA2:				; CODE XREF: sub_6EB90+6j
000F39DC 3C80                       		move.w	d0,(a6)
000F39DE 51CA FFEC                  		dbf	d2,loc_6EB92
000F39E2 4E75                       		rts
000F39E4                            ; End of function sub_6EB90
000F39E4                            
000F39E4                            ; ---------------------------------------------------------------------------
000F39E4                            unk_6EBAA:	incbin	AsciiMaybe.bin
000F42A4                            		even
000F42A4                            byte_6F46A:	incbin	SRMappings.bin
000F432E                            		even
000F432E                            ; ---------------------------------------------------------------------------
000F432E                            
000F432E                            loc_6F4F2:				; CODE XREF: ROM:0006EAF4p
000F432E                            					; ROM:0006EB12p
000F432E 41F8 D000                  		lea	($FFFFD000).w,a0
000F4332 7E7F                       		moveq	#$7F,d7	; ''
000F4334 7000                       		moveq	#0,d0
000F4336                            
000F4336                            loc_6F4FA:				; CODE XREF: ROM:loc_6F50Ej
000F4336 1010                       		move.b	(a0),d0
000F4338 6700                       		beq.s	loc_6F50A
000F433A D040                       		add.w	d0,d0
000F433C D040                       		add.w	d0,d0
000F433E 227B 0000                  		movea.l	off_6F514-4(pc,d0.w),a1
000F4342 4E91                       		jsr	(a1)
000F4344 7000                       		moveq	#0,d0
000F4346                            
000F4346                            loc_6F50A:				; CODE XREF: ROM:0006F4FCj
000F4346 41E8 0040                  		lea	$40(a0),a0
000F434A                            
000F434A                            loc_6F50E:
000F434A 51CF FFEA                  		dbf	d7,loc_6F4FA
000F434E 4E75                       		rts
000F4350                            ; ---------------------------------------------------------------------------
000F4350 0000 0000                  off_6F514:	dc.l loc_6F518		; DATA XREF: ROM:0006F502t
000F4354                            ; ---------------------------------------------------------------------------
000F4354                            
000F4354                            loc_6F518:				; DATA XREF: ROM:off_6F514o
000F4354 7000                       		moveq	#0,d0
000F4356 1028 0028                  		move.b	$28(a0),d0
000F435A D040                       		add.w	d0,d0
000F435C D040                       		add.w	d0,d0
000F435E 4EFB 0000                  		jmp	loc_6F528(pc,d0.w)
000F4362                            ; ---------------------------------------------------------------------------
000F4362 4E75                       		rts
000F4364                            ; ---------------------------------------------------------------------------
000F4364                            
000F4364                            loc_6F528:				; CODE XREF: ROM:0006F522j
000F4364 6000 0000                  		bra.w	loc_6F534
000F4368                            ; ---------------------------------------------------------------------------
000F4368 6000 0000                  		bra.w	loc_6F576
000F436C                            ; ---------------------------------------------------------------------------
000F436C 6000 0000                  		bra.w	loc_6F5E6
000F4370                            ; ---------------------------------------------------------------------------
000F4370                            
000F4370                            loc_6F534:				; CODE XREF: ROM:loc_6F528j
000F4370 7000                       		moveq	#0,d0
000F4372 1028 0024                  		move.b	$24(a0),d0
000F4376 323B 0000                  		move.w	off_6F542(pc,d0.w),d1
000F437A 4EFB 1000                  		jmp	off_6F542(pc,d1.w)
000F437E                            ; ---------------------------------------------------------------------------
000F437E 0000                       off_6F542:	dc.w loc_6F546-off_6F542 ; DATA	XREF: ROM:0006F53Ar
000F4380                            					; ROM:off_6F542o ...
000F4380 0000                       		dc.w loc_6F570-off_6F542
000F4382                            ; ---------------------------------------------------------------------------
000F4382                            
000F4382                            loc_6F546:				; DATA XREF: ROM:off_6F542o
000F4382 5428 0024                  		addq.b	#2,$24(a0)
000F4386 317C 0193 0008             		move.w	#$193,8(a0)
000F438C 317C 0102 000A             		move.w	#$102,$A(a0)
000F4392 217C 0000 0000 0004        		move.l	#byte_6F63A,4(a0)
000F439A 317C 2102 0002             		move.w	#$2102,2(a0)
000F43A0 117C 0000 0001             		move.b	#0,1(a0)
000F43A6 317C 0200 0018             		move.w	#$200,priority(a0)
000F43AC                            
000F43AC                            loc_6F570:				; DATA XREF: ROM:0006F544o
000F43AC 4EF9 0001 5C48             		jmp	DisplaySprite
000F43B2                            ; ---------------------------------------------------------------------------
000F43B2                            
000F43B2                            loc_6F576:				; CODE XREF: ROM:0006F52Cj
000F43B2 7000                       		moveq	#0,d0
000F43B4 1028 0024                  		move.b	$24(a0),d0
000F43B8 323B 0000                  		move.w	off_6F584(pc,d0.w),d1
000F43BC 4EFB 1000                  		jmp	off_6F584(pc,d1.w)
000F43C0                            ; ---------------------------------------------------------------------------
000F43C0 0000                       off_6F584:	dc.w loc_6F588-off_6F584 ; DATA	XREF: ROM:0006F57Cr
000F43C2                            					; ROM:off_6F584o ...
000F43C2 0000                       		dc.w loc_6F5B2-off_6F584
000F43C4                            ; ---------------------------------------------------------------------------
000F43C4                            
000F43C4                            loc_6F588:				; DATA XREF: ROM:off_6F584o
000F43C4 5428 0024                  		addq.b	#2,$24(a0)
000F43C8 317C 0191 0008             		move.w	#$191,8(a0)
000F43CE 317C 00E2 000A             		move.w	#$E2,$A(a0) ; 'â'
000F43D4 217C 0000 0000 0004        		move.l	#byte_6F67A,4(a0)
000F43DC 317C 4157 0002             		move.w	#$4157,2(a0)
000F43E2 117C 0000 0001             		move.b	#0,1(a0)
000F43E8 317C 0180 0018             		move.w	#$180,priority(a0)
000F43EE                            
000F43EE                            loc_6F5B2:				; DATA XREF: ROM:0006F586o
000F43EE 5228 0031                  		addq.b	#1,$31(a0)
000F43F2 0C28 000B 0031             		cmpi.b	#$B,$31(a0)
000F43F8 6D00 0000                  		blt.w	loc_6F5DA
000F43FC 117C 0000 0031             		move.b	#0,$31(a0)
000F4402 5228 0030                  		addq.b	#1,$30(a0)
000F4406 0C28 0002 0030             		cmpi.b	#2,$30(a0)
000F440C 6600 0000                  		bne.w	loc_6F5DA
000F4410 117C 0000 0030             		move.b	#0,$30(a0)
000F4416                            
000F4416                            loc_6F5DA:				; CODE XREF: ROM:0006F5BCj
000F4416                            					; ROM:0006F5D0j
000F4416 1168 0030 001A             		move.b	$30(a0),$1A(a0)
000F441C 4EF9 0001 5C48             		jmp	DisplaySprite
000F4422                            ; ---------------------------------------------------------------------------
000F4422                            
000F4422                            loc_6F5E6:				; CODE XREF: ROM:0006F530j
000F4422 7000                       		moveq	#0,d0
000F4424 1028 0024                  		move.b	$24(a0),d0
000F4428 323B 0000                  		move.w	off_6F5F4(pc,d0.w),d1
000F442C 4EFB 1000                  		jmp	off_6F5F4(pc,d1.w)
000F4430                            ; ---------------------------------------------------------------------------
000F4430 0000                       off_6F5F4:	dc.w loc_6F5F8-off_6F5F4 ; DATA	XREF: ROM:0006F5ECr
000F4432                            					; ROM:off_6F5F4o ...
000F4432 0000                       		dc.w loc_6F622-off_6F5F4
000F4434                            ; ---------------------------------------------------------------------------
000F4434                            
000F4434                            loc_6F5F8:				; DATA XREF: ROM:off_6F5F4o
000F4434 5428 0024                  		addq.b	#2,$24(a0)
000F4438 317C 0124 0008             		move.w	#$124,8(a0)
000F443E 317C 00FF 000A             		move.w	#$FF,$A(a0)
000F4444 217C 0000 0000 0004        		move.l	#byte_6F628,4(a0)
000F444C 317C 0000 0002             		move.w	#0,2(a0)
000F4452 117C 0000 0001             		move.b	#0,1(a0)
000F4458 117C 0000 0018             		move.b	#0,priority(a0)
000F445E                            
000F445E                            loc_6F622:				; DATA XREF: ROM:0006F5F6o
000F445E 4EF9 0001 5C48             		jmp	DisplaySprite
000F4464                            ; ---------------------------------------------------------------------------
000F4464                            byte_6F628:	include		map1.asm
000F4464                            ; --------------------------------------------------------------------------------
000F4464                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000F4464                            ; --------------------------------------------------------------------------------
000F4464                            
000F4464                            SME_UkA14:	
000F4464 0000                       		dc.w SME_UkA14_2-SME_UkA14	
000F4466 03                         SME_UkA14_2:	dc.b 3	
000F4467 000E 00C0 00               		dc.b 0, $E, 0, $C0, 0	
000F446C 000E 00CC 20               		dc.b 0, $E, 0, $CC, $20	
000F4471 000E 00D8 40               		dc.b 0, $E, 0, $D8, $40	
000F4476                            		even
000F4476                            		even
000F4476                            byte_6F63A:	include		map2.asm
000F4476                            ; --------------------------------------------------------------------------------
000F4476                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000F4476                            ; --------------------------------------------------------------------------------
000F4476                            
000F4476                            SME_beAal:	
000F4476 0000 0000                  		dc.w SME_beAal_6-SME_beAal, SME_beAal_1B-SME_beAal	
000F447A 0000                       		dc.w SME_beAal_30-SME_beAal	
000F447C 04                         SME_beAal_6:	dc.b 4	
000F447D F00F 0000 E0               		dc.b $F0, $F, 0, 0, $E0	
000F4482 F00F 0010 00               		dc.b $F0, $F, 0, $10, 0	
000F4487 0808 0020 C8               		dc.b 8, 8, 0, $20, $C8	
000F448C 0808 0820 20               		dc.b 8, 8, 8, $20, $20	
000F4491 04                         SME_beAal_1B:	dc.b 4	
000F4492 000D 0045 E0               		dc.b 0, $D, 0, $45, $E0	
000F4497 000D 004D 00               		dc.b 0, $D, 0, $4D, 0	
000F449C 0808 0020 C8               		dc.b 8, 8, 0, $20, $C8	
000F44A1 0808 0820 20               		dc.b 8, 8, 8, $20, $20	
000F44A6 03                         SME_beAal_30:	dc.b 3	
000F44A7 F00F 0023 E0               		dc.b $F0, $F, 0, $23, $E0	
000F44AC F00F 0033 00               		dc.b $F0, $F, 0, $33, 0	
000F44B1 1004 0043 F8               		dc.b $10, 4, 0, $43, $F8	
000F44B6                            		even
000F44B6                            		even
000F44B6                            byte_6F67A:	include		map3.asm
000F44B6                            ; --------------------------------------------------------------------------------
000F44B6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000F44B6                            ; --------------------------------------------------------------------------------
000F44B6                            
000F44B6                            SME_lHRJj:	
000F44B6 0000 0000                  		dc.w SME_lHRJj_4-SME_lHRJj, SME_lHRJj_F-SME_lHRJj	
000F44BA 02                         SME_lHRJj_4:	dc.b 2	
000F44BB E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
000F44C0 0808 000C F4               		dc.b 8, 8, 0, $C, $F4	
000F44C5 02                         SME_lHRJj_F:	dc.b 2	
000F44C6 E80B 000F F4               		dc.b $E8, $B, 0, $F, $F4	
000F44CB 0808 001B F4               		dc.b 8, 8, 0, $1B, $F4	
000F44D0                            		even
000F44D0                            		even
000F44D0                            unk_6F694:	incbin	SRBack.bin
000F5036                            		even
000F5036                            unk_701FA:	incbin	masteremerald.bin
000F5588 00                         		even
000F5588                            unk_7074C:	incbin SonicOnRetro.bin
000F584A                            		even
000F584A                            		even
000F584A                            		even
000F584A                            
000F584A                            ;ClearVDPStuff:
000F584A                            ;		jsr	clearplc
000F584A                            ;		jsr	pal_fadefrom
000F584A                            ;		lea	($FFFFF700).w,a1
000F584A                            ;		moveq	#0,d0
000F584A                            ;		move.w	#$3F,d1
000F584A                            
000F584A                            ;loc_30332A_2:					  ; ...
000F584A                            ;		move.l	d0,(a1)+
000F584A                            ;		dbf	d1,loc_30332A_2
000F584A                            ;		lea	($FFFFD000).w,a1
000F584A                            ;		moveq	#0,d0
000F584A                            ;		move.w	#$7FF,d1
000F584A                            
000F584A                            ;loc_30333A_2:					  ; ...
000F584A                            ;		move.l	d0,(a1)+
000F584A                            ;		dbf	d1,loc_30333A_2
000F584A                            ;		lea	($C00004).l,a6
000F584A                            ;		move.w	#$8004,(a6)
000F584A                            ;		move.w	#$8230,(a6)
000F584A                            ;		move.w	#$8407,(a6)
000F584A                            ;		move.w	#$8700,(a6)
000F584A                            ;		move.w	#$8B00,(a6)
000F584A                            ;		clr.b	($FFFFF64E).w
000F584A                            ;		disable_ints
000F584A                            ;		move.w	($FFFFF60C).w,d0
000F584A                            ;		andi.b	#$BF,d0
000F584A                            ;		move.w	d0,($C00004).l
000F584A                            ;		jsr	ClearScreen
000F584A                            ;		rts
000F584A                            
000F584A                            ;	include aplib.asm
000F584A                            ;tree_tile:
000F584A                            ;	incbin	treet.apl
000F584A                            ;	even
000F584A                            ;tree_pal:
000F584A                            ;	incbin	treep.bin
000F584A                            ;	even
000F584A                            ;tree_map:
000F584A                            ;	incbin	treem.eni
000F584A                            ;	even
000F584A                            		include  EniCredProg.asm
000F584A                            ; How to install this:
000F584A                            
000F584A                            ; Go to "Cred_ClrPallet:"
000F584A                            ; Replace:
000F584A                            ; "		move.b	#$8A,($FFFFD080).w ; load credits object"
000F584A                            ; with:
000F584A                            ; "		jsr	Credits_MapLoad"
000F584A                            ; Now, go to the "end of ROM", and put this above it:
000F584A                            
000F584A                            ;		include  EniCredProg.asm
000F584A                            ;		even
000F584A                            ;EniCred_0:	incbin	credeni\cred0.bin	; Credits #0 mappings
000F584A                            ;		even
000F584A                            ;EniCred_1:	incbin	credeni\cred1.bin	; Credits #1 mappings
000F584A                            ;		even
000F584A                            ;EniCred_2:	incbin	credeni\cred2.bin	; Credits #2 mappings
000F584A                            ;		even
000F584A                            ;EniCred_3:	incbin	credeni\cred3.bin	; Credits #3 mappings
000F584A                            ;		even
000F584A                            ;EniCred_4:	incbin	credeni\cred4.bin	; Credits #4 mappings
000F584A                            ;		even
000F584A                            ;EniCred_5:	incbin	credeni\cred5.bin	; Credits #5 mappings
000F584A                            ;		even
000F584A                            ;EniCred_6:	incbin	credeni\cred6.bin	; Credits #6 mappings
000F584A                            ;		even
000F584A                            ;EniCred_7:	incbin	credeni\cred7.bin	; Credits #7 mappings
000F584A                            ;		even
000F584A                            ;EniCred_8:	incbin	credeni\cred8.bin	; Credits #8 mappings
000F584A                            ;		even
000F584A                            ;EniCred_9:	incbin	credeni\cred9.bin	; Credits #9 mappings
000F584A                            ;		even
000F584A                            
000F584A                            ; Then uncomment it
000F584A                            
000F584A                            Credits_Mappings:
000F584A 0000 0000                  		dc.l	EniCred_0	; credit id = 0
000F584E 0000 0000                  		dc.l	EniCred_1	; credit id = 1
000F5852 0000 0000                  		dc.l	EniCred_2	; credit id = 2
000F5856 0000 0000                  		dc.l	EniCred_3	; credit id = 3
000F585A 0000 0000                  		dc.l	EniCred_4	; credit id = 4
000F585E 0000 0000                  		dc.l	EniCred_5	; credit id = 5
000F5862 0000 0000                  		dc.l	EniCred_6	; credit id = 6
000F5866 0000 0000                  		dc.l	EniCred_7	; credit id = 7
000F586A 0000 0000                  		dc.l	EniCred_8	; credit id = 8
000F586E 0000 0000                  		dc.l	EniCred_9	; credit id = 9
000F5872                            
000F5872                            Credits_MapLoad:
000F5872 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000F5878 6600                       		bne.s	Credits_MapLoad_Title
000F587A                            		
000F587A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000F587E D040                       		add.w	d0,d0
000F5880 D040                       		add.w	d0,d0
000F5882 207B 00C6                  		movea.l	Credits_Mappings(pc,d0.w),a0
000F5886 4EF9 0000 0000             		jmp	Credits_MapLoad_cont
000F588C                            		
000F588C                            Credits_MapLoad_Title:
000F588C 41F9 0000 0000             		lea EniCred_Title,a0
000F5892                            
000F5892                            Credits_MapLoad_cont:
000F5892 43F9 00FF 0000             		lea	($FF0000).l,a1
000F5898 7000                       		moveq	#0,d0		; location of art in VRAM
000F589A 4EB8 389E                  		jsr	EniDec
000F589E                            		;lea	($FF0000).l,a1	; EniDec doesn't change a1
000F589E 203C 4000 0003             		move.l	#$40000003,d0
000F58A4 7227                       		moveq	#40-1,d1	 ; X size = 40
000F58A6 741B                       		moveq	#28-1,d2	 ; Y size = 28
000F58A8 4EF8 34A0                  		jmp	ShowVDPGraphics
000F58AC                            ;EniCredEnd:
000F58AC                            ;		rts
000F58AC                            
000F58AC                            EniCred_0:	incbin	credeni\cred0.bin	; Credits #0 mappings
000F5902                            		even
000F5902                            EniCred_1:	incbin	credeni\cred1.bin	; Credits #1 mappings
000F595E                            		even
000F595E                            EniCred_2:	incbin	credeni\cred2.bin	; Credits #2 mappings
000F59B0                            		even
000F59B0                            EniCred_3:	incbin	credeni\cred3.bin	; Credits #3 mappings
000F5A1A                            		even
000F5A1A                            EniCred_4:	incbin	credeni\cred4.bin	; Credits #4 mappings
000F5A7C                            		even
000F5A7C                            EniCred_5:	incbin	credeni\cred5.bin	; Credits #5 mappings
000F5AEC                            		even
000F5AEC                            EniCred_6:	incbin	credeni\cred6.bin	; Credits #6 mappings
000F5B58                            		even
000F5B58                            EniCred_7:	incbin	credeni\cred7.bin	; Credits #7 mappings
000F5BFA                            		even
000F5BFA                            EniCred_8:	incbin	credeni\cred8.bin	; Credits #8 mappings
000F5C54                            		even
000F5C54                            EniCred_9:	incbin	credeni\cred9.bin	; Credits #9 mappings
000F5CA2                            		even
000F5CA2                            EniCred_Title:	incbin	credeni\credtitle.bin	; "Sonic Team Presents" mappings
000F5D00                            		even
000F5D00                            		even
000F5D00                            		even
000F5D00                            		
000F5D00                            SoundDriverASM:
000F5D00                            		even
000F5D00                            
000F5D00                            EndOfRom:
000F5D00                            ;		include 's3driver.asm'
000F5D00                            ;		include	"Echo\68k\s2_option.asm"
