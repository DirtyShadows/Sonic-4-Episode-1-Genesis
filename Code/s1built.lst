00000000                            ;              =   =   =    SONIC ALPHAOMEGA   =   =   =
00000000                            
00000000                            ;Game created by: Alberto Muñoz (HCKTROX)
00000000                            ;Based on: Sonic The Hedgehog (C)Sega 1991
00000000                            
00000000                            ; ===========================================================================
00000000                            ; Included files
00000000                            		include	'_macros\equates.asm'
00000000 =00000080                  Start	= $80
00000000 =00000070                  ABC	= $70
00000000 =00000040                  A	= $40
00000000 =00000020                  C	= $20
00000000 =00000010                  B	= $10
00000000 =00000008                  Right	= $08
00000000 =00000004                  Left	= $04
00000000 =00000002                  Down	= $02
00000000 =00000001                  Up	= $01
00000000 =000000CD                  Option_Select_Sfx equ $CD 
00000000                            
00000000                            
00000000 =FFFF8000                  Level_Layout 			equ $FFFF8000
00000000 =FFFF8080                  Level_BG_Layout 		equ $FFFF8080
00000000 =FFFF9000                  Block_Table 			equ $FFFF9000
00000000 =FFFFB600                  Primary_Collision 		equ ($FFFFB600)
00000000 =FFFFB900                  Secondary_Collision 	equ ($FFFFB900)
00000000 =FFFFF796                  Collision_addr  		equ ($FFFFF796)
00000000 =FFFFFE10                  Zone_Id					equ $FFFFFE10	;	Check wich Zone should be activated now
00000000 =FFFFFE11                  Act_Id					equ $FFFFFE11	;	Check wich Act should be activated now (Act 1, Act 2, Act 3 or Act 4)
00000000 =FFFFFF88                  Game_Mode_Ram			equ $FFFFFF88	;	Game Mode/Difficulty (Original, Harder or Expert)
00000000 =FFFFFFB0                  PlaylistType			equ	$FFFFFFB0	;	Fixed Playlist Type (A, B or C)
00000000 =FFFFFFAA                  Player_option			equ $FFFFFFAA	;	Who you choose on Options? (0-> Sonic, 1-> Tails, 2-> Knuckles)
00000000 =FFFFFFAB                  Current_Character		equ $FFFFFFAB	;	0 -> Sonic, 1 -> Tails, 2 -> Knuckles
00000000 =FFFFFFF6                  Knuckles_Gliding_Flag	equ $FFFFFFF6	;	Address to store Knuckles Gliding information
00000000 =FFFFFFF7                  Unknown_Flag			equ $FFFFFFF7	;	Unknown Flag used on some climb functions on the Knuckles code
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Object Status Table offsets (for everything between Object_RAM and Primary_Collision)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; universally followed object conventions:
00000000 =00000001                  render_flags =		  1 ; bitfield ; bit 7 = onscreen flag, bit 0 = x mirror, bit 1 = y mirror, bit 2 = coordinate system
00000000 =00000002                  art_tile =		  2 ; and 3 ; start of sprite's art
00000000 =00000004                  mappings =		  4 ; and 5 and 6 and 7
00000000 =00000008                  x_pos =			  8 ; and 9 ... some objects use $A and $B as well when extra precision is required (see ObjectMove) ... for screen-space objects this is called x_pixel instead
00000000 =0000000C                  y_pos =			 $C ; and $D ... some objects use $E and $F as well when extra precision is required ... screen-space objects use y_pixel instead
00000000 =00000018                  priority =		$18 ; 0 = front
00000000 =00000019                  width_pixels =		$19
00000000 =0000001A                  mapping_frame =		$1A
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; CONCHETUMARE
00000000                            ; conventions followed by most objects:
00000000 =00000010                  x_vel =			$10 ; and $11 ; horizontal velocity
00000000 =00000012                  y_vel =			$12 ; and $13 ; vertical velocity
00000000 =00000016                  y_radius =		$16 ; collision width / 2
00000000 =00000017                  x_radius =		$17 ; collision height / 2
00000000 =0000001B                  anim_frame =		$1B
00000000 =0000001C                  anim =			$1C
00000000 =0000001D                  next_anim =		$1D
00000000 =0000001E                  anim_frame_duration =	$1E
00000000 =00000022                  status =		$22 ; note: exact meaning depends on the object... for sonic/tails: bit 0: leftfacing. bit 1: inair. bit 2: spinning. bit 3: onobject. bit 4: rolljumping. bit 5: pushing. bit 6: underwater.
00000000 =00000024                  routine =		$24
00000000 =00000025                  routine_secondary =	$25
00000000 =00000026                  angle =			$26 ; angle about the z=0 axis (360 degrees = 256)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by many objects but NOT sonic/tails:
00000000 =00000020                  collision_flags =	$20
00000000 =00000021                  collision_property =	$21
00000000 =00000023                  respawn_index =		$23
00000000 =00000028                  subtype =		$28
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions specific to sonic/tails (Obj01, Obj02, and ObjDB):
00000000                            ; note: $1F, $20, and $21 are unused and available
00000000 =00000014                  inertia =		$14 ; and $15 ; directionless representation of speed... not updated in the air
00000000 =00000027                  flip_angle =		$27 ; angle about the x=0 axis (360 degrees = 256) (twist/tumble)
00000000 =00000028                  air_left =		$28
00000000 =00000029                  flip_turned =		$29 ; 0 for normal, 1 to invert flipping (it's a 180 degree rotation about the axis of Sonic's spine, so he stays in the same position but looks turned around)
00000000 =0000002A                  obj_control =		$2A ; 0 for normal, 1 for hanging or for resting on a flipper, $81 for going through CNZ/OOZ/MTZ tubes or stopped in CNZ cages or stoppers or flying if Tails
00000000 =0000002B                  status_secondary =	$2B
00000000 =0000002C                  flips_remaining =	$2C ; number of flip revolutions remaining
00000000 =0000002D                  flip_speed =		$2D ; number of flip revolutions per frame / 256
00000000 =0000002E                  move_lock =		$2E ; and $2F ; horizontal control lock, counts down to 0
00000000 =00000030                  invulnerable_time =	$30 ; and $31 ; time remaining until you stop blinking
00000000 =00000032                  invincibility_time =	$32 ; and $33 ; remaining
00000000 =00000034                  speedshoes_time =	$34 ; and $35 ; remaining
00000000 =00000036                  next_tilt =		$36 ; angle on ground in front of sprite
00000000 =00000037                  tilt =			$37 ; angle on ground
00000000 =00000038                  stick_to_convex =	$38 ; 0 for normal, 1 to make Sonic stick to convex surfaces like the rotating discs in Sonic 1 and 3 (unused in Sonic 2 but fully functional)
00000000 =00000039                  spindash_flag =		$39 ; 0 for normal, 1 for charging a spindash or forced rolling
00000000 =0000003A                  spindash_counter =	$3A ; and $3B
00000000 =0000003C                  jumping =		$3C
00000000 =0000003D                  interact =		$3D ; RAM address of the last object Sonic stood on, minus $FFFFB000 and divided by $40
00000000                            
00000000 =00000021                  double_jump_flag = 		$21				;	If the double jump flag is in the register, activates double jump actions (like Fly, climb, swim, etc)
00000000 =0000004E                  layer =			$4E ; collision plane, track switching...
00000000 =0000004F                  layer_plus =		$4F ; always same as layer+1 ?? used for collision somehow
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; VDP addressses
00000000 =00C00000                  VDP_data_port =			$C00000 ; (8=r/w, 16=r/w)
00000000 =00C00004                  VDP_control_port =		$C00004 ; (8=r/w, 16=r/w)
00000000 =00C00004                  VDP_control_port =		$C00004 ; (8=r/w, 16=r/w)
00000000                            		include	'_macros\_s1smps2asm_inc.asm'
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo		EQU	$88
00000000 =00000094                  smpsPitch09lo		EQU	$94
00000000 =000000A0                  smpsPitch08lo		EQU	$A0
00000000 =000000AC                  smpsPitch07lo		EQU	$AC
00000000 =000000B8                  smpsPitch06lo		EQU	$B8
00000000 =000000C4                  smpsPitch05lo		EQU	$C4
00000000 =000000D0                  smpsPitch04lo		EQU	$D0
00000000 =000000DC                  smpsPitch03lo		EQU	$DC
00000000 =000000E8                  smpsPitch02lo		EQU	$E8
00000000 =000000F4                  smpsPitch01lo		EQU	$F4
00000000 =00000000                  smpsPitch00		EQU	$00
00000000 =0000000C                  smpsPitch01hi		EQU	$0C
00000000 =00000018                  smpsPitch02hi		EQU	$18
00000000 =00000024                  smpsPitch03hi		EQU	$24
00000000 =00000030                  smpsPitch04hi		EQU	$30
00000000 =0000003C                  smpsPitch05hi		EQU	$3C
00000000 =00000048                  smpsPitch06hi		EQU	$48
00000000 =00000054                  smpsPitch07hi		EQU	$54
00000000 =00000060                  smpsPitch08hi		EQU	$60
00000000 =0000006C                  smpsPitch09hi		EQU	$6C
00000000 =00000078                  smpsPitch10hi		EQU	$78
00000000                            
00000000                            ; Note Equates
00000000 =00000080                  nRst			EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0			EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0			EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0			EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0			EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0			EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1			EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1			EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1			EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1			EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1			EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2			EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2			EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2			EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2			EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2			EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3			EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3			EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3			EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3			EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3			EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4			EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4			EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4			EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4			EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4			EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5			EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5			EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5			EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5			EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5			EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6			EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6			EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6			EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6			EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6			EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7			EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7			EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7			EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7			EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7			EQU	$DF
00000000                            
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000                            
00000000                            ; Header Macros
00000000                            ; Header - Set up Voice Location
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            ; Header - Set up Channel Usage	
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div,mod
00000000                            	endm
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc
00000000                            	dc.w	loc-songStart
00000000                            	dc.w	$00
00000000                            	endm
00000000                            ; Header - Set up FM Channel	
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	dc.w	voice
00000000                            	endm
00000000                            
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            	
00000000                            ; E1xx - Alter note values by xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            	
00000000                            ; E2xx - Unknown
00000000                            smpsE2 macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; E3 - Return (generally used after F8)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            	
00000000                            ; E4 - Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            	
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            	
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            	
00000000                            ; E9xx - Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            	
00000000                            ; EAxx - Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA,val
00000000                            	endm
00000000                            	
00000000                            ; EBxx - Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            	
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            	
00000000                            ; ED - Unknown
00000000 =000000ED                  smpsED		EQU $ED
00000000                            	
00000000                            ; EE - Unknown (Something to do with voice selection)
00000000 =000000EE                  smpsEE 		EQU $EE
00000000                            	
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0,wait,speed,change,step
00000000                            	endm
00000000                            	
00000000                            ; F1 - Turn on Modulation
00000000 =000000F1                  smpsModOn 	EQU $F1
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            	
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            	
00000000                            ; F4 - Turn off Modulation
00000000 =000000F4                  smpsModOff 	EQU $F4
00000000                            	
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            	
00000000                            ; F9 - Unknown
00000000 =000000F9                  smpsF9		EQU $F9
00000000                            
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level	
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
00000000                            	endm
00000000                            	endm
00000000                            		include	'_macros\asm68kfix.asm'	
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            	endm
00000000                            		include	'_macros\misc.asm'	
00000000 =FFFFFFBC                  Water_Flag                    equ       $FFFFFFBC  ; if the level has water
00000000                            ; Extracted from S1hackingStudio by VladikComper
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to set VRAM write access
00000000                            ; Arguments:	1 - raw VRAM offset
00000000                            ;		2 - register to write access bitfield in (Optional)
00000000                            ; -------------------------------------------------------------
00000000                            vram	macro
00000000                            	if (narg=1)
00000000                            		move.l	#($40000000+((\1&$3FFF)<<16)+((\1&$C000)>>14)),($C00004).l
00000000                            	else
00000000                            		move.l	#($40000000+((\1&$3FFF)<<16)+((\1&$C000)>>14)),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to raise an error in vectors
00000000                            ; Arguments:	1 - error number
00000000                            ;		2 - branch location
00000000                            ;		3 - if exists, adds 2 to stack pointer
00000000                            ; -------------------------------------------------------------
00000000                            raise	macro
00000000                            	move.b	#\1,($FFFFFC44).w
00000000                            	if narg=3
00000000                            		addq.l	#2,2(sp)
00000000                            	endc
00000000                            	bra.s	\2
00000000                            	endm
00000000                            	endm
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE' ; Hardware system ID
0000010F 00                         		align $110
00000110 2843 2948 434B 5452 4F58+  Date:		dc.b '(C)HCKTROX 2011' ; Release date
0000011F 00                         		align $120
00000120 534F 4E49 4320 414C 5048+  Title_Local:	dc.b 'SONIC ALPHAOMEGA' ; Domestic name
00000130 0000 0000 0000 0000 0000+  		align $150
00000150 534F 4E49 4320 414C 5048+  Title_Int:	dc.b 'SONIC ALPHAOMEGA' ; International name
00000160 0000 0000 0000 0000 0000+  		align $180
00000180 474D 2058 5858 5858 5858+  Serial:		dc.b 'GM XXXXXXXX-XX'   ; Serial/version number
0000018E                            		align $18E
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0                            SRAMSupport:
000001B0 5241 F820                  		dc.l $5241F820		; change to $5241F820 (NOT $5241E020) to create SRAM
000001B4 0020 0001                  		dc.l $200001		; SRAM start
000001B8 0020 01FF                  		dc.l $2001FF		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 2020 2020 2020 2020+  Region:		dc.b 'JU              ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 4E71                       		nop
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError2	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348 4EF9 0000 0000                             jmp	loc_348
0000034E                            
0000034E                            CheckSumError2:
0000034E 4EF9 0000 0000             		jmp	CheckSumError
00000354                            loc_348:
00000354 2CC7                       		move.l	d7,(a6)+
00000356 51CE FFFC                  		dbf	d6,loc_348
0000035A 1039 00A1 0001             		move.b	($A10001).l,d0
00000360 0200 00C0                  		andi.b	#$C0,d0
00000364 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000368 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000370                            
00000370                            GameInit:
00000370 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000376 7E00                       		moveq	#0,d7
00000378 3C3C 3F7F                  		move.w	#$3F7F,d6
0000037C                            
0000037C                            GameClrRAM:
0000037C 2CC7                       		move.l	d7,(a6)+
0000037E 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000382 4EB9 0000 0000             		jsr	VDPSetupGame
00000388 4EB9 0000 0000             		jsr	SoundDriverLoad
0000038E 4EB9 0000 0000             		jsr	JoypadInit
00000394 11FC 0034 FF94             		move.b	#$34,($FFFFFF94).w ; set Game Mode ROM Info
0000039A                            
0000039A                            MainGameLoop:
0000039A 0C78 0001 F600             		cmpi.w	#1,($FFFFF600).w
000003A0 6500                       		bcs.s	MainGameLoopCont
000003A2 11FC 0024 FF94             		move.b	#$24,($FFFFFF94).w
000003A8                            MainGameLoopCont:
000003A8 1038 FF94                  		move.b	($FFFFFF94).w,d0
000003AC 0240 007C                  		andi.w	#$7C,d0
000003B0 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0
000003B4 4E90                       		jsr	(a0)
000003B6 60E2                       		bra.s	MainGameLoop
000003B8                            ; ===========================================================================
000003B8                            ; ---------------------------------------------------------------------------
000003B8                            ; Main game mode array
000003B8                            ; ---------------------------------------------------------------------------
000003B8                            
000003B8                            GameModeArray:
000003B8 0000 0000                  		dc.l	SegaScreen	; Sega Screen ($00)
000003BC 0000 0000                  		dc.l	TitleScreen	; Title	Screen ($04)
000003C0 0000 0000                  		dc.l	Level		; Demo Mode ($08)
000003C4 0000 0000                  		dc.l	Level		; Normal Level ($0C)
000003C8 0000 0000                  		dc.l	SpecialStage	; Special Stage	($10)
000003CC 0000 0000                  		dc.l	ContinueScreen	; Continue Screen ($14)
000003D0 0000 0000                  		dc.l	EndingSequence	; End of game sequence ($18)
000003D4 0000 0000                  		dc.l	Credits		; Credits ($1C)
000003D8 0000 0000                  		dc.l	MenuScreen	; Main Menu ($20)
000003DC 0000 0000                  		dc.l	Cheat1Screen	; CheatImage1 ($24)
000003E0 0000 0000                  		dc.l	ROMinfo		; ROM info ($28)
000003E4 0000 0000                  		dc.l	LevelSel	; Level select ($2C)
000003E8 0000 0000                  		dc.l	ROMinfo		; PAL Region Message ($30)
000003EC 0000 0000                  		dc.l	ROMinfo		; Warning Message ($34)
000003F0 0000 0000                  		dc.l	ROMinfo		; Language Select ($38)
000003F4 0000 0000                  		dc.l	Xulpico		; Xulpico Screen ($3C)
000003F8 0000 0000                  		dc.l	ROMinfo		; Weona Screen ($40)
000003FC 0000 0000                  		dc.l	SSRGScreen	; SSRG Screen ($44)
00000400 0000 0000                  		dc.l	SoundTest	; Sound Test ($48)
00000404 0000 0000                  		dc.l	RedirectToLevel	; Screen that redirects to $0C ($4C)
00000408 0000 0000                  		dc.l	BasicSelChar	; Basic select character screen ($50)
0000040C 0000 0000                  		dc.l	MusicTest	; Screen that tests how a PCM track is played. ($54)
00000410 0000 0000                  		dc.l	Wetflame_Main
00000414 4E75                       		rts	
00000416                            ; ===========================================================================
00000416                            
00000416                            RedirectToLevel:
00000416 103C 00E0                  		move.b	#$E0,d0
0000041A 6100 0000                  		bsr.w	PlaySound_Special ; stop music
0000041E 6100 0000                  		bsr.w	ClearPLC
00000422 6100 0000                  		bsr.w	Pal_FadeFrom
00000426 4238 FF9B                  		clr.b	($FFFFFF9B).w
0000042A 11FC 000C FF94             		move.b	#$0C,($FFFFFF94).w
00000430 4E75                       		rts
00000432                            
00000432                            CheckSumError:
00000432 6100 0000                  		bsr.w	VDPSetupGame
00000436 4DF9 00C0 0004             		lea	($C00004).l,a6			; Setup VDP
0000043C 3CBC 8004                  		move.w	#$8004,(a6)
00000440 3CBC 8230                  		move.w	#$8230,(a6)
00000444 3CBC 8407                  		move.w	#$8407,(a6)
00000448 3CBC 9001                  		move.w	#$9001,(a6)
0000044C 3CBC 9200                  		move.w	#$9200,(a6)
00000450 3CBC 8B03                  		move.w	#$8B03,(a6)
00000454 3CBC 8720                  		move.w	#$8720,(a6)
00000458 4238 F64E                  		clr.b	($FFFFF64E).w
0000045C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00000466 45F9 0000 0000             		lea	(Art_ASCII),a2
0000046C 303C 005A                  		move.w	#$5A,d0
00000470 4EB9 0000 0000             		jsr	LoadUncArt
00000476 2A3C 4000 0003             		move.l	#$40000003,d5
0000047C 43F9 0000 0000             		lea	(Checksum_ASCII),a1
00000482 363C 6580                  		move.w	#$6580,d3
00000486 4EB9 0000 0000             		jsr	LoadASCII
0000048C 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00000492 3038 F60C                  		move.w	($FFFFF60C).w,d0
00000496 0000 0040                  		ori.b	#$40,d0
0000049A 33C0 00C0 0004             		move.w	d0,($C00004).l
000004A0 31FC 0000 B080             		move.w	#0,($FFFFFB000+$80).w
000004A6 7016                       		moveq	#$16,d0
000004A8 4EB9 0000 0000             		jsr	PalLoad2
000004AE 7016                       		moveq	#$16,d0
000004B0 4EB9 0000 0000             		jsr	PalLoad1
000004B6                            
000004B6                            CheckSum_Loop:
000004B6 60FE                       		bra.s	CheckSum_Loop
000004B8                            ; ===========================================================================
000004B8                            
000004B8                            BusError:
000004B8 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000004BE 6000                       		bra.s	loc_43A
000004C0                            ; ===========================================================================
000004C0                            
000004C0                            AddressError:
000004C0 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000004C6 6000                       		bra.s	loc_43A
000004C8                            ; ===========================================================================
000004C8                            
000004C8                            IllegalInstr:
000004C8 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000004CE 54AF 0002                  		addq.l	#2,2(sp)
000004D2 6000                       		bra.s	loc_462
000004D4                            ; ===========================================================================
000004D4                            
000004D4                            ZeroDivide:
000004D4 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000004DA 6000                       		bra.s	loc_462
000004DC                            ; ===========================================================================
000004DC                            
000004DC                            ChkInstr:
000004DC 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
000004E2 6000                       		bra.s	loc_462
000004E4                            ; ===========================================================================
000004E4                            
000004E4                            TrapvInstr:
000004E4 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
000004EA 6000                       		bra.s	loc_462
000004EC                            ; ===========================================================================
000004EC                            
000004EC                            PrivilegeViol:
000004EC 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
000004F2 6000                       		bra.s	loc_462
000004F4                            ; ===========================================================================
000004F4                            
000004F4                            Trace:
000004F4 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
000004FA 6000                       		bra.s	loc_462
000004FC                            ; ===========================================================================
000004FC                            
000004FC                            Line1010Emu:
000004FC 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000502 54AF 0002                  		addq.l	#2,2(sp)
00000506 6000                       		bra.s	loc_462
00000508                            ; ===========================================================================
00000508                            
00000508                            Line1111Emu:
00000508 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000050E 54AF 0002                  		addq.l	#2,2(sp)
00000512 6000                       		bra.s	loc_462
00000514                            ; ===========================================================================
00000514                            
00000514                            ErrorExcept:
00000514 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000051A 6000                       		bra.s	loc_462
0000051C                            ; ===========================================================================
0000051C                            
0000051C                            loc_43A:
0000051C 46FC 2700                  		move	#$2700,sr
00000520 544F                       		addq.w	#2,sp
00000522 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000526 544F                       		addq.w	#2,sp
00000528 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000052E 6100 0000                  		bsr.w	ShowErrorMsg
00000532 202F 0002                  		move.l	2(sp),d0
00000536 6100 0000                  		bsr.w	sub_5BA
0000053A 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000053E 6100 0000                  		bsr.w	sub_5BA
00000542 6000                       		bra.s	loc_478
00000544                            ; ===========================================================================
00000544                            
00000544                            loc_462:
00000544 46FC 2700                  		move	#$2700,sr
00000548 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000054E 6100 0000                  		bsr.w	ShowErrorMsg
00000552 202F 0002                  		move.l	2(sp),d0
00000556 6100 0000                  		bsr.w	sub_5BA
0000055A                            
0000055A                            loc_478:
0000055A 6100 0000                  		bsr.w	ErrorWaitForC
0000055E 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000564 46FC 2300                  		move	#$2300,sr
00000568 4E73                       		rte	
0000056A                            
0000056A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000056A                            
0000056A                            
0000056A                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000056A 4DF9 00C0 0000             		lea	($C00000).l,a6
00000570 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000057A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000580 323C 027F                  		move.w	#$27F,d1
00000584                            
00000584                            Error_LoadGfx:
00000584 3C98                       		move.w	(a0)+,(a6)
00000586 51C9 FFFC                  		dbf	d1,Error_LoadGfx
0000058A 7000                       		moveq	#0,d0		; clear	d0
0000058C 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
00000590 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000594 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000598 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000005A2 7212                       		moveq	#$12,d1		; number of characters
000005A4                            
000005A4                            Error_LoopChars:
000005A4 7000                       		moveq	#0,d0
000005A6 1018                       		move.b	(a0)+,d0
000005A8 0640 0790                  		addi.w	#$790,d0
000005AC 3C80                       		move.w	d0,(a6)
000005AE 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000005B2 4E75                       		rts	
000005B4                            ; End of function ShowErrorMsg
000005B4                            
000005B4                            ; ===========================================================================
000005B4 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000005B8 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000005BC 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000005C0 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000005C4 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000005C8 0000                       		dc.w asc_5A6-ErrorText
000005CA 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000005DD 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000005F0 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000603 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000616 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000629 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000063C 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000064F 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000662 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000675 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000688 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
0000069C 00                         		even
0000069C                            
0000069C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000069C                            
0000069C                            
0000069C                            sub_5BA:				; XREF: loc_43A; loc_462
0000069C 3CBC 07CA                  		move.w	#$7CA,(a6)
000006A0 7407                       		moveq	#7,d2
000006A2                            
000006A2                            loc_5C0:
000006A2 E998                       		rol.l	#4,d0
000006A4 6100                       		bsr.s	sub_5CA
000006A6 51CA FFFA                  		dbf	d2,loc_5C0
000006AA 4E75                       		rts	
000006AC                            ; End of function sub_5BA
000006AC                            
000006AC                            
000006AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000006AC                            
000006AC                            
000006AC                            sub_5CA:				; XREF: sub_5BA
000006AC 3200                       		move.w	d0,d1
000006AE 0241 000F                  		andi.w	#$F,d1
000006B2 0C41 000A                  		cmpi.w	#$A,d1
000006B6 6500                       		bcs.s	loc_5D8
000006B8 5E41                       		addq.w	#7,d1
000006BA                            
000006BA                            loc_5D8:
000006BA 0641 07C0                  		addi.w	#$7C0,d1
000006BE 3C81                       		move.w	d1,(a6)
000006C0 4E75                       		rts	
000006C2                            ; End of function sub_5CA
000006C2                            
000006C2                            
000006C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000006C2                            
000006C2                            
000006C2                            ErrorWaitForC:				; XREF: loc_478
000006C2 6100 0000                  		bsr.w	ReadJoypads
000006C6 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000006CC 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000006D0 4E75                       		rts	
000006D2                            ; End of function ErrorWaitForC
000006D2                            
000006D2                            ; ===========================================================================
000006D2                            
000006D2                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000BF2                            		even
00000BF2                            
00000BF2                            Art_Text2:	incbin	artunc\menutext2.bin	; text used in level select and debug mode
00001112                            		even
00001112                            ; ===========================================================================
00001112                            
00001112                            loc_B10:				; XREF: Vectors
00001112 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001116 4A38 F62A                  		tst.b	($FFFFF62A).w
0000111A 6700                       		beq.s	loc_B88
0000111C 3039 00C0 0004             		move.w	($C00004).l,d0
00001122 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000112C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00001134 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
0000113A 6700                       		beq.s	loc_B42
0000113C 303C 0700                  		move.w	#$700,d0
00001140                            
00001140                            loc_B3E:
00001140 51C8 FFFE                  		dbf	d0,loc_B3E
00001144                            
00001144                            loc_B42:
00001144 1038 F62A                  		move.b	($FFFFF62A).w,d0
00001148 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
0000114E 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00001154 0240 003E                  		andi.w	#$3E,d0
00001158 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
0000115C 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00001160                            
00001160                            loc_B5E:				; XREF: loc_B88
00001160 4EB9 0000 0000             		jsr	sub_71B4C
00001166                            
00001166                            loc_B64:				; XREF: loc_D50
00001166 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
0000116A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
0000116E 4E73                       		rte	
00001170                            ; ===========================================================================
00001170 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00001174 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00001178 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
0000117C 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00001180 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00001184 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00001188 0000                       		dc.w loc_E72-off_B6E
0000118A                            ; ===========================================================================
0000118A                            
0000118A                            loc_B88:				; XREF: loc_B10; off_B6E
0000118A 0C38 008C FF94             		cmpi.b	#$8C,($FFFFFF94).w
00001190 6700                       		beq.s	loc_B9A
00001192 0C38 000C FF94             		cmpi.b	#$C,($FFFFFF94).w
00001198 6600 FFC6                  		bne.w	loc_B5E
0000119C                            
0000119C                            loc_B9A:
0000119C                            ;		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
0000119C                            ;		bne.w	loc_B5E		; if not, branch
0000119C 4A38 FFBC                  		tst.b	(water_flag).w
000011A0 6700 FFBE                  		beq.w	loc_B5E
000011A4 3039 00C0 0004             		move.w	($C00004).l,d0
000011AA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
000011B0 6700                       		beq.s	loc_BBA
000011B2 303C 0700                  		move.w	#$700,d0
000011B6                            
000011B6                            loc_BB6:
000011B6 51C8 FFFE                  		dbf	d0,loc_BB6
000011BA                            
000011BA                            loc_BBA:
000011BA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
000011C0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
000011C8                            
000011C8                            loc_BC8:
000011C8 0839 0000 00A1 1100        		btst	#0,($A11100).l
000011D0 66F6                       		bne.s	loc_BC8
000011D2 4A38 F64E                  		tst.b	($FFFFF64E).w
000011D6 6600                       		bne.s	loc_BFE
000011D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000011DE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011E4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011EA 3ABC 977F                  		move.w	#$977F,(a5)
000011EE 3ABC C000                  		move.w	#$C000,(a5)
000011F2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011FC 6000                       		bra.s	loc_C22
000011FE                            ; ===========================================================================
000011FE                            
000011FE                            loc_BFE:				; XREF: loc_BC8
000011FE 4BF9 00C0 0004             		lea	($C00004).l,a5
00001204 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000120A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001210 3ABC 977F                  		move.w	#$977F,(a5)
00001214 3ABC C000                  		move.w	#$C000,(a5)
00001218 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000121E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001222                            
00001222                            loc_C22:				; XREF: loc_BC8
00001222 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001226 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000122E 6000 FF30                  		bra.w	loc_B5E
00001232                            ; ===========================================================================
00001232                            
00001232                            loc_C32:				; XREF: off_B6E
00001232 6100 0000                  		bsr.w	sub_106E
00001236                            
00001236                            loc_C36:				; XREF: off_B6E
00001236 4A78 F614                  		tst.w	($FFFFF614).w
0000123A 6700 0000                  		beq.w	locret_C42
0000123E 5378 F614                  		subq.w	#1,($FFFFF614).w
00001242                            
00001242                            locret_C42:
00001242 4E75                       		rts	
00001244                            ; ===========================================================================
00001244                            
00001244                            loc_C44:				; XREF: off_B6E
00001244 6100 0000                  		bsr.w	sub_106E
00001248 6100 0000                  		bsr.w	sub_6886
0000124C 6100 0000                  		bsr.w	sub_1642
00001250 4A78 F614                  		tst.w	($FFFFF614).w
00001254 6700 0000                  		beq.w	locret_C5C
00001258 5378 F614                  		subq.w	#1,($FFFFF614).w
0000125C                            
0000125C                            locret_C5C:
0000125C 4E75                       		rts	
0000125E                            ; ===========================================================================
0000125E                            
0000125E                            loc_C5E:				; XREF: off_B6E
0000125E 6100 0000                  		bsr.w	sub_106E
00001262 4E75                       		rts	
00001264                            ; ===========================================================================
00001264                            
00001264                            loc_C64:				; XREF: off_B6E
00001264 0C38 0010 FF94             		cmpi.b	#$10,($FFFFFF94).w ; is	game mode = $10	(special stage)	?
0000126A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
0000126E                            
0000126E                            loc_C6E:				; XREF: off_B6E
0000126E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001276                            
00001276                            loc_C76:
00001276 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000127E 66F6                       		bne.s	loc_C76		; if not, branch
00001280 6100 0000                  		bsr.w	ReadJoypads
00001284 4A38 F64E                  		tst.b	($FFFFF64E).w
00001288 6600                       		bne.s	loc_CB0
0000128A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001290 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001296 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000129C 3ABC 977F                  		move.w	#$977F,(a5)
000012A0 3ABC C000                  		move.w	#$C000,(a5)
000012A4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012AA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012AE 6000                       		bra.s	loc_CD4
000012B0                            ; ===========================================================================
000012B0                            
000012B0                            loc_CB0:				; XREF: loc_C76
000012B0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012BC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012C2 3ABC 977F                  		move.w	#$977F,(a5)
000012C6 3ABC C000                  		move.w	#$C000,(a5)
000012CA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012D0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012D4                            
000012D4                            loc_CD4:				; XREF: loc_C76
000012D4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000012D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000012DE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000012E4 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000012EA 3ABC 977F                  		move.w	#$977F,(a5)
000012EE 3ABC 7C00                  		move.w	#$7C00,(a5)
000012F2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000012F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001302 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001308 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000130E 3ABC 977F                  		move.w	#$977F,(a5)
00001312 3ABC 7800                  		move.w	#$7800,(a5)
00001316 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000131C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001320 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00001326                            
00001326                            loc_D50:
00001326                            	;	move	#$83,($FFFFF640).w
00001326                            	;	jsr	Process_DMA
00001326 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000132E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001334 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000133A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001340 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001346 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
0000134C 6400                       		bcc.s	Demo_Time
0000134E 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00001354 588F                       		addq.l	#4,sp
00001356 6000 FE0E                  		bra.w	loc_B64
0000135A                            
0000135A                            ; ---------------------------------------------------------------------------
0000135A                            ; Subroutine to	run a demo for an amount of time
0000135A                            ; ---------------------------------------------------------------------------
0000135A                            
0000135A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000135A                            
0000135A                            
0000135A                            Demo_Time:				; XREF: loc_D50; PalToCRAM
0000135A 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000135E                            ;		jsr	AniArt_Load
0000135E 4EB9 0000 0000             		jsr	HudUpdate
00001364 6100 0000                  		bsr.w	sub_165E
00001368 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000136C 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00001370 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00001374                            
00001374                            Demo_TimeEnd:
00001374 4E75                       		rts	
00001376                            ; End of function Demo_Time
00001376                            
00001376                            ; ===========================================================================
00001376                            
00001376                            loc_DA6:				; XREF: off_B6E
00001376 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000137E                            
0000137E                            loc_DAE:
0000137E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001386 66F6                       		bne.s	loc_DAE		; if not, branch
00001388 6100 0000                  		bsr.w	ReadJoypads
0000138C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001392 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001398 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000139E 3ABC 977F                  		move.w	#$977F,(a5)
000013A2 3ABC C000                  		move.w	#$C000,(a5)
000013A6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000013AC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000013B0 4BF9 00C0 0004             		lea	($C00004).l,a5
000013B6 2ABC 9401 9340             		move.l	#$94019340,(a5)
000013BC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000013C2 3ABC 977F                  		move.w	#$977F,(a5)
000013C6 3ABC 7800                  		move.w	#$7800,(a5)
000013CA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000013D0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000013D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000013DA 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000013E0 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000013E6 3ABC 977F                  		move.w	#$977F,(a5)
000013EA 3ABC 7C00                  		move.w	#$7C00,(a5)
000013EE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000013F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000013F8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001400 6100 0000                  		bsr.w	PalCycle_SS
00001404 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
0000140A                            
0000140A                            loc_E64:
0000140A 4A78 F614                  		tst.w	($FFFFF614).w
0000140E 6700 0000                  		beq.w	locret_E70
00001412 5378 F614                  		subq.w	#1,($FFFFF614).w
00001416                            
00001416                            locret_E70:
00001416 4E75                       		rts	
00001418                            ; ===========================================================================
00001418                            
00001418                            loc_E72:				; XREF: off_B6E
00001418 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001420                            
00001420                            loc_E7A:
00001420 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001428 66F6                       		bne.s	loc_E7A		; if not, branch
0000142A 6100 0000                  		bsr.w	ReadJoypads
0000142E 4A38 F64E                  		tst.b	($FFFFF64E).w
00001432 6600                       		bne.s	loc_EB4
00001434 4BF9 00C0 0004             		lea	($C00004).l,a5
0000143A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001440 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001446 3ABC 977F                  		move.w	#$977F,(a5)
0000144A 3ABC C000                  		move.w	#$C000,(a5)
0000144E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001454 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001458 6000                       		bra.s	loc_ED8
0000145A                            ; ===========================================================================
0000145A                            
0000145A                            loc_EB4:				; XREF: loc_E7A
0000145A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001460 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001466 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
0000146C 3ABC 977F                  		move.w	#$977F,(a5)
00001470 3ABC C000                  		move.w	#$C000,(a5)
00001474 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000147A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000147E                            
0000147E                            loc_ED8:				; XREF: loc_E7A
0000147E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001482 4BF9 00C0 0004             		lea	($C00004).l,a5
00001488 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000148E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001494                            
00001494                            loc_EEE:
00001494 3ABC 977F                  		move.w	#$977F,(a5)
00001498 3ABC 7C00                  		move.w	#$7C00,(a5)
0000149C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000014A2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000014A6 4BF9 00C0 0004             		lea	($C00004).l,a5
000014AC 2ABC 9401 9340             		move.l	#$94019340,(a5)
000014B2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000014B8 3ABC 977F                  		move.w	#$977F,(a5)
000014BC 3ABC 7800                  		move.w	#$7800,(a5)
000014C0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000014C6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000014CA 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
000014D0                            
000014D0                            loc_F54:
000014D0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000014D8 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
000014DE 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
000014E4 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000014EA 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000014F0 6100 0000                  		bsr.w	LoadTilesAsYouMove
000014F4                            ;		jsr	AniArt_Load
000014F4 4EB9 0000 0000             		jsr	HudUpdate
000014FA 6100 0000                  		bsr.w	sub_1642
000014FE 4E75                       		rts	
00001500                            ; ===========================================================================
00001500                            
00001500                            loc_F8A:				; XREF: off_B6E
00001500 6100 0000                  		bsr.w	sub_106E
00001504 5238 F628                  		addq.b	#1,($FFFFF628).w
00001508 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
0000150E 4E75                       		rts	
00001510                            ; ===========================================================================
00001510                            
00001510                            loc_F9A:				; XREF: off_B6E
00001510 6100 0000                  		bsr.w	sub_106E
00001514 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001518 6000 0000                  		bra.w	sub_1642
0000151C                            ; ===========================================================================
0000151C                            
0000151C                            loc_FA6:				; XREF: off_B6E
0000151C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001524                            
00001524                            loc_FAE:
00001524 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000152C 66F6                       		bne.s	loc_FAE		; if not, branch
0000152E 6100 0000                  		bsr.w	ReadJoypads
00001532 4BF9 00C0 0004             		lea	($C00004).l,a5
00001538 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000153E 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001544 3ABC 977F                  		move.w	#$977F,(a5)
00001548 3ABC C000                  		move.w	#$C000,(a5)
0000154C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001552 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001556 4BF9 00C0 0004             		lea	($C00004).l,a5
0000155C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001562 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001568 3ABC 977F                  		move.w	#$977F,(a5)
0000156C 3ABC 7800                  		move.w	#$7800,(a5)
00001570 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001576 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000157A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001580 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001586 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000158C 3ABC 977F                  		move.w	#$977F,(a5)
00001590 3ABC 7C00                  		move.w	#$7C00,(a5)
00001594 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000159A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000159E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015A6 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
000015AC                            
000015AC                            loc_1060:
000015AC 4A78 F614                  		tst.w	($FFFFF614).w
000015B0 6700 0000                  		beq.w	locret_106C
000015B4 5378 F614                  		subq.w	#1,($FFFFF614).w
000015B8                            
000015B8                            locret_106C:
000015B8 4E75                       		rts	
000015BA                            
000015BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BA                            
000015BA                            
000015BA                            sub_106E:				; XREF: loc_C32; et al
000015BA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000015C2                            
000015C2                            loc_1076:
000015C2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000015CA 66F6                       		bne.s	loc_1076	; if not, branch
000015CC 6100 0000                  		bsr.w	ReadJoypads
000015D0 4A38 F64E                  		tst.b	($FFFFF64E).w
000015D4 6600                       		bne.s	loc_10B0
000015D6 4BF9 00C0 0004             		lea	($C00004).l,a5
000015DC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000015E2 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000015E8 3ABC 977F                  		move.w	#$977F,(a5)
000015EC 3ABC C000                  		move.w	#$C000,(a5)
000015F0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000015F6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000015FA 6000                       		bra.s	loc_10D4
000015FC                            ; ===========================================================================
000015FC                            
000015FC                            loc_10B0:				; XREF: sub_106E
000015FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001602 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001608 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
0000160E 3ABC 977F                  		move.w	#$977F,(a5)
00001612 3ABC C000                  		move.w	#$C000,(a5)
00001616 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000161C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001620                            
00001620                            loc_10D4:				; XREF: sub_106E
00001620 4BF9 00C0 0004             		lea	($C00004).l,a5
00001626 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000162C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001632 3ABC 977F                  		move.w	#$977F,(a5)
00001636 3ABC 7800                  		move.w	#$7800,(a5)
0000163A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001640 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001644 4BF9 00C0 0004             		lea	($C00004).l,a5
0000164A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001650 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001656 3ABC 977F                  		move.w	#$977F,(a5)
0000165A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000165E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001664 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001668 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001670 4E75                       		rts	
00001672                            ; End of function sub_106E
00001672                            
00001672                            ; ---------------------------------------------------------------------------
00001672                            ; Subroutine to	move pallets from the RAM to CRAM
00001672                            ; ---------------------------------------------------------------------------
00001672                            
00001672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001672                            
00001672                            
00001672                            PalToCRAM:
00001672 46FC 2700                  		move	#$2700,sr
00001676 4A78 F644                  		tst.w	($FFFFF644).w
0000167A 6700                       		beq.s	locret_119C
0000167C 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001682 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001686 43F9 00C0 0000             		lea	($C00000).l,a1
0000168C 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001690 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001698 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000169A 2298                       		move.l	(a0)+,(a1)
0000169C 2298                       		move.l	(a0)+,(a1)
0000169E 2298                       		move.l	(a0)+,(a1)
000016A0 2298                       		move.l	(a0)+,(a1)
000016A2 2298                       		move.l	(a0)+,(a1)
000016A4 2298                       		move.l	(a0)+,(a1)
000016A6 2298                       		move.l	(a0)+,(a1)
000016A8 2298                       		move.l	(a0)+,(a1)
000016AA 2298                       		move.l	(a0)+,(a1)
000016AC 2298                       		move.l	(a0)+,(a1)
000016AE 2298                       		move.l	(a0)+,(a1)
000016B0 2298                       		move.l	(a0)+,(a1)
000016B2 2298                       		move.l	(a0)+,(a1)
000016B4 2298                       		move.l	(a0)+,(a1)
000016B6 2298                       		move.l	(a0)+,(a1)
000016B8 2298                       		move.l	(a0)+,(a1)
000016BA 2298                       		move.l	(a0)+,(a1)
000016BC 2298                       		move.l	(a0)+,(a1)
000016BE 2298                       		move.l	(a0)+,(a1)
000016C0 2298                       		move.l	(a0)+,(a1)
000016C2 2298                       		move.l	(a0)+,(a1)
000016C4 2298                       		move.l	(a0)+,(a1)
000016C6 2298                       		move.l	(a0)+,(a1)
000016C8 2298                       		move.l	(a0)+,(a1)
000016CA 2298                       		move.l	(a0)+,(a1)
000016CC 2298                       		move.l	(a0)+,(a1)
000016CE 2298                       		move.l	(a0)+,(a1)
000016D0 2298                       		move.l	(a0)+,(a1)
000016D2 2298                       		move.l	(a0)+,(a1)
000016D4 2298                       		move.l	(a0)+,(a1)
000016D6 2298                       		move.l	(a0)+,(a1)
000016D8 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000016DE 4CDF 0300                  		movem.l	(sp)+,a0-a1
000016E2 4A38 F64F                  		tst.b	($FFFFF64F).w
000016E6 6600                       		bne.s	loc_119E
000016E8                            
000016E8                            locret_119C:
000016E8 4E73                       		rte	
000016EA                            ; ===========================================================================
000016EA                            
000016EA                            loc_119E:				; XREF: PalToCRAM
000016EA 4238 F64F                  		clr.b	($FFFFF64F).w
000016EE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000016F2 6100 FC66                  		bsr.w	Demo_Time
000016F6 4EB9 0000 0000             		jsr	sub_71B4C
000016FC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001700 4E73                       		rte	
00001702                            ; End of function PalToCRAM
00001702                            
00001702                            ; ---------------------------------------------------------------------------
00001702                            ; Subroutine to	initialise joypads
00001702                            ; ---------------------------------------------------------------------------
00001702                            
00001702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001702                            
00001702                            
00001702                            JoypadInit:				; XREF: GameClrRAM
00001702 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000170A                            
0000170A                            Joypad_WaitZ80:
0000170A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00001712 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00001714 7040                       		moveq	#$40,d0
00001716 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
0000171C 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001722 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001728 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001730 4E75                       		rts	
00001732                            ; End of function JoypadInit
00001732                            
00001732                            ; ---------------------------------------------------------------------------
00001732                            ; Subroutine to	read joypad input, and send it to the RAM
00001732                            ; ---------------------------------------------------------------------------
00001732                            
00001732                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001732                            
00001732                            
00001732                            ReadJoypads:
00001732 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001736 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
0000173C 6100                       		bsr.s	Joypad_Read	; do the first joypad
0000173E 5449                       		addq.w	#2,a1		; do the second	joypad
00001740                            
00001740                            Joypad_Read:
00001740 12BC 0000                  		move.b	#0,(a1)
00001744 4E71                       		nop	
00001746 4E71                       		nop	
00001748 1011                       		move.b	(a1),d0
0000174A E508                       		lsl.b	#2,d0
0000174C 0200 00C0                  		andi.b	#$C0,d0
00001750 12BC 0040                  		move.b	#$40,(a1)
00001754 4E71                       		nop	
00001756 4E71                       		nop	
00001758 1211                       		move.b	(a1),d1
0000175A 0201 003F                  		andi.b	#$3F,d1
0000175E 8001                       		or.b	d1,d0
00001760 4600                       		not.b	d0
00001762 1210                       		move.b	(a0),d1
00001764 B101                       		eor.b	d0,d1
00001766 10C0                       		move.b	d0,(a0)+
00001768 C200                       		and.b	d0,d1
0000176A 10C1                       		move.b	d1,(a0)+
0000176C 4E75                       		rts	
0000176E                            ; End of function ReadJoypads
0000176E                            
0000176E                            
0000176E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176E                            
0000176E                            
0000176E                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000176E 41F9 00C0 0004             		lea	($C00004).l,a0
00001774 43F9 00C0 0000             		lea	($C00000).l,a1
0000177A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001780 7E12                       		moveq	#$12,d7
00001782                            
00001782                            VDP_Loop:
00001782 309A                       		move.w	(a2)+,(a0)
00001784 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001788                            
00001788 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000178E 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001792 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001798 7000                       		moveq	#0,d0
0000179A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000017A4 3E3C 003F                  		move.w	#$3F,d7
000017A8                            
000017A8                            VDP_ClrCRAM:
000017A8 3280                       		move.w	d0,(a1)
000017AA 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
000017AE                            
000017AE 42B8 F616                  		clr.l	($FFFFF616).w
000017B2 42B8 F61A                  		clr.l	($FFFFF61A).w
000017B6 2F01                       		move.l	d1,-(sp)
000017B8 4BF9 00C0 0004             		lea	($C00004).l,a5
000017BE 3ABC 8F01                  		move.w	#$8F01,(a5)
000017C2 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000017C8 3ABC 9780                  		move.w	#$9780,(a5)
000017CC 2ABC 4000 0080             		move.l	#$40000080,(a5)
000017D2 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000017DA                            
000017DA                            loc_128E:
000017DA 3215                       		move.w	(a5),d1
000017DC 0801 0001                  		btst	#1,d1
000017E0 66F8                       		bne.s	loc_128E
000017E2                            
000017E2 3ABC 8F02                  		move.w	#$8F02,(a5)
000017E6 221F                       		move.l	(sp)+,d1
000017E8 4E75                       		rts	
000017EA                            ; End of function VDPSetupGame
000017EA                            
000017EA                            ; ===========================================================================
000017EA 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000017F2 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000017FA 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001802 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
0000180A 9001 9100 9200             		dc.w $9001, $9100, $9200
00001810                            
00001810                            ; ---------------------------------------------------------------------------
00001810                            ; Subroutine to	clear the screen
00001810                            ; ---------------------------------------------------------------------------
00001810                            
00001810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001810                            
00001810                            
00001810                            ClearScreen:
00001810 4BF9 00C0 0004             		lea	($C00004).l,a5
00001816 3ABC 8F01                  		move.w	#$8F01,(a5)
0000181A 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001820 3ABC 9780                  		move.w	#$9780,(a5)
00001824 2ABC 4000 0083             		move.l	#$40000083,(a5)
0000182A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001832                            
00001832                            loc_12E6:
00001832 3215                       		move.w	(a5),d1
00001834 0801 0001                  		btst	#1,d1
00001838 66F8                       		bne.s	loc_12E6
0000183A                            
0000183A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000183E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001844 3ABC 8F01                  		move.w	#$8F01,(a5)
00001848 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000184E 3ABC 9780                  		move.w	#$9780,(a5)
00001852 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001858 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001860                            
00001860                            loc_1314:
00001860 3215                       		move.w	(a5),d1
00001862 0801 0001                  		btst	#1,d1
00001866 66F8                       		bne.s	loc_1314
00001868                            
00001868 3ABC 8F02                  		move.w	#$8F02,(a5)
0000186C 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001874 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000187C 43F8 F800                  		lea	($FFFFF800).w,a1
00001880 7000                       		moveq	#0,d0
00001882 323C 00A0                  		move.w	#$A0,d1
00001886                            
00001886                            loc_133A:
00001886 22C0                       		move.l	d0,(a1)+
00001888 51C9 FFFC                  		dbf	d1,loc_133A
0000188C                            
0000188C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001890 7000                       		moveq	#0,d0
00001892 323C 0100                  		move.w	#$100,d1
00001896                            
00001896                            loc_134A:
00001896 22C0                       		move.l	d0,(a1)+
00001898 51C9 FFFC                  		dbf	d1,loc_134A
0000189C 4E75                       		rts	
0000189E                            ; End of function ClearScreen
0000189E                            
0000189E                            ; ---------------------------------------------------------------------------
0000189E                            ; Subroutine to	load the sound driver
0000189E                            ; ---------------------------------------------------------------------------
0000189E                            
0000189E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000189E                            
0000189E                            
0000189E                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
0000189E 4E71                       		nop	
000018A0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000018A8 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000018B0 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
000018B6 43F9 00A0 0000             		lea	($A00000).l,a1
000018BC 6100 0000                  		bsr.w	KosDec		; decompress
000018C0 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000018C8 4E71                       		nop	
000018CA 4E71                       		nop	
000018CC 4E71                       		nop	
000018CE 4E71                       		nop	
000018D0 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000018D8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000018E0 4E75                       		rts	
000018E2                            ; End of function SoundDriverLoad
000018E2                            
000018E2                            ; ---------------------------------------------------------------------------
000018E2                            ; Subroutine to play a DAC sample
000018E2                            ; ---------------------------------------------------------------------------
000018E2                            
000018E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018E2                            
000018E2                            
000018E2                            PlayDAC:
000018E2 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000018E8 4E75                       		rts	
000018EA                            ; End of function PlayDAC
000018EA                            
000018EA                            ; ---------------------------------------------------------------------------
000018EA                            ; Subroutine to	????
000018EA                            ; ---------------------------------------------------------------------------
000018EA                            
000018EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018EA                            
000018EA                            ChkFMCh:
000018EA BBFC 00FF F070             		cmpa.l	#$FFF070,a5
000018F0 6600                       		bne.s	ChkCH2
000018F2 31C5 FFC0                  		move.w	d5,($FFFFFFC0).w
000018F6 4A38 FFD0                  		tst.b	($FFFFFFD0).w
000018FA 6600                       		bne.s	DontPlayThisChannel
000018FC                            ChkCH2:
000018FC BBFC 00FF F0A0             		cmpa.l	#$FFF0A0,a5
00001902 6600                       		bne.s	ChkCH3
00001904 31C5 FFC2                  		move.w	d5,($FFFFFFC2).w
00001908 4A38 FFD1                  		tst.b	($FFFFFFD1).w
0000190C 6600                       		bne.s	DontPlayThisChannel
0000190E                            ChkCH3:
0000190E BBFC 00FF F0D0             		cmpa.l	#$FFF0D0,a5
00001914 6600                       		bne.s	ChkCH4
00001916 31C5 FFC4                  		move.w	d5,($FFFFFFC4).w
0000191A 4A38 FFD2                  		tst.b	($FFFFFFD2).w
0000191E 6600                       		bne.s	DontPlayThisChannel
00001920                            ChkCH4:
00001920 BBFC 00FF F100             		cmpa.l	#$FFF100,a5
00001926 6600                       		bne.s	ChkCH5
00001928 31C5 FFC6                  		move.w	d5,($FFFFFFC6).w
0000192C 4A38 FFD3                  		tst.b	($FFFFFFD3).w
00001930 6600                       		bne.s	DontPlayThisChannel
00001932                            ChkCH5:
00001932 BBFC 00FF F130             		cmpa.l	#$FFF130,a5
00001938 6600                       		bne.s	ContinuePlay
0000193A 31C5 FFC8                  		move.w	d5,($FFFFFFC8).w
0000193E 4A38 FFD4                  		tst.b	($FFFFFFD4).w
00001942 6600                       		bne.s	DontPlayThisChannel
00001944                            ContinuePlay:
00001944 4EB9 0000 0000             		jsr	LoadNoteData
0000194A 3C30 5000                  		move.w	(a0,d5.w),d6
0000194E 3B46 0010                  		move.w	d6,$10(a5)
00001952 4E75                       		rts
00001954                            DontPlayThisChannel:
00001954 DBFC 0000 0010             		adda.l	#$10,a5
0000195A 4255                       		clr.w	(a5)
0000195C 9BFC 0000 0010             		suba.l	#$10,a5
00001962 4E75                       		rts
00001964                            ; End of function ChkFMch
00001964                            
00001964                            ; ---------------------------------------------------------------------------
00001964                            ; LoadASCII
00001964                            ; ---------------------------------------------------------------------------
00001964                            
00001964                            ; Nota: aun no estoy seguro si tengo permiso para usar este codigo. Si no,
00001964                            ; Borrare este y sacare el codigo desde la BIOS
00001964                            
00001964                            LoadASCII:
00001964 23C5 00C0 0004             		move.l	d5,($C00004).l
0000196A                            LoadText_Loop:
0000196A 7200                       		moveq	#0,d1
0000196C 1219                       		move.b	(a1)+,d1
0000196E 6B00 0000                  		bmi.w	LoadASCII_AddSpace	; if a1 = $FF, branch
00001972 6600 0000                  		bne.w	LoadASCII_Print
00001976 4E75                       		rts
00001978                            LoadASCII_Print:
00001978 4A43                       		tst.w	d3
0000197A 6700 0000                  		beq	LoadASCII_Print_2
0000197E D243                       		add.w	d3,d1		
00001980                            LoadASCII_Print_2:
00001980 33C1 00C0 0000             		move.w	d1,($C00000)		;"print" la letra
00001986 6000 FFE2                  		bra.w	LoadText_Loop
0000198A                            LoadASCII_AddSpace:
0000198A 0685 0080 0000             		add.l	#$800000,d5		;Espacio
00001990 6000 FFD2                  		bra.w	LoadASCII
00001994                            ;====================================================================================
00001994                            
00001994                            LoadASCII_2:
00001994 23C5 00C0 0004             		move.l	d5,($C00004).l
0000199A                            LoadText_2_Loop:
0000199A 7200                       		moveq	#0,d1
0000199C 1219                       		move.b	(a1)+,d1
0000199E 6B00 0000                  		bmi.w	LoadASCII_2_AddSpace	; if a1 = $FF, branch
000019A2 6600 0000                  		bne.w	LoadASCII_2_Print
000019A6 4E75                       		rts
000019A8                            LoadASCII_2_Print:
000019A8 D243                       		add.w	d3,d1			;VRAM Address
000019AA 33C1 00C0 0000             		move.w	d1,($C00000)		;"print" la letra
000019B0 6000 FFE8                  		bra.w	LoadText_2_Loop
000019B4                            LoadASCII_2_AddSpace:
000019B4 0685 0080 0000             		add.l	#$800000,d5		;Espacio
000019BA 6000 FFD8                  		bra.w	LoadASCII_2
000019BE                            ;====================================================================================
000019BE                            ;d4 = text length
000019BE                            
000019BE                            LoadASCII_3:
000019BE 23C5 00C0 0004             		move.l	d5,($C00004).l
000019C4                            LoadText_3_Loop:
000019C4 7200                       		moveq	#0,d1
000019C6 1219                       		move.b	(a1)+,d1
000019C8 6B00 FFEA                  		bmi.w	LoadASCII_2_AddSpace	; if a1 = $FF, branch
000019CC                            
000019CC                            LoadText_3_Print_Loop:
000019CC D243                       		add.w	d3,d1			;VRAM Address
000019CE 33C1 00C0 0000             		move.w	d1,($C00000)		;"print" la letra
000019D4 51CC FFF6                  		dbf	d4,LoadText_3_Print_Loop
000019D8 4E75                       		rts
000019DA                            
000019DA                            LoadASCII_3_AddSpace:
000019DA 0685 0080 0000             		add.l	#$800000,d5		;Espacio
000019E0 6000 FFB2                  		bra.w	LoadASCII_2
000019E4                            ;====================================================================================
000019E4                            
000019E4                            ; ---------------------------------------------------------------------------
000019E4                            ; Subroutine to	play a sound or	music track
000019E4                            ; ---------------------------------------------------------------------------
000019E4                            
000019E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019E4                            
000019E4                            
000019E4                            PlaySound:
000019E4 0C00 007F                  		cmpi.b  #$7F,d0
000019E8 6F00                       		ble.s   ChkSounds00to7F
000019EA 4EF9 0000 0000             		jmp	 NormalSoundRequest
000019F0                            ChkSounds00to7F:
000019F0 0C00 0001                  		cmpi.b  #$01,d0
000019F4 6C00                       		bge.s   LoadSlots00to7F
000019F6 4EF9 0000 0000             		jmp	 NormalSoundRequest
000019FC                            LoadSlots00to7F:
000019FC 0600 0080                  		add.b   #$80,d0; Add $80 to get slot to starts at $81			
00001A00 11FC 0001 FF99             		move.b  #$01,($FFFFFF99).w; Move $01 to $FFFFFC to make sound driver to load the secound index
00001A06                            NormalSoundRequest:
00001A06 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001A0A 4E75                       		rts
00001A0C                            ; End of function PlaySound
00001A0C                            
00001A0C                            ; ---------------------------------------------------------------------------
00001A0C                            ; Subroutine to	play a special sound/music (E0-E4)
00001A0C                            ;
00001A0C                            ; E0 - Fade out
00001A0C                            ; E1 - Sega
00001A0C                            ; E2 - Speed up
00001A0C                            ; E3 - Normal speed
00001A0C                            ; E4 - Stop
00001A0C                            ; ---------------------------------------------------------------------------
00001A0C                            
00001A0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A0C                            
00001A0C                            
00001A0C                            PlaySound_Special:
00001A0C 0C00 007F                  		cmpi.b  #$7F,d0
00001A10 6F00                       		ble.s   ChkSounds00to7F_Special
00001A12 4EF9 0000 0000             		jmp	 NormalSoundRequest_Special
00001A18                            ChkSounds00to7F_Special:
00001A18                             
00001A18 0C00 0001                  		cmpi.b  #$01,d0
00001A1C 6C00                       		bge.s   LoadSlots00to7F_Special
00001A1E 4EF9 0000 0000             		jmp	 NormalSoundRequest_Special
00001A24                            LoadSlots00to7F_Special:
00001A24 0600 0080                  		add.b   #$80,d0; Add $80 to get slot to starts at $81			
00001A28 11FC 0001 FF99             		move.b  #$01,($FFFFFF99).w; Move $01 to $FFFFFC to make the sound driver to load the secound index
00001A2E                            NormalSoundRequest_Special:
00001A2E 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001A32 4E75                       		rts	
00001A34                            ; End of function PlaySound_Special
00001A34                            
00001A34                            ; ===========================================================================
00001A34                            ; ---------------------------------------------------------------------------
00001A34                            ; Unused sound/music subroutine
00001A34                            ; ---------------------------------------------------------------------------
00001A34                            
00001A34                            PlaySound_Unk:
00001A34 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001A38 4E75                       		rts	
00001A3A                            
00001A3A                            ; ---------------------------------------------------------------------------
00001A3A                            ; Subroutine to calculate the emerald's timer.
00001A3A                            ; ---------------------------------------------------------------------------
00001A3A                            
00001A3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A3A                            
00001A3A                            EmeraldSS:
00001A3A 4A38 FF91                  		tst.b	($FFFFFF91).w
00001A3E 6700 0000                  		beq	EmeraldSS_Return
00001A42 4A38 FF92                  		tst.b	($FFFFFF92).w
00001A46 6600 0000                  		bne	EmeraldSS_Substract
00001A4A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00001A50 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00001A56 31FC 0000 FE10             		move.w	#$0000,($FFFFFE10).w
00001A5C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00001A62 4238 FF91                  		clr.b	($FFFFFF91).w
00001A66 4238 FF92                  		clr.b	($FFFFFF92).w
00001A6A                            
00001A6A                            EmeraldSS_Return:
00001A6A 4E75                       		rts
00001A6C                            
00001A6C                            EmeraldSS_Substract:
00001A6C 5338 FF92                  		sub.b	#1,($FFFFFF92).w
00001A70 4E75                       		rts
00001A72                            
00001A72                            ; ---------------------------------------------------------------------------
00001A72                            ; Subroutine to	move sonic in the air
00001A72                            ; ---------------------------------------------------------------------------
00001A72                            
00001A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A72                            
00001A72                            
00001A72 4E71                       MoveInAir:	nop
00001A74 0C38 0001 FFA5             		cmpi.b	#1,($FFFFFFA5).w
00001A7A 6600 0000                  		bne	MoveInAir_Return
00001A7E                            
00001A7E 7A00                       		moveq	#0,d5
00001A80 1A38 FFA0                  		move.b	($FFFFFFA0).w,d5
00001A84 3C3B 5000                  		move.w	Move_Index(pc,d5.w),d6
00001A88 4EFB 6000                  		jmp	Move_Index(pc,d6.w)
00001A8C                            
00001A8C                            Move_Index:
00001A8C                            		;Lista de tareas
00001A8C 0000                       		dc.w MoveAir_1-Move_Index
00001A8E 0000                       		dc.w MoveAir_2-Move_Index
00001A90 0000                       		dc.w MoveAir_3-Move_Index
00001A92                            
00001A92                            MoveAir_1:
00001A92 7000                       		moveq	#0,d0
00001A94 31C0 D014                  		move.w	d0,($FFFFD014).w
00001A98 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00001A9E 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00001AA4 11FC 0006 D022             		move.b	#6,($FFFFD022).w
00001AAA 103C 00BE                  		move.b	#$BE,d0
00001AAE 4EB8 19E4                  		jsr	PlaySound
00001AB2 11FC 0030 FFA1             		move.b	#$30,($FFFFFFA1).w
00001AB8 5438 FFA0                  		addq.b	#2,($FFFFFFA0).w
00001ABC 4E75                       		rts
00001ABE                            
00001ABE                            MoveAir_2:
00001ABE 4A38 FFA1                  		tst.b	($FFFFFFA1).w
00001AC2 6700 0000                  		beq	MoveAir_2_Done
00001AC6 5338 FFA1                  		sub.b	#1,($FFFFFFA1).w
00001ACA 4E75                       		rts
00001ACC                            
00001ACC                            MoveAir_2_Done:
00001ACC 103C 00BC                  		move.b	#$BC,d0
00001AD0 4EB8 19E4                  		jsr	PlaySound
00001AD4 5438 FFA0                  		addq.b	#2,($FFFFFFA0).w
00001AD8 4E75                       		rts
00001ADA                            
00001ADA                            MoveAir_3:
00001ADA 7000                       		moveq	#0,d0
00001ADC 31C0 D014                  		move.w	d0,($FFFFD014).w
00001AE0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00001AE6 11FC 002F D01A             		move.b	#$2F,($FFFFD01A).w
00001AEC 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00001AF2 11FC 0006 D022             		move.b	#6,($FFFFD022).w
00001AF8 0478 000C D00C             		sub.w	#$C,($FFFFD00C).w
00001AFE                            
00001AFE                            MoveInAir_Return:
00001AFE 4E75                       		rts
00001B00                            ; ---------------------------------------------------------------------------
00001B00                            ; Subroutine to	pause the game
00001B00                            ; ---------------------------------------------------------------------------
00001B00                            
00001B00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B00                            
00001B00                            
00001B00                            PauseGame:				; XREF: Level_MainLoop; et al
00001B00 4E71                       		nop	
00001B02 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001B06 6700                       		beq.s	Unpause		; if not, branch
00001B08 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001B0C 6600                       		bne.s	loc_13BE	; if yes, branch
00001B0E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001B14 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001B16                            
00001B16                            loc_13BE:
00001B16 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001B1C 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001B22                            
00001B22                            loc_13CA:
00001B22 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001B28 6100 0000                  		bsr.w	DelayProgram
00001B2C 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001B30 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001B32 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001B38 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001B3A 11FC 002C FF94             		move.b	#$2C,($FFFFFF94).w ; set game mode to $2C (level select)
00001B40 4E71                       		nop	
00001B42 6000                       		bra.s	loc_1404
00001B44                            ; ===========================================================================
00001B44                            
00001B44                            Pause_ChkBC:				; XREF: PauseGame
00001B44 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001B4A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001B4C 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001B52 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001B54                            
00001B54                            Pause_ChkStart:				; XREF: PauseGame
00001B54 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001B5A 67C6                       		beq.s	loc_13CA	; if not, branch
00001B5C                            
00001B5C                            loc_1404:				; XREF: PauseGame
00001B5C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001B62                            
00001B62                            Unpause:				; XREF: PauseGame
00001B62 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001B68                            
00001B68                            Pause_DoNothing:			; XREF: PauseGame
00001B68 4E75                       		rts	
00001B6A                            ; ===========================================================================
00001B6A                            
00001B6A                            Pause_SlowMo:				; XREF: PauseGame
00001B6A 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001B70 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001B76 4E75                       		rts	
00001B78                            ; End of function PauseGame
00001B78                            
00001B78                            ; ---------------------------------------------------------------------------
00001B78                            ; Subroutine to	display	patterns via the VDP
00001B78                            ; ---------------------------------------------------------------------------
00001B78                            
00001B78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B78                            
00001B78                            
00001B78                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001B78 4DF9 00C0 0000             		lea	($C00000).l,a6
00001B7E 283C 0080 0000             		move.l	#$800000,d4
00001B84                            
00001B84                            loc_142C:
00001B84 2D40 0004                  		move.l	d0,4(a6)
00001B88 3601                       		move.w	d1,d3
00001B8A                            
00001B8A                            loc_1432:
00001B8A 3C99                       		move.w	(a1)+,(a6)
00001B8C 51CB FFFC                  		dbf	d3,loc_1432
00001B90 D084                       		add.l	d4,d0
00001B92 51CA FFF0                  		dbf	d2,loc_142C
00001B96 4E75                       		rts	
00001B98                            ; End of function ShowVDPGraphics
00001B98                            
00001B98                            ; ---------------------------------------------------------------------------
00001B98                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00001B98                            ; to be issued the next time ProcessDMAQueue is called.
00001B98                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00001B98                            ; by issuing the commands (this subroutine DOES check for overflow)
00001B98                            ; ---------------------------------------------------------------------------
00001B98                             
00001B98                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001B98                             
00001B98                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
00001B98                            QueueDMATransfer:
00001B98 2278 C8FC                  		movea.l	($FFFFC8FC).w,a1
00001B9C B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001BA0 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001BA2                             
00001BA2                            		; piece together some VDP commands and store them for later...
00001BA2 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
00001BA6 1003                       		move.b	d3,d0
00001BA8 32C0                       		move.w	d0,(a1)+ ; store command
00001BAA                             
00001BAA 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
00001BAE E04B                       		lsr.w	#8,d3
00001BB0 1003                       		move.b	d3,d0
00001BB2 32C0                       		move.w	d0,(a1)+ ; store command
00001BB4                             
00001BB4 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
00001BB8 E289                       		lsr.l	#1,d1
00001BBA 1001                       		move.b	d1,d0
00001BBC 32C0                       		move.w	d0,(a1)+ ; store command
00001BBE                             
00001BBE 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
00001BC2 E089                       		lsr.l	#8,d1
00001BC4 1001                       		move.b	d1,d0
00001BC6 32C0                       		move.w	d0,(a1)+ ; store command
00001BC8                             
00001BC8 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $FE0000
00001BCC E089                       		lsr.l	#8,d1
00001BCE 1001                       		move.b	d1,d0
00001BD0 32C0                       		move.w	d0,(a1)+ ; store command
00001BD2                             
00001BD2 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
00001BD8 E58A                       		lsl.l	#2,d2
00001BDA E44A                       		lsr.w	#2,d2
00001BDC 4842                       		swap	d2
00001BDE 0082 4000 0080             		ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
00001BE4 22C2                       		move.l	d2,(a1)+ ; store command
00001BE6                             
00001BE6 21C9 C8FC                  		move.l	a1,($FFFFC8FC).w ; set the next free slot address
00001BEA B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001BEE 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001BF0 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
00001BF4                            ; return_14AA:
00001BF4                            QueueDMATransfer_Done:
00001BF4 4E75                       		rts
00001BF6                            ; End of function QueueDMATransfer
00001BF6                             
00001BF6                             
00001BF6                            ; ---------------------------------------------------------------------------
00001BF6                            ; Subroutine for issuing all VDP commands that were queued
00001BF6                            ; (by earlier calls to QueueDMATransfer)
00001BF6                            ; Resets the queue when it's done
00001BF6                            ; ---------------------------------------------------------------------------
00001BF6                             
00001BF6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001BF6                             
00001BF6                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00001BF6                            ProcessDMAQueue:
00001BF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00001BFC 43F8 C800                  		lea	($FFFFC800).w,a1
00001C00                            ; loc_14B6:
00001C00                            ProcessDMAQueue_Loop:
00001C00 3019                       		move.w	(a1)+,d0
00001C02 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
00001C04                            		; issue a set of VDP commands...
00001C04 3A80                       		move.w	d0,(a5)		; transfer length
00001C06 3A99                       		move.w	(a1)+,(a5)	; transfer length
00001C08 3A99                       		move.w	(a1)+,(a5)	; source address
00001C0A 3A99                       		move.w	(a1)+,(a5)	; source address
00001C0C 3A99                       		move.w	(a1)+,(a5)	; source address
00001C0E 3A99                       		move.w	(a1)+,(a5)	; destination
00001C10 3A99                       		move.w	(a1)+,(a5)	; destination
00001C12 B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001C16 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00001C18                            ; loc_14CE:
00001C18                            ProcessDMAQueue_Done:
00001C18 31FC 0000 C800             		move.w	#0,($FFFFC800).w
00001C1E 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00001C26 4E75                       		rts
00001C28                            ; End of function ProcessDMAQueue
00001C28                            
00001C28                            ; ---------------------------------------------------------------------------
00001C28                            ; Subroutine to load uncompressed art
00001C28                            ; ---------------------------------------------------------------------------
00001C28                            
00001C28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C28                            
00001C28                            
00001C28                            LoadUncArt:
00001C28 43F9 00C0 0000             		lea	($C00000), a1		;Mover VDP Control a "a1"
00001C2E                            
00001C2E                            LoadArt_Loop:
00001C2E 229A                       		move.l	(a2)+, (a1)		;$xxxxxxxx	<- linea a procesar
00001C30 229A                       		move.l	(a2)+, (a1)
00001C32 229A                       		move.l	(a2)+, (a1)
00001C34 229A                       		move.l	(a2)+, (a1)
00001C36 229A                       		move.l	(a2)+, (a1)
00001C38 229A                       		move.l	(a2)+, (a1)
00001C3A 229A                       		move.l	(a2)+, (a1)
00001C3C 229A                       		move.l	(a2)+, (a1)
00001C3E 51C8 FFEE                  		dbf	d0, LoadArt_Loop	;Repetir los pasos del d0
00001C42 4E75                       		rts
00001C44                            
00001C44                            ;====================================================================================
00001C44                            
00001C44                            
00001C44                            ; ---------------------------------------------------------------------------
00001C44                            ; Nemesis decompression	algorithm
00001C44                            ; ---------------------------------------------------------------------------
00001C44                            
00001C44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C44                            
00001C44                            
00001C44                            NemDec:
00001C44 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001C48 47F9 0000 0000             		lea	(loc_1502).l,a3
00001C4E 49F9 00C0 0000             		lea	($C00000).l,a4
00001C54 6000                       		bra.s	loc_145C
00001C56                            ; ===========================================================================
00001C56 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001C5A 47F9 0000 0000             		lea	(loc_1518).l,a3
00001C60                            
00001C60                            loc_145C:				; XREF: NemDec
00001C60 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001C64 3418                       		move.w	(a0)+,d2
00001C66 E34A                       		lsl.w	#1,d2
00001C68 6400                       		bcc.s	loc_146A
00001C6A D6FC 000A                  		adda.w	#$A,a3
00001C6E                            
00001C6E                            loc_146A:
00001C6E E54A                       		lsl.w	#2,d2
00001C70 3A42                       		movea.w	d2,a5
00001C72 7608                       		moveq	#8,d3
00001C74 7400                       		moveq	#0,d2
00001C76 7800                       		moveq	#0,d4
00001C78 6100 0000                  		bsr.w	NemDec4
00001C7C 1A18                       		move.b	(a0)+,d5
00001C7E E145                       		asl.w	#8,d5
00001C80 1A18                       		move.b	(a0)+,d5
00001C82 3C3C 0010                  		move.w	#$10,d6
00001C86 6100                       		bsr.s	NemDec2
00001C88 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001C8C 4E75                       		rts	
00001C8E                            ; End of function NemDec
00001C8E                            
00001C8E                            
00001C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C8E                            
00001C8E                            
00001C8E                            NemDec2:				; XREF: NemDec
00001C8E 3E06                       		move.w	d6,d7
00001C90 5147                       		subq.w	#8,d7
00001C92 3205                       		move.w	d5,d1
00001C94 EE69                       		lsr.w	d7,d1
00001C96 0C01 00FC                  		cmpi.b	#-4,d1
00001C9A 6400                       		bcc.s	loc_14D6
00001C9C 0241 00FF                  		andi.w	#$FF,d1
00001CA0 D241                       		add.w	d1,d1
00001CA2 1031 1000                  		move.b	(a1,d1.w),d0
00001CA6 4880                       		ext.w	d0
00001CA8 9C40                       		sub.w	d0,d6
00001CAA 0C46 0009                  		cmpi.w	#9,d6
00001CAE 6400                       		bcc.s	loc_14B2
00001CB0 5046                       		addq.w	#8,d6
00001CB2 E145                       		asl.w	#8,d5
00001CB4 1A18                       		move.b	(a0)+,d5
00001CB6                            
00001CB6                            loc_14B2:
00001CB6 1231 1001                  		move.b	1(a1,d1.w),d1
00001CBA 3001                       		move.w	d1,d0
00001CBC 0241 000F                  		andi.w	#$F,d1
00001CC0 0240 00F0                  		andi.w	#$F0,d0
00001CC4                            
00001CC4                            loc_14C0:				; XREF: NemDec3
00001CC4 E848                       		lsr.w	#4,d0
00001CC6                            
00001CC6                            loc_14C2:				; XREF: NemDec3
00001CC6 E98C                       		lsl.l	#4,d4
00001CC8 8801                       		or.b	d1,d4
00001CCA 5343                       		subq.w	#1,d3
00001CCC 6600                       		bne.s	loc_14D0
00001CCE 4ED3                       		jmp	(a3)
00001CD0                            ; End of function NemDec2
00001CD0                            
00001CD0                            
00001CD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CD0                            
00001CD0                            
00001CD0                            NemDec3:				; XREF: loc_1502
00001CD0 7800                       		moveq	#0,d4
00001CD2 7608                       		moveq	#8,d3
00001CD4                            
00001CD4                            loc_14D0:				; XREF: NemDec2
00001CD4 51C8 FFF0                  		dbf	d0,loc_14C2
00001CD8 60B4                       		bra.s	NemDec2
00001CDA                            ; ===========================================================================
00001CDA                            
00001CDA                            loc_14D6:				; XREF: NemDec2
00001CDA 5D46                       		subq.w	#6,d6
00001CDC 0C46 0009                  		cmpi.w	#9,d6
00001CE0 6400                       		bcc.s	loc_14E4
00001CE2 5046                       		addq.w	#8,d6
00001CE4 E145                       		asl.w	#8,d5
00001CE6 1A18                       		move.b	(a0)+,d5
00001CE8                            
00001CE8                            loc_14E4:				; XREF: NemDec3
00001CE8 5F46                       		subq.w	#7,d6
00001CEA 3205                       		move.w	d5,d1
00001CEC EC69                       		lsr.w	d6,d1
00001CEE 3001                       		move.w	d1,d0
00001CF0 0241 000F                  		andi.w	#$F,d1
00001CF4 0240 0070                  		andi.w	#$70,d0
00001CF8 0C46 0009                  		cmpi.w	#9,d6
00001CFC 64C6                       		bcc.s	loc_14C0
00001CFE 5046                       		addq.w	#8,d6
00001D00 E145                       		asl.w	#8,d5
00001D02 1A18                       		move.b	(a0)+,d5
00001D04 60BE                       		bra.s	loc_14C0
00001D06                            ; End of function NemDec3
00001D06                            
00001D06                            ; ===========================================================================
00001D06                            
00001D06                            loc_1502:				; XREF: NemDec
00001D06 2884                       		move.l	d4,(a4)
00001D08 534D                       		subq.w	#1,a5
00001D0A 380D                       		move.w	a5,d4
00001D0C 66C2                       		bne.s	NemDec3
00001D0E 4E75                       		rts	
00001D10                            ; ===========================================================================
00001D10 B982                       		eor.l	d4,d2
00001D12 2882                       		move.l	d2,(a4)
00001D14 534D                       		subq.w	#1,a5
00001D16 380D                       		move.w	a5,d4
00001D18 66B6                       		bne.s	NemDec3
00001D1A 4E75                       		rts	
00001D1C                            ; ===========================================================================
00001D1C                            
00001D1C                            loc_1518:				; XREF: NemDec
00001D1C 28C4                       		move.l	d4,(a4)+
00001D1E 534D                       		subq.w	#1,a5
00001D20 380D                       		move.w	a5,d4
00001D22 66AC                       		bne.s	NemDec3
00001D24 4E75                       		rts	
00001D26                            ; ===========================================================================
00001D26 B982                       		eor.l	d4,d2
00001D28 28C2                       		move.l	d2,(a4)+
00001D2A 534D                       		subq.w	#1,a5
00001D2C 380D                       		move.w	a5,d4
00001D2E 66A0                       		bne.s	NemDec3
00001D30 4E75                       		rts	
00001D32                            
00001D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D32                            
00001D32                            
00001D32                            NemDec4:				; XREF: NemDec
00001D32 1018                       		move.b	(a0)+,d0
00001D34                            
00001D34                            loc_1530:
00001D34 0C00 00FF                  		cmpi.b	#-1,d0
00001D38 6600                       		bne.s	loc_1538
00001D3A 4E75                       		rts	
00001D3C                            ; ===========================================================================
00001D3C                            
00001D3C                            loc_1538:				; XREF: NemDec4
00001D3C 3E00                       		move.w	d0,d7
00001D3E                            
00001D3E                            loc_153A:
00001D3E 1018                       		move.b	(a0)+,d0
00001D40 0C00 0080                  		cmpi.b	#$80,d0
00001D44 64EE                       		bcc.s	loc_1530
00001D46 1200                       		move.b	d0,d1
00001D48 0247 000F                  		andi.w	#$F,d7
00001D4C 0241 0070                  		andi.w	#$70,d1
00001D50 8E41                       		or.w	d1,d7
00001D52 0240 000F                  		andi.w	#$F,d0
00001D56 1200                       		move.b	d0,d1
00001D58 E149                       		lsl.w	#8,d1
00001D5A 8E41                       		or.w	d1,d7
00001D5C 7208                       		moveq	#8,d1
00001D5E 9240                       		sub.w	d0,d1
00001D60 6600                       		bne.s	loc_1568
00001D62 1018                       		move.b	(a0)+,d0
00001D64 D040                       		add.w	d0,d0
00001D66 3387 0000                  		move.w	d7,(a1,d0.w)
00001D6A 60D2                       		bra.s	loc_153A
00001D6C                            ; ===========================================================================
00001D6C                            
00001D6C                            loc_1568:				; XREF: NemDec4
00001D6C 1018                       		move.b	(a0)+,d0
00001D6E E368                       		lsl.w	d1,d0
00001D70 D040                       		add.w	d0,d0
00001D72 7A01                       		moveq	#1,d5
00001D74 E36D                       		lsl.w	d1,d5
00001D76 5345                       		subq.w	#1,d5
00001D78                            
00001D78                            loc_1574:
00001D78 3387 0000                  		move.w	d7,(a1,d0.w)
00001D7C 5440                       		addq.w	#2,d0
00001D7E 51CD FFF8                  		dbf	d5,loc_1574
00001D82 60BA                       		bra.s	loc_153A
00001D84                            ; End of function NemDec4
00001D84                            
00001D84                            ; ---------------------------------------------------------------------------
00001D84                            ; Subroutine to load the art for the animals for the current zone
00001D84                            ; ---------------------------------------------------------------------------
00001D84                             
00001D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D84                             
00001D84                             
00001D84                            LoadAnimalPLC:
00001D84 7000                       		moveq	#0,d0
00001D86 1038 FE10                  		move.b	($FFFFFE10).w,d0
00001D8A 0C40 0007                  		cmpi.w	#7,d0
00001D8E 6400                       		bhs.s	LoadAnimalPLC_New
00001D90 0640 0015                  		addi.w	#$15,d0
00001D94 6000                       		bra.s	LoadPLC
00001D96                            ; ---------------------------------------------------------------------------
00001D96                            LoadAnimalPLC_New:
00001D96 5F40                       		subi.w	#7,d0
00001D98                            		; multiply d0 by 3
00001D98 3200                       		move.w	d0,d1
00001D9A D040                       		add.w	d0,d0
00001D9C D041                       		add.w	d1,d0
00001D9E                            		; add $22 (this is the index of the animal PLC for the first added zone)
00001D9E 0640 0022                  		addi.w	#$22,d0
00001DA2                            		; bra.s	LoadPLC
00001DA2                            ; End of function LoadAnimalPLC
00001DA2                            
00001DA2                            ; ---------------------------------------------------------------------------
00001DA2                            ; Subroutine to	load pattern load cues
00001DA2                            ; ---------------------------------------------------------------------------
00001DA2                            
00001DA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DA2                            
00001DA2                            
00001DA2                            LoadPLC:
00001DA2 48E7 0060                  		movem.l	a1-a2,-(sp)
00001DA6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001DAC D040                       		add.w	d0,d0
00001DAE 3031 0000                  		move.w	(a1,d0.w),d0
00001DB2 43F1 0000                  		lea	(a1,d0.w),a1
00001DB6 45F8 F680                  		lea	($FFFFF680).w,a2
00001DBA                            
00001DBA                            loc_1598:
00001DBA 4A92                       		tst.l	(a2)
00001DBC 6700                       		beq.s	loc_15A0
00001DBE 5C4A                       		addq.w	#6,a2
00001DC0 60F8                       		bra.s	loc_1598
00001DC2                            ; ===========================================================================
00001DC2                            
00001DC2                            loc_15A0:				; XREF: LoadPLC
00001DC2 3019                       		move.w	(a1)+,d0
00001DC4 6B00                       		bmi.s	loc_15AC
00001DC6                            
00001DC6                            loc_15A4:
00001DC6 24D9                       		move.l	(a1)+,(a2)+
00001DC8 34D9                       		move.w	(a1)+,(a2)+
00001DCA 51C8 FFFA                  		dbf	d0,loc_15A4
00001DCE                            
00001DCE                            loc_15AC:
00001DCE 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001DD2 4E75                       		rts	
00001DD4                            ; End of function LoadPLC
00001DD4                            
00001DD4                            
00001DD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DD4                            
00001DD4                            
00001DD4                            LoadPLC2:
00001DD4 48E7 0060                  		movem.l	a1-a2,-(sp)
00001DD8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001DDE D040                       		add.w	d0,d0
00001DE0 3031 0000                  		move.w	(a1,d0.w),d0
00001DE4 43F1 0000                  		lea	(a1,d0.w),a1
00001DE8 6100                       		bsr.s	ClearPLC
00001DEA 45F8 F680                  		lea	($FFFFF680).w,a2
00001DEE 3019                       		move.w	(a1)+,d0
00001DF0 6B00                       		bmi.s	loc_15D8
00001DF2                            
00001DF2                            loc_15D0:
00001DF2 24D9                       		move.l	(a1)+,(a2)+
00001DF4 34D9                       		move.w	(a1)+,(a2)+
00001DF6 51C8 FFFA                  		dbf	d0,loc_15D0
00001DFA                            
00001DFA                            loc_15D8:
00001DFA 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001DFE 4E75                       		rts	
00001E00                            ; End of function LoadPLC2
00001E00                            
00001E00                            ; ---------------------------------------------------------------------------
00001E00                            ; Subroutine to	clear the pattern load cues
00001E00                            ; ---------------------------------------------------------------------------
00001E00                            
00001E00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E00                            
00001E00                            
00001E00                            ClearPLC:				; XREF: LoadPLC2
00001E00 45F8 F680                  		lea	($FFFFF680).w,a2
00001E04 701F                       		moveq	#$1F,d0
00001E06                            
00001E06                            ClearPLC_Loop:
00001E06 429A                       		clr.l	(a2)+
00001E08 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001E0C 4E75                       		rts	
00001E0E                            ; End of function ClearPLC
00001E0E                            
00001E0E                            ; ---------------------------------------------------------------------------
00001E0E                            ; Subroutine to	use graphics listed in a pattern load cue
00001E0E                            ; ---------------------------------------------------------------------------
00001E0E                            
00001E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E0E                            
00001E0E                            
00001E0E                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001E0E 4AB8 F680                  		tst.l	($FFFFF680).w
00001E12 6700                       		beq.s	locret_1640
00001E14 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001E18 6600                       		bne.s	locret_1640
00001E1A 2078 F680                  		movea.l	($FFFFF680).w,a0
00001E1E 47F9 0000 1D06             		lea	(loc_1502).l,a3
00001E24 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001E28 3418                       		move.w	(a0)+,d2
00001E2A 6A00                       		bpl.s	loc_160E
00001E2C D6FC 000A                  		adda.w	#$A,a3
00001E30                            
00001E30                            loc_160E:
00001E30 0242 7FFF                  		andi.w	#$7FFF,d2
00001E34 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001E38 6100 FEF8                  		bsr.w	NemDec4
00001E3C 1A18                       		move.b	(a0)+,d5
00001E3E E145                       		asl.w	#8,d5
00001E40 1A18                       		move.b	(a0)+,d5
00001E42 7C10                       		moveq	#$10,d6
00001E44 7000                       		moveq	#0,d0
00001E46 21C8 F680                  		move.l	a0,($FFFFF680).w
00001E4A 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001E4E 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001E52 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001E56 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001E5A 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001E5E 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001E62                            
00001E62                            locret_1640:
00001E62 4E75                       		rts	
00001E64                            ; End of function RunPLC_RAM
00001E64                            
00001E64                            
00001E64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E64                            
00001E64                            
00001E64                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001E64 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001E68 6700 0000                  		beq.w	locret_16DA
00001E6C 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001E72 7000                       		moveq	#0,d0
00001E74 3038 F684                  		move.w	($FFFFF684).w,d0
00001E78 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001E7E 6000                       		bra.s	loc_1676
00001E80                            ; End of function sub_1642
00001E80                            
00001E80                            
00001E80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E80                            
00001E80                            
00001E80                            sub_165E:				; XREF: Demo_Time
00001E80 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001E84 6700                       		beq.s	locret_16DA
00001E86 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001E8C 7000                       		moveq	#0,d0
00001E8E 3038 F684                  		move.w	($FFFFF684).w,d0
00001E92 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001E98                            
00001E98                            loc_1676:				; XREF: sub_1642
00001E98 49F9 00C0 0004             		lea	($C00004).l,a4
00001E9E E588                       		lsl.l	#2,d0
00001EA0 E448                       		lsr.w	#2,d0
00001EA2 0040 4000                  		ori.w	#$4000,d0
00001EA6 4840                       		swap	d0
00001EA8 2880                       		move.l	d0,(a4)
00001EAA 594C                       		subq.w	#4,a4
00001EAC 2078 F680                  		movea.l	($FFFFF680).w,a0
00001EB0 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001EB4 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001EB8 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001EBC 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001EC0 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001EC4 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001EC8 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001ECC                            
00001ECC                            loc_16AA:				; XREF: sub_165E
00001ECC 3A7C 0008                  		movea.w	#8,a5
00001ED0 6100 FDFE                  		bsr.w	NemDec3
00001ED4 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001ED8 6700                       		beq.s	loc_16DC
00001EDA 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001EDE 66EC                       		bne.s	loc_16AA
00001EE0 21C8 F680                  		move.l	a0,($FFFFF680).w
00001EE4 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001EE8 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001EEC 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001EF0 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001EF4 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001EF8 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001EFC                            
00001EFC                            locret_16DA:				; XREF: sub_1642
00001EFC 4E75                       		rts	
00001EFE                            ; ===========================================================================
00001EFE                            
00001EFE                            loc_16DC:				; XREF: sub_165E
00001EFE 41F8 F680                  		lea	($FFFFF680).w,a0
00001F02 7015                       		moveq	#$15,d0
00001F04                            
00001F04                            loc_16E2:				; XREF: sub_165E
00001F04 20E8 0006                  		move.l	6(a0),(a0)+
00001F08 51C8 FFFA                  		dbf	d0,loc_16E2
00001F0C 4E75                       		rts	
00001F0E                            ; End of function sub_165E
00001F0E                            
00001F0E                            ; ---------------------------------------------------------------------------
00001F0E                            ; Subroutine to	execute	the pattern load cue
00001F0E                            ; ---------------------------------------------------------------------------
00001F0E                            
00001F0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F0E                            
00001F0E                            
00001F0E                            RunPLC_ROM:
00001F0E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001F14 D040                       		add.w	d0,d0
00001F16 3031 0000                  		move.w	(a1,d0.w),d0
00001F1A 43F1 0000                  		lea	(a1,d0.w),a1
00001F1E 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001F20                            
00001F20                            RunPLC_Loop:
00001F20 2059                       		movea.l	(a1)+,a0	; get art pointer
00001F22 7000                       		moveq	#0,d0
00001F24 3019                       		move.w	(a1)+,d0	; get VRAM address
00001F26 E588                       		lsl.l	#2,d0		; divide address by $20
00001F28 E448                       		lsr.w	#2,d0
00001F2A 0040 4000                  		ori.w	#$4000,d0
00001F2E 4840                       		swap	d0
00001F30 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001F36 6100 FD0C                  		bsr.w	NemDec		; decompress
00001F3A 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001F3E 4E75                       		rts	
00001F40                            ; End of function RunPLC_ROM
00001F40                            
00001F40                            ; ---------------------------------------------------------------------------
00001F40                            ; Enigma decompression algorithm
00001F40                            ; ---------------------------------------------------------------------------
00001F40                            
00001F40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F40                            
00001F40                            
00001F40                            EniDec:
00001F40 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001F44 3640                       		movea.w	d0,a3
00001F46 1018                       		move.b	(a0)+,d0
00001F48 4880                       		ext.w	d0
00001F4A 3A40                       		movea.w	d0,a5
00001F4C 1818                       		move.b	(a0)+,d4
00001F4E E70C                       		lsl.b	#3,d4
00001F50 3458                       		movea.w	(a0)+,a2
00001F52 D4CB                       		adda.w	a3,a2
00001F54 3858                       		movea.w	(a0)+,a4
00001F56 D8CB                       		adda.w	a3,a4
00001F58 1A18                       		move.b	(a0)+,d5
00001F5A E145                       		asl.w	#8,d5
00001F5C 1A18                       		move.b	(a0)+,d5
00001F5E 7C10                       		moveq	#$10,d6
00001F60                            
00001F60                            loc_173E:				; XREF: loc_1768
00001F60 7007                       		moveq	#7,d0
00001F62 3E06                       		move.w	d6,d7
00001F64 9E40                       		sub.w	d0,d7
00001F66 3205                       		move.w	d5,d1
00001F68 EE69                       		lsr.w	d7,d1
00001F6A 0241 007F                  		andi.w	#$7F,d1
00001F6E 3401                       		move.w	d1,d2
00001F70 0C41 0040                  		cmpi.w	#$40,d1
00001F74 6400                       		bcc.s	loc_1758
00001F76 7006                       		moveq	#6,d0
00001F78 E24A                       		lsr.w	#1,d2
00001F7A                            
00001F7A                            loc_1758:
00001F7A 6100 0000                  		bsr.w	sub_188C
00001F7E 0242 000F                  		andi.w	#$F,d2
00001F82 E849                       		lsr.w	#4,d1
00001F84 D241                       		add.w	d1,d1
00001F86 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001F8A                            ; End of function EniDec
00001F8A                            
00001F8A                            ; ===========================================================================
00001F8A                            
00001F8A                            loc_1768:				; XREF: loc_17B4
00001F8A 32CA                       		move.w	a2,(a1)+
00001F8C 524A                       		addq.w	#1,a2
00001F8E 51CA FFFA                  		dbf	d2,loc_1768
00001F92 60CC                       		bra.s	loc_173E
00001F94                            ; ===========================================================================
00001F94                            
00001F94                            loc_1772:				; XREF: loc_17B4
00001F94 32CC                       		move.w	a4,(a1)+
00001F96 51CA FFFC                  		dbf	d2,loc_1772
00001F9A 60C4                       		bra.s	loc_173E
00001F9C                            ; ===========================================================================
00001F9C                            
00001F9C                            loc_177A:				; XREF: loc_17B4
00001F9C 6100 0000                  		bsr.w	loc_17DC
00001FA0                            
00001FA0                            loc_177E:
00001FA0 32C1                       		move.w	d1,(a1)+
00001FA2 51CA FFFC                  		dbf	d2,loc_177E
00001FA6 60B8                       		bra.s	loc_173E
00001FA8                            ; ===========================================================================
00001FA8                            
00001FA8                            loc_1786:				; XREF: loc_17B4
00001FA8 6100 0000                  		bsr.w	loc_17DC
00001FAC                            
00001FAC                            loc_178A:
00001FAC 32C1                       		move.w	d1,(a1)+
00001FAE 5241                       		addq.w	#1,d1
00001FB0 51CA FFFA                  		dbf	d2,loc_178A
00001FB4 60AA                       		bra.s	loc_173E
00001FB6                            ; ===========================================================================
00001FB6                            
00001FB6                            loc_1794:				; XREF: loc_17B4
00001FB6 6100 0000                  		bsr.w	loc_17DC
00001FBA                            
00001FBA                            loc_1798:
00001FBA 32C1                       		move.w	d1,(a1)+
00001FBC 5341                       		subq.w	#1,d1
00001FBE 51CA FFFA                  		dbf	d2,loc_1798
00001FC2 609C                       		bra.s	loc_173E
00001FC4                            ; ===========================================================================
00001FC4                            
00001FC4                            loc_17A2:				; XREF: loc_17B4
00001FC4 0C42 000F                  		cmpi.w	#$F,d2
00001FC8 6700                       		beq.s	loc_17C4
00001FCA                            
00001FCA                            loc_17A8:
00001FCA 6100 0000                  		bsr.w	loc_17DC
00001FCE 32C1                       		move.w	d1,(a1)+
00001FD0 51CA FFF8                  		dbf	d2,loc_17A8
00001FD4 608A                       		bra.s	loc_173E
00001FD6                            ; ===========================================================================
00001FD6                            
00001FD6                            loc_17B4:				; XREF: EniDec
00001FD6 60B2                       		bra.s	loc_1768
00001FD8                            ; ===========================================================================
00001FD8 60B0                       		bra.s	loc_1768
00001FDA                            ; ===========================================================================
00001FDA 60B8                       		bra.s	loc_1772
00001FDC                            ; ===========================================================================
00001FDC 60B6                       		bra.s	loc_1772
00001FDE                            ; ===========================================================================
00001FDE 60BC                       		bra.s	loc_177A
00001FE0                            ; ===========================================================================
00001FE0 60C6                       		bra.s	loc_1786
00001FE2                            ; ===========================================================================
00001FE2 60D2                       		bra.s	loc_1794
00001FE4                            ; ===========================================================================
00001FE4 60DE                       		bra.s	loc_17A2
00001FE6                            ; ===========================================================================
00001FE6                            
00001FE6                            loc_17C4:				; XREF: loc_17A2
00001FE6 5348                       		subq.w	#1,a0
00001FE8 0C46 0010                  		cmpi.w	#$10,d6
00001FEC 6600                       		bne.s	loc_17CE
00001FEE 5348                       		subq.w	#1,a0
00001FF0                            
00001FF0                            loc_17CE:
00001FF0 3008                       		move.w	a0,d0
00001FF2 E248                       		lsr.w	#1,d0
00001FF4 6400                       		bcc.s	loc_17D6
00001FF6 5248                       		addq.w	#1,a0
00001FF8                            
00001FF8                            loc_17D6:
00001FF8 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001FFC 4E75                       		rts	
00001FFE                            ; ===========================================================================
00001FFE                            
00001FFE                            loc_17DC:				; XREF: loc_17A2
00001FFE 360B                       		move.w	a3,d3
00002000 1204                       		move.b	d4,d1
00002002 D201                       		add.b	d1,d1
00002004 6400                       		bcc.s	loc_17EE
00002006 5346                       		subq.w	#1,d6
00002008 0D05                       		btst	d6,d5
0000200A 6700                       		beq.s	loc_17EE
0000200C 0043 8000                  		ori.w	#-$8000,d3
00002010                            
00002010                            loc_17EE:
00002010 D201                       		add.b	d1,d1
00002012 6400                       		bcc.s	loc_17FC
00002014 5346                       		subq.w	#1,d6
00002016 0D05                       		btst	d6,d5
00002018 6700                       		beq.s	loc_17FC
0000201A 0643 4000                  		addi.w	#$4000,d3
0000201E                            
0000201E                            loc_17FC:
0000201E D201                       		add.b	d1,d1
00002020 6400                       		bcc.s	loc_180A
00002022 5346                       		subq.w	#1,d6
00002024 0D05                       		btst	d6,d5
00002026 6700                       		beq.s	loc_180A
00002028 0643 2000                  		addi.w	#$2000,d3
0000202C                            
0000202C                            loc_180A:
0000202C D201                       		add.b	d1,d1
0000202E 6400                       		bcc.s	loc_1818
00002030 5346                       		subq.w	#1,d6
00002032 0D05                       		btst	d6,d5
00002034 6700                       		beq.s	loc_1818
00002036 0043 1000                  		ori.w	#$1000,d3
0000203A                            
0000203A                            loc_1818:
0000203A D201                       		add.b	d1,d1
0000203C 6400                       		bcc.s	loc_1826
0000203E 5346                       		subq.w	#1,d6
00002040 0D05                       		btst	d6,d5
00002042 6700                       		beq.s	loc_1826
00002044 0043 0800                  		ori.w	#$800,d3
00002048                            
00002048                            loc_1826:
00002048 3205                       		move.w	d5,d1
0000204A 3E06                       		move.w	d6,d7
0000204C 9E4D                       		sub.w	a5,d7
0000204E 6400                       		bcc.s	loc_1856
00002050 3C07                       		move.w	d7,d6
00002052 0646 0010                  		addi.w	#$10,d6
00002056 4447                       		neg.w	d7
00002058 EF69                       		lsl.w	d7,d1
0000205A 1A10                       		move.b	(a0),d5
0000205C EF3D                       		rol.b	d7,d5
0000205E DE47                       		add.w	d7,d7
00002060 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00002064 D245                       		add.w	d5,d1
00002066                            
00002066                            loc_1844:				; XREF: loc_1868
00002066 300D                       		move.w	a5,d0
00002068 D040                       		add.w	d0,d0
0000206A C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000206E D243                       		add.w	d3,d1
00002070 1A18                       		move.b	(a0)+,d5
00002072 E14D                       		lsl.w	#8,d5
00002074 1A18                       		move.b	(a0)+,d5
00002076 4E75                       		rts	
00002078                            ; ===========================================================================
00002078                            
00002078                            loc_1856:				; XREF: loc_1826
00002078 6700                       		beq.s	loc_1868
0000207A EE69                       		lsr.w	d7,d1
0000207C 300D                       		move.w	a5,d0
0000207E D040                       		add.w	d0,d0
00002080 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00002084 D243                       		add.w	d3,d1
00002086 300D                       		move.w	a5,d0
00002088 6000                       		bra.s	sub_188C
0000208A                            ; ===========================================================================
0000208A                            
0000208A                            loc_1868:				; XREF: loc_1856
0000208A 7C10                       		moveq	#$10,d6
0000208C                            
0000208C                            loc_186A:
0000208C 60D8                       		bra.s	loc_1844
0000208E                            ; ===========================================================================
0000208E 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
000020A4 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
000020AE                            
000020AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020AE                            
000020AE                            
000020AE                            sub_188C:				; XREF: EniDec
000020AE 9C40                       		sub.w	d0,d6
000020B0 0C46 0009                  		cmpi.w	#9,d6
000020B4 6400                       		bcc.s	locret_189A
000020B6 5046                       		addq.w	#8,d6
000020B8 E145                       		asl.w	#8,d5
000020BA 1A18                       		move.b	(a0)+,d5
000020BC                            
000020BC                            locret_189A:
000020BC 4E75                       		rts	
000020BE                            ; End of function sub_188C
000020BE                            
000020BE                            ; ---------------------------------------------------------------------------
000020BE                            ; Kosinski decompression algorithm
000020BE                            ; ---------------------------------------------------------------------------
000020BE                            
000020BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BE                            
000020BE                            
000020BE                            KosDec:
000020BE                            
000020BE =FFFFFFFE                  var_2		= -2
000020BE =FFFFFFFF                  var_1		= -1
000020BE                            
000020BE 558F                       		subq.l	#2,sp
000020C0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000020C4 1E98                       		move.b	(a0)+,(sp)
000020C6 3A17                       		move.w	(sp),d5
000020C8 780F                       		moveq	#$F,d4
000020CA                            
000020CA                            loc_18A8:
000020CA E24D                       		lsr.w	#1,d5
000020CC 40C6                       		move	sr,d6
000020CE 51CC 0000                  		dbf	d4,loc_18BA
000020D2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000020D6 1E98                       		move.b	(a0)+,(sp)
000020D8 3A17                       		move.w	(sp),d5
000020DA 780F                       		moveq	#$F,d4
000020DC                            
000020DC                            loc_18BA:
000020DC 44C6                       		move	d6,ccr
000020DE 6400                       		bcc.s	loc_18C2
000020E0 12D8                       		move.b	(a0)+,(a1)+
000020E2 60E6                       		bra.s	loc_18A8
000020E4                            ; ===========================================================================
000020E4                            
000020E4                            loc_18C2:				; XREF: KosDec
000020E4 7600                       		moveq	#0,d3
000020E6 E24D                       		lsr.w	#1,d5
000020E8 40C6                       		move	sr,d6
000020EA 51CC 0000                  		dbf	d4,loc_18D6
000020EE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000020F2 1E98                       		move.b	(a0)+,(sp)
000020F4 3A17                       		move.w	(sp),d5
000020F6 780F                       		moveq	#$F,d4
000020F8                            
000020F8                            loc_18D6:
000020F8 44C6                       		move	d6,ccr
000020FA 6500                       		bcs.s	loc_1906
000020FC E24D                       		lsr.w	#1,d5
000020FE 51CC 0000                  		dbf	d4,loc_18EA
00002102 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00002106 1E98                       		move.b	(a0)+,(sp)
00002108 3A17                       		move.w	(sp),d5
0000210A 780F                       		moveq	#$F,d4
0000210C                            
0000210C                            loc_18EA:
0000210C E353                       		roxl.w	#1,d3
0000210E E24D                       		lsr.w	#1,d5
00002110 51CC 0000                  		dbf	d4,loc_18FC
00002114 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00002118 1E98                       		move.b	(a0)+,(sp)
0000211A 3A17                       		move.w	(sp),d5
0000211C 780F                       		moveq	#$F,d4
0000211E                            
0000211E                            loc_18FC:
0000211E E353                       		roxl.w	#1,d3
00002120 5243                       		addq.w	#1,d3
00002122 74FF                       		moveq	#-1,d2
00002124 1418                       		move.b	(a0)+,d2
00002126 6000                       		bra.s	loc_191C
00002128                            ; ===========================================================================
00002128                            
00002128                            loc_1906:				; XREF: loc_18C2
00002128 1018                       		move.b	(a0)+,d0
0000212A 1218                       		move.b	(a0)+,d1
0000212C 74FF                       		moveq	#-1,d2
0000212E 1401                       		move.b	d1,d2
00002130 EB4A                       		lsl.w	#5,d2
00002132 1400                       		move.b	d0,d2
00002134 0241 0007                  		andi.w	#7,d1
00002138 6700                       		beq.s	loc_1928
0000213A 1601                       		move.b	d1,d3
0000213C 5243                       		addq.w	#1,d3
0000213E                            
0000213E                            loc_191C:
0000213E 1031 2000                  		move.b	(a1,d2.w),d0
00002142 12C0                       		move.b	d0,(a1)+
00002144 51CB FFF8                  		dbf	d3,loc_191C
00002148 6080                       		bra.s	loc_18A8
0000214A                            ; ===========================================================================
0000214A                            
0000214A                            loc_1928:				; XREF: loc_1906
0000214A 1218                       		move.b	(a0)+,d1
0000214C 6700                       		beq.s	loc_1938
0000214E 0C01 0001                  		cmpi.b	#1,d1
00002152 6700 FF76                  		beq.w	loc_18A8
00002156 1601                       		move.b	d1,d3
00002158 60E4                       		bra.s	loc_191C
0000215A                            ; ===========================================================================
0000215A                            
0000215A                            loc_1938:				; XREF: loc_1928
0000215A 548F                       		addq.l	#2,sp
0000215C 4E75                       		rts	
0000215E                            ; End of function KosDec
0000215E                            
0000215E                            ; ---------------------------------------------------------------------------
0000215E                            ; Pallet cycling routine loading subroutine
0000215E                            ; ---------------------------------------------------------------------------
0000215E                            
0000215E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000215E                            
0000215E                            
0000215E                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000215E 7400                       		moveq	#0,d2
00002160 7000                       		moveq	#0,d0
00002162 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00002166 D040                       		add.w	d0,d0		; multiply by 2
00002168 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
0000216C 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00002170                            ; End of function PalCycle_Load
00002170                            
00002170                            ; ===========================================================================
00002170                            ; ---------------------------------------------------------------------------
00002170                            ; Pallet cycling routines
00002170                            ; ---------------------------------------------------------------------------
00002170 0000                       PalCycle:	dc.w locret_1990-PalCycle
00002172 0000                       		dc.w locret_1990-PalCycle
00002174 0000                       		dc.w PalCycle_MZ-PalCycle
00002176 0000                       		dc.w PalCycle_SLZ-PalCycle
00002178 0000                       		dc.w locret_1990-PalCycle
0000217A 0000                       		dc.w locret_1990-PalCycle
0000217C 0000                       		dc.w PalCycle_GHZ-PalCycle
0000217E 0000                       		dc.w PalCycle_ABZ-PalCycle
00002180 0000                       		dc.w PalCycle_IC-PalCycle
00002182 0000                       		dc.w PalCycle_SZ-PalCycle
00002184                            
00002184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002184                            
00002184                            
00002184                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002184                             
00002184                             
00002184                            PalCycle_IC:				; XREF: PalCycle
00002184 4E75                       		rts	
00002186                            ; End of function PalCycle_IC
00002186                            
00002186                            PalCycle_SZ:				; XREF: PalCycle
00002186 4E75                       		rts	
00002188                            ; End of function PalCycle_SZ
00002188                            
00002188                            PalCycle_ABZ:				; XREF: PalCycle
00002188 4E75                       		rts	
0000218A                            ; End of function PalCycle_ABZ
0000218A                            
0000218A                            PalCycle_Title:				; XREF: TitleScreen
0000218A 4E75                       		rts
0000218C                            ; ===========================================================================
0000218C                            
0000218C                            PalCycle_GHZ:				; XREF: PalCycle
0000218C 0C38 0004 FF94             		cmpi.b	#4,($FFFFFF94).w
00002192 67F6                       		beq.s	PalCycle_Title
00002194 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000219A                            
0000219A                            loc_196A:				; XREF: PalCycle_Title
0000219A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000219E 6A00                       		bpl.s	locret_1990
000021A0 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000021A6 3038 F632                  		move.w	($FFFFF632).w,d0
000021AA 5278 F632                  		addq.w	#1,($FFFFF632).w
000021AE 0240 0003                  		andi.w	#3,d0
000021B2 E748                       		lsl.w	#3,d0
000021B4 43F8 FB50                  		lea	($FFFFFB50).w,a1
000021B8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000021BC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000021C0                            
000021C0                            locret_1990:
000021C0 4E75                       		rts	
000021C2                            ; End of function PalCycle_Title
000021C2                            
000021C2                            
000021C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021C2                            
000021C2                            
000021C2                            PalCycle_LZ:				; XREF: PalCycle
000021C2 5378 F634                  		subq.w	#1,($FFFFF634).w
000021C6 6A00                       		bpl.s	loc_19D8
000021C8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
000021CE 3038 F632                  		move.w	($FFFFF632).w,d0
000021D2 5278 F632                  		addq.w	#1,($FFFFF632).w
000021D6 0240 0003                  		andi.w	#3,d0
000021DA E748                       		lsl.w	#3,d0
000021DC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000021E2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000021E8 6600                       		bne.s	loc_19C0
000021EA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000021F0                            
000021F0                            loc_19C0:
000021F0 43F8 FB56                  		lea	($FFFFFB56).w,a1
000021F4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000021F8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000021FC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00002200 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002204 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00002208                            
00002208                            loc_19D8:
00002208 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000220C 0240 0007                  		andi.w	#7,d0
00002210 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00002214 6700                       		beq.s	locret_1A3A
00002216 7201                       		moveq	#1,d1
00002218 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0000221C 6700                       		beq.s	loc_19F0
0000221E 4441                       		neg.w	d1
00002220                            
00002220                            loc_19F0:
00002220 3038 F650                  		move.w	($FFFFF650).w,d0
00002224 0240 0003                  		andi.w	#3,d0
00002228 D041                       		add.w	d1,d0
0000222A 0C40 0003                  		cmpi.w	#3,d0
0000222E 6500                       		bcs.s	loc_1A0A
00002230 3200                       		move.w	d0,d1
00002232 7000                       		moveq	#0,d0
00002234 4A41                       		tst.w	d1
00002236 6A00                       		bpl.s	loc_1A0A
00002238 7002                       		moveq	#2,d0
0000223A                            
0000223A                            loc_1A0A:
0000223A 31C0 F650                  		move.w	d0,($FFFFF650).w
0000223E D040                       		add.w	d0,d0
00002240 3200                       		move.w	d0,d1
00002242 D040                       		add.w	d0,d0
00002244 D041                       		add.w	d1,d0
00002246 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
0000224C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00002250 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002254 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00002258 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
0000225E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00002262 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002266 32B0 0004                  		move.w	4(a0,d0.w),(a1)
0000226A                            
0000226A                            locret_1A3A:
0000226A 4E75                       		rts	
0000226C                            ; End of function PalCycle_LZ
0000226C                            
0000226C                            ; ===========================================================================
0000226C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00002274                            ; ===========================================================================
00002274                            
00002274                            PalCycle_MZ:				; XREF: PalCycle
00002274 4E75                       		rts	
00002276                            
00002276                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002276                            
00002276                            
00002276                            PalCycle_SLZ:
00002276 5378 F634                  		subq.w	#1,($FFFFF634).w
0000227A 6A00 0000                  		bpl.w	loc_1C8C
0000227E 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00002284 41F9 0000 0000             		lea	(word_1F8E).l,a0
0000228A 3038 F632                  		move.w	($FFFFF632).w,d0
0000228E 5478 F632                  		addq.w	#2,($FFFFF632).w
00002292 0C78 0006 F632             		cmpi.w	#6,($FFFFF632).w
00002298 6500                       		bcs.s	loc_1C18
0000229A 31FC 0000 F632             		move.w	#0,($FFFFF632).w
000022A0                            
000022A0                            loc_1C18:				; CODE XREF: ROM:00001C10j
000022A0 41F0 0000                  		lea	(a0,d0.w),a0
000022A4 43F8 FB00                  		lea	($FFFFFB00).w,a1
000022A8 3350 004A                  		move.w	0(a0),$4A(a1)
000022AC 3368 0006 004C             		move.w	6(a0),$4C(a1)
000022B2 3368 000C 004E             		move.w	$C(a0),$4E(a1)
000022B8 3368 0012 0056             		move.w	$12(a0),$56(a1)
000022BE 3368 0018 0058             		move.w	$18(a0),$58(a1)
000022C4 3368 001E 005A             		move.w	$1E(a0),$5A(a1)
000022CA 41F9 0000 0000             		lea	(word_1FB2).l,a0
000022D0 41F0 0000                  		lea	(a0,d0.w),a0
000022D4 3350 0064                  		move.w	0(a0),$64(a1)
000022D8 3368 0006 0066             		move.w	6(a0),$66(a1)
000022DE 3368 000C 0068             		move.w	$C(a0),$68(a1)
000022E4 41F9 0000 0000             		lea	(word_1FC4).l,a0
000022EA 3038 F650                  		move.w	($FFFFF650).w,d0
000022EE 5478 F650                  		addq.w	#2,($FFFFF650).w
000022F2 0C78 0024 F650             		cmpi.w	#$24,($FFFFF650).w ; '$'
000022F8 6500                       		bcs.s	loc_1C7C
000022FA 31FC 0000 F650             		move.w	#0,($FFFFF650).w
00002300                            
00002300                            loc_1C7C:				; CODE XREF: ROM:00001C74j
00002300 43F8 FB72                  		lea	($FFFFFB72).w,a1
00002304 32F0 0004                  		move.w	4(a0,d0.w),(a1)+
00002308 32F0 0002                  		move.w	2(a0,d0.w),(a1)+
0000230C 32F0 0000                  		move.w	(a0,d0.w),(a1)+
00002310                            
00002310                            loc_1C8C:				; CODE XREF: ROM:00001BF2j
00002310 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00002314 6700 0000                  		beq.w	locret_1D14
00002318 5378 F666                  		subq.w	#1,($FFFFF666).w
0000231C 6A00 0000                  		bpl.w	locret_1D14
00002320 31FC 0003 F666             		move.w	#3,($FFFFF666).w
00002326 3038 F652                  		move.w	($FFFFF652).w,d0
0000232A 5478 F652                  		addq.w	#2,($FFFFF652).w
0000232E 0C78 0006 F652             		cmpi.w	#6,($FFFFF652).w
00002334 6500                       		bcs.s	loc_1CB8
00002336 31FC 0000 F652             		move.w	#0,($FFFFF652).w
0000233C                            
0000233C                            loc_1CB8:				; CODE XREF: ROM:00001CB0j
0000233C 41F9 0000 0000             		lea	(word_1FEC).l,a0
00002342 41F0 0000                  		lea	(a0,d0.w),a0
00002346 43F8 FB00                  		lea	($FFFFFB00).w,a1
0000234A 3350 0024                  		move.w	0(a0),$24(a1)
0000234E 3368 0006 0026             		move.w	6(a0),$26(a1)
00002354 3368 000C 0028             		move.w	$C(a0),$28(a1)
0000235A 41F9 0000 0000             		lea	(word_1FFE).l,a0
00002360 3038 F654                  		move.w	($FFFFF654).w,d0
00002364 5478 F654                  		addq.w	#2,($FFFFF654).w
00002368 0C78 0014 F654             		cmpi.w	#$14,($FFFFF654).w
0000236E 6500                       		bcs.s	loc_1CF4
00002370 31FC 0000 F654             		move.w	#0,($FFFFF654).w
00002376                            
00002376                            loc_1CF4:				; CODE XREF: ROM:00001CECj
00002376 3370 0000 003C             		move.w	(a0,d0.w),$3C(a1)
0000237C 41F9 0000 0000             		lea	(word_2012).l,a0
00002382 3038 F656                  		move.w	($FFFFF656).w,d0
00002386 5478 F656                  		addq.w	#2,($FFFFF656).w
0000238A 0278 000E F656             		andi.w	#$E,($FFFFF656).w
00002390 3370 0000 003E             		move.w	(a0,d0.w),$3E(a1)
00002396                            
00002396                            locret_1D14:				; CODE XREF: ROM:00001C90j
00002396                            					; ROM:00001C98j
00002396 4E75                       		rts	
00002398                            ; End of function PalCycle_SLZ
00002398                            
00002398                            
00002398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002398                            
00002398                            
00002398                            PalCycle_SYZ:				; XREF: PalCycle
00002398 5378 F634                  		subq.w	#1,($FFFFF634).w
0000239C 6A00                       		bpl.s	locret_1AC6
0000239E 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000023A4 3038 F632                  		move.w	($FFFFF632).w,d0
000023A8 5278 F632                  		addq.w	#1,($FFFFF632).w
000023AC 0240 0003                  		andi.w	#3,d0
000023B0 E548                       		lsl.w	#2,d0
000023B2 3200                       		move.w	d0,d1
000023B4 D040                       		add.w	d0,d0
000023B6 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
000023BC 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
000023C0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000023C4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000023C8 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
000023CE 43F8 FB76                  		lea	($FFFFFB76).w,a1
000023D2 32B0 1000                  		move.w	(a0,d1.w),(a1)
000023D6 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
000023DC                            
000023DC                            locret_1AC6:
000023DC 4E75                       		rts	
000023DE                            ; End of function PalCycle_SYZ
000023DE                            
000023DE                            ; ===========================================================================
000023DE                            Pal_TitleCyc:	incbin	pallet\c_title.bin
000023FE                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
0000241E                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin		; waterfalls pallet
0000243E                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin		; conveyor belt pallet
00002450                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin		; conveyor belt (underwater) pallet
00002462                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin		; waterfalls pallet
000024CA                            word_1F8E: 	incbin	pallet\c_slz_1.bin		; Casino Night Cycles 1 & 2
000024EE                            word_1FB2: 	incbin	pallet\c_slz_2.bin		; Casino Night Cycle 3
00002500                            word_1FC4: 	incbin	pallet\c_slz_3.bin		; Casino Night Cycle 4
00002528                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00002548                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00002558                            
00002558                            Pal_SBZCycList:
00002558                            	include "_inc\SBZ pallet script 1.asm"
00002558                            ; ---------------------------------------------------------------------------
00002558                            ; Scrap Brain Zone 1 pallet cycling script
00002558                            ; ---------------------------------------------------------------------------
00002558 0008                       	dc.w 8			; number of entries - 1
0000255A 0708                       	dc.b 7,	8		; duration in frames, number of	colours
0000255C 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
0000255E FB50                       	dc.w $FB50		; RAM address
00002560 0D08                       	dc.b $D, 8
00002562 0000                       	dc.w Pal_SBZCyc2
00002564 FB52                       	dc.w $FB52
00002566 0E08                       	dc.b $E, 8
00002568 0000                       	dc.w Pal_SBZCyc3
0000256A FB6E                       	dc.w $FB6E
0000256C 0B08                       	dc.b $B, 8
0000256E 0000                       	dc.w Pal_SBZCyc5
00002570 FB70                       	dc.w $FB70
00002572 0708                       	dc.b 7,	8
00002574 0000                       	dc.w Pal_SBZCyc6
00002576 FB72                       	dc.w $FB72
00002578 1C10                       	dc.b $1C, $10
0000257A 0000                       	dc.w Pal_SBZCyc7
0000257C FB7E                       	dc.w $FB7E
0000257E 0303                       	dc.b 3,	3
00002580 0000                       	dc.w Pal_SBZCyc8
00002582 FB78                       	dc.w $FB78
00002584 0303                       	dc.b 3,	3
00002586 0000                       	dc.w Pal_SBZCyc8+2
00002588 FB7A                       	dc.w $FB7A
0000258A 0303                       	dc.b 3,	3
0000258C 0000                       	dc.w Pal_SBZCyc8+4
0000258E FB7C                       	dc.w $FB7C
00002590                            	even
00002590                            	even
00002590                            
00002590                            Pal_SBZCycList2:
00002590                            	include "_inc\SBZ pallet script 2.asm"
00002590                            ; ---------------------------------------------------------------------------
00002590                            ; Scrap Brain Zone 2 pallet cycling script
00002590                            ; ---------------------------------------------------------------------------
00002590 0006                       	dc.w 6
00002592 0708                       	dc.b 7,	8
00002594 0000                       	dc.w Pal_SBZCyc1
00002596 FB50                       	dc.w $FB50
00002598 0D08                       	dc.b $D, 8
0000259A 0000                       	dc.w Pal_SBZCyc2
0000259C FB52                       	dc.w $FB52
0000259E 0908                       	dc.b 9,	8
000025A0 0000                       	dc.w Pal_SBZCyc9
000025A2 FB70                       	dc.w $FB70
000025A4 0708                       	dc.b 7,	8
000025A6 0000                       	dc.w Pal_SBZCyc6
000025A8 FB72                       	dc.w $FB72
000025AA 0303                       	dc.b 3,	3
000025AC 0000                       	dc.w Pal_SBZCyc8
000025AE FB78                       	dc.w $FB78
000025B0 0303                       	dc.b 3,	3
000025B2 0000                       	dc.w Pal_SBZCyc8+2
000025B4 FB7A                       	dc.w $FB7A
000025B6 0303                       	dc.b 3,	3
000025B8 0000                       	dc.w Pal_SBZCyc8+4
000025BA FB7C                       	dc.w $FB7C
000025BC                            	even
000025BC                            	even
000025BC                            
000025BC                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
000025CC                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
000025DC                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
000025EC                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
000025F8                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00002608                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00002618                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00002638                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00002642                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00002652                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
0000265E                            word_1FEC:	incbin	pallet\unk_1FEC.bin
00002670                            word_1FFE:	incbin	pallet\unk_1FFE.bin
00002684                            word_2012:	incbin	pallet\unk_2012.bin
00002694                            ; ---------------------------------------------------------------------------
00002694                            ; Subroutine to	fade out and fade in
00002694                            ; ---------------------------------------------------------------------------
00002694                            
00002694                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002694                            
00002694                            
00002694                            Pal_FadeTo:
00002694 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000269A                            
0000269A                            Pal_FadeTo2:
0000269A 7000                       		moveq	#0,d0
0000269C 41F8 FB00                  		lea	($FFFFFB00).w,a0
000026A0 1038 F626                  		move.b	($FFFFF626).w,d0
000026A4 D0C0                       		adda.w	d0,a0
000026A6 7200                       		moveq	#0,d1
000026A8 1038 F627                  		move.b	($FFFFF627).w,d0
000026AC                            
000026AC                            Pal_ToBlack:
000026AC 30C1                       		move.w	d1,(a0)+
000026AE 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
000026B2                            
000026B2 383C 0015                  		move.w	#$15,d4
000026B6                            
000026B6                            loc_1DCE:
000026B6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000026BC 6100 0000                  		bsr.w	DelayProgram
000026C0 6100                       		bsr.s	Pal_FadeIn
000026C2 6100 F74A                  		bsr.w	RunPLC_RAM
000026C6 51CC FFEE                  		dbf	d4,loc_1DCE
000026CA 4E75                       		rts	
000026CC                            ; End of function Pal_FadeTo
000026CC                            
000026CC                            ; ---------------------------------------------------------------------------
000026CC                            ; Pallet fade-in subroutine
000026CC                            ; ---------------------------------------------------------------------------
000026CC                            
000026CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000026CC                            
000026CC                            
000026CC                            Pal_FadeIn:				; XREF: Pal_FadeTo
000026CC 7000                       		moveq	#0,d0
000026CE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000026D2 43F8 FB80                  		lea	($FFFFFB80).w,a1
000026D6 1038 F626                  		move.b	($FFFFF626).w,d0
000026DA D0C0                       		adda.w	d0,a0
000026DC D2C0                       		adda.w	d0,a1
000026DE 1038 F627                  		move.b	($FFFFF627).w,d0
000026E2                            
000026E2                            loc_1DFA:
000026E2 6100                       		bsr.s	Pal_AddColor
000026E4 51C8 FFFC                  		dbf	d0,loc_1DFA
000026E8                            ;		cmpi.b	#1,($FFFFFE10).w
000026E8                            ;		bne.s	locret_1E24
000026E8 4A38 FFBC                  		tst.b	(water_flag).w
000026EC 6700                       		beq.s	locret_1E24
000026EE 7000                       		moveq	#0,d0
000026F0 41F8 FA80                  		lea	($FFFFFA80).w,a0
000026F4 43F8 FA00                  		lea	($FFFFFA00).w,a1
000026F8 1038 F626                  		move.b	($FFFFF626).w,d0
000026FC D0C0                       		adda.w	d0,a0
000026FE D2C0                       		adda.w	d0,a1
00002700 1038 F627                  		move.b	($FFFFF627).w,d0
00002704                            
00002704                            loc_1E1E:
00002704 6100                       		bsr.s	Pal_AddColor
00002706 51C8 FFFC                  		dbf	d0,loc_1E1E
0000270A                            
0000270A                            locret_1E24:
0000270A 4E75                       		rts	
0000270C                            ; End of function Pal_FadeIn
0000270C                            
0000270C                            
0000270C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000270C                            
0000270C                            
0000270C                            Pal_AddColor:				; XREF: Pal_FadeIn
0000270C 3419                       		move.w	(a1)+,d2
0000270E 3610                       		move.w	(a0),d3
00002710 B642                       		cmp.w	d2,d3
00002712 6700                       		beq.s	loc_1E4E
00002714 3203                       		move.w	d3,d1
00002716 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000271A B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000271C 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
0000271E 30C1                       		move.w	d1,(a0)+	; update pallet
00002720 4E75                       		rts	
00002722                            ; ===========================================================================
00002722                            
00002722                            Pal_AddGreen:				; XREF: Pal_AddColor
00002722 3203                       		move.w	d3,d1
00002724 0641 0020                  		addi.w	#$20,d1		; increase green value
00002728 B242                       		cmp.w	d2,d1
0000272A 6200                       		bhi.s	Pal_AddRed
0000272C 30C1                       		move.w	d1,(a0)+	; update pallet
0000272E 4E75                       		rts	
00002730                            ; ===========================================================================
00002730                            
00002730                            Pal_AddRed:				; XREF: Pal_AddGreen
00002730 5458                       		addq.w	#2,(a0)+	; increase red value
00002732 4E75                       		rts	
00002734                            ; ===========================================================================
00002734                            
00002734                            loc_1E4E:				; XREF: Pal_AddColor
00002734 5448                       		addq.w	#2,a0
00002736 4E75                       		rts	
00002738                            ; End of function Pal_AddColor
00002738                            
00002738                            
00002738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002738                            
00002738                            
00002738                            Pal_FadeFrom:
00002738 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000273E 383C 0015                  		move.w	#$15,d4
00002742                            
00002742                            loc_1E5C:
00002742 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002748 6100 0000                  		bsr.w	DelayProgram
0000274C 6100                       		bsr.s	Pal_FadeOut
0000274E 6100 F6BE                  		bsr.w	RunPLC_RAM
00002752 51CC FFEE                  		dbf	d4,loc_1E5C
00002756 4E75                       		rts	
00002758                            ; End of function Pal_FadeFrom
00002758                            
00002758                            ; ---------------------------------------------------------------------------
00002758                            ; Pallet fade-out subroutine
00002758                            ; ---------------------------------------------------------------------------
00002758                            
00002758                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002758                            
00002758                            
00002758                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002758 7000                       		moveq	#0,d0
0000275A 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000275E 1038 F626                  		move.b	($FFFFF626).w,d0
00002762 D0C0                       		adda.w	d0,a0
00002764 1038 F627                  		move.b	($FFFFF627).w,d0
00002768                            
00002768                            loc_1E82:
00002768 6100                       		bsr.s	Pal_DecColor
0000276A 51C8 FFFC                  		dbf	d0,loc_1E82
0000276E                            
0000276E 7000                       		moveq	#0,d0
00002770 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002774 1038 F626                  		move.b	($FFFFF626).w,d0
00002778 D0C0                       		adda.w	d0,a0
0000277A 1038 F627                  		move.b	($FFFFF627).w,d0
0000277E                            
0000277E                            loc_1E98:
0000277E 6100                       		bsr.s	Pal_DecColor
00002780 51C8 FFFC                  		dbf	d0,loc_1E98
00002784 4E75                       		rts	
00002786                            ; End of function Pal_FadeOut
00002786                            
00002786                            
00002786                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002786                            
00002786                            
00002786                            Pal_DecColor:				; XREF: Pal_FadeOut
00002786 3410                       		move.w	(a0),d2
00002788 6700                       		beq.s	loc_1ECC
0000278A 3202                       		move.w	d2,d1
0000278C 0241 000E                  		andi.w	#$E,d1
00002790 6700                       		beq.s	Pal_DecGreen
00002792 5558                       		subq.w	#2,(a0)+	; decrease red value
00002794 4E75                       		rts	
00002796                            ; ===========================================================================
00002796                            
00002796                            Pal_DecGreen:				; XREF: Pal_DecColor
00002796 3202                       		move.w	d2,d1
00002798 0241 00E0                  		andi.w	#$E0,d1
0000279C 6700                       		beq.s	Pal_DecBlue
0000279E 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000027A2 4E75                       		rts	
000027A4                            ; ===========================================================================
000027A4                            
000027A4                            Pal_DecBlue:				; XREF: Pal_DecGreen
000027A4 3202                       		move.w	d2,d1
000027A6 0241 0E00                  		andi.w	#$E00,d1
000027AA 6700                       		beq.s	loc_1ECC
000027AC 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000027B0 4E75                       		rts	
000027B2                            ; ===========================================================================
000027B2                            
000027B2                            loc_1ECC:				; XREF: Pal_DecColor
000027B2 5448                       		addq.w	#2,a0
000027B4 4E75                       		rts	
000027B6                            ; End of function Pal_DecColor
000027B6                            
000027B6                            ; ---------------------------------------------------------------------------
000027B6                            ; Subroutine to	fill the pallet	with white (special stage)
000027B6                            ; ---------------------------------------------------------------------------
000027B6                            
000027B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000027B6                            
000027B6                            
000027B6                            Pal_MakeWhite:				; XREF: SpecialStage
000027B6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000027BC 7000                       		moveq	#0,d0
000027BE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000027C2 1038 F626                  		move.b	($FFFFF626).w,d0
000027C6 D0C0                       		adda.w	d0,a0
000027C8 323C 0EEE                  		move.w	#$EEE,d1
000027CC 1038 F627                  		move.b	($FFFFF627).w,d0
000027D0                            
000027D0                            PalWhite_Loop:
000027D0 30C1                       		move.w	d1,(a0)+
000027D2 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000027D6 383C 0015                  		move.w	#$15,d4
000027DA                            
000027DA                            loc_1EF4:
000027DA 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000027E0 6100 0000                  		bsr.w	DelayProgram
000027E4 6100                       		bsr.s	Pal_WhiteToBlack
000027E6 6100 F626                  		bsr.w	RunPLC_RAM
000027EA 51CC FFEE                  		dbf	d4,loc_1EF4
000027EE 4E75                       		rts	
000027F0                            ; End of function Pal_MakeWhite
000027F0                            
000027F0                            
000027F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000027F0                            
000027F0                            
000027F0                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000027F0 7000                       		moveq	#0,d0
000027F2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000027F6 43F8 FB80                  		lea	($FFFFFB80).w,a1
000027FA 1038 F626                  		move.b	($FFFFF626).w,d0
000027FE D0C0                       		adda.w	d0,a0
00002800 D2C0                       		adda.w	d0,a1
00002802 1038 F627                  		move.b	($FFFFF627).w,d0
00002806                            
00002806                            loc_1F20:
00002806 6100                       		bsr.s	Pal_DecColor2
00002808 51C8 FFFC                  		dbf	d0,loc_1F20
0000280C                            
0000280C                            ;		cmpi.b	#1,($FFFFFE10).w
0000280C                            ;		bne.s	locret_1F4A
0000280C 4A38 FFBC                  		tst.b	(water_flag).w
00002810 6700                       		beq.s	locret_1F4A
00002812 7000                       		moveq	#0,d0
00002814 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002818 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000281C 1038 F626                  		move.b	($FFFFF626).w,d0
00002820 D0C0                       		adda.w	d0,a0
00002822 D2C0                       		adda.w	d0,a1
00002824 1038 F627                  		move.b	($FFFFF627).w,d0
00002828                            
00002828                            loc_1F44:
00002828 6100                       		bsr.s	Pal_DecColor2
0000282A 51C8 FFFC                  		dbf	d0,loc_1F44
0000282E                            
0000282E                            locret_1F4A:
0000282E 4E75                       		rts	
00002830                            ; End of function Pal_WhiteToBlack
00002830                            
00002830                            
00002830                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002830                            
00002830                            
00002830                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002830 3419                       		move.w	(a1)+,d2
00002832 3610                       		move.w	(a0),d3
00002834 B642                       		cmp.w	d2,d3
00002836 6700                       		beq.s	loc_1F78
00002838 3203                       		move.w	d3,d1
0000283A 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000283E 6500                       		bcs.s	loc_1F64
00002840 B242                       		cmp.w	d2,d1
00002842 6500                       		bcs.s	loc_1F64
00002844 30C1                       		move.w	d1,(a0)+
00002846 4E75                       		rts	
00002848                            ; ===========================================================================
00002848                            
00002848                            loc_1F64:				; XREF: Pal_DecColor2
00002848 3203                       		move.w	d3,d1
0000284A 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000284E 6500                       		bcs.s	loc_1F74
00002850 B242                       		cmp.w	d2,d1
00002852 6500                       		bcs.s	loc_1F74
00002854 30C1                       		move.w	d1,(a0)+
00002856 4E75                       		rts	
00002858                            ; ===========================================================================
00002858                            
00002858                            loc_1F74:				; XREF: loc_1F64
00002858 5558                       		subq.w	#2,(a0)+	; decrease red value
0000285A 4E75                       		rts	
0000285C                            ; ===========================================================================
0000285C                            
0000285C                            loc_1F78:				; XREF: Pal_DecColor2
0000285C 5448                       		addq.w	#2,a0
0000285E 4E75                       		rts	
00002860                            ; End of function Pal_DecColor2
00002860                            
00002860                            ; ---------------------------------------------------------------------------
00002860                            ; Subroutine to	make a white flash when	you enter a special stage
00002860                            ; ---------------------------------------------------------------------------
00002860                            
00002860                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002860                            
00002860                            
00002860                            Pal_MakeFlash:				; XREF: SpecialStage
00002860 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002866 383C 0015                  		move.w	#$15,d4
0000286A                            
0000286A                            loc_1F86:
0000286A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002870 6100 0000                  		bsr.w	DelayProgram
00002874 6100                       		bsr.s	Pal_ToWhite
00002876 6100 F596                  		bsr.w	RunPLC_RAM
0000287A 51CC FFEE                  		dbf	d4,loc_1F86
0000287E 4E75                       		rts	
00002880                            ; End of function Pal_MakeFlash
00002880                            
00002880                            
00002880                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002880                            
00002880                            
00002880                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002880 7000                       		moveq	#0,d0
00002882 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002886 1038 F626                  		move.b	($FFFFF626).w,d0
0000288A D0C0                       		adda.w	d0,a0
0000288C 1038 F627                  		move.b	($FFFFF627).w,d0
00002890                            
00002890                            loc_1FAC:
00002890 6100                       		bsr.s	Pal_AddColor2
00002892 51C8 FFFC                  		dbf	d0,loc_1FAC
00002896 7000                       		moveq	#0,d0
00002898 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000289C 1038 F626                  		move.b	($FFFFF626).w,d0
000028A0 D0C0                       		adda.w	d0,a0
000028A2 1038 F627                  		move.b	($FFFFF627).w,d0
000028A6                            
000028A6                            loc_1FC2:
000028A6 6100                       		bsr.s	Pal_AddColor2
000028A8 51C8 FFFC                  		dbf	d0,loc_1FC2
000028AC 4E75                       		rts	
000028AE                            ; End of function Pal_ToWhite
000028AE                            
000028AE                            
000028AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000028AE                            
000028AE                            
000028AE                            Pal_AddColor2:				; XREF: Pal_ToWhite
000028AE 3410                       		move.w	(a0),d2
000028B0 0C42 0EEE                  		cmpi.w	#$EEE,d2
000028B4 6700                       		beq.s	loc_2006
000028B6 3202                       		move.w	d2,d1
000028B8 0241 000E                  		andi.w	#$E,d1
000028BC 0C41 000E                  		cmpi.w	#$E,d1
000028C0 6700                       		beq.s	loc_1FE2
000028C2 5458                       		addq.w	#2,(a0)+	; increase red value
000028C4 4E75                       		rts	
000028C6                            ; ===========================================================================
000028C6                            
000028C6                            loc_1FE2:				; XREF: Pal_AddColor2
000028C6 3202                       		move.w	d2,d1
000028C8 0241 00E0                  		andi.w	#$E0,d1
000028CC 0C41 00E0                  		cmpi.w	#$E0,d1
000028D0 6700                       		beq.s	loc_1FF4
000028D2 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000028D6 4E75                       		rts	
000028D8                            ; ===========================================================================
000028D8                            
000028D8                            loc_1FF4:				; XREF: loc_1FE2
000028D8 3202                       		move.w	d2,d1
000028DA 0241 0E00                  		andi.w	#$E00,d1
000028DE 0C41 0E00                  		cmpi.w	#$E00,d1
000028E2 6700                       		beq.s	loc_2006
000028E4 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000028E8 4E75                       		rts	
000028EA                            ; ===========================================================================
000028EA                            
000028EA                            loc_2006:				; XREF: Pal_AddColor2
000028EA 5448                       		addq.w	#2,a0
000028EC 4E75                       		rts	
000028EE                            ; End of function Pal_AddColor2
000028EE                            
000028EE                            ; ---------------------------------------------------------------------------
000028EE                            ; Pallet cycling routine - Sega	logo
000028EE                            ; ---------------------------------------------------------------------------
000028EE                            
000028EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000028EE                            
000028EE                            
000028EE                            PalCycle_Sega:				; XREF: SegaScreen
000028EE 4A38 F635                  		tst.b	($FFFFF635).w
000028F2 6600                       		bne.s	loc_206A
000028F4 43F8 FB20                  		lea	($FFFFFB20).w,a1
000028F8 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000028FE 7205                       		moveq	#5,d1
00002900 3038 F632                  		move.w	($FFFFF632).w,d0
00002904                            
00002904                            loc_2020:
00002904 6A00                       		bpl.s	loc_202A
00002906 5448                       		addq.w	#2,a0
00002908 5341                       		subq.w	#1,d1
0000290A 5440                       		addq.w	#2,d0
0000290C 60F6                       		bra.s	loc_2020
0000290E                            ; ===========================================================================
0000290E                            
0000290E                            loc_202A:				; XREF: PalCycle_Sega
0000290E 3400                       		move.w	d0,d2
00002910 0242 001E                  		andi.w	#$1E,d2
00002914 6600                       		bne.s	loc_2034
00002916 5440                       		addq.w	#2,d0
00002918                            
00002918                            loc_2034:
00002918 0C40 0060                  		cmpi.w	#$60,d0
0000291C 6400                       		bcc.s	loc_203E
0000291E 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002922                            
00002922                            loc_203E:
00002922 5440                       		addq.w	#2,d0
00002924 51C9 FFE8                  		dbf	d1,loc_202A
00002928 3038 F632                  		move.w	($FFFFF632).w,d0
0000292C 5440                       		addq.w	#2,d0
0000292E 3400                       		move.w	d0,d2
00002930 0242 001E                  		andi.w	#$1E,d2
00002934 6600                       		bne.s	loc_2054
00002936 5440                       		addq.w	#2,d0
00002938                            
00002938                            loc_2054:
00002938 0C40 0064                  		cmpi.w	#$64,d0
0000293C 6D00                       		blt.s	loc_2062
0000293E 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002944 70F4                       		moveq	#-$C,d0
00002946                            
00002946                            loc_2062:
00002946 31C0 F632                  		move.w	d0,($FFFFF632).w
0000294A 7001                       		moveq	#1,d0
0000294C 4E75                       		rts	
0000294E                            ; ===========================================================================
0000294E                            
0000294E                            loc_206A:				; XREF: loc_202A
0000294E 5338 F634                  		subq.b	#1,($FFFFF634).w
00002952 6A00                       		bpl.s	loc_20BC
00002954 11FC 0004 F634             		move.b	#4,($FFFFF634).w
0000295A 3038 F632                  		move.w	($FFFFF632).w,d0
0000295E 0640 000C                  		addi.w	#$C,d0
00002962 0C40 0030                  		cmpi.w	#$30,d0
00002966 6500                       		bcs.s	loc_2088
00002968 7000                       		moveq	#0,d0
0000296A 4E75                       		rts	
0000296C                            ; ===========================================================================
0000296C                            
0000296C                            loc_2088:				; XREF: loc_206A
0000296C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002970 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002976 41F0 0000                  		lea	(a0,d0.w),a0
0000297A 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000297E 22D8                       		move.l	(a0)+,(a1)+
00002980 22D8                       		move.l	(a0)+,(a1)+
00002982 3298                       		move.w	(a0)+,(a1)
00002984 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002988 7000                       		moveq	#0,d0
0000298A 722C                       		moveq	#$2C,d1
0000298C                            
0000298C                            loc_20A8:
0000298C 3400                       		move.w	d0,d2
0000298E 0242 001E                  		andi.w	#$1E,d2
00002992 6600                       		bne.s	loc_20B2
00002994 5440                       		addq.w	#2,d0
00002996                            
00002996                            loc_20B2:
00002996 3390 0000                  		move.w	(a0),(a1,d0.w)
0000299A 5440                       		addq.w	#2,d0
0000299C 51C9 FFEE                  		dbf	d1,loc_20A8
000029A0                            
000029A0                            loc_20BC:
000029A0 7001                       		moveq	#1,d0
000029A2 4E75                       		rts	
000029A4                            ; End of function PalCycle_Sega
000029A4                            
000029A4                            ; ===========================================================================
000029A4                            
000029A4                            Pal_Sega1:	incbin	pallet\sega1.bin
000029B0                            Pal_Sega2:	incbin	pallet\sega2.bin
000029E0                            
000029E0                            ; ---------------------------------------------------------------------------
000029E0                            ; Subroutines to load pallets
000029E0                            ; ---------------------------------------------------------------------------
000029E0                            
000029E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029E0                            
000029E0                            
000029E0                            PalLoad1:
000029E0 43F9 0000 0000             		lea	(PalPointers).l,a1
000029E6 E748                       		lsl.w	#3,d0
000029E8 D2C0                       		adda.w	d0,a1
000029EA 2459                       		movea.l	(a1)+,a2
000029EC 3659                       		movea.w	(a1)+,a3
000029EE D6FC 0080                  		adda.w	#$80,a3
000029F2 3E19                       		move.w	(a1)+,d7
000029F4                            
000029F4                            loc_2110:
000029F4 26DA                       		move.l	(a2)+,(a3)+
000029F6 51CF FFFC                  		dbf	d7,loc_2110
000029FA 4E75                       		rts	
000029FC                            ; End of function PalLoad1
000029FC                            
000029FC                            
000029FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029FC                            
000029FC                            
000029FC                            PalLoad2:
000029FC 43F9 0000 0000             		lea	(PalPointers).l,a1
00002A02 E748                       		lsl.w	#3,d0
00002A04 D2C0                       		adda.w	d0,a1
00002A06 2459                       		movea.l	(a1)+,a2
00002A08 3659                       		movea.w	(a1)+,a3
00002A0A 3E19                       		move.w	(a1)+,d7
00002A0C                            
00002A0C                            loc_2128:
00002A0C 26DA                       		move.l	(a2)+,(a3)+
00002A0E 51CF FFFC                  		dbf	d7,loc_2128
00002A12 4E75                       		rts	
00002A14                            ; End of function PalLoad2
00002A14                            
00002A14                            ; ---------------------------------------------------------------------------
00002A14                            ; Underwater pallet loading subroutine
00002A14                            ; ---------------------------------------------------------------------------
00002A14                            
00002A14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002A14                            
00002A14                            
00002A14                            PalLoad3_Water:
00002A14 43F9 0000 0000             		lea	(PalPointers).l,a1
00002A1A E748                       		lsl.w	#3,d0
00002A1C D2C0                       		adda.w	d0,a1
00002A1E 2459                       		movea.l	(a1)+,a2
00002A20 3659                       		movea.w	(a1)+,a3
00002A22 96FC 0080                  		suba.w	#$80,a3
00002A26 3E19                       		move.w	(a1)+,d7
00002A28                            
00002A28                            loc_2144:
00002A28 26DA                       		move.l	(a2)+,(a3)+
00002A2A 51CF FFFC                  		dbf	d7,loc_2144
00002A2E 4E75                       		rts	
00002A30                            ; End of function PalLoad3_Water
00002A30                            
00002A30                            
00002A30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002A30                            
00002A30                            
00002A30                            PalLoad4_Water:
00002A30 43F9 0000 0000             		lea	(PalPointers).l,a1
00002A36 E748                       		lsl.w	#3,d0
00002A38 D2C0                       		adda.w	d0,a1
00002A3A 2459                       		movea.l	(a1)+,a2
00002A3C 3659                       		movea.w	(a1)+,a3
00002A3E 96FC 0100                  		suba.w	#$100,a3
00002A42 3E19                       		move.w	(a1)+,d7
00002A44                            
00002A44                            loc_2160:
00002A44 26DA                       		move.l	(a2)+,(a3)+
00002A46 51CF FFFC                  		dbf	d7,loc_2160
00002A4A 4E75                       		rts	
00002A4C                            ; End of function PalLoad4_Water
00002A4C                            
00002A4C                            ; ===========================================================================
00002A4C                            ; ---------------------------------------------------------------------------
00002A4C                            ; Pallet pointers
00002A4C                            ; ---------------------------------------------------------------------------
00002A4C                            PalPointers:
00002A4C                            	include "_inc\Pallet pointers.asm"
00002A4C                            ; ---------------------------------------------------------------------------
00002A4C                            ; Pallet pointers
00002A4C                            ; ---------------------------------------------------------------------------
00002A4C 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002A50 FB00                       	dc.w $FB00		; RAM address
00002A52 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002A54 0000 0000                  	dc.l Pal_Title		; 1
00002A58 FB00                       	dc.w $FB00
00002A5A 0007                       	dc.w 7
00002A5C 0000 0000                  	dc.l Pal_LevelSel	; 2
00002A60 FB00                       	dc.w $FB00
00002A62 001F                       	dc.w $1F
00002A64 0000 0000                  	dc.l Pal_Sonic		; 3
00002A68 FB00                       	dc.w $FB00
00002A6A 0007                       	dc.w 7
00002A6C 0000 0000                  	dc.l Pal_GHZ		; 4
00002A70 FB20                       	dc.w $FB20
00002A72 0017                       	dc.w $17
00002A74 0000 0000                  	dc.l Pal_LZ		; 5
00002A78 FB20                       	dc.w $FB20
00002A7A 0017                       	dc.w $17
00002A7C 0000 0000                  	dc.l Pal_MZ		; 6
00002A80 FB20                       	dc.w $FB20
00002A82 0017                       	dc.w $17
00002A84 0000 0000                  	dc.l Pal_SLZ		; 7
00002A88 FB20                       	dc.w $FB20
00002A8A 0017                       	dc.w $17
00002A8C 0000 0000                  	dc.l Pal_SYZ		; 8
00002A90 FB20                       	dc.w $FB20
00002A92 0017                       	dc.w $17
00002A94 0000 0000                  	dc.l Pal_SBZ1		; 9
00002A98 FB20                       	dc.w $FB20
00002A9A 0017                       	dc.w $17
00002A9C 0000 0000                  	dc.l Pal_Special	; A
00002AA0 FB00                       	dc.w $FB00
00002AA2 001F                       	dc.w $1F
00002AA4 0000 0000                  	dc.l Pal_LZWater	; B
00002AA8 FB00                       	dc.w $FB00
00002AAA 001F                       	dc.w $1F
00002AAC 0000 0000                  	dc.l Pal_SBZ3		; C
00002AB0 FB20                       	dc.w $FB20
00002AB2 0017                       	dc.w $17
00002AB4 0000 0000                  	dc.l Pal_SBZ3Water	; D
00002AB8 FB00                       	dc.w $FB00
00002ABA 001F                       	dc.w $1F
00002ABC 0000 0000                  	dc.l Pal_SBZ2		; E
00002AC0 FB20                       	dc.w $FB20
00002AC2 0017                       	dc.w $17
00002AC4 0000 0000                  	dc.l Pal_LZSonWater	; F
00002AC8 FB00                       	dc.w $FB00
00002ACA 0007                       	dc.w 7
00002ACC 0000 0000                  	dc.l Pal_SBZ3SonWat	; 10
00002AD0 FB00                       	dc.w $FB00
00002AD2 0007                       	dc.w 7
00002AD4 0000 0000                  	dc.l Pal_SpeResult	; 11
00002AD8 FB00                       	dc.w $FB00
00002ADA 001F                       	dc.w $1F
00002ADC 0000 0000                  	dc.l Pal_SpeContinue	; 12
00002AE0 FB00                       	dc.w $FB00
00002AE2 000F                       	dc.w $F
00002AE4 0000 0000                  	dc.l Pal_Ending		; 13
00002AE8 FB00                       	dc.w $FB00
00002AEA 001F                       	dc.w $1F
00002AEC 0000 0000                  	dc.l Pal_ABZ		; 14
00002AF0 FB20                       	dc.w $FB20
00002AF2 0017                       	dc.w $17
00002AF4 0000 0000                  	dc.l Pal_Presents	; 15
00002AF8 FB00                       	dc.w $FB00
00002AFA 0007                       	dc.w 7
00002AFC 0000 0000                  	dc.l Pal_Info		; 16
00002B00 FB00                       	dc.w $FB00
00002B02 001F                       	dc.w $1F
00002B04 0000 0000                  	dc.l Pal_Sonic_sunset	; 17
00002B08 FB00                       	dc.w $FB00
00002B0A 0007                       	dc.w 7
00002B0C 0000 0000                  	dc.l Pal_Ghz_sunset	; 18
00002B10 FB20                       	dc.w $FB20
00002B12 0017                       	dc.w $17
00002B14 0000 0000                  	dc.l Pal_Sonic		; 19
00002B18 FB20                       	dc.w $FB20
00002B1A 0007                       	dc.w 7
00002B1C 0000 0000                  	dc.l Pal_SaavXul	; 1A
00002B20 FB20                       	dc.w $FB20
00002B22 0008                       	dc.w 8
00002B24 0000 0000                  	dc.l Pal_LevSelBG	; 1B
00002B28 FB00                       	dc.w $FB00
00002B2A 001F                       	dc.w $1F
00002B2C 0000 0000                  	dc.l Pal_MainMenu	; 1C
00002B30 FB20                       	dc.w $FB20
00002B32 0017                       	dc.w $17
00002B34 0000 0000                  	dc.l Pal_IC		; 1D
00002B38 FB20                       	dc.w $FB20
00002B3A 0017                       	dc.w $17
00002B3C 0000 0000                  	dc.l Pal_SonicT		; 1E
00002B40 FB20                       	dc.w $FB20
00002B42 0007                       	dc.w 7
00002B44 0000 0000                  	dc.l Pal_IC_2		; 1F
00002B48 FB20                       	dc.w $FB20
00002B4A 0017                       	dc.w $17
00002B4C 0000 0000                  	dc.l Pal_IC_3		; 20
00002B50 FB20                       	dc.w $FB20
00002B52 0017                       	dc.w $17
00002B54 0000 0000                  	dc.l Pal_GHZBOSS	; 21
00002B58 FB20                       	dc.w $FB20
00002B5A 0017                       	dc.w $17
00002B5C 0000 0000                  	dc.l Pal_SZ		; 22
00002B60 FB20                       	dc.w $FB20
00002B62 0017                       	dc.w $17
00002B62 0017                       	dc.w $17
00002B64                            ; ---------------------------------------------------------------------------
00002B64                            ; Pallet data
00002B64                            ; ---------------------------------------------------------------------------
00002B64                            Pal_SegaBG:		incbin	pallet\sega_bg.bin
00002BE4                            Pal_Title:		incbin	pallet\title.bin
00002C04                            Pal_LevelSel:		incbin	pallet\levelsel.bin
00002C84                            Pal_Sonic:		incbin	pallet\sonic.bin
00002CA4                            Pal_SonicT:		incbin	pallet\sonicT.bin
00002CC4                            Pal_Sonic_Sunset:	incbin	pallet\sonic_sunset.bin
00002CE4                            Pal_GHZ:		incbin	pallet\ghz.bin
00002D44                            Pal_GHZ_Sunset:		incbin	pallet\ghz_sunset.bin
00002DA4                            Pal_LZ:			incbin	pallet\lz.bin
00002E04                            Pal_LZWater:		incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002E84                            Pal_MZ:			incbin	pallet\mz.bin
00002EE4                            Pal_SLZ:		incbin	pallet\slz.bin
00002F44                            Pal_SYZ:		incbin	pallet\syz.bin
00002FA4                            Pal_SBZ1:		incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00003004                            Pal_SBZ2:		incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00003064                            Pal_Special:		incbin	pallet\special.bin	; special stage pallets
000030E4                            Pal_SBZ3:		incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00003144                            Pal_SBZ3Water:		incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
000031C4                            Pal_LZSonWater:		incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
000031E4                            Pal_SBZ3SonWat:		incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00003204                            Pal_SpeResult:		incbin	pallet\ssresult.bin	; special stage results screen pallets
00003284                            Pal_SpeContinue:	incbin	pallet\sscontin.bin	; special stage results screen continue pallet
000032C4                            Pal_Ending:		incbin	pallet\ending.bin	; ending sequence pallets
00003344                            Pal_ABZ:		incbin	pallet\abz.bin
000033A4                            Pal_IC:			incbin	pallet\ic_1.bin
00003404                            Pal_SZ:			incbin	pallet\sz.bin
00003464                            Pal_IC_2:		incbin	pallet\ic_2.bin
000034C4                            Pal_IC_3:		incbin	pallet\ic_3.bin
00003524                            Pal_Presents:		incbin	pallet\presenting.bin	
00003544                            Pal_Info:		incbin	pallet\info.bin		
000035C4                            Pal_Saavxul:		incbin	pallet\pico.bin		
000035E6                            Pal_LevSelBG:		incbin	pallet\levselbg.bin		
00003666                            Pal_MainMenu:		incbin	pallet\mainmenu.bin		
000036E6                            Pal_SSRGBG:		incbin	pallet\ssrgbg.bin		
00003706                            Pal_GHZBOSS:		incbin	pallet\GHZ_BOSS.bin		
00003766                            ; ---------------------------------------------------------------------------
00003766                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00003766                            ; ---------------------------------------------------------------------------
00003766                            
00003766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003766                            
00003766                            
00003766                            DelayProgram:				; XREF: PauseGame
00003766 46FC 2300                  		move	#$2300,sr
0000376A                            
0000376A                            loc_29AC:
0000376A 4A38 F62A                  		tst.b	($FFFFF62A).w
0000376E 66FA                       		bne.s	loc_29AC
00003770 4E75                       		rts	
00003772                            ; End of function DelayProgram
00003772                            
00003772                            ; ---------------------------------------------------------------------------
00003772                            ; Subroutine to	generate a pseudo-random number	in d0
00003772                            ; ---------------------------------------------------------------------------
00003772                            
00003772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003772                            
00003772                            
00003772                            RandomNumber:
00003772 2238 F636                  		move.l	($FFFFF636).w,d1
00003776 6600                       		bne.s	loc_29C0
00003778 223C 2A6D 365A             		move.l	#$2A6D365A,d1
0000377E                            
0000377E                            loc_29C0:
0000377E 2001                       		move.l	d1,d0
00003780 E581                       		asl.l	#2,d1
00003782 D280                       		add.l	d0,d1
00003784 E781                       		asl.l	#3,d1
00003786 D280                       		add.l	d0,d1
00003788 3001                       		move.w	d1,d0
0000378A 4841                       		swap	d1
0000378C D041                       		add.w	d1,d0
0000378E 3200                       		move.w	d0,d1
00003790 4841                       		swap	d1
00003792 21C1 F636                  		move.l	d1,($FFFFF636).w
00003796 4E75                       		rts	
00003798                            ; End of function RandomNumber
00003798                            
00003798                            
00003798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003798                            
00003798                            
00003798                            CalcSine:				; XREF: SS_BGAnimate; et al
00003798 0240 00FF                  		andi.w	#$FF,d0
0000379C D040                       		add.w	d0,d0
0000379E 0640 0080                  		addi.w	#$80,d0
000037A2 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000037A6 0440 0080                  		subi.w	#$80,d0
000037AA 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000037AE 4E75                       		rts	
000037B0                            ; End of function CalcSine
000037B0                            
000037B0                            ; ===========================================================================
000037B0                            
000037B0                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00003A30                            
00003A30                            ; ===========================================================================
00003A30 48E7 6000                  		movem.l	d1-d2,-(sp)
00003A34 3200                       		move.w	d0,d1
00003A36 4841                       		swap	d1
00003A38 7000                       		moveq	#0,d0
00003A3A 3200                       		move.w	d0,d1
00003A3C 7407                       		moveq	#7,d2
00003A3E                            
00003A3E                            loc_2C80:
00003A3E E599                       		rol.l	#2,d1
00003A40 D040                       		add.w	d0,d0
00003A42 5240                       		addq.w	#1,d0
00003A44 9240                       		sub.w	d0,d1
00003A46 6400                       		bcc.s	loc_2C9A
00003A48 D240                       		add.w	d0,d1
00003A4A 5340                       		subq.w	#1,d0
00003A4C 51CA FFF0                  		dbf	d2,loc_2C80
00003A50 E248                       		lsr.w	#1,d0
00003A52 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003A56 4E75                       		rts	
00003A58                            ; ===========================================================================
00003A58                            
00003A58                            loc_2C9A:
00003A58 5240                       		addq.w	#1,d0
00003A5A 51CA FFE2                  		dbf	d2,loc_2C80
00003A5E E248                       		lsr.w	#1,d0
00003A60 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003A64 4E75                       		rts	
00003A66                            
00003A66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A66                            
00003A66                            
00003A66                            CalcAngle:
00003A66 48E7 1800                  		movem.l	d3-d4,-(sp)
00003A6A 7600                       		moveq	#0,d3
00003A6C 7800                       		moveq	#0,d4
00003A6E 3601                       		move.w	d1,d3
00003A70 3802                       		move.w	d2,d4
00003A72 8843                       		or.w	d3,d4
00003A74 6700                       		beq.s	loc_2D04
00003A76 3802                       		move.w	d2,d4
00003A78 4A43                       		tst.w	d3
00003A7A 6A00 0000                  		bpl.w	loc_2CC2
00003A7E 4443                       		neg.w	d3
00003A80                            
00003A80                            loc_2CC2:
00003A80 4A44                       		tst.w	d4
00003A82 6A00 0000                  		bpl.w	loc_2CCA
00003A86 4444                       		neg.w	d4
00003A88                            
00003A88                            loc_2CCA:
00003A88 B843                       		cmp.w	d3,d4
00003A8A 6400 0000                  		bcc.w	loc_2CDC
00003A8E E18C                       		lsl.l	#8,d4
00003A90 88C3                       		divu.w	d3,d4
00003A92 7000                       		moveq	#0,d0
00003A94 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003A98 6000                       		bra.s	loc_2CE6
00003A9A                            ; ===========================================================================
00003A9A                            
00003A9A                            loc_2CDC:				; XREF: CalcAngle
00003A9A E18B                       		lsl.l	#8,d3
00003A9C 86C4                       		divu.w	d4,d3
00003A9E 7040                       		moveq	#$40,d0
00003AA0 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003AA4                            
00003AA4                            loc_2CE6:
00003AA4 4A41                       		tst.w	d1
00003AA6 6A00 0000                  		bpl.w	loc_2CF2
00003AAA 4440                       		neg.w	d0
00003AAC 0640 0080                  		addi.w	#$80,d0
00003AB0                            
00003AB0                            loc_2CF2:
00003AB0 4A42                       		tst.w	d2
00003AB2 6A00 0000                  		bpl.w	loc_2CFE
00003AB6 4440                       		neg.w	d0
00003AB8 0640 0100                  		addi.w	#$100,d0
00003ABC                            
00003ABC                            loc_2CFE:
00003ABC 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003AC0 4E75                       		rts	
00003AC2                            ; ===========================================================================
00003AC2                            
00003AC2                            loc_2D04:				; XREF: CalcAngle
00003AC2 303C 0040                  		move.w	#$40,d0
00003AC6 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003ACA 4E75                       		rts	
00003ACC                            ; End of function CalcAngle
00003ACC                            
00003ACC                            ; ===========================================================================
00003ACC                            
00003ACC                            Angle_Data:	incbin	misc\angles.bin
00003BCE                            
00003BCE                            ; ===========================================================================
00003BCE                            ; ---------------------------------------------------------------------------
00003BCE                            ; Sega screen	(unused)
00003BCE                            ; ---------------------------------------------------------------------------
00003BCE                            SegaScreen:				; XREF: GameModeArray
00003BCE 11FC 0004 FF94             		move.b	#4,($FFFFFF94).w ; go to title screen
00003BD4 4E75                       		rts
00003BD6                            ; ===========================================================================
00003BD6                            
00003BD6                            ; ---------------------------------------------------------------------------
00003BD6                            ; Title	screen
00003BD6                            ; ---------------------------------------------------------------------------
00003BD6                            Go_To_Cheat1_2:
00003BD6 11FC 0024 FF94             		move.b	#$24,($FFFFFF94).w ; go to title screen
00003BDC 4E75                       		rts	
00003BDE                            
00003BDE                            TitleScreen:				; XREF: GameModeArray
00003BDE 4A38 F600                  		tst.b	($FFFFF600).w	; 
00003BE2 66F2                       		bne.s	Go_To_Cheat1_2	; 
00003BE4 4238 FFA2                  		clr.b	($FFFFFFA2).w
00003BE8 103C 00E4                  		move.b	#$E4,d0
00003BEC 6100 DE1E                  		bsr.w	PlaySound_Special ; stop music
00003BF0 6100 E20E                  		bsr.w	ClearPLC
00003BF4 6100 EB42                  		bsr.w	Pal_FadeFrom
00003BF8 46FC 2700                  		move	#$2700,sr
00003BFC 6100 DCA0                  		bsr.w	SoundDriverLoad
00003C00 4DF9 00C0 0004             		lea	($C00004).l,a6
00003C06 3CBC 8004                  		move.w	#$8004,(a6)
00003C0A 3CBC 8230                  		move.w	#$8230,(a6)
00003C0E 3CBC 8407                  		move.w	#$8407,(a6)
00003C12 3CBC 9001                  		move.w	#$9001,(a6)
00003C16 3CBC 9200                  		move.w	#$9200,(a6)
00003C1A 3CBC 8B03                  		move.w	#$8B03,(a6)
00003C1E 3CBC 8720                  		move.w	#$8720,(a6)
00003C22 4238 F64E                  		clr.b	($FFFFF64E).w
00003C26 6100 DBE8                  		bsr.w	ClearScreen
00003C2A 43F8 D000                  		lea	($FFFFD000).w,a1
00003C2E 7000                       		moveq	#0,d0
00003C30 323C 07FF                  		move.w	#$7FF,d1
00003C34                            
00003C34                            Title_ClrObjRam:
00003C34 22C0                       		move.l	d0,(a1)+
00003C36 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00003C3A                            
00003C3A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003C44 41F9 0000 0000             		lea	(Nem_Presents).l,a0 ; load Japanese credits
00003C4A 6100 DFF8                  		bsr.w	NemDec
00003C4E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003C54 41F9 0000 0000             		lea	(Eni_Presents).l,a0 ; load mappings for	Japanese credits
00003C5A 303C 0000                  		move.w	#0,d0
00003C5E 6100 E2E0                  		bsr.w	EniDec
00003C62 43F9 00FF 0000             		lea	($FF0000).l,a1
00003C68 203C 4000 0003             		move.l	#$40000003,d0
00003C6E 7227                       		moveq	#$27,d1
00003C70 741B                       		moveq	#$1B,d2
00003C72 6100 DF04                  		bsr.w	ShowVDPGraphics
00003C76 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003C7A 7000                       		moveq	#0,d0
00003C7C 323C 001F                  		move.w	#$1F,d1
00003C80                            
00003C80                            Title_ClrPallet:
00003C80 22C0                       		move.l	d0,(a1)+
00003C82 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003C86                            
00003C86 7015                       		moveq	#$15,d0	
00003C88 6100 ED56                  		bsr.w	PalLoad1
00003C8C 6100 EA06                  		bsr.w	Pal_FadeTo
00003C90 46FC 2700                  		move	#$2700,sr
00003C94                            
00003C94                            
00003C94                            ; Mantener al procesador ocupado en algo para hacer tiempo
00003C94 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003C9E 41F9 0000 0000             		lea	(Nem_Presents).l,a0 ; load Japanese credits
00003CA4 6100 DF9E                  		bsr.w	NemDec
00003CA8 43F9 00FF 0000             		lea	($FF0000).l,a1
00003CAE 41F9 0000 0000             		lea	(Eni_Presents).l,a0 ; load mappings for	Japanese credits
00003CB4 4DF9 00C0 0000             		lea	($C00000).l,a6
00003CBA                            ; De nuevo
00003CBA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003CC4 41F9 0000 0000             		lea	(Nem_Presents).l,a0 ; load Japanese credits
00003CCA 6100 DF78                  		bsr.w	NemDec
00003CCE 43F9 00FF 0000             		lea	($FF0000).l,a1
00003CD4 41F9 0000 0000             		lea	(Eni_Presents).l,a0 ; load mappings for	Japanese credits
00003CDA 4DF9 00C0 0000             		lea	($C00000).l,a6
00003CE0                            
00003CE0 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00003CEA 45F9 0000 0000             		lea	(Art_ASCII),a2
00003CF0 303C 005A                  		move.w	#$5A,d0
00003CF4 4EB8 1C28                  		jsr	LoadUncArt
00003CF8                            
00003CF8 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003D00 4BF9 0000 06D2             		lea	(Art_Text).l,a5
00003D06 323C 028F                  		move.w	#$28F,d1
00003D0A                            
00003D0A                            
00003D0A                            Title_LoadText:
00003D0A 3C9D                       		move.w	(a5)+,(a6)
00003D0C 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003D10                            
00003D10 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003D16 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003D1C 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003D22 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003D28 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003D2E 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003D34 6100 EA02                  		bsr.w	Pal_FadeFrom
00003D38 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l		; Load art
00003D42 41F9 0000 0000             		lea	(Nem_TitleFG).l,a0
00003D48 4EB8 1C44                  		jsr	NemDec
00003D4C 46FC 2700                  		move	#$2700,sr
00003D50 6100 DABE                  		bsr.w	ClearScreen
00003D54                            
00003D54 4BF9 00C0 0004             		lea	($C00004).l,a5
00003D5A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D60                            
00003D60 43F9 00FF 0000             		lea	($FF0000).l,a1			; Load screen mappings
00003D66 41F9 0000 0000             		lea	(Eni_Titlefg).l,a0
00003D6C 303C 0000                  		move.w	#0,d0
00003D70 4EB8 1F40                  		jsr	EniDec
00003D74 43F9 00FF 0000             		lea	($FF0000).l,a1			; Show screen
00003D7A 203C 4000 0003             		move.l	#$40000003,d0
00003D80 7227                       		moveq	#$27,d1
00003D82 741B                       		moveq	#$1B,d2
00003D84 4EB8 1B78                  		jsr	ShowVDPGraphics				
00003D88                            	;	lea	($FF0000).l,a1			; Load screen mappings
00003D88                            	;	lea	(Map_Xulpico).l,a0
00003D88                            	;	move.w	#0,d0
00003D88                            	;	jsr	EniDec
00003D88                            	;	lea	($FF0000).l,a1			; Show screen
00003D88                            	;	move.l	#$60000003,d0			; Location
00003D88                            	;	moveq	#$27,d1
00003D88                            	;	moveq	#$1B,d2
00003D88                            	;	jsr	ShowVDPGraphics				
00003D88 7001                       		moveq	#1,d0		; load title screen pallet
00003D8A 6100 EC54                  		bsr.w	PalLoad1
00003D8E 701E                       		moveq	#$1E,d0		; load title screen pallet (2)
00003D90 6100 EC4E                  		bsr.w	PalLoad1
00003D94 103C 009E                  		move.b	#$9E,d0		; play title screen music 9E
00003D98 6100 DC72                  		bsr.w	PlaySound_Special
00003D9C 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003DA2 31FC FFFF F614             		move.w	#$FFFF,($FFFFF614).w ; run title	screen for $178	frames
00003DA8 7000                       		moveq	#0,d0
00003DAA 6100 E028                  		bsr.w	LoadPLC2
00003DAE 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003DB4 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003DBA 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003DBE 0000 0040                  		ori.b	#$40,d0
00003DC2 33C0 00C0 0004             		move.w	d0,($C00004).l
00003DC8 31FC 0040 F616             		move.w	#$40,($FFFFF616).w
00003DCE 4EB8 2694                  		jsr	Pal_FadeTo
00003DD2                            
00003DD2                            loc_317C:
00003DD2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003DD8 6100 F98C                  		bsr.w	DelayProgram
00003DDC 4EB9 0000 0000             		jsr	TitleScreen_MoveImage
00003DE2 4EB9 0000 0000             		jsr	ObjectsLoad
00003DE8 4EB9 0000 0000             		jsr	BuildSprites
00003DEE 6100 E39A                  		bsr.w	PalCycle_Title
00003DF2 6100 E01A                  		bsr.w	RunPLC_RAM
00003DF6 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003DFA 6500 0000                  		bcs.w	Title_ChkRegion	; if not, branch
00003DFE 11FC 0000 FF94             		move.b	#0,($FFFFFF94).w ; go to Sega screen
00003E04 4E75                       		rts	
00003E06                            ; ===========================================================================
00003E06                            
00003E06                            TitleScreen_MoveImage:
00003E06                            		;Preparar index en RAM
00003E06 7000                       		moveq	#0,d0
00003E08 1038 FFA2                  		move.b	($FFFFFFA2).w,d0
00003E0C 303B 0000                  		move.w	TitleScreen_Move(pc,d0.w),d0
00003E10 4EFB 0000                  		jmp	TitleScreen_Move(pc,d0.w)
00003E14                            
00003E14                            TitleScreen_Move:
00003E14                            		;Lista de tareas
00003E14 0000                       		dc.w	TitleScreen_Moving-TitleScreen_Move
00003E16 0000                       		dc.w	TitleScreen_Moving2-TitleScreen_Move
00003E18 0000                       		dc.w	TitleScreen_Return-TitleScreen_Move
00003E1A                            
00003E1A                            TitleScreen_Moving:
00003E1A 0C78 FFF0 F616             		cmpi.w	#-$10,($FFFFF616).w	;¿Esta el texto en posicion -$10?
00003E20 6500 0000                  		bcs.w	Title_AddMov		;Si esta en menor cantidad, mover
00003E24 5438 FFA2                  		addq.b	#2,($FFFFFFA2).w	;Pasar
00003E28                            
00003E28                            TitleScreen_Return:
00003E28 4E75                       		rts				;Volver
00003E2A                            
00003E2A                            TitleScreen_Moving2:
00003E2A                            
00003E2A 43F8 D080                  		lea	($FFFFD080).w,a1	;RAM de objeto en a1
00003E2E 4EB9 0000 0000             		jsr	DeleteObject2		;Borrar objeto en a1
00003E34 11FC 008D D400             		move.b  #$8D, ($FFFFD400).w	;Objeto de opciones 
00003E3A 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003E40 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003E46                            ;		jsr	ObjectsLoad
00003E46                            ;		jsr	BuildSprites
00003E46                            
00003E46 2A3C 4000 0003             		move.l	#$40000003,d5		;Ubicacion en VRAM
00003E4C 43F9 0000 0000             		lea	(TitleSCR_ASCII),a1	;Maps a Plano A a a1
00003E52 363C 2580                  		move.w	#$2580,d3		;Ubicacion en VRAM+LineaPal
00003E56 4EB8 1964                  		jsr	LoadASCII		;Cargar texto ASCII
00003E5A                            		;Mostrar texto ASCII en Plano A
00003E5A 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003E60 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003E64 0000 0040                  		ori.b	#$40,d0
00003E68 33C0 00C0 0004             		move.w	d0,($C00004).l
00003E6E 31FC 0000 B080             		move.w	#0,($FFFFFB000+$80).w
00003E74 5438 FFA2                  		addq.b	#2,($FFFFFFA2).w	;Pasar
00003E78 4E75                       		rts				;Volver
00003E7A                            ; ===========================================================================
00003E7A                            
00003E7A                            Title_AddMov:
00003E7A 5778 F616                  		subq.w	#3,($FFFFF616).w	;Bajar posicion de Plano A
00003E7E 4EF8 3E28                  		jmp	TitleScreen_Return	;Volver
00003E82                            ; ===========================================================================
00003E82                            
00003E82                            Title_ChkRegion:
00003E82                            
00003E82                            loc_3210:				; XREF: Title_EnterCheat
00003E82 4A00                       		tst.b	d0
00003E84 6700                       		beq.s	Title_CountC
00003E86 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003E8C 6700                       		beq.s	Title_CountC
00003E8E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003E94                            
00003E94                            Title_CountC:
00003E94 1038 F605                  		move.b	($FFFFF605).w,d0
00003E98 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003E9C 6700                       		beq.s	loc_3230	; if not, branch
00003E9E 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003EA2                            
00003EA2                            loc_3230:
00003EA2 4A78 F614                  		tst.w	($FFFFF614).w
00003EA6 6700 0000                  		beq.w	Go_Restart
00003EAA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00003EB0 6600 0000                  		bne	LevelSel_FromLv	; if yes, branch
00003EB4 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
00003EBA 6600                       		bne.s	Goto_SndTest	; if yes, branch
00003EBC                            
00003EBC 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003EC2 6700 FF0E                  		beq.w	loc_317C	; if not, branch
00003EC6 4EF9 0000 0000             		jmp	Title_ChkLevSel
00003ECC                            
00003ECC                            Goto_SndTest:
00003ECC 11FC 0048 FF94             		move.b	#$48,($FFFFFF94).w
00003ED2 4E75                       		rts
00003ED4                            
00003ED4                            Go_Restart:
00003ED4 11FC 0000 FF94             		move.b	#0,($FFFFFF94).w
00003EDA 4E75                       		rts
00003EDC                            
00003EDC                            Title_ChkLevSel:
00003EDC                            ;		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003EDC                            ;		beq.w	PlayLevel	; if not, play level
00003EDC                            ;		btst	#6,($FFFFF604).w ; check if A is pressed
00003EDC                            ;		beq.w	PlayLevel	; if not, play level
00003EDC                            ;               cmpi.b  #1,($FFFFFF86).w
00003EDC                            ;		beq.w	PLayLevel
00003EDC 4EF9 0000 0000             		jmp	PlayLevel
00003EE2                            		
00003EE2                            LevelSel_FromLv:
00003EE2 103C 002C                  		move.b	#$2C,d0
00003EE6 11C0 FF94                  		move.b	d0,($FFFFFF94).w
00003EEA 4E75                       		rts
00003EEC                            PlayLevel:				; XREF: ROM:00003246j ...
00003EEC 11FC 0020 FF94                     	move.b    #$20,($FFFFFF94).w ; set    screen mode to $0C (level)
00003EF2 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003EF8 7000                       		moveq	#0,d0
00003EFA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003EFE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003F02 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003F06 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003F0A 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003F0E 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003F12 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003F16 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003F1A 103C 00E0                  		move.b	#$E0,d0
00003F1E 4EB8 1A0C                  		jsr	PlaySound_Special           		
00003F22 4E75                       		rts
00003F24                            
00003F24                            TitleScreen_ASCII:
00003F24 FF                         		dc.b $FF
00003F25 2020 2020 2020 2D20 2D20+  		dc.b "      - - - SONIC ALPHAOMEGA - - -",$FF
00003F48 FF                         		dc.b $FF
00003F49 FF                         		dc.b $FF
00003F4A FF                         		dc.b $FF
00003F4B FF                         		dc.b $FF
00003F4C FF                         		dc.b $FF
00003F4D FF                         		dc.b $FF
00003F4E FF                         		dc.b $FF
00003F4F FF                         		dc.b $FF
00003F50 FF                         		dc.b $FF
00003F51 FF                         		dc.b $FF
00003F52 FF                         		dc.b $FF
00003F53 FF                         		dc.b $FF
00003F54 FF                         		dc.b $FF
00003F55 FF                         		dc.b $FF
00003F56 FF                         		dc.b $FF
00003F57 FF                         		dc.b $FF
00003F58 FF                         		dc.b $FF
00003F59 2020 2020 2020 2020 2020+  		dc.b "                  ",$FF
00003F6C 2020 2020 2020 2020 2020+  		dc.b "                 ",$FF
00003F7E FF                         		dc.b $FF
00003F7F FF                         		dc.b $FF
00003F80 FF                         		dc.b $FF
00003F81 FF                         		dc.b $FF
00003F82 2020 2020 2020 2020 2020+  		dc.b "                                       ",$FF
00003FAA 2020 2020 2020 2020 2020+  		dc.b "                                       ",$FF
00003FD2                            
00003FD2 00                         		dc.b 0
00003FD4 00                         		even
00003FD4                            
00003FD4                            ; ---------------------------------------------------------------------------
00003FD4                            ; Demo mode
00003FD4                            ; ---------------------------------------------------------------------------
00003FD4                            
00003FD4                            Demo:					; XREF: TitleScreen
00003FD4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003FDA                            
00003FDA                            loc_33B6:				; XREF: loc_33E4
00003FDA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003FE0 6100 F784                  		bsr.w	DelayProgram
00003FE4 6100 0000                  		bsr.w	DeformBgLayer
00003FE8 6100 E174                  		bsr.w	PalCycle_Load
00003FEC 6100 DE20                  		bsr.w	RunPLC_RAM
00003FF0 3038 D008                  		move.w	($FFFFD008).w,d0
00003FF4 5440                       		addq.w	#2,d0
00003FF6 31C0 D008                  		move.w	d0,($FFFFD008).w
00003FFA 0C40 1C00                  		cmpi.w	#$1C00,d0
00003FFE 6500                       		bcs.s	loc_33E4
00004000 11FC 0000 FF94             		move.b	#0,($FFFFFF94).w ; set screen mode to 00 (level)
00004006 4E75                       		rts	
00004008                            ; ===========================================================================
00004008                            
00004008                            loc_33E4:				; XREF: Demo
00004008 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000400E 6600 FECC                  		bne.w	Title_ChkLevSel	; if yes, branch
00004012 4A78 F614                  		tst.w	($FFFFF614).w
00004016 6600 FFC2                  		bne.w	loc_33B6
0000401A 103C 00E0                  		move.b	#$E0,d0
0000401E 6100 D9EC                  		bsr.w	PlaySound_Special ; fade out music
00004022 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00004026 0240 0007                  		andi.w	#7,d0
0000402A D040                       		add.w	d0,d0
0000402C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004030 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00004034 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00004038 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000403E 6500                       		bcs.s	loc_3422	; if yes, branch
00004040 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00004046                            
00004046                            loc_3422:
00004046 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
0000404C 11FC 0008 FF94             		move.b	#8,($FFFFFF94).w ; set screen mode to 08 (demo)
00004052 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004056 6600                       		bne.s	Demo_Level	; if not, branch
00004058 11FC 0010 FF94             		move.b	#$10,($FFFFFF94).w ; set screen	mode to	$10 (Special Stage)
0000405E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00004062 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00004066                            
00004066                            Demo_Level:
00004066 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000406C 7000                       		moveq	#0,d0
0000406E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004072 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004076 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000407A 4E75                       		rts	
0000407C                            ; ===========================================================================
0000407C                            ; ---------------------------------------------------------------------------
0000407C                            ; Levels used in demos
0000407C                            ; ---------------------------------------------------------------------------
0000407C                            Demo_Levels:	incbin	misc\dm_ord1.bin
00004084                            		even
00004084                            
00004084                            ; ---------------------------------------------------------------------------
00004084                            ; Subroutine to	change what you're selecting in the level select
00004084                            ; ---------------------------------------------------------------------------
00004084                            
00004084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004084                            
00004084                            
00004084                            LevSelControls:				; XREF: LevelSelect
00004084 1238 F605                  		move.b	($FFFFF605).w,d1
00004088 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000408C 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000408E 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00004092 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00004094                            
00004094                            LevSel_UpDown:
00004094 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000409A 1238 F604                  		move.b	($FFFFF604).w,d1
0000409E 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000040A2 6700                       		beq.s	LevSel_SndTest	; if not, branch
000040A4 3038 FF82                  		move.w	($FFFFFF82).w,d0
000040A8 0801 0000                  		btst	#0,d1		; is up	pressed?
000040AC 6700                       		beq.s	LevSel_Down	; if not, branch
000040AE 5340                       		subq.w	#1,d0		; move up 1 selection
000040B0 6400                       		bcc.s	LevSel_Down
000040B2 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
000040B4                            
000040B4                            LevSel_Down:
000040B4 0801 0001                  		btst	#1,d1		; is down pressed?
000040B8 6700                       		beq.s	LevSel_Refresh	; if not, branch
000040BA 5240                       		addq.w	#1,d0		; move down 1 selection
000040BC 0C40 0015                  		cmpi.w	#$15,d0
000040C0 6500                       		bcs.s	LevSel_Refresh
000040C2 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000040C4                            
000040C4                            LevSel_Refresh:
000040C4 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
000040C8 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000040CC 4E75                       		rts	
000040CE                            ; ===========================================================================
000040CE                            
000040CE                            LevSel_SndTest:				; XREF: LevSelControls
000040CE 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
000040D4 6600                       		bne.s	LevSel_NoMove	; if not, branch
000040D6 1238 F605                  		move.b	($FFFFF605).w,d1
000040DA 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000040DE 6700                       		beq.s	LevSel_NoMove	; if not, branch
000040E0 3038 FF84                  		move.w	($FFFFFF84).w,d0
000040E4 0801 0002                  		btst	#2,d1		; is left pressed?
000040E8 6700                       		beq.s	LevSel_Right	; if not, branch
000040EA 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000040EC                            
000040EC                            LevSel_Right:
000040EC 0801 0003                  		btst	#3,d1		; is right pressed?
000040F0 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000040F2 5240                       		addq.w	#1,d0		; add 1	to sound test
000040F4                            
000040F4                            LevSel_Refresh2:
000040F4 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000040F8 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000040FC                            
000040FC                            LevSel_NoMove:
000040FC 4E75                       		rts	
000040FE                            ; End of function LevSelControls
000040FE                            
000040FE                            ; ---------------------------------------------------------------------------
000040FE                            ; Subroutine to load level select text
000040FE                            ; ---------------------------------------------------------------------------
000040FE                            
000040FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040FE                            
000040FE                            
000040FE                            LevSelTextLoad:				; XREF: TitleScreen
000040FE 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004104 4DF9 00C0 0000             		lea	($C00000).l,a6
0000410A 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00004110 363C E680                  		move.w	#$E680,d3	; VRAM setting
00004114 7214                       		moveq	#$14,d1		; number of lines of text
00004116                            
00004116                            loc_34FE:				; XREF: LevSelTextLoad+26j
00004116 2D44 0004                  		move.l	d4,4(a6)
0000411A 6100 0000                  		bsr.w	LevSel_ChgLine
0000411E 0684 0080 0000             		addi.l	#$800000,d4
00004124 51C9 FFF0                  		dbf	d1,loc_34FE
00004128 7000                       		moveq	#0,d0
0000412A 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000412E 3200                       		move.w	d0,d1
00004130 283C 6210 0003             		move.l	#$62100003,d4
00004136 EF48                       		lsl.w	#7,d0
00004138 4840                       		swap	d0
0000413A D880                       		add.l	d0,d4
0000413C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004142 E749                       		lsl.w	#3,d1
00004144 3001                       		move.w	d1,d0
00004146 D241                       		add.w	d1,d1
00004148 D240                       		add.w	d0,d1
0000414A D2C1                       		adda.w	d1,a1
0000414C 363C C680                  		move.w	#$C680,d3
00004150 2D44 0004                  		move.l	d4,4(a6)
00004154 6100 0000                  		bsr.w	LevSel_ChgLine
00004158 363C E680                  		move.w	#$E680,d3
0000415C 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00004162 6600                       		bne.s	loc_3550
00004164 363C C680                  		move.w	#$C680,d3
00004168                            
00004168                            loc_3550:
00004168 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00004172 3038 FF84                  		move.w	($FFFFFF84).w,d0
00004176 1400                       		move.b	d0,d2
00004178 E808                       		lsr.b	#4,d0
0000417A 6100 0000                  		bsr.w	LevSel_ChgSnd
0000417E 1002                       		move.b	d2,d0
00004180 6100 0000                  		bsr.w	LevSel_ChgSnd
00004184 4E75                       		rts	
00004186                            ; End of function LevSelTextLoad
00004186                            
00004186                            
00004186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004186                            
00004186                            
00004186                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00004186 0240 000F                  		andi.w	#$F,d0
0000418A 0C00 000A                  		cmpi.b	#$A,d0
0000418E 6500                       		bcs.s	loc_3580
00004190 5E00                       		addi.b	#7,d0
00004192                            
00004192                            loc_3580:
00004192 D043                       		add.w	d3,d0
00004194 3C80                       		move.w	d0,(a6)
00004196 4E75                       		rts	
00004198                            ; End of function LevSel_ChgSnd
00004198                            
00004198                            
00004198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004198                            
00004198                            
00004198                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00004198 7417                       		moveq	#$17,d2		; number of characters per line
0000419A                            
0000419A                            loc_3588:
0000419A 7000                       		moveq	#0,d0
0000419C 1019                       		move.b	(a1)+,d0
0000419E 6A00                       		bpl.s	loc_3598
000041A0 3CBC 0000                  		move.w	#0,(a6)
000041A4 51CA FFF4                  		dbf	d2,loc_3588
000041A8 4E75                       		rts	
000041AA                            ; ===========================================================================
000041AA                            
000041AA                            loc_3598:				; XREF: LevSel_ChgLine
000041AA D043                       		add.w	d3,d0
000041AC 3C80                       		move.w	d0,(a6)
000041AE 51CA FFEA                  		dbf	d2,loc_3588
000041B2 4E75                       		rts	
000041B4                            ; End of function LevSel_ChgLine
000041B4                            
000041B4                            ; ===========================================================================
000041B4                            ; ---------------------------------------------------------------------------
000041B4                            ; Level	select menu text
000041B4                            ; ---------------------------------------------------------------------------
000041B4                            LevelMenuText:	incbin	misc\menutext.bin
000043AC                            		even
000043AC                            ; --------------------------- -----------------------------------------------
000043AC                            ; Music	playlist
000043AC                            ; ---------------------------------------------------------------------------
000043AC                            MusicList:	
000043AC 9582 8399 8586 8D95 819B   		dc.b	$95, $82, $83, $99, $85, $86, $8D, $95, $81, $9B
000043B6                            		even
000043B6                            ; ===========================================================================
000043B6                            
000043B6                            ; ---------------------------------------------------------------------------
000043B6                            ; Level
000043B6                            ; ---------------------------------------------------------------------------
000043B6                            
000043B6                            Level:					; XREF: GameModeArray
000043B6                            
000043B6 08F8 0007 FF94             		bset	#7,($FFFFFF94).w ; add $80 to screen mode (for pre level sequence)
000043BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000043C0 6B00                       		bmi.s	loc_37B6
000043C2 103C 00E0                  		move.b	#$E0,d0
000043C6 6100 D644                  		bsr.w	PlaySound_Special ; fade out music
000043CA                            
000043CA                            loc_37B6:
000043CA 6100 DA34                  		bsr.w	ClearPLC
000043CE 6100 E368                  		bsr.w	Pal_FadeFrom
000043D2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000043D6 6B00                       		bmi.s	Level_ClrRam
000043D8 46FC 2700                  		move	#$2700,sr
000043DC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000043E6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000043EC 6100 D856                  		bsr.w	NemDec
000043F0 46FC 2300                  		move	#$2300,sr
000043F4 7000                       		moveq	#0,d0
000043F6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000043FA E948                       		lsl.w	#4,d0
000043FC 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00004402 45F2 0000                  		lea	(a2,d0.w),a2
00004406 7000                       		moveq	#0,d0
00004408 1012                       		move.b	(a2),d0
0000440A 6700                       		beq.s	loc_37FC
0000440C 6100 D994                  		bsr.w	LoadPLC		; load level patterns
00004410                            
00004410                            loc_37FC:
00004410 7001                       		moveq	#1,d0
00004412 6100 D98E                  		bsr.w	LoadPLC		; load standard	patterns
00004416                            
00004416                            Level_ClrRam:
00004416 4238 FFA5                  		clr.b	($FFFFFFA5).w
0000441A 43F8 D000                  		lea	($FFFFD000).w,a1
0000441E 7000                       		moveq	#0,d0
00004420 323C 07FF                  		move.w	#$7FF,d1
00004424                            
00004424                            Level_ClrObjRam:
00004424 22C0                       		move.l	d0,(a1)+
00004426 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
0000442A 4238 FFA5                  		clr.b	($FFFFFFA5).w
0000442E                            
0000442E 43F8 F628                  		lea	($FFFFF628).w,a1
00004432 7000                       		moveq	#0,d0
00004434 323C 0015                  		move.w	#$15,d1
00004438                            
00004438                            Level_ClrVars:
00004438 22C0                       		move.l	d0,(a1)+
0000443A 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
0000443E                            
0000443E 43F8 F700                  		lea	($FFFFF700).w,a1
00004442 7000                       		moveq	#0,d0
00004444 323C 003F                  		move.w	#$3F,d1
00004448                            
00004448                            Level_ClrVars2:
00004448 22C0                       		move.l	d0,(a1)+
0000444A 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000444E                            
0000444E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004452 7000                       		moveq	#0,d0
00004454 323C 0047                  		move.w	#$47,d1
00004458                            
00004458                            Level_ClrVars3:
00004458 22C0                       		move.l	d0,(a1)+
0000445A 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
0000445E                            
0000445E 46FC 2700                  		move	#$2700,sr
00004462 6100 D3AC                  		bsr.w	ClearScreen
00004466 0C38 0001 FE10             		cmpi.b	#$1,($FFFFFE10).w	; LZ
0000446C 6600                       		bne.s	Level_ClearWater
0000446E                            Level_InitWater:
0000446E 11FC 0001 FFBC             		move.b	#1,(Water_flag).w
00004474 6000 0000                  		bra.w   Level_ClrVars3_Continue
00004478                            
00004478                            Level_ClearWater:
00004478 11FC 0000 FFBC             		move.b	#0,(Water_flag).w
0000447E                               
0000447E                            Level_ClrVars3_Continue:
0000447E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004484 3CBC 8B03                  		move.w	#$8B03,(a6)
00004488 3CBC 8230                  		move.w	#$8230,(a6)
0000448C 3CBC 8407                  		move.w	#$8407,(a6)
00004490 3CBC 857C                  		move.w	#$857C,(a6)
00004494 3CBC 9001                  		move.w	#$9001,(a6)
00004498 3CBC 8004                  		move.w	#$8004,(a6)
0000449C 3CBC 8720                  		move.w	#$8720,(a6)
000044A0 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000044A6 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000044AA 4278 C800                  		clr.w	($FFFFC800).w
000044AE 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000044B6                            ;		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000044B6                            ;		bne.s	Level_LoadPal	; if not, branch
000044B6 4A38 FFBC                  		tst.b	(Water_Flag).w
000044BA 6700                       		beq.s	Level_LoadPal
000044BC 3CBC 8014                  		move.w	#$8014,(a6)
000044C0 7000                       		moveq	#0,d0
000044C2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000044C6 D040                       		add.w	d0,d0
000044C8 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000044CE 3031 0000                  		move.w	(a1,d0.w),d0
000044D2 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
000044D6 31C0 F648                  		move.w	d0,($FFFFF648).w
000044DA 31C0 F64A                  		move.w	d0,($FFFFF64A).w
000044DE 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000044E2 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000044E6 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000044EC                            
000044EC                            Level_LoadPal:
000044EC 4238 FF95                  		clr.b	($FFFFFF95).w	;Flag from the main menu
000044F0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000044F6 46FC 2300                  		move	#$2300,sr
000044FA 7003                       		moveq	#$3,d0
000044FC 6100 E4FE                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004500 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004506 6600                       		bne.s	Level_GetBgm	; if not, branch
00004508 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
0000450A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00004510 6600                       		bne.s	Level_WaterPal	; if not, branch
00004512 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00004514                            
00004514                            Level_WaterPal:
00004514 6100 E4FE                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004518 4A38 FE30                  		tst.b	($FFFFFE30).w
0000451C 6700                       		beq.s	Level_GetBgm
0000451E 0C38 0009 FE10             		cmpi.b	#9,($FFFFFE10).w
00004524 6700 0000                  		beq	Level_GetBgm
00004528 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000452E                            
0000452E                            Level_GetBgm:
0000452E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004532 6B00 0000                  		bmi.w	loc_3946
00004536 7000                       		moveq	#0,d0
00004538 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000453C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
00004542 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
00004544 7005                       		moveq	#5,d0		; move 5 to d0
00004546                            
00004546                            Level_BgmNotLZ4:
00004546 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000454C 6600                       		bne.s	Level_PlayBgm	; if not, branch
0000454E 7006                       		moveq	#6,d0		; move 6 to d0
00004550                            
00004550                            Level_PlayBgm:
00004550 43F9 0000 43AC             		lea	(MusicList).l,a1 ; load	music playlist
00004556 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
0000455A                            
0000455A                            Level_BgmNotAHZ2:
0000455A 0C78 0001 FE10             		cmpi.w	#$001,($FFFFFE10).w ; is level FZ?
00004560 6600 0000                  		bne	level_PlayBgm_Normal
00004564 103C 009F                  		move.b	#$9F,d0
00004568                            
00004568                            Level_PlayBgm_Normal:
00004568 6100 D47A                  		bsr.w	PlaySound	; play music
0000456C 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00004572                            
00004572                            Level_TtlCard:
00004572 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004578 6100 F1EC                  		bsr.w	DelayProgram
0000457C 4EB9 0000 0000             		jsr	ObjectsLoad
00004582 4EB9 0000 0000             		jsr	BuildSprites
00004588 6100 D884                  		bsr.w	RunPLC_RAM
0000458C 3038 D108                  		move.w	($FFFFD108).w,d0
00004590 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00004594 66DC                       		bne.s	Level_TtlCard	; if not, branch
00004596 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000459A 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000459C 4EB9 0000 0000             		jsr	Hud_Base
000045A2                            
000045A2                            loc_3946:
000045A2 7003                       		moveq	#3,d0
000045A4 6100 E43A                  		bsr.w	PalLoad1	; load Sonic's pallet line
000045A8 6100 0000                  		bsr.w	LevelSizeLoad
000045AC 6100 0000                  		bsr.w	DeformBgLayer
000045B0 08F8 0002 F754             		bset	#2,($FFFFF754).w
000045B6 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
000045BA 6100 0000                  		bsr.w	LoadTilesFromStart
000045BE 4EB9 0000 0000             		jsr	FloorLog_Unk
000045C4 6100 0000                  		bsr.w	ColIndexLoad
000045C8 6100 0000                  		bsr.w	LZWaterEffects
000045CC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000045D2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000045D6 6B00                       		bmi.s	Level_ChkDebug
000045D8 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000045DE                            
000045DE                            Level_ChkDebug:
000045DE 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000045E2 6700                       		beq.s	Level_ChkWater	; if not, branch
000045E4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000045EA 6700                       		beq.s	Level_ChkWater	; if not, branch
000045EC 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000045F2                            
000045F2                            Level_ChkWater:
000045F2 31FC 0000 F602             		move.w	#0,($FFFFF602).w
000045F8 31FC 0000 F604             		move.w	#0,($FFFFF604).w
000045FE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004604 6600                       		bne.s	Level_LoadObj	; if not, branch
00004606 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000460C 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00004612 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004618 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000461E                            
0000461E                            Level_LoadObj:
0000461E 4EB9 0000 0000             		jsr	ObjPosLoad
00004624 4EB9 0000 0000             		jsr	ObjectsLoad
0000462A 4EB9 0000 0000             		jsr	BuildSprites
00004630 7000                       		moveq	#0,d0
00004632 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004636 6600                       		bne.s	loc_39E8	; if yes, branch
00004638 0C38 0009 FE10             		cmpi.b	#9,($FFFFFE10).w
0000463E 6600                       		bne.s	loc_39E8
00004640 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004644 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004648 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
0000464C                            
0000464C                            loc_39E8:
0000464C 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004650 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00004654 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00004658 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000465C 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004660 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00004664 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00004668 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000466C 6100 0000                  		bsr.w	OscillateNumInit
00004670 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004676 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000467C 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00004682 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004688 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000468E 7000                       		moveq	#0,d0
00004690 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004694 E548                       		lsl.w	#2,d0
00004696 2271 0000                  		movea.l	(a1,d0.w),a1
0000469A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000469E 6A00                       		bpl.s	Level_Demo	; if yes, branch
000046A0 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000046A6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000046AA 5340                       		subq.w	#1,d0
000046AC E548                       		lsl.w	#2,d0
000046AE 2271 0000                  		movea.l	(a1,d0.w),a1
000046B2                            
000046B2                            Level_Demo:
000046B2 11E9 0001 F792             		move.b    1(a1),($FFFFF792).w    ; load key press duration
000046B8 5338 F792                  		subq.b    #1,($FFFFF792).w    ; subtract 1 from duration
000046BC 6400 0000                  		bcc    Level_Demo_NullPress
000046C0 11E9 0003 F792             		move.b    3(a1),($FFFFF792).w
000046C6 5478 F790                  		addq.w    #2,($FFFFF790).w
000046CA                            Level_Demo_NullPress:
000046CA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000046D0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000046D4 6A00                       		bpl.s	Level_ChkWaterPal
000046D6 31FC 021C F614             		move.w	#540,($FFFFF614).w
000046DC 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000046E2 6600                       		bne.s	Level_ChkWaterPal
000046E4 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000046EA                            
000046EA                            Level_ChkWaterPal:
000046EA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000046F0 6600                       		bne.s	Level_Delay	; if not, branch
000046F2 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000046F4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000046FA 6600                       		bne.s	Level_WaterPal2	; if not, branch
000046FC 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000046FE                            
000046FE                            Level_WaterPal2:
000046FE 6100 E330                  		bsr.w	PalLoad4_Water
00004702                            
00004702                            Level_Delay:
00004702 323C 0003                  		move.w	#3,d1
00004706                            
00004706                            Level_DelayLoop:
00004706 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000470C 6100 F058                  		bsr.w	DelayProgram
00004710 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004714                            
00004714 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000471A 6100 DF7E                  		bsr.w	Pal_FadeTo2
0000471E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004722 6B00                       		bmi.s	Level_ClrCardArt
00004724 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004728 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000472C 5838 D124                  		addq.b	#4,($FFFFD124).w
00004730 5838 D164                  		addq.b	#4,($FFFFD164).w
00004734 6000                       		bra.s	Level_StartGame
00004736                            ; ===========================================================================
00004736                            
00004736                            Level_ClrCardArt:
00004736 7002                       		moveq	#2,d0
00004738 4EB9 0000 1DA2             		jsr	(LoadPLC).l	; load explosion patterns
0000473E 4EB9 0000 1D84             		jsr	(LoadAnimalPLC).l ; load animal patterns
00004744                            Level_StartGame:
00004744 08B8 0007 FF94             		bclr	#7,($FFFFFF94).w ; subtract 80 from screen mode
0000474A 4EF9 0000 0000             		jmp	Level_MainLoop
00004750                            ; ---------------------------------------------------------------------------
00004750                            ; Main level loop (when	all title card and loading sequences are finished)
00004750                            ; ---------------------------------------------------------------------------
00004750                            Go_To_Cheat1_3:
00004750 11FC 0024 FF94             		move.b	#$24,($FFFFFF94).w ; go to title screen
00004756 4E75                       		rts	
00004758                            Level_MainLoop:
00004758 4EB8 1A72                  		jsr	MoveInAir
0000475C 4EB8 1A3A                  		jsr	EmeraldSS
00004760 6100 D39E                  		bsr.w	PauseGame
00004764 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000476A 6100 EFFA                  		bsr.w	DelayProgram
0000476E 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004772 6100 0000                  		bsr.w	MoveSonicInDemo
00004776 6100 0000                  		bsr.w	LZWaterEffects
0000477A 4EB9 0000 0000             		jsr	ObjectsLoad
00004780 4A78 FE08                  		tst.w	($FFFFFE08).w
00004784 6600                       		bne.s	loc_3B10
00004786 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000478C 6400                       		bcc.s	loc_3B14
0000478E                            
0000478E                            loc_3B10:
0000478E 6100 0000                  		bsr.w	DeformBgLayer
00004792                            
00004792                            loc_3B14:
00004792 4EB9 0000 0000             		jsr	BuildSprites
00004798 4EB9 0000 0000             		jsr	ObjPosLoad
0000479E 6100 D9BE                  		bsr.w	PalCycle_Load
000047A2 6100 D66A                  		bsr.w	RunPLC_RAM
000047A6 6100 0000                  		bsr.w	OscillateNumDo
000047AA 6100 0000                  		bsr.w	ChangeRingFrame
000047AE 6100 0000                  		bsr.w	SignpostArtLoad
000047B2 0C78 0001 F600             		cmpi.w	#1,($FFFFF600).w
000047B8 6500                       		bcs.s	Level_Continue
000047BA 4EF8 4750                  		jmp	Go_To_Cheat1_3
000047BE                            Level_Continue:
000047BE 0C38 0008 FF94             		cmpi.b	#8,($FFFFFF94).w
000047C4 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000047C6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000047CA 6600 FBEA                  		bne.w	Level		; if yes, branch
000047CE 0C38 000C FF94             		cmpi.b	#$C,($FFFFFF94).w
000047D4 6700 FF82                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000047D8 4E75                       		rts	
000047DA                            ; ===========================================================================
000047DA                            
000047DA                            Level_ChkDemo:				; XREF: Level_MainLoop
000047DA 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000047DE 6600                       		bne.s	Level_EndDemo	; if yes, branch
000047E0 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000047E4 6700                       		beq.s	Level_EndDemo	; if not, branch
000047E6 0C38 0008 FF94             		cmpi.b	#8,($FFFFFF94).w
000047EC 6700 FF6A                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000047F0 11FC 0000 FF94             		move.b	#0,($FFFFFF94).w ; go to Sega screen
000047F6 4E75                       		rts	
000047F8                            ; ===========================================================================
000047F8                            
000047F8                            Level_EndDemo:				; XREF: Level_ChkDemo
000047F8 0C38 0008 FF94             		cmpi.b	#8,($FFFFFF94).w ; is screen mode 08 (demo)?
000047FE 6600                       		bne.s	loc_3B88	; if not, branch
00004800 11FC 0000 FF94             		move.b	#0,($FFFFFF94).w ; go to Sega screen
00004806 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000480A 6A00                       		bpl.s	loc_3B88	; if yes, branch
0000480C 11FC 001C FF94             		move.b	#$1C,($FFFFFF94).w ; go	to credits
00004812                            
00004812                            loc_3B88:
00004812 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004818 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000481E 4278 F794                  		clr.w	($FFFFF794).w
00004822                            
00004822                            loc_3B98:
00004822 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004828 6100 EF3C                  		bsr.w	DelayProgram
0000482C 6100 0000                  		bsr.w	MoveSonicInDemo
00004830 4EB9 0000 0000             		jsr	ObjectsLoad
00004836 4EB9 0000 0000             		jsr	BuildSprites
0000483C 4EB9 0000 0000             		jsr	ObjPosLoad
00004842 5378 F794                  		subq.w	#1,($FFFFF794).w
00004846 6A00                       		bpl.s	loc_3BC8
00004848 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000484E 6100 DF08                  		bsr.w	Pal_FadeOut
00004852                            
00004852                            loc_3BC8:
00004852 4A78 F614                  		tst.w	($FFFFF614).w
00004856 66CA                       		bne.s	loc_3B98
00004858 4E75                       		rts	
0000485A                            ; ===========================================================================
0000485A                            ; ---------------------------------------------------------------------------
0000485A                            ; Subroutine to	do special water effects in Labyrinth Zone
0000485A                            ; ---------------------------------------------------------------------------
0000485A                            
0000485A                            LZWaterEffects:				; XREF: Level
0000485A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004860 6600                       		bne.s	locret_3C28	; if not, branch
00004862 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004868 6400                       		bcc.s	LZMoveWater
0000486A 6100 0000                  		bsr.w	LZWindTunnels
0000486E 6100 0000                  		bsr.w	LZWaterSlides
00004872 6100 0000                  		bsr.w	LZDynamicWater
00004876                            
00004876                            LZMoveWater:
00004876 4238 F64E                  		clr.b	($FFFFF64E).w
0000487A 7000                       		moveq	#0,d0
0000487C 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004880 E248                       		lsr.w	#1,d0
00004882 D078 F648                  		add.w	($FFFFF648).w,d0
00004886 31C0 F646                  		move.w	d0,($FFFFF646).w
0000488A 3038 F646                  		move.w	($FFFFF646).w,d0
0000488E 9078 F704                  		sub.w	($FFFFF704).w,d0
00004892 6400                       		bcc.s	loc_3C1A
00004894 4A40                       		tst.w	d0
00004896 6A00                       		bpl.s	loc_3C1A
00004898 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000489E 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000048A4                            
000048A4                            loc_3C1A:
000048A4 0C40 00DF                  		cmpi.w	#$DF,d0
000048A8 6500                       		bcs.s	loc_3C24
000048AA 303C 00DF                  		move.w	#$DF,d0
000048AE                            
000048AE                            loc_3C24:
000048AE 11C0 F625                  		move.b	d0,($FFFFF625).w
000048B2                            
000048B2                            locret_3C28:
000048B2 4E75                       		rts	
000048B4                            ; ===========================================================================
000048B4                            ; ---------------------------------------------------------------------------
000048B4                            ; Labyrinth default water heights
000048B4                            ; ---------------------------------------------------------------------------
000048B4                            WaterHeight:	incbin	misc\lz_heigh.bin
000048BC                            		even
000048BC                            ; ===========================================================================
000048BC                            
000048BC                            ; ---------------------------------------------------------------------------
000048BC                            ; Labyrinth dynamic water routines
000048BC                            ; ---------------------------------------------------------------------------
000048BC                            
000048BC                            LZDynamicWater:				; XREF: LZWaterEffects
000048BC 7000                       		moveq	#0,d0
000048BE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000048C2 D040                       		add.w	d0,d0
000048C4 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000048C8 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000048CC 7200                       		moveq	#0,d1
000048CE 1238 F64C                  		move.b	($FFFFF64C).w,d1
000048D2 3038 F64A                  		move.w	($FFFFF64A).w,d0
000048D6 9078 F648                  		sub.w	($FFFFF648).w,d0
000048DA 6700                       		beq.s	locret_3C5A
000048DC 6400                       		bcc.s	loc_3C56
000048DE 4441                       		neg.w	d1
000048E0                            
000048E0                            loc_3C56:
000048E0 D378 F648                  		add.w	d1,($FFFFF648).w
000048E4                            
000048E4                            locret_3C5A:
000048E4 4E75                       		rts	
000048E6                            ; ===========================================================================
000048E6 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000048E8 0000                       		dc.w DynWater_LZ2-DynWater_Index
000048EA 0000                       		dc.w DynWater_LZ3-DynWater_Index
000048EC 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000048EE                            ; ===========================================================================
000048EE                            
000048EE                            DynWater_LZ1:				; XREF: DynWater_Index
000048EE 3038 F700                  		move.w	($FFFFF700).w,d0
000048F2 323C 0328                  		move.w	#$328,d1
000048F6 0C40 0600                  		cmpi.w	#$600,d0
000048FA 6500                       		bcs.s	loc_3CB4
000048FC 323C 0200                  		move.w	#$200,d1
00004900 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004906 6500                       		bcs.s	loc_3CBA
00004908 0C40 0C00                  		cmpi.w	#$C00,d0
0000490C 6500                       		bcs.s	loc_3CB4
0000490E 323C 0318                  		move.w	#$318,d1
00004912 0C40 1080                  		cmpi.w	#$1080,d0
00004916 6500                       		bcs.s	loc_3CB4
00004918 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000491E 323C 05C8                  		move.w	#$5C8,d1
00004922 0C40 1380                  		cmpi.w	#$1380,d0
00004926 6500                       		bcs.s	loc_3CB4
00004928 323C 03A8                  		move.w	#$3A8,d1
0000492C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004930 6600                       		bne.s	loc_3CB4
00004932 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004938                            
00004938                            loc_3CB4:
00004938 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000493C 4E75                       		rts	
0000493E                            ; ===========================================================================
0000493E                            
0000493E                            loc_3CBA:				; XREF: DynWater_LZ1
0000493E 0C40 0C80                  		cmpi.w	#$C80,d0
00004942 65F4                       		bcs.s	loc_3CB4
00004944 323C 00E8                  		move.w	#$E8,d1
00004948 0C40 1500                  		cmpi.w	#$1500,d0
0000494C 65EA                       		bcs.s	loc_3CB4
0000494E 323C 0108                  		move.w	#$108,d1
00004952 60E4                       		bra.s	loc_3CB4
00004954                            ; ===========================================================================
00004954                            
00004954                            loc_3CD0:				; XREF: DynWater_LZ1
00004954 5302                       		subq.b	#1,d2
00004956 6600                       		bne.s	locret_3CF4
00004958 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000495E 6400                       		bcc.s	locret_3CF4
00004960 323C 03A8                  		move.w	#$3A8,d1
00004964 0C40 1300                  		cmpi.w	#$1300,d0
00004968 6500                       		bcs.s	loc_3CF0
0000496A 323C 0108                  		move.w	#$108,d1
0000496E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004974                            
00004974                            loc_3CF0:
00004974 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004978                            
00004978                            locret_3CF4:
00004978 4E75                       		rts	
0000497A                            ; ===========================================================================
0000497A                            
0000497A                            DynWater_LZ2:				; XREF: DynWater_Index
0000497A 3038 F700                  		move.w	($FFFFF700).w,d0
0000497E 323C 0328                  		move.w	#$328,d1
00004982 0C40 0500                  		cmpi.w	#$500,d0
00004986 6500                       		bcs.s	loc_3D12
00004988 323C 03C8                  		move.w	#$3C8,d1
0000498C 0C40 0B00                  		cmpi.w	#$B00,d0
00004990 6500                       		bcs.s	loc_3D12
00004992 323C 0428                  		move.w	#$428,d1
00004996                            
00004996                            loc_3D12:
00004996 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000499A 4E75                       		rts	
0000499C                            ; ===========================================================================
0000499C                            
0000499C                            DynWater_LZ3:				; XREF: DynWater_Index
0000499C 3038 F700                  		move.w	($FFFFF700).w,d0
000049A0 1438 F64D                  		move.b	($FFFFF64D).w,d2
000049A4 6600                       		bne.s	loc_3D5E
000049A6 323C 0900                  		move.w	#$900,d1
000049AA 0C40 0600                  		cmpi.w	#$600,d0
000049AE 6500                       		bcs.s	loc_3D54
000049B0 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
000049B6 6500                       		bcs.s	loc_3D54
000049B8 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000049BE 6400                       		bcc.s	loc_3D54
000049C0 323C 04C8                  		move.w	#$4C8,d1
000049C4 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
000049CA 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000049D0 303C 00B7                  		move.w	#$B7,d0
000049D4 6100 D036                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000049D8                            
000049D8                            loc_3D54:
000049D8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000049DC 31C1 F648                  		move.w	d1,($FFFFF648).w
000049E0 4E75                       		rts	
000049E2                            ; ===========================================================================
000049E2                            
000049E2                            loc_3D5E:				; XREF: DynWater_LZ3
000049E2 5302                       		subq.b	#1,d2
000049E4 6600                       		bne.s	loc_3DA8
000049E6 323C 04C8                  		move.w	#$4C8,d1
000049EA 0C40 0770                  		cmpi.w	#$770,d0
000049EE 6500                       		bcs.s	loc_3DA2
000049F0 323C 0308                  		move.w	#$308,d1
000049F4 0C40 1400                  		cmpi.w	#$1400,d0
000049F8 6500                       		bcs.s	loc_3DA2
000049FA 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004A00 6700                       		beq.s	loc_3D8E
00004A02 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004A08 6400                       		bcc.s	loc_3D8E
00004A0A 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004A10 6400                       		bcc.s	loc_3DA2
00004A12                            
00004A12                            loc_3D8E:
00004A12 323C 0508                  		move.w	#$508,d1
00004A16 31C1 F648                  		move.w	d1,($FFFFF648).w
00004A1A 0C40 1770                  		cmpi.w	#$1770,d0
00004A1E 6500                       		bcs.s	loc_3DA2
00004A20 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004A26                            
00004A26                            loc_3DA2:
00004A26 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A2A 4E75                       		rts	
00004A2C                            ; ===========================================================================
00004A2C                            
00004A2C                            loc_3DA8:
00004A2C 5302                       		subq.b	#1,d2
00004A2E 6600                       		bne.s	loc_3DD2
00004A30 323C 0508                  		move.w	#$508,d1
00004A34 0C40 1860                  		cmpi.w	#$1860,d0
00004A38 6500                       		bcs.s	loc_3DCC
00004A3A 323C 0188                  		move.w	#$188,d1
00004A3E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004A42 6400                       		bcc.s	loc_3DC6
00004A44 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004A48 6600                       		bne.s	loc_3DCC
00004A4A                            
00004A4A                            loc_3DC6:
00004A4A 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004A50                            
00004A50                            loc_3DCC:
00004A50 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A54 4E75                       		rts	
00004A56                            ; ===========================================================================
00004A56                            
00004A56                            loc_3DD2:
00004A56 5302                       		subq.b	#1,d2
00004A58 6600                       		bne.s	loc_3E0E
00004A5A 323C 0188                  		move.w	#$188,d1
00004A5E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004A62 6500                       		bcs.s	loc_3E04
00004A64 323C 0900                  		move.w	#$900,d1
00004A68 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004A6C 6500                       		bcs.s	loc_3E04
00004A6E 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004A74 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004A7A 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004A80 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004A86 4E75                       		rts	
00004A88                            ; ===========================================================================
00004A88                            
00004A88                            loc_3E04:
00004A88 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A8C 31C1 F648                  		move.w	d1,($FFFFF648).w
00004A90 4E75                       		rts	
00004A92                            ; ===========================================================================
00004A92                            
00004A92                            loc_3E0E:
00004A92 0C40 1E00                  		cmpi.w	#$1E00,d0
00004A96 6500                       		bcs.s	locret_3E1A
00004A98 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004A9E                            
00004A9E                            locret_3E1A:
00004A9E 4E75                       		rts	
00004AA0                            ; ===========================================================================
00004AA0                            
00004AA0                            DynWater_SBZ3:				; XREF: DynWater_Index
00004AA0 323C 0228                  		move.w	#$228,d1
00004AA4 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004AAA 6500                       		bcs.s	loc_3E2C
00004AAC 323C 04C8                  		move.w	#$4C8,d1
00004AB0                            
00004AB0                            loc_3E2C:
00004AB0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004AB4 4E75                       		rts
00004AB6                            
00004AB6                            ; ---------------------------------------------------------------------------
00004AB6                            ; Labyrinth Zone "wind tunnels"	subroutine
00004AB6                            ; ---------------------------------------------------------------------------
00004AB6                            
00004AB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004AB6                            
00004AB6                            
00004AB6                            LZWindTunnels:				; XREF: LZWaterEffects
00004AB6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004ABA 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004ABE 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004AC4 7000                       		moveq	#0,d0
00004AC6 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004ACA E748                       		lsl.w	#3,d0
00004ACC D4C0                       		adda.w	d0,a2
00004ACE 7200                       		moveq	#0,d1
00004AD0 4A38 FE11                  		tst.b	($FFFFFE11).w
00004AD4 6600                       		bne.s	loc_3E56
00004AD6 7201                       		moveq	#1,d1
00004AD8 514A                       		subq.w	#8,a2
00004ADA                            
00004ADA                            loc_3E56:
00004ADA 43F8 D000                  		lea	($FFFFD000).w,a1
00004ADE                            
00004ADE                            LZWind_Loop:
00004ADE 3029 0008                  		move.w	8(a1),d0
00004AE2 B052                       		cmp.w	(a2),d0
00004AE4 6500 0000                  		bcs.w	loc_3EF4
00004AE8 B06A 0004                  		cmp.w	4(a2),d0
00004AEC 6400 0000                  		bcc.w	loc_3EF4
00004AF0 3429 000C                  		move.w	$C(a1),d2
00004AF4 B46A 0002                  		cmp.w	2(a2),d2
00004AF8 6500                       		bcs.s	loc_3EF4
00004AFA B46A 0006                  		cmp.w	6(a2),d2
00004AFE 6400                       		bcc.s	loc_3EF4
00004B00 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004B04 0200 003F                  		andi.b	#$3F,d0
00004B08 6600                       		bne.s	loc_3E90
00004B0A 303C 00D0                  		move.w	#$D0,d0
00004B0E 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004B14                            
00004B14                            loc_3E90:
00004B14 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004B18 6600 0000                  		bne.w	locret_3F0A
00004B1C 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004B22 6400                       		bcc.s	loc_3F06
00004B24 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004B2A 0440 0080                  		subi.w	#$80,d0
00004B2E B052                       		cmp.w	(a2),d0
00004B30 6400                       		bcc.s	LZWind_Move
00004B32 7002                       		moveq	#2,d0
00004B34 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004B3A 6600                       		bne.s	loc_3EBA
00004B3C 4440                       		neg.w	d0
00004B3E                            
00004B3E                            loc_3EBA:
00004B3E D169 000C                  		add.w	d0,$C(a1)
00004B42                            
00004B42                            LZWind_Move:
00004B42 5869 0008                  		addq.w	#4,8(a1)
00004B46 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004B4C 337C 0000 0012             		move.w	#0,$12(a1)
00004B52 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004B58 08E9 0001 0022             		bset	#1,$22(a1)
00004B5E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004B64 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004B66 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004B6A                            
00004B6A                            LZWind_MoveDown:
00004B6A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004B70 6700                       		beq.s	locret_3EF2	; if not, branch
00004B72 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004B76                            
00004B76                            locret_3EF2:
00004B76 4E75                       		rts	
00004B78                            ; ===========================================================================
00004B78                            
00004B78                            loc_3EF4:				; XREF: LZWindTunnels
00004B78 504A                       		addq.w	#8,a2
00004B7A 51C9 FF62                  		dbf	d1,LZWind_Loop
00004B7E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004B82 6700                       		beq.s	locret_3F0A
00004B84 137C 0000 001C             		move.b	#0,$1C(a1)
00004B8A                            
00004B8A                            loc_3F06:
00004B8A 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004B8E                            
00004B8E                            locret_3F0A:
00004B8E 4E75                       		rts	
00004B90                            ; End of function LZWindTunnels
00004B90                            
00004B90                            ; ===========================================================================
00004B90 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004B98 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004BAA 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004BB8                            					; XREF: LZWindTunnels
00004BB8                            		even
00004BB8                            
00004BB8                            ; ---------------------------------------------------------------------------
00004BB8                            ; Labyrinth Zone water slide subroutine
00004BB8                            ; ---------------------------------------------------------------------------
00004BB8                            
00004BB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BB8                            
00004BB8                            
00004BB8                            LZWaterSlides:				; XREF: LZWaterEffects
00004BB8 43F8 D000                  		lea	($FFFFD000).w,a1
00004BBC 0829 0001 0022             		btst	#1,$22(a1)
00004BC2 6600                       		bne.s	loc_3F6A
00004BC4 3029 000C                  		move.w	$C(a1),d0
00004BC8 E248                       		lsr.w	#1,d0
00004BCA 0240 0380                  		andi.w	#$380,d0
00004BCE 1229 0008                  		move.b	8(a1),d1
00004BD2 0241 007F                  		andi.w	#$7F,d1
00004BD6 D041                       		add.w	d1,d0
00004BD8 45F8 A400                  		lea	($FFFFA400).w,a2
00004BDC 1032 0000                  		move.b	(a2,d0.w),d0
00004BE0 45FA 0000                  		lea	byte_3FCF(pc),a2
00004BE4 7206                       		moveq	#6,d1
00004BE6                            
00004BE6                            loc_3F62:
00004BE6 B022                       		cmp.b	-(a2),d0
00004BE8 57C9 FFFC                  		dbeq	d1,loc_3F62
00004BEC 6700                       		beq.s	LZSlide_Move
00004BEE                            
00004BEE                            loc_3F6A:
00004BEE 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004BF2 6700                       		beq.s	locret_3F7A
00004BF4 337C 0005 003E             		move.w	#5,$3E(a1)
00004BFA 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004BFE                            
00004BFE                            locret_3F7A:
00004BFE 4E75                       		rts	
00004C00                            ; ===========================================================================
00004C00                            
00004C00                            LZSlide_Move:				; XREF: LZWaterSlides
00004C00 0C41 0003                  		cmpi.w	#3,d1
00004C04 6400                       		bcc.s	loc_3F84
00004C06 4E71                       		nop	
00004C08                            
00004C08                            loc_3F84:
00004C08 08A9 0000 0022             		bclr	#0,$22(a1)
00004C0E 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004C12 1340 0014                  		move.b	d0,$14(a1)
00004C16 6A00                       		bpl.s	loc_3F9A
00004C18 08E9 0000 0022             		bset	#0,$22(a1)
00004C1E                            
00004C1E                            loc_3F9A:
00004C1E 4229 0015                  		clr.b	$15(a1)
00004C22 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004C28 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004C2E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004C32 0200 001F                  		andi.b	#$1F,d0
00004C36 6600                       		bne.s	locret_3FBE
00004C38 303C 00D0                  		move.w	#$D0,d0
00004C3C 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play water sound
00004C42                            
00004C42                            locret_3FBE:
00004C42 4E75                       		rts	
00004C44                            ; End of function LZWaterSlides
00004C44                            
00004C44                            ; ===========================================================================
00004C44 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004C53 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004C54                            		even
00004C54                            
00004C54                            ; ---------------------------------------------------------------------------
00004C54                            ; Subroutine to	move Sonic in demo mode
00004C54                            ; ---------------------------------------------------------------------------
00004C54                            
00004C54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C54                            
00004C54                            
00004C54                            MoveSonicInDemo:
00004C54 4A78 FFF0                  	        tst.w    ($FFFFFFF0).w    ; is demo mode on?
00004C58 6600                       	        bne.s    MoveDemo_On    ; if yes, branch
00004C5A 4E75                       	        rts
00004C5C                            
00004C5C                            ; ===========================================================================
00004C5C                            
00004C5C                            ; This is an unused subroutine for recording a demo
00004C5C                            
00004C5C                            MoveDemo_Record:
00004C5C                                ;   	lea    ($80000).l,a1
00004C5C 43F9 0020 0400                     	lea    ($200400).l,a1
00004C62 3038 F790                          	move.w    ($FFFFF790).w,d0
00004C66 D2C0                               	adda.w    d0,a1
00004C68 1038 F604                          	move.b    ($FFFFF604).w,d0
00004C6C B011                               	cmp.b    (a1),d0
00004C6E 6600                               	bne.s    loc_3FFA
00004C70 5229 0001                          	addq.b    #1,1(a1)
00004C74 0C29 00FF 0001                     	cmpi.b    #$FF,1(a1)
00004C7A 6700                               	beq.s    loc_3FFA
00004C7C 4E75                       	        rts    
00004C7E                            ; ===========================================================================
00004C7E                            
00004C7E                            loc_3FFA:                ; XREF: MoveDemo_Record
00004C7E 1340 0002                          	move.b    d0,2(a1)
00004C82 137C 0000 0003                     	move.b    #0,3(a1)
00004C88 5478 F790                          	addq.w    #2,($FFFFF790).w
00004C8C 0278 03FF F790             	        andi.w    #$3FF,($FFFFF790).w
00004C92 4E75                       	        rts    
00004C94                            ; ===========================================================================
00004C94                            
00004C94                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004C94 4A38 F604                  		tst.b	($FFFFF604).w
00004C98 6A00                       		bpl.s	loc_4022
00004C9A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004C9E 6B00                       		bmi.s	loc_4022
00004CA0 11FC 0004 FF94             		move.b	#4,($FFFFFF94).w
00004CA6                            
00004CA6                            loc_4022:
00004CA6 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004CAC 7000                       		moveq	#0,d0
00004CAE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004CB2 0C38 0010 FF94             		cmpi.b	#$10,($FFFFFF94).w
00004CB8 6600                       		bne.s	loc_4038
00004CBA 7006                       		moveq	#6,d0
00004CBC                            
00004CBC                            loc_4038:
00004CBC E548                       		lsl.w	#2,d0
00004CBE 2271 0000                  		movea.l	(a1,d0.w),a1
00004CC2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004CC6 6A00                       		bpl.s	loc_4056
00004CC8 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004CCE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004CD2 5340                       		subq.w	#1,d0
00004CD4 E548                       		lsl.w	#2,d0
00004CD6 2271 0000                  		movea.l	(a1,d0.w),a1
00004CDA                            
00004CDA                            loc_4056:
00004CDA 3038 F790                  		move.w	($FFFFF790).w,d0
00004CDE D2C0                       		adda.w	d0,a1
00004CE0 1011                       		move.b	(a1),d0
00004CE2 41F8 F604                  		lea	($FFFFF604).w,a0
00004CE6 1200                       		move.b	d0,d1
00004CE8 1428 FFFE                  		move.b	-2(a0),d2
00004CEC B500                       		eor.b	d2,d0
00004CEE 10C1                       		move.b	d1,(a0)+
00004CF0 C001                       		and.b	d1,d0
00004CF2 10C0                       		move.b	d0,(a0)+
00004CF4 5338 F792                  		subq.b	#1,($FFFFF792).w
00004CF8 6400                       		bcc.s	locret_407E
00004CFA 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004D00 5478 F790                  		addq.w	#2,($FFFFF790).w
00004D04                            
00004D04                            locret_407E:
00004D04 4E75                       		rts	
00004D06                            ; End of function MoveSonicInDemo
00004D06                            
00004D06                            ; ===========================================================================
00004D06                            ; ---------------------------------------------------------------------------
00004D06                            ; Demo sequence	pointers
00004D06                            ; ---------------------------------------------------------------------------
00004D06                            Demo_Index:
00004D06                            	include "_inc\Demo pointers for intro.asm"
00004D06                            ; ---------------------------------------------------------------------------
00004D06                            ; Demo sequence	pointers
00004D06                            ; ---------------------------------------------------------------------------
00004D06 0000 0000                  	dc.l Demo_GHZ
00004D0A 0000 0000                  	dc.l Demo_GHZ
00004D0E 0000 0000                  	dc.l Demo_MZ
00004D12 0000 0000                  	dc.l Demo_MZ
00004D16 0000 0000                  	dc.l Demo_SYZ
00004D1A 0000 0000                  	dc.l Demo_SYZ
00004D1E 0000 0000                  	dc.l Demo_SS
00004D22 0000 0000                  	dc.l Demo_SS
00004D22 0000 0000                  	dc.l Demo_SS
00004D26                            
00004D26                            Demo_EndIndex:
00004D26                            	include "_inc\Demo pointers for ending.asm"
00004D26                            ; ---------------------------------------------------------------------------
00004D26                            ; Demo (ending) sequence pointers
00004D26                            ; ---------------------------------------------------------------------------
00004D26 0000 0000                  	dc.l Demo_EndGHZ1
00004D2A 0000 0000                  	dc.l Demo_EndMZ
00004D2E 0000 0000                  	dc.l Demo_EndSYZ
00004D32 0000 0000                  	dc.l Demo_EndLZ
00004D36 0000 0000                  	dc.l Demo_EndSLZ
00004D3A 0000 0000                  	dc.l Demo_EndSBZ1
00004D3E 0000 0000                  	dc.l Demo_EndSBZ2
00004D42 0000 0000                  	dc.l Demo_EndGHZ2
00004D42 0000 0000                  	dc.l Demo_EndGHZ2
00004D46                            
00004D46 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004D56 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004D66 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004D76                            		even
00004D76                            
00004D76                            ; ---------------------------------------------------------------------------
00004D76                            ; Collision index loading subroutine
00004D76                            ; ---------------------------------------------------------------------------
00004D76                            
00004D76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D76                            
00004D76                            
00004D76                            ColIndexLoad:				; XREF: Level
00004D76 7000                       		moveq	#0,d0
00004D78 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004D7C E548                       		lsl.w	#2,d0
00004D7E 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004D84 4E75                       		rts	
00004D86                            ; End of function ColIndexLoad
00004D86                            
00004D86                            ; ===========================================================================
00004D86                            ; ---------------------------------------------------------------------------
00004D86                            ; Collision index pointers
00004D86                            ; ---------------------------------------------------------------------------
00004D86                            ColPointers:
00004D86                            	include "_inc\Collision index pointers.asm"
00004D86                            ; ---------------------------------------------------------------------------
00004D86                            ; Collision index pointers
00004D86                            ; ---------------------------------------------------------------------------
00004D86 0000 0000                  	dc.l Col_GHZ
00004D8A 0000 0000                  	dc.l Col_LZ
00004D8E 0000 0000                  	dc.l Col_MZ
00004D92 0000 0000                  	dc.l Col_SLZ
00004D96 0000 0000                  	dc.l Col_SYZ
00004D9A 0000 0000                  	dc.l Col_SBZ
00004D9E 0000 0000                  	dc.l Col_GHZ	; Ending sequence
00004DA2 0000 0000                  	dc.l Col_ABZ
00004DA6 0000 0000                  	dc.l Col_IC
00004DAA 0000 0000                  	dc.l Col_SZ
00004DAA 0000 0000                  	dc.l Col_SZ
00004DAE                            
00004DAE                            ; ---------------------------------------------------------------------------
00004DAE                            ; Oscillating number subroutine
00004DAE                            ; ---------------------------------------------------------------------------
00004DAE                            
00004DAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DAE                            
00004DAE                            
00004DAE                            OscillateNumInit:			; XREF: Level
00004DAE 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004DB2 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004DB8 7220                       		moveq	#$20,d1
00004DBA                            
00004DBA                            Osc_Loop:
00004DBA 32DA                       		move.w	(a2)+,(a1)+
00004DBC 51C9 FFFC                  		dbf	d1,Osc_Loop
00004DC0 4E75                       		rts	
00004DC2                            ; End of function OscillateNumInit
00004DC2                            
00004DC2                            ; ===========================================================================
00004DC2 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004DC6 0000 0080                  		dc.w 0,	$80
00004DCA 0000 0080                  		dc.w 0,	$80
00004DCE 0000 0080                  		dc.w 0,	$80
00004DD2 0000 0080                  		dc.w 0,	$80
00004DD6 0000 0080                  		dc.w 0,	$80
00004DDA 0000 0080                  		dc.w 0,	$80
00004DDE 0000 0080                  		dc.w 0,	$80
00004DE2 0000 0080                  		dc.w 0,	$80
00004DE6 0000 50F0                  		dc.w 0,	$50F0
00004DEA 011E 2080                  		dc.w $11E, $2080
00004DEE 00B4 3080                  		dc.w $B4, $3080
00004DF2 010E 5080                  		dc.w $10E, $5080
00004DF6 01C2 7080                  		dc.w $1C2, $7080
00004DFA 0276 0080                  		dc.w $276, $80
00004DFE 0000 0080                  		dc.w 0,	$80
00004E02 0000                       		dc.w 0
00004E04                            		even
00004E04                            
00004E04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E04                            
00004E04                            
00004E04                            OscillateNumDo:				; XREF: Level
00004E04 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004E0A 6400                       		bcc.s	locret_41C4
00004E0C 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004E10 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004E16 3619                       		move.w	(a1)+,d3
00004E18 720F                       		moveq	#$F,d1
00004E1A                            
00004E1A                            loc_4184:
00004E1A 341A                       		move.w	(a2)+,d2
00004E1C 381A                       		move.w	(a2)+,d4
00004E1E 0303                       		btst	d1,d3
00004E20 6600                       		bne.s	loc_41A4
00004E22 3029 0002                  		move.w	2(a1),d0
00004E26 D042                       		add.w	d2,d0
00004E28 3340 0002                  		move.w	d0,2(a1)
00004E2C D151                       		add.w	d0,0(a1)
00004E2E B811                       		cmp.b	0(a1),d4
00004E30 6200                       		bhi.s	loc_41BA
00004E32 03C3                       		bset	d1,d3
00004E34 6000                       		bra.s	loc_41BA
00004E36                            ; ===========================================================================
00004E36                            
00004E36                            loc_41A4:				; XREF: OscillateNumDo
00004E36 3029 0002                  		move.w	2(a1),d0
00004E3A 9042                       		sub.w	d2,d0
00004E3C 3340 0002                  		move.w	d0,2(a1)
00004E40 D151                       		add.w	d0,0(a1)
00004E42 B811                       		cmp.b	0(a1),d4
00004E44 6300                       		bls.s	loc_41BA
00004E46 0383                       		bclr	d1,d3
00004E48                            
00004E48                            loc_41BA:
00004E48 5849                       		addq.w	#4,a1
00004E4A 51C9 FFCE                  		dbf	d1,loc_4184
00004E4E 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004E52                            
00004E52                            locret_41C4:
00004E52 4E75                       		rts	
00004E54                            ; End of function OscillateNumDo
00004E54                            
00004E54                            ; ===========================================================================
00004E54 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004E58 0002 0018                  		dc.w 2,	$18
00004E5C 0002 0020                  		dc.w 2,	$20
00004E60 0002 0030                  		dc.w 2,	$30
00004E64 0004 0020                  		dc.w 4,	$20
00004E68 0008 0008                  		dc.w 8,	8
00004E6C 0008 0040                  		dc.w 8,	$40
00004E70 0004 0040                  		dc.w 4,	$40
00004E74 0002 0050                  		dc.w 2,	$50
00004E78 0002 0050                  		dc.w 2,	$50
00004E7C 0002 0020                  		dc.w 2,	$20
00004E80 0003 0030                  		dc.w 3,	$30
00004E84 0005 0050                  		dc.w 5,	$50
00004E88 0007 0070                  		dc.w 7,	$70
00004E8C 0002 0010                  		dc.w 2,	$10
00004E90 0002 0010                  		dc.w 2,	$10
00004E94                            		even
00004E94                            
00004E94                            ; ---------------------------------------------------------------------------
00004E94                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004E94                            ; ---------------------------------------------------------------------------
00004E94                            
00004E94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E94                            
00004E94                            
00004E94                            ChangeRingFrame:			; XREF: Level
00004E94 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004E98 6A00                       		bpl.s	loc_421C
00004E9A 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004EA0 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004EA4 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004EAA                            
00004EAA                            loc_421C:
00004EAA 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004EAE 6A00                       		bpl.s	loc_4232
00004EB0 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004EB6 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004EBA 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004EC0                            
00004EC0                            loc_4232:
00004EC0 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004EC4 6A00                       		bpl.s	loc_4250
00004EC6 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004ECC 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004ED0 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004ED6 6500                       		bcs.s	loc_4250
00004ED8 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004EDE                            
00004EDE                            loc_4250:
00004EDE 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004EE2 6700                       		beq.s	locret_4272
00004EE4 7000                       		moveq	#0,d0
00004EE6 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004EEA D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004EEE 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004EF2 EF58                       		rol.w	#7,d0
00004EF4 0240 0003                  		andi.w	#3,d0
00004EF8 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004EFC 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004F00                            
00004F00                            locret_4272:
00004F00 4E75                       		rts	
00004F02                            ; End of function ChangeRingFrame
00004F02                            
00004F02                            ; ---------------------------------------------------------------------------
00004F02                            ; End-of-act signpost pattern loading subroutine
00004F02                            ; ---------------------------------------------------------------------------
00004F02                            
00004F02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F02                            
00004F02                            
00004F02                            SignpostArtLoad:			; XREF: Level
00004F02 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004F06 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004F0A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004F10 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004F12 0C78 0000 FE10             		cmpi.w	#$0000,($FFFFFE10).w
00004F18 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004F1A 3038 F700                  		move.w	($FFFFF700).w,d0
00004F1E 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004F22 0441 0100                  		subi.w	#$100,d1
00004F26 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004F28 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004F2A 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004F2E 6700                       		beq.s	Signpost_Exit
00004F30 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004F34 6700                       		beq.s	Signpost_Exit
00004F36 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004F3A 7012                       		moveq	#$12,d0
00004F3C 6000 CE96                  		bra.w	LoadPLC2	; load signpost	patterns
00004F40                            ; ===========================================================================
00004F40                            
00004F40                            Signpost_Exit:
00004F40 4E75                       		rts	
00004F42                            ; End of function SignpostArtLoad
00004F42                            
00004F42                            ; ===========================================================================
00004F42                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004FC2                            Demo_MZ:	incbin	demodata\i_mz.bin
000050F2                            Demo_SYZ:	incbin	demodata\i_syz.bin
000054F2                            Demo_SS:	incbin	demodata\i_ss.bin
000055F2                            		even
000055F2                            ; ===========================================================================
000055F2                            
000055F2                            ; ---------------------------------------------------------------------------
000055F2                            ; Special Stage
000055F2                            ; ---------------------------------------------------------------------------
000055F2                            SpecialStage:				; XREF: GameModeArray
000055F2 303C 00E4                  		move.w	#$E4,d0
000055F6 6100 C414                  		bsr.w	PlaySound_Special
000055FA 6100 D264                  		bsr.w	Pal_MakeFlash
000055FE 303C 00CA                  		move.w	#$CA,d0
00005602 6100 C3E0                  		bsr.w	PlaySound
00005606 46FC 2700                  		move	#$2700,sr
0000560A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005610 3CBC 8B03                  		move.w	#$8B03,(a6)
00005614 3CBC 8004                  		move.w	#$8004,(a6)
00005618 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
0000561E 3CBC 9011                  		move.w	#$9011,(a6)
00005622 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005626 0200 00BF                  		andi.b	#$BF,d0
0000562A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005630 6100 C1DE                  		bsr.w	ClearScreen
00005634 46FC 2300                  		move	#$2300,sr
00005638 4BF9 00C0 0004             		lea	($C00004).l,a5
0000563E 3ABC 8F01                  		move.w	#$8F01,(a5)
00005642 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00005648 3ABC 9780                  		move.w	#$9780,(a5)
0000564C 2ABC 5000 0081             		move.l	#$50000081,(a5)
00005652 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000565A                            
0000565A                            loc_463C:
0000565A 3215                       		move.w	(a5),d1
0000565C 0801 0001                  		btst	#1,d1
00005660 66F8                       		bne.s	loc_463C
00005662 3ABC 8F02                  		move.w	#$8F02,(a5)
00005666 6100 0000                  		bsr.w	SS_BGLoad
0000566A 7014                       		moveq	#$14,d0
0000566C 6100 C8A0                  		bsr.w	RunPLC_ROM	; load special stage patterns
00005670 43F8 D000                  		lea	($FFFFD000).w,a1
00005674 7000                       		moveq	#0,d0
00005676 323C 07FF                  		move.w	#$7FF,d1
0000567A                            
0000567A                            SS_ClrObjRam:
0000567A 22C0                       		move.l	d0,(a1)+
0000567C 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00005680                            
00005680 43F8 F700                  		lea	($FFFFF700).w,a1
00005684 7000                       		moveq	#0,d0
00005686 323C 003F                  		move.w	#$3F,d1
0000568A                            
0000568A                            SS_ClrRam:
0000568A 22C0                       		move.l	d0,(a1)+
0000568C 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00005690                            
00005690 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005694 7000                       		moveq	#0,d0
00005696 323C 0027                  		move.w	#$27,d1
0000569A                            
0000569A                            SS_ClrRam2:
0000569A 22C0                       		move.l	d0,(a1)+
0000569C 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000056A0                            
000056A0 43F8 AA00                  		lea	($FFFFAA00).w,a1
000056A4 7000                       		moveq	#0,d0
000056A6 323C 007F                  		move.w	#$7F,d1
000056AA                            
000056AA                            SS_ClrNemRam:
000056AA 22C0                       		move.l	d0,(a1)+
000056AC 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000056B0                            
000056B0 4238 F64E                  		clr.b	($FFFFF64E).w
000056B4 4278 FE02                  		clr.w	($FFFFFE02).w
000056B8 700A                       		moveq	#$A,d0
000056BA 6100 D324                  		bsr.w	PalLoad1	; load special stage pallet
000056BE 4EB9 0000 0000             		jsr	SS_Load
000056C4 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000056CC 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000056D4 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000056DA 6100 0000                  		bsr.w	PalCycle_SS
000056DE 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000056E2 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000056E8 303C 0089                  		move.w	#$89,d0
000056EC 6100 C2F6                  		bsr.w	PlaySound	; play special stage BG	music
000056F0 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000056F6 43F9 0000 4D06             		lea	(Demo_Index).l,a1
000056FC 7006                       		moveq	#6,d0
000056FE E548                       		lsl.w	#2,d0
00005700 2271 0000                  		movea.l	(a1,d0.w),a1
00005704 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
0000570A 5338 F792                  		subq.b	#1,($FFFFF792).w
0000570E 4278 FE20                  		clr.w	($FFFFFE20).w
00005712 4238 FE1B                  		clr.b	($FFFFFE1B).w
00005716 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
0000571C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005722 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00005726 6700                       		beq.s	SS_NoDebug	; if not, branch
00005728 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000572E 6700                       		beq.s	SS_NoDebug	; if not, branch
00005730 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005736                            
00005736                            SS_NoDebug:
00005736 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000573A 0000 0040                  		ori.b	#$40,d0
0000573E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005744 6100 D070                  		bsr.w	Pal_MakeWhite
00005748 4EF9 0000 0000             		jmp	SS_MainLoop
0000574E                            ; ---------------------------------------------------------------------------
0000574E                            ; Main Special Stage loop
0000574E                            ; ---------------------------------------------------------------------------
0000574E                            Go_To_Cheat1_4:
0000574E 11FC 0024 FF94             		move.b	#$24,($FFFFFF94).w ; go to title screen
00005754 4E75                       		rts	
00005756                            SS_MainLoop:
00005756 4A38 F600                  		tst.b	($FFFFF600).w	; 
0000575A 66F2                       		bne.s	Go_To_Cheat1_4	; 
0000575C 6100 C3A2                  		bsr.w	PauseGame
00005760 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00005766 6100 DFFE                  		bsr.w	DelayProgram
0000576A 6100 F4E8                  		bsr.w	MoveSonicInDemo
0000576E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00005774 4EB9 0000 0000             		jsr	ObjectsLoad
0000577A 4EB9 0000 0000             		jsr	BuildSprites
00005780 4EB9 0000 0000             		jsr	SS_ShowLayout
00005786 6100 0000                  		bsr.w	SS_BGAnimate
0000578A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000578E 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005790 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00005794 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00005798                            
00005798                            SS_ChkEnd:
00005798 0C38 0010 FF94             		cmpi.b	#$10,($FFFFFF94).w ; is	game mode $10 (special stage)?
0000579E 6700 FFB6                  		beq.w	SS_MainLoop	; if yes, branch
000057A2                            
000057A2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000057A6 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000057AA 11FC 000C FF94             		move.b	#$C,($FFFFFF94).w ; set	screen mode to $0C (level)
000057B0 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000057B6 6500                       		bcs.s	SS_End		; if not, branch
000057B8 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000057BC                            
000057BC                            SS_End:
000057BC 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000057C2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000057C8 4278 F794                  		clr.w	($FFFFF794).w
000057CC                            
000057CC                            SS_EndLoop:
000057CC 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000057D2 6100 DF92                  		bsr.w	DelayProgram
000057D6 6100 F47C                  		bsr.w	MoveSonicInDemo
000057DA 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000057E0 4EB9 0000 0000             		jsr	ObjectsLoad
000057E6 4EB9 0000 0000             		jsr	BuildSprites
000057EC 4EB9 0000 0000             		jsr	SS_ShowLayout
000057F2 6100 0000                  		bsr.w	SS_BGAnimate
000057F6 5378 F794                  		subq.w	#1,($FFFFF794).w
000057FA 6A00                       		bpl.s	loc_47D4
000057FC 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005802 6100 CF54                  		bsr.w	Pal_FadeOut
00005806                            
00005806                            loc_47D4:
00005806 4A78 F614                  		tst.w	($FFFFF614).w
0000580A 66C0                       		bne.s	SS_EndLoop
0000580C                            
0000580C 46FC 2700                  		move	#$2700,sr
00005810 4DF9 00C0 0004             		lea	($C00004).l,a6
00005816 3CBC 8230                  		move.w	#$8230,(a6)
0000581A 3CBC 8407                  		move.w	#$8407,(a6)
0000581E 3CBC 9001                  		move.w	#$9001,(a6)
00005822 6100 BFEC                  		bsr.w	ClearScreen
00005826 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005830 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005836 6100 C40C                  		bsr.w	NemDec
0000583A 4EB9 0000 0000             		jsr	Hud_Base
00005840 4278 C800                  		clr.w	($FFFFC800).w
00005844 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
0000584C 46FC 2300                  		move	#$2300,sr
00005850 7011                       		moveq	#$11,d0
00005852 6100 D1A8                  		bsr.w	PalLoad2	; load results screen pallet
00005856 7000                       		moveq	#0,d0
00005858 6100 C57A                  		bsr.w	LoadPLC2
0000585C 701B                       		moveq	#$1B,d0
0000585E 6100 C542                  		bsr.w	LoadPLC		; load results screen patterns
00005862 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00005868 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
0000586E 3038 FE20                  		move.w	($FFFFFE20).w,d0
00005872 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005876 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000587A 303C 008E                  		move.w	#$8E,d0
0000587E 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play end-of-level music
00005884 43F8 D000                  		lea	($FFFFD000).w,a1
00005888 7000                       		moveq	#0,d0
0000588A 323C 07FF                  		move.w	#$7FF,d1
0000588E                            
0000588E                            SS_EndClrObjRam:
0000588E 22C0                       		move.l	d0,(a1)+
00005890 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005894                            
00005894 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000589A                            
0000589A                            SS_NormalExit:
0000589A 6100 C264                  		bsr.w	PauseGame
0000589E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000058A4 6100 DEC0                  		bsr.w	DelayProgram
000058A8 4EB9 0000 0000             		jsr	ObjectsLoad
000058AE 4EB9 0000 0000             		jsr	BuildSprites
000058B4 6100 C558                  		bsr.w	RunPLC_RAM
000058B8 4A78 FE02                  		tst.w	($FFFFFE02).w
000058BC 67DC                       		beq.s	SS_NormalExit
000058BE 4AB8 F680                  		tst.l	($FFFFF680).w
000058C2 66D6                       		bne.s	SS_NormalExit
000058C4 303C 00CA                  		move.w	#$CA,d0
000058C8 6100 C142                  		bsr.w	PlaySound_Special ; play special stage exit sound
000058CC 6100 CF92                  		bsr.w	Pal_MakeFlash
000058D0 4E75                       		rts	
000058D2                            ; ===========================================================================
000058D2                            
000058D2                            SS_ToSegaScreen:
000058D2 11FC 0000 FF94             		move.b	#0,($FFFFFF94).w ; set screen mode to 00 (Sega screen)
000058D8 4E75                       		rts
000058DA                            
000058DA                            ; ---------------------------------------------------------------------------
000058DA                            ; Special stage	background loading subroutine
000058DA                            ; ---------------------------------------------------------------------------
000058DA                            
000058DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058DA                            
000058DA                            
000058DA                            SS_BGLoad:				; XREF: SpecialStage
000058DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000058E0 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000058E6 303C 4051                  		move.w	#$4051,d0
000058EA 6100 C654                  		bsr.w	EniDec
000058EE 263C 5000 0001             		move.l	#$50000001,d3
000058F4 45F9 00FF 0080             		lea	($FF0080).l,a2
000058FA 7E06                       		moveq	#6,d7
000058FC                            
000058FC                            loc_48BE:
000058FC 2003                       		move.l	d3,d0
000058FE 7C03                       		moveq	#3,d6
00005900 7800                       		moveq	#0,d4
00005902 0C47 0003                  		cmpi.w	#3,d7
00005906 6400                       		bcc.s	loc_48CC
00005908 7801                       		moveq	#1,d4
0000590A                            
0000590A                            loc_48CC:
0000590A 7A07                       		moveq	#7,d5
0000590C                            
0000590C                            loc_48CE:
0000590C 224A                       		movea.l	a2,a1
0000590E 0A04 0001                  		eori.b	#1,d4
00005912 6600                       		bne.s	loc_48E2
00005914 0C47 0006                  		cmpi.w	#6,d7
00005918 6600                       		bne.s	loc_48F2
0000591A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005920                            
00005920                            loc_48E2:
00005920 48E7 F800                  		movem.l	d0-d4,-(sp)
00005924 7207                       		moveq	#7,d1
00005926 7407                       		moveq	#7,d2
00005928 6100 C24E                  		bsr.w	ShowVDPGraphics
0000592C 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005930                            
00005930                            loc_48F2:
00005930 0680 0010 0000             		addi.l	#$100000,d0
00005936 51CD FFD4                  		dbf	d5,loc_48CE
0000593A 0680 0380 0000             		addi.l	#$3800000,d0
00005940 0A04 0001                  		eori.b	#1,d4
00005944 51CE FFC4                  		dbf	d6,loc_48CC
00005948 0683 1000 0000             		addi.l	#$10000000,d3
0000594E 6A00                       		bpl.s	loc_491C
00005950 4843                       		swap	d3
00005952 0683 0000 C000             		addi.l	#$C000,d3
00005958 4843                       		swap	d3
0000595A                            
0000595A                            loc_491C:
0000595A D4FC 0080                  		adda.w	#$80,a2
0000595E 51CF FF9C                  		dbf	d7,loc_48BE
00005962 43F9 00FF 0000             		lea	($FF0000).l,a1
00005968 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
0000596E 303C 4000                  		move.w	#$4000,d0
00005972 6100 C5CC                  		bsr.w	EniDec
00005976 43F9 00FF 0000             		lea	($FF0000).l,a1
0000597C 203C 4000 0003             		move.l	#$40000003,d0
00005982 723F                       		moveq	#$3F,d1
00005984 741F                       		moveq	#$1F,d2
00005986 6100 C1F0                  		bsr.w	ShowVDPGraphics
0000598A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005990 203C 5000 0003             		move.l	#$50000003,d0
00005996 723F                       		moveq	#$3F,d1
00005998 743F                       		moveq	#$3F,d2
0000599A 6100 C1DC                  		bsr.w	ShowVDPGraphics
0000599E 4E75                       		rts	
000059A0                            ; End of function SS_BGLoad
000059A0                            
000059A0                            ; ---------------------------------------------------------------------------
000059A0                            ; Pallet cycling routine - special stage
000059A0                            ; ---------------------------------------------------------------------------
000059A0                            
000059A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059A0                            
000059A0                            
000059A0                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
000059A0 4A78 F63A                  		tst.w	($FFFFF63A).w
000059A4 6600                       		bne.s	locret_49E6
000059A6 5378 F79C                  		subq.w	#1,($FFFFF79C).w
000059AA 6A00                       		bpl.s	locret_49E6
000059AC 4DF9 00C0 0004             		lea	($C00004).l,a6
000059B2 3038 F79A                  		move.w	($FFFFF79A).w,d0
000059B6 5278 F79A                  		addq.w	#1,($FFFFF79A).w
000059BA 0240 001F                  		andi.w	#$1F,d0
000059BE E548                       		lsl.w	#2,d0
000059C0 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000059C6 D0C0                       		adda.w	d0,a0
000059C8 1018                       		move.b	(a0)+,d0
000059CA 6A00                       		bpl.s	loc_4992
000059CC 303C 01FF                  		move.w	#$1FF,d0
000059D0                            
000059D0                            loc_4992:
000059D0 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000059D4 7000                       		moveq	#0,d0
000059D6 1018                       		move.b	(a0)+,d0
000059D8 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000059DC 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000059E2 43F1 0000                  		lea	(a1,d0.w),a1
000059E6 303C 8200                  		move.w	#-$7E00,d0
000059EA 1019                       		move.b	(a1)+,d0
000059EC 3C80                       		move.w	d0,(a6)
000059EE 11D1 F616                  		move.b	(a1),($FFFFF616).w
000059F2 303C 8400                  		move.w	#-$7C00,d0
000059F6 1018                       		move.b	(a0)+,d0
000059F8 3C80                       		move.w	d0,(a6)
000059FA 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005A04 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00005A0C 7000                       		moveq	#0,d0
00005A0E 1018                       		move.b	(a0)+,d0
00005A10 6B00                       		bmi.s	loc_49E8
00005A12 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005A18 D2C0                       		adda.w	d0,a1
00005A1A 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00005A1E 24D9                       		move.l	(a1)+,(a2)+
00005A20 24D9                       		move.l	(a1)+,(a2)+
00005A22 24D9                       		move.l	(a1)+,(a2)+
00005A24                            
00005A24                            locret_49E6:
00005A24 4E75                       		rts	
00005A26                            ; ===========================================================================
00005A26                            
00005A26                            loc_49E8:				; XREF: PalCycle_SS
00005A26 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005A2A 0C40 008A                  		cmpi.w	#$8A,d0
00005A2E 6500                       		bcs.s	loc_49F4
00005A30 5241                       		addq.w	#1,d1
00005A32                            
00005A32                            loc_49F4:
00005A32 C2FC 002A                  		mulu.w	#$2A,d1
00005A36 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005A3C D2C1                       		adda.w	d1,a1
00005A3E 0240 007F                  		andi.w	#$7F,d0
00005A42 0880 0000                  		bclr	#0,d0
00005A46 6700                       		beq.s	loc_4A18
00005A48 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00005A4C 24D1                       		move.l	(a1),(a2)+
00005A4E 24E9 0004                  		move.l	4(a1),(a2)+
00005A52 24E9 0008                  		move.l	8(a1),(a2)+
00005A56                            
00005A56                            loc_4A18:
00005A56 D2FC 000C                  		adda.w	#$C,a1
00005A5A 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00005A5E 0C40 000A                  		cmpi.w	#$A,d0
00005A62 6500                       		bcs.s	loc_4A2E
00005A64 0440 000A                  		subi.w	#$A,d0
00005A68 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00005A6C                            
00005A6C                            loc_4A2E:
00005A6C 3200                       		move.w	d0,d1
00005A6E D040                       		add.w	d0,d0
00005A70 D041                       		add.w	d1,d0
00005A72 D2C0                       		adda.w	d0,a1
00005A74 24D9                       		move.l	(a1)+,(a2)+
00005A76 34D9                       		move.w	(a1)+,(a2)+
00005A78 4E75                       		rts	
00005A7A                            ; End of function PalCycle_SS
00005A7A                            
00005A7A                            ; ===========================================================================
00005A7A 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005A8A                            					; XREF: PalCycle_SS
00005A8A 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005A9A 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005AAA FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005ABA 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005ACA 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005ADA 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005AEA FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005AFA                            		even
00005AFA 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005B08                            					; XREF: PalCycle_SS
00005B08                            		even
00005B08                            
00005B08                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005B50                            		even
00005B50                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005C22                            		even
00005C22                            
00005C22                            ; ---------------------------------------------------------------------------
00005C22                            ; Subroutine to	make the special stage background animated
00005C22                            ; ---------------------------------------------------------------------------
00005C22                            
00005C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C22                            
00005C22                            
00005C22                            SS_BGAnimate:				; XREF: SpecialStage
00005C22 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005C26 6600                       		bne.s	loc_4BF6
00005C28 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005C2E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005C34                            
00005C34                            loc_4BF6:
00005C34 0C40 0008                  		cmpi.w	#8,d0
00005C38 6400                       		bcc.s	loc_4C4E
00005C3A 0C40 0006                  		cmpi.w	#6,d0
00005C3E 6600                       		bne.s	loc_4C10
00005C40 5278 F718                  		addq.w	#1,($FFFFF718).w
00005C44 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005C48 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005C4E                            
00005C4E                            loc_4C10:
00005C4E 7000                       		moveq	#0,d0
00005C50 3038 F708                  		move.w	($FFFFF708).w,d0
00005C54 4440                       		neg.w	d0
00005C56 4840                       		swap	d0
00005C58 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005C5E 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005C62 7609                       		moveq	#9,d3
00005C64                            
00005C64                            loc_4C26:
00005C64 302B 0002                  		move.w	2(a3),d0
00005C68 6100 DB2E                  		bsr.w	CalcSine
00005C6C 7400                       		moveq	#0,d2
00005C6E 1419                       		move.b	(a1)+,d2
00005C70 C1C2                       		muls.w	d2,d0
00005C72 E080                       		asr.l	#8,d0
00005C74 36C0                       		move.w	d0,(a3)+
00005C76 1419                       		move.b	(a1)+,d2
00005C78 4882                       		ext.w	d2
00005C7A D55B                       		add.w	d2,(a3)+
00005C7C 51CB FFE6                  		dbf	d3,loc_4C26
00005C80 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005C84 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005C8A 6000                       		bra.s	loc_4C7E
00005C8C                            ; ===========================================================================
00005C8C                            
00005C8C                            loc_4C4E:				; XREF: SS_BGAnimate
00005C8C 0C40 000C                  		cmpi.w	#$C,d0
00005C90 6600                       		bne.s	loc_4C74
00005C92 5378 F718                  		subq.w	#1,($FFFFF718).w
00005C96 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C9A 243C 0001 8000             		move.l	#$18000,d2
00005CA0 7206                       		moveq	#6,d1
00005CA2                            
00005CA2                            loc_4C64:
00005CA2 2013                       		move.l	(a3),d0
00005CA4 9082                       		sub.l	d2,d0
00005CA6 26C0                       		move.l	d0,(a3)+
00005CA8 0482 0000 2000             		subi.l	#$2000,d2
00005CAE 51C9 FFF2                  		dbf	d1,loc_4C64
00005CB2                            
00005CB2                            loc_4C74:
00005CB2 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005CB6 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005CBC                            
00005CBC                            loc_4C7E:
00005CBC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00005CC0 3038 F718                  		move.w	($FFFFF718).w,d0
00005CC4 4440                       		neg.w	d0
00005CC6 4840                       		swap	d0
00005CC8 7600                       		moveq	#0,d3
00005CCA 161A                       		move.b	(a2)+,d3
00005CCC 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005CD0 4442                       		neg.w	d2
00005CD2 0242 00FF                  		andi.w	#$FF,d2
00005CD6 E54A                       		lsl.w	#2,d2
00005CD8                            
00005CD8                            loc_4C9A:
00005CD8 301B                       		move.w	(a3)+,d0
00005CDA 544B                       		addq.w	#2,a3
00005CDC 7200                       		moveq	#0,d1
00005CDE 121A                       		move.b	(a2)+,d1
00005CE0 5341                       		subq.w	#1,d1
00005CE2                            
00005CE2                            loc_4CA4:
00005CE2 2380 2000                  		move.l	d0,(a1,d2.w)
00005CE6 5842                       		addq.w	#4,d2
00005CE8 0242 03FC                  		andi.w	#$3FC,d2
00005CEC 51C9 FFF4                  		dbf	d1,loc_4CA4
00005CF0 51CB FFE6                  		dbf	d3,loc_4C9A
00005CF4 4E75                       		rts	
00005CF6                            ; End of function SS_BGAnimate
00005CF6                            
00005CF6                            ; ===========================================================================
00005CF6 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005D02                            		even
00005D02 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005D0A                            		even
00005D0A 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005D1E                            		even
00005D1E                            					; XREF: SS_BGAnimate
00005D1E                            ; ===========================================================================
00005D1E                            
00005D1E                            ; ---------------------------------------------------------------------------
00005D1E                            ; Continue screen
00005D1E                            ; ---------------------------------------------------------------------------
00005D1E                            
00005D1E                            ContinueScreen:				; XREF: GameModeArray
00005D1E 6100 CA18                  		bsr.w	Pal_FadeFrom
00005D22 46FC 2700                  		move	#$2700,sr
00005D26 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005D2A 0200 00BF                  		andi.b	#$BF,d0
00005D2E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005D34 4DF9 00C0 0004             		lea	($C00004).l,a6
00005D3A 3CBC 8004                  		move.w	#$8004,(a6)
00005D3E 3CBC 8700                  		move.w	#$8700,(a6)
00005D42 6100 BACC                  		bsr.w	ClearScreen
00005D46 43F8 D000                  		lea	($FFFFD000).w,a1
00005D4A 7000                       		moveq	#0,d0
00005D4C 323C 07FF                  		move.w	#$7FF,d1
00005D50                            
00005D50                            Cont_ClrObjRam:
00005D50 22C0                       		move.l	d0,(a1)+
00005D52 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005D56                            
00005D56 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005D60 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005D66 6100 BEDC                  		bsr.w	NemDec
00005D6A 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005D74 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005D7A 6100 BEC8                  		bsr.w	NemDec
00005D7E 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005D88 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005D8E 6100 BEB4                  		bsr.w	NemDec
00005D92 720A                       		moveq	#10,d1
00005D94 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005D9A 7012                       		moveq	#$12,d0
00005D9C 6100 CC42                  		bsr.w	PalLoad1	; load continue	screen pallet
00005DA0 103C 0090                  		move.b	#$90,d0
00005DA4 6100 BC3E                  		bsr.w	PlaySound	; play continue	music
00005DA8 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00005DAE 42B8 F700                  		clr.l	($FFFFF700).w
00005DB2 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005DBA 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005DC0 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005DC6 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005DCC 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005DD2 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005DD8 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005DDE 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005DE4 4EB9 0000 0000             		jsr	ObjectsLoad
00005DEA 4EB9 0000 0000             		jsr	BuildSprites
00005DF0 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005DF4 0000 0040                  		ori.b	#$40,d0
00005DF8 33C0 00C0 0004             		move.w	d0,($C00004).l
00005DFE 6100 C894                  		bsr.w	Pal_FadeTo
00005E02                            
00005E02                            ; ---------------------------------------------------------------------------
00005E02                            ; Continue screen main loop
00005E02                            ; ---------------------------------------------------------------------------
00005E02                            
00005E02                            Cont_MainLoop:
00005E02 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005E08 6100 D95C                  		bsr.w	DelayProgram
00005E0C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005E12 6400                       		bcc.s	loc_4DF2
00005E14 46FC 2700                  		move	#$2700,sr
00005E18 3238 F614                  		move.w	($FFFFF614).w,d1
00005E1C 82FC 003C                  		divu.w	#$3C,d1
00005E20 0281 0000 000F             		andi.l	#$F,d1
00005E26 4EB9 0000 0000             		jsr	ContScrCounter
00005E2C 46FC 2300                  		move	#$2300,sr
00005E30                            
00005E30                            loc_4DF2:
00005E30 4EB9 0000 0000             		jsr	ObjectsLoad
00005E36 4EB9 0000 0000             		jsr	BuildSprites
00005E3C 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005E42 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005E44 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005E4A 64B6                       		bcc.s	Cont_MainLoop
00005E4C 4A78 F614                  		tst.w	($FFFFF614).w
00005E50 6600 FFB0                  		bne.w	Cont_MainLoop
00005E54 11FC 0000 FF94             		move.b	#0,($FFFFFF94).w ; go to Sega screen
00005E5A 4E75                       		rts	
00005E5C                            ; ===========================================================================
00005E5C                            
00005E5C                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005E5C 11FC 000C FF94             		move.b	#$C,($FFFFFF94).w ; set	screen mode to $0C (level)
00005E62 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005E68 7000                       		moveq	#0,d0
00005E6A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005E6E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005E72 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005E76 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005E7A 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005E7E 4E75                       		rts	
00005E80                            ; ===========================================================================
00005E80                            
00005E80                            ; ---------------------------------------------------------------------------
00005E80                            ; Object 80 - Continue screen elements
00005E80                            ; ---------------------------------------------------------------------------
00005E80                            
00005E80                            Obj80:					; XREF: Obj_Index
00005E80 7000                       		moveq	#0,d0
00005E82 1028 0024                  		move.b	$24(a0),d0
00005E86 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005E8A 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005E8E                            ; ===========================================================================
00005E8E 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005E90 0000                       		dc.w Obj80_Display-Obj80_Index
00005E92 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005E94 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005E96                            ; ===========================================================================
00005E96                            
00005E96                            Obj80_Main:				; XREF: Obj80_Index
00005E96 5428 0024                  		addq.b	#2,$24(a0)
00005E9A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005EA2 317C 8500 0002             		move.w	#$8500,2(a0)
00005EA8 117C 0000 0001             		move.b	#0,1(a0)
00005EAE 117C 003C 0019             		move.b	#$3C,$19(a0)
00005EB4 317C 0120 0008             		move.w	#$120,8(a0)
00005EBA 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005EC0 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005EC6                            
00005EC6                            Obj80_Display:				; XREF: Obj80_Index
00005EC6 4EF9 0000 0000             		jmp	DisplaySprite
00005ECC                            ; ===========================================================================
00005ECC                            Obj80_MiniSonicPos:
00005ECC 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005EDE 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005EEA                            ; ===========================================================================
00005EEA                            
00005EEA                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005EEA 2248                       		movea.l	a0,a1
00005EEC 45F9 0000 5ECC             		lea	(Obj80_MiniSonicPos).l,a2
00005EF2 7200                       		moveq	#0,d1
00005EF4 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005EF8 5501                       		subq.b	#2,d1
00005EFA 6400                       		bcc.s	loc_4EC4
00005EFC 4EF9 0000 0000             		jmp	DeleteObject
00005F02                            ; ===========================================================================
00005F02                            
00005F02                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005F02 7601                       		moveq	#1,d3
00005F04 0C01 000E                  		cmpi.b	#$E,d1
00005F08 6500                       		bcs.s	loc_4ED0
00005F0A 7600                       		moveq	#0,d3
00005F0C 720E                       		moveq	#$E,d1
00005F0E                            
00005F0E                            loc_4ED0:
00005F0E 1401                       		move.b	d1,d2
00005F10 0202 0001                  		andi.b	#1,d2
00005F14                            
00005F14                            Obj80_MiniSonLoop:
00005F14 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005F18 335A 0008                  		move.w	(a2)+,8(a1)
00005F1C 4A02                       		tst.b	d2
00005F1E 6700                       		beq.s	loc_4EEA
00005F20 0469 000A 0008             		subi.w	#$A,8(a1)
00005F26                            
00005F26                            loc_4EEA:
00005F26 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005F2C 137C 0006 001A             		move.b	#6,$1A(a1)
00005F32 137C 0006 0024             		move.b	#6,$24(a1)
00005F38 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005F40 337C 8551 0002             		move.w	#$8551,2(a1)
00005F46 137C 0000 0001             		move.b	#0,1(a1)
00005F4C 43E9 0040                  		lea	$40(a1),a1
00005F50 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005F54 43E9 FFC0                  		lea	-$40(a1),a1
00005F58 1343 0028                  		move.b	d3,$28(a1)
00005F5C                            
00005F5C                            Obj80_ChkType:				; XREF: Obj80_Index
00005F5C 4A28 0028                  		tst.b	$28(a0)
00005F60 6700                       		beq.s	loc_4F40
00005F62 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005F68 6500                       		bcs.s	loc_4F40
00005F6A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005F6E 0200 0001                  		andi.b	#1,d0
00005F72 6600                       		bne.s	loc_4F40
00005F74 4A78 D010                  		tst.w	($FFFFD010).w
00005F78 6600                       		bne.s	Obj80_Delete
00005F7A 4E75                       		rts	
00005F7C                            ; ===========================================================================
00005F7C                            
00005F7C                            loc_4F40:				; XREF: Obj80_ChkType
00005F7C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005F80 0200 000F                  		andi.b	#$F,d0
00005F84 6600                       		bne.s	Obj80_Display2
00005F86 0868 0000 001A             		bchg	#0,$1A(a0)
00005F8C                            
00005F8C                            Obj80_Display2:
00005F8C 4EF9 0000 0000             		jmp	DisplaySprite
00005F92                            ; ===========================================================================
00005F92                            
00005F92                            Obj80_Delete:				; XREF: Obj80_ChkType
00005F92 4EF9 0000 0000             		jmp	DeleteObject
00005F98                            ; ===========================================================================
00005F98                            
00005F98                            ; ---------------------------------------------------------------------------
00005F98                            ; Object 81 - Sonic on the continue screen
00005F98                            ; ---------------------------------------------------------------------------
00005F98                            
00005F98                            Obj81:					; XREF: Obj_Index
00005F98 7000                       		moveq	#0,d0
00005F9A 1028 0024                  		move.b	$24(a0),d0
00005F9E 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005FA2 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005FA6 4EF9 0000 0000             		jmp	DisplaySprite
00005FAC                            ; ===========================================================================
00005FAC 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005FAE 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005FB0 0000                       		dc.w Obj81_Animate-Obj81_Index
00005FB2 0000                       		dc.w Obj81_Run-Obj81_Index
00005FB4                            ; ===========================================================================
00005FB4                            
00005FB4                            Obj81_Main:				; XREF: Obj81_Index
00005FB4 5428 0024                  		addq.b	#2,$24(a0)
00005FB8 317C 00A0 0008             		move.w	#$A0,8(a0)
00005FBE 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005FC4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005FCC 0C38 0001 FF9C             		cmpi.b	#1,($FFFFFF9C).w
00005FD2 6700                       		beq.s	Obj81_Windy
00005FD4 317C 0780 0002             		move.w	#$780,2(a0)
00005FDA 6000                       		bra.s	Cont1
00005FDC                            
00005FDC                            Obj81_Windy:
00005FDC 317C 2780 0002             		move.w	#$2780,2(a0)
00005FE2                            
00005FE2                            Cont1:
00005FE2 117C 0004 0001             		move.b	#4,1(a0)
00005FE8 117C 0002 0018             		move.b	#2,$18(a0)
00005FEE 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005FF4 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005FFA                            
00005FFA                            Obj81_ChkLand:				; XREF: Obj81_Index
00005FFA 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00006000 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00006002 5428 0024                  		addq.b	#2,$24(a0)
00006006 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000600A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00006012 317C 8500 0002             		move.w	#$8500,2(a0)
00006018 117C 0000 001C             		move.b	#0,$1C(a0)
0000601E 6000                       		bra.s	Obj81_Animate
00006020                            ; ===========================================================================
00006020                            
00006020                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00006020 4EB9 0000 0000             		jsr	SpeedToPos
00006026 4EB9 0000 0000             		jsr	Sonic_Animate
0000602C 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00006032                            ; ===========================================================================
00006032                            
00006032                            Obj81_Animate:				; XREF: Obj81_Index
00006032 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00006036 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00006038 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000603E 4EF9 0000 0000             		jmp	AnimateSprite
00006044                            ; ===========================================================================
00006044                            
00006044                            Obj81_GetUp:				; XREF: Obj81_Animate
00006044 5428 0024                  		addq.b	#2,$24(a0)
00006048 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00006050 0C38 0001 FF9C             		cmpi.b	#1,($FFFFFF9C).w
00006056 6700                       		beq.s	Obj81_GetUp_Windy
00006058 317C 0780 0002             		move.w	#$780,2(a0)
0000605E 6000                       		bra.s	Cont2
00006060                            
00006060                            Obj81_GetUp_Windy:
00006060 317C 2780 0002             		move.w	#$2780,2(a0)
00006066                            
00006066                            Cont2:
00006066 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000606C 4268 0014                  		clr.w	$14(a0)
00006070 5168 000C                  		subq.w	#8,$C(a0)
00006074 103C 00E0                  		move.b	#$E0,d0
00006078 6100 B992                  		bsr.w	PlaySound_Special ; fade out music
0000607C                            
0000607C                            Obj81_Run:				; XREF: Obj81_Index
0000607C 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00006082 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00006084 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
0000608A 6000                       		bra.s	Obj81_ShowRun
0000608C                            ; ===========================================================================
0000608C                            
0000608C                            Obj81_AddSpeed:				; XREF: Obj81_Run
0000608C 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00006092                            
00006092                            Obj81_ShowRun:				; XREF: Obj81_Run
00006092 4EB9 0000 0000             		jsr	SpeedToPos
00006098 4EB9 0000 0000             		jsr	Sonic_Animate
0000609E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000060A4                            ; ===========================================================================
000060A4                            Ani_obj81:
000060A4                            	include "_anim\obj81.asm"
000060A4                            ; ---------------------------------------------------------------------------
000060A4                            ; Animation script - Sonic on the continue screen
000060A4                            ; ---------------------------------------------------------------------------
000060A4 0000                       		dc.w byte_504A-Ani_obj81
000060A6 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000060B2 00                         		even
000060B2 00                         		even
000060B2                            
000060B2                            ; ---------------------------------------------------------------------------
000060B2                            ; Sprite mappings - Continue screen
000060B2                            ; ---------------------------------------------------------------------------
000060B2                            Map_obj80:
000060B2                            	include "_maps\obj80.asm"
000060B2                            ; ---------------------------------------------------------------------------
000060B2                            ; Sprite mappings - Continue screen
000060B2                            ; ---------------------------------------------------------------------------
000060B2 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000060B6 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000060BA 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000060BE 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000060C2 0B                         byte_5066:	dc.b $B
000060C3 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000060C8 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000060CD F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000060D2 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000060D7 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000060DC F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000060E1 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000060E6 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000060EB 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000060F0 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000060F5 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000060FA 03                         byte_509E:	dc.b 3
000060FB 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00006100 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006105 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000610A 03                         byte_50AE:	dc.b 3
0000610B 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00006110 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006115 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000611A 03                         byte_50BE:	dc.b 3
0000611B 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00006120 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00006125 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000612A 02                         byte_50CE:	dc.b 2
0000612B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00006130 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00006135 01                         byte_50D9:	dc.b 1
00006136 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
0000613B 01                         byte_50DF:	dc.b 1
0000613C 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00006142 00                         		even
00006142 00                         		even
00006142                            
00006142                            ; ===========================================================================
00006142                            ; ---------------------------------------------------------------------------
00006142                            ; Ending sequence in Green Hill	Zone
00006142                            ; ---------------------------------------------------------------------------
00006142                            
00006142                            EndingSequence:				; XREF: GameModeArray
00006142 103C 00E4                  		move.b	#$E4,d0
00006146 6100 B8C4                  		bsr.w	PlaySound_Special ; stop music
0000614A 6100 C5EC                  		bsr.w	Pal_FadeFrom
0000614E 43F8 D000                  		lea	($FFFFD000).w,a1
00006152 7000                       		moveq	#0,d0
00006154 323C 07FF                  		move.w	#$7FF,d1
00006158                            
00006158                            End_ClrObjRam:
00006158 22C0                       		move.l	d0,(a1)+
0000615A 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000615E                            
0000615E 43F8 F628                  		lea	($FFFFF628).w,a1
00006162 7000                       		moveq	#0,d0
00006164 323C 0015                  		move.w	#$15,d1
00006168                            
00006168                            End_ClrRam:
00006168 22C0                       		move.l	d0,(a1)+
0000616A 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000616E                            
0000616E 43F8 F700                  		lea	($FFFFF700).w,a1
00006172 7000                       		moveq	#0,d0
00006174 323C 003F                  		move.w	#$3F,d1
00006178                            
00006178                            End_ClrRam2:
00006178 22C0                       		move.l	d0,(a1)+
0000617A 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000617E                            
0000617E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00006182 7000                       		moveq	#0,d0
00006184 323C 0047                  		move.w	#$47,d1
00006188                            
00006188                            End_ClrRam3:
00006188 22C0                       		move.l	d0,(a1)+
0000618A 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000618E                            
0000618E 46FC 2700                  		move	#$2700,sr
00006192 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006196 0200 00BF                  		andi.b	#$BF,d0
0000619A 33C0 00C0 0004             		move.w	d0,($C00004).l
000061A0 6100 B66E                  		bsr.w	ClearScreen
000061A4 4DF9 00C0 0004             		lea	($C00004).l,a6
000061AA 3CBC 8B03                  		move.w	#$8B03,(a6)
000061AE 3CBC 8230                  		move.w	#$8230,(a6)
000061B2 3CBC 8407                  		move.w	#$8407,(a6)
000061B6 3CBC 857C                  		move.w	#$857C,(a6)
000061BA 3CBC 9001                  		move.w	#$9001,(a6)
000061BE 3CBC 8004                  		move.w	#$8004,(a6)
000061C2 3CBC 8720                  		move.w	#$8720,(a6)
000061C6 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000061CC 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000061D0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000061D6 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000061DC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000061E2 6700                       		beq.s	End_LoadData	; if yes, branch
000061E4 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000061EA                            
000061EA                            End_LoadData:
000061EA 701C                       		moveq	#$1C,d0
000061EC 6100 BD20                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000061F0 4EB9 0000 0000             		jsr	Hud_Base
000061F6 6100 0000                  		bsr.w	LevelSizeLoad
000061FA 6100 0000                  		bsr.w	DeformBgLayer
000061FE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006204 6100 0000                  		bsr.w	MainLoadBlockLoad
00006208 6100 0000                  		bsr.w	LoadTilesFromStart
0000620C 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00006214 46FC 2300                  		move	#$2300,sr
00006218 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000621E 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00006222 6100 BE9A                  		bsr.w	KosDec
00006226 7003                       		moveq	#3,d0
00006228 6100 C7B6                  		bsr.w	PalLoad1	; load Sonic's pallet
0000622C 303C 008B                  		move.w	#$8B,d0
00006230 6100 B7B2                  		bsr.w	PlaySound	; play ending sequence music
00006234 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000623A 6700                       		beq.s	End_LoadSonic	; if not, branch
0000623C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00006242                            
00006242                            End_LoadSonic:
00006242 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00006248 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000624E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00006254 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000625A 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00006260 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00006266 4EB9 0000 0000             		jsr	ObjPosLoad
0000626C 4EB9 0000 0000             		jsr	ObjectsLoad
00006272 4EB9 0000 0000             		jsr	BuildSprites
00006278 7000                       		moveq	#0,d0
0000627A 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000627E 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00006282 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00006286 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
0000628A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000628E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00006292 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006296 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000629A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000629E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000062A2 6100 EB0A                  		bsr.w	OscillateNumInit
000062A6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000062AC 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000062B2 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000062B8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000062BE 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000062C4 6100 D4A0                  		bsr.w	DelayProgram
000062C8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000062CC 0000 0040                  		ori.b	#$40,d0
000062D0 33C0 00C0 0004             		move.w	d0,($C00004).l
000062D6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000062DC 6100 C3B6                  		bsr.w	Pal_FadeTo
000062E0                            
000062E0                            ; ---------------------------------------------------------------------------
000062E0                            ; Main ending sequence loop
000062E0                            ; ---------------------------------------------------------------------------
000062E0                            
000062E0                            End_MainLoop:
000062E0 6100 B81E                  		bsr.w	PauseGame
000062E4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000062EA 6100 D47A                  		bsr.w	DelayProgram
000062EE 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000062F2 6100 0000                  		bsr.w	End_MoveSonic
000062F6 4EB9 0000 0000             		jsr	ObjectsLoad
000062FC 6100 0000                  		bsr.w	DeformBgLayer
00006300 4EB9 0000 0000             		jsr	BuildSprites
00006306 4EB9 0000 0000             		jsr	ObjPosLoad
0000630C 6100 BE50                  		bsr.w	PalCycle_Load
00006310 6100 EAF2                  		bsr.w	OscillateNumDo
00006314 6100 EB7E                  		bsr.w	ChangeRingFrame
00006318 0C38 0018 FF94             		cmpi.b	#$18,($FFFFFF94).w ; is	scene number $18 (ending)?
0000631E 6700                       		beq.s	loc_52DA	; if yes, branch
00006320 11FC 001C FF94             		move.b	#$1C,($FFFFFF94).w ; set scene to $1C (credits)
00006326 103C 0091                  		move.b	#$91,d0
0000632A 6100 B6E0                  		bsr.w	PlaySound_Special ; play credits music
0000632E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00006334 4E75                       		rts	
00006336                            ; ===========================================================================
00006336                            
00006336                            loc_52DA:
00006336 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000633A 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000633E                            
0000633E 4278 FE02                  		clr.w	($FFFFFE02).w
00006342 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006348 4278 F794                  		clr.w	($FFFFF794).w
0000634C                            
0000634C                            End_AllEmlds:				; XREF: loc_5334
0000634C 6100 B7B2                  		bsr.w	PauseGame
00006350 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006356 6100 D40E                  		bsr.w	DelayProgram
0000635A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000635E 6100 0000                  		bsr.w	End_MoveSonic
00006362 4EB9 0000 0000             		jsr	ObjectsLoad
00006368 6100 0000                  		bsr.w	DeformBgLayer
0000636C 4EB9 0000 0000             		jsr	BuildSprites
00006372 4EB9 0000 0000             		jsr	ObjPosLoad
00006378 6100 EA8A                  		bsr.w	OscillateNumDo
0000637C 6100 EB16                  		bsr.w	ChangeRingFrame
00006380 5378 F794                  		subq.w	#1,($FFFFF794).w
00006384 6A00                       		bpl.s	loc_5334
00006386 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000638C 6100 C4F2                  		bsr.w	Pal_ToWhite
00006390                            
00006390                            loc_5334:
00006390 4A78 FE02                  		tst.w	($FFFFFE02).w
00006394 6700 FFB6                  		beq.w	End_AllEmlds
00006398 4278 FE02                  		clr.w	($FFFFFE02).w
0000639C 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
000063A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000063A8 4DF9 00C0 0000             		lea	($C00000).l,a6
000063AE 47F8 F700                  		lea	($FFFFF700).w,a3
000063B2 49F8 A400                  		lea	($FFFFA400).w,a4
000063B6 343C 4000                  		move.w	#$4000,d2
000063BA 6100 0000                  		bsr.w	LoadTilesFromStart2
000063BE 7013                       		moveq	#$13,d0
000063C0 6100 C61E                  		bsr.w	PalLoad1	; load ending pallet
000063C4 6100 C3F0                  		bsr.w	Pal_MakeWhite
000063C8 6000 FF16                  		bra.w	End_MainLoop
000063CC                            
000063CC                            ; ---------------------------------------------------------------------------
000063CC                            ; Subroutine controlling Sonic on the ending sequence
000063CC                            ; ---------------------------------------------------------------------------
000063CC                            
000063CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063CC                            
000063CC                            
000063CC                            End_MoveSonic:				; XREF: End_MainLoop
000063CC 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000063D0 6600                       		bne.s	End_MoveSonic2
000063D2 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000063D8 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000063DA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000063DE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000063E4 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000063EA 4E75                       		rts	
000063EC                            ; ===========================================================================
000063EC                            
000063EC                            End_MoveSonic2:				; XREF: End_MoveSonic
000063EC 5500                       		subq.b	#2,d0
000063EE 6600                       		bne.s	End_MoveSonic3
000063F0 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000063F6 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000063F8 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000063FC 7000                       		moveq	#0,d0
000063FE 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00006402 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00006406 31C0 D014                  		move.w	d0,($FFFFD014).w
0000640A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00006410 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00006416 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
0000641C 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00006422 4E75                       		rts	
00006424                            ; ===========================================================================
00006424                            
00006424                            End_MoveSonic3:				; XREF: End_MoveSonic
00006424 5500                       		subq.b	#2,d0
00006426 6600                       		bne.s	End_MoveSonExit
00006428 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000642C 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00006432 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00006438 4278 D024                  		clr.w	($FFFFD024).w
0000643C                            
0000643C                            End_MoveSonExit:
0000643C 4E75                       		rts	
0000643E                            ; End of function End_MoveSonic
0000643E                            
0000643E                            ; ===========================================================================
0000643E                            ; ---------------------------------------------------------------------------
0000643E                            ; Object 87 - Sonic on ending sequence
0000643E                            ; ---------------------------------------------------------------------------
0000643E                            
0000643E                            Obj87:					; XREF: Obj_Index
0000643E 7000                       		moveq	#0,d0
00006440 1028 0025                  		move.b	$25(a0),d0
00006444 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00006448 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
0000644C 4EF9 0000 0000             		jmp	DisplaySprite
00006452                            ; ===========================================================================
00006452 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00006456 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000645A 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000645E 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00006462 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00006466                            ; ===========================================================================
00006466                            
00006466                            Obj87_Main:				; XREF: Obj87_Index
00006466 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000646C 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000646E 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00006474 317C 00D8 0030             		move.w	#$D8,$30(a0)
0000647A 4E75                       		rts	
0000647C                            ; ===========================================================================
0000647C                            
0000647C                            Obj87_Main2:				; XREF: Obj87_Main
0000647C 5428 0025                  		addq.b	#2,$25(a0)
00006480 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006488 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000648E 117C 0004 0001             		move.b	#4,1(a0)
00006494 4228 0022                  		clr.b	$22(a0)
00006498 117C 0002 0018             		move.b	#2,$18(a0)
0000649E 117C 0000 001A             		move.b	#0,$1A(a0)
000064A4 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
000064AA                            
000064AA                            Obj87_MakeEmlds:			; XREF: Obj87_Index
000064AA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000064AE 6600                       		bne.s	Obj87_Wait
000064B0 5428 0025                  		addq.b	#2,$25(a0)
000064B4 317C 0001 001C             		move.w	#1,$1C(a0)
000064BA 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000064C0                            
000064C0                            Obj87_Wait:
000064C0 4E75                       		rts	
000064C2                            ; ===========================================================================
000064C2                            
000064C2                            Obj87_LookUp:				; XREF: Obj87_Index
000064C2 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000064CA 6600                       		bne.s	locret_5480
000064CC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000064D2 317C 005A 0030             		move.w	#$5A,$30(a0)
000064D8 5428 0025                  		addq.b	#2,$25(a0)
000064DC                            
000064DC                            locret_5480:
000064DC 4E75                       		rts	
000064DE                            ; ===========================================================================
000064DE                            
000064DE                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000064DE 5368 0030                  		subq.w	#1,$30(a0)
000064E2 6600                       		bne.s	Obj87_Wait2
000064E4 43F8 D400                  		lea	($FFFFD400).w,a1
000064E8 323C 00FF                  		move.w	#$FF,d1
000064EC                            
000064EC                            Obj87_ClrLoop:
000064EC 4299                       		clr.l	(a1)+
000064EE 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000064F2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000064F8 5428 0025                  		addq.b	#2,$25(a0)
000064FC 117C 0001 001C             		move.b	#1,$1C(a0)
00006502 317C 003C 0030             		move.w	#$3C,$30(a0)
00006508                            
00006508                            Obj87_Wait2:
00006508 4E75                       		rts	
0000650A                            ; ===========================================================================
0000650A                            
0000650A                            Obj87_MakeLogo:				; XREF: Obj87_Index
0000650A 5368 0030                  		subq.w	#1,$30(a0)
0000650E 6600                       		bne.s	Obj87_Wait3
00006510 5428 0025                  		addq.b	#2,$25(a0)
00006514 317C 00B4 0030             		move.w	#$B4,$30(a0)
0000651A 117C 0002 001C             		move.b	#2,$1C(a0)
00006520 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006526                            
00006526                            Obj87_Wait3:
00006526 4E75                       		rts	
00006528                            ; ===========================================================================
00006528                            
00006528                            Obj87_Animate:				; XREF: Obj87_Index
00006528 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000652E 4EF9 0000 0000             		jmp	AnimateSprite
00006534                            ; ===========================================================================
00006534                            
00006534                            Obj87_Leap:				; XREF: Obj87_Index
00006534 5368 0030                  		subq.w	#1,$30(a0)
00006538 6600                       		bne.s	Obj87_Wait4
0000653A 5428 0025                  		addq.b	#2,$25(a0)
0000653E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006546 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000654C 117C 0004 0001             		move.b	#4,1(a0)
00006552 4228 0022                  		clr.b	$22(a0)
00006556 117C 0002 0018             		move.b	#2,$18(a0)
0000655C 117C 0005 001A             		move.b	#5,$1A(a0)
00006562 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00006568 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000656E 60B8                       		bra.s	Obj87_Animate
00006570                            ; ===========================================================================
00006570                            
00006570                            Obj87_Wait4:				; XREF: Obj87_Leap
00006570 4E75                       		rts	
00006572                            ; ===========================================================================
00006572                            Ani_obj87:
00006572                            	include "_anim\obj87.asm"
00006572                            ; ---------------------------------------------------------------------------
00006572                            ; Animation script - Sonic on the ending sequence
00006572                            ; ---------------------------------------------------------------------------
00006572 0000                       		dc.w byte_551C-Ani_obj87
00006574 0000                       		dc.w byte_552A-Ani_obj87
00006576 0000                       		dc.w byte_5534-Ani_obj87
00006578 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006586 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00006590 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006598                            		even
00006598                            		even
00006598                            
00006598                            ; ===========================================================================
00006598                            ; ---------------------------------------------------------------------------
00006598                            ; Object 88 - chaos emeralds on	the ending sequence
00006598                            ; ---------------------------------------------------------------------------
00006598                            
00006598                            Obj88:					; XREF: Obj_Index
00006598 7000                       		moveq	#0,d0
0000659A 1028 0024                  		move.b	$24(a0),d0
0000659E 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
000065A2 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
000065A6 4EF9 0000 0000             		jmp	DisplaySprite
000065AC                            ; ===========================================================================
000065AC 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
000065AE 0000                       		dc.w Obj88_Move-Obj88_Index
000065B0                            ; ===========================================================================
000065B0                            
000065B0                            Obj88_Main:				; XREF: Obj88_Index
000065B0 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
000065B6 6700                       		beq.s	Obj88_Main2
000065B8 588F                       		addq.l	#4,sp
000065BA 4E75                       		rts	
000065BC                            ; ===========================================================================
000065BC                            
000065BC                            Obj88_Main2:				; XREF: Obj88_Main
000065BC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000065C2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000065C8 2248                       		movea.l	a0,a1
000065CA 7600                       		moveq	#0,d3
000065CC 7401                       		moveq	#1,d2
000065CE 7205                       		moveq	#5,d1
000065D0                            
000065D0                            Obj88_MainLoop:
000065D0 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000065D4 5429 0024                  		addq.b	#2,$24(a1)
000065D8 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000065E0 337C 03C5 0002             		move.w	#$3C5,2(a1)
000065E6 137C 0004 0001             		move.b	#4,1(a1)
000065EC 137C 0001 0018             		move.b	#1,$18(a1)
000065F2 3368 0008 0038             		move.w	8(a0),$38(a1)
000065F8 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000065FE 1342 001C                  		move.b	d2,$1C(a1)
00006602 1342 001A                  		move.b	d2,$1A(a1)
00006606 5202                       		addq.b	#1,d2
00006608 1343 0026                  		move.b	d3,$26(a1)
0000660C 0603 002A                  		addi.b	#$2A,d3
00006610 43E9 0040                  		lea	$40(a1),a1
00006614 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00006618                            
00006618                            Obj88_Move:				; XREF: Obj88_Index
00006618 3028 003E                  		move.w	$3E(a0),d0
0000661C D168 0026                  		add.w	d0,$26(a0)
00006620 1028 0026                  		move.b	$26(a0),d0
00006624 4EB9 0000 3798             		jsr	(CalcSine).l
0000662A 7800                       		moveq	#0,d4
0000662C 1828 003C                  		move.b	$3C(a0),d4
00006630 C3C4                       		muls.w	d4,d1
00006632 E081                       		asr.l	#8,d1
00006634 C1C4                       		muls.w	d4,d0
00006636 E080                       		asr.l	#8,d0
00006638 D268 0038                  		add.w	$38(a0),d1
0000663C D068 003A                  		add.w	$3A(a0),d0
00006640 3141 0008                  		move.w	d1,8(a0)
00006644 3140 000C                  		move.w	d0,$C(a0)
00006648 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
0000664E 6700                       		beq.s	loc_55FA
00006650 0668 0020 003C             		addi.w	#$20,$3C(a0)
00006656                            
00006656                            loc_55FA:
00006656 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
0000665C 6700                       		beq.s	loc_5608
0000665E 0668 0020 003E             		addi.w	#$20,$3E(a0)
00006664                            
00006664                            loc_5608:
00006664 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000666A 6700                       		beq.s	locret_5614
0000666C 5368 003A                  		subq.w	#1,$3A(a0)
00006670                            
00006670                            locret_5614:
00006670 4E75                       		rts	
00006672                            ; ===========================================================================
00006672                            ; ---------------------------------------------------------------------------
00006672                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006672                            ; ---------------------------------------------------------------------------
00006672                            
00006672                            Obj89:					; XREF: Obj_Index
00006672 7000                       		moveq	#0,d0
00006674 1028 0024                  		move.b	$24(a0),d0
00006678 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
0000667C 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00006680                            ; ===========================================================================
00006680 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00006682 0000                       		dc.w Obj89_Move-Obj89_Index
00006684 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00006686                            ; ===========================================================================
00006686                            
00006686                            Obj89_Main:				; XREF: Obj89_Index
00006686 5428 0024                  		addq.b	#2,$24(a0)
0000668A 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00006690 317C 00D8 000A             		move.w	#$D8,$A(a0)
00006696 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000669E 317C 05C5 0002             		move.w	#$5C5,2(a0)
000066A4 117C 0000 0001             		move.b	#0,1(a0)
000066AA 117C 0000 0018             		move.b	#0,$18(a0)
000066B0                            
000066B0                            Obj89_Move:				; XREF: Obj89_Index
000066B0 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
000066B6 6700                       		beq.s	Obj89_Delay	; if yes, branch
000066B8 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000066BE 4EF9 0000 0000             		jmp	DisplaySprite
000066C4                            ; ===========================================================================
000066C4                            
000066C4                            Obj89_Delay:				; XREF: Obj89_Move
000066C4 5428 0024                  		addq.b	#2,$24(a0)
000066C8 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000066CE                            
000066CE                            Obj89_GotoCredits:			; XREF: Obj89_Index
000066CE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000066D2 6A00                       		bpl.s	Obj89_Display
000066D4 11FC 001C FF94             		move.b	#$1C,($FFFFFF94).w ; exit to credits
000066DA                            
000066DA                            Obj89_Display:
000066DA 4EB9 0000 0000             		jsr	DisplaySprite
000066E0                            ; ===========================================================================
000066E0                            ; ---------------------------------------------------------------------------
000066E0                            ; Sprite mappings - Sonic on the ending	sequence
000066E0                            ; ---------------------------------------------------------------------------
000066E0                            Map_obj87:
000066E0                            	include "_maps\obj87.asm"
000066E0                            ; ---------------------------------------------------------------------------
000066E0                            ; Sprite mappings - Sonic on the ending	sequence
000066E0                            ; ---------------------------------------------------------------------------
000066E0 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000066E4 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000066E8 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000066EC 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000066F0 02                         byte_5690:	dc.b 2
000066F1 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000066F6 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000066FB 03                         byte_569B:	dc.b 3
000066FC FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00006701 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00006706 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000670B 02                         byte_56AB:	dc.b 2
0000670C EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00006711 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00006716 02                         byte_56B6:	dc.b 2
00006717 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000671C FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00006721 02                         byte_56C1:	dc.b 2
00006722 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00006727 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000672C 03                         byte_56CC:	dc.b 3
0000672D EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00006732 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006737 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000673C 07                         byte_56DC:	dc.b 7
0000673D B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006742 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006747 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000674C CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006751 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006756 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000675B EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006760 18                         byte_5700:	dc.b $18
00006761 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00006766 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000676B 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00006770 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006775 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000677A 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000677F 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00006784 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006789 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000678E B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00006793 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00006798 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000679D C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
000067A2 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
000067A7 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
000067AC D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
000067B1 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
000067B6 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000067BB E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000067C0 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000067C5 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000067CA E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000067CF F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000067D4 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000067DA 00                         		even
000067DA 00                         		even
000067DA                            
000067DA                            ; ---------------------------------------------------------------------------
000067DA                            ; Sprite mappings - chaos emeralds on the ending sequence
000067DA                            ; ---------------------------------------------------------------------------
000067DA                            Map_obj88:
000067DA                            	include "_maps\obj88.asm"
000067DA                            ; ---------------------------------------------------------------------------
000067DA                            ; Sprite mappings - chaos emeralds on the ending sequence
000067DA                            ; ---------------------------------------------------------------------------
000067DA 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000067DE 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000067E2 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000067E6 0000                       		dc.w byte_57AC-Map_obj88
000067E8 01                         byte_5788:	dc.b 1
000067E9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000067EE 01                         byte_578E:	dc.b 1
000067EF F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000067F4 01                         byte_5794:	dc.b 1
000067F5 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000067FA 01                         byte_579A:	dc.b 1
000067FB F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00006800 01                         byte_57A0:	dc.b 1
00006801 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00006806 01                         byte_57A6:	dc.b 1
00006807 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0000680C 01                         byte_57AC:	dc.b 1
0000680D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00006812                            		even
00006812                            		even
00006812                            
00006812                            ; ---------------------------------------------------------------------------
00006812                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006812                            ; ---------------------------------------------------------------------------
00006812                            Map_obj89:
00006812                            	include "_maps\obj89.asm"
00006812                            ; ---------------------------------------------------------------------------
00006812                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006812                            ; ---------------------------------------------------------------------------
00006812 0000                       		dc.w byte_57B4-Map_obj89
00006814 03                         byte_57B4:	dc.b 3
00006815 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
0000681A F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000681F F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00006824                            		even
00006824                            		even
00006824                            
00006824                            ; ===========================================================================
00006824                            ; ---------------------------------------------------------------------------
00006824                            ; Credits ending sequence
00006824                            ; ---------------------------------------------------------------------------
00006824                            
00006824                            Credits:				; XREF: GameModeArray
00006824 6100 B5DA                  		bsr.w	ClearPLC
00006828 6100 BF0E                  		bsr.w	Pal_FadeFrom
0000682C 4DF9 00C0 0004             		lea	($C00004).l,a6
00006832 3CBC 8004                  		move.w	#$8004,(a6)
00006836 3CBC 8230                  		move.w	#$8230,(a6)
0000683A 3CBC 8407                  		move.w	#$8407,(a6)
0000683E 3CBC 9001                  		move.w	#$9001,(a6)
00006842 3CBC 9200                  		move.w	#$9200,(a6)
00006846 3CBC 8B03                  		move.w	#$8B03,(a6)
0000684A 3CBC 8720                  		move.w	#$8720,(a6)
0000684E 4238 F64E                  		clr.b	($FFFFF64E).w
00006852 6100 AFBC                  		bsr.w	ClearScreen
00006856 43F8 D000                  		lea	($FFFFD000).w,a1
0000685A 7000                       		moveq	#0,d0
0000685C 323C 07FF                  		move.w	#$7FF,d1
00006860                            
00006860                            Cred_ClrObjRam:
00006860 22C0                       		move.l	d0,(a1)+
00006862 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00006866                            
00006866 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00006870 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00006876 6100 B3CC                  		bsr.w	NemDec
0000687A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000687E 7000                       		moveq	#0,d0
00006880 323C 001F                  		move.w	#$1F,d1
00006884                            
00006884                            Cred_ClrPallet:
00006884 22C0                       		move.l	d0,(a1)+
00006886 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000688A                            
0000688A 7003                       		moveq	#3,d0
0000688C 6100 C152                  		bsr.w	PalLoad1	; load Sonic's pallet
00006890 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00006896 4EB9 0000 0000             		jsr	ObjectsLoad
0000689C 4EB9 0000 0000             		jsr	BuildSprites
000068A2 6100 0000                  		bsr.w	EndingDemoLoad
000068A6 7000                       		moveq	#0,d0
000068A8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000068AC E948                       		lsl.w	#4,d0
000068AE 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
000068B4 45F2 0000                  		lea	(a2,d0.w),a2
000068B8 7000                       		moveq	#0,d0
000068BA 1012                       		move.b	(a2),d0
000068BC 6700                       		beq.s	loc_5862
000068BE 6100 B4E2                  		bsr.w	LoadPLC		; load level patterns
000068C2                            
000068C2                            loc_5862:
000068C2 7001                       		moveq	#1,d0
000068C4 6100 B4DC                  		bsr.w	LoadPLC		; load standard	level patterns
000068C8 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000068CE 6100 BDC4                  		bsr.w	Pal_FadeTo
000068D2                            
000068D2                            Cred_WaitLoop:
000068D2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000068D8 6100 CE8C                  		bsr.w	DelayProgram
000068DC 6100 B530                  		bsr.w	RunPLC_RAM
000068E0 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000068E4 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000068E6 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
000068EA 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000068EC 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
000068F2 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000068F6 4E75                       		rts	
000068F8                            
000068F8                            ; ---------------------------------------------------------------------------
000068F8                            ; Ending sequence demo loading subroutine
000068F8                            ; ---------------------------------------------------------------------------
000068F8                            
000068F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068F8                            
000068F8                            
000068F8                            EndingDemoLoad:				; XREF: Credits
000068F8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000068FC 0240 000F                  		andi.w	#$F,d0
00006900 D040                       		add.w	d0,d0
00006902 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00006906 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
0000690A 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
0000690E 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00006914 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00006916 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
0000691C 11FC 0008 FF94             		move.b	#8,($FFFFFF94).w ; set game mode to 08 (demo)
00006922 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00006928 7000                       		moveq	#0,d0
0000692A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000692E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006932 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00006936 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
0000693A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00006940 6600                       		bne.s	EndDemo_Exit	; if not, branch
00006942 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00006948 45F8 FE30                  		lea	($FFFFFE30).w,a2
0000694C 303C 0008                  		move.w	#8,d0
00006950                            
00006950                            EndDemo_LampLoad:
00006950 24D9                       		move.l	(a1)+,(a2)+
00006952 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00006956                            
00006956                            EndDemo_Exit:
00006956 4E75                       		rts	
00006958                            ; End of function EndingDemoLoad
00006958                            
00006958                            ; ===========================================================================
00006958                            ; ---------------------------------------------------------------------------
00006958                            ; Levels used in the end sequence demos
00006958                            ; ---------------------------------------------------------------------------
00006958                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00006968                            
00006968                            ; ---------------------------------------------------------------------------
00006968                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00006968                            ; ---------------------------------------------------------------------------
00006968                            EndDemo_LampVar:
00006968 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
0000696A 0A00 062C 000D             		dc.w $A00, $62C, $D
00006970 0000 0000                  		dc.l 0
00006974 0000                       		dc.b 0,	0
00006976 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
0000698A 0101                       		dc.b 1,	1
0000698C                            ; ===========================================================================
0000698C                            ; ---------------------------------------------------------------------------
0000698C                            ; "TRY AGAIN" and "END"	screens
0000698C                            ; ---------------------------------------------------------------------------
0000698C                            
0000698C                            TryAgainEnd:				; XREF: Credits
0000698C 6100 B472                  		bsr.w	ClearPLC
00006990 6100 BDA6                  		bsr.w	Pal_FadeFrom
00006994 4DF9 00C0 0004             		lea	($C00004).l,a6
0000699A 3CBC 8004                  		move.w	#$8004,(a6)
0000699E 3CBC 8230                  		move.w	#$8230,(a6)
000069A2 3CBC 8407                  		move.w	#$8407,(a6)
000069A6 3CBC 9001                  		move.w	#$9001,(a6)
000069AA 3CBC 9200                  		move.w	#$9200,(a6)
000069AE 3CBC 8B03                  		move.w	#$8B03,(a6)
000069B2 3CBC 8720                  		move.w	#$8720,(a6)
000069B6 4238 F64E                  		clr.b	($FFFFF64E).w
000069BA 6100 AE54                  		bsr.w	ClearScreen
000069BE 43F8 D000                  		lea	($FFFFD000).w,a1
000069C2 7000                       		moveq	#0,d0
000069C4 323C 07FF                  		move.w	#$7FF,d1
000069C8                            
000069C8                            TryAg_ClrObjRam:
000069C8 22C0                       		move.l	d0,(a1)+
000069CA 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000069CE                            
000069CE 701D                       		moveq	#$1D,d0
000069D0 6100 B53C                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000069D4 43F8 FB80                  		lea	($FFFFFB80).w,a1
000069D8 7000                       		moveq	#0,d0
000069DA 323C 001F                  		move.w	#$1F,d1
000069DE                            
000069DE                            TryAg_ClrPallet:
000069DE 22C0                       		move.l	d0,(a1)+
000069E0 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000069E4                            
000069E4 7013                       		moveq	#$13,d0
000069E6 6100 BFF8                  		bsr.w	PalLoad1	; load ending pallet
000069EA 4278 FBC0                  		clr.w	($FFFFFBC0).w
000069EE 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000069F4 4EB9 0000 0000             		jsr	ObjectsLoad
000069FA 4EB9 0000 0000             		jsr	BuildSprites
00006A00 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00006A06 6100 BC8C                  		bsr.w	Pal_FadeTo
00006A0A                            
00006A0A                            ; ---------------------------------------------------------------------------
00006A0A                            ; "TRY AGAIN" and "END"	screen main loop
00006A0A                            ; ---------------------------------------------------------------------------
00006A0A                            TryAg_MainLoop:
00006A0A 6100 B0F4                  		bsr.w	PauseGame
00006A0E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00006A14 6100 CD50                  		bsr.w	DelayProgram
00006A18 4EB9 0000 0000             		jsr	ObjectsLoad
00006A1E 4EB9 0000 0000             		jsr	BuildSprites
00006A24 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00006A2A 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006A2C 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006A30 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006A32 0C38 001C FF94             		cmpi.b	#$1C,($FFFFFF94).w
00006A38 67D0                       		beq.s	TryAg_MainLoop
00006A3A                            
00006A3A                            TryAg_Exit:
00006A3A 11FC 0000 FF94             		move.b	#0,($FFFFFF94).w ; go to Sega screen
00006A40 4E75                       		rts	
00006A42                            
00006A42                            ; ===========================================================================
00006A42                            ; ---------------------------------------------------------------------------
00006A42                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006A42                            ; ---------------------------------------------------------------------------
00006A42                            
00006A42                            Obj8B:					; XREF: Obj_Index
00006A42 7000                       		moveq	#0,d0
00006A44 1028 0024                  		move.b	$24(a0),d0
00006A48 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00006A4C 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006A50 4EF9 0000 0000             		jmp	DisplaySprite
00006A56                            ; ===========================================================================
00006A56 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006A58 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00006A5A 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00006A5C 0000                       		dc.w loc_5A8E-Obj8B_Index
00006A5E                            ; ===========================================================================
00006A5E                            
00006A5E                            Obj8B_Main:				; XREF: Obj8B_Index
00006A5E 5428 0024                  		addq.b	#2,$24(a0)
00006A62 317C 0120 0008             		move.w	#$120,8(a0)
00006A68 317C 00F4 000A             		move.w	#$F4,$A(a0)
00006A6E 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00006A76 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006A7C 117C 0000 0001             		move.b	#0,1(a0)
00006A82 117C 0002 0018             		move.b	#2,$18(a0)
00006A88 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00006A8E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006A94 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00006A96 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00006A9C 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00006AA2 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00006AA8 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00006AAE                            
00006AAE                            Obj8B_Animate:				; XREF: Obj8B_Index
00006AAE 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00006AB4 4EF9 0000 0000             		jmp	AnimateSprite
00006ABA                            ; ===========================================================================
00006ABA                            
00006ABA                            Obj8B_Juggle:				; XREF: Obj8B_Index
00006ABA 5428 0024                  		addq.b	#2,$24(a0)
00006ABE 7002                       		moveq	#2,d0
00006AC0 0828 0000 001C             		btst	#0,$1C(a0)
00006AC6 6700                       		beq.s	loc_5A6A
00006AC8 4440                       		neg.w	d0
00006ACA                            
00006ACA                            loc_5A6A:
00006ACA 43F8 D800                  		lea	($FFFFD800).w,a1
00006ACE 7205                       		moveq	#5,d1
00006AD0                            
00006AD0                            loc_5A70:
00006AD0 1340 003E                  		move.b	d0,$3E(a1)
00006AD4 3400                       		move.w	d0,d2
00006AD6 E742                       		asl.w	#3,d2
00006AD8 D529 0026                  		add.b	d2,$26(a1)
00006ADC 43E9 0040                  		lea	$40(a1),a1
00006AE0 51C9 FFEE                  		dbf	d1,loc_5A70
00006AE4 5228 001A                  		addq.b	#1,$1A(a0)
00006AE8 317C 0070 0030             		move.w	#112,$30(a0)
00006AEE                            
00006AEE                            loc_5A8E:				; XREF: Obj8B_Index
00006AEE 5368 0030                  		subq.w	#1,$30(a0)
00006AF2 6A00                       		bpl.s	locret_5AA0
00006AF4 0868 0000 001C             		bchg	#0,$1C(a0)
00006AFA 117C 0002 0024             		move.b	#2,$24(a0)
00006B00                            
00006B00                            locret_5AA0:
00006B00 4E75                       		rts	
00006B02                            ; ===========================================================================
00006B02                            Ani_obj8B:
00006B02                            	include "_anim\obj8B.asm"
00006B02                            ; ---------------------------------------------------------------------------
00006B02                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006B02                            ; ---------------------------------------------------------------------------
00006B02 0000                       		dc.w byte_5AA8-Ani_obj8B
00006B04 0000                       		dc.w byte_5AAC-Ani_obj8B
00006B06 0000                       		dc.w byte_5AB0-Ani_obj8B
00006B08 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00006B0C 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00006B10 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006B22                            		even
00006B22                            		even
00006B22                            
00006B22                            ; ===========================================================================
00006B22                            ; ---------------------------------------------------------------------------
00006B22                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006B22                            ; ---------------------------------------------------------------------------
00006B22                            
00006B22                            Obj8C:					; XREF: Obj_Index
00006B22 7000                       		moveq	#0,d0
00006B24 1028 0024                  		move.b	$24(a0),d0
00006B28 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006B2C 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006B30 4EF9 0000 0000             		jmp	DisplaySprite
00006B36                            ; ===========================================================================
00006B36 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006B38 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006B3A                            ; ===========================================================================
00006B3A                            
00006B3A                            Obj8C_Main:				; XREF: Obj8C_Index
00006B3A 2248                       		movea.l	a0,a1
00006B3C 7400                       		moveq	#0,d2
00006B3E 7600                       		moveq	#0,d3
00006B40 7205                       		moveq	#5,d1
00006B42 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006B46                            
00006B46                            Obj8C_MakeEms:				; XREF: loc_5B42
00006B46 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006B4A 5429 0024                  		addq.b	#2,$24(a1)
00006B4E 237C 0000 67DA 0004        		move.l	#Map_obj88,4(a1)
00006B56 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006B5C 137C 0000 0001             		move.b	#0,1(a1)
00006B62 137C 0001 0018             		move.b	#1,$18(a1)
00006B68 337C 0104 0008             		move.w	#$104,8(a1)
00006B6E 337C 0120 0038             		move.w	#$120,$38(a1)
00006B74 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006B7A 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006B80 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006B86 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006B8A                            
00006B8A                            Obj8C_ChkEms:
00006B8A 7000                       		moveq	#0,d0
00006B8C 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006B90 5340                       		subq.w	#1,d0
00006B92 6500                       		bcs.s	loc_5B42
00006B94                            
00006B94                            Obj8C_ChkEmLoop:
00006B94 B433 0000                  		cmp.b	(a3,d0.w),d2
00006B98 6600                       		bne.s	loc_5B3E
00006B9A 5202                       		addq.b	#1,d2
00006B9C 60EC                       		bra.s	Obj8C_ChkEms
00006B9E                            ; ===========================================================================
00006B9E                            
00006B9E                            loc_5B3E:
00006B9E 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006BA2                            
00006BA2                            loc_5B42:
00006BA2 1342 001A                  		move.b	d2,$1A(a1)
00006BA6 5229 001A                  		addq.b	#1,$1A(a1)
00006BAA 5202                       		addq.b	#1,d2
00006BAC 137C 0080 0026             		move.b	#$80,$26(a1)
00006BB2 1343 001E                  		move.b	d3,$1E(a1)
00006BB6 1343 001F                  		move.b	d3,$1F(a1)
00006BBA 0643 000A                  		addi.w	#$A,d3
00006BBE 43E9 0040                  		lea	$40(a1),a1
00006BC2 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00006BC6                            
00006BC6                            Obj8C_Move:				; XREF: Obj8C_Index
00006BC6 4A68 003E                  		tst.w	$3E(a0)
00006BCA 6700                       		beq.s	locret_5BBA
00006BCC 4A28 001E                  		tst.b	$1E(a0)
00006BD0 6700                       		beq.s	loc_5B78
00006BD2 5328 001E                  		subq.b	#1,$1E(a0)
00006BD6 6600                       		bne.s	loc_5B80
00006BD8                            
00006BD8                            loc_5B78:
00006BD8 3028 003E                  		move.w	$3E(a0),d0
00006BDC D168 0026                  		add.w	d0,$26(a0)
00006BE0                            
00006BE0                            loc_5B80:
00006BE0 1028 0026                  		move.b	$26(a0),d0
00006BE4 6700                       		beq.s	loc_5B8C
00006BE6 0C00 0080                  		cmpi.b	#$80,d0
00006BEA 6600                       		bne.s	loc_5B96
00006BEC                            
00006BEC                            loc_5B8C:
00006BEC 4268 003E                  		clr.w	$3E(a0)
00006BF0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00006BF6                            
00006BF6                            loc_5B96:
00006BF6 4EB9 0000 3798             		jsr	(CalcSine).l
00006BFC 7800                       		moveq	#0,d4
00006BFE 1828 003C                  		move.b	$3C(a0),d4
00006C02 C3C4                       		muls.w	d4,d1
00006C04 E081                       		asr.l	#8,d1
00006C06 C1C4                       		muls.w	d4,d0
00006C08 E080                       		asr.l	#8,d0
00006C0A D268 0038                  		add.w	$38(a0),d1
00006C0E D068 003A                  		add.w	$3A(a0),d0
00006C12 3141 0008                  		move.w	d1,8(a0)
00006C16 3140 000A                  		move.w	d0,$A(a0)
00006C1A                            
00006C1A                            locret_5BBA:
00006C1A 4E75                       		rts	
00006C1C                            ; ===========================================================================
00006C1C                            ; ---------------------------------------------------------------------------
00006C1C                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006C1C                            ; ---------------------------------------------------------------------------
00006C1C                            Map_obj8B:
00006C1C                            	include "_maps\obj8B.asm"
00006C1C                            ; ---------------------------------------------------------------------------
00006C1C                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006C1C                            ; ---------------------------------------------------------------------------
00006C1C 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006C20 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006C24 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006C28 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006C2C 08                         byte_5BCC:	dc.b 8
00006C2D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006C32 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006C37 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006C3C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006C41 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006C46 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006C4B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006C50 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006C55 08                         byte_5BF5:	dc.b 8
00006C56 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006C5B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006C60 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006C65 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006C6A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006C6F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006C74 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006C79 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006C7E 08                         byte_5C1E:	dc.b 8
00006C7F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006C84 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006C89 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006C8E F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006C93 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006C98 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006C9D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006CA2 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006CA7 08                         byte_5C47:	dc.b 8
00006CA8 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006CAD F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006CB2 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006CB7 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006CBC 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006CC1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006CC6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006CCB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006CD0 0C                         byte_5C70:	dc.b $C
00006CD1 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006CD6 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006CDB 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006CE0 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006CE5 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006CEA F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006CEF 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006CF4 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006CF9 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006CFE 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006D03 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006D08 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006D0D 0A                         byte_5CAD:	dc.b $A
00006D0E D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006D13 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006D18 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006D1D D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006D22 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006D27 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006D2C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006D31 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006D36 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006D3B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006D40 0A                         byte_5CE0:	dc.b $A
00006D41 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006D46 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006D4B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006D50 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006D55 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006D5A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006D5F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006D64 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006D69 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006D6E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006D73 0C                         byte_5D13:	dc.b $C
00006D74 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006D79 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006D7E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006D83 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006D88 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006D8D FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006D92 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006D97 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006D9C 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006DA1 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006DA6 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006DAB 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006DB0                            		even
00006DB0                            		even
00006DB0                            
00006DB0                            ; ---------------------------------------------------------------------------
00006DB0                            ; Ending sequence demos
00006DB0                            ; ---------------------------------------------------------------------------
00006DB0                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006DDE                            		even
00006DDE                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006E1E                            		even
00006E1E                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006E4E                            		even
00006E4E                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006E7E                            		even
00006E7E                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006E9E                            		even
00006E9E                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006EBE                            		even
00006EBE                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006EEE                            		even
00006EEE                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006F1E                            		even
00006F1E                            
00006F1E                            ; ---------------------------------------------------------------------------
00006F1E                            ; Subroutine to	load level boundaries and start	locations
00006F1E                            ; ---------------------------------------------------------------------------
00006F1E                            
00006F1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F1E                            
00006F1E                            
00006F1E                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006F1E 7000                       		moveq	#0,d0
00006F20 11C0 F740                  		move.b	d0,($FFFFF740).w
00006F24 11C0 F741                  		move.b	d0,($FFFFF741).w
00006F28 11C0 F746                  		move.b	d0,($FFFFF746).w
00006F2C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006F30 11C0 F742                  		move.b	d0,($FFFFF742).w
00006F34 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006F38 ED08                       		lsl.b	#6,d0
00006F3A E848                       		lsr.w	#4,d0
00006F3C 3200                       		move.w	d0,d1
00006F3E D040                       		add.w	d0,d0
00006F40 D041                       		add.w	d1,d0
00006F42 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006F46 3018                       		move.w	(a0)+,d0
00006F48 31C0 F730                  		move.w	d0,($FFFFF730).w
00006F4C 2018                       		move.l	(a0)+,d0
00006F4E 21C0 F728                  		move.l	d0,($FFFFF728).w
00006F52 21C0 F720                  		move.l	d0,($FFFFF720).w
00006F56 2018                       		move.l	(a0)+,d0
00006F58 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006F5C 21C0 F724                  		move.l	d0,($FFFFF724).w
00006F60 3038 F728                  		move.w	($FFFFF728).w,d0
00006F64 0640 0240                  		addi.w	#$240,d0
00006F68 31C0 F732                  		move.w	d0,($FFFFF732).w
00006F6C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006F72 3018                       		move.w	(a0)+,d0
00006F74 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006F78 6000 0000                  		bra.w	LevSz_ChkLamp
00006F7C                            ; ===========================================================================
00006F7C                            ; ---------------------------------------------------------------------------
00006F7C                            ; Level size array and ending start location array
00006F7C                            ; ---------------------------------------------------------------------------
00006F7C                            LevelSizeArray:
00006F7C 0004                       		dc.w 4
00006F7E 0000 24BF                  		dc.l $24BF
00006F82 0000 0300                  		dc.l $300
00006F86 0060                       		dc.w $60
00006F88 0004                       		dc.w 4
00006F8A 0000 1EBF                  		dc.l $1EBF
00006F8E 0000 0300                  		dc.l $300
00006F92 0060                       		dc.w $60
00006F94 0004                       		dc.w 4
00006F96 0000 2960                  		dc.l $2960
00006F9A 0000 0300                  		dc.l $300
00006F9E 0060                       		dc.w $60
00006FA0 0004                       		dc.w 4
00006FA2 0000 1EBF                  		dc.l $1EBF
00006FA6 0000 0300                  		dc.l $300
00006FAA 0060                       		dc.w $60
00006FAC 0004                       		dc.w 4
00006FAE 0000 19BF                  		dc.l $19BF
00006FB2 0000 0530                  		dc.l $530
00006FB6 0060                       		dc.w $60
00006FB8 0004                       		dc.w 4
00006FBA 0000 10AF                  		dc.l $10AF
00006FBE 0000 0720                  		dc.l $720
00006FC2 0060                       		dc.w $60
00006FC4 0004                       		dc.w 4
00006FC6 0000 202F                  		dc.l $202F
00006FCA FF00 0800                  		dc.l $FF000800
00006FCE 0060                       		dc.w $60
00006FD0 0004                       		dc.w 4
00006FD2 0000 20BF                  		dc.l $20BF
00006FD6 0000 0720                  		dc.l $720
00006FDA 0060                       		dc.w $60
00006FDC 0004                       		dc.w 4
00006FDE 0000 17BF                  		dc.l $17BF
00006FE2 0000 01D0                  		dc.l $1D0
00006FE6 0060                       		dc.w $60
00006FE8 0004                       		dc.w 4
00006FEA 0000 17BF                  		dc.l $17BF
00006FEE 0000 0520                  		dc.l $520
00006FF2 0060                       		dc.w $60
00006FF4 0004                       		dc.w 4
00006FF6 0000 1800                  		dc.l $1800
00006FFA 0000 0720                  		dc.l $720
00006FFE 0060                       		dc.w $60
00007000 0004                       		dc.w 4
00007002 0000 16BF                  		dc.l $16BF
00007006 0000 0720                  		dc.l $720
0000700A 0060                       		dc.w $60
0000700C 0004                       		dc.w 4
0000700E 0000                       		dc.w 0
00007010 1FBF                       		dc.w $1FBF
00007012 0000 0640                  		dc.l $640
00007016 0060                       		dc.w $60
00007018 0004                       		dc.w 4
0000701A 0000 1FBF                  		dc.l $1FBF
0000701E 0000 0640                  		dc.l $640
00007022 0060                       		dc.w $60
00007024 0004                       		dc.w 4
00007026 0000 2000                  		dc.l $2000
0000702A 0000 06C0                  		dc.l $6C0
0000702E 0060                       		dc.w $60
00007030 0004                       		dc.w 4
00007032 0000 3EC0                  		dc.l $3EC0
00007036 0000 0720                  		dc.l $720
0000703A 0060                       		dc.w $60
0000703C 0004                       		dc.w 4
0000703E 0000 22C0                  		dc.l $22C0
00007042 0000 0420                  		dc.l $420
00007046 0060                       		dc.w $60
00007048 0004                       		dc.w 4
0000704A 0000 28C0                  		dc.l $28C0
0000704E 0000 0520                  		dc.l $520
00007052 0060                       		dc.w $60
00007054 0004                       		dc.w 4
00007056 0000 2C00                  		dc.l $2C00
0000705A 0000 0620                  		dc.l $620
0000705E 0060                       		dc.w $60
00007060 0004                       		dc.w 4
00007062 0000 2EC0                  		dc.l $2EC0
00007066 0000 0620                  		dc.l $620
0000706A 0060                       		dc.w $60
0000706C 0004                       		dc.w 4
0000706E 0000 21C0                  		dc.l $21C0
00007072 0000 0720                  		dc.l $720
00007076 0060                       		dc.w $60
00007078 0004                       		dc.w 4
0000707A 0000 1E40                  		dc.l $1E40
0000707E FF00 0800                  		dc.l $FF000800
00007082 0060                       		dc.w $60
00007084 0004                       		dc.w 4
00007086 2080 2460                  		dc.l $20802460
0000708A 0510 0510                  		dc.l $5100510
0000708E 0060                       		dc.w $60
00007090 0004                       		dc.w 4
00007092 0000 3EC0                  		dc.l $3EC0
00007096 0000 0720                  		dc.l $720
0000709A 0060                       		dc.w $60
0000709C 0004                       		dc.w 4
0000709E 0000 0500                  		dc.l $500
000070A2 0110 0110                  		dc.l $1100110
000070A6 0060                       		dc.w $60
000070A8 0004                       		dc.w 4
000070AA 0000 0DC0                  		dc.l $DC0
000070AE 0110 0110                  		dc.l $1100110
000070B2 0060                       		dc.w $60
000070B4 0004                       		dc.w 4
000070B6 0000 2FFF                  		dc.l $2FFF
000070BA 0000 0320                  		dc.l $320
000070BE 0060                       		dc.w $60
000070C0 0004                       		dc.w 4
000070C2 0000 2FFF                  		dc.l $2FFF
000070C6 0000 0320                  		dc.l $320
000070CA 0060                       		dc.w $60
000070CC 0004                       		dc.w 4
000070CE 0000 6FFE                  		dc.l $6FFE
000070D2 0000 6FFE                  		dc.l $6FFE
000070D6 0060                       		dc.w $60
000070D8 0004                       		dc.w 4
000070DA 0000 6FFE                  		dc.l $6FFE
000070DE 0000 6FFE                  		dc.l $6FFE
000070E2 0060                       		dc.w $60
000070E4 0004                       		dc.w 4
000070E6 0000 6FFE                  		dc.l $6FFE
000070EA 0000 6FFE                  		dc.l $6FFE
000070EE 0060                       		dc.w $60
000070F0 0004                       		dc.w 4
000070F2 0000 6FFE                  		dc.l $6FFE
000070F6 0000 6FFE                  		dc.l $6FFE
000070FA 0060                       		dc.w $60
000070FC 0004                       		dc.w 4
000070FE 0000 6FFE                  		dc.l $6FFE
00007102 0000 6FFE                  		dc.l $6FFE
00007106 0060                       		dc.w $60
00007108 0004                       		dc.w 4
0000710A 0000 6FFE                  		dc.l $6FFE
0000710E 0000 6FFE                  		dc.l $6FFE
00007112 0060                       		dc.w $60
00007114 0004                       		dc.w 4
00007116 0000 6FFE                  		dc.l $6FFE
0000711A 0000 6FFE                  		dc.l $6FFE
0000711E 0060                       		dc.w $60
00007120 0004                       		dc.w 4
00007122 0000 6FFE                  		dc.l $6FFE
00007126 0000 6FFE                  		dc.l $6FFE
0000712A 0060                       		dc.w $60
0000712C 0004                       		dc.w 4
0000712E 0000 6FFE                  		dc.l $6FFE
00007132 0000 6FFE                  		dc.l $6FFE
00007136 0060                       		dc.w $60
00007138 0004                       		dc.w 4
0000713A 0000 6FFE                  		dc.l $6FFE
0000713E 0000 6FFE                  		dc.l $6FFE
00007142 0060                       		dc.w $60
00007144 0004                       		dc.w 4
00007146 0000 6FFE                  		dc.l $6FFE
0000714A 0000 6FFE                  		dc.l $6FFE
0000714E 0060                       		dc.w $60
00007150 0004                       		dc.w 4
00007152 0000 6FFE                  		dc.l $6FFE
00007156 0000 6FFE                  		dc.l $6FFE
0000715A 0060                       		dc.w $60
0000715C                            EndingStLocArray:
0000715C                            		incbin	misc\sloc_end.bin
0000717C                            		even
0000717C                            
0000717C                            ; ===========================================================================
0000717C                            
0000717C                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000717C 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00007180 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00007182 0C38 0009 FE10             		cmpi.b	#9,($FFFFFE10).w
00007188 6700 0000                  		beq	LevSz_StartLoc
0000718C 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00007192 3238 D008                  		move.w	($FFFFD008).w,d1
00007196 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000719A 6000                       		bra.s	loc_60D0
0000719C                            ; ===========================================================================
0000719C                            
0000719C                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000719C 3038 FE10                  		move.w	($FFFFFE10).w,d0
000071A0 ED08                       		lsl.b	#6,d0
000071A2 E848                       		lsr.w	#4,d0
000071A4 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000071A8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000071AC 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000071AE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000071B2 5340                       		subq.w	#1,d0
000071B4 E548                       		lsl.w	#2,d0
000071B6 43FB 00A4                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000071BA                            
000071BA                            LevSz_SonicPos:
000071BA 7200                       		moveq	#0,d1
000071BC 3219                       		move.w	(a1)+,d1
000071BE 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000071C2 7000                       		moveq	#0,d0
000071C4 3011                       		move.w	(a1),d0
000071C6 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000071CA                            
000071CA                            loc_60D0:				; XREF: LevSz_ChkLamp
000071CA 4278 F7A8                  		clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
000071CE 45F8 CB00                  		lea	($FFFFCB00).w,a2	; load the tracking array into a2
000071D2 743F                       		moveq	#63,d2			; begin a 64-step loop
000071D4                            @looppoint:
000071D4 34C1                       		move.w	d1,(a2)+		; fill in X
000071D6 34C0                       		move.w	d0,(a2)+		; fill in Y
000071D8 51CA FFFA                  		dbf	d2,@looppoint		; loop
000071DC 0441 00A0                  		subi.w	#$A0,d1
000071E0 6400                       		bcc.s	loc_60D8
000071E2 7200                       		moveq	#0,d1
000071E4                            
000071E4                            loc_60D8:
000071E4 3438 F72A                  		move.w	($FFFFF72A).w,d2
000071E8 B242                       		cmp.w	d2,d1
000071EA 6500                       		bcs.s	loc_60E2
000071EC 3202                       		move.w	d2,d1
000071EE                            
000071EE                            loc_60E2:
000071EE 31C1 F700                  		move.w	d1,($FFFFF700).w
000071F2 0440 0060                  		subi.w	#$60,d0
000071F6 6400                       		bcc.s	loc_60EE
000071F8 7000                       		moveq	#0,d0
000071FA                            
000071FA                            loc_60EE:
000071FA B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000071FE 6D00                       		blt.s	loc_60F8
00007200 3038 F72E                  		move.w	($FFFFF72E).w,d0
00007204                            
00007204                            loc_60F8:
00007204 31C0 F704                  		move.w	d0,($FFFFF704).w
00007208 6100 0000                  		bsr.w	BgScrollSpeed
0000720C 6000 0000                  		bra.w	LevSz_Unk
00007210                            ; ===========================================================================
00007210                            ; ---------------------------------------------------------------------------
00007210                            ; Sonic	start location array
00007210                            ; ---------------------------------------------------------------------------
00007210                            StartLocArray:
00007210 0050 03B0                  		dc.w   $50, $3B0	; 0
00007214 0050 00FC                  		dc.w   $50,  $FC	; 2
00007218 0050 03B0                  		dc.w   $50, $3B0	; 4
0000721C 0050 00FC                  		dc.w   $50,  $FC	; 6
00007220 0060 006C                  		dc.w   $60,  $6C	; 8
00007224 0050 00EC                  		dc.w   $50,  $EC	; 10
00007228 0050 02EC                  		dc.w   $50, $2EC	; 12
0000722C 0B80 0000                  		dc.w  $B80,    0	; 14
00007230 0030 0266                  		dc.w   $30, $266	; 16
00007234 0030 0266                  		dc.w   $30, $266	; 18
00007238 0030 0166                  		dc.w   $30, $166	; 20
0000723C 0080 00A8                  		dc.w   $80,  $A8	; 22
00007240 0040 020C                  		dc.w   $40, $20C	; 24
00007244 0040 014C                  		dc.w   $40, $14C	; 26
00007248 0040 014C                  		dc.w   $40, $14C	; 28
0000724C 0080 00A8                  		dc.w   $80,  $A8	; 30
00007250 0030 03BD                  		dc.w   $30, $3BD	; 32
00007254 0030 01BD                  		dc.w   $30, $1BD	; 34
00007258 0030 00EC                  		dc.w   $30,  $EC	; 36
0000725C 0080 00A8                  		dc.w   $80,  $A8	; 38
00007260 0000 0100                  		dc.w   $00, $0100	; 40
00007264 0030 074C                  		dc.w   $30, $74C	; 42
00007268 2140 05AC                  		dc.w $2140, $5AC	; 44
0000726C 0080 00A8                  		dc.w   $80,  $A8	; 46
00007270 0620 016B                  		dc.w  $620, $16B	; 48
00007274 0EE0 016C                  		dc.w  $EE0, $16C	; 50
00007278 0080 00A8                  		dc.w   $80,  $A8	; 52
0000727C 0080 00A8                  		dc.w   $80,  $A8	; 54
00007280 0160 01EC                  		dc.w   $160, $1EC	; 56
00007284 0030 0266                  		dc.w   $30, $266	; 58
00007288 0030 0166                  		dc.w   $30, $166	; 60
0000728C 0080 00A8                  		dc.w   $80,  $A8	; 62
00007290 0160 01EC                  		dc.w   $160, $1EC	; 66
00007294 0030 0266                  		dc.w   $30, $266	; 68
00007298 0030 0166                  		dc.w   $30, $166	; 70
0000729C 0080 00A8                  		dc.w   $80,  $A8	; 72
000072A0 0000 0000                  		dc.w     0,    0	; 74
000072A4 0000 0000                  		dc.w     0,    0	; 76
000072A8 0000 0000                  		dc.w     0,    0	; 78
000072AC 0000 0000                  		dc.w     0,    0	; 7A
000072B0                            ; ---------------------------------------------------------------------------
000072B0                            ; Which	256x256	tiles contain loops or roll-tunnels
000072B0                            ; ---------------------------------------------------------------------------
000072B0                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000072B0                            ; loop,	loop, tunnel, tunnel
000072B0                            ; ---------------------------------------------------------------------------
000072B0                            LoopTileNums:	incbin	misc\loopnums.bin
000072CC                            		even
000072CC                            
000072CC                            ; ===========================================================================
000072CC                            
000072CC                            LevSz_Unk:				; XREF: LevelSizeLoad
000072CC 7000                       		moveq	#0,d0
000072CE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000072D2 E508                       		lsl.b	#2,d0
000072D4 21FB 00DA F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000072DA 7000                       		moveq	#0,d0
000072DC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000072E0 E748                       		lsl.w	#3,d0
000072E2 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000072E6 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000072EA 24D9                       		move.l	(a1)+,(a2)+
000072EC 24D9                       		move.l	(a1)+,(a2)+
000072EE 4E75                       		rts	
000072F0                            ; End of function LevelSizeLoad
000072F0                            
000072F0                            ; ===========================================================================
000072F0 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000072F8 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007300 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007308 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007310 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007318 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007320 0070 0100 0100 0100        		dc.l $700100, $1000100
00007328 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007330 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007338 0800 0100 0100 0000        		dc.l $8000100, $1000000
00007340                            ; ---------------------------------------------------------------------------
00007340                            ; Subroutine to	set scroll speed of some backgrounds
00007340                            ; ---------------------------------------------------------------------------
00007340                            
00007340                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007340                            
00007340                            
00007340                            BgScrollSpeed:				; XREF: LevelSizeLoad
00007340 4A38 FE30                  		tst.b	($FFFFFE30).w
00007344 6600                       		bne.s	loc_6206
00007346 0C38 0009 FE10             		cmpi.b	#9,($FFFFFE10).w
0000734C 6600                       		bne.s	loc_6206
0000734E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007352 31C0 F714                  		move.w	d0,($FFFFF714).w
00007356 31C1 F708                  		move.w	d1,($FFFFF708).w
0000735A 31C1 F710                  		move.w	d1,($FFFFF710).w
0000735E 31C1 F718                  		move.w	d1,($FFFFF718).w
00007362                            
00007362                            loc_6206:
00007362 7400                       		moveq	#0,d2
00007364 1438 FE10                  		move.b	($FFFFFE10).w,d2
00007368 D442                       		add.w	d2,d2
0000736A 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000736E 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00007372                            ; End of function BgScrollSpeed
00007372                            
00007372                            ; ===========================================================================
00007372 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007376 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000737A 0000 0000                  		dc.w BgScroll_ghz-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000737E 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_ABZ-BgScroll_Index
00007382 0000 0000                  		dc.w BgScroll_ABZ-BgScroll_Index, BgScroll_ABZ-BgScroll_Index
00007386                            ; ===========================================================================
00007386                            
00007386                            BgScroll_GHZ:				; XREF: BgScroll_Index
00007386 6000 0000                  		bra.w	Deform_GHZ
0000738A                            ; ===========================================================================
0000738A                            
0000738A                            BgScroll_LZ:				; XREF: BgScroll_Index
0000738A E280                       		asr.l	#1,d0
0000738C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007390 4E75                       		rts	
00007392                            ; ===========================================================================
00007392                            
00007392                            BgScroll_MZ:				; XREF: BgScroll_Index
00007392 4E75                       		rts	
00007394                            ; ===========================================================================
00007394                            
00007394                            BgScroll_SLZ:				; XREF: BgScroll_Index
00007394 E280                       		asr.l	#1,d0
00007396 0640 00C0                  		addi.w	#$C0,d0
0000739A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000739E 4E75                       		rts	
000073A0                            ; ===========================================================================
000073A0                            
000073A0                            BgScroll_SYZ:				; XREF: BgScroll_Index
000073A0 E980                       		asl.l	#4,d0
000073A2 2400                       		move.l	d0,d2
000073A4 E380                       		asl.l	#1,d0
000073A6 D082                       		add.l	d2,d0
000073A8 E080                       		asr.l	#8,d0
000073AA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000073AE 31C0 F714                  		move.w	d0,($FFFFF714).w
000073B2 4E75                       		rts	
000073B4                            ; ===========================================================================
000073B4                            
000073B4                            BgScroll_SBZ:				; XREF: BgScroll_Index
000073B4 E980                       		asl.l	#4,d0
000073B6 E380                       		asl.l	#1,d0
000073B8 E080                       		asr.l	#8,d0
000073BA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000073BE 4E75                       		rts	
000073C0                            ; ===========================================================================
000073C0                            
000073C0                            BgScroll_End:				; XREF: BgScroll_Index
000073C0 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000073C6 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000073CC 4E75                       		rts	
000073CE                            ; ===========================================================================
000073CE 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000073D4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000073DA 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000073E0 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000073E6 4E75                       		rts
000073E8                            ; ===========================================================================
000073E8                             
000073E8                            BgScroll_ABZ:				; XREF: BgScroll_Index
000073E8 4E75                       		rts	
000073EA                            ; ---------------------------------------------------------------------------
000073EA                            ; Background layer deformation subroutines
000073EA                            ; ---------------------------------------------------------------------------
000073EA                            
000073EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073EA                            
000073EA                            
000073EA                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000073EA 4A38 F744                  		tst.b	($FFFFF744).w
000073EE 6700                       		beq.s	loc_628E
000073F0 4E75                       		rts	
000073F2                            ; ===========================================================================
000073F2                            
000073F2                            loc_628E:
000073F2 4278 F754                  		clr.w	($FFFFF754).w
000073F6 4278 F756                  		clr.w	($FFFFF756).w
000073FA 4278 F758                  		clr.w	($FFFFF758).w
000073FE 4278 F75A                  		clr.w	($FFFFF75A).w
00007402 6100 0000                  		bsr.w	ScrollHoriz
00007406 6100 0000                  		bsr.w	ScrollVertical
0000740A 6100 0000                  		bsr.w	DynScrResizeLoad
0000740E 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00007414 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000741A 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00007420 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007426 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000742C 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00007432 7000                       		moveq	#0,d0
00007434 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007438 D040                       		add.w	d0,d0
0000743A 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000743E 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007442                            ; End of function DeformBgLayer
00007442                            
00007442                            ; ===========================================================================
00007442                            ; ---------------------------------------------------------------------------
00007442                            ; Offset index for background layer deformation	code
00007442                            ; ---------------------------------------------------------------------------
00007442 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007446 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000744A 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000744E 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_ABZ-Deform_Index
00007452 0000 0000                  		dc.w Deform_IC-Deform_Index, Deform_GHZ-Deform_Index
00007456                            ; ---------------------------------------------------------------------------
00007456                            ; Green	Hill Zone background layer deformation code
00007456                            ; ---------------------------------------------------------------------------
00007456                            
00007456                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007456                            
00007456                            
00007456                            Deform_Menu:
00007456 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000745A 48C4                       		ext.l	d4
0000745C ED84                       		asl.l	#6,d4
0000745E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007462 48C5                       		ext.l	d5
00007464 E985                       		asl.l	#4,d5
00007466 E385                       		asl.l	#1,d5
00007468 6100 0000                  		bsr.w	ScrollBlock3
0000746C 31FC 0000 F70C                             move.w	#$0000,($FFFFF70C).w	; lock the background vertically in place
00007472 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007478 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1 (Note: This is the S1 address. For S2, change to $FFFFE000.)
0000747C                            
0000747C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007480 4440                       		neg.w	d0			; negate (positive to negative)
00007482 4840                       		swap	d0			; send to the left side of d0
00007484 5278 F708                  		add.w	#1,($FFFFF708).w
00007488 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000748C 4440                       		neg.w	d0			; negate (positive to negative)
0000748E                            	;	No Speed Change
0000748E 323C 00DF                  		move.w	#224-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007492                            Menu_DeformLoop_1:
00007492 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007494 51C9 FFFC                  		dbf	d1,Menu_DeformLoop_1	; repeat d1 number of scanlines
00007498 4E75                       		rts	
0000749A                            ; End of function Deform_Menu
0000749A                            
0000749A                            Deform_GHZ:				; XREF: Deform_Index
0000749A 0C38 0001 FF95             		cmpi.b	#1,($FFFFFF95).w	;Flag from the main menu
000074A0 6700 FFB4                  		beq.w	Deform_Menu
000074A4 4EF9 0000 0000             		jmp	Deform_GHZ_BG1_Loop
000074AA 3838 F73A                  		move.w	($FFFFF73A).w,d4
000074AE 48C4                       		ext.l	d4
000074B0 EF84                       		asl.l	#7,d4
000074B2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000074B6 48C5                       		ext.l	d5
000074B8 EF85                       		asl.l	#7,d5
000074BA 6100 0000                  		bsr.w	ScrollBlock2
000074BE 4EF9 0000 0000             		jmp	Deform_GHZ_BG1
000074C4                            ;		cmpi.w	#$1250,($FFFFF700).w
000074C4                            ;		bcs.s	Deform_GHZ_BG1
000074C4 0C38 0001 FF9F             		cmpi.b	#1,($FFFFFF9F).w
000074CA 6700 0000                  		beq	Deform_GHZ_BG2_Done
000074CE 0C38 0002 FF9F             		cmpi.b	#2,($FFFFFF9F).w
000074D4 6700 0000                  		beq	Deform_GHZ_BG2_Done2
000074D8 4EB9 0000 0000             		jsr	Deform_GHZ_BG2_Load
000074DE 0C38 0003 FF9F             		cmpi.b	#3,($FFFFFF9F).w
000074E4 6700 0000                  		beq	Deform_GHZ_Boss
000074E8 4EF9 0000 0000             		jmp	Deform_GHZ_Cont
000074EE                            
000074EE                            Deform_GHZ_BG1:
000074EE 4238 FF9F                  		clr.b	($FFFFFF9F).w
000074F2 31FC 0000 F70C             	        move.w	#$0000,($FFFFF70C).w	; lock the background vertically in place
000074F8 4EF9 0000 0000             		jmp	Deform_GHZ_Cont
000074FE                            
000074FE                            
000074FE                            Deform_GHZ_BG2_Load:
000074FE 11FC 0003 FF9F             		move.b	#3,($FFFFFF9F).w
00007504                            ;		move.w	#$0BC0,($FFFFF708).w
00007504 0C78 0120 F70C             		cmpi.w	#$120,($FFFFF70C).w
0000750A 6500 0000                  		bcs	Deform_GHZ_BG2_Add
0000750E 31FC 0120 F70C             		move.w	#$120,($FFFFF70C).w
00007514 11FC 0001 FF9F             		move.b	#1,($FFFFFF9F).w
0000751A 4E75                       		rts
0000751C                            
0000751C                            Deform_GHZ_BG2_Add:
0000751C 5278 F70C                  		add.w	#$1,($FFFFF70C).w
00007520 4E75                       		rts
00007522                            
00007522                            Deform_GHZ_BG2_Done:
00007522                            	;	move.w	#$0BC0,($FFFFF708).w
00007522 31FC 0120 F70C             		move.w	#$120,($FFFFF70C).w
00007528 11FC 0002 FF9F             		move.b	#2,($FFFFFF9F).w
0000752E 4EF9 0000 0000             		jmp	Deform_GHZ_Cont
00007534                            
00007534                            Deform_GHZ_BG2_Done2:
00007534 31FC 0120 F70C             		move.w	#$120,($FFFFF70C).w
0000753A                            
0000753A                            Deform_GHZ_Cont:
0000753A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007540 0C38 0000 FF9F             		cmpi.b	#0,($FFFFFF9F).w
00007546 6700                       		beq.s	Deform_GHZ_BG1_Loop
00007548                            
00007548                            Deform_GHZ_Boss:
00007548 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1 (Note: This is the S1 address. For S2, change to $FFFFE000.)
0000754C                            
0000754C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007550 4440                       		neg.w	d0			; negate (positive to negative)
00007552 4840                       		swap	d0			; send to the left side of d0
00007554 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007558 4440                       		neg.w	d0			; negate (positive to negative)
0000755A E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
0000755C 323C 00DF                  		move.w	#224-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007560                            GHZ_DeformLoop_2_1:
00007560 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007562 51C9 FFFC                  		dbf	d1,GHZ_DeformLoop_2_1	; repeat d1 number of scanlines
00007566 4E75                       		rts
00007568                            
00007568                            ;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
00007568                            
00007568                            Deform_GHZ_BG1_Loop:
00007568 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000756C 48C4                       		ext.l	d4
0000756E E384                       		asl.l	#1,d4
00007570 2204                       		move.l	d4,d1
00007572 E384                       		asl.l	#1,d4
00007574 D881                       		add.l	d1,d4
00007576 7A00                       		moveq	#0,d5
00007578 6100 0000                  		bsr.w	ScrollBlock1
0000757C 6100 0000                  		bsr.w	ScrollBlock4
00007580 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007584 3038 F704                  		move.w	($FFFFF704).w,d0
00007588 0240 07FF                  		andi.w	#$7FF,d0
0000758C EA48                       		lsr.w	#5,d0
0000758E                            ;		neg.w	d0
0000758E                            ;		addi.w	#$26,d0
0000758E 31C0 F714                  		move.w	d0,($FFFFF714).w
00007592 3800                       		move.w	d0,d4
00007594 6100 0000                  		bsr.w	ScrollBlock3
00007598 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000759E                            
0000759E 323C 0050                  		move.w	#$50,d1
000075A2 9244                       		sub.w	d4,d1
000075A4 3038 F700                  		move.w	($FFFFF700).w,d0
000075A8                            
000075A8                            loc_633C:
000075A8 4440                       		neg.w	d0
000075AA 4840                       		swap	d0
000075AC 3038 F708                  		move.w	($FFFFF708).w,d0
000075B0 4440                       		neg.w	d0
000075B2                            
000075B2                            loc_6346:
000075B2 22C0                       		move.l	d0,(a1)+
000075B4 51C9 FFFC                  		dbf	d1,loc_6346
000075B8                            
000075B8 323C 000E                  		move.w	#$E,d1
000075BC 3038 F710                  		move.w	($FFFFF710).w,d0
000075C0 4440                       		neg.w	d0
000075C2 E640                       		asr.w	#3,d0			; divide by 4 (Slow down the scroll position)
000075C4                            
000075C4                            loc_6356:
000075C4 22C0                       		move.l	d0,(a1)+
000075C6 51C9 FFFC                  		dbf	d1,loc_6356
000075CA                            
000075CA                            
000075CA 323C 000E                  		move.w	#$E,d1
000075CE 3038 F710                  		move.w	($FFFFF710).w,d0
000075D2 4440                       		neg.w	d0
000075D4 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000075D6                            
000075D6                            loc_1_Loop:
000075D6 22C0                       		move.l	d0,(a1)+
000075D8 51C9 FFFC                  		dbf	d1,loc_1_Loop
000075DC                            
000075DC 323C 000E                  		move.w	#$E,d1
000075E0 3038 F710                  		move.w	($FFFFF710).w,d0
000075E4 4440                       		neg.w	d0
000075E6 E240                       		asr.w	#1,d0			; divide by 4 (Slow down the scroll position)
000075E8                            
000075E8                            loc_2_Loop:
000075E8 22C0                       		move.l	d0,(a1)+
000075EA 51C9 FFFC                  		dbf	d1,loc_2_Loop
000075EE                            
000075EE                            
000075EE 323C 000E                  		move.w	#$E,d1
000075F2 3038 F710                  		move.w	($FFFFF710).w,d0
000075F6 4440                       		neg.w	d0
000075F8                            loc_3_Loop:
000075F8 22C0                       		move.l	d0,(a1)+
000075FA 51C9 FFFC                  		dbf	d1,loc_3_Loop
000075FE                            
000075FE 3038 F710                  		move.w	($FFFFF710).w,d0
00007602 0640 0000                  		addi.w	#0,d0
00007606 3438 F700                  		move.w	($FFFFF700).w,d2
0000760A 0642 FE00                  		addi.w	#-$200,d2
0000760E 9440                       		sub.w	d0,d2
00007610 48C2                       		ext.l	d2
00007612 E182                       		asl.l	#8,d2
00007614 85FC 0068                  		divs.w	#$68,d2
00007618 48C2                       		ext.l	d2
0000761A E182                       		asl.l	#8,d2
0000761C 7600                       		moveq	#0,d3
0000761E 3600                       		move.w	d0,d3
00007620 323C 0057                  		move.w	#$57,d1
00007624 D244                       		add.w	d4,d1
00007626                            
00007626                            loc_6384:
00007626 3003                       		move.w	d3,d0
00007628 4440                       		neg.w	d0
0000762A 22C0                       		move.l	d0,(a1)+
0000762C 4843                       		swap	d3
0000762E D682                       		add.l	d2,d3
00007630 4843                       		swap	d3
00007632 51C9 FFF2                  		dbf	d1,loc_6384
00007636 4E75                       		rts	
00007638                            ; End of function Deform_GHZ
00007638                            
00007638                            ; ---------------------------------------------------------------------------
00007638                            ; Labyrinth Zone background layer deformation code
00007638                            ; ---------------------------------------------------------------------------
00007638                            
00007638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007638                            
00007638                            
00007638                            Deform_LZ:				; XREF: Deform_Index
00007638 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000763C 48C4                       		ext.l	d4
0000763E EF84                       		asl.l	#7,d4
00007640 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007644 48C5                       		ext.l	d5
00007646 EF85                       		asl.l	#7,d5
00007648 6100 0000                  		bsr.w	ScrollBlock2
0000764C 31FC 0000 F70C             		move.w	#$0000,($FFFFF70C).w	; lock the background vertically in place
00007652 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007658                            
00007658                            ;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
00007658 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000765C 323C 00DF                  		move.w	#$DF,d1
00007660 3038 F700                  		move.w	($FFFFF700).w,d0
00007664 4440                       		neg.w	d0
00007666 4840                       		swap	d0
00007668 3038 F708                  		move.w	($FFFFF708).w,d0
0000766C 4440                       		neg.w	d0
0000766E                            
0000766E                            loc_63C6:
0000766E 22C0                       		move.l	d0,(a1)+
00007670 51C9 FFFC                  		dbf	d1,loc_63C6
00007674 3038 F646                  		move.w	($FFFFF646).w,d0
00007678 9078 F704                  		sub.w	($FFFFF704).w,d0
0000767C                            
0000767C                            ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
0000767C 4E75                       		rts	
0000767E                            ; End of function Deform_LZ
0000767E                            
0000767E                            ; ---------------------------------------------------------------------------
0000767E                            ; Marble Zone background layer deformation code
0000767E                            ; ---------------------------------------------------------------------------
0000767E                            
0000767E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000767E                            
0000767E                            
0000767E                            Deform_ABZ:
0000767E 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00007684 6500 0000                  		bcs.w	Deform_SYZ 
00007688 4EF9 0000 0000             		jmp	Deform_SBZ 
0000768E                            
0000768E                            Deform_MZ:				; XREF: Deform_Index
0000768E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007692 48C4                       		ext.l	d4
00007694 ED84                       		asl.l	#6,d4
00007696 2204                       		move.l	d4,d1
00007698 E384                       		asl.l	#1,d4
0000769A D881                       		add.l	d1,d4
0000769C 7A00                       		moveq	#0,d5
0000769E 6100 0000                  		bsr.w	ScrollBlock1
000076A2 303C 0200                  		move.w	#$200,d0
000076A6 3238 F704                  		move.w	($FFFFF704).w,d1
000076AA 0441 01C8                  		subi.w	#$1C8,d1
000076AE 6500                       		bcs.s	loc_6402
000076B0 3401                       		move.w	d1,d2
000076B2 D241                       		add.w	d1,d1
000076B4 D242                       		add.w	d2,d1
000076B6 E441                       		asr.w	#2,d1
000076B8 D041                       		add.w	d1,d0
000076BA                            
000076BA                            loc_6402:
000076BA 31C0 F714                  		move.w	d0,($FFFFF714).w
000076BE 6100 0000                  		bsr.w	ScrollBlock3
000076C2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000076C8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000076CC 323C 00DF                  		move.w	#$DF,d1
000076D0 3038 F700                  		move.w	($FFFFF700).w,d0
000076D4 4440                       		neg.w	d0
000076D6 4840                       		swap	d0
000076D8 3038 F708                  		move.w	($FFFFF708).w,d0
000076DC 4440                       		neg.w	d0
000076DE                            
000076DE                            loc_6426:
000076DE 22C0                       		move.l	d0,(a1)+
000076E0 51C9 FFFC                  		dbf	d1,loc_6426
000076E4 4E75                       		rts	
000076E6                            ; End of function Deform_MZ
000076E6                            
000076E6                            ; ---------------------------------------------------------------------------
000076E6                            ; Star Light Zone background layer deformation code
000076E6                            ; ---------------------------------------------------------------------------
000076E6                            
000076E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076E6                            
000076E6                            
000076E6                            Deform_SLZ:				; XREF: Deform_Index
000076E6 3838 F73A                  		move.w	($FFFFF73A).w,d4
000076EA 48C4                       		ext.l	d4
000076EC EF84                       		asl.l	#7,d4
000076EE 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000076F2 48C5                       		ext.l	d5
000076F4 EF85                       		asl.l	#7,d5
000076F6 6100 0000                  		bsr.w	ScrollBlock2
000076FA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007700 6100 0000                  		bsr.w	Deform_SLZ_2
00007704 45F8 A800                  		lea	($FFFFA800).w,a2
00007708 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000770C 3400                       		move.w	d0,d2
0000770E 0440 00C0                  		subi.w	#$C0,d0
00007712 0240 03F0                  		andi.w	#$3F0,d0
00007716 E648                       		lsr.w	#3,d0
00007718 45F2 0000                  		lea	(a2,d0.w),a2
0000771C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007720 323C 000E                  		move.w	#$E,d1
00007724 3038 F700                  		move.w	($FFFFF700).w,d0
00007728 4440                       		neg.w	d0
0000772A 4840                       		swap	d0
0000772C 0242 000F                  		andi.w	#$F,d2
00007730 D442                       		add.w	d2,d2
00007732 301A                       		move.w	(a2)+,d0
00007734 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00007738                            ; ===========================================================================
00007738                            
00007738                            loc_6480:				; XREF: Deform_SLZ
00007738 301A                       		move.w	(a2)+,d0
0000773A                            
0000773A                            loc_6482:
0000773A 22C0                       		move.l	d0,(a1)+
0000773C 22C0                       		move.l	d0,(a1)+
0000773E 22C0                       		move.l	d0,(a1)+
00007740 22C0                       		move.l	d0,(a1)+
00007742 22C0                       		move.l	d0,(a1)+
00007744 22C0                       		move.l	d0,(a1)+
00007746 22C0                       		move.l	d0,(a1)+
00007748 22C0                       		move.l	d0,(a1)+
0000774A 22C0                       		move.l	d0,(a1)+
0000774C 22C0                       		move.l	d0,(a1)+
0000774E 22C0                       		move.l	d0,(a1)+
00007750 22C0                       		move.l	d0,(a1)+
00007752 22C0                       		move.l	d0,(a1)+
00007754 22C0                       		move.l	d0,(a1)+
00007756 22C0                       		move.l	d0,(a1)+
00007758 22C0                       		move.l	d0,(a1)+
0000775A 51C9 FFDC                  		dbf	d1,loc_6480
0000775E 4E75                       		rts	
00007760                            ; End of function Deform_SLZ
00007760                            
00007760                            
00007760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007760                            
00007760                            
00007760                            Deform_SLZ_2:				; XREF: Deform_SLZ
00007760 43F8 A800                  		lea	($FFFFA800).w,a1
00007764 3438 F700                  		move.w	($FFFFF700).w,d2
00007768 4442                       		neg.w	d2
0000776A 3002                       		move.w	d2,d0
0000776C E640                       		asr.w	#3,d0
0000776E 9042                       		sub.w	d2,d0
00007770 48C0                       		ext.l	d0
00007772 E980                       		asl.l	#4,d0
00007774 81FC 001C                  		divs.w	#$1C,d0
00007778 48C0                       		ext.l	d0
0000777A E980                       		asl.l	#4,d0
0000777C E180                       		asl.l	#8,d0
0000777E 7600                       		moveq	#0,d3
00007780 3602                       		move.w	d2,d3
00007782 323C 001B                  		move.w	#$1B,d1
00007786                            
00007786                            loc_64CE:
00007786 32C3                       		move.w	d3,(a1)+
00007788 4843                       		swap	d3
0000778A D680                       		add.l	d0,d3
0000778C 4843                       		swap	d3
0000778E 51C9 FFF6                  		dbf	d1,loc_64CE
00007792 3002                       		move.w	d2,d0
00007794 E640                       		asr.w	#3,d0
00007796 323C 0004                  		move.w	#4,d1
0000779A                            
0000779A                            loc_64E2:
0000779A 32C0                       		move.w	d0,(a1)+
0000779C 51C9 FFFC                  		dbf	d1,loc_64E2
000077A0 3002                       		move.w	d2,d0
000077A2 E440                       		asr.w	#2,d0
000077A4 323C 0004                  		move.w	#4,d1
000077A8                            
000077A8                            loc_64F0:
000077A8 32C0                       		move.w	d0,(a1)+
000077AA 51C9 FFFC                  		dbf	d1,loc_64F0
000077AE 3002                       		move.w	d2,d0
000077B0 E240                       		asr.w	#1,d0
000077B2 323C 001D                  		move.w	#$1D,d1
000077B6                            
000077B6                            loc_64FE:
000077B6 32C0                       		move.w	d0,(a1)+
000077B8 51C9 FFFC                  		dbf	d1,loc_64FE
000077BC 4E75                       		rts	
000077BE                            ; End of function Deform_SLZ_2
000077BE                            
000077BE                            ; ---------------------------------------------------------------------------
000077BE                            ; Spring Yard Zone background layer deformation	code
000077BE                            ; ---------------------------------------------------------------------------
000077BE                            
000077BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077BE                            
000077BE                            
000077BE                            Deform_SYZ:				; XREF: Deform_Index
000077BE 3838 F73A                  		move.w	($FFFFF73A).w,d4
000077C2 48C4                       		ext.l	d4
000077C4 ED84                       		asl.l	#6,d4
000077C6 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000077CA 48C5                       		ext.l	d5
000077CC E985                       		asl.l	#4,d5
000077CE 2205                       		move.l	d5,d1
000077D0 E385                       		asl.l	#1,d5
000077D2 DA81                       		add.l	d1,d5
000077D4 6100 0000                  		bsr.w	ScrollBlock1
000077D8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000077DE 43F8 CC00                  		lea	($FFFFCC00).w,a1
000077E2 323C 00DF                  		move.w	#$DF,d1
000077E6 3038 F700                  		move.w	($FFFFF700).w,d0
000077EA 4440                       		neg.w	d0
000077EC 4840                       		swap	d0
000077EE 3038 F708                  		move.w	($FFFFF708).w,d0
000077F2 4440                       		neg.w	d0
000077F4                            
000077F4                            loc_653C:
000077F4 22C0                       		move.l	d0,(a1)+
000077F6 51C9 FFFC                  		dbf	d1,loc_653C
000077FA 4E75                       		rts	
000077FC                            ; End of function Deform_SYZ
000077FC                            
000077FC                            ; ---------------------------------------------------------------------------
000077FC                            ; Scrap	Brain Zone background layer deformation	code
000077FC                            ; ---------------------------------------------------------------------------
000077FC                            
000077FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077FC                            
000077FC                            
000077FC                            Deform_SBZ:				; XREF: Deform_Index
000077FC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007800 48C4                       		ext.l	d4
00007802 ED84                       		asl.l	#6,d4
00007804 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007808 48C5                       		ext.l	d5
0000780A E985                       		asl.l	#4,d5
0000780C E385                       		asl.l	#1,d5
0000780E 6100 0000                  		bsr.w	ScrollBlock1
00007812 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007818 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000781C 323C 00DF                  		move.w	#$DF,d1
00007820 3038 F700                  		move.w	($FFFFF700).w,d0
00007824 4440                       		neg.w	d0
00007826 4840                       		swap	d0
00007828 3038 F708                  		move.w	($FFFFF708).w,d0
0000782C 4440                       		neg.w	d0
0000782E                            
0000782E                            loc_6576:
0000782E 22C0                       		move.l	d0,(a1)+
00007830 51C9 FFFC                  		dbf	d1,loc_6576
00007834 4E75                       		rts	
00007836                            ; End of function Deform_SBZ
00007836                            
00007836                            ; ---------------------------------------------------------------------------
00007836                            ; UNDEFINED NAME Zone background layer deformation	code
00007836                            ; ---------------------------------------------------------------------------
00007836                            
00007836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007836                            
00007836                            
00007836                            Deform_IC:				; XREF: Deform_Index
00007836 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000783C 6600 0000                  		bne	Deform_IC1
00007840 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007844 48C4                       		ext.l	d4
00007846 EF84                       		asl.l	#7,d4
00007848 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000784C 48C5                       		ext.l	d5
0000784E EF85                       		asl.l	#7,d5
00007850 6100 0000                  		bsr.w	ScrollBlock2
00007854 31FC 0200 F70C             		move.w	#$0200,($FFFFF70C).w
0000785A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007860 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1 (Note: This is the S1 address. For S2, change to $FFFFE000.)
00007864                            
00007864 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007868 4440                       		neg.w	d0			; negate (positive to negative)
0000786A 4840                       		swap	d0			; send to the left side of d0
0000786C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007870 4440                       		neg.w	d0			; negate (positive to negative)
00007872 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00007874 323C 00DF                  		move.w	#224-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007878                            IC2_DeformLoop_2_1:
00007878 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000787A 51C9 FFFC                  		dbf	d1,IC2_DeformLoop_2_1	; repeat d1 number of scanlines
0000787E 4E75                       		rts
00007880                            
00007880 3838 F73A                  Deform_IC1:	move.w	($FFFFF73A).w,d4
00007884 48C4                       		ext.l	d4
00007886 EF84                       		asl.l	#7,d4
00007888 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000788C 48C5                       		ext.l	d5
0000788E EF85                       		asl.l	#7,d5
00007890 6100 0000                  		bsr.w	ScrollBlock2
00007894 0C78 0300 F700             		cmpi.w	#$300,($FFFFF700).w
0000789A 6500                       		bcs.s	Deform_IC_BG1
0000789C 0C38 0001 FF9F             		cmpi.b	#1,($FFFFFF9F).w
000078A2 6700 0000                  		beq	Deform_IC_BG2_Done
000078A6 4EB9 0000 0000             		jsr	Deform_IC_BG2_Load
000078AC 4EF9 0000 0000             		jmp	Deform_IC_Cont
000078B2                            
000078B2                            Deform_IC_BG1:
000078B2 4238 FF9F                  		clr.b	($FFFFFF9F).w
000078B6 31FC 0000 F70C             	        move.w	#$0000,($FFFFF70C).w	; lock the background vertically in place
000078BC 4EF9 0000 0000             		jmp	Deform_IC_Cont
000078C2                            
000078C2                            
000078C2                            Deform_IC_BG2_Load:
000078C2 0C78 0100 F70C             		cmpi.w	#$100,($FFFFF70C).w
000078C8 6500 0000                  		bcs	Deform_IC_BG2_Add
000078CC 701F                       		moveq	#$1F,d0
000078CE 4EB8 29FC                  		jsr	PalLoad2
000078D2 31FC 0100 F70C             		move.w	#$0100,($FFFFF70C).w
000078D8 11FC 0001 FF9F             		move.b	#1,($FFFFFF9F).w
000078DE 4E75                       		rts
000078E0                            
000078E0                            Deform_IC_BG2_Add:
000078E0 0678 0010 F70C             		add.w	#$10,($FFFFF70C).w
000078E6 4E75                       		rts
000078E8                            
000078E8                            Deform_IC_BG2_Done:
000078E8 31FC 0100 F70C             		move.w	#$0100,($FFFFF70C).w
000078EE 4EF9 0000 0000             		jmp	Deform_IC_Cont
000078F4                            
000078F4                            Deform_IC_Cont:
000078F4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000078FA 0C38 0001 FF9F             		cmpi.b	#1,($FFFFFF9F).w
00007900 6600                       		bne.s	Deform_IC_BG1_Loop
00007902 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1 (Note: This is the S1 address. For S2, change to $FFFFE000.)
00007906                            
00007906 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000790A 4440                       		neg.w	d0			; negate (positive to negative)
0000790C 4840                       		swap	d0			; send to the left side of d0
0000790E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007912 4440                       		neg.w	d0			; negate (positive to negative)
00007914 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00007916 323C 00DF                  		move.w	#224-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000791A                            IC_DeformLoop_2_1:
0000791A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000791C 51C9 FFFC                  		dbf	d1,IC_DeformLoop_2_1	; repeat d1 number of scanlines
00007920 4E75                       		rts
00007922                            
00007922                            ;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
00007922                            
00007922                            Deform_IC_BG1_Loop:
00007922 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1 (Note: This is the S1 address. For S2, change to $FFFFE000.)
00007926                            
00007926 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000792A 4440                       		neg.w	d0			; negate (positive to negative)
0000792C 4840                       		swap	d0			; send to the left side of d0
0000792E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007932 4440                       		neg.w	d0			; negate (positive to negative)
00007934 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00007936 323C 004D                  		move.w	#78-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000793A                            IC_DeformLoop_1:
0000793A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000793C 51C9 FFFC                  		dbf	d1,IC_DeformLoop_1	; repeat d1 number of scanlines
00007940                            
00007940 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007944 4440                       		neg.w	d0			; negate (positive to negative)
00007946 4840                       		swap	d0			; send to the left side of d0
00007948 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000794C 4440                       		neg.w	d0			; negate (positive to negative)
0000794E E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00007950 323C 000A                  		move.w	#11-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007954                            IC_DeformLoop_2:
00007954 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007956 51C9 FFFC                  		dbf	d1,IC_DeformLoop_2	; repeat d1 number of scanlines
0000795A                            
0000795A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000795E 4440                       		neg.w	d0			; negate (positive to negative)
00007960 4840                       		swap	d0			; send to the left side of d0
00007962 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007966 4440                       		neg.w	d0			; negate (positive to negative)
00007968 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000796A 323C 000E                  		move.w	#15-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000796E                            IC_DeformLoop_3:
0000796E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007970 51C9 FFFC                  		dbf	d1,IC_DeformLoop_3	; repeat d1 number of scanlines
00007974                            
00007974 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007978 4440                       		neg.w	d0			; negate (positive to negative)
0000797A 4840                       		swap	d0			; send to the left side of d0
0000797C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007980 4440                       		neg.w	d0			; negate (positive to negative)
00007982 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00007984 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007988                            IC_DeformLoop_4:
00007988 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000798A 51C9 FFFC                  		dbf	d1,IC_DeformLoop_4	; repeat d1 number of scanlines
0000798E                            
0000798E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007992 4440                       		neg.w	d0			; negate (positive to negative)
00007994 4840                       		swap	d0			; send to the left side of d0
00007996 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000799A 4440                       		neg.w	d0			; negate (positive to negative)
0000799C E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
0000799E 323C 0069                  		move.w	#106-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000079A2                            IC_DeformLoop_5:
000079A2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000079A4 51C9 FFFC                  		dbf	d1,IC_DeformLoop_5	; repeat d1 number of scanlines
000079A8                            ;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
000079A8 4E75                       		rts
000079AA                            ; End of function Deform_GHZ
000079AA                            
000079AA                            ; ---------------------------------------------------------------------------
000079AA                            ; Subroutine to	scroll the level horizontally as Sonic moves
000079AA                            ; ---------------------------------------------------------------------------
000079AA                            
000079AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079AA                            
000079AA                            
000079AA                            ScrollHoriz:				; XREF: DeformBgLayer
000079AA 3838 F700                  		move.w	($FFFFF700).w,d4
000079AE 6100                       		bsr.s	ScrollHoriz2
000079B0 3038 F700                  		move.w	($FFFFF700).w,d0
000079B4 0240 0010                  		andi.w	#$10,d0
000079B8 1238 F74A                  		move.b	($FFFFF74A).w,d1
000079BC B300                       		eor.b	d1,d0
000079BE 6600                       		bne.s	locret_65B0
000079C0 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000079C6 3038 F700                  		move.w	($FFFFF700).w,d0
000079CA 9044                       		sub.w	d4,d0
000079CC 6A00                       		bpl.s	loc_65AA
000079CE 08F8 0002 F754             		bset	#2,($FFFFF754).w
000079D4 4E75                       		rts	
000079D6                            ; ===========================================================================
000079D6                            
000079D6                            loc_65AA:
000079D6 08F8 0003 F754             		bset	#3,($FFFFF754).w
000079DC                            
000079DC                            locret_65B0:
000079DC 4E75                       		rts	
000079DE                            ; End of function ScrollHoriz
000079DE                            
000079DE                            
000079DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079DE                            
000079DE                            
000079DE                            ScrHoz_SetIgnoreDefault:
000079DE 4EF9 0000 0000             		jmp	ScrHoz_SetDefault		; ignore scroll adjustments
000079E4                            
000079E4                            ScrollHoriz2:
000079E4 4EF9 0000 0000             		jmp	ScrHoz_SetDefault
000079EA 0C38 0004 F600             		cmpi.b	#$04,($FFFFF600).w		; is screen mode "Title Screen"?
000079F0 67EC                       		beq.s	ScrHoz_SetIgnoreDefault		; if so, ignore scroll adjustments
000079F2 0838 0000 D022             		btst	#0,($FFFFD022).w		; is sonic facing left?
000079F8 6600 0000                  		bne.w	ScrHoz_LeftCheck		; if so, branch
000079FC                            
000079FC                            ; ===========================================================================
000079FC                            ; Right
000079FC                            ; ===========================================================================
000079FC                            
000079FC                            ScrHoz_RightCheck:
000079FC 0C38 0001 D039             		cmpi.b	#$01,($FFFFD039).w		; is sonic Charging peelout (Facing right)?
00007A02 6700                       		beq.s	ScrHoz_PeeloutRight		; if so, branch
00007A04                            ;		cmpi.w	#$600,($FFFFD014).w		; is Sonic at peelout speed?
00007A04                            ;		bge.s	ScrHoz_PeeloutRight		; if yes, branch
00007A04 0C78 0098 FFDA             		cmpi.w	#$0098,($FFFFFFDA).w		; is screen already extended to the left?
00007A0A 6C00                       		bge.s	ScrHoz_Restore_ForRight		; if so, branch
00007A0C 6000 0000                  		bra.w	ScrHoz_RContinCheck		; set default check
00007A10                            
00007A10                            ScrHoz_Restore_ForRight:
00007A10 5778 FFDA                  		sub.w	#$0003,($FFFFFFDA).w		; set camera speed to get to default possision
00007A14 6000 0000                  		bra.w	ScrollHoriz3			; add to settings
00007A18                            
00007A18                            ScrHoz_RContinCheck:
00007A18 0C78 0090 FFDA             		cmpi.w	#$0090,($FFFFFFDA).w		; is temp distance at default?
00007A1E 6400                       		bcc.s	ScrHoz_SetDefault		; if so, branch
00007A20 5678 FFDA                  		add.w	#$0003,($FFFFFFDA).w		; set camera speed to get to default possision
00007A24 6000 0000                  		bra.w	ScrollHoriz3			; add to settings
00007A28                            
00007A28                            ; ---------------------------------------------------------------------------
00007A28                            
00007A28                            ScrHoz_PeeloutRight:
00007A28 0C78 0050 FFDA             		cmpi.w	#$0050,($FFFFFFDA).w		; has screen fully extended to the right?
00007A2E 6F00                       		ble.s	ScrHoz_SetPeelout_Right		; if so or more, branch
00007A30 5778 FFDA                  		sub.w	#$0003,($FFFFFFDA).w		; set camera speed to get to peelout right possision
00007A34 6000 0000                  		bra.w	ScrollHoriz3			; add to settings
00007A38                            
00007A38                            ScrHoz_SetPeelout_Right:
00007A38 31FC 0050 FFDA             		move.w	#$0050,($FFFFFFDA).w		; set peelout right settings
00007A3E 6000 0000                  		bra.w	ScrollHoriz3			; add to settings
00007A42                            
00007A42                            ; ===========================================================================
00007A42                            ; LEFT
00007A42                            ; ===========================================================================
00007A42                            
00007A42                            ScrHoz_LeftCheck:
00007A42 0C38 0001 D039             		cmpi.b	#$01,($FFFFD039).w		; is sonic Charging peelout (Facing left)?
00007A48 6700                       		beq.s	ScrHoz_PeeloutLeft		; if so, branch
00007A4A                            ;		cmpi.w	#-$600,($FFFFD014).w		; is Sonic at peelout speed?
00007A4A                            ;		ble.s	ScrHoz_PeeloutLeft		; if yes, branch
00007A4A 0C78 0088 FFDA             		cmpi.w	#$0088,($FFFFFFDA).w		; is screen already extended to the right?
00007A50 6F00                       		ble.s	ScrHoz_Restore_ForLeft		; if so, branch
00007A52 6000 0000                  		bra.w	ScrHoz_LContinCheck		; set default check
00007A56                            
00007A56                            ScrHoz_Restore_ForLeft:
00007A56 5678 FFDA                  		add.w	#$0003,($FFFFFFDA).w		; set camera speed to get to default possision
00007A5A 6000 0000                  		bra.w	ScrollHoriz3			; add to settings
00007A5E                            
00007A5E                            ScrHoz_LContinCheck:
00007A5E 0C78 0090 FFDA             		cmpi.w	#$0090,($FFFFFFDA).w		; is temp distance at default?
00007A64 6F00                       		ble.s	ScrHoz_SetDefault		; if so, branch
00007A66 5778 FFDA                  		sub.w	#$0003,($FFFFFFDA).w		; set camera speed to get to default possision
00007A6A 6000 0000                  		bra.w	ScrollHoriz3			; add to settings
00007A6E                            
00007A6E                            ; ---------------------------------------------------------------------------
00007A6E                            
00007A6E                            ScrHoz_PeeloutLeft:
00007A6E 0C78 00E0 FFDA             		cmpi.w	#$00E0,($FFFFFFDA).w		; has screen fully extended to the left?
00007A74 6400                       		bcc.s	ScrHoz_SetPeelout_Left		; if so or more, branch
00007A76 5678 FFDA                  		add.w	#$0003,($FFFFFFDA).w		; set camera speed to get to peelout left possision
00007A7A 6000 0000                  		bra.w	ScrollHoriz3			; add to settings
00007A7E                            
00007A7E                            ScrHoz_SetPeelout_Left:
00007A7E 31FC 00E0 FFDA             		move.w	#$00E0,($FFFFFFDA).w		; set peelout left settings
00007A84 6000 0000                  		bra.w	ScrollHoriz3			; add to settings
00007A88                            
00007A88                            ; ===========================================================================
00007A88                            ; ===========================================================================
00007A88                            
00007A88                            ScrHoz_SetDefault:
00007A88 31FC 0090 FFDA             		move.w	#$0090,($FFFFFFDA).w		; set distance at default
00007A8E                            
00007A8E                            ; ---------------------------------------------------------------------------
00007A8E                            
00007A8E                            ScrollHoriz3:
00007A8E 0C38 0001 FFC1             		cmp.b	#$01,($FFFFFFC1)		; is camera set to stall?
00007A94 6700 0000                  		beq.w	Scrollstall			; if so, branch
00007A98 3038 D008                  		move.w	($FFFFD008).w,d0
00007A9C 9078 F700                  		sub.w	($FFFFF700).w,d0
00007AA0 9078 FFDA                  		sub.w	($FFFFFFDA).w,d0		; minus settings from final set
00007AA4 6500                       		bcs.s	loc_65F6
00007AA6 0440 0010                  		sub.w	#$10,d0
00007AAA 6400                       		bcc.s	loc_65CC
00007AAC 4278 F73A                  		clr.w	($FFFFF73A).w
00007AB0 4E75                       		rts					; return
00007AB2                            
00007AB2                            Scrollstall:
00007AB2 0C78 000E FFBE             		cmp.w	#$000E,($FFFFFFBE)		; has timer finished?
00007AB8 6D00                       		blt.s	ScrollTimer_Resume		; if not, branch
00007ABA 4238 FFC1                  		clr.b	($FFFFFFC1)			; clear camera stall set
00007ABE 4278 FFBE                  		clr.w	($FFFFFFBE)			; clear Stall timer
00007AC2 6000 FFCA                  		bra.w	ScrollHoriz3			; continue normal camera routine
00007AC6                            
00007AC6                            ScrollTimer_Resume:
00007AC6 5278 FFBE                  		add.w	#$0001,($FFFFFFBE).w		; increaser timer
00007ACA 4E75                       		rts					; return
00007ACC                            
00007ACC                            ; ===========================================================================
00007ACC                            
00007ACC                            loc_65CC:
00007ACC 0C40 0010                  		cmpi.w	#$10,d0
00007AD0 6500                       		bcs.s	loc_65D6
00007AD2 303C 0010                  		move.w	#$10,d0
00007AD6                            
00007AD6                            loc_65D6:
00007AD6 D078 F700                  		add.w	($FFFFF700).w,d0
00007ADA B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007ADE 6D00                       		blt.s	loc_65E4
00007AE0 3038 F72A                  		move.w	($FFFFF72A).w,d0
00007AE4                            
00007AE4                            loc_65E4:
00007AE4 3200                       		move.w	d0,d1
00007AE6 9278 F700                  		sub.w	($FFFFF700).w,d1
00007AEA E141                       		asl.w	#8,d1
00007AEC 31C0 F700                  		move.w	d0,($FFFFF700).w
00007AF0 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00007AF4 4E75                       		rts	
00007AF6                            ; ===========================================================================
00007AF6                            
00007AF6                            loc_65F6:				; XREF: ScrollHoriz2
00007AF6 0C40 FFF0                  		cmpi.w	#-$10,d0
00007AFA 6E00                       		bgt.s	@cont
00007AFC 303C FFF0                  		move.w	#-$10,d0	
00007B00                            		
00007B00                            @cont:
00007B00 D078 F700                  		add.w	($FFFFF700).w,d0
00007B04 B078 F728                  		cmp.w	($FFFFF728).w,d0
00007B08 6EDA                       		bgt.s	loc_65E4
00007B0A 3038 F728                  		move.w	($FFFFF728).w,d0
00007B0E 60D4                       		bra.s	loc_65E4
00007B10                            ; End of function ScrollHoriz2
00007B10                            
00007B10                            ; ===========================================================================
00007B10 4A40                       		tst.w	d0
00007B12 6A00                       		bpl.s	loc_6610
00007B14 303C FFFE                  		move.w	#-2,d0
00007B18 60DC                       		bra.s	loc_65F6
00007B1A                            ; ===========================================================================
00007B1A                            
00007B1A                            loc_6610:
00007B1A 303C 0002                  		move.w	#2,d0
00007B1E 60AC                       		bra.s	loc_65CC
00007B20                            
00007B20                            ; ---------------------------------------------------------------------------
00007B20                            ; Subroutine to	scroll the level vertically as Sonic moves
00007B20                            ; ---------------------------------------------------------------------------
00007B20                            
00007B20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B20                            
00007B20                            
00007B20                            ScrollVertical:				; XREF: DeformBgLayer
00007B20 7200                       		moveq	#0,d1
00007B22 3038 D00C                  		move.w	($FFFFD00C).w,d0
00007B26 9078 F704                  		sub.w	($FFFFF704).w,d0
00007B2A 0838 0002 D022             		btst	#2,($FFFFD022).w
00007B30 6700                       		beq.s	loc_662A
00007B32 5B40                       		subq.w	#5,d0
00007B34                            
00007B34                            loc_662A:
00007B34 0838 0001 D022             		btst	#1,($FFFFD022).w
00007B3A 6700                       		beq.s	loc_664A
00007B3C 0640 0020                  		addi.w	#$20,d0
00007B40 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007B44 6500                       		bcs.s	loc_6696
00007B46 0440 0040                  		subi.w	#$40,d0
00007B4A 6400                       		bcc.s	loc_6696
00007B4C 4A38 F75C                  		tst.b	($FFFFF75C).w
00007B50 6600                       		bne.s	loc_66A8
00007B52 6000                       		bra.s	loc_6656
00007B54                            ; ===========================================================================
00007B54                            
00007B54                            loc_664A:
00007B54 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007B58 6600                       		bne.s	loc_665C
00007B5A 4A38 F75C                  		tst.b	($FFFFF75C).w
00007B5E 6600                       		bne.s	loc_66A8
00007B60                            
00007B60                            loc_6656:
00007B60 4278 F73C                  		clr.w	($FFFFF73C).w
00007B64 4E75                       		rts	
00007B66                            ; ===========================================================================
00007B66                            
00007B66                            loc_665C:
00007B66 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007B6C 6600                       		bne.s	loc_6684
00007B6E 3238 D014                  		move.w	($FFFFD014).w,d1
00007B72 6A00                       		bpl.s	loc_666C
00007B74 4441                       		neg.w	d1
00007B76                            
00007B76                            loc_666C:
00007B76 0C41 0800                  		cmpi.w	#$800,d1
00007B7A 6400                       		bcc.s	loc_6696
00007B7C 323C 0600                  		move.w	#$600,d1
00007B80 0C40 0006                  		cmpi.w	#6,d0
00007B84 6E00                       		bgt.s	loc_66F6
00007B86 0C40 FFFA                  		cmpi.w	#-6,d0
00007B8A 6D00                       		blt.s	loc_66C0
00007B8C 6000                       		bra.s	loc_66AE
00007B8E                            ; ===========================================================================
00007B8E                            
00007B8E                            loc_6684:
00007B8E 323C 0200                  		move.w	#$200,d1
00007B92 0C40 0002                  		cmpi.w	#2,d0
00007B96 6E00                       		bgt.s	loc_66F6
00007B98 0C40 FFFE                  		cmpi.w	#-2,d0
00007B9C 6D00                       		blt.s	loc_66C0
00007B9E 6000                       		bra.s	loc_66AE
00007BA0                            ; ===========================================================================
00007BA0                            
00007BA0                            loc_6696:
00007BA0 323C 1000                  		move.w	#$1000,d1
00007BA4 0C40 0010                  		cmpi.w	#$10,d0
00007BA8 6E00                       		bgt.s	loc_66F6
00007BAA 0C40 FFF0                  		cmpi.w	#-$10,d0
00007BAE 6D00                       		blt.s	loc_66C0
00007BB0 6000                       		bra.s	loc_66AE
00007BB2                            ; ===========================================================================
00007BB2                            
00007BB2                            loc_66A8:
00007BB2 7000                       		moveq	#0,d0
00007BB4 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00007BB8                            
00007BB8                            loc_66AE:
00007BB8 7200                       		moveq	#0,d1
00007BBA 3200                       		move.w	d0,d1
00007BBC D278 F704                  		add.w	($FFFFF704).w,d1
00007BC0 4A40                       		tst.w	d0
00007BC2 6A00 0000                  		bpl.w	loc_6700
00007BC6 6000 0000                  		bra.w	loc_66CC
00007BCA                            ; ===========================================================================
00007BCA                            
00007BCA                            loc_66C0:
00007BCA 4441                       		neg.w	d1
00007BCC 48C1                       		ext.l	d1
00007BCE E181                       		asl.l	#8,d1
00007BD0 D2B8 F704                  		add.l	($FFFFF704).w,d1
00007BD4 4841                       		swap	d1
00007BD6                            
00007BD6                            loc_66CC:
00007BD6 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00007BDA 6E00                       		bgt.s	loc_6724
00007BDC 0C41 FF00                  		cmpi.w	#-$100,d1
00007BE0 6E00                       		bgt.s	loc_66F0
00007BE2 0241 07FF                  		andi.w	#$7FF,d1
00007BE6 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007BEC 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00007BF2 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007BF8 6000                       		bra.s	loc_6724
00007BFA                            ; ===========================================================================
00007BFA                            
00007BFA                            loc_66F0:
00007BFA 3238 F72C                  		move.w	($FFFFF72C).w,d1
00007BFE 6000                       		bra.s	loc_6724
00007C00                            ; ===========================================================================
00007C00                            
00007C00                            loc_66F6:
00007C00 48C1                       		ext.l	d1
00007C02 E181                       		asl.l	#8,d1
00007C04 D2B8 F704                  		add.l	($FFFFF704).w,d1
00007C08 4841                       		swap	d1
00007C0A                            
00007C0A                            loc_6700:
00007C0A B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00007C0E 6D00                       		blt.s	loc_6724
00007C10 0441 0800                  		subi.w	#$800,d1
00007C14 6500                       		bcs.s	loc_6720
00007C16 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007C1C 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00007C22 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007C28 6000                       		bra.s	loc_6724
00007C2A                            ; ===========================================================================
00007C2A                            
00007C2A                            loc_6720:
00007C2A 3238 F72E                  		move.w	($FFFFF72E).w,d1
00007C2E                            
00007C2E                            loc_6724:
00007C2E 3838 F704                  		move.w	($FFFFF704).w,d4
00007C32 4841                       		swap	d1
00007C34 2601                       		move.l	d1,d3
00007C36 96B8 F704                  		sub.l	($FFFFF704).w,d3
00007C3A E09B                       		ror.l	#8,d3
00007C3C 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00007C40 21C1 F704                  		move.l	d1,($FFFFF704).w
00007C44 3038 F704                  		move.w	($FFFFF704).w,d0
00007C48 0240 0010                  		andi.w	#$10,d0
00007C4C 1238 F74B                  		move.b	($FFFFF74B).w,d1
00007C50 B300                       		eor.b	d1,d0
00007C52 6600                       		bne.s	locret_6766
00007C54 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00007C5A 3038 F704                  		move.w	($FFFFF704).w,d0
00007C5E 9044                       		sub.w	d4,d0
00007C60 6A00                       		bpl.s	loc_6760
00007C62 08F8 0000 F754             		bset	#0,($FFFFF754).w
00007C68 4E75                       		rts	
00007C6A                            ; ===========================================================================
00007C6A                            
00007C6A                            loc_6760:
00007C6A 08F8 0001 F754             		bset	#1,($FFFFF754).w
00007C70                            
00007C70                            locret_6766:
00007C70 4E75                       		rts	
00007C72                            ; End of function ScrollVertical
00007C72                            
00007C72                            
00007C72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C72                            
00007C72                            
00007C72                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00007C72 2438 F708                  		move.l	($FFFFF708).w,d2
00007C76 2002                       		move.l	d2,d0
00007C78 D084                       		add.l	d4,d0
00007C7A 21C0 F708                  		move.l	d0,($FFFFF708).w
00007C7E 2200                       		move.l	d0,d1
00007C80 4841                       		swap	d1
00007C82 0241 0010                  		andi.w	#$10,d1
00007C86 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007C8A B701                       		eor.b	d3,d1
00007C8C 6600                       		bne.s	loc_679C
00007C8E 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007C94 9082                       		sub.l	d2,d0
00007C96 6A00                       		bpl.s	loc_6796
00007C98 08F8 0002 F756             		bset	#2,($FFFFF756).w
00007C9E 6000                       		bra.s	loc_679C
00007CA0                            ; ===========================================================================
00007CA0                            
00007CA0                            loc_6796:
00007CA0 08F8 0003 F756             		bset	#3,($FFFFF756).w
00007CA6                            
00007CA6                            loc_679C:
00007CA6 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007CAA 2003                       		move.l	d3,d0
00007CAC D085                       		add.l	d5,d0
00007CAE 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007CB2 2200                       		move.l	d0,d1
00007CB4 4841                       		swap	d1
00007CB6 0241 0010                  		andi.w	#$10,d1
00007CBA 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007CBE B501                       		eor.b	d2,d1
00007CC0 6600                       		bne.s	locret_67D0
00007CC2 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007CC8 9083                       		sub.l	d3,d0
00007CCA 6A00                       		bpl.s	loc_67CA
00007CCC 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007CD2 4E75                       		rts	
00007CD4                            ; ===========================================================================
00007CD4                            
00007CD4                            loc_67CA:
00007CD4 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007CDA                            
00007CDA                            locret_67D0:
00007CDA 4E75                       		rts	
00007CDC                            ; End of function ScrollBlock1
00007CDC                            
00007CDC                            
00007CDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CDC                            
00007CDC                            
00007CDC                            ScrollBlock2:				; XREF: Deform_SLZ
00007CDC 2438 F708                  		move.l	($FFFFF708).w,d2
00007CE0 2002                       		move.l	d2,d0
00007CE2 D084                       		add.l	d4,d0
00007CE4 21C0 F708                  		move.l	d0,($FFFFF708).w
00007CE8 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007CEC 2003                       		move.l	d3,d0
00007CEE D085                       		add.l	d5,d0
00007CF0 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007CF4 2200                       		move.l	d0,d1
00007CF6 4841                       		swap	d1
00007CF8 0241 0010                  		andi.w	#$10,d1
00007CFC 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007D00 B501                       		eor.b	d2,d1
00007D02 6600                       		bne.s	locret_6812
00007D04 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007D0A 9083                       		sub.l	d3,d0
00007D0C 6A00                       		bpl.s	loc_680C
00007D0E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007D14 4E75                       		rts	
00007D16                            ; ===========================================================================
00007D16                            
00007D16                            loc_680C:
00007D16 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007D1C                            
00007D1C                            locret_6812:
00007D1C 4E75                       		rts	
00007D1E                            ; End of function ScrollBlock2
00007D1E                            
00007D1E                            
00007D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D1E                            
00007D1E                            
00007D1E                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00007D1E 3638 F70C                  		move.w	($FFFFF70C).w,d3
00007D22 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007D26 3200                       		move.w	d0,d1
00007D28 0241 0010                  		andi.w	#$10,d1
00007D2C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007D30 B501                       		eor.b	d2,d1
00007D32 6600                       		bne.s	locret_6842
00007D34 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007D3A 9043                       		sub.w	d3,d0
00007D3C 6A00                       		bpl.s	loc_683C
00007D3E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007D44 4E75                       		rts	
00007D46                            ; ===========================================================================
00007D46                            
00007D46                            loc_683C:
00007D46 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007D4C                            
00007D4C                            locret_6842:
00007D4C 4E75                       		rts	
00007D4E                            ; End of function ScrollBlock3
00007D4E                            
00007D4E                            
00007D4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D4E                            
00007D4E                            
00007D4E                            ScrollBlock4:				; XREF: Deform_GHZ
00007D4E 3438 F710                  		move.w	($FFFFF710).w,d2
00007D52 3638 F714                  		move.w	($FFFFF714).w,d3
00007D56 3038 F73A                  		move.w	($FFFFF73A).w,d0
00007D5A 48C0                       		ext.l	d0
00007D5C EF80                       		asl.l	#7,d0
00007D5E D1B8 F710                  		add.l	d0,($FFFFF710).w
00007D62 3038 F710                  		move.w	($FFFFF710).w,d0
00007D66 0240 0010                  		andi.w	#$10,d0
00007D6A 1238 F74E                  		move.b	($FFFFF74E).w,d1
00007D6E B300                       		eor.b	d1,d0
00007D70 6600                       		bne.s	locret_6884
00007D72 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007D78 3038 F710                  		move.w	($FFFFF710).w,d0
00007D7C 9042                       		sub.w	d2,d0
00007D7E 6A00                       		bpl.s	loc_687E
00007D80 08F8 0002 F758             		bset	#2,($FFFFF758).w
00007D86 6000                       		bra.s	locret_6884
00007D88                            ; ===========================================================================
00007D88                            
00007D88                            loc_687E:
00007D88 08F8 0003 F758             		bset	#3,($FFFFF758).w
00007D8E                            
00007D8E                            locret_6884:
00007D8E 4E75                       		rts	
00007D90                            ; End of function ScrollBlock4
00007D90                            
00007D90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D90                            
00007D90                            
00007D90                            sub_6886:				; XREF: loc_C44
00007D90 4BF9 00C0 0004             		lea	($C00004).l,a5
00007D96 4DF9 00C0 0000             		lea	($C00000).l,a6
00007D9C 45F8 F756                  		lea	($FFFFF756).w,a2
00007DA0 47F8 F708                  		lea	($FFFFF708).w,a3
00007DA4 49F8 A440                  		lea	($FFFFA440).w,a4
00007DA8 343C 6000                  		move.w	#$6000,d2
00007DAC 6100 0000                  		bsr.w	sub_6954
00007DB0 45F8 F758                  		lea	($FFFFF758).w,a2
00007DB4 47F8 F710                  		lea	($FFFFF710).w,a3
00007DB8 6000 0000                  		bra.w	sub_69F4
00007DBC                            ; End of function sub_6886
00007DBC                            
00007DBC                            ; ---------------------------------------------------------------------------
00007DBC                            ; Subroutine to	display	correct	tiles as you move
00007DBC                            ; ---------------------------------------------------------------------------
00007DBC                            
00007DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DBC                            
00007DBC                            
00007DBC                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007DBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00007DC2 4DF9 00C0 0000             		lea	($C00000).l,a6
00007DC8 45F8 FF32                  		lea	($FFFFFF32).w,a2
00007DCC 47F8 FF18                  		lea	($FFFFFF18).w,a3
00007DD0 49F8 A440                  		lea	($FFFFA440).w,a4
00007DD4 343C 6000                  		move.w	#$6000,d2
00007DD8 6100 0000                  		bsr.w	sub_6954
00007DDC 45F8 FF34                  		lea	($FFFFFF34).w,a2
00007DE0 47F8 FF20                  		lea	($FFFFFF20).w,a3
00007DE4 6100 0000                  		bsr.w	sub_69F4
00007DE8 45F8 FF30                  		lea	($FFFFFF30).w,a2
00007DEC 47F8 FF10                  		lea	($FFFFFF10).w,a3
00007DF0 49F8 A400                  		lea	($FFFFA400).w,a4
00007DF4 343C 4000                  		move.w	#$4000,d2
00007DF8 4A12                       		tst.b	(a2)
00007DFA 6700                       		beq.s	locret_6952
00007DFC 0892 0000                  		bclr	#0,(a2)
00007E00 6700                       		beq.s	loc_6908
00007E02 78F0                       		moveq	#-$10,d4
00007E04 7AF0                       		moveq	#-$10,d5
00007E06 6100 0000                  		bsr.w	sub_6C20
00007E0A 78F0                       		moveq	#-$10,d4
00007E0C 7AF0                       		moveq	#-$10,d5
00007E0E 6100 0000                  		bsr.w	sub_6AD8
00007E12                            
00007E12                            loc_6908:
00007E12 0892 0001                  		bclr	#1,(a2)
00007E16 6700                       		beq.s	loc_6922
00007E18 383C 00E0                  		move.w	#$E0,d4
00007E1C 7AF0                       		moveq	#-$10,d5
00007E1E 6100 0000                  		bsr.w	sub_6C20
00007E22 383C 00E0                  		move.w	#$E0,d4
00007E26 7AF0                       		moveq	#-$10,d5
00007E28 6100 0000                  		bsr.w	sub_6AD8
00007E2C                            
00007E2C                            loc_6922:
00007E2C 0892 0002                  		bclr	#2,(a2)
00007E30 6700                       		beq.s	loc_6938
00007E32 78F0                       		moveq	#-$10,d4
00007E34 7AF0                       		moveq	#-$10,d5
00007E36 6100 0000                  		bsr.w	sub_6C20
00007E3A 78F0                       		moveq	#-$10,d4
00007E3C 7AF0                       		moveq	#-$10,d5
00007E3E 6100 0000                  		bsr.w	sub_6B04
00007E42                            
00007E42                            loc_6938:
00007E42 0892 0003                  		bclr	#3,(a2)
00007E46 6700                       		beq.s	locret_6952
00007E48 78F0                       		moveq	#-$10,d4
00007E4A 3A3C 0140                  		move.w	#$140,d5
00007E4E 6100 0000                  		bsr.w	sub_6C20
00007E52 78F0                       		moveq	#-$10,d4
00007E54 3A3C 0140                  		move.w	#$140,d5
00007E58 6100 0000                  		bsr.w	sub_6B04
00007E5C                            
00007E5C                            locret_6952:
00007E5C 4E75                       		rts	
00007E5E                            ; End of function LoadTilesAsYouMove
00007E5E                            
00007E5E                            
00007E5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E5E                            
00007E5E                            
00007E5E                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00007E5E 4A12                       		tst.b	(a2)
00007E60 6700 0000                  		beq.w	locret_69F2
00007E64 0892 0000                  		bclr	#0,(a2)
00007E68 6700                       		beq.s	loc_6972
00007E6A 78F0                       		moveq	#-$10,d4
00007E6C 7AF0                       		moveq	#-$10,d5
00007E6E 6100 0000                  		bsr.w	sub_6C20
00007E72 78F0                       		moveq	#-$10,d4
00007E74 7AF0                       		moveq	#-$10,d5
00007E76 7C1F                       		moveq	#$1F,d6
00007E78 6100 0000                  		bsr.w	sub_6ADA
00007E7C                            
00007E7C                            loc_6972:
00007E7C 0892 0001                  		bclr	#1,(a2)
00007E80 6700                       		beq.s	loc_698E
00007E82 383C 00E0                  		move.w	#$E0,d4
00007E86 7AF0                       		moveq	#-$10,d5
00007E88 6100 0000                  		bsr.w	sub_6C20
00007E8C 383C 00E0                  		move.w	#$E0,d4
00007E90 7AF0                       		moveq	#-$10,d5
00007E92 7C1F                       		moveq	#$1F,d6
00007E94 6100 0000                  		bsr.w	sub_6ADA
00007E98                            
00007E98                            loc_698E:
00007E98 0892 0002                  		bclr	#2,(a2)
00007E9C 6700                       		beq.s	loc_69BE
00007E9E 78F0                       		moveq	#-$10,d4
00007EA0 7AF0                       		moveq	#-$10,d5
00007EA2 6100 0000                  		bsr.w	sub_6C20
00007EA6 78F0                       		moveq	#-$10,d4
00007EA8 7AF0                       		moveq	#-$10,d5
00007EAA 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007EAE 322B 0004                  		move.w	4(a3),d1
00007EB2 0241 FFF0                  		andi.w	#-$10,d1
00007EB6 9C41                       		sub.w	d1,d6
00007EB8 6D00                       		blt.s	loc_69BE
00007EBA E84E                       		lsr.w	#4,d6
00007EBC 0C46 000F                  		cmpi.w	#$F,d6
00007EC0 6500                       		bcs.s	loc_69BA
00007EC2 7C0F                       		moveq	#$F,d6
00007EC4                            
00007EC4                            loc_69BA:
00007EC4 6100 0000                  		bsr.w	sub_6B06
00007EC8                            
00007EC8                            loc_69BE:
00007EC8 0892 0003                  		bclr	#3,(a2)
00007ECC 6700                       		beq.s	locret_69F2
00007ECE 78F0                       		moveq	#-$10,d4
00007ED0 3A3C 0140                  		move.w	#$140,d5
00007ED4 6100 0000                  		bsr.w	sub_6C20
00007ED8 78F0                       		moveq	#-$10,d4
00007EDA 3A3C 0140                  		move.w	#$140,d5
00007EDE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007EE2 322B 0004                  		move.w	4(a3),d1
00007EE6 0241 FFF0                  		andi.w	#-$10,d1
00007EEA 9C41                       		sub.w	d1,d6
00007EEC 6D00                       		blt.s	locret_69F2
00007EEE E84E                       		lsr.w	#4,d6
00007EF0 0C46 000F                  		cmpi.w	#$F,d6
00007EF4 6500                       		bcs.s	loc_69EE
00007EF6 7C0F                       		moveq	#$F,d6
00007EF8                            
00007EF8                            loc_69EE:
00007EF8 6100 0000                  		bsr.w	sub_6B06
00007EFC                            
00007EFC                            locret_69F2:
00007EFC 4E75                       		rts	
00007EFE                            ; End of function sub_6954
00007EFE                            
00007EFE                            
00007EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EFE                            
00007EFE                            
00007EFE                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00007EFE 4A12                       		tst.b	(a2)
00007F00 6700 0000                  		beq.w	locret_6A80
00007F04 0892 0002                  		bclr	#2,(a2)
00007F08 6700                       		beq.s	loc_6A3E
00007F0A 0C53 0010                  		cmpi.w	#$10,(a3)
00007F0E 6500                       		bcs.s	loc_6A3E
00007F10 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007F14 322B 0004                  		move.w	4(a3),d1
00007F18 0241 FFF0                  		andi.w	#-$10,d1
00007F1C 9841                       		sub.w	d1,d4
00007F1E 3F04                       		move.w	d4,-(sp)
00007F20 7AF0                       		moveq	#-$10,d5
00007F22 6100 0000                  		bsr.w	sub_6C20
00007F26 381F                       		move.w	(sp)+,d4
00007F28 7AF0                       		moveq	#-$10,d5
00007F2A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007F2E 322B 0004                  		move.w	4(a3),d1
00007F32 0241 FFF0                  		andi.w	#-$10,d1
00007F36 9C41                       		sub.w	d1,d6
00007F38 6D00                       		blt.s	loc_6A3E
00007F3A E84E                       		lsr.w	#4,d6
00007F3C 0446 000E                  		subi.w	#$E,d6
00007F40 6400                       		bcc.s	loc_6A3E
00007F42 4446                       		neg.w	d6
00007F44 6100 0000                  		bsr.w	sub_6B06
00007F48                            
00007F48                            loc_6A3E:
00007F48 0892 0003                  		bclr	#3,(a2)
00007F4C 6700                       		beq.s	locret_6A80
00007F4E 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007F52 322B 0004                  		move.w	4(a3),d1
00007F56 0241 FFF0                  		andi.w	#-$10,d1
00007F5A 9841                       		sub.w	d1,d4
00007F5C 3F04                       		move.w	d4,-(sp)
00007F5E 3A3C 0140                  		move.w	#$140,d5
00007F62 6100 0000                  		bsr.w	sub_6C20
00007F66 381F                       		move.w	(sp)+,d4
00007F68 3A3C 0140                  		move.w	#$140,d5
00007F6C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007F70 322B 0004                  		move.w	4(a3),d1
00007F74 0241 FFF0                  		andi.w	#-$10,d1
00007F78 9C41                       		sub.w	d1,d6
00007F7A 6D00                       		blt.s	locret_6A80
00007F7C E84E                       		lsr.w	#4,d6
00007F7E 0446 000E                  		subi.w	#$E,d6
00007F82 6400                       		bcc.s	locret_6A80
00007F84 4446                       		neg.w	d6
00007F86 6100 0000                  		bsr.w	sub_6B06
00007F8A                            
00007F8A                            locret_6A80:
00007F8A 4E75                       		rts	
00007F8C                            ; End of function sub_69F4
00007F8C                            
00007F8C                            ; ===========================================================================
00007F8C 4A12                       		tst.b	(a2)
00007F8E 6700                       		beq.s	locret_6AD6
00007F90 0892 0002                  		bclr	#2,(a2)
00007F94 6700                       		beq.s	loc_6AAC
00007F96 383C 00D0                  		move.w	#$D0,d4
00007F9A 322B 0004                  		move.w	4(a3),d1
00007F9E 0241 FFF0                  		andi.w	#-$10,d1
00007FA2 9841                       		sub.w	d1,d4
00007FA4 3F04                       		move.w	d4,-(sp)
00007FA6 7AF0                       		moveq	#-$10,d5
00007FA8 6100 0000                  		bsr.w	sub_6C3C
00007FAC 381F                       		move.w	(sp)+,d4
00007FAE 7AF0                       		moveq	#-$10,d5
00007FB0 7C02                       		moveq	#2,d6
00007FB2 6100 0000                  		bsr.w	sub_6B06
00007FB6                            
00007FB6                            loc_6AAC:
00007FB6 0892 0003                  		bclr	#3,(a2)
00007FBA 6700                       		beq.s	locret_6AD6
00007FBC 383C 00D0                  		move.w	#$D0,d4
00007FC0 322B 0004                  		move.w	4(a3),d1
00007FC4 0241 FFF0                  		andi.w	#-$10,d1
00007FC8 9841                       		sub.w	d1,d4
00007FCA 3F04                       		move.w	d4,-(sp)
00007FCC 3A3C 0140                  		move.w	#$140,d5
00007FD0 6100 0000                  		bsr.w	sub_6C3C
00007FD4 381F                       		move.w	(sp)+,d4
00007FD6 3A3C 0140                  		move.w	#$140,d5
00007FDA 7C02                       		moveq	#2,d6
00007FDC 6100 0000                  		bsr.w	sub_6B06
00007FE0                            
00007FE0                            locret_6AD6:
00007FE0 4E75                       		rts	
00007FE2                            
00007FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FE2                            
00007FE2                            
00007FE2                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007FE2 7C15                       		moveq	#$15,d6
00007FE4                            ; End of function sub_6AD8
00007FE4                            
00007FE4                            
00007FE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FE4                            
00007FE4                            
00007FE4                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007FE4 2E3C 0080 0000             		move.l	#$800000,d7
00007FEA 2200                       		move.l	d0,d1
00007FEC                            
00007FEC                            loc_6AE2:
00007FEC 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007FF0 6100 0000                  		bsr.w	sub_6BD6
00007FF4 2001                       		move.l	d1,d0
00007FF6 6100 0000                  		bsr.w	sub_6B32
00007FFA 5801                       		addq.b	#4,d1
00007FFC 0201 007F                  		andi.b	#$7F,d1
00008000 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008004 0645 0010                  		addi.w	#$10,d5
00008008 51CE FFE2                  		dbf	d6,loc_6AE2
0000800C 4E75                       		rts	
0000800E                            ; End of function sub_6ADA
0000800E                            
0000800E                            
0000800E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000800E                            
0000800E                            
0000800E                            sub_6B04:				; XREF: LoadTilesAsYouMove
0000800E 7C0F                       		moveq	#$F,d6
00008010                            ; End of function sub_6B04
00008010                            
00008010                            
00008010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008010                            
00008010                            
00008010                            sub_6B06:				; XREF: sub_6954
00008010 2E3C 0080 0000             		move.l	#$800000,d7
00008016 2200                       		move.l	d0,d1
00008018                            
00008018                            loc_6B0E:
00008018 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000801C 6100 0000                  		bsr.w	sub_6BD6
00008020 2001                       		move.l	d1,d0
00008022 6100 0000                  		bsr.w	sub_6B32
00008026 0641 0100                  		addi.w	#$100,d1
0000802A 0241 0FFF                  		andi.w	#$FFF,d1
0000802E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008032 0644 0010                  		addi.w	#$10,d4
00008036 51CE FFE0                  		dbf	d6,loc_6B0E
0000803A 4E75                       		rts	
0000803C                            ; End of function sub_6B06
0000803C                            
0000803C                            
0000803C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000803C                            
0000803C                            
0000803C                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
0000803C 8042                       		or.w	d2,d0
0000803E 4840                       		swap	d0
00008040 0810 0004                  		btst	#4,(a0)
00008044 6600                       		bne.s	loc_6B6E
00008046 0810 0003                  		btst	#3,(a0)
0000804A 6600                       		bne.s	loc_6B4E
0000804C 2A80                       		move.l	d0,(a5)
0000804E 2C99                       		move.l	(a1)+,(a6)
00008050 D087                       		add.l	d7,d0
00008052 2A80                       		move.l	d0,(a5)
00008054 2C99                       		move.l	(a1)+,(a6)
00008056 4E75                       		rts	
00008058                            ; ===========================================================================
00008058                            
00008058                            loc_6B4E:
00008058 2A80                       		move.l	d0,(a5)
0000805A 2819                       		move.l	(a1)+,d4
0000805C 0A84 0800 0800             		eori.l	#$8000800,d4
00008062 4844                       		swap	d4
00008064 2C84                       		move.l	d4,(a6)
00008066 D087                       		add.l	d7,d0
00008068 2A80                       		move.l	d0,(a5)
0000806A 2819                       		move.l	(a1)+,d4
0000806C 0A84 0800 0800             		eori.l	#$8000800,d4
00008072 4844                       		swap	d4
00008074 2C84                       		move.l	d4,(a6)
00008076 4E75                       		rts	
00008078                            ; ===========================================================================
00008078                            
00008078                            loc_6B6E:
00008078 0810 0003                  		btst	#3,(a0)
0000807C 6600                       		bne.s	loc_6B90
0000807E 2A80                       		move.l	d0,(a5)
00008080 2A19                       		move.l	(a1)+,d5
00008082 2819                       		move.l	(a1)+,d4
00008084 0A84 1000 1000             		eori.l	#$10001000,d4
0000808A 2C84                       		move.l	d4,(a6)
0000808C D087                       		add.l	d7,d0
0000808E 2A80                       		move.l	d0,(a5)
00008090 0A85 1000 1000             		eori.l	#$10001000,d5
00008096 2C85                       		move.l	d5,(a6)
00008098 4E75                       		rts	
0000809A                            ; ===========================================================================
0000809A                            
0000809A                            loc_6B90:
0000809A 2A80                       		move.l	d0,(a5)
0000809C 2A19                       		move.l	(a1)+,d5
0000809E 2819                       		move.l	(a1)+,d4
000080A0 0A84 1800 1800             		eori.l	#$18001800,d4
000080A6 4844                       		swap	d4
000080A8 2C84                       		move.l	d4,(a6)
000080AA D087                       		add.l	d7,d0
000080AC 2A80                       		move.l	d0,(a5)
000080AE 0A85 1800 1800             		eori.l	#$18001800,d5
000080B4 4845                       		swap	d5
000080B6 2C85                       		move.l	d5,(a6)
000080B8 4E75                       		rts	
000080BA                            ; End of function sub_6B32
000080BA                            
000080BA                            ; ===========================================================================
000080BA 4E75                       		rts	
000080BC                            ; ===========================================================================
000080BC 2A80                       		move.l	d0,(a5)
000080BE 3A3C 2000                  		move.w	#$2000,d5
000080C2 3819                       		move.w	(a1)+,d4
000080C4 D845                       		add.w	d5,d4
000080C6 3C84                       		move.w	d4,(a6)
000080C8 3819                       		move.w	(a1)+,d4
000080CA D845                       		add.w	d5,d4
000080CC 3C84                       		move.w	d4,(a6)
000080CE D087                       		add.l	d7,d0
000080D0 2A80                       		move.l	d0,(a5)
000080D2 3819                       		move.w	(a1)+,d4
000080D4 D845                       		add.w	d5,d4
000080D6 3C84                       		move.w	d4,(a6)
000080D8 3819                       		move.w	(a1)+,d4
000080DA D845                       		add.w	d5,d4
000080DC 3C84                       		move.w	d4,(a6)
000080DE 4E75                       		rts	
000080E0                            
000080E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080E0                            
000080E0                            
000080E0                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000080E0 43F8 B000                  		lea	($FFFFB000).w,a1
000080E4 D86B 0004                  		add.w	4(a3),d4
000080E8 DA53                       		add.w	(a3),d5
000080EA 3604                       		move.w	d4,d3
000080EC E24B                       		lsr.w	#1,d3
000080EE 0243 0380                  		andi.w	#$380,d3
000080F2 E64D                       		lsr.w	#3,d5
000080F4 3005                       		move.w	d5,d0
000080F6 EA48                       		lsr.w	#5,d0
000080F8 0240 007F                  		andi.w	#$7F,d0
000080FC D043                       		add.w	d3,d0
000080FE 76FF                       		moveq	#-1,d3
00008100 1634 0000                  		move.b	(a4,d0.w),d3
00008104 6700                       		beq.s	locret_6C1E
00008106 5303                       		subq.b	#1,d3
00008108 0243 007F                  		andi.w	#$7F,d3
0000810C EE5B                       		ror.w	#7,d3
0000810E D844                       		add.w	d4,d4
00008110 0244 01E0                  		andi.w	#$1E0,d4
00008114 0245 001E                  		andi.w	#$1E,d5
00008118 D644                       		add.w	d4,d3
0000811A D645                       		add.w	d5,d3
0000811C 2043                       		movea.l	d3,a0
0000811E 3610                       		move.w	(a0),d3
00008120 0243 03FF                  		andi.w	#$3FF,d3
00008124 E74B                       		lsl.w	#3,d3
00008126 D2C3                       		adda.w	d3,a1
00008128                            
00008128                            locret_6C1E:
00008128 4E75                       		rts	
0000812A                            ; End of function sub_6BD6
0000812A                            
0000812A                            
0000812A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000812A                            
0000812A                            
0000812A                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000812A D86B 0004                  		add.w	4(a3),d4
0000812E DA53                       		add.w	(a3),d5
00008130 0244 00F0                  		andi.w	#$F0,d4
00008134 0245 01F0                  		andi.w	#$1F0,d5
00008138 E94C                       		lsl.w	#4,d4
0000813A E44D                       		lsr.w	#2,d5
0000813C D845                       		add.w	d5,d4
0000813E 7003                       		moveq	#3,d0
00008140 4840                       		swap	d0
00008142 3004                       		move.w	d4,d0
00008144 4E75                       		rts	
00008146                            ; End of function sub_6C20
00008146                            
00008146                            
00008146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008146                            ; not used
00008146                            
00008146                            
00008146                            sub_6C3C:
00008146 D86B 0004                  		add.w	4(a3),d4
0000814A DA53                       		add.w	(a3),d5
0000814C 0244 00F0                  		andi.w	#$F0,d4
00008150 0245 01F0                  		andi.w	#$1F0,d5
00008154 E94C                       		lsl.w	#4,d4
00008156 E44D                       		lsr.w	#2,d5
00008158 D845                       		add.w	d5,d4
0000815A 7002                       		moveq	#2,d0
0000815C 4840                       		swap	d0
0000815E 3004                       		move.w	d4,d0
00008160 4E75                       		rts	
00008162                            ; End of function sub_6C3C
00008162                            
00008162                            ; ---------------------------------------------------------------------------
00008162                            ; Subroutine to	load tiles as soon as the level	appears
00008162                            ; ---------------------------------------------------------------------------
00008162                            
00008162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008162                            
00008162                            
00008162                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00008162 4BF9 00C0 0004             		lea	($C00004).l,a5
00008168 4DF9 00C0 0000             		lea	($C00000).l,a6
0000816E 47F8 F700                  		lea	($FFFFF700).w,a3
00008172 49F8 A400                  		lea	($FFFFA400).w,a4
00008176 343C 4000                  		move.w	#$4000,d2
0000817A 6100                       		bsr.s	LoadTilesFromStart2
0000817C 47F8 F708                  		lea	($FFFFF708).w,a3
00008180 49F8 A440                  		lea	($FFFFA440).w,a4
00008184 343C 6000                  		move.w	#$6000,d2
00008188                            ; End of function LoadTilesFromStart
00008188                            
00008188                            
00008188                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008188                            
00008188                            
00008188                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00008188 78F0                       		moveq	#-$10,d4
0000818A 7C0F                       		moveq	#$F,d6
0000818C                            
0000818C                            loc_6C82:
0000818C 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008190 7A00                       		moveq	#0,d5
00008192 3204                       		move.w	d4,d1
00008194 6100 FF94                  		bsr.w	sub_6C20
00008198 3801                       		move.w	d1,d4
0000819A 7A00                       		moveq	#0,d5
0000819C 7C1F                       		moveq	#$1F,d6
0000819E 6100 FE44                  		bsr.w	sub_6ADA
000081A2 4CDF 0070                  		movem.l	(sp)+,d4-d6
000081A6 0644 0010                  		addi.w	#$10,d4
000081AA 51CE FFE0                  		dbf	d6,loc_6C82
000081AE 4E75                       		rts	
000081B0                            ; End of function LoadTilesFromStart2
000081B0                             
000081B0                            ; ---------------------------------------------------------------------------
000081B0                            ; Main Load Block loading subroutine
000081B0                            ; ---------------------------------------------------------------------------
000081B0                            
000081B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081B0                            
000081B0                            
000081B0                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000081B0 7000                       		moveq	#0,d0
000081B2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000081B6 E948                       		lsl.w	#4,d0
000081B8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000081BE 45F2 0000                  		lea	(a2,d0.w),a2
000081C2 2F0A                       		move.l	a2,-(sp)
000081C4 588A                       		addq.l	#4,a2
000081C6 205A                       		movea.l	(a2)+,a0
000081C8 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000081CC 303C 0000                  		move.w	#0,d0
000081D0 6100 9D6E                  		bsr.w	EniDec
000081D4 205A                       		movea.l	(a2)+,a0
000081D6 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000081DC 6100 9EE0                  		bsr.w	KosDec
000081E0 6100 0000                  		bsr.w	LevelLayoutLoad
000081E4 301A                       		move.w	(a2)+,d0
000081E6 3012                       		move.w	(a2),d0
000081E8 0240 00FF                  		andi.w	#$FF,d0
000081EC 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000081F2 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000081F4 700C                       		moveq	#$C,d0		; use SB3 pallet
000081F6                            
000081F6                            MLB_ChkSBZPal:
000081F6 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000081FC 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000081FE 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00008204 6600                       		bne.s	MLB_ChkAHZPal	; if not, branch
00008206                            
00008206                            MLB_UsePal0E:
00008206 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00008208                            
00008208                            MLB_ChkAHZPal:
00008208 0C78 0002 FE10             		cmpi.w	#$2,($FFFFFE10).w ; is level AHZ3?
0000820E 6600                       		bne.s	MLB_ChkFinalPal	; if not, branch
00008210 7018                       		moveq	#$18,d0		; use AHZ3 pallet
00008212                            
00008212                            MLB_ChkFinalPal:
00008212 0C78 0801 FE10             		cmpi.w	#$801,($FFFFFE10).w
00008218 6600                       		bne.s	MLB_NormalPal
0000821A 7020                       		moveq	#$20,d0
0000821C                            
0000821C                            MLB_NormalPal:
0000821C 6100 A7C2                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00008220 245F                       		movea.l	(sp)+,a2
00008222 584A                       		addq.w	#4,a2
00008224 7000                       		moveq	#0,d0
00008226 1012                       		move.b	(a2),d0
00008228 6700                       		beq.s	locret_6D10
0000822A 6100 9B76                  		bsr.w	LoadPLC		; load pattern load cues
0000822E                            
0000822E                            locret_6D10:
0000822E 4E75                       		rts	
00008230                            ; End of function MainLoadBlockLoad
00008230                            
00008230                            ; ---------------------------------------------------------------------------
00008230                            ; Level	layout loading subroutine
00008230                            ; ---------------------------------------------------------------------------
00008230                            
00008230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008230                            
00008230                            
00008230                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00008230 47F8 A400                  		lea	($FFFFA400).w,a3
00008234 323C 01FF                  		move.w	#$1FF,d1
00008238 7000                       		moveq	#0,d0
0000823A                            
0000823A                            LevLoad_ClrRam:
0000823A 26C0                       		move.l	d0,(a3)+
0000823C 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00008240                            
00008240 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00008244 7200                       		moveq	#0,d1
00008246 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
0000824A 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000824E 7202                       		moveq	#2,d1
00008250                            ; End of function LevelLayoutLoad
00008250                            
00008250                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00008250                            
00008250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008250                            
00008250                            
00008250                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00008250 3038 FE10                  		move.w	($FFFFFE10).w,d0
00008254 ED08                       		lsl.b	#6,d0
00008256 EA48                       		lsr.w	#5,d0
00008258 3400                       		move.w	d0,d2
0000825A D040                       		add.w	d0,d0
0000825C D042                       		add.w	d2,d0
0000825E D041                       		add.w	d1,d0
00008260 43F9 0000 0000             		lea	(Level_Index).l,a1
00008266 3031 0000                  		move.w	(a1,d0.w),d0
0000826A 43F1 0000                  		lea	(a1,d0.w),a1
0000826E 7200                       		moveq	#0,d1
00008270 3401                       		move.w	d1,d2
00008272 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00008274 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00008276                            
00008276                            LevLoad_NumRows:
00008276 3001                       		move.w	d1,d0
00008278 204B                       		movea.l	a3,a0
0000827A                            
0000827A                            LevLoad_Row:
0000827A 10D9                       		move.b	(a1)+,(a0)+
0000827C 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008280 47EB 0080                  		lea	$80(a3),a3	; do next row
00008284 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00008288 4E75                       		rts	
0000828A                            ; End of function LevelLayoutLoad2
0000828A                            
0000828A                            		include	'menu\menu.asm'
0000828A                            ; ---------------------------------------------------------------------------
0000828A                            ; Menu	screen
0000828A                            ; ---------------------------------------------------------------------------
0000828A                            MenuScreen:				; XREF: GameModeArray
0000828A 103C 00E0                  		move.b	#$E0,d0
0000828E 6100 977C                  		bsr.w	PlaySound_Special ; stop music
00008292 6100 9B6C                  		bsr.w	ClearPLC
00008296 6100 A4A0                  		bsr.w	Pal_FadeFrom
0000829A 11FC 0001 FF95             		move.b	#1,($FFFFFF95).w	;Add flag to the BG's deform.
000082A0 46FC 2700                  		move	#$2700,sr
000082A4 4DF9 00C0 0004             		lea	($C00004).l,a6
000082AA 3CBC 8004                  		move.w	#$8004,(a6)
000082AE 3CBC 8230                  		move.w	#$8230,(a6)
000082B2 3CBC 8407                  		move.w	#$8407,(a6)
000082B6 3CBC 9001                  		move.w	#$9001,(a6)
000082BA 3CBC 9200                  		move.w	#$9200,(a6)
000082BE 3CBC 8B03                  		move.w	#$8B03,(a6)
000082C2 3CBC 8720                  		move.w	#$8720,(a6)
000082C6                            ;		move.w #$8C82,(a6) ; change resolution
000082C6 4238 F64E                  		clr.b	($FFFFF64E).w
000082CA 4EB8 1810                  		jsr	ClearScreen
000082CE 43F8 D000                  		lea	($FFFFD000).w,a1
000082D2 7000                       		moveq	#0,d0
000082D4 323C 07FF                  		move.w	#$7FF,d1
000082D8                            
000082D8                            Menu_ClrObjRam:
000082D8 22C0                       		move.l	d0,(a1)+
000082DA 51C9 FFFC                  		dbf	d1,Menu_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000082DE                            
000082DE 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000082E4 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000082EA 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000082F0 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000082F6 31FC 0000 FE10             		move.w	#0000,($FFFFFE10).w ; set level to	GHZ (00)
000082FC 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00008302 6100 EC1A                  		bsr.w	LevelSizeLoad
00008306 6100 F0E2                  		bsr.w	DeformBgLayer
0000830A 43F8 B000                  		lea	($FFFFB000).w,a1
0000830E 41F9 0000 0000             		lea	(Blk16_Menu).l,a0 ; load 16x16 mappings
00008314 303C 0000                  		move.w	#0,d0
00008318 6100 9C26                  		bsr.w	EniDec
0000831C 41F9 0000 0000             		lea	(Blk256_Menu).l,a0 ; load GHZ 256x256 mappings
00008322 43F9 00FF 0000             		lea	($FF0000).l,a1
00008328 6100 9D94                  		bsr.w	KosDec
0000832C 6100 FF02                  		bsr.w	LevelLayoutLoad
00008330 6100 A406                  		bsr.w	Pal_FadeFrom
00008334 46FC 2700                  		move	#$2700,sr
00008338 6100 94D6                  		bsr.w	ClearScreen
0000833C                            
0000833C 4DF9 00C0 0004             		lea	($C00004).l,a6			; Setup VDP
00008342 3CBC 8004                  		move.w	#$8004,(a6)
00008346 3CBC 8230                  		move.w	#$8230,(a6)
0000834A 3CBC 8407                  		move.w	#$8407,(a6)
0000834E 3CBC 9001                  		move.w	#$9001,(a6)
00008352 3CBC 9200                  		move.w	#$9200,(a6)
00008356 3CBC 8B03                  		move.w	#$8B03,(a6)
0000835A 3CBC 8720                  		move.w	#$8720,(a6)
0000835E 4238 F64E                  		clr.b	($FFFFF64E).w
00008362 4EB8 1810                  		jsr	ClearScreen
00008366 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00008370 45F9 0000 0000             		lea	(Art_ASCII),a2
00008376 303C 005A                  		move.w	#$5A,d0
0000837A 4EB8 1C28                  		jsr	LoadUncArt
0000837E 2A3C 4000 0003             		move.l	#$40000003,d5
00008384 43F9 0000 0000             		lea	(MenuScreen_ASCII_Main),a1
0000838A 363C 6580                  		move.w	#$6580,d3
0000838E 4EB8 1964                  		jsr	LoadASCII
00008392 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00008398 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000839C 0000 0040                  		ori.b	#$40,d0
000083A0 33C0 00C0 0004             		move.w	d0,($C00004).l
000083A6 31FC 0000 B080             		move.w	#0,($FFFFFB000+$80).w
000083AC                            
000083AC                            
000083AC                            
000083AC 4BF9 00C0 0004             		lea	($C00004).l,a5
000083B2 4DF9 00C0 0000             		lea	($C00000).l,a6
000083B8 47F8 F708                  		lea	($FFFFF708).w,a3
000083BC 49F8 A440                  		lea	($FFFFA440).w,a4
000083C0 343C 6000                  		move.w	#$6000,d2
000083C4 6100 FDC2                  		bsr.w	LoadTilesFromStart2
000083C8 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000083D2 41F9 0000 0000             		lea	(Nem_Menu).l,a0 ; load GHZ patterns
000083D8 6100 986A                  		bsr.w	NemDec
000083DC 7003                       		moveq	#3,d0
000083DE 6100 A600                  		bsr.w	PalLoad1
000083E2 701C                       		moveq	#$1C,d0		; load Menu screen pallet
000083E4 6100 A5FA                  		bsr.w	PalLoad1
000083E8 103C 009D                  		move.b	#$9D,d0		; play Menu screen music
000083EC 6100 961E                  		bsr.w	PlaySound_Special
000083F0 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000083F6 43F8 D080                  		lea	($FFFFD080).w,a1
000083FA 4EB9 0000 0000             		jsr	DeleteObject2
00008400 11FC 008E D400             		move.b  #$8E, ($FFFFD400).w ; Objeto de menu 
00008406 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000840C 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00008412 4EB9 0000 0000             		jsr	AniArt_Load
00008418 4EB9 0000 0000             		jsr	ObjectsLoad
0000841E 6100 EFCA                  		bsr.w	DeformBgLayer
00008422 4EB9 0000 0000             		jsr	BuildSprites
00008428 7000                       		moveq	#0,d0
0000842A 6100 99A8                  		bsr.w	LoadPLC2
0000842E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00008434 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000843A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000843E 0000 0040                  		ori.b	#$40,d0
00008442 33C0 00C0 0004             		move.w	d0,($C00004).l
00008448 4EB8 2694                  		jsr	Pal_FadeTo
0000844C 0678 0050 D008             		add.w	#$50,($FFFFD008).w
00008452                            Menu_Loop:
00008452 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00008458 6100 B30C                  		bsr.w	DelayProgram
0000845C 0C38 0020 FF94             		cmpi.b	#$20,($FFFFFF94).w
00008462 6600                       		bne.s	Menu_OtherMode
00008464 4EB9 0000 0000             		jsr	ObjectsLoad
0000846A                            ;		jsr	AniArt_Load
0000846A 6100 EF7E                  		bsr.w	DeformBgLayer
0000846E 4EB9 0000 0000             		jsr	BuildSprites
00008474 6100 9998                  		bsr.w	RunPLC_RAM
00008478                            ;		addq.w	#8,($FFFFD008).w
00008478 4EFA FFD8                  		jmp	Menu_Loop
0000847C                            
0000847C                            Menu_OtherMode:
0000847C 4E75                       		rts	
0000847E                            ; ===========================================================================
0000847E                            MenuScreen_ASCII_Main:
0000847E 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000084A7 2020 2020 2020 2D20 2D20+  		dc.b "      - - - SONIC ALPHAOMEGA - - -      ",$FF
000084D0 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000084F9 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008522 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
0000854B 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008574 2020 2020 2053 5441 5254+  		dc.b "     START GAME                         ",$FF
0000859D 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000085C6 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000085EF 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008618 2020 2020 2043 4F4D 5045+  		dc.b "     COMPETITION MODE                   ",$FF
00008641 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
0000866A 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008693 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000086BC 2020 2020 204F 5054 494F+  		dc.b "     OPTIONS                            ",$FF
000086E5 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
0000870E 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008737 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008760 2020 2020 204D 4953 4345+  		dc.b "     MISCELLANEOUS                      ",$FF
00008789 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000087B2 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000087DB 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008804 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
0000882D 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008856 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
0000887F 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000088A8 2020 2020 2020 2020 2020+  		dc.b "                         Romhack by Trox",$FF
000088D1                            
000088D1 00                         		dc.b 0
000088D2                            		even
000088D2                            
000088D2                            MenuScreen_ASCII_Main_Spa:
000088D2 FF                         		dc.b $FF
000088D3 2020 2020 2020 2D20 2D20+  		dc.b "      - - - SONIC ALPHAOMEGA - - -",$FF
000088F6 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
0000891F 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008948 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008971 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
0000899A 2020 2020 2043 4F4D 454E+  		dc.b "     COMENZAR JUEGO",$FF
000089AE 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000089D7 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008A00 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008A29 2020 2020 204D 4F44 4F20+  		dc.b "     MODO DE COMPETENCIAS",$FF
00008A43 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008A6C 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008A95 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008ABE 2020 2020 204F 5043 494F+  		dc.b "     OPCIONES",$FF
00008ACC 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008AF5 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008B1E 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008B47 2020 2020 204D 4953 4345+  		dc.b "     MISCELANEO",$FF
00008B57 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008B80 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008BA9 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008BD2 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008BFB 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008C24 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008C4D 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008C76 2020 2020 2020 2020 2020+  		dc.b "                         Romhack by Trox",$FF
00008C9F                            
00008C9F 00                         		dc.b 0
00008CA0                            		even
00008CA0                            
00008CA0                            MenuScreen_ASCII_SelChar:
00008CA0 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008CC9 2020 2020 2020 2D20 2D20+  		dc.b "      - - - SONIC ALPHAOMEGA - - -",$FF
00008CEC 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008D15 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008D3E 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008D67 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008D90 2020 2020 2053 4F4E 4943+  		dc.b "     SONIC THE HEDGEHOG                 ",$FF
00008DB9 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008DE2 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008E0B 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008E34 2020 2020 2057 494E 4459+  		dc.b "     WINDY THE HEDGEHOG                 ",$FF
00008E5D 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008E86 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008EAF 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008ED8 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008F01 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008F2A 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008F53 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008F7C 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008FA5 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008FCE 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00008FF7 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00009020 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00009049 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
00009072 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
0000909B 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000090C4 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000090ED                            
000090ED 00                         		dc.b 0
000090EE                            		even
000090EE                            		even
000090EE                            
000090EE                            ; ---------------------------------------------------------------------------
000090EE                            ; Dynamic screen resize	loading	subroutine
000090EE                            ; ---------------------------------------------------------------------------
000090EE                            
000090EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090EE                            
000090EE                            
000090EE                            DynScrResizeLoad:			; XREF: DeformBgLayer
000090EE 7000                       		moveq	#0,d0
000090F0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000090F4 D040                       		add.w	d0,d0
000090F6 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000090FA 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000090FE 7202                       		moveq	#2,d1
00009100 3038 F726                  		move.w	($FFFFF726).w,d0
00009104 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00009108 6700                       		beq.s	locret_6DAA
0000910A 6400                       		bcc.s	loc_6DAC
0000910C 4441                       		neg.w	d1
0000910E 3038 F704                  		move.w	($FFFFF704).w,d0
00009112 B078 F726                  		cmp.w	($FFFFF726).w,d0
00009116 6300                       		bls.s	loc_6DA0
00009118 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000911C 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00009122                            
00009122                            loc_6DA0:
00009122 D378 F72E                  		add.w	d1,($FFFFF72E).w
00009126 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000912C                            
0000912C                            locret_6DAA:
0000912C 4E75                       		rts	
0000912E                            ; ===========================================================================
0000912E                            
0000912E                            loc_6DAC:				; XREF: DynScrResizeLoad
0000912E 3038 F704                  		move.w	($FFFFF704).w,d0
00009132 5040                       		addq.w	#8,d0
00009134 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00009138 6500                       		bcs.s	loc_6DC4
0000913A 0838 0001 D022             		btst	#1,($FFFFD022).w
00009140 6700                       		beq.s	loc_6DC4
00009142 D241                       		add.w	d1,d1
00009144 D241                       		add.w	d1,d1
00009146                            
00009146                            loc_6DC4:
00009146 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000914A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00009150 4E75                       		rts	
00009152                            ; End of function DynScrResizeLoad
00009152                            
00009152                            ; ===========================================================================
00009152                            ; ---------------------------------------------------------------------------
00009152                            ; Offset index for dynamic screen resizing
00009152                            ; ---------------------------------------------------------------------------
00009152 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00009156 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000915A 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000915E 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_ABZ-Resize_Index
00009162 0000 0000                  		dc.w Resize_IC-Resize_Index, Resize_SZ-Resize_Index
00009166                            ; ===========================================================================
00009166                            Resize_SZ:				; XREF: Resize_Index
00009166 4E75                       		rts
00009168                            ; ---------------------------------------------------------------------------
00009168                            ; Green	Hill Zone dynamic screen resizing
00009168                            ; ---------------------------------------------------------------------------
00009168                            
00009168                            Resize_GHZ:				; XREF: Resize_Index
00009168 7000                       		moveq	#0,d0
0000916A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000916E D040                       		add.w	d0,d0
00009170 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00009174 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00009178                            ; ===========================================================================
00009178 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000917A 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000917C 0000                       		dc.w Resize_GHZ3-Resize_GHZx
0000917E 0000                       		dc.w Resize_GHZ4-Resize_GHZx
00009180                            ; ===========================================================================
00009180                            
00009180                            Resize_GHZ1:
00009180 0C38 0004 FF94             		cmpi.b	#4,($FFFFFF94).w
00009186 6700 0000                  		beq.w	Resize_GHZ_Title
0000918A 0C38 0020 FF94             		cmpi.b	#$20,($FFFFFF94).w
00009190 6700 0000                  		beq.w	Resize_GHZ_Title
00009194 0C38 004C FF94             		cmpi.b	#$4C,($FFFFFF94).w
0000919A 6700 0000                  		beq.w	Resize_GHZ_Title
0000919E                            ;		Object 10, posición VRAM 0x0200
0000919E 7000                       		moveq	#0,d0			;Borrar d0
000091A0 1038 F742                  		move.b	($FFFFF742).w,d0	;RAM de Index
000091A4 303B 0000                  		move.w	Func_Index(pc,d0.w),d0	;Cargar Index en d0 y RAM
000091A8 4EFB 0000                  		jmp	Func_Index(pc,d0.w)	;Cargar Index en d0 y RAM
000091AC                            ; ===========================================================================
000091AC 0000                       Func_Index:	dc.w Func1-Func_Index		;0
000091AE 0000                       		dc.w Func2-Func_Index		;2
000091B0 0000                       		dc.w Func3-Func_Index		;4
000091B2 0000                       		dc.w Cut_Complete-Func_Index	;6
000091B4 0000                       		dc.w Level_Normal-Func_Index	;8
000091B6 0000                       		dc.w Level_Main-Func_Index		:A
000091B8 0000                       		dc.w locret_6E08-Func_Index	;C
000091BA 0000                       		dc.w Level_Act2-Func_Index		;E
000091BC 0000                       		dc.w Level_Act2_TtlCard-Func_Index	;10
000091BE 0000                       		dc.w Level_Act2_Main-Func_Index	;12
000091C0                            ; ===========================================================================
000091C0                            Func1:
000091C0 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
000091C6 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
000091CC 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
000091D2 4238 FF90                  		clr.b	($FFFFFF90).w		;Borrar variable antes de empezar
000091D6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000091DA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w 	;lock	controls
000091E0 31FC 0000 D00C             		move.w	#0,($FFFFD00C).w	;Mover Sonic a posicion 0
000091E6 31FC 0000 D008             		move.w	#0,($FFFFD008).w	;Mover Sonic a posicion 0
000091EC 31FC 0000 D000             		move.w	#0,($FFFFD000).w 	;Sacar a Sonic
000091F2 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w 	;Hacer a Sonic Invisible
000091F8 31FC 01F0 F704             		move.w	#$1F0,($FFFFF704).w	;Forzar posicion vert. de camara
000091FE 31FC 01F0 F726             		move.w	#$1F0,($FFFFF726).w	;Margen vert. de camara
00009204 4238 FF98                  		clr.b	($FFFFFF98).w		;Borrar variable antes de empezar
00009212 45F9 0000 0000             		lea	(Unc_Surf),a2
00009218 303C 0102                  		move.w	#$102,d0
0000921C 4EB8 1C28                  		jsr	LoadUncArt		
00009220 6100 0000                  		bsr.w	SingleObjLoad		;Cargar algún objeto
00009224 6600                       		bne.s	Argh			;Si no hay recursos, reiniciar
00009226 12BC 0010                  		move.b	#$10,0(a1)		;ID de objeto a cargar. Sonic Surfeando
0000922A 337C 0080 0008             		move.w	#$80,8(a1)		;Posicion horizontal del objeto
00009230 337C 0288 000C             		move.w	#$288,$C(a1)		;Posicion vertical del objeto
00009236 31FC 0090 D008             		move.w	#$90,($FFFFD008).w
0000923C 5438 F742                  		addq.b	#2,($FFFFF742).w	;Pasar a la siguiente funcion, definida en el index
00009240                            Argh:
00009240 4E75                       		rts	
00009242                            ; ===========================================================================
00009242                            Func2:
00009242 0C38 0001 FF90             		cmpi.b	#1,($FFFFFF90).w
00009248 6700                       		beq.s	loc_7895
0000924A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000924E 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w 	;Hacer a Sonic Invisible
00009254 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w 	;Bloquear controles
0000925A 31FC 0280 D00C             		move.w	#$280,($FFFFD00C).w	;Mover Sonic a posicion 2
00009260 31FC 01F0 F704             		move.w	#$1F0,($FFFFF704).w	;Forzar posicion vertical de camara
00009266 31FC 01F0 F726             		move.w	#$1F0,($FFFFF726).w	;Margen vert. de camara
0000926C 5A78 D008                  		add.w	#$05,($FFFFD008).w	;Añadir movimiento horizontal a la camara
00009270 4E75                       		rts
00009272                            loc_7895:
00009272 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00009276 31FC 0720 D008             		move.w	#$720,($FFFFD008).w
0000927C 31FC 0280 D00C             		move.w	#$280,($FFFFD00C).w	;Mover Sonic a posicion 2
00009282 5438 F742                  		addq.b	#2,($FFFFF742).w	;Pasar a la siguiente funcion, definida en el index
00009286 4E75                       		rts		
00009288                            Func3:
00009288 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000928C 0C78 095A D008             		cmpi.w	#$95A,($FFFFD008).w
00009292 6500                       		bcs.s	Almost_Complete
00009294 31FC 02AE D00C             		move.w	#$2AE,($FFFFD00C).w	;Mover Sonic a posicion 2
0000929A 5438 F742                  		addq.b	#2,($FFFFF742).w	;Pasar a la siguiente funcion, definida en el index
0000929E 4E75                       		rts
000092A0                            
000092A0                            Almost_Complete:
000092A0 4EB9 0000 0000             		jsr	AniArt_Load
000092A6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000092AA 31FC 0000 D012             		move.w	#$0000,($FFFFD012).w
000092B0 31FC 0280 D00C             		move.w	#$280,($FFFFD00C).w	;Mover Sonic a posicion 2
000092B6 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w 	;Hacer a Sonic Invisible
000092BC 31FC 01F0 F704             		move.w	#$1F0,($FFFFF704).w	;Forzar posicion vertical de camara
000092C2 31FC 01F0 F726             		move.w	#$1F0,($FFFFF726).w	;Margen vert. de camara
000092C8 5A78 D008                  		add.w	#$5,($FFFFD008).w
000092CC 4E75                       		rts
000092CE                            Cut_Complete:
000092CE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000092D2 0C78 0AA0 D008             		cmpi.w	#$AA0,($FFFFD008).w
000092D8 6500                       		bcs.s	Completing
000092DA 31FC FFFF D014             		move.w	#$FFFF,($FFFFD014).w
000092E0 5438 F742                  		addq.b	#2,($FFFFF742).w
000092E4 4E75                       		rts
000092E6                            Completing:
000092E6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000092EA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w 	; Mover sonic a la derecha
000092F0 31FC 03FF D014             		move.w	#($FFFF-$FC00),($FFFFD014).w ; Añadir velocidad
000092F6 4E75                       		rts
000092F8                            Level_Normal:
000092F8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000092FC 31FC 0A00 F728             		move.w	#($9F0+$8+$8),($FFFFF728).w
00009302 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00009308 7026                       		moveq	#$26,d0
0000930A 4EB9 0000 0000             		jsr	GHz1_LoadPLC		
00009310 7027                       		moveq	#$27,d0
00009312 4EB9 0000 0000             		jsr	GHz1_LoadPLC	
00009318 4278 F602                  		clr.w	($FFFFF602).w
0000931C 11FC 0001 FF98             		move.b	#1,($FFFFFF98).w
00009322 5438 F742                  		addq.b	#2,($FFFFF742).w
00009326 4E75                       		rts
00009328                            Resize_GHZ_Title:
00009328 31FC 7FFF F72A             		move.w	#$7FFF,($FFFFF72A).w
0000932E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00009334 4E75                       		rts
00009336                            Level_Main:
00009336                            ;Ahora, 4000
00009336                            ;Antes, 1250
00009336 4EB9 0000 0000             		jsr	AniArt_Load
0000933C 31FC 7FFF F72A             		move.w	#$7FFF,($FFFFF72A).w
00009342 31FC 6FFF F726             		move.w	#$6FFF,($FFFFF726).w ; set lower	y-boundary
00009348 0C78 1050 F700             		cmpi.w	#$1050,($FFFFF700).w
0000934E 6500                       		bcs.s	locret_6E08
00009350 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00009356 31FC 0218 F726             		move.w	#$218,($FFFFF726).w ; set lower	y-boundary
0000935C 4EB9 0000 0000             		jsr	AniArt_Load
00009362 0C78 1250 F700             		cmpi.w	#$1250,($FFFFF700).w
00009368 6500                       		bcs.s	locret_6E08
0000936A                            ;		move.b	#$9A,d0
0000936A                            ;		jsr	PlaySound
0000936A 7029                       		moveq	#$29,d0
0000936C 4EB9 0000 0000             		jsr	GHz1_LoadPLC		
00009372 31FC 0218 F726             		move.w	#$218,($FFFFF726).w
00009378 31FC 1250 F72A             		move.w	#$1250,($FFFFF72A).w
0000937E 31FC 1250 F728             		move.w	#$1250,($FFFFF728).w
00009384 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000938A 4EB9 0000 0000             		jsr	GotThroughAct
00009390                            ;		moveq	#$21,d0
00009390                            ;		jsr	PalLoad2
00009390 5438 F742                  		addq.b	#2,($FFFFF742).w
00009394 4E75                       		rts
00009396                            
00009396                            locret_6E08:
00009396 4E75                       		rts	
00009398                            
00009398                            Level_Boss:
00009398 4EB9 0000 0000             		jsr	Level_Boss_Scroll
0000939E 31FC 1250 F728             		move.w	#$1250,($FFFFF728).w
000093A4 31FC 0218 F704             		move.w	#$218,($FFFFF704).w
000093AA 4E75                       		rts	
000093AC                            
000093AC                            Level_Boss_Scroll:
000093AC 0C38 0002 FF9F             		cmpi.b	#2,($FFFFFF9F).w
000093B2 66E2                       		bne	locret_6E08
000093B4 5278 F708                  		add.w	#$0001,($FFFFF708).w
000093B8 4E75                       		rts
000093BA                            
000093BA                            Level_Act2:
000093BA 103C 009F                  		move.b	#$9F,d0
000093BE 4EB8 19E4                  		jsr	PlaySound
000093C2 31F8 F708 FF96             		move.w	($FFFFF708).w,($FFFFFF96).w
000093C8 31FC 7FFF F72A             		move.w	#$7FFF,($FFFFF72A).w
000093CE 31FC 6FFF F726             		move.w	#$6FFF,($FFFFF726).w ; set lower	y-boundary
000093D4                            
000093D4 43F8 D5C0                  		lea	($FFFFD5C0).w,a1
000093D8 123C 0006                  		move.b	#6,d1
000093DC                            
000093DC                            Level_Act2_ClearGTA:
000093DC 12BC 0000                  		move.b	#00,(a1)
000093E0 43E9 0040                  		lea	$40(a1),a1
000093E4 51C9 FFF6                  		dbf	d1,Level_Act2_ClearGTA
000093E8                            
000093E8 46FC 2700                  		move	#$2700,sr
000093EC                            ;		add.w	#$0008,($FFFFF700).w		
000093EC                            ;		sub.w	#$0008,($FFFFF704).w
000093EC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000093F6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000093FC 6100 8846                  		bsr.w	NemDec
00009400 46FC 2300                  		move	#$2300,sr
00009404 11FC 0001 FFAD             		move.b	#1,($FFFFFFAD).w ; add a fag
0000940A 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00009410 5438 F742                  		addq.b	#2,($FFFFF742).w
00009414 4E75                       		rts
00009416                            
00009416                            Level_Act2_TtlCard:
00009416 31FC 0220 F704             		move.w	#$220,($FFFFF704).w
0000941C 3038 D108                  		move.w	($FFFFD108).w,d0
00009420 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00009424 6600 FF70                  		bne	locret_6E08	; if not, branch
00009428 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
0000942C 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00009430 5838 D124                  		addq.b	#4,($FFFFD124).w
00009434 5838 D164                  		addq.b	#4,($FFFFD164).w
00009438                            
00009438 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000943E 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00009444 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000944A                            
0000944A 21FC 0000 0000 FE22        		move.l	#0,($FFFFFE22).w ; clear time
00009452 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00009458                            
00009458 5438 F742                  		addq.b	#2,($FFFFF742).w
0000945C 4278 FF96                  		clr.w	($FFFFFF96).w
00009460 4238 F7AA                  		clr.b	($FFFFF7AA).w
00009464 4E75                       		rts
00009466                            
00009466                            Level_Act2_Main:
00009466 4E75                       		rts
00009468                            
00009468                            GHz1_LoadPLC:
00009468 4EF8 1DA2                  		jmp	LoadPLC
0000946C                            ; ===========================================================================
0000946C                            
0000946C                            Resize_GHZ2:
0000946C 7000                       		moveq	#0,d0
0000946E 1038 F742                  		move.b	($FFFFF742).w,d0
00009472 303B 0000                  		move.w	Resize_GHZ2_Index(pc,d0.w),d0
00009476 4EFB 0000                  		jmp	Resize_GHZ2_Index(pc,d0.w)
0000947A                            ; ===========================================================================
0000947A                            Resize_GHZ2_Index:	
0000947A 0000                       		dc.w Resize_GHZ2_1-Resize_GHZ2_Index
0000947C 0000                       		dc.w Resize_GHZ2_2-Resize_GHZ2_Index
0000947E                            ; ===========================================================================
0000947E                            
0000947E                            Resize_GHZ2_1:
0000947E 4EB9 0000 0000             		jsr	AniArt_Load
00009484 7026                       		moveq	#$26,d0
00009486 4EBA FFE0                  		jsr	GHz1_LoadPLC		
0000948A 7027                       		moveq	#$27,d0
0000948C 4EBA FFDA                  		jsr	GHz1_LoadPLC	
00009490 5438 F742                  		addq.b	#2,($FFFFF742).w
00009494 4E75                       		rts
00009496                            Resize_GHZ2_2:
00009496 4EB9 0000 0000             		jsr	AniArt_Load
0000949C                            
0000949C                            locret_6E3A:
0000949C 4E75                       		rts	
0000949E                            ; ===========================================================================
0000949E                            
0000949E                            Resize_GHZ3:
0000949E 7000                       		moveq	#0,d0
000094A0 1038 F742                  		move.b	($FFFFF742).w,d0
000094A4 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000094A8 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000094AC                            ; ===========================================================================
000094AC                            off_6E4A:	
000094AC 0000                       		dc.w Resize_GHZ3Pal-off_6E4A
000094AE 0000                       		dc.w Resize_GHZ3main-off_6E4A
000094B0 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000094B2 0000                       		dc.w Resize_GHZ3end-off_6E4A
000094B4                            ; ===========================================================================
000094B4                            
000094B4                            Resize_GHZ3Pal:
000094B4 5438 F742                  		addq.b	#2,($FFFFF742).w
000094B8                            
000094B8                            Resize_GHZ3Pal_Return:
000094B8 4E75                       		rts	
000094BA                            ; ===========================================================================
000094BA                            
000094BA                            Resize_GHZ3main:
000094BA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000094C0 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000094C6 6500                       		bcs.s	locret_6E96
000094C8 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000094CE 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000094D4 6500                       		bcs.s	locret_6E96
000094D6 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000094DC 6500                       		bcs.s	loc_6E98
000094DE 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000094E4 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000094EA 6400                       		bcc.s	loc_6E8E
000094EC 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000094F2 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000094F8                            
000094F8                            loc_6E8E:
000094F8 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000094FE 6400                       		bcc.s	loc_6E98
00009500                            
00009500                            locret_6E96:
00009500 4E75                       		rts	
00009502                            ; ===========================================================================
00009502                            
00009502                            loc_6E98:
00009502 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00009508 5438 F742                  		addq.b	#2,($FFFFF742).w
0000950C 4E75                       		rts	
0000950E                            ; ===========================================================================
0000950E                            
0000950E                            Resize_GHZ3boss:
0000950E 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00009514 6400                       		bcc.s	loc_6EB0
00009516 5538 F742                  		subq.b	#2,($FFFFF742).w
0000951A                            
0000951A                            loc_6EB0:
0000951A 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00009520 6500                       		bcs.s	locret_6EE8
00009522 6100 0000                  		bsr.w	SingleObjLoad
00009526 6600                       		bne.s	loc_6ED0
00009528 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000952C 337C 2A60 0008             		move.w	#$2A60,8(a1)
00009532 337C 0280 000C             		move.w	#$280,$C(a1)
00009538                            
00009538                            loc_6ED0:
00009538 303C 008C                  		move.w	#$8C,d0
0000953C 4EB8 19E4                  		jsr	PlaySound	; play boss music
00009540 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00009546 5438 F742                  		addq.b	#2,($FFFFF742).w
0000954A 6100 0000                  		bsr.w	SingleObjLoad	;subrutina para llamar objeto
0000954E 6600                       		bne.s	locret_6EE8 	;si no hay espacio disponible, seguir con el resto de los codigos, o repetir esto
00009550 12BC 0004                  		move.b	#$04,0(a1)	;ID de objeto a leer.
0000955E 45F9 0000 0000             		lea	(Unc_hits),a2
00009564 303C 0010                  		move.w	#$10,d0
00009568 4EB8 1C28                  		jsr	LoadUncArt		
0000956C 7011                       		moveq	#$11,d0
0000956E 4EF8 1DA2                  		jmp	LoadPLC		; load boss patterns
00009572                            ; ===========================================================================
00009572                            
00009572                            locret_6EE8:
00009572 4E75                       		rts	
00009574                            ; ===========================================================================
00009574                            
00009574                            Resize_GHZ3end:
00009574 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000957A 4E75                       		rts	
0000957C                            ; ===========================================================================
0000957C                            
0000957C                            Resize_GHZ4:
0000957C 7000                       		moveq	#0,d0
0000957E 1038 F742                  		move.b	($FFFFF742).w,d0
00009582 303B 0000                  		move.w	Resize_GHZ4_Index(pc,d0.w),d0
00009586 4EFB 0000                  		jmp	Resize_GHZ4_Index(pc,d0.w)
0000958A                            ; ===========================================================================
0000958A                            Resize_GHZ4_Index:	
0000958A 0000                       		dc.w Resize_GHZ4_1-Resize_GHZ4_Index
0000958C 0000                       		dc.w Resize_GHZ4_2-Resize_GHZ4_Index
0000958E                            ; ===========================================================================
0000958E                            
0000958E                            Resize_GHZ4_1:
0000958E 7026                       		moveq	#$26,d0
00009590 4EBA FED6                  		jsr	GHz1_LoadPLC		
00009594 7027                       		moveq	#$27,d0
00009596 4EBA FED0                  		jsr	GHz1_LoadPLC	
0000959A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000959E 4E75                       		rts
000095A0                            Resize_GHZ4_2:
000095A0                            
000095A0                            Resize_GHZ4_Return:
000095A0 4E75                       		rts	
000095A2                            ; ===========================================================================
000095A2                            ; ---------------------------------------------------------------------------
000095A2                            ; Labyrinth Zone dynamic screen	resizing
000095A2                            ; ---------------------------------------------------------------------------
000095A2                            
000095A2                            Resize_LZ:				; XREF: Resize_Index
000095A2 7000                       		moveq	#0,d0
000095A4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000095A8 D040                       		add.w	d0,d0
000095AA 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000095AE 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000095B2                            ; ===========================================================================
000095B2 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000095B4 0000                       		dc.w Resize_LZ12-Resize_LZx
000095B6 0000                       		dc.w Resize_LZ3-Resize_LZx
000095B8 0000                       		dc.w Resize_SBZ3-Resize_LZx
000095BA                            ; ===========================================================================
000095BA                            
000095BA                            Resize_LZ12:
000095BA 4E75                       		rts	
000095BC                            ; ===========================================================================
000095BC                            
000095BC                            Resize_LZ3:
000095BC 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
000095C0 6700                       		beq.s	loc_6F28	; if not, branch
000095C2 43F8 A506                  		lea	($FFFFA506).w,a1
000095C6 0C11 0007                  		cmpi.b	#7,(a1)
000095CA 6700                       		beq.s	loc_6F28
000095CC 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000095D0 303C 00B7                  		move.w	#$B7,d0
000095D4 4EB8 1A0C                  		jsr	PlaySound_Special ; play rumbling sound
000095D8                            
000095D8                            loc_6F28:
000095D8 4A38 F742                  		tst.b	($FFFFF742).w
000095DC 6600                       		bne.s	locret_6F64
000095DE 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000095E4 6500                       		bcs.s	locret_6F62
000095E6 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
000095EC 6400                       		bcc.s	locret_6F62
000095EE 6100 0000                  		bsr.w	SingleObjLoad
000095F2 6600                       		bne.s	loc_6F4A
000095F4 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000095F8                            
000095F8                            loc_6F4A:
000095F8 303C 008C                  		move.w	#$8C,d0
000095FC 4EB8 19E4                  		jsr	PlaySound	; play boss music
00009600 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00009606 5438 F742                  		addq.b	#2,($FFFFF742).w
0000960A 7011                       		moveq	#$11,d0
0000960C 4EF8 1DA2                  		jmp	LoadPLC		; load boss patterns
00009610                            ; ===========================================================================
00009610                            
00009610                            locret_6F62:
00009610 4E75                       		rts	
00009612                            ; ===========================================================================
00009612                            
00009612                            locret_6F64:
00009612 4E75                       		rts	
00009614                            ; ===========================================================================
00009614                            
00009614                            Resize_SBZ3:
00009614 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000961A 6500                       		bcs.s	locret_6F8C
0000961C 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00009622 6400                       		bcc.s	locret_6F8C	; if not, branch
00009624 4238 FE30                  		clr.b	($FFFFFE30).w
00009628 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000962E 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00009634 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000963A                            
0000963A                            locret_6F8C:
0000963A 4E75                       		rts	
0000963C                            ; ===========================================================================
0000963C                            ; ---------------------------------------------------------------------------
0000963C                            ; Marble Zone dynamic screen resizing
0000963C                            ; ---------------------------------------------------------------------------
0000963C                            
0000963C                            Resize_MZ:				; XREF: Resize_Index
0000963C 7000                       		moveq	#0,d0
0000963E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00009642 D040                       		add.w	d0,d0
00009644 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00009648 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000964C                            ; ===========================================================================
0000964C 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000964E 0000                       		dc.w Resize_MZ2-Resize_MZx
00009650 0000                       		dc.w Resize_MZ3-Resize_MZx
00009652                            ; ===========================================================================
00009652                            
00009652                            Resize_MZ1:
00009652 7000                       		moveq	#0,d0
00009654 1038 F742                  		move.b	($FFFFF742).w,d0
00009658 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
0000965C 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00009660                            ; ===========================================================================
00009660                            off_6FB2:	
00009660 0000                       		dc.w Resize_MZ1Pal-off_6FB2
00009662 0000                       		dc.w loc_6FBA-off_6FB2
00009664 0000                       		dc.w loc_6FEA-off_6FB2
00009666 0000                       		dc.w loc_702E-off_6FB2
00009668 0000                       		dc.w loc_7050-off_6FB2
0000966A                            ; ===========================================================================
0000966A                            
0000966A                            Resize_MZ1Pal:
0000966A 7017                       		moveq	#$17,d0
0000966C                            ;		move	d0,($FFFFFFFA).w
0000966C 4EB8 29FC                  		jsr	PalLoad2
00009670 5438 F742                  		addq.b	#2,($FFFFF742).w
00009674                            
00009674                            Resize_MZ1Pal_Return:
00009674 4E75                       		rts	
00009676                            ; ===========================================================================
00009676                            
00009676                            loc_6FBA:
00009676 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000967C 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00009682 6500                       		bcs.s	locret_6FE8
00009684 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000968A 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00009690 6500                       		bcs.s	locret_6FE8
00009692 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00009698 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000969E 6500                       		bcs.s	locret_6FE8
000096A0 5438 F742                  		addq.b	#2,($FFFFF742).w
000096A4                            
000096A4                            locret_6FE8:
000096A4 4E75                       		rts	
000096A6                            ; ===========================================================================
000096A6                            
000096A6                            loc_6FEA:
000096A6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000096AC 6400                       		bcc.s	loc_6FF8
000096AE 5538 F742                  		subq.b	#2,($FFFFF742).w
000096B2 4E75                       		rts	
000096B4                            ; ===========================================================================
000096B4                            
000096B4                            loc_6FF8:
000096B4 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000096BA 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000096C0 6400                       		bcc.s	locret_702C
000096C2 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000096C8 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000096CE 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000096D4 6400                       		bcc.s	locret_702C
000096D6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000096DC 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000096E2 6500                       		bcs.s	locret_702C
000096E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000096E8                            
000096E8                            locret_702C:
000096E8 4E75                       		rts	
000096EA                            ; ===========================================================================
000096EA                            
000096EA                            loc_702E:
000096EA 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000096F0 6400                       		bcc.s	loc_703C
000096F2 5538 F742                  		subq.b	#2,($FFFFF742).w
000096F6 4E75                       		rts	
000096F8                            ; ===========================================================================
000096F8                            
000096F8                            loc_703C:
000096F8 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
000096FE 6500                       		bcs.s	locret_704E
00009700 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00009706 5438 F742                  		addq.b	#2,($FFFFF742).w
0000970A                            
0000970A                            locret_704E:
0000970A 4E75                       		rts	
0000970C                            ; ===========================================================================
0000970C                            
0000970C                            loc_7050:
0000970C 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00009712 6500                       		bcs.s	locret_7072
00009714 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000971A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00009720 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00009726 6500                       		bcs.s	locret_7072
00009728 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000972E                            
0000972E                            locret_7072:
0000972E 4E75                       		rts	
00009730                            ; ===========================================================================
00009730                            
00009730                            Resize_MZ2:
00009730 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00009736 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000973C 6500                       		bcs.s	locret_7088
0000973E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00009744                            
00009744                            locret_7088:
00009744 4E75                       		rts	
00009746                            ; ===========================================================================
00009746                            
00009746                            Resize_MZ3:
00009746 7000                       		moveq	#0,d0
00009748 1038 F742                  		move.b	($FFFFF742).w,d0
0000974C 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00009750 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00009754                            ; ===========================================================================
00009754 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00009756 0000                       		dc.w Resize_MZ3end-off_7098
00009758                            ; ===========================================================================
00009758                            
00009758                            Resize_MZ3boss:
00009758 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000975E 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00009764 6500                       		bcs.s	locret_70E8
00009766 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000976C 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00009772 6500                       		bcs.s	locret_70E8
00009774 6100 0000                  		bsr.w	SingleObjLoad
00009778 6600                       		bne.s	loc_70D0
0000977A 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000977E 337C 19F0 0008             		move.w	#$19F0,8(a1)
00009784 337C 022C 000C             		move.w	#$22C,$C(a1)
0000978A                            
0000978A                            loc_70D0:
0000978A 303C 008C                  		move.w	#$8C,d0
0000978E 4EB8 19E4                  		jsr	PlaySound	; play boss music
00009792 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00009798 5438 F742                  		addq.b	#2,($FFFFF742).w
0000979C 7011                       		moveq	#$11,d0
0000979E 4EF8 1DA2                  		jmp	LoadPLC		; load boss patterns
000097A2                            ; ===========================================================================
000097A2                            
000097A2                            locret_70E8:
000097A2 4E75                       		rts	
000097A4                            ; ===========================================================================
000097A4                            
000097A4                            Resize_MZ3end:
000097A4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000097AA 4E75                       		rts	
000097AC                            ; ===========================================================================
000097AC                            ; ---------------------------------------------------------------------------
000097AC                            ; Star Light Zone dynamic screen resizing
000097AC                            ; ---------------------------------------------------------------------------
000097AC                            
000097AC                            Resize_SLZ:				; XREF: Resize_Index
000097AC 7000                       		moveq	#0,d0
000097AE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000097B2 D040                       		add.w	d0,d0
000097B4 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000097B8 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000097BC                            ; ===========================================================================
000097BC 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
000097BE 0000                       		dc.w Resize_SLZ12-Resize_SLZx
000097C0 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000097C2                            ; ===========================================================================
000097C2                            
000097C2                            Resize_SLZ12:
000097C2 4E75                       		rts	
000097C4                            ; ===========================================================================
000097C4                            
000097C4                            Resize_SLZ3:
000097C4 7000                       		moveq	#0,d0
000097C6 1038 F742                  		move.b	($FFFFF742).w,d0
000097CA 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000097CE 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000097D2                            ; ===========================================================================
000097D2 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000097D4 0000                       		dc.w Resize_SLZ3boss-off_7118
000097D6 0000                       		dc.w Resize_SLZ3end-off_7118
000097D8                            ; ===========================================================================
000097D8                            
000097D8                            Resize_SLZ3main:
000097D8 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000097DE 6500                       		bcs.s	locret_7130
000097E0 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000097E6 5438 F742                  		addq.b	#2,($FFFFF742).w
000097EA                            
000097EA                            locret_7130:
000097EA 4E75                       		rts	
000097EC                            ; ===========================================================================
000097EC                            
000097EC                            Resize_SLZ3boss:
000097EC 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000097F2 6500                       		bcs.s	locret_715C
000097F4 6100 0000                  		bsr.w	SingleObjLoad
000097F8 6600                       		bne.s	loc_7144
000097FA 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
000097FE                            
000097FE                            loc_7144:
000097FE 303C 008C                  		move.w	#$8C,d0
00009802 4EB8 19E4                  		jsr	PlaySound	; play boss music
00009806 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000980C 5438 F742                  		addq.b	#2,($FFFFF742).w
00009810 7011                       		moveq	#$11,d0
00009812 4EF8 1DA2                  		jmp	LoadPLC		; load boss patterns
00009816                            ; ===========================================================================
00009816                            
00009816                            locret_715C:
00009816 4E75                       		rts	
00009818                            ; ===========================================================================
00009818                            
00009818                            Resize_SLZ3end:
00009818 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000981E 4E75                       		rts
00009820 4E75                       		rts
00009822                            ; ===========================================================================
00009822                            ; ---------------------------------------------------------------------------
00009822                            ; Spring Yard Zone dynamic screen resizing
00009822                            ; ---------------------------------------------------------------------------
00009822                            
00009822                            Resize_SYZ:				; XREF: Resize_Index
00009822 7000                       		moveq	#0,d0
00009824 1038 FE11                  		move.b	($FFFFFE11).w,d0
00009828 D040                       		add.w	d0,d0
0000982A 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000982E 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00009832                            ; ===========================================================================
00009832 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00009834 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00009836 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00009838                            ; ===========================================================================
00009838                            
00009838                            Resize_SYZ1:
00009838 4E75                       		rts	
0000983A                            ; ===========================================================================
0000983A                            
0000983A                            Resize_SYZ2:
0000983A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00009840 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00009846 6500                       		bcs.s	locret_71A2
00009848 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000984E 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00009854 6500                       		bcs.s	locret_71A2
00009856 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000985C                            
0000985C                            locret_71A2:
0000985C 4E75                       		rts	
0000985E                            ; ===========================================================================
0000985E                            
0000985E                            Resize_SYZ3:
0000985E 7000                       		moveq	#0,d0
00009860 1038 F742                  		move.b	($FFFFF742).w,d0
00009864 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00009868 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000986C                            ; ===========================================================================
0000986C 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000986E 0000                       		dc.w Resize_SYZ3boss-off_71B2
00009870 0000                       		dc.w Resize_SYZ3end-off_71B2
00009872                            ; ===========================================================================
00009872                            
00009872                            Resize_SYZ3main:
00009872 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00009878 6500                       		bcs.s	locret_71CE
0000987A 6100 0000                  		bsr.w	SingleObjLoad
0000987E 6600                       		bne.s	locret_71CE
00009880 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00009884 5438 F742                  		addq.b	#2,($FFFFF742).w
00009888                            
00009888                            locret_71CE:
00009888 4E75                       		rts	
0000988A                            ; ===========================================================================
0000988A                            
0000988A                            Resize_SYZ3boss:
0000988A 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00009890 6500                       		bcs.s	locret_7200
00009892 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00009898 6100 0000                  		bsr.w	SingleObjLoad
0000989C 6600                       		bne.s	loc_71EC
0000989E 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000098A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000098A6                            
000098A6                            loc_71EC:
000098A6 303C 008C                  		move.w	#$8C,d0
000098AA 4EB8 19E4                  		jsr	PlaySound	; play boss music
000098AE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000098B4 7011                       		moveq	#$11,d0
000098B6 4EF8 1DA2                  		jmp	LoadPLC		; load boss patterns
000098BA                            ; ===========================================================================
000098BA                            
000098BA                            locret_7200:
000098BA 4E75                       		rts	
000098BC                            ; ===========================================================================
000098BC                            
000098BC                            Resize_SYZ3end:
000098BC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000098C2 4E75                       		rts	
000098C4                            ; ===========================================================================
000098C4                            ; ---------------------------------------------------------------------------
000098C4                            ; Scrap	Brain Zone dynamic screen resizing
000098C4                            ; ---------------------------------------------------------------------------
000098C4                            
000098C4                            Resize_SBZ:				; XREF: Resize_Index
000098C4 4EB9 0000 0000             		jsr	AniArt_Load
000098CA 7000                       		moveq	#0,d0
000098CC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000098D0 D040                       		add.w	d0,d0
000098D2 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000098D6 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000098DA                            ; ===========================================================================
000098DA 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000098DC 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000098DE 0000                       		dc.w Resize_FZ-Resize_SBZx
000098E0                            ; ===========================================================================
000098E0                            
000098E0                            Resize_SBZ1:
000098E0 0C78 08A0 F700             		cmpi.w	#$8A0,($FFFFF700).w
000098E6 6500                       		bcs.s	locret_7242
000098E8 31FC 0000 F726             		move.w	#$0,($FFFFF726).w
000098EE                            		
000098EE                            
000098EE                            locret_7242:
000098EE 4E75                       		rts	
000098F0                            ; ===========================================================================
000098F0                            
000098F0                            Resize_SBZ2:
000098F0 7000                       		moveq	#0,d0
000098F2 1038 F742                  		move.b	($FFFFF742).w,d0
000098F6 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000098FA 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000098FE                            ; ===========================================================================
000098FE 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00009900 0000                       		dc.w Resize_SBZ2boss-off_7252
00009902 0000                       		dc.w Resize_SBZ2boss2-off_7252
00009904 0000                       		dc.w Resize_SBZ2end-off_7252
00009906                            ; ===========================================================================
00009906                            
00009906                            Resize_SBZ2main:
00009906 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000990C 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00009912 6500                       		bcs.s	locret_727A
00009914 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
0000991A 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00009920 6500                       		bcs.s	locret_727A
00009922 5438 F742                  		addq.b	#2,($FFFFF742).w
00009926                            
00009926                            locret_727A:
00009926 4E75                       		rts	
00009928                            ; ===========================================================================
00009928                            
00009928                            Resize_SBZ2boss:
00009928 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000992E 6500                       		bcs.s	locret_7298
00009930 6100 0000                  		bsr.w	SingleObjLoad
00009934 6600                       		bne.s	locret_7298
00009936 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
0000993A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000993E 701E                       		moveq	#$1E,d0
00009940 4EF8 1DA2                  		jmp	LoadPLC		; load SBZ2 Eggman patterns
00009944                            ; ===========================================================================
00009944                            
00009944                            locret_7298:
00009944 4E75                       		rts	
00009946                            ; ===========================================================================
00009946                            
00009946                            Resize_SBZ2boss2:
00009946 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
0000994C 6500                       		bcs.s	loc_72B6
0000994E 6100 0000                  		bsr.w	SingleObjLoad
00009952 6600                       		bne.s	loc_72B0
00009954 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00009958 5438 F742                  		addq.b	#2,($FFFFF742).w
0000995C                            
0000995C                            loc_72B0:
0000995C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00009962                            
00009962                            loc_72B6:
00009962 6000                       		bra.s	loc_72C2
00009964                            ; ===========================================================================
00009964                            
00009964                            Resize_SBZ2end:
00009964 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
0000996A 6500                       		bcs.s	loc_72C2
0000996C 4E75                       		rts	
0000996E                            ; ===========================================================================
0000996E                            
0000996E                            loc_72C2:
0000996E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00009974 4E75                       		rts	
00009976                            ; ===========================================================================
00009976                            
00009976                            Resize_FZ:
00009976 7000                       		moveq	#0,d0
00009978 1038 F742                  		move.b	($FFFFF742).w,d0
0000997C 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00009980 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00009984                            ; ===========================================================================
00009984 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00009988 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
0000998C 0000                       		dc.w Resize_FZend2-off_72D8
0000998E                            ; ===========================================================================
0000998E                            
0000998E                            Resize_FZmain:
0000998E 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00009994 6500                       		bcs.s	loc_72F4
00009996 5438 F742                  		addq.b	#2,($FFFFF742).w
0000999A 701F                       		moveq	#$1F,d0
0000999C 4EB8 1DA2                  		jsr	LoadPLC		; load FZ boss patterns
000099A0                            
000099A0                            loc_72F4:
000099A0 60CC                       		bra.s	loc_72C2
000099A2                            ; ===========================================================================
000099A2                            
000099A2                            Resize_FZboss:
000099A2 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000099A8 6500                       		bcs.s	loc_7312
000099AA 6100 0000                  		bsr.w	SingleObjLoad
000099AE 6600                       		bne.s	loc_7312
000099B0 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000099B4 5438 F742                  		addq.b	#2,($FFFFF742).w
000099B8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000099BE                            
000099BE                            loc_7312:
000099BE 60AE                       		bra.s	loc_72C2
000099C0                            ; ===========================================================================
000099C0                            
000099C0                            Resize_FZend:
000099C0 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000099C6 6500                       		bcs.s	loc_7320
000099C8 5438 F742                  		addq.b	#2,($FFFFF742).w
000099CC                            
000099CC                            loc_7320:
000099CC 60A0                       		bra.s	loc_72C2
000099CE                            ; ===========================================================================
000099CE                            
000099CE                            locret_7322:
000099CE 4E75                       		rts	
000099D0                            ; ===========================================================================
000099D0                            
000099D0                            Resize_FZend2:
000099D0 609C                       		bra.s	loc_72C2
000099D2                            ; ===========================================================================
000099D2                            ; ---------------------------------------------------------------------------
000099D2                            ; Ending sequence dynamic screen resizing (empty)
000099D2                            ; ---------------------------------------------------------------------------
000099D2                            
000099D2                            Resize_Ending:				; XREF: Resize_Index
000099D2 4E75                       		rts	
000099D4                            
000099D4                            ; ---------------------------------------------------------------------------
000099D4                            ; Alpha Beta Zone sequence dynamic screen resizing
000099D4                            ; ---------------------------------------------------------------------------
000099D4                             
000099D4                            Resize_ABZ:				; XREF: Resize_Index
000099D4 7000                       		moveq	#0,d0
000099D6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000099DA D040                       		add.w	d0,d0
000099DC 303B 0000                  		move.w	Resize_ABZx(pc,d0.w),d0
000099E0 4EFB 0000                  		jmp	Resize_ABZx(pc,d0.w)
000099E4                            ; ===========================================================================
000099E4 0000                       Resize_ABZx:	dc.w Resize_ABZ1-Resize_ABZx
000099E6 0000                       		dc.w Resize_ABZ2-Resize_ABZx
000099E8 0000                       		dc.w Resize_ABZ3-Resize_ABZx
000099EA                            ; ===========================================================================
000099EA                            Resize_ABZ1:
000099EA 31FC 0160 F726             		move.w	#$160,($FFFFF726).w
000099F0 31FC 0160 F704             		move.w	#$160,($FFFFF704).w
000099F6 31FC 00C0 F728             		move.w	#$C0,($FFFFF728).w
000099FC 0C78 0390 D008             		cmpi.w	#$390,($FFFFD008).W
00009A02 6500                       		bcs.s	Resize_ABZ1_ClearCam
00009A04                            ;		move.b	#1,($FFFFF7AA).w
00009A04 31FC 0300 F72A             		move.w	#$300,($FFFFF72A).w
00009A0A 4E75                       		rts
00009A0C                            
00009A0C                            Resize_ABZ1_ClearCam:
00009A0C 31FC 0900 F72A             		move.w	#$900,($FFFFF72A).w
00009A12 4E75                       		rts
00009A14                            ; ===========================================================================
00009A14                            Resize_ABZ2:
00009A14 4E75                       		rts
00009A16                            ; ===========================================================================
00009A16                            Resize_ABZ3:
00009A16 4E75                       		rts
00009A18                            ; ===========================================================================
00009A18                            ; ---------------------------------------------------------------------------
00009A18                            ; Ice Cap sequence dynamic screen resizing
00009A18                            ; ---------------------------------------------------------------------------
00009A18                             
00009A18                            Resize_IC:				; XREF: Resize_Index
00009A18 7000                       		moveq	#0,d0
00009A1A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00009A1E D040                       		add.w	d0,d0
00009A20 303B 0000                  		move.w	Resize_ICx(pc,d0.w),d0
00009A24 4EFB 0000                  		jmp	Resize_ICx(pc,d0.w)
00009A28                            ; ===========================================================================
00009A28 0000                       Resize_ICx:	dc.w Resize_IC1-Resize_ICx
00009A2A 0000                       		dc.w Resize_IC2-Resize_ICx
00009A2C 0000                       		dc.w Resize_IC3-Resize_ICx
00009A2E                            ; ===========================================================================
00009A2E                            Resize_IC1:
00009A2E 4E75                       		rts
00009A30                            ; ===========================================================================
00009A30                            Resize_IC2:
00009A30 7000                       		moveq	#0,d0
00009A32 1038 F742                  		move.b	($FFFFF742).w,d0
00009A36 303B 0000                  		move.w	Resize_IC2_Index(pc,d0.w),d0
00009A3A 4EFB 0000                  		jmp	Resize_IC2_Index(pc,d0.w)
00009A3E                            
00009A3E                            Resize_IC2_Index:
00009A3E 0000                       		dc.w	Resize_IC2Main-Resize_IC2_Index
00009A40                            Resize_IC2Main:
00009A40                            
00009A40                            Resize_IC2Pal_Return:
00009A40 4E75                       		rts
00009A42                            ; ===========================================================================
00009A42                            Resize_IC3:
00009A42 4E75                       		rts
00009A44                            ; ===========================================================================
00009A44                            ; ===========================================================================
00009A44                            ; ---------------------------------------------------------------------------
00009A44                            ; Object 11 - GHZ bridge
00009A44                            ; ---------------------------------------------------------------------------
00009A44                            
00009A44                            Obj11:					; XREF: Obj_Index
00009A44 7000                       		moveq	#0,d0
00009A46 1028 0024                  		move.b	$24(a0),d0
00009A4A 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00009A4E 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00009A52                            ; ===========================================================================
00009A52 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00009A56 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00009A5A 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00009A5E                            ; ===========================================================================
00009A5E                            
00009A5E                            Obj11_Main:				; XREF: Obj11_Index
00009A5E 5428 0024                  		addq.b	#2,$24(a0)
00009A62 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00009A6A 317C 438E 0002             		move.w	#$438E,2(a0)
00009A70 117C 0004 0001             		move.b	#4,1(a0)
00009A76 117C 0003 0018             		move.b	#3,$18(a0)
00009A7C 117C 0080 0019             		move.b	#$80,$19(a0)
00009A82 3428 000C                  		move.w	$C(a0),d2
00009A86 3628 0008                  		move.w	8(a0),d3
00009A8A 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00009A8C 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00009A90 7200                       		moveq	#0,d1
00009A92 1212                       		move.b	(a2),d1		; copy a2 to d1
00009A94 14FC 0000                  		move.b	#0,(a2)+
00009A98 3001                       		move.w	d1,d0
00009A9A E248                       		lsr.w	#1,d0
00009A9C E948                       		lsl.w	#4,d0
00009A9E 9640                       		sub.w	d0,d3
00009AA0 5501                       		subq.b	#2,d1
00009AA2 6500                       		bcs.s	Obj11_Action
00009AA4                            
00009AA4                            Obj11_MakeBdg:
00009AA4 6100 0000                  		bsr.w	SingleObjLoad
00009AA8 6600                       		bne.s	Obj11_Action
00009AAA 5228 0028                  		addq.b	#1,$28(a0)
00009AAE B668 0008                  		cmp.w	8(a0),d3
00009AB2 6600                       		bne.s	loc_73B8
00009AB4 0643 0010                  		addi.w	#$10,d3
00009AB8 3142 000C                  		move.w	d2,$C(a0)
00009ABC 3142 003C                  		move.w	d2,$3C(a0)
00009AC0 3A08                       		move.w	a0,d5
00009AC2 0445 D000                  		subi.w	#-$3000,d5
00009AC6 EC4D                       		lsr.w	#6,d5
00009AC8 0245 007F                  		andi.w	#$7F,d5
00009ACC 14C5                       		move.b	d5,(a2)+
00009ACE 5228 0028                  		addq.b	#1,$28(a0)
00009AD2                            
00009AD2                            loc_73B8:				; XREF: ROM:00007398j
00009AD2 3A09                       		move.w	a1,d5
00009AD4 0445 D000                  		subi.w	#-$3000,d5
00009AD8 EC4D                       		lsr.w	#6,d5
00009ADA 0245 007F                  		andi.w	#$7F,d5
00009ADE 14C5                       		move.b	d5,(a2)+
00009AE0 137C 000A 0024             		move.b	#$A,$24(a1)
00009AE6 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00009AE8 3342 000C                  		move.w	d2,$C(a1)
00009AEC 3342 003C                  		move.w	d2,$3C(a1)
00009AF0 3343 0008                  		move.w	d3,8(a1)
00009AF4 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00009AFC 337C 438E 0002             		move.w	#$438E,2(a1)
00009B02 137C 0004 0001             		move.b	#4,1(a1)
00009B08 137C 0003 0018             		move.b	#3,$18(a1)
00009B0E 137C 0008 0019             		move.b	#8,$19(a1)
00009B14 0643 0010                  		addi.w	#$10,d3
00009B18 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00009B1C                            
00009B1C                            Obj11_Action:				; XREF: Obj11_Index
00009B1C 6100                       		bsr.s	Obj11_Solid
00009B1E 4A28 003E                  		tst.b	$3E(a0)
00009B22 6700                       		beq.s	Obj11_Display
00009B24 5928 003E                  		subq.b	#4,$3E(a0)
00009B28 6100 0000                  		bsr.w	Obj11_Bend
00009B2C                            
00009B2C                            Obj11_Display:
00009B2C 6100 0000                  		bsr.w	DisplaySprite
00009B30 6000 0000                  		bra.w	Obj11_ChkDel
00009B34                            
00009B34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B34                            
00009B34                            
00009B34                            Obj11_Solid:				; XREF: Obj11_Action
00009B34 7200                       		moveq	#0,d1
00009B36 1228 0028                  		move.b	$28(a0),d1
00009B3A E749                       		lsl.w	#3,d1
00009B3C 3401                       		move.w	d1,d2
00009B3E 5041                       		addq.w	#8,d1
00009B40 D442                       		add.w	d2,d2
00009B42 43F8 D000                  		lea	($FFFFD000).w,a1
00009B46 4A69 0012                  		tst.w	$12(a1)
00009B4A 6B00 0000                  		bmi.w	locret_751E
00009B4E 3029 0008                  		move.w	8(a1),d0
00009B52 9068 0008                  		sub.w	8(a0),d0
00009B56 D041                       		add.w	d1,d0
00009B58 6B00 0000                  		bmi.w	locret_751E
00009B5C B042                       		cmp.w	d2,d0
00009B5E 6400 0000                  		bcc.w	locret_751E
00009B62 6000                       		bra.s	Platform2
00009B64                            ; End of function Obj11_Solid
00009B64                            
00009B64                            ; ---------------------------------------------------------------------------
00009B64                            ; Platform subroutine
00009B64                            ; ---------------------------------------------------------------------------
00009B64                            
00009B64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B64                            
00009B64                            
00009B64                            PlatformObject:
00009B64 43F8 D000                  		lea	($FFFFD000).w,a1
00009B68 4A69 0012                  		tst.w	$12(a1)
00009B6C 6B00 0000                  		bmi.w	locret_751E
00009B70 3029 0008                  		move.w	8(a1),d0
00009B74 9068 0008                  		sub.w	8(a0),d0
00009B78 D041                       		add.w	d1,d0
00009B7A 6B00 0000                  		bmi.w	locret_751E
00009B7E D241                       		add.w	d1,d1
00009B80 B041                       		cmp.w	d1,d0
00009B82 6400 0000                  		bcc.w	locret_751E
00009B86                            
00009B86                            Platform2:
00009B86 3028 000C                  		move.w	$C(a0),d0
00009B8A 5140                       		subq.w	#8,d0
00009B8C                            
00009B8C                            Platform3:
00009B8C 3429 000C                  		move.w	$C(a1),d2
00009B90 1229 0016                  		move.b	$16(a1),d1
00009B94 4881                       		ext.w	d1
00009B96 D242                       		add.w	d2,d1
00009B98 5841                       		addq.w	#4,d1
00009B9A 9041                       		sub.w	d1,d0
00009B9C 6200 0000                  		bhi.w	locret_751E
00009BA0 0C40 FFF0                  		cmpi.w	#-$10,d0
00009BA4 6500 0000                  		bcs.w	locret_751E
00009BA8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009BAC 6B00 0000                  		bmi.w	locret_751E
00009BB0 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00009BB6 6400 0000                  		bcc.w	locret_751E
00009BBA D440                       		add.w	d0,d2
00009BBC 5642                       		addq.w	#3,d2
00009BBE 3342 000C                  		move.w	d2,$C(a1)
00009BC2 5428 0024                  		addq.b	#2,$24(a0)
00009BC6                            
00009BC6                            loc_74AE:
00009BC6 0829 0003 0022             		btst	#3,$22(a1)
00009BCC 6700                       		beq.s	loc_74DC
00009BCE 7000                       		moveq	#0,d0
00009BD0 1029 003D                  		move.b	$3D(a1),d0
00009BD4 ED48                       		lsl.w	#6,d0
00009BD6 0680 00FF D000             		addi.l	#$FFD000,d0
00009BDC 2440                       		movea.l	d0,a2
00009BDE 08AA 0003 0022             		bclr	#3,$22(a2)
00009BE4 422A 0025                  		clr.b	$25(a2)
00009BE8 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00009BEE 6600                       		bne.s	loc_74DC
00009BF0 552A 0024                  		subq.b	#2,$24(a2)
00009BF4                            
00009BF4                            loc_74DC:
00009BF4 3008                       		move.w	a0,d0
00009BF6 0440 D000                  		subi.w	#-$3000,d0
00009BFA EC48                       		lsr.w	#6,d0
00009BFC 0240 007F                  		andi.w	#$7F,d0
00009C00 1340 003D                  		move.b	d0,$3D(a1)
00009C04 137C 0000 0026             		move.b	#0,$26(a1)
00009C0A 337C 0000 0012             		move.w	#0,$12(a1)
00009C10 3369 0010 0014             		move.w	$10(a1),$14(a1)
00009C16 0829 0001 0022             		btst	#1,$22(a1)
00009C1C 6700                       		beq.s	loc_7512
00009C1E 2F08                       		move.l	a0,-(sp)
00009C20 2049                       		movea.l	a1,a0
00009C22 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00009C28 205F                       		movea.l	(sp)+,a0
00009C2A                            
00009C2A                            loc_7512:
00009C2A 08E9 0003 0022             		bset	#3,$22(a1)
00009C30 08E8 0003 0022             		bset	#3,$22(a0)
00009C36                            
00009C36                            locret_751E:
00009C36 4E75                       		rts	
00009C38                            ; End of function PlatformObject
00009C38                            
00009C38                            ; ---------------------------------------------------------------------------
00009C38                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00009C38                            ; ---------------------------------------------------------------------------
00009C38                            
00009C38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C38                            
00009C38                            
00009C38                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00009C38 43F8 D000                  		lea	($FFFFD000).w,a1
00009C3C 4A69 0012                  		tst.w	$12(a1)
00009C40 6B00 FFF4                  		bmi.w	locret_751E
00009C44 3029 0008                  		move.w	8(a1),d0
00009C48 9068 0008                  		sub.w	8(a0),d0
00009C4C D041                       		add.w	d1,d0
00009C4E 6BE6                       		bmi.s	locret_751E
00009C50 D241                       		add.w	d1,d1
00009C52 B041                       		cmp.w	d1,d0
00009C54 64E0                       		bcc.s	locret_751E
00009C56 0828 0000 0001             		btst	#0,1(a0)
00009C5C 6700                       		beq.s	loc_754A
00009C5E 4640                       		not.w	d0
00009C60 D041                       		add.w	d1,d0
00009C62                            
00009C62                            loc_754A:
00009C62 E248                       		lsr.w	#1,d0
00009C64 7600                       		moveq	#0,d3
00009C66 1632 0000                  		move.b	(a2,d0.w),d3
00009C6A 3028 000C                  		move.w	$C(a0),d0
00009C6E 9043                       		sub.w	d3,d0
00009C70 6000 FF1A                  		bra.w	Platform3
00009C74                            ; End of function SlopeObject
00009C74                            
00009C74                            
00009C74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C74                            
00009C74                            
00009C74                            Obj15_Solid:				; XREF: Obj15_SetSolid
00009C74 43F8 D000                  		lea	($FFFFD000).w,a1
00009C78 4A69 0012                  		tst.w	$12(a1)
00009C7C 6B00 FFB8                  		bmi.w	locret_751E
00009C80 3029 0008                  		move.w	8(a1),d0
00009C84 9068 0008                  		sub.w	8(a0),d0
00009C88 D041                       		add.w	d1,d0
00009C8A 6B00 FFAA                  		bmi.w	locret_751E
00009C8E D241                       		add.w	d1,d1
00009C90 B041                       		cmp.w	d1,d0
00009C92 6400 FFA2                  		bcc.w	locret_751E
00009C96 3028 000C                  		move.w	$C(a0),d0
00009C9A 9043                       		sub.w	d3,d0
00009C9C 6000 FEEE                  		bra.w	Platform3
00009CA0                            ; End of function Obj15_Solid
00009CA0                            
00009CA0                            ; ===========================================================================
00009CA0                            
00009CA0                            Obj11_Action2:				; XREF: Obj11_Index
00009CA0 6100                       		bsr.s	Obj11_WalkOff
00009CA2 6100 0000                  		bsr.w	DisplaySprite
00009CA6 6000 0000                  		bra.w	Obj11_ChkDel
00009CAA                            
00009CAA                            ; ---------------------------------------------------------------------------
00009CAA                            ; Subroutine allowing Sonic to walk off a bridge
00009CAA                            ; ---------------------------------------------------------------------------
00009CAA                            
00009CAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CAA                            
00009CAA                            
00009CAA                            Obj11_WalkOff:				; XREF: Obj11_Action2
00009CAA 7200                       		moveq	#0,d1
00009CAC 1228 0028                  		move.b	$28(a0),d1
00009CB0 E749                       		lsl.w	#3,d1
00009CB2 3401                       		move.w	d1,d2
00009CB4 5041                       		addq.w	#8,d1
00009CB6 6100                       		bsr.s	ExitPlatform2
00009CB8 6400                       		bcc.s	locret_75BE
00009CBA E848                       		lsr.w	#4,d0
00009CBC 1140 003F                  		move.b	d0,$3F(a0)
00009CC0 1028 003E                  		move.b	$3E(a0),d0
00009CC4 0C00 0040                  		cmpi.b	#$40,d0
00009CC8 6700                       		beq.s	loc_75B6
00009CCA 5828 003E                  		addq.b	#4,$3E(a0)
00009CCE                            
00009CCE                            loc_75B6:
00009CCE 6100 0000                  		bsr.w	Obj11_Bend
00009CD2 6100 0000                  		bsr.w	Obj11_MoveSonic
00009CD6                            
00009CD6                            locret_75BE:
00009CD6 4E75                       		rts	
00009CD8                            ; End of function Obj11_WalkOff
00009CD8                            
00009CD8                            ; ---------------------------------------------------------------------------
00009CD8                            ; Subroutine allowing Sonic to walk or jump off	a platform
00009CD8                            ; ---------------------------------------------------------------------------
00009CD8                            
00009CD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CD8                            
00009CD8                            
00009CD8                            ExitPlatform:
00009CD8 3401                       		move.w	d1,d2
00009CDA                            
00009CDA                            ExitPlatform2:
00009CDA D442                       		add.w	d2,d2
00009CDC 43F8 D000                  		lea	($FFFFD000).w,a1
00009CE0 0829 0001 0022             		btst	#1,$22(a1)
00009CE6 6600                       		bne.s	loc_75E0
00009CE8 3029 0008                  		move.w	8(a1),d0
00009CEC 9068 0008                  		sub.w	8(a0),d0
00009CF0 D041                       		add.w	d1,d0
00009CF2 6B00                       		bmi.s	loc_75E0
00009CF4 B042                       		cmp.w	d2,d0
00009CF6 6500                       		bcs.s	locret_75F2
00009CF8                            
00009CF8                            loc_75E0:
00009CF8 08A9 0003 0022             		bclr	#3,$22(a1)
00009CFE 117C 0002 0024             		move.b	#2,$24(a0)
00009D04 08A8 0003 0022             		bclr	#3,$22(a0)
00009D0A                            
00009D0A                            locret_75F2:
00009D0A 4E75                       		rts	
00009D0C                            ; End of function ExitPlatform
00009D0C                            
00009D0C                            
00009D0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D0C                            
00009D0C                            
00009D0C                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00009D0C 7000                       		moveq	#0,d0
00009D0E 1028 003F                  		move.b	$3F(a0),d0
00009D12 1030 0029                  		move.b	$29(a0,d0.w),d0
00009D16 ED48                       		lsl.w	#6,d0
00009D18 0680 00FF D000             		addi.l	#$FFD000,d0
00009D1E 2440                       		movea.l	d0,a2
00009D20 43F8 D000                  		lea	($FFFFD000).w,a1
00009D24 302A 000C                  		move.w	$C(a2),d0
00009D28 5140                       		subq.w	#8,d0
00009D2A 7200                       		moveq	#0,d1
00009D2C 1229 0016                  		move.b	$16(a1),d1
00009D30 9041                       		sub.w	d1,d0
00009D32 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00009D36 4E75                       		rts	
00009D38                            ; End of function Obj11_MoveSonic
00009D38                            
00009D38                            
00009D38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D38                            
00009D38                            
00009D38                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00009D38 1028 003E                  		move.b	$3E(a0),d0
00009D3C 4EB8 3798                  		jsr	CalcSine
00009D40 3800                       		move.w	d0,d4
00009D42 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00009D48 7000                       		moveq	#0,d0
00009D4A 1028 0028                  		move.b	$28(a0),d0
00009D4E E948                       		lsl.w	#4,d0
00009D50 7600                       		moveq	#0,d3
00009D52 1628 003F                  		move.b	$3F(a0),d3
00009D56 3403                       		move.w	d3,d2
00009D58 D640                       		add.w	d0,d3
00009D5A 7A00                       		moveq	#0,d5
00009D5C 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009D62 1A35 3000                  		move.b	(a5,d3.w),d5
00009D66 0243 000F                  		andi.w	#$F,d3
00009D6A E94B                       		lsl.w	#4,d3
00009D6C 47F4 3000                  		lea	(a4,d3.w),a3
00009D70 45E8 0029                  		lea	$29(a0),a2
00009D74                            
00009D74                            loc_765C:
00009D74 7000                       		moveq	#0,d0
00009D76 101A                       		move.b	(a2)+,d0
00009D78 ED48                       		lsl.w	#6,d0
00009D7A 0680 00FF D000             		addi.l	#$FFD000,d0
00009D80 2240                       		movea.l	d0,a1
00009D82 7000                       		moveq	#0,d0
00009D84 101B                       		move.b	(a3)+,d0
00009D86 5240                       		addq.w	#1,d0
00009D88 C0C5                       		mulu.w	d5,d0
00009D8A C0C4                       		mulu.w	d4,d0
00009D8C 4840                       		swap	d0
00009D8E D069 003C                  		add.w	$3C(a1),d0
00009D92 3340 000C                  		move.w	d0,$C(a1)
00009D96 51CA FFDC                  		dbf	d2,loc_765C
00009D9A 7000                       		moveq	#0,d0
00009D9C 1028 0028                  		move.b	$28(a0),d0
00009DA0 7600                       		moveq	#0,d3
00009DA2 1628 003F                  		move.b	$3F(a0),d3
00009DA6 5203                       		addq.b	#1,d3
00009DA8 9600                       		sub.b	d0,d3
00009DAA 4403                       		neg.b	d3
00009DAC 6B00                       		bmi.s	locret_76CA
00009DAE 3403                       		move.w	d3,d2
00009DB0 E94B                       		lsl.w	#4,d3
00009DB2 47F4 3000                  		lea	(a4,d3.w),a3
00009DB6 D6C2                       		adda.w	d2,a3
00009DB8 5342                       		subq.w	#1,d2
00009DBA 6500                       		bcs.s	locret_76CA
00009DBC                            
00009DBC                            loc_76A4:
00009DBC 7000                       		moveq	#0,d0
00009DBE 101A                       		move.b	(a2)+,d0
00009DC0 ED48                       		lsl.w	#6,d0
00009DC2 0680 00FF D000             		addi.l	#$FFD000,d0
00009DC8 2240                       		movea.l	d0,a1
00009DCA 7000                       		moveq	#0,d0
00009DCC 1023                       		move.b	-(a3),d0
00009DCE 5240                       		addq.w	#1,d0
00009DD0 C0C5                       		mulu.w	d5,d0
00009DD2 C0C4                       		mulu.w	d4,d0
00009DD4 4840                       		swap	d0
00009DD6 D069 003C                  		add.w	$3C(a1),d0
00009DDA 3340 000C                  		move.w	d0,$C(a1)
00009DDE 51CA FFDC                  		dbf	d2,loc_76A4
00009DE2                            
00009DE2                            locret_76CA:
00009DE2 4E75                       		rts	
00009DE4                            ; End of function Obj11_Bend
00009DE4                            
00009DE4                            ; ===========================================================================
00009DE4                            ; ---------------------------------------------------------------------------
00009DE4                            ; GHZ bridge-bending data
00009DE4                            ; (Defines how the bridge bends	when Sonic walks across	it)
00009DE4                            ; ---------------------------------------------------------------------------
00009DE4                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00009EF4                            		even
00009EF4                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00009FF4                            		even
00009FF4                            
00009FF4                            ; ===========================================================================
00009FF4                            
00009FF4                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00009FF4 3028 0008                  		move.w	8(a0),d0
00009FF8 0240 FF80                  		andi.w	#$FF80,d0
00009FFC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A000 0441 0080                  		subi.w	#$80,d1
0000A004 0241 FF80                  		andi.w	#$FF80,d1
0000A008 9041                       		sub.w	d1,d0
0000A00A 0C40 0280                  		cmpi.w	#$280,d0
0000A00E 6200 0000                  		bhi.w	Obj11_DelAll
0000A012 4E75                       		rts	
0000A014                            ; ===========================================================================
0000A014                            
0000A014                            Obj11_DelAll:				; XREF: Obj11_ChkDel
0000A014 7400                       		moveq	#0,d2
0000A016 45E8 0028                  		lea	$28(a0),a2	; load bridge length
0000A01A 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
0000A01C 5302                       		subq.b	#1,d2		; subtract 1
0000A01E 6500                       		bcs.s	Obj11_Delete
0000A020                            
0000A020                            Obj11_DelLoop:
0000A020 7000                       		moveq	#0,d0
0000A022 101A                       		move.b	(a2)+,d0
0000A024 ED48                       		lsl.w	#6,d0
0000A026 0680 00FF D000             		addi.l	#$FFD000,d0
0000A02C 2240                       		movea.l	d0,a1
0000A02E B048                       		cmp.w	a0,d0
0000A030 6700                       		beq.s	loc_791E
0000A032 6100 0000                  		bsr.w	DeleteObject2
0000A036                            
0000A036                            loc_791E:
0000A036 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
0000A03A                            
0000A03A                            Obj11_Delete:
0000A03A 6100 0000                  		bsr.w	DeleteObject
0000A03E 4E75                       		rts	
0000A040                            ; ===========================================================================
0000A040                            
0000A040                            Obj11_Delete2:				; XREF: Obj11_Index
0000A040 6100 0000                  		bsr.w	DeleteObject
0000A044 4E75                       		rts	
0000A046                            ; ===========================================================================
0000A046                            
0000A046                            Obj11_Display2:				; XREF: Obj11_Index
0000A046 6100 0000                  		bsr.w	DisplaySprite
0000A04A 4E75                       		rts	
0000A04C                            ; ===========================================================================
0000A04C                            ; ---------------------------------------------------------------------------
0000A04C                            ; Sprite mappings - GHZ	bridge
0000A04C                            ; ---------------------------------------------------------------------------
0000A04C                            Map_obj11:
0000A04C                            	include "_maps\obj11.asm"
0000A04C                            ; ---------------------------------------------------------------------------
0000A04C                            ; Sprite mappings - GHZ	bridge
0000A04C                            ; ---------------------------------------------------------------------------
0000A04C 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
0000A050 0000                       		dc.w byte_794B-Map_obj11
0000A052 01                         byte_793A:	dc.b 1
0000A053 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A058 02                         byte_7940:	dc.b 2
0000A059 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000A05E 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000A063 01                         byte_794B:	dc.b 1
0000A064 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000A06A 00                         		even
0000A06A 00                         		even
0000A06A                            
0000A06A                            ; ===========================================================================
0000A06A                            ; ---------------------------------------------------------------------------
0000A06A                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000A06A                            ;	    - spiked ball on a chain (SBZ)
0000A06A                            ; ---------------------------------------------------------------------------
0000A06A                            
0000A06A                            Obj15:					; XREF: Obj_Index
0000A06A 7000                       		moveq	#0,d0
0000A06C 1028 0024                  		move.b	$24(a0),d0
0000A070 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000A074 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000A078                            ; ===========================================================================
0000A078 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000A07C 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000A080 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000A084 0000                       		dc.w Obj15_Action-Obj15_Index
0000A086                            ; ===========================================================================
0000A086                            
0000A086                            Obj15_Main:				; XREF: Obj15_Index
0000A086 5428 0024                  		addq.b	#2,$24(a0)
0000A08A 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
0000A092 317C 4380 0002             		move.w	#$4380,2(a0)
0000A098 117C 0004 0001             		move.b	#4,1(a0)
0000A09E 117C 0003 0018             		move.b	#3,$18(a0)
0000A0A4 117C 0018 0019             		move.b	#$18,$19(a0)
0000A0AA 117C 0008 0016             		move.b	#8,$16(a0)
0000A0B0 3168 000C 0038             		move.w	$C(a0),$38(a0)
0000A0B6 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000A0BC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000A0C2 6600                       		bne.s	Obj15_NotSLZ
0000A0C4 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
0000A0CC 317C 43DC 0002             		move.w	#$43DC,2(a0)
0000A0D2 117C 0020 0019             		move.b	#$20,$19(a0)
0000A0D8 117C 0010 0016             		move.b	#$10,$16(a0)
0000A0DE 117C 0099 0020             		move.b	#$99,$20(a0)
0000A0E4                            
0000A0E4                            Obj15_NotSLZ:
0000A0E4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000A0EA 6600                       		bne.s	Obj15_SetLength
0000A0EC 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
0000A0F4 317C 0391 0002             		move.w	#$391,2(a0)
0000A0FA 117C 0018 0019             		move.b	#$18,$19(a0)
0000A100 117C 0018 0016             		move.b	#$18,$16(a0)
0000A106 117C 0086 0020             		move.b	#$86,$20(a0)
0000A10C 117C 000C 0024             		move.b	#$C,$24(a0)
0000A112                            
0000A112                            Obj15_SetLength:
0000A112 1810                       		move.b	0(a0),d4
0000A114 7200                       		moveq	#0,d1
0000A116 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
0000A11A 1212                       		move.b	(a2),d1		; move a2 to d1
0000A11C 3F01                       		move.w	d1,-(sp)
0000A11E 0241 000F                  		andi.w	#$F,d1
0000A122 14FC 0000                  		move.b	#0,(a2)+
0000A126 3601                       		move.w	d1,d3
0000A128 E94B                       		lsl.w	#4,d3
0000A12A 5003                       		addq.b	#8,d3
0000A12C 1143 003C                  		move.b	d3,$3C(a0)
0000A130 5103                       		subq.b	#8,d3
0000A132 4A28 001A                  		tst.b	$1A(a0)
0000A136 6700                       		beq.s	Obj15_MakeChain
0000A138 5003                       		addq.b	#8,d3
0000A13A 5341                       		subq.w	#1,d1
0000A13C                            
0000A13C                            Obj15_MakeChain:
0000A13C 6100 0000                  		bsr.w	SingleObjLoad
0000A140 6600                       		bne.s	loc_7A92
0000A142 5228 0028                  		addq.b	#1,$28(a0)
0000A146 3A09                       		move.w	a1,d5
0000A148 0445 D000                  		subi.w	#-$3000,d5
0000A14C EC4D                       		lsr.w	#6,d5
0000A14E 0245 007F                  		andi.w	#$7F,d5
0000A152 14C5                       		move.b	d5,(a2)+
0000A154 137C 000A 0024             		move.b	#$A,$24(a1)
0000A15A 1284                       		move.b	d4,0(a1)	; load swinging	object
0000A15C 2368 0004 0004             		move.l	4(a0),4(a1)
0000A162 3368 0002 0002             		move.w	2(a0),2(a1)
0000A168 08A9 0006 0002             		bclr	#6,2(a1)
0000A16E 137C 0004 0001             		move.b	#4,1(a1)
0000A174 137C 0004 0018             		move.b	#4,$18(a1)
0000A17A 137C 0008 0019             		move.b	#8,$19(a1)
0000A180 137C 0001 001A             		move.b	#1,$1A(a1)
0000A186 1343 003C                  		move.b	d3,$3C(a1)
0000A18A 0403 0010                  		subi.b	#$10,d3
0000A18E 6400                       		bcc.s	loc_7A8E
0000A190 137C 0002 001A             		move.b	#2,$1A(a1)
0000A196 137C 0003 0018             		move.b	#3,$18(a1)
0000A19C 08E9 0006 0002             		bset	#6,2(a1)
0000A1A2                            
0000A1A2                            loc_7A8E:
0000A1A2 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000A1A6                            
0000A1A6                            loc_7A92:
0000A1A6 3A08                       		move.w	a0,d5
0000A1A8 0445 D000                  		subi.w	#-$3000,d5
0000A1AC EC4D                       		lsr.w	#6,d5
0000A1AE 0245 007F                  		andi.w	#$7F,d5
0000A1B2 14C5                       		move.b	d5,(a2)+
0000A1B4 317C 4080 0026             		move.w	#$4080,$26(a0)
0000A1BA 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000A1C0 321F                       		move.w	(sp)+,d1
0000A1C2 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000A1C6 6700                       		beq.s	loc_7AD4	; if not, branch
0000A1C8 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
0000A1D0 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000A1D6 117C 0001 001A             		move.b	#1,$1A(a0)
0000A1DC 117C 0002 0018             		move.b	#2,$18(a0)
0000A1E2 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
0000A1E8                            
0000A1E8                            loc_7AD4:
0000A1E8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000A1EE 6700                       		beq.s	Obj15_Action	; if yes, branch
0000A1F0                            
0000A1F0                            Obj15_SetSolid:				; XREF: Obj15_Index
0000A1F0 7200                       		moveq	#0,d1
0000A1F2 1228 0019                  		move.b	$19(a0),d1
0000A1F6 7600                       		moveq	#0,d3
0000A1F8 1628 0016                  		move.b	$16(a0),d3
0000A1FC 6100 FA76                  		bsr.w	Obj15_Solid
0000A200                            
0000A200                            Obj15_Action:				; XREF: Obj15_Index
0000A200 6100 0000                  		bsr.w	Obj15_Move
0000A204 6100 0000                  		bsr.w	DisplaySprite
0000A208 6000 0000                  		bra.w	Obj15_ChkDel
0000A20C                            ; ===========================================================================
0000A20C                            
0000A20C                            Obj15_Action2:				; XREF: Obj15_Index
0000A20C 7200                       		moveq	#0,d1
0000A20E 1228 0019                  		move.b	$19(a0),d1
0000A212 6100 FAC4                  		bsr.w	ExitPlatform
0000A216 3F28 0008                  		move.w	8(a0),-(sp)
0000A21A 6100 0000                  		bsr.w	Obj15_Move
0000A21E 341F                       		move.w	(sp)+,d2
0000A220 7600                       		moveq	#0,d3
0000A222 1628 0016                  		move.b	$16(a0),d3
0000A226 5203                       		addq.b	#1,d3
0000A228 6100 0000                  		bsr.w	MvSonicOnPtfm
0000A22C 6100 0000                  		bsr.w	DisplaySprite
0000A230 6000 0000                  		bra.w	Obj15_ChkDel
0000A234                            
0000A234 4E75                       		rts
0000A236                            
0000A236                            ; ---------------------------------------------------------------------------
0000A236                            ; Subroutine to	change Sonic's position with a platform
0000A236                            ; ---------------------------------------------------------------------------
0000A236                            
0000A236                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A236                            
0000A236                            
0000A236                            MvSonicOnPtfm:
0000A236 43F8 D000                  		lea	($FFFFD000).w,a1
0000A23A 3028 000C                  		move.w	$C(a0),d0
0000A23E 9043                       		sub.w	d3,d0
0000A240 6000                       		bra.s	MvSonic2
0000A242                            ; End of function MvSonicOnPtfm
0000A242                            
0000A242                            ; ---------------------------------------------------------------------------
0000A242                            ; Subroutine to	change Sonic's position with a platform
0000A242                            ; ---------------------------------------------------------------------------
0000A242                            
0000A242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A242                            
0000A242                            
0000A242                            MvSonicOnPtfm2:
0000A242 43F8 D000                  		lea	($FFFFD000).w,a1
0000A246 3028 000C                  		move.w	$C(a0),d0
0000A24A 0440 0009                  		subi.w	#9,d0
0000A24E                            
0000A24E                            MvSonic2:
0000A24E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A252 6B00                       		bmi.s	locret_7B62
0000A254 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A25A 6400                       		bcc.s	locret_7B62
0000A25C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A260 6600                       		bne.s	locret_7B62
0000A262 7200                       		moveq	#0,d1
0000A264 1229 0016                  		move.b	$16(a1),d1
0000A268 9041                       		sub.w	d1,d0
0000A26A 3340 000C                  		move.w	d0,$C(a1)
0000A26E 9468 0008                  		sub.w	8(a0),d2
0000A272 9569 0008                  		sub.w	d2,8(a1)
0000A276                            
0000A276                            locret_7B62:
0000A276 4E75                       		rts	
0000A278                            ; End of function MvSonicOnPtfm2
0000A278                            
0000A278                            
0000A278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A278                            
0000A278                            
0000A278                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000A278 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000A27C 323C 0080                  		move.w	#$80,d1
0000A280 0828 0000 0022             		btst	#0,$22(a0)
0000A286 6700                       		beq.s	loc_7B78
0000A288 4440                       		neg.w	d0
0000A28A D041                       		add.w	d1,d0
0000A28C                            
0000A28C                            loc_7B78:
0000A28C 6000                       		bra.s	Obj15_Move2
0000A28E                            ; End of function Obj15_Move
0000A28E                            
0000A28E                            
0000A28E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A28E                            
0000A28E                            
0000A28E                            Obj48_Move:				; XREF: Obj48_Display2
0000A28E 4A28 003D                  		tst.b	$3D(a0)
0000A292 6600                       		bne.s	loc_7B9C
0000A294 3028 003E                  		move.w	$3E(a0),d0
0000A298 5040                       		addq.w	#8,d0
0000A29A 3140 003E                  		move.w	d0,$3E(a0)
0000A29E D168 0026                  		add.w	d0,$26(a0)
0000A2A2 0C40 0200                  		cmpi.w	#$200,d0
0000A2A6 6600                       		bne.s	loc_7BB6
0000A2A8 117C 0001 003D             		move.b	#1,$3D(a0)
0000A2AE 6000                       		bra.s	loc_7BB6
0000A2B0                            ; ===========================================================================
0000A2B0                            
0000A2B0                            loc_7B9C:
0000A2B0 3028 003E                  		move.w	$3E(a0),d0
0000A2B4 5140                       		subq.w	#8,d0
0000A2B6 3140 003E                  		move.w	d0,$3E(a0)
0000A2BA D168 0026                  		add.w	d0,$26(a0)
0000A2BE 0C40 FE00                  		cmpi.w	#-$200,d0
0000A2C2 6600                       		bne.s	loc_7BB6
0000A2C4 117C 0000 003D             		move.b	#0,$3D(a0)
0000A2CA                            
0000A2CA                            loc_7BB6:
0000A2CA 1028 0026                  		move.b	$26(a0),d0
0000A2CE                            ; End of function Obj48_Move
0000A2CE                            
0000A2CE                            
0000A2CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A2CE                            
0000A2CE                            
0000A2CE                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000A2CE 4EB8 3798                  		jsr	CalcSine
0000A2D2 3428 0038                  		move.w	$38(a0),d2
0000A2D6 3628 003A                  		move.w	$3A(a0),d3
0000A2DA 45E8 0028                  		lea	$28(a0),a2
0000A2DE 7C00                       		moveq	#0,d6
0000A2E0 1C1A                       		move.b	(a2)+,d6
0000A2E2                            
0000A2E2                            loc_7BCE:
0000A2E2 7800                       		moveq	#0,d4
0000A2E4 181A                       		move.b	(a2)+,d4
0000A2E6 ED4C                       		lsl.w	#6,d4
0000A2E8 0684 00FF D000             		addi.l	#$FFD000,d4
0000A2EE 2244                       		movea.l	d4,a1
0000A2F0 7800                       		moveq	#0,d4
0000A2F2 1829 003C                  		move.b	$3C(a1),d4
0000A2F6 2A04                       		move.l	d4,d5
0000A2F8 C9C0                       		muls.w	d0,d4
0000A2FA E084                       		asr.l	#8,d4
0000A2FC CBC1                       		muls.w	d1,d5
0000A2FE E085                       		asr.l	#8,d5
0000A300 D842                       		add.w	d2,d4
0000A302 DA43                       		add.w	d3,d5
0000A304 3344 000C                  		move.w	d4,$C(a1)
0000A308 3345 0008                  		move.w	d5,8(a1)
0000A30C 51CE FFD4                  		dbf	d6,loc_7BCE
0000A310 4E75                       		rts	
0000A312                            ; End of function Obj15_Move2
0000A312                            
0000A312                            ; ===========================================================================
0000A312                            
0000A312                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000A312 3028 003A                  		move.w	$3A(a0),d0
0000A316 0240 FF80                  		andi.w	#$FF80,d0
0000A31A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A31E 0441 0080                  		subi.w	#$80,d1
0000A322 0241 FF80                  		andi.w	#$FF80,d1
0000A326 9041                       		sub.w	d1,d0
0000A328 0C40 0280                  		cmpi.w	#$280,d0
0000A32C 6200 0000                  		bhi.w	Obj15_DelAll
0000A330 4E75                       		rts	
0000A332                            ; ===========================================================================
0000A332                            
0000A332                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000A332 7400                       		moveq	#0,d2
0000A334 45E8 0028                  		lea	$28(a0),a2
0000A338 141A                       		move.b	(a2)+,d2
0000A33A                            
0000A33A                            Obj15_DelLoop:
0000A33A 7000                       		moveq	#0,d0
0000A33C 101A                       		move.b	(a2)+,d0
0000A33E ED48                       		lsl.w	#6,d0
0000A340 0680 00FF D000             		addi.l	#$FFD000,d0
0000A346 2240                       		movea.l	d0,a1
0000A348 6100 0000                  		bsr.w	DeleteObject2
0000A34C 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000A350 4E75                       		rts	
0000A352                            ; ===========================================================================
0000A352                            
0000A352                            Obj15_Delete:				; XREF: Obj15_Index
0000A352 6100 0000                  		bsr.w	DeleteObject
0000A356 4E75                       		rts	
0000A358                            ; ===========================================================================
0000A358                            
0000A358                            Obj15_Display:				; XREF: Obj15_Index
0000A358 6000 0000                  		bra.w	DisplaySprite
0000A35C                            ; ===========================================================================
0000A35C                            ; ---------------------------------------------------------------------------
0000A35C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000A35C                            ; ---------------------------------------------------------------------------
0000A35C                            Map_obj15:
0000A35C                            	include "_maps\obj15ghz.asm"
0000A35C                            ; ---------------------------------------------------------------------------
0000A35C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000A35C                            ; ---------------------------------------------------------------------------
0000A35C 0000                       		dc.w byte_7C4E-Map_obj15
0000A35E 0000                       		dc.w byte_7C59-Map_obj15
0000A360 0000                       		dc.w byte_7C5F-Map_obj15
0000A362 02                         byte_7C4E:	dc.b 2
0000A363 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000A368 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000A36D 01                         byte_7C59:	dc.b 1
0000A36E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A373 01                         byte_7C5F:	dc.b 1
0000A374 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A37A 00                         		even
0000A37A 00                         		even
0000A37A                            
0000A37A                            ; ---------------------------------------------------------------------------
0000A37A                            ; Sprite mappings - SLZ	swinging platforms
0000A37A                            ; ---------------------------------------------------------------------------
0000A37A                            Map_obj15a:
0000A37A                            	include "_maps\obj15slz.asm"
0000A37A                            ; ---------------------------------------------------------------------------
0000A37A                            ; Sprite mappings - SLZ	swinging platforms
0000A37A                            ; ---------------------------------------------------------------------------
0000A37A 0000                       		dc.w byte_7C6C-Map_obj15a
0000A37C 0000                       		dc.w byte_7C95-Map_obj15a
0000A37E 0000                       		dc.w byte_7C9B-Map_obj15a
0000A380 08                         byte_7C6C:	dc.b 8
0000A381 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000A386 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000A38B F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000A390 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000A395 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000A39A 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000A39F 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000A3A4 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000A3A9 01                         byte_7C95:	dc.b 1
0000A3AA F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000A3AF 01                         byte_7C9B:	dc.b 1
0000A3B0 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000A3B6 00                         		even
0000A3B6 00                         		even
0000A3B6                            
0000A3B6                            ; ===========================================================================
0000A3B6                            ; ---------------------------------------------------------------------------
0000A3B6                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000A3B6                            ; ---------------------------------------------------------------------------
0000A3B6                            
0000A3B6                            Obj17:					; XREF: Obj_Index
0000A3B6 7000                       		moveq	#0,d0
0000A3B8 1028 0024                  		move.b	$24(a0),d0
0000A3BC 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000A3C0 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000A3C4                            ; ===========================================================================
0000A3C4 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000A3C6 0000                       		dc.w Obj17_Action-Obj17_Index
0000A3C8 0000                       		dc.w Obj17_Action-Obj17_Index
0000A3CA 0000                       		dc.w Obj17_Delete-Obj17_Index
0000A3CC 0000                       		dc.w Obj17_Display-Obj17_Index
0000A3CE                            ; ===========================================================================
0000A3CE                            
0000A3CE                            Obj17_Main:				; XREF: Obj17_Index
0000A3CE 5428 0024                  		addq.b	#2,$24(a0)
0000A3D2 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000A3DA 317C 4398 0002             		move.w	#$4398,2(a0)
0000A3E0 117C 0007 0022             		move.b	#7,$22(a0)
0000A3E6 117C 0004 0001             		move.b	#4,1(a0)
0000A3EC 117C 0003 0018             		move.b	#3,$18(a0)
0000A3F2 117C 0008 0019             		move.b	#8,$19(a0)
0000A3F8 3428 000C                  		move.w	$C(a0),d2
0000A3FC 3628 0008                  		move.w	8(a0),d3
0000A400 1810                       		move.b	0(a0),d4
0000A402 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000A406 7200                       		moveq	#0,d1
0000A408 1212                       		move.b	(a2),d1		; move a2 to d1
0000A40A 14FC 0000                  		move.b	#0,(a2)+
0000A40E 3001                       		move.w	d1,d0
0000A410 E248                       		lsr.w	#1,d0
0000A412 E948                       		lsl.w	#4,d0
0000A414 9640                       		sub.w	d0,d3
0000A416 5501                       		subq.b	#2,d1
0000A418 6500                       		bcs.s	Obj17_Action
0000A41A 7C00                       		moveq	#0,d6
0000A41C                            
0000A41C                            Obj17_MakeHelix:
0000A41C 6100 0000                  		bsr.w	SingleObjLoad
0000A420 6600                       		bne.s	Obj17_Action
0000A422 5228 0028                  		addq.b	#1,$28(a0)
0000A426 3A09                       		move.w	a1,d5
0000A428 0445 D000                  		subi.w	#$D000,d5
0000A42C EC4D                       		lsr.w	#6,d5
0000A42E 0245 007F                  		andi.w	#$7F,d5
0000A432 14C5                       		move.b	d5,(a2)+
0000A434 137C 0008 0024             		move.b	#8,$24(a1)
0000A43A 1284                       		move.b	d4,0(a1)
0000A43C 3342 000C                  		move.w	d2,$C(a1)
0000A440 3343 0008                  		move.w	d3,8(a1)
0000A444 2368 0004 0004             		move.l	4(a0),4(a1)
0000A44A 337C 4398 0002             		move.w	#$4398,2(a1)
0000A450 137C 0004 0001             		move.b	#4,1(a1)
0000A456 137C 0003 0018             		move.b	#3,$18(a1)
0000A45C 137C 0008 0019             		move.b	#8,$19(a1)
0000A462 1346 003E                  		move.b	d6,$3E(a1)
0000A466 5206                       		addq.b	#1,d6
0000A468 0206 0007                  		andi.b	#7,d6
0000A46C 0643 0010                  		addi.w	#$10,d3
0000A470 B668 0008                  		cmp.w	8(a0),d3
0000A474 6600                       		bne.s	loc_7D78
0000A476 1146 003E                  		move.b	d6,$3E(a0)
0000A47A 5206                       		addq.b	#1,d6
0000A47C 0206 0007                  		andi.b	#7,d6
0000A480 0643 0010                  		addi.w	#$10,d3
0000A484 5228 0028                  		addq.b	#1,$28(a0)
0000A488                            
0000A488                            loc_7D78:
0000A488 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000A48C                            
0000A48C                            Obj17_Action:				; XREF: Obj17_Index
0000A48C 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000A490 6100 0000                  		bsr.w	DisplaySprite
0000A494 6000 0000                  		bra.w	Obj17_ChkDel
0000A498                            
0000A498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A498                            
0000A498                            
0000A498                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000A498 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000A49C 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000A4A2 D028 003E                  		add.b	$3E(a0),d0
0000A4A6 0200 0007                  		andi.b	#7,d0
0000A4AA 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000A4AE 6600                       		bne.s	locret_7DA6
0000A4B0 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000A4B6                            
0000A4B6                            locret_7DA6:
0000A4B6 4E75                       		rts	
0000A4B8                            ; End of function Obj17_RotateSpikes
0000A4B8                            
0000A4B8                            ; ===========================================================================
0000A4B8                            
0000A4B8                            Obj17_ChkDel:				; XREF: Obj17_Action
0000A4B8 3028 0008                  		move.w	8(a0),d0
0000A4BC 0240 FF80                  		andi.w	#$FF80,d0
0000A4C0 3238 F700                  		move.w	($FFFFF700).w,d1
0000A4C4 0441 0080                  		subi.w	#$80,d1
0000A4C8 0241 FF80                  		andi.w	#$FF80,d1
0000A4CC 9041                       		sub.w	d1,d0
0000A4CE 0C40 0280                  		cmpi.w	#$280,d0
0000A4D2 6200 0000                  		bhi.w	Obj17_DelAll
0000A4D6 4E75                       		rts	
0000A4D8                            ; ===========================================================================
0000A4D8                            
0000A4D8                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000A4D8 7400                       		moveq	#0,d2
0000A4DA 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000A4DE 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000A4E0 5502                       		subq.b	#2,d2
0000A4E2 6500                       		bcs.s	Obj17_Delete
0000A4E4                            
0000A4E4                            Obj17_DelLoop:
0000A4E4 7000                       		moveq	#0,d0
0000A4E6 101A                       		move.b	(a2)+,d0
0000A4E8 ED48                       		lsl.w	#6,d0
0000A4EA 0680 00FF D000             		addi.l	#$FFD000,d0
0000A4F0 2240                       		movea.l	d0,a1
0000A4F2 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000A4F6 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000A4FA                            
0000A4FA                            Obj17_Delete:				; XREF: Obj17_Index
0000A4FA 6100 0000                  		bsr.w	DeleteObject
0000A4FE 4E75                       		rts	
0000A500                            ; ===========================================================================
0000A500                            
0000A500                            Obj17_Display:				; XREF: Obj17_Index
0000A500 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000A504 6000 0000                  		bra.w	DisplaySprite
0000A508                            ; ===========================================================================
0000A508                            ; ---------------------------------------------------------------------------
0000A508                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000A508                            ; ---------------------------------------------------------------------------
0000A508                            Map_obj17:
0000A508                            	include "_maps\obj17.asm"
0000A508                            ; ---------------------------------------------------------------------------
0000A508                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000A508                            ; ---------------------------------------------------------------------------
0000A508 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000A50C 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000A510 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000A514 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000A518 01                         byte_7E08:	dc.b 1
0000A519 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000A51E 01                         byte_7E0E:	dc.b 1
0000A51F F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000A524 01                         byte_7E14:	dc.b 1
0000A525 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000A52A 01                         byte_7E1A:	dc.b 1
0000A52B FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000A530 01                         byte_7E20:	dc.b 1
0000A531 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000A536 01                         byte_7E26:	dc.b 1
0000A537 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000A53C 01                         byte_7E2C:	dc.b 1
0000A53D F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000A542                            		even
0000A542                            		even
0000A542                            
0000A542                            ; ===========================================================================
0000A542                            ; ---------------------------------------------------------------------------
0000A542                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000A542                            ; ---------------------------------------------------------------------------
0000A542                            
0000A542                            Obj18:					; XREF: Obj_Index
0000A542 0C38 0001 FF9C             		cmpi.b	#1,($FFFFFF9C).w	; Are we using Windy?
0000A548 6700                       		beq.s	Obj18_Okay		; If yes, branch
0000A54A 0C38 0001 FF9B             		cmpi.b	#1,($FFFFFF9B).w	; Is sonic allowed to see a platform?
0000A550 6700                       		beq.s	Obj18_Okay		; If yes, branch
0000A552 4E75                       		rts
0000A554                            
0000A554                            Obj18_Okay:
0000A554 7000                       		moveq	#0,d0
0000A556 1028 0024                  		move.b	$24(a0),d0
0000A55A 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000A55E 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000A562                            ; ===========================================================================
0000A562 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000A564 0000                       		dc.w Obj18_Solid-Obj18_Index
0000A566 0000                       		dc.w Obj18_Action2-Obj18_Index
0000A568 0000                       		dc.w Obj18_Delete-Obj18_Index
0000A56A 0000                       		dc.w Obj18_Action-Obj18_Index
0000A56C                            ; ===========================================================================
0000A56C                            
0000A56C                            Obj18_Main:				; XREF: Obj18_Index
0000A56C 5428 0024                  		addq.b	#2,$24(a0)
0000A570 317C 4000 0002             		move.w	#$4000,2(a0)
0000A576 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000A57E 117C 0020 0019             		move.b	#$20,$19(a0)
0000A584 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000A58A 6600                       		bne.s	Obj18_NotSYZ
0000A58C 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000A594 117C 0020 0019             		move.b	#$20,$19(a0)
0000A59A                            
0000A59A                            Obj18_NotSYZ:
0000A59A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000A5A0 6600                       		bne.s	Obj18_NotSLZ
0000A5A2 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000A5AA 117C 0020 0019             		move.b	#$20,$19(a0)
0000A5B0 317C 4000 0002             		move.w	#$4000,2(a0)
0000A5B6 117C 0003 0028             		move.b	#3,$28(a0)
0000A5BC                            
0000A5BC                            Obj18_NotSLZ:
0000A5BC 117C 0004 0001             		move.b	#4,1(a0)
0000A5C2 117C 0004 0018             		move.b	#4,$18(a0)
0000A5C8 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000A5CE 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000A5D4 3168 0008 0032             		move.w	8(a0),$32(a0)
0000A5DA 317C 0080 0026             		move.w	#$80,$26(a0)
0000A5E0 7200                       		moveq	#0,d1
0000A5E2 1028 0028                  		move.b	$28(a0),d0
0000A5E6 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000A5EA 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000A5EC 5201                       		addq.b	#1,d1		; use frame #1
0000A5EE 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000A5F4                            
0000A5F4                            Obj18_SetFrame:
0000A5F4 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000A5F8                            
0000A5F8                            Obj18_Solid:				; XREF: Obj18_Index
0000A5F8 4A28 0038                  		tst.b	$38(a0)
0000A5FC 6700                       		beq.s	loc_7EE0
0000A5FE 5928 0038                  		subq.b	#4,$38(a0)
0000A602                            
0000A602                            loc_7EE0:
0000A602 7200                       		moveq	#0,d1
0000A604 1228 0019                  		move.b	$19(a0),d1
0000A608 6100 F55A                  		bsr.w	PlatformObject
0000A60C                            
0000A60C                            Obj18_Action:				; XREF: Obj18_Index
0000A60C 6100 0000                  		bsr.w	Obj18_Move
0000A610 6100 0000                  		bsr.w	Obj18_Nudge
0000A614 6100 0000                  		bsr.w	DisplaySprite
0000A618 6000 0000                  		bra.w	Obj18_ChkDel
0000A61C                            ; ===========================================================================
0000A61C                            
0000A61C                            Obj18_Action2:				; XREF: Obj18_Index
0000A61C 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000A622 6700                       		beq.s	loc_7F06
0000A624 5828 0038                  		addq.b	#4,$38(a0)
0000A628                            
0000A628                            loc_7F06:
0000A628 7200                       		moveq	#0,d1
0000A62A 1228 0019                  		move.b	$19(a0),d1
0000A62E 6100 F6A8                  		bsr.w	ExitPlatform
0000A632 3F28 0008                  		move.w	8(a0),-(sp)
0000A636 6100 0000                  		bsr.w	Obj18_Move
0000A63A 6100 0000                  		bsr.w	Obj18_Nudge
0000A63E 341F                       		move.w	(sp)+,d2
0000A640 6100 FC00                  		bsr.w	MvSonicOnPtfm2
0000A644 6100 0000                  		bsr.w	DisplaySprite
0000A648 6000 0000                  		bra.w	Obj18_ChkDel
0000A64C                            
0000A64C 4E75                       		rts
0000A64E                            
0000A64E                            ; ---------------------------------------------------------------------------
0000A64E                            ; Subroutine to	move platform slightly when you	stand on it
0000A64E                            ; ---------------------------------------------------------------------------
0000A64E                            
0000A64E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A64E                            
0000A64E                            
0000A64E                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000A64E 1028 0038                  		move.b	$38(a0),d0
0000A652 4EB8 3798                  		jsr	CalcSine
0000A656 323C 0400                  		move.w	#$400,d1
0000A65A C1C1                       		muls.w	d1,d0
0000A65C 4840                       		swap	d0
0000A65E D068 002C                  		add.w	$2C(a0),d0
0000A662 3140 000C                  		move.w	d0,$C(a0)
0000A666 4E75                       		rts	
0000A668                            ; End of function Obj18_Nudge
0000A668                            
0000A668                            ; ---------------------------------------------------------------------------
0000A668                            ; Subroutine to	move platforms
0000A668                            ; ---------------------------------------------------------------------------
0000A668                            
0000A668                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A668                            
0000A668                            
0000A668                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000A668 7000                       		moveq	#0,d0
0000A66A 1028 0028                  		move.b	$28(a0),d0
0000A66E 0240 000F                  		andi.w	#$F,d0
0000A672 D040                       		add.w	d0,d0
0000A674 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000A678 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000A67C                            ; End of function Obj18_Move
0000A67C                            
0000A67C                            ; ===========================================================================
0000A67C 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000A680 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000A684 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000A688 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000A68C 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000A690 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000A694 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000A696                            ; ===========================================================================
0000A696                            
0000A696                            Obj18_Type00:
0000A696 4E75                       		rts			; platform 00 doesn't move
0000A698                            ; ===========================================================================
0000A698                            
0000A698                            Obj18_Type05:
0000A698 3028 0032                  		move.w	$32(a0),d0
0000A69C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000A6A0 4401                       		neg.b	d1		; reverse platform-motion
0000A6A2 0601 0040                  		addi.b	#$40,d1
0000A6A6 6000                       		bra.s	Obj18_01_Move
0000A6A8                            ; ===========================================================================
0000A6A8                            
0000A6A8                            Obj18_Type01:
0000A6A8 3028 0032                  		move.w	$32(a0),d0
0000A6AC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000A6B0 0401 0040                  		subi.b	#$40,d1
0000A6B4                            
0000A6B4                            Obj18_01_Move:
0000A6B4 4881                       		ext.w	d1
0000A6B6 D041                       		add.w	d1,d0
0000A6B8 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000A6BC 6000 0000                  		bra.w	Obj18_ChgMotion
0000A6C0                            ; ===========================================================================
0000A6C0                            
0000A6C0                            Obj18_Type0C:
0000A6C0 3028 0034                  		move.w	$34(a0),d0
0000A6C4 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000A6C8 4401                       		neg.b	d1		; reverse platform-motion
0000A6CA 0601 0030                  		addi.b	#$30,d1
0000A6CE 6000                       		bra.s	Obj18_02_Move
0000A6D0                            ; ===========================================================================
0000A6D0                            
0000A6D0                            Obj18_Type0B:
0000A6D0 3028 0034                  		move.w	$34(a0),d0
0000A6D4 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000A6D8 0401 0030                  		subi.b	#$30,d1
0000A6DC 6000                       		bra.s	Obj18_02_Move
0000A6DE                            ; ===========================================================================
0000A6DE                            
0000A6DE                            Obj18_Type06:
0000A6DE 3028 0034                  		move.w	$34(a0),d0
0000A6E2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000A6E6 4401                       		neg.b	d1		; reverse platform-motion
0000A6E8 0601 0040                  		addi.b	#$40,d1
0000A6EC 6000                       		bra.s	Obj18_02_Move
0000A6EE                            ; ===========================================================================
0000A6EE                            
0000A6EE                            Obj18_Type02:
0000A6EE 3028 0034                  		move.w	$34(a0),d0
0000A6F2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000A6F6 0401 0040                  		subi.b	#$40,d1
0000A6FA                            
0000A6FA                            Obj18_02_Move:
0000A6FA 4881                       		ext.w	d1
0000A6FC D041                       		add.w	d1,d0
0000A6FE 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000A702 6000 0000                  		bra.w	Obj18_ChgMotion
0000A706                            ; ===========================================================================
0000A706                            
0000A706                            Obj18_Type03:
0000A706 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000A70A 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000A70C 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000A712 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000A714 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000A71A                            
0000A71A                            Obj18_03_NoMove:
0000A71A 4E75                       		rts	
0000A71C                            ; ===========================================================================
0000A71C                            
0000A71C                            Obj18_03_Wait:
0000A71C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000A720 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000A722 317C 0020 003A             		move.w	#32,$3A(a0)
0000A728 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000A72C 4E75                       		rts	
0000A72E                            ; ===========================================================================
0000A72E                            
0000A72E                            Obj18_Type04:
0000A72E 4A68 003A                  		tst.w	$3A(a0)
0000A732 6700                       		beq.s	loc_8048
0000A734 5368 003A                  		subq.w	#1,$3A(a0)
0000A738 6600                       		bne.s	loc_8048
0000A73A 0828 0003 0022             		btst	#3,$22(a0)
0000A740 6700                       		beq.s	loc_8042
0000A742 08E9 0001 0022             		bset	#1,$22(a1)
0000A748 08A9 0003 0022             		bclr	#3,$22(a1)
0000A74E 137C 0002 0024             		move.b	#2,$24(a1)
0000A754 08A8 0003 0022             		bclr	#3,$22(a0)
0000A75A 4228 0025                  		clr.b	$25(a0)
0000A75E 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000A764                            
0000A764                            loc_8042:
0000A764 117C 0008 0024             		move.b	#8,$24(a0)
0000A76A                            
0000A76A                            loc_8048:
0000A76A 2628 002C                  		move.l	$2C(a0),d3
0000A76E 3028 0012                  		move.w	$12(a0),d0
0000A772 48C0                       		ext.l	d0
0000A774 E180                       		asl.l	#8,d0
0000A776 D680                       		add.l	d0,d3
0000A778 2143 002C                  		move.l	d3,$2C(a0)
0000A77C 0668 0038 0012             		addi.w	#$38,$12(a0)
0000A782 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A786 0640 00E0                  		addi.w	#$E0,d0
0000A78A B068 002C                  		cmp.w	$2C(a0),d0
0000A78E 6400                       		bcc.s	locret_8074
0000A790 117C 0006 0024             		move.b	#6,$24(a0)
0000A796                            
0000A796                            locret_8074:
0000A796 4E75                       		rts	
0000A798                            ; ===========================================================================
0000A798                            
0000A798                            Obj18_Type07:
0000A798 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000A79C 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000A79E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000A7A2 7000                       		moveq	#0,d0
0000A7A4 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000A7A8 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000A7AA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000A7AE 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000A7B0 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000A7B6                            
0000A7B6                            Obj18_07_NoMove:
0000A7B6 4E75                       		rts	
0000A7B8                            ; ===========================================================================
0000A7B8                            
0000A7B8                            Obj18_07_Wait:
0000A7B8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000A7BC 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000A7BE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000A7C2 4E75                       		rts	
0000A7C4                            ; ===========================================================================
0000A7C4                            
0000A7C4                            Obj18_Type08:
0000A7C4 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000A7C8 3028 0034                  		move.w	$34(a0),d0
0000A7CC 0440 0200                  		subi.w	#$200,d0
0000A7D0 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000A7D4 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000A7D6 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000A7DA                            
0000A7DA                            Obj18_08_NoStop:
0000A7DA 4E75                       		rts	
0000A7DC                            ; ===========================================================================
0000A7DC                            
0000A7DC                            Obj18_Type0A:
0000A7DC 3028 0034                  		move.w	$34(a0),d0
0000A7E0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000A7E4 0401 0040                  		subi.b	#$40,d1
0000A7E8 4881                       		ext.w	d1
0000A7EA E241                       		asr.w	#1,d1
0000A7EC D041                       		add.w	d1,d0
0000A7EE 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000A7F2                            
0000A7F2                            Obj18_ChgMotion:
0000A7F2 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000A7F8 4E75                       		rts	
0000A7FA                            ; ===========================================================================
0000A7FA                            
0000A7FA                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000A7FA 3028 0032                  		move.w	$32(a0),d0
0000A7FE 0240 FF80                  		andi.w	#$FF80,d0
0000A802 3238 F700                  		move.w	($FFFFF700).w,d1
0000A806 0441 0080                  		subi.w	#$80,d1
0000A80A 0241 FF80                  		andi.w	#$FF80,d1
0000A80E 9041                       		sub.w	d1,d0
0000A810 0C40 0280                  		cmpi.w	#$280,d0
0000A814 6200                       		bhi.s	Obj18_Delete
0000A816 4E75                       		rts	
0000A818                            ; ===========================================================================
0000A818                            
0000A818                            Obj18_Delete:				; XREF: Obj18_Index
0000A818 6000 0000                  		bra.w	DeleteObject
0000A81C                            ; ===========================================================================
0000A81C                            ; ---------------------------------------------------------------------------
0000A81C                            ; Sprite mappings - unused
0000A81C                            ; ---------------------------------------------------------------------------
0000A81C                            Map_obj18x:
0000A81C                            	include "_maps\obj18x.asm"
0000A81C                            ; ---------------------------------------------------------------------------
0000A81C                            ; Sprite mappings - unused
0000A81C                            ; ---------------------------------------------------------------------------
0000A81C 0000                       		dc.w byte_80FE-Map_obj18x
0000A81E 0000                       		dc.w byte_8109-Map_obj18x
0000A820 02                         byte_80FE:	dc.b 2
0000A821 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000A826 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000A82B 0A                         byte_8109:	dc.b $A
0000A82C F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000A831 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000A836 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000A83B 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000A840 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000A845 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000A84A 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000A84F 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000A854 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000A859 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000A85E                            		even
0000A85E                            		even
0000A85E                            
0000A85E                            ; ---------------------------------------------------------------------------
0000A85E                            ; Sprite mappings - GHZ	platforms
0000A85E                            ; ---------------------------------------------------------------------------
0000A85E                            Map_obj18:
0000A85E                            	include "_maps\obj18ghz.asm"
0000A85E                            ; --------------------------------------------------------------------------------
0000A85E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A85E                            ; --------------------------------------------------------------------------------
0000A85E                            
0000A85E                            SME_qQpgI:	
0000A85E 0000 0000                  		dc.w SME_qQpgI_4-SME_qQpgI, SME_qQpgI_32-SME_qQpgI	
0000A862 09                         SME_qQpgI_4:	dc.b 9	
0000A863 F404 002B E0               		dc.b $F4, 4, 0, $2B, $E0	
0000A868 FC04 102B E0               		dc.b $FC, 4, $10, $2B, $E0	
0000A86D F400 002C F8               		dc.b $F4, 0, 0, $2C, $F8	
0000A872 F400 082C F0               		dc.b $F4, 0, 8, $2C, $F0	
0000A877 FC00 102C F8               		dc.b $FC, 0, $10, $2C, $F8	
0000A87C FC00 182C F0               		dc.b $FC, 0, $18, $2C, $F0	
0000A881 F404 082B 00               		dc.b $F4, 4, 8, $2B, 0	
0000A886 FC00 182C 00               		dc.b $FC, 0, $18, $2C, 0	
0000A88B FC00 182B 08               		dc.b $FC, 0, $18, $2B, 8	
0000A890 0A                         SME_qQpgI_32:	dc.b $A	
0000A891 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0	
0000A896 040F 00D5 E0               		dc.b 4, $F, 0, $D5, $E0	
0000A89B 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0	
0000A8A0 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0	
0000A8A5 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0	
0000A8AA F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0	
0000A8AF 040F 08D5 00               		dc.b 4, $F, 8, $D5, 0	
0000A8B4 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0	
0000A8B9 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0	
0000A8BE 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0	
0000A8C4 00                         		even
0000A8C4 00                         		even
0000A8C4                            
0000A8C4                            ; ---------------------------------------------------------------------------
0000A8C4                            ; Sprite mappings - SYZ	platforms
0000A8C4                            ; ---------------------------------------------------------------------------
0000A8C4                            Map_obj18a:
0000A8C4                            	include "_maps\obj18syz.asm"
0000A8C4                            ; ---------------------------------------------------------------------------
0000A8C4                            ; Sprite mappings - SYZ	platforms
0000A8C4                            ; ---------------------------------------------------------------------------
0000A8C4 0000                       		dc.w byte_818A-Map_obj18a
0000A8C6 03                         byte_818A:	dc.b 3
0000A8C7 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000A8CC F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000A8D1 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000A8D6                            		even
0000A8D6                            		even
0000A8D6                            
0000A8D6                            ; ---------------------------------------------------------------------------
0000A8D6                            ; Sprite mappings - SLZ	platforms
0000A8D6                            ; ---------------------------------------------------------------------------
0000A8D6                            Map_obj18b:
0000A8D6                            	include "_maps\obj18slz.asm"
0000A8D6                            ; ---------------------------------------------------------------------------
0000A8D6                            ; Sprite mappings - SLZ	platforms
0000A8D6                            ; ---------------------------------------------------------------------------
0000A8D6 0000                       		dc.w byte_819C-Map_obj18b
0000A8D8 02                         byte_819C:	dc.b 2
0000A8D9 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000A8DE F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000A8E4 00                         		even
0000A8E4 00                         		even
0000A8E4                            
0000A8E4                            ; ===========================================================================
0000A8E4                            ; ---------------------------------------------------------------------------
0000A8E4                            ; Object 19 - <FAN CHARACTER> (In cutscenes)
0000A8E4                            ; ---------------------------------------------------------------------------
0000A8E4                            
0000A8E4                            Obj19:					; XREF: Obj_Index
0000A8E4 7000                       		moveq	#0,d0
0000A8E6 1028 0024                  		move.b	$24(a0),d0
0000A8EA 323B 0000                  		move.w	Obj19_Index(pc,d0.w),d1
0000A8EE 4EFB 1000                  		jmp	Obj19_Index(pc,d1.w)
0000A8F2                            ; ===========================================================================
0000A8F2                            Obj19_Index:
0000A8F2 0000                                       dc.w    Obj19_Main-Obj19_Index       ; $00
0000A8F4 0000                                       dc.w    Obj19_Action-Obj19_Index     ; $02
0000A8F6                            
0000A8F6                            ;============================================================================
0000A8F6                            Obj19_Main:
0000A8F6 5428 0024                                  addq.b	#2,$24(a0)                   ; add $02 to routine
0000A8FA 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)             ; load mappings
0000A902 317C 63D0 0002             		move.w	#$63D0,2(a0)                 ; load tiles
0000A908 117C 0004 0001             		move.b	#4,1(a0)                     ; load render flags
0000A90E 117C 0013 0019             		move.b	#$13,$19(a0)                 ; load Y-radius
0000A914 117C 0004 0018             		move.b	#4,$18(a0)                   ; load X-radius
0000A91A                            ;============================================================================
0000A91A                            Obj19_Action:
0000A91A 43F9 0000 0000                             lea	(Ani_obj19).l,a1             ; load animation index
0000A920 4EB9 0000 0000             		jsr	AnimateSprite                ; call animate routine
0000A926                            ;		moveq	#0,d0
0000A926                            ;		move.b	($FFFFFE10).w,d0
0000A926                            ;		add.w	d0,d0
0000A926                            ;		move.w	Obj19_Cutscenes(pc,d0.w),d0
0000A926                            ;		jmp	Obj19_Cutscenes(pc,d0.w)
0000A926 7000                                       moveq	#0,d0                        ; move 0 to d0
0000A928 1038 FE10                  		move.b	($FFFFFE10).w,d0             ; move Zone RAM to d0
0000A92C 323B 0000                  		move.w	Obj19_Cutscenes(pc,d0.w),d1  ; move routine Obj19_Cutscenes to d1
0000A930 4EFB 1000                  		jmp	Obj19_Cutscenes(pc,d1.w)     ; jump to Obj19_Cutscenes
0000A934                            ;============================================================================
0000A934                            Obj19_Cutscenes:
0000A934 0000 0000                                  dc.w    Obj19_GHZ-Obj19_Cutscenes,Obj19_LZ-Obj19_Cutscenes
0000A938 0000 0000                                  dc.w    Obj19_MZ-Obj19_Cutscenes,Obj19_SLZ-Obj19_Cutscenes 
0000A93C 0000 0000                                  dc.w    Obj19_SYZ-Obj19_Cutscenes,Obj19_SBZ-Obj19_Cutscenes
0000A940                            ;============================================================================
0000A940                            Obj19_GHZ:
0000A940 4EB9 0000 0000                             jsr     SpeedToPos
0000A946 6000 0000                                  bra.w   Obj19_Display
0000A94A                            ;============================================================================
0000A94A                            Obj19_LZ:
0000A94A 4EB9 0000 0000                             jsr     SpeedToPos
0000A950 6000 0000                                  bra.w   Obj19_Display
0000A954                            ;============================================================================
0000A954                            Obj19_MZ:
0000A954 4EB9 0000 0000                             jsr     SpeedToPos
0000A95A 6000 0000                                  bra.w   Obj19_Display
0000A95E                            ;============================================================================
0000A95E                            Obj19_SLZ:
0000A95E 4EB9 0000 0000                             jsr     SpeedToPos
0000A964 6000 0000                                  bra.w   Obj19_Display
0000A968                            ;============================================================================
0000A968                            Obj19_SYZ:
0000A968 4EB9 0000 0000                             jsr     SpeedToPos
0000A96E 6000 0000                                  bra.w   Obj19_Display
0000A972                            ;============================================================================
0000A972                            Obj19_SBZ:
0000A972 4EB9 0000 0000                             jsr     SpeedToPos
0000A978 6000 0000                                  bra     Obj19_Display
0000A97C                            ;============================================================================
0000A97C                            Obj19_Display:
0000A97C 4EF9 0000 0000                             jmp     DisplaySprite                ; Display the sprite
0000A982                                            
0000A982                            ;============================================================================
0000A982                            Ani_Obj19:
0000A982 0000                                       dc.w    Ani_1-Ani_Obj19
0000A984 0000                                       dc.w    Ani_2-Ani_Obj19
0000A986 0000 01FF                  Ani_1:          dc.b    0, 0, 1, $FF
0000A98A 0000 01FF                  Ani_2:          dc.b    0, 0, 1, $FF
0000A98E                            ;============================================================================
0000A98E                            Map_Obj19:
0000A98E                            ;                include "_maps\obj19.asm"
0000A98E                            
0000A98E                            ; ===========================================================================
0000A98E                            ; ---------------------------------------------------------------------------
0000A98E                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000A98E                            ; ---------------------------------------------------------------------------
0000A98E                            Map_obj48:
0000A98E                            	include "_maps\obj48.asm"
0000A98E                            ; ---------------------------------------------------------------------------
0000A98E                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000A98E                            ; ---------------------------------------------------------------------------
0000A98E 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000A992 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000A996 06                         byte_81B2:	dc.b 6
0000A997 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000A99C F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000A9A1 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000A9A6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000A9AB 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000A9B0 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000A9B5 04                         byte_81D1:	dc.b 4
0000A9B6 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000A9BB E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000A9C0 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000A9C5 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000A9CA 04                         byte_81E6:	dc.b 4
0000A9CB E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000A9D0 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000A9D5 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000A9DA 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000A9DF 04                         byte_81FB:	dc.b 4
0000A9E0 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000A9E5 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000A9EA 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000A9EF 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000A9F4                            		even
0000A9F4                            		even
0000A9F4                            
0000A9F4                            ; ===========================================================================
0000A9F4                            ; ---------------------------------------------------------------------------
0000A9F4                            ; Object 1A - GHZ collapsing ledge
0000A9F4                            ; ---------------------------------------------------------------------------
0000A9F4                            
0000A9F4                            Obj1A:					; XREF: Obj_Index
0000A9F4 7000                       		moveq	#0,d0
0000A9F6 1028 0024                  		move.b	$24(a0),d0
0000A9FA 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000A9FE 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000AA02                            ; ===========================================================================
0000AA02 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000AA06 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000AA0A 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000AA0E                            ; ===========================================================================
0000AA0E                            
0000AA0E                            Obj1A_Main:				; XREF: Obj1A_Index
0000AA0E 5428 0024                  		addq.b	#2,$24(a0)
0000AA12 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000AA1A 317C 4000 0002             		move.w	#$4000,2(a0)
0000AA20 0028 0004 0001             		ori.b	#4,1(a0)
0000AA26 117C 0004 0018             		move.b	#4,$18(a0)
0000AA2C 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000AA32 117C 0064 0019             		move.b	#$64,$19(a0)
0000AA38 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000AA3E 117C 0038 0016             		move.b	#$38,$16(a0)
0000AA44 08E8 0004 0001             		bset	#4,1(a0)
0000AA4A                            
0000AA4A                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000AA4A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000AA4E 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000AA50 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000AA54 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000AA58 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000AA5C                            
0000AA5C                            Obj1A_Slope:
0000AA5C 323C 0030                  		move.w	#$30,d1
0000AA60 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000AA66 6100 F1D0                  		bsr.w	SlopeObject
0000AA6A 6000 0000                  		bra.w	MarkObjGone
0000AA6E                            ; ===========================================================================
0000AA6E                            
0000AA6E                            Obj1A_Touch:				; XREF: Obj1A_Index
0000AA6E 4A28 0038                  		tst.b	$38(a0)
0000AA72 6700 0000                  		beq.w	loc_847A
0000AA76 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000AA7C 5328 0038                  		subq.b	#1,$38(a0)
0000AA80                            
0000AA80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AA80                            
0000AA80                            
0000AA80                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000AA80 323C 0030                  		move.w	#$30,d1
0000AA84 6100 F252                  		bsr.w	ExitPlatform
0000AA88 323C 0030                  		move.w	#$30,d1
0000AA8C 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000AA92 3428 0008                  		move.w	8(a0),d2
0000AA96 6100 0000                  		bsr.w	SlopeObject2
0000AA9A 6000 0000                  		bra.w	MarkObjGone
0000AA9E                            ; End of function Obj1A_WalkOff
0000AA9E                            
0000AA9E                            ; ===========================================================================
0000AA9E                            
0000AA9E                            Obj1A_Display:				; XREF: Obj1A_Index
0000AA9E 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000AAA2 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000AAA4 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000AAA8 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000AAAC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000AAB0 6000 0000                  		bra.w	DisplaySprite
0000AAB4                            ; ===========================================================================
0000AAB4                            
0000AAB4                            loc_82D0:				; XREF: Obj1A_Display
0000AAB4 5328 0038                  		subq.b	#1,$38(a0)
0000AAB8 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000AABC 43F8 D000                  		lea	($FFFFD000).w,a1
0000AAC0 0829 0003 0022             		btst	#3,$22(a1)
0000AAC6 6700                       		beq.s	loc_82FC
0000AAC8 4A28 0038                  		tst.b	$38(a0)
0000AACC 6600                       		bne.s	locret_8308
0000AACE 08A9 0003 0022             		bclr	#3,$22(a1)
0000AAD4 08A9 0005 0022             		bclr	#5,$22(a1)
0000AADA 137C 0001 001D             		move.b	#1,$1D(a1)
0000AAE0                            
0000AAE0                            loc_82FC:
0000AAE0 117C 0000 003A             		move.b	#0,$3A(a0)
0000AAE6 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
0000AAEC                            
0000AAEC                            locret_8308:
0000AAEC 4E75                       		rts	
0000AAEE                            ; ===========================================================================
0000AAEE                            
0000AAEE                            Obj1A_TimeZero:				; XREF: Obj1A_Display
0000AAEE 6100 0000                  		bsr.w	ObjectFall
0000AAF2 6100 0000                  		bsr.w	DisplaySprite
0000AAF6 4A28 0001                  		tst.b	1(a0)
0000AAFA 6A00                       		bpl.s	Obj1A_Delete
0000AAFC 4E75                       		rts	
0000AAFE                            ; ===========================================================================
0000AAFE                            
0000AAFE                            Obj1A_Delete:				; XREF: Obj1A_Index
0000AAFE 6100 0000                  		bsr.w	DeleteObject
0000AB02 4E75                       		rts	
0000AB04                            ; ===========================================================================
0000AB04                            ; ---------------------------------------------------------------------------
0000AB04                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000AB04                            ; ---------------------------------------------------------------------------
0000AB04                            
0000AB04                            Obj53:					; XREF: Obj_Index
0000AB04 7000                       		moveq	#0,d0
0000AB06 1028 0024                  		move.b	$24(a0),d0
0000AB0A 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
0000AB0E 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000AB12                            ; ===========================================================================
0000AB12 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000AB16 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
0000AB1A 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
0000AB1E                            ; ===========================================================================
0000AB1E                            
0000AB1E                            Obj53_Main:				; XREF: Obj53_Index
0000AB1E 5428 0024                  		addq.b	#2,$24(a0)
0000AB22 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
0000AB2A 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000AB30 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000AB36 6600                       		bne.s	Obj53_NotSLZ
0000AB38 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
0000AB3E 5428 001A                  		addq.b	#2,$1A(a0)
0000AB42                            
0000AB42                            Obj53_NotSLZ:
0000AB42 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000AB48 6600                       		bne.s	Obj53_NotSBZ
0000AB4A 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
0000AB50                            
0000AB50                            Obj53_NotSBZ:
0000AB50 0028 0004 0001             		ori.b	#4,1(a0)
0000AB56 117C 0004 0018             		move.b	#4,$18(a0)
0000AB5C 117C 0007 0038             		move.b	#7,$38(a0)
0000AB62 117C 0044 0019             		move.b	#$44,$19(a0)
0000AB68                            
0000AB68                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000AB68 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000AB6C 6700                       		beq.s	Obj53_Solid	; if not, branch
0000AB6E 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000AB72 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000AB76 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000AB7A                            
0000AB7A                            Obj53_Solid:
0000AB7A 323C 0020                  		move.w	#$20,d1
0000AB7E 6100 EFE4                  		bsr.w	PlatformObject
0000AB82 4A28 0028                  		tst.b	$28(a0)
0000AB86 6A00                       		bpl.s	Obj53_MarkAsGone
0000AB88 0829 0003 0022             		btst	#3,$22(a1)
0000AB8E 6700                       		beq.s	Obj53_MarkAsGone
0000AB90 08A8 0000 0001             		bclr	#0,1(a0)
0000AB96 3029 0008                  		move.w	8(a1),d0
0000AB9A 9068 0008                  		sub.w	8(a0),d0
0000AB9E 6400                       		bcc.s	Obj53_MarkAsGone
0000ABA0 08E8 0000 0001             		bset	#0,1(a0)
0000ABA6                            
0000ABA6                            Obj53_MarkAsGone:
0000ABA6 6000 0000                  		bra.w	MarkObjGone
0000ABAA                            ; ===========================================================================
0000ABAA                            
0000ABAA                            Obj53_Touch:				; XREF: Obj53_Index
0000ABAA 4A28 0038                  		tst.b	$38(a0)
0000ABAE 6700 0000                  		beq.w	loc_8458
0000ABB2 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000ABB8 5328 0038                  		subq.b	#1,$38(a0)
0000ABBC                            
0000ABBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ABBC                            
0000ABBC                            
0000ABBC                            Obj53_WalkOff:				; XREF: Obj53_Index
0000ABBC 323C 0020                  		move.w	#$20,d1
0000ABC0 6100 F116                  		bsr.w	ExitPlatform
0000ABC4 3428 0008                  		move.w	8(a0),d2
0000ABC8 6100 F678                  		bsr.w	MvSonicOnPtfm2
0000ABCC 6000 0000                  		bra.w	MarkObjGone
0000ABD0                            ; End of function Obj53_WalkOff
0000ABD0                            
0000ABD0                            ; ===========================================================================
0000ABD0                            
0000ABD0                            Obj53_Display:				; XREF: Obj53_Index
0000ABD0 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000ABD4 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000ABD6 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000ABDA 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000ABDE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000ABE2 6000 0000                  		bra.w	DisplaySprite
0000ABE6                            ; ===========================================================================
0000ABE6                            
0000ABE6                            loc_8402:
0000ABE6 5328 0038                  		subq.b	#1,$38(a0)
0000ABEA 6100 FFD0                  		bsr.w	Obj53_WalkOff
0000ABEE 43F8 D000                  		lea	($FFFFD000).w,a1
0000ABF2 0829 0003 0022             		btst	#3,$22(a1)
0000ABF8 6700                       		beq.s	loc_842E
0000ABFA 4A28 0038                  		tst.b	$38(a0)
0000ABFE 6600                       		bne.s	locret_843A
0000AC00 08A9 0003 0022             		bclr	#3,$22(a1)
0000AC06 08A9 0005 0022             		bclr	#5,$22(a1)
0000AC0C 137C 0001 001D             		move.b	#1,$1D(a1)
0000AC12                            
0000AC12                            loc_842E:
0000AC12 117C 0000 003A             		move.b	#0,$3A(a0)
0000AC18 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
0000AC1E                            
0000AC1E                            locret_843A:
0000AC1E 4E75                       		rts	
0000AC20                            ; ===========================================================================
0000AC20                            
0000AC20                            Obj53_TimeZero:				; XREF: Obj53_Display
0000AC20 6100 0000                  		bsr.w	ObjectFall
0000AC24 6100 0000                  		bsr.w	DisplaySprite
0000AC28 4A28 0001                  		tst.b	1(a0)
0000AC2C 6A00                       		bpl.s	Obj53_Delete
0000AC2E 4E75                       		rts	
0000AC30                            ; ===========================================================================
0000AC30                            
0000AC30                            Obj53_Delete:				; XREF: Obj53_Index
0000AC30 6100 0000                  		bsr.w	DeleteObject
0000AC34 4E75                       		rts	
0000AC36                            ; ===========================================================================
0000AC36                            
0000AC36                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000AC36 117C 0000 003A             		move.b	#0,$3A(a0)
0000AC3C                            
0000AC3C                            loc_8458:				; XREF: Obj53_Touch
0000AC3C 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000AC42 0828 0000 0028             		btst	#0,$28(a0)
0000AC48 6700                       		beq.s	loc_846C
0000AC4A 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
0000AC50                            
0000AC50                            loc_846C:
0000AC50 7207                       		moveq	#7,d1
0000AC52 5228 001A                  		addq.b	#1,$1A(a0)
0000AC56 6000                       		bra.s	loc_8486
0000AC58                            ; ===========================================================================
0000AC58                            
0000AC58                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
0000AC58 117C 0000 003A             		move.b	#0,$3A(a0)
0000AC5E                            
0000AC5E                            loc_847A:				; XREF: Obj1A_Touch
0000AC5E 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000AC64 7218                       		moveq	#$18,d1
0000AC66 5428 001A                  		addq.b	#2,$1A(a0)
0000AC6A                            
0000AC6A                            loc_8486:				; XREF: Obj53_Collapse
0000AC6A 7000                       		moveq	#0,d0
0000AC6C 1028 001A                  		move.b	$1A(a0),d0
0000AC70 D040                       		add.w	d0,d0
0000AC72 2668 0004                  		movea.l	4(a0),a3
0000AC76 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000AC7A 524B                       		addq.w	#1,a3
0000AC7C 08E8 0005 0001             		bset	#5,1(a0)
0000AC82 1810                       		move.b	0(a0),d4
0000AC84 1A28 0001                  		move.b	1(a0),d5
0000AC88 2248                       		movea.l	a0,a1
0000AC8A 6000                       		bra.s	loc_84B2
0000AC8C                            ; ===========================================================================
0000AC8C                            
0000AC8C                            loc_84AA:
0000AC8C 6100 0000                  		bsr.w	SingleObjLoad
0000AC90 6600                       		bne.s	loc_84F2
0000AC92 5A4B                       		addq.w	#5,a3
0000AC94                            
0000AC94                            loc_84B2:
0000AC94 137C 0006 0024             		move.b	#6,$24(a1)
0000AC9A 1284                       		move.b	d4,0(a1)
0000AC9C 234B 0004                  		move.l	a3,4(a1)
0000ACA0 1345 0001                  		move.b	d5,1(a1)
0000ACA4 3368 0008 0008             		move.w	8(a0),8(a1)
0000ACAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ACB0 3368 0002 0002             		move.w	2(a0),2(a1)
0000ACB6 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000ACBC 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000ACC2 135C 0038                  		move.b	(a4)+,$38(a1)
0000ACC6 B3C8                       		cmpa.l	a0,a1
0000ACC8 6400                       		bcc.s	loc_84EE
0000ACCA 6100 0000                  		bsr.w	DisplaySprite2
0000ACCE                            
0000ACCE                            loc_84EE:
0000ACCE 51C9 FFBC                  		dbf	d1,loc_84AA
0000ACD2                            
0000ACD2                            loc_84F2:
0000ACD2 6100 0000                  		bsr.w	DisplaySprite
0000ACD6 303C 00B9                  		move.w	#$B9,d0
0000ACDA 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play collapsing	sound
0000ACE0                            ; ===========================================================================
0000ACE0                            ; ---------------------------------------------------------------------------
0000ACE0                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000ACE0                            ; ---------------------------------------------------------------------------
0000ACE0 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000ACF0 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000ACFA 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000AD02 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000AD0A                            
0000AD0A                            ; ---------------------------------------------------------------------------
0000AD0A                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000AD0A                            ; ---------------------------------------------------------------------------
0000AD0A                            
0000AD0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD0A                            
0000AD0A                            
0000AD0A                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
0000AD0A 43F8 D000                  		lea	($FFFFD000).w,a1
0000AD0E 0829 0003 0022             		btst	#3,$22(a1)
0000AD14 6700                       		beq.s	locret_856E
0000AD16 3029 0008                  		move.w	8(a1),d0
0000AD1A 9068 0008                  		sub.w	8(a0),d0
0000AD1E D041                       		add.w	d1,d0
0000AD20 E248                       		lsr.w	#1,d0
0000AD22 0828 0000 0001             		btst	#0,1(a0)
0000AD28 6700                       		beq.s	loc_854E
0000AD2A 4640                       		not.w	d0
0000AD2C D041                       		add.w	d1,d0
0000AD2E                            
0000AD2E                            loc_854E:
0000AD2E 7200                       		moveq	#0,d1
0000AD30 1232 0000                  		move.b	(a2,d0.w),d1
0000AD34 3028 000C                  		move.w	$C(a0),d0
0000AD38 9041                       		sub.w	d1,d0
0000AD3A 7200                       		moveq	#0,d1
0000AD3C 1229 0016                  		move.b	$16(a1),d1
0000AD40 9041                       		sub.w	d1,d0
0000AD42 3340 000C                  		move.w	d0,$C(a1)
0000AD46 9468 0008                  		sub.w	8(a0),d2
0000AD4A 9569 0008                  		sub.w	d2,8(a1)
0000AD4E                            
0000AD4E                            locret_856E:
0000AD4E 4E75                       		rts	
0000AD50                            ; End of function SlopeObject2
0000AD50                            
0000AD50                            ; ===========================================================================
0000AD50                            ; ---------------------------------------------------------------------------
0000AD50                            ; Collision data for GHZ collapsing ledge
0000AD50                            ; ---------------------------------------------------------------------------
0000AD50                            Obj1A_SlopeData:
0000AD50                            		incbin	misc\ghzledge.bin
0000AD80                            		even
0000AD80                            
0000AD80                            ; ---------------------------------------------------------------------------
0000AD80                            ; Sprite mappings - GHZ	collapsing ledge
0000AD80                            ; ---------------------------------------------------------------------------
0000AD80                            Map_obj1A:
0000AD80                            	include "_maps\obj1A.asm"
0000AD80                            ; ---------------------------------------------------------------------------
0000AD80                            ; Sprite mappings - GHZ	collapsing ledge
0000AD80                            ; ---------------------------------------------------------------------------
0000AD80 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000AD84 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
0000AD88 10                         byte_85A8:	dc.b $10
0000AD89 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000AD8E D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000AD93 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000AD98 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000AD9D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000ADA2 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000ADA7 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000ADAC F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000ADB1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000ADB6 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000ADBB 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000ADC0 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000ADC5 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000ADCA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000ADCF 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000ADD4 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000ADD9 10                         byte_85F9:	dc.b $10
0000ADDA C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000ADDF D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000ADE4 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000ADE9 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000ADEE D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000ADF3 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000ADF8 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000ADFD F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000AE02 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000AE07 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000AE0C 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000AE11 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000AE16 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000AE1B 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000AE20 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000AE25 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000AE2A 19                         byte_864A:	dc.b $19
0000AE2B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000AE30 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000AE35 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000AE3A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000AE3F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000AE44 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000AE49 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000AE4E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000AE53 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000AE58 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000AE5D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000AE62 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000AE67 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000AE6C F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000AE71 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000AE76 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000AE7B 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000AE80 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000AE85 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000AE8A 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000AE8F 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000AE94 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000AE99 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000AE9E 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000AEA3 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000AEA8 19                         byte_86C8:	dc.b $19
0000AEA9 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000AEAE C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000AEB3 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000AEB8 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000AEBD E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000AEC2 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000AEC7 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000AECC E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000AED1 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000AED6 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000AEDB F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000AEE0 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000AEE5 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000AEEA F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000AEEF F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000AEF4 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000AEF9 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000AEFE 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000AF03 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000AF08 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000AF0D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000AF12 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000AF17 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000AF1C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000AF21 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000AF26                            		even
0000AF26                            		even
0000AF26                            
0000AF26                            ; ---------------------------------------------------------------------------
0000AF26                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000AF26                            ; ---------------------------------------------------------------------------
0000AF26                            Map_obj53:
0000AF26                            	include "_maps\obj53.asm"
0000AF26                            ; ---------------------------------------------------------------------------
0000AF26                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000AF26                            ; ---------------------------------------------------------------------------
0000AF26 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000AF2A 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000AF2E 04                         byte_874E:	dc.b 4
0000AF2F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000AF34 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000AF39 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000AF3E 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000AF43 08                         byte_8763:	dc.b 8
0000AF44 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000AF49 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000AF4E F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000AF53 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000AF58 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000AF5D 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000AF62 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000AF67 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000AF6C 04                         byte_878C:	dc.b 4
0000AF6D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000AF72 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000AF77 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000AF7C 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000AF81 08                         byte_87A1:	dc.b 8
0000AF82 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000AF87 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000AF8C F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000AF91 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000AF96 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000AF9B 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000AFA0 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000AFA5 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000AFAA                            		even
0000AFAA                            		even
0000AFAA                            
0000AFAA                            ; ===========================================================================
0000AFAA                            ; ---------------------------------------------------------------------------
0000AFAA                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000AFAA                            ; ---------------------------------------------------------------------------
0000AFAA                            
0000AFAA                            Obj1C:					; XREF: Obj_Index
0000AFAA 7000                       		moveq	#0,d0
0000AFAC 1028 0024                  		move.b	$24(a0),d0
0000AFB0 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000AFB4 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000AFB8                            ; ===========================================================================
0000AFB8 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000AFBA 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000AFBC                            ; ===========================================================================
0000AFBC                            
0000AFBC                            Obj1C_Main:				; XREF: Obj1C_Index
0000AFBC 5428 0024                  		addq.b	#2,$24(a0)
0000AFC0 7000                       		moveq	#0,d0
0000AFC2 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000AFC6 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000AFCA 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000AFCE 2159 0004                  		move.l	(a1)+,4(a0)
0000AFD2 3159 0002                  		move.w	(a1)+,2(a0)
0000AFD6 0028 0004 0001             		ori.b	#4,1(a0)
0000AFDC 1159 001A                  		move.b	(a1)+,$1A(a0)
0000AFE0 1159 0019                  		move.b	(a1)+,$19(a0)
0000AFE4 1159 0018                  		move.b	(a1)+,$18(a0)
0000AFE8 1159 0020                  		move.b	(a1)+,$20(a0)
0000AFEC                            
0000AFEC                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000AFEC 3028 0008                  		move.w	8(a0),d0
0000AFF0 0240 FF80                  		andi.w	#$FF80,d0
0000AFF4 3238 F700                  		move.w	($FFFFF700).w,d1
0000AFF8 0441 0080                  		subi.w	#$80,d1
0000AFFC 0241 FF80                  		andi.w	#$FF80,d1
0000B000 9041                       		sub.w	d1,d0
0000B002 0C40 0280                  		cmpi.w	#$280,d0
0000B006 6200 0000                  		bhi.w	DeleteObject
0000B00A 6000 0000                  		bra.w	DisplaySprite
0000B00E                            ; ===========================================================================
0000B00E                            ; ---------------------------------------------------------------------------
0000B00E                            ; Variables for	object $1C are stored in an array
0000B00E                            ; ---------------------------------------------------------------------------
0000B00E 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000B012 44D8                       		dc.w $44D8		; VRAM setting
0000B014 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000B018 0000 0000                  		dc.l Map_obj1C
0000B01C 44D8                       		dc.w $44D8
0000B01E 0008 0200                  		dc.b 0,	8, 2, 0
0000B022 0000 0000                  		dc.l Map_obj1C
0000B026 44D8                       		dc.w $44D8
0000B028 0008 0200                  		dc.b 0,	8, 2, 0
0000B02C 0000 A04C                  		dc.l Map_obj11
0000B030 438E                       		dc.w $438E
0000B032 0110 0100                  		dc.b 1,	$10, 1,	0
0000B036                            ; ---------------------------------------------------------------------------
0000B036                            ; Sprite mappings - SLZ	lava thrower
0000B036                            ; ---------------------------------------------------------------------------
0000B036                            Map_obj1C:
0000B036                            	include "_maps\obj1C.asm"
0000B036                            ; ---------------------------------------------------------------------------
0000B036                            ; Sprite mappings - SLZ	lava thrower
0000B036                            ; ---------------------------------------------------------------------------
0000B036 0000                       		dc.w byte_8858-Map_obj1C
0000B038 01                         byte_8858:	dc.b 1
0000B039 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000B03E                            		even
0000B03E                            		even
0000B03E                            
0000B03E                            ; ===========================================================================
0000B03E                            ; ---------------------------------------------------------------------------
0000B03E                            ; Object 1D - switch that activates when Sonic touches it
0000B03E                            ; (this	is not used anywhere in	the game)
0000B03E                            ; ---------------------------------------------------------------------------
0000B03E                            
0000B03E                            Obj1D:					; XREF: Obj_Index
0000B03E 7000                       		moveq	#0,d0
0000B040 1028 0024                  		move.b	$24(a0),d0
0000B044 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0000B048 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
0000B04C                            ; ===========================================================================
0000B04C 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0000B04E 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000B050 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000B052                            ; ===========================================================================
0000B052                            
0000B052                            Obj1D_Main:				; XREF: Obj1D_Index
0000B052 5428 0024                  		addq.b	#2,$24(a0)
0000B056 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000B05E 317C 4000 0002             		move.w	#$4000,2(a0)
0000B064 117C 0004 0001             		move.b	#4,1(a0)
0000B06A 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000B070 117C 0010 0019             		move.b	#$10,$19(a0)
0000B076 117C 0005 0018             		move.b	#5,$18(a0)
0000B07C                            
0000B07C                            Obj1D_Action:				; XREF: Obj1D_Index
0000B07C 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000B082 323C 0010                  		move.w	#$10,d1
0000B086 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000B08A 6700                       		beq.s	Obj1D_ChkDel
0000B08C 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000B090 7001                       		moveq	#1,d0
0000B092 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000B096                            
0000B096                            Obj1D_ChkDel:
0000B096 6100 0000                  		bsr.w	DisplaySprite
0000B09A 3028 0008                  		move.w	8(a0),d0
0000B09E 0240 FF80                  		andi.w	#$FF80,d0
0000B0A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000B0A6 0441 0080                  		subi.w	#$80,d1
0000B0AA 0241 FF80                  		andi.w	#$FF80,d1
0000B0AE 9041                       		sub.w	d1,d0
0000B0B0 0C40 0280                  		cmpi.w	#$280,d0
0000B0B4 6200 0000                  		bhi.w	Obj1D_Delete
0000B0B8 4E75                       		rts	
0000B0BA                            ; ===========================================================================
0000B0BA                            
0000B0BA                            Obj1D_Delete:				; XREF: Obj1D_Index
0000B0BA 6100 0000                  		bsr.w	DeleteObject
0000B0BE 4E75                       		rts	
0000B0C0                            ; ---------------------------------------------------------------------------
0000B0C0                            ; Subroutine to	check if Sonic touches the object
0000B0C0                            ; ---------------------------------------------------------------------------
0000B0C0                            
0000B0C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B0C0                            
0000B0C0                            
0000B0C0                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000B0C0 43F8 D000                  		lea	($FFFFD000).w,a1
0000B0C4 3029 0008                  		move.w	8(a1),d0
0000B0C8 9068 0008                  		sub.w	8(a0),d0
0000B0CC D041                       		add.w	d1,d0
0000B0CE 6B00                       		bmi.s	loc_8918
0000B0D0 D241                       		add.w	d1,d1
0000B0D2 B041                       		cmp.w	d1,d0
0000B0D4 6400                       		bcc.s	loc_8918
0000B0D6 3429 000C                  		move.w	$C(a1),d2
0000B0DA 1229 0016                  		move.b	$16(a1),d1
0000B0DE 4881                       		ext.w	d1
0000B0E0 D242                       		add.w	d2,d1
0000B0E2 3028 000C                  		move.w	$C(a0),d0
0000B0E6 0440 0010                  		subi.w	#$10,d0
0000B0EA 9041                       		sub.w	d1,d0
0000B0EC 6200                       		bhi.s	loc_8918
0000B0EE 0C40 FFF0                  		cmpi.w	#-$10,d0
0000B0F2 6500                       		bcs.s	loc_8918
0000B0F4 70FF                       		moveq	#-1,d0
0000B0F6 4E75                       		rts	
0000B0F8                            ; ===========================================================================
0000B0F8                            
0000B0F8                            loc_8918:
0000B0F8 7000                       		moveq	#0,d0
0000B0FA 4E75                       		rts	
0000B0FC                            ; End of function Obj1D_ChkTouch
0000B0FC                            
0000B0FC                            ; ===========================================================================
0000B0FC                            ; ---------------------------------------------------------------------------
0000B0FC                            ; Sprite mappings - object 1D
0000B0FC                            ; ---------------------------------------------------------------------------
0000B0FC                            Map_obj1D:
0000B0FC                            	include "_maps\obj1D.asm"
0000B0FC                            ; ---------------------------------------------------------------------------
0000B0FC                            ; Sprite mappings - object 1D
0000B0FC                            ; ---------------------------------------------------------------------------
0000B0FC 0000                       		dc.w byte_891E-Map_obj1D
0000B0FE 04                         byte_891E:	dc.b 4
0000B0FF E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000B104 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000B109 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000B10E 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000B114 00                         		even
0000B114 00                         		even
0000B114                            
0000B114                            ; ===========================================================================
0000B114                            ; ---------------------------------------------------------------------------
0000B114                            ; Object 2A - doors (SBZ)
0000B114                            ; ---------------------------------------------------------------------------
0000B114                            
0000B114                            Obj2A:					; XREF: Obj_Index
0000B114 7000                       		moveq	#0,d0
0000B116 1028 0024                  		move.b	$24(a0),d0
0000B11A 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000B11E 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000B122                            ; ===========================================================================
0000B122 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000B124 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000B126                            ; ===========================================================================
0000B126                            
0000B126                            Obj2A_Main:				; XREF: Obj2A_Index
0000B126 5428 0024                  		addq.b	#2,$24(a0)
0000B12A 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000B132 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000B138 0028 0004 0001             		ori.b	#4,1(a0)
0000B13E 117C 0008 0019             		move.b	#8,$19(a0)
0000B144 117C 0004 0018             		move.b	#4,$18(a0)
0000B14A                            
0000B14A                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000B14A 323C 0040                  		move.w	#$40,d1
0000B14E 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000B152 3038 D008                  		move.w	($FFFFD008).w,d0
0000B156 D041                       		add.w	d1,d0
0000B158 B068 0008                  		cmp.w	8(a0),d0
0000B15C 6500                       		bcs.s	Obj2A_Animate
0000B15E 9041                       		sub.w	d1,d0
0000B160 9041                       		sub.w	d1,d0
0000B162 B068 0008                  		cmp.w	8(a0),d0
0000B166 6400                       		bcc.s	Obj2A_Animate
0000B168 D041                       		add.w	d1,d0
0000B16A B068 0008                  		cmp.w	8(a0),d0
0000B16E 6400                       		bcc.s	loc_899A
0000B170 0828 0000 0022             		btst	#0,$22(a0)
0000B176 6600                       		bne.s	Obj2A_Animate
0000B178 6000                       		bra.s	Obj2A_Open
0000B17A                            ; ===========================================================================
0000B17A                            
0000B17A                            loc_899A:				; XREF: Obj2A_OpenShut
0000B17A 0828 0000 0022             		btst	#0,$22(a0)
0000B180 6700                       		beq.s	Obj2A_Animate
0000B182                            
0000B182                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000B182 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000B188                            
0000B188                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000B188 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000B18E 6100 0000                  		bsr.w	AnimateSprite
0000B192 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000B196 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000B198 323C 0011                  		move.w	#$11,d1
0000B19C 343C 0020                  		move.w	#$20,d2
0000B1A0 3602                       		move.w	d2,d3
0000B1A2 5243                       		addq.w	#1,d3
0000B1A4 3828 0008                  		move.w	8(a0),d4
0000B1A8 6100 0000                  		bsr.w	SolidObject
0000B1AC                            
0000B1AC                            Obj2A_MarkAsUsed:
0000B1AC 6000 0000                  		bra.w	MarkObjGone
0000B1B0                            ; ===========================================================================
0000B1B0                            Ani_obj2A:
0000B1B0                            	include "_anim\obj2A.asm"
0000B1B0                            ; ---------------------------------------------------------------------------
0000B1B0                            ; Animation script - doors (SBZ)
0000B1B0                            ; ---------------------------------------------------------------------------
0000B1B0 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000B1B2 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000B1B4 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000B1C0 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000B1CC                            		even
0000B1CC                            		even
0000B1CC                            
0000B1CC                            ; ---------------------------------------------------------------------------
0000B1CC                            ; Sprite mappings - doors (SBZ)
0000B1CC                            ; ---------------------------------------------------------------------------
0000B1CC                            Map_obj2A:
0000B1CC                            	include "_maps\obj2A.asm"
0000B1CC                            ; --------------------------------------------------------------------------------
0000B1CC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B1CC                            ; --------------------------------------------------------------------------------
0000B1CC                            
0000B1CC                            SME_u4vL6:	
0000B1CC 0000 0000                  		dc.w SME_u4vL6_4-SME_u4vL6, SME_u4vL6_5-SME_u4vL6	
0000B1D0 00                         SME_u4vL6_4:	dc.b 0	
0000B1D1 01                         SME_u4vL6_5:	dc.b 1	
0000B1D2 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
0000B1D8 00                         		even
0000B1D8 00                         		even
0000B1D8                            
0000B1D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B1D8                            
0000B1D8                            
0000B1D8                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000B1D8 6100 0000                  		bsr.w	Obj44_SolidWall2
0000B1DC 6700                       		beq.s	loc_8AA8
0000B1DE 6B00 0000                  		bmi.w	loc_8AC4
0000B1E2 4A40                       		tst.w	d0
0000B1E4 6700 0000                  		beq.w	loc_8A92
0000B1E8 6B00                       		bmi.s	loc_8A7C
0000B1EA 4A69 0010                  		tst.w	$10(a1)
0000B1EE 6B00                       		bmi.s	loc_8A92
0000B1F0 6000                       		bra.s	loc_8A82
0000B1F2                            ; ===========================================================================
0000B1F2                            
0000B1F2                            loc_8A7C:
0000B1F2 4A69 0010                  		tst.w	$10(a1)
0000B1F6 6A00                       		bpl.s	loc_8A92
0000B1F8                            
0000B1F8                            loc_8A82:
0000B1F8 9169 0008                  		sub.w	d0,8(a1)
0000B1FC 337C 0000 0014             		move.w	#0,$14(a1)
0000B202 337C 0000 0010             		move.w	#0,$10(a1)
0000B208                            
0000B208                            loc_8A92:
0000B208 0829 0001 0022             		btst	#1,$22(a1)
0000B20E 6600                       		bne.s	loc_8AB6
0000B210 08E9 0005 0022             		bset	#5,$22(a1)
0000B216 08E8 0005 0022             		bset	#5,$22(a0)
0000B21C 4E75                       		rts	
0000B21E                            ; ===========================================================================
0000B21E                            
0000B21E                            loc_8AA8:
0000B21E 0828 0005 0022             		btst	#5,$22(a0)
0000B224 6700                       		beq.s	locret_8AC2
0000B226 337C 0001 001C             		move.w	#1,$1C(a1)
0000B22C                            
0000B22C                            loc_8AB6:
0000B22C 08A8 0005 0022             		bclr	#5,$22(a0)
0000B232 08A9 0005 0022             		bclr	#5,$22(a1)
0000B238                            
0000B238                            locret_8AC2:
0000B238 4E75                       		rts	
0000B23A                            ; ===========================================================================
0000B23A                            
0000B23A                            loc_8AC4:
0000B23A 4A69 0012                  		tst.w	$12(a1)
0000B23E 6A00                       		bpl.s	locret_8AD8
0000B240 4A43                       		tst.w	d3
0000B242 6A00                       		bpl.s	locret_8AD8
0000B244 9769 000C                  		sub.w	d3,$C(a1)
0000B248 337C 0000 0012             		move.w	#0,$12(a1)
0000B24E                            
0000B24E                            locret_8AD8:
0000B24E 4E75                       		rts	
0000B250                            ; End of function Obj44_SolidWall
0000B250                            
0000B250                            
0000B250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B250                            
0000B250                            
0000B250                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000B250 43F8 D000                  		lea	($FFFFD000).w,a1
0000B254 3029 0008                  		move.w	8(a1),d0
0000B258 9068 0008                  		sub.w	8(a0),d0
0000B25C D041                       		add.w	d1,d0
0000B25E 6B00                       		bmi.s	loc_8B48
0000B260 3601                       		move.w	d1,d3
0000B262 D643                       		add.w	d3,d3
0000B264 B043                       		cmp.w	d3,d0
0000B266 6200                       		bhi.s	loc_8B48
0000B268 1629 0016                  		move.b	$16(a1),d3
0000B26C 4883                       		ext.w	d3
0000B26E D443                       		add.w	d3,d2
0000B270 3629 000C                  		move.w	$C(a1),d3
0000B274 9668 000C                  		sub.w	$C(a0),d3
0000B278 D642                       		add.w	d2,d3
0000B27A 6B00                       		bmi.s	loc_8B48
0000B27C 3802                       		move.w	d2,d4
0000B27E D844                       		add.w	d4,d4
0000B280 B644                       		cmp.w	d4,d3
0000B282 6400                       		bcc.s	loc_8B48
0000B284 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B288 6B00                       		bmi.s	loc_8B48
0000B28A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B290 6400                       		bcc.s	loc_8B48
0000B292 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B296 6600                       		bne.s	loc_8B48
0000B298 3A00                       		move.w	d0,d5
0000B29A B240                       		cmp.w	d0,d1
0000B29C 6400                       		bcc.s	loc_8B30
0000B29E D241                       		add.w	d1,d1
0000B2A0 9041                       		sub.w	d1,d0
0000B2A2 3A00                       		move.w	d0,d5
0000B2A4 4445                       		neg.w	d5
0000B2A6                            
0000B2A6                            loc_8B30:
0000B2A6 3203                       		move.w	d3,d1
0000B2A8 B443                       		cmp.w	d3,d2
0000B2AA 6400                       		bcc.s	loc_8B3C
0000B2AC 9644                       		sub.w	d4,d3
0000B2AE 3203                       		move.w	d3,d1
0000B2B0 4441                       		neg.w	d1
0000B2B2                            
0000B2B2                            loc_8B3C:
0000B2B2 BA41                       		cmp.w	d1,d5
0000B2B4 6200                       		bhi.s	loc_8B44
0000B2B6 7801                       		moveq	#1,d4
0000B2B8 4E75                       		rts	
0000B2BA                            ; ===========================================================================
0000B2BA                            
0000B2BA                            loc_8B44:
0000B2BA 78FF                       		moveq	#-1,d4
0000B2BC 4E75                       		rts	
0000B2BE                            ; ===========================================================================
0000B2BE                            
0000B2BE                            loc_8B48:
0000B2BE 7800                       		moveq	#0,d4
0000B2C0 4E75                       		rts	
0000B2C2                            ; End of function Obj44_SolidWall2
0000B2C2                            
0000B2C2                            ; ===========================================================================
0000B2C2                            ; ---------------------------------------------------------------------------
0000B2C2                            ; Object 1E - Ball Hog enemy (SBZ)
0000B2C2                            ; ---------------------------------------------------------------------------
0000B2C2                            
0000B2C2                            Obj1E:					; XREF: Obj_Index
0000B2C2 7000                       		moveq	#0,d0
0000B2C4 1028 0024                  		move.b	$24(a0),d0
0000B2C8 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000B2CC 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000B2D0                            ; ===========================================================================
0000B2D0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000B2D2 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000B2D4                            ; ===========================================================================
0000B2D4                            
0000B2D4                            Obj1E_Main:				; XREF: Obj1E_Index
0000B2D4 117C 0013 0016             		move.b	#$13,$16(a0)
0000B2DA 117C 0008 0017             		move.b	#8,$17(a0)
0000B2E0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000B2E8 317C 2302 0002             		move.w	#$2302,2(a0)
0000B2EE 117C 0004 0001             		move.b	#4,1(a0)
0000B2F4 117C 0004 0018             		move.b	#4,$18(a0)
0000B2FA 117C 0005 0020             		move.b	#5,$20(a0)
0000B300 117C 000C 0019             		move.b	#$C,$19(a0)
0000B306 6100 0000                  		bsr.w	ObjectFall
0000B30A 4EB9 0000 0000             		jsr	ObjHitFloor
0000B310 4A41                       		tst.w	d1
0000B312 6A00                       		bpl.s	locret_8BAC
0000B314 D368 000C                  		add.w	d1,$C(a0)
0000B318 317C 0000 0012             		move.w	#0,$12(a0)
0000B31E 5428 0024                  		addq.b	#2,$24(a0)
0000B322                            
0000B322                            locret_8BAC:
0000B322 4E75                       		rts	
0000B324                            ; ===========================================================================
0000B324                            
0000B324                            Obj1E_Action:				; XREF: Obj1E_Index
0000B324 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000B32A 6100 0000                  		bsr.w	AnimateSprite
0000B32E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000B334 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000B336 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000B33A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000B33C 6000                       		bra.s	Obj1E_MarkAsGone
0000B33E                            ; ===========================================================================
0000B33E                            
0000B33E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000B33E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000B342                            
0000B342                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000B342 6000 0000                  		bra.w	MarkObjGone
0000B346                            ; ===========================================================================
0000B346                            
0000B346                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000B346 117C 0001 0032             		move.b	#1,$32(a0)
0000B34C 6100 0000                  		bsr.w	SingleObjLoad
0000B350 6600                       		bne.s	loc_8C1A
0000B352 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000B356 3368 0008 0008             		move.w	8(a0),8(a1)
0000B35C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B362 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000B368 337C 0000 0012             		move.w	#0,$12(a1)
0000B36E 70FC                       		moveq	#-4,d0
0000B370 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000B376 6700                       		beq.s	loc_8C0A	; if not, branch
0000B378 4440                       		neg.w	d0
0000B37A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000B37E                            
0000B37E                            loc_8C0A:
0000B37E D169 0008                  		add.w	d0,8(a1)
0000B382 0669 000C 000C             		addi.w	#$C,$C(a1)
0000B388 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000B38E                            
0000B38E                            loc_8C1A:
0000B38E 60B2                       		bra.s	Obj1E_MarkAsGone
0000B390                            ; ===========================================================================
0000B390                            ; ---------------------------------------------------------------------------
0000B390                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000B390                            ; ---------------------------------------------------------------------------
0000B390                            
0000B390                            Obj20:					; XREF: Obj_Index
0000B390 7000                       		moveq	#0,d0
0000B392 1028 0024                  		move.b	$24(a0),d0
0000B396 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000B39A 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000B39E                            ; ===========================================================================
0000B39E 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000B3A0 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000B3A2                            ; ===========================================================================
0000B3A2                            
0000B3A2                            Obj20_Main:				; XREF: Obj20_Index
0000B3A2 5428 0024                  		addq.b	#2,$24(a0)
0000B3A6 117C 0007 0016             		move.b	#7,$16(a0)
0000B3AC 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000B3B4 317C 2302 0002             		move.w	#$2302,2(a0)
0000B3BA 117C 0004 0001             		move.b	#4,1(a0)
0000B3C0 117C 0003 0018             		move.b	#3,$18(a0)
0000B3C6 117C 0087 0020             		move.b	#$87,$20(a0)
0000B3CC 117C 0008 0019             		move.b	#8,$19(a0)
0000B3D2 7000                       		moveq	#0,d0
0000B3D4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000B3D8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000B3DC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000B3E0 117C 0004 001A             		move.b	#4,$1A(a0)
0000B3E6                            
0000B3E6                            Obj20_Bounce:				; XREF: Obj20_Index
0000B3E6 4EB9 0000 0000             		jsr	ObjectFall
0000B3EC 4A68 0012                  		tst.w	$12(a0)
0000B3F0 6B00                       		bmi.s	Obj20_ChkExplode
0000B3F2 4EB9 0000 0000             		jsr	ObjHitFloor
0000B3F8 4A41                       		tst.w	d1
0000B3FA 6A00                       		bpl.s	Obj20_ChkExplode
0000B3FC D368 000C                  		add.w	d1,$C(a0)
0000B400 317C FD00 0012             		move.w	#-$300,$12(a0)
0000B406 4A03                       		tst.b	d3
0000B408 6700                       		beq.s	Obj20_ChkExplode
0000B40A 6B00                       		bmi.s	loc_8CA4
0000B40C 4A68 0010                  		tst.w	$10(a0)
0000B410 6A00                       		bpl.s	Obj20_ChkExplode
0000B412 4468 0010                  		neg.w	$10(a0)
0000B416 6000                       		bra.s	Obj20_ChkExplode
0000B418                            ; ===========================================================================
0000B418                            
0000B418                            loc_8CA4:				; XREF: Obj20_Bounce
0000B418 4A68 0010                  		tst.w	$10(a0)
0000B41C 6B00                       		bmi.s	Obj20_ChkExplode
0000B41E 4468 0010                  		neg.w	$10(a0)
0000B422                            
0000B422                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000B422 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000B426 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000B428 10BC 0024                  		move.b	#$24,0(a0)
0000B42C 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000B430 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000B436 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000B43A                            ; ===========================================================================
0000B43A                            
0000B43A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000B43A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B43E 6A00                       		bpl.s	Obj20_Display
0000B440 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000B446 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000B44C                            
0000B44C                            Obj20_Display:
0000B44C 6100 0000                  		bsr.w	DisplaySprite
0000B450 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B454 0640 00E0                  		addi.w	#$E0,d0
0000B458 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000B45C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000B460 4E75                       		rts	
0000B462                            ; ===========================================================================
0000B462                            ; ---------------------------------------------------------------------------
0000B462                            ; Object 24 - explosion	from a destroyed monitor
0000B462                            ; ---------------------------------------------------------------------------
0000B462                            
0000B462                            Obj24:					; XREF: Obj_Index
0000B462 7000                       		moveq	#0,d0
0000B464 1028 0024                  		move.b	$24(a0),d0
0000B468 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000B46C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000B470                            ; ===========================================================================
0000B470 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000B472 0000                       		dc.w Obj24_Animate-Obj24_Index
0000B474                            ; ===========================================================================
0000B474                            
0000B474                            Obj24_Main:				; XREF: Obj24_Index
0000B474 5428 0024                  		addq.b	#2,$24(a0)
0000B478 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000B480 317C 041C 0002             		move.w	#$41C,2(a0)
0000B486 117C 0004 0001             		move.b	#4,1(a0)
0000B48C 117C 0001 0018             		move.b	#1,$18(a0)
0000B492 117C 0000 0020             		move.b	#0,$20(a0)
0000B498 117C 000C 0019             		move.b	#$C,$19(a0)
0000B49E 117C 0009 001E             		move.b	#9,$1E(a0)
0000B4A4 117C 0000 001A             		move.b	#0,$1A(a0)
0000B4AA 303C 00A5                  		move.w	#$A5,d0
0000B4AE 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play explosion sound
0000B4B4                            
0000B4B4                            Obj24_Animate:				; XREF: Obj24_Index
0000B4B4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B4B8 6A00                       		bpl.s	Obj24_Display
0000B4BA 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000B4C0 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000B4C4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000B4CA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000B4CE                            
0000B4CE                            Obj24_Display:
0000B4CE 6000 0000                  		bra.w	DisplaySprite
0000B4D2                            ; ===========================================================================
0000B4D2                            ; ---------------------------------------------------------------------------
0000B4D2                            ; Object 27 - explosion	from a destroyed enemy
0000B4D2                            ; ---------------------------------------------------------------------------
0000B4D2                            
0000B4D2                            Obj27:					; XREF: Obj_Index
0000B4D2 7000                       		moveq	#0,d0
0000B4D4 1028 0024                  		move.b	$24(a0),d0
0000B4D8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000B4DC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000B4E0                            ; ===========================================================================
0000B4E0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000B4E2 0000                       		dc.w Obj27_Main-Obj27_Index
0000B4E4 0000                       		dc.w Obj27_Animate-Obj27_Index
0000B4E6                            ; ===========================================================================
0000B4E6                            
0000B4E6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000B4E6 5428 0024                  		addq.b	#2,$24(a0)
0000B4EA 6100 0000                  		bsr.w	SingleObjLoad
0000B4EE 6600                       		bne.s	Obj27_Main
0000B4F0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000B4F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000B4FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B500 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000B506                            
0000B506                            Obj27_Main:				; XREF: Obj27_Index
0000B506 5428 0024                  		addq.b	#2,$24(a0)
0000B50A 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000B512 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000B518 117C 0004 0001             		move.b	#4,1(a0)
0000B51E 117C 0001 0018             		move.b	#1,$18(a0)
0000B524 117C 0000 0020             		move.b	#0,$20(a0)
0000B52A 117C 000C 0019             		move.b	#$C,$19(a0)
0000B530 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000B536 117C 0000 001A             		move.b	#0,$1A(a0)
0000B53C 303C 00C1                  		move.w	#$C1,d0
0000B540 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000B546                            
0000B546                            Obj27_Animate:				; XREF: Obj27_Index
0000B546 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B54A 6A00                       		bpl.s	Obj27_Display
0000B54C 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000B552 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000B556 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000B55C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000B560                            
0000B560                            Obj27_Display:
0000B560 6000 0000                  		bra.w	DisplaySprite
0000B564                            ; ===========================================================================
0000B564                            ; ---------------------------------------------------------------------------
0000B564                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000B564                            ; ---------------------------------------------------------------------------
0000B564                            
0000B564                            Obj3F:					; XREF: Obj_Index
0000B564 7000                       		moveq	#0,d0
0000B566 1028 0024                  		move.b	$24(a0),d0
0000B56A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000B56E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000B572                            ; ===========================================================================
0000B572 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000B574 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000B576                            ; ===========================================================================
0000B576                            
0000B576                            Obj3F_Main:				; XREF: Obj3F_Index
0000B576 5428 0024                  		addq.b	#2,$24(a0)
0000B57A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000B582 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000B588 117C 0004 0001             		move.b	#4,1(a0)
0000B58E 117C 0001 0018             		move.b	#1,$18(a0)
0000B594 117C 0000 0020             		move.b	#0,$20(a0)
0000B59A 117C 000C 0019             		move.b	#$C,$19(a0)
0000B5A0 117C 0007 001E             		move.b	#7,$1E(a0)
0000B5A6 117C 0000 001A             		move.b	#0,$1A(a0)
0000B5AC 303C 00C4                  		move.w	#$C4,d0
0000B5B0 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000B5B6                            ; ===========================================================================
0000B5B6                            Ani_obj1E:
0000B5B6                            	include "_anim\obj1E.asm"
0000B5B6                            ; ---------------------------------------------------------------------------
0000B5B6                            ; Animation script - doors (SBZ)
0000B5B6                            ; ---------------------------------------------------------------------------
0000B5B6 0000                       		dc.w byte_8E4A-Ani_obj1E
0000B5B8 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000B5D0 00                         		even
0000B5D0 00                         		even
0000B5D0                            
0000B5D0                            ; ---------------------------------------------------------------------------
0000B5D0                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000B5D0                            ; ---------------------------------------------------------------------------
0000B5D0                            Map_obj1E:
0000B5D0                            	include "_maps\obj1E.asm"
0000B5D0                            ; ---------------------------------------------------------------------------
0000B5D0                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000B5D0                            ; ---------------------------------------------------------------------------
0000B5D0 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000B5D4 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000B5D8 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000B5DC 02                         byte_8E6E:	dc.b 2
0000B5DD EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000B5E2 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000B5E7 02                         byte_8E79:	dc.b 2
0000B5E8 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000B5ED FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000B5F2 02                         byte_8E84:	dc.b 2
0000B5F3 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000B5F8 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B5FD 02                         byte_8E8F:	dc.b 2
0000B5FE E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000B603 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000B608 01                         byte_8E9A:	dc.b 1
0000B609 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000B60E 01                         byte_8EA0:	dc.b 1
0000B60F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000B614                            		even
0000B614                            		even
0000B614                            
0000B614                            ; ---------------------------------------------------------------------------
0000B614                            ; Sprite mappings - explosion
0000B614                            ; ---------------------------------------------------------------------------
0000B614                            Map_obj24:
0000B614                            	include "_maps\obj24.asm"
0000B614                            ; ---------------------------------------------------------------------------
0000B614                            ; Sprite mappings - explosion
0000B614                            ; ---------------------------------------------------------------------------
0000B614 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000B618 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000B61C 01                         byte_8EAE:	dc.b 1
0000B61D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000B622 01                         byte_8EB4:	dc.b 1
0000B623 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000B628 01                         byte_8EBA:	dc.b 1
0000B629 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000B62E 01                         byte_8EC0:	dc.b 1
0000B62F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000B634                            		even
0000B634                            		even
0000B634                            
0000B634                            ; ---------------------------------------------------------------------------
0000B634                            ; Sprite mappings - explosion
0000B634                            ; ---------------------------------------------------------------------------
0000B634 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000B638 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000B63C 0000                       		dc.w byte_8EF7-Map_obj27
0000B63E 01                         byte_8ED0:	dc.b 1
0000B63F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000B644 01                         byte_8ED6:	dc.b 1
0000B645 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000B64A 01                         byte_8EDC:	dc.b 1
0000B64B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000B650 04                         byte_8EE2:	dc.b 4
0000B651 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000B656 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000B65B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000B660 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000B665 04                         byte_8EF7:	dc.b 4
0000B666 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000B66B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000B670 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000B675 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000B67A                            		even
0000B67A                            ; ---------------------------------------------------------------------------
0000B67A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000B67A                            ; ---------------------------------------------------------------------------
0000B67A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000B67C 0000                       		dc.w byte_8F16-Map_obj3F
0000B67E 0000                       		dc.w byte_8F1C-Map_obj3F
0000B680 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000B682 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000B684 01                         byte_8F16:	dc.b 1
0000B685 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000B68A 01                         byte_8F1C:	dc.b 1
0000B68B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000B690                            		even
0000B690                            ; ===========================================================================
0000B690                            ; ---------------------------------------------------------------------------
0000B690                            ; Object 28 - animals
0000B690                            ; ---------------------------------------------------------------------------
0000B690                            
0000B690                            Obj28:					; XREF: Obj_Index
0000B690 7000                       		moveq	#0,d0			; Borrar d0
0000B692 1028 0024                  		move.b	$24(a0),d0		; Preparar index
0000B696 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1	; Index
0000B69A 4EBB 1000                  		jsr	Obj28_Index(pc,d1.w)	; Index
0000B69E 6000 0000                  		bra.w	MarkObjGone		; Hacer que el objeto no reaparezca despues de romeprlo
0000B6A2                            ; ===========================================================================
0000B6A2 0000                       Obj28_Index:	dc.w Obj28_Main-Obj28_Index	; $0
0000B6A4 0000                       		dc.w Obj28_ChgSpeed-Obj28_Index	; $2
0000B6A6 0000                       		dc.w Obj28_Broken-Obj28_Index	;$4
0000B6A8                            ; ===========================================================================
0000B6A8                            
0000B6A8                            Obj28_Main:				; XREF: Obj28_Index
0000B6A8 5428 0024                  		addq.b	#2,$24(a0)		; Terminar el resto de los codigos hasta rts y avanzar de rutina
0000B6AC                            ;		move.w	#$592,2(a0)			;VRAM position
0000B6AC                            ;		move.l	#Map_Broken,4(a0)	;Maps
0000B6AC 317C 0580 0002             		move.w	#$580,2(a0)			;VRAM position
0000B6B2 217C 0000 0000 0004        		move.l	#Map_obj28,4(a0)	;Maps
0000B6BA 117C 0004 0001             		move.b	#4,1(a0)		; Prioridad
0000B6C0 117C 0004 0018             		move.b	#4,$18(a0)		; Usar coordenadas de la pantalla
0000B6C6 117C 0010 0019             		move.b	#$10,$19(a0)		; Ancho de objeto en pixeles
0000B6CC                            Obj28_Jump:
0000B6CC 317C FD0B 0012             		move.w	#-$2F5,$12(a0)		; Definir velocidad vertical
0000B6D2                            
0000B6D2                            Obj28_ChgSpeed:				; XREF: Obj28_Index
0000B6D2 4EB9 0000 0000             		jsr	SpeedToPos		; Llamar a la subrutina que mueve objetos
0000B6D8 4EB9 0000 0000             		jsr	ObjectFall 		; Llamar a la subrutina que añade gravedad al objeto
0000B6DE 4EB9 0000 0000             		jsr	ObjHitFloor		; Llamar a la subrutina que checkea si el objeto toca el suelo
0000B6E4 4A41                       		tst.w	d1			; El objeto ha tocado el suelo?
0000B6E6 6A00                       		bpl.s	Obj28_Return		; Si no, repetir
0000B6E8 317C 0592 0002             		move.w	#$592,2(a0)			;VRAM position
0000B6EE 217C 0000 0000 0004        		move.l	#Map_Broken,4(a0)	;Maps
0000B6F6 5428 0024                  		addq.b	#2,$24(a0)		; Terminar el resto de los codigos hasta rts y avanzar de rutina
0000B6FA 317C FD0B 0012             		move.w	#-$2F5,$12(a0)		; Definir velocidad vertical
0000B700 4EB9 0000 0000             		jsr	SingleObjLoad
0000B706 6600 0000                  		bne	Obj28_return
0000B70A 12BC 0028                  		move.b	#$28,(a1)
0000B70E 137C 0004 0024             		move.b	#$4,$24(a1)
0000B714 137C 0001 0028             		move.b	#$1,$28(a1)
0000B71A 3368 0008 0008             		move.w	8(a0),8(a1)
0000B720 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B726 337C FD0B 0012             		move.w	#-$2F5,$12(a1)		; Definir velocidad vertical
0000B72C 4E75                       		rts
0000B72E                            
0000B72E                            Obj28_Broken:
0000B72E 0C28 0001 0028             		cmpi.b	#1,$28(a0)
0000B734 6700 0000                  		beq	Obj28_Broken_2
0000B738                            ;		move.w	#-$035,$12(a0)		; Definir velocidad vertical
0000B738 43F9 0000 0000             		lea	(Ani_obj28).l,a1	; Cargar en memoria el archivo de animaciones. La primera animacion es la predeterminada
0000B73E 4EB9 0000 0000             		jsr	AnimateSprite		; Llamar a la subrutina de animar sprite
0000B744 4EB9 0000 0000             		jsr	SpeedToPos		; Llamar a la subrutina que mueve objetos
0000B74A 4EB9 0000 0000             		jsr	ObjectFall2		; Llamar a la subrutina que añade gravedad al objeto
0000B750 317C FF0B 0010             		move.w	#-$0F5,$10(a0)		; Definir velocidad vertical
0000B756                            ;		jmp	Obj28_Jump		; Hacer un salto
0000B756                            
0000B756                            Obj28_Return:
0000B756 4E75                       		rts
0000B758                            
0000B758                            Obj28_Broken_2:
0000B758 117C 0004 0001             		move.b	#4,1(a0)		; Prioridad
0000B75E 117C 0004 0018             		move.b	#4,$18(a0)		; Usar coordenadas de la pantalla
0000B764 117C 0010 0019             		move.b	#$10,$19(a0)		; Ancho de objeto en pixeles
0000B76A 317C 0592 0002             		move.w	#$592,2(a0)			;VRAM position
0000B770 217C 0000 0000 0004        		move.l	#Map_Broken,4(a0)	;Maps
0000B778                            
0000B778                            ;		move.w	#-$035,$12(a0)		; Definir velocidad vertical
0000B778 43F9 0000 0000             		lea	(Ani_obj28).l,a1	; Cargar en memoria el archivo de animaciones. La primera animacion es la predeterminada
0000B77E 4EB9 0000 0000             		jsr	AnimateSprite		; Llamar a la subrutina de animar sprite
0000B784 4EB9 0000 0000             		jsr	SpeedToPos		; Llamar a la subrutina que mueve objetos
0000B78A 4EB9 0000 0000             		jsr	ObjectFall2		; Llamar a la subrutina que añade gravedad al objeto
0000B790 317C 00F5 0010             		move.w	#$0F5,$10(a0)		; Definir velocidad vertical
0000B796                            ;		jmp	Obj28_Jump		; Hacer un salto
0000B796 4E75                       		rts
0000B798                            
0000B798                            Ani_Obj28:
0000B798                            		include	'_anim\obj28.asm'
0000B798                            ; ---------------------------------------------------------------------------
0000B798                            ; Animation script - Sonic
0000B798                            ; ---------------------------------------------------------------------------
0000B798                            BrokenGemArray:
0000B798 0000                       		dc.w BrokenGem-BrokenGemArray
0000B79A 0000 01FF                  BrokenGem:	dc.b 0, $0, $1, $FF
0000B79E                            		even
0000B79E                            		even
0000B79E                            		even
0000B79E                            ; ---------------------------------------------------------------------------
0000B79E                            ; Object 29 - points that appear when you destroy something
0000B79E                            ; ---------------------------------------------------------------------------
0000B79E                            
0000B79E                            Obj29:					; XREF: Obj_Index
0000B79E 7000                       		moveq	#0,d0
0000B7A0 1028 0024                  		move.b	$24(a0),d0
0000B7A4 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000B7A8 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000B7AC 6000 0000                  		bra.w	DisplaySprite
0000B7B0                            ; ===========================================================================
0000B7B0 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000B7B2 0000                       		dc.w Obj29_Slower-Obj29_Index
0000B7B4                            ; ===========================================================================
0000B7B4                            
0000B7B4                            Obj29_Main:				; XREF: Obj29_Index
0000B7B4 5428 0024                  		addq.b	#2,$24(a0)
0000B7B8 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000B7C0 317C 2797 0002             		move.w	#$2797,2(a0)
0000B7C6 117C 0004 0001             		move.b	#4,1(a0)
0000B7CC 117C 0001 0018             		move.b	#1,$18(a0)
0000B7D2 117C 0008 0019             		move.b	#8,$19(a0)
0000B7D8 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000B7DE                            
0000B7DE                            Obj29_Slower:				; XREF: Obj29_Index
0000B7DE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000B7E2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000B7E6 6100 0000                  		bsr.w	SpeedToPos
0000B7EA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000B7F0 4E75                       		rts	
0000B7F2                            ; ===========================================================================
0000B7F2                            ; ---------------------------------------------------------------------------
0000B7F2                            ; Sprite mappings - animals
0000B7F2                            ; ---------------------------------------------------------------------------
0000B7F2                            Map_Broken:
0000B7F2                            	include '_maps\broken.asm'
0000B7F2                            ; --------------------------------------------------------------------------------
0000B7F2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B7F2                            ; --------------------------------------------------------------------------------
0000B7F2                            
0000B7F2                            SME_Swt4Z:	
0000B7F2 0000 0000                  		dc.w SME_Swt4Z_4-SME_Swt4Z, SME_Swt4Z_19-SME_Swt4Z	
0000B7F6 04                         SME_Swt4Z_4:	dc.b 4	
0000B7F7 FB00 0000 F9               		dc.b $FB, 0, 0, 0, $F9	
0000B7FC FB00 0001 01               		dc.b $FB, 0, 0, 1, 1	
0000B801 F300 0002 F9               		dc.b $F3, 0, 0, 2, $F9	
0000B806 F300 0003 01               		dc.b $F3, 0, 0, 3, 1	
0000B80B 00                         SME_Swt4Z_19:	dc.b 0	
0000B80C                            		even
0000B80C                            		even
0000B80C                            Map_obj28:
0000B80C                            	include "_maps\obj28.asm"
0000B80C                            ; --------------------------------------------------------------------------------
0000B80C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B80C                            ; --------------------------------------------------------------------------------
0000B80C                            
0000B80C                            SME_IAYph:	
0000B80C 0000 0000                  		dc.w SME_IAYph_22-SME_IAYph, SME_IAYph_37-SME_IAYph	
0000B810 0000 0000                  		dc.w SME_IAYph_4C-SME_IAYph, SME_IAYph_61-SME_IAYph	
0000B814 0000 0000                  		dc.w SME_IAYph_76-SME_IAYph, SME_IAYph_8B-SME_IAYph	
0000B818 0000 0000                  		dc.w SME_IAYph_A0-SME_IAYph, SME_IAYph_B5-SME_IAYph	
0000B81C 0000 0000                  		dc.w SME_IAYph_CA-SME_IAYph, SME_IAYph_DF-SME_IAYph	
0000B820 0000 0000                  		dc.w SME_IAYph_F4-SME_IAYph, SME_IAYph_109-SME_IAYph	
0000B824 0000 0000                  		dc.w SME_IAYph_11E-SME_IAYph, SME_IAYph_133-SME_IAYph	
0000B828 0000 0000                  		dc.w SME_IAYph_148-SME_IAYph, SME_IAYph_15D-SME_IAYph	
0000B82C 0000                       		dc.w SME_IAYph_172-SME_IAYph	
0000B82E 04                         SME_IAYph_22:	dc.b 4	
0000B82F F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B834 F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B839 F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B83E F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B843 04                         SME_IAYph_37:	dc.b 4	
0000B844 F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B849 F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B84E F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B853 F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B858 04                         SME_IAYph_4C:	dc.b 4	
0000B859 F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B85E F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B863 F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B868 F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B86D 04                         SME_IAYph_61:	dc.b 4	
0000B86E F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B873 F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B878 F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B87D F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B882 04                         SME_IAYph_76:	dc.b 4	
0000B883 F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B888 F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B88D F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B892 F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B897 04                         SME_IAYph_8B:	dc.b 4	
0000B898 F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B89D F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B8A2 F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B8A7 F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B8AC 04                         SME_IAYph_A0:	dc.b 4	
0000B8AD F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B8B2 F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B8B7 F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B8BC F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B8C1 04                         SME_IAYph_B5:	dc.b 4	
0000B8C2 F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B8C7 F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B8CC F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B8D1 F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B8D6 04                         SME_IAYph_CA:	dc.b 4	
0000B8D7 F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B8DC F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B8E1 F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B8E6 F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B8EB 04                         SME_IAYph_DF:	dc.b 4	
0000B8EC F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B8F1 F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B8F6 F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B8FB F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B900 04                         SME_IAYph_F4:	dc.b 4	
0000B901 F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B906 F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B90B F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B910 F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B915 04                         SME_IAYph_109:	dc.b 4	
0000B916 F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B91B F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B920 F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B925 F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B92A 04                         SME_IAYph_11E:	dc.b 4	
0000B92B F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B930 F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B935 F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B93A F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B93F 04                         SME_IAYph_133:	dc.b 4	
0000B940 F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B945 F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B94A F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B94F F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B954 04                         SME_IAYph_148:	dc.b 4	
0000B955 F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B95A F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B95F F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B964 F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B969 04                         SME_IAYph_15D:	dc.b 4	
0000B96A F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B96F F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B974 F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B979 F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B97E 04                         SME_IAYph_172:	dc.b 4	
0000B97F F900 0000 F9               		dc.b $F9, 0, 0, 0, $F9	
0000B984 F900 0001 01               		dc.b $F9, 0, 0, 1, 1	
0000B989 F100 0002 F9               		dc.b $F1, 0, 0, 2, $F9	
0000B98E F100 0003 01               		dc.b $F1, 0, 0, 3, 1	
0000B994 00                         		even
0000B994 00                         		even
0000B994                            
0000B994                            Map_obj28a:
0000B994                            	include "_maps\obj28a.asm"
0000B994                            ; --------------------------------------------------------------------------------
0000B994                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B994                            ; --------------------------------------------------------------------------------
0000B994                            
0000B994                            SME_yR0su:	
0000B994 0000 0000                  		dc.w SME_yR0su_22-SME_yR0su, SME_yR0su_37-SME_yR0su	
0000B998 0000 0000                  		dc.w SME_yR0su_4C-SME_yR0su, SME_yR0su_61-SME_yR0su	
0000B99C 0000 0000                  		dc.w SME_yR0su_76-SME_yR0su, SME_yR0su_8B-SME_yR0su	
0000B9A0 0000 0000                  		dc.w SME_yR0su_A0-SME_yR0su, SME_yR0su_B5-SME_yR0su	
0000B9A4 0000 0000                  		dc.w SME_yR0su_CA-SME_yR0su, SME_yR0su_DF-SME_yR0su	
0000B9A8 0000 0000                  		dc.w SME_yR0su_F4-SME_yR0su, SME_yR0su_109-SME_yR0su	
0000B9AC 0000 0000                  		dc.w SME_yR0su_11E-SME_yR0su, SME_yR0su_133-SME_yR0su	
0000B9B0 0000 0000                  		dc.w SME_yR0su_148-SME_yR0su, SME_yR0su_15D-SME_yR0su	
0000B9B4 0000                       		dc.w SME_yR0su_172-SME_yR0su	
0000B9B6 04                         SME_yR0su_22:	dc.b 4	
0000B9B7 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000B9BC 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000B9C1 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000B9C6 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000B9CB 04                         SME_yR0su_37:	dc.b 4	
0000B9CC 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000B9D1 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000B9D6 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000B9DB 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000B9E0 04                         SME_yR0su_4C:	dc.b 4	
0000B9E1 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000B9E6 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000B9EB 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000B9F0 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000B9F5 04                         SME_yR0su_61:	dc.b 4	
0000B9F6 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000B9FB 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BA00 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BA05 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BA0A 04                         SME_yR0su_76:	dc.b 4	
0000BA0B 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BA10 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BA15 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BA1A 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BA1F 04                         SME_yR0su_8B:	dc.b 4	
0000BA20 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BA25 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BA2A 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BA2F 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BA34 04                         SME_yR0su_A0:	dc.b 4	
0000BA35 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BA3A 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BA3F 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BA44 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BA49 04                         SME_yR0su_B5:	dc.b 4	
0000BA4A 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BA4F 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BA54 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BA59 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BA5E 04                         SME_yR0su_CA:	dc.b 4	
0000BA5F 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BA64 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BA69 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BA6E 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BA73 04                         SME_yR0su_DF:	dc.b 4	
0000BA74 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BA79 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BA7E 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BA83 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BA88 04                         SME_yR0su_F4:	dc.b 4	
0000BA89 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BA8E 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BA93 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BA98 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BA9D 04                         SME_yR0su_109:	dc.b 4	
0000BA9E 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BAA3 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BAA8 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BAAD 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BAB2 04                         SME_yR0su_11E:	dc.b 4	
0000BAB3 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BAB8 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BABD 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BAC2 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BAC7 04                         SME_yR0su_133:	dc.b 4	
0000BAC8 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BACD 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BAD2 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BAD7 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BADC 04                         SME_yR0su_148:	dc.b 4	
0000BADD 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BAE2 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BAE7 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BAEC 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BAF1 04                         SME_yR0su_15D:	dc.b 4	
0000BAF2 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BAF7 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BAFC 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BB01 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BB06 04                         SME_yR0su_172:	dc.b 4	
0000BB07 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BB0C 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BB11 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BB16 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BB1C 00                         		even
0000BB1C 00                         		even
0000BB1C                            
0000BB1C                            Map_obj28b:
0000BB1C                            	include "_maps\obj28b.asm"
0000BB1C                            ; --------------------------------------------------------------------------------
0000BB1C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BB1C                            ; --------------------------------------------------------------------------------
0000BB1C                            
0000BB1C                            SME_Ixc4g:	
0000BB1C 0000 0000                  		dc.w SME_Ixc4g_22-SME_Ixc4g, SME_Ixc4g_37-SME_Ixc4g	
0000BB20 0000 0000                  		dc.w SME_Ixc4g_4C-SME_Ixc4g, SME_Ixc4g_61-SME_Ixc4g	
0000BB24 0000 0000                  		dc.w SME_Ixc4g_76-SME_Ixc4g, SME_Ixc4g_8B-SME_Ixc4g	
0000BB28 0000 0000                  		dc.w SME_Ixc4g_A0-SME_Ixc4g, SME_Ixc4g_B5-SME_Ixc4g	
0000BB2C 0000 0000                  		dc.w SME_Ixc4g_CA-SME_Ixc4g, SME_Ixc4g_DF-SME_Ixc4g	
0000BB30 0000 0000                  		dc.w SME_Ixc4g_F4-SME_Ixc4g, SME_Ixc4g_109-SME_Ixc4g	
0000BB34 0000 0000                  		dc.w SME_Ixc4g_11E-SME_Ixc4g, SME_Ixc4g_133-SME_Ixc4g	
0000BB38 0000 0000                  		dc.w SME_Ixc4g_148-SME_Ixc4g, SME_Ixc4g_15D-SME_Ixc4g	
0000BB3C 0000                       		dc.w SME_Ixc4g_172-SME_Ixc4g	
0000BB3E 04                         SME_Ixc4g_22:	dc.b 4	
0000BB3F 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BB44 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BB49 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BB4E 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BB53 04                         SME_Ixc4g_37:	dc.b 4	
0000BB54 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BB59 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BB5E 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BB63 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BB68 04                         SME_Ixc4g_4C:	dc.b 4	
0000BB69 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BB6E 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BB73 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BB78 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BB7D 04                         SME_Ixc4g_61:	dc.b 4	
0000BB7E 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BB83 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BB88 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BB8D 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BB92 04                         SME_Ixc4g_76:	dc.b 4	
0000BB93 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BB98 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BB9D 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BBA2 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BBA7 04                         SME_Ixc4g_8B:	dc.b 4	
0000BBA8 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BBAD 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BBB2 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BBB7 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BBBC 04                         SME_Ixc4g_A0:	dc.b 4	
0000BBBD 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BBC2 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BBC7 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BBCC 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BBD1 04                         SME_Ixc4g_B5:	dc.b 4	
0000BBD2 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BBD7 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BBDC 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BBE1 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BBE6 04                         SME_Ixc4g_CA:	dc.b 4	
0000BBE7 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BBEC 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BBF1 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BBF6 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BBFB 04                         SME_Ixc4g_DF:	dc.b 4	
0000BBFC 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BC01 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BC06 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BC0B 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BC10 04                         SME_Ixc4g_F4:	dc.b 4	
0000BC11 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BC16 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BC1B 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BC20 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BC25 04                         SME_Ixc4g_109:	dc.b 4	
0000BC26 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BC2B 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BC30 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BC35 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BC3A 04                         SME_Ixc4g_11E:	dc.b 4	
0000BC3B 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BC40 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BC45 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BC4A 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BC4F 04                         SME_Ixc4g_133:	dc.b 4	
0000BC50 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BC55 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BC5A 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BC5F 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BC64 04                         SME_Ixc4g_148:	dc.b 4	
0000BC65 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BC6A 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BC6F 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BC74 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BC79 04                         SME_Ixc4g_15D:	dc.b 4	
0000BC7A 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BC7F 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BC84 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BC89 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BC8E 04                         SME_Ixc4g_172:	dc.b 4	
0000BC8F 0900 0000 F9               		dc.b 9, 0, 0, 0, $F9	
0000BC94 0900 0001 01               		dc.b 9, 0, 0, 1, 1	
0000BC99 0100 0002 F9               		dc.b 1, 0, 0, 2, $F9	
0000BC9E 0100 0003 01               		dc.b 1, 0, 0, 3, 1	
0000BCA4 00                         		even
0000BCA4 00                         		even
0000BCA4                            
0000BCA4                            ; ---------------------------------------------------------------------------
0000BCA4                            ; Sprite mappings - points that	appear when you	destroy	something
0000BCA4                            ; ---------------------------------------------------------------------------
0000BCA4                            Map_obj29:
0000BCA4                            	include "_maps\obj29.asm"
0000BCA4                            ; ---------------------------------------------------------------------------
0000BCA4                            ; Sprite mappings - points that	appear when you	destroy	something
0000BCA4                            ; ---------------------------------------------------------------------------
0000BCA4 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000BCA8 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000BCAC 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000BCB0 0000                       		dc.w byte_94E5-Map_obj29
0000BCB2 01                         byte_94BC:	dc.b 1
0000BCB3 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000BCB8 01                         byte_94C2:	dc.b 1
0000BCB9 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000BCBE 01                         byte_94C8:	dc.b 1
0000BCBF FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000BCC4 01                         byte_94CE:	dc.b 1
0000BCC5 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000BCCA 01                         byte_94D4:	dc.b 1
0000BCCB FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000BCD0 02                         byte_94DA:	dc.b 2
0000BCD1 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000BCD6 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000BCDB 02                         byte_94E5:	dc.b 2
0000BCDC FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000BCE1 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000BCE6                            		even
0000BCE6                            		even
0000BCE6                            
0000BCE6                            ; ===========================================================================
0000BCE6                            ; ---------------------------------------------------------------------------
0000BCE6                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000BCE6                            ; ---------------------------------------------------------------------------
0000BCE6                            
0000BCE6                            Obj1F:					; XREF: Obj_Index
0000BCE6 7000                       		moveq	#0,d0
0000BCE8 1028 0024                  		move.b	$24(a0),d0
0000BCEC 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000BCF0 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000BCF4                            ; ===========================================================================
0000BCF4 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000BCF6 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000BCF8 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000BCFA 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000BCFC 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000BCFE                            ; ===========================================================================
0000BCFE                            
0000BCFE                            Obj1F_Main:				; XREF: Obj1F_Index
0000BCFE 117C 0010 0016             		move.b	#$10,$16(a0)
0000BD04 117C 0008 0017             		move.b	#8,$17(a0)
0000BD0A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000BD12 317C 0400 0002             		move.w	#$400,2(a0)
0000BD18 117C 0004 0001             		move.b	#4,1(a0)
0000BD1E 117C 0003 0018             		move.b	#3,$18(a0)
0000BD24 117C 0006 0020             		move.b	#6,$20(a0)
0000BD2A 117C 0015 0019             		move.b	#$15,$19(a0)
0000BD30 6100 0000                  		bsr.w	ObjectFall
0000BD34 4EB9 0000 0000             		jsr	ObjHitFloor
0000BD3A 4A41                       		tst.w	d1
0000BD3C 6A00                       		bpl.s	locret_955A
0000BD3E D368 000C                  		add.w	d1,$C(a0)
0000BD42 1143 0026                  		move.b	d3,$26(a0)
0000BD46 317C 0000 0012             		move.w	#0,$12(a0)
0000BD4C 5428 0024                  		addq.b	#2,$24(a0)
0000BD50                            
0000BD50                            locret_955A:
0000BD50 4E75                       		rts	
0000BD52                            ; ===========================================================================
0000BD52                            
0000BD52                            Obj1F_Action:				; XREF: Obj1F_Index
0000BD52 7000                       		moveq	#0,d0
0000BD54 1028 0025                  		move.b	$25(a0),d0
0000BD58 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000BD5C 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000BD60 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000BD66 6100 0000                  		bsr.w	AnimateSprite
0000BD6A 6000 0000                  		bra.w	MarkObjGone
0000BD6E                            ; ===========================================================================
0000BD6E 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000BD70 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000BD72                            ; ===========================================================================
0000BD72                            
0000BD72                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000BD72 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000BD76 6A00                       		bpl.s	locret_95B6
0000BD78 4A28 0001                  		tst.b	1(a0)
0000BD7C 6A00                       		bpl.s	Obj1F_Move
0000BD7E 0868 0001 0032             		bchg	#1,$32(a0)
0000BD84 6600                       		bne.s	Obj1F_MakeFire
0000BD86                            
0000BD86                            Obj1F_Move:
0000BD86 5428 0025                  		addq.b	#2,$25(a0)
0000BD8A 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000BD90 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000BD96 6100 0000                  		bsr.w	Obj1F_SetAni
0000BD9A 5600                       		addq.b	#3,d0
0000BD9C 1140 001C                  		move.b	d0,$1C(a0)
0000BDA0 0868 0000 0022             		bchg	#0,$22(a0)
0000BDA6 6600                       		bne.s	locret_95B6
0000BDA8 4468 0010                  		neg.w	$10(a0)		; change direction
0000BDAC                            
0000BDAC                            locret_95B6:
0000BDAC 4E75                       		rts	
0000BDAE                            ; ===========================================================================
0000BDAE                            
0000BDAE                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000BDAE 317C 003B 0030             		move.w	#$3B,$30(a0)
0000BDB4 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000BDBA 6100 0000                  		bsr.w	SingleObjLoad
0000BDBE 6600                       		bne.s	Obj1F_MakeFire2
0000BDC0 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000BDC4 137C 0006 0024             		move.b	#6,$24(a1)
0000BDCA 3368 0008 0008             		move.w	8(a0),8(a1)
0000BDD0 0469 0010 0008             		subi.w	#$10,8(a1)
0000BDD6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BDDC 337C FF00 0010             		move.w	#-$100,$10(a1)
0000BDE2                            
0000BDE2                            Obj1F_MakeFire2:
0000BDE2 6100 0000                  		bsr.w	SingleObjLoad
0000BDE6 6600                       		bne.s	locret_9618
0000BDE8 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000BDEC 137C 0006 0024             		move.b	#6,$24(a1)
0000BDF2 3368 0008 0008             		move.w	8(a0),8(a1)
0000BDF8 0669 0010 0008             		addi.w	#$10,8(a1)
0000BDFE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BE04 337C 0100 0010             		move.w	#$100,$10(a1)
0000BE0A                            
0000BE0A                            locret_9618:
0000BE0A 4E75                       		rts	
0000BE0C                            ; ===========================================================================
0000BE0C                            
0000BE0C                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000BE0C 5368 0030                  		subq.w	#1,$30(a0)
0000BE10 6B00                       		bmi.s	loc_966E
0000BE12 6100 0000                  		bsr.w	SpeedToPos
0000BE16 0868 0000 0032             		bchg	#0,$32(a0)
0000BE1C 6600                       		bne.s	loc_9654
0000BE1E 3628 0008                  		move.w	8(a0),d3
0000BE22 0643 0010                  		addi.w	#$10,d3
0000BE26 0828 0000 0022             		btst	#0,$22(a0)
0000BE2C 6700                       		beq.s	loc_9640
0000BE2E 0443 0020                  		subi.w	#$20,d3
0000BE32                            
0000BE32                            loc_9640:
0000BE32 4EB9 0000 0000             		jsr	ObjHitFloor2
0000BE38 0C41 FFF8                  		cmpi.w	#-8,d1
0000BE3C 6D00                       		blt.s	loc_966E
0000BE3E 0C41 000C                  		cmpi.w	#$C,d1
0000BE42 6C00                       		bge.s	loc_966E
0000BE44 4E75                       		rts	
0000BE46                            ; ===========================================================================
0000BE46                            
0000BE46                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000BE46 4EB9 0000 0000             		jsr	ObjHitFloor
0000BE4C D368 000C                  		add.w	d1,$C(a0)
0000BE50 1143 0026                  		move.b	d3,$26(a0)
0000BE54 6100 0000                  		bsr.w	Obj1F_SetAni
0000BE58 5600                       		addq.b	#3,d0
0000BE5A 1140 001C                  		move.b	d0,$1C(a0)
0000BE5E 4E75                       		rts	
0000BE60                            ; ===========================================================================
0000BE60                            
0000BE60                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000BE60 5528 0025                  		subq.b	#2,$25(a0)
0000BE64 317C 003B 0030             		move.w	#59,$30(a0)
0000BE6A 317C 0000 0010             		move.w	#0,$10(a0)
0000BE70 6100 0000                  		bsr.w	Obj1F_SetAni
0000BE74 1140 001C                  		move.b	d0,$1C(a0)
0000BE78 4E75                       		rts	
0000BE7A                            ; ---------------------------------------------------------------------------
0000BE7A                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000BE7A                            ; ---------------------------------------------------------------------------
0000BE7A                            
0000BE7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE7A                            
0000BE7A                            
0000BE7A                            Obj1F_SetAni:				; XREF: loc_966E
0000BE7A 7000                       		moveq	#0,d0
0000BE7C 1628 0026                  		move.b	$26(a0),d3
0000BE80 6B00                       		bmi.s	loc_96A4
0000BE82 0C03 0006                  		cmpi.b	#6,d3
0000BE86 6500                       		bcs.s	locret_96A2
0000BE88 7001                       		moveq	#1,d0
0000BE8A 0828 0000 0022             		btst	#0,$22(a0)
0000BE90 6600                       		bne.s	locret_96A2
0000BE92 7002                       		moveq	#2,d0
0000BE94                            
0000BE94                            locret_96A2:
0000BE94 4E75                       		rts	
0000BE96                            ; ===========================================================================
0000BE96                            
0000BE96                            loc_96A4:				; XREF: Obj1F_SetAni
0000BE96 0C03 00FA                  		cmpi.b	#-6,d3
0000BE9A 6200                       		bhi.s	locret_96B6
0000BE9C 7002                       		moveq	#2,d0
0000BE9E 0828 0000 0022             		btst	#0,$22(a0)
0000BEA4 6600                       		bne.s	locret_96B6
0000BEA6 7001                       		moveq	#1,d0
0000BEA8                            
0000BEA8                            locret_96B6:
0000BEA8 4E75                       		rts	
0000BEAA                            ; End of function Obj1F_SetAni
0000BEAA                            
0000BEAA                            ; ===========================================================================
0000BEAA                            
0000BEAA                            Obj1F_Delete:				; XREF: Obj1F_Index
0000BEAA 6100 0000                  		bsr.w	DeleteObject
0000BEAE 4E75                       		rts	
0000BEB0                            ; ===========================================================================
0000BEB0                            ; ---------------------------------------------------------------------------
0000BEB0                            ; Sub-object - missile that the	Crabmeat throws
0000BEB0                            ; ---------------------------------------------------------------------------
0000BEB0                            
0000BEB0                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000BEB0 5428 0024                  		addq.b	#2,$24(a0)
0000BEB4 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000BEBC 317C 0400 0002             		move.w	#$400,2(a0)
0000BEC2 117C 0004 0001             		move.b	#4,1(a0)
0000BEC8 117C 0003 0018             		move.b	#3,$18(a0)
0000BECE 117C 0087 0020             		move.b	#$87,$20(a0)
0000BED4 117C 0008 0019             		move.b	#8,$19(a0)
0000BEDA 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BEE0 117C 0007 001C             		move.b	#7,$1C(a0)
0000BEE6                            
0000BEE6                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000BEE6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000BEEC 6100 0000                  		bsr.w	AnimateSprite
0000BEF0 6100 0000                  		bsr.w	ObjectFall
0000BEF4 6100 0000                  		bsr.w	DisplaySprite
0000BEF8 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000BEFC 0640 00E0                  		addi.w	#$E0,d0
0000BF00 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000BF04 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000BF06 4E75                       		rts	
0000BF08                            ; ===========================================================================
0000BF08                            
0000BF08                            Obj1F_Delete2:
0000BF08 6000 0000                  		bra.w	DeleteObject
0000BF0C                            ; ===========================================================================
0000BF0C                            Ani_obj1F:
0000BF0C                            	include "_anim\obj1F.asm"
0000BF0C                            ; ---------------------------------------------------------------------------
0000BF0C                            ; Animation script - Crabmeat enemy
0000BF0C                            ; ---------------------------------------------------------------------------
0000BF0C 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000BF12 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000BF18 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000BF1C 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000BF20 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000BF24 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000BF28 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000BF2E 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000BF34 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000BF3A 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000BF3E 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000BF42                            		even
0000BF42                            		even
0000BF42                            
0000BF42                            ; ---------------------------------------------------------------------------
0000BF42                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000BF42                            ; ---------------------------------------------------------------------------
0000BF42                            Map_obj1F:
0000BF42                            	include "_maps\obj1F.asm"
0000BF42                            ; ---------------------------------------------------------------------------
0000BF42                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000BF42                            ; ---------------------------------------------------------------------------
0000BF42 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000BF46 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000BF4A 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000BF4E 0000                       		dc.w byte_97D7-Map_obj1F
0000BF50 04                         byte_975E:	dc.b 4
0000BF51 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000BF56 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000BF5B 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000BF60 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000BF65 04                         byte_9773:	dc.b 4
0000BF66 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000BF6B F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000BF70 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000BF75 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000BF7A 04                         byte_9788:	dc.b 4
0000BF7B EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000BF80 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000BF85 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000BF8A FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000BF8F 04                         byte_979D:	dc.b 4
0000BF90 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000BF95 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000BF9A FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000BF9F FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000BFA4 06                         byte_97B2:	dc.b 6
0000BFA5 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000BFAA F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000BFAF F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000BFB4 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000BFB9 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000BFBE 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000BFC3 01                         byte_97D1:	dc.b 1
0000BFC4 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000BFC9 01                         byte_97D7:	dc.b 1
0000BFCA F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000BFD0 00                         		even
0000BFD0 00                         		even
0000BFD0                            
0000BFD0                            ; ===========================================================================
0000BFD0                            ; ---------------------------------------------------------------------------
0000BFD0                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000BFD0                            ; ---------------------------------------------------------------------------
0000BFD0                            
0000BFD0                            Obj22:					; XREF: Obj_Index
0000BFD0 7000                       		moveq	#0,d0
0000BFD2 1028 0024                  		move.b	$24(a0),d0
0000BFD6 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000BFDA 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000BFDE                            ; ===========================================================================
0000BFDE 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000BFE0 0000                       		dc.w Obj22_Action-Obj22_Index
0000BFE2 0000                       		dc.w Obj22_Delete-Obj22_Index
0000BFE4                            ; ===========================================================================
0000BFE4                            
0000BFE4                            Obj22_Main:				; XREF: Obj22_Index
0000BFE4 5428 0024                  		addq.b	#2,$24(a0)
0000BFE8 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000BFF0 317C 0444 0002             		move.w	#$444,2(a0)
0000BFF6 117C 0004 0001             		move.b	#4,1(a0)
0000BFFC 117C 0003 0018             		move.b	#3,$18(a0)
0000C002 117C 0008 0020             		move.b	#8,$20(a0)
0000C008 117C 0018 0019             		move.b	#$18,$19(a0)
0000C00E                            
0000C00E                            Obj22_Action:				; XREF: Obj22_Index
0000C00E 7000                       		moveq	#0,d0
0000C010 1028 0025                  		move.b	$25(a0),d0
0000C014 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000C018 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000C01C 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000C022 6100 0000                  		bsr.w	AnimateSprite
0000C026 6000 0000                  		bra.w	MarkObjGone
0000C02A                            ; ===========================================================================
0000C02A 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000C02C 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000C02E                            ; ===========================================================================
0000C02E                            
0000C02E                            Obj22_Move:				; XREF: Obj22_Index2
0000C02E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000C032 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000C034 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000C03A 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000C03C 5428 0025                  		addq.b	#2,$25(a0)
0000C040 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000C046 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000C04C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000C052 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000C058 6600                       		bne.s	locret_986C	; if not, branch
0000C05A 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000C05E                            
0000C05E                            locret_986C:
0000C05E 4E75                       		rts	
0000C060                            ; ===========================================================================
0000C060                            
0000C060                            Obj22_Fire:				; XREF: Obj22_Move
0000C060 6100 0000                  		bsr.w	SingleObjLoad
0000C064 6600                       		bne.s	locret_98D0
0000C066 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000C06A 3368 0008 0008             		move.w	8(a0),8(a1)
0000C070 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C076 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000C07C 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000C082 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000C088 303C 0018                  		move.w	#$18,d0
0000C08C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000C092 6600                       		bne.s	loc_98AA	; if not, branch
0000C094 4440                       		neg.w	d0
0000C096 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000C09A                            
0000C09A                            loc_98AA:
0000C09A D169 0008                  		add.w	d0,8(a1)
0000C09E 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000C0A4 337C 000E 0032             		move.w	#$E,$32(a1)
0000C0AA 2348 003C                  		move.l	a0,$3C(a1)
0000C0AE 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000C0B4 317C 003B 0032             		move.w	#$3B,$32(a0)
0000C0BA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000C0C0                            
0000C0C0                            locret_98D0:
0000C0C0 4E75                       		rts	
0000C0C2                            ; ===========================================================================
0000C0C2                            
0000C0C2                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000C0C2 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000C0C6 6B00                       		bmi.s	Obj22_ChgDir
0000C0C8 6100 0000                  		bsr.w	SpeedToPos
0000C0CC 4A28 0034                  		tst.b	$34(a0)
0000C0D0 6600                       		bne.s	locret_992A
0000C0D2 3038 D008                  		move.w	($FFFFD008).w,d0
0000C0D6 9068 0008                  		sub.w	8(a0),d0
0000C0DA 6A00                       		bpl.s	Obj22_SetNrSonic
0000C0DC 4440                       		neg.w	d0
0000C0DE                            
0000C0DE                            Obj22_SetNrSonic:
0000C0DE 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000C0E2 6400                       		bcc.s	locret_992A	; if not, branch
0000C0E4 4A28 0001                  		tst.b	1(a0)
0000C0E8 6A00                       		bpl.s	locret_992A
0000C0EA 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000C0F0 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000C0F6 6000                       		bra.s	Obj22_Stop
0000C0F8                            ; ===========================================================================
0000C0F8                            
0000C0F8                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000C0F8 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000C0FE 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000C104 317C 003B 0032             		move.w	#59,$32(a0)
0000C10A                            
0000C10A                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000C10A 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000C10E 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000C114 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000C11A                            
0000C11A                            locret_992A:
0000C11A 4E75                       		rts	
0000C11C                            ; ===========================================================================
0000C11C                            
0000C11C                            Obj22_Delete:				; XREF: Obj22_Index
0000C11C 6100 0000                  		bsr.w	DeleteObject
0000C120 4E75                       		rts	
0000C122                            ; ===========================================================================
0000C122                            ; ---------------------------------------------------------------------------
0000C122                            ; Object 23 - missile that Buzz	Bomber throws
0000C122                            ; ---------------------------------------------------------------------------
0000C122                            
0000C122                            Obj23:					; XREF: Obj_Index
0000C122 7000                       		moveq	#0,d0
0000C124 1028 0024                  		move.b	$24(a0),d0
0000C128 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000C12C 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000C130                            ; ===========================================================================
0000C130 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000C132 0000                       		dc.w Obj23_Animate-Obj23_Index
0000C134 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000C136 0000                       		dc.w Obj23_Delete-Obj23_Index
0000C138 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000C13A                            ; ===========================================================================
0000C13A                            
0000C13A                            Obj23_Main:				; XREF: Obj23_Index
0000C13A 5368 0032                  		subq.w	#1,$32(a0)
0000C13E 6A00                       		bpl.s	Obj23_ChkCancel
0000C140 5428 0024                  		addq.b	#2,$24(a0)
0000C144 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000C14C 317C 2444 0002             		move.w	#$2444,2(a0)
0000C152 117C 0004 0001             		move.b	#4,1(a0)
0000C158 117C 0003 0018             		move.b	#3,$18(a0)
0000C15E 117C 0008 0019             		move.b	#8,$19(a0)
0000C164 0228 0003 0022             		andi.b	#3,$22(a0)
0000C16A 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000C16E 6700                       		beq.s	Obj23_Animate	; if not, branch
0000C170 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000C176 117C 0087 0020             		move.b	#$87,$20(a0)
0000C17C 117C 0001 001C             		move.b	#1,$1C(a0)
0000C182 6000                       		bra.s	Obj23_Animate2
0000C184                            ; ===========================================================================
0000C184                            
0000C184                            Obj23_Animate:				; XREF: Obj23_Index
0000C184 6100                       		bsr.s	Obj23_ChkCancel
0000C186 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000C18C 6100 0000                  		bsr.w	AnimateSprite
0000C190 6000 0000                  		bra.w	DisplaySprite
0000C194                            ; ---------------------------------------------------------------------------
0000C194                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000C194                            ; destroyed, and if it has, then cancel	the missile
0000C194                            ; ---------------------------------------------------------------------------
0000C194                            
0000C194                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C194                            
0000C194                            
0000C194                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000C194 2268 003C                  		movea.l	$3C(a0),a1
0000C198 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000C19C 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000C19E 4E75                       		rts	
0000C1A0                            ; End of function Obj23_ChkCancel
0000C1A0                            
0000C1A0                            ; ===========================================================================
0000C1A0                            
0000C1A0                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000C1A0 0828 0007 0022             		btst	#7,$22(a0)
0000C1A6 6600                       		bne.s	Obj23_Explode
0000C1A8 117C 0087 0020             		move.b	#$87,$20(a0)
0000C1AE 117C 0001 001C             		move.b	#1,$1C(a0)
0000C1B4 6100 0000                  		bsr.w	SpeedToPos
0000C1B8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000C1BE 6100 0000                  		bsr.w	AnimateSprite
0000C1C2 6100 0000                  		bsr.w	DisplaySprite
0000C1C6 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000C1CA 0640 00E0                  		addi.w	#$E0,d0
0000C1CE B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000C1D2 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000C1D4 4E75                       		rts	
0000C1D6                            ; ===========================================================================
0000C1D6                            
0000C1D6                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000C1D6 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000C1DA 117C 0000 0024             		move.b	#0,$24(a0)
0000C1E0 6000 F280                  		bra.w	Obj24
0000C1E4                            ; ===========================================================================
0000C1E4                            
0000C1E4                            Obj23_Delete:				; XREF: Obj23_Index
0000C1E4 6100 0000                  		bsr.w	DeleteObject
0000C1E8 4E75                       		rts	
0000C1EA                            ; ===========================================================================
0000C1EA                            
0000C1EA                            Obj23_FromNewt:				; XREF: Obj23_Index
0000C1EA 4A28 0001                  		tst.b	1(a0)
0000C1EE 6AF4                       		bpl.s	Obj23_Delete
0000C1F0 6100 0000                  		bsr.w	SpeedToPos
0000C1F4                            
0000C1F4                            Obj23_Animate2:				; XREF: Obj23_Main
0000C1F4 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000C1FA 6100 0000                  		bsr.w	AnimateSprite
0000C1FE 6100 0000                  		bsr.w	DisplaySprite
0000C202 4E75                       		rts	
0000C204                            ; ===========================================================================
0000C204                            Ani_obj22:
0000C204                            	include "_anim\obj22.asm"
0000C204                            ; ---------------------------------------------------------------------------
0000C204                            ; Animation script - Buzz Bomber enemy
0000C204                            ; ---------------------------------------------------------------------------
0000C204 0000                       		dc.w byte_9A1E-Ani_obj22
0000C206 0000                       		dc.w byte_9A22-Ani_obj22
0000C208 0000                       		dc.w byte_9A26-Ani_obj22
0000C20A 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000C20E 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000C212 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000C216                            		even
0000C216                            		even
0000C216                            
0000C216                            Ani_obj23:
0000C216                            	include "_anim\obj23.asm"
0000C216                            ; ---------------------------------------------------------------------------
0000C216                            ; Animation script - missile that Buzz Bomber throws
0000C216                            ; ---------------------------------------------------------------------------
0000C216 0000                       		dc.w byte_9A2E-Ani_obj23
0000C218 0000                       		dc.w byte_9A32-Ani_obj23
0000C21A 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000C21E 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000C222                            		even
0000C222                            		even
0000C222                            
0000C222                            ; ---------------------------------------------------------------------------
0000C222                            ; Sprite mappings - Buzz Bomber	enemy
0000C222                            ; ---------------------------------------------------------------------------
0000C222                            Map_obj22:
0000C222                            	include "_maps\obj22.asm"
0000C222                            ; ---------------------------------------------------------------------------
0000C222                            ; Sprite mappings - Buzz Bomber	enemy
0000C222                            ; ---------------------------------------------------------------------------
0000C222 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000C226 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000C22A 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000C22E 06                         byte_9A42:	dc.b 6
0000C22F F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000C234 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000C239 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000C23E 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000C243 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000C248 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000C24D 06                         byte_9A61:	dc.b 6
0000C24E F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000C253 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000C258 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000C25D 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000C262 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000C267 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000C26C 07                         byte_9A80:	dc.b 7
0000C26D 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000C272 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000C277 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000C27C 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000C281 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000C286 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000C28B F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000C290 07                         byte_9AA4:	dc.b 7
0000C291 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000C296 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000C29B F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000C2A0 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000C2A5 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000C2AA F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000C2AF F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000C2B4 06                         byte_9AC8:	dc.b 6
0000C2B5 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000C2BA 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000C2BF 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000C2C4 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000C2C9 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000C2CE F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000C2D3 04                         byte_9AE7:	dc.b 4
0000C2D4 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000C2D9 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000C2DE 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000C2E3 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000C2E8 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000C2ED F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000C2F2                            		even
0000C2F2                            		even
0000C2F2                            
0000C2F2                            ; ---------------------------------------------------------------------------
0000C2F2                            ; Sprite mappings - missile that Buzz Bomber throws
0000C2F2                            ; ---------------------------------------------------------------------------
0000C2F2                            Map_obj23:
0000C2F2                            	include "_maps\obj23.asm"
0000C2F2                            ; ---------------------------------------------------------------------------
0000C2F2                            ; Sprite mappings - missile that Buzz Bomber throws
0000C2F2                            ; ---------------------------------------------------------------------------
0000C2F2 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000C2F6 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000C2FA 01                         byte_9B0E:	dc.b 1
0000C2FB F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000C300 01                         byte_9B14:	dc.b 1
0000C301 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000C306 01                         byte_9B1A:	dc.b 1
0000C307 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000C30C 01                         byte_9B20:	dc.b 1
0000C30D F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000C312                            		even
0000C312                            		even
0000C312                            
0000C312                            ; ===========================================================================
0000C312                            ; ---------------------------------------------------------------------------
0000C312                            ; Object 25 - rings
0000C312                            ; ---------------------------------------------------------------------------
0000C312                            
0000C312                            Obj25:					; XREF: Obj_Index
0000C312 7000                       		moveq	#0,d0
0000C314 1028 0024                  		move.b	$24(a0),d0
0000C318 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000C31C 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000C320                            ; ===========================================================================
0000C320 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000C322 0000                       		dc.w Obj25_Animate-Obj25_Index
0000C324 0000                       		dc.w Obj25_Collect-Obj25_Index
0000C326 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000C328 0000                       		dc.w Obj25_Delete-Obj25_Index
0000C32A                            ; ---------------------------------------------------------------------------
0000C32A                            ; Distances between rings (format: horizontal, vertical)
0000C32A                            ; ---------------------------------------------------------------------------
0000C32A 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000C32C 1800                       		dc.b $18, 0		; horizontal normal
0000C32E 2000                       		dc.b $20, 0		; horizontal wide
0000C330 0010                       		dc.b 0,	$10		; vertical tight
0000C332 0018                       		dc.b 0,	$18		; vertical normal
0000C334 0020                       		dc.b 0,	$20		; vertical wide
0000C336 1010                       		dc.b $10, $10		; diagonal
0000C338 1818                       		dc.b $18, $18
0000C33A 2020                       		dc.b $20, $20
0000C33C F010                       		dc.b $F0, $10
0000C33E E818                       		dc.b $E8, $18
0000C340 E020                       		dc.b $E0, $20
0000C342 1008                       		dc.b $10, 8
0000C344 1810                       		dc.b $18, $10
0000C346 F008                       		dc.b $F0, 8
0000C348 E810                       		dc.b $E8, $10
0000C34A                            ; ===========================================================================
0000C34A                            
0000C34A                            Obj25_Main:				; XREF: Obj25_Index
0000C34A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C34E 7000                       		moveq	#0,d0
0000C350 1028 0023                  		move.b	$23(a0),d0
0000C354 45F2 0002                  		lea	2(a2,d0.w),a2
0000C358 1812                       		move.b	(a2),d4
0000C35A 1228 0028                  		move.b	$28(a0),d1
0000C35E 1001                       		move.b	d1,d0
0000C360 0241 0007                  		andi.w	#7,d1
0000C364 0C41 0007                  		cmpi.w	#7,d1
0000C368 6600                       		bne.s	loc_9B80
0000C36A 7206                       		moveq	#6,d1
0000C36C                            
0000C36C                            loc_9B80:
0000C36C 4841                       		swap	d1
0000C36E 323C 0000                  		move.w	#0,d1
0000C372 E808                       		lsr.b	#4,d0
0000C374 D040                       		add.w	d0,d0
0000C376 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000C37A 4885                       		ext.w	d5
0000C37C 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000C380 4886                       		ext.w	d6
0000C382 2248                       		movea.l	a0,a1
0000C384 3428 0008                  		move.w	8(a0),d2
0000C388 3628 000C                  		move.w	$C(a0),d3
0000C38C E20C                       		lsr.b	#1,d4
0000C38E 6500                       		bcs.s	loc_9C02
0000C390 0892 0007                  		bclr	#7,(a2)
0000C394 6000                       		bra.s	loc_9BBA
0000C396                            ; ===========================================================================
0000C396                            
0000C396                            Obj25_MakeRings:
0000C396 4841                       		swap	d1
0000C398 E20C                       		lsr.b	#1,d4
0000C39A 6500                       		bcs.s	loc_9C02
0000C39C 0892 0007                  		bclr	#7,(a2)
0000C3A0 6100 0000                  		bsr.w	SingleObjLoad
0000C3A4 6600                       		bne.s	loc_9C0E
0000C3A6                            
0000C3A6                            loc_9BBA:				; XREF: Obj25_Main
0000C3A6 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000C3AA 5429 0024                  		addq.b	#2,$24(a1)
0000C3AE 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000C3B2 3368 0008 0032             		move.w	8(a0),$32(a1)
0000C3B8 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000C3BC 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000C3C4 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000C3CA 137C 0004 0001             		move.b	#4,1(a1)
0000C3D0 137C 0002 0018             		move.b	#2,$18(a1)
0000C3D6 137C 0047 0020             		move.b	#$47,$20(a1)
0000C3DC 137C 0008 0019             		move.b	#8,$19(a1)
0000C3E2 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000C3E8 1341 0034                  		move.b	d1,$34(a1)
0000C3EC                            
0000C3EC                            loc_9C02:
0000C3EC 5241                       		addq.w	#1,d1
0000C3EE D445                       		add.w	d5,d2		; add ring spacing value to d2
0000C3F0 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000C3F2 4841                       		swap	d1
0000C3F4 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000C3F8                            
0000C3F8                            loc_9C0E:
0000C3F8 0812 0000                  		btst	#0,(a2)
0000C3FC 6600 0000                  		bne.w	DeleteObject
0000C400                            
0000C400                            Obj25_Animate:				; XREF: Obj25_Index
0000C400 4EB9 0000 0000             		jsr     Magnetizar		; Magnetizar anillos
0000C406 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000C40C 6100 0000                  		bsr.w	DisplaySprite
0000C410 3028 0032                  		move.w	$32(a0),d0
0000C414 0240 FF80                  		andi.w	#$FF80,d0
0000C418 3238 F700                  		move.w	($FFFFF700).w,d1
0000C41C 0441 0080                  		subi.w	#$80,d1
0000C420 0241 FF80                  		andi.w	#$FF80,d1
0000C424 9041                       		sub.w	d1,d0
0000C426 0C40 0280                  		cmpi.w	#$280,d0
0000C42A 6200                       		bhi.s	Obj25_Delete
0000C42C 4E75                       		rts	
0000C42E                            ; ===========================================================================
0000C42E                            
0000C42E                            Obj25_Collect:				; XREF: Obj25_Index
0000C42E 5428 0024                  		addq.b	#2,$24(a0)
0000C432 117C 0000 0020             		move.b	#0,$20(a0)
0000C438 117C 0001 0018             		move.b	#1,$18(a0)
0000C43E 6100 0000                  		bsr.w	CollectRing
0000C442 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C446 7000                       		moveq	#0,d0
0000C448 1028 0023                  		move.b	$23(a0),d0
0000C44C 1228 0034                  		move.b	$34(a0),d1
0000C450 03F2 0002                  		bset	d1,2(a2,d0.w)
0000C454                            
0000C454                            Obj25_Sparkle:				; XREF: Obj25_Index
0000C454 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000C45A 6100 0000                  		bsr.w	AnimateSprite
0000C45E 6000 0000                  		bra.w	DisplaySprite
0000C462                            ; ===========================================================================
0000C462                            
0000C462                            Obj25_Delete:				; XREF: Obj25_Index
0000C462 6000 0000                  		bra.w	DeleteObject
0000C466                            
0000C466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C466                            
0000C466                            
0000C466                            CollectRing:				; XREF: Obj25_Collect
0000C466 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000C46A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000C470 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000C474 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000C47A 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000C47C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000C482 6700                       		beq.s	loc_9CA4
0000C484 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000C48A 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000C48C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000C492 6600                       		bne.s	Obj25_PlaySnd
0000C494                            
0000C494                            loc_9CA4:
0000C494 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000C498 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000C49C 303C 0088                  		move.w	#$88,d0		; play extra life music
0000C4A0                            
0000C4A0                            Obj25_PlaySnd:
0000C4A0 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l
0000C4A6                            ; End of function CollectRing
0000C4A6                            
0000C4A6                            ; ===========================================================================
0000C4A6                            ; ---------------------------------------------------------------------------
0000C4A6                            ; Object 37 - rings flying out of Sonic	when he's hit
0000C4A6                            ; ---------------------------------------------------------------------------
0000C4A6                            
0000C4A6                            Obj37:					; XREF: Obj_Index
0000C4A6 7000                       		moveq	#0,d0
0000C4A8 1028 0024                  		move.b	$24(a0),d0
0000C4AC 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000C4B0 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000C4B4                            ; ===========================================================================
0000C4B4 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000C4B6 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000C4B8 0000                       		dc.w Obj37_Collect-Obj37_Index
0000C4BA 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000C4BC 0000                       		dc.w Obj37_Delete-Obj37_Index
0000C4BE                            ; ===========================================================================
0000C4BE                            
0000C4BE                            Obj37_CountRings:			; XREF: Obj37_Index
0000C4BE 2248                       		movea.l	a0,a1
0000C4C0 7A00                       		moveq	#0,d5
0000C4C2 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000C4C6 7020                       		moveq	#32,d0
0000C4C8 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000C4CA 6500                       		bcs.s	loc_9CDE	; if not, branch
0000C4CC 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000C4CE                            
0000C4CE                            loc_9CDE:
0000C4CE 5345                       		subq.w	#1,d5
0000C4D0 383C 0288                  		move.w	#$288,d4
0000C4D4 6000                       		bra.s	Obj37_MakeRings
0000C4D6                            ; ===========================================================================
0000C4D6                            
0000C4D6                            Obj37_Loop:
0000C4D6 6100 0000                  		bsr.w	SingleObjLoad
0000C4DA 6600 0000                  		bne.w	Obj37_ResetCounter
0000C4DE                            
0000C4DE                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000C4DE 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000C4E2 5429 0024                  		addq.b	#2,$24(a1)
0000C4E6 137C 0008 0016             		move.b	#8,$16(a1)
0000C4EC 137C 0008 0017             		move.b	#8,$17(a1)
0000C4F2 3368 0008 0008             		move.w	8(a0),8(a1)
0000C4F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C4FE 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000C506 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000C50C 137C 0004 0001             		move.b	#4,1(a1)
0000C512 137C 0003 0018             		move.b	#3,$18(a1)
0000C518 137C 0047 0020             		move.b	#$47,$20(a1)
0000C51E 137C 0008 0019             		move.b	#8,$19(a1)
0000C524 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000C52A 4A44                       		tst.w	d4
0000C52C 6B00                       		bmi.s	loc_9D62
0000C52E 3004                       		move.w	d4,d0
0000C530 4EB8 3798                  		jsr	CalcSine
0000C534 3404                       		move.w	d4,d2
0000C536 E04A                       		lsr.w	#8,d2
0000C538 E560                       		asl.w	d2,d0
0000C53A E561                       		asl.w	d2,d1
0000C53C 3400                       		move.w	d0,d2
0000C53E 3601                       		move.w	d1,d3
0000C540 0604 0010                  		addi.b	#$10,d4
0000C544 6400                       		bcc.s	loc_9D62
0000C546 0444 0080                  		subi.w	#$80,d4
0000C54A 6400                       		bcc.s	loc_9D62
0000C54C 383C 0288                  		move.w	#$288,d4
0000C550                            
0000C550                            loc_9D62:
0000C550 3342 0010                  		move.w	d2,$10(a1)
0000C554 3343 0012                  		move.w	d3,$12(a1)
0000C558 4442                       		neg.w	d2
0000C55A 4444                       		neg.w	d4
0000C55C 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000C560                            
0000C560                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000C560 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000C566 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000C56C 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000C572 303C 00C6                  		move.w	#$C6,d0
0000C576 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000C57C                            
0000C57C                            Obj37_Bounce:				; XREF: Obj37_Index
0000C57C 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000C582 6100 0000                  		bsr.w	SpeedToPos
0000C586 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C58C 6B00                       		bmi.s	Obj37_ChkDel
0000C58E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C592 D007                       		add.b	d7,d0
0000C594 0200 0003                  		andi.b	#3,d0
0000C598 6600                       		bne.s	Obj37_ChkDel
0000C59A 4EB9 0000 0000             		jsr	ObjHitFloor
0000C5A0 4A41                       		tst.w	d1
0000C5A2 6A00                       		bpl.s	Obj37_ChkDel
0000C5A4 D368 000C                  		add.w	d1,$C(a0)
0000C5A8 3028 0012                  		move.w	$12(a0),d0
0000C5AC E440                       		asr.w	#2,d0
0000C5AE 9168 0012                  		sub.w	d0,$12(a0)
0000C5B2 4468 0012                  		neg.w	$12(a0)
0000C5B6                            
0000C5B6                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000C5B6 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000C5BA 6700                       		beq.s	Obj37_Delete
0000C5BC 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000C5C0 0640 00E0                  		addi.w	#$E0,d0
0000C5C4 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000C5C8 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000C5CA 6000 0000                  		bra.w	DisplaySprite
0000C5CE                            ; ===========================================================================
0000C5CE                            
0000C5CE                            Obj37_Collect:				; XREF: Obj37_Index
0000C5CE 5428 0024                  		addq.b	#2,$24(a0)
0000C5D2 117C 0000 0020             		move.b	#0,$20(a0)
0000C5D8 117C 0001 0018             		move.b	#1,$18(a0)
0000C5DE 6100 FE86                  		bsr.w	CollectRing
0000C5E2                            
0000C5E2                            Obj37_Sparkle:				; XREF: Obj37_Index
0000C5E2 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000C5E8 6100 0000                  		bsr.w	AnimateSprite
0000C5EC 6000 0000                  		bra.w	DisplaySprite
0000C5F0                            ; ===========================================================================
0000C5F0                            
0000C5F0                            Obj37_Delete:				; XREF: Obj37_Index
0000C5F0 6000 0000                  		bra.w	DeleteObject
0000C5F4                            ; ===========================================================================
0000C5F4                            ; ---------------------------------------------------------------------------
0000C5F4                            ; Object 4B - giant ring for entry to special stage
0000C5F4                            ; ---------------------------------------------------------------------------
0000C5F4                            
0000C5F4                            Obj4B:					; XREF: Obj_Index
0000C5F4 1438 FF9D                  		move.b	($FFFFFF9D).w,d2
0000C5F8 B428 0028                  		cmp.b	$28(a0),d2
0000C5FC 6700 0000                  		beq	Obj4B_Restart
0000C600 7000                       		moveq	#0,d0
0000C602 1028 0024                  		move.b	$24(a0),d0
0000C606 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000C60A 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000C60E                            ; ===========================================================================
0000C60E 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000C610 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000C612 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000C614 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000C616                            ; ===========================================================================
0000C616                            
0000C616                            Obj4B_Main:				; XREF: Obj4B_Index
0000C616 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000C61E 317C 2496 0002             		move.w	#$2496,2(a0)
0000C624 0028 0004 0001             		ori.b	#4,1(a0)
0000C62A 117C 0040 0019             		move.b	#$40,$19(a0)
0000C630 4A28 0001                  		tst.b	1(a0)
0000C634 6A00                       		bpl.s	Obj4B_Animate
0000C636                            
0000C636 5428 0024                  		addq.b	#2,$24(a0)
0000C63A 117C 0002 0018             		move.b	#2,$18(a0)
0000C640 117C 0052 0020             		move.b	#$52,$20(a0)
0000C646 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000C64C                            
0000C64C                            Obj4B_Animate:				; XREF: Obj4B_Index
0000C64C 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000C652 3028 0008                  		move.w	8(a0),d0
0000C656 0240 FF80                  		andi.w	#$FF80,d0
0000C65A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C65E 0441 0080                  		subi.w	#$80,d1
0000C662 0241 FF80                  		andi.w	#$FF80,d1
0000C666 9041                       		sub.w	d1,d0
0000C668 0C40 0280                  		cmpi.w	#$280,d0
0000C66C 6200 0000                  		bhi.w	DeleteObject
0000C670 6000 0000                  		bra.w	DisplaySprite
0000C674                            ; ===========================================================================
0000C674                            
0000C674                            Obj4B_Collect:				; XREF: Obj4B_Index
0000C674 5528 0024                  		subq.b	#2,$24(a0)
0000C678 117C 0000 0020             		move.b	#0,$20(a0)
0000C67E                            
0000C688 45F9 0000 0000             		lea	(Unc_BigFlash),a2
0000C68E 303C 0053                  		move.w	#$53,d0
0000C692 4EB8 1C28                  		jsr	LoadUncArt
0000C696                            
0000C696                            
0000C696 6100 0000                  		bsr.w	SingleObjLoad
0000C69A 6600 0000                  		bne.w	Obj4B_PlaySnd
0000C69E 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000C6A2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C6A8 3368 0008 0008             		move.w	8(a0),8(a1)
0000C6AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C6B4 2348 003C                  		move.l	a0,$3C(a1)
0000C6B8 3038 D008                  		move.w	($FFFFD008).w,d0
0000C6BC B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000C6C0 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000C6C2 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000C6C8                            
0000C6C8                            Obj4B_PlaySnd:
0000C6C8 303C 00C3                  		move.w	#$C3,d0
0000C6CC 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000C6D2 4E75                       		rts
0000C6D4 6000 FF76                  		bra.w	Obj4B_Animate
0000C6D8                            ; ===========================================================================
0000C6D8                            
0000C6D8                            Obj4B_Delete:				; XREF: Obj4B_Index
0000C6D8 6000 0000                  		bra.w	DeleteObject
0000C6DC                            
0000C6DC                            Obj4B_Restart:
0000C6DC 11F8 FF9E FE30             		move.b	($FFFFFF9E).w,($FFFFFE30).w
0000C6E2 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
0000C6E8 6000 0000                  		bra.w	DeleteObject
0000C6EC                            ; ===========================================================================
0000C6EC                            ; ---------------------------------------------------------------------------
0000C6EC                            ; Object 7C - flash effect when	you collect the	giant ring
0000C6EC                            ; ---------------------------------------------------------------------------
0000C6EC                            
0000C6EC                            Obj7C:					; XREF: Obj_Index
0000C6EC 7000                       		moveq	#0,d0
0000C6EE 1028 0024                  		move.b	$24(a0),d0
0000C6F2 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000C6F6 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000C6FA                            ; ===========================================================================
0000C6FA 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000C6FC 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000C6FE 0000                       		dc.w Obj7C_GoToSS-Obj7C_index
0000C700 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000C702                            ; ===========================================================================
0000C702                            
0000C702                            Obj7C_Main:				; XREF: Obj7C_Index
0000C702 5428 0024                  		addq.b	#2,$24(a0)
0000C706 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000C70E 317C 2462 0002             		move.w	#$2462,2(a0)
0000C714 0028 0004 0001             		ori.b	#4,1(a0)
0000C71A 117C 0000 0018             		move.b	#0,$18(a0)
0000C720 117C 0020 0019             		move.b	#$20,$19(a0)
0000C726 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000C72C                            
0000C72C                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000C72C 6100                       		bsr.s	Obj7C_Collect
0000C72E 3028 0008                  		move.w	8(a0),d0
0000C732 0240 FF80                  		andi.w	#$FF80,d0
0000C736 3238 F700                  		move.w	($FFFFF700).w,d1
0000C73A 0441 0080                  		subi.w	#$80,d1
0000C73E 0241 FF80                  		andi.w	#$FF80,d1
0000C742 9041                       		sub.w	d1,d0
0000C744 0C40 0280                  		cmpi.w	#$280,d0
0000C748 6200 0000                  		bhi.w	DeleteObject
0000C74C 6000 0000                  		bra.w	DisplaySprite
0000C750                            
0000C750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C750                            
0000C750                            
0000C750                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000C750 5328 001E                  		subq.b	#1,$1E(a0)
0000C754 6A00                       		bpl.s	locret_9F76
0000C756 117C 0001 001E             		move.b	#1,$1E(a0)
0000C75C 5228 001A                  		addq.b	#1,$1A(a0)
0000C760 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000C766 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000C768 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000C76E 6600                       		bne.s	locret_9F76	; if not, branch
0000C770 2268 003C                  		movea.l	$3C(a0),a1
0000C774 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000C77A 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000C780 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000C786 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000C78A 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000C78E                            
0000C78E                            locret_9F76:
0000C78E 4E75                       		rts	
0000C790                            ; ===========================================================================
0000C790                            
0000C790                            Obj7C_End:				; XREF: Obj7C_Collect
0000C790 5428 0024                  		addq.b	#2,$24(a0)
0000C794 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000C79A 588F                       		addq.l	#4,sp
0000C79C                            
0000C79C 4E75                       		rts	
0000C79E                            ; End of function Obj7C_Collect
0000C79E                            
0000C79E                            ; ===========================================================================
0000C79E                            
0000C79E                            Obj7C_GoToSS:				; XREF: Obj7C_Index
0000C79E 11F8 FE30 FF9E             		move.b	($FFFFFE30).w,($FFFFFF9E).w
0000C7A4 11FC 00A0 FE30             		move.b	#$A0,($FFFFFE30).w
0000C7AA 11F8 FE30 FE30             		move.b	($FFFFFE30).w,($FFFFFE30).w
0000C7B0 11E8 0028 FF9D             		move.b	$28(a0),($FFFFFF9D).w 		; Giant Ring number
0000C7B6 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0000C7BC 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0000C7C2 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0000C7C8 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0000C7CE 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0000C7D4 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0000C7DA 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
0000C7E0 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0000C7E6 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0000C7EC 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
0000C7F2 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0000C7F8 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0000C7FE 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0000C804 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0000C80A 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0000C810 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0000C816 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0000C81C 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0000C822                            
0000C822 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C828 31FC 0900 FE10             		move.w	#$0900,($FFFFFE10).w ; set level	number to 0502 (FZ)
0000C82E 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000C834                            
0000C834                            ;		move.b	#$10,($FFFFFF94).w
0000C834 4E75                       		rts
0000C836                            ; ===========================================================================
0000C836                            
0000C836                            Obj7C_Delete:				; XREF: Obj7C_Index
0000C836 6000 0000                  		bra.w	DeleteObject
0000C83A                            ; ===========================================================================
0000C83A                            Ani_obj25:
0000C83A                            	include "_anim\obj25.asm"
0000C83A                            ; ---------------------------------------------------------------------------
0000C83A                            ; Animation script - ring
0000C83A                            ; ---------------------------------------------------------------------------
0000C83A 0000                       		dc.w byte_9F8C-Ani_obj25
0000C83C 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000C842                            		even
0000C842                            		even
0000C842                            
0000C842                            ; ---------------------------------------------------------------------------
0000C842                            ; Sprite mappings - rings
0000C842                            ; ---------------------------------------------------------------------------
0000C842                            Map_obj25:
0000C842                            	include "_maps\obj25.asm"
0000C842                            ; --------------------------------------------------------------------------------
0000C842                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C842                            ; --------------------------------------------------------------------------------
0000C842                            
0000C842                            SME__Gyii:	
0000C842 0000 0000                  		dc.w SME__Gyii_10-SME__Gyii, SME__Gyii_16-SME__Gyii	
0000C846 0000 0000                  		dc.w SME__Gyii_1C-SME__Gyii, SME__Gyii_22-SME__Gyii	
0000C84A 0000 0000                  		dc.w SME__Gyii_28-SME__Gyii, SME__Gyii_2E-SME__Gyii	
0000C84E 0000 0000                  		dc.w SME__Gyii_34-SME__Gyii, SME__Gyii_3A-SME__Gyii	
0000C852 01                         SME__Gyii_10:	dc.b 1	
0000C853 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000C858 01                         SME__Gyii_16:	dc.b 1	
0000C859 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000C85E 01                         SME__Gyii_1C:	dc.b 1	
0000C85F F805 1004 F8               		dc.b $F8, 5, $10, 4, $F8	
0000C864 01                         SME__Gyii_22:	dc.b 1	
0000C865 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000C86A 01                         SME__Gyii_28:	dc.b 1	
0000C86B F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000C870 01                         SME__Gyii_2E:	dc.b 1	
0000C871 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8	
0000C876 01                         SME__Gyii_34:	dc.b 1	
0000C877 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000C87C 01                         SME__Gyii_3A:	dc.b 1	
0000C87D F805 100A F8               		dc.b $F8, 5, $10, $A, $F8	
0000C882                            		even
0000C882                            		even
0000C882                            
0000C882                            ; ---------------------------------------------------------------------------
0000C882                            ; Sprite mappings - giant ring
0000C882                            ; ---------------------------------------------------------------------------
0000C882                            Map_obj4B:
0000C882                            	include "_maps\obj4B.asm"
0000C882                            ; ---------------------------------------------------------------------------
0000C882                            ; Sprite mappings - giant ring
0000C882                            ; ---------------------------------------------------------------------------
0000C882 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000C886 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000C88A 0A                         byte_9FDA:	dc.b $A
0000C88B E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000C890 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000C895 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000C89A E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000C89F F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000C8A4 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000C8A9 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000C8AE 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000C8B3 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000C8B8 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000C8BD 08                         byte_A00D:	dc.b 8
0000C8BE E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000C8C3 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000C8C8 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000C8CD F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000C8D2 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000C8D7 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000C8DC 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000C8E1 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000C8E6 04                         byte_A036:	dc.b 4
0000C8E7 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000C8EC E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000C8F1 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000C8F6 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000C8FB 08                         byte_A04B:	dc.b 8
0000C8FC E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000C901 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000C906 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000C90B F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000C910 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000C915 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000C91A 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000C91F 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000C924                            		even
0000C924                            		even
0000C924                            
0000C924                            ; ---------------------------------------------------------------------------
0000C924                            ; Sprite mappings - flash effect when you collect the giant ring
0000C924                            ; ---------------------------------------------------------------------------
0000C924                            Map_obj7C:
0000C924                            	include "_maps\obj7C.asm"
0000C924                            ; ---------------------------------------------------------------------------
0000C924                            ; Sprite mappings - flash effect when you collect the giant ring
0000C924                            ; ---------------------------------------------------------------------------
0000C924 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000C928 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000C92C 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000C930 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000C934 02                         byte_A084:	dc.b 2
0000C935 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000C93A 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000C93F 04                         byte_A08F:	dc.b 4
0000C940 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000C945 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000C94A 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000C94F 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000C954 04                         byte_A0A4:	dc.b 4
0000C955 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000C95A E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000C95F 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000C964 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000C969 04                         byte_A0B9:	dc.b 4
0000C96A E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000C96F E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000C974 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000C979 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000C97E 04                         byte_A0CE:	dc.b 4
0000C97F E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000C984 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000C989 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000C98E 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000C993 04                         byte_A0E3:	dc.b 4
0000C994 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000C999 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000C99E 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000C9A3 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000C9A8 02                         byte_A0F8:	dc.b 2
0000C9A9 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000C9AE 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000C9B3 04                         byte_A103:	dc.b 4
0000C9B4 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000C9B9 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000C9BE 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000C9C3 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000C9C8                            		even
0000C9C8                            		even
0000C9C8                            
0000C9C8                            ; ===========================================================================
0000C9C8                            ; ---------------------------------------------------------------------------
0000C9C8                            ; Object 26 - monitors
0000C9C8                            ; ---------------------------------------------------------------------------
0000C9C8                            
0000C9C8                            Obj26:					; XREF: Obj_Index
0000C9C8 7000                       		moveq	#0,d0
0000C9CA 1028 0024                  		move.b	$24(a0),d0
0000C9CE 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000C9D2 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000C9D6                            ; ===========================================================================
0000C9D6 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000C9D8 0000                       		dc.w Obj26_Solid-Obj26_Index
0000C9DA 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000C9DC 0000                       		dc.w Obj26_Animate-Obj26_Index
0000C9DE 0000                       		dc.w Obj26_Display-Obj26_Index
0000C9E0                            ; ===========================================================================
0000C9E0                            
0000C9E0                            Obj26_Main:				; XREF: Obj26_Index
0000C9E0 5428 0024                  		addq.b	#2,$24(a0)
0000C9E4 117C 000E 0016             		move.b	#$E,$16(a0)
0000C9EA 117C 000E 0017             		move.b	#$E,$17(a0)
0000C9F0 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000C9F8 317C 0680 0002             		move.w	#$680,2(a0)
0000C9FE 117C 0004 0001             		move.b	#4,1(a0)
0000CA04 117C 0003 0018             		move.b	#3,$18(a0)
0000CA0A 117C 000F 0019             		move.b	#$F,$19(a0)
0000CA10 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CA14 7000                       		moveq	#0,d0
0000CA16 1028 0023                  		move.b	$23(a0),d0
0000CA1A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CA20 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000CA26 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000CA28 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000CA2E 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000CA34 4E75                       		rts	
0000CA36                            ; ===========================================================================
0000CA36                            
0000CA36                            Obj26_NotBroken:			; XREF: Obj26_Main
0000CA36 117C 0046 0020             		move.b	#$46,$20(a0)
0000CA3C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000CA42                            
0000CA42                            Obj26_Solid:				; XREF: Obj26_Index
0000CA42 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000CA46 6700                       		beq.s	loc_A1EC	; if not, branch
0000CA48 5500                       		subq.b	#2,d0
0000CA4A 6600                       		bne.s	Obj26_Fall
0000CA4C 7200                       		moveq	#0,d1
0000CA4E 1228 0019                  		move.b	$19(a0),d1
0000CA52 0641 000B                  		addi.w	#$B,d1
0000CA56 6100 D280                  		bsr.w	ExitPlatform
0000CA5A 0829 0003 0022             		btst	#3,$22(a1)
0000CA60 6600 0000                  		bne.w	loc_A1BC
0000CA64 4228 0025                  		clr.b	$25(a0)
0000CA68 6000 0000                  		bra.w	Obj26_Animate
0000CA6C                            ; ===========================================================================
0000CA6C                            
0000CA6C                            loc_A1BC:				; XREF: Obj26_Solid
0000CA6C 363C 0010                  		move.w	#$10,d3
0000CA70 3428 0008                  		move.w	8(a0),d2
0000CA74 6100 D7C0                  		bsr.w	MvSonicOnPtfm
0000CA78 6000 0000                  		bra.w	Obj26_Animate
0000CA7C                            ; ===========================================================================
0000CA7C                            
0000CA7C                            Obj26_Fall:				; XREF: Obj26_Solid
0000CA7C 6100 0000                  		bsr.w	ObjectFall
0000CA80 4EB9 0000 0000             		jsr	ObjHitFloor
0000CA86 4A41                       		tst.w	d1
0000CA88 6A00 0000                  		bpl.w	Obj26_Animate
0000CA8C D368 000C                  		add.w	d1,$C(a0)
0000CA90 4268 0012                  		clr.w	$12(a0)
0000CA94 4228 0025                  		clr.b	$25(a0)
0000CA98 6000 0000                  		bra.w	Obj26_Animate
0000CA9C                            ; ===========================================================================
0000CA9C                            
0000CA9C                            loc_A1EC:				; XREF: Obj26_Solid
0000CA9C 323C 001A                  		move.w	#$1A,d1
0000CAA0 343C 000F                  		move.w	#$F,d2
0000CAA4 6100 0000                  		bsr.w	Obj26_SolidSides
0000CAA8 6700 0000                  		beq.w	loc_A25C
0000CAAC 4A69 0012                  		tst.w	$12(a1)
0000CAB0 6B00                       		bmi.s	loc_A20A
0000CAB2 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000CAB8 6700                       		beq.s	loc_A25C	; if yes, branch
0000CABA 0C29 001F 001C             		cmp.b	#$1F,$1C(a1)	; is Sonic spin-dashing?
0000CAC0 6700 0000                  		beq	loc_A25C	; if yes, branch
0000CAC4                            
0000CAC4                            loc_A20A:
0000CAC4 4A41                       		tst.w	d1
0000CAC6 6A00                       		bpl.s	loc_A220
0000CAC8 9769 000C                  		sub.w	d3,$C(a1)
0000CACC 6100 D0F8                  		bsr.w	loc_74AE
0000CAD0 117C 0002 0025             		move.b	#2,$25(a0)
0000CAD6 6000 0000                  		bra.w	Obj26_Animate
0000CADA                            ; ===========================================================================
0000CADA                            
0000CADA                            loc_A220:
0000CADA 4A40                       		tst.w	d0
0000CADC 6700 0000                  		beq.w	loc_A246
0000CAE0 6B00                       		bmi.s	loc_A230
0000CAE2 4A69 0010                  		tst.w	$10(a1)
0000CAE6 6B00                       		bmi.s	loc_A246
0000CAE8 6000                       		bra.s	loc_A236
0000CAEA                            ; ===========================================================================
0000CAEA                            
0000CAEA                            loc_A230:
0000CAEA 4A69 0010                  		tst.w	$10(a1)
0000CAEE 6A00                       		bpl.s	loc_A246
0000CAF0                            
0000CAF0                            loc_A236:
0000CAF0 9169 0008                  		sub.w	d0,8(a1)
0000CAF4 337C 0000 0014             		move.w	#0,$14(a1)
0000CAFA 337C 0000 0010             		move.w	#0,$10(a1)
0000CB00                            
0000CB00                            loc_A246:
0000CB00 0829 0001 0022             		btst	#1,$22(a1)
0000CB06 6600                       		bne.s	loc_A26A
0000CB08 08E9 0005 0022             		bset	#5,$22(a1)
0000CB0E 08E8 0005 0022             		bset	#5,$22(a0)
0000CB14 6000                       		bra.s	Obj26_Animate
0000CB16                            ; ===========================================================================
0000CB16                            
0000CB16                            loc_A25C:
0000CB16 0828 0005 0022             		btst	#5,$22(a0)
0000CB1C 6700                       		beq.s	Obj26_Animate
0000CB1E 337C 0001 001C             		move.w	#1,$1C(a1)
0000CB24                            
0000CB24                            loc_A26A:
0000CB24 08A8 0005 0022             		bclr	#5,$22(a0)
0000CB2A 08A9 0005 0022             		bclr	#5,$22(a1)
0000CB30                            
0000CB30                            Obj26_Animate:				; XREF: Obj26_Index
0000CB30 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000CB36 6100 0000                  		bsr.w	AnimateSprite
0000CB3A                            
0000CB3A                            Obj26_Display:				; XREF: Obj26_Index
0000CB3A 6100 0000                  		bsr.w	DisplaySprite
0000CB3E 3028 0008                  		move.w	8(a0),d0
0000CB42 0240 FF80                  		andi.w	#$FF80,d0
0000CB46 3238 F700                  		move.w	($FFFFF700).w,d1
0000CB4A 0441 0080                  		subi.w	#$80,d1
0000CB4E 0241 FF80                  		andi.w	#$FF80,d1
0000CB52 9041                       		sub.w	d1,d0
0000CB54 0C40 0280                  		cmpi.w	#$280,d0
0000CB58 6200 0000                  		bhi.w	DeleteObject
0000CB5C 4E75                       		rts	
0000CB5E                            ; ===========================================================================
0000CB5E                            
0000CB5E                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000CB5E 5428 0024                  		addq.b	#2,$24(a0)
0000CB62 117C 0000 0020             		move.b	#0,$20(a0)
0000CB68 6100 0000                  		bsr.w	SingleObjLoad
0000CB6C 6600                       		bne.s	Obj26_Explode
0000CB6E 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000CB72 3368 0008 0008             		move.w	8(a0),8(a1)
0000CB78 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CB7E 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000CB84                            
0000CB84                            Obj26_Explode:
0000CB84 6100 0000                  		bsr.w	SingleObjLoad
0000CB88 6600                       		bne.s	Obj26_SetBroken
0000CB8A 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000CB8E 5429 0024                  		addq.b	#2,$24(a1)
0000CB92 3368 0008 0008             		move.w	8(a0),8(a1)
0000CB98 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CB9E                            
0000CB9E                            Obj26_SetBroken:
0000CB9E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CBA2 7000                       		moveq	#0,d0
0000CBA4 1028 0023                  		move.b	$23(a0),d0
0000CBA8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CBAE 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000CBB4 6000 0000                  		bra.w	DisplaySprite
0000CBB8                            ; ===========================================================================
0000CBB8                            ; ---------------------------------------------------------------------------
0000CBB8                            ; Object 2E - contents of monitors
0000CBB8                            ; ---------------------------------------------------------------------------
0000CBB8                            
0000CBB8                            Obj2E:					; XREF: Obj_Index
0000CBB8 7000                       		moveq	#0,d0
0000CBBA 1028 0024                  		move.b	$24(a0),d0
0000CBBE 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000CBC2 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000CBC6 6000 0000                  		bra.w	DisplaySprite
0000CBCA                            ; ===========================================================================
0000CBCA 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000CBCC 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000CBCE 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000CBD0                            ; ===========================================================================
0000CBD0                            
0000CBD0                            Obj2E_Main:				; XREF: Obj2E_Index
0000CBD0 5428 0024                  		addq.b	#2,$24(a0)
0000CBD4 317C 0680 0002             		move.w	#$680,2(a0)
0000CBDA 117C 0024 0001             		move.b	#$24,1(a0)
0000CBE0 117C 0003 0018             		move.b	#3,$18(a0)
0000CBE6 117C 0008 0019             		move.b	#8,$19(a0)
0000CBEC 317C FD00 0012             		move.w	#-$300,$12(a0)
0000CBF2 7000                       		moveq	#0,d0
0000CBF4 1028 001C                  		move.b	$1C(a0),d0
0000CBF8 5400                       		addq.b	#2,d0
0000CBFA 1140 001A                  		move.b	d0,$1A(a0)
0000CBFE 227C 0000 0000             		movea.l	#Map_obj26,a1
0000CC04 D000                       		add.b	d0,d0
0000CC06 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000CC0A 5249                       		addq.w	#1,a1
0000CC0C 2149 0004                  		move.l	a1,4(a0)
0000CC10                            
0000CC10                            Obj2E_Move:				; XREF: Obj2E_Index
0000CC10 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000CC14 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000CC18 6100 0000                  		bsr.w	SpeedToPos
0000CC1C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000CC22 4E75                       		rts	
0000CC24                            ; ===========================================================================
0000CC24                            
0000CC24                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000CC24 5428 0024                  		addq.b	#2,$24(a0)
0000CC28 317C 001D 001E             		move.w	#29,$1E(a0)
0000CC2E 1028 001C                  		move.b	$1C(a0),d0
0000CC32 0C00 0001                  		cmpi.b	#1,d0
0000CC36 6600                       		bne.s	Obj2E_ChkSonic
0000CC38 2248                       		move.l	a0,a1
0000CC3A 2F08                       		move.l	a0,-(sp)
0000CC3C 41F8 D000                  		lea	($FFFFD000).w,a0
0000CC40 4EB9 0000 0000             		jsr	Touch_ChkHurt
0000CC46 205F                       		move.l	(sp)+,a0
0000CC48 4E75                       		rts
0000CC4A                            ; ===========================================================================
0000CC4A                            
0000CC4A                            Obj2E_ChkSonic:
0000CC4A 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000CC4E 6600                       		bne.s	Obj2E_ChkShoes
0000CC50                            
0000CC50                            ExtraLife:
0000CC50 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000CC54 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000CC58 303C 0088                  		move.w	#$88,d0
0000CC5C 4EF9 0000 19E4             		jmp	(PlaySound).l	; play extra life music
0000CC62                            ; ===========================================================================
0000CC62                            
0000CC62                            Obj2E_ChkShoes:
0000CC62 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000CC66 6600                       		bne.s	Obj2E_ChkShield
0000CC68 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000CC6E 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000CC74 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000CC7A 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000CC80 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000CC86 303C 00E2                  		move.w	#$E2,d0
0000CC8A 4EF9 0000 19E4             		jmp	(PlaySound).l	; Speed	up the music
0000CC90                            ; ===========================================================================
0000CC90                            
0000CC90                            Obj2E_ChkShield:
0000CC90 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000CC94 6600                       		bne.s	Obj2E_ChkInvinc
0000CC96 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000CC9C 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000CCA2 303C 00AF                  		move.w	#$AF,d0
0000CCA6 4EF9 0000 19E4             		jmp	(PlaySound).l	; play shield sound
0000CCAC                            ; ===========================================================================
0000CCAC                            
0000CCAC                            Obj2E_ChkInvinc:
0000CCAC 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000CCB0 6600                       		bne.s	Obj2E_ChkRings
0000CCB2 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000CCB8 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000CCBE 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000CCC4 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000CCCA 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000CCD0 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000CCD6 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000CCDC 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000CCE2 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000CCE8 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000CCEE 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000CCF2 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000CCF4 303C 0087                  		move.w	#$87,d0
0000CCF8 4EF9 0000 19E4             		jmp	(PlaySound).l	; play invincibility music
0000CCFE                            ; ===========================================================================
0000CCFE                            
0000CCFE                            Obj2E_NoMusic:
0000CCFE 4E75                       		rts	
0000CD00                            ; ===========================================================================
0000CD00                            
0000CD00                            Obj2E_ChkRings:
0000CD00 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000CD04 6600                       		bne.s	Obj2E_ChkS
0000CD06 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000CD0C 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000CD12 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000CD18 6500                       		bcs.s	Obj2E_RingSound
0000CD1A 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000CD20 6700 FF2E                  		beq.w	ExtraLife
0000CD24 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000CD2A 6500                       		bcs.s	Obj2E_RingSound
0000CD2C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000CD32 6700 FF1C                  		beq.w	ExtraLife
0000CD36                            
0000CD36                            Obj2E_RingSound:
0000CD36 303C 00B5                  		move.w	#$B5,d0
0000CD3A 4EF9 0000 19E4             		jmp	(PlaySound).l	; play ring sound
0000CD40                            ; ===========================================================================
0000CD40                            
0000CD40                            Obj2E_ChkS:
0000CD40 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000CD44 6600                       		bne.s	Obj2E_ChkEnd
0000CD46 4E71                       		nop	
0000CD48                            
0000CD48                            Obj2E_ChkEnd:
0000CD48 4E75                       		rts			; 'S' and goggles monitors do nothing
0000CD4A                            ; ===========================================================================
0000CD4A                            
0000CD4A                            Obj2E_Delete:				; XREF: Obj2E_Index
0000CD4A 5368 001E                  		subq.w	#1,$1E(a0)
0000CD4E 6B00 0000                  		bmi.w	DeleteObject
0000CD52 4E75                       		rts	
0000CD54                            ; ---------------------------------------------------------------------------
0000CD54                            ; Subroutine to	make the sides of a monitor solid
0000CD54                            ; ---------------------------------------------------------------------------
0000CD54                            
0000CD54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CD54                            
0000CD54                            
0000CD54                            Obj26_SolidSides:			; XREF: loc_A1EC
0000CD54 43F8 D000                  		lea	($FFFFD000).w,a1
0000CD58 3029 0008                  		move.w	8(a1),d0
0000CD5C 9068 0008                  		sub.w	8(a0),d0
0000CD60 D041                       		add.w	d1,d0
0000CD62 6B00                       		bmi.s	loc_A4E6
0000CD64 3601                       		move.w	d1,d3
0000CD66 D643                       		add.w	d3,d3
0000CD68 B043                       		cmp.w	d3,d0
0000CD6A 6200                       		bhi.s	loc_A4E6
0000CD6C 1629 0016                  		move.b	$16(a1),d3
0000CD70 4883                       		ext.w	d3
0000CD72 D443                       		add.w	d3,d2
0000CD74 3629 000C                  		move.w	$C(a1),d3
0000CD78 9668 000C                  		sub.w	$C(a0),d3
0000CD7C D642                       		add.w	d2,d3
0000CD7E 6B00                       		bmi.s	loc_A4E6
0000CD80 D442                       		add.w	d2,d2
0000CD82 B642                       		cmp.w	d2,d3
0000CD84 6400                       		bcc.s	loc_A4E6
0000CD86 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000CD8A 6B00                       		bmi.s	loc_A4E6
0000CD8C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000CD92 6400                       		bcc.s	loc_A4E6
0000CD94 4A78 FE08                  		tst.w	($FFFFFE08).w
0000CD98 6600                       		bne.s	loc_A4E6
0000CD9A B240                       		cmp.w	d0,d1
0000CD9C 6400                       		bcc.s	loc_A4DC
0000CD9E D241                       		add.w	d1,d1
0000CDA0 9041                       		sub.w	d1,d0
0000CDA2                            
0000CDA2                            loc_A4DC:
0000CDA2 0C43 0010                  		cmpi.w	#$10,d3
0000CDA6 6500                       		bcs.s	loc_A4EA
0000CDA8                            
0000CDA8                            loc_A4E2:
0000CDA8 7201                       		moveq	#1,d1
0000CDAA 4E75                       		rts	
0000CDAC                            ; ===========================================================================
0000CDAC                            
0000CDAC                            loc_A4E6:
0000CDAC 7200                       		moveq	#0,d1
0000CDAE 4E75                       		rts	
0000CDB0                            ; ===========================================================================
0000CDB0                            
0000CDB0                            loc_A4EA:
0000CDB0 7200                       		moveq	#0,d1
0000CDB2 1228 0019                  		move.b	$19(a0),d1
0000CDB6 5841                       		addq.w	#4,d1
0000CDB8 3401                       		move.w	d1,d2
0000CDBA D442                       		add.w	d2,d2
0000CDBC D269 0008                  		add.w	8(a1),d1
0000CDC0 9268 0008                  		sub.w	8(a0),d1
0000CDC4 6BE2                       		bmi.s	loc_A4E2
0000CDC6 B242                       		cmp.w	d2,d1
0000CDC8 64DE                       		bcc.s	loc_A4E2
0000CDCA 72FF                       		moveq	#-1,d1
0000CDCC 4E75                       		rts	
0000CDCE                            ; End of function Obj26_SolidSides
0000CDCE                            
0000CDCE                            ; ===========================================================================
0000CDCE                            Ani_obj26:
0000CDCE                            	include "_anim\obj26.asm"
0000CDCE                            ; ---------------------------------------------------------------------------
0000CDCE                            ; Animation script - monitors
0000CDCE                            ; ---------------------------------------------------------------------------
0000CDCE 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000CDD4 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000CDDA 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000CDE0 0000                       		dc.w byte_A582-Ani_obj26
0000CDE2 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000CDE8 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000CDF4 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000CE00 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000CE0C 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000CE18 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000CE24 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000CE30 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000CE3C 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000CE48 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000CE50                            		even
0000CE50                            		even
0000CE50                            
0000CE50                            ; ---------------------------------------------------------------------------
0000CE50                            ; Sprite mappings - monitors
0000CE50                            ; ---------------------------------------------------------------------------
0000CE50                            Map_obj26:
0000CE50                            	include "_maps\obj26.asm"
0000CE50                            ; --------------------------------------------------------------------------------
0000CE50                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CE50                            ; --------------------------------------------------------------------------------
0000CE50                            
0000CE50                            SME_PM8RY:	
0000CE50 0000 0000                  		dc.w SME_PM8RY_18-SME_PM8RY, SME_PM8RY_1E-SME_PM8RY	
0000CE54 0000 0000                  		dc.w SME_PM8RY_29-SME_PM8RY, SME_PM8RY_34-SME_PM8RY	
0000CE58 0000 0000                  		dc.w SME_PM8RY_3F-SME_PM8RY, SME_PM8RY_4A-SME_PM8RY	
0000CE5C 0000 0000                  		dc.w SME_PM8RY_55-SME_PM8RY, SME_PM8RY_60-SME_PM8RY	
0000CE60 0000 0000                  		dc.w SME_PM8RY_6B-SME_PM8RY, SME_PM8RY_76-SME_PM8RY	
0000CE64 0000 0000                  		dc.w SME_PM8RY_81-SME_PM8RY, SME_PM8RY_8C-SME_PM8RY	
0000CE68 01                         SME_PM8RY_18:	dc.b 1	
0000CE69 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000CE6E 02                         SME_PM8RY_1E:	dc.b 2	
0000CE6F F205 0010 F8               		dc.b $F2, 5, 0, $10, $F8	
0000CE74 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000CE79 02                         SME_PM8RY_29:	dc.b 2	
0000CE7A F205 0014 F8               		dc.b $F2, 5, 0, $14, $F8	
0000CE7F EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000CE84 02                         SME_PM8RY_34:	dc.b 2	
0000CE85 F205 0018 F8               		dc.b $F2, 5, 0, $18, $F8	
0000CE8A EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000CE8F 02                         SME_PM8RY_3F:	dc.b 2	
0000CE90 F205 001C F8               		dc.b $F2, 5, 0, $1C, $F8	
0000CE95 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000CE9A 02                         SME_PM8RY_4A:	dc.b 2	
0000CE9B F205 0024 F8               		dc.b $F2, 5, 0, $24, $F8	
0000CEA0 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000CEA5 02                         SME_PM8RY_55:	dc.b 2	
0000CEA6 F205 0028 F8               		dc.b $F2, 5, 0, $28, $F8	
0000CEAB EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000CEB0 02                         SME_PM8RY_60:	dc.b 2	
0000CEB1 F205 002C F8               		dc.b $F2, 5, 0, $2C, $F8	
0000CEB6 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000CEBB 02                         SME_PM8RY_6B:	dc.b 2	
0000CEBC F205 0030 F8               		dc.b $F2, 5, 0, $30, $F8	
0000CEC1 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000CEC6 02                         SME_PM8RY_76:	dc.b 2	
0000CEC7 F205 0034 F8               		dc.b $F2, 5, 0, $34, $F8	
0000CECC EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000CED1 02                         SME_PM8RY_81:	dc.b 2	
0000CED2 F205 0020 F8               		dc.b $F2, 5, 0, $20, $F8	
0000CED7 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000CEDC 01                         SME_PM8RY_8C:	dc.b 1	
0000CEDD FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0	
0000CEE2                            		even
0000CEE2                            		even
0000CEE2                            
0000CEE2                            ; ===========================================================================
0000CEE2                            ; ---------------------------------------------------------------------------
0000CEE2                            ; Object 0E - Sonic on the title screen
0000CEE2                            ; ---------------------------------------------------------------------------
0000CEE2                            
0000CEE2                            Obj0E:					; XREF: Obj_Index
0000CEE2 7000                       		moveq	#0,d0
0000CEE4 1028 0024                  		move.b	$24(a0),d0
0000CEE8 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000CEEC 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000CEF0                            ; ===========================================================================
0000CEF0 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000CEF2 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000CEF4 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000CEF6 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000CEF8                            ; ===========================================================================
0000CEF8                            
0000CEF8                            Obj0E_Main:				; XREF: Obj0E_Index
0000CEF8 5428 0024                  		addq.b	#2,$24(a0)
0000CEFC 317C 00F0 0008             		move.w	#$F0,8(a0)
0000CF02 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000CF08 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000CF10 317C 2300 0002             		move.w	#$2300,2(a0)
0000CF16 117C 0001 0018             		move.b	#1,$18(a0)
0000CF1C 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000CF22 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000CF28 6100 0000                  		bsr.w	AnimateSprite
0000CF2C                            
0000CF2C                            Obj0E_Delay:				; XREF: Obj0E_Index
0000CF2C 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000CF30 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000CF32 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000CF36 6000 0000                  		bra.w	DisplaySprite
0000CF3A                            ; ===========================================================================
0000CF3A                            
0000CF3A                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000CF3A 4E75                       		rts	
0000CF3C                            ; ===========================================================================
0000CF3C                            
0000CF3C                            Obj0E_Move:				; XREF: Obj0E_Index
0000CF3C 5168 000A                  		subq.w	#8,$A(a0)
0000CF40 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000CF46 6600                       		bne.s	Obj0E_Display
0000CF48 5428 0024                  		addq.b	#2,$24(a0)
0000CF4C                            
0000CF4C                            Obj0E_Display:
0000CF4C 6000 0000                  		bra.w	DisplaySprite
0000CF50                            ; ===========================================================================
0000CF50 4E75                       		rts	
0000CF52                            ; ===========================================================================
0000CF52                            
0000CF52                            Obj0E_Animate:				; XREF: Obj0E_Index
0000CF52 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000CF58 6100 0000                  		bsr.w	AnimateSprite
0000CF5C 6000 0000                  		bra.w	DisplaySprite
0000CF60                            ; ===========================================================================
0000CF60 4E75                       		rts	
0000CF62                            ; ===========================================================================
0000CF62                            
0000CF62                            Ani_obj0E:
0000CF62                            	include "_anim\obj0E.asm"
0000CF62                            ; ---------------------------------------------------------------------------
0000CF62                            ; Animation script - Sonic on the title screen
0000CF62                            ; ---------------------------------------------------------------------------
0000CF62 0000                       		dc.w byte_A706-Ani_obj0E
0000CF64 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000CF70                            		even
0000CF70                            		even
0000CF70                            
0000CF70                            ; ---------------------------------------------------------------------------
0000CF70                            ; Object 0F - Blank
0000CF70                            ; ---------------------------------------------------------------------------
0000CF70                            
0000CF70                            obj0F:
0000CF70 7000                       		moveq	#0,d0
0000CF72 1028 0024                  		move.b	$24(a0),d0
0000CF76 323B 0000                  		move.w	obj0F_Index(pc,d0.w),d1
0000CF7A 4EFB 1000                  		jmp	obj0F_Index(pc,d1.w)
0000CF7E                            ; ===========================================================================
0000CF7E 0000                       obj0F_Index:	dc.w obj0F_Main-obj0F_Index
0000CF80 0000                       		dc.w obj0F_Func-obj0F_Index
0000CF82                            ; ===========================================================================
0000CF82                            
0000CF82                            obj0F_Main:				; XREF: Obj21_Main
0000CF82 5428 0024                  		addq.b	#2,$24(a0)			;go to next routine
0000CF86 0C28 0001 0028             		cmpi.b	#1,$28(a0)
0000CF8C 6700                       		beq.s	Obj0F_Sub01
0000CF8E 317C 0090 0008             		move.w	#$0090,8(a0)			;x position
0000CF94 4EF9 0000 0000             		jmp	Obj0F_Continue
0000CF9A                            
0000CF9A                            Obj0F_Sub01:
0000CF9A 317C 0198 0008             		move.w	#$0198,8(a0)
0000CFA0                            
0000CFA0                            Obj0F_Continue:
0000CFA0 317C 00D8 000A             		move.w	#$D8,$A(a0)			;y position
0000CFA6 217C 0000 0000 0004        		move.l	#Map_obj10_selchar,4(a0)	;Maps
0000CFAE 317C 65A0 0002             		move.w	#$65A0,2(a0)			;VRAM position
0000CFB4 117C 0001 0018             		move.b	#1,$18(a0)
0000CFBA 117C 0000 0010             		move.b	#0,$10(a0)
0000CFC0                            
0000CFC0                            obj0F_Func:
0000CFC0 0838 0001 F605             		btst	#1,($FFFFF605).w 	 ; is button down pressed?
0000CFC6 6600 0000                  		bne	obj0F_down	 ; if yes, branch
0000CFCA 0838 0000 F605             		btst	#0,($FFFFF605).w 	 ; is button up pressed?
0000CFD0 6600 0000                  		bne	obj0F_up	 ; if yes, branch
0000CFD4 4EB9 0000 0000             		jsr	Obj0F_Display
0000CFDA 0C28 0001 0028             		cmpi.b	#1,$28(a0)
0000CFE0 6600 0000                  		bne	Obj0F_Return
0000CFE4 0238 0080 F605             		andi.b	#$80,($FFFFF605).w		; is Start button pressed?
0000CFEA 6600 0000                  		bne	Obj0F_Enter
0000CFEE 4EB9 0000 0000             		jsr	obj0F_Display
0000CFF4 4E75                       		rts
0000CFF6                            
0000CFF6                            Obj0F_Enter:
0000CFF6 11FC 0001 FFE0             		move.b	#1,($FFFFFFE0).w
0000CFFC 11FC 0001 FFE1             		move.b	#1,($FFFFFFE1).w
0000D002 11FC 0001 FFE2             		move.b	#1,($FFFFFFE2).w
0000D008 11FC 0001 FF9B             		move.b	#1,($FFFFFF9B).w
0000D00E 4E75                       		rts
0000D010                            
0000D010                            obj0F_down:
0000D010 0C28 0001 0028             		cmpi.b	#1,$28(a0)
0000D016 6700 0000                  		beq	Obj0F_Down_Sub01
0000D01A 0C28 0010 0010             		cmpi.b	#$10,$10(a0)
0000D020 6700 0000                  		beq	obj0F_Return
0000D024 5238 FE10                  		add.b	#1,($FFFFFE10).w
0000D028 5228 0010                  		add.b	#1,$10(a0)
0000D02C 5068 000A                  		add.w	#$8,$A(a0)
0000D030 5238 FF9C                  		add.b	#1,($FFFFFF9C).w
0000D034 4EB9 0000 0000             		jsr	obj0F_Display
0000D03A 4E75                       		rts
0000D03C                            
0000D03C                            Obj0F_Down_Sub01:
0000D03C 0C28 0003 0010             		cmpi.b	#$03,$10(a0)
0000D042 6700 0000                  		beq	obj0F_Return
0000D046 5238 FE11                  		add.b	#1,($FFFFFE11).w
0000D04A 5228 0010                  		add.b	#1,$10(a0)
0000D04E 5068 000A                  		add.w	#$8,$A(a0)
0000D052 5238 FF9C                  		add.b	#1,($FFFFFF9C).w
0000D056 4EB9 0000 0000             		jsr	obj0F_Display
0000D05C 4E75                       		rts
0000D05E                            
0000D05E                            obj0F_up:
0000D05E 0C28 0001 0028             		cmpi.b	#1,$28(a0)
0000D064 6700 0000                  		beq	Obj0F_Up_Sub01
0000D068 0C28 0000 0010             		cmpi.b	#0,$10(a0)
0000D06E 6700                       		beq.s	obj0F_Return
0000D070 5338 FE10                  		sub.b	#1,($FFFFFE10).w
0000D074 5328 0010                  		sub.b	#1,$10(a0)
0000D078 5338 FF9C                  		sub.b	#1,($FFFFFF9C).w
0000D07C 5168 000A                  		sub.w	#$8,$A(a0)
0000D080 4EB9 0000 0000             		jsr	obj0F_Display
0000D086                            
0000D086                            obj0F_Return:
0000D086 4E75                       		rts
0000D088                            
0000D088                            Obj0F_Up_Sub01:
0000D088 0C28 0000 0010             		cmpi.b	#0,$10(a0)
0000D08E 67F6                       		beq.s	obj0F_Return
0000D090 5338 FE11                  		sub.b	#1,($FFFFFE11).w
0000D094 5328 0010                  		sub.b	#1,$10(a0)
0000D098 5338 FF9C                  		sub.b	#1,($FFFFFF9C).w
0000D09C 5168 000A                  		sub.w	#$8,$A(a0)
0000D0A0 4EB9 0000 0000             		jsr	obj0F_Display
0000D0A6                            
0000D0A6                            obj0F_Display:
0000D0A6 4EF9 0000 0000             		jmp	DisplaySprite
0000D0AC                            ; ---------------------------------------------------------------------------
0000D0AC                            ; Subroutine to	animate	a sprite using an animation script
0000D0AC                            ; ---------------------------------------------------------------------------
0000D0AC                            
0000D0AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D0AC                            
0000D0AC                            
0000D0AC                            AnimateSprite:
0000D0AC 7000                       		moveq	#0,d0
0000D0AE 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000D0B2 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000D0B6 6700                       		beq.s	Anim_Run	; if not, branch
0000D0B8 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000D0BC 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000D0C2 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000D0C8                            
0000D0C8                            Anim_Run:
0000D0C8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000D0CC 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000D0CE D040                       		add.w	d0,d0
0000D0D0 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000D0D4 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000D0D8 7200                       		moveq	#0,d1
0000D0DA 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000D0DE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000D0E2 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000D0E4                            
0000D0E4                            Anim_Next:
0000D0E4 1200                       		move.b	d0,d1
0000D0E6 0200 001F                  		andi.b	#$1F,d0
0000D0EA 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000D0EE 1028 0022                  		move.b	$22(a0),d0
0000D0F2 E719                       		rol.b	#3,d1
0000D0F4 B101                       		eor.b	d0,d1
0000D0F6 0201 0003                  		andi.b	#3,d1
0000D0FA 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000D100 8328 0001                  		or.b	d1,1(a0)
0000D104 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000D108                            
0000D108                            Anim_Wait:
0000D108 4E75                       		rts	
0000D10A                            ; ===========================================================================
0000D10A                            
0000D10A                            Anim_End_FF:
0000D10A 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000D10C 6600                       		bne.s	Anim_End_FE	; if not, branch
0000D10E 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000D114 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000D118 60CA                       		bra.s	Anim_Next
0000D11A                            ; ===========================================================================
0000D11A                            
0000D11A                            Anim_End_FE:
0000D11A 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000D11C 6600                       		bne.s	Anim_End_FD	; if not, branch
0000D11E 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000D122 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000D126 9200                       		sub.b	d0,d1
0000D128 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000D12C 60B6                       		bra.s	Anim_Next
0000D12E                            ; ===========================================================================
0000D12E                            
0000D12E                            Anim_End_FD:
0000D12E 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000D130 6600                       		bne.s	Anim_End_FC	; if not, branch
0000D132 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000D138                            
0000D138                            Anim_End_FC:
0000D138 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000D13A 6600                       		bne.s	Anim_End_FB	; if not, branch
0000D13C 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000D140                            
0000D140                            Anim_End_FB:
0000D140 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000D142 6600                       		bne.s	Anim_End_FA	; if not, branch
0000D144 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000D14A 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000D14E                            
0000D14E                            Anim_End_FA:
0000D14E 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000D150 6600                       		bne.s	Anim_End	; if not, branch
0000D152 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000D156                            
0000D156                            Anim_End:
0000D156 4E75                       		rts	
0000D158                            ; End of function AnimateSprite
0000D158                            
0000D158                            ; ===========================================================================
0000D158                            ; ---------------------------------------------------------------------------
0000D158                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000D158                            ; ---------------------------------------------------------------------------
0000D158                            Map_obj0F:
0000D158                            	include "_maps\obj0F.asm"
0000D158                            ; ---------------------------------------------------------------------------
0000D158                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000D158                            ; ---------------------------------------------------------------------------
0000D158 0000                       		dc.w byte_A7CD-Map_obj0F
0000D15A 0000                       		dc.w byte_A7CC-Map_obj0F
0000D15C 0000                       		dc.w byte_A7EB-Map_obj0F
0000D15E 0000                       		dc.w byte_A882-Map_obj0F
0000D160 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000D161 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000D166 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000D16B 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000D170 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000D175 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000D17A 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000D17F 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000D180 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D185 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D18A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D18F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D194 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D199 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D19E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D1A3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D1A8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D1AD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000D1B2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D1B7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D1BC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D1C1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D1C6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D1CB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D1D0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D1D5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D1DA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D1DF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000D1E4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D1E9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D1EE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D1F3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D1F8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D1FD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D202 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D207 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D20C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D211 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000D216 01                         byte_A882:	dc.b 1			; "TM"
0000D217 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000D21C                            		even
0000D21C                            		even
0000D21C                            
0000D21C                            ; ---------------------------------------------------------------------------
0000D21C                            ; Sprite mappings - Sonic on the title screen
0000D21C                            ; ---------------------------------------------------------------------------
0000D21C                            Map_obj0E:
0000D21C                            	include "_maps\obj0E.asm"
0000D21C                            ; ---------------------------------------------------------------------------
0000D21C                            ; Sprite mappings - Sonic on the title screen
0000D21C                            ; ---------------------------------------------------------------------------
0000D21C 0000                       		dc.w byte_A898-Map_obj0E
0000D21E 0000                       		dc.w byte_A8CB-Map_obj0E
0000D220 0000                       		dc.w byte_A917-Map_obj0E
0000D222 0000                       		dc.w byte_A96D-Map_obj0E
0000D224 0000                       		dc.w byte_A9AF-Map_obj0E
0000D226 0000                       		dc.w byte_A9E7-Map_obj0E
0000D228 0000                       		dc.w byte_AA47-Map_obj0E
0000D22A 0000                       		dc.w byte_AAB1-Map_obj0E
0000D22C 0A                         byte_A898:	dc.b $A
0000D22D 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000D232 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000D237 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000D23C 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000D241 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000D246 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000D24B 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000D250 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000D255 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000D25A 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000D25F 0F                         byte_A8CB:	dc.b $F
0000D260 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000D265 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000D26A 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000D26F 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000D274 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000D279 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000D27E 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000D283 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000D288 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000D28D 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000D292 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000D297 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000D29C 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000D2A1 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000D2A6 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000D2AB 11                         byte_A917:	dc.b $11
0000D2AC 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000D2B1 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000D2B6 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000D2BB 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000D2C0 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000D2C5 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000D2CA 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000D2CF 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000D2D4 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000D2D9 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000D2DE 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000D2E3 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000D2E8 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000D2ED 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000D2F2 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000D2F7 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000D2FC 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000D301 0D                         byte_A96D:	dc.b $D
0000D302 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000D307 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000D30C 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000D311 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000D316 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000D31B 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000D320 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000D325 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000D32A 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000D32F 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000D334 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000D339 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000D33E 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000D343 0B                         byte_A9AF:	dc.b $B
0000D344 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000D349 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000D34E 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000D353 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000D358 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000D35D 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000D362 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000D367 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000D36C 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000D371 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000D376 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000D37B 13                         byte_A9E7:	dc.b $13
0000D37C 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000D381 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000D386 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000D38B 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000D390 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000D395 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000D39A 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000D39F 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000D3A4 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000D3A9 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000D3AE 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000D3B3 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000D3B8 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000D3BD 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000D3C2 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000D3C7 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000D3CC 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000D3D1 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000D3D6 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000D3DB 15                         byte_AA47:	dc.b $15
0000D3DC 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000D3E1 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000D3E6 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000D3EB 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000D3F0 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000D3F5 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000D3FA 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000D3FF 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000D404 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000D409 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000D40E 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000D413 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000D418 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000D41D 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000D422 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000D427 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000D42C 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000D431 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000D436 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000D43B 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000D440 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000D445 16                         byte_AAB1:	dc.b $16
0000D446 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000D44B 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000D450 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000D455 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000D45A 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000D45F 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000D464 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000D469 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000D46E 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000D473 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000D478 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000D47D 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000D482 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000D487 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000D48C 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000D491 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000D496 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000D49B 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000D4A0 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000D4A5 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000D4AA 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000D4AF 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000D4B4                            		even
0000D4B4                            		even
0000D4B4                            
0000D4B4                            ; ---------------------------------------------------------------------------
0000D4B4                            ; Object 06 - Fly switch
0000D4B4                            ; ---------------------------------------------------------------------------
0000D4B4                            
0000D4B4                            obj06:					; XREF: Obj_Index
0000D4B4 7000                       		moveq	#0,d0
0000D4B6 1028 0024                  		move.b	$24(a0),d0
0000D4BA 323B 0000                  		move.w	obj06_Index(pc,d0.w),d1
0000D4BE 4EBB 1000                  		jsr	obj06_Index(pc,d1.w)
0000D4C2 4EF9 0000 0000             		jmp	MarkObjGone
0000D4C8                            ; ===========================================================================
0000D4C8 0000                       obj06_Index:	dc.w obj06_Main-obj06_Index	;0
0000D4CA 0000                       		dc.w obj06_Display-obj06_Index	;2
0000D4CC 0000                       		dc.w obj06_Collect-obj06_Index	;4
0000D4CE                            ; ===========================================================================
0000D4CE                            
0000D4CE                            obj06_Main:				; XREF: obj06_Index
0000D4CE 217C 0000 0000 0004        		move.l	#Map_obj02,4(a0)
0000D4D6 317C 056E 0002             		move.w	#$56E,2(a0)
0000D4DC 0028 0004 0001             		ori.b	#4,1(a0)
0000D4E2 117C 0008 0019             		move.b	#8,$19(a0)
0000D4E8 5428 0024                  		addq.b	#2,$24(a0)
0000D4EC 117C 0002 0018             		move.b	#2,$18(a0)
0000D4F2 117C 0047 0020             		move.b	#$47,$20(a0)	;$52
0000D4F8                            
0000D4F8                            obj06_Display:				; XREF: obj06_Index
0000D4F8 6000 0000                  		bra.w	DisplaySprite
0000D4FC                            ; ===========================================================================
0000D4FC                            
0000D4FC                            obj06_Collect:				; XREF: obj06_Index
0000D4FC 11FC 0001 FFA5             		move.b	#1,($FFFFFFA5).w
0000D502 117C 0002 0024             		move.b	#2,$24(a0)
0000D508 4E75                       		rts
0000D50A                            ; ===========================================================================
0000D50A                            
0000D50A                            obj06_Delete:				; XREF: obj06_Index
0000D50A 6000 0000                  		bra.w	DeleteObject
0000D50E                            
0000D50E                            ; ===========================================================================
0000D50E                            
0000D50E                            
0000D50E                            ; ---------------------------------------------------------------------------
0000D50E                            ; Object 02 - Coin
0000D50E                            ; ---------------------------------------------------------------------------
0000D50E                            
0000D50E                            Obj02:					; XREF: Obj_Index
0000D50E 7000                       		moveq	#0,d0
0000D510 1028 0024                  		move.b	$24(a0),d0
0000D514 323B 0000                  		move.w	Obj02_Index(pc,d0.w),d1
0000D518 4EBB 1000                  		jsr	Obj02_Index(pc,d1.w)
0000D51C 4EF9 0000 0000             		jmp	MarkObjGone
0000D522                            ; ===========================================================================
0000D522 0000                       Obj02_Index:	dc.w Obj02_Main-Obj02_Index	;0
0000D524 0000                       		dc.w Obj02_Display-Obj02_Index	;2
0000D526 0000                       		dc.w Obj02_Collect-Obj02_Index	;4
0000D528                            ; ===========================================================================
0000D528                            
0000D528                            Obj02_Main:				; XREF: Obj02_Index
0000D528 217C 0000 0000 0004        		move.l	#Map_obj02,4(a0)
0000D530 317C 256E 0002             		move.w	#$256E,2(a0)
0000D536 0C38 0009 FE10             		cmpi.b	#9,($FFFFFE10).w
0000D53C 6600 0000                  		bne	Obj02_Main_Norm
0000D540 217C 0000 0000 0004        		move.l	#Map_obj02a,4(a0)
0000D548 317C 056E 0002             		move.w	#$56E,2(a0)
0000D54E                            
0000D54E                            Obj02_Main_Norm:
0000D54E 0028 0004 0001             		ori.b	#4,1(a0)
0000D554 117C 0008 0019             		move.b	#8,$19(a0)
0000D55A 5428 0024                  		addq.b	#2,$24(a0)
0000D55E 117C 0002 0018             		move.b	#2,$18(a0)
0000D564 117C 0047 0020             		move.b	#$47,$20(a0)
0000D56A                            
0000D56A                            Obj02_Display:				; XREF: Obj02_Index
0000D56A 0C38 0009 FE10             		cmpi.b	#9,($FFFFFE10).w
0000D570 6600 0000                  		bne	Obj02_Display_Norm
0000D574 43F9 0000 0000             		lea	(Ani_obj02).l,a1	; Cargar en memoria el archivo de animaciones. La primera animacion es la predeterminada
0000D57A 4EBA FB30                  		jsr	AnimateSprite		; Llamar a la subrutina de animar sprite
0000D57E                            
0000D57E                            Obj02_Display_Norm:
0000D57E 6000 0000                  		bra.w	DisplaySprite
0000D582                            ; ===========================================================================
0000D582                            
0000D582                            Obj02_Collect:				; XREF: Obj02_Index
0000D582 303C 00C5                  		move.w	#$C5,d0
0000D586 0C38 0009 FE10             		cmpi.b	#9,($FFFFFE10).w
0000D58C 6600 0000                  		bne	Obj02_Collect_Normal
0000D590 303C 0093                  		move.w	#$93,d0
0000D594 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l
0000D59A 11FC 0001 FF91             		move.b	#1,($FFFFFF91).w
0000D5A0 11FC 0060 FF92             		move.b	#$60,($FFFFFF92).w
0000D5A6 4EF9 0000 0000             		jmp	Obj02_Delete
0000D5AC                            
0000D5AC                            Obj02_Collect_Normal:
0000D5AC 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000D5B2 0638 000A FF95             		add.b	#10,($FFFFFF95).w
0000D5B8 4EF9 0000 0000             		jmp	Obj02_Delete
0000D5BE                            
0000D5BE                            Obj02_Return:
0000D5BE 4E75                       		rts
0000D5C0                            ; ===========================================================================
0000D5C0                            
0000D5C0                            Obj02_Delete:				; XREF: Obj02_Index
0000D5C0 6000 0000                  		bra.w	DeleteObject
0000D5C4                            
0000D5C4                            ; ===========================================================================
0000D5C4                            
0000D5C4                            Map_obj02:
0000D5C4                            	include "_maps\obj02.asm"
0000D5C4                            ; --------------------------------------------------------------------------------
0000D5C4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D5C4                            ; --------------------------------------------------------------------------------
0000D5C4                            
0000D5C4                            SME_1LFhu:	
0000D5C4 0000                       		dc.w SME_1LFhu_2-SME_1LFhu	
0000D5C6 04                         SME_1LFhu_2:	dc.b 4	
0000D5C7 0100 0000 F9               		dc.b 1, 0, 0, 0, $F9	
0000D5CC 0100 0001 01               		dc.b 1, 0, 0, 1, 1	
0000D5D1 F900 0002 F9               		dc.b $F9, 0, 0, 2, $F9	
0000D5D6 F900 0003 01               		dc.b $F9, 0, 0, 3, 1	
0000D5DC 00                         		even
0000D5DC 00                         		even
0000D5DC                            
0000D5DC                            Map_obj02a:
0000D5DC                            	include "_maps\obj02a.asm"
0000D5DC                            ; --------------------------------------------------------------------------------
0000D5DC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D5DC                            ; --------------------------------------------------------------------------------
0000D5DC                            
0000D5DC                            SME_PYNXs:	
0000D5DC 0000                       		dc.w SME_PYNXs_2-SME_PYNXs	
0000D5DE 01                         SME_PYNXs_2:	dc.b 1	
0000D5DF F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
0000D5E4                            		even
0000D5E4                            		even
0000D5E4                            
0000D5E4                            Ani_obj02:
0000D5E4                            	include "_anim\obj02.asm"
0000D5E4                            ; ---------------------------------------------------------------------------
0000D5E4                            ; Animation script - Sonic
0000D5E4                            ; ---------------------------------------------------------------------------
0000D5E4                            EmeraldArray:
0000D5E4 0000                       		dc.w EmeraldTic-EmeraldArray
0000D5E6 0000 01FF                  EmeraldTic:	dc.b 0, $0, $1, $FF
0000D5EA                            		even
0000D5EA                            		even
0000D5EA                            
0000D5EA                            ; ---------------------------------------------------------------------------
0000D5EA                            ; Object 03 - Splats the bunny badnik
0000D5EA                            ; ---------------------------------------------------------------------------
0000D5EA                            
0000D5EA                            Obj03:					; XREF: Obj_Index
0000D5EA 7000                       		moveq	#0,d0			; Borrar d0
0000D5EC 1028 0024                  		move.b	$24(a0),d0		; Preparar index
0000D5F0 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1	; Index
0000D5F4 4EBB 1000                  		jsr	Obj03_Index(pc,d1.w)	; Index
0000D5F8 6000 0000                  		bra.w	MarkObjGone		; Hacer que el objeto no reaparezca despues de romeprlo
0000D5FC                            ; ===========================================================================
0000D5FC 0000                       Obj03_Index:	dc.w Obj03_Main-Obj03_Index	; $0
0000D5FE 0000                       		dc.w Obj03_ChgSpeed-Obj03_Index	; $2
0000D600                            ; ===========================================================================
0000D600                            
0000D600                            Obj03_Main:				; XREF: Obj03_Index
0000D600 5428 0024                  		addq.b	#2,$24(a0)		; Terminar el resto de los codigos hasta rts y avanzar de rutina
0000D604 217C 0000 0000 0004        		move.l	#Map_obj03,4(a0)	; Cargar mapas
0000D60C 317C 0413 0002             		move.w	#$413,2(a0)		; Ubicacion en VRAM
0000D612 117C 0004 0001             		move.b	#4,1(a0)		; Prioridad
0000D618 117C 0004 0018             		move.b	#4,$18(a0)		; Usar coordenadas de la pantalla
0000D61E 117C 0009 0020             		move.b	#9,$20(a0)		; Flag del tipo de objeto. 9 es un badnik
0000D624 317C FF4B 0010             		move.w	#-$B5,$10(a0)		; Mover objeto a la izquierda
0000D62A                            ;		move.b	#$10,$19(a0)		; Ancho de objeto en pixeles
0000D62A                            
0000D62A                            Obj03_Jump:
0000D62A 317C FD0B 0012             		move.w	#-$2F5,$12(a0)		; Definir velocidad vertical
0000D630                            
0000D630                            Obj03_ChgSpeed:				; XREF: Obj03_Index
0000D630 43F9 0000 0000             		lea	(Ani_obj03).l,a1	; Cargar en memoria el archivo de animaciones. La primera animacion es la predeterminada
0000D636 4EBA FA74                  		jsr	AnimateSprite		; Llamar a la subrutina de animar sprite
0000D63A 4EB9 0000 0000             		jsr	SpeedToPos		; Llamar a la subrutina que mueve objetos
0000D640 4EB9 0000 0000             		jsr	ObjectFall		; Llamar a la subrutina que añade gravedad al objeto
0000D646 4EB9 0000 0000             		jsr	ObjHitFloor		; Llamar a la subrutina que checkea si el objeto toca el suelo
0000D64C 4A41                       		tst.w	d1			; El objeto ha tocado el suelo?
0000D64E 6A00                       		bpl.s	Obj03_Return		; Si no, repetir
0000D650 4EFA FFD8                  		jmp	Obj03_Jump		; Hacer un salto
0000D654                            
0000D654                            Obj03_Return:
0000D654 4E75                       		rts
0000D656                            ; ===========================================================================
0000D656                            Ani_obj03:
0000D656                            	include "_anim\obj03.asm"
0000D656                            ; ---------------------------------------------------------------------------
0000D656                            ; Animation script - Chopper enemy
0000D656                            ; ---------------------------------------------------------------------------
0000D656 0000                       		dc.w byte_ABBE2-Ani_obj03
0000D658 0700 0001 01FF             byte_ABBE2:	dc.b 7,	0, 0, 1, 1, $FF
0000D65E                            		even
0000D65E                            		even
0000D65E                            
0000D65E                            Map_obj03:
0000D65E                            	include "_maps\splats.asm"
0000D65E                            ; --------------------------------------------------------------------------------
0000D65E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D65E                            ; --------------------------------------------------------------------------------
0000D65E                            
0000D65E                            SME_m8gVZ:	
0000D65E 0000 0000                  		dc.w SME_m8gVZ_4-SME_m8gVZ, SME_m8gVZ_14-SME_m8gVZ	
0000D662 03                         SME_m8gVZ_4:	dc.b 3	
0000D663 DD0B 0000 F8               		dc.b $DD, $B, 0, 0, $F8	
0000D668 FD04 000C F8               		dc.b $FD, 4, 0, $C, $F8	
0000D66D FD00 000E 08               		dc.b $FD, 0, 0, $E, 8	
0000D672 02                         SME_m8gVZ_14:	dc.b 2	
0000D673 DD0B 000F F8               		dc.b $DD, $B, 0, $F, $F8	
0000D678 FD04 001B 00               		dc.b $FD, 4, 0, $1B, 0	
0000D67E 00                         		even
0000D67E 00                         		even
0000D67E                            
0000D67E                            ; ---------------------------------------------------------------------------
0000D67E                            ; Object 04 - Boss Hits counter
0000D67E                            ; ---------------------------------------------------------------------------
0000D67E                            Obj04:					; XREF: Obj_Index
0000D67E 7000                       		moveq	#0,d0			; Borrar d0
0000D680 1028 0024                  		move.b	$24(a0),d0		; Preparar index
0000D684 323B 0000                  		move.w	Obj04_Index(pc,d0.w),d1	; Index
0000D688 4EFB 1000                  		jmp	Obj04_Index(pc,d1.w)	; Index
0000D68C                            ; ===========================================================================
0000D68C 0000                       Obj04_Index:	dc.w Obj04_Main-Obj04_Index
0000D68E 0000                       		dc.w Obj04_First-Obj04_Index
0000D690                            ; ===========================================================================
0000D690                            
0000D690                            Obj04_Main:				; XREF: Obj04_Index
0000D690 5428 0024                  		addq.b	#2,$24(a0)		; Terminar el resto de los codigos hasta rts y avanzar de rutina
0000D694 217C 0000 0000 0004        		move.l	#Map_obj04,4(a0)	; Cargar mapas
0000D69C 317C 03A0 0002             		move.w	#$3A0,2(a0)		; Ubicacion en VRAM
0000D6A2 117C 0000 0001             		move.b	#0,1(a0)
0000D6A8 117C 0001 0018             		move.b	#1,$18(a0)
0000D6AE 317C 0090 0008             		move.w	#$90,8(a0)
0000D6B4 317C 0108 000A             		move.w	#$108,$A(a0)
0000D6BA                            
0000D6BA                            Obj04_Display:
0000D6BA 4EF9 0000 0000             		jmp	DisplaySprite
0000D6C0 4E75                       		rts
0000D6C2                            Obj04_First:
0000D6C2 1178 FF99 001A             		move.b	($FFFFFF99).w,$1A(a0)
0000D6C8 4EBA FFF0                  		jsr	Obj04_Display
0000D6CC 4E75                       		rts
0000D6CE                            ; ===========================================================================
0000D6CE                            Map_obj04:
0000D6CE                            	include "_maps\obj04.asm"
0000D6CE                            ; --------------------------------------------------------------------------------
0000D6CE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D6CE                            ; --------------------------------------------------------------------------------
0000D6CE                            
0000D6CE                            SME_bf9F_:	
0000D6CE 0000 0000                  		dc.w SME_bf9F__14-SME_bf9F_, SME_bf9F__15-SME_bf9F_	
0000D6D2 0000 0000                  		dc.w SME_bf9F__48-SME_bf9F_, SME_bf9F__7B-SME_bf9F_	
0000D6D6 0000 0000                  		dc.w SME_bf9F__AE-SME_bf9F_, SME_bf9F__E1-SME_bf9F_	
0000D6DA 0000 0000                  		dc.w SME_bf9F__114-SME_bf9F_, SME_bf9F__147-SME_bf9F_	
0000D6DE 0000 0000                  		dc.w SME_bf9F__17A-SME_bf9F_, SME_bf9F__1AD-SME_bf9F_	
0000D6E2 00                         SME_bf9F__14:	dc.b 0	
0000D6E3 0A                         SME_bf9F__15:	dc.b $A	
0000D6E4 4700 8009 39               		dc.b $47, 0, $80, 9, $39	
0000D6E9 4700 800A 41               		dc.b $47, 0, $80, $A, $41	
0000D6EE 4700 800B 49               		dc.b $47, 0, $80, $B, $49	
0000D6F3 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D6F8 3F00 800D 39               		dc.b $3F, 0, $80, $D, $39	
0000D6FD 3F00 800E 41               		dc.b $3F, 0, $80, $E, $41	
0000D702 3F00 800F 49               		dc.b $3F, 0, $80, $F, $49	
0000D707 3F00 8010 51               		dc.b $3F, 0, $80, $10, $51	
0000D70C 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D711 4700 8000 61               		dc.b $47, 0, $80, 0, $61	
0000D716 0A                         SME_bf9F__48:	dc.b $A	
0000D717 4700 8009 39               		dc.b $47, 0, $80, 9, $39	
0000D71C 4700 800A 41               		dc.b $47, 0, $80, $A, $41	
0000D721 4700 800B 49               		dc.b $47, 0, $80, $B, $49	
0000D726 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D72B 3F00 800D 39               		dc.b $3F, 0, $80, $D, $39	
0000D730 3F00 800E 41               		dc.b $3F, 0, $80, $E, $41	
0000D735 3F00 800F 49               		dc.b $3F, 0, $80, $F, $49	
0000D73A 3F00 8010 51               		dc.b $3F, 0, $80, $10, $51	
0000D73F 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D744 4700 8001 61               		dc.b $47, 0, $80, 1, $61	
0000D749 0A                         SME_bf9F__7B:	dc.b $A	
0000D74A 4700 8009 39               		dc.b $47, 0, $80, 9, $39	
0000D74F 4700 800A 41               		dc.b $47, 0, $80, $A, $41	
0000D754 4700 800B 49               		dc.b $47, 0, $80, $B, $49	
0000D759 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D75E 3F00 800D 39               		dc.b $3F, 0, $80, $D, $39	
0000D763 3F00 800E 41               		dc.b $3F, 0, $80, $E, $41	
0000D768 3F00 800F 49               		dc.b $3F, 0, $80, $F, $49	
0000D76D 3F00 8010 51               		dc.b $3F, 0, $80, $10, $51	
0000D772 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D777 4700 8002 61               		dc.b $47, 0, $80, 2, $61	
0000D77C 0A                         SME_bf9F__AE:	dc.b $A	
0000D77D 4700 8009 39               		dc.b $47, 0, $80, 9, $39	
0000D782 4700 800A 41               		dc.b $47, 0, $80, $A, $41	
0000D787 4700 800B 49               		dc.b $47, 0, $80, $B, $49	
0000D78C 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D791 3F00 800D 39               		dc.b $3F, 0, $80, $D, $39	
0000D796 3F00 800E 41               		dc.b $3F, 0, $80, $E, $41	
0000D79B 3F00 800F 49               		dc.b $3F, 0, $80, $F, $49	
0000D7A0 3F00 8010 51               		dc.b $3F, 0, $80, $10, $51	
0000D7A5 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D7AA 4700 8003 61               		dc.b $47, 0, $80, 3, $61	
0000D7AF 0A                         SME_bf9F__E1:	dc.b $A	
0000D7B0 4700 8009 39               		dc.b $47, 0, $80, 9, $39	
0000D7B5 4700 800A 41               		dc.b $47, 0, $80, $A, $41	
0000D7BA 4700 800B 49               		dc.b $47, 0, $80, $B, $49	
0000D7BF 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D7C4 3F00 800D 39               		dc.b $3F, 0, $80, $D, $39	
0000D7C9 3F00 800E 41               		dc.b $3F, 0, $80, $E, $41	
0000D7CE 3F00 800F 49               		dc.b $3F, 0, $80, $F, $49	
0000D7D3 3F00 8010 51               		dc.b $3F, 0, $80, $10, $51	
0000D7D8 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D7DD 4700 8004 61               		dc.b $47, 0, $80, 4, $61	
0000D7E2 0A                         SME_bf9F__114:	dc.b $A	
0000D7E3 4700 8009 39               		dc.b $47, 0, $80, 9, $39	
0000D7E8 4700 800A 41               		dc.b $47, 0, $80, $A, $41	
0000D7ED 4700 800B 49               		dc.b $47, 0, $80, $B, $49	
0000D7F2 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D7F7 3F00 800D 39               		dc.b $3F, 0, $80, $D, $39	
0000D7FC 3F00 800E 41               		dc.b $3F, 0, $80, $E, $41	
0000D801 3F00 800F 49               		dc.b $3F, 0, $80, $F, $49	
0000D806 3F00 8010 51               		dc.b $3F, 0, $80, $10, $51	
0000D80B 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D810 4700 8005 61               		dc.b $47, 0, $80, 5, $61	
0000D815 0A                         SME_bf9F__147:	dc.b $A	
0000D816 4700 8009 39               		dc.b $47, 0, $80, 9, $39	
0000D81B 4700 800A 41               		dc.b $47, 0, $80, $A, $41	
0000D820 4700 800B 49               		dc.b $47, 0, $80, $B, $49	
0000D825 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D82A 3F00 800D 39               		dc.b $3F, 0, $80, $D, $39	
0000D82F 3F00 800E 41               		dc.b $3F, 0, $80, $E, $41	
0000D834 3F00 800F 49               		dc.b $3F, 0, $80, $F, $49	
0000D839 3F00 8010 51               		dc.b $3F, 0, $80, $10, $51	
0000D83E 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D843 4700 8006 61               		dc.b $47, 0, $80, 6, $61	
0000D848 0A                         SME_bf9F__17A:	dc.b $A	
0000D849 4700 8009 39               		dc.b $47, 0, $80, 9, $39	
0000D84E 4700 800A 41               		dc.b $47, 0, $80, $A, $41	
0000D853 4700 800B 49               		dc.b $47, 0, $80, $B, $49	
0000D858 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D85D 3F00 800D 39               		dc.b $3F, 0, $80, $D, $39	
0000D862 3F00 800E 41               		dc.b $3F, 0, $80, $E, $41	
0000D867 3F00 800F 49               		dc.b $3F, 0, $80, $F, $49	
0000D86C 3F00 8010 51               		dc.b $3F, 0, $80, $10, $51	
0000D871 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D876 4700 8007 61               		dc.b $47, 0, $80, 7, $61	
0000D87B 0A                         SME_bf9F__1AD:	dc.b $A	
0000D87C 4700 8009 39               		dc.b $47, 0, $80, 9, $39	
0000D881 4700 800A 41               		dc.b $47, 0, $80, $A, $41	
0000D886 4700 800B 49               		dc.b $47, 0, $80, $B, $49	
0000D88B 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D890 3F00 800D 39               		dc.b $3F, 0, $80, $D, $39	
0000D895 3F00 800E 41               		dc.b $3F, 0, $80, $E, $41	
0000D89A 3F00 800F 49               		dc.b $3F, 0, $80, $F, $49	
0000D89F 3F00 8010 51               		dc.b $3F, 0, $80, $10, $51	
0000D8A4 4700 800C 51               		dc.b $47, 0, $80, $C, $51	
0000D8A9 4700 8008 61               		dc.b $47, 0, $80, 8, $61	
0000D8AE                            		even
0000D8AE                            		even
0000D8AE                            
0000D8AE                            ; ---------------------------------------------------------------------------
0000D8AE                            ; Object 2B - Chopper enemy (GHZ)
0000D8AE                            ; ---------------------------------------------------------------------------
0000D8AE                            
0000D8AE                            Obj2B:					; XREF: Obj_Index
0000D8AE 7000                       		moveq	#0,d0
0000D8B0 1028 0024                  		move.b	$24(a0),d0
0000D8B4 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000D8B8 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000D8BC 6000 0000                  		bra.w	MarkObjGone
0000D8C0                            ; ===========================================================================
0000D8C0 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000D8C2 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000D8C4                            ; ===========================================================================
0000D8C4                            
0000D8C4                            Obj2B_Main:				; XREF: Obj2B_Index
0000D8C4 5428 0024                  		addq.b	#2,$24(a0)
0000D8C8 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000D8D0 317C 047B 0002             		move.w	#$47B,2(a0)
0000D8D6 117C 0004 0001             		move.b	#4,1(a0)
0000D8DC 117C 0004 0018             		move.b	#4,$18(a0)
0000D8E2 117C 0009 0020             		move.b	#9,$20(a0)
0000D8E8 117C 0010 0019             		move.b	#$10,$19(a0)
0000D8EE 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000D8F4                            ;		move.w	$C(a0),$30(a0)
0000D8F4                            
0000D8F4                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000D8F4 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000D8FA 6100 F7B0                  		bsr.w	AnimateSprite
0000D8FE 6100 0000                  		bsr.w	SpeedToPos
0000D902 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000D908 3028 0030                  		move.w	$30(a0),d0
0000D90C B068 000C                  		cmp.w	$C(a0),d0
0000D910 6400                       		bcc.s	Obj2B_ChgAni
0000D912 3140 000C                  		move.w	d0,$C(a0)
0000D916 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000D91C                            
0000D91C                            Obj2B_ChgAni:
0000D91C 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000D922 0440 00C0                  		subi.w	#$C0,d0
0000D926 B068 000C                  		cmp.w	$C(a0),d0
0000D92A 6400                       		bcc.s	locret_ABB6
0000D92C 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000D932 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000D936 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000D938 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000D93E                            
0000D93E                            locret_ABB6:
0000D93E 4E75                       		rts	
0000D940                            ; ===========================================================================
0000D940                            Ani_obj2B:
0000D940                            	include "_anim\obj2B.asm"
0000D940                            ; ---------------------------------------------------------------------------
0000D940                            ; Animation script - Chopper enemy
0000D940                            ; ---------------------------------------------------------------------------
0000D940 0000                       		dc.w byte_ABBE-Ani_obj2B
0000D942 0000                       		dc.w byte_ABC2-Ani_obj2B
0000D944 0000                       		dc.w byte_ABC6-Ani_obj2B
0000D946 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000D94A 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000D94E 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000D952 00                         		even
0000D952 00                         		even
0000D952                            
0000D952                            ; ---------------------------------------------------------------------------
0000D952                            ; Sprite mappings - Chopper enemy (GHZ)
0000D952                            ; ---------------------------------------------------------------------------
0000D952                            Map_obj2B:
0000D952                            	include "_maps\obj2B.asm"
0000D952                            ; ---------------------------------------------------------------------------
0000D952                            ; Sprite mappings - Chopper enemy (GHZ)
0000D952                            ; ---------------------------------------------------------------------------
0000D952 0000                       		dc.w byte_ABCE-Map_obj2B
0000D954 0000                       		dc.w byte_ABD4-Map_obj2B
0000D956 01                         byte_ABCE:	dc.b 1
0000D957 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000D95C 01                         byte_ABD4:	dc.b 1
0000D95D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000D962                            		even
0000D962                            		even
0000D962                            
0000D962                            ; ===========================================================================
0000D962                            ; ---------------------------------------------------------------------------
0000D962                            ; Object 2C - Jaws enemy (LZ)
0000D962                            ; ---------------------------------------------------------------------------
0000D962                            
0000D962                            Obj2C:					; XREF: Obj_Index
0000D962 7000                       		moveq	#0,d0
0000D964 1028 0024                  		move.b	$24(a0),d0
0000D968 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000D96C 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000D970                            ; ===========================================================================
0000D970 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000D972 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000D974                            ; ===========================================================================
0000D974                            
0000D974                            Obj2C_Main:				; XREF: Obj2C_Index
0000D974 5428 0024                  		addq.b	#2,$24(a0)
0000D978 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000D980 317C 2486 0002             		move.w	#$2486,2(a0)
0000D986 0028 0004 0001             		ori.b	#4,1(a0)
0000D98C 117C 000A 0020             		move.b	#$A,$20(a0)
0000D992 117C 0004 0018             		move.b	#4,$18(a0)
0000D998 117C 0010 0019             		move.b	#$10,$19(a0)
0000D99E 7000                       		moveq	#0,d0
0000D9A0 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000D9A4 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000D9A6 5340                       		subq.w	#1,d0
0000D9A8 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000D9AC 3140 0032                  		move.w	d0,$32(a0)
0000D9B0 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000D9B6 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000D9BC 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000D9BE 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000D9C2                            
0000D9C2                            Obj2C_Turn:				; XREF: Obj2C_Index
0000D9C2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000D9C6 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000D9C8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000D9CE 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000D9D2 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000D9D8 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000D9DE                            
0000D9DE                            Obj2C_Animate:
0000D9DE 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000D9E4 6100 F6C6                  		bsr.w	AnimateSprite
0000D9E8 6100 0000                  		bsr.w	SpeedToPos
0000D9EC 6000 0000                  		bra.w	MarkObjGone
0000D9F0                            ; ===========================================================================
0000D9F0                            Ani_obj2C:
0000D9F0                            	include "_anim\obj2C.asm"
0000D9F0                            ; ---------------------------------------------------------------------------
0000D9F0                            ; Animation script - Jaws enemy
0000D9F0                            ; ---------------------------------------------------------------------------
0000D9F0 0000                       		dc.w byte_AC6A-Ani_obj2C
0000D9F2 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000D9F8                            		even
0000D9F8                            		even
0000D9F8                            
0000D9F8                            ; ---------------------------------------------------------------------------
0000D9F8                            ; Sprite mappings - Jaws enemy (LZ)
0000D9F8                            ; ---------------------------------------------------------------------------
0000D9F8                            Map_obj2C:
0000D9F8                            	include "_maps\obj2C.asm"
0000D9F8                            ; ---------------------------------------------------------------------------
0000D9F8                            ; Sprite mappings - Jaws enemy (LZ)
0000D9F8                            ; ---------------------------------------------------------------------------
0000D9F8 0000                       		dc.w byte_AC78-Map_obj2C
0000D9FA 0000                       		dc.w byte_AC83-Map_obj2C
0000D9FC 0000                       		dc.w byte_AC8E-Map_obj2C
0000D9FE 0000                       		dc.w byte_AC99-Map_obj2C
0000DA00 02                         byte_AC78:	dc.b 2
0000DA01 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000DA06 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000DA0B 02                         byte_AC83:	dc.b 2
0000DA0C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000DA11 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000DA16 02                         byte_AC8E:	dc.b 2
0000DA17 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000DA1C F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000DA21 02                         byte_AC99:	dc.b 2
0000DA22 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000DA27 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000DA2C                            		even
0000DA2C                            		even
0000DA2C                            
0000DA2C                            ; ===========================================================================
0000DA2C                            ; ---------------------------------------------------------------------------
0000DA2C                            ; Object 2D - Burrobot enemy (LZ)
0000DA2C                            ; ---------------------------------------------------------------------------
0000DA2C                            
0000DA2C                            Obj2D:					; XREF: Obj_Index
0000DA2C 7000                       		moveq	#0,d0
0000DA2E 1028 0024                  		move.b	$24(a0),d0
0000DA32 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000DA36 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000DA3A                            ; ===========================================================================
0000DA3A 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000DA3C 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000DA3E                            ; ===========================================================================
0000DA3E                            
0000DA3E                            Obj2D_Main:				; XREF: Obj2D_Index
0000DA3E 5428 0024                  		addq.b	#2,$24(a0)
0000DA42 117C 0013 0016             		move.b	#$13,$16(a0)
0000DA48 117C 0008 0017             		move.b	#8,$17(a0)
0000DA4E 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000DA56 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000DA5C 0028 0004 0001             		ori.b	#4,1(a0)
0000DA62 117C 0004 0018             		move.b	#4,$18(a0)
0000DA68 117C 0005 0020             		move.b	#5,$20(a0)
0000DA6E 117C 000C 0019             		move.b	#$C,$19(a0)
0000DA74 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000DA78 117C 0002 001C             		move.b	#2,$1C(a0)
0000DA7E                            
0000DA7E                            Obj2D_Action:				; XREF: Obj2D_Index
0000DA7E 7000                       		moveq	#0,d0
0000DA80 1028 0025                  		move.b	$25(a0),d0
0000DA84 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000DA88 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000DA8C 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000DA92 6100 F618                  		bsr.w	AnimateSprite
0000DA96 6000 0000                  		bra.w	MarkObjGone
0000DA9A                            ; ===========================================================================
0000DA9A 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000DA9C 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000DA9E 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000DAA0 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000DAA2                            ; ===========================================================================
0000DAA2                            
0000DAA2                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000DAA2 5368 0030                  		subq.w	#1,$30(a0)
0000DAA6 6A00                       		bpl.s	locret_AD42
0000DAA8 5428 0025                  		addq.b	#2,$25(a0)
0000DAAC 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000DAB2 317C 0080 0010             		move.w	#$80,$10(a0)
0000DAB8 117C 0001 001C             		move.b	#1,$1C(a0)
0000DABE 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000DAC4 6700                       		beq.s	locret_AD42
0000DAC6 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000DACA                            
0000DACA                            locret_AD42:
0000DACA 4E75                       		rts	
0000DACC                            ; ===========================================================================
0000DACC                            
0000DACC                            Obj2D_Move:				; XREF: Obj2D_Index2
0000DACC 5368 0030                  		subq.w	#1,$30(a0)
0000DAD0 6B00                       		bmi.s	loc_AD84
0000DAD2 6100 0000                  		bsr.w	SpeedToPos
0000DAD6 0868 0000 0032             		bchg	#0,$32(a0)
0000DADC 6600                       		bne.s	loc_AD78
0000DADE 3628 0008                  		move.w	8(a0),d3
0000DAE2 0643 000C                  		addi.w	#$C,d3
0000DAE6 0828 0000 0022             		btst	#0,$22(a0)
0000DAEC 6600                       		bne.s	loc_AD6A
0000DAEE 0443 0018                  		subi.w	#$18,d3
0000DAF2                            
0000DAF2                            loc_AD6A:
0000DAF2 4EB9 0000 0000             		jsr	ObjHitFloor2
0000DAF8 0C41 000C                  		cmpi.w	#$C,d1
0000DAFC 6C00                       		bge.s	loc_AD84
0000DAFE 4E75                       		rts	
0000DB00                            ; ===========================================================================
0000DB00                            
0000DB00                            loc_AD78:				; XREF: Obj2D_Move
0000DB00 4EB9 0000 0000             		jsr	ObjHitFloor
0000DB06 D368 000C                  		add.w	d1,$C(a0)
0000DB0A 4E75                       		rts	
0000DB0C                            ; ===========================================================================
0000DB0C                            
0000DB0C                            loc_AD84:				; XREF: Obj2D_Move
0000DB0C 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000DB12 6700                       		beq.s	loc_ADA4
0000DB14 5528 0025                  		subq.b	#2,$25(a0)
0000DB18 317C 003B 0030             		move.w	#$3B,$30(a0)
0000DB1E 317C 0000 0010             		move.w	#0,$10(a0)
0000DB24 117C 0000 001C             		move.b	#0,$1C(a0)
0000DB2A 4E75                       		rts	
0000DB2C                            ; ===========================================================================
0000DB2C                            
0000DB2C                            loc_ADA4:
0000DB2C 5428 0025                  		addq.b	#2,$25(a0)
0000DB30 317C FC00 0012             		move.w	#-$400,$12(a0)
0000DB36 117C 0002 001C             		move.b	#2,$1C(a0)
0000DB3C 4E75                       		rts	
0000DB3E                            ; ===========================================================================
0000DB3E                            
0000DB3E                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000DB3E 6100 0000                  		bsr.w	SpeedToPos
0000DB42 0668 0018 0012             		addi.w	#$18,$12(a0)
0000DB48 6B00                       		bmi.s	locret_ADF0
0000DB4A 117C 0003 001C             		move.b	#3,$1C(a0)
0000DB50 4EB9 0000 0000             		jsr	ObjHitFloor
0000DB56 4A41                       		tst.w	d1
0000DB58 6A00                       		bpl.s	locret_ADF0
0000DB5A D368 000C                  		add.w	d1,$C(a0)
0000DB5E 317C 0000 0012             		move.w	#0,$12(a0)
0000DB64 117C 0001 001C             		move.b	#1,$1C(a0)
0000DB6A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000DB70 5528 0025                  		subq.b	#2,$25(a0)
0000DB74 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000DB78                            
0000DB78                            locret_ADF0:
0000DB78 4E75                       		rts	
0000DB7A                            ; ===========================================================================
0000DB7A                            
0000DB7A                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000DB7A 343C 0060                  		move.w	#$60,d2
0000DB7E 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000DB82 6400                       		bcc.s	locret_AE20
0000DB84 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000DB88 9068 000C                  		sub.w	$C(a0),d0
0000DB8C 6400                       		bcc.s	locret_AE20
0000DB8E 0C40 FF80                  		cmpi.w	#-$80,d0
0000DB92 6500                       		bcs.s	locret_AE20
0000DB94 4A78 FE08                  		tst.w	($FFFFFE08).w
0000DB98 6600                       		bne.s	locret_AE20
0000DB9A 5528 0025                  		subq.b	#2,$25(a0)
0000DB9E 3141 0010                  		move.w	d1,$10(a0)
0000DBA2 317C FC00 0012             		move.w	#-$400,$12(a0)
0000DBA8                            
0000DBA8                            locret_AE20:
0000DBA8 4E75                       		rts	
0000DBAA                            
0000DBAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBAA                            
0000DBAA                            
0000DBAA                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000DBAA 323C 0080                  		move.w	#$80,d1
0000DBAE 08E8 0000 0022             		bset	#0,$22(a0)
0000DBB4 3038 D008                  		move.w	($FFFFD008).w,d0
0000DBB8 9068 0008                  		sub.w	8(a0),d0
0000DBBC 6400                       		bcc.s	loc_AE40
0000DBBE 4440                       		neg.w	d0
0000DBC0 4441                       		neg.w	d1
0000DBC2 08A8 0000 0022             		bclr	#0,$22(a0)
0000DBC8                            
0000DBC8                            loc_AE40:
0000DBC8 B042                       		cmp.w	d2,d0
0000DBCA 4E75                       		rts	
0000DBCC                            ; End of function Obj2D_ChkSonic2
0000DBCC                            
0000DBCC                            ; ===========================================================================
0000DBCC                            Ani_obj2D:
0000DBCC                            	include "_anim\obj2D.asm"
0000DBCC                            ; ---------------------------------------------------------------------------
0000DBCC                            ; Animation script - Burrobot enemy
0000DBCC                            ; ---------------------------------------------------------------------------
0000DBCC 0000                       		dc.w byte_AE4C-Ani_obj2D
0000DBCE 0000                       		dc.w byte_AE50-Ani_obj2D
0000DBD0 0000                       		dc.w byte_AE54-Ani_obj2D
0000DBD2 0000                       		dc.w byte_AE58-Ani_obj2D
0000DBD4 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000DBD8 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000DBDC 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000DBE0 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000DBE4 00                         		even
0000DBE4 00                         		even
0000DBE4                            
0000DBE4                            ; ---------------------------------------------------------------------------
0000DBE4                            ; Sprite mappings - Burrobot enemy (LZ)
0000DBE4                            ; ---------------------------------------------------------------------------
0000DBE4                            Map_obj2D:
0000DBE4                            	include "_maps\obj2D.asm"
0000DBE4                            ; ---------------------------------------------------------------------------
0000DBE4                            ; Sprite mappings - Burrobot enemy (LZ)
0000DBE4                            ; ---------------------------------------------------------------------------
0000DBE4 0000                       		dc.w byte_AE6A-Map_obj2D
0000DBE6 0000                       		dc.w byte_AE75-Map_obj2D
0000DBE8 0000                       		dc.w byte_AE80-Map_obj2D
0000DBEA 0000                       		dc.w byte_AE8B-Map_obj2D
0000DBEC 0000                       		dc.w byte_AE96-Map_obj2D
0000DBEE 0000                       		dc.w byte_AEA1-Map_obj2D
0000DBF0 0000                       		dc.w byte_AEAC-Map_obj2D
0000DBF2 02                         byte_AE6A:	dc.b 2
0000DBF3 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000DBF8 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000DBFD 02                         byte_AE75:	dc.b 2
0000DBFE EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000DC03 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000DC08 02                         byte_AE80:	dc.b 2
0000DC09 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000DC0E 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000DC13 02                         byte_AE8B:	dc.b 2
0000DC14 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000DC19 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000DC1E 02                         byte_AE96:	dc.b 2
0000DC1F E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000DC24 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000DC29 02                         byte_AEA1:	dc.b 2
0000DC2A F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000DC2F F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000DC34 02                         byte_AEAC:	dc.b 2
0000DC35 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000DC3A 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000DC40 00                         		even
0000DC40 00                         		even
0000DC40                            
0000DC40                            ; ===========================================================================
0000DC40                            ; ---------------------------------------------------------------------------
0000DC40                            ; Object 2F - large moving platforms (MZ)
0000DC40                            ; ---------------------------------------------------------------------------
0000DC40                            
0000DC40                            Obj2F:					; XREF: Obj_Index
0000DC40 7000                       		moveq	#0,d0
0000DC42 1028 0024                  		move.b	$24(a0),d0
0000DC46 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000DC4A 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000DC4E                            ; ===========================================================================
0000DC4E 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000DC50 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000DC52                            
0000DC52 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000DC54 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000DC56 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000DC58 0140                       		dc.b 1,	$40
0000DC5A 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000DC5C 0220                       		dc.b 2,	$20
0000DC5E                            ; ===========================================================================
0000DC5E                            
0000DC5E                            Obj2F_Main:				; XREF: Obj2F_Index
0000DC5E 5428 0024                  		addq.b	#2,$24(a0)
0000DC62 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000DC6A 317C C000 0002             		move.w	#$C000,2(a0)
0000DC70 117C 0004 0001             		move.b	#4,1(a0)
0000DC76 117C 0005 0018             		move.b	#5,$18(a0)
0000DC7C 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000DC82 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000DC88 7000                       		moveq	#0,d0
0000DC8A 1028 0028                  		move.b	$28(a0),d0
0000DC8E E448                       		lsr.w	#2,d0
0000DC90 0240 001C                  		andi.w	#$1C,d0
0000DC94 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000DC98 3019                       		move.w	(a1)+,d0
0000DC9A 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000DC9E 214A 0030                  		move.l	a2,$30(a0)
0000DCA2 1159 001A                  		move.b	(a1)+,$1A(a0)
0000DCA6 1151 0019                  		move.b	(a1),$19(a0)
0000DCAA 0228 000F 0028             		andi.b	#$F,$28(a0)
0000DCB0 117C 0040 0016             		move.b	#$40,$16(a0)
0000DCB6 08E8 0004 0001             		bset	#4,1(a0)
0000DCBC                            
0000DCBC                            Obj2F_Action:				; XREF: Obj2F_Index
0000DCBC 6100 0000                  		bsr.w	Obj2F_Types
0000DCC0 4A28 0025                  		tst.b	$25(a0)
0000DCC4 6700                       		beq.s	Obj2F_Solid
0000DCC6 7200                       		moveq	#0,d1
0000DCC8 1228 0019                  		move.b	$19(a0),d1
0000DCCC 0641 000B                  		addi.w	#$B,d1
0000DCD0 6100 C006                  		bsr.w	ExitPlatform
0000DCD4 0829 0003 0022             		btst	#3,$22(a1)
0000DCDA 6600 0000                  		bne.w	Obj2F_Slope
0000DCDE 4228 0025                  		clr.b	$25(a0)
0000DCE2 6000                       		bra.s	Obj2F_Display
0000DCE4                            ; ===========================================================================
0000DCE4                            
0000DCE4                            Obj2F_Slope:				; XREF: Obj2F_Action
0000DCE4 7200                       		moveq	#0,d1
0000DCE6 1228 0019                  		move.b	$19(a0),d1
0000DCEA 0641 000B                  		addi.w	#$B,d1
0000DCEE 2468 0030                  		movea.l	$30(a0),a2
0000DCF2 3428 0008                  		move.w	8(a0),d2
0000DCF6 6100 D012                  		bsr.w	SlopeObject2
0000DCFA 6000                       		bra.s	Obj2F_Display
0000DCFC                            ; ===========================================================================
0000DCFC                            
0000DCFC                            Obj2F_Solid:				; XREF: Obj2F_Action
0000DCFC 7200                       		moveq	#0,d1
0000DCFE 1228 0019                  		move.b	$19(a0),d1
0000DD02 0641 000B                  		addi.w	#$B,d1
0000DD06 343C 0020                  		move.w	#$20,d2
0000DD0A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DD10 6600                       		bne.s	loc_AF8E
0000DD12 343C 0030                  		move.w	#$30,d2
0000DD16                            
0000DD16                            loc_AF8E:
0000DD16 2468 0030                  		movea.l	$30(a0),a2
0000DD1A 6100 0000                  		bsr.w	SolidObject2F
0000DD1E                            
0000DD1E                            Obj2F_Display:				; XREF: Obj2F_Action
0000DD1E 6100 0000                  		bsr.w	DisplaySprite
0000DD22 6000 0000                  		bra.w	Obj2F_ChkDel
0000DD26                            
0000DD26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD26                            
0000DD26                            
0000DD26                            Obj2F_Types:				; XREF: Obj2F_Action
0000DD26 7000                       		moveq	#0,d0
0000DD28 1028 0028                  		move.b	$28(a0),d0
0000DD2C 0240 0007                  		andi.w	#7,d0
0000DD30 D040                       		add.w	d0,d0
0000DD32 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000DD36 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000DD3A                            ; End of function Obj2F_Types
0000DD3A                            
0000DD3A                            ; ===========================================================================
0000DD3A 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000DD3C 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000DD3E 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000DD40 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000DD42 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000DD44 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000DD46                            ; ===========================================================================
0000DD46                            
0000DD46                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000DD46 4E75                       		rts			; type 00 platform doesn't move
0000DD48                            ; ===========================================================================
0000DD48                            
0000DD48                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000DD48 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000DD4C 323C 0020                  		move.w	#$20,d1
0000DD50 6000                       		bra.s	Obj2F_Move
0000DD52                            ; ===========================================================================
0000DD52                            
0000DD52                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000DD52 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000DD56 323C 0030                  		move.w	#$30,d1
0000DD5A 6000                       		bra.s	Obj2F_Move
0000DD5C                            ; ===========================================================================
0000DD5C                            
0000DD5C                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000DD5C 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000DD60 323C 0040                  		move.w	#$40,d1
0000DD64 6000                       		bra.s	Obj2F_Move
0000DD66                            ; ===========================================================================
0000DD66                            
0000DD66                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000DD66 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000DD6A 323C 0060                  		move.w	#$60,d1
0000DD6E                            
0000DD6E                            Obj2F_Move:
0000DD6E 0828 0003 0028             		btst	#3,$28(a0)
0000DD74 6700                       		beq.s	loc_AFF2
0000DD76 4440                       		neg.w	d0
0000DD78 D041                       		add.w	d1,d0
0000DD7A                            
0000DD7A                            loc_AFF2:
0000DD7A 3228 002C                  		move.w	$2C(a0),d1
0000DD7E 9240                       		sub.w	d0,d1
0000DD80 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000DD84 4E75                       		rts	
0000DD86                            ; ===========================================================================
0000DD86                            
0000DD86                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000DD86 1028 0034                  		move.b	$34(a0),d0
0000DD8A 4A28 0025                  		tst.b	$25(a0)
0000DD8E 6600                       		bne.s	loc_B010
0000DD90 5500                       		subq.b	#2,d0
0000DD92 6400                       		bcc.s	loc_B01C
0000DD94 7000                       		moveq	#0,d0
0000DD96 6000                       		bra.s	loc_B01C
0000DD98                            ; ===========================================================================
0000DD98                            
0000DD98                            loc_B010:
0000DD98 5800                       		addq.b	#4,d0
0000DD9A 0C00 0040                  		cmpi.b	#$40,d0
0000DD9E 6500                       		bcs.s	loc_B01C
0000DDA0 103C 0040                  		move.b	#$40,d0
0000DDA4                            
0000DDA4                            loc_B01C:
0000DDA4 1140 0034                  		move.b	d0,$34(a0)
0000DDA8 4EB9 0000 3798             		jsr	(CalcSine).l
0000DDAE E848                       		lsr.w	#4,d0
0000DDB0 3200                       		move.w	d0,d1
0000DDB2 D068 002C                  		add.w	$2C(a0),d0
0000DDB6 3140 000C                  		move.w	d0,$C(a0)
0000DDBA 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000DDC0 6600                       		bne.s	loc_B07A
0000DDC2 4A28 0035                  		tst.b	$35(a0)
0000DDC6 6600                       		bne.s	loc_B07A
0000DDC8 117C 0001 0035             		move.b	#1,$35(a0)
0000DDCE 6100 0000                  		bsr.w	SingleObjLoad2
0000DDD2 6600                       		bne.s	loc_B07A
0000DDD4 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000DDD8 3368 0008 0008             		move.w	8(a0),8(a1)
0000DDDE 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000DDE4 5069 002C                  		addq.w	#8,$2C(a1)
0000DDE8 5769 002C                  		subq.w	#3,$2C(a1)
0000DDEC 0469 0040 0008             		subi.w	#$40,8(a1)
0000DDF2 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000DDF8 2348 0038                  		move.l	a0,$38(a1)
0000DDFC 2448                       		movea.l	a0,a2
0000DDFE 6100                       		bsr.s	sub_B09C
0000DE00                            
0000DE00                            loc_B07A:
0000DE00 7400                       		moveq	#0,d2
0000DE02 45E8 0036                  		lea	$36(a0),a2
0000DE06 141A                       		move.b	(a2)+,d2
0000DE08 5302                       		subq.b	#1,d2
0000DE0A 6500                       		bcs.s	locret_B09A
0000DE0C                            
0000DE0C                            loc_B086:
0000DE0C 7000                       		moveq	#0,d0
0000DE0E 101A                       		move.b	(a2)+,d0
0000DE10 ED48                       		lsl.w	#6,d0
0000DE12 0640 D000                  		addi.w	#-$3000,d0
0000DE16 3240                       		movea.w	d0,a1
0000DE18 3341 003C                  		move.w	d1,$3C(a1)
0000DE1C 51CA FFEE                  		dbf	d2,loc_B086
0000DE20                            
0000DE20                            locret_B09A:
0000DE20 4E75                       		rts	
0000DE22                            
0000DE22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE22                            
0000DE22                            
0000DE22                            sub_B09C:
0000DE22 45EA 0036                  		lea	$36(a2),a2
0000DE26 7000                       		moveq	#0,d0
0000DE28 1012                       		move.b	(a2),d0
0000DE2A 5212                       		addq.b	#1,(a2)
0000DE2C 45F2 0001                  		lea	1(a2,d0.w),a2
0000DE30 3009                       		move.w	a1,d0
0000DE32 0440 D000                  		subi.w	#-$3000,d0
0000DE36 EC48                       		lsr.w	#6,d0
0000DE38 0240 007F                  		andi.w	#$7F,d0
0000DE3C 1480                       		move.b	d0,(a2)
0000DE3E 4E75                       		rts	
0000DE40                            ; End of function sub_B09C
0000DE40                            
0000DE40                            ; ===========================================================================
0000DE40                            
0000DE40                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000DE40 4A28 0035                  		tst.b	$35(a0)
0000DE44 6700                       		beq.s	loc_B0C6
0000DE46 4A28 0001                  		tst.b	1(a0)
0000DE4A 6A00                       		bpl.s	Obj2F_DelFlames
0000DE4C                            
0000DE4C                            loc_B0C6:
0000DE4C 3028 002A                  		move.w	$2A(a0),d0
0000DE50 0240 FF80                  		andi.w	#$FF80,d0
0000DE54 3238 F700                  		move.w	($FFFFF700).w,d1
0000DE58 0441 0080                  		subi.w	#$80,d1
0000DE5C 0241 FF80                  		andi.w	#$FF80,d1
0000DE60 9041                       		sub.w	d1,d0
0000DE62 0C40 0280                  		cmpi.w	#$280,d0
0000DE66 6200 0000                  		bhi.w	DeleteObject
0000DE6A 4E75                       		rts	
0000DE6C                            ; ===========================================================================
0000DE6C                            
0000DE6C                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000DE6C 7400                       		moveq	#0,d2
0000DE6E                            
0000DE6E                            loc_B0E8:
0000DE6E 45E8 0036                  		lea	$36(a0),a2
0000DE72 1412                       		move.b	(a2),d2
0000DE74 421A                       		clr.b	(a2)+
0000DE76 5302                       		subq.b	#1,d2
0000DE78 6500                       		bcs.s	locret_B116
0000DE7A                            
0000DE7A                            loc_B0F4:
0000DE7A 7000                       		moveq	#0,d0
0000DE7C 1012                       		move.b	(a2),d0
0000DE7E 421A                       		clr.b	(a2)+
0000DE80 ED48                       		lsl.w	#6,d0
0000DE82 0640 D000                  		addi.w	#-$3000,d0
0000DE86 3240                       		movea.w	d0,a1
0000DE88 6100 0000                  		bsr.w	DeleteObject2
0000DE8C 51CA FFEC                  		dbf	d2,loc_B0F4
0000DE90 117C 0000 0035             		move.b	#0,$35(a0)
0000DE96 117C 0000 0034             		move.b	#0,$34(a0)
0000DE9C                            
0000DE9C                            locret_B116:
0000DE9C 4E75                       		rts	
0000DE9E                            ; ===========================================================================
0000DE9E                            ; ---------------------------------------------------------------------------
0000DE9E                            ; Collision data for large moving platforms (MZ)
0000DE9E                            ; ---------------------------------------------------------------------------
0000DE9E                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000DEEA                            		even
0000DEEA                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000DF16                            		even
0000DF16                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000DF62                            		even
0000DF62                            ; ===========================================================================
0000DF62                            ; ---------------------------------------------------------------------------
0000DF62                            ; Object 35 - fireball that sits on the	floor (MZ)
0000DF62                            ; (appears when	you walk on sinking platforms)
0000DF62                            ; ---------------------------------------------------------------------------
0000DF62                            
0000DF62                            Obj35:					; XREF: Obj_Index
0000DF62 7000                       		moveq	#0,d0
0000DF64 1028 0024                  		move.b	$24(a0),d0
0000DF68 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000DF6C 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000DF70                            ; ===========================================================================
0000DF70 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000DF72 0000                       		dc.w loc_B238-Obj35_Index
0000DF74 0000                       		dc.w Obj35_Move-Obj35_Index
0000DF76                            ; ===========================================================================
0000DF76                            
0000DF76                            Obj35_Main:				; XREF: Obj35_Index
0000DF76 5428 0024                  		addq.b	#2,$24(a0)
0000DF7A 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000DF82 317C 0345 0002             		move.w	#$345,2(a0)
0000DF88 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000DF8E 117C 0004 0001             		move.b	#4,1(a0)
0000DF94 117C 0001 0018             		move.b	#1,$18(a0)
0000DF9A 117C 008B 0020             		move.b	#$8B,$20(a0)
0000DFA0 117C 0008 0019             		move.b	#8,$19(a0)
0000DFA6 303C 00C8                  		move.w	#$C8,d0
0000DFAA 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play flame sound
0000DFB0 4A28 0028                  		tst.b	$28(a0)
0000DFB4 6700                       		beq.s	loc_B238
0000DFB6 5428 0024                  		addq.b	#2,$24(a0)
0000DFBA 6000 0000                  		bra.w	Obj35_Move
0000DFBE                            ; ===========================================================================
0000DFBE                            
0000DFBE                            loc_B238:				; XREF: Obj35_Index
0000DFBE 2268 0030                  		movea.l	$30(a0),a1
0000DFC2 3228 0008                  		move.w	8(a0),d1
0000DFC6 9268 002A                  		sub.w	$2A(a0),d1
0000DFCA 0641 000C                  		addi.w	#$C,d1
0000DFCE 3001                       		move.w	d1,d0
0000DFD0 E248                       		lsr.w	#1,d0
0000DFD2 1031 0000                  		move.b	(a1,d0.w),d0
0000DFD6 4440                       		neg.w	d0
0000DFD8 D068 002C                  		add.w	$2C(a0),d0
0000DFDC 3400                       		move.w	d0,d2
0000DFDE D068 003C                  		add.w	$3C(a0),d0
0000DFE2 3140 000C                  		move.w	d0,$C(a0)
0000DFE6 0C41 0084                  		cmpi.w	#$84,d1
0000DFEA 6400                       		bcc.s	loc_B2B0
0000DFEC 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000DFF4 0C41 0080                  		cmpi.w	#$80,d1
0000DFF8 6400                       		bcc.s	loc_B2B0
0000DFFA 2028 0008                  		move.l	8(a0),d0
0000DFFE 0680 0008 0000             		addi.l	#$80000,d0
0000E004 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000E00A 6600                       		bne.s	loc_B2B0
0000E00C 6100 0000                  		bsr.w	SingleObjLoad2
0000E010 6600                       		bne.s	loc_B2B0
0000E012 12BC 0035                  		move.b	#$35,0(a1)
0000E016 3368 0008 0008             		move.w	8(a0),8(a1)
0000E01C 3342 002C                  		move.w	d2,$2C(a1)
0000E020 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000E026 137C 0001 0028             		move.b	#1,$28(a1)
0000E02C 2468 0038                  		movea.l	$38(a0),a2
0000E030 6100 FDF0                  		bsr.w	sub_B09C
0000E034                            
0000E034                            loc_B2B0:
0000E034 6000                       		bra.s	Obj35_Animate
0000E036                            ; ===========================================================================
0000E036                            
0000E036                            Obj35_Move:				; XREF: Obj35_Index
0000E036 3028 002C                  		move.w	$2C(a0),d0
0000E03A D068 003C                  		add.w	$3C(a0),d0
0000E03E 3140 000C                  		move.w	d0,$C(a0)
0000E042                            
0000E042                            Obj35_Animate:				; XREF: loc_B238
0000E042 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000E048 6100 F062                  		bsr.w	AnimateSprite
0000E04C 6000 0000                  		bra.w	DisplaySprite
0000E050                            ; ===========================================================================
0000E050                            Ani_obj35:
0000E050                            	include "_anim\obj35.asm"
0000E050                            ; ---------------------------------------------------------------------------
0000E050                            ; Animation script - fireball that sits on the	floor (MZ)
0000E050                            ; ---------------------------------------------------------------------------
0000E050 0000                       		dc.w byte_B2CE-Ani_obj35
0000E052 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000E058                            		even
0000E058                            		even
0000E058                            
0000E058                            ; ---------------------------------------------------------------------------
0000E058                            ; Sprite mappings - large moving platforms (MZ)
0000E058                            ; ---------------------------------------------------------------------------
0000E058                            Map_obj2F:
0000E058                            	include "_maps\obj2F.asm"
0000E058                            ; ---------------------------------------------------------------------------
0000E058                            ; Sprite mappings - large moving platforms (MZ)
0000E058                            ; ---------------------------------------------------------------------------
0000E058 0000                       		dc.w byte_B2DA-Map_obj2F
0000E05A 0000                       		dc.w byte_B31C-Map_obj2F
0000E05C 0000                       		dc.w byte_B34F-Map_obj2F
0000E05E 0D                         byte_B2DA:	dc.b $D
0000E05F D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000E064 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000E069 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000E06E D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000E073 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000E078 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000E07D D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000E082 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000E087 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000E08C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000E091 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000E096 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000E09B F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000E0A0 0A                         byte_B31C:	dc.b $A
0000E0A1 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000E0A6 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000E0AB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000E0B0 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000E0B5 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000E0BA F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000E0BF C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000E0C4 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000E0C9 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000E0CE E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000E0D3 06                         byte_B34F:	dc.b 6
0000E0D4 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000E0D9 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000E0DE 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000E0E3 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000E0E8 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000E0ED 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000E0F2                            		even
0000E0F2                            		even
0000E0F2                            
0000E0F2                            ; ---------------------------------------------------------------------------
0000E0F2                            ; Sprite mappings - lava balls (MZ, SLZ)
0000E0F2                            ; ---------------------------------------------------------------------------
0000E0F2                            Map_obj14:
0000E0F2                            	include "_maps\obj14.asm"
0000E0F2                            ; ---------------------------------------------------------------------------
0000E0F2                            ; Sprite mappings - lava balls (MZ, SLZ)
0000E0F2                            ; ---------------------------------------------------------------------------
0000E0F2 0000                       		dc.w byte_B37A-Map_obj14
0000E0F4 0000                       		dc.w byte_B380-Map_obj14
0000E0F6 0000                       		dc.w byte_B386-Map_obj14
0000E0F8 0000                       		dc.w byte_B38C-Map_obj14
0000E0FA 0000                       		dc.w byte_B392-Map_obj14
0000E0FC 0000                       		dc.w byte_B398-Map_obj14
0000E0FE 01                         byte_B37A:	dc.b 1
0000E0FF E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000E104 01                         byte_B380:	dc.b 1
0000E105 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000E10A 01                         byte_B386:	dc.b 1
0000E10B F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000E110 01                         byte_B38C:	dc.b 1
0000E111 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000E116 01                         byte_B392:	dc.b 1
0000E117 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000E11C 01                         byte_B398:	dc.b 1
0000E11D F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000E122                            		even
0000E122                            		even
0000E122                            
0000E122                            ; ===========================================================================
0000E122                            ; ---------------------------------------------------------------------------
0000E122                            ; Object 30 - large green glassy blocks	(MZ)
0000E122                            ; ---------------------------------------------------------------------------
0000E122                            
0000E122                            Obj30:					; XREF: Obj_Index
0000E122 7000                       		moveq	#0,d0
0000E124 1028 0024                  		move.b	$24(a0),d0
0000E128 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000E12C 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000E130 3028 0008                  		move.w	8(a0),d0
0000E134 0240 FF80                  		andi.w	#$FF80,d0
0000E138 3238 F700                  		move.w	($FFFFF700).w,d1
0000E13C 0441 0080                  		subi.w	#$80,d1
0000E140 0241 FF80                  		andi.w	#$FF80,d1
0000E144 9041                       		sub.w	d1,d0
0000E146 0C40 0280                  		cmpi.w	#$280,d0
0000E14A 6200 0000                  		bhi.w	Obj30_Delete
0000E14E 6000 0000                  		bra.w	DisplaySprite
0000E152                            ; ===========================================================================
0000E152                            
0000E152                            Obj30_Delete:
0000E152 6000 0000                  		bra.w	DeleteObject
0000E156                            ; ===========================================================================
0000E156 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000E158 0000                       		dc.w Obj30_Block012-Obj30_Index
0000E15A 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000E15C 0000                       		dc.w Obj30_Block34-Obj30_Index
0000E15E 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000E160                            
0000E160 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000E163 0400 01                    		dc.b 4,	0, 1
0000E166 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000E169 0800 01                    		dc.b 8,	0, 1
0000E16C                            ; ===========================================================================
0000E16C                            
0000E16C                            Obj30_Main:				; XREF: Obj30_Index
0000E16C 45F9 0000 E160             		lea	(Obj30_Vars1).l,a2
0000E172 7201                       		moveq	#1,d1
0000E174 117C 0048 0016             		move.b	#$48,$16(a0)
0000E17A 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000E180 6500                       		bcs.s	loc_B40C	; if yes, branch
0000E182 45F9 0000 E166             		lea	(Obj30_Vars2).l,a2
0000E188 7201                       		moveq	#1,d1
0000E18A 117C 0038 0016             		move.b	#$38,$16(a0)
0000E190                            
0000E190                            loc_B40C:
0000E190 2248                       		movea.l	a0,a1
0000E192 6000                       		bra.s	Obj30_Load	; load main object
0000E194                            ; ===========================================================================
0000E194                            
0000E194                            Obj30_Loop:
0000E194 6100 0000                  		bsr.w	SingleObjLoad2
0000E198 6600                       		bne.s	loc_B480
0000E19A                            
0000E19A                            Obj30_Load:				; XREF: Obj30_Main
0000E19A 135A 0024                  		move.b	(a2)+,$24(a1)
0000E19E 12BC 0030                  		move.b	#$30,0(a1)
0000E1A2 3368 0008 0008             		move.w	8(a0),8(a1)
0000E1A8 101A                       		move.b	(a2)+,d0
0000E1AA 4880                       		ext.w	d0
0000E1AC D068 000C                  		add.w	$C(a0),d0
0000E1B0 3340 000C                  		move.w	d0,$C(a1)
0000E1B4 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000E1BC 337C C38E 0002             		move.w	#$C38E,2(a1)
0000E1C2 137C 0004 0001             		move.b	#4,1(a1)
0000E1C8 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000E1CE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E1D4 137C 0020 0019             		move.b	#$20,$19(a1)
0000E1DA 137C 0004 0018             		move.b	#4,$18(a1)
0000E1E0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E1E4 2348 003C                  		move.l	a0,$3C(a1)
0000E1E8 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000E1EC                            
0000E1EC 137C 0010 0019             		move.b	#$10,$19(a1)
0000E1F2 137C 0003 0018             		move.b	#3,$18(a1)
0000E1F8 5029 0028                  		addq.b	#8,$28(a1)
0000E1FC 0229 000F 0028             		andi.b	#$F,$28(a1)
0000E202                            
0000E202                            loc_B480:
0000E202 317C 0090 0032             		move.w	#$90,$32(a0)
0000E208 08E8 0004 0001             		bset	#4,1(a0)
0000E20E                            
0000E20E                            Obj30_Block012:				; XREF: Obj30_Index
0000E20E 6100 0000                  		bsr.w	Obj30_Types
0000E212 323C 002B                  		move.w	#$2B,d1
0000E216 343C 0048                  		move.w	#$48,d2
0000E21A 363C 0049                  		move.w	#$49,d3
0000E21E 3828 0008                  		move.w	8(a0),d4
0000E222 6000 0000                  		bra.w	SolidObject
0000E226                            ; ===========================================================================
0000E226                            
0000E226                            Obj30_Reflect012:			; XREF: Obj30_Index
0000E226 2268 003C                  		movea.l	$3C(a0),a1
0000E22A 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000E230 6000 0000                  		bra.w	Obj30_Types
0000E234                            ; ===========================================================================
0000E234                            
0000E234                            Obj30_Block34:				; XREF: Obj30_Index
0000E234 6100 0000                  		bsr.w	Obj30_Types
0000E238 323C 002B                  		move.w	#$2B,d1
0000E23C 343C 0038                  		move.w	#$38,d2
0000E240 363C 0039                  		move.w	#$39,d3
0000E244 3828 0008                  		move.w	8(a0),d4
0000E248 6000 0000                  		bra.w	SolidObject
0000E24C                            ; ===========================================================================
0000E24C                            
0000E24C                            Obj30_Reflect34:			; XREF: Obj30_Index
0000E24C 2268 003C                  		movea.l	$3C(a0),a1
0000E250 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000E256 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000E25C 6000 0002                  		bra.w	*+4
0000E260                            
0000E260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E260                            
0000E260                            
0000E260                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000E260 7000                       		moveq	#0,d0
0000E262 1028 0028                  		move.b	$28(a0),d0
0000E266 0240 0007                  		andi.w	#7,d0
0000E26A D040                       		add.w	d0,d0
0000E26C 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000E270 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000E274                            ; End of function Obj30_Types
0000E274                            
0000E274                            ; ===========================================================================
0000E274 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000E276 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000E278 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000E27A 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000E27C 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000E27E                            ; ===========================================================================
0000E27E                            
0000E27E                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000E27E 4E75                       		rts	
0000E280                            ; ===========================================================================
0000E280                            
0000E280                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000E280 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E284 323C 0040                  		move.w	#$40,d1
0000E288 6000                       		bra.s	loc_B514
0000E28A                            ; ===========================================================================
0000E28A                            
0000E28A                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000E28A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E28E 323C 0040                  		move.w	#$40,d1
0000E292 4440                       		neg.w	d0
0000E294 D041                       		add.w	d1,d0
0000E296                            
0000E296                            loc_B514:				; XREF: Obj30_Type01
0000E296 0828 0003 0028             		btst	#3,$28(a0)
0000E29C 6700                       		beq.s	loc_B526
0000E29E 4440                       		neg.w	d0
0000E2A0 D041                       		add.w	d1,d0
0000E2A2 E208                       		lsr.b	#1,d0
0000E2A4 0640 0020                  		addi.w	#$20,d0
0000E2A8                            
0000E2A8                            loc_B526:
0000E2A8 6000 0000                  		bra.w	loc_B5EE
0000E2AC                            ; ===========================================================================
0000E2AC                            
0000E2AC                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000E2AC 0828 0003 0028             		btst	#3,$28(a0)
0000E2B2 6700                       		beq.s	loc_B53E
0000E2B4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E2B8 0440 0010                  		subi.w	#$10,d0
0000E2BC 6000 0000                  		bra.w	loc_B5EE
0000E2C0                            ; ===========================================================================
0000E2C0                            
0000E2C0                            loc_B53E:
0000E2C0 0828 0003 0022             		btst	#3,$22(a0)
0000E2C6 6600                       		bne.s	loc_B54E
0000E2C8 08A8 0000 0034             		bclr	#0,$34(a0)
0000E2CE 6000                       		bra.s	loc_B582
0000E2D0                            ; ===========================================================================
0000E2D0                            
0000E2D0                            loc_B54E:
0000E2D0 4A28 0034                  		tst.b	$34(a0)
0000E2D4 6600                       		bne.s	loc_B582
0000E2D6 117C 0001 0034             		move.b	#1,$34(a0)
0000E2DC 08E8 0000 0035             		bset	#0,$35(a0)
0000E2E2 6700                       		beq.s	loc_B582
0000E2E4 08E8 0007 0034             		bset	#7,$34(a0)
0000E2EA 317C 0010 0036             		move.w	#$10,$36(a0)
0000E2F0 117C 000A 0038             		move.b	#$A,$38(a0)
0000E2F6 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000E2FC 6600                       		bne.s	loc_B582
0000E2FE 317C 0040 0036             		move.w	#$40,$36(a0)
0000E304                            
0000E304                            loc_B582:
0000E304 4A28 0034                  		tst.b	$34(a0)
0000E308 6A00                       		bpl.s	loc_B5AA
0000E30A 4A28 0038                  		tst.b	$38(a0)
0000E30E 6700                       		beq.s	loc_B594
0000E310 5328 0038                  		subq.b	#1,$38(a0)
0000E314 6600                       		bne.s	loc_B5AA
0000E316                            
0000E316                            loc_B594:
0000E316 4A68 0032                  		tst.w	$32(a0)
0000E31A 6700                       		beq.s	loc_B5A4
0000E31C 5368 0032                  		subq.w	#1,$32(a0)
0000E320 5368 0036                  		subq.w	#1,$36(a0)
0000E324 6600                       		bne.s	loc_B5AA
0000E326                            
0000E326                            loc_B5A4:
0000E326 08A8 0007 0034             		bclr	#7,$34(a0)
0000E32C                            
0000E32C                            loc_B5AA:
0000E32C 3028 0032                  		move.w	$32(a0),d0
0000E330 6000                       		bra.s	loc_B5EE
0000E332                            ; ===========================================================================
0000E332                            
0000E332                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000E332 0828 0003 0028             		btst	#3,$28(a0)
0000E338 6700                       		beq.s	Obj30_ChkSwitch
0000E33A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E33E 0440 0010                  		subi.w	#$10,d0
0000E342 6000                       		bra.s	loc_B5EE
0000E344                            ; ===========================================================================
0000E344                            
0000E344                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000E344 4A28 0034                  		tst.b	$34(a0)
0000E348 6600                       		bne.s	loc_B5E0
0000E34A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000E34E 7000                       		moveq	#0,d0
0000E350 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000E354 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000E356 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000E35A 6700                       		beq.s	loc_B5EA	; if not, branch
0000E35C 117C 0001 0034             		move.b	#1,$34(a0)
0000E362                            
0000E362                            loc_B5E0:
0000E362 4A68 0032                  		tst.w	$32(a0)
0000E366 6700                       		beq.s	loc_B5EA
0000E368 5568 0032                  		subq.w	#2,$32(a0)
0000E36C                            
0000E36C                            loc_B5EA:
0000E36C 3028 0032                  		move.w	$32(a0),d0
0000E370                            
0000E370                            loc_B5EE:
0000E370 3228 0030                  		move.w	$30(a0),d1
0000E374 9240                       		sub.w	d0,d1
0000E376 3141 000C                  		move.w	d1,$C(a0)
0000E37A 4E75                       		rts	
0000E37C                            ; ===========================================================================
0000E37C                            ; ---------------------------------------------------------------------------
0000E37C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000E37C                            ; ---------------------------------------------------------------------------
0000E37C                            Map_obj30:
0000E37C                            	include "_maps\obj30.asm"
0000E37C                            ; ---------------------------------------------------------------------------
0000E37C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000E37C                            ; ---------------------------------------------------------------------------
0000E37C 0000                       		dc.w byte_B600-Map_obj30
0000E37E 0000                       		dc.w byte_B63D-Map_obj30
0000E380 0000                       		dc.w byte_B648-Map_obj30
0000E382 0C                         byte_B600:	dc.b $C
0000E383 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000E388 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000E38D C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000E392 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000E397 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000E39C E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000E3A1 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000E3A6 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000E3AB 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000E3B0 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000E3B5 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000E3BA 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000E3BF 02                         byte_B63D:	dc.b 2
0000E3C0 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000E3C5 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000E3CA 0A                         byte_B648:	dc.b $A
0000E3CB C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000E3D0 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000E3D5 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000E3DA D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000E3DF F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000E3E4 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000E3E9 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000E3EE 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000E3F3 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000E3F8 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000E3FE 00                         		even
0000E3FE 00                         		even
0000E3FE                            
0000E3FE                            ; ===========================================================================
0000E3FE                            ; ---------------------------------------------------------------------------
0000E3FE                            ; Object 31 - stomping metal blocks on chains (MZ)
0000E3FE                            ; ---------------------------------------------------------------------------
0000E3FE                            
0000E3FE                            Obj31:					; XREF: Obj_Index
0000E3FE 7000                       		moveq	#0,d0
0000E400 1028 0024                  		move.b	$24(a0),d0
0000E404 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000E408 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000E40C                            ; ===========================================================================
0000E40C 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000E40E 0000                       		dc.w loc_B798-Obj31_Index
0000E410 0000                       		dc.w loc_B7FE-Obj31_Index
0000E412 0000                       		dc.w Obj31_Display2-Obj31_Index
0000E414 0000                       		dc.w loc_B7E2-Obj31_Index
0000E416                            
0000E416 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000E418 0100                       		dc.b 1,	0
0000E41A                            
0000E41A 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000E41D 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000E420 08CC 03                    		dc.b 8,	$CC, 3
0000E423 06F0 02                    		dc.b 6,	$F0, 2
0000E426                            
0000E426 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000E42A 5000 7800                  		dc.w $5000, $7800
0000E42E 3800 5800                  		dc.w $3800, $5800
0000E432 B800                       		dc.w $B800
0000E434                            ; ===========================================================================
0000E434                            
0000E434                            Obj31_Main:				; XREF: Obj31_Index
0000E434 7000                       		moveq	#0,d0
0000E436 1028 0028                  		move.b	$28(a0),d0
0000E43A 6A00                       		bpl.s	loc_B6CE
0000E43C 0240 007F                  		andi.w	#$7F,d0
0000E440 D040                       		add.w	d0,d0
0000E442 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000E446 115A 003A                  		move.b	(a2)+,$3A(a0)
0000E44A 101A                       		move.b	(a2)+,d0
0000E44C 1140 0028                  		move.b	d0,$28(a0)
0000E450                            
0000E450                            loc_B6CE:
0000E450 0200 000F                  		andi.b	#$F,d0
0000E454 D040                       		add.w	d0,d0
0000E456 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000E45A 4A40                       		tst.w	d0
0000E45C 6600                       		bne.s	loc_B6E0
0000E45E 3142 0032                  		move.w	d2,$32(a0)
0000E462                            
0000E462                            loc_B6E0:
0000E462 45F9 0000 E41A             		lea	(Obj31_Var).l,a2
0000E468 2248                       		movea.l	a0,a1
0000E46A 7203                       		moveq	#3,d1
0000E46C 6000                       		bra.s	Obj31_MakeStomper
0000E46E                            ; ===========================================================================
0000E46E                            
0000E46E                            Obj31_Loop:
0000E46E 6100 0000                  		bsr.w	SingleObjLoad2
0000E472 6600 0000                  		bne.w	Obj31_SetSize
0000E476                            
0000E476                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000E476 135A 0024                  		move.b	(a2)+,$24(a1)
0000E47A 12BC 0031                  		move.b	#$31,0(a1)
0000E47E 3368 0008 0008             		move.w	8(a0),8(a1)
0000E484 101A                       		move.b	(a2)+,d0
0000E486 4880                       		ext.w	d0
0000E488 D068 000C                  		add.w	$C(a0),d0
0000E48C 3340 000C                  		move.w	d0,$C(a1)
0000E490 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000E498 337C 0300 0002             		move.w	#$300,2(a1)
0000E49E 137C 0004 0001             		move.b	#4,1(a1)
0000E4A4 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000E4AA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E4B0 137C 0010 0019             		move.b	#$10,$19(a1)
0000E4B6 3342 0034                  		move.w	d2,$34(a1)
0000E4BA 137C 0004 0018             		move.b	#4,$18(a1)
0000E4C0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E4C4 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000E4CA 6600                       		bne.s	loc_B76A
0000E4CC 5341                       		subq.w	#1,d1
0000E4CE 1028 0028                  		move.b	$28(a0),d0
0000E4D2 0240 00F0                  		andi.w	#$F0,d0
0000E4D6 0C40 0020                  		cmpi.w	#$20,d0
0000E4DA 679A                       		beq.s	Obj31_MakeStomper
0000E4DC 137C 0038 0019             		move.b	#$38,$19(a1)
0000E4E2 137C 0090 0020             		move.b	#$90,$20(a1)
0000E4E8 5241                       		addq.w	#1,d1
0000E4EA                            
0000E4EA                            loc_B76A:
0000E4EA 2348 003C                  		move.l	a0,$3C(a1)
0000E4EE 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000E4F2                            
0000E4F2 137C 0003 0018             		move.b	#3,$18(a1)
0000E4F8                            
0000E4F8                            Obj31_SetSize:
0000E4F8 7000                       		moveq	#0,d0
0000E4FA 1028 0028                  		move.b	$28(a0),d0
0000E4FE E648                       		lsr.w	#3,d0
0000E500 0200 000E                  		andi.b	#$E,d0
0000E504 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000E508 115A 0019                  		move.b	(a2)+,$19(a0)
0000E50C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000E510 6000                       		bra.s	loc_B798
0000E512                            ; ===========================================================================
0000E512 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000E514 3009                       		dc.b $30, 9
0000E516 100A                       		dc.b $10, $A
0000E518                            ; ===========================================================================
0000E518                            
0000E518                            loc_B798:				; XREF: Obj31_Index
0000E518 6100 0000                  		bsr.w	Obj31_Types
0000E51C 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000E522 7200                       		moveq	#0,d1
0000E524 1228 0019                  		move.b	$19(a0),d1
0000E528 0641 000B                  		addi.w	#$B,d1
0000E52C 343C 000C                  		move.w	#$C,d2
0000E530 363C 000D                  		move.w	#$D,d3
0000E534 3828 0008                  		move.w	8(a0),d4
0000E538 6100 0000                  		bsr.w	SolidObject
0000E53C 0828 0003 0022             		btst	#3,$22(a0)
0000E542 6700                       		beq.s	Obj31_Display
0000E544 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000E54A 6400                       		bcc.s	Obj31_Display
0000E54C 2448                       		movea.l	a0,a2
0000E54E 41F8 D000                  		lea	($FFFFD000).w,a0
0000E552 4EB9 0000 0000             		jsr	KillSonic
0000E558 204A                       		movea.l	a2,a0
0000E55A                            
0000E55A                            Obj31_Display:
0000E55A 6100 0000                  		bsr.w	DisplaySprite
0000E55E 6000 0000                  		bra.w	Obj31_ChkDel
0000E562                            ; ===========================================================================
0000E562                            
0000E562                            loc_B7E2:				; XREF: Obj31_Index
0000E562 117C 0080 0016             		move.b	#$80,$16(a0)
0000E568 08E8 0004 0001             		bset	#4,1(a0)
0000E56E 2268 003C                  		movea.l	$3C(a0),a1
0000E572 1029 0032                  		move.b	$32(a1),d0
0000E576 EA08                       		lsr.b	#5,d0
0000E578 5600                       		addq.b	#3,d0
0000E57A 1140 001A                  		move.b	d0,$1A(a0)
0000E57E                            
0000E57E                            loc_B7FE:				; XREF: Obj31_Index
0000E57E 2268 003C                  		movea.l	$3C(a0),a1
0000E582 7000                       		moveq	#0,d0
0000E584 1029 0032                  		move.b	$32(a1),d0
0000E588 D068 0030                  		add.w	$30(a0),d0
0000E58C 3140 000C                  		move.w	d0,$C(a0)
0000E590                            
0000E590                            Obj31_Display2:				; XREF: Obj31_Index
0000E590 6100 0000                  		bsr.w	DisplaySprite
0000E594                            
0000E594                            Obj31_ChkDel:				; XREF: Obj31_Display
0000E594 3028 0008                  		move.w	8(a0),d0
0000E598 0240 FF80                  		andi.w	#$FF80,d0
0000E59C 3238 F700                  		move.w	($FFFFF700).w,d1
0000E5A0 0441 0080                  		subi.w	#$80,d1
0000E5A4 0241 FF80                  		andi.w	#$FF80,d1
0000E5A8 9041                       		sub.w	d1,d0
0000E5AA 0C40 0280                  		cmpi.w	#$280,d0
0000E5AE 6200 0000                  		bhi.w	DeleteObject
0000E5B2 4E75                       		rts	
0000E5B4                            ; ===========================================================================
0000E5B4                            
0000E5B4                            Obj31_Types:				; XREF: loc_B798
0000E5B4 1028 0028                  		move.b	$28(a0),d0
0000E5B8 0240 000F                  		andi.w	#$F,d0
0000E5BC D040                       		add.w	d0,d0
0000E5BE 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000E5C2 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000E5C6                            ; ===========================================================================
0000E5C6 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000E5C8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000E5CA 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000E5CC 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000E5CE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000E5D0 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000E5D2 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000E5D4                            ; ===========================================================================
0000E5D4                            
0000E5D4                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000E5D4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000E5D8 7000                       		moveq	#0,d0
0000E5DA 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000E5DE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000E5E2 6700                       		beq.s	loc_B8A8	; if not, branch
0000E5E4 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000E5E8 6A00                       		bpl.s	loc_B872
0000E5EA 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000E5F0 6700                       		beq.s	loc_B8A0
0000E5F2                            
0000E5F2                            loc_B872:
0000E5F2 4A68 0032                  		tst.w	$32(a0)
0000E5F6 6700                       		beq.s	loc_B8A0
0000E5F8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E5FC 0200 000F                  		andi.b	#$F,d0
0000E600 6600                       		bne.s	loc_B892
0000E602 4A28 0001                  		tst.b	1(a0)
0000E606 6A00                       		bpl.s	loc_B892
0000E608 303C 00C7                  		move.w	#$C7,d0
0000E60C 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000E612                            
0000E612                            loc_B892:
0000E612 0468 0080 0032             		subi.w	#$80,$32(a0)
0000E618 6400                       		bcc.s	Obj31_Restart
0000E61A 317C 0000 0032             		move.w	#0,$32(a0)
0000E620                            
0000E620                            loc_B8A0:
0000E620 317C 0000 0012             		move.w	#0,$12(a0)
0000E626 6000                       		bra.s	Obj31_Restart
0000E628                            ; ===========================================================================
0000E628                            
0000E628                            loc_B8A8:				; XREF: Obj31_Type00
0000E628 3228 0034                  		move.w	$34(a0),d1
0000E62C B268 0032                  		cmp.w	$32(a0),d1
0000E630 6700                       		beq.s	Obj31_Restart
0000E632 3028 0012                  		move.w	$12(a0),d0
0000E636 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000E63C D168 0032                  		add.w	d0,$32(a0)
0000E640 B268 0032                  		cmp.w	$32(a0),d1
0000E644 6200                       		bhi.s	Obj31_Restart
0000E646 3141 0032                  		move.w	d1,$32(a0)
0000E64A 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000E650 4A28 0001                  		tst.b	1(a0)
0000E654 6A00                       		bpl.s	Obj31_Restart
0000E656 303C 00BD                  		move.w	#$BD,d0
0000E65A 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000E660                            
0000E660                            Obj31_Restart:
0000E660 7000                       		moveq	#0,d0
0000E662 1028 0032                  		move.b	$32(a0),d0
0000E666 D068 0030                  		add.w	$30(a0),d0
0000E66A 3140 000C                  		move.w	d0,$C(a0)
0000E66E 4E75                       		rts	
0000E670                            ; ===========================================================================
0000E670                            
0000E670                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000E670 4A68 0036                  		tst.w	$36(a0)
0000E674 6700                       		beq.s	loc_B938
0000E676 4A68 0038                  		tst.w	$38(a0)
0000E67A 6700                       		beq.s	loc_B902
0000E67C 5368 0038                  		subq.w	#1,$38(a0)
0000E680 6000                       		bra.s	loc_B97C
0000E682                            ; ===========================================================================
0000E682                            
0000E682                            loc_B902:
0000E682 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E686 0200 000F                  		andi.b	#$F,d0
0000E68A 6600                       		bne.s	loc_B91C
0000E68C 4A28 0001                  		tst.b	1(a0)
0000E690 6A00                       		bpl.s	loc_B91C
0000E692 303C 00C7                  		move.w	#$C7,d0
0000E696 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000E69C                            
0000E69C                            loc_B91C:
0000E69C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000E6A2 6400                       		bcc.s	loc_B97C
0000E6A4 317C 0000 0032             		move.w	#0,$32(a0)
0000E6AA 317C 0000 0012             		move.w	#0,$12(a0)
0000E6B0 317C 0000 0036             		move.w	#0,$36(a0)
0000E6B6 6000                       		bra.s	loc_B97C
0000E6B8                            ; ===========================================================================
0000E6B8                            
0000E6B8                            loc_B938:				; XREF: Obj31_Type01
0000E6B8 3228 0034                  		move.w	$34(a0),d1
0000E6BC B268 0032                  		cmp.w	$32(a0),d1
0000E6C0 6700                       		beq.s	loc_B97C
0000E6C2 3028 0012                  		move.w	$12(a0),d0
0000E6C6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000E6CC D168 0032                  		add.w	d0,$32(a0)
0000E6D0 B268 0032                  		cmp.w	$32(a0),d1
0000E6D4 6200                       		bhi.s	loc_B97C
0000E6D6 3141 0032                  		move.w	d1,$32(a0)
0000E6DA 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000E6E0 317C 0001 0036             		move.w	#1,$36(a0)
0000E6E6 317C 003C 0038             		move.w	#$3C,$38(a0)
0000E6EC 4A28 0001                  		tst.b	1(a0)
0000E6F0 6A00                       		bpl.s	loc_B97C
0000E6F2 303C 00BD                  		move.w	#$BD,d0
0000E6F6 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000E6FC                            
0000E6FC                            loc_B97C:
0000E6FC 6000 FF62                  		bra.w	Obj31_Restart
0000E700                            ; ===========================================================================
0000E700                            
0000E700                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000E700 3038 D008                  		move.w	($FFFFD008).w,d0
0000E704 9068 0008                  		sub.w	8(a0),d0
0000E708 6400                       		bcc.s	loc_B98C
0000E70A 4440                       		neg.w	d0
0000E70C                            
0000E70C                            loc_B98C:
0000E70C 0C40 0090                  		cmpi.w	#$90,d0
0000E710 6400                       		bcc.s	loc_B996
0000E712 5228 0028                  		addq.b	#1,$28(a0)
0000E716                            
0000E716                            loc_B996:
0000E716 6000 FF48                  		bra.w	Obj31_Restart
0000E71A                            ; ===========================================================================
0000E71A                            ; ---------------------------------------------------------------------------
0000E71A                            ; Object 45 - spiked metal block from beta version (MZ)
0000E71A                            ; ---------------------------------------------------------------------------
0000E71A                            
0000E71A                            Obj45:					; XREF: Obj_Index
0000E71A 7000                       		moveq	#0,d0
0000E71C 1028 0024                  		move.b	$24(a0),d0
0000E720 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000E724 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000E728                            ; ===========================================================================
0000E728 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000E72A 0000                       		dc.w Obj45_Solid-Obj45_Index
0000E72C 0000                       		dc.w loc_BA8E-Obj45_Index
0000E72E 0000                       		dc.w Obj45_Display-Obj45_Index
0000E730 0000                       		dc.w loc_BA7A-Obj45_Index
0000E732                            
0000E732 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000E735 04E4 01                    		dc.b	4, $E4,	  1
0000E738 0834 03                    		dc.b	8, $34,	  3
0000E73B 0628 02                    		dc.b	6, $28,	  2
0000E73E                            
0000E73E 3800                       word_B9BE:	dc.w $3800
0000E740 A000                       		dc.w -$6000
0000E742 5000                       		dc.w $5000
0000E744                            ; ===========================================================================
0000E744                            
0000E744                            Obj45_Main:				; XREF: Obj45_Index
0000E744 7000                       		moveq	#0,d0
0000E746 1028 0028                  		move.b	$28(a0),d0
0000E74A D040                       		add.w	d0,d0
0000E74C 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000E750 45F9 0000 E732             		lea	(Obj45_Var).l,a2
0000E756 2248                       		movea.l	a0,a1
0000E758 7203                       		moveq	#3,d1
0000E75A 6000                       		bra.s	Obj45_Load
0000E75C                            ; ===========================================================================
0000E75C                            
0000E75C                            Obj45_Loop:
0000E75C 6100 0000                  		bsr.w	SingleObjLoad2
0000E760 6600                       		bne.s	loc_BA52
0000E762                            
0000E762                            Obj45_Load:				; XREF: Obj45_Main
0000E762 135A 0024                  		move.b	(a2)+,$24(a1)
0000E766 12BC 0045                  		move.b	#$45,0(a1)
0000E76A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E770 101A                       		move.b	(a2)+,d0
0000E772 4880                       		ext.w	d0
0000E774 D068 0008                  		add.w	8(a0),d0
0000E778 3340 0008                  		move.w	d0,8(a1)
0000E77C 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000E784 337C 0300 0002             		move.w	#$300,2(a1)
0000E78A 137C 0004 0001             		move.b	#4,1(a1)
0000E790 3369 0008 0030             		move.w	8(a1),$30(a1)
0000E796 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000E79C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E7A2 137C 0020 0019             		move.b	#$20,$19(a1)
0000E7A8 3342 0034                  		move.w	d2,$34(a1)
0000E7AC 137C 0004 0018             		move.b	#4,$18(a1)
0000E7B2 0C12 0001                  		cmpi.b	#1,(a2)
0000E7B6 6600                       		bne.s	loc_BA40
0000E7B8 137C 0091 0020             		move.b	#$91,$20(a1)
0000E7BE                            
0000E7BE                            loc_BA40:
0000E7BE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E7C2 2348 003C                  		move.l	a0,$3C(a1)
0000E7C6 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000E7CA                            
0000E7CA 137C 0003 0018             		move.b	#3,$18(a1)
0000E7D0                            
0000E7D0                            loc_BA52:
0000E7D0 117C 0010 0019             		move.b	#$10,$19(a0)
0000E7D6                            
0000E7D6                            Obj45_Solid:				; XREF: Obj45_Index
0000E7D6 3F28 0008                  		move.w	8(a0),-(sp)
0000E7DA 6100 0000                  		bsr.w	Obj45_Move
0000E7DE 323C 0017                  		move.w	#$17,d1
0000E7E2 343C 0020                  		move.w	#$20,d2
0000E7E6 363C 0020                  		move.w	#$20,d3
0000E7EA 381F                       		move.w	(sp)+,d4
0000E7EC 6100 0000                  		bsr.w	SolidObject
0000E7F0 6100 0000                  		bsr.w	DisplaySprite
0000E7F4 6000 0000                  		bra.w	Obj45_ChkDel
0000E7F8                            ; ===========================================================================
0000E7F8                            
0000E7F8                            loc_BA7A:				; XREF: Obj45_Index
0000E7F8 2268 003C                  		movea.l	$3C(a0),a1
0000E7FC 1029 0032                  		move.b	$32(a1),d0
0000E800 0600 0010                  		addi.b	#$10,d0
0000E804 EA08                       		lsr.b	#5,d0
0000E806 5600                       		addq.b	#3,d0
0000E808 1140 001A                  		move.b	d0,$1A(a0)
0000E80C                            
0000E80C                            loc_BA8E:				; XREF: Obj45_Index
0000E80C 2268 003C                  		movea.l	$3C(a0),a1
0000E810 7000                       		moveq	#0,d0
0000E812 1029 0032                  		move.b	$32(a1),d0
0000E816 4440                       		neg.w	d0
0000E818 D068 0030                  		add.w	$30(a0),d0
0000E81C 3140 0008                  		move.w	d0,8(a0)
0000E820                            
0000E820                            Obj45_Display:				; XREF: Obj45_Index
0000E820 6100 0000                  		bsr.w	DisplaySprite
0000E824                            
0000E824                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000E824 3028 003A                  		move.w	$3A(a0),d0
0000E828 0240 FF80                  		andi.w	#$FF80,d0
0000E82C 3238 F700                  		move.w	($FFFFF700).w,d1
0000E830 0441 0080                  		subi.w	#$80,d1
0000E834 0241 FF80                  		andi.w	#$FF80,d1
0000E838 9041                       		sub.w	d1,d0
0000E83A 0C40 0280                  		cmpi.w	#$280,d0
0000E83E 6200 0000                  		bhi.w	DeleteObject
0000E842 4E75                       		rts	
0000E844                            
0000E844                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E844                            
0000E844                            
0000E844                            Obj45_Move:				; XREF: Obj45_Solid
0000E844 7000                       		moveq	#0,d0
0000E846 1028 0028                  		move.b	$28(a0),d0
0000E84A D040                       		add.w	d0,d0
0000E84C 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000E850 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000E854                            ; End of function Obj45_Move
0000E854                            
0000E854                            ; ===========================================================================
0000E854 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000E856 0000                       		dc.w loc_BADA-off_BAD6
0000E858                            ; ===========================================================================
0000E858                            
0000E858                            loc_BADA:				; XREF: off_BAD6
0000E858 4A68 0036                  		tst.w	$36(a0)
0000E85C 6700                       		beq.s	loc_BB08
0000E85E 4A68 0038                  		tst.w	$38(a0)
0000E862 6700                       		beq.s	loc_BAEC
0000E864 5368 0038                  		subq.w	#1,$38(a0)
0000E868 6000                       		bra.s	loc_BB3C
0000E86A                            ; ===========================================================================
0000E86A                            
0000E86A                            loc_BAEC:
0000E86A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000E870 6400                       		bcc.s	loc_BB3C
0000E872 317C 0000 0032             		move.w	#0,$32(a0)
0000E878 317C 0000 0010             		move.w	#0,$10(a0)
0000E87E 317C 0000 0036             		move.w	#0,$36(a0)
0000E884 6000                       		bra.s	loc_BB3C
0000E886                            ; ===========================================================================
0000E886                            
0000E886                            loc_BB08:				; XREF: loc_BADA
0000E886 3228 0034                  		move.w	$34(a0),d1
0000E88A B268 0032                  		cmp.w	$32(a0),d1
0000E88E 6700                       		beq.s	loc_BB3C
0000E890 3028 0010                  		move.w	$10(a0),d0
0000E894 0668 0070 0010             		addi.w	#$70,$10(a0)
0000E89A D168 0032                  		add.w	d0,$32(a0)
0000E89E B268 0032                  		cmp.w	$32(a0),d1
0000E8A2 6200                       		bhi.s	loc_BB3C
0000E8A4 3141 0032                  		move.w	d1,$32(a0)
0000E8A8 317C 0000 0010             		move.w	#0,$10(a0)
0000E8AE 317C 0001 0036             		move.w	#1,$36(a0)
0000E8B4 317C 003C 0038             		move.w	#$3C,$38(a0)
0000E8BA                            
0000E8BA                            loc_BB3C:
0000E8BA 7000                       		moveq	#0,d0
0000E8BC 1028 0032                  		move.b	$32(a0),d0
0000E8C0 4440                       		neg.w	d0
0000E8C2 D068 0030                  		add.w	$30(a0),d0
0000E8C6 3140 0008                  		move.w	d0,8(a0)
0000E8CA 4E75                       		rts	
0000E8CC                            ; ===========================================================================
0000E8CC                            ; ---------------------------------------------------------------------------
0000E8CC                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000E8CC                            ; ---------------------------------------------------------------------------
0000E8CC                            Map_obj31:
0000E8CC                            	include "_maps\obj31.asm"
0000E8CC                            ; ---------------------------------------------------------------------------
0000E8CC                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000E8CC                            ; ---------------------------------------------------------------------------
0000E8CC 0000                       		dc.w byte_BB64-Map_obj31
0000E8CE 0000                       		dc.w byte_BB7E-Map_obj31
0000E8D0 0000                       		dc.w byte_BB98-Map_obj31
0000E8D2 0000                       		dc.w byte_BB9E-Map_obj31
0000E8D4 0000                       		dc.w byte_BBA9-Map_obj31
0000E8D6 0000                       		dc.w byte_BBBE-Map_obj31
0000E8D8 0000                       		dc.w byte_BBDD-Map_obj31
0000E8DA 0000                       		dc.w byte_BC06-Map_obj31
0000E8DC 0000                       		dc.w byte_BC06-Map_obj31
0000E8DE 0000                       		dc.w byte_BC39-Map_obj31
0000E8E0 0000                       		dc.w byte_BC53-Map_obj31
0000E8E2 05                         byte_BB64:	dc.b 5
0000E8E3 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000E8E8 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000E8ED EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000E8F2 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000E8F7 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000E8FC 05                         byte_BB7E:	dc.b 5
0000E8FD F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000E902 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000E907 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000E90C F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000E911 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000E916 01                         byte_BB98:	dc.b 1
0000E917 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000E91C 02                         byte_BB9E:	dc.b 2
0000E91D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000E922 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000E927 04                         byte_BBA9:	dc.b 4
0000E928 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000E92D F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000E932 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000E937 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000E93C 06                         byte_BBBE:	dc.b 6
0000E93D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000E942 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000E947 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000E94C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000E951 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000E956 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000E95B 08                         byte_BBDD:	dc.b 8
0000E95C A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000E961 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000E966 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000E96B D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000E970 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000E975 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000E97A 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000E97F 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000E984 0A                         byte_BC06:	dc.b $A
0000E985 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000E98A 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000E98F A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000E994 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000E999 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000E99E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000E9A3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000E9A8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000E9AD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000E9B2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000E9B7 05                         byte_BC39:	dc.b 5
0000E9B8 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000E9BD F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000E9C2 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000E9C7 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000E9CC EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000E9D1 01                         byte_BC53:	dc.b 1
0000E9D2 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000E9D8 00                         		even
0000E9D8 00                         		even
0000E9D8                            
0000E9D8                            ; ---------------------------------------------------------------------------
0000E9D8                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000E9D8                            ; ---------------------------------------------------------------------------
0000E9D8                            Map_obj45:
0000E9D8                            	include "_maps\obj45.asm"
0000E9D8                            ; ---------------------------------------------------------------------------
0000E9D8                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000E9D8                            ; ---------------------------------------------------------------------------
0000E9D8 0000                       		dc.w byte_BC6C-Map_obj45
0000E9DA 0000                       		dc.w byte_BC7C-Map_obj45
0000E9DC 0000                       		dc.w byte_BC8C-Map_obj45
0000E9DE 0000                       		dc.w byte_BC92-Map_obj45
0000E9E0 0000                       		dc.w byte_BC9D-Map_obj45
0000E9E2 0000                       		dc.w byte_BCB2-Map_obj45
0000E9E4 0000                       		dc.w byte_BCD1-Map_obj45
0000E9E6 0000                       		dc.w byte_BCFA-Map_obj45
0000E9E8 0000                       		dc.w byte_BCFA-Map_obj45
0000E9EA 03                         byte_BC6C:	dc.b 3
0000E9EB E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000E9F0 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000E9F5 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000E9FA 03                         byte_BC7C:	dc.b 3
0000E9FB E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000EA00 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000EA05 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000EA0A 01                         byte_BC8C:	dc.b 1
0000EA0B F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000EA10 02                         byte_BC92:	dc.b 2
0000EA11 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000EA16 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000EA1B 04                         byte_BC9D:	dc.b 4
0000EA1C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000EA21 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000EA26 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000EA2B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000EA30 06                         byte_BCB2:	dc.b 6
0000EA31 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000EA36 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000EA3B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000EA40 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000EA45 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000EA4A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000EA4F 08                         byte_BCD1:	dc.b 8
0000EA50 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000EA55 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000EA5A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000EA5F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000EA64 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000EA69 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000EA6E F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000EA73 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000EA78 08                         byte_BCFA:	dc.b 8
0000EA79 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000EA7E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000EA83 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000EA88 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000EA8D F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000EA92 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000EA97 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000EA9C F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000EAA1 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000EAA6 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000EAAC 00                         		even
0000EAAC 00                         		even
0000EAAC                            
0000EAAC                            ; ===========================================================================
0000EAAC                            ; ---------------------------------------------------------------------------
0000EAAC                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000EAAC                            ; ---------------------------------------------------------------------------
0000EAAC                            
0000EAAC                            Obj32:					; XREF: Obj_Index
0000EAAC 7000                       		moveq	#0,d0
0000EAAE 1028 0024                  		move.b	$24(a0),d0
0000EAB2 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000EAB6 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000EABA                            ; ===========================================================================
0000EABA 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000EABC 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000EABE                            ; ===========================================================================
0000EABE                            
0000EABE                            Obj32_Main:				; XREF: Obj32_Index
0000EABE 5428 0024                  		addq.b	#2,$24(a0)
0000EAC2 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000EACA 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000EAD0 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000EAD6 6700                       		beq.s	loc_BD60
0000EAD8 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000EADE                            
0000EADE                            loc_BD60:
0000EADE 117C 0004 0001             		move.b	#4,1(a0)
0000EAE4 117C 0010 0019             		move.b	#$10,$19(a0)
0000EAEA 117C 0004 0018             		move.b	#4,$18(a0)
0000EAF0 5668 000C                  		addq.w	#3,$C(a0)
0000EAF4                            
0000EAF4                            Obj32_Pressed:				; XREF: Obj32_Index
0000EAF4 4A28 0001                  		tst.b	1(a0)
0000EAF8 6A00                       		bpl.s	Obj32_Display
0000EAFA 323C 001B                  		move.w	#$1B,d1
0000EAFE 343C 0005                  		move.w	#5,d2
0000EB02 363C 0005                  		move.w	#5,d3
0000EB06 3828 0008                  		move.w	8(a0),d4
0000EB0A 6100 0000                  		bsr.w	SolidObject
0000EB0E 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000EB14 1028 0028                  		move.b	$28(a0),d0
0000EB18 0240 000F                  		andi.w	#$F,d0
0000EB1C 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000EB20 47F3 0000                  		lea	(a3,d0.w),a3
0000EB24 7600                       		moveq	#0,d3
0000EB26 0828 0006 0028             		btst	#6,$28(a0)
0000EB2C 6700                       		beq.s	loc_BDB2
0000EB2E 7607                       		moveq	#7,d3
0000EB30                            
0000EB30                            loc_BDB2:
0000EB30 4A28 0028                  		tst.b	$28(a0)
0000EB34 6A00                       		bpl.s	loc_BDBE
0000EB36 6100 0000                  		bsr.w	Obj32_MZBlock
0000EB3A 6600                       		bne.s	loc_BDC8
0000EB3C                            
0000EB3C                            loc_BDBE:
0000EB3C 4A28 0025                  		tst.b	$25(a0)
0000EB40 6600                       		bne.s	loc_BDC8
0000EB42 0793                       		bclr	d3,(a3)
0000EB44 6000                       		bra.s	loc_BDDE
0000EB46                            ; ===========================================================================
0000EB46                            
0000EB46                            loc_BDC8:
0000EB46 4A13                       		tst.b	(a3)
0000EB48 6600                       		bne.s	loc_BDD6
0000EB4A 303C 00CD                  		move.w	#$CD,d0
0000EB4E 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play switch sound
0000EB54                            
0000EB54                            loc_BDD6:
0000EB54 07D3                       		bset	d3,(a3)
0000EB56 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000EB5C                            
0000EB5C                            loc_BDDE:
0000EB5C 0828 0005 0028             		btst	#5,$28(a0)
0000EB62 6700                       		beq.s	Obj32_Display
0000EB64 5328 001E                  		subq.b	#1,$1E(a0)
0000EB68 6A00                       		bpl.s	Obj32_Display
0000EB6A 117C 0007 001E             		move.b	#7,$1E(a0)
0000EB70 0868 0001 001A             		bchg	#1,$1A(a0)
0000EB76                            
0000EB76                            Obj32_Display:
0000EB76 6100 0000                  		bsr.w	DisplaySprite
0000EB7A 3028 0008                  		move.w	8(a0),d0
0000EB7E 0240 FF80                  		andi.w	#$FF80,d0
0000EB82 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB86 0441 0080                  		subi.w	#$80,d1
0000EB8A 0241 FF80                  		andi.w	#$FF80,d1
0000EB8E 9041                       		sub.w	d1,d0
0000EB90 0C40 0280                  		cmpi.w	#$280,d0
0000EB94 6200 0000                  		bhi.w	Obj32_Delete
0000EB98 4E75                       		rts	
0000EB9A                            ; ===========================================================================
0000EB9A                            
0000EB9A                            Obj32_Delete:
0000EB9A 6100 0000                  		bsr.w	DeleteObject
0000EB9E 4E75                       		rts	
0000EBA0                            
0000EBA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBA0                            
0000EBA0                            
0000EBA0                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000EBA0 3F03                       		move.w	d3,-(sp)
0000EBA2 3428 0008                  		move.w	8(a0),d2
0000EBA6 3628 000C                  		move.w	$C(a0),d3
0000EBAA 0442 0010                  		subi.w	#$10,d2
0000EBAE 5143                       		subq.w	#8,d3
0000EBB0 383C 0020                  		move.w	#$20,d4
0000EBB4 3A3C 0010                  		move.w	#$10,d5
0000EBB8 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000EBBC 3C3C 005F                  		move.w	#$5F,d6
0000EBC0                            
0000EBC0                            Obj32_MZLoop:
0000EBC0 4A29 0001                  		tst.b	1(a1)
0000EBC4 6A00                       		bpl.s	loc_BE4E
0000EBC6 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000EBCA 6700                       		beq.s	loc_BE5E	; if yes, branch
0000EBCC                            
0000EBCC                            loc_BE4E:
0000EBCC 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000EBD0 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000EBD4                            
0000EBD4 361F                       		move.w	(sp)+,d3
0000EBD6 7000                       		moveq	#0,d0
0000EBD8                            
0000EBD8                            locret_BE5A:
0000EBD8 4E75                       		rts	
0000EBDA                            ; ===========================================================================
0000EBDA 1010                       Obj32_MZData:	dc.b $10, $10
0000EBDC                            ; ===========================================================================
0000EBDC                            
0000EBDC                            loc_BE5E:				; XREF: Obj32_MZBlock
0000EBDC 7001                       		moveq	#1,d0
0000EBDE 0240 003F                  		andi.w	#$3F,d0
0000EBE2 D040                       		add.w	d0,d0
0000EBE4 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000EBE8 121A                       		move.b	(a2)+,d1
0000EBEA 4881                       		ext.w	d1
0000EBEC 3029 0008                  		move.w	8(a1),d0
0000EBF0 9041                       		sub.w	d1,d0
0000EBF2 9042                       		sub.w	d2,d0
0000EBF4 6400                       		bcc.s	loc_BE80
0000EBF6 D241                       		add.w	d1,d1
0000EBF8 D041                       		add.w	d1,d0
0000EBFA 6500                       		bcs.s	loc_BE84
0000EBFC 60CE                       		bra.s	loc_BE4E
0000EBFE                            ; ===========================================================================
0000EBFE                            
0000EBFE                            loc_BE80:
0000EBFE B044                       		cmp.w	d4,d0
0000EC00 62CA                       		bhi.s	loc_BE4E
0000EC02                            
0000EC02                            loc_BE84:
0000EC02 121A                       		move.b	(a2)+,d1
0000EC04 4881                       		ext.w	d1
0000EC06 3029 000C                  		move.w	$C(a1),d0
0000EC0A 9041                       		sub.w	d1,d0
0000EC0C 9043                       		sub.w	d3,d0
0000EC0E 6400                       		bcc.s	loc_BE9A
0000EC10 D241                       		add.w	d1,d1
0000EC12 D041                       		add.w	d1,d0
0000EC14 6500                       		bcs.s	loc_BE9E
0000EC16 60B4                       		bra.s	loc_BE4E
0000EC18                            ; ===========================================================================
0000EC18                            
0000EC18                            loc_BE9A:
0000EC18 B045                       		cmp.w	d5,d0
0000EC1A 62B0                       		bhi.s	loc_BE4E
0000EC1C                            
0000EC1C                            loc_BE9E:
0000EC1C 361F                       		move.w	(sp)+,d3
0000EC1E 7001                       		moveq	#1,d0
0000EC20 4E75                       		rts	
0000EC22                            ; End of function Obj32_MZBlock
0000EC22                            
0000EC22                            ; ===========================================================================
0000EC22                            ; ---------------------------------------------------------------------------
0000EC22                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000EC22                            ; ---------------------------------------------------------------------------
0000EC22                            Map_obj32:
0000EC22                            	include "_maps\obj32.asm"
0000EC22                            ; ---------------------------------------------------------------------------
0000EC22                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000EC22                            ; ---------------------------------------------------------------------------
0000EC22 0000                       		dc.w byte_BEAC-Map_obj32
0000EC24 0000                       		dc.w byte_BEB7-Map_obj32
0000EC26 0000                       		dc.w byte_BEC2-Map_obj32
0000EC28 0000                       		dc.w byte_BEB7-Map_obj32
0000EC2A 02                         byte_BEAC:	dc.b 2
0000EC2B F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000EC30 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000EC35 02                         byte_BEB7:	dc.b 2
0000EC36 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000EC3B F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000EC40 02                         byte_BEC2:	dc.b 2
0000EC41 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000EC46 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000EC4B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EC50                            		even
0000EC50                            		even
0000EC50                            
0000EC50                            ; ===========================================================================
0000EC50                            ; ---------------------------------------------------------------------------
0000EC50                            ; Object 33 - pushable blocks (MZ, LZ)
0000EC50                            ; ---------------------------------------------------------------------------
0000EC50                            
0000EC50                            Obj33:					; XREF: Obj_Index
0000EC50 7000                       		moveq	#0,d0
0000EC52 1028 0024                  		move.b	$24(a0),d0
0000EC56 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000EC5A 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000EC5E                            ; ===========================================================================
0000EC5E 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000EC60 0000                       		dc.w loc_BF6E-Obj33_Index
0000EC62 0000                       		dc.w loc_C02C-Obj33_Index
0000EC64                            
0000EC64 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000EC66 4001                       		dc.b $40, 1
0000EC68                            ; ===========================================================================
0000EC68                            
0000EC68                            Obj33_Main:				; XREF: Obj33_Index
0000EC68 5428 0024                  		addq.b	#2,$24(a0)
0000EC6C 117C 000F 0016             		move.b	#$F,$16(a0)
0000EC72 117C 000F 0017             		move.b	#$F,$17(a0)
0000EC78 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000EC80 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000EC86 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000EC8C 6600                       		bne.s	loc_BF16
0000EC8E 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000EC94                            
0000EC94                            loc_BF16:
0000EC94 117C 0004 0001             		move.b	#4,1(a0)
0000EC9A 117C 0003 0018             		move.b	#3,$18(a0)
0000ECA0 3168 0008 0034             		move.w	8(a0),$34(a0)
0000ECA6 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000ECAC 7000                       		moveq	#0,d0
0000ECAE 1028 0028                  		move.b	$28(a0),d0
0000ECB2 D040                       		add.w	d0,d0
0000ECB4 0240 000E                  		andi.w	#$E,d0
0000ECB8 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000ECBC 115A 0019                  		move.b	(a2)+,$19(a0)
0000ECC0 115A 001A                  		move.b	(a2)+,$1A(a0)
0000ECC4 4A28 0028                  		tst.b	$28(a0)
0000ECC8 6700                       		beq.s	Obj33_ChkGone
0000ECCA 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000ECD0                            
0000ECD0                            Obj33_ChkGone:
0000ECD0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ECD4 7000                       		moveq	#0,d0
0000ECD6 1028 0023                  		move.b	$23(a0),d0
0000ECDA 6700                       		beq.s	loc_BF6E
0000ECDC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000ECE2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000ECE8 6600 0000                  		bne.w	DeleteObject
0000ECEC                            
0000ECEC                            loc_BF6E:				; XREF: Obj33_Index
0000ECEC 4A28 0032                  		tst.b	$32(a0)
0000ECF0 6600 0000                  		bne.w	loc_C046
0000ECF4 7200                       		moveq	#0,d1
0000ECF6 1228 0019                  		move.b	$19(a0),d1
0000ECFA 0641 000B                  		addi.w	#$B,d1
0000ECFE 343C 0010                  		move.w	#$10,d2
0000ED02 363C 0011                  		move.w	#$11,d3
0000ED06 3828 0008                  		move.w	8(a0),d4
0000ED0A 6100 0000                  		bsr.w	loc_C186
0000ED0E 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000ED14 6600                       		bne.s	loc_BFC6	; if not, branch
0000ED16 08A8 0007 0028             		bclr	#7,$28(a0)
0000ED1C 3028 0008                  		move.w	8(a0),d0
0000ED20 0C40 0A20                  		cmpi.w	#$A20,d0
0000ED24 6500                       		bcs.s	loc_BFC6
0000ED26 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000ED2A 6400                       		bcc.s	loc_BFC6
0000ED2C 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000ED30 0440 001C                  		subi.w	#$1C,d0
0000ED34 3140 000C                  		move.w	d0,$C(a0)
0000ED38 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000ED3E 08E8 0007 0028             		bset	#7,$28(a0)
0000ED44                            
0000ED44                            loc_BFC6:
0000ED44 3028 0008                  		move.w	8(a0),d0
0000ED48 0240 FF80                  		andi.w	#$FF80,d0
0000ED4C 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED50 0441 0080                  		subi.w	#$80,d1
0000ED54 0241 FF80                  		andi.w	#$FF80,d1
0000ED58 9041                       		sub.w	d1,d0
0000ED5A 0C40 0280                  		cmpi.w	#$280,d0
0000ED5E 6200                       		bhi.s	loc_BFE6
0000ED60 6000 0000                  		bra.w	DisplaySprite
0000ED64                            ; ===========================================================================
0000ED64                            
0000ED64                            loc_BFE6:
0000ED64 3028 0034                  		move.w	$34(a0),d0
0000ED68 0240 FF80                  		andi.w	#$FF80,d0
0000ED6C 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED70 0441 0080                  		subi.w	#$80,d1
0000ED74 0241 FF80                  		andi.w	#$FF80,d1
0000ED78 9041                       		sub.w	d1,d0
0000ED7A 0C40 0280                  		cmpi.w	#$280,d0
0000ED7E 6200                       		bhi.s	loc_C016
0000ED80 3168 0034 0008             		move.w	$34(a0),8(a0)
0000ED86 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000ED8C 117C 0004 0024             		move.b	#4,$24(a0)
0000ED92 6000                       		bra.s	loc_C02C
0000ED94                            ; ===========================================================================
0000ED94                            
0000ED94                            loc_C016:
0000ED94 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ED98 7000                       		moveq	#0,d0
0000ED9A 1028 0023                  		move.b	$23(a0),d0
0000ED9E 6700                       		beq.s	loc_C028
0000EDA0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000EDA6                            
0000EDA6                            loc_C028:
0000EDA6 6000 0000                  		bra.w	DeleteObject
0000EDAA                            ; ===========================================================================
0000EDAA                            
0000EDAA                            loc_C02C:				; XREF: Obj33_Index
0000EDAA 6100 0000                  		bsr.w	ChkObjOnScreen2
0000EDAE 6700                       		beq.s	locret_C044
0000EDB0 117C 0002 0024             		move.b	#2,$24(a0)
0000EDB6 4228 0032                  		clr.b	$32(a0)
0000EDBA 4268 0010                  		clr.w	$10(a0)
0000EDBE 4268 0012                  		clr.w	$12(a0)
0000EDC2                            
0000EDC2                            locret_C044:
0000EDC2 4E75                       		rts	
0000EDC4                            ; ===========================================================================
0000EDC4                            
0000EDC4                            loc_C046:				; XREF: loc_BF6E
0000EDC4 3F28 0008                  		move.w	8(a0),-(sp)
0000EDC8 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000EDCE 6400                       		bcc.s	loc_C056
0000EDD0 6100 0000                  		bsr.w	SpeedToPos
0000EDD4                            
0000EDD4                            loc_C056:
0000EDD4 0828 0001 0022             		btst	#1,$22(a0)
0000EDDA 6700                       		beq.s	loc_C0A0
0000EDDC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000EDE2 4EB9 0000 0000             		jsr	ObjHitFloor
0000EDE8 4A41                       		tst.w	d1
0000EDEA 6A00 0000                  		bpl.w	loc_C09E
0000EDEE D368 000C                  		add.w	d1,$C(a0)
0000EDF2 4268 0012                  		clr.w	$12(a0)
0000EDF6 08A8 0001 0022             		bclr	#1,$22(a0)
0000EDFC 3011                       		move.w	(a1),d0
0000EDFE 0240 03FF                  		andi.w	#$3FF,d0
0000EE02 0C40 016A                  		cmpi.w	#$16A,d0
0000EE06 6500                       		bcs.s	loc_C09E
0000EE08 3028 0030                  		move.w	$30(a0),d0
0000EE0C E640                       		asr.w	#3,d0
0000EE0E 3140 0010                  		move.w	d0,$10(a0)
0000EE12 117C 0001 0032             		move.b	#1,$32(a0)
0000EE18 4268 000E                  		clr.w	$E(a0)
0000EE1C                            
0000EE1C                            loc_C09E:
0000EE1C 6000                       		bra.s	loc_C0E6
0000EE1E                            ; ===========================================================================
0000EE1E                            
0000EE1E                            loc_C0A0:
0000EE1E 4A68 0010                  		tst.w	$10(a0)
0000EE22 6700 0000                  		beq.w	loc_C0D6
0000EE26 6B00                       		bmi.s	loc_C0BC
0000EE28 7600                       		moveq	#0,d3
0000EE2A 1628 0019                  		move.b	$19(a0),d3
0000EE2E 4EB9 0000 0000             		jsr	ObjHitWallRight
0000EE34 4A41                       		tst.w	d1		; has block touched a wall?
0000EE36 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000EE38 6000                       		bra.s	loc_C0E6
0000EE3A                            ; ===========================================================================
0000EE3A                            
0000EE3A                            loc_C0BC:
0000EE3A 7600                       		moveq	#0,d3
0000EE3C 1628 0019                  		move.b	$19(a0),d3
0000EE40 4643                       		not.w	d3
0000EE42 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000EE48 4A41                       		tst.w	d1		; has block touched a wall?
0000EE4A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000EE4C 6000                       		bra.s	loc_C0E6
0000EE4E                            ; ===========================================================================
0000EE4E                            
0000EE4E                            Obj33_StopPush:
0000EE4E 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000EE52 6000                       		bra.s	loc_C0E6
0000EE54                            ; ===========================================================================
0000EE54                            
0000EE54                            loc_C0D6:
0000EE54 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000EE5C 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000EE62 6400                       		bcc.s	loc_C104
0000EE64                            
0000EE64                            loc_C0E6:
0000EE64 7200                       		moveq	#0,d1
0000EE66 1228 0019                  		move.b	$19(a0),d1
0000EE6A 0641 000B                  		addi.w	#$B,d1
0000EE6E 343C 0010                  		move.w	#$10,d2
0000EE72 363C 0011                  		move.w	#$11,d3
0000EE76 381F                       		move.w	(sp)+,d4
0000EE78 6100 0000                  		bsr.w	loc_C186
0000EE7C 6100                       		bsr.s	Obj33_ChkLava
0000EE7E 6000 FEC4                  		bra.w	loc_BFC6
0000EE82                            ; ===========================================================================
0000EE82                            
0000EE82                            loc_C104:
0000EE82 381F                       		move.w	(sp)+,d4
0000EE84 43F8 D000                  		lea	($FFFFD000).w,a1
0000EE88 08A9 0003 0022             		bclr	#3,$22(a1)
0000EE8E 08A8 0003 0022             		bclr	#3,$22(a0)
0000EE94 6000 FECE                  		bra.w	loc_BFE6
0000EE98                            ; ===========================================================================
0000EE98                            
0000EE98                            Obj33_ChkLava:
0000EE98 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000EE9E 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000EEA0 343C FFE0                  		move.w	#-$20,d2
0000EEA4 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000EEAA 6700                       		beq.s	Obj33_LoadLava
0000EEAC 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000EEB2 6700                       		beq.s	Obj33_LoadLava
0000EEB4 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000EEBA 6700                       		beq.s	Obj33_LoadLava
0000EEBC 4E75                       		rts	
0000EEBE                            ; ===========================================================================
0000EEBE                            
0000EEBE                            Obj33_ChkLava2:
0000EEBE 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000EEC4 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000EEC6 343C 0020                  		move.w	#$20,d2
0000EECA 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000EED0 6700                       		beq.s	Obj33_LoadLava
0000EED2 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000EED8 6700                       		beq.s	Obj33_LoadLava
0000EEDA                            
0000EEDA                            Obj33_NoLava:
0000EEDA 4E75                       		rts	
0000EEDC                            ; ===========================================================================
0000EEDC                            
0000EEDC                            Obj33_LoadLava:
0000EEDC 6100 0000                  		bsr.w	SingleObjLoad
0000EEE0 6600                       		bne.s	locret_C184
0000EEE2 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000EEE6 3368 0008 0008             		move.w	8(a0),8(a1)
0000EEEC D569 0008                  		add.w	d2,8(a1)
0000EEF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EEF6 0669 0010 000C             		addi.w	#$10,$C(a1)
0000EEFC 2348 003C                  		move.l	a0,$3C(a1)
0000EF00                            
0000EF00                            locret_C184:
0000EF00 4E75                       		rts	
0000EF02                            ; ===========================================================================
0000EF02                            
0000EF02                            loc_C186:				; XREF: loc_BF6E
0000EF02 1028 0025                  		move.b	$25(a0),d0
0000EF06 6700 0000                  		beq.w	loc_C218
0000EF0A 5500                       		subq.b	#2,d0
0000EF0C 6600                       		bne.s	loc_C1AA
0000EF0E 6100 ADC8                  		bsr.w	ExitPlatform
0000EF12 0829 0003 0022             		btst	#3,$22(a1)
0000EF18 6600                       		bne.s	loc_C1A4
0000EF1A 4228 0025                  		clr.b	$25(a0)
0000EF1E 4E75                       		rts	
0000EF20                            ; ===========================================================================
0000EF20                            
0000EF20                            loc_C1A4:
0000EF20 3404                       		move.w	d4,d2
0000EF22 6000 B312                  		bra.w	MvSonicOnPtfm
0000EF26                            ; ===========================================================================
0000EF26                            
0000EF26                            loc_C1AA:
0000EF26 5500                       		subq.b	#2,d0
0000EF28 6600                       		bne.s	loc_C1F2
0000EF2A 6100 0000                  		bsr.w	SpeedToPos
0000EF2E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000EF34 4EB9 0000 0000             		jsr	ObjHitFloor
0000EF3A 4A41                       		tst.w	d1
0000EF3C 6A00 0000                  		bpl.w	locret_C1F0
0000EF40 D368 000C                  		add.w	d1,$C(a0)
0000EF44 4268 0012                  		clr.w	$12(a0)
0000EF48 4228 0025                  		clr.b	$25(a0)
0000EF4C 3011                       		move.w	(a1),d0
0000EF4E 0240 03FF                  		andi.w	#$3FF,d0
0000EF52 0C40 016A                  		cmpi.w	#$16A,d0
0000EF56 6500                       		bcs.s	locret_C1F0
0000EF58 3028 0030                  		move.w	$30(a0),d0
0000EF5C E640                       		asr.w	#3,d0
0000EF5E 3140 0010                  		move.w	d0,$10(a0)
0000EF62 117C 0001 0032             		move.b	#1,$32(a0)
0000EF68 4268 000E                  		clr.w	$E(a0)
0000EF6C                            
0000EF6C                            locret_C1F0:
0000EF6C 4E75                       		rts	
0000EF6E                            ; ===========================================================================
0000EF6E                            
0000EF6E                            loc_C1F2:
0000EF6E 6100 0000                  		bsr.w	SpeedToPos
0000EF72 3028 0008                  		move.w	8(a0),d0
0000EF76 0240 000C                  		andi.w	#$C,d0
0000EF7A 6600 0000                  		bne.w	locret_C2E4
0000EF7E 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000EF84 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000EF8A 4268 0010                  		clr.w	$10(a0)
0000EF8E 5528 0025                  		subq.b	#2,$25(a0)
0000EF92 4E75                       		rts	
0000EF94                            ; ===========================================================================
0000EF94                            
0000EF94                            loc_C218:
0000EF94 6100 0000                  		bsr.w	loc_FAC8
0000EF98 4A44                       		tst.w	d4
0000EF9A 6700 0000                  		beq.w	locret_C2E4
0000EF9E 6B00 0000                  		bmi.w	locret_C2E4
0000EFA2 4A28 0032                  		tst.b	$32(a0)
0000EFA6 6700                       		beq.s	loc_C230
0000EFA8 6000 0000                  		bra.w	locret_C2E4
0000EFAC                            ; ===========================================================================
0000EFAC                            
0000EFAC                            loc_C230:
0000EFAC 4A40                       		tst.w	d0
0000EFAE 6700 0000                  		beq.w	locret_C2E4
0000EFB2 6B00                       		bmi.s	loc_C268
0000EFB4 0829 0000 0022             		btst	#0,$22(a1)
0000EFBA 6600 0000                  		bne.w	locret_C2E4
0000EFBE 3F00                       		move.w	d0,-(sp)
0000EFC0 7600                       		moveq	#0,d3
0000EFC2 1628 0019                  		move.b	$19(a0),d3
0000EFC6 4EB9 0000 0000             		jsr	ObjHitWallRight
0000EFCC 301F                       		move.w	(sp)+,d0
0000EFCE 4A41                       		tst.w	d1
0000EFD0 6B00 0000                  		bmi.w	locret_C2E4
0000EFD4 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000EFDC 7001                       		moveq	#1,d0
0000EFDE 323C 0040                  		move.w	#$40,d1
0000EFE2 6000                       		bra.s	loc_C294
0000EFE4                            ; ===========================================================================
0000EFE4                            
0000EFE4                            loc_C268:
0000EFE4 0829 0000 0022             		btst	#0,$22(a1)
0000EFEA 6700                       		beq.s	locret_C2E4
0000EFEC 3F00                       		move.w	d0,-(sp)
0000EFEE 7600                       		moveq	#0,d3
0000EFF0 1628 0019                  		move.b	$19(a0),d3
0000EFF4 4643                       		not.w	d3
0000EFF6 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000EFFC 301F                       		move.w	(sp)+,d0
0000EFFE 4A41                       		tst.w	d1
0000F000 6B00                       		bmi.s	locret_C2E4
0000F002 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000F00A 70FF                       		moveq	#-1,d0
0000F00C 323C FFC0                  		move.w	#-$40,d1
0000F010                            
0000F010                            loc_C294:
0000F010 43F8 D000                  		lea	($FFFFD000).w,a1
0000F014 D169 0008                  		add.w	d0,8(a1)
0000F018 3341 0014                  		move.w	d1,$14(a1)
0000F01C 337C 0000 0010             		move.w	#0,$10(a1)
0000F022 3F00                       		move.w	d0,-(sp)
0000F024 303C 00A7                  		move.w	#$A7,d0
0000F028 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play pushing sound
0000F02E 301F                       		move.w	(sp)+,d0
0000F030 4A28 0028                  		tst.b	$28(a0)
0000F034 6B00                       		bmi.s	locret_C2E4
0000F036 3F00                       		move.w	d0,-(sp)
0000F038 4EB9 0000 0000             		jsr	ObjHitFloor
0000F03E 301F                       		move.w	(sp)+,d0
0000F040 0C41 0004                  		cmpi.w	#4,d1
0000F044 6F00                       		ble.s	loc_C2E0
0000F046 317C 0400 0010             		move.w	#$400,$10(a0)
0000F04C 4A40                       		tst.w	d0
0000F04E 6A00                       		bpl.s	loc_C2D8
0000F050 4468 0010                  		neg.w	$10(a0)
0000F054                            
0000F054                            loc_C2D8:
0000F054 117C 0006 0025             		move.b	#6,$25(a0)
0000F05A 6000                       		bra.s	locret_C2E4
0000F05C                            ; ===========================================================================
0000F05C                            
0000F05C                            loc_C2E0:
0000F05C D368 000C                  		add.w	d1,$C(a0)
0000F060                            
0000F060                            locret_C2E4:
0000F060 4E75                       		rts	
0000F062                            ; ===========================================================================
0000F062                            ; ---------------------------------------------------------------------------
0000F062                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000F062                            ; ---------------------------------------------------------------------------
0000F062                            Map_obj33:
0000F062                            	include "_maps\obj33.asm"
0000F062                            ; ---------------------------------------------------------------------------
0000F062                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000F062                            ; ---------------------------------------------------------------------------
0000F062 0000                       		dc.w byte_C2EA-Map_obj33
0000F064 0000                       		dc.w byte_C2F0-Map_obj33
0000F066 01                         byte_C2EA:	dc.b 1
0000F067 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000F06C 04                         byte_C2F0:	dc.b 4
0000F06D F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000F072 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000F077 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000F07C F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000F082 00                         		even
0000F082 00                         		even
0000F082                            
0000F082                            ; ===========================================================================
0000F082                            ; ---------------------------------------------------------------------------
0000F082                            ; Object 34 - zone title cards
0000F082                            ; ---------------------------------------------------------------------------
0000F082                            
0000F082                            Obj34:					; XREF: Obj_Index
0000F082 7000                       		moveq	#0,d0
0000F084 1028 0024                  		move.b	$24(a0),d0
0000F088 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000F08C 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000F090                            ; ===========================================================================
0000F090 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000F092 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000F094 0000                       		dc.w Obj34_Wait-Obj34_Index
0000F096 0000                       		dc.w Obj34_Wait-Obj34_Index
0000F098                            ; ===========================================================================
0000F098                            
0000F098                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000F098 2248                       		movea.l	a0,a1
0000F09A 7000                       		moveq	#0,d0
0000F09C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000F0A0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000F0A6 6600                       		bne.s	Obj34_CheckFZ
0000F0A8 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000F0AA                            
0000F0AA                            Obj34_CheckFZ:
0000F0AA 3400                       		move.w	d0,d2
0000F0AC 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000F0B2 6600                       		bne.s	Obj34_CheckNew
0000F0B4 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000F0B6 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000F0B8                             
0000F0B8                            Obj34_CheckNew:
0000F0B8 0C38 0007 FE10             		cmpi.b	#7,($FFFFFE10).w ; check if level is in the new zones
0000F0BE 6500                       		blo.s	Obj34_LoadConfig
0000F0C0 5A02                       		addq.b	#$C-7,d2	; use correct mappings
0000F0C2                            
0000F0C2                            Obj34_LoadConfig:
0000F0C2 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000F0C8 E948                       		lsl.w	#4,d0
0000F0CA D6C0                       		adda.w	d0,a3
0000F0CC 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000F0D2 7203                       		moveq	#3,d1
0000F0D4                            
0000F0D4                            Obj34_Loop:
0000F0D4 12BC 0034                  		move.b	#$34,0(a1)
0000F0D8 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000F0DC 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000F0E0 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000F0E4 335A 000A                  		move.w	(a2)+,$A(a1)
0000F0E8 135A 0024                  		move.b	(a2)+,$24(a1)
0000F0EC 101A                       		move.b	(a2)+,d0
0000F0EE 6600                       		bne.s	Obj34_ActNumber
0000F0F0 1002                       		move.b	d2,d0
0000F0F2                            
0000F0F2                            Obj34_ActNumber:
0000F0F2 0C00 0007                  		cmpi.b	#7,d0
0000F0F6 6600                       		bne.s	Obj34_MakeSprite
0000F0F8 4A38 FFAD                  		tst.b	($FFFFFFAD).w
0000F0FC 6700 0000                  		beq	Obj34_Norm
0000F100 D038 FFAD                  		add.b	($FFFFFFAD).w,d0
0000F104 0C38 0003 FFAD             		cmpi.b	#3,($FFFFFFAD).w
0000F10A 6600                       		bne.s	Obj34_MakeSprite
0000F10C 5300                       		subq.b	#1,d0
0000F10E 4EF9 0000 0000             		jmp	Obj34_MakeSprite
0000F114                            
0000F114                            Obj34_Norm:
0000F114 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000F118 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000F11E 6600                       		bne.s	Obj34_MakeSprite
0000F120 5300                       		subq.b	#1,d0
0000F122                            
0000F122                            Obj34_MakeSprite:
0000F122 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000F126 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000F12E 337C 8580 0002             		move.w	#$8580,2(a1)
0000F134 137C 0078 0019             		move.b	#$78,$19(a1)
0000F13A 137C 0000 0001             		move.b	#0,1(a1)
0000F140 137C 0000 0018             		move.b	#0,$18(a1)
0000F146 337C 003C 0038             		move.w	#60,$38(a1)	; set time delay to 1 second
0000F14C 43E9 0040                  		lea	$40(a1),a1	; next object
0000F150 51C9 FF82                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000F154                            
0000F154                            Obj34_ChkPos:				; XREF: Obj34_Index
0000F154 7220                       		moveq	#$20,d1		; set horizontal speed
0000F156 3028 0030                  		move.w	$30(a0),d0
0000F15A B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000F15E 6700                       		beq.s	loc_C3C8	; if yes, branch
0000F160 6C00                       		bge.s	Obj34_Move
0000F162 4441                       		neg.w	d1
0000F164                            
0000F164                            Obj34_Move:
0000F164 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F168                            
0000F168                            loc_C3C8:
0000F168 3028 0008                  		move.w	8(a0),d0
0000F16C 6B00                       		bmi.s	locret_C3D8
0000F16E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F172 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000F174 6000 0000                  		bra.w	DisplaySprite
0000F178                            ; ===========================================================================
0000F178                            
0000F178                            locret_C3D8:
0000F178 4E75                       		rts	
0000F17A                            ; ===========================================================================
0000F17A                            
0000F17A                            Obj34_Wait:				; XREF: Obj34_Index
0000F17A 4A68 0038                  		tst.w	$38(a0)		; is time remaining zero?
0000F17E 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000F180 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time
0000F184 6000 0000                  		bra.w	DisplaySprite
0000F188                            ; ===========================================================================
0000F188                            
0000F188                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000F188 4A28 0001                  		tst.b	1(a0)
0000F18C 6A00                       		bpl.s	Obj34_ChangeArt
0000F18E 7220                       		moveq	#$20,d1
0000F190 3028 0032                  		move.w	$32(a0),d0
0000F194 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000F198 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000F19A 6C00                       		bge.s	Obj34_Move2
0000F19C 4441                       		neg.w	d1
0000F19E                            
0000F19E                            Obj34_Move2:
0000F19E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F1A2 3028 0008                  		move.w	8(a0),d0
0000F1A6 6B00                       		bmi.s	locret_C412
0000F1A8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F1AC 6400                       		bcc.s	locret_C412	; if yes, branch
0000F1AE 6000 0000                  		bra.w	DisplaySprite
0000F1B2                            ; ===========================================================================
0000F1B2                            
0000F1B2                            locret_C412:
0000F1B2 4E75                       		rts	
0000F1B4                            ; ===========================================================================
0000F1B4                            
0000F1B4                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000F1B4 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000F1BA 6600                       		bne.s	Obj34_Delete
0000F1BC 7002                       		moveq	#2,d0
0000F1BE 4EB9 0000 1DA2             		jsr	(LoadPLC).l	; load explosion patterns
0000F1C4 4EB9 0000 1D84             		jsr	(LoadAnimalPLC).l ; load animal patterns
0000F1CA                            
0000F1CA                            Obj34_Delete:
0000F1CA 6000 0000                  		bra.w	DeleteObject
0000F1CE                            ; ===========================================================================
0000F1CE 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000F1D0 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000F1D2 00E4                       		dc.w $E4
0000F1D4 0206                       		dc.b 2,	6
0000F1D6 00EA                       		dc.w $EA
0000F1D8 0207                       		dc.b 2,	7
0000F1DA 00E0                       		dc.w $E0
0000F1DC 020A                       		dc.b 2,	$A
0000F1DE                            ; ---------------------------------------------------------------------------
0000F1DE                            ; Title	card configuration data
0000F1DE                            ; Format:
0000F1DE                            ; 4 bytes per item (YYYY XXXX)
0000F1DE                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000F1DE                            ; ---------------------------------------------------------------------------
0000F1DE 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000F1EE 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000F1FE 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000F20E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000F21E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000F22E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000F23E 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000F24E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; ABZ
0000F25E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; ABZ
0000F26E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; ABZ
0000F27E                            ; ===========================================================================
0000F27E                            ; ---------------------------------------------------------------------------
0000F27E                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000F27E                            ; ---------------------------------------------------------------------------
0000F27E                            
0000F27E                            Obj39:					; XREF: Obj_Index
0000F27E 4238 FFAD                  		clr.b	($FFFFFFAD).w
0000F282 7000                       		moveq	#0,d0
0000F284 1028 0024                  		move.b	$24(a0),d0
0000F288 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000F28C 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000F290                            ; ===========================================================================
0000F290 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000F292 0000                       		dc.w loc_C50C-Obj39_Index
0000F294 0000                       		dc.w Obj39_Wait-Obj39_Index
0000F296                            ; ===========================================================================
0000F296                            
0000F296                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000F296 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000F29A 6700                       		beq.s	Obj39_Main	; if yes, branch
0000F29C 4E75                       		rts	
0000F29E                            ; ===========================================================================
0000F29E                            
0000F29E                            Obj39_Main:
0000F29E 5428 0024                  		addq.b	#2,$24(a0)
0000F2A2 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000F2A8 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000F2AE 6700                       		beq.s	loc_C4EC	; if not, branch
0000F2B0 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000F2B6                            
0000F2B6                            loc_C4EC:
0000F2B6 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000F2BC 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000F2C4 317C 855E 0002             		move.w	#$855E,2(a0)
0000F2CA 117C 0000 0001             		move.b	#0,1(a0)
0000F2D0 117C 0000 0018             		move.b	#0,$18(a0)
0000F2D6                            
0000F2D6                            loc_C50C:				; XREF: Obj39_Index
0000F2D6 7210                       		moveq	#$10,d1		; set horizontal speed
0000F2D8 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000F2DE 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000F2E0 6500                       		bcs.s	Obj39_Move
0000F2E2 4441                       		neg.w	d1
0000F2E4                            
0000F2E4                            Obj39_Move:
0000F2E4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F2E8 6000 0000                  		bra.w	DisplaySprite
0000F2EC                            ; ===========================================================================
0000F2EC                            
0000F2EC                            Obj39_SetWait:				; XREF: Obj39_Main
0000F2EC 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000F2F2 5428 0024                  		addq.b	#2,$24(a0)
0000F2F6 4E75                       		rts	
0000F2F8                            ; ===========================================================================
0000F2F8                            
0000F2F8                            Obj39_Wait:				; XREF: Obj39_Index
0000F2F8 1038 F605                  		move.b	($FFFFF605).w,d0
0000F2FC 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000F300 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000F302 0828 0000 001A             		btst	#0,$1A(a0)
0000F308 6600                       		bne.s	Obj39_Display
0000F30A 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000F30E 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000F310 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000F314 6000 0000                  		bra.w	DisplaySprite
0000F318                            ; ===========================================================================
0000F318                            
0000F318                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000F318 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000F31C 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000F31E 11FC 0014 FF94             		move.b	#$14,($FFFFFF94).w ; set mode to $14 (continue screen)
0000F324 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000F328 6600                       		bne.s	Obj39_Display	; if yes, branch
0000F32A 11FC 0000 FF94             		move.b	#0,($FFFFFF94).w ; set mode to 0 (Sega screen)
0000F330 6000                       		bra.s	Obj39_Display
0000F332                            ; ===========================================================================
0000F332                            
0000F332                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000F332 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000F338                            
0000F338                            Obj39_Display:				; XREF: Obj39_ChgMode
0000F338 6000 0000                  		bra.w	DisplaySprite
0000F33C                            ; ===========================================================================
0000F33C                            ; ---------------------------------------------------------------------------
0000F33C                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000F33C                            ; ---------------------------------------------------------------------------
0000F33C                            
0000F33C                            Obj3A:					; XREF: Obj_Index
0000F33C 7000                       		moveq	#0,d0
0000F33E 1028 0024                  		move.b	$24(a0),d0
0000F342 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000F346 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000F34A                            ; ===========================================================================
0000F34A 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000F34C 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000F34E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000F350 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000F352 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000F354 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000F356 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000F358 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000F35A 0000                       		dc.w loc_C766-Obj3A_Index
0000F35C                            ; ===========================================================================
0000F35C                            
0000F35C                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000F35C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000F360 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000F362 4E75                       		rts	
0000F364                            ; ===========================================================================
0000F364                            
0000F364                            Obj3A_Main:
0000F364 2248                       		movea.l	a0,a1
0000F366 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000F36C 7206                       		moveq	#6,d1
0000F36E                            
0000F36E                            Obj3A_Loop:
0000F36E 12BC 003A                  		move.b	#$3A,0(a1)
0000F372 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000F376 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000F37A 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000F37E 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000F382 135A 0024                  		move.b	(a2)+,$24(a1)
0000F386 101A                       		move.b	(a2)+,d0
0000F388 0C00 0006                  		cmpi.b	#6,d0
0000F38C 6600                       		bne.s	loc_C5CA
0000F38E D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000F392                            
0000F392                            loc_C5CA:
0000F392 1340 001A                  		move.b	d0,$1A(a1)
0000F396 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000F39E 337C 8580 0002             		move.w	#$8580,2(a1)
0000F3A4 137C 0000 0001             		move.b	#0,1(a1)
0000F3AA 43E9 0040                  		lea	$40(a1),a1
0000F3AE 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000F3B2                            
0000F3B2                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000F3B2 7210                       		moveq	#$10,d1		; set horizontal speed
0000F3B4 3028 0030                  		move.w	$30(a0),d0
0000F3B8 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000F3BC 6700                       		beq.s	loc_C61A	; if yes, branch
0000F3BE 6C00                       		bge.s	Obj3A_Move
0000F3C0 4441                       		neg.w	d1
0000F3C2                            
0000F3C2                            Obj3A_Move:
0000F3C2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F3C6                            
0000F3C6                            loc_C5FE:				; XREF: loc_C61A
0000F3C6 3028 0008                  		move.w	8(a0),d0
0000F3CA 6B00                       		bmi.s	locret_C60E
0000F3CC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F3D0 6400                       		bcc.s	locret_C60E	; if yes, branch
0000F3D2 6000 0000                  		bra.w	DisplaySprite
0000F3D6                            ; ===========================================================================
0000F3D6                            
0000F3D6                            locret_C60E:
0000F3D6 4E75                       		rts	
0000F3D8                            ; ===========================================================================
0000F3D8                            
0000F3D8                            loc_C610:				; XREF: loc_C61A
0000F3D8 117C 000E 0024             		move.b	#$E,$24(a0)
0000F3DE 6000 0000                  		bra.w	Obj3A_ChkPos2
0000F3E2                            ; ===========================================================================
0000F3E2                            
0000F3E2                            loc_C61A:				; XREF: Obj3A_ChkPos
0000F3E2 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000F3E8 67EE                       		beq.s	loc_C610
0000F3EA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000F3F0 66D4                       		bne.s	loc_C5FE
0000F3F2 5428 0024                  		addq.b	#2,$24(a0)
0000F3F6 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000F3FC                            
0000F3FC                            Obj3A_Wait:				; XREF: Obj3A_Index
0000F3FC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000F400 6600                       		bne.s	Obj3A_Display
0000F402 5428 0024                  		addq.b	#2,$24(a0)
0000F406                            
0000F406                            Obj3A_Display:
0000F406 6000 0000                  		bra.w	DisplaySprite
0000F40A                            ; ===========================================================================
0000F40A                            
0000F40A                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000F40A 6100 0000                  		bsr.w	DisplaySprite
0000F40E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000F414 7000                       		moveq	#0,d0
0000F416 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000F41A 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000F41C 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000F420 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000F426                            
0000F426                            Obj3A_RingBonus:
0000F426 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000F42A 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000F42C 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000F430 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000F436                            
0000F436                            Obj3A_ChkBonus:
0000F436 4A40                       		tst.w	d0		; is there any bonus?
0000F438 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000F43A 303C 00C5                  		move.w	#$C5,d0
0000F43E 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000F444 5428 0024                  		addq.b	#2,$24(a0)
0000F448 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000F44E 6600                       		bne.s	Obj3A_SetDelay
0000F450 5828 0024                  		addq.b	#4,$24(a0)
0000F454                            
0000F454                            Obj3A_SetDelay:
0000F454 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000F45A                            
0000F45A                            locret_C692:
0000F45A 4E75                       		rts	
0000F45C                            ; ===========================================================================
0000F45C                            
0000F45C                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000F45C 4EB9 0000 0000             		jsr	AddPoints
0000F462 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000F466 0200 0003                  		andi.b	#3,d0
0000F46A 66EE                       		bne.s	locret_C692
0000F46C 303C 00CD                  		move.w	#$CD,d0
0000F470 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000F476                            ; ===========================================================================
0000F476                            
0000F476                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000F476 0C78 0000 FE10             		cmpi.w	#$0000,($FFFFFE10).w
0000F47C 6600 0000                  		bne	Obj3A_NextLevel_Normal
0000F480 5438 F742                  		addq.b	#2,($FFFFF742).w
0000F484 4EB9 0000 0000             		jsr	DeleteObject
0000F48A 4E75                       		rts
0000F48C                            
0000F48C                            Obj3A_NextLevel_Normal:
0000F48C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000F490 0240 0007                  		andi.w	#7,d0
0000F494 E748                       		lsl.w	#3,d0
0000F496 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000F49A 0241 0003                  		andi.w	#3,d1
0000F49E D241                       		add.w	d1,d1
0000F4A0 D041                       		add.w	d1,d0
0000F4A2 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000F4A6 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000F4AA 4A40                       		tst.w	d0
0000F4AC 6600                       		bne.s	Obj3A_ChkSS
0000F4AE 11FC 0000 FF94             		move.b	#0,($FFFFFF94).w ; set game mode to level (00)
0000F4B4 6000                       		bra.s	Obj3A_Display2
0000F4B6                            ; ===========================================================================
0000F4B6                            
0000F4B6                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000F4B6 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000F4BA 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000F4BE 6700                       		beq.s	loc_C6EA	; if not, branch
0000F4C0 11FC 0010 FF94             		move.b	#$10,($FFFFFF94).w ; set game mode to Special Stage (10)
0000F4C6 6000                       		bra.s	Obj3A_Display2
0000F4C8                            ; ===========================================================================
0000F4C8                            
0000F4C8                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000F4C8 4E71                       		nop
0000F4CA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000F4D0                            
0000F4D0                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000F4D0 6000 0000                  		bra.w	DisplaySprite
0000F4D4                            ; ===========================================================================
0000F4D4                            ; ---------------------------------------------------------------------------
0000F4D4                            ; Level	order array
0000F4D4                            ; ---------------------------------------------------------------------------
0000F4D4 0001 0002 0003 0200 0101+  LevelOrder:	dc.w	 1,    2,    3, $200, $101, $102, $300,	$502; 0
0000F4E4 0201 0202 0400 0000 0301+  		dc.w  $201, $202, $400,	   0, $301, $302, $500,	   0; 8
0000F4F4 0401 0402 0100 0000 0501+  		dc.w  $401, $402, $100,	   0, $501, $103,    0,	   0; 16
0000F504 0000 0000 0000 0000 0701+  		dc.w     0,    0,    0,	   0, $701, $702,    0,	   0; 24
0000F514 0801 0802 0000 0000 0000+  		dc.w  $801, $802,    0,    0,    0,    0,    0,    0; 32
0000F524                            ; ===========================================================================
0000F524                            
0000F524                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000F524 7220                       		moveq	#$20,d1		; set horizontal speed
0000F526 3028 0032                  		move.w	$32(a0),d0
0000F52A B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000F52E 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000F530 6C00                       		bge.s	Obj3A_Move2
0000F532 4441                       		neg.w	d1
0000F534                            
0000F534                            Obj3A_Move2:
0000F534 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F538 3028 0008                  		move.w	8(a0),d0
0000F53C 6B00                       		bmi.s	locret_C748
0000F53E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F542 6400                       		bcc.s	locret_C748	; if yes, branch
0000F544 6000 0000                  		bra.w	DisplaySprite
0000F548                            ; ===========================================================================
0000F548                            
0000F548                            locret_C748:
0000F548 4E75                       		rts	
0000F54A                            ; ===========================================================================
0000F54A                            
0000F54A                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000F54A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000F550 6600 0000                  		bne.w	DeleteObject
0000F554 5428 0024                  		addq.b	#2,$24(a0)
0000F558 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000F55C 303C 008D                  		move.w	#$8D,d0
0000F560 4EF9 0000 19E4             		jmp	(PlaySound).l	; play FZ music
0000F566                            ; ===========================================================================
0000F566                            
0000F566                            loc_C766:				; XREF: Obj3A_Index
0000F566 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000F56A 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000F570 6700 0000                  		beq.w	DeleteObject
0000F574 4E75                       		rts	
0000F576                            ; ===========================================================================
0000F576 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000F57C 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000F57E FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000F584 0201                       		dc.b 2,	1
0000F586 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000F58C 0206                       		dc.b 2,	6
0000F58E 0520 0120 00EC             		dc.w $520, $120, $EC
0000F594 0202                       		dc.b 2,	2
0000F596 0540 0120 00FC             		dc.w $540, $120, $FC
0000F59C 0203                       		dc.b 2,	3
0000F59E 0560 0120 010C             		dc.w $560, $120, $10C
0000F5A4 0204                       		dc.b 2,	4
0000F5A6 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000F5AC 0205                       		dc.b 2,	5
0000F5AE                            ; ===========================================================================
0000F5AE                            ; ---------------------------------------------------------------------------
0000F5AE                            ; Object 7E - special stage results screen
0000F5AE                            ; ---------------------------------------------------------------------------
0000F5AE                            
0000F5AE                            Obj7E:					; XREF: Obj_Index
0000F5AE 7000                       		moveq	#0,d0
0000F5B0 1028 0024                  		move.b	$24(a0),d0
0000F5B4 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000F5B8 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000F5BC                            ; ===========================================================================
0000F5BC 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000F5BE 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000F5C0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000F5C2 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000F5C4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000F5C6 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000F5C8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000F5CA 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000F5CC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000F5CE 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000F5D0 0000                       		dc.w loc_C91A-Obj7E_Index
0000F5D2                            ; ===========================================================================
0000F5D2                            
0000F5D2                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000F5D2 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000F5D6 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000F5D8 4E75                       		rts	
0000F5DA                            ; ===========================================================================
0000F5DA                            
0000F5DA                            Obj7E_Main:
0000F5DA 2248                       		movea.l	a0,a1
0000F5DC 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000F5E2 7203                       		moveq	#3,d1
0000F5E4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000F5EA 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000F5EC 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000F5EE                            
0000F5EE                            Obj7E_Loop:
0000F5EE 12BC 007E                  		move.b	#$7E,0(a1)
0000F5F2 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000F5F6 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000F5FA 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000F5FE 135A 0024                  		move.b	(a2)+,$24(a1)
0000F602 135A 001A                  		move.b	(a2)+,$1A(a1)
0000F606 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000F60E 337C 8580 0002             		move.w	#$8580,2(a1)
0000F614 137C 0000 0001             		move.b	#0,1(a1)
0000F61A 43E9 0040                  		lea	$40(a1),a1
0000F61E 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000F622                            
0000F622 7007                       		moveq	#7,d0
0000F624 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000F628 6700                       		beq.s	loc_C842
0000F62A 7000                       		moveq	#0,d0
0000F62C 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000F630 6600                       		bne.s	loc_C842	; if not, branch
0000F632 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000F634 317C 0018 0008             		move.w	#$18,8(a0)
0000F63A 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000F640                            
0000F640                            loc_C842:
0000F640 1140 001A                  		move.b	d0,$1A(a0)
0000F644                            
0000F644                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000F644 7210                       		moveq	#$10,d1		; set horizontal speed
0000F646 3028 0030                  		move.w	$30(a0),d0
0000F64A B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000F64E 6700                       		beq.s	loc_C86C	; if yes, branch
0000F650 6C00                       		bge.s	Obj7E_Move
0000F652 4441                       		neg.w	d1
0000F654                            
0000F654                            Obj7E_Move:
0000F654 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F658                            
0000F658                            loc_C85A:				; XREF: loc_C86C
0000F658 3028 0008                  		move.w	8(a0),d0
0000F65C 6B00                       		bmi.s	locret_C86A
0000F65E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F662 6400                       		bcc.s	locret_C86A	; if yes, branch
0000F664 6000 0000                  		bra.w	DisplaySprite
0000F668                            ; ===========================================================================
0000F668                            
0000F668                            locret_C86A:
0000F668 4E75                       		rts	
0000F66A                            ; ===========================================================================
0000F66A                            
0000F66A                            loc_C86C:				; XREF: Obj7E_ChkPos
0000F66A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F670 66E6                       		bne.s	loc_C85A
0000F672 5428 0024                  		addq.b	#2,$24(a0)
0000F676 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000F67C 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000F682                            
0000F682                            Obj7E_Wait:				; XREF: Obj7E_Index
0000F682 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000F686 6600                       		bne.s	Obj7E_Display
0000F688 5428 0024                  		addq.b	#2,$24(a0)
0000F68C                            
0000F68C                            Obj7E_Display:
0000F68C 6000 0000                  		bra.w	DisplaySprite
0000F690                            ; ===========================================================================
0000F690                            
0000F690                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000F690 6100 0000                  		bsr.w	DisplaySprite
0000F694 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000F69A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000F69E 6700                       		beq.s	loc_C8C4	; if yes, branch
0000F6A0 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000F6A6 700A                       		moveq	#10,d0		; add 10 to score
0000F6A8 4EB9 0000 0000             		jsr	AddPoints
0000F6AE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000F6B2 0200 0003                  		andi.b	#3,d0
0000F6B6 6600                       		bne.s	locret_C8EA
0000F6B8 303C 00CD                  		move.w	#$CD,d0
0000F6BC 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000F6C2                            ; ===========================================================================
0000F6C2                            
0000F6C2                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000F6C2 303C 00C5                  		move.w	#$C5,d0
0000F6C6 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000F6CC 5428 0024                  		addq.b	#2,$24(a0)
0000F6D0 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000F6D6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000F6DC 6500                       		bcs.s	locret_C8EA	; if not, branch
0000F6DE 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000F6E4 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000F6E8                            
0000F6E8                            locret_C8EA:
0000F6E8 4E75                       		rts	
0000F6EA                            ; ===========================================================================
0000F6EA                            
0000F6EA                            Obj7E_Exit:				; XREF: Obj7E_Index
0000F6EA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000F6F0 6000 0000                  		bra.w	DisplaySprite
0000F6F4                            ; ===========================================================================
0000F6F4                            
0000F6F4                            Obj7E_Continue:				; XREF: Obj7E_Index
0000F6F4 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000F6FA 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000F700 303C 00BF                  		move.w	#$BF,d0
0000F704 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play continues music
0000F70A 5428 0024                  		addq.b	#2,$24(a0)
0000F70E 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000F714 6000 0000                  		bra.w	DisplaySprite
0000F718                            ; ===========================================================================
0000F718                            
0000F718                            loc_C91A:				; XREF: Obj7E_Index
0000F718 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000F71C 0200 000F                  		andi.b	#$F,d0
0000F720 6600                       		bne.s	Obj7E_Display2
0000F722 0868 0000 001A             		bchg	#0,$1A(a0)
0000F728                            
0000F728                            Obj7E_Display2:
0000F728 6000 0000                  		bra.w	DisplaySprite
0000F72C                            ; ===========================================================================
0000F72C 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000F732 0200                       		dc.b 2,	0		; rountine number, frame number
0000F734 0320 0120 0118             		dc.w $320, $120, $118
0000F73A 0201                       		dc.b 2,	1
0000F73C 0360 0120 0128             		dc.w $360, $120, $128
0000F742 0202                       		dc.b 2,	2
0000F744 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000F74A 0203                       		dc.b 2,	3
0000F74C 03A0 0120 0138             		dc.w $3A0, $120, $138
0000F752 0206                       		dc.b 2,	6
0000F754                            ; ===========================================================================
0000F754                            ; ---------------------------------------------------------------------------
0000F754                            ; Object 7F - chaos emeralds from the special stage results screen
0000F754                            ; ---------------------------------------------------------------------------
0000F754                            
0000F754                            Obj7F:					; XREF: Obj_Index
0000F754 7000                       		moveq	#0,d0
0000F756 1028 0024                  		move.b	$24(a0),d0
0000F75A 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000F75E 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000F762                            ; ===========================================================================
0000F762 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000F764 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000F766                            
0000F766                            ; ---------------------------------------------------------------------------
0000F766                            ; X-axis positions for chaos emeralds
0000F766                            ; ---------------------------------------------------------------------------
0000F766 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000F772                            ; ===========================================================================
0000F772                            
0000F772                            Obj7F_Main:				; XREF: Obj7F_Index
0000F772 2248                       		movea.l	a0,a1
0000F774 45F9 0000 F766             		lea	(Obj7F_PosData).l,a2
0000F77A 7400                       		moveq	#0,d2
0000F77C 7200                       		moveq	#0,d1
0000F77E 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000F782 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000F784 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000F788                            
0000F788                            Obj7F_Loop:
0000F788 12BC 007F                  		move.b	#$7F,0(a1)
0000F78C 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000F790 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000F796 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000F79A 1633 2000                  		move.b	(a3,d2.w),d3
0000F79E 1343 001A                  		move.b	d3,$1A(a1)
0000F7A2 1343 001C                  		move.b	d3,$1C(a1)
0000F7A6 5202                       		addq.b	#1,d2
0000F7A8 5429 0024                  		addq.b	#2,$24(a1)
0000F7AC 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000F7B4 337C 8541 0002             		move.w	#$8541,2(a1)
0000F7BA 137C 0000 0001             		move.b	#0,1(a1)
0000F7C0 43E9 0040                  		lea	$40(a1),a1	; next object
0000F7C4 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000F7C8                            
0000F7C8                            Obj7F_Flash:				; XREF: Obj7F_Index
0000F7C8 1028 001A                  		move.b	$1A(a0),d0
0000F7CC 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000F7D2 0C00 0006                  		cmpi.b	#6,d0
0000F7D6 6600                       		bne.s	Obj7F_Display
0000F7D8 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000F7DE                            
0000F7DE                            Obj7F_Display:
0000F7DE 6000 0000                  		bra.w	DisplaySprite
0000F7E2                            ; ===========================================================================
0000F7E2                            ; ---------------------------------------------------------------------------
0000F7E2                            ; Sprite mappings - zone title cards
0000F7E2                            ; ---------------------------------------------------------------------------
0000F7E2                            Map_obj34:	
0000F7E2                            		include	"_maps\obj34.asm"
0000F7E2                            ; --------------------------------------------------------------------------------
0000F7E2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F7E2                            ; --------------------------------------------------------------------------------
0000F7E2                            
0000F7E2                            SME_vtB4Z:	
0000F7E2 0000 0000                  		dc.w SME_vtB4Z_1E-SME_vtB4Z, SME_vtB4Z_4C-SME_vtB4Z	
0000F7E6 0000 0000                  		dc.w SME_vtB4Z_7A-SME_vtB4Z, SME_vtB4Z_99-SME_vtB4Z	
0000F7EA 0000 0000                  		dc.w SME_vtB4Z_C7-SME_vtB4Z, SME_vtB4Z_FA-SME_vtB4Z	
0000F7EE 0000 0000                  		dc.w SME_vtB4Z_12D-SME_vtB4Z, SME_vtB4Z_142-SME_vtB4Z	
0000F7F2 0000 0000                  		dc.w SME_vtB4Z_14D-SME_vtB4Z, SME_vtB4Z_158-SME_vtB4Z	
0000F7F6 0000 0000                  		dc.w SME_vtB4Z_163-SME_vtB4Z, SME_vtB4Z_191-SME_vtB4Z	
0000F7FA 0000 0000                  		dc.w SME_vtB4Z_1AB-SME_vtB4Z, SME_vtB4Z_1D4-SME_vtB4Z	
0000F7FE 0000                       		dc.w SME_vtB4Z_1FD-SME_vtB4Z	
0000F800 09                         SME_vtB4Z_1E:	dc.b 9	
0000F801 F805 0000 B4               		dc.b $F8, 5, 0, 0, $B4	
0000F806 F805 002A C4               		dc.b $F8, 5, 0, $2A, $C4	
0000F80B F805 0018 D4               		dc.b $F8, 5, 0, $18, $D4	
0000F810 F805 0010 E4               		dc.b $F8, 5, 0, $10, $E4	
0000F815 F805 0022 F3               		dc.b $F8, 5, 0, $22, $F3	
0000F81A F805 001C 14               		dc.b $F8, 5, 0, $1C, $14	
0000F81F F801 0020 24               		dc.b $F8, 1, 0, $20, $24	
0000F824 F805 0022 2C               		dc.b $F8, 5, 0, $22, $2C	
0000F829 F805 0022 3A               		dc.b $F8, 5, 0, $22, $3A	
0000F82E 09                         SME_vtB4Z_4C:	dc.b 9	
0000F82F F805 0022 BC               		dc.b $F8, 5, 0, $22, $BC	
0000F834 F805 0000 CC               		dc.b $F8, 5, 0, 0, $CC	
0000F839 F805 0004 DC               		dc.b $F8, 5, 0, 4, $DC	
0000F83E F805 0042 EC               		dc.b $F8, 5, 0, $42, $EC	
0000F843 F805 0036 FC               		dc.b $F8, 5, 0, $36, $FC	
0000F848 F801 0020 0C               		dc.b $F8, 1, 0, $20, $C	
0000F84D F805 002A 14               		dc.b $F8, 5, 0, $2A, $14	
0000F852 F805 003E 24               		dc.b $F8, 5, 0, $3E, $24	
0000F857 F805 001C 34               		dc.b $F8, 5, 0, $1C, $34	
0000F85C 06                         SME_vtB4Z_7A:	dc.b 6	
0000F85D F805 0026 CF               		dc.b $F8, 5, 0, $26, $CF	
0000F862 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000F867 F805 0036 F0               		dc.b $F8, 5, 0, $36, $F0	
0000F86C F805 0004 00               		dc.b $F8, 5, 0, 4, 0	
0000F871 F805 0022 10               		dc.b $F8, 5, 0, $22, $10	
0000F876 F805 0010 20               		dc.b $F8, 5, 0, $10, $20	
0000F87B 09                         SME_vtB4Z_99:	dc.b 9	
0000F87C F805 003A B4               		dc.b $F8, 5, 0, $3A, $B4	
0000F881 F805 003E C4               		dc.b $F8, 5, 0, $3E, $C4	
0000F886 F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4	
0000F88B F805 0036 E4               		dc.b $F8, 5, 0, $36, $E4	
0000F890 F805 0022 04               		dc.b $F8, 5, 0, $22, 4	
0000F895 F801 0020 14               		dc.b $F8, 1, 0, $20, $14	
0000F89A F805 0018 1C               		dc.b $F8, 5, 0, $18, $1C	
0000F89F F805 001C 2C               		dc.b $F8, 5, 0, $1C, $2C	
0000F8A4 F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	
0000F8A9 0A                         SME_vtB4Z_C7:	dc.b $A	
0000F8AA F805 003A AC               		dc.b $F8, 5, 0, $3A, $AC	
0000F8AF F805 0032 BC               		dc.b $F8, 5, 0, $32, $BC	
0000F8B4 F805 0036 CC               		dc.b $F8, 5, 0, $36, $CC	
0000F8B9 F801 0020 DC               		dc.b $F8, 1, 0, $20, $DC	
0000F8BE F805 002A E4               		dc.b $F8, 5, 0, $2A, $E4	
0000F8C3 F805 0018 F4               		dc.b $F8, 5, 0, $18, $F4	
0000F8C8 F805 0042 14               		dc.b $F8, 5, 0, $42, $14	
0000F8CD F805 0000 24               		dc.b $F8, 5, 0, 0, $24	
0000F8D2 F805 0036 34               		dc.b $F8, 5, 0, $36, $34	
0000F8D7 F805 000C 44               		dc.b $F8, 5, 0, $C, $44	
0000F8DC 0A                         SME_vtB4Z_FA:	dc.b $A	
0000F8DD F805 003A AC               		dc.b $F8, 5, 0, $3A, $AC	
0000F8E2 F805 0008 BC               		dc.b $F8, 5, 0, 8, $BC	
0000F8E7 F805 0036 CC               		dc.b $F8, 5, 0, $36, $CC	
0000F8EC F805 0000 DC               		dc.b $F8, 5, 0, 0, $DC	
0000F8F1 F805 0032 EC               		dc.b $F8, 5, 0, $32, $EC	
0000F8F6 F805 0004 0C               		dc.b $F8, 5, 0, 4, $C	
0000F8FB F805 0036 1C               		dc.b $F8, 5, 0, $36, $1C	
0000F900 F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C	
0000F905 F801 0020 3C               		dc.b $F8, 1, 0, $20, $3C	
0000F90A F805 002A 44               		dc.b $F8, 5, 0, $2A, $44	
0000F90F 04                         SME_vtB4Z_12D:	dc.b 4	
0000F910 F805 0046 E0               		dc.b $F8, 5, 0, $46, $E0	
0000F915 F805 002E F0               		dc.b $F8, 5, 0, $2E, $F0	
0000F91A F805 002A 00               		dc.b $F8, 5, 0, $2A, 0	
0000F91F F805 0010 10               		dc.b $F8, 5, 0, $10, $10	
0000F924 02                         SME_vtB4Z_142:	dc.b 2	
0000F925 040C 004A EC               		dc.b 4, $C, 0, $4A, $EC	
0000F92A F402 004E 0C               		dc.b $F4, 2, 0, $4E, $C	
0000F92F 02                         SME_vtB4Z_14D:	dc.b 2	
0000F930 040C 004A EC               		dc.b 4, $C, 0, $4A, $EC	
0000F935 F406 0051 08               		dc.b $F4, 6, 0, $51, 8	
0000F93A 02                         SME_vtB4Z_158:	dc.b 2	
0000F93B 040C 004A EC               		dc.b 4, $C, 0, $4A, $EC	
0000F940 F406 0057 08               		dc.b $F4, 6, 0, $57, 8	
0000F945 09                         SME_vtB4Z_163:	dc.b 9	
0000F946 F40C 0065 14               		dc.b $F4, $C, 0, $65, $14	
0000F94B F404 0069 34               		dc.b $F4, 4, 0, $69, $34	
0000F950 EC0C 006B 14               		dc.b $EC, $C, 0, $6B, $14	
0000F955 EC04 006F 34               		dc.b $EC, 4, 0, $6F, $34	
0000F95A E40C 0071 14               		dc.b $E4, $C, 0, $71, $14	
0000F95F E408 0074 2C               		dc.b $E4, 8, 0, $74, $2C	
0000F964 DC0C 0077 14               		dc.b $DC, $C, 0, $77, $14	
0000F969 DC04 007B 34               		dc.b $DC, 4, 0, $7B, $34	
0000F96E D408 007D 24               		dc.b $D4, 8, 0, $7D, $24	
0000F973 05                         SME_vtB4Z_191:	dc.b 5	
0000F974 F805 0014 DC               		dc.b $F8, 5, 0, $14, $DC	
0000F979 F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	
0000F97E F805 002A F4               		dc.b $F8, 5, 0, $2A, $F4	
0000F983 F805 0000 04               		dc.b $F8, 5, 0, 0, 4	
0000F988 F805 0022 14               		dc.b $F8, 5, 0, $22, $14	
0000F98D 08                         SME_vtB4Z_1AB:	dc.b 8	
0000F98E F805 003A D4               		dc.b $F8, 5, 0, $3A, $D4	
0000F993 F805 001C E4               		dc.b $F8, 5, 0, $1C, $E4	
0000F998 F805 002E F4               		dc.b $F8, 5, 0, $2E, $F4	
0000F99D F805 0032 04               		dc.b $F8, 5, 0, $32, 4	
0000F9A2 F805 0032 14               		dc.b $F8, 5, 0, $32, $14	
0000F9A7 F801 0020 24               		dc.b $F8, 1, 0, $20, $24	
0000F9AC F805 002A 2C               		dc.b $F8, 5, 0, $2A, $2C	
0000F9B1 F805 0018 3C               		dc.b $F8, 5, 0, $18, $3C	
0000F9B6 08                         SME_vtB4Z_1D4:	dc.b 8	
0000F9B7 F805 003A D4               		dc.b $F8, 5, 0, $3A, $D4	
0000F9BC F805 001C E4               		dc.b $F8, 5, 0, $1C, $E4	
0000F9C1 F805 002E F4               		dc.b $F8, 5, 0, $2E, $F4	
0000F9C6 F805 0032 04               		dc.b $F8, 5, 0, $32, 4	
0000F9CB F805 0032 14               		dc.b $F8, 5, 0, $32, $14	
0000F9D0 F801 0020 24               		dc.b $F8, 1, 0, $20, $24	
0000F9D5 F805 002A 2C               		dc.b $F8, 5, 0, $2A, $2C	
0000F9DA F805 0018 3C               		dc.b $F8, 5, 0, $18, $3C	
0000F9DF 07                         SME_vtB4Z_1FD:	dc.b 7	
0000F9E0 F805 003A EC               		dc.b $F8, 5, 0, $3A, $EC	
0000F9E5 F805 0032 FC               		dc.b $F8, 5, 0, $32, $FC	
0000F9EA F805 0010 0C               		dc.b $F8, 5, 0, $10, $C	
0000F9EF F805 0008 1C               		dc.b $F8, 5, 0, 8, $1C	
0000F9F4 F801 0020 2C               		dc.b $F8, 1, 0, $20, $2C	
0000F9F9 F805 0000 34               		dc.b $F8, 5, 0, 0, $34	
0000F9FE F805 0022 44               		dc.b $F8, 5, 0, $22, $44	
0000FA04 00                         		even
0000FA04 00                         		even
0000FA04                            
0000FA04                            ; ---------------------------------------------------------------------------
0000FA04                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000FA04                            ; ---------------------------------------------------------------------------
0000FA04                            Map_obj39:
0000FA04                            	include "_maps\obj39.asm"
0000FA04                            ; ---------------------------------------------------------------------------
0000FA04                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000FA04                            ; ---------------------------------------------------------------------------
0000FA04 0000                       		dc.w byte_CBAC-Map_obj39
0000FA06 0000                       		dc.w byte_CBB7-Map_obj39
0000FA08 0000                       		dc.w byte_CBC2-Map_obj39
0000FA0A 0000                       		dc.w byte_CBCD-Map_obj39
0000FA0C 02                         byte_CBAC:	dc.b 2
0000FA0D F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000FA12 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000FA17 02                         byte_CBB7:	dc.b 2
0000FA18 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000FA1D F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000FA22 02                         byte_CBC2:	dc.b 2
0000FA23 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000FA28 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000FA2D 02                         byte_CBCD:	dc.b 2
0000FA2E F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000FA33 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000FA38                            		even
0000FA38                            		even
0000FA38                            
0000FA38                            ; ---------------------------------------------------------------------------
0000FA38                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000FA38                            ; ---------------------------------------------------------------------------
0000FA38 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000FA3A 0000                       		dc.w byte_CC13-Map_obj3A
0000FA3C 0000                       		dc.w byte_CC32-Map_obj3A
0000FA3E 0000                       		dc.w byte_CC51-Map_obj3A
0000FA40 0000                       		dc.w byte_CC75-Map_obj3A
0000FA42 0000                       		dc.w byte_CB47-Map_obj3A
0000FA44 0000                       		dc.w byte_CB26-Map_obj3A
0000FA46 0000                       		dc.w byte_CB31-Map_obj3A
0000FA48 0000                       		dc.w byte_CB3C-Map_obj3A
0000FA4A 09                         byte_CBEA:	dc.b 9	;  SONIC HAS | SONIC GOT
0000FA4B F805 003E B0               		dc.b $F8, 5, 0, $3E, $B0	; S
0000FA50 F805 0032 C0               		dc.b $F8, 5, 0, $32, $C0	; O
0000FA55 F805 002E D0               		dc.b $F8, 5, 0, $2E, $D0	; N
0000FA5A F801 0020 E0               		dc.b $F8, 1, 0, $20, $E0	; I
0000FA5F F805 0008 E8               		dc.b $F8, 5, 0, 8, $E8		; C
0000FA64 F800 0056 F8               		dc.b $F8, 0, 0, $56, $F8	; Space
0000FA69 F805 0018 08               		dc.b $F8, 5, 0, $18, $8	; G
0000FA6E F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000FA73 F805 0042 28               		dc.b $F8, 5, 0, $42, $28	; T
0000FA78 07                         byte_CC13:	dc.b 7	;  PASSED | THROUGH
0000FA79 F805 0042 C8               		dc.b $F8, 5, 0, $42, $C8	; T
0000FA7E F805 001C D8               		dc.b $F8, 5, 0, $1C, $D8	; H
0000FA83 F805 003A E8               		dc.b $F8, 5, 0, $3A, $E8	; R
0000FA88 F805 0032 F8               		dc.b $F8, 5, 0, $32, $F8	; O
0000FA8D F805 0046 08               		dc.b $F8, 5, 0, $46, $8	; U
0000FA92 F805 0018 18               		dc.b $F8, 5, 0, $18, $18	; G
0000FA97 F805 001C 28               		dc.b $F8, 5, 0, $1C, $28	; H
0000FA9C 06                         byte_CC32:	dc.b 6			; SCORE
0000FA9D F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000FAA2 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000FAA7 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000FAAC F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000FAB1 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000FAB6 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000FABB 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000FABC F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000FAC1 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000FAC6 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000FACB F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000FAD0 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000FAD5 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000FADA F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000FADF 07                         byte_CC75:	dc.b 7			; RING BONUS
0000FAE0 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000FAE5 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000FAEA F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000FAEF F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000FAF4 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000FAF9 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000FAFE F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000FB03 02                         byte_CB26:	dc.b 2			; ACT 1
0000FB04 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000FB09 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000FB0E 02                         byte_CB31:	dc.b 2			; ACT 2
0000FB0F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000FB14 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000FB19 02                         byte_CB3C:	dc.b 2			; ACT 3
0000FB1A 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000FB1F F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000FB24 0D                         byte_CB47:	dc.b $D			; Oval
0000FB25 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000FB2A E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000FB2F EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000FB34 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000FB39 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000FB3E 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000FB43 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000FB48 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000FB4D EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000FB52 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000FB57 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000FB5C 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000FB61 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000FB66 00                         		dc.b 0
0000FB68 00                         		even
0000FB68                            ; ---------------------------------------------------------------------------
0000FB68                            ; Sprite mappings - special stage results screen
0000FB68                            ; ---------------------------------------------------------------------------
0000FB68 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000FB6A 0000                       		dc.w byte_CCEE-Map_obj7E
0000FB6C 0000                       		dc.w byte_CD0D-Map_obj7E
0000FB6E FFBC                       		dc.w byte_CB47-Map_obj7E
0000FB70 0000                       		dc.w byte_CD31-Map_obj7E
0000FB72 0000                       		dc.w byte_CD46-Map_obj7E
0000FB74 0000                       		dc.w byte_CD5B-Map_obj7E
0000FB76 0000                       		dc.w byte_CD6B-Map_obj7E
0000FB78 0000                       		dc.w byte_CDA8-Map_obj7E
0000FB7A 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000FB7B F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000FB80 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000FB85 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000FB8A F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000FB8F F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000FB94 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000FB99 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000FB9E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000FBA3 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000FBA8 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000FBAD F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000FBB2 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000FBB7 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000FBBC 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000FBBD F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000FBC2 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000FBC7 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000FBCC F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000FBD1 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000FBD6 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000FBDB 07                         byte_CD0D:	dc.b 7
0000FBDC F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000FBE1 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000FBE6 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000FBEB F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000FBF0 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000FBF5 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000FBFA F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000FBFF 04                         byte_CD31:	dc.b 4
0000FC00 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000FC05 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000FC0A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000FC0F F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000FC14 04                         byte_CD46:	dc.b 4
0000FC15 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000FC1A F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000FC1F F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000FC24 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000FC29 03                         byte_CD5B:	dc.b 3
0000FC2A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000FC2F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000FC34 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000FC39 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000FC3A F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000FC3F F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000FC44 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000FC49 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000FC4E F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000FC53 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000FC58 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000FC5D F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000FC62 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000FC67 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000FC6C F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000FC71 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000FC76 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000FC77 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000FC7C F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000FC81 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000FC86 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000FC8B F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000FC90 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000FC95 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000FC9A F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000FC9F F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000FCA4 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000FCA9 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000FCAE F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000FCB3 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000FCB8 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000FCBD F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000FCC2                            		even
0000FCC2                            ; ---------------------------------------------------------------------------
0000FCC2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000FCC2                            ; ---------------------------------------------------------------------------
0000FCC2                            Map_obj7F:
0000FCC2                            	include "_maps\obj7F.asm"
0000FCC2                            ; ---------------------------------------------------------------------------
0000FCC2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000FCC2                            ; ---------------------------------------------------------------------------
0000FCC2 0000                       		dc.w byte_CE02-Map_obj7F
0000FCC4 0000                       		dc.w byte_CE08-Map_obj7F
0000FCC6 0000                       		dc.w byte_CE0E-Map_obj7F
0000FCC8 0000                       		dc.w byte_CE14-Map_obj7F
0000FCCA 0000                       		dc.w byte_CE1A-Map_obj7F
0000FCCC 0000                       		dc.w byte_CE20-Map_obj7F
0000FCCE 0000                       		dc.w byte_CE26-Map_obj7F
0000FCD0 01                         byte_CE02:	dc.b 1
0000FCD1 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000FCD6 01                         byte_CE08:	dc.b 1
0000FCD7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000FCDC 01                         byte_CE0E:	dc.b 1
0000FCDD F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000FCE2 01                         byte_CE14:	dc.b 1
0000FCE3 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000FCE8 01                         byte_CE1A:	dc.b 1
0000FCE9 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000FCEE 01                         byte_CE20:	dc.b 1
0000FCEF F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000FCF4 00                         byte_CE26:	dc.b 0			; Blank frame
0000FCF6 00                         		even
0000FCF6 00                         		even
0000FCF6                            
0000FCF6                            ; ===========================================================================
0000FCF6                            ; ---------------------------------------------------------------------------
0000FCF6                            ; Object 36 - spikes
0000FCF6                            ; ---------------------------------------------------------------------------
0000FCF6                            
0000FCF6                            Obj36:					; XREF: Obj_Index
0000FCF6 7000                       		moveq	#0,d0
0000FCF8 1028 0024                  		move.b	$24(a0),d0
0000FCFC 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000FD00 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000FD04                            ; ===========================================================================
0000FD04 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000FD06 0000                       		dc.w Obj36_Solid-Obj36_Index
0000FD08                            
0000FD08 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000FD0A 0110                       		dc.b 1,	$10
0000FD0C 0204                       		dc.b 2,	4
0000FD0E 031C                       		dc.b 3,	$1C
0000FD10 0440                       		dc.b 4,	$40
0000FD12 0510                       		dc.b 5,	$10
0000FD14                            ; ===========================================================================
0000FD14                            
0000FD14                            Obj36_Main:				; XREF: Obj36_Index
0000FD14 5428 0024                  		addq.b	#2,$24(a0)
0000FD18 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000FD20 317C 051B 0002             		move.w	#$51B,2(a0)
0000FD26 0028 0004 0001             		ori.b	#4,1(a0)
0000FD2C 117C 0004 0018             		move.b	#4,$18(a0)
0000FD32 1028 0028                  		move.b	$28(a0),d0
0000FD36 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FD3C 0240 00F0                  		andi.w	#$F0,d0
0000FD40 43F9 0000 FD08             		lea	(Obj36_Var).l,a1
0000FD46 E648                       		lsr.w	#3,d0
0000FD48 D2C0                       		adda.w	d0,a1
0000FD4A 1159 001A                  		move.b	(a1)+,$1A(a0)
0000FD4E 1159 0019                  		move.b	(a1)+,$19(a0)
0000FD52 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FD58 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000FD5E                            
0000FD5E                            Obj36_Solid:				; XREF: Obj36_Index
0000FD5E 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000FD62 343C 0004                  		move.w	#4,d2
0000FD66 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000FD6C 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000FD6E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000FD74 6600                       		bne.s	Obj36_Upright	; if not, branch
0000FD76 343C 0014                  		move.w	#$14,d2
0000FD7A                            
0000FD7A                            ; Spikes types $1x and $5x face	sideways
0000FD7A                            
0000FD7A                            Obj36_SideWays:				; XREF: Obj36_Solid
0000FD7A 323C 001B                  		move.w	#$1B,d1
0000FD7E 3602                       		move.w	d2,d3
0000FD80 5243                       		addq.w	#1,d3
0000FD82 3828 0008                  		move.w	8(a0),d4
0000FD86 6100 0000                  		bsr.w	SolidObject
0000FD8A 0828 0003 0022             		btst	#3,$22(a0)
0000FD90 6600                       		bne.s	Obj36_Display
0000FD92 0C44 0001                  		cmpi.w	#1,d4
0000FD96 6700                       		beq.s	Obj36_Hurt
0000FD98 6000                       		bra.s	Obj36_Display
0000FD9A                            ; ===========================================================================
0000FD9A                            
0000FD9A                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000FD9A                            
0000FD9A                            Obj36_Upright:				; XREF: Obj36_Solid
0000FD9A 7200                       		moveq	#0,d1
0000FD9C 1228 0019                  		move.b	$19(a0),d1
0000FDA0 0641 000B                  		addi.w	#$B,d1
0000FDA4 343C 0010                  		move.w	#$10,d2
0000FDA8 363C 0011                  		move.w	#$11,d3
0000FDAC 3828 0008                  		move.w	8(a0),d4
0000FDB0 6100 0000                  		bsr.w	SolidObject
0000FDB4 0828 0003 0022             		btst	#3,$22(a0)
0000FDBA 6600                       		bne.s	Obj36_Hurt
0000FDBC 4A44                       		tst.w	d4
0000FDBE 6A00                       		bpl.s	Obj36_Display
0000FDC0                            
0000FDC0                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000FDC0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000FDC4 6600                       		bne.s	Obj36_Display	; if yes, branch
0000FDC6 2F08                       		move.l	a0,-(sp)
0000FDC8 2448                       		movea.l	a0,a2
0000FDCA 41F8 D000                  		lea	($FFFFD000).w,a0
0000FDCE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000FDD4 6400                       		bcc.s	loc_CF20
0000FDD6 2628 000C                  		move.l	$C(a0),d3
0000FDDA 3028 0012                  		move.w	$12(a0),d0
0000FDDE 48C0                       		ext.l	d0
0000FDE0 E180                       		asl.l	#8,d0
0000FDE2 9680                       		sub.l	d0,d3
0000FDE4 2143 000C                  		move.l	d3,$C(a0)
0000FDE8 4EB9 0000 0000             		jsr	HurtSonic
0000FDEE                            
0000FDEE                            loc_CF20:
0000FDEE 205F                       		movea.l	(sp)+,a0
0000FDF0                            
0000FDF0                            Obj36_Display:
0000FDF0 6100 0000                  		bsr.w	DisplaySprite
0000FDF4 3028 0030                  		move.w	$30(a0),d0
0000FDF8 0240 FF80                  		andi.w	#$FF80,d0
0000FDFC 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE00 0441 0080                  		subi.w	#$80,d1
0000FE04 0241 FF80                  		andi.w	#$FF80,d1
0000FE08 9041                       		sub.w	d1,d0
0000FE0A 0C40 0280                  		cmpi.w	#$280,d0
0000FE0E 6200 0000                  		bhi.w	DeleteObject
0000FE12 4E75                       		rts	
0000FE14                            ; ===========================================================================
0000FE14                            
0000FE14                            Obj36_Type0x:				; XREF: Obj36_Solid
0000FE14 7000                       		moveq	#0,d0
0000FE16 1028 0028                  		move.b	$28(a0),d0
0000FE1A D040                       		add.w	d0,d0
0000FE1C 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000FE20 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000FE24                            ; ===========================================================================
0000FE24 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000FE26 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000FE28 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000FE2A                            ; ===========================================================================
0000FE2A                            
0000FE2A                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000FE2A 4E75                       		rts			; don't move the object
0000FE2C                            ; ===========================================================================
0000FE2C                            
0000FE2C                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000FE2C 6100 0000                  		bsr.w	Obj36_Wait
0000FE30 7000                       		moveq	#0,d0
0000FE32 1028 0034                  		move.b	$34(a0),d0
0000FE36 D068 0032                  		add.w	$32(a0),d0
0000FE3A 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000FE3E 4E75                       		rts	
0000FE40                            ; ===========================================================================
0000FE40                            
0000FE40                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000FE40 6100 0000                  		bsr.w	Obj36_Wait
0000FE44 7000                       		moveq	#0,d0
0000FE46 1028 0034                  		move.b	$34(a0),d0
0000FE4A D068 0030                  		add.w	$30(a0),d0
0000FE4E 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000FE52 4E75                       		rts	
0000FE54                            ; ===========================================================================
0000FE54                            
0000FE54                            Obj36_Wait:
0000FE54 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000FE58 6700                       		beq.s	loc_CFA4	; if yes, branch
0000FE5A 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000FE5E 6600                       		bne.s	locret_CFE6
0000FE60 4A28 0001                  		tst.b	1(a0)
0000FE64 6A00                       		bpl.s	locret_CFE6
0000FE66 303C 00B6                  		move.w	#$B6,d0
0000FE6A 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000FE70 6000                       		bra.s	locret_CFE6
0000FE72                            ; ===========================================================================
0000FE72                            
0000FE72                            loc_CFA4:
0000FE72 4A68 0036                  		tst.w	$36(a0)
0000FE76 6700                       		beq.s	loc_CFC6
0000FE78 0468 0800 0034             		subi.w	#$800,$34(a0)
0000FE7E 6400                       		bcc.s	locret_CFE6
0000FE80 317C 0000 0034             		move.w	#0,$34(a0)
0000FE86 317C 0000 0036             		move.w	#0,$36(a0)
0000FE8C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000FE92 6000                       		bra.s	locret_CFE6
0000FE94                            ; ===========================================================================
0000FE94                            
0000FE94                            loc_CFC6:
0000FE94 0668 0800 0034             		addi.w	#$800,$34(a0)
0000FE9A 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000FEA0 6500                       		bcs.s	locret_CFE6
0000FEA2 317C 2000 0034             		move.w	#$2000,$34(a0)
0000FEA8 317C 0001 0036             		move.w	#1,$36(a0)
0000FEAE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000FEB4                            
0000FEB4                            locret_CFE6:
0000FEB4 4E75                       		rts	
0000FEB6                            ; ===========================================================================
0000FEB6                            ; ---------------------------------------------------------------------------
0000FEB6                            ; Sprite mappings - spikes
0000FEB6                            ; ---------------------------------------------------------------------------
0000FEB6                            Map_obj36:
0000FEB6                            	include "_maps\obj36.asm"
0000FEB6                            ; ---------------------------------------------------------------------------
0000FEB6                            ; Sprite mappings - spikes
0000FEB6                            ; ---------------------------------------------------------------------------
0000FEB6 0000                       		dc.w byte_CFF4-Map_obj36
0000FEB8 0000                       		dc.w byte_D004-Map_obj36
0000FEBA 0000                       		dc.w byte_D014-Map_obj36
0000FEBC 0000                       		dc.w byte_D01A-Map_obj36
0000FEBE 0000                       		dc.w byte_D02A-Map_obj36
0000FEC0 0000                       		dc.w byte_D049-Map_obj36
0000FEC2 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000FEC3 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000FEC8 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000FECD F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000FED2 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000FED3 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000FED8 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000FEDD 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000FEE2 01                         byte_D014:	dc.b 1			; 1 spike
0000FEE3 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000FEE8 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000FEE9 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000FEEE F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000FEF3 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000FEF8 06                         byte_D02A:	dc.b 6			; 6 spikes
0000FEF9 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000FEFE F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000FF03 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000FF08 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000FF0D F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000FF12 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000FF17 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000FF18 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000FF1E 00                         		even
0000FF1E 00                         		even
0000FF1E                            
0000FF1E                            ; ===========================================================================
0000FF1E                            ; ---------------------------------------------------------------------------
0000FF1E                            ; Object 3B - purple rock (GHZ)
0000FF1E                            ; ---------------------------------------------------------------------------
0000FF1E                            
0000FF1E                            Obj3B:					; XREF: Obj_Index
0000FF1E 7000                       		moveq	#0,d0
0000FF20 1028 0024                  		move.b	$24(a0),d0
0000FF24 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000FF28 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000FF2C                            ; ===========================================================================
0000FF2C 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000FF2E 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000FF30                            ; ===========================================================================
0000FF30                            
0000FF30                            Obj3B_Main:				; XREF: Obj3B_Index
0000FF30 5428 0024                  		addq.b	#2,$24(a0)
0000FF34 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000FF3C 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000FF42 117C 0004 0001             		move.b	#4,1(a0)
0000FF48 117C 0013 0019             		move.b	#$13,$19(a0)
0000FF4E 117C 0004 0018             		move.b	#4,$18(a0)
0000FF54                            
0000FF54                            Obj3B_Solid:				; XREF: Obj3B_Index
0000FF54 323C 001B                  		move.w	#$1B,d1
0000FF58 343C 0010                  		move.w	#$10,d2
0000FF5C 363C 0010                  		move.w	#$10,d3
0000FF60 3828 0008                  		move.w	8(a0),d4
0000FF64 6100 0000                  		bsr.w	SolidObject
0000FF68 6100 0000                  		bsr.w	DisplaySprite
0000FF6C 3028 0008                  		move.w	8(a0),d0
0000FF70 0240 FF80                  		andi.w	#$FF80,d0
0000FF74 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF78 0441 0080                  		subi.w	#$80,d1
0000FF7C 0241 FF80                  		andi.w	#$FF80,d1
0000FF80 9041                       		sub.w	d1,d0
0000FF82 0C40 0280                  		cmpi.w	#$280,d0
0000FF86 6200 0000                  		bhi.w	DeleteObject
0000FF8A 4E75                       		rts	
0000FF8C                            ; ===========================================================================
0000FF8C                            ; ---------------------------------------------------------------------------
0000FF8C                            ; Object 49 - waterfall	sound effect (GHZ)
0000FF8C                            ; ---------------------------------------------------------------------------
0000FF8C                            
0000FF8C                            Obj49:					; XREF: Obj_Index
0000FF8C 7000                       		moveq	#0,d0
0000FF8E 1028 0024                  		move.b	$24(a0),d0
0000FF92 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000FF96 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000FF9A                            ; ===========================================================================
0000FF9A 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000FF9C 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000FF9E                            ; ===========================================================================
0000FF9E                            
0000FF9E                            Obj49_Main:				; XREF: Obj49_Index
0000FF9E 5428 0024                  		addq.b	#2,$24(a0)
0000FFA2 117C 0004 0001             		move.b	#4,1(a0)
0000FFA8                            
0000FFA8                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000FFA8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000FFAC 0200 003F                  		andi.b	#$3F,d0
0000FFB0 6600                       		bne.s	Obj49_ChkDel
0000FFB2 303C 00D0                  		move.w	#$D0,d0
0000FFB6 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000FFBC                            
0000FFBC                            Obj49_ChkDel:
0000FFBC 3028 0008                  		move.w	8(a0),d0
0000FFC0 0240 FF80                  		andi.w	#$FF80,d0
0000FFC4 3238 F700                  		move.w	($FFFFF700).w,d1
0000FFC8 0441 0080                  		subi.w	#$80,d1
0000FFCC 0241 FF80                  		andi.w	#$FF80,d1
0000FFD0 9041                       		sub.w	d1,d0
0000FFD2 0C40 0280                  		cmpi.w	#$280,d0
0000FFD6 6200 0000                  		bhi.w	DeleteObject
0000FFDA 4E75                       		rts	
0000FFDC                            ; ===========================================================================
0000FFDC                            ; ---------------------------------------------------------------------------
0000FFDC                            ; Sprite mappings - purple rock	(GHZ)
0000FFDC                            ; ---------------------------------------------------------------------------
0000FFDC                            Map_obj3B:
0000FFDC                            	include "_maps\obj3B.asm"
0000FFDC                            ; ---------------------------------------------------------------------------
0000FFDC                            ; Sprite mappings - purple rock	(GHZ)
0000FFDC                            ; ---------------------------------------------------------------------------
0000FFDC 0000                       		dc.w byte_D110-Map_obj3B
0000FFDE 02                         byte_D110:	dc.b 2
0000FFDF F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000FFE4 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000FFEA 00                         		even
0000FFEA 00                         		even
0000FFEA                            
0000FFEA                            ; ===========================================================================
0000FFEA                            ; ---------------------------------------------------------------------------
0000FFEA                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000FFEA                            ; ---------------------------------------------------------------------------
0000FFEA                            
0000FFEA                            Obj3C:					; XREF: Obj_Index
0000FFEA 7000                       		moveq	#0,d0
0000FFEC 1028 0024                  		move.b	$24(a0),d0
0000FFF0 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000FFF4 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000FFF8 6000 0000                  		bra.w	MarkObjGone
0000FFFC                            ; ===========================================================================
0000FFFC 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000FFFE 0000                       		dc.w Obj3C_Solid-Obj3C_Index
00010000 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
00010002                            ; ===========================================================================
00010002                            
00010002                            Obj3C_Main:				; XREF: Obj3C_Index
00010002 5428 0024                  		addq.b	#2,$24(a0)
00010006 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0001000E 317C 450F 0002             		move.w	#$450F,2(a0)
00010014 117C 0004 0001             		move.b	#4,1(a0)
0001001A 117C 0010 0019             		move.b	#$10,$19(a0)
00010020 117C 0004 0018             		move.b	#4,$18(a0)
00010026 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001002C                            
0001002C                            Obj3C_Solid:				; XREF: Obj3C_Index
0001002C 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
00010032 323C 001B                  		move.w	#$1B,d1
00010036 343C 0020                  		move.w	#$20,d2
0001003A 363C 0020                  		move.w	#$20,d3
0001003E 3828 0008                  		move.w	8(a0),d4
00010042 6100 0000                  		bsr.w	SolidObject
00010046 0828 0005 0022             		btst	#5,$22(a0)
0001004C 6600                       		bne.s	Obj3C_ChkRoll
0001004E                            
0001004E                            locret_D180:
0001004E 4E75                       		rts	
00010050                            ; ===========================================================================
00010050                            
00010050                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
00010050 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
00010056 66F6                       		bne.s	locret_D180	; if not, branch
00010058 3028 0030                  		move.w	$30(a0),d0
0001005C 6A00                       		bpl.s	Obj3C_ChkSpeed
0001005E 4440                       		neg.w	d0
00010060                            
00010060                            Obj3C_ChkSpeed:
00010060 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
00010064 65E8                       		bcs.s	locret_D180	; if not, branch
00010066 3368 0030 0010             		move.w	$30(a0),$10(a1)
0001006C 5869 0008                  		addq.w	#4,8(a1)
00010070 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
00010076 3028 0008                  		move.w	8(a0),d0
0001007A B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0001007E 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
00010080 5169 0008                  		subq.w	#8,8(a1)
00010084 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0001008A                            
0001008A                            Obj3C_Smash:
0001008A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010090 08A8 0005 0022             		bclr	#5,$22(a0)
00010096 08A9 0005 0022             		bclr	#5,$22(a1)
0001009C 7207                       		moveq	#7,d1		; load 8 fragments
0001009E 343C 0070                  		move.w	#$70,d2
000100A2 6100                       		bsr.s	SmashObject
000100A4                            
000100A4                            Obj3C_FragMove:				; XREF: Obj3C_Index
000100A4 6100 0000                  		bsr.w	SpeedToPos
000100A8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
000100AE 6100 0000                  		bsr.w	DisplaySprite
000100B2 4A28 0001                  		tst.b	1(a0)
000100B6 6A00 0000                  		bpl.w	DeleteObject
000100BA 4E75                       		rts	
000100BC                            
000100BC                            ; ---------------------------------------------------------------------------
000100BC                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
000100BC                            ; ---------------------------------------------------------------------------
000100BC                            
000100BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000100BC                            
000100BC                            
000100BC                            SmashObject:				; XREF: Obj3C_Smash
000100BC 7000                       		moveq	#0,d0
000100BE 1028 001A                  		move.b	$1A(a0),d0
000100C2 D040                       		add.w	d0,d0
000100C4 2668 0004                  		movea.l	4(a0),a3
000100C8 D6F3 0000                  		adda.w	(a3,d0.w),a3
000100CC 524B                       		addq.w	#1,a3
000100CE 08E8 0005 0001             		bset	#5,1(a0)
000100D4 1810                       		move.b	0(a0),d4
000100D6 1A28 0001                  		move.b	1(a0),d5
000100DA 2248                       		movea.l	a0,a1
000100DC 6000                       		bra.s	Smash_LoadFrag
000100DE                            ; ===========================================================================
000100DE                            
000100DE                            Smash_Loop:
000100DE 6100 0000                  		bsr.w	SingleObjLoad
000100E2 6600                       		bne.s	Smash_PlaySnd
000100E4 5A4B                       		addq.w	#5,a3
000100E6                            
000100E6                            Smash_LoadFrag:				; XREF: SmashObject
000100E6 137C 0004 0024             		move.b	#4,$24(a1)
000100EC 1284                       		move.b	d4,0(a1)
000100EE 234B 0004                  		move.l	a3,4(a1)
000100F2 1345 0001                  		move.b	d5,1(a1)
000100F6 3368 0008 0008             		move.w	8(a0),8(a1)
000100FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010102 3368 0002 0002             		move.w	2(a0),2(a1)
00010108 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001010E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010114 335C 0010                  		move.w	(a4)+,$10(a1)
00010118 335C 0012                  		move.w	(a4)+,$12(a1)
0001011C B3C8                       		cmpa.l	a0,a1
0001011E 6400                       		bcc.s	loc_D268
00010120 2F08                       		move.l	a0,-(sp)
00010122 2049                       		movea.l	a1,a0
00010124 6100 0000                  		bsr.w	SpeedToPos
00010128 D568 0012                  		add.w	d2,$12(a0)
0001012C 205F                       		movea.l	(sp)+,a0
0001012E 6100 0000                  		bsr.w	DisplaySprite2
00010132                            
00010132                            loc_D268:
00010132 51C9 FFAA                  		dbf	d1,Smash_Loop
00010136                            
00010136                            Smash_PlaySnd:
00010136 303C 00CB                  		move.w	#$CB,d0
0001013A 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play smashing sound
00010140                            ; End of function SmashObject
00010140                            
00010140                            ; ===========================================================================
00010140                            ; Smashed block	fragment speeds
00010140                            ;
00010140 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
00010144 0600 FF00                  		dc.w $600, $FF00
00010148 0600 0100                  		dc.w $600, $100
0001014C 0400 0500                  		dc.w $400, $500
00010150 0600 FA00                  		dc.w $600, $FA00
00010154 0800 FE00                  		dc.w $800, $FE00
00010158 0800 0200                  		dc.w $800, $200
0001015C 0600 0600                  		dc.w $600, $600
00010160                            
00010160 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
00010164 F800 FE00                  		dc.w $F800, $FE00
00010168 F800 0200                  		dc.w $F800, $200
0001016C FA00 0600                  		dc.w $FA00, $600
00010170 FC00 FB00                  		dc.w $FC00, $FB00
00010174 FA00 FF00                  		dc.w $FA00, $FF00
00010178 FA00 0100                  		dc.w $FA00, $100
0001017C FC00 0500                  		dc.w $FC00, $500
00010180                            ; ---------------------------------------------------------------------------
00010180                            ; Sprite mappings - smashable walls (GHZ, SLZ)
00010180                            ; ---------------------------------------------------------------------------
00010180                            Map_obj3C:
00010180                            	include "_maps\obj3C.asm"
00010180                            ; ---------------------------------------------------------------------------
00010180                            ; Sprite mappings - smashable walls (GHZ, SLZ)
00010180                            ; ---------------------------------------------------------------------------
00010180 0000                       		dc.w byte_D2BC-Map_obj3C
00010182 0000                       		dc.w byte_D2E5-Map_obj3C
00010184 0000                       		dc.w byte_D30E-Map_obj3C
00010186 08                         byte_D2BC:	dc.b 8
00010187 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0001018C F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
00010191 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
00010196 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0001019B E005 0004 00               		dc.b $E0, 5, 0,	4, 0
000101A0 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
000101A5 0005 0004 00               		dc.b 0,	5, 0, 4, 0
000101AA 1005 0004 00               		dc.b $10, 5, 0,	4, 0
000101AF 08                         byte_D2E5:	dc.b 8
000101B0 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
000101B5 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
000101BA 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
000101BF 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
000101C4 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
000101C9 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
000101CE 0005 0004 00               		dc.b 0,	5, 0, 4, 0
000101D3 1005 0004 00               		dc.b $10, 5, 0,	4, 0
000101D8 08                         byte_D30E:	dc.b 8
000101D9 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
000101DE F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
000101E3 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
000101E8 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
000101ED E005 0008 00               		dc.b $E0, 5, 0,	8, 0
000101F2 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
000101F7 0005 0008 00               		dc.b 0,	5, 0, 8, 0
000101FC 1005 0008 00               		dc.b $10, 5, 0,	8, 0
00010202 00                         		even
00010202 00                         		even
00010202                            
00010202                            ; ---------------------------------------------------------------------------
00010202                            ; Object code loading subroutine
00010202                            ; ---------------------------------------------------------------------------
00010202                            
00010202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010202                            
00010202                            
00010202                            ObjectsLoad:				; XREF: TitleScreen; et al
00010202 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
00010206 7E7F                       		moveq	#$7F,d7
00010208 7000                       		moveq	#0,d0
0001020A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010210 6400                       		bcc.s	loc_D362
00010212                            
00010212                            loc_D348:
00010212 1010                       		move.b	(a0),d0		; load object number from RAM
00010214 6700                       		beq.s	loc_D358
00010216 D040                       		add.w	d0,d0
00010218 D040                       		add.w	d0,d0
0001021A 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0001021E 4E91                       		jsr	(a1)		; run the object's code
00010220 7000                       		moveq	#0,d0
00010222                            
00010222                            loc_D358:
00010222 41E8 0040                  		lea	$40(a0),a0	; next object
00010226 51CF FFEA                  		dbf	d7,loc_D348
0001022A 4E75                       		rts	
0001022C                            ; ===========================================================================
0001022C                            
0001022C                            loc_D362:
0001022C 7E1F                       		moveq	#$1F,d7
0001022E 61E2                       		bsr.s	loc_D348
00010230 7E5F                       		moveq	#$5F,d7
00010232                            
00010232                            loc_D368:
00010232 7000                       		moveq	#0,d0
00010234 1010                       		move.b	(a0),d0
00010236 6700                       		beq.s	loc_D378
00010238 4A28 0001                  		tst.b	1(a0)
0001023C 6A00                       		bpl.s	loc_D378
0001023E 6100 0000                  		bsr.w	DisplaySprite
00010242                            
00010242                            loc_D378:
00010242 41E8 0040                  		lea	$40(a0),a0
00010246                            
00010246                            loc_D37C:
00010246 51CF FFEA                  		dbf	d7,loc_D368
0001024A 4E75                       		rts	
0001024C                            ; End of function ObjectsLoad
0001024C                            
0001024C                            ; ===========================================================================
0001024C                            ; ---------------------------------------------------------------------------
0001024C                            ; Object pointers
0001024C                            ; ---------------------------------------------------------------------------
0001024C                            Obj_Index:
0001024C                            	include "_inc\Object pointers.asm"
0001024C                            ; ---------------------------------------------------------------------------
0001024C                            ; Object pointers
0001024C                            ; ---------------------------------------------------------------------------
0001024C 0000 0000 0000 D50E 0000+  	dc.l Obj01, Obj02, Obj03, Obj04
0001025C 0000 0000 0000 D4B4 0000+  	dc.l Spindash_dust, Obj06, ObjectFall, Obj08
0001026C 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0001027C 0000 0000 0000 CEE2 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0001028C 0000 9A44 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0001029C 0000 A06A 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
000102AC 0000 A8E4 0000 A9F4 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
000102BC 0000 B03E 0000 B2C2 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
000102CC 0000 0000 0000 BFD0 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
000102DC 0000 C312 0000 C9C8 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
000102EC 0000 B79E 0000 B114 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
000102FC 0000 DA2C 0000 CBB8 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0001030C 0000 E3FE 0000 EAAC 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0001031C 0000 DF62 0000 FCF6 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0001032C 0000 F27E 0000 F33C 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0001033C 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0001034C 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0001035C 0000 E71A 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0001036C 0000 FF8C 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0001037C 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0001038C 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0001039C 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
000103AC 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
000103BC 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
000103CC 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
000103DC 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
000103EC 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
000103FC 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0001040C 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0001041C 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0001042C 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0001043C 0000 0000 0000 F5AE 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0001044C 0000 5F98 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0001045C 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0001046C 0000 6672 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0001047C 0000 0000 0000 0000        	dc.l Obj8D, Obj8E
0001047C 0000 0000 0000 0000        	dc.l Obj8D, Obj8E
00010484                            
00010484                            ; ---------------------------------------------------------------------------
00010484                            ; Subroutine to	make an	object fall downwards, increasingly fast
00010484                            ; ---------------------------------------------------------------------------
00010484                            
00010484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010484                            
00010484                            
00010484                            ObjectFall:
00010484 2428 0008                  		move.l	8(a0),d2
00010488 2628 000C                  		move.l	$C(a0),d3
0001048C 3028 0010                  		move.w	$10(a0),d0
00010490 48C0                       		ext.l	d0
00010492 E180                       		asl.l	#8,d0
00010494 D480                       		add.l	d0,d2
00010496 3028 0012                  		move.w	$12(a0),d0
0001049A 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
000104A0 48C0                       		ext.l	d0
000104A2 E180                       		asl.l	#8,d0
000104A4 D680                       		add.l	d0,d3
000104A6 2142 0008                  		move.l	d2,8(a0)
000104AA 2143 000C                  		move.l	d3,$C(a0)
000104AE 4E75                       		rts	
000104B0                            
000104B0                            ; End of function ObjectFall
000104B0                            
000104B0                            ; ---------------------------------------------------------------------------
000104B0                            ; Subroutine to	make an	object fall downwards, increasingly fast
000104B0                            ; ---------------------------------------------------------------------------
000104B0                            
000104B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104B0                            
000104B0                            
000104B0                            ObjectFall2:
000104B0 2428 0008                  		move.l	8(a0),d2
000104B4 2628 000C                  		move.l	$C(a0),d3
000104B8 3028 0010                  		move.w	$10(a0),d0
000104BC 48C0                       		ext.l	d0
000104BE E180                       		asl.l	#8,d0
000104C0 D480                       		add.l	d0,d2
000104C2 3028 0012                  		move.w	$12(a0),d0
000104C6 0668 002B 0012             		addi.w	#$2B,$12(a0)	; increase vertical speed
000104CC 48C0                       		ext.l	d0
000104CE E180                       		asl.l	#8,d0
000104D0 D680                       		add.l	d0,d3
000104D2 2142 0008                  		move.l	d2,8(a0)
000104D6 2143 000C                  		move.l	d3,$C(a0)
000104DA 4E75                       		rts	
000104DC                            
000104DC                            ; End of function ObjectFall
000104DC                            
000104DC                            ; ---------------------------------------------------------------------------
000104DC                            ; Subroutine translating object	speed to update	object position
000104DC                            ; ---------------------------------------------------------------------------
000104DC                            
000104DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104DC                            
000104DC                            
000104DC                            SpeedToPos:
000104DC 2428 0008                  		move.l	8(a0),d2
000104E0 2628 000C                  		move.l	$C(a0),d3
000104E4 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
000104E8 48C0                       		ext.l	d0
000104EA E180                       		asl.l	#8,d0		; multiply speed by $100
000104EC D480                       		add.l	d0,d2		; add to x-axis	position
000104EE 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
000104F2 48C0                       		ext.l	d0
000104F4 E180                       		asl.l	#8,d0		; multiply by $100
000104F6 D680                       		add.l	d0,d3		; add to y-axis	position
000104F8 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
000104FC 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
00010500 4E75                       		rts	
00010502                            ; End of function SpeedToPos
00010502                            
00010502                            ; ---------------------------------------------------------------------------
00010502                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
00010502                            ; ---------------------------------------------------------------------------
00010502                            
00010502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010502                            
00010502                            
00010502                            DisplaySprite:
00010502 43F8 AC00                  		lea	($FFFFAC00).w,a1
00010506 3028 0018                  		move.w	$18(a0),d0
0001050A E248                       		lsr.w	#1,d0
0001050C 0240 0380                  		andi.w	#$380,d0
00010510 D2C0                       		adda.w	d0,a1
00010512 0C51 007E                  		cmpi.w	#$7E,(a1)
00010516 6400                       		bcc.s	locret_D620
00010518 5451                       		addq.w	#2,(a1)
0001051A D2D1                       		adda.w	(a1),a1
0001051C 3288                       		move.w	a0,(a1)
0001051E                            
0001051E                            locret_D620:
0001051E 4E75                       		rts	
00010520                            ; End of function DisplaySprite
00010520                            
00010520                            ; ---------------------------------------------------------------------------
00010520                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
00010520                            ; ---------------------------------------------------------------------------
00010520                            
00010520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010520                            
00010520                            
00010520                            DisplaySprite2:
00010520 45F8 AC00                  		lea	($FFFFAC00).w,a2
00010524 3029 0018                  		move.w	$18(a1),d0
00010528 E248                       		lsr.w	#1,d0
0001052A 0240 0380                  		andi.w	#$380,d0
0001052E D4C0                       		adda.w	d0,a2
00010530 0C52 007E                  		cmpi.w	#$7E,(a2)
00010534 6400                       		bcc.s	locret_D63E
00010536 5452                       		addq.w	#2,(a2)
00010538 D4D2                       		adda.w	(a2),a2
0001053A 3489                       		move.w	a1,(a2)
0001053C                            
0001053C                            locret_D63E:
0001053C 4E75                       		rts	
0001053E                            ; End of function DisplaySprite2
0001053E                            
0001053E                            ; ---------------------------------------------------------------------------
0001053E                            ; Subroutine to	delete an object
0001053E                            ; ---------------------------------------------------------------------------
0001053E                            
0001053E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001053E                            
0001053E                            
0001053E                            DeleteObject:
0001053E 2248                       		movea.l	a0,a1
00010540                            
00010540                            DeleteObject2:
00010540 7200                       		moveq	#0,d1
00010542 700F                       		moveq	#$F,d0
00010544                            
00010544                            loc_D646:
00010544 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
00010546 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0001054A 4E75                       		rts	
0001054C                            ; End of function DeleteObject
0001054C                            
0001054C                            ; ===========================================================================
0001054C 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
00010550 00FF F700                  		dc.l $FFF700		; main screen x-position
00010554 00FF F708                  		dc.l $FFF708		; background x-position	1
00010558 00FF F718                  		dc.l $FFF718		; background x-position	2
0001055C                            ; ---------------------------------------------------------------------------
0001055C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0001055C                            ; ---------------------------------------------------------------------------
0001055C                            
0001055C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001055C                            
0001055C                            
0001055C                            BuildSprites:				; XREF: TitleScreen; et al
0001055C 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
00010560 7A00                       		moveq	#0,d5
00010562 49F8 AC00                  		lea	($FFFFAC00).w,a4
00010566 7E07                       		moveq	#7,d7
00010568                            
00010568                            loc_D66A:
00010568 4A54                       		tst.w	(a4)
0001056A 6700 0000                  		beq.w	loc_D72E
0001056E 7C02                       		moveq	#2,d6
00010570                            
00010570                            loc_D672:
00010570 3074 6000                  		movea.w	(a4,d6.w),a0
00010574 4A10                       		tst.b	(a0)
00010576 6700 0000                  		beq.w	loc_D726
0001057A 08A8 0007 0001             		bclr	#7,1(a0)
00010580 1028 0001                  		move.b	1(a0),d0
00010584 1800                       		move.b	d0,d4
00010586 0240 000C                  		andi.w	#$C,d0
0001058A 6700                       		beq.s	loc_D6DE
0001058C 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
00010590 7000                       		moveq	#0,d0
00010592 1028 0019                  		move.b	$19(a0),d0
00010596 3628 0008                  		move.w	8(a0),d3
0001059A 9651                       		sub.w	(a1),d3
0001059C 3203                       		move.w	d3,d1
0001059E D240                       		add.w	d0,d1
000105A0 6B00 0000                  		bmi.w	loc_D726
000105A4 3203                       		move.w	d3,d1
000105A6 9240                       		sub.w	d0,d1
000105A8 0C41 0140                  		cmpi.w	#$140,d1
000105AC 6C00                       		bge.s	loc_D726
000105AE 0643 0080                  		addi.w	#$80,d3
000105B2 0804 0004                  		btst	#4,d4
000105B6 6700                       		beq.s	loc_D6E8
000105B8 7000                       		moveq	#0,d0
000105BA 1028 0016                  		move.b	$16(a0),d0
000105BE 3428 000C                  		move.w	$C(a0),d2
000105C2 9469 0004                  		sub.w	4(a1),d2
000105C6 3202                       		move.w	d2,d1
000105C8 D240                       		add.w	d0,d1
000105CA 6B00                       		bmi.s	loc_D726
000105CC 3202                       		move.w	d2,d1
000105CE 9240                       		sub.w	d0,d1
000105D0 0C41 00E0                  		cmpi.w	#$E0,d1
000105D4 6C00                       		bge.s	loc_D726
000105D6 0642 0080                  		addi.w	#$80,d2
000105DA 6000                       		bra.s	loc_D700
000105DC                            ; ===========================================================================
000105DC                            
000105DC                            loc_D6DE:
000105DC 3428 000A                  		move.w	$A(a0),d2
000105E0 3628 0008                  		move.w	8(a0),d3
000105E4 6000                       		bra.s	loc_D700
000105E6                            ; ===========================================================================
000105E6                            
000105E6                            loc_D6E8:
000105E6 3428 000C                  		move.w	$C(a0),d2
000105EA 9469 0004                  		sub.w	4(a1),d2
000105EE 0642 0080                  		addi.w	#$80,d2
000105F2 0C42 0060                  		cmpi.w	#$60,d2
000105F6 6500                       		bcs.s	loc_D726
000105F8 0C42 0180                  		cmpi.w	#$180,d2
000105FC 6400                       		bcc.s	loc_D726
000105FE                            
000105FE                            loc_D700:
000105FE 2268 0004                  		movea.l	4(a0),a1
00010602 7200                       		moveq	#0,d1
00010604 0804 0005                  		btst	#5,d4
00010608 6600                       		bne.s	loc_D71C
0001060A 1228 001A                  		move.b	$1A(a0),d1
0001060E D201                       		add.b	d1,d1
00010610 D2F1 1000                  		adda.w	(a1,d1.w),a1
00010614 1219                       		move.b	(a1)+,d1
00010616 5301                       		subq.b	#1,d1
00010618 6B00                       		bmi.s	loc_D720
0001061A                            
0001061A                            loc_D71C:
0001061A 6100 0000                  		bsr.w	sub_D750
0001061E                            
0001061E                            loc_D720:
0001061E 08E8 0007 0001             		bset	#7,1(a0)
00010624                            
00010624                            loc_D726:
00010624 5446                       		addq.w	#2,d6
00010626 5554                       		subq.w	#2,(a4)
00010628 6600 FF46                  		bne.w	loc_D672
0001062C                            
0001062C                            loc_D72E:
0001062C 49EC 0080                  		lea	$80(a4),a4
00010630 51CF FF36                  		dbf	d7,loc_D66A
00010634 11C5 F62C                  		move.b	d5,($FFFFF62C).w
00010638 0C05 0050                  		cmpi.b	#$50,d5
0001063C 6700                       		beq.s	loc_D748
0001063E 24BC 0000 0000             		move.l	#0,(a2)
00010644 4E75                       		rts	
00010646                            ; ===========================================================================
00010646                            
00010646                            loc_D748:
00010646 157C 0000 FFFB             		move.b	#0,-5(a2)
0001064C 4E75                       		rts	
0001064E                            ; End of function BuildSprites
0001064E                            
0001064E                            
0001064E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001064E                            
0001064E                            
0001064E                            sub_D750:				; XREF: BuildSprites
0001064E 3668 0002                  		movea.w	2(a0),a3
00010652 0804 0000                  		btst	#0,d4
00010656 6600                       		bne.s	loc_D796
00010658 0804 0001                  		btst	#1,d4
0001065C 6600 0000                  		bne.w	loc_D7E4
00010660                            ; End of function sub_D750
00010660                            
00010660                            
00010660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010660                            
00010660                            
00010660                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
00010660 0C05 0050                  		cmpi.b	#$50,d5
00010664 6700                       		beq.s	locret_D794
00010666 1019                       		move.b	(a1)+,d0
00010668 4880                       		ext.w	d0
0001066A D042                       		add.w	d2,d0
0001066C 34C0                       		move.w	d0,(a2)+
0001066E 14D9                       		move.b	(a1)+,(a2)+
00010670 5205                       		addq.b	#1,d5
00010672 14C5                       		move.b	d5,(a2)+
00010674 1019                       		move.b	(a1)+,d0
00010676 E148                       		lsl.w	#8,d0
00010678 1019                       		move.b	(a1)+,d0
0001067A D04B                       		add.w	a3,d0
0001067C 34C0                       		move.w	d0,(a2)+
0001067E 1019                       		move.b	(a1)+,d0
00010680 4880                       		ext.w	d0
00010682 D043                       		add.w	d3,d0
00010684 0240 01FF                  		andi.w	#$1FF,d0
00010688 6600                       		bne.s	loc_D78E
0001068A 5240                       		addq.w	#1,d0
0001068C                            
0001068C                            loc_D78E:
0001068C 34C0                       		move.w	d0,(a2)+
0001068E 51C9 FFD0                  		dbf	d1,sub_D762
00010692                            
00010692                            locret_D794:
00010692 4E75                       		rts	
00010694                            ; End of function sub_D762
00010694                            
00010694                            ; ===========================================================================
00010694                            
00010694                            loc_D796:
00010694 0804 0001                  		btst	#1,d4
00010698 6600 0000                  		bne.w	loc_D82A
0001069C                            
0001069C                            loc_D79E:
0001069C 0C05 0050                  		cmpi.b	#$50,d5
000106A0 6700                       		beq.s	locret_D7E2
000106A2 1019                       		move.b	(a1)+,d0
000106A4 4880                       		ext.w	d0
000106A6 D042                       		add.w	d2,d0
000106A8 34C0                       		move.w	d0,(a2)+
000106AA 1819                       		move.b	(a1)+,d4
000106AC 14C4                       		move.b	d4,(a2)+
000106AE 5205                       		addq.b	#1,d5
000106B0 14C5                       		move.b	d5,(a2)+
000106B2 1019                       		move.b	(a1)+,d0
000106B4 E148                       		lsl.w	#8,d0
000106B6 1019                       		move.b	(a1)+,d0
000106B8 D04B                       		add.w	a3,d0
000106BA 0A40 0800                  		eori.w	#$800,d0
000106BE 34C0                       		move.w	d0,(a2)+
000106C0 1019                       		move.b	(a1)+,d0
000106C2 4880                       		ext.w	d0
000106C4 4440                       		neg.w	d0
000106C6 D804                       		add.b	d4,d4
000106C8 0244 0018                  		andi.w	#$18,d4
000106CC 5044                       		addq.w	#8,d4
000106CE 9044                       		sub.w	d4,d0
000106D0 D043                       		add.w	d3,d0
000106D2 0240 01FF                  		andi.w	#$1FF,d0
000106D6 6600                       		bne.s	loc_D7DC
000106D8 5240                       		addq.w	#1,d0
000106DA                            
000106DA                            loc_D7DC:
000106DA 34C0                       		move.w	d0,(a2)+
000106DC 51C9 FFBE                  		dbf	d1,loc_D79E
000106E0                            
000106E0                            locret_D7E2:
000106E0 4E75                       		rts	
000106E2                            ; ===========================================================================
000106E2                            
000106E2                            loc_D7E4:				; XREF: sub_D750
000106E2 0C05 0050                  		cmpi.b	#$50,d5
000106E6 6700                       		beq.s	locret_D828
000106E8 1019                       		move.b	(a1)+,d0
000106EA 1811                       		move.b	(a1),d4
000106EC 4880                       		ext.w	d0
000106EE 4440                       		neg.w	d0
000106F0 E70C                       		lsl.b	#3,d4
000106F2 0244 0018                  		andi.w	#$18,d4
000106F6 5044                       		addq.w	#8,d4
000106F8 9044                       		sub.w	d4,d0
000106FA D042                       		add.w	d2,d0
000106FC 34C0                       		move.w	d0,(a2)+
000106FE 14D9                       		move.b	(a1)+,(a2)+
00010700 5205                       		addq.b	#1,d5
00010702 14C5                       		move.b	d5,(a2)+
00010704 1019                       		move.b	(a1)+,d0
00010706 E148                       		lsl.w	#8,d0
00010708 1019                       		move.b	(a1)+,d0
0001070A D04B                       		add.w	a3,d0
0001070C 0A40 1000                  		eori.w	#$1000,d0
00010710 34C0                       		move.w	d0,(a2)+
00010712 1019                       		move.b	(a1)+,d0
00010714 4880                       		ext.w	d0
00010716 D043                       		add.w	d3,d0
00010718 0240 01FF                  		andi.w	#$1FF,d0
0001071C 6600                       		bne.s	loc_D822
0001071E 5240                       		addq.w	#1,d0
00010720                            
00010720                            loc_D822:
00010720 34C0                       		move.w	d0,(a2)+
00010722 51C9 FFBE                  		dbf	d1,loc_D7E4
00010726                            
00010726                            locret_D828:
00010726 4E75                       		rts	
00010728                            ; ===========================================================================
00010728                            
00010728                            loc_D82A:
00010728 0C05 0050                  		cmpi.b	#$50,d5
0001072C 6700                       		beq.s	locret_D87C
0001072E 1019                       		move.b	(a1)+,d0
00010730 1811                       		move.b	(a1),d4
00010732 4880                       		ext.w	d0
00010734 4440                       		neg.w	d0
00010736 E70C                       		lsl.b	#3,d4
00010738 0244 0018                  		andi.w	#$18,d4
0001073C 5044                       		addq.w	#8,d4
0001073E 9044                       		sub.w	d4,d0
00010740 D042                       		add.w	d2,d0
00010742 34C0                       		move.w	d0,(a2)+
00010744 1819                       		move.b	(a1)+,d4
00010746 14C4                       		move.b	d4,(a2)+
00010748 5205                       		addq.b	#1,d5
0001074A 14C5                       		move.b	d5,(a2)+
0001074C 1019                       		move.b	(a1)+,d0
0001074E E148                       		lsl.w	#8,d0
00010750 1019                       		move.b	(a1)+,d0
00010752 D04B                       		add.w	a3,d0
00010754 0A40 1800                  		eori.w	#$1800,d0
00010758 34C0                       		move.w	d0,(a2)+
0001075A 1019                       		move.b	(a1)+,d0
0001075C 4880                       		ext.w	d0
0001075E 4440                       		neg.w	d0
00010760 D804                       		add.b	d4,d4
00010762 0244 0018                  		andi.w	#$18,d4
00010766 5044                       		addq.w	#8,d4
00010768 9044                       		sub.w	d4,d0
0001076A D043                       		add.w	d3,d0
0001076C 0240 01FF                  		andi.w	#$1FF,d0
00010770 6600                       		bne.s	loc_D876
00010772 5240                       		addq.w	#1,d0
00010774                            
00010774                            loc_D876:
00010774 34C0                       		move.w	d0,(a2)+
00010776 51C9 FFB0                  		dbf	d1,loc_D82A
0001077A                            
0001077A                            locret_D87C:
0001077A 4E75                       		rts	
0001077C                            ; ---------------------------------------------------------------------------
0001077C                            ; Subroutine to	check if an object is on the screen
0001077C                            ; ---------------------------------------------------------------------------
0001077C                            
0001077C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001077C                            
0001077C                            
0001077C                            ChkObjOnScreen:
0001077C 3028 0008                  		move.w	8(a0),d0	; get object x-position
00010780 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
00010784 6B00                       		bmi.s	NotOnScreen
00010786 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0001078A 6C00                       		bge.s	NotOnScreen	; if not, branch
0001078C                            
0001078C 3228 000C                  		move.w	$C(a0),d1	; get object y-position
00010790 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
00010794 6B00                       		bmi.s	NotOnScreen
00010796 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0001079A 6C00                       		bge.s	NotOnScreen	; if not, branch
0001079C                            
0001079C 7000                       		moveq	#0,d0		; set flag to 0
0001079E 4E75                       		rts	
000107A0                            ; ===========================================================================
000107A0                            
000107A0                            NotOnScreen:				; XREF: ChkObjOnScreen
000107A0 7001                       		moveq	#1,d0		; set flag to 1
000107A2 4E75                       		rts	
000107A4                            ; End of function ChkObjOnScreen
000107A4                            
000107A4                            
000107A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000107A4                            
000107A4                            
000107A4                            ChkObjOnScreen2:
000107A4 7200                       		moveq	#0,d1
000107A6 1228 0019                  		move.b	$19(a0),d1
000107AA 3028 0008                  		move.w	8(a0),d0
000107AE 9078 F700                  		sub.w	($FFFFF700).w,d0
000107B2 D041                       		add.w	d1,d0
000107B4 6B00                       		bmi.s	NotOnScreen2
000107B6 D241                       		add.w	d1,d1
000107B8 9041                       		sub.w	d1,d0
000107BA 0C40 0140                  		cmpi.w	#320,d0
000107BE 6C00                       		bge.s	NotOnScreen2
000107C0                            
000107C0 3228 000C                  		move.w	$C(a0),d1
000107C4 9278 F704                  		sub.w	($FFFFF704).w,d1
000107C8 6B00                       		bmi.s	NotOnScreen2
000107CA 0C41 00E0                  		cmpi.w	#224,d1
000107CE 6C00                       		bge.s	NotOnScreen2
000107D0                            
000107D0 7000                       		moveq	#0,d0
000107D2 4E75                       		rts	
000107D4                            ; ===========================================================================
000107D4                            
000107D4                            NotOnScreen2:				; XREF: ChkObjOnScreen2
000107D4 7001                       		moveq	#1,d0
000107D6 4E75                       		rts	
000107D8                            ; End of function ChkObjOnScreen2
000107D8                            
000107D8                            ; ---------------------------------------------------------------------------
000107D8                            ; Subroutine to	load a level's objects
000107D8                            ; ---------------------------------------------------------------------------
000107D8                            
000107D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000107D8                            
000107D8                            
000107D8                            ObjPosLoad:				; XREF: Level; et al
000107D8 7000                       		moveq	#0,d0
000107DA 1038 F76C                  		move.b	($FFFFF76C).w,d0
000107DE 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
000107E2 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
000107E6                            ; End of function ObjPosLoad
000107E6                            
000107E6                            ; ===========================================================================
000107E6 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
000107E8 0000                       		dc.w OPL_Next-OPL_Index
000107EA                            ; ===========================================================================
000107EA                            
000107EA                            OPL_Main:				; XREF: OPL_Index
000107EA 5438 F76C                  		addq.b	#2,($FFFFF76C).w
000107EE 3038 FE10                  		move.w	($FFFFFE10).w,d0
000107F2 ED08                       		lsl.b	#6,d0
000107F4 E848                       		lsr.w	#4,d0
000107F6 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
000107FC 2248                       		movea.l	a0,a1
000107FE D0F0 0000                  		adda.w	(a0,d0.w),a0
00010802 21C8 F770                  		move.l	a0,($FFFFF770).w
00010806 21C8 F774                  		move.l	a0,($FFFFF774).w
0001080A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0001080E 21C9 F778                  		move.l	a1,($FFFFF778).w
00010812 21C9 F77C                  		move.l	a1,($FFFFF77C).w
00010816 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001081A 34FC 0101                  		move.w	#$101,(a2)+
0001081E 303C 005E                  		move.w	#$5E,d0
00010822                            
00010822                            OPL_ClrList:
00010822 429A                       		clr.l	(a2)+
00010824 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
00010828                            
00010828 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001082C 7400                       		moveq	#0,d2
0001082E 3C38 F700                  		move.w	($FFFFF700).w,d6
00010832 0446 0080                  		subi.w	#$80,d6
00010836 6400                       		bcc.s	loc_D93C
00010838 7C00                       		moveq	#0,d6
0001083A                            
0001083A                            loc_D93C:
0001083A 0246 FF80                  		andi.w	#$FF80,d6
0001083E 2078 F770                  		movea.l	($FFFFF770).w,a0
00010842                            
00010842                            loc_D944:
00010842 BC50                       		cmp.w	(a0),d6
00010844 6300                       		bls.s	loc_D956
00010846 4A28 0004                  		tst.b	4(a0)
0001084A 6A00                       		bpl.s	loc_D952
0001084C 1412                       		move.b	(a2),d2
0001084E 5212                       		addq.b	#1,(a2)
00010850                            
00010850                            loc_D952:
00010850 5C48                       		addq.w	#6,a0
00010852 60EE                       		bra.s	loc_D944
00010854                            ; ===========================================================================
00010854                            
00010854                            loc_D956:
00010854 21C8 F770                  		move.l	a0,($FFFFF770).w
00010858 2078 F774                  		movea.l	($FFFFF774).w,a0
0001085C 0446 0080                  		subi.w	#$80,d6
00010860 6500                       		bcs.s	loc_D976
00010862                            
00010862                            loc_D964:
00010862 BC50                       		cmp.w	(a0),d6
00010864 6300                       		bls.s	loc_D976
00010866 4A28 0004                  		tst.b	4(a0)
0001086A 6A00                       		bpl.s	loc_D972
0001086C 522A 0001                  		addq.b	#1,1(a2)
00010870                            
00010870                            loc_D972:
00010870 5C48                       		addq.w	#6,a0
00010872 60EE                       		bra.s	loc_D964
00010874                            ; ===========================================================================
00010874                            
00010874                            loc_D976:
00010874 21C8 F774                  		move.l	a0,($FFFFF774).w
00010878 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0001087E                            
0001087E                            OPL_Next:				; XREF: OPL_Index
0001087E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010882 7400                       		moveq	#0,d2
00010884 3C38 F700                  		move.w	($FFFFF700).w,d6
00010888 0246 FF80                  		andi.w	#$FF80,d6
0001088C BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
00010890 6700 0000                  		beq.w	locret_DA3A
00010894 6C00                       		bge.s	loc_D9F6
00010896 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0001089A 2078 F774                  		movea.l	($FFFFF774).w,a0
0001089E 0446 0080                  		subi.w	#$80,d6
000108A2 6500                       		bcs.s	loc_D9D2
000108A4                            
000108A4                            loc_D9A6:
000108A4 BC68 FFFA                  		cmp.w	-6(a0),d6
000108A8 6C00                       		bge.s	loc_D9D2
000108AA 5D48                       		subq.w	#6,a0
000108AC 4A28 0004                  		tst.b	4(a0)
000108B0 6A00                       		bpl.s	loc_D9BC
000108B2 532A 0001                  		subq.b	#1,1(a2)
000108B6 142A 0001                  		move.b	1(a2),d2
000108BA                            
000108BA                            loc_D9BC:
000108BA 6100 0000                  		bsr.w	loc_DA3C
000108BE 6600                       		bne.s	loc_D9C6
000108C0 5D48                       		subq.w	#6,a0
000108C2 60E0                       		bra.s	loc_D9A6
000108C4                            ; ===========================================================================
000108C4                            
000108C4                            loc_D9C6:
000108C4 4A28 0004                  		tst.b	4(a0)
000108C8 6A00                       		bpl.s	loc_D9D0
000108CA 522A 0001                  		addq.b	#1,1(a2)
000108CE                            
000108CE                            loc_D9D0:
000108CE 5C48                       		addq.w	#6,a0
000108D0                            
000108D0                            loc_D9D2:
000108D0 21C8 F774                  		move.l	a0,($FFFFF774).w
000108D4 2078 F770                  		movea.l	($FFFFF770).w,a0
000108D8 0646 0300                  		addi.w	#$300,d6
000108DC                            
000108DC                            loc_D9DE:
000108DC BC68 FFFA                  		cmp.w	-6(a0),d6
000108E0 6E00                       		bgt.s	loc_D9F0
000108E2 4A28 FFFE                  		tst.b	-2(a0)
000108E6 6A00                       		bpl.s	loc_D9EC
000108E8 5312                       		subq.b	#1,(a2)
000108EA                            
000108EA                            loc_D9EC:
000108EA 5D48                       		subq.w	#6,a0
000108EC 60EE                       		bra.s	loc_D9DE
000108EE                            ; ===========================================================================
000108EE                            
000108EE                            loc_D9F0:
000108EE 21C8 F770                  		move.l	a0,($FFFFF770).w
000108F2 4E75                       		rts	
000108F4                            ; ===========================================================================
000108F4                            
000108F4                            loc_D9F6:
000108F4 31C6 F76E                  		move.w	d6,($FFFFF76E).w
000108F8 2078 F770                  		movea.l	($FFFFF770).w,a0
000108FC 0646 0280                  		addi.w	#$280,d6
00010900                            
00010900                            loc_DA02:
00010900 BC50                       		cmp.w	(a0),d6
00010902 6300                       		bls.s	loc_DA16
00010904 4A28 0004                  		tst.b	4(a0)
00010908 6A00                       		bpl.s	loc_DA10
0001090A 1412                       		move.b	(a2),d2
0001090C 5212                       		addq.b	#1,(a2)
0001090E                            
0001090E                            loc_DA10:
0001090E 6100 0000                  		bsr.w	loc_DA3C
00010912 67EC                       		beq.s	loc_DA02
00010914                            
00010914                            loc_DA16:
00010914 21C8 F770                  		move.l	a0,($FFFFF770).w
00010918 2078 F774                  		movea.l	($FFFFF774).w,a0
0001091C 0446 0300                  		subi.w	#$300,d6
00010920 6500                       		bcs.s	loc_DA36
00010922                            
00010922                            loc_DA24:
00010922 BC50                       		cmp.w	(a0),d6
00010924 6300                       		bls.s	loc_DA36
00010926 4A28 0004                  		tst.b	4(a0)
0001092A 6A00                       		bpl.s	loc_DA32
0001092C 522A 0001                  		addq.b	#1,1(a2)
00010930                            
00010930                            loc_DA32:
00010930 5C48                       		addq.w	#6,a0
00010932 60EE                       		bra.s	loc_DA24
00010934                            ; ===========================================================================
00010934                            
00010934                            loc_DA36:
00010934 21C8 F774                  		move.l	a0,($FFFFF774).w
00010938                            
00010938                            locret_DA3A:
00010938 4E75                       		rts	
0001093A                            ; ===========================================================================
0001093A                            
0001093A                            loc_DA3C:
0001093A 4A28 0004                  		tst.b	4(a0)
0001093E 6A00                       		bpl.s	OPL_MakeItem
00010940 08F2 0007 2002             		bset	#7,2(a2,d2.w)
00010946 6700                       		beq.s	OPL_MakeItem
00010948 5C48                       		addq.w	#6,a0
0001094A 7000                       		moveq	#0,d0
0001094C 4E75                       		rts	
0001094E                            ; ===========================================================================
0001094E                            
0001094E                            OPL_MakeItem:
0001094E 6100 0000                  		bsr.w	SingleObjLoad
00010952 6600                       		bne.s	locret_DA8A
00010954 3358 0008                  		move.w	(a0)+,8(a1)
00010958 3018                       		move.w	(a0)+,d0
0001095A 3200                       		move.w	d0,d1
0001095C 0240 0FFF                  		andi.w	#$FFF,d0
00010960 3340 000C                  		move.w	d0,$C(a1)
00010964 E559                       		rol.w	#2,d1
00010966 0201 0003                  		andi.b	#3,d1
0001096A 1341 0001                  		move.b	d1,1(a1)
0001096E 1341 0022                  		move.b	d1,$22(a1)
00010972 1018                       		move.b	(a0)+,d0
00010974 6A00                       		bpl.s	loc_DA80
00010976 0200 007F                  		andi.b	#$7F,d0
0001097A 1342 0023                  		move.b	d2,$23(a1)
0001097E                            
0001097E                            loc_DA80:
0001097E 1280                       		move.b	d0,0(a1)
00010980 1358 0028                  		move.b	(a0)+,$28(a1)
00010984 7000                       		moveq	#0,d0
00010986                            
00010986                            locret_DA8A:
00010986 4E75                       		rts	
00010988                            ; ---------------------------------------------------------------------------
00010988                            ; Single object	loading	subroutine
00010988                            ; ---------------------------------------------------------------------------
00010988                            
00010988                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010988                            
00010988                            
00010988                            SingleObjLoad:
00010988 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0001098C 303C 005F                  		move.w	#$5F,d0
00010990                            
00010990                            loc_DA94:
00010990 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
00010992 6700                       		beq.s	locret_DAA0	; if yes, branch
00010994 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
00010998 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0001099C                            
0001099C                            locret_DAA0:
0001099C 4E75                       		rts	
0001099E                            ; End of function SingleObjLoad
0001099E                            
0001099E                            
0001099E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001099E                            
0001099E                            
0001099E                            SingleObjLoad2:
0001099E 2248                       		movea.l	a0,a1
000109A0 303C F000                  		move.w	#-$1000,d0
000109A4 9048                       		sub.w	a0,d0
000109A6 EC48                       		lsr.w	#6,d0
000109A8 5340                       		subq.w	#1,d0
000109AA 6500                       		bcs.s	locret_DABC
000109AC                            
000109AC                            loc_DAB0:
000109AC 4A11                       		tst.b	(a1)
000109AE 6700                       		beq.s	locret_DABC
000109B0 43E9 0040                  		lea	$40(a1),a1
000109B4 51C8 FFF6                  		dbf	d0,loc_DAB0
000109B8                            
000109B8                            locret_DABC:
000109B8 4E75                       		rts	
000109BA                            ; End of function SingleObjLoad2
000109BA                            
000109BA                            ; ===========================================================================
000109BA                            ; ---------------------------------------------------------------------------
000109BA                            ; Object 41 - springs
000109BA                            ; ---------------------------------------------------------------------------
000109BA                            
000109BA                            Obj41:					; XREF: Obj_Index
000109BA 7000                       		moveq	#0,d0
000109BC 1028 0024                  		move.b	$24(a0),d0
000109C0 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
000109C4 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
000109C8 6100 FB38                  		bsr.w	DisplaySprite
000109CC 3028 0008                  		move.w	8(a0),d0
000109D0 0240 FF80                  		andi.w	#$FF80,d0
000109D4 3238 F700                  		move.w	($FFFFF700).w,d1
000109D8 0441 0080                  		subi.w	#$80,d1
000109DC 0241 FF80                  		andi.w	#$FF80,d1
000109E0 9041                       		sub.w	d1,d0
000109E2 0C40 0280                  		cmpi.w	#$280,d0
000109E6 6200 FB56                  		bhi.w	DeleteObject
000109EA 4E75                       		rts	
000109EC                            ; ===========================================================================
000109EC 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
000109EE 0000                       		dc.w Obj41_Up-Obj41_Index
000109F0 0000                       		dc.w Obj41_AniUp-Obj41_Index
000109F2 0000                       		dc.w Obj41_ResetUp-Obj41_Index
000109F4 0000                       		dc.w Obj41_LR-Obj41_Index
000109F6 0000                       		dc.w Obj41_AniLR-Obj41_Index
000109F8 0000                       		dc.w Obj41_ResetLR-Obj41_Index
000109FA 0000                       		dc.w Obj41_Dwn-Obj41_Index
000109FC 0000                       		dc.w Obj41_AniDwn-Obj41_Index
000109FE 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
00010A00                            
00010A00                            Obj41_Powers:	
00010A00 F000                       		dc.w -$1000		; power	of red spring
00010A02 F600                       		dc.w -$A00		; power	of yellow spring
00010A04                            ; ===========================================================================
00010A04                            
00010A04                            Obj41_Main:				; XREF: Obj41_Index
00010A04 5428 0024                  		addq.b	#2,$24(a0)
00010A08 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
00010A10 317C 0523 0002             		move.w	#$523,2(a0)
00010A16 0028 0004 0001             		ori.b	#4,1(a0)
00010A1C 117C 0010 0019             		move.b	#$10,$19(a0)
00010A22 117C 0004 0018             		move.b	#4,$18(a0)
00010A28 1028 0028                  		move.b	$28(a0),d0
00010A2C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
00010A30 6700                       		beq.s	loc_DB54	; if not, branch
00010A32 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
00010A38 117C 0001 001C             		move.b	#1,$1C(a0)
00010A3E 117C 0003 001A             		move.b	#3,$1A(a0)
00010A44 317C 0533 0002             		move.w	#$533,2(a0)
00010A4A 117C 0008 0019             		move.b	#8,$19(a0)
00010A50                            
00010A50                            loc_DB54:
00010A50 0800 0005                  		btst	#5,d0		; does the spring face downwards?
00010A54 6700                       		beq.s	loc_DB66	; if not, branch
00010A56 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
00010A5C 08E8 0001 0022             		bset	#1,$22(a0)
00010A62                            
00010A62                            loc_DB66:
00010A62 0800 0001                  		btst	#1,d0
00010A66 6700                       		beq.s	loc_DB72
00010A68 08E8 0005 0002             		bset	#5,2(a0)
00010A6E                            
00010A6E                            loc_DB72:
00010A6E 0240 000F                  		andi.w	#$F,d0
00010A72 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
00010A78 4E75                       		rts	
00010A7A                            ; ===========================================================================
00010A7A                            
00010A7A                            Obj41_Up:				; XREF: Obj41_Index
00010A7A 323C 001B                  		move.w	#$1B,d1
00010A7E 343C 0008                  		move.w	#8,d2
00010A82 363C 0010                  		move.w	#$10,d3
00010A86 3828 0008                  		move.w	8(a0),d4
00010A8A 6100 0000                  		bsr.w	SolidObject
00010A8E 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
00010A92 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
00010A94 4E75                       		rts	
00010A96                            ; ===========================================================================
00010A96                            
00010A96                            Obj41_BounceUp:				; XREF: Obj41_Up
00010A96 5428 0024                  		addq.b	#2,$24(a0)
00010A9A 5069 000C                  		addq.w	#8,$C(a1)
00010A9E 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
00010AA4 08E9 0001 0022             		bset	#1,$22(a1)
00010AAA 08A9 0003 0022             		bclr	#3,$22(a1)
00010AB0 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
00010AB6 137C 0002 0024             		move.b	#2,$24(a1)
00010ABC 08A8 0003 0022             		bclr	#3,$22(a0)
00010AC2 4228 0025                  		clr.b	$25(a0)
00010AC6 303C 00CC                  		move.w	#$CC,d0
00010ACA 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play spring sound
00010AD0                            
00010AD0                            Obj41_AniUp:				; XREF: Obj41_Index
00010AD0 43F9 0000 0000             		lea	(Ani_obj41).l,a1
00010AD6 6000 C5D4                  		bra.w	AnimateSprite
00010ADA                            ; ===========================================================================
00010ADA                            
00010ADA                            Obj41_ResetUp:				; XREF: Obj41_Index
00010ADA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
00010AE0 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
00010AE4 4E75                       		rts	
00010AE6                            ; ===========================================================================
00010AE6                            
00010AE6                            Obj41_LR:				; XREF: Obj41_Index
00010AE6 323C 0013                  		move.w	#$13,d1
00010AEA 343C 000E                  		move.w	#$E,d2
00010AEE 363C 000F                  		move.w	#$F,d3
00010AF2 3828 0008                  		move.w	8(a0),d4
00010AF6 6100 0000                  		bsr.w	SolidObject
00010AFA 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00010B00 6600                       		bne.s	loc_DC0C
00010B02 117C 0008 0024             		move.b	#8,$24(a0)
00010B08                            
00010B08                            loc_DC0C:
00010B08 0828 0005 0022             		btst	#5,$22(a0)
00010B0E 6600                       		bne.s	Obj41_BounceLR
00010B10 4E75                       		rts	
00010B12                            ; ===========================================================================
00010B12                            
00010B12                            Obj41_BounceLR:				; XREF: Obj41_LR
00010B12 5428 0024                  		addq.b	#2,$24(a0)
00010B16 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
00010B1C 5069 0008                  		addq.w	#8,8(a1)
00010B20 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
00010B26 6600                       		bne.s	loc_DC36	; if yes, branch
00010B28 0469 0010 0008             		subi.w	#$10,8(a1)
00010B2E 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
00010B32                            
00010B32                            loc_DC36:
00010B32 337C 000F 003E             		move.w	#$F,$3E(a1)
00010B38 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010B3E 0869 0000 0022             		bchg	#0,$22(a1)
00010B44 0829 0002 0022             		btst	#2,$22(a1)
00010B4A 6600                       		bne.s	loc_DC56
00010B4C 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
00010B52                            
00010B52                            loc_DC56:
00010B52 08A8 0005 0022             		bclr	#5,$22(a0)
00010B58 08A9 0005 0022             		bclr	#5,$22(a1)
00010B5E 303C 00CC                  		move.w	#$CC,d0
00010B62 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play spring sound
00010B68                            
00010B68                            Obj41_AniLR:				; XREF: Obj41_Index
00010B68 43F9 0000 0000             		lea	(Ani_obj41).l,a1
00010B6E 6000 C53C                  		bra.w	AnimateSprite
00010B72                            ; ===========================================================================
00010B72                            
00010B72                            Obj41_ResetLR:				; XREF: Obj41_Index
00010B72 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
00010B78 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
00010B7C 4E75                       		rts	
00010B7E                            ; ===========================================================================
00010B7E                            
00010B7E                            Obj41_Dwn:				; XREF: Obj41_Index
00010B7E 323C 001B                  		move.w	#$1B,d1
00010B82 343C 0008                  		move.w	#8,d2
00010B86 363C 0010                  		move.w	#$10,d3
00010B8A 3828 0008                  		move.w	8(a0),d4
00010B8E 6100 0000                  		bsr.w	SolidObject
00010B92 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00010B98 6600                       		bne.s	loc_DCA4
00010B9A 117C 000E 0024             		move.b	#$E,$24(a0)
00010BA0                            
00010BA0                            loc_DCA4:
00010BA0 4A28 0025                  		tst.b	$25(a0)
00010BA4 6600                       		bne.s	locret_DCAE
00010BA6 4A44                       		tst.w	d4
00010BA8 6B00                       		bmi.s	Obj41_BounceDwn
00010BAA                            
00010BAA                            locret_DCAE:
00010BAA 4E75                       		rts	
00010BAC                            ; ===========================================================================
00010BAC                            
00010BAC                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
00010BAC 5428 0024                  		addq.b	#2,$24(a0)
00010BB0 5169 000C                  		subq.w	#8,$C(a1)
00010BB4 3368 0030 0012             		move.w	$30(a0),$12(a1)
00010BBA 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
00010BBE 08E9 0001 0022             		bset	#1,$22(a1)
00010BC4 08A9 0003 0022             		bclr	#3,$22(a1)
00010BCA 137C 0002 0024             		move.b	#2,$24(a1)
00010BD0 08A8 0003 0022             		bclr	#3,$22(a0)
00010BD6 4228 0025                  		clr.b	$25(a0)
00010BDA 303C 00CC                  		move.w	#$CC,d0
00010BDE 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play spring sound
00010BE4                            
00010BE4                            Obj41_AniDwn:				; XREF: Obj41_Index
00010BE4 43F9 0000 0000             		lea	(Ani_obj41).l,a1
00010BEA 6000 C4C0                  		bra.w	AnimateSprite
00010BEE                            ; ===========================================================================
00010BEE                            
00010BEE                            Obj41_ResetDwn:				; XREF: Obj41_Index
00010BEE 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
00010BF4 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
00010BF8 4E75                       		rts	
00010BFA                            ; ===========================================================================
00010BFA                            Ani_obj41:
00010BFA                            	include "_anim\obj41.asm"
00010BFA                            ; ---------------------------------------------------------------------------
00010BFA                            ; Animation script - springs
00010BFA                            ; ---------------------------------------------------------------------------
00010BFA 0000                       		dc.w byte_DD02-Ani_obj41
00010BFC 0000                       		dc.w byte_DD0E-Ani_obj41
00010BFE 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
00010C0A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
00010C16                            		even
00010C16                            		even
00010C16                            
00010C16                            ; ---------------------------------------------------------------------------
00010C16                            ; Sprite mappings - springs
00010C16                            ; ---------------------------------------------------------------------------
00010C16                            Map_obj41:
00010C16                            	include "_maps\obj41.asm"
00010C16                            ; ---------------------------------------------------------------------------
00010C16                            ; Sprite mappings - springs
00010C16                            ; ---------------------------------------------------------------------------
00010C16 0000                       		dc.w byte_DD26-Map_obj41
00010C18 0000                       		dc.w byte_DD31-Map_obj41
00010C1A 0000                       		dc.w byte_DD37-Map_obj41
00010C1C 0000                       		dc.w byte_DD47-Map_obj41
00010C1E 0000                       		dc.w byte_DD4D-Map_obj41
00010C20 0000                       		dc.w byte_DD53-Map_obj41
00010C22 02                         byte_DD26:	dc.b 2
00010C23 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
00010C28 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
00010C2D 01                         byte_DD31:	dc.b 1
00010C2E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
00010C33 03                         byte_DD37:	dc.b 3
00010C34 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
00010C39 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010C3E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
00010C43 01                         byte_DD47:	dc.b 1
00010C44 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00010C49 01                         byte_DD4D:	dc.b 1
00010C4A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
00010C4F 04                         byte_DD53:	dc.b 4
00010C50 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
00010C55 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
00010C5A F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
00010C5F 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
00010C64                            		even
00010C64                            		even
00010C64                            
00010C64                            ; ===========================================================================
00010C64                            ; ---------------------------------------------------------------------------
00010C64                            ; Object 42 - Newtron enemy (GHZ)
00010C64                            ; ---------------------------------------------------------------------------
00010C64                            
00010C64                            Obj42:					; XREF: Obj_Index
00010C64 7000                       		moveq	#0,d0
00010C66 1028 0024                  		move.b	$24(a0),d0
00010C6A 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
00010C6E 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
00010C72                            ; ===========================================================================
00010C72 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
00010C74 0000                       		dc.w Obj42_Action-Obj42_Index
00010C76 0000                       		dc.w Obj42_Delete-Obj42_Index
00010C78                            ; ===========================================================================
00010C78                            
00010C78                            Obj42_Main:				; XREF: Obj42_Index
00010C78 5428 0024                  		addq.b	#2,$24(a0)
00010C7C 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
00010C84 317C 049B 0002             		move.w	#$49B,2(a0)
00010C8A 117C 0004 0001             		move.b	#4,1(a0)
00010C90 117C 0004 0018             		move.b	#4,$18(a0)
00010C96 117C 0014 0019             		move.b	#$14,$19(a0)
00010C9C 117C 0010 0016             		move.b	#$10,$16(a0)
00010CA2 117C 0008 0017             		move.b	#8,$17(a0)
00010CA8                            
00010CA8                            Obj42_Action:				; XREF: Obj42_Index
00010CA8 7000                       		moveq	#0,d0
00010CAA 1028 0025                  		move.b	$25(a0),d0
00010CAE 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
00010CB2 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
00010CB6 43F9 0000 0000             		lea	(Ani_obj42).l,a1
00010CBC 6100 C3EE                  		bsr.w	AnimateSprite
00010CC0 6000 0000                  		bra.w	MarkObjGone
00010CC4                            ; ===========================================================================
00010CC4 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
00010CC6 0000                       		dc.w Obj42_Type00-Obj42_Index2
00010CC8 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
00010CCA 0000                       		dc.w Obj42_Speed-Obj42_Index2
00010CCC 0000                       		dc.w Obj42_Type01-Obj42_Index2
00010CCE                            ; ===========================================================================
00010CCE                            
00010CCE                            Obj42_ChkDist:				; XREF: Obj42_Index2
00010CCE 08E8 0000 0022             		bset	#0,$22(a0)
00010CD4 3038 D008                  		move.w	($FFFFD008).w,d0
00010CD8 9068 0008                  		sub.w	8(a0),d0
00010CDC 6400                       		bcc.s	loc_DDEA
00010CDE 4440                       		neg.w	d0
00010CE0 08A8 0000 0022             		bclr	#0,$22(a0)
00010CE6                            
00010CE6                            loc_DDEA:
00010CE6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
00010CEA 6400                       		bcc.s	locret_DE12	; if not, branch
00010CEC 5428 0025                  		addq.b	#2,$25(a0)
00010CF0 117C 0001 001C             		move.b	#1,$1C(a0)
00010CF6 4A28 0028                  		tst.b	$28(a0)		; check	object type
00010CFA 6700                       		beq.s	locret_DE12	; if type is 00, branch
00010CFC 317C 249B 0002             		move.w	#$249B,2(a0)
00010D02 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
00010D08 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
00010D0E                            
00010D0E                            locret_DE12:
00010D0E 4E75                       		rts	
00010D10                            ; ===========================================================================
00010D10                            
00010D10                            Obj42_Type00:				; XREF: Obj42_Index2
00010D10 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
00010D16 6400                       		bcc.s	Obj42_Fall	; is yes, branch
00010D18 08E8 0000 0022             		bset	#0,$22(a0)
00010D1E 3038 D008                  		move.w	($FFFFD008).w,d0
00010D22 9068 0008                  		sub.w	8(a0),d0
00010D26 6400                       		bcc.s	locret_DE32
00010D28 08A8 0000 0022             		bclr	#0,$22(a0)
00010D2E                            
00010D2E                            locret_DE32:
00010D2E 4E75                       		rts	
00010D30                            ; ===========================================================================
00010D30                            
00010D30                            Obj42_Fall:				; XREF: Obj42_Type00
00010D30 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
00010D36 6600                       		bne.s	loc_DE42
00010D38 117C 000C 0020             		move.b	#$C,$20(a0)
00010D3E                            
00010D3E                            loc_DE42:
00010D3E 6100 F744                  		bsr.w	ObjectFall
00010D42 6100 0000                  		bsr.w	ObjHitFloor
00010D46 4A41                       		tst.w	d1		; has newtron hit the floor?
00010D48 6A00                       		bpl.s	locret_DE86	; if not, branch
00010D4A D368 000C                  		add.w	d1,$C(a0)
00010D4E 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
00010D54 5428 0025                  		addq.b	#2,$25(a0)
00010D58 117C 0002 001C             		move.b	#2,$1C(a0)
00010D5E 0828 0005 0002             		btst	#5,2(a0)
00010D64 6700                       		beq.s	Obj42_Move
00010D66 5228 001C                  		addq.b	#1,$1C(a0)
00010D6A                            
00010D6A                            Obj42_Move:
00010D6A 117C 000D 0020             		move.b	#$D,$20(a0)
00010D70 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
00010D76 0828 0000 0022             		btst	#0,$22(a0)
00010D7C 6600                       		bne.s	locret_DE86
00010D7E 4468 0010                  		neg.w	$10(a0)
00010D82                            
00010D82                            locret_DE86:
00010D82 4E75                       		rts	
00010D84                            ; ===========================================================================
00010D84                            
00010D84                            Obj42_MatchFloor:			; XREF: Obj42_Index2
00010D84 6100 F756                  		bsr.w	SpeedToPos
00010D88 6100 0000                  		bsr.w	ObjHitFloor
00010D8C 0C41 FFF8                  		cmpi.w	#-8,d1
00010D90 6D00                       		blt.s	loc_DEA2
00010D92 0C41 000C                  		cmpi.w	#$C,d1
00010D96 6C00                       		bge.s	loc_DEA2
00010D98 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
00010D9C 4E75                       		rts	
00010D9E                            ; ===========================================================================
00010D9E                            
00010D9E                            loc_DEA2:
00010D9E 5428 0025                  		addq.b	#2,$25(a0)
00010DA2 4E75                       		rts	
00010DA4                            ; ===========================================================================
00010DA4                            
00010DA4                            Obj42_Speed:				; XREF: Obj42_Index2
00010DA4 6100 F736                  		bsr.w	SpeedToPos
00010DA8 4E75                       		rts	
00010DAA                            ; ===========================================================================
00010DAA                            
00010DAA                            Obj42_Type01:				; XREF: Obj42_Index2
00010DAA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
00010DB0 6600                       		bne.s	Obj42_FireMissile
00010DB2 117C 000C 0020             		move.b	#$C,$20(a0)
00010DB8                            
00010DB8                            Obj42_FireMissile:
00010DB8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00010DBE 6600                       		bne.s	locret_DF14
00010DC0 4A28 0032                  		tst.b	$32(a0)
00010DC4 6600                       		bne.s	locret_DF14
00010DC6 117C 0001 0032             		move.b	#1,$32(a0)
00010DCC 6100 FBBA                  		bsr.w	SingleObjLoad
00010DD0 6600                       		bne.s	locret_DF14
00010DD2 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00010DD6 3368 0008 0008             		move.w	8(a0),8(a1)
00010DDC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010DE2 5169 000C                  		subq.w	#8,$C(a1)
00010DE6 337C 0200 0010             		move.w	#$200,$10(a1)
00010DEC 303C 0014                  		move.w	#$14,d0
00010DF0 0828 0000 0022             		btst	#0,$22(a0)
00010DF6 6600                       		bne.s	loc_DF04
00010DF8 4440                       		neg.w	d0
00010DFA 4469 0010                  		neg.w	$10(a1)
00010DFE                            
00010DFE                            loc_DF04:
00010DFE D169 0008                  		add.w	d0,8(a1)
00010E02 1368 0022 0022             		move.b	$22(a0),$22(a1)
00010E08 137C 0001 0028             		move.b	#1,$28(a1)
00010E0E                            
00010E0E                            locret_DF14:
00010E0E 4E75                       		rts	
00010E10                            ; ===========================================================================
00010E10                            
00010E10                            Obj42_Delete:				; XREF: Obj42_Index
00010E10 6000 F72C                  		bra.w	DeleteObject
00010E14                            ; ===========================================================================
00010E14                            Ani_obj42:
00010E14                            	include "_anim\obj42.asm"
00010E14                            ; ---------------------------------------------------------------------------
00010E14                            ; Animation script - Newtron enemy
00010E14                            ; ---------------------------------------------------------------------------
00010E14 0000                       		dc.w byte_DF24-Ani_obj42
00010E16 0000                       		dc.w byte_DF28-Ani_obj42
00010E18 0000                       		dc.w byte_DF30-Ani_obj42
00010E1A 0000                       		dc.w byte_DF34-Ani_obj42
00010E1C 0000                       		dc.w byte_DF38-Ani_obj42
00010E1E 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
00010E22 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
00010E2A 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
00010E2E 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
00010E32 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
00010E3C                            		even
00010E3C                            		even
00010E3C                            
00010E3C                            ; ---------------------------------------------------------------------------
00010E3C                            ; Sprite mappings - Newtron enemy (GHZ)
00010E3C                            ; ---------------------------------------------------------------------------
00010E3C                            Map_obj42:
00010E3C                            	include "_maps\obj42.asm"
00010E3C                            ; ---------------------------------------------------------------------------
00010E3C                            ; Sprite mappings - Newtron enemy (GHZ)
00010E3C                            ; ---------------------------------------------------------------------------
00010E3C 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
00010E40 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
00010E44 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
00010E48 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
00010E4C 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
00010E50 0000                       		dc.w byte_DFF8-Map_obj42
00010E52 03                         byte_DF58:	dc.b 3
00010E53 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
00010E58 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
00010E5D FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
00010E62 03                         byte_DF68:	dc.b 3
00010E63 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
00010E68 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010E6D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010E72 03                         byte_DF78:	dc.b 3
00010E73 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
00010E78 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010E7D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010E82 04                         byte_DF88:	dc.b 4
00010E83 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
00010E88 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010E8D FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010E92 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
00010E97 03                         byte_DF9D:	dc.b 3
00010E98 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
00010E9D FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00010EA2 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
00010EA7 02                         byte_DFAD:	dc.b 2
00010EA8 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010EAD F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010EB2 03                         byte_DFB8:	dc.b 3
00010EB3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010EB8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010EBD FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00010EC2 03                         byte_DFC8:	dc.b 3
00010EC3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010EC8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010ECD FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00010ED2 03                         byte_DFD8:	dc.b 3
00010ED3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010ED8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010EDD FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
00010EE2 03                         byte_DFE8:	dc.b 3
00010EE3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010EE8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010EED FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
00010EF2 00                         byte_DFF8:	dc.b 0
00010EF4 00                         		even
00010EF4 00                         		even
00010EF4                            
00010EF4                            ; ===========================================================================
00010EF4                            ; ---------------------------------------------------------------------------
00010EF4                            ; Object 43 - Roller enemy (SYZ)
00010EF4                            ; ---------------------------------------------------------------------------
00010EF4                            
00010EF4                            Obj43:					; XREF: Obj_Index
00010EF4 7000                       		moveq	#0,d0
00010EF6 1028 0024                  		move.b	$24(a0),d0
00010EFA 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
00010EFE 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
00010F02                            ; ===========================================================================
00010F02 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
00010F04 0000                       		dc.w Obj43_Action-Obj43_Index
00010F06                            ; ===========================================================================
00010F06                            
00010F06                            Obj43_Main:				; XREF: Obj43_Index
00010F06 117C 000E 0016             		move.b	#$E,$16(a0)
00010F0C 117C 0008 0017             		move.b	#8,$17(a0)
00010F12 6100 F570                  		bsr.w	ObjectFall
00010F16 6100 0000                  		bsr.w	ObjHitFloor
00010F1A 4A41                       		tst.w	d1
00010F1C 6A00                       		bpl.s	locret_E052
00010F1E D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
00010F22 317C 0000 0012             		move.w	#0,$12(a0)
00010F28 5428 0024                  		addq.b	#2,$24(a0)
00010F2C 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
00010F34 317C 04B8 0002             		move.w	#$4B8,2(a0)
00010F3A 117C 0004 0001             		move.b	#4,1(a0)
00010F40 117C 0004 0018             		move.b	#4,$18(a0)
00010F46 117C 0010 0019             		move.b	#$10,$19(a0)
00010F4C                            
00010F4C                            locret_E052:
00010F4C 4E75                       		rts	
00010F4E                            ; ===========================================================================
00010F4E                            
00010F4E                            Obj43_Action:				; XREF: Obj43_Index
00010F4E 7000                       		moveq	#0,d0
00010F50 1028 0025                  		move.b	$25(a0),d0
00010F54 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
00010F58 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
00010F5C 43F9 0000 0000             		lea	(Ani_obj43).l,a1
00010F62 6100 C148                  		bsr.w	AnimateSprite
00010F66 3028 0008                  		move.w	8(a0),d0
00010F6A 0240 FF80                  		andi.w	#$FF80,d0
00010F6E 3238 F700                  		move.w	($FFFFF700).w,d1
00010F72 0441 0080                  		subi.w	#$80,d1
00010F76 0241 FF80                  		andi.w	#$FF80,d1
00010F7A 9041                       		sub.w	d1,d0
00010F7C 0C40 0280                  		cmpi.w	#$280,d0
00010F80 6E00 0000                  		bgt.w	Obj43_ChkGone
00010F84 6000 F57C                  		bra.w	DisplaySprite
00010F88                            ; ===========================================================================
00010F88                            
00010F88                            Obj43_ChkGone:				; XREF: Obj43_Action
00010F88 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F8C 7000                       		moveq	#0,d0
00010F8E 1028 0023                  		move.b	$23(a0),d0
00010F92 6700                       		beq.s	Obj43_Delete
00010F94 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010F9A                            
00010F9A                            Obj43_Delete:
00010F9A 6000 F5A2                  		bra.w	DeleteObject
00010F9E                            ; ===========================================================================
00010F9E 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
00010FA0 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
00010FA2 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
00010FA4 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
00010FA6                            ; ===========================================================================
00010FA6                            
00010FA6                            Obj43_RollChk:				; XREF: Obj43_Index2
00010FA6 3038 D008                  		move.w	($FFFFD008).w,d0
00010FAA 0440 0100                  		subi.w	#$100,d0
00010FAE 6500                       		bcs.s	loc_E0D2
00010FB0 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
00010FB4 6500                       		bcs.s	loc_E0D2
00010FB6 5828 0025                  		addq.b	#4,$25(a0)
00010FBA 117C 0002 001C             		move.b	#2,$1C(a0)
00010FC0 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
00010FC6 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
00010FCC                            
00010FCC                            loc_E0D2:
00010FCC 588F                       		addq.l	#4,sp
00010FCE 4E75                       		rts	
00010FD0                            ; ===========================================================================
00010FD0                            
00010FD0                            Obj43_RollNoChk:			; XREF: Obj43_Index2
00010FD0 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
00010FD6 6700                       		beq.s	loc_E0F8
00010FD8 5368 0030                  		subq.w	#1,$30(a0)
00010FDC 6A00                       		bpl.s	locret_E0F6
00010FDE 117C 0001 001C             		move.b	#1,$1C(a0)
00010FE4 317C 0700 0010             		move.w	#$700,$10(a0)
00010FEA 117C 008E 0020             		move.b	#$8E,$20(a0)
00010FF0                            
00010FF0                            locret_E0F6:
00010FF0 4E75                       		rts	
00010FF2                            ; ===========================================================================
00010FF2                            
00010FF2                            loc_E0F8:
00010FF2 5428 0025                  		addq.b	#2,$25(a0)
00010FF6 4E75                       		rts	
00010FF8                            ; ===========================================================================
00010FF8                            
00010FF8                            Obj43_ChkJump:				; XREF: Obj43_Index2
00010FF8 6100 0000                  		bsr.w	Obj43_Stop
00010FFC 6100 F4DE                  		bsr.w	SpeedToPos
00011000 6100 0000                  		bsr.w	ObjHitFloor
00011004 0C41 FFF8                  		cmpi.w	#-8,d1
00011008 6D00                       		blt.s	Obj43_Jump
0001100A 0C41 000C                  		cmpi.w	#$C,d1
0001100E 6C00                       		bge.s	Obj43_Jump
00011010 D368 000C                  		add.w	d1,$C(a0)
00011014 4E75                       		rts	
00011016                            ; ===========================================================================
00011016                            
00011016                            Obj43_Jump:
00011016 5428 0025                  		addq.b	#2,$25(a0)
0001101A 08E8 0000 0032             		bset	#0,$32(a0)
00011020 6700                       		beq.s	locret_E12E
00011022 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
00011028                            
00011028                            locret_E12E:
00011028 4E75                       		rts	
0001102A                            ; ===========================================================================
0001102A                            
0001102A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0001102A 6100 F458                  		bsr.w	ObjectFall
0001102E 4A68 0012                  		tst.w	$12(a0)
00011032 6B00                       		bmi.s	locret_E150
00011034 6100 0000                  		bsr.w	ObjHitFloor
00011038 4A41                       		tst.w	d1
0001103A 6A00                       		bpl.s	locret_E150
0001103C D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
00011040 5528 0025                  		subq.b	#2,$25(a0)
00011044 317C 0000 0012             		move.w	#0,$12(a0)
0001104A                            
0001104A                            locret_E150:
0001104A 4E75                       		rts	
0001104C                            
0001104C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001104C                            
0001104C                            
0001104C                            Obj43_Stop:				; XREF: Obj43_ChkJump
0001104C 4A28 0032                  		tst.b	$32(a0)
00011050 6B00                       		bmi.s	locret_E188
00011052 3038 D008                  		move.w	($FFFFD008).w,d0
00011056 0440 0030                  		subi.w	#$30,d0
0001105A 9068 0008                  		sub.w	8(a0),d0
0001105E 6400                       		bcc.s	locret_E188
00011060 117C 0000 001C             		move.b	#0,$1C(a0)
00011066 117C 000E 0020             		move.b	#$E,$20(a0)
0001106C 4268 0010                  		clr.w	$10(a0)
00011070 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
00011076 117C 0002 0025             		move.b	#2,$25(a0)
0001107C 08E8 0007 0032             		bset	#7,$32(a0)
00011082                            
00011082                            locret_E188:
00011082 4E75                       		rts	
00011084                            ; End of function Obj43_Stop
00011084                            
00011084                            ; ===========================================================================
00011084                            Ani_obj43:
00011084                            	include "_anim\obj43.asm"
00011084                            ; ---------------------------------------------------------------------------
00011084                            ; Animation script - Roller enemy
00011084                            ; ---------------------------------------------------------------------------
00011084 0000                       		dc.w byte_E190-Ani_obj43
00011086 0000                       		dc.w byte_E196-Ani_obj43
00011088 0000                       		dc.w byte_E19C-Ani_obj43
0001108A 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
00011090 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
00011096 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0001109C 00                         		even
0001109C 00                         		even
0001109C                            
0001109C                            ; ---------------------------------------------------------------------------
0001109C                            ; Sprite mappings - Roller enemy (SYZ)
0001109C                            ; ---------------------------------------------------------------------------
0001109C                            Map_obj43:
0001109C                            	include "_maps\obj43.asm"
0001109C                            ; ---------------------------------------------------------------------------
0001109C                            ; Sprite mappings - Roller enemy (SYZ)
0001109C                            ; ---------------------------------------------------------------------------
0001109C 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
000110A0 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
000110A4 0000                       		dc.w byte_E1CE-Map_obj43
000110A6 02                         byte_E1AC:	dc.b 2
000110A7 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
000110AC F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
000110B1 02                         byte_E1B7:	dc.b 2
000110B2 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
000110B7 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
000110BC 01                         byte_E1C2:	dc.b 1
000110BD F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000110C2 01                         byte_E1C8:	dc.b 1
000110C3 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000110C8 01                         byte_E1CE:	dc.b 1
000110C9 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000110CE                            		even
000110CE                            		even
000110CE                            
000110CE                            ; ===========================================================================
000110CE                            ; ---------------------------------------------------------------------------
000110CE                            ; Object 44 - walls (GHZ)
000110CE                            ; ---------------------------------------------------------------------------
000110CE                            
000110CE                            Obj44:					; XREF: Obj_Index
000110CE 7000                       		moveq	#0,d0
000110D0 1028 0024                  		move.b	$24(a0),d0
000110D4 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
000110D8 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
000110DC                            ; ===========================================================================
000110DC 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
000110DE 0000                       		dc.w Obj44_Solid-Obj44_Index
000110E0 0000                       		dc.w Obj44_Display-Obj44_Index
000110E2                            ; ===========================================================================
000110E2                            
000110E2                            Obj44_Main:				; XREF: Obj44_Index
000110E2 5428 0024                  		addq.b	#2,$24(a0)
000110E6 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
000110EE 317C 434C 0002             		move.w	#$434C,2(a0)
000110F4 0028 0004 0001             		ori.b	#4,1(a0)
000110FA 117C 0008 0019             		move.b	#8,$19(a0)
00011100 117C 0006 0018             		move.b	#6,$18(a0)
00011106 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0001110C 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
00011112 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
00011114 5428 0024                  		addq.b	#2,$24(a0)
00011118 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0001111A                            ; ===========================================================================
0001111A                            
0001111A                            Obj44_Solid:				; XREF: Obj44_Index
0001111A 323C 0013                  		move.w	#$13,d1
0001111E 343C 0028                  		move.w	#$28,d2
00011122 6100 A0B4                  		bsr.w	Obj44_SolidWall
00011126                            
00011126                            Obj44_Display:				; XREF: Obj44_Index
00011126 6100 F3DA                  		bsr.w	DisplaySprite
0001112A 3028 0008                  		move.w	8(a0),d0
0001112E 0240 FF80                  		andi.w	#$FF80,d0
00011132 3238 F700                  		move.w	($FFFFF700).w,d1
00011136 0441 0080                  		subi.w	#$80,d1
0001113A 0241 FF80                  		andi.w	#$FF80,d1
0001113E 9041                       		sub.w	d1,d0
00011140 0C40 0280                  		cmpi.w	#$280,d0
00011144 6200 F3F8                  		bhi.w	DeleteObject
00011148 4E75                       		rts	
0001114A                            ; ===========================================================================
0001114A                            ; ---------------------------------------------------------------------------
0001114A                            ; Sprite mappings - walls (GHZ)
0001114A                            ; ---------------------------------------------------------------------------
0001114A                            Map_obj44:
0001114A                            	include "_maps\obj44.asm"
0001114A                            ; ---------------------------------------------------------------------------
0001114A                            ; Sprite mappings - walls (GHZ)
0001114A                            ; ---------------------------------------------------------------------------
0001114A 0000                       		dc.w byte_E256-Map_obj44
0001114C 0000                       		dc.w byte_E26B-Map_obj44
0001114E 0000                       		dc.w byte_E280-Map_obj44
00011150 04                         byte_E256:	dc.b 4
00011151 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
00011156 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0001115B 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00011160 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00011165 04                         byte_E26B:	dc.b 4
00011166 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0001116B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00011170 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00011175 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0001117A 04                         byte_E280:	dc.b 4
0001117B E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
00011180 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
00011185 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0001118A 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00011190 00                         		even
00011190 00                         		even
00011190                            
00011190                            ; ===========================================================================
00011190                            ; ---------------------------------------------------------------------------
00011190                            ; Object 13 - lava ball	producer (MZ, SLZ)
00011190                            ; ---------------------------------------------------------------------------
00011190                            
00011190                            Obj13:					; XREF: Obj_Index
00011190 7000                       		moveq	#0,d0
00011192 1028 0024                  		move.b	$24(a0),d0
00011196 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0001119A 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0001119E 6000 0000                  		bra.w	Obj14_ChkDel
000111A2                            ; ===========================================================================
000111A2 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
000111A4 0000                       		dc.w Obj13_MakeLava-Obj13_Index
000111A6                            ; ---------------------------------------------------------------------------
000111A6                            ;
000111A6                            ; Lava ball production rates
000111A6                            ;
000111A6 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
000111AC                            ; ===========================================================================
000111AC                            
000111AC                            Obj13_Main:				; XREF: Obj13_Index
000111AC 5428 0024                  		addq.b	#2,$24(a0)
000111B0 1028 0028                  		move.b	$28(a0),d0
000111B4 E848                       		lsr.w	#4,d0
000111B6 0240 000F                  		andi.w	#$F,d0
000111BA 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
000111C0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
000111C6 0228 000F 0028             		andi.b	#$F,$28(a0)
000111CC                            
000111CC                            Obj13_MakeLava:				; XREF: Obj13_Index
000111CC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
000111D0 6600                       		bne.s	locret_E302	; if time still	remains, branch
000111D2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
000111D8 6100 F5A2                  		bsr.w	ChkObjOnScreen
000111DC 6600                       		bne.s	locret_E302
000111DE 6100 F7A8                  		bsr.w	SingleObjLoad
000111E2 6600                       		bne.s	locret_E302
000111E4 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
000111E8 3368 0008 0008             		move.w	8(a0),8(a1)
000111EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000111F4 1368 0028 0028             		move.b	$28(a0),$28(a1)
000111FA                            
000111FA                            locret_E302:
000111FA 4E75                       		rts	
000111FC                            ; ===========================================================================
000111FC                            ; ---------------------------------------------------------------------------
000111FC                            ; Object 14 - lava balls (MZ, SLZ)
000111FC                            ; ---------------------------------------------------------------------------
000111FC                            
000111FC                            Obj14:					; XREF: Obj_Index
000111FC 7000                       		moveq	#0,d0
000111FE 1028 0024                  		move.b	$24(a0),d0
00011202 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
00011206 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0001120A 6000 F2F6                  		bra.w	DisplaySprite
0001120E                            ; ===========================================================================
0001120E 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
00011210 0000                       		dc.w Obj14_Action-Obj14_Index
00011212 0000                       		dc.w Obj14_Delete-Obj14_Index
00011214                            
00011214 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0001121E 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
00011226                            ; ===========================================================================
00011226                            
00011226                            Obj14_Main:				; XREF: Obj14_Index
00011226 5428 0024                  		addq.b	#2,$24(a0)
0001122A 117C 0008 0016             		move.b	#8,$16(a0)
00011230 117C 0008 0017             		move.b	#8,$17(a0)
00011236 217C 0000 E0F2 0004        		move.l	#Map_obj14,4(a0)
0001123E 317C 0345 0002             		move.w	#$345,2(a0)
00011244 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0001124A 6600                       		bne.s	loc_E35A
0001124C 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
00011252                            
00011252                            loc_E35A:
00011252 117C 0004 0001             		move.b	#4,1(a0)
00011258 117C 0003 0018             		move.b	#3,$18(a0)
0001125E 117C 008B 0020             		move.b	#$8B,$20(a0)
00011264 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001126A 4A28 0029                  		tst.b	$29(a0)
0001126E 6700                       		beq.s	Obj14_SetSpeed
00011270 5428 0018                  		addq.b	#2,$18(a0)
00011274                            
00011274                            Obj14_SetSpeed:
00011274 7000                       		moveq	#0,d0
00011276 1028 0028                  		move.b	$28(a0),d0
0001127A D040                       		add.w	d0,d0
0001127C 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
00011282 117C 0008 0019             		move.b	#8,$19(a0)
00011288 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0001128E 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
00011290 117C 0010 0019             		move.b	#$10,$19(a0)
00011296 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0001129C 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
000112A2 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
000112A8                            
000112A8                            Obj14_PlaySnd:
000112A8 303C 00AE                  		move.w	#$AE,d0
000112AC 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play lava ball sound
000112B2                            
000112B2                            Obj14_Action:				; XREF: Obj14_Index
000112B2 7000                       		moveq	#0,d0
000112B4 1028 0028                  		move.b	$28(a0),d0
000112B8 D040                       		add.w	d0,d0
000112BA 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
000112BE 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
000112C2 6100 F218                  		bsr.w	SpeedToPos
000112C6 43F9 0000 0000             		lea	(Ani_obj14).l,a1
000112CC 6100 BDDE                  		bsr.w	AnimateSprite
000112D0                            
000112D0                            Obj14_ChkDel:				; XREF: Obj13
000112D0 3028 0008                  		move.w	8(a0),d0
000112D4 0240 FF80                  		andi.w	#$FF80,d0
000112D8 3238 F700                  		move.w	($FFFFF700).w,d1
000112DC 0441 0080                  		subi.w	#$80,d1
000112E0 0241 FF80                  		andi.w	#$FF80,d1
000112E4 9041                       		sub.w	d1,d0
000112E6 0C40 0280                  		cmpi.w	#$280,d0
000112EA 6200 F252                  		bhi.w	DeleteObject
000112EE 4E75                       		rts	
000112F0                            ; ===========================================================================
000112F0 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
000112F4 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
000112F8 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
000112FC 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
00011300 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
00011302                            ; ===========================================================================
00011302                            ; lavaball types 00-03 fly up and fall back down
00011302                            
00011302                            Obj14_Type00:				; XREF: Obj14_TypeIndex
00011302 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
00011308 3028 0030                  		move.w	$30(a0),d0
0001130C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
00011310 6400                       		bcc.s	loc_E41E	; if not, branch
00011312 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
00011316                            
00011316                            loc_E41E:
00011316 08A8 0001 0022             		bclr	#1,$22(a0)
0001131C 4A68 0012                  		tst.w	$12(a0)
00011320 6A00                       		bpl.s	locret_E430
00011322 08E8 0001 0022             		bset	#1,$22(a0)
00011328                            
00011328                            locret_E430:
00011328 4E75                       		rts	
0001132A                            ; ===========================================================================
0001132A                            ; lavaball type	04 flies up until it hits the ceiling
0001132A                            
0001132A                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0001132A 08E8 0001 0022             		bset	#1,$22(a0)
00011330 6100 0000                  		bsr.w	ObjHitCeiling
00011334 4A41                       		tst.w	d1
00011336 6A00                       		bpl.s	locret_E452
00011338 117C 0008 0028             		move.b	#8,$28(a0)
0001133E 117C 0001 001C             		move.b	#1,$1C(a0)
00011344 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0001134A                            
0001134A                            locret_E452:
0001134A 4E75                       		rts	
0001134C                            ; ===========================================================================
0001134C                            ; lavaball type	05 falls down until it hits the	floor
0001134C                            
0001134C                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0001134C 08A8 0001 0022             		bclr	#1,$22(a0)
00011352 6100 0000                  		bsr.w	ObjHitFloor
00011356 4A41                       		tst.w	d1
00011358 6A00                       		bpl.s	locret_E474
0001135A 117C 0008 0028             		move.b	#8,$28(a0)
00011360 117C 0001 001C             		move.b	#1,$1C(a0)
00011366 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0001136C                            
0001136C                            locret_E474:
0001136C 4E75                       		rts	
0001136E                            ; ===========================================================================
0001136E                            ; lavaball types 06-07 move sideways
0001136E                            
0001136E                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0001136E 08E8 0000 0022             		bset	#0,$22(a0)
00011374 76F8                       		moveq	#-8,d3
00011376 6100 0000                  		bsr.w	ObjHitWallLeft
0001137A 4A41                       		tst.w	d1
0001137C 6A00                       		bpl.s	locret_E498
0001137E 117C 0008 0028             		move.b	#8,$28(a0)
00011384 117C 0003 001C             		move.b	#3,$1C(a0)
0001138A 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
00011390                            
00011390                            locret_E498:
00011390 4E75                       		rts	
00011392                            ; ===========================================================================
00011392                            
00011392                            Obj14_Type07:				; XREF: Obj14_TypeIndex
00011392 08A8 0000 0022             		bclr	#0,$22(a0)
00011398 7608                       		moveq	#8,d3
0001139A 6100 0000                  		bsr.w	ObjHitWallRight
0001139E 4A41                       		tst.w	d1
000113A0 6A00                       		bpl.s	locret_E4BC
000113A2 117C 0008 0028             		move.b	#8,$28(a0)
000113A8 117C 0003 001C             		move.b	#3,$1C(a0)
000113AE 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
000113B4                            
000113B4                            locret_E4BC:
000113B4 4E75                       		rts	
000113B6                            ; ===========================================================================
000113B6                            
000113B6                            Obj14_Type08:				; XREF: Obj14_TypeIndex
000113B6 4E75                       		rts	
000113B8                            ; ===========================================================================
000113B8                            
000113B8                            Obj14_Delete:				; XREF: Obj14_Index
000113B8 6000 F184                  		bra.w	DeleteObject
000113BC                            ; ===========================================================================
000113BC                            Ani_obj14:
000113BC                            	include "_anim\obj14.asm"
000113BC                            ; ---------------------------------------------------------------------------
000113BC                            ; Animation script - lava balls
000113BC                            ; ---------------------------------------------------------------------------
000113BC 0000                       		dc.w byte_E4CC-Ani_obj14
000113BE 0000                       		dc.w byte_E4D2-Ani_obj14
000113C0 0000                       		dc.w byte_E4D6-Ani_obj14
000113C2 0000                       		dc.w byte_E4DC-Ani_obj14
000113C4 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
000113CA 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
000113CE 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
000113D4 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
000113D8                            		even
000113D8                            		even
000113D8                            
000113D8                            ; ===========================================================================
000113D8                            ; ---------------------------------------------------------------------------
000113D8                            ; Object 6D - flame thrower (SBZ)
000113D8                            ; ---------------------------------------------------------------------------
000113D8                            
000113D8                            Obj6D:					; XREF: Obj_Index
000113D8 7000                       		moveq	#0,d0
000113DA 1028 0024                  		move.b	$24(a0),d0
000113DE 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
000113E2 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
000113E6                            ; ===========================================================================
000113E6 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
000113E8 0000                       		dc.w Obj6D_Action-Obj6D_Index
000113EA                            ; ===========================================================================
000113EA                            
000113EA                            Obj6D_Main:				; XREF: Obj6D_Index
000113EA 5428 0024                  		addq.b	#2,$24(a0)
000113EE 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
000113F6 317C 83D9 0002             		move.w	#$83D9,2(a0)
000113FC 0028 0004 0001             		ori.b	#4,1(a0)
00011402 117C 0001 0018             		move.b	#1,$18(a0)
00011408 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001140E 117C 000C 0019             		move.b	#$C,$19(a0)
00011414 1028 0028                  		move.b	$28(a0),d0
00011418 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0001141C D040                       		add.w	d0,d0		; multiply by 2
0001141E 3140 0030                  		move.w	d0,$30(a0)
00011422 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
00011426 1028 0028                  		move.b	$28(a0),d0
0001142A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0001142E EB48                       		lsl.w	#5,d0		; multiply by $20
00011430 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00011434 117C 000A 0036             		move.b	#$A,$36(a0)
0001143A 0828 0001 0022             		btst	#1,$22(a0)
00011440 6700                       		beq.s	Obj6D_Action
00011442 117C 0002 001C             		move.b	#2,$1C(a0)
00011448 117C 0015 0036             		move.b	#$15,$36(a0)
0001144E                            
0001144E                            Obj6D_Action:				; XREF: Obj6D_Index
0001144E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00011452 6A00                       		bpl.s	loc_E57A	; if time remains, branch
00011454 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0001145A 0868 0000 001C             		bchg	#0,$1C(a0)
00011460 6700                       		beq.s	loc_E57A
00011462 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00011468 303C 00B3                  		move.w	#$B3,d0
0001146C 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play flame sound
00011472                            
00011472                            loc_E57A:
00011472 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
00011478 6100 BC32                  		bsr.w	AnimateSprite
0001147C 117C 0000 0020             		move.b	#0,$20(a0)
00011482 1028 0036                  		move.b	$36(a0),d0
00011486 B028 001A                  		cmp.b	$1A(a0),d0
0001148A 6600                       		bne.s	Obj6D_ChkDel
0001148C 117C 00A3 0020             		move.b	#$A3,$20(a0)
00011492                            
00011492                            Obj6D_ChkDel:
00011492 3028 0008                  		move.w	8(a0),d0
00011496 0240 FF80                  		andi.w	#$FF80,d0
0001149A 3238 F700                  		move.w	($FFFFF700).w,d1
0001149E 0441 0080                  		subi.w	#$80,d1
000114A2 0241 FF80                  		andi.w	#$FF80,d1
000114A6 9041                       		sub.w	d1,d0
000114A8 0C40 0280                  		cmpi.w	#$280,d0
000114AC 6200 F090                  		bhi.w	DeleteObject
000114B0 6000 F050                  		bra.w	DisplaySprite
000114B4                            ; ===========================================================================
000114B4                            Ani_obj6D:
000114B4                            	include "_anim\obj6D.asm"
000114B4                            ; ---------------------------------------------------------------------------
000114B4                            ; Animation script - flamethrower (SBZ)
000114B4                            ; ---------------------------------------------------------------------------
000114B4 0000                       		dc.w byte_E5C4-Ani_obj6D
000114B6 0000                       		dc.w byte_E5D2-Ani_obj6D
000114B8 0000                       		dc.w byte_E5DC-Ani_obj6D
000114BA 0000                       		dc.w byte_E5EA-Ani_obj6D
000114BC 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
000114CA 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
000114D4 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
000114E2 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
000114EC                            		even
000114EC                            		even
000114EC                            
000114EC                            ; ---------------------------------------------------------------------------
000114EC                            ; Sprite mappings - flame thrower (SBZ)
000114EC                            ; ---------------------------------------------------------------------------
000114EC                            Map_obj6D:
000114EC                            	include "_maps\obj6D.asm"
000114EC                            ; ---------------------------------------------------------------------------
000114EC                            ; Sprite mappings - flame thrower (SBZ)
000114EC                            ; ---------------------------------------------------------------------------
000114EC 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
000114F0 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
000114F4 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
000114F8 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
000114FC 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
00011500 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
00011504 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
00011508 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0001150C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
00011510 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
00011514 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
00011518 01                         byte_E620:	dc.b 1
00011519 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001151E 02                         byte_E626:	dc.b 2
0001151F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011524 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011529 02                         byte_E631:	dc.b 2
0001152A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001152F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011534 03                         byte_E63C:	dc.b 3
00011535 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001153A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001153F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011544 03                         byte_E64C:	dc.b 3
00011545 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001154A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001154F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011554 04                         byte_E65C:	dc.b 4
00011555 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001155A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001155F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011564 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011569 04                         byte_E671:	dc.b 4
0001156A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001156F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011574 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00011579 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001157E 05                         byte_E686:	dc.b 5
0001157F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00011584 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00011589 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001158E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011593 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011598 05                         byte_E6A0:	dc.b 5
00011599 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001159E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000115A3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000115A8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000115AD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000115B2 06                         byte_E6BA:	dc.b 6
000115B3 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000115B8 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000115BD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000115C2 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000115C7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000115CC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000115D1 06                         byte_E6D9:	dc.b 6
000115D2 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000115D7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000115DC 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000115E1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000115E6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000115EB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000115F0 01                         byte_E6F8:	dc.b 1
000115F1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000115F6 02                         byte_E6FE:	dc.b 2
000115F7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000115FC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011601 02                         byte_E709:	dc.b 2
00011602 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011607 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001160C 03                         byte_E714:	dc.b 3
0001160D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00011612 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011617 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001161C 03                         byte_E724:	dc.b 3
0001161D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011622 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011627 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001162C 04                         byte_E734:	dc.b 4
0001162D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00011632 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00011637 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001163C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011641 04                         byte_E749:	dc.b 4
00011642 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00011647 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001164C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011651 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00011656 05                         byte_E75E:	dc.b 5
00011657 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0001165C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00011661 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00011666 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001166B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011670 05                         byte_E778:	dc.b 5
00011671 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00011676 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001167B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011680 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011685 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001168A 06                         byte_E792:	dc.b 6
0001168B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00011690 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00011695 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001169A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0001169F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000116A4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000116A9 06                         byte_E7B1:	dc.b 6
000116AA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000116AF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000116B4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000116B9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000116BE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000116C3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000116C8                            		even
000116C8                            		even
000116C8                            
000116C8                            ; ===========================================================================
000116C8                            ; ---------------------------------------------------------------------------
000116C8                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
000116C8                            ; ---------------------------------------------------------------------------
000116C8                            
000116C8                            Obj46:					; XREF: Obj_Index
000116C8 7000                       		moveq	#0,d0
000116CA 1028 0024                  		move.b	$24(a0),d0
000116CE 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
000116D2 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
000116D6                            ; ===========================================================================
000116D6 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
000116D8 0000                       		dc.w Obj46_Action-Obj46_Index
000116DA                            ; ===========================================================================
000116DA                            
000116DA                            Obj46_Main:				; XREF: Obj46_Index
000116DA 5428 0024                  		addq.b	#2,$24(a0)
000116DE 117C 000F 0016             		move.b	#$F,$16(a0)
000116E4 117C 000F 0017             		move.b	#$F,$17(a0)
000116EA 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
000116F2 317C 4000 0002             		move.w	#$4000,2(a0)
000116F8 117C 0004 0001             		move.b	#4,1(a0)
000116FE 117C 0003 0018             		move.b	#3,$18(a0)
00011704 117C 0010 0019             		move.b	#$10,$19(a0)
0001170A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011710 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00011716                            
00011716                            Obj46_Action:				; XREF: Obj46_Index
00011716 4A28 0001                  		tst.b	1(a0)
0001171A 6A00                       		bpl.s	Obj46_ChkDel
0001171C 7000                       		moveq	#0,d0
0001171E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011722 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00011726 D040                       		add.w	d0,d0
00011728 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0001172C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
00011730 323C 001B                  		move.w	#$1B,d1
00011734 343C 0010                  		move.w	#$10,d2
00011738 363C 0011                  		move.w	#$11,d3
0001173C 3828 0008                  		move.w	8(a0),d4
00011740 6100 0000                  		bsr.w	SolidObject
00011744                            
00011744                            Obj46_ChkDel:
00011744 6100 EDBC                  		bsr.w	DisplaySprite
00011748 3028 0008                  		move.w	8(a0),d0
0001174C 0240 FF80                  		andi.w	#$FF80,d0
00011750 3238 F700                  		move.w	($FFFFF700).w,d1
00011754 0441 0080                  		subi.w	#$80,d1
00011758 0241 FF80                  		andi.w	#$FF80,d1
0001175C 9041                       		sub.w	d1,d0
0001175E 0C40 0280                  		cmpi.w	#$280,d0
00011762 6200 EDDA                  		bhi.w	DeleteObject
00011766 4E75                       		rts	
00011768                            ; ===========================================================================
00011768 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0001176A 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0001176C 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0001176E 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
00011770 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
00011772                            ; ===========================================================================
00011772                            
00011772                            Obj46_Type00:				; XREF: Obj46_TypeIndex
00011772 4E75                       		rts	
00011774                            ; ===========================================================================
00011774                            
00011774                            Obj46_Type02:				; XREF: Obj46_TypeIndex
00011774 3038 D008                  		move.w	($FFFFD008).w,d0
00011778 9068 0008                  		sub.w	8(a0),d0
0001177C 6400                       		bcc.s	loc_E888
0001177E 4440                       		neg.w	d0
00011780                            
00011780                            loc_E888:
00011780 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00011784 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00011786 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0001178C                            
0001178C                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0001178C 7000                       		moveq	#0,d0
0001178E 1038 FE74                  		move.b	($FFFFFE74).w,d0
00011792 0828 0003 0028             		btst	#3,$28(a0)
00011798 6700                       		beq.s	loc_E8A8
0001179A 4440                       		neg.w	d0
0001179C 0640 0010                  		addi.w	#$10,d0
000117A0                            
000117A0                            loc_E8A8:
000117A0 3228 0030                  		move.w	$30(a0),d1
000117A4 9240                       		sub.w	d0,d1
000117A6 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
000117AA 4E75                       		rts	
000117AC                            ; ===========================================================================
000117AC                            
000117AC                            Obj46_Type03:				; XREF: Obj46_TypeIndex
000117AC 6100 ED2E                  		bsr.w	SpeedToPos
000117B0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
000117B6 6100 0000                  		bsr.w	ObjHitFloor
000117BA 4A41                       		tst.w	d1		; has the block	hit the	floor?
000117BC 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
000117C0 D368 000C                  		add.w	d1,$C(a0)
000117C4 4268 0012                  		clr.w	$12(a0)		; stop the block falling
000117C8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000117CE 117C 0004 0028             		move.b	#4,$28(a0)
000117D4 3011                       		move.w	(a1),d0
000117D6 0240 03FF                  		andi.w	#$3FF,d0
000117DA 0C40 02E8                  		cmpi.w	#$2E8,d0
000117DE 6400                       		bcc.s	locret_E8EE
000117E0 117C 0000 0028             		move.b	#0,$28(a0)
000117E6                            
000117E6                            locret_E8EE:
000117E6 4E75                       		rts	
000117E8                            ; ===========================================================================
000117E8                            
000117E8                            Obj46_Type04:				; XREF: Obj46_TypeIndex
000117E8 7000                       		moveq	#0,d0
000117EA 1038 FE70                  		move.b	($FFFFFE70).w,d0
000117EE E648                       		lsr.w	#3,d0
000117F0 3228 0030                  		move.w	$30(a0),d1
000117F4 9240                       		sub.w	d0,d1
000117F6 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
000117FA 4E75                       		rts	
000117FC                            ; ===========================================================================
000117FC                            ; ---------------------------------------------------------------------------
000117FC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000117FC                            ; ---------------------------------------------------------------------------
000117FC                            Map_obj46:
000117FC                            	include "_maps\obj46.asm"
000117FC                            ; ---------------------------------------------------------------------------
000117FC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000117FC                            ; ---------------------------------------------------------------------------
000117FC 0000                       		dc.w byte_E906-Map_obj46
000117FE 01                         byte_E906:	dc.b 1
000117FF F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00011804                            		even
00011804                            		even
00011804                            
00011804                            ; ===========================================================================
00011804                            ; ---------------------------------------------------------------------------
00011804                            ; Object 12 - lamp (SYZ)
00011804                            ; ---------------------------------------------------------------------------
00011804                            
00011804                            Obj12:					; XREF: Obj_Index
00011804 7000                       		moveq	#0,d0
00011806 1028 0024                  		move.b	$24(a0),d0
0001180A 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0001180E 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
00011812                            ; ===========================================================================
00011812 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
00011814 0000                       		dc.w Obj12_Animate-Obj12_Index
00011816                            ; ===========================================================================
00011816                            
00011816                            Obj12_Main:				; XREF: Obj12_Index
00011816 5428 0024                  		addq.b	#2,$24(a0)
0001181A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
00011822 317C 0000 0002             		move.w	#0,2(a0)
00011828 117C 0004 0001             		move.b	#4,1(a0)
0001182E 117C 0010 0019             		move.b	#$10,$19(a0)
00011834 117C 0006 0018             		move.b	#6,$18(a0)
0001183A                            
0001183A                            Obj12_Animate:				; XREF: Obj12_Index
0001183A 5328 001E                  		subq.b	#1,$1E(a0)
0001183E 6A00                       		bpl.s	Obj12_ChkDel
00011840 117C 0007 001E             		move.b	#7,$1E(a0)
00011846 5228 001A                  		addq.b	#1,$1A(a0)
0001184A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00011850 6500                       		bcs.s	Obj12_ChkDel
00011852 117C 0000 001A             		move.b	#0,$1A(a0)
00011858                            
00011858                            Obj12_ChkDel:
00011858 3028 0008                  		move.w	8(a0),d0
0001185C 0240 FF80                  		andi.w	#$FF80,d0
00011860 3238 F700                  		move.w	($FFFFF700).w,d1
00011864 0441 0080                  		subi.w	#$80,d1
00011868 0241 FF80                  		andi.w	#$FF80,d1
0001186C 9041                       		sub.w	d1,d0
0001186E 0C40 0280                  		cmpi.w	#$280,d0
00011872 6200 ECCA                  		bhi.w	DeleteObject
00011876 6000 EC8A                  		bra.w	DisplaySprite
0001187A                            ; ===========================================================================
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            ; Sprite mappings - lamp (SYZ)
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            Map_obj12:
0001187A                            	include "_maps\obj12.asm"
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            ; Sprite mappings - lamp (SYZ)
0001187A                            ; ---------------------------------------------------------------------------
0001187A 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0001187E 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00011882 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00011886 02                         byte_E98E:	dc.b 2
00011887 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0001188C 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
00011891 02                         byte_E999:	dc.b 2
00011892 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00011897 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0001189C 02                         byte_E9A4:	dc.b 2
0001189D F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
000118A2 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
000118A7 02                         byte_E9AF:	dc.b 2
000118A8 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
000118AD 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
000118B2 02                         byte_E9BA:	dc.b 2
000118B3 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
000118B8 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
000118BD 02                         byte_E9C5:	dc.b 2
000118BE F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
000118C3 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
000118C8                            		even
000118C8                            		even
000118C8                            
000118C8                            ; ===========================================================================
000118C8                            ; ---------------------------------------------------------------------------
000118C8                            ; Object 47 - pinball bumper (SYZ)
000118C8                            ; ---------------------------------------------------------------------------
000118C8                            
000118C8                            Obj47:					; XREF: Obj_Index
000118C8 7000                       		moveq	#0,d0
000118CA 1028 0024                  		move.b	$24(a0),d0
000118CE 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
000118D2 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
000118D6                            ; ===========================================================================
000118D6 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
000118D8 0000                       		dc.w Obj47_Hit-Obj47_Index
000118DA                            ; ===========================================================================
000118DA                            
000118DA                            Obj47_Main:				; XREF: Obj47_Index
000118DA 5428 0024                  		addq.b	#2,$24(a0)
000118DE 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
000118E6 0C38 0000 FE10             		cmpi.b	#0,($FFFFFE10).w	; Are we on AHZ?
000118EC 6700                       		beq.s	Obj47_Main_AHZ		; If yes, branch
000118EE 317C 0380 0002             		move.w	#$380,2(a0)
000118F4 6000                       		bra.s	Obj47_Main_Cont
000118F6                            
000118F6                            Obj47_Main_AHZ:
000118F6 317C 0480 0002             		move.w	#$480,2(a0)
000118FC                            
000118FC                            Obj47_Main_Cont:
000118FC 117C 0004 0001             		move.b	#4,1(a0)
00011902 117C 0010 0019             		move.b	#$10,$19(a0)
00011908 117C 0001 0018             		move.b	#1,$18(a0)
0001190E 117C 00D7 0020             		move.b	#$D7,$20(a0)
00011914                            
00011914                            Obj47_Hit:				; XREF: Obj47_Index
00011914 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
00011918 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0001191C 4228 0021                  		clr.b	$21(a0)
00011920 43F8 D000                  		lea	($FFFFD000).w,a1
00011924 3228 0008                  		move.w	8(a0),d1
00011928 3428 000C                  		move.w	$C(a0),d2
0001192C 9269 0008                  		sub.w	8(a1),d1
00011930 9469 000C                  		sub.w	$C(a1),d2
00011934 4EB9 0000 3A66             		jsr	(CalcAngle).l
0001193A 4EB9 0000 3798             		jsr	(CalcSine).l
00011940 C3FC F900                  		muls.w	#-$700,d1
00011944 E081                       		asr.l	#8,d1
00011946 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0001194A C1FC F900                  		muls.w	#-$700,d0
0001194E E080                       		asr.l	#8,d0
00011950 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
00011954 08E9 0001 0022             		bset	#1,$22(a1)
0001195A 08A9 0004 0022             		bclr	#4,$22(a1)
00011960 08A9 0005 0022             		bclr	#5,$22(a1)
00011966 4229 003C                  		clr.b	$3C(a1)
0001196A 117C 0001 001C             		move.b	#1,$1C(a0)
00011970 303C 00FC                  		move.w	#$FC,d0
00011974 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play bumper sound
0001197A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001197E 7000                       		moveq	#0,d0
00011980 1028 0023                  		move.b	$23(a0),d0
00011984 6700                       		beq.s	Obj47_Score
00011986 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0001198C 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0001198E 5232 0002                  		addq.b	#1,2(a2,d0.w)
00011992                            
00011992                            Obj47_Score:
00011992 7001                       		moveq	#1,d0
00011994 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0001199A 6100 EFEC                  		bsr.w	SingleObjLoad
0001199E 6600                       		bne.s	Obj47_Display
000119A0 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000119A4 3368 0008 0008             		move.w	8(a0),8(a1)
000119AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000119B0 137C 0004 001A             		move.b	#4,$1A(a1)
000119B6                            
000119B6                            Obj47_Display:
000119B6 43F9 0000 0000             		lea	(Ani_obj47).l,a1
000119BC 6100 B6EE                  		bsr.w	AnimateSprite
000119C0 3028 0008                  		move.w	8(a0),d0
000119C4 0240 FF80                  		andi.w	#$FF80,d0
000119C8 3238 F700                  		move.w	($FFFFF700).w,d1
000119CC 0441 0080                  		subi.w	#$80,d1
000119D0 0241 FF80                  		andi.w	#$FF80,d1
000119D4 9041                       		sub.w	d1,d0
000119D6 0C40 0280                  		cmpi.w	#$280,d0
000119DA 6200                       		bhi.s	Obj47_ChkHit
000119DC 6000 EB24                  		bra.w	DisplaySprite
000119E0                            ; ===========================================================================
000119E0                            
000119E0                            Obj47_ChkHit:				; XREF: Obj47_Display
000119E0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000119E4 7000                       		moveq	#0,d0
000119E6 1028 0023                  		move.b	$23(a0),d0
000119EA 6700                       		beq.s	Obj47_Delete
000119EC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000119F2                            
000119F2                            Obj47_Delete:
000119F2 6000 EB4A                  		bra.w	DeleteObject
000119F6                            ; ===========================================================================
000119F6                            Ani_obj47:
000119F6                            	include "_anim\obj47.asm"
000119F6                            ; ---------------------------------------------------------------------------
000119F6                            ; Animation script - flamethrower (SBZ)
000119F6                            ; ---------------------------------------------------------------------------
000119F6 0000                       		dc.w byte_EAF4-Ani_obj47
000119F8 0000                       		dc.w byte_EAF8-Ani_obj47
000119FA 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
000119FE 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
00011A06                            		even
00011A06                            		even
00011A06                            
00011A06                            ; ---------------------------------------------------------------------------
00011A06                            ; Sprite mappings - pinball bumper (SYZ)
00011A06                            ; ---------------------------------------------------------------------------
00011A06                            Map_obj47:
00011A06                            	include "_maps\obj47.asm"
00011A06                            ; ---------------------------------------------------------------------------
00011A06                            ; Sprite mappings - pinball bumper (SYZ)
00011A06                            ; ---------------------------------------------------------------------------
00011A06 0000                       		dc.w byte_EB06-Map_obj47
00011A08 0000                       		dc.w byte_EB11-Map_obj47
00011A0A 0000                       		dc.w byte_EB1C-Map_obj47
00011A0C 02                         byte_EB06:	dc.b 2
00011A0D F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00011A12 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00011A17 02                         byte_EB11:	dc.b 2
00011A18 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00011A1D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00011A22 02                         byte_EB1C:	dc.b 2
00011A23 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00011A28 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00011A2E 00                         		even
00011A2E 00                         		even
00011A2E                            
00011A2E                            ; ===========================================================================
00011A2E                            ; ---------------------------------------------------------------------------
00011A2E                            ; Object 0D - signpost at the end of a level
00011A2E                            ; ---------------------------------------------------------------------------
00011A2E                            
00011A2E                            Obj0D:					; XREF: Obj_Index
00011A2E 7000                       		moveq	#0,d0
00011A30 1028 0024                  		move.b	$24(a0),d0
00011A34 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
00011A38 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
00011A3C 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
00011A42 6100 B668                  		bsr.w	AnimateSprite
00011A46 6100 EABA                  		bsr.w	DisplaySprite
00011A4A 3028 0008                  		move.w	8(a0),d0
00011A4E 0240 FF80                  		andi.w	#$FF80,d0
00011A52 3238 F700                  		move.w	($FFFFF700).w,d1
00011A56 0441 0080                  		subi.w	#$80,d1
00011A5A 0241 FF80                  		andi.w	#$FF80,d1
00011A5E 9041                       		sub.w	d1,d0
00011A60 0C40 0280                  		cmpi.w	#$280,d0
00011A64 6200 EAD8                  		bhi.w	DeleteObject
00011A68 4E75                       		rts	
00011A6A                            ; ===========================================================================
00011A6A 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
00011A6C 0000                       		dc.w Obj0D_Touch-Obj0D_Index
00011A6E 0000                       		dc.w Obj0D_Spin-Obj0D_Index
00011A70 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
00011A72 0000                       		dc.w locret_ED1A-Obj0D_Index
00011A74                            ; ===========================================================================
00011A74                            
00011A74                            Obj0D_Main:				; XREF: Obj0D_Index
00011A74 5428 0024                  		addq.b	#2,$24(a0)
00011A78 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
00011A80 317C 0680 0002             		move.w	#$680,2(a0)
00011A86 117C 0004 0001             		move.b	#4,1(a0)
00011A8C 117C 0018 0019             		move.b	#$18,$19(a0)
00011A92 117C 0004 0018             		move.b	#4,$18(a0)
00011A98                            
00011A98                            Obj0D_Touch:				; XREF: Obj0D_Index
00011A98 3038 D008                  		move.w	($FFFFD008).w,d0
00011A9C 9068 0008                  		sub.w	8(a0),d0
00011AA0 6500                       		bcs.s	locret_EBBA
00011AA2 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00011AA6 6400                       		bcc.s	locret_EBBA	; if not, branch
00011AA8 303C 00CF                  		move.w	#$CF,d0
00011AAC 4EB9 0000 19E4             		jsr	(PlaySound).l	; play signpost	sound
00011AB2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00011AB6 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
00011ABC 5428 0024                  		addq.b	#2,$24(a0)
00011AC0                            
00011AC0                            locret_EBBA:
00011AC0 4E75                       		rts	
00011AC2                            ; ===========================================================================
00011AC2                            
00011AC2                            Obj0D_Spin:				; XREF: Obj0D_Index
00011AC2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
00011AC6 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
00011AC8 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
00011ACE 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
00011AD2 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
00011AD8 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
00011ADA 5428 0024                  		addq.b	#2,$24(a0)
00011ADE                            
00011ADE                            Obj0D_Sparkle:
00011ADE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00011AE2 6A00                       		bpl.s	locret_EC42	; if time remains, branch
00011AE4 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
00011AEA 7000                       		moveq	#0,d0
00011AEC 1028 0034                  		move.b	$34(a0),d0
00011AF0 5428 0034                  		addq.b	#2,$34(a0)
00011AF4 0228 000E 0034             		andi.b	#$E,$34(a0)
00011AFA 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
00011AFE 6100 EE88                  		bsr.w	SingleObjLoad
00011B02 6600                       		bne.s	locret_EC42
00011B04 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
00011B08 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
00011B0E 101A                       		move.b	(a2)+,d0
00011B10 4880                       		ext.w	d0
00011B12 D068 0008                  		add.w	8(a0),d0
00011B16 3340 0008                  		move.w	d0,8(a1)
00011B1A 101A                       		move.b	(a2)+,d0
00011B1C 4880                       		ext.w	d0
00011B1E D068 000C                  		add.w	$C(a0),d0
00011B22 3340 000C                  		move.w	d0,$C(a1)
00011B26 237C 0000 C842 0004        		move.l	#Map_obj25,4(a1)
00011B2E 337C 27B2 0002             		move.w	#$27B2,2(a1)
00011B34 137C 0004 0001             		move.b	#4,1(a1)
00011B3A 137C 0002 0018             		move.b	#2,$18(a1)
00011B40 137C 0008 0019             		move.b	#8,$19(a1)
00011B46                            
00011B46                            locret_EC42:
00011B46 4E75                       		rts	
00011B48                            ; ===========================================================================
00011B48 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00011B4A 0808                       		dc.b	8,   8
00011B4C F000                       		dc.b -$10,   0
00011B4E 18F8                       		dc.b  $18,  -8
00011B50 00F8                       		dc.b	0,  -8
00011B52 1000                       		dc.b  $10,   0
00011B54 E808                       		dc.b -$18,   8
00011B56 1810                       		dc.b  $18, $10
00011B58                            ; ===========================================================================
00011B58                            
00011B58                            Obj0D_SonicRun:				; XREF: Obj0D_Index
00011B58 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011B5C 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00011B60 0838 0001 D022             		btst	#1,($FFFFD022).w
00011B66 6600                       		bne.s	loc_EC70
00011B68 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00011B6E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
00011B74                            
00011B74                            loc_EC70:
00011B74 4A38 D000                  		tst.b	($FFFFD000).w
00011B78 6700                       		beq.s	loc_EC86
00011B7A 3038 D008                  		move.w	($FFFFD008).w,d0
00011B7E 3238 F72A                  		move.w	($FFFFF72A).w,d1
00011B82 0641 0128                  		addi.w	#$128,d1
00011B86 B041                       		cmp.w	d1,d0
00011B88 6500                       		bcs.s	locret_ECEE
00011B8A                            
00011B8A                            loc_EC86:
00011B8A 5428 0024                  		addq.b	#2,$24(a0)
00011B8E                            
00011B8E                            ; ---------------------------------------------------------------------------
00011B8E                            ; Subroutine to	set up bonuses at the end of an	act
00011B8E                            ; ---------------------------------------------------------------------------
00011B8E                            
00011B8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011B8E                            
00011B8E                            
00011B8E                            GotThroughAct:				; XREF: Obj3E_EndAct
00011B8E 4A38 D5C0                  		tst.b	($FFFFD5C0).w
00011B92 6600                       		bne.s	locret_ECEE
00011B94 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
00011B9A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
00011B9E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00011BA2 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00011BA8 7028                       		moveq	#$28,d0
00011BAA 4EB9 0000 1DD4             		jsr	(LoadPLC2).l	; load title card patterns
00011BB0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
00011BB6 7000                       		moveq	#0,d0
00011BB8 1038 FE23                  		move.b	($FFFFFE23).w,d0
00011BBC C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00011BC0 7200                       		moveq	#0,d1
00011BC2 1238 FE24                  		move.b	($FFFFFE24).w,d1
00011BC6 D041                       		add.w	d1,d0		; add up your time
00011BC8 80FC 000F                  		divu.w	#15,d0		; divide by 15
00011BCC 7214                       		moveq	#$14,d1
00011BCE B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011BD0 6500                       		bcs.s	loc_ECD0	; if not, branch
00011BD2 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011BD4                            
00011BD4                            loc_ECD0:
00011BD4 D040                       		add.w	d0,d0
00011BD6 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
00011BDC 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
00011BE0 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011BE4 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
00011BE8 4238 FF90                  		clr.b	($FFFFFF90).w
00011BEC 303C 008E                  		move.w	#$8E,d0
00011BF0 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
00011BF6                            
00011BF6                            locret_ECEE:
00011BF6 4E75                       		rts	
00011BF8                            ; End of function GotThroughAct
00011BF8                            
00011BF8                            ; ===========================================================================
00011BF8 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00011C0C 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011C22                            ; ===========================================================================
00011C22                            
00011C22                            locret_ED1A:				; XREF: Obj0D_Index
00011C22 4E75                       		rts	
00011C24                            ; ===========================================================================
00011C24                            Ani_obj0D:
00011C24                            	include "_anim\obj0D.asm"
00011C24                            ; ---------------------------------------------------------------------------
00011C24                            ; Animation script - signpost
00011C24                            ; ---------------------------------------------------------------------------
00011C24 0000                       		dc.w byte_ED24-Ani_obj0D
00011C26 0000                       		dc.w byte_ED28-Ani_obj0D
00011C28 0000                       		dc.w byte_ED2E-Ani_obj0D
00011C2A 0000                       		dc.w byte_ED34-Ani_obj0D
00011C2C 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
00011C30 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
00011C36 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
00011C3C 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
00011C40 00                         		even
00011C40 00                         		even
00011C40                            
00011C40                            ; ---------------------------------------------------------------------------
00011C40                            ; Sprite mappings - signpost
00011C40                            ; ---------------------------------------------------------------------------
00011C40                            Map_obj0D:
00011C40                            	include "_maps\obj0D.asm"
00011C40                            ; ---------------------------------------------------------------------------
00011C40                            ; Sprite mappings - signpost
00011C40                            ; ---------------------------------------------------------------------------
00011C40 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
00011C44 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
00011C48 0000                       		dc.w byte_ED73-Map_obj0D
00011C4A 03                         byte_ED42:	dc.b 3
00011C4B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
00011C50 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
00011C55 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00011C5A 02                         byte_ED52:	dc.b 2
00011C5B F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
00011C60 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00011C65 02                         byte_ED5D:	dc.b 2
00011C66 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
00011C6B 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00011C70 02                         byte_ED68:	dc.b 2
00011C71 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00011C76 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00011C7B 03                         byte_ED73:	dc.b 3
00011C7C F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
00011C81 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00011C86 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00011C8C 00                         		even
00011C8C 00                         		even
00011C8C                            
00011C8C                            ; ===========================================================================
00011C8C                            ; ---------------------------------------------------------------------------
00011C8C                            ; Object 4C - lava geyser / lavafall producer (MZ)
00011C8C                            ; ---------------------------------------------------------------------------
00011C8C                            
00011C8C                            Obj4C:					; XREF: Obj_Index
00011C8C 7000                       		moveq	#0,d0
00011C8E 1028 0024                  		move.b	$24(a0),d0
00011C92 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00011C96 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
00011C9A 6000 0000                  		bra.w	Obj4D_ChkDel
00011C9E                            ; ===========================================================================
00011C9E 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
00011CA0 0000                       		dc.w loc_EDCC-Obj4C_Index
00011CA2 0000                       		dc.w loc_EE3E-Obj4C_Index
00011CA4 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00011CA6 0000                       		dc.w Obj4C_Display-Obj4C_Index
00011CA8 0000                       		dc.w Obj4C_Delete-Obj4C_Index
00011CAA                            ; ===========================================================================
00011CAA                            
00011CAA                            Obj4C_Main:				; XREF: Obj4C_Index
00011CAA 5428 0024                  		addq.b	#2,$24(a0)
00011CAE 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
00011CB6 317C E3A8 0002             		move.w	#$E3A8,2(a0)
00011CBC 117C 0004 0001             		move.b	#4,1(a0)
00011CC2 117C 0001 0018             		move.b	#1,$18(a0)
00011CC8 117C 0038 0019             		move.b	#$38,$19(a0)
00011CCE 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
00011CD4                            
00011CD4                            loc_EDCC:				; XREF: Obj4C_Index
00011CD4 5368 0032                  		subq.w	#1,$32(a0)
00011CD8 6A00                       		bpl.s	locret_EDF0
00011CDA 3168 0034 0032             		move.w	$34(a0),$32(a0)
00011CE0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011CE4 3228 000C                  		move.w	$C(a0),d1
00011CE8 B041                       		cmp.w	d1,d0
00011CEA 6400                       		bcc.s	locret_EDF0
00011CEC 0441 0170                  		subi.w	#$170,d1
00011CF0 B041                       		cmp.w	d1,d0
00011CF2 6500                       		bcs.s	locret_EDF0
00011CF4 5428 0024                  		addq.b	#2,$24(a0)
00011CF8                            
00011CF8                            locret_EDF0:
00011CF8 4E75                       		rts	
00011CFA                            ; ===========================================================================
00011CFA                            
00011CFA                            Obj4C_MakeLava:				; XREF: Obj4C_Index
00011CFA 5428 0024                  		addq.b	#2,$24(a0)
00011CFE 6100 EC9E                  		bsr.w	SingleObjLoad2
00011D02 6600                       		bne.s	loc_EE18
00011D04 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
00011D08 3368 0008 0008             		move.w	8(a0),8(a1)
00011D0E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011D14 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011D1A 2348 003C                  		move.l	a0,$3C(a1)
00011D1E                            
00011D1E                            loc_EE18:
00011D1E 117C 0001 001C             		move.b	#1,$1C(a0)
00011D24 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00011D28 6700                       		beq.s	Obj4C_Type00	; if yes, branch
00011D2A 117C 0004 001C             		move.b	#4,$1C(a0)
00011D30 6000                       		bra.s	Obj4C_Display
00011D32                            ; ===========================================================================
00011D32                            
00011D32                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
00011D32 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
00011D36 08E9 0001 0022             		bset	#1,$22(a1)
00011D3C 337C FA80 0012             		move.w	#-$580,$12(a1)
00011D42 6000                       		bra.s	Obj4C_Display
00011D44                            ; ===========================================================================
00011D44                            
00011D44                            loc_EE3E:				; XREF: Obj4C_Index
00011D44 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
00011D48 6700                       		beq.s	Obj4C_Display	; if yes, branch
00011D4A 5428 0024                  		addq.b	#2,$24(a0)
00011D4E 4E75                       		rts	
00011D50                            ; ===========================================================================
00011D50                            
00011D50                            Obj4C_Display:				; XREF: Obj4C_Index
00011D50 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00011D56 6100 B354                  		bsr.w	AnimateSprite
00011D5A 6100 E7A6                  		bsr.w	DisplaySprite
00011D5E 4E75                       		rts	
00011D60                            ; ===========================================================================
00011D60                            
00011D60                            Obj4C_Delete:				; XREF: Obj4C_Index
00011D60 117C 0000 001C             		move.b	#0,$1C(a0)
00011D66 117C 0002 0024             		move.b	#2,$24(a0)
00011D6C 4A28 0028                  		tst.b	$28(a0)
00011D70 6700 E7CC                  		beq.w	DeleteObject
00011D74 4E75                       		rts	
00011D76                            ; ===========================================================================
00011D76                            ; ---------------------------------------------------------------------------
00011D76                            ; Object 4D - lava geyser / lavafall (MZ)
00011D76                            ; ---------------------------------------------------------------------------
00011D76                            
00011D76                            Obj4D:					; XREF: Obj_Index
00011D76 7000                       		moveq	#0,d0
00011D78 1028 0024                  		move.b	$24(a0),d0
00011D7C 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
00011D80 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
00011D84 6000 E77C                  		bra.w	DisplaySprite
00011D88                            ; ===========================================================================
00011D88 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00011D8A 0000                       		dc.w Obj4D_Action-Obj4D_Index
00011D8C 0000                       		dc.w loc_EFFC-Obj4D_Index
00011D8E 0000                       		dc.w Obj4D_Delete-Obj4D_Index
00011D90                            
00011D90 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
00011D94                            ; ===========================================================================
00011D94                            
00011D94                            Obj4D_Main:				; XREF: Obj4D_Index
00011D94 5428 0024                  		addq.b	#2,$24(a0)
00011D98 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011D9E 4A28 0028                  		tst.b	$28(a0)
00011DA2 6700                       		beq.s	loc_EEA4
00011DA4 0468 0250 000C             		subi.w	#$250,$C(a0)
00011DAA                            
00011DAA                            loc_EEA4:
00011DAA 7000                       		moveq	#0,d0
00011DAC 1028 0028                  		move.b	$28(a0),d0
00011DB0 D040                       		add.w	d0,d0
00011DB2 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
00011DB8 2248                       		movea.l	a0,a1
00011DBA 7201                       		moveq	#1,d1
00011DBC 6100                       		bsr.s	Obj4D_MakeLava
00011DBE 6000                       		bra.s	loc_EF10
00011DC0                            ; ===========================================================================
00011DC0                            
00011DC0                            Obj4D_Loop:
00011DC0 6100 EBDC                  		bsr.w	SingleObjLoad2
00011DC4 6600                       		bne.s	loc_EF0A
00011DC6                            
00011DC6                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00011DC6 12BC 004D                  		move.b	#$4D,0(a1)
00011DCA 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
00011DD2 337C 63A8 0002             		move.w	#$63A8,2(a1)
00011DD8 137C 0004 0001             		move.b	#4,1(a1)
00011DDE 137C 0020 0019             		move.b	#$20,$19(a1)
00011DE4 3368 0008 0008             		move.w	8(a0),8(a1)
00011DEA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011DF0 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011DF6 137C 0001 0018             		move.b	#1,$18(a1)
00011DFC 137C 0005 001C             		move.b	#5,$1C(a1)
00011E02 4A28 0028                  		tst.b	$28(a0)
00011E06 6700                       		beq.s	loc_EF0A
00011E08 137C 0002 001C             		move.b	#2,$1C(a1)
00011E0E                            
00011E0E                            loc_EF0A:
00011E0E 51C9 FFB0                  		dbf	d1,Obj4D_Loop
00011E12 4E75                       		rts	
00011E14                            ; ===========================================================================
00011E14                            
00011E14                            loc_EF10:				; XREF: Obj4D_Main
00011E14 0669 0060 000C             		addi.w	#$60,$C(a1)
00011E1A 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011E20 0669 0060 0030             		addi.w	#$60,$30(a1)
00011E26 137C 0093 0020             		move.b	#$93,$20(a1)
00011E2C 137C 0080 0016             		move.b	#$80,$16(a1)
00011E32 08E9 0004 0001             		bset	#4,1(a1)
00011E38 5829 0024                  		addq.b	#4,$24(a1)
00011E3C 2348 003C                  		move.l	a0,$3C(a1)
00011E40 4A28 0028                  		tst.b	$28(a0)
00011E44 6700                       		beq.s	Obj4D_PlaySnd
00011E46 7200                       		moveq	#0,d1
00011E48 6100 FF76                  		bsr.w	Obj4D_Loop
00011E4C 5429 0024                  		addq.b	#2,$24(a1)
00011E50 08E9 0004 0002             		bset	#4,2(a1)
00011E56 0669 0100 000C             		addi.w	#$100,$C(a1)
00011E5C 137C 0000 0018             		move.b	#0,$18(a1)
00011E62 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011E68 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00011E6E 117C 0000 0028             		move.b	#0,$28(a0)
00011E74                            
00011E74                            Obj4D_PlaySnd:
00011E74 303C 00C8                  		move.w	#$C8,d0
00011E78 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play flame sound
00011E7E                            
00011E7E                            Obj4D_Action:				; XREF: Obj4D_Index
00011E7E 7000                       		moveq	#0,d0
00011E80 1028 0028                  		move.b	$28(a0),d0
00011E84 D040                       		add.w	d0,d0
00011E86 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00011E8A 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00011E8E 6100 E64C                  		bsr.w	SpeedToPos
00011E92 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00011E98 6100 B212                  		bsr.w	AnimateSprite
00011E9C                            
00011E9C                            Obj4D_ChkDel:				; XREF: Obj4C
00011E9C 3028 0008                  		move.w	8(a0),d0
00011EA0 0240 FF80                  		andi.w	#$FF80,d0
00011EA4 3238 F700                  		move.w	($FFFFF700).w,d1
00011EA8 0441 0080                  		subi.w	#$80,d1
00011EAC 0241 FF80                  		andi.w	#$FF80,d1
00011EB0 9041                       		sub.w	d1,d0
00011EB2 0C40 0280                  		cmpi.w	#$280,d0
00011EB6 6200 E686                  		bhi.w	DeleteObject
00011EBA 4E75                       		rts	
00011EBC                            ; ===========================================================================
00011EBC 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
00011EBE 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
00011EC0                            ; ===========================================================================
00011EC0                            
00011EC0                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
00011EC0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00011EC6 3028 0030                  		move.w	$30(a0),d0
00011ECA B068 000C                  		cmp.w	$C(a0),d0
00011ECE 6400                       		bcc.s	locret_EFDA
00011ED0 5828 0024                  		addq.b	#4,$24(a0)
00011ED4 2268 003C                  		movea.l	$3C(a0),a1
00011ED8 137C 0003 001C             		move.b	#3,$1C(a1)
00011EDE                            
00011EDE                            locret_EFDA:
00011EDE 4E75                       		rts	
00011EE0                            ; ===========================================================================
00011EE0                            
00011EE0                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
00011EE0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00011EE6 3028 0030                  		move.w	$30(a0),d0
00011EEA B068 000C                  		cmp.w	$C(a0),d0
00011EEE 6400                       		bcc.s	locret_EFFA
00011EF0 5828 0024                  		addq.b	#4,$24(a0)
00011EF4 2268 003C                  		movea.l	$3C(a0),a1
00011EF8 137C 0001 001C             		move.b	#1,$1C(a1)
00011EFE                            
00011EFE                            locret_EFFA:
00011EFE 4E75                       		rts	
00011F00                            ; ===========================================================================
00011F00                            
00011F00                            loc_EFFC:				; XREF: Obj4D_Index
00011F00 2268 003C                  		movea.l	$3C(a0),a1
00011F04 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00011F0A 6700 0000                  		beq.w	Obj4D_Delete
00011F0E 3029 000C                  		move.w	$C(a1),d0
00011F12 0640 0060                  		addi.w	#$60,d0
00011F16 3140 000C                  		move.w	d0,$C(a0)
00011F1A 9068 0030                  		sub.w	$30(a0),d0
00011F1E 4440                       		neg.w	d0
00011F20 7208                       		moveq	#8,d1
00011F22 0C40 0040                  		cmpi.w	#$40,d0
00011F26 6C00                       		bge.s	loc_F026
00011F28 720B                       		moveq	#$B,d1
00011F2A                            
00011F2A                            loc_F026:
00011F2A 0C40 0080                  		cmpi.w	#$80,d0
00011F2E 6F00                       		ble.s	loc_F02E
00011F30 720E                       		moveq	#$E,d1
00011F32                            
00011F32                            loc_F02E:
00011F32 5328 001E                  		subq.b	#1,$1E(a0)
00011F36 6A00                       		bpl.s	loc_F04C
00011F38 117C 0007 001E             		move.b	#7,$1E(a0)
00011F3E 5228 001B                  		addq.b	#1,$1B(a0)
00011F42 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00011F48 6500                       		bcs.s	loc_F04C
00011F4A 117C 0000 001B             		move.b	#0,$1B(a0)
00011F50                            
00011F50                            loc_F04C:
00011F50 1028 001B                  		move.b	$1B(a0),d0
00011F54 D001                       		add.b	d1,d0
00011F56 1140 001A                  		move.b	d0,$1A(a0)
00011F5A 6000 FF40                  		bra.w	Obj4D_ChkDel
00011F5E                            ; ===========================================================================
00011F5E                            
00011F5E                            Obj4D_Delete:				; XREF: Obj4D_Index
00011F5E 6000 E5DE                  		bra.w	DeleteObject
00011F62                            ; ===========================================================================
00011F62                            ; ---------------------------------------------------------------------------
00011F62                            ; Object 4E - advancing	wall of	lava (MZ)
00011F62                            ; ---------------------------------------------------------------------------
00011F62                            
00011F62                            Obj4E:					; XREF: Obj_Index
00011F62 7000                       		moveq	#0,d0
00011F64 1028 0024                  		move.b	$24(a0),d0
00011F68 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00011F6C 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00011F70                            ; ===========================================================================
00011F70 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00011F72 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00011F74 0000                       		dc.w Obj4E_Action-Obj4E_Index
00011F76 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00011F78 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00011F7A                            ; ===========================================================================
00011F7A                            
00011F7A                            Obj4E_Main:				; XREF: Obj4E_Index
00011F7A 5828 0024                  		addq.b	#4,$24(a0)
00011F7E 2248                       		movea.l	a0,a1
00011F80 7201                       		moveq	#1,d1
00011F82 6000                       		bra.s	Obj4E_Main2
00011F84                            ; ===========================================================================
00011F84                            
00011F84                            Obj4E_Loop:
00011F84 6100 EA18                  		bsr.w	SingleObjLoad2
00011F88 6600                       		bne.s	loc_F0C8
00011F8A                            
00011F8A                            Obj4E_Main2:				; XREF: Obj4E_Main
00011F8A 12BC 004E                  		move.b	#$4E,0(a1)	; load object
00011F8E 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00011F96 337C 63A8 0002             		move.w	#$63A8,2(a1)
00011F9C 137C 0004 0001             		move.b	#4,1(a1)
00011FA2 137C 0050 0019             		move.b	#$50,$19(a1)
00011FA8 3368 0008 0008             		move.w	8(a0),8(a1)
00011FAE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011FB4 137C 0001 0018             		move.b	#1,$18(a1)
00011FBA 137C 0000 001C             		move.b	#0,$1C(a1)
00011FC0 137C 0094 0020             		move.b	#$94,$20(a1)
00011FC6 2348 003C                  		move.l	a0,$3C(a1)
00011FCA                            
00011FCA                            loc_F0C8:
00011FCA 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
00011FCE                            
00011FCE 5C29 0024                  		addq.b	#6,$24(a1)
00011FD2 137C 0004 001A             		move.b	#4,$1A(a1)
00011FD8                            
00011FD8                            Obj4E_Action:				; XREF: Obj4E_Index
00011FD8 3038 D008                  		move.w	($FFFFD008).w,d0
00011FDC 9068 0008                  		sub.w	8(a0),d0
00011FE0 6400                       		bcc.s	Obj4E_ChkSonic
00011FE2 4440                       		neg.w	d0
00011FE4                            
00011FE4                            Obj4E_ChkSonic:
00011FE4 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00011FE8 6400                       		bcc.s	Obj4E_Move	; if not, branch
00011FEA 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011FEE 9068 000C                  		sub.w	$C(a0),d0
00011FF2 6400                       		bcc.s	loc_F0F4
00011FF4 4440                       		neg.w	d0
00011FF6                            
00011FF6                            loc_F0F4:
00011FF6 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00011FFA 6400                       		bcc.s	Obj4E_Move	; if not, branch
00011FFC 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
00012002 6000                       		bra.s	Obj4E_Solid
00012004                            ; ===========================================================================
00012004                            
00012004                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
00012004 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00012008 6700                       		beq.s	Obj4E_Solid	; if not, branch
0001200A 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
00012010 5528 0024                  		subq.b	#2,$24(a0)
00012014                            
00012014                            Obj4E_Solid:				; XREF: Obj4E_Index
00012014 323C 002B                  		move.w	#$2B,d1
00012018 343C 0018                  		move.w	#$18,d2
0001201C 3602                       		move.w	d2,d3
0001201E 5243                       		addq.w	#1,d3
00012020 3828 0008                  		move.w	8(a0),d4
00012024 1028 0024                  		move.b	$24(a0),d0
00012028 3F00                       		move.w	d0,-(sp)
0001202A 6100 0000                  		bsr.w	SolidObject
0001202E 301F                       		move.w	(sp)+,d0
00012030 1140 0024                  		move.b	d0,$24(a0)
00012034 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0001203A 6600                       		bne.s	Obj4E_Animate	; if not, branch
0001203C 4268 0010                  		clr.w	$10(a0)		; stop object moving
00012040 4228 0036                  		clr.b	$36(a0)
00012044                            
00012044                            Obj4E_Animate:
00012044 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0001204A 6100 B060                  		bsr.w	AnimateSprite
0001204E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00012054 6400                       		bcc.s	Obj4E_ChkDel
00012056 6100 E484                  		bsr.w	SpeedToPos
0001205A                            
0001205A                            Obj4E_ChkDel:
0001205A 6100 E4A6                  		bsr.w	DisplaySprite
0001205E 4A28 0036                  		tst.b	$36(a0)
00012062 6600                       		bne.s	locret_F17E
00012064 3028 0008                  		move.w	8(a0),d0
00012068 0240 FF80                  		andi.w	#$FF80,d0
0001206C 3238 F700                  		move.w	($FFFFF700).w,d1
00012070 0441 0080                  		subi.w	#$80,d1
00012074 0241 FF80                  		andi.w	#$FF80,d1
00012078 9041                       		sub.w	d1,d0
0001207A 0C40 0280                  		cmpi.w	#$280,d0
0001207E 6200                       		bhi.s	Obj4E_ChkGone
00012080                            
00012080                            locret_F17E:
00012080 4E75                       		rts	
00012082                            ; ===========================================================================
00012082                            
00012082                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00012082 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012086 7000                       		moveq	#0,d0
00012088 1028 0023                  		move.b	$23(a0),d0
0001208C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012092 117C 0008 0024             		move.b	#8,$24(a0)
00012098 4E75                       		rts	
0001209A                            ; ===========================================================================
0001209A                            
0001209A                            Obj4E_Move2:				; XREF: Obj4E_Index
0001209A 2268 003C                  		movea.l	$3C(a0),a1
0001209E 0C29 0008 0024             		cmpi.b	#8,$24(a1)
000120A4 6700                       		beq.s	Obj4E_Delete
000120A6 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
000120AC 0468 0080 0008             		subi.w	#$80,8(a0)
000120B2 6000 E44E                  		bra.w	DisplaySprite
000120B6                            ; ===========================================================================
000120B6                            
000120B6                            Obj4E_Delete:				; XREF: Obj4E_Index
000120B6 6000 E486                  		bra.w	DeleteObject
000120BA                            ; ===========================================================================
000120BA                            ; ---------------------------------------------------------------------------
000120BA                            ; Object 54 - invisible	lava tag (MZ)
000120BA                            ; ---------------------------------------------------------------------------
000120BA                            
000120BA                            Obj54:					; XREF: Obj_Index
000120BA 7000                       		moveq	#0,d0
000120BC 1028 0024                  		move.b	$24(a0),d0
000120C0 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
000120C4 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
000120C8                            ; ===========================================================================
000120C8 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
000120CA 0000                       		dc.w Obj54_ChkDel-Obj54_Index
000120CC                            
000120CC 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
000120D0                            ; ===========================================================================
000120D0                            
000120D0                            Obj54_Main:				; XREF: Obj54_Index
000120D0 5428 0024                  		addq.b	#2,$24(a0)
000120D4 7000                       		moveq	#0,d0
000120D6 1028 0028                  		move.b	$28(a0),d0
000120DA 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
000120E0 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
000120E8 117C 0084 0001             		move.b	#$84,1(a0)
000120EE                            
000120EE                            Obj54_ChkDel:				; XREF: Obj54_Index
000120EE 3028 0008                  		move.w	8(a0),d0
000120F2 0240 FF80                  		andi.w	#$FF80,d0
000120F6 3238 F700                  		move.w	($FFFFF700).w,d1
000120FA 0441 0080                  		subi.w	#$80,d1
000120FE 0241 FF80                  		andi.w	#$FF80,d1
00012102 9041                       		sub.w	d1,d0
00012104 6B00 E438                  		bmi.w	DeleteObject
00012108 0C40 0280                  		cmpi.w	#$280,d0
0001210C 6200 E430                  		bhi.w	DeleteObject
00012110 4E75                       		rts	
00012112                            ; ===========================================================================
00012112                            ; ---------------------------------------------------------------------------
00012112                            ; Sprite mappings - invisible lava tag (MZ)
00012112                            ; ---------------------------------------------------------------------------
00012112                            Map_obj54:
00012112                            	include "_maps\obj54.asm"
00012112                            ; ---------------------------------------------------------------------------
00012112                            ; Sprite mappings - invisible lava tag (MZ)
00012112                            ; ---------------------------------------------------------------------------
00012112 0000                       		dc.w byte_F212-Map_obj54
00012114 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00012116 00                         		even
00012116 00                         		even
00012116                            
00012116                            Ani_obj4C:
00012116                            	include "_anim\obj4C.asm"
00012116                            ; ---------------------------------------------------------------------------
00012116                            ; Animation script - geyser of lava (MZ)
00012116                            ; ---------------------------------------------------------------------------
00012116 0000                       		dc.w byte_F220-Ani_obj4C
00012118 0000                       		dc.w byte_F22A-Ani_obj4C
0001211A 0000                       		dc.w byte_F22E-Ani_obj4C
0001211C 0000                       		dc.w byte_F232-Ani_obj4C
0001211E 0000                       		dc.w byte_F23A-Ani_obj4C
00012120 0000                       		dc.w byte_F23E-Ani_obj4C
00012122 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0001212C 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00012130 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00012134 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0001213C 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00012140 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00012144                            		even
00012144                            		even
00012144                            
00012144                            Ani_obj4E:
00012144                            	include "_anim\obj4E.asm"
00012144                            ; ---------------------------------------------------------------------------
00012144                            ; Animation script - advancing wall of lava (MZ)
00012144                            ; ---------------------------------------------------------------------------
00012144 0000                       		dc.w byte_F244-Ani_obj4E
00012146 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0001214C                            		even
0001214C                            		even
0001214C                            
0001214C                            ; ---------------------------------------------------------------------------
0001214C                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0001214C                            ; ---------------------------------------------------------------------------
0001214C                            Map_obj4C:
0001214C                            	include "_maps\obj4C.asm"
0001214C                            ; ---------------------------------------------------------------------------
0001214C                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0001214C                            ; ---------------------------------------------------------------------------
0001214C 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00012150 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00012154 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00012158 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0001215C 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00012160 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00012164 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00012168 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0001216C 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00012170 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00012174 02                         byte_F272:	dc.b 2
00012175 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0001217A EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0001217F 02                         byte_F27D:	dc.b 2
00012180 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00012185 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0001218A 04                         byte_F288:	dc.b 4
0001218B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00012190 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00012195 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0001219A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0001219F 04                         byte_F29D:	dc.b 4
000121A0 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000121A5 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000121AA F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000121AF EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000121B4 06                         byte_F2B2:	dc.b 6
000121B5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000121BA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000121BF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000121C4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000121C9 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000121CE E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000121D3 06                         byte_F2D1:	dc.b 6
000121D4 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000121D9 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000121DE F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000121E3 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000121E8 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
000121ED E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
000121F2 02                         byte_F2F0:	dc.b 2
000121F3 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
000121F8 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
000121FD 02                         byte_F2FB:	dc.b 2
000121FE E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00012203 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00012208 0A                         byte_F306:	dc.b $A
00012209 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001220E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00012213 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00012218 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001221D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00012222 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00012227 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001222C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00012231 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00012236 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001223B 0A                         byte_F339:	dc.b $A
0001223C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00012241 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00012246 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001224B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00012250 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00012255 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001225A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001225F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00012264 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00012269 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001226E 0A                         byte_F36C:	dc.b $A
0001226F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00012274 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00012279 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001227E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00012283 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00012288 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001228D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00012292 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00012297 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001229C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000122A1 06                         byte_F39F:	dc.b 6
000122A2 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000122A7 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000122AC B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000122B1 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000122B6 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000122BB D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000122C0 06                         byte_F3BE:	dc.b 6
000122C1 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000122C6 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000122CB B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000122D0 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000122D5 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000122DA D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000122DF 06                         byte_F3DD:	dc.b 6
000122E0 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000122E5 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000122EA B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000122EF B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000122F4 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000122F9 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000122FE 10                         byte_F3FC:	dc.b $10
000122FF 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00012304 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00012309 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001230E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00012313 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00012318 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001231D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00012322 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00012327 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0001232C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00012331 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00012336 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0001233B 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00012340 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00012345 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0001234A 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0001234F 10                         byte_F44D:	dc.b $10
00012350 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00012355 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001235A B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001235F B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00012364 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00012369 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001236E F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00012373 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00012378 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001237D 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00012382 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00012387 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0001238C 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00012391 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00012396 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0001239B 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000123A0 10                         byte_F49E:	dc.b $10
000123A1 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000123A6 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000123AB B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000123B0 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000123B5 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000123BA D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000123BF F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000123C4 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000123C9 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000123CE 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000123D3 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
000123D8 300F 0860 00               		dc.b $30, $F, 8, $60, 0
000123DD 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
000123E2 500F 0860 00               		dc.b $50, $F, 8, $60, 0
000123E7 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
000123EC 700F 0860 00               		dc.b $70, $F, 8, $60, 0
000123F1 06                         byte_F4EF:	dc.b 6
000123F2 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
000123F7 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
000123FC E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00012401 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00012406 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0001240B D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00012410 06                         byte_F50E:	dc.b 6
00012411 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00012416 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001241B E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00012420 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00012425 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0001242A D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001242F 00                         byte_F52D:	dc.b 0
00012430                            		even
00012430                            		even
00012430                            
00012430                            ; ---------------------------------------------------------------------------
00012430                            ; Sprite mappings - advancing wall of lava (MZ)
00012430                            ; ---------------------------------------------------------------------------
00012430                            Map_obj4E:
00012430                            	include "_maps\obj4E.asm"
00012430                            ; ---------------------------------------------------------------------------
00012430                            ; Sprite mappings - advancing wall of lava (MZ)
00012430                            ; ---------------------------------------------------------------------------
00012430 0000                       		dc.w byte_F538-Map_obj4E
00012432 0000                       		dc.w byte_F566-Map_obj4E
00012434 0000                       		dc.w byte_F594-Map_obj4E
00012436 0000                       		dc.w byte_F5C2-Map_obj4E
00012438 0000                       		dc.w byte_F5F0-Map_obj4E
0001243A 09                         byte_F538:	dc.b 9
0001243B E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00012440 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00012445 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001244A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001244F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00012454 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00012459 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001245E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00012463 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00012468 09                         byte_F566:	dc.b 9
00012469 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0001246E 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00012473 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00012478 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001247D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00012482 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00012487 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001248C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00012491 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00012496 09                         byte_F594:	dc.b 9
00012497 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0001249C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000124A1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000124A6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000124AB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000124B0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000124B5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000124BA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000124BF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000124C4 09                         byte_F5C2:	dc.b 9
000124C5 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000124CA 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
000124CF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000124D4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000124D9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000124DE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000124E3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000124E8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000124ED 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000124F2 08                         byte_F5F0:	dc.b 8
000124F3 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
000124F8 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000124FD E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00012502 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00012507 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001250C 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00012511 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00012516 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001251C 00                         		even
0001251C 00                         		even
0001251C                            
0001251C                            ; ===========================================================================
0001251C                            ; ---------------------------------------------------------------------------
0001251C                            ; Object 40 - Moto Fusion enemy (GHZ)
0001251C                            ; ---------------------------------------------------------------------------
0001251C                            
0001251C                            Obj40:					; XREF: Obj_Index
0001251C 7000                       		moveq	#0,d0
0001251E 1028 0024                  		move.b	$24(a0),d0
00012522 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00012526 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0001252A                            ; ===========================================================================
0001252A 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0001252C 0000                       		dc.w Obj40_Action-Obj40_Index
0001252E 0000                       		dc.w Obj40_Animate-Obj40_Index
00012530 0000                       		dc.w Obj40_Delete-Obj40_Index
00012532                            ; ===========================================================================
00012532                            
00012532                            Obj40_Main:				; XREF: Obj40_Index
00012532 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0001253A 317C 2430 0002             		move.w	#$2430,2(a0)
00012540 117C 0004 0001             		move.b	#4,1(a0)
00012546 117C 0004 0018             		move.b	#4,$18(a0)
0001254C 117C 0014 0019             		move.b	#$14,$19(a0)
00012552 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00012556 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00012558 117C 000E 0016             		move.b	#$E,$16(a0)
0001255E 117C 0008 0017             		move.b	#8,$17(a0)
00012564 117C 000C 0020             		move.b	#$C,$20(a0)
0001256A 6100 DF18                  		bsr.w	ObjectFall
0001256E 4EB9 0000 0000             		jsr	ObjHitFloor
00012574 4A41                       		tst.w	d1
00012576 6A00                       		bpl.s	locret_F68A
00012578 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001257C 317C 0000 0012             		move.w	#0,$12(a0)
00012582 5428 0024                  		addq.b	#2,$24(a0)
00012586 0868 0000 0022             		bchg	#0,$22(a0)
0001258C                            
0001258C                            locret_F68A:
0001258C 4E75                       		rts	
0001258E                            ; ===========================================================================
0001258E                            
0001258E                            Obj40_SetSmoke:				; XREF: Obj40_Main
0001258E 5828 0024                  		addq.b	#4,$24(a0)
00012592 6000 0000                  		bra.w	Obj40_Animate
00012596                            ; ===========================================================================
00012596                            
00012596                            Obj40_Action:				; XREF: Obj40_Index
00012596 7000                       		moveq	#0,d0
00012598 1028 0025                  		move.b	$25(a0),d0
0001259C 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
000125A0 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
000125A4 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000125AA 6100 AB00                  		bsr.w	AnimateSprite
000125AE 4EF9 0000 0000             		jmp	MarkObjGone
000125B4                            
000125B4                            ; ===========================================================================
000125B4 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000125B6 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000125B8                            ; ===========================================================================
000125B8                            
000125B8                            Obj40_Move:				; XREF: Obj40_Index2
000125B8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000125BC 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000125BE 5428 0025                  		addq.b	#2,$25(a0)
000125C2 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000125C8 117C 0001 001C             		move.b	#1,$1C(a0)
000125CE 0868 0000 0022             		bchg	#0,$22(a0)
000125D4 6600                       		bne.s	locret_F70A
000125D6 4468 0010                  		neg.w	$10(a0)		; change direction
000125DA                            
000125DA                            locret_F70A:
000125DA 4E75                       		rts	
000125DC                            ; ===========================================================================
000125DC                            
000125DC                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000125DC 6100 DEFE                  		bsr.w	SpeedToPos
000125E0 4EB9 0000 0000             		jsr	ObjHitFloor
000125E6 0C41 FFF8                  		cmpi.w	#-8,d1
000125EA 6D00                       		blt.s	Obj40_Pause
000125EC 0C41 000C                  		cmpi.w	#$C,d1
000125F0 6C00                       		bge.s	Obj40_Pause
000125F2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000125F6 5328 0033                  		subq.b	#1,$33(a0)
000125FA 6A00                       		bpl.s	locret_F756
000125FC 117C 000F 0033             		move.b	#$F,$33(a0)
00012602 6100 E384                  		bsr.w	SingleObjLoad
00012606 6600                       		bne.s	locret_F756
00012608 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0001260C 3368 0008 0008             		move.w	8(a0),8(a1)
00012612 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012618 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001261E 137C 0002 001C             		move.b	#2,$1C(a1)
00012624                            
00012624                            locret_F756:
00012624 4E75                       		rts	
00012626                            ; ===========================================================================
00012626                            
00012626                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00012626 5528 0025                  		subq.b	#2,$25(a0)
0001262A 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00012630 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00012636 117C 0000 001C             		move.b	#0,$1C(a0)
0001263C 4E75                       		rts	
0001263E                            ; ===========================================================================
0001263E                            
0001263E                            Obj40_Animate:				; XREF: Obj40_Index
0001263E 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00012644 6100 AA66                  		bsr.w	AnimateSprite
00012648 6000 DEB8                  		bra.w	DisplaySprite
0001264C                            ; ===========================================================================
0001264C                            
0001264C                            Obj40_Delete:				; XREF: Obj40_Index
0001264C 6000 DEF0                  		bra.w	DeleteObject
00012650                            
00012650                            Ani_obj40:
00012650                            	include "_anim\obj40.asm"
00012650                            ; ---------------------------------------------------------------------------
00012650                            ; Animation script - Motobug enemy
00012650                            ; ---------------------------------------------------------------------------
00012650 0000                       		dc.w byte_F788-Ani_obj40
00012652 0000                       		dc.w byte_F78C-Ani_obj40
00012654 0000                       		dc.w byte_F792-Ani_obj40
00012656 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0001265A 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00012660 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0001266E                            		even
0001266E                            		even
0001266E                            
0001266E                            ; ---------------------------------------------------------------------------
0001266E                            ; Sprite mappings - Moto Bug enemy (GHZ)
0001266E                            ; ---------------------------------------------------------------------------
0001266E                            Map_obj40:
0001266E                            	include "_maps\obj40.asm"
0001266E                            ; --------------------------------------------------------------------------------
0001266E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001266E                            ; --------------------------------------------------------------------------------
0001266E                            
0001266E                            SME_k99fX:	
0001266E 0000 0000                  		dc.w SME_k99fX_14-SME_k99fX, SME_k99fX_88-SME_k99fX	
00012672 0000 0000                  		dc.w SME_k99fX_FC-SME_k99fX, SME_k99fX_170-SME_k99fX	
00012676 0000 0000                  		dc.w SME_k99fX_171-SME_k99fX, SME_k99fX_172-SME_k99fX	
0001267A 0000 0000                  		dc.w SME_k99fX_173-SME_k99fX, SME_k99fX_174-SME_k99fX	
0001267E 0000 0000                  		dc.w SME_k99fX_175-SME_k99fX, SME_k99fX_176-SME_k99fX	
00012682 17                         SME_k99fX_14:	dc.b $17	
00012683 0600 0800 13               		dc.b 6, 0, 8, 0, $13	
00012688 0600 0801 0B               		dc.b 6, 0, 8, 1, $B	
0001268D 0600 0802 03               		dc.b 6, 0, 8, 2, 3	
00012692 0600 0803 FB               		dc.b 6, 0, 8, 3, $FB	
00012697 0600 0804 F3               		dc.b 6, 0, 8, 4, $F3	
0001269C FE00 0805 13               		dc.b $FE, 0, 8, 5, $13	
000126A1 FE00 0806 0B               		dc.b $FE, 0, 8, 6, $B	
000126A6 FE00 0807 03               		dc.b $FE, 0, 8, 7, 3	
000126AB FE00 0808 FB               		dc.b $FE, 0, 8, 8, $FB	
000126B0 FE00 0809 F3               		dc.b $FE, 0, 8, 9, $F3	
000126B5 F600 080A 0B               		dc.b $F6, 0, 8, $A, $B	
000126BA F600 080B 03               		dc.b $F6, 0, 8, $B, 3	
000126BF F600 080C FB               		dc.b $F6, 0, 8, $C, $FB	
000126C4 F600 080D F3               		dc.b $F6, 0, 8, $D, $F3	
000126C9 F600 080E EB               		dc.b $F6, 0, 8, $E, $EB	
000126CE EE00 080F 0B               		dc.b $EE, 0, 8, $F, $B	
000126D3 EE00 0810 03               		dc.b $EE, 0, 8, $10, 3	
000126D8 EE00 0811 FB               		dc.b $EE, 0, 8, $11, $FB	
000126DD EE00 0812 F3               		dc.b $EE, 0, 8, $12, $F3	
000126E2 EE00 0813 EB               		dc.b $EE, 0, 8, $13, $EB	
000126E7 E600 0814 03               		dc.b $E6, 0, 8, $14, 3	
000126EC E600 0815 FB               		dc.b $E6, 0, 8, $15, $FB	
000126F1 E600 0816 F3               		dc.b $E6, 0, 8, $16, $F3	
000126F6 17                         SME_k99fX_88:	dc.b $17	
000126F7 0600 0817 13               		dc.b 6, 0, 8, $17, $13	
000126FC 0600 0818 0B               		dc.b 6, 0, 8, $18, $B	
00012701 0600 0819 03               		dc.b 6, 0, 8, $19, 3	
00012706 0600 081A FB               		dc.b 6, 0, 8, $1A, $FB	
0001270B 0600 081B F3               		dc.b 6, 0, 8, $1B, $F3	
00012710 FE00 081C 13               		dc.b $FE, 0, 8, $1C, $13	
00012715 FE00 081D 0B               		dc.b $FE, 0, 8, $1D, $B	
0001271A FE00 081E 03               		dc.b $FE, 0, 8, $1E, 3	
0001271F FE00 081F FB               		dc.b $FE, 0, 8, $1F, $FB	
00012724 FE00 0820 F3               		dc.b $FE, 0, 8, $20, $F3	
00012729 F600 0821 0B               		dc.b $F6, 0, 8, $21, $B	
0001272E F600 0822 03               		dc.b $F6, 0, 8, $22, 3	
00012733 F600 0823 FB               		dc.b $F6, 0, 8, $23, $FB	
00012738 F600 0824 F3               		dc.b $F6, 0, 8, $24, $F3	
0001273D F600 0825 EB               		dc.b $F6, 0, 8, $25, $EB	
00012742 EE00 0826 0B               		dc.b $EE, 0, 8, $26, $B	
00012747 EE00 0827 03               		dc.b $EE, 0, 8, $27, 3	
0001274C EE00 0828 FB               		dc.b $EE, 0, 8, $28, $FB	
00012751 EE00 0829 F3               		dc.b $EE, 0, 8, $29, $F3	
00012756 EE00 082A EB               		dc.b $EE, 0, 8, $2A, $EB	
0001275B E600 082B 03               		dc.b $E6, 0, 8, $2B, 3	
00012760 E600 082C FB               		dc.b $E6, 0, 8, $2C, $FB	
00012765 E600 082D F3               		dc.b $E6, 0, 8, $2D, $F3	
0001276A 17                         SME_k99fX_FC:	dc.b $17	
0001276B 0600 082E 13               		dc.b 6, 0, 8, $2E, $13	
00012770 0600 082F 0B               		dc.b 6, 0, 8, $2F, $B	
00012775 0600 0830 03               		dc.b 6, 0, 8, $30, 3	
0001277A 0600 0831 FB               		dc.b 6, 0, 8, $31, $FB	
0001277F 0600 0832 F3               		dc.b 6, 0, 8, $32, $F3	
00012784 FE00 0834 13               		dc.b $FE, 0, 8, $34, $13	
00012789 FE00 0835 0B               		dc.b $FE, 0, 8, $35, $B	
0001278E FE00 0836 03               		dc.b $FE, 0, 8, $36, 3	
00012793 FE00 0837 FB               		dc.b $FE, 0, 8, $37, $FB	
00012798 FE00 0838 F3               		dc.b $FE, 0, 8, $38, $F3	
0001279D F600 083A 0B               		dc.b $F6, 0, 8, $3A, $B	
000127A2 F600 083B 03               		dc.b $F6, 0, 8, $3B, 3	
000127A7 F600 083C FB               		dc.b $F6, 0, 8, $3C, $FB	
000127AC F600 083D F3               		dc.b $F6, 0, 8, $3D, $F3	
000127B1 F600 083E EB               		dc.b $F6, 0, 8, $3E, $EB	
000127B6 EE00 083F 0B               		dc.b $EE, 0, 8, $3F, $B	
000127BB EE00 0840 03               		dc.b $EE, 0, 8, $40, 3	
000127C0 EE00 0841 FB               		dc.b $EE, 0, 8, $41, $FB	
000127C5 EE00 0842 F3               		dc.b $EE, 0, 8, $42, $F3	
000127CA EE00 0843 EB               		dc.b $EE, 0, 8, $43, $EB	
000127CF E600 0844 03               		dc.b $E6, 0, 8, $44, 3	
000127D4 E600 0845 FB               		dc.b $E6, 0, 8, $45, $FB	
000127D9 E600 0846 F3               		dc.b $E6, 0, 8, $46, $F3	
000127DE 00                         SME_k99fX_170:	dc.b 0	
000127DF 00                         SME_k99fX_171:	dc.b 0	
000127E0 00                         SME_k99fX_172:	dc.b 0	
000127E1 00                         SME_k99fX_173:	dc.b 0	
000127E2 00                         SME_k99fX_174:	dc.b 0	
000127E3 00                         SME_k99fX_175:	dc.b 0	
000127E4 00                         SME_k99fX_176:	dc.b 0	
000127E6 00                         		even
000127E6 00                         		even
000127E6                            
000127E6                            
000127E6                            ; ---------------------------------------------------------------------------
000127E6                            ; Routine to mark an enemy/monitor/ring	as destroyed/collected
000127E6                            ; ---------------------------------------------------------------------------
000127E6                            
000127E6                            MarkObjGone:
000127E6 3028 0008                  		move.w	8(a0),d0
000127EA 0240 FF80                  		andi.w	#$FF80,d0
000127EE 3238 F700                  		move.w	($FFFFF700).w,d1
000127F2 0441 0080                  		subi.w	#$80,d1
000127F6 0241 FF80                  		andi.w	#$FF80,d1
000127FA 9041                       		sub.w	d1,d0
000127FC 0C40 0280                  		cmpi.w	#$280,d0
00012800 6200 0000                  		bhi.w	Mark_ChkGone
00012804 6000 DCFC                  		bra.w	DisplaySprite
00012808                            ; ===========================================================================
00012808                            
00012808                            Mark_ChkGone:
00012808 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001280C 7000                       		moveq	#0,d0
0001280E 1028 0023                  		move.b	$23(a0),d0
00012812 6700                       		beq.s	Mark_Delete
00012814 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001281A                            
0001281A                            Mark_Delete:
0001281A 6000 DD22                  		bra.w	DeleteObject
0001281E                            
0001281E                            ; ===========================================================================
0001281E                            ; ---------------------------------------------------------------------------
0001281E                            ; Object 4F - blank
0001281E                            ; ---------------------------------------------------------------------------
0001281E                            
0001281E                            Obj4F:					; XREF: Obj_Index
0001281E 4E75                       		rts	
00012820                            
00012820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012820                            
00012820                            
00012820                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00012820 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012824 D047                       		add.w	d7,d0
00012826 0240 0003                  		andi.w	#3,d0
0001282A 6600                       		bne.s	loc_F836
0001282C 7600                       		moveq	#0,d3
0001282E 1628 0019                  		move.b	$19(a0),d3
00012832 4A68 0010                  		tst.w	$10(a0)
00012836 6B00                       		bmi.s	loc_F82C
00012838 6100 0000                  		bsr.w	ObjHitWallRight
0001283C 4A41                       		tst.w	d1
0001283E 6A00                       		bpl.s	loc_F836
00012840                            
00012840                            loc_F828:
00012840 7001                       		moveq	#1,d0
00012842 4E75                       		rts	
00012844                            ; ===========================================================================
00012844                            
00012844                            loc_F82C:
00012844 4643                       		not.w	d3
00012846 6100 0000                  		bsr.w	ObjHitWallLeft
0001284A 4A41                       		tst.w	d1
0001284C 6BF2                       		bmi.s	loc_F828
0001284E                            
0001284E                            loc_F836:
0001284E 7000                       		moveq	#0,d0
00012850 4E75                       		rts	
00012852                            ; End of function Obj50_ChkWall
00012852                            
00012852                            ; ===========================================================================
00012852                            ; ---------------------------------------------------------------------------
00012852                            ; Object 50 - Yadrin enemy (SYZ)
00012852                            ; ---------------------------------------------------------------------------
00012852                            
00012852                            Obj50:					; XREF: Obj_Index
00012852 7000                       		moveq	#0,d0
00012854 1028 0024                  		move.b	$24(a0),d0
00012858 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0001285C 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00012860                            ; ===========================================================================
00012860 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00012862 0000                       		dc.w Obj50_Action-Obj50_Index
00012864                            ; ===========================================================================
00012864                            
00012864                            Obj50_Main:				; XREF: Obj50_Index
00012864 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0001286C 317C 247B 0002             		move.w	#$247B,2(a0)
00012872 117C 0004 0001             		move.b	#4,1(a0)
00012878 117C 0004 0018             		move.b	#4,$18(a0)
0001287E 117C 0014 0019             		move.b	#$14,$19(a0)
00012884 117C 0011 0016             		move.b	#$11,$16(a0)
0001288A 117C 0008 0017             		move.b	#8,$17(a0)
00012890 117C 00CC 0020             		move.b	#$CC,$20(a0)
00012896 6100 DBEC                  		bsr.w	ObjectFall
0001289A 6100 0000                  		bsr.w	ObjHitFloor
0001289E 4A41                       		tst.w	d1
000128A0 6A00                       		bpl.s	locret_F89E
000128A2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000128A6 317C 0000 0012             		move.w	#0,$12(a0)
000128AC 5428 0024                  		addq.b	#2,$24(a0)
000128B0 0868 0000 0022             		bchg	#0,$22(a0)
000128B6                            
000128B6                            locret_F89E:
000128B6 4E75                       		rts	
000128B8                            ; ===========================================================================
000128B8                            
000128B8                            Obj50_Action:				; XREF: Obj50_Index
000128B8 7000                       		moveq	#0,d0
000128BA 1028 0025                  		move.b	$25(a0),d0
000128BE 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000128C2 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000128C6 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000128CC 6100 A7DE                  		bsr.w	AnimateSprite
000128D0 6000 FF14                  		bra.w	MarkObjGone
000128D4                            ; ===========================================================================
000128D4 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000128D6 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000128D8                            ; ===========================================================================
000128D8                            
000128D8                            Obj50_Move:				; XREF: Obj50_Index2
000128D8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000128DC 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000128DE 5428 0025                  		addq.b	#2,$25(a0)
000128E2 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000128E8 117C 0001 001C             		move.b	#1,$1C(a0)
000128EE 0868 0000 0022             		bchg	#0,$22(a0)
000128F4 6600                       		bne.s	locret_F8E2
000128F6 4468 0010                  		neg.w	$10(a0)		; change direction
000128FA                            
000128FA                            locret_F8E2:
000128FA 4E75                       		rts	
000128FC                            ; ===========================================================================
000128FC                            
000128FC                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000128FC 6100 DBDE                  		bsr.w	SpeedToPos
00012900 6100 0000                  		bsr.w	ObjHitFloor
00012904 0C41 FFF8                  		cmpi.w	#-8,d1
00012908 6D00                       		blt.s	Obj50_Pause
0001290A 0C41 000C                  		cmpi.w	#$C,d1
0001290E 6C00                       		bge.s	Obj50_Pause
00012910 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00012914 6100 FF0A                  		bsr.w	Obj50_ChkWall
00012918 6600                       		bne.s	Obj50_Pause
0001291A 4E75                       		rts	
0001291C                            ; ===========================================================================
0001291C                            
0001291C                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0001291C 5528 0025                  		subq.b	#2,$25(a0)
00012920 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00012926 317C 0000 0010             		move.w	#0,$10(a0)
0001292C 117C 0000 001C             		move.b	#0,$1C(a0)
00012932 4E75                       		rts	
00012934                            ; ===========================================================================
00012934                            Ani_obj50:
00012934                            	include "_anim\obj50.asm"
00012934                            ; ---------------------------------------------------------------------------
00012934                            ; Animation script - Yadrin enemy
00012934                            ; ---------------------------------------------------------------------------
00012934 0000                       		dc.w byte_F920-Ani_obj50
00012936 0000                       		dc.w byte_F924-Ani_obj50
00012938 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0001293C 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00012946                            		even
00012946                            		even
00012946                            
00012946                            ; ---------------------------------------------------------------------------
00012946                            ; Sprite mappings - Yadrin enemy (SYZ)
00012946                            ; ---------------------------------------------------------------------------
00012946                            Map_obj50:
00012946                            	include "_maps\obj50.asm"
00012946                            ; ---------------------------------------------------------------------------
00012946                            ; Sprite mappings - Yadrin enemy (SYZ)
00012946                            ; ---------------------------------------------------------------------------
00012946 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0001294A 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0001294E 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00012952 05                         byte_F93A:	dc.b 5
00012953 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00012958 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001295D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00012962 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00012967 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001296C 05                         byte_F954:	dc.b 5
0001296D F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00012972 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00012977 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001297C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00012981 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00012986 05                         byte_F96E:	dc.b 5
00012987 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001298C 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00012991 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00012996 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001299B 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000129A0 05                         byte_F988:	dc.b 5
000129A1 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
000129A6 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
000129AB EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000129B0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000129B5 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000129BA 05                         byte_F9A2:	dc.b 5
000129BB F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000129C0 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000129C5 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000129CA F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000129CF 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000129D4 05                         byte_F9BC:	dc.b 5
000129D5 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000129DA 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000129DF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000129E4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000129E9 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000129EE                            		even
000129EE                            		even
000129EE                            
000129EE                            ; ---------------------------------------------------------------------------
000129EE                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000129EE                            ;
000129EE                            ; variables:
000129EE                            ; d1 = width
000129EE                            ; d2 = height /	2 (when	jumping)
000129EE                            ; d3 = height /	2 (when	walking)
000129EE                            ; d4 = x-axis position
000129EE                            ; ---------------------------------------------------------------------------
000129EE                            
000129EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000129EE                            
000129EE                            
000129EE                            SolidObject:
000129EE 4A28 0025                  		tst.b	$25(a0)
000129F2 6700 0000                  		beq.w	loc_FAC8
000129F6 3401                       		move.w	d1,d2
000129F8 D442                       		add.w	d2,d2
000129FA 43F8 D000                  		lea	($FFFFD000).w,a1
000129FE 0829 0001 0022             		btst	#1,$22(a1)
00012A04 6600                       		bne.s	loc_F9FE
00012A06 3029 0008                  		move.w	8(a1),d0
00012A0A 9068 0008                  		sub.w	8(a0),d0
00012A0E D041                       		add.w	d1,d0
00012A10 6B00                       		bmi.s	loc_F9FE
00012A12 B042                       		cmp.w	d2,d0
00012A14 6500                       		bcs.s	loc_FA12
00012A16                            
00012A16                            loc_F9FE:
00012A16 08A9 0003 0022             		bclr	#3,$22(a1)
00012A1C 08A8 0003 0022             		bclr	#3,$22(a0)
00012A22 4228 0025                  		clr.b	$25(a0)
00012A26 7800                       		moveq	#0,d4
00012A28 4E75                       		rts	
00012A2A                            ; ===========================================================================
00012A2A                            
00012A2A                            loc_FA12:
00012A2A 3404                       		move.w	d4,d2
00012A2C 4EB9 0000 A236             		jsr	MvSonicOnPtfm
00012A32 7800                       		moveq	#0,d4
00012A34 4E75                       		rts	
00012A36                            ; ===========================================================================
00012A36                            
00012A36                            SolidObject71:				; XREF: Obj71_Solid
00012A36 4A28 0025                  		tst.b	$25(a0)
00012A3A 6700 0000                  		beq.w	loc_FAD0
00012A3E 3401                       		move.w	d1,d2
00012A40 D442                       		add.w	d2,d2
00012A42 43F8 D000                  		lea	($FFFFD000).w,a1
00012A46 0829 0001 0022             		btst	#1,$22(a1)
00012A4C 6600                       		bne.s	loc_FA44
00012A4E 3029 0008                  		move.w	8(a1),d0
00012A52 9068 0008                  		sub.w	8(a0),d0
00012A56 D041                       		add.w	d1,d0
00012A58 6B00                       		bmi.s	loc_FA44
00012A5A B042                       		cmp.w	d2,d0
00012A5C 6500                       		bcs.s	loc_FA58
00012A5E                            
00012A5E                            loc_FA44:
00012A5E 08A9 0003 0022             		bclr	#3,$22(a1)
00012A64 08A8 0003 0022             		bclr	#3,$22(a0)
00012A6A 4228 0025                  		clr.b	$25(a0)
00012A6E 7800                       		moveq	#0,d4
00012A70 4E75                       		rts	
00012A72                            ; ===========================================================================
00012A72                            
00012A72                            loc_FA58:
00012A72 3404                       		move.w	d4,d2
00012A74 4EB9 0000 A236             		jsr	MvSonicOnPtfm
00012A7A 7800                       		moveq	#0,d4
00012A7C 4E75                       		rts	
00012A7E                            ; ===========================================================================
00012A7E                            
00012A7E                            SolidObject2F:				; XREF: Obj2F_Solid
00012A7E 43F8 D000                  		lea	($FFFFD000).w,a1
00012A82 4A28 0001                  		tst.b	1(a0)
00012A86 6A00 0000                  		bpl.w	loc_FB92
00012A8A 3029 0008                  		move.w	8(a1),d0
00012A8E 9068 0008                  		sub.w	8(a0),d0
00012A92 D041                       		add.w	d1,d0
00012A94 6B00 0000                  		bmi.w	loc_FB92
00012A98 3601                       		move.w	d1,d3
00012A9A D643                       		add.w	d3,d3
00012A9C B043                       		cmp.w	d3,d0
00012A9E 6200 0000                  		bhi.w	loc_FB92
00012AA2 3A00                       		move.w	d0,d5
00012AA4 0828 0000 0001             		btst	#0,1(a0)
00012AAA 6700                       		beq.s	loc_FA94
00012AAC 4645                       		not.w	d5
00012AAE DA43                       		add.w	d3,d5
00012AB0                            
00012AB0                            loc_FA94:
00012AB0 E24D                       		lsr.w	#1,d5
00012AB2 7600                       		moveq	#0,d3
00012AB4 1632 5000                  		move.b	(a2,d5.w),d3
00012AB8 9612                       		sub.b	(a2),d3
00012ABA 3A28 000C                  		move.w	$C(a0),d5
00012ABE 9A43                       		sub.w	d3,d5
00012AC0 1629 0016                  		move.b	$16(a1),d3
00012AC4 4883                       		ext.w	d3
00012AC6 D443                       		add.w	d3,d2
00012AC8 3629 000C                  		move.w	$C(a1),d3
00012ACC 9645                       		sub.w	d5,d3
00012ACE 5843                       		addq.w	#4,d3
00012AD0 D642                       		add.w	d2,d3
00012AD2 6B00 0000                  		bmi.w	loc_FB92
00012AD6 3802                       		move.w	d2,d4
00012AD8 D844                       		add.w	d4,d4
00012ADA B644                       		cmp.w	d4,d3
00012ADC 6400 0000                  		bcc.w	loc_FB92
00012AE0 6000 0000                  		bra.w	loc_FB0E
00012AE4                            ; ===========================================================================
00012AE4                            
00012AE4                            loc_FAC8:
00012AE4 4A28 0001                  		tst.b	1(a0)
00012AE8 6A00 0000                  		bpl.w	loc_FB92
00012AEC                            
00012AEC                            loc_FAD0:
00012AEC 43F8 D000                  		lea	($FFFFD000).w,a1
00012AF0 3029 0008                  		move.w	8(a1),d0
00012AF4 9068 0008                  		sub.w	8(a0),d0
00012AF8 D041                       		add.w	d1,d0
00012AFA 6B00 0000                  		bmi.w	loc_FB92
00012AFE 3601                       		move.w	d1,d3
00012B00 D643                       		add.w	d3,d3
00012B02 B043                       		cmp.w	d3,d0
00012B04 6200 0000                  		bhi.w	loc_FB92
00012B08 1629 0016                  		move.b	$16(a1),d3
00012B0C 4883                       		ext.w	d3
00012B0E D443                       		add.w	d3,d2
00012B10 3629 000C                  		move.w	$C(a1),d3
00012B14 9668 000C                  		sub.w	$C(a0),d3
00012B18 5843                       		addq.w	#4,d3
00012B1A D642                       		add.w	d2,d3
00012B1C 6B00 0000                  		bmi.w	loc_FB92
00012B20 3802                       		move.w	d2,d4
00012B22 D844                       		add.w	d4,d4
00012B24 B644                       		cmp.w	d4,d3
00012B26 6400 0000                  		bcc.w	loc_FB92
00012B2A                            
00012B2A                            loc_FB0E:
00012B2A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012B2E 6B00 0000                  		bmi.w	loc_FB92
00012B32 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00012B38 6400 0000                  		bcc.w	loc_FB92
00012B3C 4A78 FE08                  		tst.w	($FFFFFE08).w
00012B40 6600 0000                  		bne.w	loc_FBAC
00012B44 3A00                       		move.w	d0,d5
00012B46 B240                       		cmp.w	d0,d1
00012B48 6400                       		bcc.s	loc_FB36
00012B4A D241                       		add.w	d1,d1
00012B4C 9041                       		sub.w	d1,d0
00012B4E 3A00                       		move.w	d0,d5
00012B50 4445                       		neg.w	d5
00012B52                            
00012B52                            loc_FB36:
00012B52 3203                       		move.w	d3,d1
00012B54 B443                       		cmp.w	d3,d2
00012B56 6400                       		bcc.s	loc_FB44
00012B58 5943                       		subq.w	#4,d3
00012B5A 9644                       		sub.w	d4,d3
00012B5C 3203                       		move.w	d3,d1
00012B5E 4441                       		neg.w	d1
00012B60                            
00012B60                            loc_FB44:
00012B60 BA41                       		cmp.w	d1,d5
00012B62 6200 0000                  		bhi.w	loc_FBB0
00012B66 0C41 0004                  		cmpi.w	#4,d1
00012B6A 6300                       		bls.s	loc_FB8C
00012B6C 4A40                       		tst.w	d0
00012B6E 6700                       		beq.s	loc_FB70
00012B70 6B00                       		bmi.s	loc_FB5E
00012B72 4A69 0010                  		tst.w	$10(a1)
00012B76 6B00                       		bmi.s	loc_FB70
00012B78 6000                       		bra.s	loc_FB64
00012B7A                            ; ===========================================================================
00012B7A                            
00012B7A                            loc_FB5E:
00012B7A 4A69 0010                  		tst.w	$10(a1)
00012B7E 6A00                       		bpl.s	loc_FB70
00012B80                            
00012B80                            loc_FB64:
00012B80 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00012B86 337C 0000 0010             		move.w	#0,$10(a1)
00012B8C                            
00012B8C                            loc_FB70:
00012B8C 9169 0008                  		sub.w	d0,8(a1)
00012B90 0829 0001 0022             		btst	#1,$22(a1)
00012B96 6600                       		bne.s	loc_FB8C
00012B98 08E9 0005 0022             		bset	#5,$22(a1)
00012B9E 08E8 0005 0022             		bset	#5,$22(a0)
00012BA4 7801                       		moveq	#1,d4
00012BA6 4E75                       		rts	
00012BA8                            ; ===========================================================================
00012BA8                            
00012BA8                            loc_FB8C:
00012BA8 6100                       		bsr.s	loc_FBA0
00012BAA 7801                       		moveq	#1,d4
00012BAC 4E75                       		rts	
00012BAE                            ; ===========================================================================
00012BAE                            
00012BAE                            loc_FB92:
00012BAE 0828 0005 0022             		btst	#5,$22(a0)
00012BB4 6700                       		beq.s	loc_FBAC
00012BB6 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00012BBC                            
00012BBC                            loc_FBA0:
00012BBC 08A8 0005 0022             		bclr	#5,$22(a0)
00012BC2 08A9 0005 0022             		bclr	#5,$22(a1)
00012BC8                            
00012BC8                            loc_FBAC:
00012BC8 7800                       		moveq	#0,d4
00012BCA 4E75                       		rts	
00012BCC                            ; ===========================================================================
00012BCC                            
00012BCC                            loc_FBB0:
00012BCC 4A43                       		tst.w	d3
00012BCE 6B00                       		bmi.s	loc_FBBC
00012BD0 0C43 0010                  		cmpi.w	#$10,d3
00012BD4 6500                       		bcs.s	loc_FBEE
00012BD6 60D6                       		bra.s	loc_FB92
00012BD8                            ; ===========================================================================
00012BD8                            
00012BD8                            loc_FBBC:
00012BD8 4A69 0012                  		tst.w	$12(a1)
00012BDC 6700                       		beq.s	loc_FBD6
00012BDE 6A00                       		bpl.s	loc_FBD2
00012BE0 4A43                       		tst.w	d3
00012BE2 6A00                       		bpl.s	loc_FBD2
00012BE4 9769 000C                  		sub.w	d3,$C(a1)
00012BE8 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00012BEE                            
00012BEE                            loc_FBD2:
00012BEE 78FF                       		moveq	#-1,d4
00012BF0 4E75                       		rts	
00012BF2                            ; ===========================================================================
00012BF2                            
00012BF2                            loc_FBD6:
00012BF2 0829 0001 0022             		btst	#1,$22(a1)
00012BF8 66F4                       		bne.s	loc_FBD2
00012BFA 2F08                       		move.l	a0,-(sp)
00012BFC 2049                       		movea.l	a1,a0
00012BFE 4EB9 0000 0000             		jsr	KillSonic
00012C04 205F                       		movea.l	(sp)+,a0
00012C06 78FF                       		moveq	#-1,d4
00012C08 4E75                       		rts	
00012C0A                            ; ===========================================================================
00012C0A                            
00012C0A                            loc_FBEE:
00012C0A 5943                       		subq.w	#4,d3
00012C0C 7200                       		moveq	#0,d1
00012C0E 1228 0019                  		move.b	$19(a0),d1
00012C12 3401                       		move.w	d1,d2
00012C14 D442                       		add.w	d2,d2
00012C16 D269 0008                  		add.w	8(a1),d1
00012C1A 9268 0008                  		sub.w	8(a0),d1
00012C1E 6B00                       		bmi.s	loc_FC28
00012C20 B242                       		cmp.w	d2,d1
00012C22 6400                       		bcc.s	loc_FC28
00012C24 4A69 0012                  		tst.w	$12(a1)
00012C28 6B00                       		bmi.s	loc_FC28
00012C2A 9769 000C                  		sub.w	d3,$C(a1)
00012C2E 5369 000C                  		subq.w	#1,$C(a1)
00012C32 6100                       		bsr.s	sub_FC2C
00012C34 117C 0002 0025             		move.b	#2,$25(a0)
00012C3A 08E8 0003 0022             		bset	#3,$22(a0)
00012C40 78FF                       		moveq	#-1,d4
00012C42 4E75                       		rts	
00012C44                            ; ===========================================================================
00012C44                            
00012C44                            loc_FC28:
00012C44 7800                       		moveq	#0,d4
00012C46 4E75                       		rts	
00012C48                            ; End of function SolidObject
00012C48                            
00012C48                            
00012C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012C48                            
00012C48                            
00012C48                            sub_FC2C:				; XREF: SolidObject
00012C48 0829 0003 0022             		btst	#3,$22(a1)
00012C4E 6700                       		beq.s	loc_FC4E
00012C50 7000                       		moveq	#0,d0
00012C52 1029 003D                  		move.b	$3D(a1),d0
00012C56 ED48                       		lsl.w	#6,d0
00012C58 0680 00FF D000             		addi.l	#$FFD000,d0
00012C5E 2440                       		movea.l	d0,a2
00012C60 08AA 0003 0022             		bclr	#3,$22(a2)
00012C66 422A 0025                  		clr.b	$25(a2)
00012C6A                            
00012C6A                            loc_FC4E:
00012C6A 3008                       		move.w	a0,d0
00012C6C 0440 D000                  		subi.w	#-$3000,d0
00012C70 EC48                       		lsr.w	#6,d0
00012C72 0240 007F                  		andi.w	#$7F,d0
00012C76 1340 003D                  		move.b	d0,$3D(a1)
00012C7A 137C 0000 0026             		move.b	#0,$26(a1)
00012C80 337C 0000 0012             		move.w	#0,$12(a1)
00012C86 3369 0010 0014             		move.w	$10(a1),$14(a1)
00012C8C 0829 0001 0022             		btst	#1,$22(a1)
00012C92 6700                       		beq.s	loc_FC84
00012C94 2F08                       		move.l	a0,-(sp)
00012C96 2049                       		movea.l	a1,a0
00012C98 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00012C9E 205F                       		movea.l	(sp)+,a0
00012CA0                            
00012CA0                            loc_FC84:
00012CA0 08E9 0003 0022             		bset	#3,$22(a1)
00012CA6 08E8 0003 0022             		bset	#3,$22(a0)
00012CAC 4E75                       		rts	
00012CAE                            ; End of function sub_FC2C
00012CAE                            
00012CAE                            ; ===========================================================================
00012CAE                            ; ---------------------------------------------------------------------------
00012CAE                            ; Object 51 - smashable	green block (MZ)
00012CAE                            ; ---------------------------------------------------------------------------
00012CAE                            
00012CAE                            Obj51:					; XREF: Obj_Index
00012CAE 7000                       		moveq	#0,d0
00012CB0 1028 0024                  		move.b	$24(a0),d0
00012CB4 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00012CB8 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00012CBC 6000 FB28                  		bra.w	MarkObjGone
00012CC0                            ; ===========================================================================
00012CC0 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00012CC2 0000                       		dc.w Obj51_Solid-Obj51_Index
00012CC4 0000                       		dc.w Obj51_Display-Obj51_Index
00012CC6                            ; ===========================================================================
00012CC6                            
00012CC6                            Obj51_Main:				; XREF: Obj51_Index
00012CC6 5428 0024                  		addq.b	#2,$24(a0)
00012CCA 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00012CD2 317C 42B8 0002             		move.w	#$42B8,2(a0)
00012CD8 117C 0004 0001             		move.b	#4,1(a0)
00012CDE 117C 0010 0019             		move.b	#$10,$19(a0)
00012CE4 117C 0004 0018             		move.b	#4,$18(a0)
00012CEA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00012CF0                            
00012CF0                            Obj51_Solid:				; XREF: Obj51_Index
00012CF0 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00012CF6 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00012CFC 323C 001B                  		move.w	#$1B,d1
00012D00 343C 0010                  		move.w	#$10,d2
00012D04 363C 0011                  		move.w	#$11,d3
00012D08 3828 0008                  		move.w	8(a0),d4
00012D0C 6100 FCE0                  		bsr.w	SolidObject
00012D10 0828 0003 0022             		btst	#3,$22(a0)
00012D16 6600                       		bne.s	Obj51_Smash
00012D18                            
00012D18                            locret_FCFC:
00012D18 4E75                       		rts	
00012D1A                            ; ===========================================================================
00012D1A                            
00012D1A                            Obj51_Smash:				; XREF: Obj51_Solid
00012D1A 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00012D20 66F6                       		bne.s	locret_FCFC	; if not, branch
00012D22 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00012D28 08E9 0002 0022             		bset	#2,$22(a1)
00012D2E 137C 000E 0016             		move.b	#$E,$16(a1)
00012D34 137C 0007 0017             		move.b	#7,$17(a1)
00012D3A 137C 0002 001C             		move.b	#2,$1C(a1)
00012D40 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00012D46 08E9 0001 0022             		bset	#1,$22(a1)
00012D4C 08A9 0003 0022             		bclr	#3,$22(a1)
00012D52 137C 0002 0024             		move.b	#2,$24(a1)
00012D58 08A8 0003 0022             		bclr	#3,$22(a0)
00012D5E 4228 0025                  		clr.b	$25(a0)
00012D62 117C 0001 001A             		move.b	#1,$1A(a0)
00012D68 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00012D6E 7203                       		moveq	#3,d1		; set number of	fragments to 4
00012D70 343C 0038                  		move.w	#$38,d2
00012D74 6100 D346                  		bsr.w	SmashObject
00012D78 6100 DC0E                  		bsr.w	SingleObjLoad
00012D7C 6600                       		bne.s	Obj51_Display
00012D7E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00012D82 3368 0008 0008             		move.w	8(a0),8(a1)
00012D88 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012D8E 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00012D92 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00012D96 0C42 0006                  		cmpi.w	#6,d2
00012D9A 6500                       		bcs.s	Obj51_Bonus
00012D9C 7406                       		moveq	#6,d2
00012D9E                            
00012D9E                            Obj51_Bonus:
00012D9E 7000                       		moveq	#0,d0
00012DA0 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00012DA4 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00012DAA 6500                       		bcs.s	loc_FD98	; if not, branch
00012DAC 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00012DB0 740A                       		moveq	#10,d2
00012DB2                            
00012DB2                            loc_FD98:
00012DB2 4EB9 0000 0000             		jsr	AddPoints
00012DB8 E24A                       		lsr.w	#1,d2
00012DBA 1342 001A                  		move.b	d2,$1A(a1)
00012DBE                            
00012DBE                            Obj51_Display:				; XREF: Obj51_Index
00012DBE 6100 D71C                  		bsr.w	SpeedToPos
00012DC2 0668 0038 0012             		addi.w	#$38,$12(a0)
00012DC8 6100 D738                  		bsr.w	DisplaySprite
00012DCC 4A28 0001                  		tst.b	1(a0)
00012DD0 6A00 D76C                  		bpl.w	DeleteObject
00012DD4 4E75                       		rts	
00012DD6                            ; ===========================================================================
00012DD6 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00012DDA FF00 FF00                  		dc.w $FF00, $FF00
00012DDE 0200 FE00                  		dc.w $200, $FE00
00012DE2 0100 FF00                  		dc.w $100, $FF00
00012DE6                            
00012DE6 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00012DEE                            ; ---------------------------------------------------------------------------
00012DEE                            ; Sprite mappings - smashable green block (MZ)
00012DEE                            ; ---------------------------------------------------------------------------
00012DEE                            Map_obj51:
00012DEE                            	include "_maps\obj51.asm"
00012DEE                            ; ---------------------------------------------------------------------------
00012DEE                            ; Sprite mappings - smashable green block (MZ)
00012DEE                            ; ---------------------------------------------------------------------------
00012DEE 0000                       		dc.w byte_FDD8-Map_obj51
00012DF0 0000                       		dc.w byte_FDE3-Map_obj51
00012DF2 02                         byte_FDD8:	dc.b 2
00012DF3 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00012DF8 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00012DFD 04                         byte_FDE3:	dc.b 4
00012DFE F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00012E03 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00012E08 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00012E0D 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00012E12                            		even
00012E12                            		even
00012E12                            
00012E12                            ; ===========================================================================
00012E12                            ; ---------------------------------------------------------------------------
00012E12                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00012E12                            ; ---------------------------------------------------------------------------
00012E12                            
00012E12                            Obj52:					; XREF: Obj_Index
00012E12 7000                       		moveq	#0,d0
00012E14 1028 0024                  		move.b	$24(a0),d0
00012E18 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00012E1C 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00012E20                            ; ===========================================================================
00012E20 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00012E22 0000                       		dc.w Obj52_Platform-Obj52_Index
00012E24 0000                       		dc.w Obj52_StandOn-Obj52_Index
00012E26                            
00012E26 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00012E28 2001                       		dc.b $20, 1
00012E2A 2002                       		dc.b $20, 2
00012E2C 4003                       		dc.b $40, 3
00012E2E 3004                       		dc.b $30, 4
00012E30                            ; ===========================================================================
00012E30                            
00012E30                            Obj52_Main:				; XREF: Obj52_Index
00012E30 5428 0024                  		addq.b	#2,$24(a0)
00012E34 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00012E3C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00012E42 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012E48 6600                       		bne.s	loc_FE44
00012E4A 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00012E52 317C 43BC 0002             		move.w	#$43BC,2(a0)
00012E58 117C 0007 0016             		move.b	#7,$16(a0)
00012E5E                            
00012E5E                            loc_FE44:
00012E5E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012E64 6600                       		bne.s	loc_FE60
00012E66 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00012E6C 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00012E72 6700                       		beq.s	loc_FE60	; if yes, branch
00012E74 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00012E7A                            
00012E7A                            loc_FE60:
00012E7A 117C 0004 0001             		move.b	#4,1(a0)
00012E80 7000                       		moveq	#0,d0
00012E82 1028 0028                  		move.b	$28(a0),d0
00012E86 E648                       		lsr.w	#3,d0
00012E88 0240 001E                  		andi.w	#$1E,d0
00012E8C 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00012E90 115A 0019                  		move.b	(a2)+,$19(a0)
00012E94 115A 001A                  		move.b	(a2)+,$1A(a0)
00012E98 117C 0004 0018             		move.b	#4,$18(a0)
00012E9E 3168 0008 0030             		move.w	8(a0),$30(a0)
00012EA4 3168 000C 0032             		move.w	$C(a0),$32(a0)
00012EAA 0228 000F 0028             		andi.b	#$F,$28(a0)
00012EB0                            
00012EB0                            Obj52_Platform:				; XREF: Obj52_Index
00012EB0 6100 0000                  		bsr.w	Obj52_Move
00012EB4 7200                       		moveq	#0,d1
00012EB6 1228 0019                  		move.b	$19(a0),d1
00012EBA 4EB9 0000 9B64             		jsr	(PlatformObject).l
00012EC0 6000                       		bra.s	Obj52_ChkDel
00012EC2                            ; ===========================================================================
00012EC2                            
00012EC2                            Obj52_StandOn:				; XREF: Obj52_Index
00012EC2 7200                       		moveq	#0,d1
00012EC4 1228 0019                  		move.b	$19(a0),d1
00012EC8 4EB9 0000 9CD8             		jsr	(ExitPlatform).l
00012ECE 3F28 0008                  		move.w	8(a0),-(sp)
00012ED2 6100 0000                  		bsr.w	Obj52_Move
00012ED6 341F                       		move.w	(sp)+,d2
00012ED8 4EB9 0000 A242             		jsr	(MvSonicOnPtfm2).l
00012EDE                            
00012EDE                            Obj52_ChkDel:				; XREF: Obj52_Platform
00012EDE 3028 0030                  		move.w	$30(a0),d0
00012EE2 0240 FF80                  		andi.w	#$FF80,d0
00012EE6 3238 F700                  		move.w	($FFFFF700).w,d1
00012EEA 0441 0080                  		subi.w	#$80,d1
00012EEE 0241 FF80                  		andi.w	#$FF80,d1
00012EF2 9041                       		sub.w	d1,d0
00012EF4 0C40 0280                  		cmpi.w	#$280,d0
00012EF8 6200 D644                  		bhi.w	DeleteObject
00012EFC 6000 D604                  		bra.w	DisplaySprite
00012F00                            ; ===========================================================================
00012F00                            
00012F00                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00012F00 7000                       		moveq	#0,d0
00012F02 1028 0028                  		move.b	$28(a0),d0
00012F06 0240 000F                  		andi.w	#$F,d0
00012F0A D040                       		add.w	d0,d0
00012F0C 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00012F10 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00012F14                            ; ===========================================================================
00012F14 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00012F18 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00012F1C 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00012F20 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00012F24 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00012F28 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00012F2A                            ; ===========================================================================
00012F2A                            
00012F2A                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00012F2A 4E75                       		rts	
00012F2C                            ; ===========================================================================
00012F2C                            
00012F2C                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00012F2C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012F30 323C 0060                  		move.w	#$60,d1
00012F34 0828 0000 0022             		btst	#0,$22(a0)
00012F3A 6700                       		beq.s	loc_FF26
00012F3C 4440                       		neg.w	d0
00012F3E D041                       		add.w	d1,d0
00012F40                            
00012F40                            loc_FF26:
00012F40 3228 0030                  		move.w	$30(a0),d1
00012F44 9240                       		sub.w	d0,d1
00012F46 3141 0008                  		move.w	d1,8(a0)
00012F4A 4E75                       		rts	
00012F4C                            ; ===========================================================================
00012F4C                            
00012F4C                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00012F4C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00012F52 6600                       		bne.s	Obj52_02_Wait
00012F54 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012F58                            
00012F58                            Obj52_02_Wait:
00012F58 4E75                       		rts	
00012F5A                            ; ===========================================================================
00012F5A                            
00012F5A                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00012F5A 7600                       		moveq	#0,d3
00012F5C 1628 0019                  		move.b	$19(a0),d3
00012F60 6100 0000                  		bsr.w	ObjHitWallRight
00012F64 4A41                       		tst.w	d1		; has the platform hit a wall?
00012F66 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00012F68 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00012F6C 3168 0008 0030             		move.w	8(a0),$30(a0)
00012F72 4E75                       		rts	
00012F74                            ; ===========================================================================
00012F74                            
00012F74                            Obj52_03_End:
00012F74 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00012F78 4E75                       		rts	
00012F7A                            ; ===========================================================================
00012F7A                            
00012F7A                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00012F7A 7600                       		moveq	#0,d3
00012F7C 1628 0019                  		move.b	$19(a0),d3
00012F80 6100 0000                  		bsr.w	ObjHitWallRight
00012F84 4A41                       		tst.w	d1		; has the platform hit a wall?
00012F86 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00012F88 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00012F8C 3168 0008 0030             		move.w	8(a0),$30(a0)
00012F92 4E75                       		rts	
00012F94                            ; ===========================================================================
00012F94                            
00012F94                            Obj52_05_End:
00012F94 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00012F98 4E75                       		rts	
00012F9A                            ; ===========================================================================
00012F9A                            
00012F9A                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00012F9A 6100 D540                  		bsr.w	SpeedToPos
00012F9E 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00012FA4 6100 0000                  		bsr.w	ObjHitFloor
00012FA8 4A41                       		tst.w	d1		; has platform hit the floor?
00012FAA 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00012FAE D368 000C                  		add.w	d1,$C(a0)
00012FB2 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00012FB6 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00012FBA                            
00012FBA                            locret_FFA0:
00012FBA 4E75                       		rts	
00012FBC                            ; ===========================================================================
00012FBC                            
00012FBC                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00012FBC 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00012FC0 6700                       		beq.s	Obj52_07_ChkDel
00012FC2 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00012FC6                            
00012FC6                            Obj52_07_ChkDel:
00012FC6 588F                       		addq.l	#4,sp
00012FC8 3028 0030                  		move.w	$30(a0),d0
00012FCC 0240 FF80                  		andi.w	#$FF80,d0
00012FD0 3238 F700                  		move.w	($FFFFF700).w,d1
00012FD4 0441 0080                  		subi.w	#$80,d1
00012FD8 0241 FF80                  		andi.w	#$FF80,d1
00012FDC 9041                       		sub.w	d1,d0
00012FDE 0C40 0280                  		cmpi.w	#$280,d0
00012FE2 6200 D55A                  		bhi.w	DeleteObject
00012FE6 4E75                       		rts	
00012FE8                            ; ===========================================================================
00012FE8                            
00012FE8                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00012FE8 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00012FEC 323C 0080                  		move.w	#$80,d1
00012FF0 0828 0000 0022             		btst	#0,$22(a0)
00012FF6 6700                       		beq.s	loc_FFE2
00012FF8 4440                       		neg.w	d0
00012FFA D041                       		add.w	d1,d0
00012FFC                            
00012FFC                            loc_FFE2:
00012FFC 3228 0032                  		move.w	$32(a0),d1
00013000 9240                       		sub.w	d0,d1
00013002 3141 000C                  		move.w	d1,$C(a0)
00013006 4E75                       		rts	
00013008                            ; ===========================================================================
00013008                            
00013008                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00013008 7600                       		moveq	#0,d3
0001300A 1628 0019                  		move.b	$19(a0),d3
0001300E D643                       		add.w	d3,d3
00013010 7208                       		moveq	#8,d1
00013012 0828 0000 0022             		btst	#0,$22(a0)
00013018 6700                       		beq.s	loc_10004
0001301A 4441                       		neg.w	d1
0001301C 4443                       		neg.w	d3
0001301E                            
0001301E                            loc_10004:
0001301E 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00013022 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00013024 3028 0008                  		move.w	8(a0),d0
00013028 9068 0030                  		sub.w	$30(a0),d0
0001302C B043                       		cmp.w	d3,d0
0001302E 6700                       		beq.s	Obj52_0A_Wait
00013030 D368 0008                  		add.w	d1,8(a0)	; move platform
00013034 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001303A 4E75                       		rts	
0001303C                            ; ===========================================================================
0001303C                            
0001303C                            Obj52_0A_Wait:
0001303C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00013040 6600                       		bne.s	locret_1002E	; if time remains, branch
00013042 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00013048                            
00013048                            locret_1002E:
00013048 4E75                       		rts	
0001304A                            ; ===========================================================================
0001304A                            
0001304A                            Obj52_0A_Back:
0001304A 3028 0008                  		move.w	8(a0),d0
0001304E 9068 0030                  		sub.w	$30(a0),d0
00013052 6700                       		beq.s	Obj52_0A_Reset
00013054 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00013058 4E75                       		rts	
0001305A                            ; ===========================================================================
0001305A                            
0001305A                            Obj52_0A_Reset:
0001305A 4268 0036                  		clr.w	$36(a0)
0001305E 5328 0028                  		subq.b	#1,$28(a0)
00013062 4E75                       		rts	
00013064                            ; ===========================================================================
00013064                            ; ---------------------------------------------------------------------------
00013064                            ; Sprite mappings - moving blocks (MZ, SBZ)
00013064                            ; ---------------------------------------------------------------------------
00013064                            Map_obj52:
00013064                            	include "_maps\obj52mz.asm"
00013064                            ; ---------------------------------------------------------------------------
00013064                            ; Sprite mappings - moving blocks (MZ, SBZ)
00013064                            ; ---------------------------------------------------------------------------
00013064 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00013068 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0001306C 0000                       		dc.w byte_1008F-Map_obj52
0001306E 01                         byte_10054:	dc.b 1
0001306F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00013074 02                         byte_1005A:	dc.b 2
00013075 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001307A F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001307F 04                         byte_10065:	dc.b 4
00013080 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00013085 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001308A F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001308F 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00013094 04                         byte_1007A:	dc.b 4
00013095 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001309A F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001309F F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000130A4 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000130A9 03                         byte_1008F:	dc.b 3
000130AA F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000130AF F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000130B4 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000130BA 00                         		even
000130BA 00                         		even
000130BA                            
000130BA                            ; ---------------------------------------------------------------------------
000130BA                            ; Sprite mappings - moving block (LZ)
000130BA                            ; ---------------------------------------------------------------------------
000130BA                            Map_obj52a:
000130BA                            	include "_maps\obj52lz.asm"
000130BA                            ; ---------------------------------------------------------------------------
000130BA                            ; Sprite mappings - moving block (LZ)
000130BA                            ; ---------------------------------------------------------------------------
000130BA 0000                       		dc.w byte_100A2-Map_obj52a
000130BC 01                         byte_100A2:	dc.b 1
000130BD F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000130C2                            		even
000130C2                            		even
000130C2                            
000130C2                            ; ===========================================================================
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            ; Object 55 - Basaran enemy (MZ)
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            
000130C2                            Obj55:					; XREF: Obj_Index
000130C2 7000                       		moveq	#0,d0
000130C4 1028 0024                  		move.b	$24(a0),d0
000130C8 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000130CC 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000130D0                            ; ===========================================================================
000130D0 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000130D2 0000                       		dc.w Obj55_Action-Obj55_Index
000130D4                            ; ===========================================================================
000130D4                            
000130D4                            Obj55_Main:				; XREF: Obj55_Index
000130D4 5428 0024                  		addq.b	#2,$24(a0)
000130D8 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000130E0 317C 84B8 0002             		move.w	#$84B8,2(a0)
000130E6 117C 0004 0001             		move.b	#4,1(a0)
000130EC 117C 000C 0016             		move.b	#$C,$16(a0)
000130F2 117C 0002 0018             		move.b	#2,$18(a0)
000130F8 117C 000B 0020             		move.b	#$B,$20(a0)
000130FE 117C 0010 0019             		move.b	#$10,$19(a0)
00013104                            
00013104                            Obj55_Action:				; XREF: Obj55_Index
00013104 7000                       		moveq	#0,d0
00013106 1028 0025                  		move.b	$25(a0),d0
0001310A 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001310E 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00013112 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00013118 6100 9F92                  		bsr.w	AnimateSprite
0001311C 6000 F6C8                  		bra.w	MarkObjGone
00013120                            ; ===========================================================================
00013120 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00013122 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00013124 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00013126 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00013128                            ; ===========================================================================
00013128                            
00013128                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00013128 343C 0080                  		move.w	#$80,d2
0001312C 6100 0000                  		bsr.w	Obj55_ChkSonic
00013130 6400                       		bcc.s	Obj55_NoDrop
00013132 3038 D00C                  		move.w	($FFFFD00C).w,d0
00013136 3140 0036                  		move.w	d0,$36(a0)
0001313A 9068 000C                  		sub.w	$C(a0),d0
0001313E 6500                       		bcs.s	Obj55_NoDrop
00013140 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00013144 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00013146 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001314A 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001314C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00013150 D007                       		add.b	d7,d0
00013152 0200 0007                  		andi.b	#7,d0
00013156 6600                       		bne.s	Obj55_NoDrop
00013158 117C 0001 001C             		move.b	#1,$1C(a0)
0001315E 5428 0025                  		addq.b	#2,$25(a0)
00013162                            
00013162                            Obj55_NoDrop:
00013162 4E75                       		rts	
00013164                            ; ===========================================================================
00013164                            
00013164                            Obj55_DropFly:				; XREF: Obj55_Index2
00013164 6100 D376                  		bsr.w	SpeedToPos
00013168 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
0001316E 343C 0080                  		move.w	#$80,d2
00013172 6100 0000                  		bsr.w	Obj55_ChkSonic
00013176 3028 0036                  		move.w	$36(a0),d0
0001317A 9068 000C                  		sub.w	$C(a0),d0
0001317E 6500                       		bcs.s	Obj55_ChkDel
00013180 0C40 0010                  		cmpi.w	#$10,d0
00013184 6400                       		bcc.s	locret_10180
00013186 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
0001318A 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00013190 117C 0002 001C             		move.b	#2,$1C(a0)
00013196 5428 0025                  		addq.b	#2,$25(a0)
0001319A                            
0001319A                            locret_10180:
0001319A 4E75                       		rts	
0001319C                            ; ===========================================================================
0001319C                            
0001319C                            Obj55_ChkDel:				; XREF: Obj55_DropFly
0001319C 4A28 0001                  		tst.b	1(a0)
000131A0 6A00 D39C                  		bpl.w	DeleteObject
000131A4 4E75                       		rts	
000131A6                            ; ===========================================================================
000131A6                            
000131A6                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000131A6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000131AA 0200 000F                  		andi.b	#$F,d0
000131AE 6600                       		bne.s	loc_101A0
000131B0 303C 00C0                  		move.w	#$C0,d0
000131B4 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play flapping sound
000131BA                            
000131BA                            loc_101A0:
000131BA 6100 D320                  		bsr.w	SpeedToPos
000131BE 3038 D008                  		move.w	($FFFFD008).w,d0
000131C2 9068 0008                  		sub.w	8(a0),d0
000131C6 6400                       		bcc.s	loc_101B0
000131C8 4440                       		neg.w	d0
000131CA                            
000131CA                            loc_101B0:
000131CA 0C40 0080                  		cmpi.w	#$80,d0
000131CE 6500                       		bcs.s	locret_101C6
000131D0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000131D4 D007                       		add.b	d7,d0
000131D6 0200 0007                  		andi.b	#7,d0
000131DA 6600                       		bne.s	locret_101C6
000131DC 5428 0025                  		addq.b	#2,$25(a0)
000131E0                            
000131E0                            locret_101C6:
000131E0 4E75                       		rts	
000131E2                            ; ===========================================================================
000131E2                            
000131E2                            Obj55_FlyUp:				; XREF: Obj55_Index2
000131E2 6100 D2F8                  		bsr.w	SpeedToPos
000131E6 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
000131EC 6100 0000                  		bsr.w	ObjHitCeiling
000131F0 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000131F2 6A00                       		bpl.s	locret_101F4	; if not, branch
000131F4 9368 000C                  		sub.w	d1,$C(a0)
000131F8 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
000131FE 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00013202 4268 0012                  		clr.w	$12(a0)
00013206 4228 001C                  		clr.b	$1C(a0)
0001320A 4228 0025                  		clr.b	$25(a0)
0001320E                            
0001320E                            locret_101F4:
0001320E 4E75                       		rts	
00013210                            ; ===========================================================================
00013210                            
00013210                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00013210 323C 0100                  		move.w	#$100,d1
00013214 08E8 0000 0022             		bset	#0,$22(a0)
0001321A 3038 D008                  		move.w	($FFFFD008).w,d0
0001321E 9068 0008                  		sub.w	8(a0),d0
00013222 6400                       		bcc.s	loc_10214
00013224 4440                       		neg.w	d0
00013226 4441                       		neg.w	d1
00013228 08A8 0000 0022             		bclr	#0,$22(a0)
0001322E                            
0001322E                            loc_10214:
0001322E B042                       		cmp.w	d2,d0
00013230 4E75                       		rts	
00013232                            ; ===========================================================================
00013232 6100 D2A8                  		bsr.w	SpeedToPos
00013236 6100 D2CA                  		bsr.w	DisplaySprite
0001323A 4A28 0001                  		tst.b	1(a0)
0001323E 6A00 D2FE                  		bpl.w	DeleteObject
00013242 4E75                       		rts	
00013244                            ; ===========================================================================
00013244                            Ani_obj55:
00013244                            	include "_anim\obj55.asm"
00013244                            ; ---------------------------------------------------------------------------
00013244                            ; Animation script - Basaran enemy
00013244                            ; ---------------------------------------------------------------------------
00013244 0000                       		dc.w byte_10230-Ani_obj55
00013246 0000                       		dc.w byte_10234-Ani_obj55
00013248 0000                       		dc.w byte_10238-Ani_obj55
0001324A 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
0001324E 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00013252 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00013258                            		even
00013258                            		even
00013258                            
00013258                            ; ---------------------------------------------------------------------------
00013258                            ; Sprite mappings - Basaran enemy (MZ)
00013258                            ; ---------------------------------------------------------------------------
00013258                            Map_obj55:
00013258                            	include "_maps\obj55.asm"
00013258                            ; ---------------------------------------------------------------------------
00013258                            ; Sprite mappings - Basaran enemy (MZ)
00013258                            ; ---------------------------------------------------------------------------
00013258 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
0001325C 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00013260 01                         byte_10246:	dc.b 1
00013261 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00013266 03                         byte_1024C:	dc.b 3
00013267 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
0001326C 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00013271 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00013276 04                         byte_1025C:	dc.b 4
00013277 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
0001327C 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00013281 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00013286 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
0001328B 04                         byte_10271:	dc.b 4
0001328C F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00013291 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00013296 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
0001329B FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000132A0                            		even
000132A0                            		even
000132A0                            
000132A0                            ; ===========================================================================
000132A0                            ; ---------------------------------------------------------------------------
000132A0                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000132A0                            ; ---------------------------------------------------------------------------
000132A0                            
000132A0                            Obj56:					; XREF: Obj_Index
000132A0 7000                       		moveq	#0,d0
000132A2 1028 0024                  		move.b	$24(a0),d0
000132A6 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000132AA 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000132AE                            ; ===========================================================================
000132AE 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000132B0 0000                       		dc.w Obj56_Action-Obj56_Index
000132B2                            
000132B2 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000132B4 2020                       		dc.b  $20, $20
000132B6 1020                       		dc.b  $10, $20
000132B8 201A                       		dc.b  $20, $1A
000132BA 1027                       		dc.b  $10, $27
000132BC 1010                       		dc.b  $10, $10
000132BE 0820                       		dc.b	8, $20
000132C0 4010                       		dc.b  $40, $10
000132C2                            ; ===========================================================================
000132C2                            
000132C2                            Obj56_Main:				; XREF: Obj56_Index
000132C2 5428 0024                  		addq.b	#2,$24(a0)
000132C6 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
000132CE 317C 4000 0002             		move.w	#$4000,2(a0)
000132D4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000132DA 6600                       		bne.s	loc_102C8
000132DC 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
000132E2                            
000132E2                            loc_102C8:
000132E2 117C 0004 0001             		move.b	#4,1(a0)
000132E8 117C 0003 0018             		move.b	#3,$18(a0)
000132EE 7000                       		moveq	#0,d0
000132F0 1028 0028                  		move.b	$28(a0),d0
000132F4 E648                       		lsr.w	#3,d0
000132F6 0240 000E                  		andi.w	#$E,d0
000132FA 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
000132FE 115A 0019                  		move.b	(a2)+,$19(a0)
00013302 1152 0016                  		move.b	(a2),$16(a0)
00013306 E248                       		lsr.w	#1,d0
00013308 1140 001A                  		move.b	d0,$1A(a0)
0001330C 3168 0008 0034             		move.w	8(a0),$34(a0)
00013312 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013318 7000                       		moveq	#0,d0
0001331A 1012                       		move.b	(a2),d0
0001331C D040                       		add.w	d0,d0
0001331E 3140 003A                  		move.w	d0,$3A(a0)
00013322 7000                       		moveq	#0,d0
00013324 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001332A 6700                       		beq.s	loc_10332
0001332C 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00013330 0240 000F                  		andi.w	#$F,d0
00013334 5140                       		subq.w	#8,d0
00013336 6500                       		bcs.s	loc_10332
00013338 E548                       		lsl.w	#2,d0
0001333A 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
0001333E 45F2 0000                  		lea	(a2,d0.w),a2
00013342 4A52                       		tst.w	(a2)
00013344 6A00                       		bpl.s	loc_10332
00013346 0868 0000 0022             		bchg	#0,$22(a0)
0001334C                            
0001334C                            loc_10332:
0001334C 1028 0028                  		move.b	$28(a0),d0
00013350 6A00                       		bpl.s	Obj56_Action
00013352 0200 000F                  		andi.b	#$F,d0
00013356 1140 003C                  		move.b	d0,$3C(a0)
0001335A 117C 0005 0028             		move.b	#5,$28(a0)
00013360 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00013366 6600                       		bne.s	Obj56_ChkGone
00013368 117C 000C 0028             		move.b	#$C,$28(a0)
0001336E 317C 0080 003A             		move.w	#$80,$3A(a0)
00013374                            
00013374                            Obj56_ChkGone:
00013374 45F8 FC00                  		lea	($FFFFFC00).w,a2
00013378 7000                       		moveq	#0,d0
0001337A 1028 0023                  		move.b	$23(a0),d0
0001337E 6700                       		beq.s	Obj56_Action
00013380 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00013386 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001338C 6700                       		beq.s	Obj56_Action
0001338E 5228 0028                  		addq.b	#1,$28(a0)
00013392 4268 003A                  		clr.w	$3A(a0)
00013396                            
00013396                            Obj56_Action:				; XREF: Obj56_Index
00013396 3F28 0008                  		move.w	8(a0),-(sp)
0001339A 7000                       		moveq	#0,d0
0001339C 1028 0028                  		move.b	$28(a0),d0	; get object type
000133A0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000133A4 D040                       		add.w	d0,d0
000133A6 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000133AA 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000133AE 381F                       		move.w	(sp)+,d4
000133B0 4A28 0001                  		tst.b	1(a0)
000133B4 6A00                       		bpl.s	Obj56_ChkDel
000133B6 7200                       		moveq	#0,d1
000133B8 1228 0019                  		move.b	$19(a0),d1
000133BC 0641 000B                  		addi.w	#$B,d1
000133C0 7400                       		moveq	#0,d2
000133C2 1428 0016                  		move.b	$16(a0),d2
000133C6 3602                       		move.w	d2,d3
000133C8 5243                       		addq.w	#1,d3
000133CA 6100 F622                  		bsr.w	SolidObject
000133CE                            
000133CE                            Obj56_ChkDel:
000133CE 3028 0034                  		move.w	$34(a0),d0
000133D2 0240 FF80                  		andi.w	#$FF80,d0
000133D6 3238 F700                  		move.w	($FFFFF700).w,d1
000133DA 0441 0080                  		subi.w	#$80,d1
000133DE 0241 FF80                  		andi.w	#$FF80,d1
000133E2 9041                       		sub.w	d1,d0
000133E4 0C40 0280                  		cmpi.w	#$280,d0
000133E8 6200 D154                  		bhi.w	DeleteObject
000133EC 6000 D114                  		bra.w	DisplaySprite
000133F0                            ; ===========================================================================
000133F0 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
000133F4 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
000133F8 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
000133FC 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00013400 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00013404 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00013408 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001340C                            ; ===========================================================================
0001340C                            
0001340C                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001340C 4E75                       		rts	
0001340E                            ; ===========================================================================
0001340E                            
0001340E                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001340E 323C 0040                  		move.w	#$40,d1
00013412 7000                       		moveq	#0,d0
00013414 1038 FE68                  		move.b	($FFFFFE68).w,d0
00013418 6000                       		bra.s	Obj56_Move_LR
0001341A                            ; ===========================================================================
0001341A                            
0001341A                            Obj56_Type02:				; XREF: Obj56_TypeIndex
0001341A 323C 0080                  		move.w	#$80,d1
0001341E 7000                       		moveq	#0,d0
00013420 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00013424                            
00013424                            Obj56_Move_LR:
00013424 0828 0000 0022             		btst	#0,$22(a0)
0001342A 6700                       		beq.s	loc_10416
0001342C 4440                       		neg.w	d0
0001342E D041                       		add.w	d1,d0
00013430                            
00013430                            loc_10416:
00013430 3228 0034                  		move.w	$34(a0),d1
00013434 9240                       		sub.w	d0,d1
00013436 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001343A 4E75                       		rts	
0001343C                            ; ===========================================================================
0001343C                            
0001343C                            Obj56_Type03:				; XREF: Obj56_TypeIndex
0001343C 323C 0040                  		move.w	#$40,d1
00013440 7000                       		moveq	#0,d0
00013442 1038 FE68                  		move.b	($FFFFFE68).w,d0
00013446 6000                       		bra.s	Obj56_Move_UD
00013448                            ; ===========================================================================
00013448                            
00013448                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00013448 323C 0080                  		move.w	#$80,d1
0001344C 7000                       		moveq	#0,d0
0001344E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00013452                            
00013452                            Obj56_Move_UD:
00013452 0828 0000 0022             		btst	#0,$22(a0)
00013458 6700                       		beq.s	loc_10444
0001345A 4440                       		neg.w	d0
0001345C D041                       		add.w	d1,d0
0001345E                            
0001345E                            loc_10444:
0001345E 3228 0030                  		move.w	$30(a0),d1
00013462 9240                       		sub.w	d0,d1
00013464 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00013468 4E75                       		rts	
0001346A                            ; ===========================================================================
0001346A                            
0001346A                            Obj56_Type05:				; XREF: Obj56_TypeIndex
0001346A 4A28 0038                  		tst.b	$38(a0)
0001346E 6600                       		bne.s	loc_104A4
00013470 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00013476 6600                       		bne.s	loc_1047A	; if not, branch
00013478 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
0001347E 6600                       		bne.s	loc_1047A
00013480 4238 F7C9                  		clr.b	($FFFFF7C9).w
00013484 3038 D008                  		move.w	($FFFFD008).w,d0
00013488 B068 0008                  		cmp.w	8(a0),d0
0001348C 6400                       		bcc.s	loc_1047A
0001348E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00013494                            
00013494                            loc_1047A:
00013494 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00013498 7000                       		moveq	#0,d0
0001349A 1028 003C                  		move.b	$3C(a0),d0
0001349E 0832 0000 0000             		btst	#0,(a2,d0.w)
000134A4 6700                       		beq.s	loc_104AE
000134A6 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000134AC 6600                       		bne.s	loc_1049E	; if not, branch
000134AE 0C00 0003                  		cmpi.b	#3,d0
000134B2 6600                       		bne.s	loc_1049E
000134B4 4238 F7C9                  		clr.b	($FFFFF7C9).w
000134B8                            
000134B8                            loc_1049E:
000134B8 117C 0001 0038             		move.b	#1,$38(a0)
000134BE                            
000134BE                            loc_104A4:
000134BE 4A68 003A                  		tst.w	$3A(a0)
000134C2 6700                       		beq.s	loc_104C8
000134C4 5568 003A                  		subq.w	#2,$3A(a0)
000134C8                            
000134C8                            loc_104AE:
000134C8 3028 003A                  		move.w	$3A(a0),d0
000134CC 0828 0000 0022             		btst	#0,$22(a0)
000134D2 6700                       		beq.s	loc_104BC
000134D4 4440                       		neg.w	d0
000134D6                            
000134D6                            loc_104BC:
000134D6 3228 0030                  		move.w	$30(a0),d1
000134DA D240                       		add.w	d0,d1
000134DC 3141 000C                  		move.w	d1,$C(a0)
000134E0 4E75                       		rts	
000134E2                            ; ===========================================================================
000134E2                            
000134E2                            loc_104C8:
000134E2 5228 0028                  		addq.b	#1,$28(a0)
000134E6 4228 0038                  		clr.b	$38(a0)
000134EA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000134EE 7000                       		moveq	#0,d0
000134F0 1028 0023                  		move.b	$23(a0),d0
000134F4 67D2                       		beq.s	loc_104AE
000134F6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000134FC 60CA                       		bra.s	loc_104AE
000134FE                            ; ===========================================================================
000134FE                            
000134FE                            Obj56_Type06:				; XREF: Obj56_TypeIndex
000134FE 4A28 0038                  		tst.b	$38(a0)
00013502 6600                       		bne.s	loc_10500
00013504 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00013508 7000                       		moveq	#0,d0
0001350A 1028 003C                  		move.b	$3C(a0),d0
0001350E 4A32 0000                  		tst.b	(a2,d0.w)
00013512 6A00                       		bpl.s	loc_10512
00013514 117C 0001 0038             		move.b	#1,$38(a0)
0001351A                            
0001351A                            loc_10500:
0001351A 7000                       		moveq	#0,d0
0001351C 1028 0016                  		move.b	$16(a0),d0
00013520 D040                       		add.w	d0,d0
00013522 B068 003A                  		cmp.w	$3A(a0),d0
00013526 6700                       		beq.s	loc_1052C
00013528 5468 003A                  		addq.w	#2,$3A(a0)
0001352C                            
0001352C                            loc_10512:
0001352C 3028 003A                  		move.w	$3A(a0),d0
00013530 0828 0000 0022             		btst	#0,$22(a0)
00013536 6700                       		beq.s	loc_10520
00013538 4440                       		neg.w	d0
0001353A                            
0001353A                            loc_10520:
0001353A 3228 0030                  		move.w	$30(a0),d1
0001353E D240                       		add.w	d0,d1
00013540 3141 000C                  		move.w	d1,$C(a0)
00013544 4E75                       		rts	
00013546                            ; ===========================================================================
00013546                            
00013546                            loc_1052C:
00013546 5328 0028                  		subq.b	#1,$28(a0)
0001354A 4228 0038                  		clr.b	$38(a0)
0001354E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00013552 7000                       		moveq	#0,d0
00013554 1028 0023                  		move.b	$23(a0),d0
00013558 67D2                       		beq.s	loc_10512
0001355A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00013560 60CA                       		bra.s	loc_10512
00013562                            ; ===========================================================================
00013562                            
00013562                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00013562 4A28 0038                  		tst.b	$38(a0)
00013566 6600                       		bne.s	loc_1055E
00013568 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
0001356C 6700                       		beq.s	locret_10578
0001356E 117C 0001 0038             		move.b	#1,$38(a0)
00013574 4268 003A                  		clr.w	$3A(a0)
00013578                            
00013578                            loc_1055E:
00013578 5268 0008                  		addq.w	#1,8(a0)
0001357C 3168 0008 0034             		move.w	8(a0),$34(a0)
00013582 5268 003A                  		addq.w	#1,$3A(a0)
00013586 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
0001358C 6600                       		bne.s	locret_10578
0001358E 4228 0028                  		clr.b	$28(a0)
00013592                            
00013592                            locret_10578:
00013592 4E75                       		rts	
00013594                            ; ===========================================================================
00013594                            
00013594                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00013594 4A28 0038                  		tst.b	$38(a0)
00013598 6600                       		bne.s	loc_10598
0001359A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001359E 7000                       		moveq	#0,d0
000135A0 1028 003C                  		move.b	$3C(a0),d0
000135A4 0832 0000 0000             		btst	#0,(a2,d0.w)
000135AA 6700                       		beq.s	loc_105A2
000135AC 117C 0001 0038             		move.b	#1,$38(a0)
000135B2                            
000135B2                            loc_10598:
000135B2 4A68 003A                  		tst.w	$3A(a0)
000135B6 6700                       		beq.s	loc_105C0
000135B8 5568 003A                  		subq.w	#2,$3A(a0)
000135BC                            
000135BC                            loc_105A2:
000135BC 3028 003A                  		move.w	$3A(a0),d0
000135C0 0828 0000 0022             		btst	#0,$22(a0)
000135C6 6700                       		beq.s	loc_105B4
000135C8 4440                       		neg.w	d0
000135CA 0640 0080                  		addi.w	#$80,d0
000135CE                            
000135CE                            loc_105B4:
000135CE 3228 0034                  		move.w	$34(a0),d1
000135D2 D240                       		add.w	d0,d1
000135D4 3141 0008                  		move.w	d1,8(a0)
000135D8 4E75                       		rts	
000135DA                            ; ===========================================================================
000135DA                            
000135DA                            loc_105C0:
000135DA 5228 0028                  		addq.b	#1,$28(a0)
000135DE 4228 0038                  		clr.b	$38(a0)
000135E2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000135E6 7000                       		moveq	#0,d0
000135E8 1028 0023                  		move.b	$23(a0),d0
000135EC 67CE                       		beq.s	loc_105A2
000135EE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000135F4 60C6                       		bra.s	loc_105A2
000135F6                            ; ===========================================================================
000135F6                            
000135F6                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
000135F6 4A28 0038                  		tst.b	$38(a0)
000135FA 6600                       		bne.s	loc_105F8
000135FC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00013600 7000                       		moveq	#0,d0
00013602 1028 003C                  		move.b	$3C(a0),d0
00013606 4A32 0000                  		tst.b	(a2,d0.w)
0001360A 6A00                       		bpl.s	loc_10606
0001360C 117C 0001 0038             		move.b	#1,$38(a0)
00013612                            
00013612                            loc_105F8:
00013612 303C 0080                  		move.w	#$80,d0
00013616 B068 003A                  		cmp.w	$3A(a0),d0
0001361A 6700                       		beq.s	loc_10624
0001361C 5468 003A                  		addq.w	#2,$3A(a0)
00013620                            
00013620                            loc_10606:
00013620 3028 003A                  		move.w	$3A(a0),d0
00013624 0828 0000 0022             		btst	#0,$22(a0)
0001362A 6700                       		beq.s	loc_10618
0001362C 4440                       		neg.w	d0
0001362E 0640 0080                  		addi.w	#$80,d0
00013632                            
00013632                            loc_10618:
00013632 3228 0034                  		move.w	$34(a0),d1
00013636 D240                       		add.w	d0,d1
00013638 3141 0008                  		move.w	d1,8(a0)
0001363C 4E75                       		rts	
0001363E                            ; ===========================================================================
0001363E                            
0001363E                            loc_10624:
0001363E 5328 0028                  		subq.b	#1,$28(a0)
00013642 4228 0038                  		clr.b	$38(a0)
00013646 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001364A 7000                       		moveq	#0,d0
0001364C 1028 0023                  		move.b	$23(a0),d0
00013650 67CE                       		beq.s	loc_10606
00013652 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00013658 60C6                       		bra.s	loc_10606
0001365A                            ; ===========================================================================
0001365A                            
0001365A                            Obj56_Type08:				; XREF: Obj56_TypeIndex
0001365A 323C 0010                  		move.w	#$10,d1
0001365E 7000                       		moveq	#0,d0
00013660 1038 FE88                  		move.b	($FFFFFE88).w,d0
00013664 E248                       		lsr.w	#1,d0
00013666 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
0001366A 6000                       		bra.s	Obj56_Move_Sqr
0001366C                            ; ===========================================================================
0001366C                            
0001366C                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001366C 323C 0030                  		move.w	#$30,d1
00013670 7000                       		moveq	#0,d0
00013672 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00013676 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
0001367A 6000                       		bra.s	Obj56_Move_Sqr
0001367C                            ; ===========================================================================
0001367C                            
0001367C                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001367C 323C 0050                  		move.w	#$50,d1
00013680 7000                       		moveq	#0,d0
00013682 1038 FE90                  		move.b	($FFFFFE90).w,d0
00013686 3638 FE92                  		move.w	($FFFFFE92).w,d3
0001368A 6000                       		bra.s	Obj56_Move_Sqr
0001368C                            ; ===========================================================================
0001368C                            
0001368C                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
0001368C 323C 0070                  		move.w	#$70,d1
00013690 7000                       		moveq	#0,d0
00013692 1038 FE94                  		move.b	($FFFFFE94).w,d0
00013696 3638 FE96                  		move.w	($FFFFFE96).w,d3
0001369A                            
0001369A                            Obj56_Move_Sqr:
0001369A 4A43                       		tst.w	d3
0001369C 6600                       		bne.s	loc_1068E
0001369E 5228 0022                  		addq.b	#1,$22(a0)
000136A2 0228 0003 0022             		andi.b	#3,$22(a0)
000136A8                            
000136A8                            loc_1068E:
000136A8 1428 0022                  		move.b	$22(a0),d2
000136AC 0202 0003                  		andi.b	#3,d2
000136B0 6600                       		bne.s	loc_106AE
000136B2 9041                       		sub.w	d1,d0
000136B4 D068 0034                  		add.w	$34(a0),d0
000136B8 3140 0008                  		move.w	d0,8(a0)
000136BC 4441                       		neg.w	d1
000136BE D268 0030                  		add.w	$30(a0),d1
000136C2 3141 000C                  		move.w	d1,$C(a0)
000136C6 4E75                       		rts	
000136C8                            ; ===========================================================================
000136C8                            
000136C8                            loc_106AE:
000136C8 5302                       		subq.b	#1,d2
000136CA 6600                       		bne.s	loc_106CC
000136CC 5341                       		subq.w	#1,d1
000136CE 9041                       		sub.w	d1,d0
000136D0 4440                       		neg.w	d0
000136D2 D068 0030                  		add.w	$30(a0),d0
000136D6 3140 000C                  		move.w	d0,$C(a0)
000136DA 5241                       		addq.w	#1,d1
000136DC D268 0034                  		add.w	$34(a0),d1
000136E0 3141 0008                  		move.w	d1,8(a0)
000136E4 4E75                       		rts	
000136E6                            ; ===========================================================================
000136E6                            
000136E6                            loc_106CC:
000136E6 5302                       		subq.b	#1,d2
000136E8 6600                       		bne.s	loc_106EA
000136EA 5341                       		subq.w	#1,d1
000136EC 9041                       		sub.w	d1,d0
000136EE 4440                       		neg.w	d0
000136F0 D068 0034                  		add.w	$34(a0),d0
000136F4 3140 0008                  		move.w	d0,8(a0)
000136F8 5241                       		addq.w	#1,d1
000136FA D268 0030                  		add.w	$30(a0),d1
000136FE 3141 000C                  		move.w	d1,$C(a0)
00013702 4E75                       		rts	
00013704                            ; ===========================================================================
00013704                            
00013704                            loc_106EA:
00013704 9041                       		sub.w	d1,d0
00013706 D068 0030                  		add.w	$30(a0),d0
0001370A 3140 000C                  		move.w	d0,$C(a0)
0001370E 4441                       		neg.w	d1
00013710 D268 0034                  		add.w	$34(a0),d1
00013714 3141 0008                  		move.w	d1,8(a0)
00013718 4E75                       		rts	
0001371A                            ; ===========================================================================
0001371A                            ; ---------------------------------------------------------------------------
0001371A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001371A                            ; ---------------------------------------------------------------------------
0001371A                            Map_obj56:
0001371A                            	include "_maps\obj56.asm"
0001371A                            ; ---------------------------------------------------------------------------
0001371A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001371A                            ; ---------------------------------------------------------------------------
0001371A 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0001371E 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00013722 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00013726 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
0001372A 01                         byte_10710:	dc.b 1
0001372B F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00013730 04                         byte_10716:	dc.b 4
00013731 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00013736 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001373B 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00013740 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00013745 02                         byte_1072B:	dc.b 2
00013746 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001374B 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00013750 04                         byte_10736:	dc.b 4
00013751 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00013756 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001375B 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00013760 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00013765 03                         byte_1074B:	dc.b 3
00013766 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001376B F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00013770 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00013775 01                         byte_1075B:	dc.b 1
00013776 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001377B 02                         byte_10761:	dc.b 2
0001377C E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00013781 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00013786 04                         byte_1076C:	dc.b 4
00013787 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001378C F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00013791 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00013796 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001379C 00                         		even
0001379C 00                         		even
0001379C                            
0001379C                            ; ===========================================================================
0001379C                            ; ---------------------------------------------------------------------------
0001379C                            ; Object 57 - spiked balls (SYZ, LZ)
0001379C                            ; ---------------------------------------------------------------------------
0001379C                            
0001379C                            Obj57:					; XREF: Obj_Index
0001379C 7000                       		moveq	#0,d0
0001379E 1028 0024                  		move.b	$24(a0),d0
000137A2 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000137A6 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000137AA                            ; ===========================================================================
000137AA 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000137AC 0000                       		dc.w Obj57_Move-Obj57_Index
000137AE 0000                       		dc.w Obj57_Display-Obj57_Index
000137B0                            ; ===========================================================================
000137B0                            
000137B0                            Obj57_Main:				; XREF: Obj57_Index
000137B0 5428 0024                  		addq.b	#2,$24(a0)
000137B4 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000137BC 317C 03BA 0002             		move.w	#$3BA,2(a0)
000137C2 117C 0004 0001             		move.b	#4,1(a0)
000137C8 117C 0004 0018             		move.b	#4,$18(a0)
000137CE 117C 0008 0019             		move.b	#8,$19(a0)
000137D4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000137DA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000137E0 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000137E6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000137EC 6600                       		bne.s	loc_107E8
000137EE 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000137F4 317C 0310 0002             		move.w	#$310,2(a0)
000137FA 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00013802                            
00013802                            loc_107E8:
00013802 1228 0028                  		move.b	$28(a0),d1	; get object type
00013806 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001380A 4881                       		ext.w	d1
0001380C E741                       		asl.w	#3,d1		; multiply by 8
0001380E 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00013812 1028 0022                  		move.b	$22(a0),d0
00013816 E418                       		ror.b	#2,d0
00013818 0200 00C0                  		andi.b	#-$40,d0
0001381C 1140 0026                  		move.b	d0,$26(a0)
00013820 45E8 0029                  		lea	$29(a0),a2
00013824 1228 0028                  		move.b	$28(a0),d1	; get object type
00013828 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001382C 14FC 0000                  		move.b	#0,(a2)+
00013830 3601                       		move.w	d1,d3
00013832 E94B                       		lsl.w	#4,d3
00013834 1143 003C                  		move.b	d3,$3C(a0)
00013838 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001383A 6500                       		bcs.s	loc_10894
0001383C 0828 0003 0028             		btst	#3,$28(a0)
00013842 6700                       		beq.s	Obj57_MakeChain
00013844 5341                       		subq.w	#1,d1
00013846 6500                       		bcs.s	loc_10894
00013848                            
00013848                            Obj57_MakeChain:
00013848 6100 D13E                  		bsr.w	SingleObjLoad
0001384C 6600                       		bne.s	loc_10894
0001384E 5228 0029                  		addq.b	#1,$29(a0)
00013852 3A09                       		move.w	a1,d5
00013854 0445 D000                  		subi.w	#-$3000,d5
00013858 EC4D                       		lsr.w	#6,d5
0001385A 0245 007F                  		andi.w	#$7F,d5
0001385E 14C5                       		move.b	d5,(a2)+
00013860 137C 0004 0024             		move.b	#4,$24(a1)
00013866 1290                       		move.b	0(a0),0(a1)
00013868 2368 0004 0004             		move.l	4(a0),4(a1)
0001386E 3368 0002 0002             		move.w	2(a0),2(a1)
00013874 1368 0001 0001             		move.b	1(a0),1(a1)
0001387A 1368 0018 0018             		move.b	$18(a0),$18(a1)
00013880 1368 0019 0019             		move.b	$19(a0),$19(a1)
00013886 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001388C 0403 0010                  		subi.b	#$10,d3
00013890 1343 003C                  		move.b	d3,$3C(a1)
00013894 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001389A 6600                       		bne.s	loc_10890
0001389C 4A03                       		tst.b	d3
0001389E 6600                       		bne.s	loc_10890
000138A0 137C 0002 001A             		move.b	#2,$1A(a1)
000138A6                            
000138A6                            loc_10890:
000138A6 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000138AA                            
000138AA                            loc_10894:
000138AA 3A08                       		move.w	a0,d5
000138AC 0445 D000                  		subi.w	#-$3000,d5
000138B0 EC4D                       		lsr.w	#6,d5
000138B2 0245 007F                  		andi.w	#$7F,d5
000138B6 14C5                       		move.b	d5,(a2)+
000138B8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000138BE 6600                       		bne.s	Obj57_Move
000138C0 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000138C6 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000138CC                            
000138CC                            Obj57_Move:				; XREF: Obj57_Index
000138CC 6100 0000                  		bsr.w	Obj57_MoveSub
000138D0 6000 0000                  		bra.w	Obj57_ChkDel
000138D4                            ; ===========================================================================
000138D4                            
000138D4                            Obj57_MoveSub:				; XREF: Obj57_Move
000138D4 3028 003E                  		move.w	$3E(a0),d0
000138D8 D168 0026                  		add.w	d0,$26(a0)
000138DC 1028 0026                  		move.b	$26(a0),d0
000138E0 4EB9 0000 3798             		jsr	(CalcSine).l
000138E6 3428 0038                  		move.w	$38(a0),d2
000138EA 3628 003A                  		move.w	$3A(a0),d3
000138EE 45E8 0029                  		lea	$29(a0),a2
000138F2 7C00                       		moveq	#0,d6
000138F4 1C1A                       		move.b	(a2)+,d6
000138F6                            
000138F6                            Obj57_MoveLoop:
000138F6 7800                       		moveq	#0,d4
000138F8 181A                       		move.b	(a2)+,d4
000138FA ED4C                       		lsl.w	#6,d4
000138FC 0684 00FF D000             		addi.l	#$FFD000,d4
00013902 2244                       		movea.l	d4,a1
00013904 7800                       		moveq	#0,d4
00013906 1829 003C                  		move.b	$3C(a1),d4
0001390A 2A04                       		move.l	d4,d5
0001390C C9C0                       		muls.w	d0,d4
0001390E E084                       		asr.l	#8,d4
00013910 CBC1                       		muls.w	d1,d5
00013912 E085                       		asr.l	#8,d5
00013914 D842                       		add.w	d2,d4
00013916 DA43                       		add.w	d3,d5
00013918 3344 000C                  		move.w	d4,$C(a1)
0001391C 3345 0008                  		move.w	d5,8(a1)
00013920 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00013924 4E75                       		rts	
00013926                            ; ===========================================================================
00013926                            
00013926                            Obj57_ChkDel:				; XREF: Obj57_Move
00013926 3028 003A                  		move.w	$3A(a0),d0
0001392A 0240 FF80                  		andi.w	#$FF80,d0
0001392E 3238 F700                  		move.w	($FFFFF700).w,d1
00013932 0441 0080                  		subi.w	#$80,d1
00013936 0241 FF80                  		andi.w	#$FF80,d1
0001393A 9041                       		sub.w	d1,d0
0001393C 0C40 0280                  		cmpi.w	#$280,d0
00013940 6200 0000                  		bhi.w	Obj57_Delete
00013944 6000 CBBC                  		bra.w	DisplaySprite
00013948                            ; ===========================================================================
00013948                            
00013948                            Obj57_Delete:				; XREF: Obj57_ChkDel
00013948 7400                       		moveq	#0,d2
0001394A 45E8 0029                  		lea	$29(a0),a2
0001394E 141A                       		move.b	(a2)+,d2
00013950                            
00013950                            Obj57_DelLoop:
00013950 7000                       		moveq	#0,d0
00013952 101A                       		move.b	(a2)+,d0
00013954 ED48                       		lsl.w	#6,d0
00013956 0680 00FF D000             		addi.l	#$FFD000,d0
0001395C 2240                       		movea.l	d0,a1
0001395E 6100 CBE0                  		bsr.w	DeleteObject2
00013962 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00013966                            
00013966 4E75                       		rts	
00013968                            ; ===========================================================================
00013968                            
00013968                            Obj57_Display:				; XREF: Obj57_Index
00013968 6000 CB98                  		bra.w	DisplaySprite
0001396C                            ; ===========================================================================
0001396C                            ; ---------------------------------------------------------------------------
0001396C                            ; Sprite mappings - chain of spiked balls (SYZ)
0001396C                            ; ---------------------------------------------------------------------------
0001396C                            Map_obj57:
0001396C                            	include "_maps\obj57syz.asm"
0001396C                            ; ---------------------------------------------------------------------------
0001396C                            ; Sprite mappings - chain of spiked balls (SYZ)
0001396C                            ; ---------------------------------------------------------------------------
0001396C 0000                       		dc.w byte_10958-Map_obj57
0001396E 01                         byte_10958:	dc.b 1
0001396F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00013974                            		even
00013974                            		even
00013974                            
00013974                            ; ---------------------------------------------------------------------------
00013974                            ; Sprite mappings - spiked ball	on a chain (LZ)
00013974                            ; ---------------------------------------------------------------------------
00013974                            Map_obj57a:
00013974                            	include "_maps\obj57lz.asm"
00013974                            ; ---------------------------------------------------------------------------
00013974                            ; Sprite mappings - spiked ball	on a chain (LZ)
00013974                            ; ---------------------------------------------------------------------------
00013974 0000                       		dc.w byte_10964-Map_obj57a
00013976 0000                       		dc.w byte_1096A-Map_obj57a
00013978 0000                       		dc.w byte_10970-Map_obj57a
0001397A 01                         byte_10964:	dc.b 1
0001397B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00013980 01                         byte_1096A:	dc.b 1
00013981 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00013986 01                         byte_10970:	dc.b 1
00013987 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001398C                            		even
0001398C                            		even
0001398C                            
0001398C                            ; ===========================================================================
0001398C                            ; ---------------------------------------------------------------------------
0001398C                            ; Object 58 - giant spiked balls (SYZ)
0001398C                            ; ---------------------------------------------------------------------------
0001398C                            
0001398C                            Obj58:					; XREF: Obj_Index
0001398C 7000                       		moveq	#0,d0
0001398E 1028 0024                  		move.b	$24(a0),d0
00013992 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00013996 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
0001399A                            ; ===========================================================================
0001399A 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001399C 0000                       		dc.w Obj58_Move-Obj58_Index
0001399E                            ; ===========================================================================
0001399E                            
0001399E                            Obj58_Main:				; XREF: Obj58_Index
0001399E 5428 0024                  		addq.b	#2,$24(a0)
000139A2 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000139AA 317C 0396 0002             		move.w	#$396,2(a0)
000139B0 117C 0004 0001             		move.b	#4,1(a0)
000139B6 117C 0004 0018             		move.b	#4,$18(a0)
000139BC 117C 0018 0019             		move.b	#$18,$19(a0)
000139C2 3168 0008 003A             		move.w	8(a0),$3A(a0)
000139C8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000139CE 117C 0086 0020             		move.b	#$86,$20(a0)
000139D4 1228 0028                  		move.b	$28(a0),d1	; get object type
000139D8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000139DC 4881                       		ext.w	d1
000139DE E741                       		asl.w	#3,d1		; multiply by 8
000139E0 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000139E4 1028 0022                  		move.b	$22(a0),d0
000139E8 E418                       		ror.b	#2,d0
000139EA 0200 00C0                  		andi.b	#$C0,d0
000139EE 1140 0026                  		move.b	d0,$26(a0)
000139F2 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000139F8                            
000139F8                            Obj58_Move:				; XREF: Obj58_Index
000139F8 7000                       		moveq	#0,d0
000139FA 1028 0028                  		move.b	$28(a0),d0	; get object type
000139FE 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00013A02 D040                       		add.w	d0,d0
00013A04 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00013A08 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00013A0C 3028 003A                  		move.w	$3A(a0),d0
00013A10 0240 FF80                  		andi.w	#$FF80,d0
00013A14 3238 F700                  		move.w	($FFFFF700).w,d1
00013A18 0441 0080                  		subi.w	#$80,d1
00013A1C 0241 FF80                  		andi.w	#$FF80,d1
00013A20 9041                       		sub.w	d1,d0
00013A22 0C40 0280                  		cmpi.w	#$280,d0
00013A26 6200 CB16                  		bhi.w	DeleteObject
00013A2A 6000 CAD6                  		bra.w	DisplaySprite
00013A2E                            ; ===========================================================================
00013A2E 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00013A30 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00013A32 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00013A34 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00013A36                            ; ===========================================================================
00013A36                            
00013A36                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00013A36 4E75                       		rts	
00013A38                            ; ===========================================================================
00013A38                            
00013A38                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00013A38 323C 0060                  		move.w	#$60,d1
00013A3C 7000                       		moveq	#0,d0
00013A3E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00013A42 0828 0000 0022             		btst	#0,$22(a0)
00013A48 6700                       		beq.s	loc_10A38
00013A4A 4440                       		neg.w	d0
00013A4C D041                       		add.w	d1,d0
00013A4E                            
00013A4E                            loc_10A38:
00013A4E 3228 003A                  		move.w	$3A(a0),d1
00013A52 9240                       		sub.w	d0,d1
00013A54 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00013A58 4E75                       		rts	
00013A5A                            ; ===========================================================================
00013A5A                            
00013A5A                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00013A5A 323C 0060                  		move.w	#$60,d1
00013A5E 7000                       		moveq	#0,d0
00013A60 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00013A64 0828 0000 0022             		btst	#0,$22(a0)
00013A6A 6700                       		beq.s	loc_10A5C
00013A6C 4440                       		neg.w	d0
00013A6E 0640 0080                  		addi.w	#$80,d0
00013A72                            
00013A72                            loc_10A5C:
00013A72 3228 0038                  		move.w	$38(a0),d1
00013A76 9240                       		sub.w	d0,d1
00013A78 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00013A7C 4E75                       		rts	
00013A7E                            ; ===========================================================================
00013A7E                            
00013A7E                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00013A7E 3028 003E                  		move.w	$3E(a0),d0
00013A82 D168 0026                  		add.w	d0,$26(a0)
00013A86 1028 0026                  		move.b	$26(a0),d0
00013A8A 4EB9 0000 3798             		jsr	(CalcSine).l
00013A90 3428 0038                  		move.w	$38(a0),d2
00013A94 3628 003A                  		move.w	$3A(a0),d3
00013A98 7800                       		moveq	#0,d4
00013A9A 1828 003C                  		move.b	$3C(a0),d4
00013A9E 2A04                       		move.l	d4,d5
00013AA0 C9C0                       		muls.w	d0,d4
00013AA2 E084                       		asr.l	#8,d4
00013AA4 CBC1                       		muls.w	d1,d5
00013AA6 E085                       		asr.l	#8,d5
00013AA8 D842                       		add.w	d2,d4
00013AAA DA43                       		add.w	d3,d5
00013AAC 3144 000C                  		move.w	d4,$C(a0)
00013AB0 3145 0008                  		move.w	d5,8(a0)
00013AB4 4E75                       		rts	
00013AB6                            ; ===========================================================================
00013AB6                            ; ---------------------------------------------------------------------------
00013AB6                            ; Sprite mappings - SBZ	spiked ball on a chain
00013AB6                            ; ---------------------------------------------------------------------------
00013AB6                            Map_obj15b:
00013AB6                            	include "_maps\obj15sbz.asm"
00013AB6                            ; ---------------------------------------------------------------------------
00013AB6                            ; Sprite mappings - spiked ball on a chain (SBZ)
00013AB6                            ; ---------------------------------------------------------------------------
00013AB6 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00013ABA 0000                       		dc.w byte_10AC6-Map_obj15b
00013ABC 05                         byte_10AA6:	dc.b 5
00013ABD E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00013AC2 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00013AC7 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00013ACC F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00013AD1 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00013AD6 01                         byte_10AC0:	dc.b 1
00013AD7 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00013ADC 02                         byte_10AC6:	dc.b 2
00013ADD F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00013AE2 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00013AE8 00                         		even
00013AE8 00                         		even
00013AE8                            
00013AE8                            ; ===========================================================================
00013AE8                            ; ---------------------------------------------------------------------------
00013AE8                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00013AE8                            ; ---------------------------------------------------------------------------
00013AE8                            
00013AE8                            Obj59:					; XREF: Obj_Index
00013AE8 7000                       		moveq	#0,d0
00013AEA 1028 0024                  		move.b	$24(a0),d0
00013AEE 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00013AF2 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00013AF6 3028 0032                  		move.w	$32(a0),d0
00013AFA 0240 FF80                  		andi.w	#$FF80,d0
00013AFE 3238 F700                  		move.w	($FFFFF700).w,d1
00013B02 0441 0080                  		subi.w	#$80,d1
00013B06 0241 FF80                  		andi.w	#$FF80,d1
00013B0A 9041                       		sub.w	d1,d0
00013B0C 0C40 0280                  		cmpi.w	#$280,d0
00013B10 6200 CA2C                  		bhi.w	DeleteObject
00013B14 6000 C9EC                  		bra.w	DisplaySprite
00013B18                            ; ===========================================================================
00013B18 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00013B1A 0000                       		dc.w Obj59_Platform-Obj59_Index
00013B1C 0000                       		dc.w Obj59_Action-Obj59_Index
00013B1E 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00013B20                            
00013B20 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00013B22                            
00013B22 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00013B24 2001                       		dc.b $20, 1
00013B26 3401                       		dc.b $34, 1
00013B28 1003                       		dc.b $10, 3
00013B2A 2003                       		dc.b $20, 3
00013B2C 3403                       		dc.b $34, 3
00013B2E 1401                       		dc.b $14, 1
00013B30 2401                       		dc.b $24, 1
00013B32 2C01                       		dc.b $2C, 1
00013B34 1403                       		dc.b $14, 3
00013B36 2403                       		dc.b $24, 3
00013B38 2C03                       		dc.b $2C, 3
00013B3A 2005                       		dc.b $20, 5
00013B3C 2007                       		dc.b $20, 7
00013B3E 3009                       		dc.b $30, 9
00013B40                            ; ===========================================================================
00013B40                            
00013B40                            Obj59_Main:				; XREF: Obj59_Index
00013B40 5428 0024                  		addq.b	#2,$24(a0)
00013B44 7000                       		moveq	#0,d0
00013B46 1028 0028                  		move.b	$28(a0),d0
00013B4A 6A00                       		bpl.s	Obj59_Main2
00013B4C 5828 0024                  		addq.b	#4,$24(a0)
00013B50 0240 007F                  		andi.w	#$7F,d0
00013B54 C0FC 0006                  		mulu.w	#6,d0
00013B58 3140 003C                  		move.w	d0,$3C(a0)
00013B5C 3140 003E                  		move.w	d0,$3E(a0)
00013B60 588F                       		addq.l	#4,sp
00013B62 4E75                       		rts	
00013B64                            ; ===========================================================================
00013B64                            
00013B64                            Obj59_Main2:
00013B64 E648                       		lsr.w	#3,d0
00013B66 0240 001E                  		andi.w	#$1E,d0
00013B6A 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00013B6E 115A 0019                  		move.b	(a2)+,$19(a0)
00013B72 115A 001A                  		move.b	(a2)+,$1A(a0)
00013B76 7000                       		moveq	#0,d0
00013B78 1028 0028                  		move.b	$28(a0),d0
00013B7C D040                       		add.w	d0,d0
00013B7E 0240 001E                  		andi.w	#$1E,d0
00013B82 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00013B86 101A                       		move.b	(a2)+,d0
00013B88 E548                       		lsl.w	#2,d0
00013B8A 3140 003C                  		move.w	d0,$3C(a0)
00013B8E 115A 0028                  		move.b	(a2)+,$28(a0)
00013B92 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00013B9A 317C 4000 0002             		move.w	#$4000,2(a0)
00013BA0 117C 0004 0001             		move.b	#4,1(a0)
00013BA6 117C 0004 0018             		move.b	#4,$18(a0)
00013BAC 3168 0008 0032             		move.w	8(a0),$32(a0)
00013BB2 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013BB8                            
00013BB8                            Obj59_Platform:				; XREF: Obj59_Index
00013BB8 7200                       		moveq	#0,d1
00013BBA 1228 0019                  		move.b	$19(a0),d1
00013BBE 4EB9 0000 9B64             		jsr	(PlatformObject).l
00013BC4 6000 0000                  		bra.w	Obj59_Types
00013BC8                            ; ===========================================================================
00013BC8                            
00013BC8                            Obj59_Action:				; XREF: Obj59_Index
00013BC8 7200                       		moveq	#0,d1
00013BCA 1228 0019                  		move.b	$19(a0),d1
00013BCE 4EB9 0000 9CD8             		jsr	(ExitPlatform).l
00013BD4 3F28 0008                  		move.w	8(a0),-(sp)
00013BD8 6100 0000                  		bsr.w	Obj59_Types
00013BDC 341F                       		move.w	(sp)+,d2
00013BDE 4A10                       		tst.b	0(a0)
00013BE0 6700                       		beq.s	locret_10BD4
00013BE2 4EF9 0000 A242             		jmp	(MvSonicOnPtfm2).l
00013BE8                            ; ===========================================================================
00013BE8                            
00013BE8                            locret_10BD4:
00013BE8 4E75                       		rts	
00013BEA                            ; ===========================================================================
00013BEA                            
00013BEA                            Obj59_Types:
00013BEA 7000                       		moveq	#0,d0
00013BEC 1028 0028                  		move.b	$28(a0),d0
00013BF0 0240 000F                  		andi.w	#$F,d0
00013BF4 D040                       		add.w	d0,d0
00013BF6 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00013BFA 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00013BFE                            ; ===========================================================================
00013BFE 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00013C02 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00013C06 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00013C0A 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00013C0E 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00013C12                            ; ===========================================================================
00013C12                            
00013C12                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00013C12 4E75                       		rts	
00013C14                            ; ===========================================================================
00013C14                            
00013C14                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00013C14 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00013C1A 6600                       		bne.s	locret_10C0C
00013C1C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013C20                            
00013C20                            locret_10C0C:
00013C20 4E75                       		rts	
00013C22                            ; ===========================================================================
00013C22                            
00013C22                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00013C22 6100 0000                  		bsr.w	Obj59_Move
00013C26 3028 0034                  		move.w	$34(a0),d0
00013C2A 4440                       		neg.w	d0
00013C2C D068 0030                  		add.w	$30(a0),d0
00013C30 3140 000C                  		move.w	d0,$C(a0)
00013C34 4E75                       		rts	
00013C36                            ; ===========================================================================
00013C36                            
00013C36                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00013C36 6100 0000                  		bsr.w	Obj59_Move
00013C3A 3028 0034                  		move.w	$34(a0),d0
00013C3E D068 0030                  		add.w	$30(a0),d0
00013C42 3140 000C                  		move.w	d0,$C(a0)
00013C46 4E75                       		rts	
00013C48                            ; ===========================================================================
00013C48                            
00013C48                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00013C48 6100 0000                  		bsr.w	Obj59_Move
00013C4C 3028 0034                  		move.w	$34(a0),d0
00013C50 E240                       		asr.w	#1,d0
00013C52 4440                       		neg.w	d0
00013C54 D068 0030                  		add.w	$30(a0),d0
00013C58 3140 000C                  		move.w	d0,$C(a0)
00013C5C 3028 0034                  		move.w	$34(a0),d0
00013C60 D068 0032                  		add.w	$32(a0),d0
00013C64 3140 0008                  		move.w	d0,8(a0)
00013C68 4E75                       		rts	
00013C6A                            ; ===========================================================================
00013C6A                            
00013C6A                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00013C6A 6100 0000                  		bsr.w	Obj59_Move
00013C6E 3028 0034                  		move.w	$34(a0),d0
00013C72 E240                       		asr.w	#1,d0
00013C74 D068 0030                  		add.w	$30(a0),d0
00013C78 3140 000C                  		move.w	d0,$C(a0)
00013C7C 3028 0034                  		move.w	$34(a0),d0
00013C80 4440                       		neg.w	d0
00013C82 D068 0032                  		add.w	$32(a0),d0
00013C86 3140 0008                  		move.w	d0,8(a0)
00013C8A 4E75                       		rts	
00013C8C                            ; ===========================================================================
00013C8C                            
00013C8C                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00013C8C 6100 0000                  		bsr.w	Obj59_Move
00013C90 3028 0034                  		move.w	$34(a0),d0
00013C94 4440                       		neg.w	d0
00013C96 D068 0030                  		add.w	$30(a0),d0
00013C9A 3140 000C                  		move.w	d0,$C(a0)
00013C9E 4A28 0028                  		tst.b	$28(a0)
00013CA2 6700 0000                  		beq.w	loc_10C94
00013CA6 4E75                       		rts	
00013CA8                            ; ===========================================================================
00013CA8                            
00013CA8                            loc_10C94:
00013CA8 0828 0003 0022             		btst	#3,$22(a0)
00013CAE 6700                       		beq.s	Obj59_Delete
00013CB0 08E9 0001 0022             		bset	#1,$22(a1)
00013CB6 08A9 0003 0022             		bclr	#3,$22(a1)
00013CBC 137C 0002 0024             		move.b	#2,$24(a1)
00013CC2                            
00013CC2                            Obj59_Delete:
00013CC2 6000 C87A                  		bra.w	DeleteObject
00013CC6                            
00013CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CC6                            
00013CC6                            
00013CC6                            Obj59_Move:				; XREF: Obj59_Type02; et al
00013CC6 3028 0038                  		move.w	$38(a0),d0
00013CCA 4A28 003A                  		tst.b	$3A(a0)
00013CCE 6600                       		bne.s	loc_10CC8
00013CD0 0C40 0800                  		cmpi.w	#$800,d0
00013CD4 6400                       		bcc.s	loc_10CD0
00013CD6 0640 0010                  		addi.w	#$10,d0
00013CDA 6000                       		bra.s	loc_10CD0
00013CDC                            ; ===========================================================================
00013CDC                            
00013CDC                            loc_10CC8:
00013CDC 4A40                       		tst.w	d0
00013CDE 6700                       		beq.s	loc_10CD0
00013CE0 0440 0010                  		subi.w	#$10,d0
00013CE4                            
00013CE4                            loc_10CD0:
00013CE4 3140 0038                  		move.w	d0,$38(a0)
00013CE8 48C0                       		ext.l	d0
00013CEA E180                       		asl.l	#8,d0
00013CEC D0A8 0034                  		add.l	$34(a0),d0
00013CF0 2140 0034                  		move.l	d0,$34(a0)
00013CF4 4840                       		swap	d0
00013CF6 3428 003C                  		move.w	$3C(a0),d2
00013CFA B042                       		cmp.w	d2,d0
00013CFC 6300                       		bls.s	loc_10CF0
00013CFE 117C 0001 003A             		move.b	#1,$3A(a0)
00013D04                            
00013D04                            loc_10CF0:
00013D04 D442                       		add.w	d2,d2
00013D06 B042                       		cmp.w	d2,d0
00013D08 6600                       		bne.s	locret_10CFA
00013D0A 4228 0028                  		clr.b	$28(a0)
00013D0E                            
00013D0E                            locret_10CFA:
00013D0E 4E75                       		rts	
00013D10                            ; End of function Obj59_Move
00013D10                            
00013D10                            ; ===========================================================================
00013D10                            
00013D10                            Obj59_MakeMulti:			; XREF: Obj59_Index
00013D10 5368 003C                  		subq.w	#1,$3C(a0)
00013D14 6600                       		bne.s	Obj59_ChkDel
00013D16 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00013D1C 6100 CC6A                  		bsr.w	SingleObjLoad
00013D20 6600                       		bne.s	Obj59_ChkDel
00013D22 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00013D26 3368 0008 0008             		move.w	8(a0),8(a1)
00013D2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013D32 137C 000E 0028             		move.b	#$E,$28(a1)
00013D38                            
00013D38                            Obj59_ChkDel:
00013D38 588F                       		addq.l	#4,sp
00013D3A 3028 0008                  		move.w	8(a0),d0
00013D3E 0240 FF80                  		andi.w	#$FF80,d0
00013D42 3238 F700                  		move.w	($FFFFF700).w,d1
00013D46 0441 0080                  		subi.w	#$80,d1
00013D4A 0241 FF80                  		andi.w	#$FF80,d1
00013D4E 9041                       		sub.w	d1,d0
00013D50 0C40 0280                  		cmpi.w	#$280,d0
00013D54 6200 C7E8                  		bhi.w	DeleteObject
00013D58 4E75                       		rts	
00013D5A                            ; ===========================================================================
00013D5A                            ; ---------------------------------------------------------------------------
00013D5A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00013D5A                            ; ---------------------------------------------------------------------------
00013D5A                            Map_obj59:
00013D5A                            	include "_maps\obj59.asm"
00013D5A                            ; ---------------------------------------------------------------------------
00013D5A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00013D5A                            ; ---------------------------------------------------------------------------
00013D5A 0000                       		dc.w byte_10D4A-Map_obj59
00013D5C 03                         byte_10D4A:	dc.b 3
00013D5D F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00013D62 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00013D67 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00013D6C                            		even
00013D6C                            		even
00013D6C                            
00013D6C                            ; ===========================================================================
00013D6C                            ; ---------------------------------------------------------------------------
00013D6C                            ; Object 5A - platforms	moving in circles (SLZ)
00013D6C                            ; ---------------------------------------------------------------------------
00013D6C                            
00013D6C                            Obj5A:					; XREF: Obj_Index
00013D6C 7000                       		moveq	#0,d0
00013D6E 1028 0024                  		move.b	$24(a0),d0
00013D72 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00013D76 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00013D7A 3028 0032                  		move.w	$32(a0),d0
00013D7E 0240 FF80                  		andi.w	#$FF80,d0
00013D82 3238 F700                  		move.w	($FFFFF700).w,d1
00013D86 0441 0080                  		subi.w	#$80,d1
00013D8A 0241 FF80                  		andi.w	#$FF80,d1
00013D8E 9041                       		sub.w	d1,d0
00013D90 0C40 0280                  		cmpi.w	#$280,d0
00013D94 6200 C7A8                  		bhi.w	DeleteObject
00013D98 6000 C768                  		bra.w	DisplaySprite
00013D9C                            ; ===========================================================================
00013D9C 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00013D9E 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00013DA0 0000                       		dc.w Obj5A_Action-Obj5A_Index
00013DA2                            ; ===========================================================================
00013DA2                            
00013DA2                            Obj5A_Main:				; XREF: Obj5A_Index
00013DA2 5428 0024                  		addq.b	#2,$24(a0)
00013DA6 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00013DAE 317C 4000 0002             		move.w	#$4000,2(a0)
00013DB4 117C 0004 0001             		move.b	#4,1(a0)
00013DBA 117C 0004 0018             		move.b	#4,$18(a0)
00013DC0 117C 0018 0019             		move.b	#$18,$19(a0)
00013DC6 3168 0008 0032             		move.w	8(a0),$32(a0)
00013DCC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013DD2                            
00013DD2                            Obj5A_Platform:				; XREF: Obj5A_Index
00013DD2 7200                       		moveq	#0,d1
00013DD4 1228 0019                  		move.b	$19(a0),d1
00013DD8 4EB9 0000 9B64             		jsr	(PlatformObject).l
00013DDE 6000 0000                  		bra.w	Obj5A_Types
00013DE2                            ; ===========================================================================
00013DE2                            
00013DE2                            Obj5A_Action:				; XREF: Obj5A_Index
00013DE2 7200                       		moveq	#0,d1
00013DE4 1228 0019                  		move.b	$19(a0),d1
00013DE8 4EB9 0000 9CD8             		jsr	(ExitPlatform).l
00013DEE 3F28 0008                  		move.w	8(a0),-(sp)
00013DF2 6100 0000                  		bsr.w	Obj5A_Types
00013DF6 341F                       		move.w	(sp)+,d2
00013DF8 4EF9 0000 A242             		jmp	(MvSonicOnPtfm2).l
00013DFE                            ; ===========================================================================
00013DFE                            
00013DFE                            Obj5A_Types:
00013DFE 7000                       		moveq	#0,d0
00013E00 1028 0028                  		move.b	$28(a0),d0
00013E04 0240 000C                  		andi.w	#$C,d0
00013E08 E248                       		lsr.w	#1,d0
00013E0A 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00013E0E 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00013E12                            ; ===========================================================================
00013E12 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00013E14 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00013E16                            ; ===========================================================================
00013E16                            
00013E16                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00013E16 1238 FE80                  		move.b	($FFFFFE80).w,d1
00013E1A 0401 0050                  		subi.b	#$50,d1
00013E1E 4881                       		ext.w	d1
00013E20 1438 FE84                  		move.b	($FFFFFE84).w,d2
00013E24 0402 0050                  		subi.b	#$50,d2
00013E28 4882                       		ext.w	d2
00013E2A 0828 0000 0028             		btst	#0,$28(a0)
00013E30 6700                       		beq.s	loc_10E24
00013E32 4441                       		neg.w	d1
00013E34 4442                       		neg.w	d2
00013E36                            
00013E36                            loc_10E24:
00013E36 0828 0001 0028             		btst	#1,$28(a0)
00013E3C 6700                       		beq.s	loc_10E30
00013E3E 4441                       		neg.w	d1
00013E40 C342                       		exg	d1,d2
00013E42                            
00013E42                            loc_10E30:
00013E42 D268 0032                  		add.w	$32(a0),d1
00013E46 3141 0008                  		move.w	d1,8(a0)
00013E4A D468 0030                  		add.w	$30(a0),d2
00013E4E 3142 000C                  		move.w	d2,$C(a0)
00013E52 4E75                       		rts	
00013E54                            ; ===========================================================================
00013E54                            
00013E54                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00013E54 1238 FE80                  		move.b	($FFFFFE80).w,d1
00013E58 0401 0050                  		subi.b	#$50,d1
00013E5C 4881                       		ext.w	d1
00013E5E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00013E62 0402 0050                  		subi.b	#$50,d2
00013E66 4882                       		ext.w	d2
00013E68 0828 0000 0028             		btst	#0,$28(a0)
00013E6E 6700                       		beq.s	loc_10E62
00013E70 4441                       		neg.w	d1
00013E72 4442                       		neg.w	d2
00013E74                            
00013E74                            loc_10E62:
00013E74 0828 0001 0028             		btst	#1,$28(a0)
00013E7A 6700                       		beq.s	loc_10E6E
00013E7C 4441                       		neg.w	d1
00013E7E C342                       		exg	d1,d2
00013E80                            
00013E80                            loc_10E6E:
00013E80 4441                       		neg.w	d1
00013E82 D268 0032                  		add.w	$32(a0),d1
00013E86 3141 0008                  		move.w	d1,8(a0)
00013E8A D468 0030                  		add.w	$30(a0),d2
00013E8E 3142 000C                  		move.w	d2,$C(a0)
00013E92 4E75                       		rts	
00013E94                            ; ===========================================================================
00013E94                            ; ---------------------------------------------------------------------------
00013E94                            ; Sprite mappings - platforms that move	in circles (SLZ)
00013E94                            ; ---------------------------------------------------------------------------
00013E94                            Map_obj5A:
00013E94                            	include "_maps\obj5A.asm"
00013E94                            ; ---------------------------------------------------------------------------
00013E94                            ; Sprite mappings - platforms that move	in circles (SLZ)
00013E94                            ; ---------------------------------------------------------------------------
00013E94 0000                       		dc.w byte_10E84-Map_obj5A
00013E96 02                         byte_10E84:	dc.b 2
00013E97 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013E9C F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00013EA2 00                         		even
00013EA2 00                         		even
00013EA2                            
00013EA2                            ; ===========================================================================
00013EA2                            ; ---------------------------------------------------------------------------
00013EA2                            ; Object 5B - blocks that form a staircase (SLZ)
00013EA2                            ; ---------------------------------------------------------------------------
00013EA2                            
00013EA2                            Obj5B:					; XREF: Obj_Index
00013EA2 7000                       		moveq	#0,d0
00013EA4 1028 0024                  		move.b	$24(a0),d0
00013EA8 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00013EAC 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00013EB0 3028 0030                  		move.w	$30(a0),d0
00013EB4 0240 FF80                  		andi.w	#$FF80,d0
00013EB8 3238 F700                  		move.w	($FFFFF700).w,d1
00013EBC 0441 0080                  		subi.w	#$80,d1
00013EC0 0241 FF80                  		andi.w	#$FF80,d1
00013EC4 9041                       		sub.w	d1,d0
00013EC6 0C40 0280                  		cmpi.w	#$280,d0
00013ECA 6200 C672                  		bhi.w	DeleteObject
00013ECE 6000 C632                  		bra.w	DisplaySprite
00013ED2                            ; ===========================================================================
00013ED2 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00013ED4 0000                       		dc.w Obj5B_Move-Obj5B_Index
00013ED6 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00013ED8                            ; ===========================================================================
00013ED8                            
00013ED8                            Obj5B_Main:				; XREF: Obj5B_Index
00013ED8 5428 0024                  		addq.b	#2,$24(a0)
00013EDC 7638                       		moveq	#$38,d3
00013EDE 7801                       		moveq	#1,d4
00013EE0 0828 0000 0022             		btst	#0,$22(a0)
00013EE6 6700                       		beq.s	loc_10EDA
00013EE8 763B                       		moveq	#$3B,d3
00013EEA 78FF                       		moveq	#-1,d4
00013EEC                            
00013EEC                            loc_10EDA:
00013EEC 3428 0008                  		move.w	8(a0),d2
00013EF0 2248                       		movea.l	a0,a1
00013EF2 7203                       		moveq	#3,d1
00013EF4 6000                       		bra.s	Obj5B_MakeBlocks
00013EF6                            ; ===========================================================================
00013EF6                            
00013EF6                            Obj5B_Loop:
00013EF6 6100 CAA6                  		bsr.w	SingleObjLoad2
00013EFA 6600 0000                  		bne.w	Obj5B_Move
00013EFE 137C 0004 0024             		move.b	#4,$24(a1)
00013F04                            
00013F04                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00013F04 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00013F08 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00013F10 337C 4000 0002             		move.w	#$4000,2(a1)
00013F16 137C 0004 0001             		move.b	#4,1(a1)
00013F1C 137C 0003 0018             		move.b	#3,$18(a1)
00013F22 137C 0010 0019             		move.b	#$10,$19(a1)
00013F28 1368 0028 0028             		move.b	$28(a0),$28(a1)
00013F2E 3342 0008                  		move.w	d2,8(a1)
00013F32 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013F38 3368 0008 0030             		move.w	8(a0),$30(a1)
00013F3E 3369 000C 0032             		move.w	$C(a1),$32(a1)
00013F44 0642 0020                  		addi.w	#$20,d2
00013F48 1343 0037                  		move.b	d3,$37(a1)
00013F4C 2348 003C                  		move.l	a0,$3C(a1)
00013F50 D604                       		add.b	d4,d3
00013F52 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00013F56                            
00013F56                            Obj5B_Move:				; XREF: Obj5B_Index
00013F56 7000                       		moveq	#0,d0
00013F58 1028 0028                  		move.b	$28(a0),d0
00013F5C 0240 0007                  		andi.w	#7,d0
00013F60 D040                       		add.w	d0,d0
00013F62 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00013F66 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00013F6A                            
00013F6A                            Obj5B_Solid:				; XREF: Obj5B_Index
00013F6A 2468 003C                  		movea.l	$3C(a0),a2
00013F6E 7000                       		moveq	#0,d0
00013F70 1028 0037                  		move.b	$37(a0),d0
00013F74 1032 0000                  		move.b	(a2,d0.w),d0
00013F78 D068 0032                  		add.w	$32(a0),d0
00013F7C 3140 000C                  		move.w	d0,$C(a0)
00013F80 7200                       		moveq	#0,d1
00013F82 1228 0019                  		move.b	$19(a0),d1
00013F86 0641 000B                  		addi.w	#$B,d1
00013F8A 343C 0010                  		move.w	#$10,d2
00013F8E 363C 0011                  		move.w	#$11,d3
00013F92 3828 0008                  		move.w	8(a0),d4
00013F96 6100 EA56                  		bsr.w	SolidObject
00013F9A 4A04                       		tst.b	d4
00013F9C 6A00                       		bpl.s	loc_10F92
00013F9E 1544 0036                  		move.b	d4,$36(a2)
00013FA2                            
00013FA2                            loc_10F92:
00013FA2 0828 0003 0022             		btst	#3,$22(a0)
00013FA8 6700                       		beq.s	locret_10FA0
00013FAA 157C 0001 0036             		move.b	#1,$36(a2)
00013FB0                            
00013FB0                            locret_10FA0:
00013FB0 4E75                       		rts	
00013FB2                            ; ===========================================================================
00013FB2 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00013FB4 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00013FB6 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00013FB8 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00013FBA                            ; ===========================================================================
00013FBA                            
00013FBA                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00013FBA 4A68 0034                  		tst.w	$34(a0)
00013FBE 6600                       		bne.s	loc_10FC0
00013FC0 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00013FC6 6600                       		bne.s	locret_10FBE
00013FC8 317C 001E 0034             		move.w	#$1E,$34(a0)
00013FCE                            
00013FCE                            locret_10FBE:
00013FCE 4E75                       		rts	
00013FD0                            ; ===========================================================================
00013FD0                            
00013FD0                            loc_10FC0:
00013FD0 5368 0034                  		subq.w	#1,$34(a0)
00013FD4 66F8                       		bne.s	locret_10FBE
00013FD6 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013FDA 4E75                       		rts	
00013FDC                            ; ===========================================================================
00013FDC                            
00013FDC                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00013FDC 4A68 0034                  		tst.w	$34(a0)
00013FE0 6600                       		bne.s	loc_10FE0
00013FE2 4A28 0036                  		tst.b	$36(a0)
00013FE6 6A00                       		bpl.s	locret_10FDE
00013FE8 317C 003C 0034             		move.w	#$3C,$34(a0)
00013FEE                            
00013FEE                            locret_10FDE:
00013FEE 4E75                       		rts	
00013FF0                            ; ===========================================================================
00013FF0                            
00013FF0                            loc_10FE0:
00013FF0 5368 0034                  		subq.w	#1,$34(a0)
00013FF4 6600                       		bne.s	loc_10FEC
00013FF6 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013FFA 4E75                       		rts	
00013FFC                            ; ===========================================================================
00013FFC                            
00013FFC                            loc_10FEC:
00013FFC 43E8 0038                  		lea	$38(a0),a1
00014000 3028 0034                  		move.w	$34(a0),d0
00014004 E408                       		lsr.b	#2,d0
00014006 0200 0001                  		andi.b	#1,d0
0001400A 12C0                       		move.b	d0,(a1)+
0001400C 0A00 0001                  		eori.b	#1,d0
00014010 12C0                       		move.b	d0,(a1)+
00014012 0A00 0001                  		eori.b	#1,d0
00014016 12C0                       		move.b	d0,(a1)+
00014018 0A00 0001                  		eori.b	#1,d0
0001401C 12C0                       		move.b	d0,(a1)+
0001401E 4E75                       		rts	
00014020                            ; ===========================================================================
00014020                            
00014020                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00014020 43E8 0038                  		lea	$38(a0),a1
00014024 0C11 0080                  		cmpi.b	#$80,(a1)
00014028 6700                       		beq.s	locret_11038
0001402A 5211                       		addq.b	#1,(a1)
0001402C 7200                       		moveq	#0,d1
0001402E 1219                       		move.b	(a1)+,d1
00014030 4841                       		swap	d1
00014032 E289                       		lsr.l	#1,d1
00014034 2401                       		move.l	d1,d2
00014036 E289                       		lsr.l	#1,d1
00014038 2601                       		move.l	d1,d3
0001403A D682                       		add.l	d2,d3
0001403C 4841                       		swap	d1
0001403E 4842                       		swap	d2
00014040 4843                       		swap	d3
00014042 12C3                       		move.b	d3,(a1)+
00014044 12C2                       		move.b	d2,(a1)+
00014046 12C1                       		move.b	d1,(a1)+
00014048                            
00014048                            locret_11038:
00014048 4E75                       		rts	
0001404A 4E75                       		rts	
0001404C                            ; ===========================================================================
0001404C                            ; ---------------------------------------------------------------------------
0001404C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001404C                            ; ---------------------------------------------------------------------------
0001404C                            Map_obj5B:
0001404C                            	include "_maps\obj5B.asm"
0001404C                            ; ---------------------------------------------------------------------------
0001404C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001404C                            ; ---------------------------------------------------------------------------
0001404C 0000                       		dc.w byte_1103E-Map_obj5B
0001404E 01                         byte_1103E:	dc.b 1
0001404F F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00014054                            		even
00014054                            		even
00014054                            
00014054                            ; ===========================================================================
00014054                            ; ---------------------------------------------------------------------------
00014054                            ; Object 5C - metal girders in foreground (SLZ)
00014054                            ; ---------------------------------------------------------------------------
00014054                            
00014054                            Obj5C:					; XREF: Obj_Index
00014054 7000                       		moveq	#0,d0
00014056 1028 0024                  		move.b	$24(a0),d0
0001405A 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001405E 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00014062                            ; ===========================================================================
00014062 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00014064 0000                       		dc.w Obj5C_Display-Obj5C_Index
00014066                            ; ===========================================================================
00014066                            
00014066                            Obj5C_Main:				; XREF: Obj5C_Index
00014066 5428 0024                  		addq.b	#2,$24(a0)
0001406A 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00014072 317C 83CC 0002             		move.w	#$83CC,2(a0)
00014078 117C 0010 0019             		move.b	#$10,$19(a0)
0001407E                            
0001407E                            Obj5C_Display:				; XREF: Obj5C_Index
0001407E 2238 F700                  		move.l	($FFFFF700).w,d1
00014082 D281                       		add.l	d1,d1
00014084 4841                       		swap	d1
00014086 4441                       		neg.w	d1
00014088 3141 0008                  		move.w	d1,8(a0)
0001408C 2238 F704                  		move.l	($FFFFF704).w,d1
00014090 D281                       		add.l	d1,d1
00014092 4841                       		swap	d1
00014094 0241 003F                  		andi.w	#$3F,d1
00014098 4441                       		neg.w	d1
0001409A 0641 0100                  		addi.w	#$100,d1
0001409E 3141 000A                  		move.w	d1,$A(a0)
000140A2 6000 C45E                  		bra.w	DisplaySprite
000140A6                            ; ===========================================================================
000140A6                            ; ---------------------------------------------------------------------------
000140A6                            ; Sprite mappings - metal girders in foreground	(SLZ)
000140A6                            ; ---------------------------------------------------------------------------
000140A6                            Map_obj5C:
000140A6                            	include "_maps\obj5C.asm"
000140A6                            ; ---------------------------------------------------------------------------
000140A6                            ; Sprite mappings - metal girders in foreground	(SLZ)
000140A6                            ; ---------------------------------------------------------------------------
000140A6 0000                       		dc.w byte_11098-Map_obj5C
000140A8 09                         byte_11098:	dc.b 9
000140A9 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000140AE A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000140B3 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000140B8 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000140BD 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000140C2 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000140C7 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000140CC 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000140D1 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000140D6                            		even
000140D6                            		even
000140D6                            
000140D6                            ; ===========================================================================
000140D6                            ; ---------------------------------------------------------------------------
000140D6                            ; Object 1B - water surface (LZ)
000140D6                            ; ---------------------------------------------------------------------------
000140D6                            
000140D6                            Obj1B:					; XREF: Obj_Index
000140D6 7000                       		moveq	#0,d0
000140D8 1028 0024                  		move.b	$24(a0),d0
000140DC 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000140E0 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000140E4                            ; ===========================================================================
000140E4 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
000140E6 0000                       		dc.w Obj1B_Action-Obj1B_Index
000140E8                            ; ===========================================================================
000140E8                            
000140E8                            Obj1B_Main:				; XREF: Obj1B_Index
000140E8 5428 0024                  		addq.b	#2,$24(a0)
000140EC 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
000140F4 317C C300 0002             		move.w	#$C300,2(a0)
000140FA 117C 0004 0001             		move.b	#4,1(a0)
00014100 117C 0080 0019             		move.b	#$80,$19(a0)
00014106 3168 0008 0030             		move.w	8(a0),$30(a0)
0001410C                            
0001410C                            Obj1B_Action:				; XREF: Obj1B_Index
0001410C 3238 F700                  		move.w	($FFFFF700).w,d1
00014110 0241 FFE0                  		andi.w	#$FFE0,d1
00014114 D268 0030                  		add.w	$30(a0),d1
00014118 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001411E 6700                       		beq.s	loc_11114
00014120 0641 0020                  		addi.w	#$20,d1
00014124                            
00014124                            loc_11114:
00014124 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00014128 3238 F646                  		move.w	($FFFFF646).w,d1
0001412C 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00014130 4A28 0032                  		tst.b	$32(a0)
00014134 6600                       		bne.s	Obj1B_Animate
00014136 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001413C 6700                       		beq.s	loc_1114A	; if not, branch
0001413E 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00014142 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00014148 6000                       		bra.s	Obj1B_Display
0001414A                            ; ===========================================================================
0001414A                            
0001414A                            Obj1B_Animate:				; XREF: loc_11114
0001414A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001414E 6600                       		bne.s	Obj1B_Display	; if yes, branch
00014150 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00014156 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
0001415A                            
0001415A                            loc_1114A:				; XREF: loc_11114
0001415A 5328 001E                  		subq.b	#1,$1E(a0)
0001415E 6A00                       		bpl.s	Obj1B_Display
00014160 117C 0007 001E             		move.b	#7,$1E(a0)
00014166 5228 001A                  		addq.b	#1,$1A(a0)
0001416A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00014170 6500                       		bcs.s	Obj1B_Display
00014172 117C 0000 001A             		move.b	#0,$1A(a0)
00014178                            
00014178                            Obj1B_Display:
00014178 6000 C388                  		bra.w	DisplaySprite
0001417C                            ; ===========================================================================
0001417C                            ; ---------------------------------------------------------------------------
0001417C                            ; Sprite mappings - water surface (LZ)
0001417C                            ; ---------------------------------------------------------------------------
0001417C                            Map_obj1B:
0001417C                            	include "_maps\obj1B.asm"
0001417C                            ; ---------------------------------------------------------------------------
0001417C                            ; Sprite mappings - water surface (LZ)
0001417C                            ; ---------------------------------------------------------------------------
0001417C 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00014180 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00014184 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00014188 03                         byte_11178:	dc.b 3
00014189 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001418E FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00014193 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00014198 03                         byte_11188:	dc.b 3
00014199 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001419E FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000141A3 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000141A8 03                         byte_11198:	dc.b 3
000141A9 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000141AE FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000141B3 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000141B8 06                         byte_111A8:	dc.b 6
000141B9 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000141BE FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000141C3 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000141C8 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000141CD FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000141D2 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000141D7 06                         byte_111C7:	dc.b 6
000141D8 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000141DD FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
000141E2 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000141E7 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
000141EC FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000141F1 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
000141F6 06                         byte_111E6:	dc.b 6
000141F7 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000141FC FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00014201 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00014206 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
0001420B FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00014210 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00014216 00                         		even
00014216 00                         		even
00014216                            
00014216                            ; ===========================================================================
00014216                            ; ---------------------------------------------------------------------------
00014216                            ; Object 0B - pole that	breaks (LZ)
00014216                            ; ---------------------------------------------------------------------------
00014216                            
00014216                            Obj0B:					; XREF: Obj_Index
00014216 7000                       		moveq	#0,d0
00014218 1028 0024                  		move.b	$24(a0),d0
0001421C 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00014220 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00014224                            ; ===========================================================================
00014224 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00014226 0000                       		dc.w Obj0B_Action-Obj0B_Index
00014228 0000                       		dc.w Obj0B_Display-Obj0B_Index
0001422A                            ; ===========================================================================
0001422A                            
0001422A                            Obj0B_Main:				; XREF: Obj0B_Index
0001422A 5428 0024                  		addq.b	#2,$24(a0)
0001422E 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00014236 317C 43DE 0002             		move.w	#$43DE,2(a0)
0001423C 117C 0004 0001             		move.b	#4,1(a0)
00014242 117C 0008 0019             		move.b	#8,$19(a0)
00014248 117C 0004 0018             		move.b	#4,$18(a0)
0001424E 117C 00E1 0020             		move.b	#$E1,$20(a0)
00014254 7000                       		moveq	#0,d0
00014256 1028 0028                  		move.b	$28(a0),d0	; get object type
0001425A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001425E 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00014262                            
00014262                            Obj0B_Action:				; XREF: Obj0B_Index
00014262 4A28 0032                  		tst.b	$32(a0)
00014266 6700                       		beq.s	Obj0B_Grab
00014268 4A68 0030                  		tst.w	$30(a0)
0001426C 6700                       		beq.s	Obj0B_MoveUp
0001426E 5368 0030                  		subq.w	#1,$30(a0)
00014272 6600                       		bne.s	Obj0B_MoveUp
00014274 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
0001427A 6000                       		bra.s	Obj0B_Release
0001427C                            ; ===========================================================================
0001427C                            
0001427C                            Obj0B_MoveUp:				; XREF: Obj0B_Action
0001427C 43F8 D000                  		lea	($FFFFD000).w,a1
00014280 3028 000C                  		move.w	$C(a0),d0
00014284 0440 0018                  		subi.w	#$18,d0
00014288 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
0001428E 6700                       		beq.s	Obj0B_MoveDown
00014290 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00014294 B069 000C                  		cmp.w	$C(a1),d0
00014298 6500                       		bcs.s	Obj0B_MoveDown
0001429A 3340 000C                  		move.w	d0,$C(a1)
0001429E                            
0001429E                            Obj0B_MoveDown:
0001429E 0640 0024                  		addi.w	#$24,d0
000142A2 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000142A8 6700                       		beq.s	Obj0B_LetGo
000142AA 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000142AE B069 000C                  		cmp.w	$C(a1),d0
000142B2 6400                       		bcc.s	Obj0B_LetGo
000142B4 3340 000C                  		move.w	d0,$C(a1)
000142B8                            
000142B8                            Obj0B_LetGo:
000142B8 1038 F603                  		move.b	($FFFFF603).w,d0
000142BC 0240 0070                  		andi.w	#$70,d0
000142C0 6700                       		beq.s	Obj0B_Display
000142C2                            
000142C2                            Obj0B_Release:				; XREF: Obj0B_Action
000142C2 4228 0020                  		clr.b	$20(a0)
000142C6 5428 0024                  		addq.b	#2,$24(a0)
000142CA 4238 F7C8                  		clr.b	($FFFFF7C8).w
000142CE 4238 F7C9                  		clr.b	($FFFFF7C9).w
000142D2 4228 0032                  		clr.b	$32(a0)
000142D6 6000                       		bra.s	Obj0B_Display
000142D8                            ; ===========================================================================
000142D8                            
000142D8                            Obj0B_Grab:				; XREF: Obj0B_Action
000142D8 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
000142DC 6700                       		beq.s	Obj0B_Display	; if not, branch
000142DE 43F8 D000                  		lea	($FFFFD000).w,a1
000142E2 3028 0008                  		move.w	8(a0),d0
000142E6 0640 0014                  		addi.w	#$14,d0
000142EA B069 0008                  		cmp.w	8(a1),d0
000142EE 6400                       		bcc.s	Obj0B_Display
000142F0 4228 0021                  		clr.b	$21(a0)
000142F4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000142FA 6400                       		bcc.s	Obj0B_Display
000142FC 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00014300 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00014304 3028 0008                  		move.w	8(a0),d0
00014308 0640 0014                  		addi.w	#$14,d0
0001430C 3340 0008                  		move.w	d0,8(a1)
00014310 08A9 0000 0022             		bclr	#0,$22(a1)
00014316 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
0001431C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00014322 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00014328 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
0001432E                            
0001432E                            Obj0B_Display:				; XREF: Obj0B_Index
0001432E 6000 E4B6                  		bra.w	MarkObjGone
00014332                            ; ===========================================================================
00014332                            ; ---------------------------------------------------------------------------
00014332                            ; Sprite mappings - pole that breaks (LZ)
00014332                            ; ---------------------------------------------------------------------------
00014332                            Map_obj0B:
00014332                            	include "_maps\obj0B.asm"
00014332                            ; ---------------------------------------------------------------------------
00014332                            ; Sprite mappings - pole that breaks (LZ)
00014332                            ; ---------------------------------------------------------------------------
00014332 0000                       		dc.w byte_11326-Map_obj0B
00014334 0000                       		dc.w byte_11331-Map_obj0B
00014336 02                         byte_11326:	dc.b 2			; normal pole
00014337 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001433C 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00014341 04                         byte_11331:	dc.b 4			; broken pole
00014342 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00014347 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001434C 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00014351 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00014356                            		even
00014356                            		even
00014356                            
00014356                            ; ===========================================================================
00014356                            ; ---------------------------------------------------------------------------
00014356                            ; Object 0C - flapping door (LZ)
00014356                            ; ---------------------------------------------------------------------------
00014356                            
00014356                            Obj0C:					; XREF: Obj_Index
00014356 7000                       		moveq	#0,d0
00014358 1028 0024                  		move.b	$24(a0),d0
0001435C 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00014360 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00014364                            ; ===========================================================================
00014364 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00014366 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00014368                            ; ===========================================================================
00014368                            
00014368                            Obj0C_Main:				; XREF: Obj0C_Index
00014368 5428 0024                  		addq.b	#2,$24(a0)
0001436C 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00014374 317C 4328 0002             		move.w	#$4328,2(a0)
0001437A 0028 0004 0001             		ori.b	#4,1(a0)
00014380 117C 0028 0019             		move.b	#$28,$19(a0)
00014386 7000                       		moveq	#0,d0
00014388 1028 0028                  		move.b	$28(a0),d0	; get object type
0001438C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00014390 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00014394                            
00014394                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00014394 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00014398 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
0001439A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000143A0 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000143A6 4A28 0001                  		tst.b	1(a0)
000143AA 6A00                       		bpl.s	Obj0C_Solid
000143AC 303C 00BB                  		move.w	#$BB,d0
000143B0 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play door sound
000143B6                            
000143B6                            Obj0C_Solid:
000143B6 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
000143BC 6100 8CEE                  		bsr.w	AnimateSprite
000143C0 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
000143C4 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000143C8 6600                       		bne.s	Obj0C_Display	; if yes, branch
000143CA 3038 D008                  		move.w	($FFFFD008).w,d0
000143CE B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
000143D2 6400                       		bcc.s	Obj0C_Display	; if yes, branch
000143D4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000143DA 323C 0013                  		move.w	#$13,d1
000143DE 343C 0020                  		move.w	#$20,d2
000143E2 3602                       		move.w	d2,d3
000143E4 5243                       		addq.w	#1,d3
000143E6 3828 0008                  		move.w	8(a0),d4
000143EA 6100 E602                  		bsr.w	SolidObject	; make the door	solid
000143EE                            
000143EE                            Obj0C_Display:
000143EE 6000 E3F6                  		bra.w	MarkObjGone
000143F2                            ; ===========================================================================
000143F2                            Ani_obj0C:
000143F2                            	include "_anim\obj0C.asm"
000143F2                            ; ---------------------------------------------------------------------------
000143F2                            ; Animation script - flapping door (LZ)
000143F2                            ; ---------------------------------------------------------------------------
000143F2 0000                       		dc.w byte_113E6-Ani_obj0C
000143F4 0000                       		dc.w byte_113EC-Ani_obj0C
000143F6 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
000143FC 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00014402                            		even
00014402                            		even
00014402                            
00014402                            ; ---------------------------------------------------------------------------
00014402                            ; Sprite mappings - flapping door (LZ)
00014402                            ; ---------------------------------------------------------------------------
00014402                            Map_obj0C:
00014402                            	include "_maps\obj0C.asm"
00014402                            ; ---------------------------------------------------------------------------
00014402                            ; Sprite mappings - flapping door (LZ)
00014402                            ; ---------------------------------------------------------------------------
00014402 0000                       		dc.w byte_113F8-Map_obj0C
00014404 0000                       		dc.w byte_11403-Map_obj0C
00014406 0000                       		dc.w byte_1140E-Map_obj0C
00014408 02                         byte_113F8:	dc.b 2
00014409 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001440E 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00014413 02                         byte_11403:	dc.b 2
00014414 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00014419 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001441E 02                         byte_1140E:	dc.b 2
0001441F D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00014424 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001442A 00                         		even
0001442A 00                         		even
0001442A                            
0001442A                            ; ===========================================================================
0001442A                            ; ---------------------------------------------------------------------------
0001442A                            ; Object 71 - invisible	solid blocks
0001442A                            ; ---------------------------------------------------------------------------
0001442A                            
0001442A                            Obj71:					; XREF: Obj_Index
0001442A 7000                       		moveq	#0,d0
0001442C 1028 0024                  		move.b	$24(a0),d0
00014430 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00014434 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00014438                            ; ===========================================================================
00014438 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
0001443A 0000                       		dc.w Obj71_Solid-Obj71_Index
0001443C                            ; ===========================================================================
0001443C                            
0001443C                            Obj71_Main:				; XREF: Obj71_Index
0001443C 5428 0024                  		addq.b	#2,$24(a0)
00014440 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00014448 317C 8680 0002             		move.w	#$8680,2(a0)
0001444E 0028 0004 0001             		ori.b	#4,1(a0)
00014454 1028 0028                  		move.b	$28(a0),d0	; get object type
00014458 1200                       		move.b	d0,d1
0001445A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001445E 0640 0010                  		addi.w	#$10,d0
00014462 E248                       		lsr.w	#1,d0
00014464 1140 0019                  		move.b	d0,$19(a0)	; set object width
00014468 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0001446C 5241                       		addq.w	#1,d1
0001446E E749                       		lsl.w	#3,d1
00014470 1141 0016                  		move.b	d1,$16(a0)	; set object height
00014474                            
00014474                            Obj71_Solid:				; XREF: Obj71_Index
00014474 6100 C306                  		bsr.w	ChkObjOnScreen
00014478 6600                       		bne.s	Obj71_ChkDel
0001447A 7200                       		moveq	#0,d1
0001447C 1228 0019                  		move.b	$19(a0),d1
00014480 0641 000B                  		addi.w	#$B,d1
00014484 7400                       		moveq	#0,d2
00014486 1428 0016                  		move.b	$16(a0),d2
0001448A 3602                       		move.w	d2,d3
0001448C 5243                       		addq.w	#1,d3
0001448E 3828 0008                  		move.w	8(a0),d4
00014492 6100 E5A2                  		bsr.w	SolidObject71
00014496                            
00014496                            Obj71_ChkDel:
00014496 3028 0008                  		move.w	8(a0),d0
0001449A 0240 FF80                  		andi.w	#$FF80,d0
0001449E 3238 F700                  		move.w	($FFFFF700).w,d1
000144A2 0441 0080                  		subi.w	#$80,d1
000144A6 0241 FF80                  		andi.w	#$FF80,d1
000144AA 9041                       		sub.w	d1,d0
000144AC 0C40 0280                  		cmpi.w	#$280,d0
000144B0 6200                       		bhi.s	Obj71_Delete
000144B2 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000144B6 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
000144B8 4EFA C048                  		jmp	DisplaySprite	; if yes, display the object
000144BC                            ; ===========================================================================
000144BC                            
000144BC                            Obj71_NoDisplay:
000144BC 4E75                       		rts	
000144BE                            ; ===========================================================================
000144BE                            
000144BE                            Obj71_Delete:
000144BE 4EFA C07E                  		jmp	DeleteObject
000144C2                            ; ===========================================================================
000144C2                            ; ---------------------------------------------------------------------------
000144C2                            ; Sprite mappings - invisible solid blocks
000144C2                            ; ---------------------------------------------------------------------------
000144C2                            Map_obj71:
000144C2                            	include "_maps\obj71.asm"
000144C2                            ; ---------------------------------------------------------------------------
000144C2                            ; Sprite mappings - invisible solid blocks
000144C2                            ; ---------------------------------------------------------------------------
000144C2 0000                       		dc.w byte_114BC-Map_obj71
000144C4 0000                       		dc.w byte_114D1-Map_obj71
000144C6 0000                       		dc.w byte_114E6-Map_obj71
000144C8 04                         byte_114BC:	dc.b 4
000144C9 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
000144CE F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
000144D3 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
000144D8 0005 0018 00               		dc.b 0,	5, 0, $18, 0
000144DD 04                         byte_114D1:	dc.b 4
000144DE E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
000144E3 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
000144E8 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
000144ED 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
000144F2 04                         byte_114E6:	dc.b 4
000144F3 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
000144F8 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
000144FD 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00014502 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00014508 00                         		even
00014508 00                         		even
00014508                            
00014508                            ; ===========================================================================
00014508                            ; ---------------------------------------------------------------------------
00014508                            ; Object 5D - fans (SLZ)
00014508                            ; ---------------------------------------------------------------------------
00014508                            
00014508                            Obj5D:					; XREF: Obj_Index
00014508 7000                       		moveq	#0,d0
0001450A 1028 0024                  		move.b	$24(a0),d0
0001450E 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00014512 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00014516                            ; ===========================================================================
00014516 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00014518 0000                       		dc.w Obj5D_Delay-Obj5D_Index
0001451A                            ; ===========================================================================
0001451A                            
0001451A                            Obj5D_Main:				; XREF: Obj5D_Index
0001451A 5428 0024                  		addq.b	#2,$24(a0)
0001451E 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00014526 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001452C 0028 0004 0001             		ori.b	#4,1(a0)
00014532 117C 0010 0019             		move.b	#$10,$19(a0)
00014538 117C 0004 0018             		move.b	#4,$18(a0)
0001453E                            
0001453E                            Obj5D_Delay:				; XREF: Obj5D_Index
0001453E 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00014544 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00014546 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001454A 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001454C 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00014552 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00014558 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
0001455A 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00014560                            
00014560                            Obj5D_Blow:
00014560 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00014564 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00014568 43F8 D000                  		lea	($FFFFD000).w,a1
0001456C 3029 0008                  		move.w	8(a1),d0
00014570 9068 0008                  		sub.w	8(a0),d0
00014574 0828 0000 0022             		btst	#0,$22(a0)
0001457A 6600                       		bne.s	Obj5D_ChkSonic
0001457C 4440                       		neg.w	d0
0001457E                            
0001457E                            Obj5D_ChkSonic:
0001457E 0640 0050                  		addi.w	#$50,d0
00014582 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00014586 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00014588 3229 000C                  		move.w	$C(a1),d1
0001458C 0641 0060                  		addi.w	#$60,d1
00014590 9268 000C                  		sub.w	$C(a0),d1
00014594 6500                       		bcs.s	Obj5D_Animate
00014596 0C41 0070                  		cmpi.w	#$70,d1
0001459A 6400                       		bcc.s	Obj5D_Animate
0001459C 0440 0050                  		subi.w	#$50,d0
000145A0 6400                       		bcc.s	loc_1159A
000145A2 4640                       		not.w	d0
000145A4 D040                       		add.w	d0,d0
000145A6                            
000145A6                            loc_1159A:
000145A6 0640 0060                  		addi.w	#$60,d0
000145AA 0828 0000 0022             		btst	#0,$22(a0)
000145B0 6600                       		bne.s	loc_115A8
000145B2 4440                       		neg.w	d0
000145B4                            
000145B4                            loc_115A8:
000145B4 4400                       		neg.b	d0
000145B6 E840                       		asr.w	#4,d0
000145B8 0828 0000 0028             		btst	#0,$28(a0)
000145BE 6700                       		beq.s	Obj5D_MoveSonic
000145C0 4440                       		neg.w	d0
000145C2                            
000145C2                            Obj5D_MoveSonic:
000145C2 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000145C6                            
000145C6                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000145C6 5328 001E                  		subq.b	#1,$1E(a0)
000145CA 6A00                       		bpl.s	Obj5D_ChkDel
000145CC 117C 0000 001E             		move.b	#0,$1E(a0)
000145D2 5228 001B                  		addq.b	#1,$1B(a0)
000145D6 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000145DC 6500                       		bcs.s	loc_115D8
000145DE 117C 0000 001B             		move.b	#0,$1B(a0)
000145E4                            
000145E4                            loc_115D8:
000145E4 7000                       		moveq	#0,d0
000145E6 0828 0000 0028             		btst	#0,$28(a0)
000145EC 6700                       		beq.s	loc_115E4
000145EE 7002                       		moveq	#2,d0
000145F0                            
000145F0                            loc_115E4:
000145F0 D028 001B                  		add.b	$1B(a0),d0
000145F4 1140 001A                  		move.b	d0,$1A(a0)
000145F8                            
000145F8                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
000145F8 6100 BF08                  		bsr.w	DisplaySprite
000145FC 3028 0008                  		move.w	8(a0),d0
00014600 0240 FF80                  		andi.w	#$FF80,d0
00014604 3238 F700                  		move.w	($FFFFF700).w,d1
00014608 0441 0080                  		subi.w	#$80,d1
0001460C 0241 FF80                  		andi.w	#$FF80,d1
00014610 9041                       		sub.w	d1,d0
00014612 0C40 0280                  		cmpi.w	#$280,d0
00014616 6200 BF26                  		bhi.w	DeleteObject
0001461A 4E75                       		rts	
0001461C                            ; ===========================================================================
0001461C                            ; ---------------------------------------------------------------------------
0001461C                            ; Sprite mappings - fans (SLZ)
0001461C                            ; ---------------------------------------------------------------------------
0001461C                            Map_obj5D:
0001461C                            	include "_maps\obj5D.asm"
0001461C                            ; ---------------------------------------------------------------------------
0001461C                            ; Sprite mappings - fans (SLZ)
0001461C                            ; ---------------------------------------------------------------------------
0001461C 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00014620 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00014624 0000                       		dc.w byte_1161A-Map_obj5D
00014626 02                         byte_1161A:	dc.b 2
00014627 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001462C 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00014631 02                         byte_11625:	dc.b 2
00014632 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00014637 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001463C 02                         byte_11630:	dc.b 2
0001463D F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00014642 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00014648 00                         		even
00014648 00                         		even
00014648                            
00014648                            ; ===========================================================================
00014648                            ; ---------------------------------------------------------------------------
00014648                            ; Object 5E - seesaws (SLZ)
00014648                            ; ---------------------------------------------------------------------------
00014648                            
00014648                            Obj5E:					; XREF: Obj_Index
00014648 7000                       		moveq	#0,d0
0001464A 1028 0024                  		move.b	$24(a0),d0
0001464E 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00014652 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00014656 3028 0030                  		move.w	$30(a0),d0
0001465A 0240 FF80                  		andi.w	#$FF80,d0
0001465E 3238 F700                  		move.w	($FFFFF700).w,d1
00014662 0441 0080                  		subi.w	#$80,d1
00014666 0241 FF80                  		andi.w	#$FF80,d1
0001466A 9041                       		sub.w	d1,d0
0001466C 6B00 BED0                  		bmi.w	DeleteObject
00014670 0C40 0280                  		cmpi.w	#$280,d0
00014674 6200 BEC8                  		bhi.w	DeleteObject
00014678 6000 BE88                  		bra.w	DisplaySprite
0001467C                            ; ===========================================================================
0001467C 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001467E 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00014680 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00014682 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00014684 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00014686 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00014688                            ; ===========================================================================
00014688                            
00014688                            Obj5E_Main:				; XREF: Obj5E_Index
00014688 5428 0024                  		addq.b	#2,$24(a0)
0001468C 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00014694 317C 0374 0002             		move.w	#$374,2(a0)
0001469A 0028 0004 0001             		ori.b	#4,1(a0)
000146A0 117C 0004 0018             		move.b	#4,$18(a0)
000146A6 117C 0030 0019             		move.b	#$30,$19(a0)
000146AC 3168 0008 0030             		move.w	8(a0),$30(a0)
000146B2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000146B6 6600                       		bne.s	loc_116D2	; if not, branch
000146B8 6100 C2E4                  		bsr.w	SingleObjLoad2
000146BC 6600                       		bne.s	loc_116D2
000146BE 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000146C2 5C29 0024                  		addq.b	#6,$24(a1)
000146C6 3368 0008 0008             		move.w	8(a0),8(a1)
000146CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000146D2 1368 0022 0022             		move.b	$22(a0),$22(a1)
000146D8 2348 003C                  		move.l	a0,$3C(a1)
000146DC                            
000146DC                            loc_116D2:
000146DC 0828 0000 0022             		btst	#0,$22(a0)
000146E2 6700                       		beq.s	loc_116E0
000146E4 117C 0002 001A             		move.b	#2,$1A(a0)
000146EA                            
000146EA                            loc_116E0:
000146EA 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000146F0                            
000146F0                            Obj5E_Slope:				; XREF: Obj5E_Index
000146F0 1228 003A                  		move.b	$3A(a0),d1
000146F4 6100 0000                  		bsr.w	loc_11766
000146F8 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000146FE 0828 0000 001A             		btst	#0,$1A(a0)
00014704 6700                       		beq.s	loc_11702
00014706 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001470C                            
0001470C                            loc_11702:
0001470C 43F8 D000                  		lea	($FFFFD000).w,a1
00014710 3169 0012 0038             		move.w	$12(a1),$38(a0)
00014716 323C 0030                  		move.w	#$30,d1
0001471A 4EB9 0000 9C38             		jsr	(SlopeObject).l
00014720 4E75                       		rts	
00014722                            ; ===========================================================================
00014722                            
00014722                            Obj5E_Slope2:				; XREF: Obj5E_Index
00014722 6100 0000                  		bsr.w	loc_1174A
00014726 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001472C 0828 0000 001A             		btst	#0,$1A(a0)
00014732 6700                       		beq.s	loc_11730
00014734 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001473A                            
0001473A                            loc_11730:
0001473A 323C 0030                  		move.w	#$30,d1
0001473E 4EB9 0000 9CD8             		jsr	(ExitPlatform).l
00014744 323C 0030                  		move.w	#$30,d1
00014748 3428 0008                  		move.w	8(a0),d2
0001474C 4EB9 0000 AD0A             		jsr	SlopeObject2
00014752 4E75                       		rts	
00014754                            ; ===========================================================================
00014754                            
00014754                            loc_1174A:				; XREF: Obj5E_Slope2
00014754 7202                       		moveq	#2,d1
00014756 43F8 D000                  		lea	($FFFFD000).w,a1
0001475A 3028 0008                  		move.w	8(a0),d0
0001475E 9069 0008                  		sub.w	8(a1),d0
00014762 6400                       		bcc.s	loc_1175E
00014764 4440                       		neg.w	d0
00014766 7200                       		moveq	#0,d1
00014768                            
00014768                            loc_1175E:
00014768 0C40 0008                  		cmpi.w	#8,d0
0001476C 6400                       		bcc.s	loc_11766
0001476E 7201                       		moveq	#1,d1
00014770                            
00014770                            loc_11766:
00014770 1028 001A                  		move.b	$1A(a0),d0
00014774 B001                       		cmp.b	d1,d0
00014776 6700                       		beq.s	locret_11790
00014778 6400                       		bcc.s	loc_11772
0001477A 5400                       		addq.b	#2,d0
0001477C                            
0001477C                            loc_11772:
0001477C 5300                       		subq.b	#1,d0
0001477E 1140 001A                  		move.b	d0,$1A(a0)
00014782 1141 003A                  		move.b	d1,$3A(a0)
00014786 08A8 0000 0001             		bclr	#0,1(a0)
0001478C 0828 0001 001A             		btst	#1,$1A(a0)
00014792 6700                       		beq.s	locret_11790
00014794 08E8 0000 0001             		bset	#0,1(a0)
0001479A                            
0001479A                            locret_11790:
0001479A 4E75                       		rts	
0001479C                            ; ===========================================================================
0001479C                            
0001479C                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001479C 5428 0024                  		addq.b	#2,$24(a0)
000147A0 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000147A8 317C 04F0 0002             		move.w	#$4F0,2(a0)
000147AE 0028 0004 0001             		ori.b	#4,1(a0)
000147B4 117C 0004 0018             		move.b	#4,$18(a0)
000147BA 117C 008B 0020             		move.b	#$8B,$20(a0)
000147C0 117C 000C 0019             		move.b	#$C,$19(a0)
000147C6 3168 0008 0030             		move.w	8(a0),$30(a0)
000147CC 0668 0028 0008             		addi.w	#$28,8(a0)
000147D2 3168 000C 0034             		move.w	$C(a0),$34(a0)
000147D8 117C 0001 001A             		move.b	#1,$1A(a0)
000147DE 0828 0000 0022             		btst	#0,$22(a0)
000147E4 6700                       		beq.s	Obj5E_MoveSpike
000147E6 0468 0050 0008             		subi.w	#$50,8(a0)
000147EC 117C 0002 003A             		move.b	#2,$3A(a0)
000147F2                            
000147F2                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000147F2 2268 003C                  		movea.l	$3C(a0),a1
000147F6 7000                       		moveq	#0,d0
000147F8 1028 003A                  		move.b	$3A(a0),d0
000147FC 9029 003A                  		sub.b	$3A(a1),d0
00014800 6700                       		beq.s	loc_1183E
00014802 6400                       		bcc.s	loc_117FC
00014804 4400                       		neg.b	d0
00014806                            
00014806                            loc_117FC:
00014806 323C F7E8                  		move.w	#-$818,d1
0001480A 343C FEEC                  		move.w	#-$114,d2
0001480E 0C00 0001                  		cmpi.b	#1,d0
00014812 6700                       		beq.s	loc_11822
00014814 323C F510                  		move.w	#-$AF0,d1
00014818 343C FF34                  		move.w	#-$CC,d2
0001481C 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00014822 6D00                       		blt.s	loc_11822
00014824 323C F200                  		move.w	#-$E00,d1
00014828 343C FF60                  		move.w	#-$A0,d2
0001482C                            
0001482C                            loc_11822:
0001482C 3141 0012                  		move.w	d1,$12(a0)
00014830 3142 0010                  		move.w	d2,$10(a0)
00014834 3028 0008                  		move.w	8(a0),d0
00014838 9068 0030                  		sub.w	$30(a0),d0
0001483C 6400                       		bcc.s	loc_11838
0001483E 4468 0010                  		neg.w	$10(a0)
00014842                            
00014842                            loc_11838:
00014842 5428 0024                  		addq.b	#2,$24(a0)
00014846 6000                       		bra.s	Obj5E_SpikeFall
00014848                            ; ===========================================================================
00014848                            
00014848                            loc_1183E:				; XREF: Obj5E_MoveSpike
00014848 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001484E 7000                       		moveq	#0,d0
00014850 1029 001A                  		move.b	$1A(a1),d0
00014854 343C 0028                  		move.w	#$28,d2
00014858 3228 0008                  		move.w	8(a0),d1
0001485C 9268 0030                  		sub.w	$30(a0),d1
00014860 6400                       		bcc.s	loc_1185C
00014862 4442                       		neg.w	d2
00014864 5440                       		addq.w	#2,d0
00014866                            
00014866                            loc_1185C:
00014866 D040                       		add.w	d0,d0
00014868 3228 0034                  		move.w	$34(a0),d1
0001486C D272 0000                  		add.w	(a2,d0.w),d1
00014870 3141 000C                  		move.w	d1,$C(a0)
00014874 D468 0030                  		add.w	$30(a0),d2
00014878 3142 0008                  		move.w	d2,8(a0)
0001487C 4268 000E                  		clr.w	$E(a0)
00014880 4268 000A                  		clr.w	$A(a0)
00014884 4E75                       		rts	
00014886                            ; ===========================================================================
00014886                            
00014886                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00014886 4A68 0012                  		tst.w	$12(a0)
0001488A 6A00                       		bpl.s	loc_1189A
0001488C 6100 BBF6                  		bsr.w	ObjectFall
00014890 3028 0034                  		move.w	$34(a0),d0
00014894 0440 002F                  		subi.w	#$2F,d0
00014898 B068 000C                  		cmp.w	$C(a0),d0
0001489C 6E00                       		bgt.s	locret_11898
0001489E 6100 BBE4                  		bsr.w	ObjectFall
000148A2                            
000148A2                            locret_11898:
000148A2 4E75                       		rts	
000148A4                            ; ===========================================================================
000148A4                            
000148A4                            loc_1189A:				; XREF: Obj5E_SpikeFall
000148A4 6100 BBDE                  		bsr.w	ObjectFall
000148A8 2268 003C                  		movea.l	$3C(a0),a1
000148AC 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000148B2 7000                       		moveq	#0,d0
000148B4 1029 001A                  		move.b	$1A(a1),d0
000148B8 3228 0008                  		move.w	8(a0),d1
000148BC 9268 0030                  		sub.w	$30(a0),d1
000148C0 6400                       		bcc.s	loc_118BA
000148C2 5440                       		addq.w	#2,d0
000148C4                            
000148C4                            loc_118BA:
000148C4 D040                       		add.w	d0,d0
000148C6 3228 0034                  		move.w	$34(a0),d1
000148CA D272 0000                  		add.w	(a2,d0.w),d1
000148CE B268 000C                  		cmp.w	$C(a0),d1
000148D2 6E00                       		bgt.s	locret_11938
000148D4 2268 003C                  		movea.l	$3C(a0),a1
000148D8 7202                       		moveq	#2,d1
000148DA 4A68 0010                  		tst.w	$10(a0)
000148DE 6B00                       		bmi.s	Obj5E_Spring
000148E0 7200                       		moveq	#0,d1
000148E2                            
000148E2                            Obj5E_Spring:
000148E2 1341 003A                  		move.b	d1,$3A(a1)
000148E6 1141 003A                  		move.b	d1,$3A(a0)
000148EA B229 001A                  		cmp.b	$1A(a1),d1
000148EE 6700                       		beq.s	loc_1192C
000148F0 08A9 0003 0022             		bclr	#3,$22(a1)
000148F6 6700                       		beq.s	loc_1192C
000148F8 4229 0025                  		clr.b	$25(a1)
000148FC 137C 0002 0024             		move.b	#2,$24(a1)
00014902 45F8 D000                  		lea	($FFFFD000).w,a2
00014906 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001490C 446A 0012                  		neg.w	$12(a2)
00014910 08EA 0001 0022             		bset	#1,$22(a2)
00014916 08AA 0003 0022             		bclr	#3,$22(a2)
0001491C 422A 003C                  		clr.b	$3C(a2)
00014920 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00014926 157C 0002 0024             		move.b	#2,$24(a2)
0001492C 303C 00CC                  		move.w	#$CC,d0
00014930 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play spring sound
00014936                            
00014936                            loc_1192C:
00014936 4268 0010                  		clr.w	$10(a0)
0001493A 4268 0012                  		clr.w	$12(a0)
0001493E 5528 0024                  		subq.b	#2,$24(a0)
00014942                            
00014942                            locret_11938:
00014942 4E75                       		rts	
00014944                            ; ===========================================================================
00014944 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001494E                            
0001494E                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001497E                            		even
0001497E                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000149AE                            		even
000149AE                            ; ---------------------------------------------------------------------------
000149AE                            ; Sprite mappings - seesaws (SLZ)
000149AE                            ; ---------------------------------------------------------------------------
000149AE                            Map_obj5E:
000149AE                            	include "_maps\obj5E.asm"
000149AE                            ; ---------------------------------------------------------------------------
000149AE                            ; Sprite mappings - seesaws (SLZ)
000149AE                            ; ---------------------------------------------------------------------------
000149AE 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000149B2 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000149B6 07                         byte_119AC:	dc.b 7
000149B7 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000149BC DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000149C1 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000149C6 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000149CB FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000149D0 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000149D5 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000149DA 04                         byte_119D0:	dc.b 4
000149DB E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000149E0 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000149E5 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000149EA E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000149F0 00                         		even
000149F0 00                         		even
000149F0                            
000149F0                            ; ---------------------------------------------------------------------------
000149F0                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000149F0                            ; ---------------------------------------------------------------------------
000149F0                            Map_obj5Ea:
000149F0                            	include "_maps\obj5Eballs.asm"
000149F0                            ; ---------------------------------------------------------------------------
000149F0                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000149F0                            ; ---------------------------------------------------------------------------
000149F0 0000                       		dc.w byte_119EA-Map_obj5Ea
000149F2 0000                       		dc.w byte_119F0-Map_obj5Ea
000149F4 01                         byte_119EA:	dc.b 1
000149F5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000149FA 01                         byte_119F0:	dc.b 1
000149FB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00014A00                            		even
00014A00                            		even
00014A00                            
00014A00                            ; ===========================================================================
00014A00                            ; ---------------------------------------------------------------------------
00014A00                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00014A00                            ; ---------------------------------------------------------------------------
00014A00                            
00014A00                            Obj5F:					; XREF: Obj_Index
00014A00 7000                       		moveq	#0,d0
00014A02 1028 0024                  		move.b	$24(a0),d0
00014A06 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00014A0A 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00014A0E                            ; ===========================================================================
00014A0E 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00014A10 0000                       		dc.w Obj5F_Action-Obj5F_Index
00014A12 0000                       		dc.w Obj5F_Display-Obj5F_Index
00014A14 0000                       		dc.w Obj5F_End-Obj5F_Index
00014A16                            ; ===========================================================================
00014A16                            
00014A16                            Obj5F_Main:				; XREF: Obj5F_Index
00014A16 5428 0024                  		addq.b	#2,$24(a0)
00014A1A 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00014A22 317C 0400 0002             		move.w	#$400,2(a0)
00014A28 0028 0004 0001             		ori.b	#4,1(a0)
00014A2E 117C 0003 0018             		move.b	#3,$18(a0)
00014A34 117C 000C 0019             		move.b	#$C,$19(a0)
00014A3A 1028 0028                  		move.b	$28(a0),d0
00014A3E 6700                       		beq.s	loc_11A3C
00014A40 1140 0024                  		move.b	d0,$24(a0)
00014A44 4E75                       		rts	
00014A46                            ; ===========================================================================
00014A46                            
00014A46                            loc_11A3C:
00014A46 117C 009A 0020             		move.b	#$9A,$20(a0)
00014A4C 0868 0000 0022             		bchg	#0,$22(a0)
00014A52                            
00014A52                            Obj5F_Action:				; XREF: Obj5F_Index
00014A52 7000                       		moveq	#0,d0
00014A54 1028 0025                  		move.b	$25(a0),d0
00014A58 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00014A5C 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00014A60 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00014A66 6100 8644                  		bsr.w	AnimateSprite
00014A6A 6000 DD7A                  		bra.w	MarkObjGone
00014A6E                            ; ===========================================================================
00014A6E 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00014A70 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00014A72 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00014A74                            ; ===========================================================================
00014A74                            
00014A74                            Obj5F_Walk:				; XREF: Obj5F_Index2
00014A74 6100 0000                  		bsr.w	Obj5F_ChkSonic
00014A78 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00014A7C 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00014A7E 5428 0025                  		addq.b	#2,$25(a0)
00014A82 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00014A88 317C 0010 0010             		move.w	#$10,$10(a0)
00014A8E 117C 0001 001C             		move.b	#1,$1C(a0)
00014A94 0868 0000 0022             		bchg	#0,$22(a0)
00014A9A 6700                       		beq.s	locret_11A96
00014A9C 4468 0010                  		neg.w	$10(a0)		; change direction
00014AA0                            
00014AA0                            locret_11A96:
00014AA0 4E75                       		rts	
00014AA2                            ; ===========================================================================
00014AA2                            
00014AA2                            Obj5F_Wait:				; XREF: Obj5F_Index2
00014AA2 6100 0000                  		bsr.w	Obj5F_ChkSonic
00014AA6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00014AAA 6B00                       		bmi.s	loc_11AA8
00014AAC 6100 BA2E                  		bsr.w	SpeedToPos
00014AB0 4E75                       		rts	
00014AB2                            ; ===========================================================================
00014AB2                            
00014AB2                            loc_11AA8:
00014AB2 5528 0025                  		subq.b	#2,$25(a0)
00014AB6 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00014ABC 4268 0010                  		clr.w	$10(a0)		; stop walking
00014AC0 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00014AC6 4E75                       		rts	
00014AC8                            ; ===========================================================================
00014AC8                            
00014AC8                            Obj5F_Explode:				; XREF: Obj5F_Index2
00014AC8 5368 0030                  		subq.w	#1,$30(a0)
00014ACC 6A00                       		bpl.s	locret_11AD0
00014ACE 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00014AD2 117C 0000 0024             		move.b	#0,$24(a0)
00014AD8                            
00014AD8                            locret_11AD0:
00014AD8 4E75                       		rts	
00014ADA                            ; ===========================================================================
00014ADA                            
00014ADA                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00014ADA 3038 D008                  		move.w	($FFFFD008).w,d0
00014ADE 9068 0008                  		sub.w	8(a0),d0
00014AE2 6400                       		bcc.s	loc_11ADE
00014AE4 4440                       		neg.w	d0
00014AE6                            
00014AE6                            loc_11ADE:
00014AE6 0C40 0060                  		cmpi.w	#$60,d0
00014AEA 6400                       		bcc.s	locret_11B5E
00014AEC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014AF0 9068 000C                  		sub.w	$C(a0),d0
00014AF4 6400                       		bcc.s	Obj5F_MakeFuse
00014AF6 4440                       		neg.w	d0
00014AF8                            
00014AF8                            Obj5F_MakeFuse:
00014AF8 0C40 0060                  		cmpi.w	#$60,d0
00014AFC 6400                       		bcc.s	locret_11B5E
00014AFE 4A78 FE08                  		tst.w	($FFFFFE08).w
00014B02 6600                       		bne.s	locret_11B5E
00014B04 117C 0004 0025             		move.b	#4,$25(a0)
00014B0A 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00014B10 4268 0010                  		clr.w	$10(a0)
00014B14 117C 0002 001C             		move.b	#2,$1C(a0)
00014B1A 6100 BE82                  		bsr.w	SingleObjLoad2
00014B1E 6600                       		bne.s	locret_11B5E
00014B20 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00014B24 3368 0008 0008             		move.w	8(a0),8(a1)
00014B2A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014B30 3368 000C 0034             		move.w	$C(a0),$34(a1)
00014B36 1368 0022 0022             		move.b	$22(a0),$22(a1)
00014B3C 137C 0004 0028             		move.b	#4,$28(a1)
00014B42 137C 0003 001C             		move.b	#3,$1C(a1)
00014B48 337C 0010 0012             		move.w	#$10,$12(a1)
00014B4E 0828 0001 0022             		btst	#1,$22(a0)
00014B54 6700                       		beq.s	loc_11B54
00014B56 4469 0012                  		neg.w	$12(a1)
00014B5A                            
00014B5A                            loc_11B54:
00014B5A 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00014B60 2348 003C                  		move.l	a0,$3C(a1)
00014B64                            
00014B64                            locret_11B5E:
00014B64 4E75                       		rts	
00014B66                            ; ===========================================================================
00014B66                            
00014B66                            Obj5F_Display:				; XREF: Obj5F_Index
00014B66 6100                       		bsr.s	loc_11B70
00014B68 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00014B6E 6100 853C                  		bsr.w	AnimateSprite
00014B72 6000 DC72                  		bra.w	MarkObjGone
00014B76                            ; ===========================================================================
00014B76                            
00014B76                            loc_11B70:
00014B76 5368 0030                  		subq.w	#1,$30(a0)
00014B7A 6B00                       		bmi.s	loc_11B7C
00014B7C 6100 B95E                  		bsr.w	SpeedToPos
00014B80 4E75                       		rts	
00014B82                            ; ===========================================================================
00014B82                            
00014B82                            loc_11B7C:
00014B82 4268 0030                  		clr.w	$30(a0)
00014B86 4228 0024                  		clr.b	$24(a0)
00014B8A 3168 0034 000C             		move.w	$34(a0),$C(a0)
00014B90 7203                       		moveq	#3,d1
00014B92 2248                       		movea.l	a0,a1
00014B94 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00014B9A 6000                       		bra.s	Obj5F_MakeShrap
00014B9C                            ; ===========================================================================
00014B9C                            
00014B9C                            Obj5F_Loop:
00014B9C 6100 BE00                  		bsr.w	SingleObjLoad2
00014BA0 6600                       		bne.s	loc_11BCE
00014BA2                            
00014BA2                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00014BA2 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00014BA6 3368 0008 0008             		move.w	8(a0),8(a1)
00014BAC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014BB2 137C 0006 0028             		move.b	#6,$28(a1)
00014BB8 137C 0004 001C             		move.b	#4,$1C(a1)
00014BBE 335A 0010                  		move.w	(a2)+,$10(a1)
00014BC2 335A 0012                  		move.w	(a2)+,$12(a1)
00014BC6 137C 0098 0020             		move.b	#$98,$20(a1)
00014BCC 08E9 0007 0001             		bset	#7,1(a1)
00014BD2                            
00014BD2                            loc_11BCE:
00014BD2 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00014BD6                            
00014BD6 117C 0006 0024             		move.b	#6,$24(a0)
00014BDC                            
00014BDC                            Obj5F_End:				; XREF: Obj5F_Index
00014BDC 6100 B8FE                  		bsr.w	SpeedToPos
00014BE0 0668 0018 0012             		addi.w	#$18,$12(a0)
00014BE6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00014BEC 6100 84BE                  		bsr.w	AnimateSprite
00014BF0 4A28 0001                  		tst.b	1(a0)
00014BF4 6A00 B948                  		bpl.w	DeleteObject
00014BF8 6000 B908                  		bra.w	DisplaySprite
00014BFC                            ; ===========================================================================
00014BFC FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00014C0C                            
00014C0C                            Ani_obj5F:
00014C0C                            	include "_anim\obj5F.asm"
00014C0C                            ; ---------------------------------------------------------------------------
00014C0C                            ; Animation script - Bomb enemy
00014C0C                            ; ---------------------------------------------------------------------------
00014C0C 0000                       		dc.w byte_11C12-Ani_obj5F
00014C0E 0000                       		dc.w byte_11C16-Ani_obj5F
00014C10 0000                       		dc.w byte_11C1C-Ani_obj5F
00014C12 0000                       		dc.w byte_11C20-Ani_obj5F
00014C14 0000                       		dc.w byte_11C24-Ani_obj5F
00014C16 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00014C1A 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00014C20 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00014C24 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00014C28 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00014C2C                            		even
00014C2C                            		even
00014C2C                            
00014C2C                            ; ---------------------------------------------------------------------------
00014C2C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00014C2C                            ; ---------------------------------------------------------------------------
00014C2C                            Map_obj5F:
00014C2C                            	include "_maps\obj5F.asm"
00014C2C                            ; ---------------------------------------------------------------------------
00014C2C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00014C2C                            ; ---------------------------------------------------------------------------
00014C2C 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00014C30 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00014C34 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00014C38 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00014C3C 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00014C40 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00014C44 03                         byte_11C40:	dc.b 3
00014C45 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00014C4A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014C4F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014C54 03                         byte_11C50:	dc.b 3
00014C55 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014C5A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014C5F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014C64 03                         byte_11C60:	dc.b 3
00014C65 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00014C6A 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00014C6F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014C74 03                         byte_11C70:	dc.b 3
00014C75 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014C7A 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00014C7F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014C84 03                         byte_11C80:	dc.b 3
00014C85 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00014C8A 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00014C8F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014C94 03                         byte_11C90:	dc.b 3
00014C95 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014C9A 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00014C9F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014CA4 02                         byte_11CA0:	dc.b 2
00014CA5 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00014CAA 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014CAF 02                         byte_11CAB:	dc.b 2
00014CB0 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014CB5 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014CBA 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00014CBB E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00014CC0 01                         byte_11CBC:	dc.b 1			; fuse
00014CC1 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00014CC6 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00014CC7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00014CCC 01                         byte_11CC8:	dc.b 1			; fireball
00014CCD FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00014CD2                            		even
00014CD2                            		even
00014CD2                            
00014CD2                            ; ===========================================================================
00014CD2                            ; ---------------------------------------------------------------------------
00014CD2                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00014CD2                            ; ---------------------------------------------------------------------------
00014CD2                            
00014CD2                            Obj60:					; XREF: Obj_Index
00014CD2 7000                       		moveq	#0,d0
00014CD4 1028 0024                  		move.b	$24(a0),d0
00014CD8 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00014CDC 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00014CE0                            ; ===========================================================================
00014CE0 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00014CE2 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00014CE4 0000                       		dc.w Obj60_Display-Obj60_Index
00014CE6 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00014CE8 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00014CEA                            ; ===========================================================================
00014CEA                            
00014CEA                            Obj60_Main:				; XREF: Obj60_Index
00014CEA 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00014CF2 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00014CF8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00014CFE 6700                       		beq.s	loc_11D02
00014D00 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00014D06                            
00014D06                            loc_11D02:
00014D06 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00014D0C 6600                       		bne.s	loc_11D10
00014D0E 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00014D14                            
00014D14                            loc_11D10:
00014D14 0028 0004 0001             		ori.b	#4,1(a0)
00014D1A 117C 0004 0018             		move.b	#4,$18(a0)
00014D20 117C 000B 0020             		move.b	#$B,$20(a0)
00014D26 117C 000C 0019             		move.b	#$C,$19(a0)
00014D2C 7400                       		moveq	#0,d2
00014D2E 45E8 0037                  		lea	$37(a0),a2
00014D32 264A                       		movea.l	a2,a3
00014D34 524A                       		addq.w	#1,a2
00014D36 7203                       		moveq	#3,d1
00014D38                            
00014D38                            Obj60_MakeOrbs:
00014D38 6100 BC64                  		bsr.w	SingleObjLoad2
00014D3C 6600                       		bne.s	loc_11D90
00014D3E 5213                       		addq.b	#1,(a3)
00014D40 3A09                       		move.w	a1,d5
00014D42 0445 D000                  		subi.w	#-$3000,d5
00014D46 EC4D                       		lsr.w	#6,d5
00014D48 0245 007F                  		andi.w	#$7F,d5
00014D4C 14C5                       		move.b	d5,(a2)+
00014D4E 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00014D50 137C 0006 0024             		move.b	#6,$24(a1)
00014D56 2368 0004 0004             		move.l	4(a0),4(a1)
00014D5C 3368 0002 0002             		move.w	2(a0),2(a1)
00014D62 0029 0004 0001             		ori.b	#4,1(a1)
00014D68 137C 0004 0018             		move.b	#4,$18(a1)
00014D6E 137C 0008 0019             		move.b	#8,$19(a1)
00014D74 137C 0003 001A             		move.b	#3,$1A(a1)
00014D7A 137C 0098 0020             		move.b	#$98,$20(a1)
00014D80 1342 0026                  		move.b	d2,$26(a1)
00014D84 0602 0040                  		addi.b	#$40,d2
00014D88 2348 003C                  		move.l	a0,$3C(a1)
00014D8C 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00014D90                            
00014D90                            loc_11D90:
00014D90 7001                       		moveq	#1,d0
00014D92 0828 0000 0022             		btst	#0,$22(a0)
00014D98 6700                       		beq.s	Obj60_Move
00014D9A 4440                       		neg.w	d0
00014D9C                            
00014D9C                            Obj60_Move:
00014D9C 1140 0036                  		move.b	d0,$36(a0)
00014DA0 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00014DA6 5428 0024                  		addq.b	#2,$24(a0)
00014DAA 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00014DB0 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00014DB6 6700                       		beq.s	locret_11DBC	; if not, branch
00014DB8 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00014DBC                            
00014DBC                            locret_11DBC:
00014DBC 4E75                       		rts	
00014DBE                            ; ===========================================================================
00014DBE                            
00014DBE                            Obj60_ChkSonic:				; XREF: Obj60_Index
00014DBE 3038 D008                  		move.w	($FFFFD008).w,d0
00014DC2 9068 0008                  		sub.w	8(a0),d0
00014DC6 6400                       		bcc.s	loc_11DCA
00014DC8 4440                       		neg.w	d0
00014DCA                            
00014DCA                            loc_11DCA:
00014DCA 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00014DCE 6400                       		bcc.s	Obj60_Animate	; if not, branch
00014DD0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014DD4 9068 000C                  		sub.w	$C(a0),d0
00014DD8 6400                       		bcc.s	loc_11DDC
00014DDA 4440                       		neg.w	d0
00014DDC                            
00014DDC                            loc_11DDC:
00014DDC 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00014DE0 6400                       		bcc.s	Obj60_Animate	; if not, branch
00014DE2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00014DE6 6600                       		bne.s	Obj60_Animate	; if yes, branch
00014DE8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00014DEE                            
00014DEE                            Obj60_Animate:
00014DEE 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00014DF4 6100 82B6                  		bsr.w	AnimateSprite
00014DF8 6000 0000                  		bra.w	Obj60_ChkDel
00014DFC                            ; ===========================================================================
00014DFC                            
00014DFC                            Obj60_Display:				; XREF: Obj60_Index
00014DFC 6100 B6DE                  		bsr.w	SpeedToPos
00014E00                            
00014E00                            Obj60_ChkDel:				; XREF: Obj60_Animate
00014E00 3028 0008                  		move.w	8(a0),d0
00014E04 0240 FF80                  		andi.w	#$FF80,d0
00014E08 3238 F700                  		move.w	($FFFFF700).w,d1
00014E0C 0441 0080                  		subi.w	#$80,d1
00014E10 0241 FF80                  		andi.w	#$FF80,d1
00014E14 9041                       		sub.w	d1,d0
00014E16 0C40 0280                  		cmpi.w	#$280,d0
00014E1A 6200 0000                  		bhi.w	Obj60_ChkGone
00014E1E 6000 B6E2                  		bra.w	DisplaySprite
00014E22                            ; ===========================================================================
00014E22                            
00014E22                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00014E22 45F8 FC00                  		lea	($FFFFFC00).w,a2
00014E26 7000                       		moveq	#0,d0
00014E28 1028 0023                  		move.b	$23(a0),d0
00014E2C 6700                       		beq.s	loc_11E34
00014E2E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00014E34                            
00014E34                            loc_11E34:
00014E34 45E8 0037                  		lea	$37(a0),a2
00014E38 7400                       		moveq	#0,d2
00014E3A 141A                       		move.b	(a2)+,d2
00014E3C 5342                       		subq.w	#1,d2
00014E3E 6500                       		bcs.s	Obj60_Delete
00014E40                            
00014E40                            loc_11E40:
00014E40 7000                       		moveq	#0,d0
00014E42 101A                       		move.b	(a2)+,d0
00014E44 ED48                       		lsl.w	#6,d0
00014E46 0680 00FF D000             		addi.l	#$FFD000,d0
00014E4C 2240                       		movea.l	d0,a1
00014E4E 6100 B6F0                  		bsr.w	DeleteObject2
00014E52 51CA FFEC                  		dbf	d2,loc_11E40
00014E56                            
00014E56                            Obj60_Delete:
00014E56 6000 B6E6                  		bra.w	DeleteObject
00014E5A                            ; ===========================================================================
00014E5A                            
00014E5A                            Obj60_MoveOrb:				; XREF: Obj60_Index
00014E5A 2268 003C                  		movea.l	$3C(a0),a1
00014E5E 0C11 0060                  		cmpi.b	#$60,0(a1)
00014E62 6600 B6DA                  		bne.w	DeleteObject
00014E66 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00014E6C 6600                       		bne.s	Obj60_Circle
00014E6E 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00014E74 6600                       		bne.s	Obj60_Circle
00014E76 5428 0024                  		addq.b	#2,$24(a0)
00014E7A 5329 0037                  		subq.b	#1,$37(a1)
00014E7E 6600                       		bne.s	Obj60_FireOrb
00014E80 5429 0024                  		addq.b	#2,$24(a1)
00014E84                            
00014E84                            Obj60_FireOrb:
00014E84 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00014E8A 0829 0000 0022             		btst	#0,$22(a1)
00014E90 6700                       		beq.s	Obj60_Display2
00014E92 4468 0010                  		neg.w	$10(a0)
00014E96                            
00014E96                            Obj60_Display2:
00014E96 6000 B66A                  		bra.w	DisplaySprite
00014E9A                            ; ===========================================================================
00014E9A                            
00014E9A                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00014E9A 1028 0026                  		move.b	$26(a0),d0
00014E9E 4EB9 0000 3798             		jsr	(CalcSine).l
00014EA4 E841                       		asr.w	#4,d1
00014EA6 D269 0008                  		add.w	8(a1),d1
00014EAA 3141 0008                  		move.w	d1,8(a0)
00014EAE E840                       		asr.w	#4,d0
00014EB0 D069 000C                  		add.w	$C(a1),d0
00014EB4 3140 000C                  		move.w	d0,$C(a0)
00014EB8 1029 0036                  		move.b	$36(a1),d0
00014EBC D128 0026                  		add.b	d0,$26(a0)
00014EC0 6000 B640                  		bra.w	DisplaySprite
00014EC4                            ; ===========================================================================
00014EC4                            
00014EC4                            Obj60_ChkDel2:				; XREF: Obj60_Index
00014EC4 6100 B616                  		bsr.w	SpeedToPos
00014EC8 4A28 0001                  		tst.b	1(a0)
00014ECC 6A00 B670                  		bpl.w	DeleteObject
00014ED0 6000 B630                  		bra.w	DisplaySprite
00014ED4                            ; ===========================================================================
00014ED4                            Ani_obj60:
00014ED4                            	include "_anim\obj60.asm"
00014ED4                            ; ---------------------------------------------------------------------------
00014ED4                            ; Animation script - Orbinaut enemy
00014ED4                            ; ---------------------------------------------------------------------------
00014ED4 0000                       		dc.w byte_11EDA-Ani_obj60
00014ED6 0000                       		dc.w byte_11EDE-Ani_obj60
00014ED8 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00014EDC 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00014EE2                            		even
00014EE2                            		even
00014EE2                            
00014EE2                            ; ---------------------------------------------------------------------------
00014EE2                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00014EE2                            ; ---------------------------------------------------------------------------
00014EE2                            Map_obj60:
00014EE2                            	include "_maps\obj60.asm"
00014EE2                            ; ---------------------------------------------------------------------------
00014EE2                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00014EE2                            ; ---------------------------------------------------------------------------
00014EE2 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00014EE6 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00014EEA 01                         byte_11EEC:	dc.b 1
00014EEB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00014EF0 01                         byte_11EF2:	dc.b 1
00014EF1 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00014EF6 01                         byte_11EF8:	dc.b 1
00014EF7 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00014EFC 01                         byte_11EFE:	dc.b 1
00014EFD F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00014F02                            		even
00014F02                            		even
00014F02                            
00014F02                            ; ===========================================================================
00014F02                            ; ---------------------------------------------------------------------------
00014F02                            ; Object 16 - harpoon (LZ)
00014F02                            ; ---------------------------------------------------------------------------
00014F02                            
00014F02                            Obj16:					; XREF: Obj_Index
00014F02 7000                       		moveq	#0,d0
00014F04 1028 0024                  		move.b	$24(a0),d0
00014F08 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00014F0C 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00014F10                            ; ===========================================================================
00014F10 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00014F12 0000                       		dc.w Obj16_Move-Obj16_Index
00014F14 0000                       		dc.w Obj16_Wait-Obj16_Index
00014F16                            ; ===========================================================================
00014F16                            
00014F16                            Obj16_Main:				; XREF: Obj16_Index
00014F16 5428 0024                  		addq.b	#2,$24(a0)
00014F1A 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00014F22 317C 03CC 0002             		move.w	#$3CC,2(a0)
00014F28 0028 0004 0001             		ori.b	#4,1(a0)
00014F2E 117C 0004 0018             		move.b	#4,$18(a0)
00014F34 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00014F3A 117C 0014 0019             		move.b	#$14,$19(a0)
00014F40 317C 003C 0030             		move.w	#60,$30(a0)
00014F46                            
00014F46                            Obj16_Move:				; XREF: Obj16_Index
00014F46 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00014F4C 6100 815E                  		bsr.w	AnimateSprite
00014F50 7000                       		moveq	#0,d0
00014F52 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00014F56 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00014F5C 6000 D888                  		bra.w	MarkObjGone
00014F60                            ; ===========================================================================
00014F60 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00014F66                            ; ===========================================================================
00014F66                            
00014F66                            Obj16_Wait:				; XREF: Obj16_Index
00014F66 5368 0030                  		subq.w	#1,$30(a0)
00014F6A 6A00                       		bpl.s	Obj16_ChkDel
00014F6C 317C 003C 0030             		move.w	#60,$30(a0)
00014F72 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00014F76 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00014F7C                            
00014F7C                            Obj16_ChkDel:
00014F7C 6000 D868                  		bra.w	MarkObjGone
00014F80                            ; ===========================================================================
00014F80                            Ani_obj16:
00014F80                            	include "_anim\obj16.asm"
00014F80                            ; ---------------------------------------------------------------------------
00014F80                            ; Animation script - harpoon (LZ)
00014F80                            ; ---------------------------------------------------------------------------
00014F80 0000                       		dc.w byte_11F8A-Ani_obj16
00014F82 0000                       		dc.w byte_11F8E-Ani_obj16
00014F84 0000                       		dc.w byte_11F92-Ani_obj16
00014F86 0000                       		dc.w byte_11F96-Ani_obj16
00014F88 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00014F8C 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00014F90 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00014F94 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00014F98                            		even
00014F98                            		even
00014F98                            
00014F98                            ; ---------------------------------------------------------------------------
00014F98                            ; Sprite mappings - harpoon (LZ)
00014F98                            ; ---------------------------------------------------------------------------
00014F98                            Map_obj16:
00014F98                            	include "_maps\obj16.asm"
00014F98                            ; ---------------------------------------------------------------------------
00014F98                            ; Sprite mappings - harpoon (LZ)
00014F98                            ; ---------------------------------------------------------------------------
00014F98 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00014F9C 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00014FA0 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00014FA4 01                         byte_11FA6:	dc.b 1
00014FA5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00014FAA 01                         byte_11FAC:	dc.b 1
00014FAB FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00014FB0 02                         byte_11FB2:	dc.b 2
00014FB1 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00014FB6 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00014FBB 01                         byte_11FBD:	dc.b 1
00014FBC F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00014FC1 01                         byte_11FC3:	dc.b 1
00014FC2 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00014FC7 02                         byte_11FC9:	dc.b 2
00014FC8 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00014FCD F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00014FD2                            		even
00014FD2                            		even
00014FD2                            
00014FD2                            ; ===========================================================================
00014FD2                            ; ---------------------------------------------------------------------------
00014FD2                            ; Object 61 - blocks (LZ)
00014FD2                            ; ---------------------------------------------------------------------------
00014FD2                            
00014FD2                            Obj61:					; XREF: Obj_Index
00014FD2 7000                       		moveq	#0,d0
00014FD4 1028 0024                  		move.b	$24(a0),d0
00014FD8 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00014FDC 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00014FE0                            ; ===========================================================================
00014FE0 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00014FE2 0000                       		dc.w Obj61_Action-Obj61_Index
00014FE4                            
00014FE4 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00014FE6 200C                       		dc.b $20, $C
00014FE8 1010                       		dc.b $10, $10
00014FEA 1010                       		dc.b $10, $10
00014FEC                            ; ===========================================================================
00014FEC                            
00014FEC                            Obj61_Main:				; XREF: Obj61_Index
00014FEC 5428 0024                  		addq.b	#2,$24(a0)
00014FF0 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00014FF8 317C 43E6 0002             		move.w	#$43E6,2(a0)
00014FFE 117C 0004 0001             		move.b	#4,1(a0)
00015004 117C 0003 0018             		move.b	#3,$18(a0)
0001500A 7000                       		moveq	#0,d0
0001500C 1028 0028                  		move.b	$28(a0),d0
00015010 E648                       		lsr.w	#3,d0
00015012 0240 000E                  		andi.w	#$E,d0
00015016 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001501A 115A 0019                  		move.b	(a2)+,$19(a0)
0001501E 1152 0016                  		move.b	(a2),$16(a0)
00015022 E248                       		lsr.w	#1,d0
00015024 1140 001A                  		move.b	d0,$1A(a0)
00015028 3168 0008 0034             		move.w	8(a0),$34(a0)
0001502E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015034 1028 0028                  		move.b	$28(a0),d0
00015038 0200 000F                  		andi.b	#$F,d0
0001503C 6700                       		beq.s	Obj61_Action
0001503E 0C00 0007                  		cmpi.b	#7,d0
00015042 6700                       		beq.s	Obj61_Action
00015044 117C 0001 0038             		move.b	#1,$38(a0)
0001504A                            
0001504A                            Obj61_Action:				; XREF: Obj61_Index
0001504A 3F28 0008                  		move.w	8(a0),-(sp)
0001504E 7000                       		moveq	#0,d0
00015050 1028 0028                  		move.b	$28(a0),d0
00015054 0240 000F                  		andi.w	#$F,d0
00015058 D040                       		add.w	d0,d0
0001505A 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001505E 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00015062 381F                       		move.w	(sp)+,d4
00015064 4A28 0001                  		tst.b	1(a0)
00015068 6A00                       		bpl.s	Obj61_ChkDel
0001506A 7200                       		moveq	#0,d1
0001506C 1228 0019                  		move.b	$19(a0),d1
00015070 0641 000B                  		addi.w	#$B,d1
00015074 7400                       		moveq	#0,d2
00015076 1428 0016                  		move.b	$16(a0),d2
0001507A 3602                       		move.w	d2,d3
0001507C 5243                       		addq.w	#1,d3
0001507E 6100 D96E                  		bsr.w	SolidObject
00015082 1144 003F                  		move.b	d4,$3F(a0)
00015086 6100 0000                  		bsr.w	loc_12180
0001508A                            
0001508A                            Obj61_ChkDel:
0001508A 3028 0034                  		move.w	$34(a0),d0
0001508E 0240 FF80                  		andi.w	#$FF80,d0
00015092 3238 F700                  		move.w	($FFFFF700).w,d1
00015096 0441 0080                  		subi.w	#$80,d1
0001509A 0241 FF80                  		andi.w	#$FF80,d1
0001509E 9041                       		sub.w	d1,d0
000150A0 0C40 0280                  		cmpi.w	#$280,d0
000150A4 6200 B498                  		bhi.w	DeleteObject
000150A8 6000 B458                  		bra.w	DisplaySprite
000150AC                            ; ===========================================================================
000150AC 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000150B0 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000150B4 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000150B8 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000150BC                            ; ===========================================================================
000150BC                            
000150BC                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000150BC 4E75                       		rts	
000150BE                            ; ===========================================================================
000150BE                            
000150BE                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000150BE 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000150C2 6600                       		bne.s	loc_120D6	; if yes, branch
000150C4 0828 0003 0022             		btst	#3,$22(a0)
000150CA 6700                       		beq.s	locret_120D4
000150CC 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
000150D2                            
000150D2                            locret_120D4:
000150D2 4E75                       		rts	
000150D4                            ; ===========================================================================
000150D4                            
000150D4                            loc_120D6:
000150D4 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000150D8 66F8                       		bne.s	locret_120D4	; if time remains, branch
000150DA 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000150DE 4228 0038                  		clr.b	$38(a0)
000150E2 4E75                       		rts	
000150E4                            ; ===========================================================================
000150E4                            
000150E4                            Obj61_Type02:				; XREF: Obj61_TypeIndex
000150E4 6100 B3F6                  		bsr.w	SpeedToPos
000150E8 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
000150EC 6100 0000                  		bsr.w	ObjHitFloor
000150F0 4A41                       		tst.w	d1
000150F2 6A00 0000                  		bpl.w	locret_12106
000150F6 5241                       		addq.w	#1,d1
000150F8 D368 000C                  		add.w	d1,$C(a0)
000150FC 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00015100 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00015104                            
00015104                            locret_12106:
00015104 4E75                       		rts	
00015106                            ; ===========================================================================
00015106                            
00015106                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00015106 6100 B3D4                  		bsr.w	SpeedToPos
0001510A 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001510E 6100 0000                  		bsr.w	ObjHitCeiling
00015112 4A41                       		tst.w	d1
00015114 6A00 0000                  		bpl.w	locret_12126
00015118 9368 000C                  		sub.w	d1,$C(a0)
0001511C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00015120 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00015124                            
00015124                            locret_12126:
00015124 4E75                       		rts	
00015126                            ; ===========================================================================
00015126                            
00015126                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00015126 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001512C 6600                       		bne.s	locret_12138	; if not, branch
0001512E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00015132 4228 0038                  		clr.b	$38(a0)
00015136                            
00015136                            locret_12138:
00015136 4E75                       		rts	
00015138                            ; ===========================================================================
00015138                            
00015138                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00015138 3038 F646                  		move.w	($FFFFF646).w,d0
0001513C 9068 000C                  		sub.w	$C(a0),d0
00015140 6700                       		beq.s	locret_1217E
00015142 6400                       		bcc.s	loc_12162
00015144 0C40 FFFE                  		cmpi.w	#-2,d0
00015148 6C00                       		bge.s	loc_1214E
0001514A 70FE                       		moveq	#-2,d0
0001514C                            
0001514C                            loc_1214E:
0001514C D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00015150 6100 0000                  		bsr.w	ObjHitCeiling
00015154 4A41                       		tst.w	d1
00015156 6A00 0000                  		bpl.w	locret_12160
0001515A 9368 000C                  		sub.w	d1,$C(a0)
0001515E                            
0001515E                            locret_12160:
0001515E 4E75                       		rts	
00015160                            ; ===========================================================================
00015160                            
00015160                            loc_12162:				; XREF: Obj61_Type07
00015160 0C40 0002                  		cmpi.w	#2,d0
00015164 6F00                       		ble.s	loc_1216A
00015166 7002                       		moveq	#2,d0
00015168                            
00015168                            loc_1216A:
00015168 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001516C 6100 0000                  		bsr.w	ObjHitFloor
00015170 4A41                       		tst.w	d1
00015172 6A00 0000                  		bpl.w	locret_1217E
00015176 5241                       		addq.w	#1,d1
00015178 D368 000C                  		add.w	d1,$C(a0)
0001517C                            
0001517C                            locret_1217E:
0001517C 4E75                       		rts	
0001517E                            ; ===========================================================================
0001517E                            
0001517E                            loc_12180:				; XREF: Obj61_Action
0001517E 4A28 0038                  		tst.b	$38(a0)
00015182 6700                       		beq.s	locret_121C0
00015184 0828 0003 0022             		btst	#3,$22(a0)
0001518A 6600                       		bne.s	loc_1219A
0001518C 4A28 003E                  		tst.b	$3E(a0)
00015190 6700                       		beq.s	locret_121C0
00015192 5928 003E                  		subq.b	#4,$3E(a0)
00015196 6000                       		bra.s	loc_121A6
00015198                            ; ===========================================================================
00015198                            
00015198                            loc_1219A:
00015198 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001519E 6700                       		beq.s	locret_121C0
000151A0 5828 003E                  		addq.b	#4,$3E(a0)
000151A4                            
000151A4                            loc_121A6:
000151A4 1028 003E                  		move.b	$3E(a0),d0
000151A8 4EB9 0000 3798             		jsr	(CalcSine).l
000151AE 323C 0400                  		move.w	#$400,d1
000151B2 C1C1                       		muls.w	d1,d0
000151B4 4840                       		swap	d0
000151B6 D068 0030                  		add.w	$30(a0),d0
000151BA 3140 000C                  		move.w	d0,$C(a0)
000151BE                            
000151BE                            locret_121C0:
000151BE 4E75                       		rts	
000151C0                            ; ===========================================================================
000151C0                            ; ---------------------------------------------------------------------------
000151C0                            ; Sprite mappings - blocks (LZ)
000151C0                            ; ---------------------------------------------------------------------------
000151C0                            Map_obj61:
000151C0                            	include "_maps\obj61.asm"
000151C0                            ; ---------------------------------------------------------------------------
000151C0                            ; Sprite mappings - blocks (LZ)
000151C0                            ; ---------------------------------------------------------------------------
000151C0 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000151C4 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000151C8 01                         byte_121CA:	dc.b 1
000151C9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000151CE 02                         byte_121D0:	dc.b 2
000151CF F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
000151D4 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000151D9 01                         byte_121DB:	dc.b 1
000151DA F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
000151DF 01                         byte_121E1:	dc.b 1
000151E0 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
000151E6 00                         		even
000151E6 00                         		even
000151E6                            
000151E6                            ; ===========================================================================
000151E6                            ; ---------------------------------------------------------------------------
000151E6                            ; Object 62 - gargoyle head (LZ)
000151E6                            ; ---------------------------------------------------------------------------
000151E6                            
000151E6                            Obj62:					; XREF: Obj_Index
000151E6 7000                       		moveq	#0,d0
000151E8 1028 0024                  		move.b	$24(a0),d0
000151EC 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
000151F0 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
000151F4 6000 D5F0                  		bra.w	MarkObjGone
000151F8                            ; ===========================================================================
000151F8 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
000151FA 0000                       		dc.w Obj62_MakeFire-Obj62_Index
000151FC 0000                       		dc.w Obj62_FireBall-Obj62_Index
000151FE 0000                       		dc.w Obj62_AniFire-Obj62_Index
00015200                            
00015200 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00015208                            ; ===========================================================================
00015208                            
00015208                            Obj62_Main:				; XREF: Obj62_Index
00015208 5428 0024                  		addq.b	#2,$24(a0)
0001520C 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00015214 317C 42E9 0002             		move.w	#$42E9,2(a0)
0001521A 0028 0004 0001             		ori.b	#4,1(a0)
00015220 117C 0003 0018             		move.b	#3,$18(a0)
00015226 117C 0010 0019             		move.b	#$10,$19(a0)
0001522C 1028 0028                  		move.b	$28(a0),d0	; get object type
00015230 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015234 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
0001523A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00015240 0228 000F 0028             		andi.b	#$F,$28(a0)
00015246                            
00015246                            Obj62_MakeFire:				; XREF: Obj62_Index
00015246 5328 001E                  		subq.b	#1,$1E(a0)
0001524A 6600                       		bne.s	Obj62_NoFire
0001524C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00015252 6100 B528                  		bsr.w	ChkObjOnScreen
00015256 6600                       		bne.s	Obj62_NoFire
00015258 6100 B72E                  		bsr.w	SingleObjLoad
0001525C 6600                       		bne.s	Obj62_NoFire
0001525E 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00015262 5829 0024                  		addq.b	#4,$24(a1)
00015266 3368 0008 0008             		move.w	8(a0),8(a1)
0001526C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015272 1368 0001 0001             		move.b	1(a0),1(a1)
00015278 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001527E                            
0001527E                            Obj62_NoFire:
0001527E 4E75                       		rts	
00015280                            ; ===========================================================================
00015280                            
00015280                            Obj62_FireBall:				; XREF: Obj62_Index
00015280 5428 0024                  		addq.b	#2,$24(a0)
00015284 117C 0008 0016             		move.b	#8,$16(a0)
0001528A 117C 0008 0017             		move.b	#8,$17(a0)
00015290 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00015298 317C 02E9 0002             		move.w	#$2E9,2(a0)
0001529E 0028 0004 0001             		ori.b	#4,1(a0)
000152A4 117C 0004 0018             		move.b	#4,$18(a0)
000152AA 117C 0098 0020             		move.b	#$98,$20(a0)
000152B0 117C 0008 0019             		move.b	#8,$19(a0)
000152B6 117C 0002 001A             		move.b	#2,$1A(a0)
000152BC 5068 000C                  		addq.w	#8,$C(a0)
000152C0 317C 0200 0010             		move.w	#$200,$10(a0)
000152C6 0828 0000 0022             		btst	#0,$22(a0)
000152CC 6600                       		bne.s	Obj62_Sound
000152CE 4468 0010                  		neg.w	$10(a0)
000152D2                            
000152D2                            Obj62_Sound:
000152D2 303C 00AE                  		move.w	#$AE,d0
000152D6 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play lava ball sound
000152DC                            
000152DC                            Obj62_AniFire:				; XREF: Obj62_Index
000152DC 1038 FE05                  		move.b	($FFFFFE05).w,d0
000152E0 0200 0007                  		andi.b	#7,d0
000152E4 6600                       		bne.s	Obj62_StopFire
000152E6 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
000152EC                            
000152EC                            Obj62_StopFire:
000152EC 6100 B1EE                  		bsr.w	SpeedToPos
000152F0 0828 0000 0022             		btst	#0,$22(a0)
000152F6 6600                       		bne.s	Obj62_StopFire2
000152F8 76F8                       		moveq	#-8,d3
000152FA 6100 0000                  		bsr.w	ObjHitWallLeft
000152FE 4A41                       		tst.w	d1
00015300 6B00 B23C                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00015304 4E75                       		rts	
00015306                            ; ===========================================================================
00015306                            
00015306                            Obj62_StopFire2:
00015306 7608                       		moveq	#8,d3
00015308 6100 0000                  		bsr.w	ObjHitWallRight
0001530C 4A41                       		tst.w	d1
0001530E 6B00 B22E                  		bmi.w	DeleteObject
00015312 4E75                       		rts	
00015314                            ; ===========================================================================
00015314                            ; ---------------------------------------------------------------------------
00015314                            ; Sprite mappings - gargoyle head (LZ)
00015314                            ; ---------------------------------------------------------------------------
00015314                            Map_obj62:
00015314                            	include "_maps\obj62.asm"
00015314                            ; ---------------------------------------------------------------------------
00015314                            ; Sprite mappings - gargoyle head (LZ)
00015314                            ; ---------------------------------------------------------------------------
00015314 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00015318 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001531C 03                         byte_12320:	dc.b 3
0001531D F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00015322 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00015327 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001532C 01                         byte_12330:	dc.b 1
0001532D FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00015332 01                         byte_12336:	dc.b 1
00015333 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00015338                            		even
00015338                            		even
00015338                            
00015338                            ; ===========================================================================
00015338                            ; ---------------------------------------------------------------------------
00015338                            ; Object 63 - platforms	on a conveyor belt (LZ)
00015338                            ; ---------------------------------------------------------------------------
00015338                            
00015338                            Obj63:					; XREF: Obj_Index
00015338 7000                       		moveq	#0,d0
0001533A 1028 0024                  		move.b	$24(a0),d0
0001533E 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00015342 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00015346 3028 0030                  		move.w	$30(a0),d0
0001534A 0240 FF80                  		andi.w	#$FF80,d0
0001534E 3238 F700                  		move.w	($FFFFF700).w,d1
00015352 0441 0080                  		subi.w	#$80,d1
00015356 0241 FF80                  		andi.w	#$FF80,d1
0001535A 9041                       		sub.w	d1,d0
0001535C 0C40 0280                  		cmpi.w	#$280,d0
00015360 6200                       		bhi.s	loc_1236A
00015362                            
00015362                            Obj63_Display:				; XREF: loc_1236A
00015362 6000 B19E                  		bra.w	DisplaySprite
00015366                            ; ===========================================================================
00015366                            
00015366                            loc_1236A:				; XREF: Obj63
00015366 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
0001536C 6600                       		bne.s	loc_12378
0001536E 0C40 FF80                  		cmpi.w	#-$80,d0
00015372 64EE                       		bcc.s	Obj63_Display
00015374                            
00015374                            loc_12378:
00015374 1028 002F                  		move.b	$2F(a0),d0
00015378 6A00 B1C4                  		bpl.w	DeleteObject
0001537C 0240 007F                  		andi.w	#$7F,d0
00015380 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00015384 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001538A 6000 B1B2                  		bra.w	DeleteObject
0001538E                            ; ===========================================================================
0001538E 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00015390 0000                       		dc.w loc_124B2-Obj63_Index
00015392 0000                       		dc.w loc_124C2-Obj63_Index
00015394 0000                       		dc.w loc_124DE-Obj63_Index
00015396                            ; ===========================================================================
00015396                            
00015396                            Obj63_Main:				; XREF: Obj63_Index
00015396 1028 0028                  		move.b	$28(a0),d0
0001539A 6B00 0000                  		bmi.w	loc_12460
0001539E 5428 0024                  		addq.b	#2,$24(a0)
000153A2 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000153AA 317C 43F6 0002             		move.w	#$43F6,2(a0)
000153B0 0028 0004 0001             		ori.b	#4,1(a0)
000153B6 117C 0010 0019             		move.b	#$10,$19(a0)
000153BC 117C 0004 0018             		move.b	#4,$18(a0)
000153C2 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
000153C8 6600                       		bne.s	loc_123E2
000153CA 5828 0024                  		addq.b	#4,$24(a0)
000153CE 317C 03F6 0002             		move.w	#$3F6,2(a0)
000153D4 117C 0001 0018             		move.b	#1,$18(a0)
000153DA 6000 0000                  		bra.w	loc_124DE
000153DE                            ; ===========================================================================
000153DE                            
000153DE                            loc_123E2:
000153DE 117C 0004 001A             		move.b	#4,$1A(a0)
000153E4 7000                       		moveq	#0,d0
000153E6 1028 0028                  		move.b	$28(a0),d0
000153EA 3200                       		move.w	d0,d1
000153EC E648                       		lsr.w	#3,d0
000153EE 0240 001E                  		andi.w	#$1E,d0
000153F2 45FA 0000                  		lea	Obj63_Data(pc),a2
000153F6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000153FA 315A 0038                  		move.w	(a2)+,$38(a0)
000153FE 315A 0030                  		move.w	(a2)+,$30(a0)
00015402 214A 003C                  		move.l	a2,$3C(a0)
00015406 0241 000F                  		andi.w	#$F,d1
0001540A E549                       		lsl.w	#2,d1
0001540C 1141 0038                  		move.b	d1,$38(a0)
00015410 117C 0004 003A             		move.b	#4,$3A(a0)
00015416 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001541A 6700                       		beq.s	loc_1244C
0001541C 117C 0001 003B             		move.b	#1,$3B(a0)
00015422 4428 003A                  		neg.b	$3A(a0)
00015426 7200                       		moveq	#0,d1
00015428 1228 0038                  		move.b	$38(a0),d1
0001542C D228 003A                  		add.b	$3A(a0),d1
00015430 B228 0039                  		cmp.b	$39(a0),d1
00015434 6500                       		bcs.s	loc_12448
00015436 1001                       		move.b	d1,d0
00015438 7200                       		moveq	#0,d1
0001543A 4A00                       		tst.b	d0
0001543C 6A00                       		bpl.s	loc_12448
0001543E 1228 0039                  		move.b	$39(a0),d1
00015442 5901                       		subq.b	#4,d1
00015444                            
00015444                            loc_12448:
00015444 1141 0038                  		move.b	d1,$38(a0)
00015448                            
00015448                            loc_1244C:
00015448 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001544E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00015454 6100 0000                  		bsr.w	Obj63_ChangeDir
00015458 6000 0000                  		bra.w	loc_124B2
0001545C                            ; ===========================================================================
0001545C                            
0001545C                            loc_12460:				; XREF: Obj63_Main
0001545C 1140 002F                  		move.b	d0,$2F(a0)
00015460 0240 007F                  		andi.w	#$7F,d0
00015464 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00015468 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001546E 6600 B0CE                  		bne.w	DeleteObject
00015472 D040                       		add.w	d0,d0
00015474 0240 001E                  		andi.w	#$1E,d0
00015478 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
0001547E D4F2 0000                  		adda.w	(a2,d0.w),a2
00015482 321A                       		move.w	(a2)+,d1
00015484 2248                       		movea.l	a0,a1
00015486 6000                       		bra.s	Obj63_MakePtfms
00015488                            ; ===========================================================================
00015488                            
00015488                            Obj63_Loop:
00015488 6100 B4FE                  		bsr.w	SingleObjLoad
0001548C 6600                       		bne.s	loc_124AA
0001548E                            
0001548E                            Obj63_MakePtfms:			; XREF: loc_12460
0001548E 12BC 0063                  		move.b	#$63,0(a1)
00015492 335A 0008                  		move.w	(a2)+,8(a1)
00015496 335A 000C                  		move.w	(a2)+,$C(a1)
0001549A 301A                       		move.w	(a2)+,d0
0001549C 1340 0028                  		move.b	d0,$28(a1)
000154A0                            
000154A0                            loc_124AA:
000154A0 51C9 FFE6                  		dbf	d1,Obj63_Loop
000154A4                            
000154A4 588F                       		addq.l	#4,sp
000154A6 4E75                       		rts	
000154A8                            ; ===========================================================================
000154A8                            
000154A8                            loc_124B2:				; XREF: Obj63_Index
000154A8 7200                       		moveq	#0,d1
000154AA 1228 0019                  		move.b	$19(a0),d1
000154AE 4EB9 0000 9B64             		jsr	(PlatformObject).l
000154B4 6000 0000                  		bra.w	sub_12502
000154B8                            ; ===========================================================================
000154B8                            
000154B8                            loc_124C2:				; XREF: Obj63_Index
000154B8 7200                       		moveq	#0,d1
000154BA 1228 0019                  		move.b	$19(a0),d1
000154BE 4EB9 0000 9CD8             		jsr	(ExitPlatform).l
000154C4 3F28 0008                  		move.w	8(a0),-(sp)
000154C8 6100 0000                  		bsr.w	sub_12502
000154CC 341F                       		move.w	(sp)+,d2
000154CE 4EF9 0000 A242             		jmp	(MvSonicOnPtfm2).l
000154D4                            ; ===========================================================================
000154D4                            
000154D4                            loc_124DE:				; XREF: Obj63_Index
000154D4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000154D8 0240 0003                  		andi.w	#3,d0
000154DC 6600                       		bne.s	loc_124FC
000154DE 7201                       		moveq	#1,d1
000154E0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000154E4 6700                       		beq.s	loc_124F2
000154E6 4401                       		neg.b	d1
000154E8                            
000154E8                            loc_124F2:
000154E8 D328 001A                  		add.b	d1,$1A(a0)
000154EC 0228 0003 001A             		andi.b	#3,$1A(a0)
000154F2                            
000154F2                            loc_124FC:
000154F2 588F                       		addq.l	#4,sp
000154F4 6000 D2F0                  		bra.w	MarkObjGone
000154F8                            
000154F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154F8                            
000154F8                            
000154F8                            sub_12502:				; XREF: loc_124B2; loc_124C2
000154F8 4A38 F7EE                  		tst.b	($FFFFF7EE).w
000154FC 6700                       		beq.s	loc_12520
000154FE 4A28 003B                  		tst.b	$3B(a0)
00015502 6600                       		bne.s	loc_12520
00015504 117C 0001 003B             		move.b	#1,$3B(a0)
0001550A 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00015510 4428 003A                  		neg.b	$3A(a0)
00015514 6000                       		bra.s	loc_12534
00015516                            ; ===========================================================================
00015516                            
00015516                            loc_12520:
00015516 3028 0008                  		move.w	8(a0),d0
0001551A B068 0034                  		cmp.w	$34(a0),d0
0001551E 6600                       		bne.s	loc_1256A
00015520 3028 000C                  		move.w	$C(a0),d0
00015524 B068 0036                  		cmp.w	$36(a0),d0
00015528 6600                       		bne.s	loc_1256A
0001552A                            
0001552A                            loc_12534:
0001552A 7200                       		moveq	#0,d1
0001552C 1228 0038                  		move.b	$38(a0),d1
00015530 D228 003A                  		add.b	$3A(a0),d1
00015534 B228 0039                  		cmp.b	$39(a0),d1
00015538 6500                       		bcs.s	loc_12552
0001553A 1001                       		move.b	d1,d0
0001553C 7200                       		moveq	#0,d1
0001553E 4A00                       		tst.b	d0
00015540 6A00                       		bpl.s	loc_12552
00015542 1228 0039                  		move.b	$39(a0),d1
00015546 5901                       		subq.b	#4,d1
00015548                            
00015548                            loc_12552:
00015548 1141 0038                  		move.b	d1,$38(a0)
0001554C 2268 003C                  		movea.l	$3C(a0),a1
00015550 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00015556 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001555C 6100 0000                  		bsr.w	Obj63_ChangeDir
00015560                            
00015560                            loc_1256A:
00015560 6100 AF7A                  		bsr.w	SpeedToPos
00015564 4E75                       		rts	
00015566                            ; End of function sub_12502
00015566                            
00015566                            
00015566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015566                            
00015566                            
00015566                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00015566 7000                       		moveq	#0,d0
00015568 343C FF00                  		move.w	#-$100,d2
0001556C 3028 0008                  		move.w	8(a0),d0
00015570 9068 0034                  		sub.w	$34(a0),d0
00015574 6400                       		bcc.s	loc_12584
00015576 4440                       		neg.w	d0
00015578 4442                       		neg.w	d2
0001557A                            
0001557A                            loc_12584:
0001557A 7200                       		moveq	#0,d1
0001557C 363C FF00                  		move.w	#-$100,d3
00015580 3228 000C                  		move.w	$C(a0),d1
00015584 9268 0036                  		sub.w	$36(a0),d1
00015588 6400                       		bcc.s	loc_12598
0001558A 4441                       		neg.w	d1
0001558C 4443                       		neg.w	d3
0001558E                            
0001558E                            loc_12598:
0001558E B240                       		cmp.w	d0,d1
00015590 6500                       		bcs.s	loc_125C2
00015592 3028 0008                  		move.w	8(a0),d0
00015596 9068 0034                  		sub.w	$34(a0),d0
0001559A 6700                       		beq.s	loc_125AE
0001559C 48C0                       		ext.l	d0
0001559E E180                       		asl.l	#8,d0
000155A0 81C1                       		divs.w	d1,d0
000155A2 4440                       		neg.w	d0
000155A4                            
000155A4                            loc_125AE:
000155A4 3140 0010                  		move.w	d0,$10(a0)
000155A8 3143 0012                  		move.w	d3,$12(a0)
000155AC 4840                       		swap	d0
000155AE 3140 000A                  		move.w	d0,$A(a0)
000155B2 4268 000E                  		clr.w	$E(a0)
000155B6 4E75                       		rts	
000155B8                            ; ===========================================================================
000155B8                            
000155B8                            loc_125C2:				; XREF: Obj63_ChangeDir
000155B8 3228 000C                  		move.w	$C(a0),d1
000155BC 9268 0036                  		sub.w	$36(a0),d1
000155C0 6700                       		beq.s	loc_125D4
000155C2 48C1                       		ext.l	d1
000155C4 E181                       		asl.l	#8,d1
000155C6 83C0                       		divs.w	d0,d1
000155C8 4441                       		neg.w	d1
000155CA                            
000155CA                            loc_125D4:
000155CA 3141 0012                  		move.w	d1,$12(a0)
000155CE 3142 0010                  		move.w	d2,$10(a0)
000155D2 4841                       		swap	d1
000155D4 3141 000E                  		move.w	d1,$E(a0)
000155D8 4268 000A                  		clr.w	$A(a0)
000155DC 4E75                       		rts	
000155DE                            ; End of function Obj63_ChangeDir
000155DE                            
000155DE                            ; ===========================================================================
000155DE 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
000155E0 0000                       		dc.w word_12610-Obj63_Data
000155E2 0000                       		dc.w word_12628-Obj63_Data
000155E4 0000                       		dc.w word_1263C-Obj63_Data
000155E6 0000                       		dc.w word_12650-Obj63_Data
000155E8 0000                       		dc.w word_12668-Obj63_Data
000155EA 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000155FA 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00015606 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00015616 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001561E 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00015632 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00015646 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001565E 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00015672                            
00015672                            ; ---------------------------------------------------------------------------
00015672                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00015672                            ; ---------------------------------------------------------------------------
00015672                            Map_obj63:
00015672                            	include "_maps\obj63.asm"
00015672                            ; ---------------------------------------------------------------------------
00015672                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00015672                            ; ---------------------------------------------------------------------------
00015672 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00015676 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
0001567A 0000                       		dc.w byte_1269E-Map_obj63
0001567C 01                         byte_12686:	dc.b 1
0001567D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00015682 01                         byte_1268C:	dc.b 1
00015683 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00015688 01                         byte_12692:	dc.b 1
00015689 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001568E 01                         byte_12698:	dc.b 1
0001568F F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00015694 01                         byte_1269E:	dc.b 1
00015695 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001569A                            		even
0001569A                            		even
0001569A                            
0001569A                            ; ===========================================================================
0001569A                            ; ---------------------------------------------------------------------------
0001569A                            ; Object 64 - bubbles (LZ)
0001569A                            ; ---------------------------------------------------------------------------
0001569A                            
0001569A                            Obj64:					; XREF: Obj_Index
0001569A 7000                       		moveq	#0,d0
0001569C 1028 0024                  		move.b	$24(a0),d0
000156A0 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000156A4 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000156A8                            ; ===========================================================================
000156A8 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000156AA 0000                       		dc.w Obj64_Animate-Obj64_Index
000156AC 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000156AE 0000                       		dc.w Obj64_Display2-Obj64_Index
000156B0 0000                       		dc.w Obj64_Delete3-Obj64_Index
000156B2 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000156B4                            ; ===========================================================================
000156B4                            
000156B4                            Obj64_Main:				; XREF: Obj64_Index
000156B4 5428 0024                  		addq.b	#2,$24(a0)
000156B8 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000156C0 317C 8348 0002             		move.w	#$8348,2(a0)
000156C6 117C 0084 0001             		move.b	#$84,1(a0)
000156CC 117C 0010 0019             		move.b	#$10,$19(a0)
000156D2 117C 0001 0018             		move.b	#1,$18(a0)
000156D8 1028 0028                  		move.b	$28(a0),d0	; get object type
000156DC 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000156DE 5028 0024                  		addq.b	#8,$24(a0)
000156E2 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000156E6 1140 0032                  		move.b	d0,$32(a0)
000156EA 1140 0033                  		move.b	d0,$33(a0)
000156EE 117C 0006 001C             		move.b	#6,$1C(a0)
000156F4 6000 0000                  		bra.w	Obj64_BblMaker
000156F8                            ; ===========================================================================
000156F8                            
000156F8                            Obj64_Bubble:				; XREF: Obj64_Main
000156F8 1140 001C                  		move.b	d0,$1C(a0)
000156FC 3168 0008 0030             		move.w	8(a0),$30(a0)
00015702 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00015708 4EB9 0000 3772             		jsr	(RandomNumber).l
0001570E 1140 0026                  		move.b	d0,$26(a0)
00015712                            
00015712                            Obj64_Animate:				; XREF: Obj64_Index
00015712 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00015718 4EB9 0000 D0AC             		jsr	AnimateSprite
0001571E 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00015724 6600                       		bne.s	Obj64_ChkWater
00015726 117C 0001 002E             		move.b	#1,$2E(a0)
0001572C                            
0001572C                            Obj64_ChkWater:				; XREF: Obj64_Index
0001572C 3038 F646                  		move.w	($FFFFF646).w,d0
00015730 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00015734 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00015736                            
00015736                            Obj64_Burst:				; XREF: Obj64_Wobble
00015736 117C 0006 0024             		move.b	#6,$24(a0)
0001573C 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00015740 6000 0000                  		bra.w	Obj64_Display2
00015744                            ; ===========================================================================
00015744                            
00015744                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00015744 1028 0026                  		move.b	$26(a0),d0
00015748 5228 0026                  		addq.b	#1,$26(a0)
0001574C 0240 007F                  		andi.w	#$7F,d0
00015750 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015756 1031 0000                  		move.b	(a1,d0.w),d0
0001575A 4880                       		ext.w	d0
0001575C D068 0030                  		add.w	$30(a0),d0
00015760 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00015764 4A28 002E                  		tst.b	$2E(a0)
00015768 6700                       		beq.s	Obj64_Display
0001576A 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001576E 6700                       		beq.s	Obj64_Display	; if not, branch
00015770                            
00015770 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00015774 303C 00AD                  		move.w	#$AD,d0
00015778 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001577E 43F8 D000                  		lea	($FFFFD000).w,a1
00015782 4269 0010                  		clr.w	$10(a1)
00015786 4269 0012                  		clr.w	$12(a1)
0001578A 4269 0014                  		clr.w	$14(a1)
0001578E 137C 0015 001C             		move.b	#$15,$1C(a1)
00015794 337C 0023 003E             		move.w	#$23,$3E(a1)
0001579A 137C 0000 003C             		move.b	#0,$3C(a1)
000157A0 08A9 0005 0022             		bclr	#5,$22(a1)
000157A6 08A9 0004 0022             		bclr	#4,$22(a1)
000157AC 0829 0002 0022             		btst	#2,$22(a1)
000157B2 6700 FF82                  		beq.w	Obj64_Burst
000157B6 08A9 0002 0022             		bclr	#2,$22(a1)
000157BC 137C 0013 0016             		move.b	#$13,$16(a1)
000157C2 137C 0009 0017             		move.b	#9,$17(a1)
000157C8 5B69 000C                  		subq.w	#5,$C(a1)
000157CC 6000 FF68                  		bra.w	Obj64_Burst
000157D0                            ; ===========================================================================
000157D0                            
000157D0                            Obj64_Display:				; XREF: Obj64_Wobble
000157D0 6100 AD0A                  		bsr.w	SpeedToPos
000157D4 4A28 0001                  		tst.b	1(a0)
000157D8 6A00                       		bpl.s	Obj64_Delete
000157DA 4EFA AD26                  		jmp	DisplaySprite
000157DE                            ; ===========================================================================
000157DE                            
000157DE                            Obj64_Delete:
000157DE 4EFA AD5E                  		jmp	DeleteObject
000157E2                            ; ===========================================================================
000157E2                            
000157E2                            Obj64_Display2:				; XREF: Obj64_Index
000157E2 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000157E8 4EB9 0000 D0AC             		jsr	AnimateSprite
000157EE 4A28 0001                  		tst.b	1(a0)
000157F2 6A00                       		bpl.s	Obj64_Delete2
000157F4 4EFA AD0C                  		jmp	DisplaySprite
000157F8                            ; ===========================================================================
000157F8                            
000157F8                            Obj64_Delete2:
000157F8 4EFA AD44                  		jmp	DeleteObject
000157FC                            ; ===========================================================================
000157FC                            
000157FC                            Obj64_Delete3:				; XREF: Obj64_Index
000157FC 6000 AD40                  		bra.w	DeleteObject
00015800                            ; ===========================================================================
00015800                            
00015800                            Obj64_BblMaker:				; XREF: Obj64_Index
00015800 4A68 0036                  		tst.w	$36(a0)
00015804 6600                       		bne.s	loc_12874
00015806 3038 F646                  		move.w	($FFFFF646).w,d0
0001580A B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001580E 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00015812 4A28 0001                  		tst.b	1(a0)
00015816 6A00 0000                  		bpl.w	Obj64_ChkDel
0001581A 5368 0038                  		subq.w	#1,$38(a0)
0001581E 6A00 0000                  		bpl.w	loc_12914
00015822 317C 0001 0036             		move.w	#1,$36(a0)
00015828                            
00015828                            loc_1283A:
00015828 4EB9 0000 3772             		jsr	(RandomNumber).l
0001582E 3200                       		move.w	d0,d1
00015830 0240 0007                  		andi.w	#7,d0
00015834 0C40 0006                  		cmpi.w	#6,d0
00015838 64EE                       		bcc.s	loc_1283A
0001583A                            
0001583A 1140 0034                  		move.b	d0,$34(a0)
0001583E 0241 000C                  		andi.w	#$C,d1
00015842 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00015848 D2C1                       		adda.w	d1,a1
0001584A 2149 003C                  		move.l	a1,$3C(a0)
0001584E 5328 0032                  		subq.b	#1,$32(a0)
00015852 6A00                       		bpl.s	loc_12872
00015854 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001585A 08E8 0007 0036             		bset	#7,$36(a0)
00015860                            
00015860                            loc_12872:
00015860 6000                       		bra.s	loc_1287C
00015862                            ; ===========================================================================
00015862                            
00015862                            loc_12874:				; XREF: Obj64_BblMaker
00015862 5368 0038                  		subq.w	#1,$38(a0)
00015866 6A00 0000                  		bpl.w	loc_12914
0001586A                            
0001586A                            loc_1287C:
0001586A 4EB9 0000 3772             		jsr	(RandomNumber).l
00015870 0240 001F                  		andi.w	#$1F,d0
00015874 3140 0038                  		move.w	d0,$38(a0)
00015878 6100 B10E                  		bsr.w	SingleObjLoad
0001587C 6600                       		bne.s	loc_128F8
0001587E 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00015882 3368 0008 0008             		move.w	8(a0),8(a1)
00015888 4EB9 0000 3772             		jsr	(RandomNumber).l
0001588E 0240 000F                  		andi.w	#$F,d0
00015892 5140                       		subq.w	#8,d0
00015894 D169 0008                  		add.w	d0,8(a1)
00015898 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001589E 7000                       		moveq	#0,d0
000158A0 1028 0034                  		move.b	$34(a0),d0
000158A4 2468 003C                  		movea.l	$3C(a0),a2
000158A8 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000158AE 0828 0007 0036             		btst	#7,$36(a0)
000158B4 6700                       		beq.s	loc_128F8
000158B6 4EB9 0000 3772             		jsr	(RandomNumber).l
000158BC 0240 0003                  		andi.w	#3,d0
000158C0 6600                       		bne.s	loc_128E4
000158C2 08E8 0006 0036             		bset	#6,$36(a0)
000158C8 6600                       		bne.s	loc_128F8
000158CA 137C 0002 0028             		move.b	#2,$28(a1)
000158D0                            
000158D0                            loc_128E4:
000158D0 4A28 0034                  		tst.b	$34(a0)
000158D4 6600                       		bne.s	loc_128F8
000158D6 08E8 0006 0036             		bset	#6,$36(a0)
000158DC 6600                       		bne.s	loc_128F8
000158DE 137C 0002 0028             		move.b	#2,$28(a1)
000158E4                            
000158E4                            loc_128F8:
000158E4 5328 0034                  		subq.b	#1,$34(a0)
000158E8 6A00                       		bpl.s	loc_12914
000158EA 4EB9 0000 3772             		jsr	(RandomNumber).l
000158F0 0240 007F                  		andi.w	#$7F,d0
000158F4 0640 0080                  		addi.w	#$80,d0
000158F8 D168 0038                  		add.w	d0,$38(a0)
000158FC 4268 0036                  		clr.w	$36(a0)
00015900                            
00015900                            loc_12914:
00015900 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00015906 4EB9 0000 D0AC             		jsr	AnimateSprite
0001590C                            
0001590C                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001590C 3028 0008                  		move.w	8(a0),d0
00015910 0240 FF80                  		andi.w	#$FF80,d0
00015914 3238 F700                  		move.w	($FFFFF700).w,d1
00015918 0441 0080                  		subi.w	#$80,d1
0001591C 0241 FF80                  		andi.w	#$FF80,d1
00015920 9041                       		sub.w	d1,d0
00015922 0C40 0280                  		cmpi.w	#$280,d0
00015926 6200 AC16                  		bhi.w	DeleteObject
0001592A 3038 F646                  		move.w	($FFFFF646).w,d0
0001592E B068 000C                  		cmp.w	$C(a0),d0
00015932 6500 ABCE                  		bcs.w	DisplaySprite
00015936 4E75                       		rts	
00015938                            ; ===========================================================================
00015938                            ; bubble production sequence
00015938                            
00015938                            ; 0 = small bubble, 1 =	large bubble
00015938                            
00015938 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001594A                            
0001594A                            ; ===========================================================================
0001594A                            
0001594A                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001594A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001594E 6B00                       		bmi.s	loc_12998
00015950 43F8 D000                  		lea	($FFFFD000).w,a1
00015954 3029 0008                  		move.w	8(a1),d0
00015958 3228 0008                  		move.w	8(a0),d1
0001595C 0441 0010                  		subi.w	#$10,d1
00015960 B240                       		cmp.w	d0,d1
00015962 6400                       		bcc.s	loc_12998
00015964 0641 0020                  		addi.w	#$20,d1
00015968 B240                       		cmp.w	d0,d1
0001596A 6500                       		bcs.s	loc_12998
0001596C 3029 000C                  		move.w	$C(a1),d0
00015970 3228 000C                  		move.w	$C(a0),d1
00015974 B240                       		cmp.w	d0,d1
00015976 6400                       		bcc.s	loc_12998
00015978 0641 0010                  		addi.w	#$10,d1
0001597C B240                       		cmp.w	d0,d1
0001597E 6500                       		bcs.s	loc_12998
00015980 7001                       		moveq	#1,d0
00015982 4E75                       		rts	
00015984                            ; ===========================================================================
00015984                            
00015984                            loc_12998:
00015984 7000                       		moveq	#0,d0
00015986 4E75                       		rts	
00015988                            ; ===========================================================================
00015988                            Ani_obj64:
00015988                            	include "_anim\obj64.asm"
00015988                            ; ---------------------------------------------------------------------------
00015988                            ; Animation script - bubbles (LZ)
00015988                            ; ---------------------------------------------------------------------------
00015988 0000                       		dc.w byte_129AA-Ani_obj64
0001598A 0000                       		dc.w byte_129B0-Ani_obj64
0001598C 0000                       		dc.w byte_129B6-Ani_obj64
0001598E 0000                       		dc.w byte_129BE-Ani_obj64
00015990 0000                       		dc.w byte_129BE-Ani_obj64
00015992 0000                       		dc.w byte_129C0-Ani_obj64
00015994 0000                       		dc.w byte_129C6-Ani_obj64
00015996 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001599C 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000159A2 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000159AA 04FC                       byte_129BE:	dc.b 4,	$FC
000159AC 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000159B2 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000159B8 00                         		even
000159B8 00                         		even
000159B8                            
000159B8                            ; ---------------------------------------------------------------------------
000159B8                            ; Sprite mappings - bubbles (LZ)
000159B8                            ; ---------------------------------------------------------------------------
000159B8                            Map_obj64:
000159B8                            	include "_maps\obj64.asm"
000159B8                            ; ---------------------------------------------------------------------------
000159B8                            ; Sprite mappings - bubbles (LZ)
000159B8                            ; ---------------------------------------------------------------------------
000159B8 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000159BC 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000159C0 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000159C4 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000159C8 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000159CC 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000159D0 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000159D4 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000159D8 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000159DC 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000159E0 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000159E4 0000                       		dc.w byte_12A9C-Map_obj64
000159E6 01                         byte_129FA:	dc.b 1
000159E7 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000159EC 01                         byte_12A00:	dc.b 1
000159ED FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000159F2 01                         byte_12A06:	dc.b 1
000159F3 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000159F8 01                         byte_12A0C:	dc.b 1
000159F9 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000159FE 01                         byte_12A12:	dc.b 1
000159FF F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00015A04 01                         byte_12A18:	dc.b 1
00015A05 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00015A0A 01                         byte_12A1E:	dc.b 1
00015A0B F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00015A10 04                         byte_12A24:	dc.b 4
00015A11 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00015A16 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00015A1B 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00015A20 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00015A25 04                         byte_12A39:	dc.b 4
00015A26 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00015A2B F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00015A30 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00015A35 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00015A3A 01                         byte_12A4E:	dc.b 1
00015A3B F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00015A40 01                         byte_12A54:	dc.b 1
00015A41 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00015A46 01                         byte_12A5A:	dc.b 1
00015A47 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00015A4C 01                         byte_12A60:	dc.b 1
00015A4D F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00015A52 01                         byte_12A66:	dc.b 1
00015A53 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00015A58 01                         byte_12A6C:	dc.b 1
00015A59 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00015A5E 01                         byte_12A72:	dc.b 1
00015A5F F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00015A64 01                         byte_12A78:	dc.b 1
00015A65 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00015A6A 01                         byte_12A7E:	dc.b 1
00015A6B F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00015A70 01                         byte_12A84:	dc.b 1
00015A71 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00015A76 01                         byte_12A8A:	dc.b 1
00015A77 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00015A7C 01                         byte_12A90:	dc.b 1
00015A7D F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00015A82 01                         byte_12A96:	dc.b 1
00015A83 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00015A88 00                         byte_12A9C:	dc.b 0
00015A8A 00                         		even
00015A8A 00                         		even
00015A8A                            
00015A8A                            ; ===========================================================================
00015A8A                            ; ---------------------------------------------------------------------------
00015A8A                            ; Object 65 - waterfalls (LZ)
00015A8A                            ; ---------------------------------------------------------------------------
00015A8A                            
00015A8A                            Obj65:					; XREF: Obj_Index
00015A8A 7000                       		moveq	#0,d0
00015A8C 1028 0024                  		move.b	$24(a0),d0
00015A90 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00015A94 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00015A98                            ; ===========================================================================
00015A98 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00015A9A 0000                       		dc.w Obj65_Animate-Obj65_Index
00015A9C 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00015A9E 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00015AA0 0000                       		dc.w loc_12B36-Obj65_Index
00015AA2                            ; ===========================================================================
00015AA2                            
00015AA2                            Obj65_Main:				; XREF: Obj65_Index
00015AA2 5828 0024                  		addq.b	#4,$24(a0)
00015AA6 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00015AAE 317C 4259 0002             		move.w	#$4259,2(a0)
00015AB4 0028 0004 0001             		ori.b	#4,1(a0)
00015ABA 117C 0018 0019             		move.b	#$18,$19(a0)
00015AC0 117C 0001 0018             		move.b	#1,$18(a0)
00015AC6 1028 0028                  		move.b	$28(a0),d0	; get object type
00015ACA 6A00                       		bpl.s	loc_12AE6
00015ACC 08E8 0007 0002             		bset	#7,2(a0)
00015AD2                            
00015AD2                            loc_12AE6:
00015AD2 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00015AD6 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00015ADA 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00015ADE 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00015AE0 4228 0018                  		clr.b	$18(a0)
00015AE4 5528 0024                  		subq.b	#2,$24(a0)
00015AE8 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00015AEE 6700                       		beq.s	loc_12B0A	; if not, branch
00015AF0 117C 0006 0024             		move.b	#6,$24(a0)
00015AF6                            
00015AF6                            loc_12B0A:
00015AF6 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00015AFC 6700                       		beq.s	Obj65_Animate	; if not, branch
00015AFE 117C 0008 0024             		move.b	#8,$24(a0)
00015B04                            
00015B04                            Obj65_Animate:				; XREF: Obj65_Index
00015B04 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00015B0A 4EB9 0000 D0AC             		jsr	AnimateSprite
00015B10                            
00015B10                            Obj65_ChkDel:				; XREF: Obj65_Index
00015B10 6000 CCD4                  		bra.w	MarkObjGone
00015B14                            ; ===========================================================================
00015B14                            
00015B14                            Obj65_FixHeight:			; XREF: Obj65_Index
00015B14 3038 F646                  		move.w	($FFFFF646).w,d0
00015B18 0440 0010                  		subi.w	#$10,d0
00015B1C 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00015B20 60E2                       		bra.s	Obj65_Animate
00015B22                            ; ===========================================================================
00015B22                            
00015B22                            loc_12B36:				; XREF: Obj65_Index
00015B22 08A8 0007 0002             		bclr	#7,2(a0)
00015B28 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00015B2E 6600                       		bne.s	Obj65_Animate2
00015B30 08E8 0007 0002             		bset	#7,2(a0)
00015B36                            
00015B36                            Obj65_Animate2:
00015B36 60CC                       		bra.s	Obj65_Animate
00015B38                            ; ===========================================================================
00015B38                            Ani_obj65:
00015B38                            	include "_anim\obj65.asm"
00015B38                            ; ---------------------------------------------------------------------------
00015B38                            ; Animation script - waterfall (LZ)
00015B38                            ; ---------------------------------------------------------------------------
00015B38 0000                       		dc.w byte_12B4E-Ani_obj65
00015B3A 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00015B40 00                         		even
00015B40 00                         		even
00015B40                            
00015B40                            ; ---------------------------------------------------------------------------
00015B40                            ; Sprite mappings - waterfalls (LZ)
00015B40                            ; ---------------------------------------------------------------------------
00015B40                            Map_obj65:
00015B40                            	include "_maps\obj65.asm"
00015B40                            ; ---------------------------------------------------------------------------
00015B40                            ; Sprite mappings - waterfalls (LZ)
00015B40                            ; ---------------------------------------------------------------------------
00015B40 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00015B44 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00015B48 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00015B4C 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00015B50 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00015B54 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00015B58 01                         byte_12B6C:	dc.b 1
00015B59 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00015B5E 02                         byte_12B72:	dc.b 2
00015B5F F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00015B64 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00015B69 02                         byte_12B7D:	dc.b 2
00015B6A F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00015B6F 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00015B74 01                         byte_12B88:	dc.b 1
00015B75 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00015B7A 02                         byte_12B8E:	dc.b 2
00015B7B F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00015B80 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00015B85 01                         byte_12B99:	dc.b 1
00015B86 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00015B8B 01                         byte_12B9F:	dc.b 1
00015B8C F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00015B91 01                         byte_12BA5:	dc.b 1
00015B92 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00015B97 02                         byte_12BAB:	dc.b 2
00015B98 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00015B9D 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00015BA2 02                         byte_12BB6:	dc.b 2
00015BA3 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00015BA8 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00015BAD 02                         byte_12BC1:	dc.b 2
00015BAE F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00015BB3 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00015BB8 02                         byte_12BCC:	dc.b 2
00015BB9 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00015BBE F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00015BC4 00                         		even
00015BC4 00                         		even
00015BC4                            
00015BC4                            Spindash_dust:
00015BC4                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00015BC4 7000                       		moveq	#0,d0
00015BC6 1028 0024                  		move.b	$24(a0),d0
00015BCA 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00015BCE 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00015BD2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015BD2 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00015BD4 0000                       		dc loc_1DD90-off_1DD2E; 1
00015BD6 0000                       		dc loc_1DE46-off_1DD2E; 2
00015BD8 0000                       		dc loc_1DE4A-off_1DD2E; 3
00015BDA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015BDA                             
00015BDA                            loc_1DD36:				; DATA XREF: h+6DBA?o
00015BDA 5428 0024                  		addq.b	#2,$24(a0)
00015BDE 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00015BE6 0028 0004 0001             		or.b	#4,1(a0)
00015BEC 117C 0001 0018             		move.b	#1,$18(a0)
00015BF2 117C 0010 0019             		move.b	#$10,$19(a0)
00015BF8 317C 07A0 0002             		move	#$7A0,2(a0)
00015BFE 317C D000 003E             		move	#-$3000,$3E(a0)
00015C04 317C F400 003C             		move	#$F400,$3C(a0)
00015C0A B0FC D1C0                  		cmp	#-$2E40,a0
00015C0E 6700                       		beq.s	loc_1DD8C
00015C10 117C 0001 0034             		move.b	#1,$34(a0)
00015C16                            ;		cmp	#2,($FFFFFF70).w
00015C16                            ;		beq.s	loc_1DD8C
00015C16                            ;		move	#$48C,2(a0)
00015C16                            ;		move	#-$4FC0,$3E(a0)
00015C16                            ;		move	#-$6E80,$3C(a0)
00015C16                             
00015C16                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00015C16                            ;		bsr.w	sub_16D6E
00015C16                             
00015C16                            loc_1DD90:				; DATA XREF: h+6DBA?o
00015C16 3468 003E                  		movea.w	$3E(a0),a2
00015C1A 7000                       		moveq	#0,d0
00015C1C 1028 001C                  		move.b	$1C(a0),d0
00015C20 D040                       		add	d0,d0
00015C22 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00015C26 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00015C2A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015C2A 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00015C2C 0000                       		dc loc_1DDAC-off_1DDA4; 1
00015C2E 0000                       		dc loc_1DDCC-off_1DDA4; 2
00015C30 0000                       		dc loc_1DE20-off_1DDA4; 3
00015C32                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015C32                             
00015C32                            loc_1DDAC:				; DATA XREF: h+6E30?o
00015C32 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00015C38 4A28 001D                  		tst.b	$1D(a0)
00015C3C 6600                       		bne.s	loc_1DE28
00015C3E 316A 0008 0008             		move	8(a2),8(a0)
00015C44 117C 0000 0022             		move.b	#0,$22(a0)
00015C4A 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015C50 6000                       		bra.s	loc_1DE28
00015C52                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015C52                             
00015C52                            loc_1DDCC:				; DATA XREF: h+6E30?o
00015C52                            ;		cmp.b	#$C,$28(a2)
00015C52                            ;		bcs.s	loc_1DE3E
00015C52 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00015C58 6400                       		bcc.s	loc_1DE3E
00015C5A 4A2A 0039                  		tst.b	$39(a2)
00015C5E 6700                       		beq.s	loc_1DE3E
00015C60 316A 0008 0008             		move	8(a2),8(a0)
00015C66 316A 000C 000C             		move	$C(a2),$C(a0)
00015C6C 116A 0022 0022             		move.b	$22(a2),$22(a0)
00015C72 0228 0001 0022             		and.b	#1,$22(a0)
00015C78 4A28 0034                  		tst.b	$34(a0)
00015C7C 6700                       		beq.s	loc_1DE06
00015C7E 5968 000C                  		sub	#4,$C(a0)
00015C82                             
00015C82                            loc_1DE06:				; CODE XREF: h+6E8A?j
00015C82 4A28 001D                  		tst.b	$1D(a0)
00015C86 6600                       		bne.s	loc_1DE28
00015C88 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015C8E 4A6A 0002                  		tst	2(a2)
00015C92 6A00                       		bpl.s	loc_1DE28
00015C94 0068 8000 0002             		or	#-$8000,2(a0)
00015C9A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015C9A                             
00015C9A                            loc_1DE20:				; DATA XREF: h+6E30?o
00015C9A                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00015C9A 43F9 0000 0000             		lea	(off_1DF38).l,a1
00015CA0 4EB9 0000 D0AC             		jsr	AnimateSprite
00015CA6 6100 0000                  		bsr.w	loc_1DEE4
00015CAA 4EFA A856                  		jmp	DisplaySprite
00015CAE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015CAE                             
00015CAE                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00015CAE 117C 0000 001C             		move.b	#0,$1C(a0)
00015CB4 4E75                       		rts	
00015CB6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015CB6                             
00015CB6                            loc_1DE46:				; DATA XREF: h+6DBA?o
00015CB6 6000 A886                  		bra.w	DeleteObject
00015CBA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015CBA                             
00015CBA                             
00015CBA                             
00015CBA                            loc_1DE4A:
00015CBA 3468 003E                  	movea.w	$3E(a0),a2
00015CBE 7210                       	moveq	#$10,d1
00015CC0 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00015CC6 6700                       	beq.s	loc_1DE64
00015CC8 7206                       	moveq	#$6,d1
00015CCA 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00015CD0 6700                       	beq.s	loc_1DE64
00015CD2 117C 0002 0024             	move.b	#2,$24(a0)
00015CD8 117C 0000 0032             	move.b	#0,$32(a0)
00015CDE 4E75                       	rts
00015CE0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015CE0                             
00015CE0                            loc_1DE64:				; CODE XREF: h+6EE0?j
00015CE0 5328 0032                  		subq.b	#1,$32(a0)
00015CE4 6A00                       		bpl.s	loc_1DEE0
00015CE6 117C 0003 0032             		move.b	#3,$32(a0)
00015CEC 4EBA AC9A                  		jsr	SingleObjLoad
00015CF0 6600                       		bne.s	loc_1DEE0
00015CF2 1290                       		move.b	0(a0),0(a1)
00015CF4 336A 0008 0008             		move	8(a2),8(a1)
00015CFA 336A 000C 000C             		move	$C(a2),$C(a1)
00015D00 4A28 0034                  		tst.b	$34(a0)
00015D04 6700                       		beq.s	loc_1DE9A
00015D06 5941                       		sub	#4,d1
00015D08                             
00015D08                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00015D08 D369 000C                  		add	d1,$C(a1)
00015D0C 137C 0000 0022             		move.b	#0,$22(a1)
00015D12 137C 0003 001C             		move.b	#3,$1C(a1)
00015D18 5429 0024                  		addq.b	#2,$24(a1)
00015D1C 2368 0004 0004             		move.l	4(a0),4(a1)
00015D22 1368 0001 0001             		move.b	1(a0),1(a1)
00015D28 137C 0001 0018             		move.b	#1,$18(a1)
00015D2E 137C 0004 0019             		move.b	#4,$19(a1)
00015D34 3368 0002 0002             		move	2(a0),2(a1)
00015D3A 3368 003E 003E             		move	$3E(a0),$3E(a1)
00015D40 0269 7FFF 0002             		and	#$7FFF,2(a1)
00015D46 4A6A 0002                  		tst	2(a2)
00015D4A 6A00                       		bpl.s	loc_1DEE0
00015D4C 0069 8000 0002             		or	#-$8000,2(a1)
00015D52                             
00015D52                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00015D52 6100                       		bsr.s	loc_1DEE4
00015D54 4E75                       		rts	
00015D56                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015D56                             
00015D56                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00015D56 7000                       		moveq	#0,d0
00015D58 1028 001A                  		move.b	$1A(a0),d0
00015D5C B028 0030                  		cmp.b	$30(a0),d0
00015D60 6700 0000                  		beq.w	locret_1DF36
00015D64 1140 0030                  		move.b	d0,$30(a0)
00015D68 45F9 0000 0000             		lea	(off_1E074).l,a2
00015D6E D040                       		add	d0,d0
00015D70 D4F2 0000                  		add	(a2,d0.w),a2
00015D74 3A1A                       		move	(a2)+,d5
00015D76 5345                       		subq	#1,d5
00015D78 6B00 0000                  		bmi.w	locret_1DF36
00015D7C 3828 003C                  		move $3C(a0),d4
00015D80                             
00015D80                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00015D80 7200                       		moveq	#0,d1
00015D82 321A                       		move	(a2)+,d1
00015D84 3601                       		move	d1,d3
00015D86 E04B                       		lsr.w	#8,d3
00015D88 0243 00F0                  		and	#$F0,d3	; 'ð'
00015D8C 0643 0010                  		add	#$10,d3
00015D90 0241 0FFF                  		and	#$FFF,d1
00015D94 EB89                       		lsl.l	#5,d1
00015D96 0681 0000 0000             		add.l	#Art_Dust,d1
00015D9C 3404                       		move	d4,d2
00015D9E D843                       		add	d3,d4
00015DA0 D843                       		add	d3,d4
00015DA2 4EB9 0000 1B98             		jsr	(QueueDMATransfer).l
00015DA8 51CD FFD6                  		dbf	d5,loc_1DF0A
00015DAC 4E75                           rts
00015DAE                             
00015DAE                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00015DAE 4E75                       		rts	
00015DB0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015DB0 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00015DB2 0000                       		dc byte_1DF43-off_1DF38; 1
00015DB4 0000                       		dc byte_1DF4F-off_1DF38; 2
00015DB6 0000                       		dc byte_1DF58-off_1DF38; 3
00015DB8 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00015DBB 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00015DC7 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00015DD0 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00015DD6                            ; -------------------------------------------------------------------------------
00015DD6                            ; Unknown Sprite Mappings
00015DD6                            ; -------------------------------------------------------------------------------
00015DD6                            MapUnc_1DF5E:
00015DD6 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00015DD8 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00015DDA 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00015DDC 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00015DDE 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00015DE0 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00015DE2 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00015DE4 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00015DE6 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00015DE8 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00015DEA 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00015DEC 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00015DEE 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00015DF0 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00015DF2 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00015DF4 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00015DF6 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00015DF8 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00015DFA 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00015DFC 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00015DFE 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00015E00 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00015E02 00                         word_1DF8A:	dc.b 0
00015E03 01                         word_1DF8C:	dc.b 1
00015E04 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015E09 01                         word_1DF96:	dc.b 1
00015E0A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015E0F 01                         word_1DFA0:	dc.b 1
00015E10 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015E15 01                         word_1DFAA:	dc.b 1
00015E16 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015E1B 01                         word_1DFB4:	dc.b 1
00015E1C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015E21 01                         word_1DFBE:	dc.b 1
00015E22 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015E27 01                         word_1DFC8:	dc.b 1
00015E28 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015E2D 01                         word_1DFD2:	dc.b 1
00015E2E F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015E33 01                         word_1DFDC:	dc.b 1
00015E34 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015E39 01                         word_1DFE6:	dc.b 1
00015E3A 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015E3F 01                         word_1DFF0:	dc.b 1
00015E40 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015E45 01                         word_1DFFA:	dc.b 1
00015E46 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015E4B 02                         word_1E004:	dc.b 2
00015E4C F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00015E51 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00015E56 02                         word_1E016:	dc.b 2
00015E57 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00015E5C 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00015E61 02                         word_1E028:	dc.b 2
00015E62 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015E67 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015E6C 02                         word_1E03A:	dc.b 2
00015E6D F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015E72 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015E77 01                         word_1E04C:	dc.b 1
00015E78 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015E7D 01                         word_1E056:	dc.b 1
00015E7E F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00015E83 01                         word_1E060:	dc.b 1
00015E84 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00015E89 01                         word_1E06A:	dc.b 1
00015E8A F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00015E8F 00                         	dc.b 0
00015E90 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00015E92 0000                       	dc word_1E0A2-off_1E074; 1
00015E94 0000                       	dc word_1E0A6-off_1E074; 2
00015E96 0000                       	dc word_1E0AA-off_1E074; 3
00015E98 0000                       	dc word_1E0AE-off_1E074; 4
00015E9A 0000                       	dc word_1E0B2-off_1E074; 5
00015E9C 0000                       	dc word_1E0B6-off_1E074; 6
00015E9E 0000                       	dc word_1E0BA-off_1E074; 7
00015EA0 0000                       	dc word_1E0BE-off_1E074; 8
00015EA2 0000                       	dc word_1E0C2-off_1E074; 9
00015EA4 0000                       	dc word_1E0C6-off_1E074; 10
00015EA6 0000                       	dc word_1E0CA-off_1E074; 11
00015EA8 0000                       	dc word_1E0CE-off_1E074; 12
00015EAA 0000                       	dc word_1E0D2-off_1E074; 13
00015EAC 0000                       	dc word_1E0D8-off_1E074; 14
00015EAE 0000                       	dc word_1E0DE-off_1E074; 15
00015EB0 0000                       	dc word_1E0E4-off_1E074; 16
00015EB2 0000                       	dc word_1E0EA-off_1E074; 17
00015EB4 0000                       	dc word_1E0EA-off_1E074; 18
00015EB6 0000                       	dc word_1E0EA-off_1E074; 19
00015EB8 0000                       	dc word_1E0EA-off_1E074; 20
00015EBA 0000                       	dc word_1E0EC-off_1E074; 21
00015EBC 0000                       word_1E0A0:	dc 0
00015EBE 0001                       word_1E0A2:	dc 1
00015EC0 7000                       	dc $7000
00015EC2 0001                       word_1E0A6:	dc 1
00015EC4 F008                       	dc $F008
00015EC6 0001                       word_1E0AA:	dc 1
00015EC8 F018                       	dc $F018
00015ECA 0001                       word_1E0AE:	dc 1
00015ECC F028                       	dc $F028
00015ECE 0001                       word_1E0B2:	dc 1
00015ED0 F038                       	dc $F038
00015ED2 0001                       word_1E0B6:	dc 1
00015ED4 F048                       	dc $F048
00015ED6 0001                       word_1E0BA:	dc 1
00015ED8 7058                       	dc $7058
00015EDA 0001                       word_1E0BE:	dc 1
00015EDC 7060                       	dc $7060
00015EDE 0001                       word_1E0C2:	dc 1
00015EE0 7068                       	dc $7068
00015EE2 0001                       word_1E0C6:	dc 1
00015EE4 7070                       	dc $7070
00015EE6 0001                       word_1E0CA:	dc 1
00015EE8 7078                       	dc $7078
00015EEA 0001                       word_1E0CE:	dc 1
00015EEC 7080                       	dc $7080
00015EEE 0002                       word_1E0D2:	dc 2
00015EF0 1088                       	dc $1088
00015EF2 708A                       	dc $708A
00015EF4 0002                       word_1E0D8:	dc 2
00015EF6 3092                       	dc $3092
00015EF8 7096                       	dc $7096
00015EFA 0002                       word_1E0DE:	dc 2
00015EFC 509E                       	dc $509E
00015EFE 70A4                       	dc $70A4
00015F00 0002                       word_1E0E4:	dc 2
00015F02 50AC                       	dc $50AC
00015F04 70B2                       	dc $70B2
00015F06 0000                       word_1E0EA:	dc 0
00015F08 0001                       word_1E0EC:	dc 1
00015F0A F0BA                       	dc $F0BA
00015F0C                            	even
00015F0C                            
00015F0C                            ; ===========================================================================
00015F0C                            ; ---------------------------------------------------------------------------
00015F0C                            ; Object 01 - Sonic
00015F0C                            ; ---------------------------------------------------------------------------
00015F0C                            
00015F0C                            Obj01:					; XREF: Obj_Index
00015F0C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00015F10 6700                       		beq.s	Obj01_Normal	; if not, branch
00015F12 4EF9 0000 0000             		jmp	DebugMode
00015F18                            ; ===========================================================================
00015F18                            
00015F18                            Obj01_Normal:
00015F18 7000                       		moveq	#0,d0
00015F1A 1028 0024                  		move.b	$24(a0),d0
00015F1E 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00015F22 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00015F26                            ; ===========================================================================
00015F26 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00015F28 0000                       		dc.w Obj01_Control-Obj01_Index
00015F2A 0000                       		dc.w Obj01_Hurt-Obj01_Index
00015F2C 0000                       		dc.w Obj01_Death-Obj01_Index
00015F2E 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00015F30                            ; ===========================================================================
00015F30                            
00015F30                            Obj01_Main:				; XREF: Obj01_Index
00015F30 5428 0024                  		addq.b	#2,$24(a0)
00015F34 117C 0013 0016             		move.b	#$13,$16(a0)
00015F3A 117C 0009 0017             		move.b	#9,$17(a0)
00015F40 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00015F48 0C38 0001 FF9C             		cmpi.b	#1,($FFFFFF9C).w
00015F4E 6700                       		beq.s	Obj01_Main_Windy
00015F50 317C 0780 0002             		move.w	#$780,2(a0)	;780
00015F56 6000                       		bra.s	Cont3
00015F58                            
00015F58                            Obj01_Main_Windy:
00015F58 317C 2780 0002             		move.w	#$2780,2(a0)
00015F5E                            
00015F5E                            Cont3:
00015F5E 117C 0002 0018             		move.b	#2,$18(a0)
00015F64 117C 0018 0019             		move.b	#$18,$19(a0)
00015F6A 117C 0004 0001             		move.b	#4,1(a0)
00015F70 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00015F76 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00015F7C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00015F82 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015F88                            
00015F88                            Obj01_Control:				; XREF: Obj01_Index
00015F88 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00015F8C 6700                       		beq.s	loc_12C58	; if not, branch
00015F8E 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00015F94 6700                       		beq.s	loc_12C58	; if not, branch
00015F96 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00015F9C 4238 F7CC                  		clr.b	($FFFFF7CC).w
00015FA0                            
00015FA0                            ;El codigo de MarkeyJester para ver el final de la VRAM, revelado xD
00015FA0 45F9 00C0 0000             		lea	($C00000),A2
00015FA6 43EA 0004                  		lea	$0004(A2), A1
00015FAA 32BC 832A                  		move.w	#$832A, (A1)
00015FAE 32BC 929A                  		move.w	#$929A, (A1)
00015FB2 323C 07D0                  		move.w	#$7D0,d1	;$7D0
00015FB6 7401                       		moveq	#$01, D2
00015FB8 22BC 6D00 0002             		move.l	#$6D000002, (A1)
00015FBE 6100 0000                  		bsr	Label1
00015FC2 22BC 6D80 0002             		move.l  #$6D800002, (A1)
00015FC8                            Label1:
00015FC8 7627                       		moveq	#$27,D3
00015FCA                            Label2:
00015FCA 3481                       		move.w	D1,(A2)
00015FCC D242                       		add.w	D2,D1
00015FCE 51CB FFFA                  		dbf	D3,Label2
00015FD2                            
00015FD2                            ; Codigo lanzado originalmente
00015FD2                            ;		dc.b	$45,$F9,$00,$C0,$00,$00,$43,$EA,$00,$04,$32,$BC,$83,$2A,$32,$BC
00015FD2                            ;		dc.b	$92,$9A,$32,$3C,$07,$D0,$74,$01,$22,$BC,$6D,$00,$00,$02,$61,$00
00015FD2                            ;		dc.b	$00,$08,$22,$BC,$6D,$80,$00,$02,$76,$27,$34,$81,$D2,$42,$51,$CB
00015FD2                            ;		dc.b	$FF,$FA
00015FD2                            MJ_End:
00015FD2 4E75                       		rts	
00015FD4                            ; ===========================================================================
00015FD4                            
00015FD4                            loc_12C58:
00015FD4 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00015FD8 6600                       		bne.s	loc_12C64	; if yes, branch
00015FDA 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00015FE0                            
00015FE0                            loc_12C64:
00015FE0 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00015FE6 6600                       		bne.s	loc_12C7E	; if yes, branch
00015FE8 7000                       		moveq	#0,d0
00015FEA 1028 0022                  		move.b	$22(a0),d0
00015FEE 0240 0006                  		andi.w	#6,d0
00015FF2 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00015FF6 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00015FFA                            
00015FFA                            loc_12C7E:
00015FFA 6100                       		bsr.s	Sonic_Display
00015FFC 6100 0000                  		bsr.w	Sonic_RecordPos
00016000 6100 0000                  		bsr.w	Sonic_Water
00016004 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
0001600A 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00016010 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00016014 6700                       		beq.s	loc_12CA6
00016016 4A28 001C                  		tst.b	$1C(a0)
0001601A 6600                       		bne.s	loc_12CA6
0001601C 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00016022                            
00016022                            loc_12CA6:
00016022 6100 0000                  		bsr.w	Sonic_Animate
00016026 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001602A 6B00                       		bmi.s	loc_12CB6
0001602C 4EB9 0000 0000             		jsr	TouchResponse
00016032                            
00016032                            loc_12CB6:
00016032 6100 0000                  		bsr.w	Sonic_Loops
00016036 6100 0000                  		bsr.w	LoadSonicDynPLC
0001603A 4E75                       		rts	
0001603C                            ; ===========================================================================
0001603C 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001603E 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00016040 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00016042 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00016044                            
00016044                            Sonic_Display:				; XREF: loc_12C7E
00016044 3028 0030                  		move.w	$30(a0),d0
00016048 6700                       		beq.s	Obj01_Display
0001604A 5368 0030                  		subq.w	#1,$30(a0)
0001604E E648                       		lsr.w	#3,d0
00016050 6400                       		bcc.s	Obj01_ChkInvin
00016052                            
00016052                            Obj01_Display:
00016052 4EBA A4AE                  		jsr	DisplaySprite
00016056                            
00016056                            Obj01_ChkInvin:
00016056 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001605A 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
0001605C 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00016060 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00016062 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00016066 6600                       		bne.s	Obj01_ChkShoes
00016068 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001606C 6600                       		bne.s	Obj01_RmvInvin
0001606E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00016074 6500                       		bcs.s	Obj01_RmvInvin
00016076 7000                       		moveq	#0,d0
00016078 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001607C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
00016082 6600                       		bne.s	Obj01_PlayMusic
00016084 7005                       		moveq	#5,d0		; play SBZ music
00016086                            
00016086                            Obj01_PlayMusic:
00016086 43F9 0000 43AC             		lea	(MusicList).l,a1
0001608C 1031 0000                  		move.b	(a1,d0.w),d0
00016090 4EB9 0000 19E4             		jsr	(PlaySound).l	; play normal music
00016096                            
00016096                            Obj01_RmvInvin:
00016096 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001609C                            
0001609C                            Obj01_ChkShoes:
0001609C 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000160A0 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000160A2 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000160A6 6700                       		beq.s	Obj01_ExitChk
000160A8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000160AC 6600                       		bne.s	Obj01_ExitChk
000160AE 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000160B4 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000160BA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000160C0 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000160C6 303C 00E3                  		move.w	#$E3,d0
000160CA 4EF9 0000 19E4             		jmp	(PlaySound).l	; run music at normal speed
000160D0                            ; ===========================================================================
000160D0                            
000160D0                            Obj01_ExitChk:
000160D0 4E75                       		rts	
000160D2                            
000160D2                            ; ---------------------------------------------------------------------------
000160D2                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000160D2                            ; ---------------------------------------------------------------------------
000160D2                            
000160D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160D2                            
000160D2                            
000160D2                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000160D2 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000160D6 43F8 CB00                  		lea	($FFFFCB00).w,a1
000160DA 43F1 0000                  		lea	(a1,d0.w),a1
000160DE 32E8 0008                  		move.w	8(a0),(a1)+
000160E2 32E8 000C                  		move.w	$C(a0),(a1)+
000160E6 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000160EA 4E75                       		rts	
000160EC                            ; End of function Sonic_RecordPos
000160EC                            
000160EC                            ; ---------------------------------------------------------------------------
000160EC                            ; Subroutine for Sonic when he's underwater
000160EC                            ; ---------------------------------------------------------------------------
000160EC                            
000160EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160EC                            
000160EC                            
000160EC                            Sonic_Water:				; XREF: loc_12C7E
000160EC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000160F2 6700                       		beq.s	Obj01_InWater	; if yes, branch
000160F4                            
000160F4                            locret_12D80:
000160F4 4E75                       		rts	
000160F6                            ; ===========================================================================
000160F6                            
000160F6                            Obj01_InWater:
000160F6 3038 F646                  		move.w	($FFFFF646).w,d0
000160FA B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000160FE 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00016100 08E8 0006 0022             		bset	#6,$22(a0)
00016106 66EC                       		bne.s	locret_12D80
00016108 6100 0000                  		bsr.w	ResumeMusic
0001610C 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00016112 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00016118 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
0001611E 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00016124 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001612A E0E8 0010                  		asr	$10(a0)
0001612E E0E8 0012                  		asr	$12(a0)
00016132 E0E8 0012                  		asr	$12(a0)
00016136 67BC                       		beq.s	locret_12D80
00016138 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001613E 303C 00AA                  		move.w	#$AA,d0
00016142 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play splash sound
00016148                            ; ===========================================================================
00016148                            
00016148                            Obj01_OutWater:
00016148 08A8 0006 0022             		bclr	#6,$22(a0)
0001614E 67A4                       		beq.s	locret_12D80
00016150 6100 0000                  		bsr.w	ResumeMusic
00016154 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001615A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00016160 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00016166 E1E8 0012                  		asl	$12(a0)
0001616A 6700 FF88                  		beq.w	locret_12D80
0001616E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00016174 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001617A 6E00                       		bgt.s	loc_12E0E
0001617C 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00016182                            
00016182                            loc_12E0E:
00016182 303C 00AA                  		move.w	#$AA,d0
00016186 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play splash sound
0001618C                            ; End of function Sonic_Water
0001618C                            
0001618C                            ; ===========================================================================
0001618C                            ; ---------------------------------------------------------------------------
0001618C                            ; Modes	for controlling	Sonic
0001618C                            ; ---------------------------------------------------------------------------
0001618C                            
0001618C                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001618C 6100 0000                  		bsr.w	Sonic_Spindash
00016190 6100 0000                  		bsr.w	Sonic_Jump
00016194 6100 0000                  		bsr.w	Sonic_SlopeResist
00016198 6100 0000                  		bsr.w	Sonic_Move
0001619C 6100 0000                  		bsr.w	Sonic_Roll
000161A0 6100 0000                  		bsr.w	Sonic_LevelBound
000161A4 4EBA A336                  		jsr	SpeedToPos
000161A8 6100 0000                  		bsr.w	Sonic_AnglePos
000161AC 6100 0000                  		bsr.w	Sonic_SlopeRepel
000161B0 4E75                       		rts	
000161B2                            ; ===========================================================================
000161B2                            
000161B2                            Obj01_MdJump:				; XREF: Obj01_Modes
000161B2 4228 0039                  		clr.b	$39(a0)
000161B6 6100 0000                  		bsr.w	Sonic_JumpHeight
000161BA 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000161BE 6100 0000                  		bsr.w	Sonic_LevelBound
000161C2 4EBA A2C0                  		jsr	ObjectFall
000161C6 0828 0006 0022             		btst	#6,$22(a0)
000161CC 6700                       		beq.s	loc_12E5C
000161CE 0468 0028 0012             		subi.w	#$28,$12(a0)
000161D4                            
000161D4                            loc_12E5C:
000161D4 6100 0000                  		bsr.w	Sonic_JumpAngle
000161D8 6100 0000                  		bsr.w	Sonic_Floor
000161DC 4E75                       		rts	
000161DE                            ; ===========================================================================
000161DE                            
000161DE                            Obj01_MdRoll:				; XREF: Obj01_Modes
000161DE 6100 0000                  		bsr.w	Sonic_Jump
000161E2 6100 0000                  		bsr.w	Sonic_RollRepel
000161E6 6100 0000                  		bsr.w	Sonic_RollSpeed
000161EA 6100 0000                  		bsr.w	Sonic_LevelBound
000161EE 4EBA A2EC                  		jsr	SpeedToPos
000161F2 6100 0000                  		bsr.w	Sonic_AnglePos
000161F6 6100 0000                  		bsr.w	Sonic_SlopeRepel
000161FA 4E75                       		rts	
000161FC                            ; ===========================================================================
000161FC                            
000161FC                            Obj01_MdJump2:				; XREF: Obj01_Modes
000161FC 6100 0000                  		bsr.w	Windy_DoubleJump
00016200 4228 0039                  		clr.b	$39(a0)
00016204 6100 0000                  		bsr.w	Sonic_JumpHeight
00016208 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001620C 6100 0000                  		bsr.w	Sonic_LevelBound
00016210 4EBA A272                  		jsr	ObjectFall
00016214 0828 0006 0022             		btst	#6,$22(a0)
0001621A 6700                       		beq.s	loc_12EA6
0001621C 0468 0028 0012             		subi.w	#$28,$12(a0)
00016222                            
00016222                            loc_12EA6:
00016222 6100 0000                  		bsr.w	Sonic_JumpAngle
00016226 6100 0000                  		bsr.w	Sonic_Floor
0001622A 4E75                       		rts	
0001622C                            ; ---------------------------------------------------------------------------
0001622C                            ; Subroutine to	make Sonic walk/run
0001622C                            ; ---------------------------------------------------------------------------
0001622C                            
0001622C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001622C                            
0001622C                            
0001622C                            Sonic_Move:				; XREF: Obj01_MdNormal
0001622C 3C38 F760                  		move.w	($FFFFF760).w,d6
00016230 3A38 F762                  		move.w	($FFFFF762).w,d5
00016234 3838 F764                  		move.w	($FFFFF764).w,d4
00016238 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001623C 6600 0000                  		bne.w	loc_12FEE
00016240 4A68 003E                  		tst.w	$3E(a0)
00016244 6600 0000                  		bne.w	Obj01_ResetScr
00016248 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001624E 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00016250 6100 0000                  		bsr.w	Sonic_MoveLeft
00016254                            
00016254                            Obj01_NotLeft:
00016254 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001625A 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001625C 6100 0000                  		bsr.w	Sonic_MoveRight
00016260                            
00016260                            Obj01_NotRight:
00016260 1028 0026                  		move.b	$26(a0),d0
00016264 0600 0020                  		addi.b	#$20,d0
00016268 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001626C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00016270 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00016274 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00016278 08A8 0005 0022             		bclr	#5,$22(a0)
0001627E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00016284 0828 0003 0022             		btst	#3,$22(a0)
0001628A 6700                       		beq.s	Sonic_Balance
0001628C 7000                       		moveq	#0,d0
0001628E 1028 003D                  		move.b	$3D(a0),d0
00016292 ED48                       		lsl.w	#6,d0
00016294 43F8 D000                  		lea	($FFFFD000).w,a1
00016298 43F1 0000                  		lea	(a1,d0.w),a1
0001629C 4A29 0022                  		tst.b	$22(a1)
000162A0 6B00                       		bmi.s	Sonic_LookUp
000162A2 7200                       		moveq	#0,d1
000162A4 1229 0019                  		move.b	$19(a1),d1
000162A8 3401                       		move.w	d1,d2
000162AA D442                       		add.w	d2,d2
000162AC 5942                       		subq.w	#4,d2
000162AE D268 0008                  		add.w	8(a0),d1
000162B2 9269 0008                  		sub.w	8(a1),d1
000162B6 0C41 0004                  		cmpi.w	#4,d1
000162BA 6D00                       		blt.s	loc_12F6A
000162BC B242                       		cmp.w	d2,d1
000162BE 6C00                       		bge.s	loc_12F5A
000162C0 6000                       		bra.s	Sonic_LookUp
000162C2                            ; ===========================================================================
000162C2                            
000162C2                            Sonic_Balance:
000162C2 4EB9 0000 0000             		jsr	ObjHitFloor
000162C8 0C41 000C                  		cmpi.w	#$C,d1
000162CC 6D00                       		blt.s	Sonic_LookUp
000162CE 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000162D4 6600                       		bne.s	loc_12F62
000162D6                            
000162D6                            loc_12F5A:
000162D6 08A8 0000 0022             		bclr	#0,$22(a0)
000162DC 6000                       		bra.s	loc_12F70
000162DE                            ; ===========================================================================
000162DE                            
000162DE                            loc_12F62:
000162DE 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000162E4 6600                       		bne.s	Sonic_LookUp
000162E6                            
000162E6                            loc_12F6A:
000162E6 08E8 0000 0022             		bset	#0,$22(a0)
000162EC                            
000162EC                            loc_12F70:
000162EC 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000162F2 6000                       		bra.s	Obj01_ResetScr
000162F4                            ; ===========================================================================
000162F4                            
000162F4                            Sonic_LookUp:
000162F4 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000162FA 6700                       		beq.s	Sonic_Duck	; if not, branch
000162FC 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00016302 5238 C903                  		addq.b	#1,($FFFFC903).w
00016306 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
0001630C 6500                       		bcs.s	Obj01_ResetScr_Part2
0001630E 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00016314 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001631A 6700                       		beq.s	loc_12FC2
0001631C 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00016320 6000                       		bra.s	loc_12FC2
00016322                            ; ===========================================================================
00016322                             
00016322                            Sonic_Duck:
00016322 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00016328 6700                       		beq.s	Obj01_ResetScr	; if not, branch
0001632A 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00016330 5238 C903                  		addq.b	#1,($FFFFC903).w
00016334 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
0001633A 6500                       		bcs.s	Obj01_ResetScr_Part2
0001633C 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00016342 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00016348 6700                       		beq.s	loc_12FC2
0001634A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001634E 6000                       		bra.s	loc_12FC2
00016350                            ; ===========================================================================
00016350                             
00016350                            Obj01_ResetScr:
00016350 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00016356                            		
00016356                            Obj01_ResetScr_Part2:
00016356 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001635C 6700                       		beq.s	loc_12FC2	; if yes, branch
0001635E 6400                       		bcc.s	loc_12FBE
00016360 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00016364                             
00016364                            loc_12FBE:
00016364 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00016368                            
00016368                            loc_12FC2:
00016368 1038 F602                  		move.b	($FFFFF602).w,d0
0001636C 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00016370 6600                       		bne.s	loc_12FEE	; if yes, branch
00016372 3028 0014                  		move.w	$14(a0),d0
00016376 6700                       		beq.s	loc_12FEE
00016378 6B00                       		bmi.s	loc_12FE2
0001637A 9045                       		sub.w	d5,d0
0001637C 6400                       		bcc.s	loc_12FDC
0001637E 303C 0000                  		move.w	#0,d0
00016382                            
00016382                            loc_12FDC:
00016382 3140 0014                  		move.w	d0,$14(a0)
00016386 6000                       		bra.s	loc_12FEE
00016388                            ; ===========================================================================
00016388                            
00016388                            loc_12FE2:
00016388 D045                       		add.w	d5,d0
0001638A 6400                       		bcc.s	loc_12FEA
0001638C 303C 0000                  		move.w	#0,d0
00016390                            
00016390                            loc_12FEA:
00016390 3140 0014                  		move.w	d0,$14(a0)
00016394                            
00016394                            loc_12FEE:
00016394 1028 0026                  		move.b	$26(a0),d0
00016398 4EB9 0000 3798             		jsr	(CalcSine).l
0001639E C3E8 0014                  		muls.w	$14(a0),d1
000163A2 E081                       		asr.l	#8,d1
000163A4 3141 0010                  		move.w	d1,$10(a0)
000163A8 C1E8 0014                  		muls.w	$14(a0),d0
000163AC E080                       		asr.l	#8,d0
000163AE 3140 0012                  		move.w	d0,$12(a0)
000163B2                            
000163B2                            loc_1300C:
000163B2 1028 0026                  		move.b	$26(a0),d0
000163B6 0600 0040                  		addi.b	#$40,d0
000163BA 6B00                       		bmi.s	locret_1307C
000163BC 123C 0040                  		move.b	#$40,d1
000163C0 4A68 0014                  		tst.w	$14(a0)
000163C4 6700                       		beq.s	locret_1307C
000163C6 6B00                       		bmi.s	loc_13024
000163C8 4441                       		neg.w	d1
000163CA                            
000163CA                            loc_13024:
000163CA 1028 0026                  		move.b	$26(a0),d0
000163CE D001                       		add.b	d1,d0
000163D0 3F00                       		move.w	d0,-(sp)
000163D2 6100 0000                  		bsr.w	Sonic_WalkSpeed
000163D6 301F                       		move.w	(sp)+,d0
000163D8 4A41                       		tst.w	d1
000163DA 6A00                       		bpl.s	locret_1307C
000163DC E141                       		asl.w	#8,d1
000163DE 0600 0020                  		addi.b	#$20,d0
000163E2 0200 00C0                  		andi.b	#$C0,d0
000163E6 6700                       		beq.s	loc_13078
000163E8 0C00 0040                  		cmpi.b	#$40,d0
000163EC 6700                       		beq.s	loc_13066
000163EE 0C00 0080                  		cmpi.b	#$80,d0
000163F2 6700                       		beq.s	loc_13060
000163F4 D368 0010                  		add.w	d1,$10(a0)
000163F8 08E8 0005 0022             		bset	#5,$22(a0)
000163FE 317C 0000 0014             		move.w	#0,$14(a0)
00016404 4E75                       		rts	
00016406                            ; ===========================================================================
00016406                            
00016406                            loc_13060:
00016406 9368 0012                  		sub.w	d1,$12(a0)
0001640A 4E75                       		rts	
0001640C                            ; ===========================================================================
0001640C                            
0001640C                            loc_13066:
0001640C 9368 0010                  		sub.w	d1,$10(a0)
00016410 08E8 0005 0022             		bset	#5,$22(a0)
00016416 317C 0000 0014             		move.w	#0,$14(a0)
0001641C 4E75                       		rts	
0001641E                            ; ===========================================================================
0001641E                            
0001641E                            loc_13078:
0001641E D368 0012                  		add.w	d1,$12(a0)
00016422                            
00016422                            locret_1307C:
00016422 4E75                       		rts	
00016424                            ; End of function Sonic_Move
00016424                            
00016424                            
00016424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016424                            
00016424                            
00016424                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00016424 3028 0014                  		move.w	$14(a0),d0
00016428 6700                       		beq.s	loc_13086
0001642A 6A00                       		bpl.s	loc_130B2
0001642C                             
0001642C                            loc_13086:
0001642C 08E8 0000 0022             		bset	#0,$22(a0)
00016432 6600                       		bne.s	loc_1309A
00016434 08A8 0005 0022             		bclr	#5,$22(a0)
0001643A 117C 0001 001D             		move.b	#1,$1D(a0)
00016440                             
00016440                            loc_1309A:
00016440 9045                       		sub.w	d5,d0
00016442 3206                       		move.w	d6,d1
00016444 4441                       		neg.w	d1
00016446 B041                       		cmp.w	d1,d0
00016448 6E00                       		bgt.s	loc_130A6
0001644A D045                       		add.w	d5,d0
0001644C B041                       		cmp.w	d1,d0
0001644E 6F00                       		ble.s	loc_130A6
00016450 3001                       		move.w	d1,d0
00016452                             
00016452                            loc_130A6:
00016452 3140 0014                  		move.w	d0,$14(a0)
00016456 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
0001645C 4E75                       		rts
0001645E                            ; ===========================================================================
0001645E                            
0001645E                            loc_130B2:				; XREF: Sonic_MoveLeft
0001645E 9044                       		sub.w	d4,d0
00016460 6400                       		bcc.s	loc_130BA
00016462 303C FF80                  		move.w	#-$80,d0
00016466                            
00016466                            loc_130BA:
00016466 3140 0014                  		move.w	d0,$14(a0)
0001646A 1028 0026                  		move.b	$26(a0),d0
0001646E 0600 0020                  		addi.b	#$20,d0
00016472 0200 00C0                  		andi.b	#$C0,d0
00016476 6600                       		bne.s	locret_130E8
00016478 0C40 0400                  		cmpi.w	#$400,d0
0001647C 6D00                       		blt.s	locret_130E8
0001647E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00016484 08A8 0000 0022             		bclr	#0,$22(a0)
0001648A 303C 00A4                  		move.w	#$A4,d0
0001648E 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play stopping sound
00016494                            
00016494                            locret_130E8:
00016494 4E75                       		rts	
00016496                            ; End of function Sonic_MoveLeft
00016496                            
00016496                            
00016496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016496                            
00016496                            
00016496                            Sonic_MoveRight:	   ; XREF: Sonic_Move
00016496 3028 0014                  		move.w	$14(a0),d0
0001649A 6B00                       		bmi.s	loc_13118
0001649C 08A8 0000 0022             		bclr	#0,$22(a0)
000164A2 6700                       		beq.s	loc_13104
000164A4 08A8 0005 0022             		bclr	#5,$22(a0)
000164AA 117C 0001 001D             		move.b	#1,$1D(a0)
000164B0                             
000164B0                            loc_13104:
000164B0 D045                       		add.w	d5,d0
000164B2 B046                       		cmp.w	d6,d0
000164B4 6D00                       		blt.s	loc_1310C
000164B6 9045                       		sub.w	d5,d0
000164B8 B046                       		cmp.w	d6,d0
000164BA 6C00                       		bge.s	loc_1310C
000164BC 3006                       		move.w	d6,d0
000164BE                             
000164BE                            loc_1310C:
000164BE 3140 0014                  		move.w	d0,$14(a0)
000164C2 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000164C8 4E75                       		rts	
000164CA                            ; ===========================================================================
000164CA                            
000164CA                            loc_13118:				; XREF: Sonic_MoveRight
000164CA D044                       		add.w	d4,d0
000164CC 6400                       		bcc.s	loc_13120
000164CE 303C 0080                  		move.w	#$80,d0
000164D2                            
000164D2                            loc_13120:
000164D2 3140 0014                  		move.w	d0,$14(a0)
000164D6 1028 0026                  		move.b	$26(a0),d0
000164DA 0600 0020                  		addi.b	#$20,d0
000164DE 0200 00C0                  		andi.b	#$C0,d0
000164E2 6600                       		bne.s	locret_1314E
000164E4 0C40 FC00                  		cmpi.w	#-$400,d0
000164E8 6E00                       		bgt.s	locret_1314E
000164EA 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000164F0 08E8 0000 0022             		bset	#0,$22(a0)
000164F6 303C 00A4                  		move.w	#$A4,d0
000164FA 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play stopping sound
00016500                            
00016500                            locret_1314E:
00016500 4E75                       		rts	
00016502                            ; End of function Sonic_MoveRight
00016502                            
00016502                            ; ---------------------------------------------------------------------------
00016502                            ; Subroutine to	change Sonic's speed as he rolls
00016502                            ; ---------------------------------------------------------------------------
00016502                            
00016502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016502                            
00016502                            
00016502                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00016502 3C38 F760                  		move.w	($FFFFF760).w,d6
00016506 E346                       		asl.w	#1,d6
00016508 3A38 F762                  		move.w	($FFFFF762).w,d5
0001650C E245                       		asr.w	#1,d5
0001650E 3838 F764                  		move.w	($FFFFF764).w,d4
00016512 E444                       		asr.w	#2,d4
00016514 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00016518 6600 0000                  		bne.w	loc_131CC
0001651C 4A68 003E                  		tst.w	$3E(a0)
00016520 6600                       		bne.s	loc_13188
00016522 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00016528 6700                       		beq.s	loc_1317C	; if not, branch
0001652A 6100 0000                  		bsr.w	Sonic_RollLeft
0001652E                            
0001652E                            loc_1317C:
0001652E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00016534 6700                       		beq.s	loc_13188	; if not, branch
00016536 6100 0000                  		bsr.w	Sonic_RollRight
0001653A                            
0001653A                            loc_13188:
0001653A 3028 0014                  		move.w	$14(a0),d0
0001653E 6700                       		beq.s	loc_131AA
00016540 6B00                       		bmi.s	loc_1319E
00016542 9045                       		sub.w	d5,d0
00016544 6400                       		bcc.s	loc_13198
00016546 303C 0000                  		move.w	#0,d0
0001654A                            
0001654A                            loc_13198:
0001654A 3140 0014                  		move.w	d0,$14(a0)
0001654E 6000                       		bra.s	loc_131AA
00016550                            ; ===========================================================================
00016550                            
00016550                            loc_1319E:				; XREF: Sonic_RollSpeed
00016550 D045                       		add.w	d5,d0
00016552 6400                       		bcc.s	loc_131A6
00016554 303C 0000                  		move.w	#0,d0
00016558                            
00016558                            loc_131A6:
00016558 3140 0014                  		move.w	d0,$14(a0)
0001655C                            
0001655C                            loc_131AA:
0001655C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00016560 6600                       		bne.s	loc_131CC	; if yes, branch
00016562 08A8 0002 0022             		bclr	#2,$22(a0)
00016568 117C 0013 0016             		move.b	#$13,$16(a0)
0001656E 117C 0009 0017             		move.b	#9,$17(a0)
00016574 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001657A 5B68 000C                  		subq.w	#5,$C(a0)
0001657E                            
0001657E                            loc_131CC:
0001657E 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00016584 6700                       		beq.s	@cont2
00016586 6400                       		bcc.s	@cont1
00016588 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001658C                            		
0001658C                            @cont1:
0001658C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00016590                            		
00016590                            @cont2:
00016590 1028 0026                  		move.b	$26(a0),d0
00016594 4EB9 0000 3798             		jsr	(CalcSine).l
0001659A C1E8 0014                  		muls.w	$14(a0),d0
0001659E E080                       		asr.l	#8,d0
000165A0 3140 0012                  		move.w	d0,$12(a0)
000165A4 C3E8 0014                  		muls.w	$14(a0),d1
000165A8 E081                       		asr.l	#8,d1
000165AA 0C41 1000                  		cmpi.w	#$1000,d1
000165AE 6F00                       		ble.s	loc_131F0
000165B0 323C 1000                  		move.w	#$1000,d1
000165B4                            
000165B4                            loc_131F0:
000165B4 0C41 F000                  		cmpi.w	#-$1000,d1
000165B8 6C00                       		bge.s	loc_131FA
000165BA 323C F000                  		move.w	#-$1000,d1
000165BE                            
000165BE                            loc_131FA:
000165BE 3141 0010                  		move.w	d1,$10(a0)
000165C2 6000 FDEE                  		bra.w	loc_1300C
000165C6                            ; End of function Sonic_RollSpeed
000165C6                            
000165C6                            
000165C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165C6                            
000165C6                            
000165C6                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000165C6 3028 0014                  		move.w	$14(a0),d0
000165CA 6700                       		beq.s	loc_1320A
000165CC 6A00                       		bpl.s	loc_13218
000165CE                            
000165CE                            loc_1320A:
000165CE 08E8 0000 0022             		bset	#0,$22(a0)
000165D4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000165DA 4E75                       		rts	
000165DC                            ; ===========================================================================
000165DC                            
000165DC                            loc_13218:
000165DC 9044                       		sub.w	d4,d0
000165DE 6400                       		bcc.s	loc_13220
000165E0 303C FF80                  		move.w	#-$80,d0
000165E4                            
000165E4                            loc_13220:
000165E4 3140 0014                  		move.w	d0,$14(a0)
000165E8 4E75                       		rts	
000165EA                            ; End of function Sonic_RollLeft
000165EA                            
000165EA                            
000165EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165EA                            
000165EA                            
000165EA                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000165EA 3028 0014                  		move.w	$14(a0),d0
000165EE 6B00                       		bmi.s	loc_1323A
000165F0 08A8 0000 0022             		bclr	#0,$22(a0)
000165F6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000165FC 4E75                       		rts	
000165FE                            ; ===========================================================================
000165FE                            
000165FE                            loc_1323A:
000165FE D044                       		add.w	d4,d0
00016600 6400                       		bcc.s	loc_13242
00016602 303C 0080                  		move.w	#$80,d0
00016606                            
00016606                            loc_13242:
00016606 3140 0014                  		move.w	d0,$14(a0)
0001660A 4E75                       		rts	
0001660C                            ; End of function Sonic_RollRight
0001660C                            
0001660C                            ; ---------------------------------------------------------------------------
0001660C                            ; Subroutine to	change Sonic's direction while jumping
0001660C                            ; ---------------------------------------------------------------------------
0001660C                            
0001660C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001660C                            
0001660C                            
0001660C                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001660C 3C38 F760                  		move.w	($FFFFF760).w,d6	
00016610 3A38 F762                  		move.w	($FFFFF762).w,d5	
00016614 E345                       		asl.w	#1,d5	
00016616 0828 0004 0022             		btst	#4,$22(a0)	
0001661C 6600                       		bne.s	Obj01_ResetScr2	
0001661E 3028 0010                  		move.w	$10(a0),d0	
00016622 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?	
00016628 6700                       		beq.s	loc_13278	; if not, branch	
0001662A 08E8 0000 0022             		bset	#0,$22(a0)	
00016630 9045                       		sub.w	d5,d0	
00016632 3206                       		move.w	d6,d1	
00016634 4441                       		neg.w	d1	
00016636 B041                       		cmp.w	d1,d0	
00016638 6E00                       		bgt.s	loc_13278	
0001663A D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
0001663C B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001663E 6F00                       		ble.s	loc_13278
00016640 3001                       		move.w	d1,d0
00016642                            loc_13278:	
00016642 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?	
00016648 6700                       		beq.s   Obj01_JumpMove	; if not, branch	
0001664A 08A8 0000 0022             		bclr	#0,$22(a0)	
00016650 D045                       		add.w	d5,d0	
00016652 B046                       		cmp.w	d6,d0	
00016654 6D00                       		blt.s	Obj01_JumpMove	
00016656 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00016658 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001665A 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
0001665C 3006                       		move.w	d6,d0
0001665E                            
0001665E                            Obj01_JumpMove:
0001665E 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00016662                            
00016662                            Obj01_ResetScr2:
00016662 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00016668 6700                       		beq.s	loc_132A4	; if yes, branch
0001666A 6400                       		bcc.s	loc_132A0
0001666C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00016670                            
00016670                            loc_132A0:
00016670 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00016674                            
00016674                            loc_132A4:
00016674 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
0001667A 6500                       		bcs.s	locret_132D2	; if yes, branch
0001667C 3028 0010                  		move.w	$10(a0),d0
00016680 3200                       		move.w	d0,d1
00016682 EA41                       		asr.w	#5,d1
00016684 6700                       		beq.s	locret_132D2
00016686 6B00                       		bmi.s	loc_132C6
00016688 9041                       		sub.w	d1,d0
0001668A 6400                       		bcc.s	loc_132C0
0001668C 9045                       		sub.w d5,d0
0001668E B046                       		cmp.w d6,d0
00016690 6CCC                       		bge.s Obj01_JumpMove
00016692 303C 0000                  		move.w	#0,d0
00016696                            
00016696                            loc_132C0:
00016696 3140 0010                  		move.w	d0,$10(a0)
0001669A 4E75                       		rts	
0001669C                            ; ===========================================================================
0001669C                            
0001669C                            loc_132C6:
0001669C 9041                       		sub.w	d1,d0
0001669E 6500                       		bcs.s	loc_132CE
000166A0 303C 0000                  		move.w	#0,d0
000166A4                            
000166A4                            loc_132CE:
000166A4 3140 0010                  		move.w	d0,$10(a0)
000166A8                            
000166A8                            locret_132D2:
000166A8 4E75                       		rts	
000166AA                            ; End of function Sonic_ChgJumpDir
000166AA                            
000166AA                            ; ===========================================================================
000166AA                            ; ---------------------------------------------------------------------------
000166AA                            ; Unused subroutine to squash Sonic
000166AA                            ; ---------------------------------------------------------------------------
000166AA 1028 0026                  		move.b	$26(a0),d0
000166AE 0600 0020                  		addi.b	#$20,d0
000166B2 0200 00C0                  		andi.b	#$C0,d0
000166B6 6600                       		bne.s	locret_13302
000166B8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000166BC 4A41                       		tst.w	d1
000166BE 6A00                       		bpl.s	locret_13302
000166C0 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000166C6 317C 0000 0010             		move.w	#0,$10(a0)
000166CC 317C 0000 0012             		move.w	#0,$12(a0)
000166D2 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000166D8                            
000166D8                            locret_13302:
000166D8 4E75                       		rts	
000166DA                            ; ---------------------------------------------------------------------------
000166DA                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000166DA                            ; ---------------------------------------------------------------------------
000166DA                            
000166DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166DA                            
000166DA                            
000166DA                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000166DA 2228 0008                  		move.l	8(a0),d1
000166DE 3028 0010                  		move.w	$10(a0),d0
000166E2 48C0                       		ext.l	d0
000166E4 E180                       		asl.l	#8,d0
000166E6 D280                       		add.l	d0,d1
000166E8 4841                       		swap	d1
000166EA 3038 F728                  		move.w	($FFFFF728).w,d0
000166EE 0640 0010                  		addi.w	#$10,d0
000166F2 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000166F4 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000166F6 3038 F72A                  		move.w	($FFFFF72A).w,d0
000166FA 0640 0128                  		addi.w	#$128,d0
000166FE 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00016702 6600                       		bne.s	loc_13332
00016704 0640 0040                  		addi.w	#$40,d0
00016708                            
00016708                            loc_13332:
00016708 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001670A 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001670C                            
0001670C                            loc_13336:
0001670C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00016710 0640 00E0                  		addi.w	#$E0,d0
00016714 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00016718 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
0001671A 4E75                       		rts	
0001671C                            ; ===========================================================================
0001671C                            
0001671C                            Boundary_Bottom:
0001671C 3038 F726                  		move.w	($FFFFF726).w,d0
00016720 3238 F72E                  		move.w	($FFFFF72E).w,d1
00016724 B240                       		cmp.w	d0,d1			; screen still scrolling down?
00016726 6D00                       		blt.s	Boundary_Bottom_locret	; if so, don't kill Sonic
00016728 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
0001672E 6600 0000                  		bne.w	KillSonic2		; if not, kill Sonic
00016732 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00016738 6500 0000                  		bcs.w	KillSonic2
0001673C 4238 FE30                  		clr.b	($FFFFFE30).w		; clear lamppost counter
00016740 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
00016746 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w	; set level to SBZ3 (LZ4)
0001674C                             
0001674C                            Boundary_Bottom_locret:
0001674C 4E75                       		rts	
0001674E                            KillSonic2:
0001674E 4EF9 0000 0000             		jmp	KillSonic
00016754                            ; ===========================================================================
00016754                            
00016754                            Boundary_Sides:
00016754 3140 0008                  		move.w	d0,8(a0)
00016758 317C 0000 000A             		move.w	#0,$A(a0)
0001675E 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00016764 317C 0000 0014             		move.w	#0,$14(a0)
0001676A 60A0                       		bra.s	loc_13336
0001676C                            ; End of function Sonic_LevelBound
0001676C                            
0001676C                            ; ---------------------------------------------------------------------------
0001676C                            ; Subroutine allowing Sonic to roll when he's moving
0001676C                            ; ---------------------------------------------------------------------------
0001676C                            
0001676C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001676C                            
0001676C                            
0001676C                            Sonic_Roll:				; XREF: Obj01_MdNormal
0001676C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00016770 6600                       		bne.s	Obj01_NoRoll
00016772 3028 0014                  		move.w	$14(a0),d0
00016776 6A00                       		bpl.s	loc_13392
00016778 4440                       		neg.w	d0
0001677A                            
0001677A                            loc_13392:
0001677A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
0001677E 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00016780 1038 F602                  		move.b	($FFFFF602).w,d0
00016784 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00016788 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
0001678A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00016790 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00016792                            
00016792                            Obj01_NoRoll:
00016792 4E75                       		rts	
00016794                            ; ===========================================================================
00016794                            
00016794                            Obj01_ChkRoll:
00016794 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
0001679A 6700                       		beq.s	Obj01_DoRoll	; if not, branch
0001679C 4E75                       		rts	
0001679E                            ; ===========================================================================
0001679E                            
0001679E                            Obj01_DoRoll:
0001679E 08E8 0002 0022             		bset	#2,$22(a0)
000167A4 117C 000E 0016             		move.b	#$E,$16(a0)
000167AA 117C 0007 0017             		move.b	#7,$17(a0)
000167B0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000167B6 5A68 000C                  		addq.w	#5,$C(a0)
000167BA 303C 00BE                  		move.w	#$BE,d0
000167BE 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play rolling sound
000167C4 4A68 0014                  		tst.w	$14(a0)
000167C8 6600                       		bne.s	locret_133E8
000167CA 317C 0200 0014             		move.w	#$200,$14(a0)
000167D0                            
000167D0                            locret_133E8:
000167D0 4E75                       		rts	
000167D2                            ; End of function Sonic_Roll
000167D2                            
000167D2                            ; ---------------------------------------------------------------------------
000167D2                            ; Subroutine allowing Sonic to jump
000167D2                            ; ---------------------------------------------------------------------------
000167D2                            
000167D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167D2                            
000167D2                            
000167D2                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000167D2 1038 F603                  		move.b	($FFFFF603).w,d0
000167D6 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000167DA 6700 0000                  		beq.w	locret_1348E	; if not, branch
000167DE 7000                       		moveq	#0,d0
000167E0 1028 0026                  		move.b	$26(a0),d0
000167E4 0600 0080                  		addi.b	#$80,d0
000167E8 6100 0000                  		bsr.w	sub_14D48
000167EC 0C41 0006                  		cmpi.w	#6,d1
000167F0 6D00 0000                  		blt.w	locret_1348E
000167F4 343C 0680                  		move.w	#$680,d2
000167F8 0828 0006 0022             		btst	#6,$22(a0)
000167FE 6700                       		beq.s	loc_1341C
00016800 343C 0380                  		move.w	#$380,d2
00016804                            
00016804                            loc_1341C:
00016804 7000                       		moveq	#0,d0
00016806 1028 0026                  		move.b	$26(a0),d0
0001680A 0400 0040                  		subi.b	#$40,d0
0001680E 4EB9 0000 3798             		jsr	(CalcSine).l
00016814 C3C2                       		muls.w	d2,d1
00016816 E081                       		asr.l	#8,d1
00016818 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
0001681C C1C2                       		muls.w	d2,d0
0001681E E080                       		asr.l	#8,d0
00016820 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00016824 08E8 0001 0022             		bset	#1,$22(a0)
0001682A 08A8 0005 0022             		bclr	#5,$22(a0)
00016830 588F                       		addq.l	#4,sp
00016832 117C 0001 003C             		move.b	#1,$3C(a0)
00016838 4228 0038                  		clr.b	$38(a0)
0001683C 303C 00A0                  		move.w	#$A0,d0
00016840 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play jumping sound
00016846 117C 0013 0016             		move.b	#$13,$16(a0)
0001684C 117C 0009 0017             		move.b	#9,$17(a0)
00016852 0828 0002 0022             		btst	#2,$22(a0)
00016858 6600                       		bne.s	loc_13490
0001685A 117C 000E 0016             		move.b	#$E,$16(a0)
00016860 117C 0007 0017             		move.b	#7,$17(a0)
00016866 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
0001686C 08E8 0002 0022             		bset	#2,$22(a0)
00016872 5A68 000C                  		addq.w	#5,$C(a0)
00016876                            
00016876                            locret_1348E:
00016876 4E75                       		rts	
00016878                            ; ===========================================================================
00016878                            
00016878                            loc_13490:
00016878 08E8 0004 0022             		bset	#4,$22(a0)
0001687E 4E75                       		rts	
00016880                            ; End of function Sonic_Jump
00016880                            
00016880                            
00016880                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016880                            
00016880                            
00016880                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00016880 4A28 003C                  		tst.b	$3C(a0)
00016884 6700                       		beq.s	loc_134C4
00016886 323C FC00                  		move.w	#-$400,d1
0001688A 0828 0006 0022             		btst	#6,$22(a0)
00016890 6700                       		beq.s	loc_134AE
00016892 323C FE00                  		move.w	#-$200,d1
00016896                            
00016896                            loc_134AE:
00016896 B268 0012                  		cmp.w	$12(a0),d1
0001689A 6F00                       		ble.s	locret_134C2
0001689C 1038 F602                  		move.b	($FFFFF602).w,d0
000168A0 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000168A4 6600                       		bne.s	locret_134C2	; if yes, branch
000168A6 3141 0012                  		move.w	d1,$12(a0)
000168AA                            
000168AA                            locret_134C2:
000168AA 4E75                       		rts	
000168AC                            ; ===========================================================================
000168AC                            
000168AC                            loc_134C4:
000168AC 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000168B2 6C00                       		bge.s	locret_134D2
000168B4 317C F040 0012             		move.w	#-$FC0,$12(a0)
000168BA                            
000168BA                            locret_134D2:
000168BA 4E75                       		rts	
000168BC                            ; End of function Sonic_JumpHeight
000168BC                            
000168BC                            
000168BC                            ; ---------------------------------------------------------------------------
000168BC                            ; Subroutine to perform a Double Jump
000168BC                            ; ---------------------------------------------------------------------------
000168BC                            
000168BC                            Windy_DoubleJump:
000168BC 0C38 0001 FF9C             		cmpi.b	#1,($FFFFFF9C).w	; Are we using Windy?
000168C2 6600 0000                  		bne.w	JD_End			; if yes, branch
000168C6 1038 F603                  		move.b	($FFFFF603).w,d0	; is ABC pressed? (part 1)
000168CA 0200 0070                  		andi.b	#$70,d0			; is ABC pressed? (part 2)
000168CE 6700 0000                  		beq.w	JD_End			; if not, branch
000168D2 4A38 FFEB                  		tst.b	($FFFFFFEB).w		; was jumpdash flag set?
000168D6 6600 0000                  		bne.w	JD_End			; if yes, branch
000168DA 11FC 0001 FFEB             		move.b	#1,($FFFFFFEB).w	; if not, set jumpdash flag
000168E0 103C 00BC                  		move.b	#$BC,d0			; set jumpdash sound
000168E4 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l	; play jumpdash sound
000168EA 08A8 0004 0022             		bclr	#4,$22(a0)		; clear double jump flag
000168F0 303C 0A00                  		move.w	#$A00,d0		; set normal jumpdash speed
000168F4 4A38 FE2E                  		tst.b	($FFFFFE2E).w		; do you have speed shoes?
000168F8 6700                       		beq.s	JD_ChkUW		; if not, branch
000168FA 303C 0B00                  		move.w	#$B00,d0		; set speed shoes jumpdash speed
000168FE                            
000168FE                            JD_ChkUW:
000168FE 0828 0006 0022             		btst	#6,$22(a0)		; is Sonic underwater?
00016904 6700                       		beq.s	JD_ChkDirection		; if not, branch
00016906 303C 0600                  		move.w	#$600,d0		; set underwater jumpdash speed
0001690A                            
0001690A                            JD_ChkDirection:
0001690A 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing left?
00016910 6700                       		beq.s	JD_Move			; if yes, branch
00016912 4E71                       		nop
00016914                            		
00016914                            JD_Move:
00016914 4440                       		neg.w	d0			; if not, negate d0 (for jumping to the right)
00016916 3140 0012                  		move.w	d0,$12(a0)		; move Sonic forward with the selected speed ($10(a0) = Sonic's X-velocity)
0001691A                            ;		clr.w	$12(a0)			; clear Sonic's Y-velocity to move sonic directly down
0001691A                            
0001691A                            JD_End:
0001691A 4E75                       		rts				; return
0001691C                            ; End of function Sonic_JumpDash
0001691C                            
0001691C                            
0001691C                            Sonic_Spindash:
0001691C 0C38 0001 FF9C             		cmpi.b	#1,($FFFFFF9C).w	; Windy?
00016922 6700 0000                  		beq.w	NoFuckinDash
00016926 0C78 0700 FE10             		cmpi.w	#$700,($FFFFFE10).w
0001692C 6700 0000                  		beq.w	NoFuckinDash
00016930 4A28 0039                  		tst.b	$39(a0)			; already spindashing?
00016934 6600                       		bne.s	loc2_1AC8E		; if set, branch
00016936 0C28 0008 001C             		cmpi.b	#8,$1C(a0)		; is anim duck
0001693C 6600                       		bne.s	locret2_1AC8C		; if not, return
0001693E 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
00016942 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00016946 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
0001694A 117C 001F 001C             		move.b	#$1F,$1C(a0)		; set spindash anim (9 in s2)
00016950 303C 00D1                  		move.w	#$D1,d0			; spin sound ($E0 in s2)
00016954 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l	; play spin sound
0001695A 588F                       		addq.l	#4,sp			; increment stack ptr
0001695C 117C 0001 0039             		move.b	#1,$39(a0)		; set spindash flag
00016962 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00016968 0C28 000C 0028             		cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
0001696E 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; ??? $D11C only seems
00016974                            						; to be used in spindash
00016974                            loc2_1AC84:
00016974 6100 FD64                  		bsr.w	Sonic_LevelBound
00016978 6100 0000                  		bsr.w	Sonic_AnglePos
0001697C                             
0001697C                            NoFuckinDash:
0001697C                            locret2_1AC8C:
0001697C 4E75                       		rts	
0001697E                            ; ---------------------------------------------------------------------------
0001697E                             
0001697E                            loc2_1AC8E:
0001697E 117C 001F 001C             		move.b	#$1F,$1C(a0)
00016984 1038 F602                  		move.b	($FFFFF602).w,d0	; read controller
00016988 0800 0001                  		btst	#1,d0			; check down button
0001698C 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00016990 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00016996 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
0001699C 117C 0002 001C             		move.b	#2,$1C(a0)		; set animation to roll
000169A2 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
000169A6 117C 0000 0039             		move.b	#0,$39(a0)		; clear spindash flag
000169AC 7000                       		moveq	#0,d0
000169AE 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
000169B2 D040                       		add.w	d0,d0			; double it
000169B4 317B 0000 0014             		move.w	spdsh_norm(pc,d0.w),$14(a0) ; get normal speed
000169BA 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
000169BE 6700                       		beq.s	loc2_1ACD0		; if no, branch
000169C0 317B 0000 0014             		move.w	spdsh_super(pc,d0.w),$14(a0) ; get super speed
000169C6                             
000169C6                            loc2_1ACD0:					; TODO: figure this out
000169C6 3028 0014                  		move.w	$14(a0),d0		; get inertia
000169CA 0440 0800                  		subi.w	#$800,d0		; subtract $800
000169CE D040                       		add.w	d0,d0			; double it
000169D0 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
000169D4 4440                       		neg.w	d0			; negate it
000169D6 0640 2000                  		addi.w	#$2000,d0		; add $2000
000169DA 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $C904
000169DE 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
000169E4 6700                       		beq.s	loc2_1ACF4		; if not, branch
000169E6 4468 0014                  		neg.w	$14(a0)			; negate inertia
000169EA                             
000169EA                            loc2_1ACF4:
000169EA 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
000169F0 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear $D11C (unused?)
000169F6 303C 00BC                  		move.w	#$BC,d0			; spin release sound
000169FA 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l	; play it!
00016A00 6000                       		bra.s	loc2_1AD78
00016A02                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00016A02                            spdsh_norm:
00016A02 0800                       		dc.w  $800		; 0
00016A04 0880                       		dc.w  $880		; 1
00016A06 0900                       		dc.w  $900		; 2
00016A08 0980                       		dc.w  $980		; 3
00016A0A 0A00                       		dc.w  $A00		; 4
00016A0C 0A80                       		dc.w  $A80		; 5
00016A0E 0B00                       		dc.w  $B00		; 6
00016A10 0B80                       		dc.w  $B80		; 7
00016A12 0C00                       		dc.w  $C00		; 8
00016A14                             
00016A14                            spdsh_super:
00016A14 0B00                       		dc.w  $B00		; 0
00016A16 0B80                       		dc.w  $B80		; 1
00016A18 0C00                       		dc.w  $C00		; 2
00016A1A 0C80                       		dc.w  $C80		; 3
00016A1C 0D00                       		dc.w  $D00		; 4
00016A1E 0D80                       		dc.w  $D80		; 5
00016A20 0E00                       		dc.w  $E00		; 6
00016A22 0E80                       		dc.w  $E80		; 7
00016A24 0F00                       		dc.w  $F00		; 8
00016A26                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00016A26                             
00016A26                            loc2_1AD30:				; If still charging the dash...
00016A26 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00016A2A 6700                       		beq.s	loc2_1AD48	; if zero, branch
00016A2C 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00016A30 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00016A32 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00016A36 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00016A38 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00016A3E                             
00016A3E                            loc2_1AD48:
00016A3E 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
00016A42 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00016A46 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00016A4A 317C 1F00 001C             		move.w	#$1F00,$1C(a0)		; reset spdsh animation
00016A50 303C 00D1                  		move.w	#$D1,d0			; was $E0 in sonic 2
00016A54 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w	; Set the spindash dust animation to $2.
00016A5A 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l	; play charge sound	
00016A60 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00016A66 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00016A6C 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00016A6E 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00016A74                             
00016A74                            loc2_1AD78:
00016A74 588F                       		addq.l	#4,sp			; increase stack ptr
00016A76 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00016A7C 6700                       		beq.s	loc2_1AD8C
00016A7E 6400                       		bcc.s	loc2_1AD88
00016A80 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00016A84                             
00016A84                            loc2_1AD88:
00016A84 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00016A88                             
00016A88                            loc2_1AD8C:
00016A88 6100 FC50                  		bsr.w	Sonic_LevelBound
00016A8C 6100 0000                  		bsr.w	Sonic_AnglePos
00016A90                            		;move.w	#$60,($FFFFF73E).w	; reset looking up/down
00016A90 4E75                       		rts
00016A92                            ; End of subroutine Sonic_Spindash
00016A92                            
00016A92                            ; ---------------------------------------------------------------------------
00016A92                            ; Subroutine to	slow Sonic walking up a	slope
00016A92                            ; ---------------------------------------------------------------------------
00016A92                            
00016A92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A92                            
00016A92                            
00016A92                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00016A92 1028 0026                  		move.b	$26(a0),d0
00016A96 0600 0060                  		addi.b	#$60,d0
00016A9A 0C00 00C0                  		cmpi.b	#$C0,d0
00016A9E 6400                       		bcc.s	locret_13508
00016AA0 1028 0026                  		move.b	$26(a0),d0
00016AA4 4EB9 0000 3798             		jsr	(CalcSine).l
00016AAA C1FC 0020                  		muls.w	#$20,d0
00016AAE E080                       		asr.l	#8,d0
00016AB0 4A68 0014                  		tst.w	$14(a0)
00016AB4 6700                       		beq.s	locret_13508
00016AB6 6B00                       		bmi.s	loc_13504
00016AB8 4A40                       		tst.w	d0
00016ABA 6700                       		beq.s	locret_13502
00016ABC D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00016AC0                            
00016AC0                            locret_13502:
00016AC0 4E75                       		rts	
00016AC2                            ; ===========================================================================
00016AC2                            
00016AC2                            loc_13504:
00016AC2 D168 0014                  		add.w	d0,$14(a0)
00016AC6                            
00016AC6                            locret_13508:
00016AC6 4E75                       		rts	
00016AC8                            ; End of function Sonic_SlopeResist
00016AC8                            
00016AC8                            ; ---------------------------------------------------------------------------
00016AC8                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00016AC8                            ; ---------------------------------------------------------------------------
00016AC8                            
00016AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AC8                            
00016AC8                            
00016AC8                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00016AC8 1028 0026                  		move.b	$26(a0),d0
00016ACC 0600 0060                  		addi.b	#$60,d0
00016AD0 0C00 00C0                  		cmpi.b	#-$40,d0
00016AD4 6400                       		bcc.s	locret_13544
00016AD6 1028 0026                  		move.b	$26(a0),d0
00016ADA 4EB9 0000 3798             		jsr	(CalcSine).l
00016AE0 C1FC 0050                  		muls.w	#$50,d0
00016AE4 E080                       		asr.l	#8,d0
00016AE6 4A68 0014                  		tst.w	$14(a0)
00016AEA 6B00                       		bmi.s	loc_1353A
00016AEC 4A40                       		tst.w	d0
00016AEE 6A00                       		bpl.s	loc_13534
00016AF0 E480                       		asr.l	#2,d0
00016AF2                            
00016AF2                            loc_13534:
00016AF2 D168 0014                  		add.w	d0,$14(a0)
00016AF6 4E75                       		rts	
00016AF8                            ; ===========================================================================
00016AF8                            
00016AF8                            loc_1353A:
00016AF8 4A40                       		tst.w	d0
00016AFA 6B00                       		bmi.s	loc_13540
00016AFC E480                       		asr.l	#2,d0
00016AFE                            
00016AFE                            loc_13540:
00016AFE D168 0014                  		add.w	d0,$14(a0)
00016B02                            
00016B02                            locret_13544:
00016B02 4E75                       		rts	
00016B04                            ; End of function Sonic_RollRepel
00016B04                            
00016B04                            ; ---------------------------------------------------------------------------
00016B04                            ; Subroutine to	push Sonic down	a slope
00016B04                            ; ---------------------------------------------------------------------------
00016B04                            
00016B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B04                            
00016B04                            
00016B04                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00016B04 4E71                       		nop	
00016B06 4A28 0038                  		tst.b	$38(a0)
00016B0A 6600                       		bne.s	locret_13580
00016B0C 4A68 003E                  		tst.w	$3E(a0)
00016B10 6600                       		bne.s	loc_13582
00016B12 1028 0026                  		move.b	$26(a0),d0
00016B16 0600 0020                  		addi.b	#$20,d0
00016B1A 0200 00C0                  		andi.b	#$C0,d0
00016B1E 6700                       		beq.s	locret_13580
00016B20 3028 0014                  		move.w	$14(a0),d0
00016B24 6A00                       		bpl.s	loc_1356A
00016B26 4440                       		neg.w	d0
00016B28                            
00016B28                            loc_1356A:
00016B28 0C40 0280                  		cmpi.w	#$280,d0
00016B2C 6400                       		bcc.s	locret_13580
00016B2E 4268 0014                  		clr.w	$14(a0)
00016B32 08E8 0001 0022             		bset	#1,$22(a0)
00016B38 317C 001E 003E             		move.w	#$1E,$3E(a0)
00016B3E                            
00016B3E                            locret_13580:
00016B3E 4E75                       		rts	
00016B40                            ; ===========================================================================
00016B40                            
00016B40                            loc_13582:
00016B40 5368 003E                  		subq.w	#1,$3E(a0)
00016B44 4E75                       		rts	
00016B46                            ; End of function Sonic_SlopeRepel
00016B46                            
00016B46                            ; ---------------------------------------------------------------------------
00016B46                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00016B46                            ; ---------------------------------------------------------------------------
00016B46                            
00016B46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B46                            
00016B46                            
00016B46                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00016B46 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00016B4A 6700                       		beq.s	locret_135A2	; if already 0,	branch
00016B4C 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00016B4E                            
00016B4E 5400                       		addq.b	#2,d0		; increase angle
00016B50 6400                       		bcc.s	loc_13596
00016B52 7000                       		moveq	#0,d0
00016B54                            
00016B54                            loc_13596:
00016B54 6000                       		bra.s	loc_1359E
00016B56                            ; ===========================================================================
00016B56                            
00016B56                            loc_13598:
00016B56 5500                       		subq.b	#2,d0		; decrease angle
00016B58 6400                       		bcc.s	loc_1359E
00016B5A 7000                       		moveq	#0,d0
00016B5C                            
00016B5C                            loc_1359E:
00016B5C 1140 0026                  		move.b	d0,$26(a0)
00016B60                            
00016B60                            locret_135A2:
00016B60 4E75                       		rts	
00016B62                            ; End of function Sonic_JumpAngle
00016B62                            
00016B62                            ; ---------------------------------------------------------------------------
00016B62                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00016B62                            ; ---------------------------------------------------------------------------
00016B62                            
00016B62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B62                            
00016B62                            
00016B62                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00016B62 3228 0010                  		move.w	$10(a0),d1
00016B66 3428 0012                  		move.w	$12(a0),d2
00016B6A 4EB9 0000 3A66             		jsr	(CalcAngle).l
00016B70 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00016B74 0400 0020                  		subi.b	#$20,d0
00016B78 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00016B7C 0200 00C0                  		andi.b	#$C0,d0
00016B80 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00016B84 0C00 0040                  		cmpi.b	#$40,d0
00016B88 6700 0000                  		beq.w	loc_13680
00016B8C 0C00 0080                  		cmpi.b	#$80,d0
00016B90 6700 0000                  		beq.w	loc_136E2
00016B94 0C00 00C0                  		cmpi.b	#-$40,d0
00016B98 6700 0000                  		beq.w	loc_1373E
00016B9C 6100 0000                  		bsr.w	Sonic_HitWall
00016BA0 4A41                       		tst.w	d1
00016BA2 6A00                       		bpl.s	loc_135F0
00016BA4 9368 0008                  		sub.w	d1,8(a0)
00016BA8 317C 0000 0010             		move.w	#0,$10(a0)
00016BAE                            
00016BAE                            loc_135F0:
00016BAE 6100 0000                  		bsr.w	sub_14EB4
00016BB2 4A41                       		tst.w	d1
00016BB4 6A00                       		bpl.s	loc_13602
00016BB6 D368 0008                  		add.w	d1,8(a0)
00016BBA 317C 0000 0010             		move.w	#0,$10(a0)
00016BC0                            
00016BC0                            loc_13602:
00016BC0 6100 0000                  		bsr.w	Sonic_HitFloor
00016BC4 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00016BC8 4A41                       		tst.w	d1
00016BCA 6A00                       		bpl.s	locret_1367E
00016BCC 1428 0012                  		move.b	$12(a0),d2
00016BD0 5002                       		addq.b	#8,d2
00016BD2 4402                       		neg.b	d2
00016BD4 B202                       		cmp.b	d2,d1
00016BD6 6C00                       		bge.s	loc_1361E
00016BD8 B002                       		cmp.b	d2,d0
00016BDA 6D00                       		blt.s	locret_1367E
00016BDC                            
00016BDC                            loc_1361E:
00016BDC D368 000C                  		add.w	d1,$C(a0)
00016BE0 1143 0026                  		move.b	d3,$26(a0)
00016BE4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016BE8 117C 0000 001C             		move.b	#0,$1C(a0)
00016BEE 1003                       		move.b	d3,d0
00016BF0 0600 0020                  		addi.b	#$20,d0
00016BF4 0200 0040                  		andi.b	#$40,d0
00016BF8 6600                       		bne.s	loc_1365C
00016BFA 1003                       		move.b	d3,d0
00016BFC 0600 0010                  		addi.b	#$10,d0
00016C00 0200 0020                  		andi.b	#$20,d0
00016C04 6700                       		beq.s	loc_1364E
00016C06 E0E8 0012                  		asr	$12(a0)
00016C0A 6000                       		bra.s	loc_13670
00016C0C                            ; ===========================================================================
00016C0C                            
00016C0C                            loc_1364E:
00016C0C 317C 0000 0012             		move.w	#0,$12(a0)
00016C12 3168 0010 0014             		move.w	$10(a0),$14(a0)
00016C18 4E75                       		rts	
00016C1A                            ; ===========================================================================
00016C1A                            
00016C1A                            loc_1365C:
00016C1A 317C 0000 0010             		move.w	#0,$10(a0)
00016C20 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00016C26 6F00                       		ble.s	loc_13670
00016C28 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00016C2E                            
00016C2E                            loc_13670:
00016C2E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00016C34 4A03                       		tst.b	d3
00016C36 6A00                       		bpl.s	locret_1367E
00016C38 4468 0014                  		neg.w	$14(a0)
00016C3C                            
00016C3C                            locret_1367E:
00016C3C 4E75                       		rts	
00016C3E                            ; ===========================================================================
00016C3E                            
00016C3E                            loc_13680:
00016C3E 6100 0000                  		bsr.w	Sonic_HitWall
00016C42 4A41                       		tst.w	d1
00016C44 6A00                       		bpl.s	loc_1369A
00016C46 9368 0008                  		sub.w	d1,8(a0)
00016C4A 317C 0000 0010             		move.w	#0,$10(a0)
00016C50 3168 0012 0014             		move.w	$12(a0),$14(a0)
00016C56 4E75                       		rts	
00016C58                            ; ===========================================================================
00016C58                            
00016C58                            loc_1369A:
00016C58 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016C5C 4A41                       		tst.w	d1
00016C5E 6A00                       		bpl.s	loc_136B4
00016C60 9368 000C                  		sub.w	d1,$C(a0)
00016C64 4A68 0012                  		tst.w	$12(a0)
00016C68 6A00                       		bpl.s	locret_136B2
00016C6A 317C 0000 0012             		move.w	#0,$12(a0)
00016C70                            
00016C70                            locret_136B2:
00016C70 4E75                       		rts	
00016C72                            ; ===========================================================================
00016C72                            
00016C72                            loc_136B4:
00016C72 4A68 0012                  		tst.w	$12(a0)
00016C76 6B00                       		bmi.s	locret_136E0
00016C78 6100 0000                  		bsr.w	Sonic_HitFloor
00016C7C 4A41                       		tst.w	d1
00016C7E 6A00                       		bpl.s	locret_136E0
00016C80 D368 000C                  		add.w	d1,$C(a0)
00016C84 1143 0026                  		move.b	d3,$26(a0)
00016C88 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016C8C 117C 0000 001C             		move.b	#0,$1C(a0)
00016C92 317C 0000 0012             		move.w	#0,$12(a0)
00016C98 3168 0010 0014             		move.w	$10(a0),$14(a0)
00016C9E                            
00016C9E                            locret_136E0:
00016C9E 4E75                       		rts	
00016CA0                            ; ===========================================================================
00016CA0                            
00016CA0                            loc_136E2:
00016CA0 6100 0000                  		bsr.w	Sonic_HitWall
00016CA4 4A41                       		tst.w	d1
00016CA6 6A00                       		bpl.s	loc_136F4
00016CA8 9368 0008                  		sub.w	d1,8(a0)
00016CAC 317C 0000 0010             		move.w	#0,$10(a0)
00016CB2                            
00016CB2                            loc_136F4:
00016CB2 6100 0000                  		bsr.w	sub_14EB4
00016CB6 4A41                       		tst.w	d1
00016CB8 6A00                       		bpl.s	loc_13706
00016CBA D368 0008                  		add.w	d1,8(a0)
00016CBE 317C 0000 0010             		move.w	#0,$10(a0)
00016CC4                            
00016CC4                            loc_13706:
00016CC4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016CC8 4A41                       		tst.w	d1
00016CCA 6A00                       		bpl.s	locret_1373C
00016CCC 9368 000C                  		sub.w	d1,$C(a0)
00016CD0 1003                       		move.b	d3,d0
00016CD2 0600 0020                  		addi.b	#$20,d0
00016CD6 0200 0040                  		andi.b	#$40,d0
00016CDA 6600                       		bne.s	loc_13726
00016CDC 317C 0000 0012             		move.w	#0,$12(a0)
00016CE2 4E75                       		rts	
00016CE4                            ; ===========================================================================
00016CE4                            
00016CE4                            loc_13726:
00016CE4 1143 0026                  		move.b	d3,$26(a0)
00016CE8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016CEC 3168 0012 0014             		move.w	$12(a0),$14(a0)
00016CF2 4A03                       		tst.b	d3
00016CF4 6A00                       		bpl.s	locret_1373C
00016CF6 4468 0014                  		neg.w	$14(a0)
00016CFA                            
00016CFA                            locret_1373C:
00016CFA 4E75                       		rts	
00016CFC                            ; ===========================================================================
00016CFC                            
00016CFC                            loc_1373E:
00016CFC 6100 0000                  		bsr.w	sub_14EB4
00016D00 4A41                       		tst.w	d1
00016D02 6A00                       		bpl.s	loc_13758
00016D04 D368 0008                  		add.w	d1,8(a0)
00016D08 317C 0000 0010             		move.w	#0,$10(a0)
00016D0E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00016D14 4E75                       		rts	
00016D16                            ; ===========================================================================
00016D16                            
00016D16                            loc_13758:
00016D16 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016D1A 4A41                       		tst.w	d1
00016D1C 6A00                       		bpl.s	loc_13772
00016D1E 9368 000C                  		sub.w	d1,$C(a0)
00016D22 4A68 0012                  		tst.w	$12(a0)
00016D26 6A00                       		bpl.s	locret_13770
00016D28 317C 0000 0012             		move.w	#0,$12(a0)
00016D2E                            
00016D2E                            locret_13770:
00016D2E 4E75                       		rts	
00016D30                            ; ===========================================================================
00016D30                            
00016D30                            loc_13772:
00016D30 4A68 0012                  		tst.w	$12(a0)
00016D34 6B00                       		bmi.s	locret_1379E
00016D36 6100 0000                  		bsr.w	Sonic_HitFloor
00016D3A 4A41                       		tst.w	d1
00016D3C 6A00                       		bpl.s	locret_1379E
00016D3E D368 000C                  		add.w	d1,$C(a0)
00016D42 1143 0026                  		move.b	d3,$26(a0)
00016D46 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016D4A 117C 0000 001C             		move.b	#0,$1C(a0)
00016D50 317C 0000 0012             		move.w	#0,$12(a0)
00016D56 3168 0010 0014             		move.w	$10(a0),$14(a0)
00016D5C                            
00016D5C                            locret_1379E:
00016D5C 4E75                       		rts	
00016D5E                            ; End of function Sonic_Floor
00016D5E                            
00016D5E                            ; ---------------------------------------------------------------------------
00016D5E                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00016D5E                            ; ---------------------------------------------------------------------------
00016D5E                            
00016D5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D5E                            
00016D5E                            
00016D5E                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00016D5E 4238 FFEB                  		clr.b	($FFFFFFEB).w	; clear jumpdash flag
00016D62 0828 0004 0022             		btst	#4,$22(a0)
00016D68 6700                       		beq.s	loc_137AE
00016D6A 4E71                       		nop	
00016D6C 4E71                       		nop	
00016D6E 4E71                       		nop	
00016D70                            
00016D70                            loc_137AE:
00016D70 08A8 0005 0022             		bclr	#5,$22(a0)
00016D76 08A8 0001 0022             		bclr	#1,$22(a0)
00016D7C 08A8 0004 0022             		bclr	#4,$22(a0)
00016D82 0828 0002 0022             		btst	#2,$22(a0)
00016D88 6700                       		beq.s	loc_137E4
00016D8A 08A8 0002 0022             		bclr	#2,$22(a0)
00016D90 117C 0013 0016             		move.b	#$13,$16(a0)
00016D96 117C 0009 0017             		move.b	#9,$17(a0)
00016D9C 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00016DA2 5B68 000C                  		subq.w	#5,$C(a0)
00016DA6                            
00016DA6                            loc_137E4:
00016DA6 117C 0000 003C             		move.b	#0,$3C(a0)
00016DAC 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00016DB2 4E75                       		rts	
00016DB4                            ; End of function Sonic_ResetOnFloor
00016DB4                            
00016DB4                            ; ===========================================================================
00016DB4                            ; ---------------------------------------------------------------------------
00016DB4                            ; Sonic	when he	gets hurt
00016DB4                            ; ---------------------------------------------------------------------------
00016DB4                            
00016DB4                            Obj01_Hurt:				; XREF: Obj01_Index
00016DB4 4EBA 9726                  		jsr	SpeedToPos
00016DB8 0668 0030 0012             		addi.w	#$30,$12(a0)
00016DBE 0828 0006 0022             		btst	#6,$22(a0)
00016DC4 6700                       		beq.s	loc_1380C
00016DC6 0468 0020 0012             		subi.w	#$20,$12(a0)
00016DCC                            
00016DCC                            loc_1380C:
00016DCC 6100 0000                  		bsr.w	Sonic_HurtStop
00016DD0 6100 F908                  		bsr.w	Sonic_LevelBound
00016DD4 6100 F2FC                  		bsr.w	Sonic_RecordPos
00016DD8 6100 0000                  		bsr.w	Sonic_Animate
00016DDC 6100 0000                  		bsr.w	LoadSonicDynPLC
00016DE0 4EFA 9720                  		jmp	DisplaySprite
00016DE4                            
00016DE4                            ; ---------------------------------------------------------------------------
00016DE4                            ; Subroutine to	stop Sonic falling after he's been hurt
00016DE4                            ; ---------------------------------------------------------------------------
00016DE4                            
00016DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DE4                            
00016DE4                            
00016DE4                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00016DE4 3038 F72E                  		move.w	($FFFFF72E).w,d0
00016DE8 0640 00E0                  		addi.w	#$E0,d0
00016DEC B068 000C                  		cmp.w	$C(a0),d0
00016DF0 6500 0000                  		bcs.w	KillSonic
00016DF4 6100 FD6C                  		bsr.w	Sonic_Floor
00016DF8 0828 0001 0022             		btst	#1,$22(a0)
00016DFE 6600                       		bne.s	locret_13860
00016E00 7000                       		moveq	#0,d0
00016E02 3140 0012                  		move.w	d0,$12(a0)
00016E06 3140 0010                  		move.w	d0,$10(a0)
00016E0A 3140 0014                  		move.w	d0,$14(a0)
00016E0E 117C 0000 001C             		move.b	#0,$1C(a0)
00016E14 5528 0024                  		subq.b	#2,$24(a0)
00016E18 317C 0078 0030             		move.w	#$78,$30(a0)
00016E1E                            
00016E1E                            locret_13860:
00016E1E 4E75                       		rts	
00016E20                            ; End of function Sonic_HurtStop
00016E20                            
00016E20                            ; ===========================================================================
00016E20                            ; ---------------------------------------------------------------------------
00016E20                            ; Sonic	when he	dies
00016E20                            ; ---------------------------------------------------------------------------
00016E20                            
00016E20                            Obj01_Death:				; XREF: Obj01_Index
00016E20 6100 0000                  		bsr.w	GameOver
00016E24 4EBA 965E                  		jsr	ObjectFall
00016E28 6100 F2A8                  		bsr.w	Sonic_RecordPos
00016E2C 6100 0000                  		bsr.w	Sonic_Animate
00016E30 6100 0000                  		bsr.w	LoadSonicDynPLC
00016E34 4EFA 96CC                  		jmp	DisplaySprite
00016E38                            
00016E38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E38                            
00016E38                            
00016E38                            GameOver:				; XREF: Obj01_Death
00016E38 3038 F72E                  		move.w	($FFFFF72E).w,d0
00016E3C 0640 0100                  		addi.w	#$100,d0
00016E40 B068 000C                  		cmp.w	$C(a0),d0
00016E44 6400 0000                  		bcc.w	locret_13900
00016E48 317C FFC8 0012             		move.w	#-$38,$12(a0)
00016E4E 5428 0024                  		addq.b	#2,$24(a0)
00016E52 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00016E56 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00016E5A 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00016E5E 6600                       		bne.s	loc_138D4
00016E60 317C 0000 003A             		move.w	#0,$3A(a0)
00016E66 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00016E6C 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00016E72 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00016E78 4238 FE1A                  		clr.b	($FFFFFE1A).w
00016E7C                            
00016E7C                            loc_138C2:
00016E7C 303C 008F                  		move.w	#$8F,d0
00016E80 4EB9 0000 19E4             		jsr	(PlaySound).l	; play game over music
00016E86 7003                       		moveq	#3,d0
00016E88 4EF9 0000 1DA2             		jmp	(LoadPLC).l	; load game over patterns
00016E8E                            ; ===========================================================================
00016E8E                            
00016E8E                            loc_138D4:
00016E8E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00016E94 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00016E98 6700                       		beq.s	locret_13900	; if not, branch
00016E9A 317C 0000 003A             		move.w	#0,$3A(a0)
00016EA0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00016EA6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00016EAC 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00016EB2 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00016EB8 60C2                       		bra.s	loc_138C2
00016EBA                            ; ===========================================================================
00016EBA                            
00016EBA                            locret_13900:
00016EBA 4E75                       		rts	
00016EBC                            ; End of function GameOver
00016EBC                            
00016EBC                            ; ===========================================================================
00016EBC                            ; ---------------------------------------------------------------------------
00016EBC                            ; Sonic	when the level is restarted
00016EBC                            ; ---------------------------------------------------------------------------
00016EBC                            
00016EBC                            Obj01_ResetLevel:			; XREF: Obj01_Index
00016EBC 4A68 003A                  		tst.w	$3A(a0)
00016EC0 6700                       		beq.s	locret_13914
00016EC2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00016EC6 6600                       		bne.s	locret_13914
00016EC8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00016ECE                            
00016ECE                            locret_13914:
00016ECE 4E75                       		rts	
00016ED0                            
00016ED0                            ; ---------------------------------------------------------------------------
00016ED0                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00016ED0                            ; ---------------------------------------------------------------------------
00016ED0                            
00016ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016ED0                            
00016ED0                            
00016ED0                            Sonic_Loops:				; XREF: Obj01_Control
00016ED0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00016ED6 6700                       		beq.s	loc_13926	; if yes, branch
00016ED8 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00016EDC 6600 0000                  		bne.w	locret_139C2	; if not, branch
00016EE0                            
00016EE0                            loc_13926:
00016EE0 3028 000C                  		move.w	$C(a0),d0
00016EE4 E248                       		lsr.w	#1,d0
00016EE6 0240 0380                  		andi.w	#$380,d0
00016EEA 1228 0008                  		move.b	8(a0),d1
00016EEE 0241 007F                  		andi.w	#$7F,d1
00016EF2 D041                       		add.w	d1,d0
00016EF4 43F8 A400                  		lea	($FFFFA400).w,a1
00016EF8 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00016EFC B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00016F00 6700 F892                  		beq.w	Obj01_ChkRoll
00016F04 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00016F08 6700 F88A                  		beq.w	Obj01_ChkRoll
00016F0C B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00016F10 6700                       		beq.s	loc_13976
00016F12 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00016F16 6700                       		beq.s	loc_13966
00016F18 08A8 0006 0001             		bclr	#6,1(a0)
00016F1E 4E75                       		rts	
00016F20                            ; ===========================================================================
00016F20                            
00016F20                            loc_13966:
00016F20 0828 0001 0022             		btst	#1,$22(a0)
00016F26 6700                       		beq.s	loc_13976
00016F28 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00016F2E 4E75                       		rts	
00016F30                            ; ===========================================================================
00016F30                            
00016F30                            loc_13976:
00016F30 3428 0008                  		move.w	8(a0),d2
00016F34 0C02 002C                  		cmpi.b	#$2C,d2
00016F38 6400                       		bcc.s	loc_13988
00016F3A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00016F40 4E75                       		rts	
00016F42                            ; ===========================================================================
00016F42                            
00016F42                            loc_13988:
00016F42 0C02 00E0                  		cmpi.b	#-$20,d2
00016F46 6500                       		bcs.s	loc_13996
00016F48 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00016F4E 4E75                       		rts	
00016F50                            ; ===========================================================================
00016F50                            
00016F50                            loc_13996:
00016F50 0828 0006 0001             		btst	#6,1(a0)
00016F56 6600                       		bne.s	loc_139B2
00016F58 1228 0026                  		move.b	$26(a0),d1
00016F5C 6700                       		beq.s	locret_139C2
00016F5E 0C01 0080                  		cmpi.b	#-$80,d1
00016F62 6200                       		bhi.s	locret_139C2
00016F64 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00016F6A 4E75                       		rts	
00016F6C                            ; ===========================================================================
00016F6C                            
00016F6C                            loc_139B2:
00016F6C 1228 0026                  		move.b	$26(a0),d1
00016F70 0C01 0080                  		cmpi.b	#-$80,d1
00016F74 6300                       		bls.s	locret_139C2
00016F76 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00016F7C                            
00016F7C                            locret_139C2:
00016F7C 4E75                       		rts	
00016F7E                            ; End of function Sonic_Loops
00016F7E                            
00016F7E                            ; ---------------------------------------------------------------------------
00016F7E                            ; Subroutine to	animate	Sonics sprites
00016F7E                            ; ---------------------------------------------------------------------------
00016F7E                            
00016F7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F7E                            
00016F7E                            
00016F7E                            Sonic_Animate:				; XREF: Obj01_Control; et al
00016F7E 43F9 0000 0000             		lea	(SonicAniData).l,a1
00016F84 7000                       		moveq	#0,d0
00016F86 1028 001C                  		move.b	$1C(a0),d0
00016F8A B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00016F8E 6700                       		beq.s	SAnim_Do	; if not, branch
00016F90 1140 001D                  		move.b	d0,$1D(a0)	; set to no restart
00016F94 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00016F9A 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00016FA0                            
00016FA0                            SAnim_Do:
00016FA0 D040                       		add.w	d0,d0
00016FA2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00016FA6 1011                       		move.b	(a1),d0
00016FA8 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00016FAA 1228 0022                  		move.b	$22(a0),d1
00016FAE 0201 0001                  		andi.b	#1,d1
00016FB2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00016FB8 8328 0001                  		or.b	d1,1(a0)
00016FBC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00016FC0 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00016FC2 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00016FC6                            
00016FC6                            SAnim_Do2:
00016FC6 7200                       		moveq	#0,d1
00016FC8 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00016FCC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016FD0                            ;		bmi.s	SAnim_End_FF	; if animation is complete, branch
00016FD0 0C00 00F0                  		cmpi.b	#$F0,d0
00016FD4 6400                       		bcc.s	SAnim_end_FF
00016FD6                            
00016FD6                            SAnim_Next:
00016FD6 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00016FDA 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00016FDE                            
00016FDE                            SAnim_Delay:
00016FDE 4E75                       		rts	
00016FE0                            ; ===========================================================================
00016FE0                            
00016FE0                            SAnim_End_FF:
00016FE0 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016FE2 6600                       		bne.s	SAnim_End_FE	; if not, branch
00016FE4 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00016FEA 1029 0001                  		move.b	1(a1),d0	; read sprite number
00016FEE 60E6                       		bra.s	SAnim_Next
00016FF0                            ; ===========================================================================
00016FF0                            
00016FF0                            SAnim_End_FE:
00016FF0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016FF2 6600                       		bne.s	SAnim_End_FD	; if not, branch
00016FF4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016FF8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00016FFC 9200                       		sub.b	d0,d1
00016FFE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00017002 60D2                       		bra.s	SAnim_Next
00017004                            ; ===========================================================================
00017004                            
00017004                            SAnim_End_FD:
00017004 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00017006 6600                       		bne.s	SAnim_End	; if not, branch
00017008 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001700E                            
0001700E                            SAnim_End:
0001700E 4E75                       		rts	
00017010                            ; ===========================================================================
00017010                            
00017010                            SAnim_WalkRun:				; XREF: SAnim_Do
00017010 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00017014 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00017016 5200                       		addq.b	#1,d0		; is animation walking/running?
00017018 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001701C 7200                       		moveq	#0,d1
0001701E 1028 0026                  		move.b	$26(a0),d0	; get Sonics angle
00017022 1428 0022                  		move.b	$22(a0),d2
00017026 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001702A 6600                       		bne.s	loc_13A70	; if yes, branch
0001702C 4600                       		not.b	d0		; reverse angle
0001702E                            
0001702E                            loc_13A70:
0001702E 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00017032 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00017034 7203                       		moveq	#3,d1
00017036                            
00017036                            loc_13A78:
00017036 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001703C B302                       		eor.b	d1,d2
0001703E 8528 0001                  		or.b	d2,1(a0)
00017042 0828 0005 0022             		btst	#5,$22(a0)
00017048 6600 0000                  		bne.w	SAnim_Push
0001704C E808                       		lsr.b	#4,d0		; divide angle by $10
0001704E 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00017052 3428 0014                  		move.w	$14(a0),d2	; get Sonics speed
00017056 6A00                       		bpl.s	loc_13A9C
00017058 4442                       		neg.w	d2
0001705A                            
0001705A                            loc_13A9C:
0001705A 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00017060 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00017064 6400                       		bcc.s	loc_13AB4	; if yes, branch
00017066 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
0001706C 1200                       		move.b	d0,d1
0001706E E209                       		lsr.b	#1,d1
00017070 D001                       		add.b	d1,d0
00017072                            
00017072                            loc_13AB4:
00017072 D000                       		add.b	d0,d0
00017074 1600                       		move.b	d0,d3
00017076 4442                       		neg.w	d2
00017078 0642 0800                  		addi.w	#$800,d2
0001707C 6A00                       		bpl.s	loc_13AC2
0001707E 7400                       		moveq	#0,d2
00017080                            
00017080                            loc_13AC2:
00017080 E04A                       		lsr.w	#8,d2
00017082 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00017086 6100 FF3E                  		bsr.w	SAnim_Do2
0001708A D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
0001708E 4E75                       		rts	
00017090                            ; ===========================================================================
00017090                            
00017090                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00017090 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00017092 6600                       		bne.s	SAnim_Push	; if not, branch
00017094 3428 0014                  		move.w	$14(a0),d2	; get Sonics speed
00017098 6A00                       		bpl.s	loc_13ADE
0001709A 4442                       		neg.w	d2
0001709C                            
0001709C                            loc_13ADE:
0001709C 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000170A2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000170A6 6400                       		bcc.s	loc_13AF0	; if yes, branch
000170A8 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000170AE                            
000170AE                            loc_13AF0:
000170AE 4442                       		neg.w	d2
000170B0 0642 0400                  		addi.w	#$400,d2
000170B4 6A00                       		bpl.s	loc_13AFA
000170B6 7400                       		moveq	#0,d2
000170B8                            
000170B8                            loc_13AFA:
000170B8 E04A                       		lsr.w	#8,d2
000170BA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000170BE 1228 0022                  		move.b	$22(a0),d1
000170C2 0201 0001                  		andi.b	#1,d1
000170C6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000170CC 8328 0001                  		or.b	d1,1(a0)
000170D0 6000 FEF4                  		bra.w	SAnim_Do2
000170D4                            ; ===========================================================================
000170D4                            
000170D4                            SAnim_Push:				; XREF: SAnim_RollJump
000170D4 3428 0014                  		move.w	$14(a0),d2	; get Sonics speed
000170D8 6B00                       		bmi.s	loc_13B1E
000170DA 4442                       		neg.w	d2
000170DC                            
000170DC                            loc_13B1E:
000170DC 0642 0800                  		addi.w	#$800,d2
000170E0 6A00                       		bpl.s	loc_13B26
000170E2 7400                       		moveq	#0,d2
000170E4                            
000170E4                            loc_13B26:
000170E4 EC4A                       		lsr.w	#6,d2
000170E6 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000170EA 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000170F0 1228 0022                  		move.b	$22(a0),d1
000170F4 0201 0001                  		andi.b	#1,d1
000170F8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000170FE 8328 0001                  		or.b	d1,1(a0)
00017102 6000 FEC2                  		bra.w	SAnim_Do2
00017106                            ; End of function Sonic_Animate
00017106                            
00017106                            ; ===========================================================================
00017106                            SonicAniData:
00017106                            	include "_anim\Sonic.asm"
00017106                            ; ---------------------------------------------------------------------------
00017106                            ; Animation script - Sonic
00017106                            ; ---------------------------------------------------------------------------
00017106 0000                       		dc.w SonAni_Walk-SonicAniData
00017108 0000                       		dc.w SonAni_Run-SonicAniData
0001710A 0000                       		dc.w SonAni_Roll-SonicAniData
0001710C 0000                       		dc.w SonAni_Roll2-SonicAniData
0001710E 0000                       		dc.w SonAni_Push-SonicAniData
00017110 0000                       		dc.w SonAni_Wait-SonicAniData
00017112 0000                       		dc.w SonAni_Balance-SonicAniData
00017114 0000                       		dc.w SonAni_LookUp-SonicAniData
00017116 0000                       		dc.w SonAni_Duck-SonicAniData
00017118 0000                       		dc.w SonAni_Warp1-SonicAniData
0001711A 0000                       		dc.w SonAni_Warp2-SonicAniData
0001711C 0000                       		dc.w SonAni_Warp3-SonicAniData
0001711E 0000                       		dc.w SonAni_Warp4-SonicAniData
00017120 0000                       		dc.w SonAni_Stop-SonicAniData
00017122 0000                       		dc.w SonAni_Float1-SonicAniData
00017124 0000                       		dc.w SonAni_Float2-SonicAniData
00017126 0000                       		dc.w SonAni_Spring-SonicAniData
00017128 0000                       		dc.w SonAni_LZHang-SonicAniData
0001712A 0000                       		dc.w SonAni_Leap1-SonicAniData
0001712C 0000                       		dc.w SonAni_Leap2-SonicAniData
0001712E 0000                       		dc.w SonAni_Surf-SonicAniData
00017130 0000                       		dc.w SonAni_Bubble-SonicAniData
00017132 0000                       		dc.w SonAni_Death1-SonicAniData
00017134 0000                       		dc.w SonAni_Drown-SonicAniData
00017136 0000                       		dc.w SonAni_Death2-SonicAniData
00017138 0000                       		dc.w SonAni_Shrink-SonicAniData
0001713A 0000                       		dc.w SonAni_Hurt-SonicAniData
0001713C 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001713E 0000                       		dc.w SonAni_Blank-SonicAniData
00017140 0000                       		dc.w SonAni_Float3-SonicAniData
00017142 0000                       		dc.w SonAni_Float4-SonicAniData
00017144 0000                       		dc.w SonAni_SpinDash-SonicAniData	;1F
00017146 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
0001714E FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00017156 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
0001715E FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00017166 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
0001716E 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00017184 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00017188 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
0001718C 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00017190 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00017194 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00017198 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
0001719C 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000171A0 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000171A4 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000171A8 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000171B0 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000171B4 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000171B8 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000171BE 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000171C4 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000171C8 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000171D0 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000171D4 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000171D8 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000171DC 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000171E6 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
000171EA 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000171EE 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000171F2 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000171FA 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000171FE 0058 5958 5A58 5B58 5C58+  SonAni_SpinDash:	dc.b 0, $58, $59, $58, $5A, $58, $5B, $58, $5C, $58, $5D, $FF
0001720A                            		even
0001720A                            		even
0001720A                            
0001720A                            ; ---------------------------------------------------------------------------
0001720A                            ; Sonic	pattern	loading	subroutine
0001720A                            ; ---------------------------------------------------------------------------
0001720A                            
0001720A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001720A                            
0001720A                            
0001720A                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001720A 7000                       		moveq	#0,d0
0001720C 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00017210 B038 F766                  		cmp.b	($FFFFF766).w,d0
00017214 6700                       		beq.s	locret_13C96
00017216 11C0 F766                  		move.b	d0,($FFFFF766).w
0001721A 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00017220 D040                       		add.w	d0,d0
00017222 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017226 7A00                       		moveq	#0,d5
00017228 1A1A                       		move.b	(a2)+,d5
0001722A 5345                       		subq.w	#1,d5
0001722C 6B00                       		bmi.s	locret_13C96
0001722E 383C F000                  		move.w	#($780*$20),d4	;780
00017232 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00017238                             
00017238                            SPLC_ReadEntry:
00017238 7200                       		moveq	#0,d1
0001723A 121A                       		move.b	(a2)+,d1
0001723C E149                       		lsl.w	#8,d1
0001723E 121A                       		move.b	(a2)+,d1
00017240 3601                       		move.w	d1,d3
00017242 E04B                       		lsr.w	#8,d3
00017244 0243 00F0                  		andi.w	#$F0,d3
00017248 0643 0010                  		addi.w	#$10,d3
0001724C 0241 0FFF                  		andi.w	#$FFF,d1
00017250 EB89                       		lsl.l	#5,d1
00017252 D286                       		add.l	d6,d1
00017254 3404                       		move.w	d4,d2
00017256 D843                       		add.w	d3,d4
00017258 D843                       		add.w	d3,d4
0001725A 4EB9 0000 1B98             		jsr	(QueueDMATransfer).l
00017260 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00017264                             
00017264                            locret_13C96:
00017264 4E75                       		rts	
00017266                            ; End of function LoadSonicDynPLC
00017266                            
00017266                            ; ===========================================================================
00017266                            ; ---------------------------------------------------------------------------
00017266                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00017266                            ; ---------------------------------------------------------------------------
00017266                            
00017266                            Obj0A:					; XREF: Obj_Index
00017266 7000                       		moveq	#0,d0
00017268 1028 0024                  		move.b	$24(a0),d0
0001726C 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00017270 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00017274                            ; ===========================================================================
00017274 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00017278 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001727C 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00017280 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00017284 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00017286                            ; ===========================================================================
00017286                            
00017286                            Obj0A_Main:				; XREF: Obj0A_Index
00017286 5428 0024                  		addq.b	#2,$24(a0)
0001728A 217C 0001 59B8 0004        		move.l	#Map_obj64,4(a0)
00017292 317C 8348 0002             		move.w	#$8348,2(a0)
00017298 117C 0084 0001             		move.b	#$84,1(a0)
0001729E 117C 0010 0019             		move.b	#$10,$19(a0)
000172A4 117C 0001 0018             		move.b	#1,$18(a0)
000172AA 1028 0028                  		move.b	$28(a0),d0
000172AE 6A00                       		bpl.s	loc_13D00
000172B0 5028 0024                  		addq.b	#8,$24(a0)
000172B4 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000172BC 317C 0440 0002             		move.w	#$440,2(a0)
000172C2 0240 007F                  		andi.w	#$7F,d0
000172C6 1140 0033                  		move.b	d0,$33(a0)
000172CA 6000 0000                  		bra.w	Obj0A_Countdown
000172CE                            ; ===========================================================================
000172CE                            
000172CE                            loc_13D00:
000172CE 1140 001C                  		move.b	d0,$1C(a0)
000172D2 3168 0008 0030             		move.w	8(a0),$30(a0)
000172D8 317C FF78 0012             		move.w	#-$88,$12(a0)
000172DE                            
000172DE                            Obj0A_Animate:				; XREF: Obj0A_Index
000172DE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000172E4 4EB9 0000 D0AC             		jsr	AnimateSprite
000172EA                            
000172EA                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000172EA 3038 F646                  		move.w	($FFFFF646).w,d0
000172EE B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000172F2 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000172F4 117C 0006 0024             		move.b	#6,$24(a0)
000172FA 5E28 001C                  		addq.b	#7,$1C(a0)
000172FE 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00017304 6700                       		beq.s	Obj0A_Display
00017306 6000                       		bra.s	Obj0A_Display
00017308                            ; ===========================================================================
00017308                            
00017308                            Obj0A_Wobble:
00017308 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001730C 6700                       		beq.s	loc_13D44
0001730E 5868 0030                  		addq.w	#4,$30(a0)
00017312                            
00017312                            loc_13D44:
00017312 1028 0026                  		move.b	$26(a0),d0
00017316 5228 0026                  		addq.b	#1,$26(a0)
0001731A 0240 007F                  		andi.w	#$7F,d0
0001731E 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00017324 1031 0000                  		move.b	(a1,d0.w),d0
00017328 4880                       		ext.w	d0
0001732A D068 0030                  		add.w	$30(a0),d0
0001732E 3140 0008                  		move.w	d0,8(a0)
00017332 6100                       		bsr.s	Obj0A_ShowNumber
00017334 4EBA 91A6                  		jsr	SpeedToPos
00017338 4A28 0001                  		tst.b	1(a0)
0001733C 6A00                       		bpl.s	Obj0A_Delete
0001733E 4EFA 91C2                  		jmp	DisplaySprite
00017342                            ; ===========================================================================
00017342                            
00017342                            Obj0A_Delete:
00017342 4EFA 91FA                  		jmp	DeleteObject
00017346                            ; ===========================================================================
00017346                            
00017346                            Obj0A_Display:				; XREF: Obj0A_Index
00017346 6100                       		bsr.s	Obj0A_ShowNumber
00017348 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001734E 4EB9 0000 D0AC             		jsr	AnimateSprite
00017354 4EFA 91AC                  		jmp	DisplaySprite
00017358                            ; ===========================================================================
00017358                            
00017358                            Obj0A_Delete2:				; XREF: Obj0A_Index
00017358 4EFA 91E4                  		jmp	DeleteObject
0001735C                            ; ===========================================================================
0001735C                            
0001735C                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001735C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00017362 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00017364 5368 0038                  		subq.w	#1,$38(a0)
00017368 6600                       		bne.s	Obj0A_Display2
0001736A 117C 000E 0024             		move.b	#$E,$24(a0)
00017370 5E28 001C                  		addq.b	#7,$1C(a0)
00017374 60D0                       		bra.s	Obj0A_Display
00017376                            ; ===========================================================================
00017376                            
00017376                            Obj0A_Display2:
00017376 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001737C 4EB9 0000 D0AC             		jsr	AnimateSprite
00017382 4A28 0001                  		tst.b	1(a0)
00017386 6A00                       		bpl.s	Obj0A_Delete3
00017388 4EFA 9178                  		jmp	DisplaySprite
0001738C                            ; ===========================================================================
0001738C                            
0001738C                            Obj0A_Delete3:
0001738C 4EFA 91B0                  		jmp	DeleteObject
00017390                            ; ===========================================================================
00017390                            
00017390                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00017390 4A68 0038                  		tst.w	$38(a0)
00017394 6700                       		beq.s	locret_13E1A
00017396 5368 0038                  		subq.w	#1,$38(a0)
0001739A 6600                       		bne.s	locret_13E1A
0001739C 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000173A2 6400                       		bcc.s	locret_13E1A
000173A4 317C 000F 0038             		move.w	#$F,$38(a0)
000173AA 4268 0012                  		clr.w	$12(a0)
000173AE 117C 0080 0001             		move.b	#$80,1(a0)
000173B4 3028 0008                  		move.w	8(a0),d0
000173B8 9078 F700                  		sub.w	($FFFFF700).w,d0
000173BC 0640 0080                  		addi.w	#$80,d0
000173C0 3140 0008                  		move.w	d0,8(a0)
000173C4 3028 000C                  		move.w	$C(a0),d0
000173C8 9078 F704                  		sub.w	($FFFFF704).w,d0
000173CC 0640 0080                  		addi.w	#$80,d0
000173D0 3140 000A                  		move.w	d0,$A(a0)
000173D4 117C 000C 0024             		move.b	#$C,$24(a0)
000173DA                            
000173DA                            locret_13E1A:
000173DA 4E75                       		rts	
000173DC                            ; ===========================================================================
000173DC                            Obj0A_WobbleData:
000173DC 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000173ED 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000173FE 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001740F 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001741F FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001742C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00017439 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00017446 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00017453 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001745C                            ; ===========================================================================
0001745C                            
0001745C                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001745C 4A68 002C                  		tst.w	$2C(a0)
00017460 6600 0000                  		bne.w	loc_13F86
00017464 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001746A 6400 0000                  		bcc.w	locret_1408C
0001746E 0838 0006 D022             		btst	#6,($FFFFD022).w
00017474 6700 0000                  		beq.w	locret_1408C
00017478 5368 0038                  		subq.w	#1,$38(a0)
0001747C 6A00 0000                  		bpl.w	loc_13FAC
00017480 317C 003B 0038             		move.w	#59,$38(a0)
00017486 317C 0001 0036             		move.w	#1,$36(a0)
0001748C 4EB9 0000 3772             		jsr	(RandomNumber).l
00017492 0240 0001                  		andi.w	#1,d0
00017496 1140 0034                  		move.b	d0,$34(a0)
0001749A 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001749E 0C40 0019                  		cmpi.w	#$19,d0
000174A2 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000174A4 0C40 0014                  		cmpi.w	#$14,d0
000174A8 6700                       		beq.s	Obj0A_WarnSound
000174AA 0C40 000F                  		cmpi.w	#$F,d0
000174AE 6700                       		beq.s	Obj0A_WarnSound
000174B0 0C40 000C                  		cmpi.w	#$C,d0
000174B4 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000174B6 6600                       		bne.s	loc_13F02
000174B8 303C 0092                  		move.w	#$92,d0
000174BC 4EB9 0000 19E4             		jsr	(PlaySound).l	; play countdown music
000174C2                            
000174C2                            loc_13F02:
000174C2 5328 0032                  		subq.b	#1,$32(a0)
000174C6 6A00                       		bpl.s	Obj0A_ReduceAir
000174C8 1168 0033 0032             		move.b	$33(a0),$32(a0)
000174CE 08E8 0007 0036             		bset	#7,$36(a0)
000174D4 6000                       		bra.s	Obj0A_ReduceAir
000174D6                            ; ===========================================================================
000174D6                            
000174D6                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000174D6 303C 00C2                  		move.w	#$C2,d0
000174DA 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000174E0                            
000174E0                            Obj0A_ReduceAir:
000174E0 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000174E4 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000174E8 6100 0000                  		bsr.w	ResumeMusic
000174EC 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000174F2 303C 00B2                  		move.w	#$B2,d0
000174F6 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play drowning sound
000174FC 117C 000A 0034             		move.b	#$A,$34(a0)
00017502 317C 0001 0036             		move.w	#1,$36(a0)
00017508 317C 0078 002C             		move.w	#$78,$2C(a0)
0001750E 2F08                       		move.l	a0,-(sp)
00017510 41F8 D000                  		lea	($FFFFD000).w,a0
00017514 6100 F848                  		bsr.w	Sonic_ResetOnFloor
00017518 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
0001751E 08E8 0001 0022             		bset	#1,$22(a0)
00017524 08E8 0007 0002             		bset	#7,2(a0)
0001752A 317C 0000 0012             		move.w	#0,$12(a0)
00017530 317C 0000 0010             		move.w	#0,$10(a0)
00017536 317C 0000 0014             		move.w	#0,$14(a0)
0001753C 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00017542 205F                       		movea.l	(sp)+,a0
00017544 4E75                       		rts	
00017546                            ; ===========================================================================
00017546                            
00017546                            loc_13F86:
00017546 5368 002C                  		subq.w	#1,$2C(a0)
0001754A 6600                       		bne.s	loc_13F94
0001754C 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00017552 4E75                       		rts	
00017554                            ; ===========================================================================
00017554                            
00017554                            loc_13F94:
00017554 2F08                       		move.l	a0,-(sp)
00017556 41F8 D000                  		lea	($FFFFD000).w,a0
0001755A 4EBA 8F80                  		jsr	SpeedToPos
0001755E 0668 0010 0012             		addi.w	#$10,$12(a0)
00017564 205F                       		movea.l	(sp)+,a0
00017566 6000                       		bra.s	loc_13FAC
00017568                            ; ===========================================================================
00017568                            
00017568                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00017568 6000                       		bra.s	Obj0A_MakeItem
0001756A                            ; ===========================================================================
0001756A                            
0001756A                            loc_13FAC:
0001756A 4A68 0036                  		tst.w	$36(a0)
0001756E 6700 0000                  		beq.w	locret_1408C
00017572 5368 003A                  		subq.w	#1,$3A(a0)
00017576 6A00 0000                  		bpl.w	locret_1408C
0001757A                            
0001757A                            Obj0A_MakeItem:
0001757A 4EB9 0000 3772             		jsr	(RandomNumber).l
00017580 0240 000F                  		andi.w	#$F,d0
00017584 3140 003A                  		move.w	d0,$3A(a0)
00017588 4EBA 93FE                  		jsr	SingleObjLoad
0001758C 6600 0000                  		bne.w	locret_1408C
00017590 12BC 000A                  		move.b	#$A,0(a1)	; load object
00017594 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001759A 7006                       		moveq	#6,d0
0001759C 0838 0000 D022             		btst	#0,($FFFFD022).w
000175A2 6700                       		beq.s	loc_13FF2
000175A4 4440                       		neg.w	d0
000175A6 137C 0040 0026             		move.b	#$40,$26(a1)
000175AC                            
000175AC                            loc_13FF2:
000175AC D169 0008                  		add.w	d0,8(a1)
000175B0 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000175B6 137C 0006 0028             		move.b	#6,$28(a1)
000175BC 4A68 002C                  		tst.w	$2C(a0)
000175C0 6700 0000                  		beq.w	loc_1403E
000175C4 0268 0007 003A             		andi.w	#7,$3A(a0)
000175CA 0668 0000 003A             		addi.w	#0,$3A(a0)
000175D0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000175D4 0440 000C                  		subi.w	#$C,d0
000175D8 3340 000C                  		move.w	d0,$C(a1)
000175DC 4EB9 0000 3772             		jsr	(RandomNumber).l
000175E2 1340 0026                  		move.b	d0,$26(a1)
000175E6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000175EA 0200 0003                  		andi.b	#3,d0
000175EE 6600                       		bne.s	loc_14082
000175F0 137C 000E 0028             		move.b	#$E,$28(a1)
000175F6 6000                       		bra.s	loc_14082
000175F8                            ; ===========================================================================
000175F8                            
000175F8                            loc_1403E:
000175F8 0828 0007 0036             		btst	#7,$36(a0)
000175FE 6700                       		beq.s	loc_14082
00017600 3438 FE14                  		move.w	($FFFFFE14).w,d2
00017604 E24A                       		lsr.w	#1,d2
00017606 4EB9 0000 3772             		jsr	(RandomNumber).l
0001760C 0240 0003                  		andi.w	#3,d0
00017610 6600                       		bne.s	loc_1406A
00017612 08E8 0006 0036             		bset	#6,$36(a0)
00017618 6600                       		bne.s	loc_14082
0001761A 1342 0028                  		move.b	d2,$28(a1)
0001761E 337C 001C 0038             		move.w	#$1C,$38(a1)
00017624                            
00017624                            loc_1406A:
00017624 4A28 0034                  		tst.b	$34(a0)
00017628 6600                       		bne.s	loc_14082
0001762A 08E8 0006 0036             		bset	#6,$36(a0)
00017630 6600                       		bne.s	loc_14082
00017632 1342 0028                  		move.b	d2,$28(a1)
00017636 337C 001C 0038             		move.w	#$1C,$38(a1)
0001763C                            
0001763C                            loc_14082:
0001763C 5328 0034                  		subq.b	#1,$34(a0)
00017640 6A00                       		bpl.s	locret_1408C
00017642 4268 0036                  		clr.w	$36(a0)
00017646                            
00017646                            locret_1408C:
00017646 4E75                       		rts	
00017648                            
00017648                            ; ---------------------------------------------------------------------------
00017648                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00017648                            ; ---------------------------------------------------------------------------
00017648                            
00017648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017648                            
00017648                            
00017648                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00017648 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001764E 6200                       		bhi.s	loc_140AC
00017650 303C 0082                  		move.w	#$82,d0		; play LZ music
00017654 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
0001765A 6600                       		bne.s	loc_140A6
0001765C 303C 0086                  		move.w	#$86,d0		; play SBZ music
00017660                            
00017660                            loc_140A6:
00017660 4EB9 0000 19E4             		jsr	(PlaySound).l
00017666                            
00017666                            loc_140AC:
00017666 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001766C 4238 D372                  		clr.b	($FFFFD372).w
00017670 4E75                       		rts	
00017672                            ; End of function ResumeMusic
00017672                            
00017672                            ; ===========================================================================
00017672                            Ani_obj0A:
00017672                            	include "_anim\obj0A.asm"
00017672                            ; ---------------------------------------------------------------------------
00017672                            ; Animation script - countdown numbers and bubbles (LZ)
00017672                            ; ---------------------------------------------------------------------------
00017672 0000                       		dc.w byte_140D6-Ani_obj0A
00017674 0000                       		dc.w byte_140E0-Ani_obj0A
00017676 0000                       		dc.w byte_140EA-Ani_obj0A
00017678 0000                       		dc.w byte_140F4-Ani_obj0A
0001767A 0000                       		dc.w byte_140FE-Ani_obj0A
0001767C 0000                       		dc.w byte_14108-Ani_obj0A
0001767E 0000                       		dc.w byte_14112-Ani_obj0A
00017680 0000                       		dc.w byte_14118-Ani_obj0A
00017682 0000                       		dc.w byte_14120-Ani_obj0A
00017684 0000                       		dc.w byte_14128-Ani_obj0A
00017686 0000                       		dc.w byte_14130-Ani_obj0A
00017688 0000                       		dc.w byte_14138-Ani_obj0A
0001768A 0000                       		dc.w byte_14140-Ani_obj0A
0001768C 0000                       		dc.w byte_14148-Ani_obj0A
0001768E 0000                       		dc.w byte_1414A-Ani_obj0A
00017690 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
0001769A 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000176A4 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000176AE 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000176B8 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000176C2 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000176CC 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000176D2 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000176DA 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000176E2 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000176EA 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000176F2 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000176FA 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00017702 0EFC                       byte_14148:	dc.b $E, $FC
00017704 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001770A                            		even
0001770A                            		even
0001770A                            
0001770A                            ; ---------------------------------------------------------------------------
0001770A                            ; Sprite mappings - drowning countdown numbers (LZ)
0001770A                            ; ---------------------------------------------------------------------------
0001770A                            Map_obj0A:
0001770A                            	include "_maps\obj0A.asm"
0001770A                            ; ---------------------------------------------------------------------------
0001770A                            ; Sprite mappings - drowning countdown numbers (LZ)
0001770A                            ; ---------------------------------------------------------------------------
0001770A 0000                       		dc.w byte_14152-Map_obj0A
0001770C 01                         byte_14152:	dc.b 1
0001770D E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00017712                            		even
00017712                            		even
00017712                            
00017712                            ; ===========================================================================
00017712                            ; ---------------------------------------------------------------------------
00017712                            ; Object 38 - shield and invincibility stars
00017712                            ; ---------------------------------------------------------------------------
00017712                            
00017712                            Obj38:					; XREF: Obj_Index
00017712 7000                       		moveq	#0,d0
00017714 1028 0024                  		move.b	$24(a0),d0
00017718 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
0001771C 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00017720                            ; ===========================================================================
00017720 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00017722 0000                       		dc.w Obj38_Shield-Obj38_Index
00017724 0000                       		dc.w Obj38_Stars-Obj38_Index
00017726                            ; ===========================================================================
00017726                            
00017726                            Obj38_Main:				; XREF: Obj38_Index
00017726 5428 0024                  		addq.b	#2,$24(a0)
0001772A 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001772E 6600                       		bne.s	Obj38_StarsMaps	; if not, branch
00017730 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00017738 4EF9 0000 0000             		jmp	Obj38_Continue
0001773E                            Obj38_StarsMaps:
0001773E 217C 0000 0000 0004        		move.l	#Map_obj38s,4(a0)
00017746                            Obj38_Continue:
00017746 117C 0004 0001             		move.b	#4,1(a0)
0001774C 117C 0001 0018             		move.b	#1,$18(a0)
00017752 117C 0010 0019             		move.b	#$10,$19(a0)
00017758 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001775C 6600                       		bne.s	Obj38_DoStars	; if not, branch
0001775E 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00017764 4E75                       		rts	
00017766                            ; ===========================================================================
00017766                            
00017766                            Obj38_DoStars:
00017766 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
0001776A 317C 055C 0002             		move.w	#$55C,2(a0)
00017770 4E75                       		rts	
00017772                            ; ===========================================================================
00017772                            
00017772                            Obj38_Shield:				; XREF: Obj38_Index
00017772 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00017776 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00017778 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001777C 6700                       		beq.s	Obj38_Delete	; if not, branch
0001777E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00017784 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001778A 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00017790 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00017796 4EB9 0000 D0AC             		jsr	AnimateSprite
0001779C 4EFA 8D64                  		jmp	DisplaySprite
000177A0                            ; ===========================================================================
000177A0                            
000177A0                            Obj38_RmvShield:
000177A0 4E75                       		rts	
000177A2                            ; ===========================================================================
000177A2                            
000177A2                            Obj38_Delete:
000177A2 4EFA 8D9A                  		jmp	DeleteObject
000177A6                            ; ===========================================================================
000177A6                            
000177A6                            Obj38_Stars:				; XREF: Obj38_Index
000177A6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000177AA 6700                       		beq.s	Obj38_Delete2	; if not, branch
000177AC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000177B0 1228 001C                  		move.b	$1C(a0),d1
000177B4 5301                       		subq.b	#1,d1
000177B6 6000                       		bra.s	Obj38_StarTrail
000177B8                            ; ===========================================================================
000177B8 E909                       		lsl.b	#4,d1
000177BA 5801                       		addq.b	#4,d1
000177BC 9001                       		sub.b	d1,d0
000177BE 1228 0030                  		move.b	$30(a0),d1
000177C2 9001                       		sub.b	d1,d0
000177C4 5801                       		addq.b	#4,d1
000177C6 0201 000F                  		andi.b	#$F,d1
000177CA 1141 0030                  		move.b	d1,$30(a0)
000177CE 6000                       		bra.s	Obj38_StarTrail2a
000177D0                            ; ===========================================================================
000177D0                            
000177D0                            Obj38_StarTrail:			; XREF: Obj38_Stars
000177D0 E709                       		lsl.b	#3,d1
000177D2 1401                       		move.b	d1,d2
000177D4 D201                       		add.b	d1,d1
000177D6 D202                       		add.b	d2,d1
000177D8 5801                       		addq.b	#4,d1
000177DA 9001                       		sub.b	d1,d0
000177DC 1228 0030                  		move.b	$30(a0),d1
000177E0 9001                       		sub.b	d1,d0
000177E2 5801                       		addq.b	#4,d1
000177E4 0C01 0018                  		cmpi.b	#$18,d1
000177E8 6500                       		bcs.s	Obj38_StarTrail2
000177EA 7200                       		moveq	#0,d1
000177EC                            
000177EC                            Obj38_StarTrail2:
000177EC 1141 0030                  		move.b	d1,$30(a0)
000177F0                            
000177F0                            Obj38_StarTrail2a:
000177F0 43F8 CB00                  		lea	($FFFFCB00).w,a1
000177F4 43F1 0000                  		lea	(a1,d0.w),a1
000177F8 3159 0008                  		move.w	(a1)+,8(a0)
000177FC 3159 000C                  		move.w	(a1)+,$C(a0)
00017800 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00017806 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001780C 4EB9 0000 D0AC             		jsr	AnimateSprite
00017812 4EFA 8CEE                  		jmp	DisplaySprite
00017816                            ; ===========================================================================
00017816                            
00017816                            Obj38_Delete2:				; XREF: Obj38_Stars
00017816 4EFA 8D26                  		jmp	DeleteObject
0001781A                            ; ===========================================================================
0001781A                            ; ---------------------------------------------------------------------------
0001781A                            ; Object 4A - special stage entry from beta
0001781A                            ; ---------------------------------------------------------------------------
0001781A                            
0001781A                            Obj4A:					; XREF: Obj_Index
0001781A 7000                       		moveq	#0,d0
0001781C 1028 0024                  		move.b	$24(a0),d0
00017820 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00017824 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00017828                            ; ===========================================================================
00017828 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001782A 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001782C 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001782E                            ; ===========================================================================
0001782E                            
0001782E                            Obj4A_Main:				; XREF: Obj4A_Index
0001782E 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00017832 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00017834 4E75                       		rts	
00017836                            ; ===========================================================================
00017836                            
00017836                            Obj4A_Main2:
00017836 5428 0024                  		addq.b	#2,$24(a0)
0001783A 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00017842 117C 0004 0001             		move.b	#4,1(a0)
00017848 117C 0001 0018             		move.b	#1,$18(a0)
0001784E 117C 0038 0019             		move.b	#$38,$19(a0)
00017854 317C 0541 0002             		move.w	#$541,2(a0)
0001785A 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00017860                            
00017860                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00017860 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00017866 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001786C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00017872 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00017878 4EB9 0000 D0AC             		jsr	AnimateSprite
0001787E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00017884 6600                       		bne.s	Obj4A_Display
00017886 4A38 D000                  		tst.b	($FFFFD000).w
0001788A 6700                       		beq.s	Obj4A_Display
0001788C 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00017892 303C 00A8                  		move.w	#$A8,d0
00017896 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001789C                            
0001789C                            Obj4A_Display:
0001789C 4EFA 8C64                  		jmp	DisplaySprite
000178A0                            ; ===========================================================================
000178A0                            
000178A0                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000178A0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000178A4 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000178A6 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000178AC 4EFA 8C90                  		jmp	DeleteObject
000178B0                            ; ===========================================================================
000178B0                            
000178B0                            Obj4A_Wait:
000178B0 4E75                       		rts	
000178B2                            ; ===========================================================================
000178B2                            ; ---------------------------------------------------------------------------
000178B2                            ; Object 08 - water splash (LZ)
000178B2                            ; ---------------------------------------------------------------------------
000178B2                            
000178B2                            Obj08:					; XREF: Obj_Index
000178B2 7000                       		moveq	#0,d0
000178B4 1028 0024                  		move.b	$24(a0),d0
000178B8 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000178BC 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000178C0                            ; ===========================================================================
000178C0 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000178C2 0000                       		dc.w Obj08_Display-Obj08_Index
000178C4 0000                       		dc.w Obj08_Delete-Obj08_Index
000178C6                            ; ===========================================================================
000178C6                            
000178C6                            Obj08_Main:				; XREF: Obj08_Index
000178C6 5428 0024                  		addq.b	#2,$24(a0)
000178CA 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000178D2 0028 0004 0001             		ori.b	#4,1(a0)
000178D8 117C 0001 0018             		move.b	#1,$18(a0)
000178DE 117C 0010 0019             		move.b	#$10,$19(a0)
000178E4 317C 4259 0002             		move.w	#$4259,2(a0)
000178EA 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
000178F0                            
000178F0                            Obj08_Display:				; XREF: Obj08_Index
000178F0 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
000178F6 43F9 0000 0000             		lea	(Ani_obj08).l,a1
000178FC 4EB9 0000 D0AC             		jsr	AnimateSprite
00017902 4EFA 8BFE                  		jmp	DisplaySprite
00017906                            ; ===========================================================================
00017906                            
00017906                            Obj08_Delete:				; XREF: Obj08_Index
00017906 4EFA 8C36                  		jmp	DeleteObject	; delete when animation	is complete
0001790A                            ; ===========================================================================
0001790A                            Ani_obj38:
0001790A                            	include "_anim\obj38.asm"
0001790A                            ; ---------------------------------------------------------------------------
0001790A                            ; Animation script - shield and invincibility stars
0001790A                            ; ---------------------------------------------------------------------------
0001790A 0000                       		dc.w byte_14356-Ani_obj38
0001790C 0000                       		dc.w byte_1435E-Ani_obj38
0001790E 0000                       		dc.w byte_14364-Ani_obj38
00017910 0000                       		dc.w byte_1437E-Ani_obj38
00017912 0000                       		dc.w byte_14398-Ani_obj38
00017914 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001791C 0102 0102 01FF             byte_1435E:	dc.b 1,	2, 1, 2, 1, $FF
00017922 0001 0100 0101 0002 0200+  byte_14364:	dc.b 0,	1, 1, 0, 1, 1, 0, 2, 2,	0, 2, 2, 0, 1, 1, 0, 1
00017933 0100 0202 0002 0200 FF     		dc.b 1,	0, 2, 2, 0, 2, 2, 0, $FF
0001793C 0001 0100 0100 0002 0200+  byte_1437E:	dc.b 0,	1, 1, 0, 1, 0, 0, 2, 2,	0, 2, 0, 0, 1, 1, 0, 1
0001794D 0000 0202 0002 0000 FF     		dc.b 0,	0, 2, 2, 0, 2, 0, 0, $FF
00017956 0001 0000 0100 0002 0000+  byte_14398:	dc.b 0,	1, 0, 0, 1, 0, 0, 2, 0,	0, 2, 0, 0, 1, 0, 0, 1
00017967 0000 0200 0002 0000 FF     		dc.b 0,	0, 2, 0, 0, 2, 0, 0, $FF
00017970                            		even
00017970                            		even
00017970                            
00017970                            ; ---------------------------------------------------------------------------
00017970                            ; Sprite mappings - shield and invincibility stars
00017970                            ; ---------------------------------------------------------------------------
00017970                            Map_obj38:
00017970                            	include "_maps\obj38.asm"
00017970                            ; ---------------------------------------------------------------------------
00017970                            ; Sprite mappings - shield and invincibility stars
00017970                            ; ---------------------------------------------------------------------------
00017970 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00017974 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00017978 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
0001797C 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00017980 04                         byte_143C2:	dc.b 4
00017981 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00017986 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
0001798B 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00017990 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00017995 04                         byte_143D7:	dc.b 4
00017996 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
0001799B E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000179A0 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000179A5 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000179AA 04                         byte_143EC:	dc.b 4
000179AB E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000179B0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000179B5 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000179BA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000179BF 04                         byte_14401:	dc.b 4
000179C0 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000179C5 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000179CA 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000179CF 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000179D4 04                         byte_14416:	dc.b 4
000179D5 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000179DA E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000179DF 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000179E4 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000179E9 04                         byte_1442B:	dc.b 4
000179EA E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000179EF E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000179F4 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000179F9 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000179FE 04                         byte_14440:	dc.b 4
000179FF E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00017A04 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00017A09 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00017A0E 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00017A14 00                         		even
00017A14 00                         		even
00017A14                            Map_obj38s:
00017A14                            	include "_maps\obj38s.asm"
00017A14                            ; --------------------------------------------------------------------------------
00017A14                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017A14                            ; --------------------------------------------------------------------------------
00017A14                            
00017A14                            SME_hedwk:	
00017A14 0000 0000                  		dc.w SME_hedwk_6-SME_hedwk, SME_hedwk_7-SME_hedwk	
00017A18 0000                       		dc.w SME_hedwk_1C-SME_hedwk	
00017A1A 00                         SME_hedwk_6:	dc.b 0	
00017A1B 04                         SME_hedwk_7:	dc.b 4	
00017A1C E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00017A21 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00017A26 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
00017A2B 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
00017A30 04                         SME_hedwk_1C:	dc.b 4	
00017A31 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017A36 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00017A3B 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
00017A40 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
00017A46 00                         		even
00017A46 00                         		even
00017A46                            Ani_obj4A:
00017A46                            	include "_anim\obj4A.asm"
00017A46                            ; ---------------------------------------------------------------------------
00017A46                            ; Animation script - special stage entry effect from beta
00017A46                            ; ---------------------------------------------------------------------------
00017A46 0000                       		dc.w byte_14458-Ani_obj4A
00017A48 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00017A5C                            		even
00017A5C                            		even
00017A5C                            
00017A5C                            ; ---------------------------------------------------------------------------
00017A5C                            ; Sprite mappings - special stage entry	from beta
00017A5C                            ; ---------------------------------------------------------------------------
00017A5C                            Map_obj4A:
00017A5C                            	include "_maps\obj4A.asm"
00017A5C                            ; ---------------------------------------------------------------------------
00017A5C                            ; Sprite mappings - special stage entry	from beta
00017A5C                            ; ---------------------------------------------------------------------------
00017A5C 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00017A60 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00017A64 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00017A68 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00017A6C 03                         byte_1447C:	dc.b 3
00017A6D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00017A72 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00017A77 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017A7C 03                         byte_1448C:	dc.b 3
00017A7D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00017A82 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00017A87 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00017A8C 05                         byte_1449C:	dc.b 5
00017A8D E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00017A92 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00017A97 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00017A9C 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00017AA1 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00017AA6 09                         byte_144B6:	dc.b 9
00017AA7 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00017AAC F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00017AB1 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00017AB6 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00017ABB F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00017AC0 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00017AC5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017ACA 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00017ACF F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00017AD4 12                         byte_144E4:	dc.b $12
00017AD5 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00017ADA F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00017ADF F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00017AE4 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00017AE9 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00017AEE 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00017AF3 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00017AF8 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00017AFD 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00017B02 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00017B07 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00017B0C 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00017B11 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017B16 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00017B1B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00017B20 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00017B25 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00017B2A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00017B2F 11                         byte_1453F:	dc.b $11
00017B30 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00017B35 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00017B3A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00017B3F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00017B44 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017B49 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017B4E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00017B53 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00017B58 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00017B5D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00017B62 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00017B67 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00017B6C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00017B71 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00017B76 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017B7B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00017B80 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00017B85 09                         byte_14595:	dc.b 9
00017B86 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00017B8B 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00017B90 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00017B95 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00017B9A FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00017B9F FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00017BA4 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00017BA9 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00017BAE 04                         		dc.b 4
00017BAF 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00017BB4                            		even
00017BB4                            		even
00017BB4                            
00017BB4                            Ani_obj08:
00017BB4                            	include "_anim\obj08.asm"
00017BB4                            ; ---------------------------------------------------------------------------
00017BB4                            ; Animation script - water splash (LZ)
00017BB4                            ; ---------------------------------------------------------------------------
00017BB4 0000                       		dc.w byte_145C6-Ani_obj08
00017BB6 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00017BBC                            		even
00017BBC                            		even
00017BBC                            
00017BBC                            ; ---------------------------------------------------------------------------
00017BBC                            ; Sprite mappings - water splash (LZ)
00017BBC                            ; ---------------------------------------------------------------------------
00017BBC                            Map_obj08:
00017BBC                            	include "_maps\obj08.asm"
00017BBC                            ; ---------------------------------------------------------------------------
00017BBC                            ; Sprite mappings - water splash (LZ)
00017BBC                            ; ---------------------------------------------------------------------------
00017BBC 0000                       		dc.w byte_145D2-Map_obj08
00017BBE 0000                       		dc.w byte_145DD-Map_obj08
00017BC0 0000                       		dc.w byte_145E8-Map_obj08
00017BC2 02                         byte_145D2:	dc.b 2
00017BC3 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00017BC8 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00017BCD 02                         byte_145DD:	dc.b 2
00017BCE E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00017BD3 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00017BD8 01                         byte_145E8:	dc.b 1
00017BD9 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00017BDE                            		even
00017BDE                            		even
00017BDE                            
00017BDE                            ; ---------------------------------------------------------------------------
00017BDE                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00017BDE                            ; ---------------------------------------------------------------------------
00017BDE                            
00017BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BDE                            
00017BDE                            
00017BDE                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00017BDE 0828 0003 0022             		btst	#3,$22(a0)
00017BE4 6700                       		beq.s	loc_14602
00017BE6 7000                       		moveq	#0,d0
00017BE8 11C0 F768                  		move.b	d0,($FFFFF768).w
00017BEC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017BF0 4E75                       		rts	
00017BF2                            ; ===========================================================================
00017BF2                            
00017BF2                            loc_14602:
00017BF2 7003                       		moveq	#3,d0
00017BF4 11C0 F768                  		move.b	d0,($FFFFF768).w
00017BF8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017BFC 1028 0026                  		move.b	$26(a0),d0
00017C00 0600 0020                  		addi.b	#$20,d0
00017C04 6A00                       		bpl.s	loc_14624
00017C06 1028 0026                  		move.b	$26(a0),d0
00017C0A 6A00                       		bpl.s	loc_1461E
00017C0C 5300                       		subq.b	#1,d0
00017C0E                            
00017C0E                            loc_1461E:
00017C0E 0600 0020                  		addi.b	#$20,d0
00017C12 6000                       		bra.s	loc_14630
00017C14                            ; ===========================================================================
00017C14                            
00017C14                            loc_14624:
00017C14 1028 0026                  		move.b	$26(a0),d0
00017C18 6A00                       		bpl.s	loc_1462C
00017C1A 5200                       		addq.b	#1,d0
00017C1C                            
00017C1C                            loc_1462C:
00017C1C 0600 001F                  		addi.b	#$1F,d0
00017C20                            
00017C20                            loc_14630:
00017C20 0200 00C0                  		andi.b	#$C0,d0
00017C24 0C00 0040                  		cmpi.b	#$40,d0
00017C28 6700 0000                  		beq.w	Sonic_WalkVertL
00017C2C 0C00 0080                  		cmpi.b	#$80,d0
00017C30 6700 0000                  		beq.w	Sonic_WalkCeiling
00017C34 0C00 00C0                  		cmpi.b	#$C0,d0
00017C38 6700 0000                  		beq.w	Sonic_WalkVertR
00017C3C 3428 000C                  		move.w	$C(a0),d2
00017C40 3628 0008                  		move.w	8(a0),d3
00017C44 7000                       		moveq	#0,d0
00017C46 1028 0016                  		move.b	$16(a0),d0
00017C4A 4880                       		ext.w	d0
00017C4C D440                       		add.w	d0,d2
00017C4E 1028 0017                  		move.b	$17(a0),d0
00017C52 4880                       		ext.w	d0
00017C54 D640                       		add.w	d0,d3
00017C56 49F8 F768                  		lea	($FFFFF768).w,a4
00017C5A 367C 0010                  		movea.w	#$10,a3
00017C5E 3C3C 0000                  		move.w	#0,d6
00017C62 7A0D                       		moveq	#$D,d5
00017C64 6100 0000                  		bsr.w	FindFloor
00017C68 3F01                       		move.w	d1,-(sp)
00017C6A 3428 000C                  		move.w	$C(a0),d2
00017C6E 3628 0008                  		move.w	8(a0),d3
00017C72 7000                       		moveq	#0,d0
00017C74 1028 0016                  		move.b	$16(a0),d0
00017C78 4880                       		ext.w	d0
00017C7A D440                       		add.w	d0,d2
00017C7C 1028 0017                  		move.b	$17(a0),d0
00017C80 4880                       		ext.w	d0
00017C82 4440                       		neg.w	d0
00017C84 D640                       		add.w	d0,d3
00017C86 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017C8A 367C 0010                  		movea.w	#$10,a3
00017C8E 3C3C 0000                  		move.w	#0,d6
00017C92 7A0D                       		moveq	#$D,d5
00017C94 6100 0000                  		bsr.w	FindFloor
00017C98 301F                       		move.w	(sp)+,d0
00017C9A 6100 0000                  		bsr.w	Sonic_Angle
00017C9E 4A41                       		tst.w	d1
00017CA0 6700                       		beq.s	locret_146BE
00017CA2 6A00                       		bpl.s	loc_146C0
00017CA4 0C41 FFF2                  		cmpi.w	#-$E,d1
00017CA8 6D00                       		blt.s	locret_146E6
00017CAA D368 000C                  		add.w	d1,$C(a0)
00017CAE                            
00017CAE                            locret_146BE:
00017CAE 4E75                       		rts	
00017CB0                            ; ===========================================================================
00017CB0                            
00017CB0                            loc_146C0:
00017CB0 0C41 000E                  		cmpi.w	#$E,d1
00017CB4 6E00                       		bgt.s	loc_146CC
00017CB6                            
00017CB6                            loc_146C6:
00017CB6 D368 000C                  		add.w	d1,$C(a0)
00017CBA 4E75                       		rts	
00017CBC                            ; ===========================================================================
00017CBC                            
00017CBC                            loc_146CC:
00017CBC 4A28 0038                  		tst.b	$38(a0)
00017CC0 66F4                       		bne.s	loc_146C6
00017CC2 08E8 0001 0022             		bset	#1,$22(a0)
00017CC8 08A8 0005 0022             		bclr	#5,$22(a0)
00017CCE 117C 0001 001D             		move.b	#1,$1D(a0)
00017CD4 4E75                       		rts	
00017CD6                            ; ===========================================================================
00017CD6                            
00017CD6                            locret_146E6:
00017CD6 4E75                       		rts	
00017CD8                            ; End of function Sonic_AnglePos
00017CD8                            
00017CD8                            ; ===========================================================================
00017CD8 2428 0008                  		move.l	8(a0),d2
00017CDC 3028 0010                  		move.w	$10(a0),d0
00017CE0 48C0                       		ext.l	d0
00017CE2 E180                       		asl.l	#8,d0
00017CE4 9480                       		sub.l	d0,d2
00017CE6 2142 0008                  		move.l	d2,8(a0)
00017CEA 303C 0038                  		move.w	#$38,d0
00017CEE 48C0                       		ext.l	d0
00017CF0 E180                       		asl.l	#8,d0
00017CF2 9680                       		sub.l	d0,d3
00017CF4 2143 000C                  		move.l	d3,$C(a0)
00017CF8 4E75                       		rts	
00017CFA                            ; ===========================================================================
00017CFA                            
00017CFA                            locret_1470A:
00017CFA 4E75                       		rts	
00017CFC                            ; ===========================================================================
00017CFC 2628 000C                  		move.l	$C(a0),d3
00017D00 3028 0012                  		move.w	$12(a0),d0
00017D04 0440 0038                  		subi.w	#$38,d0
00017D08 3140 0012                  		move.w	d0,$12(a0)
00017D0C 48C0                       		ext.l	d0
00017D0E E180                       		asl.l	#8,d0
00017D10 9680                       		sub.l	d0,d3
00017D12 2143 000C                  		move.l	d3,$C(a0)
00017D16 4E75                       		rts	
00017D18 4E75                       		rts	
00017D1A                            ; ===========================================================================
00017D1A 2428 0008                  		move.l	8(a0),d2
00017D1E 2628 000C                  		move.l	$C(a0),d3
00017D22 3028 0010                  		move.w	$10(a0),d0
00017D26 48C0                       		ext.l	d0
00017D28 E180                       		asl.l	#8,d0
00017D2A 9480                       		sub.l	d0,d2
00017D2C 3028 0012                  		move.w	$12(a0),d0
00017D30 48C0                       		ext.l	d0
00017D32 E180                       		asl.l	#8,d0
00017D34 9680                       		sub.l	d0,d3
00017D36 2142 0008                  		move.l	d2,8(a0)
00017D3A 2143 000C                  		move.l	d3,$C(a0)
00017D3E 4E75                       		rts	
00017D40                            
00017D40                            ; ---------------------------------------------------------------------------
00017D40                            ; Subroutine to	change Sonic's angle as he walks along the floor
00017D40                            ; ---------------------------------------------------------------------------
00017D40                            
00017D40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D40                            
00017D40                            
00017D40                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00017D40 1438 F76A                  		move.b	($FFFFF76A).w,d2
00017D44 B240                       		cmp.w	d0,d1
00017D46 6F00                       		ble.s	loc_1475E
00017D48 1438 F768                  		move.b	($FFFFF768).w,d2
00017D4C 3200                       		move.w	d0,d1
00017D4E                            
00017D4E                            loc_1475E:
00017D4E 0802 0000                  		btst	#0,d2
00017D52 6600                       		bne.s	loc_1476A
00017D54 1142 0026                  		move.b	d2,$26(a0)
00017D58 4E75                       		rts	
00017D5A                            ; ===========================================================================
00017D5A                            
00017D5A                            loc_1476A:
00017D5A 1428 0026                  		move.b	$26(a0),d2
00017D5E 0602 0020                  		addi.b	#$20,d2
00017D62 0202 00C0                  		andi.b	#$C0,d2
00017D66 1142 0026                  		move.b	d2,$26(a0)
00017D6A 4E75                       		rts	
00017D6C                            ; End of function Sonic_Angle
00017D6C                            
00017D6C                            ; ---------------------------------------------------------------------------
00017D6C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00017D6C                            ; ---------------------------------------------------------------------------
00017D6C                            
00017D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D6C                            
00017D6C                            
00017D6C                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00017D6C 3428 000C                  		move.w	$C(a0),d2
00017D70 3628 0008                  		move.w	8(a0),d3
00017D74 7000                       		moveq	#0,d0
00017D76 1028 0017                  		move.b	$17(a0),d0
00017D7A 4880                       		ext.w	d0
00017D7C 4440                       		neg.w	d0
00017D7E D440                       		add.w	d0,d2
00017D80 1028 0016                  		move.b	$16(a0),d0
00017D84 4880                       		ext.w	d0
00017D86 D640                       		add.w	d0,d3
00017D88 49F8 F768                  		lea	($FFFFF768).w,a4
00017D8C 367C 0010                  		movea.w	#$10,a3
00017D90 3C3C 0000                  		move.w	#0,d6
00017D94 7A0D                       		moveq	#$D,d5
00017D96 6100 0000                  		bsr.w	FindWall
00017D9A 3F01                       		move.w	d1,-(sp)
00017D9C 3428 000C                  		move.w	$C(a0),d2
00017DA0 3628 0008                  		move.w	8(a0),d3
00017DA4 7000                       		moveq	#0,d0
00017DA6 1028 0017                  		move.b	$17(a0),d0
00017DAA 4880                       		ext.w	d0
00017DAC D440                       		add.w	d0,d2
00017DAE 1028 0016                  		move.b	$16(a0),d0
00017DB2 4880                       		ext.w	d0
00017DB4 D640                       		add.w	d0,d3
00017DB6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017DBA 367C 0010                  		movea.w	#$10,a3
00017DBE 3C3C 0000                  		move.w	#0,d6
00017DC2 7A0D                       		moveq	#$D,d5
00017DC4 6100 0000                  		bsr.w	FindWall
00017DC8 301F                       		move.w	(sp)+,d0
00017DCA 6100 FF74                  		bsr.w	Sonic_Angle
00017DCE 4A41                       		tst.w	d1
00017DD0 6700                       		beq.s	locret_147F0
00017DD2 6A00                       		bpl.s	loc_147F2
00017DD4 0C41 FFF2                  		cmpi.w	#-$E,d1
00017DD8 6D00 FF20                  		blt.w	locret_1470A
00017DDC D368 0008                  		add.w	d1,8(a0)
00017DE0                            
00017DE0                            locret_147F0:
00017DE0 4E75                       		rts	
00017DE2                            ; ===========================================================================
00017DE2                            
00017DE2                            loc_147F2:
00017DE2 0C41 000E                  		cmpi.w	#$E,d1
00017DE6 6E00                       		bgt.s	loc_147FE
00017DE8                            
00017DE8                            loc_147F8:
00017DE8 D368 0008                  		add.w	d1,8(a0)
00017DEC 4E75                       		rts	
00017DEE                            ; ===========================================================================
00017DEE                            
00017DEE                            loc_147FE:
00017DEE 4A28 0038                  		tst.b	$38(a0)
00017DF2 66F4                       		bne.s	loc_147F8
00017DF4 08E8 0001 0022             		bset	#1,$22(a0)
00017DFA 08A8 0005 0022             		bclr	#5,$22(a0)
00017E00 117C 0001 001D             		move.b	#1,$1D(a0)
00017E06 4E75                       		rts	
00017E08                            ; End of function Sonic_WalkVertR
00017E08                            
00017E08                            ; ---------------------------------------------------------------------------
00017E08                            ; Subroutine allowing Sonic to walk upside-down
00017E08                            ; ---------------------------------------------------------------------------
00017E08                            
00017E08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E08                            
00017E08                            
00017E08                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00017E08 3428 000C                  		move.w	$C(a0),d2
00017E0C 3628 0008                  		move.w	8(a0),d3
00017E10 7000                       		moveq	#0,d0
00017E12 1028 0016                  		move.b	$16(a0),d0
00017E16 4880                       		ext.w	d0
00017E18 9440                       		sub.w	d0,d2
00017E1A 0A42 000F                  		eori.w	#$F,d2
00017E1E 1028 0017                  		move.b	$17(a0),d0
00017E22 4880                       		ext.w	d0
00017E24 D640                       		add.w	d0,d3
00017E26 49F8 F768                  		lea	($FFFFF768).w,a4
00017E2A 367C FFF0                  		movea.w	#-$10,a3
00017E2E 3C3C 1000                  		move.w	#$1000,d6
00017E32 7A0D                       		moveq	#$D,d5
00017E34 6100 0000                  		bsr.w	FindFloor
00017E38 3F01                       		move.w	d1,-(sp)
00017E3A 3428 000C                  		move.w	$C(a0),d2
00017E3E 3628 0008                  		move.w	8(a0),d3
00017E42 7000                       		moveq	#0,d0
00017E44 1028 0016                  		move.b	$16(a0),d0
00017E48 4880                       		ext.w	d0
00017E4A 9440                       		sub.w	d0,d2
00017E4C 0A42 000F                  		eori.w	#$F,d2
00017E50 1028 0017                  		move.b	$17(a0),d0
00017E54 4880                       		ext.w	d0
00017E56 9640                       		sub.w	d0,d3
00017E58 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E5C 367C FFF0                  		movea.w	#-$10,a3
00017E60 3C3C 1000                  		move.w	#$1000,d6
00017E64 7A0D                       		moveq	#$D,d5
00017E66 6100 0000                  		bsr.w	FindFloor
00017E6A 301F                       		move.w	(sp)+,d0
00017E6C 6100 FED2                  		bsr.w	Sonic_Angle
00017E70 4A41                       		tst.w	d1
00017E72 6700                       		beq.s	locret_14892
00017E74 6A00                       		bpl.s	loc_14894
00017E76 0C41 FFF2                  		cmpi.w	#-$E,d1
00017E7A 6D00 FE5A                  		blt.w	locret_146E6
00017E7E 9368 000C                  		sub.w	d1,$C(a0)
00017E82                            
00017E82                            locret_14892:
00017E82 4E75                       		rts	
00017E84                            ; ===========================================================================
00017E84                            
00017E84                            loc_14894:
00017E84 0C41 000E                  		cmpi.w	#$E,d1
00017E88 6E00                       		bgt.s	loc_148A0
00017E8A                            
00017E8A                            loc_1489A:
00017E8A 9368 000C                  		sub.w	d1,$C(a0)
00017E8E 4E75                       		rts	
00017E90                            ; ===========================================================================
00017E90                            
00017E90                            loc_148A0:
00017E90 4A28 0038                  		tst.b	$38(a0)
00017E94 66F4                       		bne.s	loc_1489A
00017E96 08E8 0001 0022             		bset	#1,$22(a0)
00017E9C 08A8 0005 0022             		bclr	#5,$22(a0)
00017EA2 117C 0001 001D             		move.b	#1,$1D(a0)
00017EA8 4E75                       		rts	
00017EAA                            ; End of function Sonic_WalkCeiling
00017EAA                            
00017EAA                            ; ---------------------------------------------------------------------------
00017EAA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00017EAA                            ; ---------------------------------------------------------------------------
00017EAA                            
00017EAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EAA                            
00017EAA                            
00017EAA                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00017EAA 3428 000C                  		move.w	$C(a0),d2
00017EAE 3628 0008                  		move.w	8(a0),d3
00017EB2 7000                       		moveq	#0,d0
00017EB4 1028 0017                  		move.b	$17(a0),d0
00017EB8 4880                       		ext.w	d0
00017EBA 9440                       		sub.w	d0,d2
00017EBC 1028 0016                  		move.b	$16(a0),d0
00017EC0 4880                       		ext.w	d0
00017EC2 9640                       		sub.w	d0,d3
00017EC4 0A43 000F                  		eori.w	#$F,d3
00017EC8 49F8 F768                  		lea	($FFFFF768).w,a4
00017ECC 367C FFF0                  		movea.w	#-$10,a3
00017ED0 3C3C 0800                  		move.w	#$800,d6
00017ED4 7A0D                       		moveq	#$D,d5
00017ED6 6100 0000                  		bsr.w	FindWall
00017EDA 3F01                       		move.w	d1,-(sp)
00017EDC 3428 000C                  		move.w	$C(a0),d2
00017EE0 3628 0008                  		move.w	8(a0),d3
00017EE4 7000                       		moveq	#0,d0
00017EE6 1028 0017                  		move.b	$17(a0),d0
00017EEA 4880                       		ext.w	d0
00017EEC D440                       		add.w	d0,d2
00017EEE 1028 0016                  		move.b	$16(a0),d0
00017EF2 4880                       		ext.w	d0
00017EF4 9640                       		sub.w	d0,d3
00017EF6 0A43 000F                  		eori.w	#$F,d3
00017EFA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017EFE 367C FFF0                  		movea.w	#-$10,a3
00017F02 3C3C 0800                  		move.w	#$800,d6
00017F06 7A0D                       		moveq	#$D,d5
00017F08 6100 0000                  		bsr.w	FindWall
00017F0C 301F                       		move.w	(sp)+,d0
00017F0E 6100 FE30                  		bsr.w	Sonic_Angle
00017F12 4A41                       		tst.w	d1
00017F14 6700                       		beq.s	locret_14934
00017F16 6A00                       		bpl.s	loc_14936
00017F18 0C41 FFF2                  		cmpi.w	#-$E,d1
00017F1C 6D00 FDDC                  		blt.w	locret_1470A
00017F20 9368 0008                  		sub.w	d1,8(a0)
00017F24                            
00017F24                            locret_14934:
00017F24 4E75                       		rts	
00017F26                            ; ===========================================================================
00017F26                            
00017F26                            loc_14936:
00017F26 0C41 000E                  		cmpi.w	#$E,d1
00017F2A 6E00                       		bgt.s	loc_14942
00017F2C                            
00017F2C                            loc_1493C:
00017F2C 9368 0008                  		sub.w	d1,8(a0)
00017F30 4E75                       		rts	
00017F32                            ; ===========================================================================
00017F32                            
00017F32                            loc_14942:
00017F32 4A28 0038                  		tst.b	$38(a0)
00017F36 66F4                       		bne.s	loc_1493C
00017F38 08E8 0001 0022             		bset	#1,$22(a0)
00017F3E 08A8 0005 0022             		bclr	#5,$22(a0)
00017F44 117C 0001 001D             		move.b	#1,$1D(a0)
00017F4A 4E75                       		rts	
00017F4C                            ; End of function Sonic_WalkVertL
00017F4C                            
00017F4C                            ; ---------------------------------------------------------------------------
00017F4C                            ; Subroutine to	find which tile	the object is standing on
00017F4C                            ; ---------------------------------------------------------------------------
00017F4C                            
00017F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F4C                            
00017F4C                            
00017F4C                            Floor_ChkTile:				; XREF: FindFloor; et al
00017F4C 3002                       		move.w	d2,d0
00017F4E E248                       		lsr.w	#1,d0
00017F50 0240 0380                  		andi.w	#$380,d0
00017F54 3203                       		move.w	d3,d1
00017F56 E049                       		lsr.w	#8,d1
00017F58 0241 007F                  		andi.w	#$7F,d1
00017F5C D041                       		add.w	d1,d0
00017F5E 72FF                       		moveq	#-1,d1
00017F60 43F8 A400                  		lea	($FFFFA400).w,a1
00017F64 1231 0000                  		move.b	(a1,d0.w),d1
00017F68 6700                       		beq.s	loc_14996
00017F6A 6B00                       		bmi.s	loc_1499A
00017F6C 5301                       		subq.b	#1,d1
00017F6E 4881                       		ext.w	d1
00017F70 EE59                       		ror.w	#7,d1
00017F72 3002                       		move.w	d2,d0
00017F74 D040                       		add.w	d0,d0
00017F76 0240 01E0                  		andi.w	#$1E0,d0
00017F7A D240                       		add.w	d0,d1
00017F7C 3003                       		move.w	d3,d0
00017F7E E648                       		lsr.w	#3,d0
00017F80 0240 001E                  		andi.w	#$1E,d0
00017F84 D240                       		add.w	d0,d1
00017F86                            
00017F86                            loc_14996:
00017F86 2241                       		movea.l	d1,a1
00017F88 4E75                       		rts	
00017F8A                            ; ===========================================================================
00017F8A                            
00017F8A                            loc_1499A:
00017F8A 0241 007F                  		andi.w	#$7F,d1
00017F8E 0828 0006 0001             		btst	#6,1(a0)
00017F94 6700                       		beq.s	loc_149B2
00017F96 5241                       		addq.w	#1,d1
00017F98 0C41 0029                  		cmpi.w	#$29,d1
00017F9C 6600                       		bne.s	loc_149B2
00017F9E 323C 0051                  		move.w	#$51,d1
00017FA2                            
00017FA2                            loc_149B2:
00017FA2 5301                       		subq.b	#1,d1
00017FA4 EE59                       		ror.w	#7,d1
00017FA6 3002                       		move.w	d2,d0
00017FA8 D040                       		add.w	d0,d0
00017FAA 0240 01E0                  		andi.w	#$1E0,d0
00017FAE D240                       		add.w	d0,d1
00017FB0 3003                       		move.w	d3,d0
00017FB2 E648                       		lsr.w	#3,d0
00017FB4 0240 001E                  		andi.w	#$1E,d0
00017FB8 D240                       		add.w	d0,d1
00017FBA 2241                       		movea.l	d1,a1
00017FBC 4E75                       		rts	
00017FBE                            ; End of function Floor_ChkTile
00017FBE                            
00017FBE                            
00017FBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FBE                            
00017FBE                            
00017FBE                            FindFloor:				; XREF: Sonic_AnglePos; et al
00017FBE 618C                       		bsr.s	Floor_ChkTile
00017FC0 3011                       		move.w	(a1),d0
00017FC2 3800                       		move.w	d0,d4
00017FC4 0240 07FF                  		andi.w	#$7FF,d0
00017FC8 6700                       		beq.s	loc_149DE
00017FCA 0B04                       		btst	d5,d4
00017FCC 6600                       		bne.s	loc_149EC
00017FCE                            
00017FCE                            loc_149DE:
00017FCE D44B                       		add.w	a3,d2
00017FD0 6100 0000                  		bsr.w	FindFloor2
00017FD4 944B                       		sub.w	a3,d2
00017FD6 0641 0010                  		addi.w	#$10,d1
00017FDA 4E75                       		rts	
00017FDC                            ; ===========================================================================
00017FDC                            
00017FDC                            loc_149EC:
00017FDC 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00017FE0 1032 0000                  		move.b	(a2,d0.w),d0
00017FE4 0240 00FF                  		andi.w	#$FF,d0
00017FE8 67E4                       		beq.s	loc_149DE
00017FEA 45F9 0000 0000             		lea	(AngleMap).l,a2
00017FF0 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017FF4 E948                       		lsl.w	#4,d0
00017FF6 3203                       		move.w	d3,d1
00017FF8 0804 000B                  		btst	#$B,d4
00017FFC 6700                       		beq.s	loc_14A12
00017FFE 4641                       		not.w	d1
00018000 4414                       		neg.b	(a4)
00018002                            
00018002                            loc_14A12:
00018002 0804 000C                  		btst	#$C,d4
00018006 6700                       		beq.s	loc_14A22
00018008 0614 0040                  		addi.b	#$40,(a4)
0001800C 4414                       		neg.b	(a4)
0001800E 0414 0040                  		subi.b	#$40,(a4)
00018012                            
00018012                            loc_14A22:
00018012 0241 000F                  		andi.w	#$F,d1
00018016 D240                       		add.w	d0,d1
00018018 45F9 0000 0000             		lea	(CollArray1).l,a2
0001801E 1032 1000                  		move.b	(a2,d1.w),d0
00018022 4880                       		ext.w	d0
00018024 BD44                       		eor.w	d6,d4
00018026 0804 000C                  		btst	#$C,d4
0001802A 6700                       		beq.s	loc_14A3E
0001802C 4440                       		neg.w	d0
0001802E                            
0001802E                            loc_14A3E:
0001802E 4A40                       		tst.w	d0
00018030 679C                       		beq.s	loc_149DE
00018032 6B00                       		bmi.s	loc_14A5A
00018034 0C00 0010                  		cmpi.b	#$10,d0
00018038 6700                       		beq.s	loc_14A66
0001803A 3202                       		move.w	d2,d1
0001803C 0241 000F                  		andi.w	#$F,d1
00018040 D041                       		add.w	d1,d0
00018042 323C 000F                  		move.w	#$F,d1
00018046 9240                       		sub.w	d0,d1
00018048 4E75                       		rts	
0001804A                            ; ===========================================================================
0001804A                            
0001804A                            loc_14A5A:
0001804A 3202                       		move.w	d2,d1
0001804C 0241 000F                  		andi.w	#$F,d1
00018050 D041                       		add.w	d1,d0
00018052 6A00 FF7A                  		bpl.w	loc_149DE
00018056                            
00018056                            loc_14A66:
00018056 944B                       		sub.w	a3,d2
00018058 6100 0000                  		bsr.w	FindFloor2
0001805C D44B                       		add.w	a3,d2
0001805E 0441 0010                  		subi.w	#$10,d1
00018062 4E75                       		rts	
00018064                            ; End of function FindFloor
00018064                            
00018064                            
00018064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018064                            
00018064                            
00018064                            FindFloor2:				; XREF: FindFloor
00018064 6100 FEE6                  		bsr.w	Floor_ChkTile
00018068 3011                       		move.w	(a1),d0
0001806A 3800                       		move.w	d0,d4
0001806C 0240 07FF                  		andi.w	#$7FF,d0
00018070 6700                       		beq.s	loc_14A86
00018072 0B04                       		btst	d5,d4
00018074 6600                       		bne.s	loc_14A94
00018076                            
00018076                            loc_14A86:
00018076 323C 000F                  		move.w	#$F,d1
0001807A 3002                       		move.w	d2,d0
0001807C 0240 000F                  		andi.w	#$F,d0
00018080 9240                       		sub.w	d0,d1
00018082 4E75                       		rts	
00018084                            ; ===========================================================================
00018084                            
00018084                            loc_14A94:
00018084 2478 F796                  		movea.l	($FFFFF796).w,a2
00018088 1032 0000                  		move.b	(a2,d0.w),d0
0001808C 0240 00FF                  		andi.w	#$FF,d0
00018090 67E4                       		beq.s	loc_14A86
00018092 45F9 0000 0000             		lea	(AngleMap).l,a2
00018098 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001809C E948                       		lsl.w	#4,d0
0001809E 3203                       		move.w	d3,d1
000180A0 0804 000B                  		btst	#$B,d4
000180A4 6700                       		beq.s	loc_14ABA
000180A6 4641                       		not.w	d1
000180A8 4414                       		neg.b	(a4)
000180AA                            
000180AA                            loc_14ABA:
000180AA 0804 000C                  		btst	#$C,d4
000180AE 6700                       		beq.s	loc_14ACA
000180B0 0614 0040                  		addi.b	#$40,(a4)
000180B4 4414                       		neg.b	(a4)
000180B6 0414 0040                  		subi.b	#$40,(a4)
000180BA                            
000180BA                            loc_14ACA:
000180BA 0241 000F                  		andi.w	#$F,d1
000180BE D240                       		add.w	d0,d1
000180C0 45F9 0000 0000             		lea	(CollArray1).l,a2
000180C6 1032 1000                  		move.b	(a2,d1.w),d0
000180CA 4880                       		ext.w	d0
000180CC BD44                       		eor.w	d6,d4
000180CE 0804 000C                  		btst	#$C,d4
000180D2 6700                       		beq.s	loc_14AE6
000180D4 4440                       		neg.w	d0
000180D6                            
000180D6                            loc_14AE6:
000180D6 4A40                       		tst.w	d0
000180D8 679C                       		beq.s	loc_14A86
000180DA 6B00                       		bmi.s	loc_14AFC
000180DC 3202                       		move.w	d2,d1
000180DE 0241 000F                  		andi.w	#$F,d1
000180E2 D041                       		add.w	d1,d0
000180E4 323C 000F                  		move.w	#$F,d1
000180E8 9240                       		sub.w	d0,d1
000180EA 4E75                       		rts	
000180EC                            ; ===========================================================================
000180EC                            
000180EC                            loc_14AFC:
000180EC 3202                       		move.w	d2,d1
000180EE 0241 000F                  		andi.w	#$F,d1
000180F2 D041                       		add.w	d1,d0
000180F4 6A00 FF80                  		bpl.w	loc_14A86
000180F8 4641                       		not.w	d1
000180FA 4E75                       		rts	
000180FC                            ; End of function FindFloor2
000180FC                            
000180FC                            
000180FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000180FC                            
000180FC                            
000180FC                            FindWall:				; XREF: Sonic_WalkVertR; et al
000180FC 6100 FE4E                  		bsr.w	Floor_ChkTile
00018100 3011                       		move.w	(a1),d0
00018102 3800                       		move.w	d0,d4
00018104 0240 07FF                  		andi.w	#$7FF,d0
00018108 6700                       		beq.s	loc_14B1E
0001810A 0B04                       		btst	d5,d4
0001810C 6600                       		bne.s	loc_14B2C
0001810E                            
0001810E                            loc_14B1E:
0001810E D64B                       		add.w	a3,d3
00018110 6100 0000                  		bsr.w	FindWall2
00018114 964B                       		sub.w	a3,d3
00018116 0641 0010                  		addi.w	#$10,d1
0001811A 4E75                       		rts	
0001811C                            ; ===========================================================================
0001811C                            
0001811C                            loc_14B2C:
0001811C 2478 F796                  		movea.l	($FFFFF796).w,a2
00018120 1032 0000                  		move.b	(a2,d0.w),d0
00018124 0240 00FF                  		andi.w	#$FF,d0
00018128 67E4                       		beq.s	loc_14B1E
0001812A 45F9 0000 0000             		lea	(AngleMap).l,a2
00018130 18B2 0000                  		move.b	(a2,d0.w),(a4)
00018134 E948                       		lsl.w	#4,d0
00018136 3202                       		move.w	d2,d1
00018138 0804 000C                  		btst	#$C,d4
0001813C 6700                       		beq.s	loc_14B5A
0001813E 4641                       		not.w	d1
00018140 0614 0040                  		addi.b	#$40,(a4)
00018144 4414                       		neg.b	(a4)
00018146 0414 0040                  		subi.b	#$40,(a4)
0001814A                            
0001814A                            loc_14B5A:
0001814A 0804 000B                  		btst	#$B,d4
0001814E 6700                       		beq.s	loc_14B62
00018150 4414                       		neg.b	(a4)
00018152                            
00018152                            loc_14B62:
00018152 0241 000F                  		andi.w	#$F,d1
00018156 D240                       		add.w	d0,d1
00018158 45F9 0000 0000             		lea	(CollArray2).l,a2
0001815E 1032 1000                  		move.b	(a2,d1.w),d0
00018162 4880                       		ext.w	d0
00018164 BD44                       		eor.w	d6,d4
00018166 0804 000B                  		btst	#$B,d4
0001816A 6700                       		beq.s	loc_14B7E
0001816C 4440                       		neg.w	d0
0001816E                            
0001816E                            loc_14B7E:
0001816E 4A40                       		tst.w	d0
00018170 679C                       		beq.s	loc_14B1E
00018172 6B00                       		bmi.s	loc_14B9A
00018174 0C00 0010                  		cmpi.b	#$10,d0
00018178 6700                       		beq.s	loc_14BA6
0001817A 3203                       		move.w	d3,d1
0001817C 0241 000F                  		andi.w	#$F,d1
00018180 D041                       		add.w	d1,d0
00018182 323C 000F                  		move.w	#$F,d1
00018186 9240                       		sub.w	d0,d1
00018188 4E75                       		rts	
0001818A                            ; ===========================================================================
0001818A                            
0001818A                            loc_14B9A:
0001818A 3203                       		move.w	d3,d1
0001818C 0241 000F                  		andi.w	#$F,d1
00018190 D041                       		add.w	d1,d0
00018192 6A00 FF7A                  		bpl.w	loc_14B1E
00018196                            
00018196                            loc_14BA6:
00018196 964B                       		sub.w	a3,d3
00018198 6100 0000                  		bsr.w	FindWall2
0001819C D64B                       		add.w	a3,d3
0001819E 0441 0010                  		subi.w	#$10,d1
000181A2 4E75                       		rts	
000181A4                            ; End of function FindWall
000181A4                            
000181A4                            
000181A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181A4                            
000181A4                            
000181A4                            FindWall2:				; XREF: FindWall
000181A4 6100 FDA6                  		bsr.w	Floor_ChkTile
000181A8 3011                       		move.w	(a1),d0
000181AA 3800                       		move.w	d0,d4
000181AC 0240 07FF                  		andi.w	#$7FF,d0
000181B0 6700                       		beq.s	loc_14BC6
000181B2 0B04                       		btst	d5,d4
000181B4 6600                       		bne.s	loc_14BD4
000181B6                            
000181B6                            loc_14BC6:
000181B6 323C 000F                  		move.w	#$F,d1
000181BA 3003                       		move.w	d3,d0
000181BC 0240 000F                  		andi.w	#$F,d0
000181C0 9240                       		sub.w	d0,d1
000181C2 4E75                       		rts	
000181C4                            ; ===========================================================================
000181C4                            
000181C4                            loc_14BD4:
000181C4 2478 F796                  		movea.l	($FFFFF796).w,a2
000181C8 1032 0000                  		move.b	(a2,d0.w),d0
000181CC 0240 00FF                  		andi.w	#$FF,d0
000181D0 67E4                       		beq.s	loc_14BC6
000181D2 45F9 0000 0000             		lea	(AngleMap).l,a2
000181D8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000181DC E948                       		lsl.w	#4,d0
000181DE 3202                       		move.w	d2,d1
000181E0 0804 000C                  		btst	#$C,d4
000181E4 6700                       		beq.s	loc_14C02
000181E6 4641                       		not.w	d1
000181E8 0614 0040                  		addi.b	#$40,(a4)
000181EC 4414                       		neg.b	(a4)
000181EE 0414 0040                  		subi.b	#$40,(a4)
000181F2                            
000181F2                            loc_14C02:
000181F2 0804 000B                  		btst	#$B,d4
000181F6 6700                       		beq.s	loc_14C0A
000181F8 4414                       		neg.b	(a4)
000181FA                            
000181FA                            loc_14C0A:
000181FA 0241 000F                  		andi.w	#$F,d1
000181FE D240                       		add.w	d0,d1
00018200 45F9 0000 0000             		lea	(CollArray2).l,a2
00018206 1032 1000                  		move.b	(a2,d1.w),d0
0001820A 4880                       		ext.w	d0
0001820C BD44                       		eor.w	d6,d4
0001820E 0804 000B                  		btst	#$B,d4
00018212 6700                       		beq.s	loc_14C26
00018214 4440                       		neg.w	d0
00018216                            
00018216                            loc_14C26:
00018216 4A40                       		tst.w	d0
00018218 679C                       		beq.s	loc_14BC6
0001821A 6B00                       		bmi.s	loc_14C3C
0001821C 3203                       		move.w	d3,d1
0001821E 0241 000F                  		andi.w	#$F,d1
00018222 D041                       		add.w	d1,d0
00018224 323C 000F                  		move.w	#$F,d1
00018228 9240                       		sub.w	d0,d1
0001822A 4E75                       		rts	
0001822C                            ; ===========================================================================
0001822C                            
0001822C                            loc_14C3C:
0001822C 3203                       		move.w	d3,d1
0001822E 0241 000F                  		andi.w	#$F,d1
00018232 D041                       		add.w	d1,d0
00018234 6A00 FF80                  		bpl.w	loc_14BC6
00018238 4641                       		not.w	d1
0001823A 4E75                       		rts	
0001823C                            ; End of function FindWall2
0001823C                            
0001823C                            ; ---------------------------------------------------------------------------
0001823C                            ; Unused floor/wall subroutine - logs something	to do with collision
0001823C                            ; ---------------------------------------------------------------------------
0001823C                            
0001823C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001823C                            
0001823C                            
0001823C                            FloorLog_Unk:				; XREF: Level
0001823C 4E75                       		rts	
0001823E                            
0001823E 43F9 0000 0000             		lea	(CollArray1).l,a1
00018244 45F9 0000 0000             		lea	(CollArray1).l,a2
0001824A 363C 00FF                  		move.w	#$FF,d3
0001824E                            
0001824E                            loc_14C5E:
0001824E 7A10                       		moveq	#$10,d5
00018250 343C 000F                  		move.w	#$F,d2
00018254                            
00018254                            loc_14C64:
00018254 7800                       		moveq	#0,d4
00018256 323C 000F                  		move.w	#$F,d1
0001825A                            
0001825A                            loc_14C6A:
0001825A 3019                       		move.w	(a1)+,d0
0001825C EAA8                       		lsr.l	d5,d0
0001825E D944                       		addx.w	d4,d4
00018260 51C9 FFF8                  		dbf	d1,loc_14C6A
00018264                            
00018264 34C4                       		move.w	d4,(a2)+
00018266 92FC 0020                  		suba.w	#$20,a1
0001826A 5345                       		subq.w	#1,d5
0001826C 51CA FFE6                  		dbf	d2,loc_14C64
00018270                            
00018270 D2FC 0020                  		adda.w	#$20,a1
00018274 51CB FFD8                  		dbf	d3,loc_14C5E
00018278                            
00018278 43F9 0000 0000             		lea	(CollArray1).l,a1
0001827E 45F9 0000 0000             		lea	(CollArray2).l,a2
00018284 6100                       		bsr.s	FloorLog_Unk2
00018286 43F9 0000 0000             		lea	(CollArray1).l,a1
0001828C 45F9 0000 0000             		lea	(CollArray1).l,a2
00018292                            
00018292                            ; End of function FloorLog_Unk
00018292                            
00018292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018292                            
00018292                            
00018292                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00018292 363C 0FFF                  		move.w	#$FFF,d3
00018296                            
00018296                            loc_14CA6:
00018296 7400                       		moveq	#0,d2
00018298 323C 000F                  		move.w	#$F,d1
0001829C 3019                       		move.w	(a1)+,d0
0001829E 6700                       		beq.s	loc_14CD4
000182A0 6B00                       		bmi.s	loc_14CBE
000182A2                            
000182A2                            loc_14CB2:
000182A2 E248                       		lsr.w	#1,d0
000182A4 6400                       		bcc.s	loc_14CB8
000182A6 5202                       		addq.b	#1,d2
000182A8                            
000182A8                            loc_14CB8:
000182A8 51C9 FFF8                  		dbf	d1,loc_14CB2
000182AC                            
000182AC 6000                       		bra.s	loc_14CD6
000182AE                            ; ===========================================================================
000182AE                            
000182AE                            loc_14CBE:
000182AE 0C40 FFFF                  		cmpi.w	#-1,d0
000182B2 6700                       		beq.s	loc_14CD0
000182B4                            
000182B4                            loc_14CC4:
000182B4 E348                       		lsl.w	#1,d0
000182B6 6400                       		bcc.s	loc_14CCA
000182B8 5302                       		subq.b	#1,d2
000182BA                            
000182BA                            loc_14CCA:
000182BA 51C9 FFF8                  		dbf	d1,loc_14CC4
000182BE                            
000182BE 6000                       		bra.s	loc_14CD6
000182C0                            ; ===========================================================================
000182C0                            
000182C0                            loc_14CD0:
000182C0 303C 0010                  		move.w	#$10,d0
000182C4                            
000182C4                            loc_14CD4:
000182C4 3400                       		move.w	d0,d2
000182C6                            
000182C6                            loc_14CD6:
000182C6 14C2                       		move.b	d2,(a2)+
000182C8 51CB FFCC                  		dbf	d3,loc_14CA6
000182CC                            
000182CC 4E75                       		rts	
000182CE                            
000182CE                            ; End of function FloorLog_Unk2
000182CE                            
000182CE                            
000182CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182CE                            
000182CE                            
000182CE                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000182CE 2628 0008                  		move.l	8(a0),d3
000182D2 2428 000C                  		move.l	$C(a0),d2
000182D6 3228 0010                  		move.w	$10(a0),d1
000182DA 48C1                       		ext.l	d1
000182DC E181                       		asl.l	#8,d1
000182DE D681                       		add.l	d1,d3
000182E0 3228 0012                  		move.w	$12(a0),d1
000182E4 48C1                       		ext.l	d1
000182E6 E181                       		asl.l	#8,d1
000182E8 D481                       		add.l	d1,d2
000182EA 4842                       		swap	d2
000182EC 4843                       		swap	d3
000182EE 11C0 F768                  		move.b	d0,($FFFFF768).w
000182F2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000182F6 1200                       		move.b	d0,d1
000182F8 0600 0020                  		addi.b	#$20,d0
000182FC 6A00                       		bpl.s	loc_14D1A
000182FE 1001                       		move.b	d1,d0
00018300 6A00                       		bpl.s	loc_14D14
00018302 5300                       		subq.b	#1,d0
00018304                            
00018304                            loc_14D14:
00018304 0600 0020                  		addi.b	#$20,d0
00018308 6000                       		bra.s	loc_14D24
0001830A                            ; ===========================================================================
0001830A                            
0001830A                            loc_14D1A:
0001830A 1001                       		move.b	d1,d0
0001830C 6A00                       		bpl.s	loc_14D20
0001830E 5200                       		addq.b	#1,d0
00018310                            
00018310                            loc_14D20:
00018310 0600 001F                  		addi.b	#$1F,d0
00018314                            
00018314                            loc_14D24:
00018314 0200 00C0                  		andi.b	#$C0,d0
00018318 6700 0000                  		beq.w	loc_14DF0
0001831C 0C00 0080                  		cmpi.b	#$80,d0
00018320 6700 0000                  		beq.w	loc_14F7C
00018324 0201 0038                  		andi.b	#$38,d1
00018328 6600                       		bne.s	loc_14D3C
0001832A 5042                       		addq.w	#8,d2
0001832C                            
0001832C                            loc_14D3C:
0001832C 0C00 0040                  		cmpi.b	#$40,d0
00018330 6700 0000                  		beq.w	loc_1504A
00018334 6000 0000                  		bra.w	loc_14EBC
00018338                            
00018338                            ; End of function Sonic_WalkSpeed
00018338                            
00018338                            
00018338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018338                            
00018338                            
00018338                            sub_14D48:				; XREF: Sonic_Jump
00018338 11C0 F768                  		move.b	d0,($FFFFF768).w
0001833C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00018340 0600 0020                  		addi.b	#$20,d0
00018344 0200 00C0                  		andi.b	#$C0,d0
00018348 0C00 0040                  		cmpi.b	#$40,d0
0001834C 6700 0000                  		beq.w	loc_14FD6
00018350 0C00 0080                  		cmpi.b	#$80,d0
00018354 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00018358 0C00 00C0                  		cmpi.b	#$C0,d0
0001835C 6700 0000                  		beq.w	sub_14E50
00018360                            
00018360                            ; End of function sub_14D48
00018360                            
00018360                            ; ---------------------------------------------------------------------------
00018360                            ; Subroutine to	make Sonic land	on the floor after jumping
00018360                            ; ---------------------------------------------------------------------------
00018360                            
00018360                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018360                            
00018360                            
00018360                            Sonic_HitFloor:				; XREF: Sonic_Floor
00018360 3428 000C                  		move.w	$C(a0),d2
00018364 3628 0008                  		move.w	8(a0),d3
00018368 7000                       		moveq	#0,d0
0001836A 1028 0016                  		move.b	$16(a0),d0
0001836E 4880                       		ext.w	d0
00018370 D440                       		add.w	d0,d2
00018372 1028 0017                  		move.b	$17(a0),d0
00018376 4880                       		ext.w	d0
00018378 D640                       		add.w	d0,d3
0001837A 49F8 F768                  		lea	($FFFFF768).w,a4
0001837E 367C 0010                  		movea.w	#$10,a3
00018382 3C3C 0000                  		move.w	#0,d6
00018386 7A0D                       		moveq	#$D,d5
00018388 6100 FC34                  		bsr.w	FindFloor
0001838C 3F01                       		move.w	d1,-(sp)
0001838E 3428 000C                  		move.w	$C(a0),d2
00018392 3628 0008                  		move.w	8(a0),d3
00018396 7000                       		moveq	#0,d0
00018398 1028 0016                  		move.b	$16(a0),d0
0001839C 4880                       		ext.w	d0
0001839E D440                       		add.w	d0,d2
000183A0 1028 0017                  		move.b	$17(a0),d0
000183A4 4880                       		ext.w	d0
000183A6 9640                       		sub.w	d0,d3
000183A8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000183AC 367C 0010                  		movea.w	#$10,a3
000183B0 3C3C 0000                  		move.w	#0,d6
000183B4 7A0D                       		moveq	#$D,d5
000183B6 6100 FC06                  		bsr.w	FindFloor
000183BA 301F                       		move.w	(sp)+,d0
000183BC 143C 0000                  		move.b	#0,d2
000183C0                            
000183C0                            loc_14DD0:
000183C0 1638 F76A                  		move.b	($FFFFF76A).w,d3
000183C4 B240                       		cmp.w	d0,d1
000183C6 6F00                       		ble.s	loc_14DDE
000183C8 1638 F768                  		move.b	($FFFFF768).w,d3
000183CC C141                       		exg	d0,d1
000183CE                            
000183CE                            loc_14DDE:
000183CE 0803 0000                  		btst	#0,d3
000183D2 6700                       		beq.s	locret_14DE6
000183D4 1602                       		move.b	d2,d3
000183D6                            
000183D6                            locret_14DE6:
000183D6 4E75                       		rts	
000183D8                            
000183D8                            ; End of function Sonic_HitFloor
000183D8                            
000183D8                            ; ===========================================================================
000183D8 3428 000C                  		move.w	$C(a0),d2
000183DC 3628 0008                  		move.w	8(a0),d3
000183E0                            
000183E0                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000183E0 0642 000A                  		addi.w	#$A,d2
000183E4 49F8 F768                  		lea	($FFFFF768).w,a4
000183E8 367C 0010                  		movea.w	#$10,a3
000183EC 3C3C 0000                  		move.w	#0,d6
000183F0 7A0E                       		moveq	#$E,d5
000183F2 6100 FBCA                  		bsr.w	FindFloor
000183F6 143C 0000                  		move.b	#0,d2
000183FA                            
000183FA                            loc_14E0A:				; XREF: sub_14EB4
000183FA 1638 F768                  		move.b	($FFFFF768).w,d3
000183FE 0803 0000                  		btst	#0,d3
00018402 6700                       		beq.s	locret_14E16
00018404 1602                       		move.b	d2,d3
00018406                            
00018406                            locret_14E16:
00018406 4E75                       		rts	
00018408                            
00018408                            ; ---------------------------------------------------------------------------
00018408                            ; Subroutine allowing objects to interact with the floor
00018408                            ; ---------------------------------------------------------------------------
00018408                            
00018408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018408                            
00018408                            
00018408                            ObjHitFloor:
00018408 3628 0008                  		move.w	8(a0),d3
0001840C                            
0001840C                            ; End of function ObjHitFloor
0001840C                            
0001840C                            
0001840C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001840C                            
0001840C                            
0001840C                            ObjHitFloor2:
0001840C 3428 000C                  		move.w	$C(a0),d2
00018410 7000                       		moveq	#0,d0
00018412 1028 0016                  		move.b	$16(a0),d0
00018416 4880                       		ext.w	d0
00018418 D440                       		add.w	d0,d2
0001841A 49F8 F768                  		lea	($FFFFF768).w,a4
0001841E 18BC 0000                  		move.b	#0,(a4)
00018422 367C 0010                  		movea.w	#$10,a3
00018426 3C3C 0000                  		move.w	#0,d6
0001842A 7A0D                       		moveq	#$D,d5
0001842C 6100 FB90                  		bsr.w	FindFloor
00018430 1638 F768                  		move.b	($FFFFF768).w,d3
00018434 0803 0000                  		btst	#0,d3
00018438 6700                       		beq.s	locret_14E4E
0001843A 163C 0000                  		move.b	#0,d3
0001843E                            
0001843E                            locret_14E4E:
0001843E 4E75                       		rts	
00018440                            ; End of function ObjHitFloor2
00018440                            
00018440                            
00018440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018440                            
00018440                            
00018440                            sub_14E50:				; XREF: sub_14D48
00018440 3428 000C                  		move.w	$C(a0),d2
00018444 3628 0008                  		move.w	8(a0),d3
00018448 7000                       		moveq	#0,d0
0001844A 1028 0017                  		move.b	$17(a0),d0
0001844E 4880                       		ext.w	d0
00018450 9440                       		sub.w	d0,d2
00018452 1028 0016                  		move.b	$16(a0),d0
00018456 4880                       		ext.w	d0
00018458 D640                       		add.w	d0,d3
0001845A 49F8 F768                  		lea	($FFFFF768).w,a4
0001845E 367C 0010                  		movea.w	#$10,a3
00018462 3C3C 0000                  		move.w	#0,d6
00018466 7A0E                       		moveq	#$E,d5
00018468 6100 FC92                  		bsr.w	FindWall
0001846C 3F01                       		move.w	d1,-(sp)
0001846E 3428 000C                  		move.w	$C(a0),d2
00018472 3628 0008                  		move.w	8(a0),d3
00018476 7000                       		moveq	#0,d0
00018478 1028 0017                  		move.b	$17(a0),d0
0001847C 4880                       		ext.w	d0
0001847E D440                       		add.w	d0,d2
00018480 1028 0016                  		move.b	$16(a0),d0
00018484 4880                       		ext.w	d0
00018486 D640                       		add.w	d0,d3
00018488 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001848C 367C 0010                  		movea.w	#$10,a3
00018490 3C3C 0000                  		move.w	#0,d6
00018494 7A0E                       		moveq	#$E,d5
00018496 6100 FC64                  		bsr.w	FindWall
0001849A 301F                       		move.w	(sp)+,d0
0001849C 143C 00C0                  		move.b	#-$40,d2
000184A0 6000 FF1E                  		bra.w	loc_14DD0
000184A4                            
000184A4                            ; End of function sub_14E50
000184A4                            
000184A4                            
000184A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184A4                            
000184A4                            
000184A4                            sub_14EB4:				; XREF: Sonic_Floor
000184A4 3428 000C                  		move.w	$C(a0),d2
000184A8 3628 0008                  		move.w	8(a0),d3
000184AC                            
000184AC                            loc_14EBC:
000184AC 0643 000A                  		addi.w	#$A,d3
000184B0 49F8 F768                  		lea	($FFFFF768).w,a4
000184B4 367C 0010                  		movea.w	#$10,a3
000184B8 3C3C 0000                  		move.w	#0,d6
000184BC 7A0E                       		moveq	#$E,d5
000184BE 6100 FC3C                  		bsr.w	FindWall
000184C2 143C 00C0                  		move.b	#-$40,d2
000184C6 6000 FF32                  		bra.w	loc_14E0A
000184CA                            
000184CA                            ; End of function sub_14EB4
000184CA                            
000184CA                            ; ---------------------------------------------------------------------------
000184CA                            ; Subroutine to	detect when an object hits a wall to its right
000184CA                            ; ---------------------------------------------------------------------------
000184CA                            
000184CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184CA                            
000184CA                            
000184CA                            ObjHitWallRight:
000184CA D668 0008                  		add.w	8(a0),d3
000184CE 3428 000C                  		move.w	$C(a0),d2
000184D2 49F8 F768                  		lea	($FFFFF768).w,a4
000184D6 18BC 0000                  		move.b	#0,(a4)
000184DA 367C 0010                  		movea.w	#$10,a3
000184DE 3C3C 0000                  		move.w	#0,d6
000184E2 7A0E                       		moveq	#$E,d5
000184E4 6100 FC16                  		bsr.w	FindWall
000184E8 1638 F768                  		move.b	($FFFFF768).w,d3
000184EC 0803 0000                  		btst	#0,d3
000184F0 6700                       		beq.s	locret_14F06
000184F2 163C 00C0                  		move.b	#-$40,d3
000184F6                            
000184F6                            locret_14F06:
000184F6 4E75                       		rts	
000184F8                            
000184F8                            ; End of function ObjHitWallRight
000184F8                            
000184F8                            ; ---------------------------------------------------------------------------
000184F8                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000184F8                            ; touches them
000184F8                            ; ---------------------------------------------------------------------------
000184F8                            
000184F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184F8                            
000184F8                            
000184F8                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000184F8 3428 000C                  		move.w	$C(a0),d2
000184FC 3628 0008                  		move.w	8(a0),d3
00018500 7000                       		moveq	#0,d0
00018502 1028 0016                  		move.b	$16(a0),d0
00018506 4880                       		ext.w	d0
00018508 9440                       		sub.w	d0,d2
0001850A 0A42 000F                  		eori.w	#$F,d2
0001850E 1028 0017                  		move.b	$17(a0),d0
00018512 4880                       		ext.w	d0
00018514 D640                       		add.w	d0,d3
00018516 49F8 F768                  		lea	($FFFFF768).w,a4
0001851A 367C FFF0                  		movea.w	#-$10,a3
0001851E 3C3C 1000                  		move.w	#$1000,d6
00018522 7A0E                       		moveq	#$E,d5
00018524 6100 FA98                  		bsr.w	FindFloor
00018528 3F01                       		move.w	d1,-(sp)
0001852A 3428 000C                  		move.w	$C(a0),d2
0001852E 3628 0008                  		move.w	8(a0),d3
00018532 7000                       		moveq	#0,d0
00018534 1028 0016                  		move.b	$16(a0),d0
00018538 4880                       		ext.w	d0
0001853A 9440                       		sub.w	d0,d2
0001853C 0A42 000F                  		eori.w	#$F,d2
00018540 1028 0017                  		move.b	$17(a0),d0
00018544 4880                       		ext.w	d0
00018546 9640                       		sub.w	d0,d3
00018548 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001854C 367C FFF0                  		movea.w	#-$10,a3
00018550 3C3C 1000                  		move.w	#$1000,d6
00018554 7A0E                       		moveq	#$E,d5
00018556 6100 FA66                  		bsr.w	FindFloor
0001855A 301F                       		move.w	(sp)+,d0
0001855C 143C 0080                  		move.b	#-$80,d2
00018560 6000 FE5E                  		bra.w	loc_14DD0
00018564                            ; End of function Sonic_DontRunOnWalls
00018564                            
00018564                            ; ===========================================================================
00018564 3428 000C                  		move.w	$C(a0),d2
00018568 3628 0008                  		move.w	8(a0),d3
0001856C                            
0001856C                            loc_14F7C:
0001856C 0442 000A                  		subi.w	#$A,d2
00018570 0A42 000F                  		eori.w	#$F,d2
00018574 49F8 F768                  		lea	($FFFFF768).w,a4
00018578 367C FFF0                  		movea.w	#-$10,a3
0001857C 3C3C 1000                  		move.w	#$1000,d6
00018580 7A0E                       		moveq	#$E,d5
00018582 6100 FA3A                  		bsr.w	FindFloor
00018586 143C 0080                  		move.b	#-$80,d2
0001858A 6000 FE6E                  		bra.w	loc_14E0A
0001858E                            
0001858E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001858E                            
0001858E                            
0001858E                            ObjHitCeiling:
0001858E 3428 000C                  		move.w	$C(a0),d2
00018592 3628 0008                  		move.w	8(a0),d3
00018596 7000                       		moveq	#0,d0
00018598 1028 0016                  		move.b	$16(a0),d0
0001859C 4880                       		ext.w	d0
0001859E 9440                       		sub.w	d0,d2
000185A0 0A42 000F                  		eori.w	#$F,d2
000185A4 49F8 F768                  		lea	($FFFFF768).w,a4
000185A8 367C FFF0                  		movea.w	#-$10,a3
000185AC 3C3C 1000                  		move.w	#$1000,d6
000185B0 7A0E                       		moveq	#$E,d5
000185B2 6100 FA0A                  		bsr.w	FindFloor
000185B6 1638 F768                  		move.b	($FFFFF768).w,d3
000185BA 0803 0000                  		btst	#0,d3
000185BE 6700                       		beq.s	locret_14FD4
000185C0 163C 0080                  		move.b	#-$80,d3
000185C4                            
000185C4                            locret_14FD4:
000185C4 4E75                       		rts	
000185C6                            ; End of function ObjHitCeiling
000185C6                            
000185C6                            ; ===========================================================================
000185C6                            
000185C6                            loc_14FD6:				; XREF: sub_14D48
000185C6 3428 000C                  		move.w	$C(a0),d2
000185CA 3628 0008                  		move.w	8(a0),d3
000185CE 7000                       		moveq	#0,d0
000185D0 1028 0017                  		move.b	$17(a0),d0
000185D4 4880                       		ext.w	d0
000185D6 9440                       		sub.w	d0,d2
000185D8 1028 0016                  		move.b	$16(a0),d0
000185DC 4880                       		ext.w	d0
000185DE 9640                       		sub.w	d0,d3
000185E0 0A43 000F                  		eori.w	#$F,d3
000185E4 49F8 F768                  		lea	($FFFFF768).w,a4
000185E8 367C FFF0                  		movea.w	#-$10,a3
000185EC 3C3C 0800                  		move.w	#$800,d6
000185F0 7A0E                       		moveq	#$E,d5
000185F2 6100 FB08                  		bsr.w	FindWall
000185F6 3F01                       		move.w	d1,-(sp)
000185F8 3428 000C                  		move.w	$C(a0),d2
000185FC 3628 0008                  		move.w	8(a0),d3
00018600 7000                       		moveq	#0,d0
00018602 1028 0017                  		move.b	$17(a0),d0
00018606 4880                       		ext.w	d0
00018608 D440                       		add.w	d0,d2
0001860A 1028 0016                  		move.b	$16(a0),d0
0001860E 4880                       		ext.w	d0
00018610 9640                       		sub.w	d0,d3
00018612 0A43 000F                  		eori.w	#$F,d3
00018616 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001861A 367C FFF0                  		movea.w	#-$10,a3
0001861E 3C3C 0800                  		move.w	#$800,d6
00018622 7A0E                       		moveq	#$E,d5
00018624 6100 FAD6                  		bsr.w	FindWall
00018628 301F                       		move.w	(sp)+,d0
0001862A 143C 0040                  		move.b	#$40,d2
0001862E 6000 FD90                  		bra.w	loc_14DD0
00018632                            
00018632                            ; ---------------------------------------------------------------------------
00018632                            ; Subroutine to	stop Sonic when	he jumps at a wall
00018632                            ; ---------------------------------------------------------------------------
00018632                            
00018632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018632                            
00018632                            
00018632                            Sonic_HitWall:				; XREF: Sonic_Floor
00018632 3428 000C                  		move.w	$C(a0),d2
00018636 3628 0008                  		move.w	8(a0),d3
0001863A                            
0001863A                            loc_1504A:
0001863A 0443 000A                  		subi.w	#$A,d3
0001863E 0A43 000F                  		eori.w	#$F,d3
00018642 49F8 F768                  		lea	($FFFFF768).w,a4
00018646 367C FFF0                  		movea.w	#-$10,a3
0001864A 3C3C 0800                  		move.w	#$800,d6
0001864E 7A0E                       		moveq	#$E,d5
00018650 6100 FAAA                  		bsr.w	FindWall
00018654 143C 0040                  		move.b	#$40,d2
00018658 6000 FDA0                  		bra.w	loc_14E0A
0001865C                            ; End of function Sonic_HitWall
0001865C                            
0001865C                            ; ---------------------------------------------------------------------------
0001865C                            ; Subroutine to	detect when an object hits a wall to its left
0001865C                            ; ---------------------------------------------------------------------------
0001865C                            
0001865C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001865C                            
0001865C                            
0001865C                            ObjHitWallLeft:
0001865C D668 0008                  		add.w	8(a0),d3
00018660 3428 000C                  		move.w	$C(a0),d2
00018664 49F8 F768                  		lea	($FFFFF768).w,a4
00018668 18BC 0000                  		move.b	#0,(a4)
0001866C 367C FFF0                  		movea.w	#-$10,a3
00018670 3C3C 0800                  		move.w	#$800,d6
00018674 7A0E                       		moveq	#$E,d5
00018676 6100 FA84                  		bsr.w	FindWall
0001867A 1638 F768                  		move.b	($FFFFF768).w,d3
0001867E 0803 0000                  		btst	#0,d3
00018682 6700                       		beq.s	locret_15098
00018684 163C 0040                  		move.b	#$40,d3
00018688                            
00018688                            locret_15098:
00018688 4E75                       		rts	
0001868A                            ; End of function ObjHitWallLeft
0001868A                            
0001868A                            ; ===========================================================================
0001868A                            ; ---------------------------------------------------------------------------
0001868A                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
0001868A                            ; ---------------------------------------------------------------------------
0001868A                            
0001868A                            Obj66:					; XREF: Obj_Index
0001868A 7000                       		moveq	#0,d0
0001868C 1028 0024                  		move.b	$24(a0),d0
00018690 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00018694 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00018698                            ; ===========================================================================
00018698 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
0001869A 0000                       		dc.w Obj66_Action-Obj66_Index
0001869C 0000                       		dc.w Obj66_Display-Obj66_Index
0001869E 0000                       		dc.w Obj66_Release-Obj66_Index
000186A0                            ; ===========================================================================
000186A0                            
000186A0                            Obj66_Main:				; XREF: Obj66_Index
000186A0 5428 0024                  		addq.b	#2,$24(a0)
000186A4 323C 0001                  		move.w	#1,d1
000186A8 2248                       		movea.l	a0,a1
000186AA 6000                       		bra.s	Obj66_MakeItem
000186AC                            ; ===========================================================================
000186AC                            
000186AC                            Obj66_Loop:
000186AC 6100 82DA                  		bsr.w	SingleObjLoad
000186B0 6600                       		bne.s	loc_150FE
000186B2 12BC 0066                  		move.b	#$66,0(a1)
000186B6 5829 0024                  		addq.b	#4,$24(a1)
000186BA 3368 0008 0008             		move.w	8(a0),8(a1)
000186C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000186C6 137C 0003 0018             		move.b	#3,$18(a1)
000186CC 137C 0010 001A             		move.b	#$10,$1A(a1)
000186D2                            
000186D2                            Obj66_MakeItem:				; XREF: Obj66_Main
000186D2 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000186DA 337C 4348 0002             		move.w	#$4348,2(a1)
000186E0 0029 0004 0001             		ori.b	#4,1(a1)
000186E6 137C 0038 0019             		move.b	#$38,$19(a1)
000186EC                            
000186EC                            loc_150FE:
000186EC 51C9 FFBE                  		dbf	d1,Obj66_Loop
000186F0                            
000186F0 117C 0030 0019             		move.b	#$30,$19(a0)
000186F6 117C 0004 0018             		move.b	#4,$18(a0)
000186FC 317C 003C 0030             		move.w	#$3C,$30(a0)
00018702 117C 0001 0034             		move.b	#1,$34(a0)
00018708 1168 0028 0038             		move.b	$28(a0),$38(a0)
0001870E                            
0001870E                            Obj66_Action:				; XREF: Obj66_Index
0001870E 6100 0000                  		bsr.w	Obj66_ChkSwitch
00018712 4A28 0001                  		tst.b	1(a0)
00018716 6A00 0000                  		bpl.w	Obj66_Display
0001871A 323C 0030                  		move.w	#$30,d1
0001871E 3401                       		move.w	d1,d2
00018720 3602                       		move.w	d2,d3
00018722 5243                       		addq.w	#1,d3
00018724 3828 0008                  		move.w	8(a0),d4
00018728 6100 A2C4                  		bsr.w	SolidObject
0001872C 0828 0005 0022             		btst	#5,$22(a0)
00018732 6700 0000                  		beq.w	Obj66_Display
00018736 43F8 D000                  		lea	($FFFFD000).w,a1
0001873A 720E                       		moveq	#$E,d1
0001873C 3029 0008                  		move.w	8(a1),d0
00018740 B068 0008                  		cmp.w	8(a0),d0
00018744 6500                       		bcs.s	Obj66_GrabSonic
00018746 7207                       		moveq	#7,d1
00018748                            
00018748                            Obj66_GrabSonic:
00018748 B228 001A                  		cmp.b	$1A(a0),d1
0001874C 6600                       		bne.s	Obj66_Display
0001874E 1141 0032                  		move.b	d1,$32(a0)
00018752 5828 0024                  		addq.b	#4,$24(a0)
00018756 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001875C 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00018762 337C 0800 0014             		move.w	#$800,$14(a1)
00018768 337C 0000 0010             		move.w	#0,$10(a1)
0001876E 337C 0000 0012             		move.w	#0,$12(a1)
00018774 08A8 0005 0022             		bclr	#5,$22(a0)
0001877A 08A9 0005 0022             		bclr	#5,$22(a1)
00018780 08E9 0001 0022             		bset	#1,$22(a1)
00018786 3429 0008                  		move.w	8(a1),d2
0001878A 3629 000C                  		move.w	$C(a1),d3
0001878E 6100 0000                  		bsr.w	Obj66_ChgPos
00018792 D569 0008                  		add.w	d2,8(a1)
00018796 D769 000C                  		add.w	d3,$C(a1)
0001879A E0E9 0008                  		asr	8(a1)
0001879E E0E9 000C                  		asr	$C(a1)
000187A2                            
000187A2                            Obj66_Display:				; XREF: Obj66_Index
000187A2 6000 A042                  		bra.w	MarkObjGone
000187A6                            ; ===========================================================================
000187A6                            
000187A6                            Obj66_Release:				; XREF: Obj66_Index
000187A6 1028 001A                  		move.b	$1A(a0),d0
000187AA 0C00 0004                  		cmpi.b	#4,d0
000187AE 6700                       		beq.s	loc_151C8
000187B0 0C00 0007                  		cmpi.b	#7,d0
000187B4 6600                       		bne.s	loc_151F8
000187B6                            
000187B6                            loc_151C8:
000187B6 B028 0032                  		cmp.b	$32(a0),d0
000187BA 6700                       		beq.s	loc_151F8
000187BC 43F8 D000                  		lea	($FFFFD000).w,a1
000187C0 337C 0000 0010             		move.w	#0,$10(a1)
000187C6 337C 0800 0012             		move.w	#$800,$12(a1)
000187CC 0C00 0004                  		cmpi.b	#4,d0
000187D0 6700                       		beq.s	loc_151F0
000187D2 337C 0800 0010             		move.w	#$800,$10(a1)
000187D8 337C 0800 0012             		move.w	#$800,$12(a1)
000187DE                            
000187DE                            loc_151F0:
000187DE 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000187E2 5928 0024                  		subq.b	#4,$24(a0)
000187E6                            
000187E6                            loc_151F8:
000187E6 6100                       		bsr.s	Obj66_ChkSwitch
000187E8 6100                       		bsr.s	Obj66_ChgPos
000187EA 6000 9FFA                  		bra.w	MarkObjGone
000187EE                            
000187EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000187EE                            
000187EE                            
000187EE                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000187EE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000187F2 7000                       		moveq	#0,d0
000187F4 1028 0038                  		move.b	$38(a0),d0
000187F8 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000187FE 6700                       		beq.s	loc_15224	; if not, branch
00018800 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00018804 6600                       		bne.s	Obj66_Animate	; if yes, branch
00018806 4428 0034                  		neg.b	$34(a0)
0001880A 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00018810 6000                       		bra.s	Obj66_Animate
00018812                            ; ===========================================================================
00018812                            
00018812                            loc_15224:
00018812 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00018816                            
00018816                            Obj66_Animate:
00018816 5328 001E                  		subq.b	#1,$1E(a0)
0001881A 6A00                       		bpl.s	locret_15246
0001881C 117C 0007 001E             		move.b	#7,$1E(a0)
00018822 1228 0034                  		move.b	$34(a0),d1
00018826 1028 001A                  		move.b	$1A(a0),d0
0001882A D001                       		add.b	d1,d0
0001882C 0200 000F                  		andi.b	#$F,d0
00018830 1140 001A                  		move.b	d0,$1A(a0)
00018834                            
00018834                            locret_15246:
00018834 4E75                       		rts	
00018836                            ; End of function Obj66_ChkSwitch
00018836                            
00018836                            
00018836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018836                            
00018836                            
00018836                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00018836 43F8 D000                  		lea	($FFFFD000).w,a1
0001883A 7000                       		moveq	#0,d0
0001883C 1028 001A                  		move.b	$1A(a0),d0
00018840 D040                       		add.w	d0,d0
00018842 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00018846 101A                       		move.b	(a2)+,d0
00018848 4880                       		ext.w	d0
0001884A D068 0008                  		add.w	8(a0),d0
0001884E 3340 0008                  		move.w	d0,8(a1)
00018852 101A                       		move.b	(a2)+,d0
00018854 4880                       		ext.w	d0
00018856 D068 000C                  		add.w	$C(a0),d0
0001885A 3340 000C                  		move.w	d0,$C(a1)
0001885E 4E75                       		rts	
00018860                            ; End of function Obj66_ChgPos
00018860                            
00018860                            ; ===========================================================================
00018860 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00018864 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00018868 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001886C 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00018870 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00018874 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00018878 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001887C E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00018880                            ; ---------------------------------------------------------------------------
00018880                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018880                            ; ---------------------------------------------------------------------------
00018880                            Map_obj66:
00018880                            	include "_maps\obj66.asm"
00018880                            ; ---------------------------------------------------------------------------
00018880                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018880                            ; ---------------------------------------------------------------------------
00018880 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00018884 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00018888 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
0001888C 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00018890 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00018894 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00018898 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
0001889C 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000188A0 0000                       		dc.w byte_154A4-Map_obj66
000188A2 06                         byte_152B4:	dc.b 6
000188A3 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000188A8 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000188AD E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000188B2 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000188B7 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000188BC 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000188C1 06                         byte_152D3:	dc.b 6
000188C2 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000188C7 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000188CC F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000188D1 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000188D6 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000188DB 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000188E0 06                         byte_152F2:	dc.b 6
000188E1 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000188E6 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000188EB 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000188F0 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000188F5 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000188FA 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000188FF 06                         byte_15311:	dc.b 6
00018900 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018905 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001890A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001890F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018914 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018919 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001891E 06                         byte_15330:	dc.b 6
0001891F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018924 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018929 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001892E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018933 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018938 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001893D 06                         byte_1534F:	dc.b 6
0001893E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018943 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018948 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001894D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00018952 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018957 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001895C 06                         byte_1536E:	dc.b 6
0001895D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00018962 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018967 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001896C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018971 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018976 180A 1800 18               		dc.b $18, $A, $18, 0, $18
0001897B 06                         byte_1538D:	dc.b 6
0001897C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018981 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018986 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
0001898B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00018990 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00018995 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
0001899A 06                         byte_153AC:	dc.b 6
0001899B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000189A0 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000189A5 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000189AA E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000189AF 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000189B4 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000189B9 06                         byte_153CB:	dc.b 6
000189BA D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000189BF E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000189C4 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000189C9 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000189CE F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000189D3 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000189D8 06                         byte_153EA:	dc.b 6
000189D9 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000189DE E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000189E3 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000189E8 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000189ED E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000189F2 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000189F7 06                         byte_15409:	dc.b 6
000189F8 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000189FD D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00018A02 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018A07 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00018A0C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00018A11 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018A16 06                         byte_15428:	dc.b 6
00018A17 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00018A1C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00018A21 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018A26 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018A2B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00018A30 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018A35 06                         byte_15447:	dc.b 6
00018A36 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018A3B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00018A40 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018A45 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018A4A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00018A4F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00018A54 06                         byte_15466:	dc.b 6
00018A55 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018A5A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018A5F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00018A64 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018A69 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018A6E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00018A73 06                         byte_15485:	dc.b 6
00018A74 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018A79 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00018A7E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00018A83 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00018A88 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00018A8D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00018A92 0C                         byte_154A4:	dc.b $C
00018A93 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00018A98 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00018A9D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00018AA2 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00018AA7 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00018AAC E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00018AB1 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00018AB6 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00018ABB 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00018AC0 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00018AC5 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00018ACA 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00018AD0 00                         		even
00018AD0 00                         		even
00018AD0                            
00018AD0                            ; ===========================================================================
00018AD0                            ; ---------------------------------------------------------------------------
00018AD0                            ; Object 67 - disc that	you run	around (SBZ)
00018AD0                            ; ---------------------------------------------------------------------------
00018AD0                            
00018AD0                            Obj67:					; XREF: Obj_Index
00018AD0 7000                       		moveq	#0,d0
00018AD2 1028 0024                  		move.b	$24(a0),d0
00018AD6 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00018ADA 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00018ADE                            ; ===========================================================================
00018ADE 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00018AE0 0000                       		dc.w Obj67_Action-Obj67_Index
00018AE2                            ; ===========================================================================
00018AE2                            
00018AE2                            Obj67_Main:				; XREF: Obj67_Index
00018AE2 5428 0024                  		addq.b	#2,$24(a0)
00018AE6 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00018AEE 317C C344 0002             		move.w	#$C344,2(a0)
00018AF4 117C 0004 0001             		move.b	#4,1(a0)
00018AFA 117C 0004 0018             		move.b	#4,$18(a0)
00018B00 117C 0008 0019             		move.b	#8,$19(a0)
00018B06 3168 0008 0032             		move.w	8(a0),$32(a0)
00018B0C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00018B12 117C 0018 0034             		move.b	#$18,$34(a0)
00018B18 117C 0048 0038             		move.b	#$48,$38(a0)
00018B1E 1228 0028                  		move.b	$28(a0),d1	; get object type
00018B22 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018B26 6700                       		beq.s	loc_15546
00018B28 117C 0010 0034             		move.b	#$10,$34(a0)
00018B2E 117C 0038 0038             		move.b	#$38,$38(a0)
00018B34                            
00018B34                            loc_15546:
00018B34 1228 0028                  		move.b	$28(a0),d1	; get object type
00018B38 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018B3C 4881                       		ext.w	d1
00018B3E E741                       		asl.w	#3,d1
00018B40 3141 0036                  		move.w	d1,$36(a0)
00018B44 1028 0022                  		move.b	$22(a0),d0
00018B48 E418                       		ror.b	#2,d0
00018B4A 0200 00C0                  		andi.b	#-$40,d0
00018B4E 1140 0026                  		move.b	d0,$26(a0)
00018B52                            
00018B52                            Obj67_Action:				; XREF: Obj67_Index
00018B52 6100 0000                  		bsr.w	Obj67_MoveSonic
00018B56 6100 0000                  		bsr.w	Obj67_MoveSpot
00018B5A 6000 0000                  		bra.w	Obj67_ChkDel
00018B5E                            ; ===========================================================================
00018B5E                            
00018B5E                            Obj67_MoveSonic:			; XREF: Obj67_Action
00018B5E 7400                       		moveq	#0,d2
00018B60 1428 0038                  		move.b	$38(a0),d2
00018B64 3602                       		move.w	d2,d3
00018B66 D643                       		add.w	d3,d3
00018B68 43F8 D000                  		lea	($FFFFD000).w,a1
00018B6C 3029 0008                  		move.w	8(a1),d0
00018B70 9068 0032                  		sub.w	$32(a0),d0
00018B74 D042                       		add.w	d2,d0
00018B76 B043                       		cmp.w	d3,d0
00018B78 6400                       		bcc.s	loc_155A8
00018B7A 3229 000C                  		move.w	$C(a1),d1
00018B7E 9268 0030                  		sub.w	$30(a0),d1
00018B82 D242                       		add.w	d2,d1
00018B84 B243                       		cmp.w	d3,d1
00018B86 6400                       		bcc.s	loc_155A8
00018B88 0829 0001 0022             		btst	#1,$22(a1)
00018B8E 6700                       		beq.s	loc_155B8
00018B90 4228 003A                  		clr.b	$3A(a0)
00018B94 4E75                       		rts	
00018B96                            ; ===========================================================================
00018B96                            
00018B96                            loc_155A8:
00018B96 4A28 003A                  		tst.b	$3A(a0)
00018B9A 6700                       		beq.s	locret_155B6
00018B9C 4229 0038                  		clr.b	$38(a1)
00018BA0 4228 003A                  		clr.b	$3A(a0)
00018BA4                            
00018BA4                            locret_155B6:
00018BA4 4E75                       		rts	
00018BA6                            ; ===========================================================================
00018BA6                            
00018BA6                            loc_155B8:
00018BA6 4A28 003A                  		tst.b	$3A(a0)
00018BAA 6600                       		bne.s	loc_155E2
00018BAC 117C 0001 003A             		move.b	#1,$3A(a0)
00018BB2 0829 0002 0022             		btst	#2,$22(a1)
00018BB8 6600                       		bne.s	loc_155D0
00018BBA 4229 001C                  		clr.b	$1C(a1)
00018BBE                            
00018BBE                            loc_155D0:
00018BBE 08A9 0005 0022             		bclr	#5,$22(a1)
00018BC4 137C 0001 001D             		move.b	#1,$1D(a1)
00018BCA 137C 0001 0038             		move.b	#1,$38(a1)
00018BD0                            
00018BD0                            loc_155E2:
00018BD0 3029 0014                  		move.w	$14(a1),d0
00018BD4 4A68 0036                  		tst.w	$36(a0)
00018BD8 6A00                       		bpl.s	loc_15608
00018BDA 0C40 FC00                  		cmpi.w	#-$400,d0
00018BDE 6F00                       		ble.s	loc_155FA
00018BE0 337C FC00 0014             		move.w	#-$400,$14(a1)
00018BE6 4E75                       		rts	
00018BE8                            ; ===========================================================================
00018BE8                            
00018BE8                            loc_155FA:
00018BE8 0C40 F100                  		cmpi.w	#-$F00,d0
00018BEC 6C00                       		bge.s	locret_15606
00018BEE 337C F100 0014             		move.w	#-$F00,$14(a1)
00018BF4                            
00018BF4                            locret_15606:
00018BF4 4E75                       		rts	
00018BF6                            ; ===========================================================================
00018BF6                            
00018BF6                            loc_15608:
00018BF6 0C40 0400                  		cmpi.w	#$400,d0
00018BFA 6C00                       		bge.s	loc_15616
00018BFC 337C 0400 0014             		move.w	#$400,$14(a1)
00018C02 4E75                       		rts	
00018C04                            ; ===========================================================================
00018C04                            
00018C04                            loc_15616:
00018C04 0C40 0F00                  		cmpi.w	#$F00,d0
00018C08 6F00                       		ble.s	locret_15622
00018C0A 337C 0F00 0014             		move.w	#$F00,$14(a1)
00018C10                            
00018C10                            locret_15622:
00018C10 4E75                       		rts	
00018C12                            ; ===========================================================================
00018C12                            
00018C12                            Obj67_MoveSpot:				; XREF: Obj67_Action
00018C12 3028 0036                  		move.w	$36(a0),d0
00018C16 D168 0026                  		add.w	d0,$26(a0)
00018C1A 1028 0026                  		move.b	$26(a0),d0
00018C1E 4EB9 0000 3798             		jsr	(CalcSine).l
00018C24 3428 0030                  		move.w	$30(a0),d2
00018C28 3628 0032                  		move.w	$32(a0),d3
00018C2C 7800                       		moveq	#0,d4
00018C2E 1828 0034                  		move.b	$34(a0),d4
00018C32 E14C                       		lsl.w	#8,d4
00018C34 2A04                       		move.l	d4,d5
00018C36 C9C0                       		muls.w	d0,d4
00018C38 4844                       		swap	d4
00018C3A CBC1                       		muls.w	d1,d5
00018C3C 4845                       		swap	d5
00018C3E D842                       		add.w	d2,d4
00018C40 DA43                       		add.w	d3,d5
00018C42 3144 000C                  		move.w	d4,$C(a0)
00018C46 3145 0008                  		move.w	d5,8(a0)
00018C4A 4E75                       		rts	
00018C4C                            ; ===========================================================================
00018C4C                            
00018C4C                            Obj67_ChkDel:				; XREF: Obj67_Action
00018C4C 3028 0032                  		move.w	$32(a0),d0
00018C50 0240 FF80                  		andi.w	#-$80,d0
00018C54 3238 F700                  		move.w	($FFFFF700).w,d1
00018C58 0441 0080                  		subi.w	#$80,d1
00018C5C 0241 FF80                  		andi.w	#-$80,d1
00018C60 9041                       		sub.w	d1,d0
00018C62 0C40 0280                  		cmpi.w	#$280,d0
00018C66 6200                       		bhi.s	Obj67_Delete
00018C68 4EF9 0001 0502             		jmp	DisplaySprite
00018C6E                            ; ===========================================================================
00018C6E                            
00018C6E                            Obj67_Delete:
00018C6E 4EF9 0001 053E             		jmp	DeleteObject
00018C74                            ; ===========================================================================
00018C74                            ; ---------------------------------------------------------------------------
00018C74                            ; Sprite mappings - disc that you run around (SBZ)
00018C74                            ; (It's just a small blob that moves around in a circle. The disc itself is
00018C74                            ; part of the level tiles.)
00018C74                            ; ---------------------------------------------------------------------------
00018C74                            Map_obj67:
00018C74                            	include "_maps\obj67.asm"
00018C74                            ; ---------------------------------------------------------------------------
00018C74                            ; Sprite mappings - disc that you run around (SBZ)
00018C74                            ; (It's just a small blob that moves around in a circle. The disc itself is
00018C74                            ; part of the level tiles.)
00018C74                            ; ---------------------------------------------------------------------------
00018C74 0000                       		dc.w byte_15688-Map_obj67
00018C76 01                         byte_15688:	dc.b 1
00018C77 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018C7C                            		even
00018C7C                            		even
00018C7C                            
00018C7C                            ; ===========================================================================
00018C7C                            ; ---------------------------------------------------------------------------
00018C7C                            ; Object 68 - conveyor belts (SBZ)
00018C7C                            ; ---------------------------------------------------------------------------
00018C7C                            
00018C7C                            Obj68:					; XREF: Obj_Index
00018C7C 7000                       		moveq	#0,d0
00018C7E 1028 0024                  		move.b	$24(a0),d0
00018C82 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00018C86 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00018C8A                            ; ===========================================================================
00018C8A 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00018C8C 0000                       		dc.w Obj68_Action-Obj68_Index
00018C8E                            ; ===========================================================================
00018C8E                            
00018C8E                            Obj68_Main:				; XREF: Obj68_Index
00018C8E 5428 0024                  		addq.b	#2,$24(a0)
00018C92 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00018C98 1228 0028                  		move.b	$28(a0),d1	; get object type
00018C9C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018CA0 6700                       		beq.s	loc_156BA	; if zero, branch
00018CA2 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00018CA8                            
00018CA8                            loc_156BA:
00018CA8 1228 0028                  		move.b	$28(a0),d1	; get object type
00018CAC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018CB0 4881                       		ext.w	d1
00018CB2 E841                       		asr.w	#4,d1
00018CB4 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00018CB8                            
00018CB8                            Obj68_Action:				; XREF: Obj68_Index
00018CB8 6100                       		bsr.s	Obj68_MoveSonic
00018CBA 3028 0008                  		move.w	8(a0),d0
00018CBE 0240 FF80                  		andi.w	#$FF80,d0
00018CC2 3238 F700                  		move.w	($FFFFF700).w,d1
00018CC6 0441 0080                  		subi.w	#$80,d1
00018CCA 0241 FF80                  		andi.w	#$FF80,d1
00018CCE 9041                       		sub.w	d1,d0
00018CD0 0C40 0280                  		cmpi.w	#$280,d0
00018CD4 6200                       		bhi.s	Obj68_Delete
00018CD6 4E75                       		rts	
00018CD8                            ; ===========================================================================
00018CD8                            
00018CD8                            Obj68_Delete:
00018CD8 4EF9 0001 053E             		jmp	DeleteObject
00018CDE                            ; ===========================================================================
00018CDE                            
00018CDE                            Obj68_MoveSonic:			; XREF: Obj68_Action
00018CDE 7400                       		moveq	#0,d2
00018CE0 1428 0038                  		move.b	$38(a0),d2
00018CE4 3602                       		move.w	d2,d3
00018CE6 D643                       		add.w	d3,d3
00018CE8 43F8 D000                  		lea	($FFFFD000).w,a1
00018CEC 3029 0008                  		move.w	8(a1),d0
00018CF0 9068 0008                  		sub.w	8(a0),d0
00018CF4 D042                       		add.w	d2,d0
00018CF6 B043                       		cmp.w	d3,d0
00018CF8 6400                       		bcc.s	locret_1572E
00018CFA 3229 000C                  		move.w	$C(a1),d1
00018CFE 9268 000C                  		sub.w	$C(a0),d1
00018D02 0641 0030                  		addi.w	#$30,d1
00018D06 0C41 0030                  		cmpi.w	#$30,d1
00018D0A 6400                       		bcc.s	locret_1572E
00018D0C 0829 0001 0022             		btst	#1,$22(a1)
00018D12 6600                       		bne.s	locret_1572E
00018D14 3028 0036                  		move.w	$36(a0),d0
00018D18 D169 0008                  		add.w	d0,8(a1)
00018D1C                            
00018D1C                            locret_1572E:
00018D1C 4E75                       		rts	
00018D1E                            
00018D1E                            ; ===========================================================================
00018D1E                            ; ---------------------------------------------------------------------------
00018D1E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00018D1E                            ; ---------------------------------------------------------------------------
00018D1E                            
00018D1E                            Obj69:					; XREF: Obj_Index
00018D1E 7000                       		moveq	#0,d0
00018D20 1028 0024                  		move.b	$24(a0),d0
00018D24 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00018D28 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00018D2C                            ; ===========================================================================
00018D2C 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00018D2E 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00018D30 0000                       		dc.w Obj69_Spinner-Obj69_Index
00018D32                            ; ===========================================================================
00018D32                            
00018D32                            Obj69_Main:				; XREF: Obj69_Index
00018D32 5428 0024                  		addq.b	#2,$24(a0)
00018D36 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00018D3E 317C 4492 0002             		move.w	#$4492,2(a0)
00018D44 0028 0004 0001             		ori.b	#4,1(a0)
00018D4A 117C 0080 0019             		move.b	#$80,$19(a0)
00018D50 7000                       		moveq	#0,d0
00018D52 1028 0028                  		move.b	$28(a0),d0
00018D56 0240 000F                  		andi.w	#$F,d0
00018D5A C0FC 003C                  		mulu.w	#$3C,d0
00018D5E 3140 0032                  		move.w	d0,$32(a0)
00018D62 4A28 0028                  		tst.b	$28(a0)
00018D66 6A00                       		bpl.s	Obj69_Trapdoor
00018D68 5428 0024                  		addq.b	#2,$24(a0)
00018D6C 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00018D74 317C 04DF 0002             		move.w	#$4DF,2(a0)
00018D7A 117C 0010 0019             		move.b	#$10,$19(a0)
00018D80 117C 0002 001C             		move.b	#2,$1C(a0)
00018D86 7000                       		moveq	#0,d0
00018D88 1028 0028                  		move.b	$28(a0),d0	; get object type
00018D8C 3200                       		move.w	d0,d1
00018D8E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018D92 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00018D96 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00018D9A 3140 0032                  		move.w	d0,$32(a0)
00018D9E 0241 0070                  		andi.w	#$70,d1
00018DA2 0641 0010                  		addi.w	#$10,d1
00018DA6 E549                       		lsl.w	#2,d1
00018DA8 5341                       		subq.w	#1,d1
00018DAA 3141 0036                  		move.w	d1,$36(a0)
00018DAE 6000                       		bra.s	Obj69_Spinner
00018DB0                            ; ===========================================================================
00018DB0                            
00018DB0                            Obj69_Trapdoor:				; XREF: Obj69_Index
00018DB0 5368 0030                  		subq.w	#1,$30(a0)
00018DB4 6A00                       		bpl.s	Obj69_Animate
00018DB6 3168 0032 0030             		move.w	$32(a0),$30(a0)
00018DBC 0868 0000 001C             		bchg	#0,$1C(a0)
00018DC2 4A28 0001                  		tst.b	1(a0)
00018DC6 6A00                       		bpl.s	Obj69_Animate
00018DC8 303C 00BB                  		move.w	#$BB,d0
00018DCC 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play door sound
00018DD2                            
00018DD2                            Obj69_Animate:
00018DD2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00018DD8 4EB9 0000 D0AC             		jsr	AnimateSprite
00018DDE 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00018DE2 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00018DE4 323C 004B                  		move.w	#$4B,d1
00018DE8 343C 000C                  		move.w	#$C,d2
00018DEC 3602                       		move.w	d2,d3
00018DEE 5243                       		addq.w	#1,d3
00018DF0 3828 0008                  		move.w	8(a0),d4
00018DF4 6100 9BF8                  		bsr.w	SolidObject
00018DF8 6000 99EC                  		bra.w	MarkObjGone
00018DFC                            ; ===========================================================================
00018DFC                            
00018DFC                            Obj69_NotSolid:
00018DFC 0828 0003 0022             		btst	#3,$22(a0)
00018E02 6700                       		beq.s	Obj69_Display
00018E04 43F8 D000                  		lea	($FFFFD000).w,a1
00018E08 08A9 0003 0022             		bclr	#3,$22(a1)
00018E0E 08A8 0003 0022             		bclr	#3,$22(a0)
00018E14 4228 0025                  		clr.b	$25(a0)
00018E18                            
00018E18                            Obj69_Display:
00018E18 6000 99CC                  		bra.w	MarkObjGone
00018E1C                            ; ===========================================================================
00018E1C                            
00018E1C                            Obj69_Spinner:				; XREF: Obj69_Index
00018E1C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00018E20 C068 0036                  		and.w	$36(a0),d0
00018E24 6600                       		bne.s	Obj69_Delay
00018E26 117C 0001 0034             		move.b	#1,$34(a0)
00018E2C                            
00018E2C                            Obj69_Delay:
00018E2C 4A28 0034                  		tst.b	$34(a0)
00018E30 6700                       		beq.s	Obj69_Animate2
00018E32 5368 0030                  		subq.w	#1,$30(a0)
00018E36 6A00                       		bpl.s	Obj69_Animate2
00018E38 3168 0032 0030             		move.w	$32(a0),$30(a0)
00018E3E 4228 0034                  		clr.b	$34(a0)
00018E42 0868 0000 001C             		bchg	#0,$1C(a0)
00018E48                            
00018E48                            Obj69_Animate2:
00018E48 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00018E4E 4EB9 0000 D0AC             		jsr	AnimateSprite
00018E54 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00018E58 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00018E5A 323C 001B                  		move.w	#$1B,d1
00018E5E 343C 0007                  		move.w	#7,d2
00018E62 3602                       		move.w	d2,d3
00018E64 5243                       		addq.w	#1,d3
00018E66 3828 0008                  		move.w	8(a0),d4
00018E6A 6100 9B82                  		bsr.w	SolidObject
00018E6E 6000 9976                  		bra.w	MarkObjGone
00018E72                            ; ===========================================================================
00018E72                            
00018E72                            Obj69_NotSolid2:
00018E72 0828 0003 0022             		btst	#3,$22(a0)
00018E78 6700                       		beq.s	Obj69_Display2
00018E7A 43F8 D000                  		lea	($FFFFD000).w,a1
00018E7E 08A9 0003 0022             		bclr	#3,$22(a1)
00018E84 08A8 0003 0022             		bclr	#3,$22(a0)
00018E8A 4228 0025                  		clr.b	$25(a0)
00018E8E                            
00018E8E                            Obj69_Display2:
00018E8E 6000 9956                  		bra.w	MarkObjGone
00018E92                            ; ===========================================================================
00018E92                            Ani_obj69:
00018E92                            	include "_anim\obj69.asm"
00018E92                            ; ---------------------------------------------------------------------------
00018E92                            ; Animation script - trapdoor (SBZ)
00018E92                            ; ---------------------------------------------------------------------------
00018E92 0000                       		dc.w byte_158AC-Ani_obj69
00018E94 0000                       		dc.w byte_158B2-Ani_obj69
00018E96 0000                       		dc.w byte_158B8-Ani_obj69
00018E98 0000                       		dc.w byte_158CC-Ani_obj69
00018E9A 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00018EA0 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00018EA6 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00018EB3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00018EBA 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00018EC7 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00018ECE                            		even
00018ECE                            		even
00018ECE                            
00018ECE                            ; ---------------------------------------------------------------------------
00018ECE                            ; Sprite mappings - trapdoor (SBZ)
00018ECE                            ; ---------------------------------------------------------------------------
00018ECE                            Map_obj69:
00018ECE                            	include "_maps\obj69.asm"
00018ECE                            ; ---------------------------------------------------------------------------
00018ECE                            ; Sprite mappings - trapdoor (SBZ)
00018ECE                            ; ---------------------------------------------------------------------------
00018ECE 0000                       		dc.w byte_158E6-Map_obj69
00018ED0 0000                       		dc.w byte_158FB-Map_obj69
00018ED2 0000                       		dc.w byte_15924-Map_obj69
00018ED4 04                         byte_158E6:	dc.b 4
00018ED5 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00018EDA F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00018EDF F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00018EE4 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00018EE9 08                         byte_158FB:	dc.b 8
00018EEA F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00018EEF 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00018EF4 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00018EF9 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00018EFE F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00018F03 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00018F08 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00018F0D 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00018F12 04                         byte_15924:	dc.b 4
00018F13 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018F18 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00018F1D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018F22 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018F28 00                         		even
00018F28 00                         		even
00018F28                            
00018F28                            ; ---------------------------------------------------------------------------
00018F28                            ; Sprite mappings - spinning platforms (SBZ)
00018F28                            ; ---------------------------------------------------------------------------
00018F28                            Map_obj69a:
00018F28                            	include "_maps\obj69a.asm"
00018F28                            ; ---------------------------------------------------------------------------
00018F28                            ; Sprite mappings - spinning platforms (SBZ)
00018F28                            ; ---------------------------------------------------------------------------
00018F28 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00018F2C 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00018F30 0000                       		dc.w byte_15970-Map_obj69a
00018F32 02                         byte_15944:	dc.b 2
00018F33 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018F38 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00018F3D 02                         byte_1594F:	dc.b 2
00018F3E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00018F43 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018F48 02                         byte_1595A:	dc.b 2
00018F49 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018F4E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00018F53 02                         byte_15965:	dc.b 2
00018F54 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018F59 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018F5E 02                         byte_15970:	dc.b 2
00018F5F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00018F64 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018F6A 00                         		even
00018F6A 00                         		even
00018F6A                            
00018F6A                            ; ===========================================================================
00018F6A                            ; ---------------------------------------------------------------------------
00018F6A                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018F6A                            ; ---------------------------------------------------------------------------
00018F6A                            
00018F6A                            Obj6A:					; XREF: Obj_Index
00018F6A 7000                       		moveq	#0,d0
00018F6C 1028 0024                  		move.b	$24(a0),d0
00018F70 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00018F74 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00018F78                            ; ===========================================================================
00018F78 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00018F7A 0000                       		dc.w Obj6A_Action-Obj6A_Index
00018F7C                            ; ===========================================================================
00018F7C                            
00018F7C                            Obj6A_Main:				; XREF: Obj6A_Index
00018F7C 5428 0024                  		addq.b	#2,$24(a0)
00018F80 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00018F88 317C 43B5 0002             		move.w	#$43B5,2(a0)
00018F8E 117C 0004 0001             		move.b	#4,1(a0)
00018F94 117C 0004 0018             		move.b	#4,$18(a0)
00018F9A 117C 0020 0019             		move.b	#$20,$19(a0)
00018FA0 3168 0008 003A             		move.w	8(a0),$3A(a0)
00018FA6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018FAC 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00018FB2 6400                       		bcc.s	Obj6A_Action
00018FB4 117C 00A2 0020             		move.b	#$A2,$20(a0)
00018FBA                            
00018FBA                            Obj6A_Action:				; XREF: Obj6A_Index
00018FBA 7000                       		moveq	#0,d0
00018FBC 1028 0028                  		move.b	$28(a0),d0
00018FC0 0240 0007                  		andi.w	#7,d0
00018FC4 D040                       		add.w	d0,d0
00018FC6 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00018FCA 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00018FCE 3028 003A                  		move.w	$3A(a0),d0
00018FD2 0240 FF80                  		andi.w	#$FF80,d0
00018FD6 3238 F700                  		move.w	($FFFFF700).w,d1
00018FDA 0441 0080                  		subi.w	#$80,d1
00018FDE 0241 FF80                  		andi.w	#$FF80,d1
00018FE2 9041                       		sub.w	d1,d0
00018FE4 0C40 0280                  		cmpi.w	#$280,d0
00018FE8 6200                       		bhi.s	Obj6A_Delete
00018FEA 4EF9 0001 0502             		jmp	DisplaySprite
00018FF0                            ; ===========================================================================
00018FF0                            
00018FF0                            Obj6A_Delete:
00018FF0 4EF9 0001 053E             		jmp	DeleteObject
00018FF6                            ; ===========================================================================
00018FF6 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00018FFA 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00018FFE 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00019000                            ; ===========================================================================
00019000                            
00019000                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00019000 4E75                       		rts	
00019002                            ; ===========================================================================
00019002                            
00019002                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00019002 323C 0060                  		move.w	#$60,d1
00019006 7000                       		moveq	#0,d0
00019008 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001900C 0828 0000 0022             		btst	#0,$22(a0)
00019012 6700                       		beq.s	Obj6A_Animate01
00019014 4440                       		neg.w	d0
00019016 D041                       		add.w	d1,d0
00019018                            
00019018                            Obj6A_Animate01:
00019018 3228 003A                  		move.w	$3A(a0),d1
0001901C 9240                       		sub.w	d0,d1
0001901E 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00019022 5328 001E                  		subq.b	#1,$1E(a0)
00019026 6A00                       		bpl.s	loc_15A46
00019028 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001902E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00019034                            
00019034                            loc_15A46:
00019034 4A28 0001                  		tst.b	1(a0)
00019038 6A00                       		bpl.s	locret_15A60
0001903A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001903E 0240 000F                  		andi.w	#$F,d0
00019042 6600                       		bne.s	locret_15A60
00019044 303C 00B0                  		move.w	#$B0,d0
00019048 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play saw sound
0001904E                            
0001904E                            locret_15A60:
0001904E 4E75                       		rts	
00019050                            ; ===========================================================================
00019050                            
00019050                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00019050 323C 0030                  		move.w	#$30,d1
00019054 7000                       		moveq	#0,d0
00019056 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001905A 0828 0000 0022             		btst	#0,$22(a0)
00019060 6700                       		beq.s	Obj6A_Animate02
00019062 4440                       		neg.w	d0
00019064 0640 0080                  		addi.w	#$80,d0
00019068                            
00019068                            Obj6A_Animate02:
00019068 3228 0038                  		move.w	$38(a0),d1
0001906C 9240                       		sub.w	d0,d1
0001906E 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00019072 5328 001E                  		subq.b	#1,$1E(a0)
00019076 6A00                       		bpl.s	loc_15A96
00019078 117C 0002 001E             		move.b	#2,$1E(a0)
0001907E 0868 0000 001A             		bchg	#0,$1A(a0)
00019084                            
00019084                            loc_15A96:
00019084 4A28 0001                  		tst.b	1(a0)
00019088 6A00                       		bpl.s	locret_15AB0
0001908A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001908E 0C00 0018                  		cmpi.b	#$18,d0
00019092 6600                       		bne.s	locret_15AB0
00019094 303C 00B0                  		move.w	#$B0,d0
00019098 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play saw sound
0001909E                            
0001909E                            locret_15AB0:
0001909E 4E75                       		rts	
000190A0                            ; ===========================================================================
000190A0                            
000190A0                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000190A0 4A28 003D                  		tst.b	$3D(a0)
000190A4 6600                       		bne.s	Obj6A_Animate03
000190A6 3038 D008                  		move.w	($FFFFD008).w,d0
000190AA 0440 00C0                  		subi.w	#$C0,d0
000190AE 6500                       		bcs.s	loc_15B02
000190B0 9068 0008                  		sub.w	8(a0),d0
000190B4 6500                       		bcs.s	loc_15B02
000190B6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000190BA 0440 0080                  		subi.w	#$80,d0
000190BE B068 000C                  		cmp.w	$C(a0),d0
000190C2 6400                       		bcc.s	locret_15B04
000190C4 0640 0100                  		addi.w	#$100,d0
000190C8 B068 000C                  		cmp.w	$C(a0),d0
000190CC 6500                       		bcs.s	locret_15B04
000190CE 117C 0001 003D             		move.b	#1,$3D(a0)
000190D4 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000190DA 117C 00A2 0020             		move.b	#$A2,$20(a0)
000190E0 117C 0002 001A             		move.b	#2,$1A(a0)
000190E6 303C 00B0                  		move.w	#$B0,d0
000190EA 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play saw sound
000190F0                            
000190F0                            loc_15B02:
000190F0 588F                       		addq.l	#4,sp
000190F2                            
000190F2                            locret_15B04:
000190F2 4E75                       		rts	
000190F4                            ; ===========================================================================
000190F4                            
000190F4                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000190F4 4EB9 0001 04DC             		jsr	SpeedToPos
000190FA 3168 0008 003A             		move.w	8(a0),$3A(a0)
00019100 5328 001E                  		subq.b	#1,$1E(a0)
00019104 6A00                       		bpl.s	locret_15B24
00019106 117C 0002 001E             		move.b	#2,$1E(a0)
0001910C 0868 0000 001A             		bchg	#0,$1A(a0)
00019112                            
00019112                            locret_15B24:
00019112 4E75                       		rts	
00019114                            ; ===========================================================================
00019114                            
00019114                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00019114 4A28 003D                  		tst.b	$3D(a0)
00019118 6600                       		bne.s	Obj6A_Animate04
0001911A 3038 D008                  		move.w	($FFFFD008).w,d0
0001911E 0640 00E0                  		addi.w	#$E0,d0
00019122 9068 0008                  		sub.w	8(a0),d0
00019126 6400                       		bcc.s	loc_15B74
00019128 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001912C 0440 0080                  		subi.w	#$80,d0
00019130 B068 000C                  		cmp.w	$C(a0),d0
00019134 6400                       		bcc.s	locret_15B76
00019136 0640 0100                  		addi.w	#$100,d0
0001913A B068 000C                  		cmp.w	$C(a0),d0
0001913E 6500                       		bcs.s	locret_15B76
00019140 117C 0001 003D             		move.b	#1,$3D(a0)
00019146 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001914C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00019152 117C 0002 001A             		move.b	#2,$1A(a0)
00019158 303C 00B0                  		move.w	#$B0,d0
0001915C 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play saw sound
00019162                            
00019162                            loc_15B74:
00019162 588F                       		addq.l	#4,sp
00019164                            
00019164                            locret_15B76:
00019164 4E75                       		rts	
00019166                            ; ===========================================================================
00019166                            
00019166                            Obj6A_Animate04:
00019166 4EB9 0001 04DC             		jsr	SpeedToPos
0001916C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00019172 5328 001E                  		subq.b	#1,$1E(a0)
00019176 6A00                       		bpl.s	locret_15B96
00019178 117C 0002 001E             		move.b	#2,$1E(a0)
0001917E 0868 0000 001A             		bchg	#0,$1A(a0)
00019184                            
00019184                            locret_15B96:
00019184 4E75                       		rts	
00019186                            ; ===========================================================================
00019186                            ; ---------------------------------------------------------------------------
00019186                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00019186                            ; ---------------------------------------------------------------------------
00019186                            Map_obj6A:
00019186                            	include "_maps\obj6A.asm"
00019186                            ; ---------------------------------------------------------------------------
00019186                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00019186                            ; ---------------------------------------------------------------------------
00019186 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001918A 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001918E 07                         byte_15BA0:	dc.b 7
0001918F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00019194 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00019199 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001919E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000191A3 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000191A8 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000191AD 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000191B2 07                         byte_15BC4:	dc.b 7
000191B3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000191B8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000191BD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000191C2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000191C7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000191CC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000191D1 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000191D6 04                         byte_15BE8:	dc.b 4
000191D7 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000191DC E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000191E1 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000191E6 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000191EB 04                         byte_15BFD:	dc.b 4
000191EC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000191F1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000191F6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000191FB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00019200                            		even
00019200                            		even
00019200                            
00019200                            ; ===========================================================================
00019200                            ; ---------------------------------------------------------------------------
00019200                            ; Object 6B - stomper (SBZ)
00019200                            ; ---------------------------------------------------------------------------
00019200                            
00019200                            Obj6B:					; XREF: Obj_Index
00019200 7000                       		moveq	#0,d0
00019202 1028 0024                  		move.b	$24(a0),d0
00019206 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001920A 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
0001920E                            ; ===========================================================================
0001920E 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00019210 0000                       		dc.w Obj6B_Action-Obj6B_Index
00019212                            
00019212 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00019216 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001921A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001921E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00019222 8040 0005                  		dc.b  $80, $40,	  0,   5
00019226                            ; ===========================================================================
00019226                            
00019226                            Obj6B_Main:				; XREF: Obj6B_Index
00019226 5428 0024                  		addq.b	#2,$24(a0)
0001922A 7000                       		moveq	#0,d0
0001922C 1028 0028                  		move.b	$28(a0),d0
00019230 E448                       		lsr.w	#2,d0
00019232 0240 001C                  		andi.w	#$1C,d0
00019236 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001923A 115B 0019                  		move.b	(a3)+,$19(a0)
0001923E 115B 0016                  		move.b	(a3)+,$16(a0)
00019242 E448                       		lsr.w	#2,d0
00019244 1140 001A                  		move.b	d0,$1A(a0)
00019248 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00019250 317C 22C0 0002             		move.w	#$22C0,2(a0)
00019256 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001925C 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001925E 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00019264 6700                       		beq.s	Obj6B_SBZ3
00019266                            
00019266                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00019266 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001926A 7000                       		moveq	#0,d0
0001926C 1028 0023                  		move.b	$23(a0),d0
00019270 6700                       		beq.s	Obj6B_Delete
00019272 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019278                            
00019278                            Obj6B_Delete:
00019278 4EF9 0001 053E             		jmp	DeleteObject
0001927E                            ; ===========================================================================
0001927E                            
0001927E                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001927E 317C 41F0 0002             		move.w	#$41F0,2(a0)
00019284 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001928A 6600                       		bne.s	Obj6B_SBZ12
0001928C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00019290 7000                       		moveq	#0,d0
00019292 1028 0023                  		move.b	$23(a0),d0
00019296 6700                       		beq.s	Obj6B_SBZ12
00019298 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001929E 6700                       		beq.s	Obj6B_SBZ12
000192A0 4238 F7CB                  		clr.b	($FFFFF7CB).w
000192A4 60C0                       		bra.s	Obj6B_ChkGone
000192A6                            ; ===========================================================================
000192A6                            
000192A6                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000192A6 0028 0004 0001             		ori.b	#4,1(a0)
000192AC 117C 0004 0018             		move.b	#4,$18(a0)
000192B2 3168 0008 0034             		move.w	8(a0),$34(a0)
000192B8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000192BE 7000                       		moveq	#0,d0
000192C0 101B                       		move.b	(a3)+,d0
000192C2 3140 003C                  		move.w	d0,$3C(a0)
000192C6 7000                       		moveq	#0,d0
000192C8 1028 0028                  		move.b	$28(a0),d0
000192CC 6A00                       		bpl.s	Obj6B_Action
000192CE 0200 000F                  		andi.b	#$F,d0
000192D2 1140 003E                  		move.b	d0,$3E(a0)
000192D6 1153 0028                  		move.b	(a3),$28(a0)
000192DA 0C13 0005                  		cmpi.b	#5,(a3)
000192DE 6600                       		bne.s	Obj6B_ChkGone2
000192E0 08E8 0004 0001             		bset	#4,1(a0)
000192E6                            
000192E6                            Obj6B_ChkGone2:
000192E6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000192EA 7000                       		moveq	#0,d0
000192EC 1028 0023                  		move.b	$23(a0),d0
000192F0 6700                       		beq.s	Obj6B_Action
000192F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000192F8                            
000192F8                            Obj6B_Action:				; XREF: Obj6B_Index
000192F8 3F28 0008                  		move.w	8(a0),-(sp)
000192FC 7000                       		moveq	#0,d0
000192FE 1028 0028                  		move.b	$28(a0),d0
00019302 0240 000F                  		andi.w	#$F,d0
00019306 D040                       		add.w	d0,d0
00019308 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
0001930C 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00019310 381F                       		move.w	(sp)+,d4
00019312 4A28 0001                  		tst.b	1(a0)
00019316 6A00                       		bpl.s	Obj6B_ChkDel
00019318 7200                       		moveq	#0,d1
0001931A 1228 0019                  		move.b	$19(a0),d1
0001931E 0641 000B                  		addi.w	#$B,d1
00019322 7400                       		moveq	#0,d2
00019324 1428 0016                  		move.b	$16(a0),d2
00019328 3602                       		move.w	d2,d3
0001932A 5243                       		addq.w	#1,d3
0001932C 6100 96C0                  		bsr.w	SolidObject
00019330                            
00019330                            Obj6B_ChkDel:
00019330 3028 0034                  		move.w	$34(a0),d0
00019334 0240 FF80                  		andi.w	#$FF80,d0
00019338 3238 F700                  		move.w	($FFFFF700).w,d1
0001933C 0441 0080                  		subi.w	#$80,d1
00019340 0241 FF80                  		andi.w	#$FF80,d1
00019344 9041                       		sub.w	d1,d0
00019346 0C40 0280                  		cmpi.w	#$280,d0
0001934A 6200                       		bhi.s	loc_15D64
0001934C 4EF9 0001 0502             		jmp	DisplaySprite
00019352                            ; ===========================================================================
00019352                            
00019352                            loc_15D64:
00019352 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00019358 6600                       		bne.s	Obj6B_Delete2
0001935A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001935E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00019362 7000                       		moveq	#0,d0
00019364 1028 0023                  		move.b	$23(a0),d0
00019368 6700                       		beq.s	Obj6B_Delete2
0001936A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019370                            
00019370                            Obj6B_Delete2:
00019370 4EF9 0001 053E             		jmp	DeleteObject
00019376                            ; ===========================================================================
00019376 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001937A 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001937E 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00019382                            ; ===========================================================================
00019382                            
00019382                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00019382 4E75                       		rts	
00019384                            ; ===========================================================================
00019384                            
00019384                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00019384 4A28 0038                  		tst.b	$38(a0)
00019388 6600                       		bne.s	loc_15DB4
0001938A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001938E 7000                       		moveq	#0,d0
00019390 1028 003E                  		move.b	$3E(a0),d0
00019394 0832 0000 0000             		btst	#0,(a2,d0.w)
0001939A 6700                       		beq.s	loc_15DC2
0001939C 117C 0001 0038             		move.b	#1,$38(a0)
000193A2                            
000193A2                            loc_15DB4:
000193A2 3028 003C                  		move.w	$3C(a0),d0
000193A6 B068 003A                  		cmp.w	$3A(a0),d0
000193AA 6700                       		beq.s	loc_15DE0
000193AC 5468 003A                  		addq.w	#2,$3A(a0)
000193B0                            
000193B0                            loc_15DC2:
000193B0 3028 003A                  		move.w	$3A(a0),d0
000193B4 0828 0000 0022             		btst	#0,$22(a0)
000193BA 6700                       		beq.s	loc_15DD4
000193BC 4440                       		neg.w	d0
000193BE 0640 0080                  		addi.w	#$80,d0
000193C2                            
000193C2                            loc_15DD4:
000193C2 3228 0034                  		move.w	$34(a0),d1
000193C6 9240                       		sub.w	d0,d1
000193C8 3141 0008                  		move.w	d1,8(a0)
000193CC 4E75                       		rts	
000193CE                            ; ===========================================================================
000193CE                            
000193CE                            loc_15DE0:
000193CE 5228 0028                  		addq.b	#1,$28(a0)
000193D2 317C 00B4 0036             		move.w	#$B4,$36(a0)
000193D8 4228 0038                  		clr.b	$38(a0)
000193DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000193E0 7000                       		moveq	#0,d0
000193E2 1028 0023                  		move.b	$23(a0),d0
000193E6 67C8                       		beq.s	loc_15DC2
000193E8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000193EE 60C0                       		bra.s	loc_15DC2
000193F0                            ; ===========================================================================
000193F0                            
000193F0                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000193F0 4A28 0038                  		tst.b	$38(a0)
000193F4 6600                       		bne.s	loc_15E14
000193F6 5368 0036                  		subq.w	#1,$36(a0)
000193FA 6600                       		bne.s	loc_15E1E
000193FC 117C 0001 0038             		move.b	#1,$38(a0)
00019402                            
00019402                            loc_15E14:
00019402 4A68 003A                  		tst.w	$3A(a0)
00019406 6700                       		beq.s	loc_15E3C
00019408 5568 003A                  		subq.w	#2,$3A(a0)
0001940C                            
0001940C                            loc_15E1E:
0001940C 3028 003A                  		move.w	$3A(a0),d0
00019410 0828 0000 0022             		btst	#0,$22(a0)
00019416 6700                       		beq.s	loc_15E30
00019418 4440                       		neg.w	d0
0001941A 0640 0080                  		addi.w	#$80,d0
0001941E                            
0001941E                            loc_15E30:
0001941E 3228 0034                  		move.w	$34(a0),d1
00019422 9240                       		sub.w	d0,d1
00019424 3141 0008                  		move.w	d1,8(a0)
00019428 4E75                       		rts	
0001942A                            ; ===========================================================================
0001942A                            
0001942A                            loc_15E3C:
0001942A 5328 0028                  		subq.b	#1,$28(a0)
0001942E 4228 0038                  		clr.b	$38(a0)
00019432 45F8 FC00                  		lea	($FFFFFC00).w,a2
00019436 7000                       		moveq	#0,d0
00019438 1028 0023                  		move.b	$23(a0),d0
0001943C 67CE                       		beq.s	loc_15E1E
0001943E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00019444 60C6                       		bra.s	loc_15E1E
00019446                            ; ===========================================================================
00019446                            
00019446                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00019446 4A28 0038                  		tst.b	$38(a0)
0001944A 6600                       		bne.s	loc_15E7C
0001944C 4A68 003A                  		tst.w	$3A(a0)
00019450 6700                       		beq.s	loc_15E6A
00019452 5368 003A                  		subq.w	#1,$3A(a0)
00019456 6000                       		bra.s	loc_15E8E
00019458                            ; ===========================================================================
00019458                            
00019458                            loc_15E6A:
00019458 5368 0036                  		subq.w	#1,$36(a0)
0001945C 6A00                       		bpl.s	loc_15E8E
0001945E 317C 003C 0036             		move.w	#$3C,$36(a0)
00019464 117C 0001 0038             		move.b	#1,$38(a0)
0001946A                            
0001946A                            loc_15E7C:
0001946A 5068 003A                  		addq.w	#8,$3A(a0)
0001946E 3028 003A                  		move.w	$3A(a0),d0
00019472 B068 003C                  		cmp.w	$3C(a0),d0
00019476 6600                       		bne.s	loc_15E8E
00019478 4228 0038                  		clr.b	$38(a0)
0001947C                            
0001947C                            loc_15E8E:
0001947C 3028 003A                  		move.w	$3A(a0),d0
00019480 0828 0000 0022             		btst	#0,$22(a0)
00019486 6700                       		beq.s	loc_15EA0
00019488 4440                       		neg.w	d0
0001948A 0640 0038                  		addi.w	#$38,d0
0001948E                            
0001948E                            loc_15EA0:
0001948E 3228 0030                  		move.w	$30(a0),d1
00019492 D240                       		add.w	d0,d1
00019494 3141 000C                  		move.w	d1,$C(a0)
00019498 4E75                       		rts	
0001949A                            ; ===========================================================================
0001949A                            
0001949A                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001949A 4A28 0038                  		tst.b	$38(a0)
0001949E 6600                       		bne.s	loc_15ED0
000194A0 4A68 003A                  		tst.w	$3A(a0)
000194A4 6700                       		beq.s	loc_15EBE
000194A6 5168 003A                  		subq.w	#8,$3A(a0)
000194AA 6000                       		bra.s	loc_15EF0
000194AC                            ; ===========================================================================
000194AC                            
000194AC                            loc_15EBE:
000194AC 5368 0036                  		subq.w	#1,$36(a0)
000194B0 6A00                       		bpl.s	loc_15EF0
000194B2 317C 003C 0036             		move.w	#$3C,$36(a0)
000194B8 117C 0001 0038             		move.b	#1,$38(a0)
000194BE                            
000194BE                            loc_15ED0:
000194BE 3028 003A                  		move.w	$3A(a0),d0
000194C2 B068 003C                  		cmp.w	$3C(a0),d0
000194C6 6700                       		beq.s	loc_15EE0
000194C8 5068 003A                  		addq.w	#8,$3A(a0)
000194CC 6000                       		bra.s	loc_15EF0
000194CE                            ; ===========================================================================
000194CE                            
000194CE                            loc_15EE0:
000194CE 5368 0036                  		subq.w	#1,$36(a0)
000194D2 6A00                       		bpl.s	loc_15EF0
000194D4 317C 003C 0036             		move.w	#$3C,$36(a0)
000194DA 4228 0038                  		clr.b	$38(a0)
000194DE                            
000194DE                            loc_15EF0:
000194DE 3028 003A                  		move.w	$3A(a0),d0
000194E2 0828 0000 0022             		btst	#0,$22(a0)
000194E8 6700                       		beq.s	loc_15F02
000194EA 4440                       		neg.w	d0
000194EC 0640 0038                  		addi.w	#$38,d0
000194F0                            
000194F0                            loc_15F02:
000194F0 3228 0030                  		move.w	$30(a0),d1
000194F4 D240                       		add.w	d0,d1
000194F6 3141 000C                  		move.w	d1,$C(a0)
000194FA 4E75                       		rts	
000194FC                            ; ===========================================================================
000194FC                            
000194FC                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000194FC 4A28 0038                  		tst.b	$38(a0)
00019500 6600                       		bne.s	loc_15F3E
00019502 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00019506 7000                       		moveq	#0,d0
00019508 1028 003E                  		move.b	$3E(a0),d0
0001950C 0832 0000 0000             		btst	#0,(a2,d0.w)
00019512 6700                       		beq.s	locret_15F5C
00019514 117C 0001 0038             		move.b	#1,$38(a0)
0001951A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001951E 7000                       		moveq	#0,d0
00019520 1028 0023                  		move.b	$23(a0),d0
00019524 6700                       		beq.s	loc_15F3E
00019526 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001952C                            
0001952C                            loc_15F3E:
0001952C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00019534 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001953C 3168 0008 0034             		move.w	8(a0),$34(a0)
00019542 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00019548 6700                       		beq.s	loc_15F5E
0001954A                            
0001954A                            locret_15F5C:
0001954A 4E75                       		rts	
0001954C                            ; ===========================================================================
0001954C                            
0001954C                            loc_15F5E:
0001954C 4228 0028                  		clr.b	$28(a0)
00019550 4228 0038                  		clr.b	$38(a0)
00019554 4E75                       		rts	
00019556                            ; ===========================================================================
00019556                            ; ---------------------------------------------------------------------------
00019556                            ; Sprite mappings - stomper and	platforms (SBZ)
00019556                            ; ---------------------------------------------------------------------------
00019556                            Map_obj6B:
00019556                            	include "_maps\obj6B.asm"
00019556                            ; ---------------------------------------------------------------------------
00019556                            ; Sprite mappings - stomper and	platforms (SBZ)
00019556                            ; ---------------------------------------------------------------------------
00019556 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001955A 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001955E 0000                       		dc.w byte_15FB0-Map_obj6B
00019560 04                         byte_15F72:	dc.b 4
00019561 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00019566 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001956B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00019570 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00019575 08                         byte_15F87:	dc.b 8
00019576 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001957B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00019580 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00019585 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001958A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001958F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00019594 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00019599 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001959E 0E                         byte_15FB0:	dc.b $E
0001959F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000195A4 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000195A9 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000195AE C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000195B3 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000195B8 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000195BD C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000195C2 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000195C7 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000195CC E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000195D1 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000195D6 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000195DB 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000195E0 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000195E6 00                         		even
000195E6 00                         		even
000195E6                            
000195E6                            ; ===========================================================================
000195E6                            ; ---------------------------------------------------------------------------
000195E6                            ; Object 6C - vanishing	platforms (SBZ)
000195E6                            ; ---------------------------------------------------------------------------
000195E6                            
000195E6                            Obj6C:					; XREF: Obj_Index
000195E6 7000                       		moveq	#0,d0
000195E8 1028 0024                  		move.b	$24(a0),d0
000195EC 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000195F0 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000195F4                            ; ===========================================================================
000195F4 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000195F6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000195F8 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000195FA 0000                       		dc.w loc_16068-Obj6C_Index
000195FC                            ; ===========================================================================
000195FC                            
000195FC                            Obj6C_Main:				; XREF: Obj6C_Index
000195FC 5C28 0024                  		addq.b	#6,$24(a0)
00019600 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00019608 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001960E 0028 0004 0001             		ori.b	#4,1(a0)
00019614 117C 0010 0019             		move.b	#$10,$19(a0)
0001961A 117C 0004 0018             		move.b	#4,$18(a0)
00019620 7000                       		moveq	#0,d0
00019622 1028 0028                  		move.b	$28(a0),d0	; get object type
00019626 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001962A 5240                       		addq.w	#1,d0		; add 1
0001962C EF48                       		lsl.w	#7,d0		; multiply by $80
0001962E 3200                       		move.w	d0,d1
00019630 5340                       		subq.w	#1,d0
00019632 3140 0030                  		move.w	d0,$30(a0)
00019636 3140 0032                  		move.w	d0,$32(a0)
0001963A 7000                       		moveq	#0,d0
0001963C 1028 0028                  		move.b	$28(a0),d0	; get object type
00019640 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00019644 0641 0080                  		addi.w	#$80,d1
00019648 C0C1                       		mulu.w	d1,d0
0001964A E088                       		lsr.l	#8,d0
0001964C 3140 0036                  		move.w	d0,$36(a0)
00019650 5341                       		subq.w	#1,d1
00019652 3141 0038                  		move.w	d1,$38(a0)
00019656                            
00019656                            loc_16068:				; XREF: Obj6C_Index
00019656 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001965A 9068 0036                  		sub.w	$36(a0),d0
0001965E C068 0038                  		and.w	$38(a0),d0
00019662 6600                       		bne.s	Obj6C_Animate
00019664 5928 0024                  		subq.b	#4,$24(a0)
00019668 6000                       		bra.s	Obj6C_Vanish
0001966A                            ; ===========================================================================
0001966A                            
0001966A                            Obj6C_Animate:
0001966A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00019670 4EB9 0000 D0AC             		jsr	AnimateSprite
00019676 6000 916E                  		bra.w	MarkObjGone
0001967A                            ; ===========================================================================
0001967A                            
0001967A                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001967A 5368 0030                  		subq.w	#1,$30(a0)
0001967E 6A00                       		bpl.s	loc_160AA
00019680 317C 007F 0030             		move.w	#127,$30(a0)
00019686 4A28 001C                  		tst.b	$1C(a0)
0001968A 6700                       		beq.s	loc_160A4
0001968C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00019692                            
00019692                            loc_160A4:
00019692 0868 0000 001C             		bchg	#0,$1C(a0)
00019698                            
00019698                            loc_160AA:
00019698 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001969E 4EB9 0000 D0AC             		jsr	AnimateSprite
000196A4 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000196AA 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000196AC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000196B2 6600                       		bne.s	loc_160D6
000196B4 7200                       		moveq	#0,d1
000196B6 1228 0019                  		move.b	$19(a0),d1
000196BA 4EB9 0000 9B64             		jsr	(PlatformObject).l
000196C0 6000 9124                  		bra.w	MarkObjGone
000196C4                            ; ===========================================================================
000196C4                            
000196C4                            loc_160D6:
000196C4 7200                       		moveq	#0,d1
000196C6 1228 0019                  		move.b	$19(a0),d1
000196CA 4EB9 0000 9CD8             		jsr	(ExitPlatform).l
000196D0 3428 0008                  		move.w	8(a0),d2
000196D4 4EB9 0000 A242             		jsr	(MvSonicOnPtfm2).l
000196DA 6000 910A                  		bra.w	MarkObjGone
000196DE                            ; ===========================================================================
000196DE                            
000196DE                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000196DE 0828 0003 0022             		btst	#3,$22(a0)
000196E4 6700                       		beq.s	Obj6C_Display
000196E6 43F8 D000                  		lea	($FFFFD000).w,a1
000196EA 08A9 0003 0022             		bclr	#3,$22(a1)
000196F0 08A8 0003 0022             		bclr	#3,$22(a0)
000196F6 117C 0002 0024             		move.b	#2,$24(a0)
000196FC 4228 0025                  		clr.b	$25(a0)
00019700                            
00019700                            Obj6C_Display:
00019700 6000 90E4                  		bra.w	MarkObjGone
00019704                            ; ===========================================================================
00019704                            Ani_obj6C:
00019704                            	include "_anim\obj6C.asm"
00019704                            ; ---------------------------------------------------------------------------
00019704                            ; Animation script - vanishing platforms (SBZ)
00019704                            ; ---------------------------------------------------------------------------
00019704 0000                       		dc.w byte_1611A-Ani_obj6C
00019706 0000                       		dc.w byte_16122-Ani_obj6C
00019708 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00019710 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00019718                            		even
00019718                            		even
00019718                            
00019718                            ; ---------------------------------------------------------------------------
00019718                            ; Sprite mappings - vanishing platforms	(SBZ)
00019718                            ; ---------------------------------------------------------------------------
00019718                            Map_obj6C:
00019718                            	include "_maps\obj6C.asm"
00019718                            ; ---------------------------------------------------------------------------
00019718                            ; Sprite mappings - vanishing platforms	(SBZ)
00019718                            ; ---------------------------------------------------------------------------
00019718 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
0001971C 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00019720 01                         byte_16132:	dc.b 1
00019721 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00019726 01                         byte_16138:	dc.b 1
00019727 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001972C 01                         byte_1613E:	dc.b 1
0001972D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00019732 00                         byte_16144:	dc.b 0
00019734 00                         		even
00019734 00                         		even
00019734                            
00019734                            ; ===========================================================================
00019734                            ; ---------------------------------------------------------------------------
00019734                            ; Object 6E - electrocution orbs (SBZ)
00019734                            ; ---------------------------------------------------------------------------
00019734                            
00019734                            Obj6E:					; XREF: Obj_Index
00019734 7000                       		moveq	#0,d0
00019736 1028 0024                  		move.b	$24(a0),d0
0001973A 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001973E 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00019742                            ; ===========================================================================
00019742 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00019744 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00019746                            ; ===========================================================================
00019746                            
00019746                            Obj6E_Main:				; XREF: Obj6E_Index
00019746 5428 0024                  		addq.b	#2,$24(a0)
0001974A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00019752 317C 047E 0002             		move.w	#$47E,2(a0)
00019758 0028 0004 0001             		ori.b	#4,1(a0)
0001975E 117C 0028 0019             		move.b	#$28,$19(a0)
00019764 7000                       		moveq	#0,d0
00019766 1028 0028                  		move.b	$28(a0),d0	; read object type
0001976A E948                       		lsl.w	#4,d0		; multiply by $10
0001976C 5340                       		subq.w	#1,d0
0001976E 3140 0034                  		move.w	d0,$34(a0)
00019772                            
00019772                            Obj6E_Shock:				; XREF: Obj6E_Index
00019772 3038 FE04                  		move.w	($FFFFFE04).w,d0
00019776 C068 0034                  		and.w	$34(a0),d0
0001977A 6600                       		bne.s	Obj6E_Animate
0001977C 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00019782 4A28 0001                  		tst.b	1(a0)
00019786 6A00                       		bpl.s	Obj6E_Animate
00019788 303C 00B1                  		move.w	#$B1,d0
0001978C 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play electricity sound
00019792                            
00019792                            Obj6E_Animate:
00019792 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00019798 4EB9 0000 D0AC             		jsr	AnimateSprite
0001979E 117C 0000 0020             		move.b	#0,$20(a0)
000197A4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000197AA 6600                       		bne.s	Obj6E_Display	; if not, branch
000197AC 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000197B2                            
000197B2                            Obj6E_Display:
000197B2 6000 9032                  		bra.w	MarkObjGone
000197B6                            ; ===========================================================================
000197B6                            Ani_obj6E:
000197B6                            	include "_anim\obj6E.asm"
000197B6                            ; ---------------------------------------------------------------------------
000197B6                            ; Animation script - electrocution orbs (SBZ)
000197B6                            ; ---------------------------------------------------------------------------
000197B6 0000                       		dc.w byte_161CC-Ani_obj6E
000197B8 0000                       		dc.w byte_161D0-Ani_obj6E
000197BA 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000197BE 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000197CE                            		even
000197CE                            		even
000197CE                            
000197CE                            ; ---------------------------------------------------------------------------
000197CE                            ; Sprite mappings - electrocution orbs (SBZ)
000197CE                            ; ---------------------------------------------------------------------------
000197CE                            Map_obj6E:
000197CE                            	include "_maps\obj6E.asm"
000197CE                            ; ---------------------------------------------------------------------------
000197CE                            ; Sprite mappings - electrocution orbs (SBZ)
000197CE                            ; ---------------------------------------------------------------------------
000197CE 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
000197D2 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
000197D6 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
000197DA 02                         byte_161EC:	dc.b 2
000197DB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000197E0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000197E5 03                         byte_161F7:	dc.b 3
000197E6 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000197EB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000197F0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000197F5 05                         byte_16207:	dc.b 5
000197F6 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000197FB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00019800 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00019805 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001980A F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001980F 04                         byte_16221:	dc.b 4
00019810 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00019815 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001981A F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001981F F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00019824 06                         byte_16236:	dc.b 6
00019825 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001982A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001982F F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00019834 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00019839 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
0001983E F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00019843 04                         byte_16255:	dc.b 4
00019844 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00019849 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001984E F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00019853 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00019858                            		even
00019858                            		even
00019858                            
00019858                            ; ===========================================================================
00019858                            ; ---------------------------------------------------------------------------
00019858                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019858                            ; ---------------------------------------------------------------------------
00019858                            
00019858                            Obj6F:					; XREF: Obj_Index
00019858 7000                       		moveq	#0,d0
0001985A 1028 0024                  		move.b	$24(a0),d0
0001985E 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00019862 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00019866 3028 0030                  		move.w	$30(a0),d0
0001986A 0240 FF80                  		andi.w	#$FF80,d0
0001986E 3238 F700                  		move.w	($FFFFF700).w,d1
00019872 0441 0080                  		subi.w	#$80,d1
00019876 0241 FF80                  		andi.w	#$FF80,d1
0001987A 9041                       		sub.w	d1,d0
0001987C 0C40 0280                  		cmpi.w	#$280,d0
00019880 6200                       		bhi.s	loc_1629A
00019882                            
00019882                            Obj6F_Display:
00019882 4EF9 0001 0502             		jmp	DisplaySprite
00019888                            ; ===========================================================================
00019888                            
00019888                            loc_1629A:
00019888 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001988E 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00019890 0C40 FF80                  		cmpi.w	#-$80,d0
00019894 64EC                       		bcc.s	Obj6F_Display
00019896                            
00019896                            Obj6F_Act1or2:
00019896 1028 002F                  		move.b	$2F(a0),d0
0001989A 6A00                       		bpl.s	Obj6F_Delete
0001989C 0240 007F                  		andi.w	#$7F,d0
000198A0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000198A4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000198AA                            
000198AA                            Obj6F_Delete:
000198AA 4EF9 0001 053E             		jmp	DeleteObject
000198B0                            ; ===========================================================================
000198B0 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000198B2 0000                       		dc.w loc_163D8-Obj6F_Index
000198B4                            ; ===========================================================================
000198B4                            
000198B4                            Obj6F_Main:				; XREF: Obj6F_Index
000198B4 1028 0028                  		move.b	$28(a0),d0
000198B8 6B00 0000                  		bmi.w	loc_16380
000198BC 5428 0024                  		addq.b	#2,$24(a0)
000198C0 217C 0001 8F28 0004        		move.l	#Map_obj69a,4(a0)
000198C8 317C 04DF 0002             		move.w	#$4DF,2(a0)
000198CE 117C 0010 0019             		move.b	#$10,$19(a0)
000198D4 0028 0004 0001             		ori.b	#4,1(a0)
000198DA 117C 0004 0018             		move.b	#4,$18(a0)
000198E0 7000                       		moveq	#0,d0
000198E2 1028 0028                  		move.b	$28(a0),d0
000198E6 3200                       		move.w	d0,d1
000198E8 E648                       		lsr.w	#3,d0
000198EA 0240 001E                  		andi.w	#$1E,d0
000198EE 45FA 0000                  		lea	off_164A6(pc),a2
000198F2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000198F6 315A 0038                  		move.w	(a2)+,$38(a0)
000198FA 315A 0030                  		move.w	(a2)+,$30(a0)
000198FE 214A 003C                  		move.l	a2,$3C(a0)
00019902 0241 000F                  		andi.w	#$F,d1
00019906 E549                       		lsl.w	#2,d1
00019908 1141 0038                  		move.b	d1,$38(a0)
0001990C 117C 0004 003A             		move.b	#4,$3A(a0)
00019912 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00019916 6700                       		beq.s	loc_16356
00019918 117C 0001 003B             		move.b	#1,$3B(a0)
0001991E 4428 003A                  		neg.b	$3A(a0)
00019922 7200                       		moveq	#0,d1
00019924 1228 0038                  		move.b	$38(a0),d1
00019928 D228 003A                  		add.b	$3A(a0),d1
0001992C B228 0039                  		cmp.b	$39(a0),d1
00019930 6500                       		bcs.s	loc_16352
00019932 1001                       		move.b	d1,d0
00019934 7200                       		moveq	#0,d1
00019936 4A00                       		tst.b	d0
00019938 6A00                       		bpl.s	loc_16352
0001993A 1228 0039                  		move.b	$39(a0),d1
0001993E 5901                       		subq.b	#4,d1
00019940                            
00019940                            loc_16352:
00019940 1141 0038                  		move.b	d1,$38(a0)
00019944                            
00019944                            loc_16356:
00019944 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001994A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00019950 4A41                       		tst.w	d1
00019952 6600                       		bne.s	loc_1636C
00019954 117C 0001 001C             		move.b	#1,$1C(a0)
0001995A                            
0001995A                            loc_1636C:
0001995A 0C41 0008                  		cmpi.w	#8,d1
0001995E 6600                       		bne.s	loc_16378
00019960 117C 0000 001C             		move.b	#0,$1C(a0)
00019966                            
00019966                            loc_16378:
00019966 6100 BBFE                  		bsr.w	Obj63_ChangeDir
0001996A 6000 0000                  		bra.w	loc_163D8
0001996E                            ; ===========================================================================
0001996E                            
0001996E                            loc_16380:				; XREF: Obj6F_Main
0001996E 1140 002F                  		move.b	d0,$2F(a0)
00019972 0240 007F                  		andi.w	#$7F,d0
00019976 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001997A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00019980 6700                       		beq.s	loc_1639A
00019982 4EF9 0001 053E             		jmp	DeleteObject
00019988                            ; ===========================================================================
00019988                            
00019988                            loc_1639A:
00019988 4E75                       		rts
0001998A                            ; ===========================================================================
0001998A                            
0001998A                            loc_163D8:				; XREF: Obj6F_Index
0001998A 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00019990 4EB9 0000 D0AC             		jsr	AnimateSprite
00019996 4A28 001A                  		tst.b	$1A(a0)
0001999A 6600                       		bne.s	loc_16404
0001999C 3F28 0008                  		move.w	8(a0),-(sp)
000199A0 6100 0000                  		bsr.w	loc_16424
000199A4 323C 001B                  		move.w	#$1B,d1
000199A8 343C 0007                  		move.w	#7,d2
000199AC 3602                       		move.w	d2,d3
000199AE 5243                       		addq.w	#1,d3
000199B0 381F                       		move.w	(sp)+,d4
000199B2 6000 903A                  		bra.w	SolidObject
000199B6                            ; ===========================================================================
000199B6                            
000199B6                            loc_16404:
000199B6 0828 0003 0022             		btst	#3,$22(a0)
000199BC 6700                       		beq.s	loc_16420
000199BE 43F8 D000                  		lea	($FFFFD000).w,a1
000199C2 08A9 0003 0022             		bclr	#3,$22(a1)
000199C8 08A8 0003 0022             		bclr	#3,$22(a0)
000199CE 4228 0025                  		clr.b	$25(a0)
000199D2                            
000199D2                            loc_16420:
000199D2 6000 0002                  		bra.w	*+4
000199D6                            
000199D6                            loc_16424:
000199D6 3028 0008                  		move.w	8(a0),d0
000199DA B068 0034                  		cmp.w	$34(a0),d0
000199DE 6600                       		bne.s	loc_16484
000199E0 3028 000C                  		move.w	$C(a0),d0
000199E4 B068 0036                  		cmp.w	$36(a0),d0
000199E8 6600                       		bne.s	loc_16484
000199EA 7200                       		moveq	#0,d1
000199EC 1228 0038                  		move.b	$38(a0),d1
000199F0 D228 003A                  		add.b	$3A(a0),d1
000199F4 B228 0039                  		cmp.b	$39(a0),d1
000199F8 6500                       		bcs.s	loc_16456
000199FA 1001                       		move.b	d1,d0
000199FC 7200                       		moveq	#0,d1
000199FE 4A00                       		tst.b	d0
00019A00 6A00                       		bpl.s	loc_16456
00019A02 1228 0039                  		move.b	$39(a0),d1
00019A06 5901                       		subq.b	#4,d1
00019A08                            
00019A08                            loc_16456:
00019A08 1141 0038                  		move.b	d1,$38(a0)
00019A0C 2268 003C                  		movea.l	$3C(a0),a1
00019A10 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00019A16 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00019A1C 4A41                       		tst.w	d1
00019A1E 6600                       		bne.s	loc_16474
00019A20 117C 0001 001C             		move.b	#1,$1C(a0)
00019A26                            
00019A26                            loc_16474:
00019A26 0C41 0008                  		cmpi.w	#8,d1
00019A2A 6600                       		bne.s	loc_16480
00019A2C 117C 0000 001C             		move.b	#0,$1C(a0)
00019A32                            
00019A32                            loc_16480:
00019A32 6100 BB32                  		bsr.w	Obj63_ChangeDir
00019A36                            
00019A36                            loc_16484:
00019A36 4EF9 0001 04DC             		jmp	SpeedToPos
00019A3C                            ; ===========================================================================
00019A3C                            Ani_obj6F:
00019A3C                            	include "_anim\obj6F.asm"
00019A3C                            ; ---------------------------------------------------------------------------
00019A3C                            ; Animation script - platform on conveyor belt (SBZ)
00019A3C                            ; ---------------------------------------------------------------------------
00019A3C 0000                       		dc.w byte_1648E-Ani_obj6F
00019A3E 0000                       		dc.w byte_164A2-Ani_obj6F
00019A40 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00019A4D 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00019A54 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00019A58 00                         		even
00019A58 00                         		even
00019A58                            
00019A58 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00019A5E 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00019A64 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00019A78 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00019A8C 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00019AA0 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00019AB4 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00019AC8 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019ADC                            ; ===========================================================================
00019ADC                            ; ---------------------------------------------------------------------------
00019ADC                            ; Object 70 - large girder block (SBZ)
00019ADC                            ; ---------------------------------------------------------------------------
00019ADC                            
00019ADC                            Obj70:					; XREF: Obj_Index
00019ADC 7000                       		moveq	#0,d0
00019ADE 1028 0024                  		move.b	$24(a0),d0
00019AE2 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00019AE6 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00019AEA                            ; ===========================================================================
00019AEA 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00019AEC 0000                       		dc.w Obj70_Action-Obj70_Index
00019AEE                            ; ===========================================================================
00019AEE                            
00019AEE                            Obj70_Main:				; XREF: Obj70_Index
00019AEE 5428 0024                  		addq.b	#2,$24(a0)
00019AF2 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00019AFA 317C 42F0 0002             		move.w	#$42F0,2(a0)
00019B00 0028 0004 0001             		ori.b	#4,1(a0)
00019B06 117C 0004 0018             		move.b	#4,$18(a0)
00019B0C 117C 0060 0019             		move.b	#$60,$19(a0)
00019B12 117C 0018 0016             		move.b	#$18,$16(a0)
00019B18 3168 0008 0032             		move.w	8(a0),$32(a0)
00019B1E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00019B24 6100 0000                  		bsr.w	Obj70_Move2
00019B28                            
00019B28                            Obj70_Action:				; XREF: Obj70_Index
00019B28 3F28 0008                  		move.w	8(a0),-(sp)
00019B2C 4A68 003A                  		tst.w	$3A(a0)
00019B30 6700                       		beq.s	Obj70_Move
00019B32 5368 003A                  		subq.w	#1,$3A(a0)
00019B36 6600                       		bne.s	Obj70_Solid
00019B38                            
00019B38                            Obj70_Move:
00019B38 4EB9 0001 04DC             		jsr	SpeedToPos
00019B3E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00019B42 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00019B44 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00019B48                            
00019B48                            Obj70_Solid:
00019B48 381F                       		move.w	(sp)+,d4
00019B4A 4A28 0001                  		tst.b	1(a0)
00019B4E 6A00                       		bpl.s	Obj70_ChkDel
00019B50 7200                       		moveq	#0,d1
00019B52 1228 0019                  		move.b	$19(a0),d1
00019B56 0641 000B                  		addi.w	#$B,d1
00019B5A 7400                       		moveq	#0,d2
00019B5C 1428 0016                  		move.b	$16(a0),d2
00019B60 3602                       		move.w	d2,d3
00019B62 5243                       		addq.w	#1,d3
00019B64 6100 8E88                  		bsr.w	SolidObject
00019B68                            
00019B68                            Obj70_ChkDel:
00019B68 3028 0032                  		move.w	$32(a0),d0
00019B6C 0240 FF80                  		andi.w	#$FF80,d0
00019B70 3238 F700                  		move.w	($FFFFF700).w,d1
00019B74 0441 0080                  		subi.w	#$80,d1
00019B78 0241 FF80                  		andi.w	#$FF80,d1
00019B7C 9041                       		sub.w	d1,d0
00019B7E 0C40 0280                  		cmpi.w	#$280,d0
00019B82 6200                       		bhi.s	Obj70_Delete
00019B84 4EF9 0001 0502             		jmp	DisplaySprite
00019B8A                            ; ===========================================================================
00019B8A                            
00019B8A                            Obj70_Delete:
00019B8A 4EF9 0001 053E             		jmp	DeleteObject
00019B90                            ; ===========================================================================
00019B90                            
00019B90                            Obj70_Move2:				; XREF: Obj70_Main
00019B90 1028 0038                  		move.b	$38(a0),d0
00019B94 0240 0018                  		andi.w	#$18,d0
00019B98 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00019B9E 43F1 0000                  		lea	(a1,d0.w),a1
00019BA2 3159 0010                  		move.w	(a1)+,$10(a0)
00019BA6 3159 0012                  		move.w	(a1)+,$12(a0)
00019BAA 3159 0034                  		move.w	(a1)+,$34(a0)
00019BAE 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00019BB2 317C 0007 003A             		move.w	#7,$3A(a0)
00019BB8 4E75                       		rts	
00019BBA                            ; ===========================================================================
00019BBA 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00019BC2 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00019BCA FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00019BD2 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00019BDA                            ; ---------------------------------------------------------------------------
00019BDA                            ; Sprite mappings - large girder block (SBZ)
00019BDA                            ; ---------------------------------------------------------------------------
00019BDA                            Map_obj70:
00019BDA                            	include "_maps\obj70.asm"
00019BDA                            ; ---------------------------------------------------------------------------
00019BDA                            ; Sprite mappings - large girder block (SBZ)
00019BDA                            ; ---------------------------------------------------------------------------
00019BDA 0000                       		dc.w byte_1662A-Map_obj70
00019BDC 0C                         byte_1662A:	dc.b $C
00019BDD E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00019BE2 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00019BE7 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019BEC 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00019BF1 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00019BF6 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00019BFB E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00019C00 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00019C05 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00019C0A 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00019C0F E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00019C14 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00019C1A 00                         		even
00019C1A 00                         		even
00019C1A                            
00019C1A                            ; ===========================================================================
00019C1A                            ; ---------------------------------------------------------------------------
00019C1A                            ; Object 72 - teleporter (SBZ)
00019C1A                            ; ---------------------------------------------------------------------------
00019C1A                            
00019C1A                            Obj72:					; XREF: Obj_Index
00019C1A 7000                       		moveq	#0,d0
00019C1C 1028 0024                  		move.b	$24(a0),d0
00019C20 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00019C24 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00019C28 3028 0008                  		move.w	8(a0),d0
00019C2C 0240 FF80                  		andi.w	#$FF80,d0
00019C30 3238 F700                  		move.w	($FFFFF700).w,d1
00019C34 0441 0080                  		subi.w	#$80,d1
00019C38 0241 FF80                  		andi.w	#$FF80,d1
00019C3C 9041                       		sub.w	d1,d0
00019C3E 0C40 0280                  		cmpi.w	#$280,d0
00019C42 6200                       		bhi.s	Obj72_Delete
00019C44 4E75                       		rts	
00019C46                            ; ===========================================================================
00019C46                            
00019C46                            Obj72_Delete:
00019C46 4EF9 0001 053E             		jmp	DeleteObject
00019C4C                            ; ===========================================================================
00019C4C 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00019C4E 0000                       		dc.w loc_166C8-Obj72_Index
00019C50 0000                       		dc.w loc_1675E-Obj72_Index
00019C52 0000                       		dc.w loc_16798-Obj72_Index
00019C54                            ; ===========================================================================
00019C54                            
00019C54                            Obj72_Main:				; XREF: Obj72_Index
00019C54 5428 0024                  		addq.b	#2,$24(a0)
00019C58 1028 0028                  		move.b	$28(a0),d0
00019C5C D040                       		add.w	d0,d0
00019C5E 0240 001E                  		andi.w	#$1E,d0
00019C62 45FA 0000                  		lea	Obj72_Data(pc),a2
00019C66 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019C6A 315A 003A                  		move.w	(a2)+,$3A(a0)
00019C6E 214A 003C                  		move.l	a2,$3C(a0)
00019C72 315A 0036                  		move.w	(a2)+,$36(a0)
00019C76 315A 0038                  		move.w	(a2)+,$38(a0)
00019C7A                            
00019C7A                            loc_166C8:				; XREF: Obj72_Index
00019C7A 43F8 D000                  		lea	($FFFFD000).w,a1
00019C7E 3029 0008                  		move.w	8(a1),d0
00019C82 9068 0008                  		sub.w	8(a0),d0
00019C86 0828 0000 0022             		btst	#0,$22(a0)
00019C8C 6700                       		beq.s	loc_166E0
00019C8E 0640 000F                  		addi.w	#$F,d0
00019C92                            
00019C92                            loc_166E0:
00019C92 0C40 0010                  		cmpi.w	#$10,d0
00019C96 6400                       		bcc.s	locret_1675C
00019C98 3229 000C                  		move.w	$C(a1),d1
00019C9C 9268 000C                  		sub.w	$C(a0),d1
00019CA0 0641 0020                  		addi.w	#$20,d1
00019CA4 0C41 0040                  		cmpi.w	#$40,d1
00019CA8 6400                       		bcc.s	locret_1675C
00019CAA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00019CAE 6600                       		bne.s	locret_1675C
00019CB0 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00019CB6 6600                       		bne.s	loc_1670E
00019CB8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00019CBE 6500                       		bcs.s	locret_1675C
00019CC0                            
00019CC0                            loc_1670E:
00019CC0 5428 0024                  		addq.b	#2,$24(a0)
00019CC4 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00019CCA 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00019CD0 337C 0800 0014             		move.w	#$800,$14(a1)
00019CD6 337C 0000 0010             		move.w	#0,$10(a1)
00019CDC 337C 0000 0012             		move.w	#0,$12(a1)
00019CE2 08A8 0005 0022             		bclr	#5,$22(a0)
00019CE8 08A9 0005 0022             		bclr	#5,$22(a1)
00019CEE 08E9 0001 0022             		bset	#1,$22(a1)
00019CF4 3368 0008 0008             		move.w	8(a0),8(a1)
00019CFA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019D00 4228 0032                  		clr.b	$32(a0)
00019D04 303C 00BE                  		move.w	#$BE,d0
00019D08 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00019D0E                            
00019D0E                            locret_1675C:
00019D0E 4E75                       		rts	
00019D10                            ; ===========================================================================
00019D10                            
00019D10                            loc_1675E:				; XREF: Obj72_Index
00019D10 43F8 D000                  		lea	($FFFFD000).w,a1
00019D14 1028 0032                  		move.b	$32(a0),d0
00019D18 5428 0032                  		addq.b	#2,$32(a0)
00019D1C 4EB9 0000 3798             		jsr	(CalcSine).l
00019D22 EA40                       		asr.w	#5,d0
00019D24 3428 000C                  		move.w	$C(a0),d2
00019D28 9440                       		sub.w	d0,d2
00019D2A 3342 000C                  		move.w	d2,$C(a1)
00019D2E 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00019D34 6600                       		bne.s	locret_16796
00019D36 6100 0000                  		bsr.w	sub_1681C
00019D3A 5428 0024                  		addq.b	#2,$24(a0)
00019D3E 303C 00BC                  		move.w	#$BC,d0
00019D42 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play teleport sound
00019D48                            
00019D48                            locret_16796:
00019D48 4E75                       		rts	
00019D4A                            ; ===========================================================================
00019D4A                            
00019D4A                            loc_16798:				; XREF: Obj72_Index
00019D4A 588F                       		addq.l	#4,sp
00019D4C 43F8 D000                  		lea	($FFFFD000).w,a1
00019D50 5328 002E                  		subq.b	#1,$2E(a0)
00019D54 6A00                       		bpl.s	loc_167DA
00019D56 3368 0036 0008             		move.w	$36(a0),8(a1)
00019D5C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019D62 7200                       		moveq	#0,d1
00019D64 1228 003A                  		move.b	$3A(a0),d1
00019D68 5801                       		addq.b	#4,d1
00019D6A B228 003B                  		cmp.b	$3B(a0),d1
00019D6E 6500                       		bcs.s	loc_167C2
00019D70 7200                       		moveq	#0,d1
00019D72 6000                       		bra.s	loc_16800
00019D74                            ; ===========================================================================
00019D74                            
00019D74                            loc_167C2:
00019D74 1141 003A                  		move.b	d1,$3A(a0)
00019D78 2468 003C                  		movea.l	$3C(a0),a2
00019D7C 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00019D82 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00019D88 6000 0000                  		bra.w	sub_1681C
00019D8C                            ; ===========================================================================
00019D8C                            
00019D8C                            loc_167DA:
00019D8C 2429 0008                  		move.l	8(a1),d2
00019D90 2629 000C                  		move.l	$C(a1),d3
00019D94 3029 0010                  		move.w	$10(a1),d0
00019D98 48C0                       		ext.l	d0
00019D9A E180                       		asl.l	#8,d0
00019D9C D480                       		add.l	d0,d2
00019D9E 3029 0012                  		move.w	$12(a1),d0
00019DA2 48C0                       		ext.l	d0
00019DA4 E180                       		asl.l	#8,d0
00019DA6 D680                       		add.l	d0,d3
00019DA8 2342 0008                  		move.l	d2,8(a1)
00019DAC 2343 000C                  		move.l	d3,$C(a1)
00019DB0 4E75                       		rts	
00019DB2                            ; ===========================================================================
00019DB2                            
00019DB2                            loc_16800:
00019DB2 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00019DB8 4228 0024                  		clr.b	$24(a0)
00019DBC 4238 F7C8                  		clr.b	($FFFFF7C8).w
00019DC0 337C 0000 0010             		move.w	#0,$10(a1)
00019DC6 337C 0200 0012             		move.w	#$200,$12(a1)
00019DCC 4E75                       		rts	
00019DCE                            
00019DCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019DCE                            
00019DCE                            
00019DCE                            sub_1681C:
00019DCE 7000                       		moveq	#0,d0
00019DD0 343C 1000                  		move.w	#$1000,d2
00019DD4 3028 0036                  		move.w	$36(a0),d0
00019DD8 9069 0008                  		sub.w	8(a1),d0
00019DDC 6C00                       		bge.s	loc_16830
00019DDE 4440                       		neg.w	d0
00019DE0 4442                       		neg.w	d2
00019DE2                            
00019DE2                            loc_16830:
00019DE2 7200                       		moveq	#0,d1
00019DE4 363C 1000                  		move.w	#$1000,d3
00019DE8 3228 0038                  		move.w	$38(a0),d1
00019DEC 9269 000C                  		sub.w	$C(a1),d1
00019DF0 6C00                       		bge.s	loc_16844
00019DF2 4441                       		neg.w	d1
00019DF4 4443                       		neg.w	d3
00019DF6                            
00019DF6                            loc_16844:
00019DF6 B240                       		cmp.w	d0,d1
00019DF8 6500                       		bcs.s	loc_1687A
00019DFA 7200                       		moveq	#0,d1
00019DFC 3228 0038                  		move.w	$38(a0),d1
00019E00 9269 000C                  		sub.w	$C(a1),d1
00019E04 4841                       		swap	d1
00019E06 83C3                       		divs.w	d3,d1
00019E08 7000                       		moveq	#0,d0
00019E0A 3028 0036                  		move.w	$36(a0),d0
00019E0E 9069 0008                  		sub.w	8(a1),d0
00019E12 6700                       		beq.s	loc_16866
00019E14 4840                       		swap	d0
00019E16 81C1                       		divs.w	d1,d0
00019E18                            
00019E18                            loc_16866:
00019E18 3340 0010                  		move.w	d0,$10(a1)
00019E1C 3343 0012                  		move.w	d3,$12(a1)
00019E20 4A41                       		tst.w	d1
00019E22 6A00                       		bpl.s	loc_16874
00019E24 4441                       		neg.w	d1
00019E26                            
00019E26                            loc_16874:
00019E26 3141 002E                  		move.w	d1,$2E(a0)
00019E2A 4E75                       		rts	
00019E2C                            ; ===========================================================================
00019E2C                            
00019E2C                            loc_1687A:
00019E2C 7000                       		moveq	#0,d0
00019E2E 3028 0036                  		move.w	$36(a0),d0
00019E32 9069 0008                  		sub.w	8(a1),d0
00019E36 4840                       		swap	d0
00019E38 81C2                       		divs.w	d2,d0
00019E3A 7200                       		moveq	#0,d1
00019E3C 3228 0038                  		move.w	$38(a0),d1
00019E40 9269 000C                  		sub.w	$C(a1),d1
00019E44 6700                       		beq.s	loc_16898
00019E46 4841                       		swap	d1
00019E48 83C0                       		divs.w	d0,d1
00019E4A                            
00019E4A                            loc_16898:
00019E4A 3341 0012                  		move.w	d1,$12(a1)
00019E4E 3342 0010                  		move.w	d2,$10(a1)
00019E52 4A40                       		tst.w	d0
00019E54 6A00                       		bpl.s	loc_168A6
00019E56 4440                       		neg.w	d0
00019E58                            
00019E58                            loc_168A6:
00019E58 3140 002E                  		move.w	d0,$2E(a0)
00019E5C 4E75                       		rts	
00019E5E                            ; End of function sub_1681C
00019E5E                            
00019E5E                            ; ===========================================================================
00019E5E 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00019E64 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00019E6A 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00019E6E 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00019E74 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00019E7A 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00019E80 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00019E86 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00019E8C 0884 0298 0894             		dc.w $884, $298, $894
00019E92 0270 0894 0190             		dc.w $270, $894, $190
00019E98 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00019E9E 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00019EA4 1184 0498 1158             		dc.w $1184, $498, $1158
00019EAA 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00019EB0 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00019EB6 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00019EBC 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00019EC2 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00019EC8 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00019ECE FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00019ED4 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019EDA FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019EE0 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00019EE6                            ; ===========================================================================
00019EE6                            ; ---------------------------------------------------------------------------
00019EE6                            ; Object 8D - "Press Start Button"
00019EE6                            ; ---------------------------------------------------------------------------
00019EE6                            
00019EE6                            Obj8D:
00019EE6 7000                       		moveq	#0,d0
00019EE8 1028 0024                  		move.b	$24(a0),d0
00019EEC 323B 0000                  		move.w	Obj8D_Index(pc,d0.w),d1
00019EF0 4EFB 1000                  		jmp	Obj8D_Index(pc,d1.w)
00019EF4                            ; ===========================================================================
00019EF4 0000                       Obj8D_Index:	dc.w Obj8D_Main-Obj8D_Index
00019EF6 0000                       		dc.w Obj8D_Func-Obj8D_Index
00019EF8                            ; ===========================================================================
00019EF8                            
00019EF8                            Obj8D_Main:				; XREF: Obj21_Main
00019EF8 5428 0024                  		addq.b	#2,$24(a0)			;go to next routine
00019EFC 317C 0110 0008             		move.w	#$110,8(a0)			;x position
00019F02 317C 014D 000A             		move.w	#$14D,$A(a0)			;y position
00019F08 217C 0000 0000 0004        		move.l	#Map_Obj8D,4(a0)		;Maps
00019F10 317C 2310 0002             		move.w	#$2310,2(a0)			;VRAM position
00019F16 117C 0001 0018             		move.b	#1,$18(a0)
00019F1C 43F9 0000 0000             		lea	(Ani_Obj8D).l,a1
00019F22 4EB9 0000 D0AC             		jsr	AnimateSprite
00019F28                            
00019F28                            Obj8D_Func:
00019F28 4EB9 0000 0000             		jsr	Obj8D_Display
00019F2E 4E75                       		rts
00019F30                            Obj8D_Display:
00019F30 43F9 0000 0000             		lea	(Ani_Obj8D).l,a1
00019F36 4EB9 0000 D0AC             		jsr	AnimateSprite
00019F3C 4EF9 0001 0502             		jmp	DisplaySprite
00019F42 4E75                       		rts
00019F44                            Ani_Obj8D:
00019F44                            		include	'_anim\obj8D.asm'
00019F44 0000                       		dc.w Anim_psb-Ani_obj8D
00019F46 1300 01FF                  Anim_psb:	dc.b $13, 0, 1, $FF
00019F4A                            		even
00019F4A                            		even
00019F4A                            
00019F4A                            Map_Obj8D:
00019F4A                            		include	'_maps\obj8D.asm'
00019F4A                            ; --------------------------------------------------------------------------------
00019F4A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019F4A                            ; --------------------------------------------------------------------------------
00019F4A                            
00019F4A                            SME_HaTSG:	
00019F4A 0000 0000                  		dc.w SME_HaTSG_6-SME_HaTSG, SME_HaTSG_57-SME_HaTSG	
00019F4E 0000                       		dc.w SME_HaTSG_58-SME_HaTSG	
00019F50 10                         SME_HaTSG_6:	dc.b $10	
00019F51 E000 0006 C8               		dc.b $E0, 0, 0, 6, $C8	
00019F56 E000 0007 D0               		dc.b $E0, 0, 0, 7, $D0	
00019F5B E000 0003 D8               		dc.b $E0, 0, 0, 3, $D8	
00019F60 E000 0008 E0               		dc.b $E0, 0, 0, 8, $E0	
00019F65 E000 0008 E8               		dc.b $E0, 0, 0, 8, $E8	
00019F6A E000 0008 F8               		dc.b $E0, 0, 0, 8, $F8	
00019F6F E000 0009 00               		dc.b $E0, 0, 0, 9, 0	
00019F74 E000 0001 08               		dc.b $E0, 0, 0, 1, 8	
00019F79 E000 0007 10               		dc.b $E0, 0, 0, 7, $10	
00019F7E E000 0009 18               		dc.b $E0, 0, 0, 9, $18	
00019F83 E000 0002 28               		dc.b $E0, 0, 0, 2, $28	
00019F88 E000 000A 30               		dc.b $E0, 0, 0, $A, $30	
00019F8D E000 0009 38               		dc.b $E0, 0, 0, 9, $38	
00019F92 E000 0005 48               		dc.b $E0, 0, 0, 5, $48	
00019F97 E000 0009 40               		dc.b $E0, 0, 0, 9, $40	
00019F9C E000 0004 50               		dc.b $E0, 0, 0, 4, $50	
00019FA1 00                         SME_HaTSG_57:	dc.b 0	
00019FA2 00                         SME_HaTSG_58:	dc.b 0	
00019FA4 00                         		even
00019FA4 00                         		even
00019FA4                            ; ---------------------------------------------------------------------------
00019FA4                            ; Object 8D - Menu's Cursor
00019FA4                            ; ---------------------------------------------------------------------------
00019FA4                            
00019FA4                            Obj8E:
00019FA4 7000                       		moveq	#0,d0
00019FA6 1028 0024                  		move.b	$24(a0),d0
00019FAA 323B 0000                  		move.w	Obj8E_Index(pc,d0.w),d1
00019FAE 4EFB 1000                  		jmp	Obj8E_Index(pc,d1.w)
00019FB2                            ; ===========================================================================
00019FB2 0000                       Obj8E_Index:	dc.w Obj8E_Main-Obj8E_Index
00019FB4 0000                       		dc.w Obj8E_Func-Obj8E_Index
00019FB6                            ; ===========================================================================
00019FB6                            
00019FB6                            Obj8E_Main:				; XREF: Obj21_Main
00019FB6 5428 0024                  		addq.b	#2,$24(a0)			;go to next routine
00019FBA 11FC 0000 FF93             		move.b	#0,($FFFFFF93).w		;Cursor's position
00019FC0 11FC 0000 FF9B             		move.b	#0,($FFFFFF9B).w		;Clear Menu State
00019FC6 317C 00A0 0008             		move.w	#$A0,8(a0)			;x position
00019FCC 317C 00D0 000A             		move.w	#$D0,$A(a0)			;y position
00019FD2 217C 0000 0000 0004        		move.l	#Map_Obj8E,4(a0)		;Maps
00019FDA 317C 65A0 0002             		move.w	#$65A0,2(a0)			;VRAM position
00019FE0 117C 0001 0018             		move.b	#1,$18(a0)
00019FE6                            Obj8E_Func:
00019FE6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is button start pressed?
00019FEC 6600 0000                  		bne.w	Obj8E_Start	 ; if yes, branch
00019FF0 0838 0001 F605             		btst	#1,($FFFFF605).w ; is button down pressed?
00019FF6 6600                       		bne.s	Obj8E_Down	 ; if yes, branch
00019FF8 0838 0000 F605             		btst	#0,($FFFFF605).w ; is button up pressed?
00019FFE 6600                       		bne.s	Obj8E_Up	 ; if yes, branch
0001A000                            
0001A000                            Obj8E_Return:
0001A000 4EB9 0000 0000             		jsr	AniArt_Load
0001A006 4EB9 0000 0000             		jsr	Obj8E_Display
0001A00C 4E75                       		rts
0001A00E                            
0001A00E                            Obj8E_Down:
0001A00E 0C38 0001 FF9B             		cmpi.b	#1,($FFFFFF9B).w	;Is Sel Char screen?
0001A014 6600                       		bne.s	Obj8E_Down_Cont		;If not, branch
0001A016 0C38 0001 FF93             		cmpi.b	#1,($FFFFFF93).w
0001A01C 67E2                       		beq.s	Obj8E_Return
0001A01E 0668 0020 000A             		add.w	#$20,$A(a0)
0001A024 5238 FF93                  		add.b	#1,($FFFFFF93).w		;Cursor's pos+1
0001A028 4EB9 0000 0000             		jsr	AniArt_Load
0001A02E 4EB9 0000 0000             		jsr	Obj8E_Display
0001A034 4E75                       		rts
0001A036                            
0001A036                            Obj8E_Down_Cont:
0001A036 0C38 0003 FF93             		cmpi.b	#3,($FFFFFF93).w
0001A03C 67C2                       		beq.s	Obj8E_Return
0001A03E 0668 0020 000A             		add.w	#$20,$A(a0)
0001A044 5238 FF93                  		add.b	#1,($FFFFFF93).w		;Cursor's pos+1
0001A048 4EB9 0000 0000             		jsr	AniArt_Load
0001A04E 4EB9 0000 0000             		jsr	Obj8E_Display
0001A054 4E75                       		rts
0001A056                            
0001A056                            Obj8E_UP:
0001A056 0C38 0000 FF93             		cmpi.b	#0,($FFFFFF93).w
0001A05C 67A2                       		beq.s	Obj8E_Return
0001A05E 5338 FF93                  		sub.b	#1,($FFFFFF93).w		;Cursor's pos-1
0001A062 0468 0020 000A             		sub.w	#$20,$A(a0)
0001A068 4EB9 0000 0000             		jsr	AniArt_Load
0001A06E 4EB9 0000 0000             		jsr	Obj8E_Display
0001A074 4E75                       		rts
0001A076                            
0001A076                            Obj8E_Start:
0001A076 0C38 0001 FF9B             		cmpi.b	#1,($FFFFFF9B).w	;Is Sel Char screen?
0001A07C 6700                       		beq.s	Obj8E_StartIfM2		;If yes, branch
0001A07E 0C38 0000 FF93             		cmpi.b	#0,($FFFFFF93).w
0001A084 6700 0000                  		beq	Obj8E_Start_Char
0001A088 0C38 0002 FF93             		cmpi.b	#2,($FFFFFF93).w
0001A08E 6700 0000                  		beq	Obj8E_Start_Options
0001A092 4E75                       		rts
0001A094                            
0001A094                            Obj8E_Start_Options:
0001A094 11FC 0048 FF94             		move.b	#$48,($FFFFFF94).w
0001A09A 4E75                       		rts
0001A09C                            
0001A09C                            Obj8E_Start_Char:
0001A09C                            ;		jsr	Pal_FadeFrom
0001A09C 2A3C 4000 0003             		move.l	#$40000003,d5
0001A0A2 43F9 0000 8CA0             		lea	(MenuScreen_ASCII_SelChar),a1
0001A0A8 363C 6580                  		move.w	#$6580,d3
0001A0AC 4EB8 1964                  		jsr	LoadASCII
0001A0B0 11FC 0001 FF9B             		move.b	#1,($FFFFFF9B).w	; Menu's ID
0001A0B6 4EB9 0000 0000             		jsr	AniArt_Load
0001A0BC                            ;		jsr	Pal_FadeTo
0001A0BC                            ;		jsr	Obj8E_Display
0001A0BC 4E75                       		rts
0001A0BE                            
0001A0BE                            Obj8E_StartIfM2:
0001A0BE 0C38 0000 FF93             		cmpi.b	#0,($FFFFFF93).w
0001A0C4 6700                       		beq.s	Obj8E_StartIfM2_S
0001A0C6 11FC 0001 FF9C             		move.b	#1,($FFFFFF9C).w	; Windy
0001A0CC 11FC 004C FF94             		move.b	#$4C,($FFFFFF94).w
0001A0D2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0001A0D8 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w
0001A0DE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0001A0E4 4EB9 0000 0000             		jsr	Obj8E_Display
0001A0EA 4E75                       		rts		
0001A0EC                            
0001A0EC                            Obj8E_StartIfM2_S:
0001A0EC 11FC 0000 FF9C             		move.b	#0,($FFFFFF9C).w	; Sonic
0001A0F2 11FC 004C FF94             		move.b	#$4C,($FFFFFF94).w
0001A0F8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0001A0FE 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w
0001A104 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0001A10A 4EB9 0000 0000             		jsr	Obj8E_Display
0001A110 4E75                       		rts		
0001A112                            
0001A112                            Obj8E_Display:
0001A112 4EF9 0001 0502             		jmp	DisplaySprite
0001A118 4E75                       		rts
0001A11A                            Map_Obj8E:
0001A11A                            		include	'menu\cursor.asm'
0001A11A                            ; --------------------------------------------------------------------------------
0001A11A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A11A                            ; --------------------------------------------------------------------------------
0001A11A                            
0001A11A                            SME_OLCzm:	
0001A11A 0000                       		dc.w SME_OLCzm_2-SME_OLCzm	
0001A11C 01                         SME_OLCzm_2:	dc.b 1	
0001A11D E000 0038 F8               		dc.b $E0, 0, 0, $38, $F8	
0001A122                            		even
0001A122                            		even
0001A122                            
0001A122                            ; ---------------------------------------------------------------------------
0001A122                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001A122                            ; ---------------------------------------------------------------------------
0001A122                            
0001A122                            Obj78:					; XREF: Obj_Index
0001A122 7000                       		moveq	#0,d0
0001A124 1028 0024                  		move.b	$24(a0),d0
0001A128 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001A12C 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001A130                            ; ===========================================================================
0001A130 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0001A132 0000                       		dc.w Obj78_Action-Obj78_Index
0001A134 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001A136 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
0001A138 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001A13A 0000                       		dc.w Obj78_Delete-Obj78_Index
0001A13C 0000                       		dc.w loc_16CC0-Obj78_Index
0001A13E                            ; ===========================================================================
0001A13E                            
0001A13E                            locret_16950:
0001A13E 4E75                       		rts	
0001A140                            ; ===========================================================================
0001A140                            
0001A140                            Obj78_Main:				; XREF: Obj78_Index
0001A140 117C 0007 0016             		move.b	#7,$16(a0)
0001A146 117C 0008 0017             		move.b	#8,$17(a0)
0001A14C 4EB9 0001 0484             		jsr	ObjectFall
0001A152 4EBA E2B4                  		jsr	ObjHitFloor
0001A156 4A41                       		tst.w	d1
0001A158 6AE4                       		bpl.s	locret_16950
0001A15A D368 000C                  		add.w	d1,$C(a0)
0001A15E 4268 0012                  		clr.w	$12(a0)
0001A162 5428 0024                  		addq.b	#2,$24(a0)
0001A166 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001A16E 317C 22B0 0002             		move.w	#$22B0,2(a0)
0001A174 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001A17A 6700                       		beq.s	loc_16996
0001A17C 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001A182                            
0001A182                            loc_16996:
0001A182 0228 0003 0001             		andi.b	#3,1(a0)
0001A188 0028 0004 0001             		ori.b	#4,1(a0)
0001A18E 1168 0001 0022             		move.b	1(a0),$22(a0)
0001A194 117C 0004 0018             		move.b	#4,$18(a0)
0001A19A 117C 0008 0019             		move.b	#8,$19(a0)
0001A1A0 117C 000B 0020             		move.b	#$B,$20(a0)
0001A1A6 3428 0008                  		move.w	8(a0),d2
0001A1AA 7A0C                       		moveq	#$C,d5
0001A1AC 0828 0000 0022             		btst	#0,$22(a0)
0001A1B2 6700                       		beq.s	loc_169CA
0001A1B4 4445                       		neg.w	d5
0001A1B6                            
0001A1B6                            loc_169CA:
0001A1B6 1C3C 0004                  		move.b	#4,d6
0001A1BA 7600                       		moveq	#0,d3
0001A1BC 7804                       		moveq	#4,d4
0001A1BE 2448                       		movea.l	a0,a2
0001A1C0 7202                       		moveq	#2,d1
0001A1C2                            
0001A1C2                            Obj78_LoadBody:
0001A1C2 4EB9 0001 099E             		jsr	SingleObjLoad2
0001A1C8 6600                       		bne.s	Obj78_QuitLoad
0001A1CA 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
0001A1CE 1346 0024                  		move.b	d6,$24(a1)
0001A1D2 5406                       		addq.b	#2,d6
0001A1D4 2368 0004 0004             		move.l	4(a0),4(a1)
0001A1DA 3368 0002 0002             		move.w	2(a0),2(a1)
0001A1E0 137C 0005 0018             		move.b	#5,$18(a1)
0001A1E6 137C 0008 0019             		move.b	#8,$19(a1)
0001A1EC 137C 00CB 0020             		move.b	#$CB,$20(a1)
0001A1F2 D445                       		add.w	d5,d2
0001A1F4 3342 0008                  		move.w	d2,8(a1)
0001A1F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A1FE 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001A204 1368 0022 0001             		move.b	$22(a0),1(a1)
0001A20A 137C 0008 001A             		move.b	#8,$1A(a1)
0001A210 234A 003C                  		move.l	a2,$3C(a1)
0001A214 1344 003C                  		move.b	d4,$3C(a1)
0001A218 5804                       		addq.b	#4,d4
0001A21A 2449                       		movea.l	a1,a2
0001A21C                            
0001A21C                            Obj78_QuitLoad:
0001A21C 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001A220                            
0001A220 117C 0007 002A             		move.b	#7,$2A(a0)
0001A226 4228 003C                  		clr.b	$3C(a0)
0001A22A                            
0001A22A                            Obj78_Action:				; XREF: Obj78_Index
0001A22A 4A28 0022                  		tst.b	$22(a0)
0001A22E 6B00 0000                  		bmi.w	loc_16C96
0001A232 7000                       		moveq	#0,d0
0001A234 1028 0025                  		move.b	$25(a0),d0
0001A238 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001A23C 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001A240 1228 002B                  		move.b	$2B(a0),d1
0001A244 6A00                       		bpl.s	Obj78_Display
0001A246 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001A24C 1028 0026                  		move.b	$26(a0),d0
0001A250 0240 007F                  		andi.w	#$7F,d0
0001A254 5828 0026                  		addq.b	#4,$26(a0)
0001A258 1031 0000                  		move.b	(a1,d0.w),d0
0001A25C 6A00                       		bpl.s	Obj78_AniHead
0001A25E 08A8 0007 002B             		bclr	#7,$2B(a0)
0001A264 6000                       		bra.s	Obj78_Display
0001A266                            ; ===========================================================================
0001A266                            
0001A266                            Obj78_AniHead:
0001A266 0201 0010                  		andi.b	#$10,d1
0001A26A D001                       		add.b	d1,d0
0001A26C 1140 001A                  		move.b	d0,$1A(a0)
0001A270                            
0001A270                            Obj78_Display:
0001A270 3028 0008                  		move.w	8(a0),d0
0001A274 0240 FF80                  		andi.w	#$FF80,d0
0001A278 3238 F700                  		move.w	($FFFFF700).w,d1
0001A27C 0441 0080                  		subi.w	#$80,d1
0001A280 0241 FF80                  		andi.w	#$FF80,d1
0001A284 9041                       		sub.w	d1,d0
0001A286 0C40 0280                  		cmpi.w	#$280,d0
0001A28A 6200 0000                  		bhi.w	Obj78_ChkGone
0001A28E 4EF9 0001 0502             		jmp	DisplaySprite
0001A294                            ; ===========================================================================
0001A294                            
0001A294                            Obj78_ChkGone:
0001A294 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001A298 7000                       		moveq	#0,d0
0001A29A 1028 0023                  		move.b	$23(a0),d0
0001A29E 6700                       		beq.s	loc_16ABC
0001A2A0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A2A6                            
0001A2A6                            loc_16ABC:
0001A2A6 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001A2AC 4E75                       		rts	
0001A2AE                            ; ===========================================================================
0001A2AE                            
0001A2AE                            Obj78_Delete:				; XREF: Obj78_Index
0001A2AE 4EF9 0001 053E             		jmp	DeleteObject
0001A2B4                            ; ===========================================================================
0001A2B4 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001A2B6 0000                       		dc.w loc_16B02-Obj78_Index2
0001A2B8                            ; ===========================================================================
0001A2B8                            
0001A2B8                            Obj78_Move:				; XREF: Obj78_Index2
0001A2B8 5328 002A                  		subq.b	#1,$2A(a0)
0001A2BC 6B00                       		bmi.s	Obj78_Move2
0001A2BE 4E75                       		rts	
0001A2C0                            ; ===========================================================================
0001A2C0                            
0001A2C0                            Obj78_Move2:
0001A2C0 5428 0025                  		addq.b	#2,$25(a0)
0001A2C4 117C 0010 002A             		move.b	#$10,$2A(a0)
0001A2CA 317C FF40 0010             		move.w	#-$C0,$10(a0)
0001A2D0 317C 0040 0014             		move.w	#$40,$14(a0)
0001A2D6 0868 0004 002B             		bchg	#4,$2B(a0)
0001A2DC 6600                       		bne.s	loc_16AFC
0001A2DE 4268 0010                  		clr.w	$10(a0)
0001A2E2 4468 0014                  		neg.w	$14(a0)
0001A2E6                            
0001A2E6                            loc_16AFC:
0001A2E6 08E8 0007 002B             		bset	#7,$2B(a0)
0001A2EC                            
0001A2EC                            loc_16B02:				; XREF: Obj78_Index2
0001A2EC 5328 002A                  		subq.b	#1,$2A(a0)
0001A2F0 6B00                       		bmi.s	loc_16B5E
0001A2F2 2F28 0008                  		move.l	8(a0),-(sp)
0001A2F6 2428 0008                  		move.l	8(a0),d2
0001A2FA 3028 0010                  		move.w	$10(a0),d0
0001A2FE 0828 0000 0022             		btst	#0,$22(a0)
0001A304 6700                       		beq.s	loc_16B1E
0001A306 4440                       		neg.w	d0
0001A308                            
0001A308                            loc_16B1E:
0001A308 48C0                       		ext.l	d0
0001A30A E180                       		asl.l	#8,d0
0001A30C D480                       		add.l	d0,d2
0001A30E 2142 0008                  		move.l	d2,8(a0)
0001A312 4EBA E0F4                  		jsr	ObjHitFloor
0001A316 241F                       		move.l	(sp)+,d2
0001A318 0C41 FFF8                  		cmpi.w	#-8,d1
0001A31C 6D00                       		blt.s	loc_16B70
0001A31E 0C41 000C                  		cmpi.w	#$C,d1
0001A322 6C00                       		bge.s	loc_16B70
0001A324 D368 000C                  		add.w	d1,$C(a0)
0001A328 4842                       		swap	d2
0001A32A B468 0008                  		cmp.w	8(a0),d2
0001A32E 6700                       		beq.s	locret_16B5C
0001A330 7000                       		moveq	#0,d0
0001A332 1028 003C                  		move.b	$3C(a0),d0
0001A336 5228 003C                  		addq.b	#1,$3C(a0)
0001A33A 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001A340 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A344                            
0001A344                            locret_16B5C:
0001A344 4E75                       		rts	
0001A346                            ; ===========================================================================
0001A346                            
0001A346                            loc_16B5E:
0001A346 5528 0025                  		subq.b	#2,$25(a0)
0001A34A 117C 0007 002A             		move.b	#7,$2A(a0)
0001A350 317C 0000 0010             		move.w	#0,$10(a0)
0001A356 4E75                       		rts	
0001A358                            ; ===========================================================================
0001A358                            
0001A358                            loc_16B70:
0001A358 2142 0008                  		move.l	d2,8(a0)
0001A35C 0868 0000 0022             		bchg	#0,$22(a0)
0001A362 1168 0022 0001             		move.b	$22(a0),1(a0)
0001A368 7000                       		moveq	#0,d0
0001A36A 1028 003C                  		move.b	$3C(a0),d0
0001A36E 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001A374 5228 003C                  		addq.b	#1,$3C(a0)
0001A378 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001A37E 4E75                       		rts	
0001A380                            ; ===========================================================================
0001A380                            
0001A380                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001A380 2268 003C                  		movea.l	$3C(a0),a1
0001A384 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A38A 6A00                       		bpl.s	Obj78_BodySeg1
0001A38C 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001A392 1028 0026                  		move.b	$26(a0),d0
0001A396 0240 007F                  		andi.w	#$7F,d0
0001A39A 5828 0026                  		addq.b	#4,$26(a0)
0001A39E 4A31 0004                  		tst.b	4(a1,d0.w)
0001A3A2 6A00                       		bpl.s	Obj78_AniBody
0001A3A4 5828 0026                  		addq.b	#4,$26(a0)
0001A3A8                            
0001A3A8                            Obj78_AniBody:
0001A3A8 1031 0000                  		move.b	(a1,d0.w),d0
0001A3AC 5000                       		addq.b	#8,d0
0001A3AE 1140 001A                  		move.b	d0,$1A(a0)
0001A3B2                            
0001A3B2                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001A3B2 2268 003C                  		movea.l	$3C(a0),a1
0001A3B6 4A28 0022                  		tst.b	$22(a0)
0001A3BA 6B00 0000                  		bmi.w	loc_16C90
0001A3BE 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001A3C4 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001A3CA 6700 0000                  		beq.w	loc_16C64
0001A3CE 3169 0014 0014             		move.w	$14(a1),$14(a0)
0001A3D4 3029 0010                  		move.w	$10(a1),d0
0001A3D8 D069 0014                  		add.w	$14(a1),d0
0001A3DC 3140 0010                  		move.w	d0,$10(a0)
0001A3E0 2428 0008                  		move.l	8(a0),d2
0001A3E4 2602                       		move.l	d2,d3
0001A3E6 3028 0010                  		move.w	$10(a0),d0
0001A3EA 0828 0000 0022             		btst	#0,$22(a0)
0001A3F0 6700                       		beq.s	loc_16C0C
0001A3F2 4440                       		neg.w	d0
0001A3F4                            
0001A3F4                            loc_16C0C:
0001A3F4 48C0                       		ext.l	d0
0001A3F6 E180                       		asl.l	#8,d0
0001A3F8 D480                       		add.l	d0,d2
0001A3FA 2142 0008                  		move.l	d2,8(a0)
0001A3FE 4843                       		swap	d3
0001A400 B668 0008                  		cmp.w	8(a0),d3
0001A404 6700                       		beq.s	loc_16C64
0001A406 7000                       		moveq	#0,d0
0001A408 1028 003C                  		move.b	$3C(a0),d0
0001A40C 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001A410 0C01 0080                  		cmpi.b	#-$80,d1
0001A414 6600                       		bne.s	loc_16C50
0001A416 4843                       		swap	d3
0001A418 2143 0008                  		move.l	d3,8(a0)
0001A41C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A420 0868 0000 0022             		bchg	#0,$22(a0)
0001A426 1168 0022 0001             		move.b	$22(a0),1(a0)
0001A42C 5228 003C                  		addq.b	#1,$3C(a0)
0001A430 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001A436 6000                       		bra.s	loc_16C64
0001A438                            ; ===========================================================================
0001A438                            
0001A438                            loc_16C50:
0001A438 4881                       		ext.w	d1
0001A43A D368 000C                  		add.w	d1,$C(a0)
0001A43E 5228 003C                  		addq.b	#1,$3C(a0)
0001A442 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001A448 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001A44C                            
0001A44C                            loc_16C64:
0001A44C 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001A452 6700                       		beq.s	loc_16C90
0001A454 0C11 0027                  		cmpi.b	#$27,0(a1)
0001A458 6700                       		beq.s	loc_16C7C
0001A45A 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001A460 6600                       		bne.s	loc_16C82
0001A462                            
0001A462                            loc_16C7C:
0001A462 117C 000A 0024             		move.b	#$A,$24(a0)
0001A468                            
0001A468                            loc_16C82:
0001A468 4EF9 0001 0502             		jmp	DisplaySprite
0001A46E                            
0001A46E                            ; ===========================================================================
0001A46E FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001A476                            ; ===========================================================================
0001A476                            
0001A476                            loc_16C90:
0001A476 08E9 0007 0022             		bset	#7,$22(a1)
0001A47C                            
0001A47C                            loc_16C96:
0001A47C 7000                       		moveq	#0,d0
0001A47E 1028 0024                  		move.b	$24(a0),d0
0001A482 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001A486 0828 0000 0022             		btst	#0,$22(a0)
0001A48C 6700                       		beq.s	loc_16CAA
0001A48E 4440                       		neg.w	d0
0001A490                            
0001A490                            loc_16CAA:
0001A490 3140 0010                  		move.w	d0,$10(a0)
0001A494 317C FC00 0012             		move.w	#-$400,$12(a0)
0001A49A 117C 000C 0024             		move.b	#$C,$24(a0)
0001A4A0 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0001A4A6                            
0001A4A6                            loc_16CC0:				; XREF: Obj78_Index
0001A4A6 4EB9 0001 0484             		jsr	ObjectFall
0001A4AC 4A68 0012                  		tst.w	$12(a0)
0001A4B0 6B00                       		bmi.s	loc_16CE0
0001A4B2 4EBA DF54                  		jsr	ObjHitFloor
0001A4B6 4A41                       		tst.w	d1
0001A4B8 6A00                       		bpl.s	loc_16CE0
0001A4BA D368 000C                  		add.w	d1,$C(a0)
0001A4BE 317C FC00 0012             		move.w	#-$400,$12(a0)
0001A4C4                            
0001A4C4                            loc_16CE0:
0001A4C4 4A28 0001                  		tst.b	1(a0)
0001A4C8 6A00 FDCA                  		bpl.w	Obj78_ChkGone
0001A4CC 4EF9 0001 0502             		jmp	DisplaySprite
0001A4D2                            ; ===========================================================================
0001A4D2                            Ani_obj78:
0001A4D2                            	include "_anim\obj78.asm"
0001A4D2                            ; ---------------------------------------------------------------------------
0001A4D2                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001A4D2                            ; ---------------------------------------------------------------------------
0001A4D2 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001A4E2 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001A4F2 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001A502 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001A512 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001A522 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001A532 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001A542 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001A552                            	even
0001A552                            	even
0001A552                            
0001A552                            ; ---------------------------------------------------------------------------
0001A552                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001A552                            ; ---------------------------------------------------------------------------
0001A552                            Map_obj78:
0001A552                            	include "_maps\obj78.asm"
0001A552                            ; ---------------------------------------------------------------------------
0001A552                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001A552                            ; ---------------------------------------------------------------------------
0001A552 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0001A556 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
0001A55A 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001A55E 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001A562 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0001A566 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
0001A56A 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001A56E 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001A572 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001A576 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
0001A57A 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001A57E 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001A582 01                         byte_16D9E:	dc.b 1
0001A583 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001A588 01                         byte_16DA4:	dc.b 1
0001A589 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001A58E 01                         byte_16DAA:	dc.b 1
0001A58F F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001A594 01                         byte_16DB0:	dc.b 1
0001A595 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001A59A 01                         byte_16DB6:	dc.b 1
0001A59B EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001A5A0 01                         byte_16DBC:	dc.b 1
0001A5A1 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001A5A6 01                         byte_16DC2:	dc.b 1
0001A5A7 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001A5AC 01                         byte_16DC8:	dc.b 1
0001A5AD EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001A5B2 01                         byte_16DCE:	dc.b 1
0001A5B3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001A5B8 01                         byte_16DD4:	dc.b 1
0001A5B9 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001A5BE 01                         byte_16DDA:	dc.b 1
0001A5BF F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001A5C4 01                         byte_16DE0:	dc.b 1
0001A5C5 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001A5CA 01                         byte_16DE6:	dc.b 1
0001A5CB F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001A5D0 01                         byte_16DEC:	dc.b 1
0001A5D1 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001A5D6 01                         byte_16DF2:	dc.b 1
0001A5D7 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001A5DC 01                         byte_16DF8:	dc.b 1
0001A5DD F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001A5E2 01                         byte_16DFE:	dc.b 1
0001A5E3 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001A5E8 01                         byte_16E04:	dc.b 1
0001A5E9 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001A5EE 01                         byte_16E0A:	dc.b 1
0001A5EF F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001A5F4 01                         byte_16E10:	dc.b 1
0001A5F5 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001A5FA 01                         byte_16E16:	dc.b 1
0001A5FB EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001A600 01                         byte_16E1C:	dc.b 1
0001A601 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001A606 01                         byte_16E22:	dc.b 1
0001A607 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001A60C 01                         byte_16E28:	dc.b 1
0001A60D EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001A612                            		even
0001A612                            		even
0001A612                            
0001A612                            ; ===========================================================================
0001A612                            ; ---------------------------------------------------------------------------
0001A612                            ; Object 79 - lamppost
0001A612                            ; ---------------------------------------------------------------------------
0001A612                            
0001A612                            Obj79:					; XREF: Obj_Index
0001A612 7000                       		moveq	#0,d0
0001A614 1028 0024                  		move.b	$24(a0),d0
0001A618 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001A61C 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001A620 4EFA 81C4                  		jmp	MarkObjGone
0001A624                            ; ===========================================================================
0001A624 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
0001A626 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001A628 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001A62A 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001A62C                            ; ===========================================================================
0001A62C                            
0001A62C                            Obj79_Main:				; XREF: Obj79_Index
0001A62C 5428 0024                  		addq.b	#2,$24(a0)
0001A630 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001A638 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
0001A63E 117C 0004 0001             		move.b	#4,1(a0)
0001A644 117C 0008 0019             		move.b	#8,$19(a0)
0001A64A 117C 0005 0018             		move.b	#5,$18(a0)
0001A650 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001A654 7000                       		moveq	#0,d0
0001A656 1028 0023                  		move.b	$23(a0),d0
0001A65A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A660 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001A666 6600                       		bne.s	Obj79_RedLamp
0001A668 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001A66C 0201 007F                  		andi.b	#$7F,d1
0001A670 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001A674 0202 007F                  		andi.b	#$7F,d2
0001A678 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
0001A67A 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001A67C                            
0001A67C                            Obj79_RedLamp:
0001A67C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A682 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
0001A688 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001A68E 4E75                       		rts	
0001A690                            ; ===========================================================================
0001A690                            
0001A690                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001A690 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001A694 6600 0000                  		bne.w	locret_16F90	; if yes, branch
0001A698 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001A69C 6B00 0000                  		bmi.w	locret_16F90
0001A6A0 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001A6A4 0201 007F                  		andi.b	#$7F,d1
0001A6A8 1428 0028                  		move.b	$28(a0),d2
0001A6AC 0202 007F                  		andi.b	#$7F,d2
0001A6B0 B202                       		cmp.b	d2,d1
0001A6B2 6500                       		bcs.s	Obj79_HitLamp
0001A6B4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001A6B8 7000                       		moveq	#0,d0
0001A6BA 1028 0023                  		move.b	$23(a0),d0
0001A6BE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A6C4 117C 0004 0024             		move.b	#4,$24(a0)
0001A6CA 117C 0003 001A             		move.b	#3,$1A(a0)
0001A6D0 6000 0000                  		bra.w	locret_16F90
0001A6D4                            ; ===========================================================================
0001A6D4                            
0001A6D4                            Obj79_HitLamp:
0001A6D4 3038 D008                  		move.w	($FFFFD008).w,d0
0001A6D8 9068 0008                  		sub.w	8(a0),d0
0001A6DC 5040                       		addq.w	#8,d0
0001A6DE 0C40 0010                  		cmpi.w	#$10,d0
0001A6E2 6400 0000                  		bcc.w	locret_16F90
0001A6E6 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001A6EA 9068 000C                  		sub.w	$C(a0),d0
0001A6EE 0640 0040                  		addi.w	#$40,d0
0001A6F2 0C40 0068                  		cmpi.w	#$68,d0
0001A6F6 6400                       		bcc.s	locret_16F90
0001A6F8 303C 00A1                  		move.w	#$A1,d0
0001A6FC 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play lamppost sound
0001A702 5428 0024                  		addq.b	#2,$24(a0)
0001A706 4EB9 0001 0988             		jsr	SingleObjLoad
0001A70C 6600                       		bne.s	loc_16F76
0001A70E 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
0001A712 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001A718 3368 0008 0030             		move.w	8(a0),$30(a1)
0001A71E 3368 000C 0032             		move.w	$C(a0),$32(a1)
0001A724 0469 0018 0032             		subi.w	#$18,$32(a1)
0001A72A 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001A732 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001A738 137C 0004 0001             		move.b	#4,1(a1)
0001A73E 137C 0008 0019             		move.b	#8,$19(a1)
0001A744 137C 0004 0018             		move.b	#4,$18(a1)
0001A74A 137C 0002 001A             		move.b	#2,$1A(a1)
0001A750 337C 0020 0036             		move.w	#$20,$36(a1)
0001A756                            
0001A756                            loc_16F76:
0001A756 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001A75C 6100 0000                  		bsr.w	Obj79_StoreInfo
0001A760 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001A764 7000                       		moveq	#0,d0
0001A766 1028 0023                  		move.b	$23(a0),d0
0001A76A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A770                            
0001A770                            locret_16F90:
0001A770 4E75                       		rts	
0001A772                            ; ===========================================================================
0001A772                            
0001A772                            Obj79_AfterHit:				; XREF: Obj79_Index
0001A772 4E75                       		rts	
0001A774                            ; ===========================================================================
0001A774                            
0001A774                            Obj79_Twirl:				; XREF: Obj79_Index
0001A774 5368 0036                  		subq.w	#1,$36(a0)
0001A778 6A00                       		bpl.s	loc_16FA0
0001A77A 117C 0004 0024             		move.b	#4,$24(a0)
0001A780                            
0001A780                            loc_16FA0:
0001A780 1028 0026                  		move.b	$26(a0),d0
0001A784 0428 0010 0026             		subi.b	#$10,$26(a0)
0001A78A 0400 0040                  		subi.b	#$40,d0
0001A78E 4EB9 0000 3798             		jsr	(CalcSine).l
0001A794 C3FC 0C00                  		muls.w	#$C00,d1
0001A798 4841                       		swap	d1
0001A79A D268 0030                  		add.w	$30(a0),d1
0001A79E 3141 0008                  		move.w	d1,8(a0)
0001A7A2 C1FC 0C00                  		muls.w	#$C00,d0
0001A7A6 4840                       		swap	d0
0001A7A8 D068 0032                  		add.w	$32(a0),d0
0001A7AC 3140 000C                  		move.w	d0,$C(a0)
0001A7B0 4E75                       		rts	
0001A7B2                            ; ===========================================================================
0001A7B2                            ; ---------------------------------------------------------------------------
0001A7B2                            ; Subroutine to	store information when you hit a lamppost
0001A7B2                            ; ---------------------------------------------------------------------------
0001A7B2                            
0001A7B2                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001A7B2 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001A7B8 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
0001A7BE 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001A7C4 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0001A7CA 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0001A7D0 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001A7D6 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001A7DC 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0001A7E2 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
0001A7E8 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0001A7EE 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001A7F4 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
0001A7FA 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001A800 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001A806 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001A80C 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001A812 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0001A818 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001A81E 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001A824 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001A82A 4E75                       		rts	
0001A82C                            
0001A82C                            ; ---------------------------------------------------------------------------
0001A82C                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001A82C                            ; ---------------------------------------------------------------------------
0001A82C                            
0001A82C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A82C                            
0001A82C                            
0001A82C                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001A82C 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001A832 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
0001A838 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001A83E 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001A844 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
0001A84A 4278 FE20                  		clr.w	($FFFFFE20).w
0001A84E 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001A852 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
0001A858 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001A85E 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001A862 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
0001A868 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001A86E 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
0001A874 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
0001A87A 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001A880 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
0001A886 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001A88C 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001A892 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
0001A898 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
0001A89E 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001A8A4 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
0001A8AA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001A8B0 6600                       		bne.s	loc_170E4
0001A8B2 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001A8B8 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001A8BE 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0001A8C4                            
0001A8C4                            loc_170E4:
0001A8C4 4A38 FE30                  		tst.b	($FFFFFE30).w
0001A8C8 6A00                       		bpl.s	locret_170F6
0001A8CA 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A8CE 0440 00A0                  		subi.w	#$A0,d0
0001A8D2 31C0 F728                  		move.w	d0,($FFFFF728).w
0001A8D6                            
0001A8D6                            locret_170F6:
0001A8D6 4E75                       		rts	
0001A8D8                            ; End of function Obj79_LoadInfo
0001A8D8                            
0001A8D8                            ; ===========================================================================
0001A8D8                            ; ---------------------------------------------------------------------------
0001A8D8                            ; Sprite mappings - lamppost
0001A8D8                            ; ---------------------------------------------------------------------------
0001A8D8                            Map_obj79:
0001A8D8                            	include "_maps\obj79.asm"
0001A8D8                            ; ---------------------------------------------------------------------------
0001A8D8                            ; Sprite mappings - lamppost
0001A8D8                            ; ---------------------------------------------------------------------------
0001A8D8 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001A8DC 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
0001A8E0 06                         byte_17100:	dc.b 6
0001A8E1 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001A8E6 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001A8EB F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001A8F0 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001A8F5 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
0001A8FA D401 0806 00               		dc.b $D4, 1, 8,	6, 0
0001A8FF 04                         byte_1711F:	dc.b 4
0001A900 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001A905 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001A90A F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001A90F F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001A914 02                         byte_17134:	dc.b 2
0001A915 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A91A F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001A91F 06                         byte_1713F:	dc.b 6
0001A920 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001A925 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001A92A F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001A92F F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001A934 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
0001A939 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001A93E                            		even
0001A93E                            		even
0001A93E                            
0001A93E                            ; ===========================================================================
0001A93E                            ; ---------------------------------------------------------------------------
0001A93E                            ; Object 7D - hidden points at the end of a level
0001A93E                            ; ---------------------------------------------------------------------------
0001A93E                            
0001A93E                            Obj7D:					; XREF: Obj_Index
0001A93E 7000                       		moveq	#0,d0
0001A940 1028 0024                  		move.b	$24(a0),d0
0001A944 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
0001A948 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001A94C                            ; ===========================================================================
0001A94C 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001A94E 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001A950                            ; ===========================================================================
0001A950                            
0001A950                            Obj7D_Main:				; XREF: Obj7D_Index
0001A950 7410                       		moveq	#$10,d2
0001A952 3602                       		move.w	d2,d3
0001A954 D643                       		add.w	d3,d3
0001A956 43F8 D000                  		lea	($FFFFD000).w,a1
0001A95A 3029 0008                  		move.w	8(a1),d0
0001A95E 9068 0008                  		sub.w	8(a0),d0
0001A962 D042                       		add.w	d2,d0
0001A964 B043                       		cmp.w	d3,d0
0001A966 6400                       		bcc.s	Obj7D_ChkDel
0001A968 3229 000C                  		move.w	$C(a1),d1
0001A96C 9268 000C                  		sub.w	$C(a0),d1
0001A970 D242                       		add.w	d2,d1
0001A972 B243                       		cmp.w	d3,d1
0001A974 6400                       		bcc.s	Obj7D_ChkDel
0001A976 4A78 FE08                  		tst.w	($FFFFFE08).w
0001A97A 6600                       		bne.s	Obj7D_ChkDel
0001A97C 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001A980 6600                       		bne.s	Obj7D_ChkDel
0001A982 5428 0024                  		addq.b	#2,$24(a0)
0001A986 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
0001A98E 317C 84B6 0002             		move.w	#$84B6,2(a0)
0001A994 0028 0004 0001             		ori.b	#4,1(a0)
0001A99A 117C 0000 0018             		move.b	#0,$18(a0)
0001A9A0 117C 0010 0019             		move.b	#$10,$19(a0)
0001A9A6 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001A9AC 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
0001A9B2 303C 00C9                  		move.w	#$C9,d0
0001A9B6 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play bonus sound
0001A9BC 7000                       		moveq	#0,d0
0001A9BE 1028 0028                  		move.b	$28(a0),d0
0001A9C2 D040                       		add.w	d0,d0
0001A9C4 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
0001A9C8 4EB9 0000 0000             		jsr	AddPoints
0001A9CE                            
0001A9CE                            Obj7D_ChkDel:
0001A9CE 3028 0008                  		move.w	8(a0),d0
0001A9D2 0240 FF80                  		andi.w	#$FF80,d0
0001A9D6 3238 F700                  		move.w	($FFFFF700).w,d1
0001A9DA 0441 0080                  		subi.w	#$80,d1
0001A9DE 0241 FF80                  		andi.w	#$FF80,d1
0001A9E2 9041                       		sub.w	d1,d0
0001A9E4 0C40 0280                  		cmpi.w	#$280,d0
0001A9E8 6200                       		bhi.s	Obj7D_Delete
0001A9EA 4E75                       		rts	
0001A9EC                            ; ===========================================================================
0001A9EC                            
0001A9EC                            Obj7D_Delete:
0001A9EC 4EF9 0001 053E             		jmp	DeleteObject
0001A9F2                            ; ===========================================================================
0001A9F2 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
0001A9F4 03E8                       		dc.w 1000
0001A9F6 0064                       		dc.w 100
0001A9F8 0001                       		dc.w 1
0001A9FA                            ; ===========================================================================
0001A9FA                            
0001A9FA                            Obj7D_DelayDel:				; XREF: Obj7D_Index
0001A9FA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0001A9FE 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001AA00 3028 0008                  		move.w	8(a0),d0
0001AA04 0240 FF80                  		andi.w	#-$80,d0
0001AA08 3238 F700                  		move.w	($FFFFF700).w,d1
0001AA0C 0441 0080                  		subi.w	#$80,d1
0001AA10 0241 FF80                  		andi.w	#-$80,d1
0001AA14 9041                       		sub.w	d1,d0
0001AA16 0C40 0280                  		cmpi.w	#$280,d0
0001AA1A 6200                       		bhi.s	Obj7D_Delete2
0001AA1C 4EF9 0001 0502             		jmp	DisplaySprite
0001AA22                            ; ===========================================================================
0001AA22                            
0001AA22                            Obj7D_Delete2:
0001AA22 4EF9 0001 053E             		jmp	DeleteObject
0001AA28                            ; ===========================================================================
0001AA28                            ; ---------------------------------------------------------------------------
0001AA28                            ; Sprite mappings - hidden points at the end of	a level
0001AA28                            ; ---------------------------------------------------------------------------
0001AA28                            Map_obj7D:
0001AA28                            	include "_maps\obj7D.asm"
0001AA28                            ; ---------------------------------------------------------------------------
0001AA28                            ; Sprite mappings - hidden points at the end of	a level
0001AA28                            ; ---------------------------------------------------------------------------
0001AA28 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001AA2C 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001AA30 00                         byte_17250:	dc.b 0
0001AA31 01                         byte_17251:	dc.b 1
0001AA32 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001AA37 01                         byte_17257:	dc.b 1
0001AA38 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001AA3D 01                         byte_1725D:	dc.b 1
0001AA3E F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001AA44 00                         		even
0001AA44 00                         		even
0001AA44                            
0001AA44                            ; ===========================================================================
0001AA44                            ; ---------------------------------------------------------------------------
0001AA44                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001AA44                            ; ---------------------------------------------------------------------------
0001AA44                            
0001AA44                            Obj8A:					; XREF: Obj_Index
0001AA44 7000                       		moveq	#0,d0
0001AA46 1028 0024                  		move.b	$24(a0),d0
0001AA4A 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001AA4E 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001AA52                            ; ===========================================================================
0001AA52 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
0001AA54 0000                       		dc.w Obj8A_Display-Obj8A_Index
0001AA56                            ; ===========================================================================
0001AA56                            
0001AA56                            Obj8A_Main:				; XREF: Obj8A_Index
0001AA56 5428 0024                  		addq.b	#2,$24(a0)
0001AA5A 317C 0120 0008             		move.w	#$120,8(a0)
0001AA60 317C 00F0 000A             		move.w	#$F0,$A(a0)
0001AA66 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001AA6E 317C 05A0 0002             		move.w	#$5A0,2(a0)
0001AA74 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
0001AA78 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
0001AA7C 117C 0000 0001             		move.b	#0,1(a0)
0001AA82 117C 0000 0018             		move.b	#0,$18(a0)
0001AA88 0C38 0004 FF94             		cmpi.b	#4,($FFFFFF94).w ; is the scene	number 04 (title screen)?
0001AA8E 6600                       		bne.s	Obj8A_Display	; if not, branch
0001AA90 317C 00A6 0002             		move.w	#$A6,2(a0)
0001AA96 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
0001AA9C 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001AAA0 6700                       		beq.s	Obj8A_Display	; if not, branch
0001AAA2 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
0001AAA8 6600                       		bne.s	Obj8A_Display	; if not, branch
0001AAAA 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
0001AAB0 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
0001AAB6 4EF9 0001 053E             		jmp	DeleteObject
0001AABC                            ; ===========================================================================
0001AABC                            
0001AABC                            Obj8A_Display:				; XREF: Obj8A_Index
0001AABC 4EF9 0001 0502             		jmp	DisplaySprite
0001AAC2                            ; ===========================================================================
0001AAC2                            ; ---------------------------------------------------------------------------
0001AAC2                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001AAC2                            ; ---------------------------------------------------------------------------
0001AAC2                            Map_obj8A:
0001AAC2                            	include "_maps\obj8A.asm"
0001AAC2                            ; --------------------------------------------------------------------------------
0001AAC2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AAC2                            ; --------------------------------------------------------------------------------
0001AAC2                            
0001AAC2                            SME_Edo_t:	
0001AAC2 0000 0000                  		dc.w SME_Edo_t_16-SME_Edo_t, SME_Edo_t_5D-SME_Edo_t	
0001AAC6 0000 0000                  		dc.w SME_Edo_t_AE-SME_Edo_t, SME_Edo_t_E1-SME_Edo_t	
0001AACA 0000 0000                  		dc.w SME_Edo_t_15A-SME_Edo_t, SME_Edo_t_1BF-SME_Edo_t	
0001AACE 0000 0000                  		dc.w SME_Edo_t_242-SME_Edo_t, SME_Edo_t_2B6-SME_Edo_t	
0001AAD2 0000 0000                  		dc.w SME_Edo_t_352-SME_Edo_t, SME_Edo_t_39E-SME_Edo_t	
0001AAD6 0000                       		dc.w SME_Edo_t_3C7-SME_Edo_t	
0001AAD8 0E                         SME_Edo_t_16:	dc.b $E	
0001AAD9 F805 002E 88               		dc.b $F8, 5, 0, $2E, $88	
0001AADE F805 0026 98               		dc.b $F8, 5, 0, $26, $98	
0001AAE3 F805 001A A8               		dc.b $F8, 5, 0, $1A, $A8	
0001AAE8 F801 0046 B8               		dc.b $F8, 1, 0, $46, $B8	
0001AAED F805 001E C0               		dc.b $F8, 5, 0, $1E, $C0	
0001AAF2 F805 003E D8               		dc.b $F8, 5, 0, $3E, $D8	
0001AAF7 F805 000E E8               		dc.b $F8, 5, 0, $E, $E8	
0001AAFC F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0001AB01 F809 0008 08               		dc.b $F8, 9, 0, 8, 8	
0001AB06 F805 002E 28               		dc.b $F8, 5, 0, $2E, $28	
0001AB0B F805 003E 38               		dc.b $F8, 5, 0, $3E, $38	
0001AB10 F805 0004 48               		dc.b $F8, 5, 0, 4, $48	
0001AB15 F805 005C 58               		dc.b $F8, 5, 0, $5C, $58	
0001AB1A F805 005C 68               		dc.b $F8, 5, 0, $5C, $68	
0001AB1F 10                         SME_Edo_t_5D:	dc.b $10	
0001AB20 D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
0001AB25 D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
0001AB2A D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
0001AB2F D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
0001AB34 D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
0001AB39 D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
0001AB3E D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
0001AB43 D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
0001AB48 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
0001AB4D 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
0001AB52 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
0001AB57 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
0001AB5C 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
0001AB61 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
0001AB66 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
0001AB6B 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
0001AB70 0A                         SME_Edo_t_AE:	dc.b $A	
0001AB71 D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
0001AB76 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
0001AB7B D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
0001AB80 D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
0001AB85 D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
0001AB8A D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
0001AB8F D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
0001AB94 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
0001AB99 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
0001AB9E 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
0001ABA3 18                         SME_Edo_t_E1:	dc.b $18	
0001ABA4 D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
0001ABA9 D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
0001ABAE D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
0001ABB3 D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
0001ABB8 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
0001ABBD D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
0001ABC2 D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
0001ABC7 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
0001ABCC D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
0001ABD1 D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
0001ABD6 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
0001ABDB D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
0001ABE0 D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
0001ABE5 D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
0001ABEA D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
0001ABEF 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
0001ABF4 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
0001ABF9 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
0001ABFE 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
0001AC03 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
0001AC08 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
0001AC0D 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
0001AC12 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
0001AC17 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
0001AC1C 14                         SME_Edo_t_15A:	dc.b $14	
0001AC1D D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
0001AC22 D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
0001AC27 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
0001AC2C D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
0001AC31 D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
0001AC36 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
0001AC3B 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
0001AC40 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
0001AC45 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
0001AC4A 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
0001AC4F 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
0001AC54 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
0001AC59 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
0001AC5E 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
0001AC63 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
0001AC68 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
0001AC6D 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
0001AC72 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
0001AC77 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
0001AC7C 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
0001AC81 1A                         SME_Edo_t_1BF:	dc.b $1A	
0001AC82 D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
0001AC87 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
0001AC8C D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
0001AC91 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
0001AC96 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
0001AC9B D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
0001ACA0 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
0001ACA5 D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
0001ACAA D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
0001ACAF D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
0001ACB4 D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
0001ACB9 D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
0001ACBE 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
0001ACC3 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
0001ACC8 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
0001ACCD 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
0001ACD2 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
0001ACD7 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
0001ACDC 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
0001ACE1 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
0001ACE6 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
0001ACEB 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
0001ACF0 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
0001ACF5 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
0001ACFA 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
0001ACFF 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
0001AD04 17                         SME_Edo_t_242:	dc.b $17	
0001AD05 D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
0001AD0A D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
0001AD0F D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
0001AD14 D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
0001AD19 D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
0001AD1E D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
0001AD23 D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
0001AD28 D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
0001AD2D D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
0001AD32 D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
0001AD37 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
0001AD3C D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
0001AD41 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
0001AD46 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
0001AD4B 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
0001AD50 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
0001AD55 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
0001AD5A 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
0001AD5F 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
0001AD64 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
0001AD69 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
0001AD6E 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
0001AD73 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
0001AD78 1F                         SME_Edo_t_2B6:	dc.b $1F	
0001AD79 D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
0001AD7E D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
0001AD83 D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
0001AD88 D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
0001AD8D D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
0001AD92 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
0001AD97 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
0001AD9C D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
0001ADA1 D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
0001ADA6 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
0001ADAB D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
0001ADB0 D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
0001ADB5 D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
0001ADBA 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
0001ADBF 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
0001ADC4 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
0001ADC9 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
0001ADCE 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
0001ADD3 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
0001ADD8 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
0001ADDD 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
0001ADE2 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
0001ADE7 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
0001ADEC 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
0001ADF1 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
0001ADF6 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
0001ADFB 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
0001AE00 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
0001AE05 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
0001AE0A 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
0001AE0F 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
0001AE14 0F                         SME_Edo_t_352:	dc.b $F	
0001AE15 F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
0001AE1A F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
0001AE1F F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
0001AE24 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
0001AE29 F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
0001AE2E F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
0001AE33 F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
0001AE38 F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
0001AE3D F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
0001AE42 F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
0001AE47 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
0001AE4C F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
0001AE51 F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
0001AE56 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
0001AE5B F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
0001AE60 08                         SME_Edo_t_39E:	dc.b 8	
0001AE61 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
0001AE66 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
0001AE6B 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
0001AE70 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
0001AE75 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
0001AE7A 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
0001AE7F 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
0001AE84 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
0001AE89 0F                         SME_Edo_t_3C7:	dc.b $F
0001AE8A E805 003A C8               		dc.b $E8, 5, 0, $3A, $C8	; H
0001AE8F E805 001E D8               		dc.b $E8, 5, 0, $1E, $D8	; C
0001AE94 E805 0058 E8               		dc.b $E8, 5, 0, $58, $E8	; K
0001AE99 E805 003E F8               		dc.b $E8, 5, 0, $3E, $F8	; T
0001AE9E E805 0022 08               		dc.b $E8, 5, 0, $22, $8	; R
0001AEA3 E805 0026 18               		dc.b $E8, 5, 0, $26, $18	; O
0001AEA8 E805 0050 28               		dc.b $E8, 5, 0, $50, $28	; X
0001AEAD 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001AEB2 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001AEB7 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001AEBC 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001AEC1 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001AEC6 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001AECB 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001AED0 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001AED6 00                         		even
0001AED6 00                         		even
0001AED6                            
0001AED6                            ; ===========================================================================
0001AED6                            ; ---------------------------------------------------------------------------
0001AED6                            ; Object 3D - Eggman (GHZ)
0001AED6                            ; ---------------------------------------------------------------------------
0001AED6                            
0001AED6                            Obj3D:					; XREF: Obj_Index
0001AED6 11E8 0021 FF99             		move.b	$21(a0),($FFFFFF99).w
0001AEDC 7000                       		moveq	#0,d0
0001AEDE 1028 0024                  		move.b	$24(a0),d0
0001AEE2 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001AEE6 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001AEEA                            ; ===========================================================================
0001AEEA 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001AEEC 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001AEEE 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001AEF0 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001AEF2                            
0001AEF2 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
0001AEF4 0401                       		dc.b 4,	1
0001AEF6 0607                       		dc.b 6,	7
0001AEF8                            ; ===========================================================================
0001AEF8                            
0001AEF8                            Obj3D_Main:				; XREF: Obj3D_Index
0001AEF8 45F9 0001 AEF2             		lea	(Obj3D_ObjData).l,a2
0001AEFE 2248                       		movea.l	a0,a1
0001AF00 7202                       		moveq	#2,d1
0001AF02 6000                       		bra.s	Obj3D_LoadBoss
0001AF04                            ; ===========================================================================
0001AF04                            
0001AF04                            Obj3D_Loop:
0001AF04 4EB9 0001 099E             		jsr	SingleObjLoad2
0001AF0A 6600                       		bne.s	loc_17772
0001AF0C                            
0001AF0C                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001AF0C 135A 0024                  		move.b	(a2)+,$24(a1)
0001AF10 12BC 003D                  		move.b	#$3D,0(a1)
0001AF14 3368 0008 0008             		move.w	8(a0),8(a1)
0001AF1A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AF20 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001AF28 337C 0400 0002             		move.w	#$400,2(a1)
0001AF2E 137C 0004 0001             		move.b	#4,1(a1)
0001AF34 137C 0020 0019             		move.b	#$20,$19(a1)
0001AF3A 137C 0003 0018             		move.b	#3,$18(a1)
0001AF40 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AF44 2348 0034                  		move.l	a0,$34(a1)
0001AF48 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001AF4C                            
0001AF4C                            loc_17772:
0001AF4C 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AF52 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AF58 117C 000F 0020             		move.b	#$F,$20(a0)
0001AF5E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001AF64                            
0001AF64                            Obj3D_ShipMain:				; XREF: Obj3D_Index
0001AF64 7000                       		moveq	#0,d0
0001AF66 1028 0025                  		move.b	$25(a0),d0
0001AF6A 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001AF6E 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
0001AF72 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001AF78 4EB9 0000 D0AC             		jsr	AnimateSprite
0001AF7E 1028 0022                  		move.b	$22(a0),d0
0001AF82 0200 0003                  		andi.b	#3,d0
0001AF86 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AF8C 8128 0001                  		or.b	d0,1(a0)
0001AF90 4EF9 0001 0502             		jmp	DisplaySprite
0001AF96                            ; ===========================================================================
0001AF96 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
0001AF98 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0001AF9A 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001AF9C 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001AF9E 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
0001AFA0 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
0001AFA2 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
0001AFA4                            ; ===========================================================================
0001AFA4                            
0001AFA4                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
0001AFA4 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
0001AFAA 6100 0000                  		bsr.w	BossMove
0001AFAE 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001AFB4 6600                       		bne.s	loc_177E6
0001AFB6 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001AFBC 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001AFC0                            
0001AFC0                            loc_177E6:
0001AFC0 1028 003F                  		move.b	$3F(a0),d0
0001AFC4 4EB9 0000 3798             		jsr	(CalcSine).l
0001AFCA EC40                       		asr.w	#6,d0
0001AFCC D068 0038                  		add.w	$38(a0),d0
0001AFD0 3140 000C                  		move.w	d0,$C(a0)
0001AFD4 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AFDA 5428 003F                  		addq.b	#2,$3F(a0)
0001AFDE 0C28 0008 0025             		cmpi.b	#8,$25(a0)
0001AFE4 6400                       		bcc.s	locret_1784A
0001AFE6 4A28 0022                  		tst.b	$22(a0)
0001AFEA 6B00                       		bmi.s	loc_1784C
0001AFEC 4A28 0020                  		tst.b	$20(a0)
0001AFF0 6600                       		bne.s	locret_1784A
0001AFF2 4A28 003E                  		tst.b	$3E(a0)
0001AFF6 6600                       		bne.s	Obj3D_ShipFlash
0001AFF8 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001AFFE 303C 00AC                  		move.w	#$AC,d0
0001B002 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B008                            
0001B008                            Obj3D_ShipFlash:
0001B008 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001B00C 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001B00E 4A51                       		tst.w	(a1)
0001B010 6600                       		bne.s	loc_1783C
0001B012 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001B016                            
0001B016                            loc_1783C:
0001B016 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001B018 5328 003E                  		subq.b	#1,$3E(a0)
0001B01C 6600                       		bne.s	locret_1784A
0001B01E 117C 000F 0020             		move.b	#$F,$20(a0)
0001B024                            
0001B024                            locret_1784A:
0001B024 4E75                       		rts	
0001B026                            ; ===========================================================================
0001B026                            
0001B026                            loc_1784C:				; XREF: loc_177E6
0001B026 7064                       		moveq	#100,d0
0001B028 6100 0000                  		bsr.w	AddPoints
0001B02C 117C 0008 0025             		move.b	#8,$25(a0)
0001B032 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001B038 4E75                       		rts	
0001B03A                            
0001B03A                            ; ---------------------------------------------------------------------------
0001B03A                            ; Defeated boss	subroutine
0001B03A                            ; ---------------------------------------------------------------------------
0001B03A                            
0001B03A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B03A                            
0001B03A                            
0001B03A                            BossDefeated:
0001B03A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001B03E 0200 0007                  		andi.b	#7,d0
0001B042 6600                       		bne.s	locret_178A2
0001B044 4EB9 0001 0988             		jsr	SingleObjLoad
0001B04A 6600                       		bne.s	locret_178A2
0001B04C 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B050 3368 0008 0008             		move.w	8(a0),8(a1)
0001B056 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B05C 4EB9 0000 3772             		jsr	(RandomNumber).l
0001B062 3200                       		move.w	d0,d1
0001B064 7200                       		moveq	#0,d1
0001B066 1200                       		move.b	d0,d1
0001B068 E409                       		lsr.b	#2,d1
0001B06A 0441 0020                  		subi.w	#$20,d1
0001B06E D369 0008                  		add.w	d1,8(a1)
0001B072 E048                       		lsr.w	#8,d0
0001B074 E608                       		lsr.b	#3,d0
0001B076 D169 000C                  		add.w	d0,$C(a1)
0001B07A                            
0001B07A                            locret_178A2:
0001B07A 4E75                       		rts	
0001B07C                            ; End of function BossDefeated
0001B07C                            
0001B07C                            ; ---------------------------------------------------------------------------
0001B07C                            ; Subroutine to	move a boss
0001B07C                            ; ---------------------------------------------------------------------------
0001B07C                            
0001B07C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B07C                            
0001B07C                            
0001B07C                            BossMove:
0001B07C 2428 0030                  		move.l	$30(a0),d2
0001B080 2628 0038                  		move.l	$38(a0),d3
0001B084 3028 0010                  		move.w	$10(a0),d0
0001B088 48C0                       		ext.l	d0
0001B08A E180                       		asl.l	#8,d0
0001B08C D480                       		add.l	d0,d2
0001B08E 3028 0012                  		move.w	$12(a0),d0
0001B092 48C0                       		ext.l	d0
0001B094 E180                       		asl.l	#8,d0
0001B096 D680                       		add.l	d0,d3
0001B098 2142 0030                  		move.l	d2,$30(a0)
0001B09C 2143 0038                  		move.l	d3,$38(a0)
0001B0A0 4E75                       		rts	
0001B0A2                            ; End of function BossMove
0001B0A2                            
0001B0A2                            ; ===========================================================================
0001B0A2                            
0001B0A2                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
0001B0A2 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B0A8 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B0AE 6100 FFCC                  		bsr.w	BossMove
0001B0B2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B0B8 6600                       		bne.s	loc_17916
0001B0BA 317C 0000 0010             		move.w	#0,$10(a0)
0001B0C0 317C 0000 0012             		move.w	#0,$12(a0)
0001B0C6 5428 0025                  		addq.b	#2,$25(a0)
0001B0CA 4EB9 0001 099E             		jsr	SingleObjLoad2
0001B0D0 6600                       		bne.s	loc_17910
0001B0D2 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001B0D6 3368 0030 0008             		move.w	$30(a0),8(a1)
0001B0DC 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001B0E2 2348 0034                  		move.l	a0,$34(a1)
0001B0E6                            
0001B0E6                            loc_17910:
0001B0E6 317C 0077 003C             		move.w	#$77,$3C(a0)
0001B0EC                            
0001B0EC                            loc_17916:
0001B0EC 6000 FED2                  		bra.w	loc_177E6
0001B0F0                            ; ===========================================================================
0001B0F0                            
0001B0F0                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
0001B0F0 5368 003C                  		subq.w	#1,$3C(a0)
0001B0F4 6A00                       		bpl.s	Obj3D_Reverse
0001B0F6 5428 0025                  		addq.b	#2,$25(a0)
0001B0FA 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B100 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
0001B106 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001B10C 6600                       		bne.s	Obj3D_Reverse
0001B10E 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001B114 317C 0040 0010             		move.w	#$40,$10(a0)
0001B11A                            
0001B11A                            Obj3D_Reverse:
0001B11A 0828 0000 0022             		btst	#0,$22(a0)
0001B120 6600                       		bne.s	loc_17950
0001B122 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
0001B126                            
0001B126                            loc_17950:
0001B126 6000 FE98                  		bra.w	loc_177E6
0001B12A                            ; ===========================================================================
0001B12A                            
0001B12A                            loc_17954:				; XREF: Obj3D_ShipIndex
0001B12A 5368 003C                  		subq.w	#1,$3C(a0)
0001B12E 6B00                       		bmi.s	loc_17960
0001B130 6100 FF4A                  		bsr.w	BossMove
0001B134 6000                       		bra.s	loc_17976
0001B136                            ; ===========================================================================
0001B136                            
0001B136                            loc_17960:
0001B136 0868 0000 0022             		bchg	#0,$22(a0)
0001B13C 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001B142 5528 0025                  		subq.b	#2,$25(a0)
0001B146 317C 0000 0010             		move.w	#0,$10(a0)
0001B14C                            
0001B14C                            loc_17976:
0001B14C 6000 FE72                  		bra.w	loc_177E6
0001B150                            ; ===========================================================================
0001B150                            
0001B150                            loc_1797A:				; XREF: Obj3D_ShipIndex
0001B150 5368 003C                  		subq.w	#1,$3C(a0)
0001B154 6B00                       		bmi.s	loc_17984
0001B156 6000 FEE2                  		bra.w	BossDefeated
0001B15A                            ; ===========================================================================
0001B15A                            
0001B15A                            loc_17984:
0001B15A 08E8 0000 0022             		bset	#0,$22(a0)
0001B160 08A8 0007 0022             		bclr	#7,$22(a0)
0001B166 4268 0010                  		clr.w	$10(a0)
0001B16A 5428 0025                  		addq.b	#2,$25(a0)
0001B16E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B174 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B178 6600                       		bne.s	locret_179AA
0001B17A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B180                            
0001B180                            locret_179AA:
0001B180 4E75                       		rts	
0001B182                            ; ===========================================================================
0001B182                            
0001B182                            loc_179AC:				; XREF: Obj3D_ShipIndex
0001B182 5268 003C                  		addq.w	#1,$3C(a0)
0001B186 6700                       		beq.s	loc_179BC
0001B188 6A00                       		bpl.s	loc_179C2
0001B18A 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B190 6000                       		bra.s	loc_179EE
0001B192                            ; ===========================================================================
0001B192                            
0001B192                            loc_179BC:
0001B192 4268 0012                  		clr.w	$12(a0)
0001B196 6000                       		bra.s	loc_179EE
0001B198                            ; ===========================================================================
0001B198                            
0001B198                            loc_179C2:
0001B198 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B19E 6500                       		bcs.s	loc_179DA
0001B1A0 6700                       		beq.s	loc_179E0
0001B1A2 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B1A8 6500                       		bcs.s	loc_179EE
0001B1AA 5428 0025                  		addq.b	#2,$25(a0)
0001B1AE 6000                       		bra.s	loc_179EE
0001B1B0                            ; ===========================================================================
0001B1B0                            
0001B1B0                            loc_179DA:
0001B1B0 5168 0012                  		subq.w	#8,$12(a0)
0001B1B4 6000                       		bra.s	loc_179EE
0001B1B6                            ; ===========================================================================
0001B1B6                            
0001B1B6                            loc_179E0:
0001B1B6 4268 0012                  		clr.w	$12(a0)
0001B1BA 303C 0081                  		move.w	#$81,d0
0001B1BE 4EB9 0000 19E4             		jsr	(PlaySound).l	; play GHZ music
0001B1C4                            
0001B1C4                            loc_179EE:
0001B1C4 6100 FEB6                  		bsr.w	BossMove
0001B1C8 6000 FDF6                  		bra.w	loc_177E6
0001B1CC                            ; ===========================================================================
0001B1CC                            
0001B1CC                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001B1CC 317C 0400 0010             		move.w	#$400,$10(a0)
0001B1D2 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B1D8 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001B1DE 6700                       		beq.s	loc_17A10
0001B1E0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B1E4 6000                       		bra.s	loc_17A16
0001B1E6                            ; ===========================================================================
0001B1E6                            
0001B1E6                            loc_17A10:
0001B1E6 4A28 0001                  		tst.b	1(a0)
0001B1EA 6A00                       		bpl.s	Obj3D_ShipDel
0001B1EC                            
0001B1EC                            loc_17A16:
0001B1EC 6100 FE8E                  		bsr.w	BossMove
0001B1F0 6000 FDCE                  		bra.w	loc_177E6
0001B1F4                            ; ===========================================================================
0001B1F4                            
0001B1F4                            Obj3D_ShipDel:
0001B1F4 4EF9 0001 053E             		jmp	DeleteObject
0001B1FA                            ; ===========================================================================
0001B1FA                            
0001B1FA                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001B1FA 7000                       		moveq	#0,d0
0001B1FC 7201                       		moveq	#1,d1
0001B1FE 2268 0034                  		movea.l	$34(a0),a1
0001B202 1029 0025                  		move.b	$25(a1),d0
0001B206 5900                       		subq.b	#4,d0
0001B208 6600                       		bne.s	loc_17A3E
0001B20A 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001B210 6600                       		bne.s	loc_17A46
0001B212 7204                       		moveq	#4,d1
0001B214                            
0001B214                            loc_17A3E:
0001B214 5D00                       		subq.b	#6,d0
0001B216 6B00                       		bmi.s	loc_17A46
0001B218 720A                       		moveq	#$A,d1
0001B21A 6000                       		bra.s	loc_17A5A
0001B21C                            ; ===========================================================================
0001B21C                            
0001B21C                            loc_17A46:
0001B21C 4A29 0020                  		tst.b	$20(a1)
0001B220 6600                       		bne.s	loc_17A50
0001B222 7205                       		moveq	#5,d1
0001B224 6000                       		bra.s	loc_17A5A
0001B226                            ; ===========================================================================
0001B226                            
0001B226                            loc_17A50:
0001B226 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B22C 6500                       		bcs.s	loc_17A5A
0001B22E 7204                       		moveq	#4,d1
0001B230                            
0001B230                            loc_17A5A:
0001B230 1141 001C                  		move.b	d1,$1C(a0)
0001B234 5500                       		subq.b	#2,d0
0001B236 6600                       		bne.s	Obj3D_FaceDisp
0001B238 117C 0006 001C             		move.b	#6,$1C(a0)
0001B23E 4A28 0001                  		tst.b	1(a0)
0001B242 6A00                       		bpl.s	Obj3D_FaceDel
0001B244                            
0001B244                            Obj3D_FaceDisp:
0001B244 6000                       		bra.s	Obj3D_Display
0001B246                            ; ===========================================================================
0001B246                            
0001B246                            Obj3D_FaceDel:
0001B246 4EF9 0001 053E             		jmp	DeleteObject
0001B24C                            ; ===========================================================================
0001B24C                            
0001B24C                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001B24C 117C 0007 001C             		move.b	#7,$1C(a0)
0001B252 2268 0034                  		movea.l	$34(a0),a1
0001B256 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001B25C 6600                       		bne.s	loc_17A96
0001B25E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B264 4A28 0001                  		tst.b	1(a0)
0001B268 6A00                       		bpl.s	Obj3D_FlameDel
0001B26A 6000                       		bra.s	Obj3D_FlameDisp
0001B26C                            ; ===========================================================================
0001B26C                            
0001B26C                            loc_17A96:
0001B26C 3029 0010                  		move.w	$10(a1),d0
0001B270 6700                       		beq.s	Obj3D_FlameDisp
0001B272 117C 0008 001C             		move.b	#8,$1C(a0)
0001B278                            
0001B278                            Obj3D_FlameDisp:
0001B278 6000                       		bra.s	Obj3D_Display
0001B27A                            ; ===========================================================================
0001B27A                            
0001B27A                            Obj3D_FlameDel:
0001B27A 4EF9 0001 053E             		jmp	DeleteObject
0001B280                            ; ===========================================================================
0001B280                            
0001B280                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
0001B280 2268 0034                  		movea.l	$34(a0),a1
0001B284 3169 0008 0008             		move.w	8(a1),8(a0)
0001B28A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B290 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B296 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001B29C 4EB9 0000 D0AC             		jsr	AnimateSprite
0001B2A2 1028 0022                  		move.b	$22(a0),d0
0001B2A6 0200 0003                  		andi.b	#3,d0
0001B2AA 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B2B0 8128 0001                  		or.b	d0,1(a0)
0001B2B4 4EF9 0001 0502             		jmp	DisplaySprite
0001B2BA                            ; ===========================================================================
0001B2BA                            ; ---------------------------------------------------------------------------
0001B2BA                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001B2BA                            ; ---------------------------------------------------------------------------
0001B2BA                            
0001B2BA                            Obj48:					; XREF: Obj_Index
0001B2BA 7000                       		moveq	#0,d0
0001B2BC 1028 0024                  		move.b	$24(a0),d0
0001B2C0 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
0001B2C4 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001B2C8                            ; ===========================================================================
0001B2C8 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001B2CA 0000                       		dc.w Obj48_Base-Obj48_Index
0001B2CC 0000                       		dc.w Obj48_Display2-Obj48_Index
0001B2CE 0000                       		dc.w loc_17C68-Obj48_Index
0001B2D0 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
0001B2D2                            ; ===========================================================================
0001B2D2                            
0001B2D2                            Obj48_Main:				; XREF: Obj48_Index
0001B2D2 5428 0024                  		addq.b	#2,$24(a0)
0001B2D6 317C 4080 0026             		move.w	#$4080,$26(a0)
0001B2DC 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001B2E2 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001B2EA 317C 046C 0002             		move.w	#$46C,2(a0)
0001B2F0 45E8 0028                  		lea	$28(a0),a2
0001B2F4 14FC 0000                  		move.b	#0,(a2)+
0001B2F8 7205                       		moveq	#5,d1
0001B2FA 2248                       		movea.l	a0,a1
0001B2FC 6000                       		bra.s	loc_17B60
0001B2FE                            ; ===========================================================================
0001B2FE                            
0001B2FE                            Obj48_MakeLinks:
0001B2FE 4EB9 0001 099E             		jsr	SingleObjLoad2
0001B304 6600                       		bne.s	Obj48_MakeBall
0001B306 3368 0008 0008             		move.w	8(a0),8(a1)
0001B30C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B312 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001B316 137C 0006 0024             		move.b	#6,$24(a1)
0001B31C 237C 0000 A35C 0004        		move.l	#Map_obj15,4(a1)
0001B324 337C 0380 0002             		move.w	#$380,2(a1)
0001B32A 137C 0001 001A             		move.b	#1,$1A(a1)
0001B330 5228 0028                  		addq.b	#1,$28(a0)
0001B334                            
0001B334                            loc_17B60:				; XREF: Obj48_Main
0001B334 3A09                       		move.w	a1,d5
0001B336 0445 D000                  		subi.w	#$D000,d5
0001B33A EC4D                       		lsr.w	#6,d5
0001B33C 0245 007F                  		andi.w	#$7F,d5
0001B340 14C5                       		move.b	d5,(a2)+
0001B342 137C 0004 0001             		move.b	#4,1(a1)
0001B348 137C 0008 0019             		move.b	#8,$19(a1)
0001B34E 137C 0006 0018             		move.b	#6,$18(a1)
0001B354 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001B35A 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
0001B35E                            
0001B35E                            Obj48_MakeBall:
0001B35E 137C 0008 0024             		move.b	#8,$24(a1)
0001B364 237C 0000 A98E 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
0001B36C 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
0001B372 137C 0001 001A             		move.b	#1,$1A(a1)
0001B378 137C 0005 0018             		move.b	#5,$18(a1)
0001B37E 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
0001B384 4E75                       		rts	
0001B386                            ; ===========================================================================
0001B386                            
0001B386 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001B38C                            
0001B38C                            ; ===========================================================================
0001B38C                            
0001B38C                            Obj48_Base:				; XREF: Obj48_Index
0001B38C 47F9 0001 B386             		lea	(Obj48_PosData).l,a3
0001B392 45E8 0028                  		lea	$28(a0),a2
0001B396 7C00                       		moveq	#0,d6
0001B398 1C1A                       		move.b	(a2)+,d6
0001B39A                            
0001B39A                            loc_17BC6:
0001B39A 7800                       		moveq	#0,d4
0001B39C 181A                       		move.b	(a2)+,d4
0001B39E ED4C                       		lsl.w	#6,d4
0001B3A0 0684 00FF D000             		addi.l	#$FFD000,d4
0001B3A6 2244                       		movea.l	d4,a1
0001B3A8 101B                       		move.b	(a3)+,d0
0001B3AA B029 003C                  		cmp.b	$3C(a1),d0
0001B3AE 6700                       		beq.s	loc_17BE0
0001B3B0 5229 003C                  		addq.b	#1,$3C(a1)
0001B3B4                            
0001B3B4                            loc_17BE0:
0001B3B4 51CE FFE4                  		dbf	d6,loc_17BC6
0001B3B8                            
0001B3B8 B029 003C                  		cmp.b	$3C(a1),d0
0001B3BC 6600                       		bne.s	loc_17BFA
0001B3BE 2268 0034                  		movea.l	$34(a0),a1
0001B3C2 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001B3C8 6600                       		bne.s	loc_17BFA
0001B3CA 5428 0024                  		addq.b	#2,$24(a0)
0001B3CE                            
0001B3CE                            loc_17BFA:
0001B3CE 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001B3D4 6700                       		beq.s	Obj48_Display
0001B3D6 5268 0032                  		addq.w	#1,$32(a0)
0001B3DA                            
0001B3DA                            Obj48_Display:
0001B3DA 6100 0000                  		bsr.w	sub_17C2A
0001B3DE 1028 0026                  		move.b	$26(a0),d0
0001B3E2 4EB9 0000 A2CE             		jsr	(Obj15_Move2).l
0001B3E8 4EF9 0001 0502             		jmp	DisplaySprite
0001B3EE                            ; ===========================================================================
0001B3EE                            
0001B3EE                            Obj48_Display2:				; XREF: Obj48_Index
0001B3EE 6100 0000                  		bsr.w	sub_17C2A
0001B3F2 4EB9 0000 A28E             		jsr	(Obj48_Move).l
0001B3F8 4EF9 0001 0502             		jmp	DisplaySprite
0001B3FE                            
0001B3FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3FE                            
0001B3FE                            
0001B3FE                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001B3FE 2268 0034                  		movea.l	$34(a0),a1
0001B402 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001B408 6400                       		bcc.s	loc_17C3C
0001B40A 0868 0000 001A             		bchg	#0,$1A(a0)
0001B410                            
0001B410                            loc_17C3C:
0001B410 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001B416 3029 000C                  		move.w	$C(a1),d0
0001B41A D068 0032                  		add.w	$32(a0),d0
0001B41E 3140 0038                  		move.w	d0,$38(a0)
0001B422 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B428 4A29 0022                  		tst.b	$22(a1)
0001B42C 6A00                       		bpl.s	locret_17C66
0001B42E 10BC 003F                  		move.b	#$3F,0(a0)
0001B432 117C 0000 0024             		move.b	#0,$24(a0)
0001B438                            
0001B438                            locret_17C66:
0001B438 4E75                       		rts	
0001B43A                            ; End of function sub_17C2A
0001B43A                            
0001B43A                            ; ===========================================================================
0001B43A                            
0001B43A                            loc_17C68:				; XREF: Obj48_Index
0001B43A 2268 0034                  		movea.l	$34(a0),a1
0001B43E 4A29 0022                  		tst.b	$22(a1)
0001B442 6A00                       		bpl.s	Obj48_Display3
0001B444 10BC 003F                  		move.b	#$3F,0(a0)
0001B448 117C 0000 0024             		move.b	#0,$24(a0)
0001B44E                            
0001B44E                            Obj48_Display3:
0001B44E 4EF9 0001 0502             		jmp	DisplaySprite
0001B454                            ; ===========================================================================
0001B454                            
0001B454                            Obj48_ChkVanish:			; XREF: Obj48_Index
0001B454 7000                       		moveq	#0,d0
0001B456 4A28 001A                  		tst.b	$1A(a0)
0001B45A 6600                       		bne.s	Obj48_Vanish
0001B45C 5200                       		addq.b	#1,d0
0001B45E                            
0001B45E                            Obj48_Vanish:
0001B45E 1140 001A                  		move.b	d0,$1A(a0)
0001B462 2268 0034                  		movea.l	$34(a0),a1
0001B466 4A29 0022                  		tst.b	$22(a1)
0001B46A 6A00                       		bpl.s	Obj48_Display4
0001B46C 117C 0000 0020             		move.b	#0,$20(a0)
0001B472 6100 FBC6                  		bsr.w	BossDefeated
0001B476 5328 003C                  		subq.b	#1,$3C(a0)
0001B47A 6A00                       		bpl.s	Obj48_Display4
0001B47C 10BC 003F                  		move.b	#$3F,(a0)
0001B480 117C 0000 0024             		move.b	#0,$24(a0)
0001B486                            
0001B486                            Obj48_Display4:
0001B486 4EF9 0001 0502             		jmp	DisplaySprite
0001B48C                            ; ===========================================================================
0001B48C                            Ani_Eggman:
0001B48C                            	include "_anim\Eggman.asm"
0001B48C                            ; ---------------------------------------------------------------------------
0001B48C                            ; Animation script - Eggman (bosses)
0001B48C                            ; ---------------------------------------------------------------------------
0001B48C 0000                       		dc.w byte_17CD4-Ani_Eggman
0001B48E 0000                       		dc.w byte_17CD8-Ani_Eggman
0001B490 0000                       		dc.w byte_17CDC-Ani_Eggman
0001B492 0000                       		dc.w byte_17CE0-Ani_Eggman
0001B494 0000                       		dc.w byte_17CE4-Ani_Eggman
0001B496 0000                       		dc.w byte_17CE8-Ani_Eggman
0001B498 0000                       		dc.w byte_17CEC-Ani_Eggman
0001B49A 0000                       		dc.w byte_17CF0-Ani_Eggman
0001B49C 0000                       		dc.w byte_17CF4-Ani_Eggman
0001B49E 0000                       		dc.w byte_17CF8-Ani_Eggman
0001B4A0 0000                       		dc.w byte_17CFC-Ani_Eggman
0001B4A2 0000                       		dc.w byte_17D00-Ani_Eggman
0001B4A4 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001B4A8 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001B4AC 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001B4B0 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
0001B4B4 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001B4B8 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001B4BC 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001B4C0 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
0001B4C4 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001B4C8 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001B4CC 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001B4D0 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001B4DC                            		even
0001B4DC                            		even
0001B4DC                            
0001B4DC                            ; ---------------------------------------------------------------------------
0001B4DC                            ; Sprite mappings - Eggman (boss levels)
0001B4DC                            ; ---------------------------------------------------------------------------
0001B4DC                            Map_Eggman:
0001B4DC                            	include "_maps\Eggman.asm"
0001B4DC                            ; ---------------------------------------------------------------------------
0001B4DC                            ; Sprite mappings - Eggman (boss levels)
0001B4DC                            ; ---------------------------------------------------------------------------
0001B4DC 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
0001B4E0 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
0001B4E4 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
0001B4E8 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
0001B4EC 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
0001B4F0 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
0001B4F4 0000                       		dc.w byte_17DC8-Map_Eggman
0001B4F6 06                         byte_17D26:	dc.b 6
0001B4F7 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
0001B4FC EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
0001B501 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
0001B506 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
0001B50B 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
0001B510 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
0001B515 02                         byte_17D45:	dc.b 2
0001B516 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001B51B EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
0001B520 02                         byte_17D50:	dc.b 2
0001B521 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001B526 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0001B52B 03                         byte_17D5B:	dc.b 3
0001B52C E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
0001B531 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
0001B536 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
0001B53B 03                         byte_17D6B:	dc.b 3
0001B53C E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
0001B541 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
0001B546 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
0001B54B 03                         byte_17D7B:	dc.b 3
0001B54C E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001B551 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0001B556 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001B55B 03                         byte_17D8B:	dc.b 3
0001B55C E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
0001B561 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001B566 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0001B56B 04                         byte_17D9B:	dc.b 4
0001B56C E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
0001B571 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001B576 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0001B57B EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001B580 01                         byte_17DB0:	dc.b 1
0001B581 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
0001B586 01                         byte_17DB6:	dc.b 1
0001B587 0405 0031 22               		dc.b 4,	5, 0, $31, $22
0001B58C 00                         byte_17DBC:	dc.b 0
0001B58D 02                         byte_17DBD:	dc.b 2
0001B58E 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
0001B593 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
0001B598 02                         byte_17DC8:	dc.b 2
0001B599 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
0001B59E 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
0001B5A4 00                         		even
0001B5A4 00                         		even
0001B5A4                            
0001B5A4                            ; ---------------------------------------------------------------------------
0001B5A4                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001B5A4                            ; ---------------------------------------------------------------------------
0001B5A4                            Map_BossItems:
0001B5A4                            	include "_maps\Boss items.asm"
0001B5A4                            ; ---------------------------------------------------------------------------
0001B5A4                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001B5A4                            ; ---------------------------------------------------------------------------
0001B5A4 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001B5A8 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001B5AC 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001B5B0 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001B5B4 01                         byte_17DE4:	dc.b 1
0001B5B5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001B5BA 02                         byte_17DEA:	dc.b 2
0001B5BB FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001B5C0 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001B5C5 00                         		dc.b 0
0001B5C6 01                         byte_17DF6:	dc.b 1
0001B5C7 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001B5CC 01                         byte_17DFC:	dc.b 1
0001B5CD 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
0001B5D2 01                         byte_17E02:	dc.b 1
0001B5D3 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001B5D8 04                         byte_17E08:	dc.b 4
0001B5D9 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001B5DE F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001B5E3 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001B5E8 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001B5ED 00                         		dc.b 0
0001B5EE 02                         byte_17E1E:	dc.b 2
0001B5EF 0005 0017 00               		dc.b 0,	5, 0, $17, 0
0001B5F4 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001B5F9 00                         		dc.b 0
0001B5FA 02                         byte_17E2A:	dc.b 2
0001B5FB 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001B600 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001B606 00                         		even
0001B606 00                         		even
0001B606                            
0001B606                            ; ===========================================================================
0001B606                            ; ---------------------------------------------------------------------------
0001B606                            ; Object 77 - Eggman (LZ)
0001B606                            ; ---------------------------------------------------------------------------
0001B606                            
0001B606                            Obj77:					; XREF: Obj_Index
0001B606 7000                       		moveq	#0,d0
0001B608 1028 0024                  		move.b	$24(a0),d0
0001B60C 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001B610 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001B614                            ; ===========================================================================
0001B614 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001B616 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001B618 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001B61A 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001B61C                            
0001B61C 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001B61E 0401                       		dc.b 4,	1
0001B620 0607                       		dc.b 6,	7
0001B622                            ; ===========================================================================
0001B622                            
0001B622                            Obj77_Main:				; XREF: Obj77_Index
0001B622 317C 1E10 0008             		move.w	#$1E10,8(a0)
0001B628 317C 05C0 000C             		move.w	#$5C0,$C(a0)
0001B62E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B634 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B63A 117C 000F 0020             		move.b	#$F,$20(a0)
0001B640 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B646 117C 0004 0018             		move.b	#4,$18(a0)
0001B64C 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001B650 2248                       		movea.l	a0,a1
0001B652 7202                       		moveq	#2,d1
0001B654 6000                       		bra.s	Obj77_LoadBoss
0001B656                            ; ===========================================================================
0001B656                            
0001B656                            Obj77_Loop:
0001B656 4EB9 0001 099E             		jsr	SingleObjLoad2
0001B65C 6600                       		bne.s	Obj77_ShipMain
0001B65E 12BC 0077                  		move.b	#$77,0(a1)
0001B662 3368 0008 0008             		move.w	8(a0),8(a1)
0001B668 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B66E                            
0001B66E                            Obj77_LoadBoss:				; XREF: Obj77_Main
0001B66E 08A8 0000 0022             		bclr	#0,$22(a0)
0001B674 4229 0025                  		clr.b	$25(a1)
0001B678 135A 0024                  		move.b	(a2)+,$24(a1)
0001B67C 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B680 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001B686 237C 0001 B4DC 0004        		move.l	#Map_Eggman,4(a1)
0001B68E 337C 0400 0002             		move.w	#$400,2(a1)
0001B694 137C 0004 0001             		move.b	#4,1(a1)
0001B69A 137C 0020 0019             		move.b	#$20,$19(a1)
0001B6A0 2348 0034                  		move.l	a0,$34(a1)
0001B6A4 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001B6A8                            
0001B6A8                            Obj77_ShipMain:
0001B6A8 43F8 D000                  		lea	($FFFFD000).w,a1
0001B6AC 7000                       		moveq	#0,d0
0001B6AE 1028 0025                  		move.b	$25(a0),d0
0001B6B2 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001B6B6 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001B6BA 43F9 0001 B48C             		lea	(Ani_Eggman).l,a1
0001B6C0 4EB9 0000 D0AC             		jsr	AnimateSprite
0001B6C6 7003                       		moveq	#3,d0
0001B6C8 C028 0022                  		and.b	$22(a0),d0
0001B6CC 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B6D2 8128 0001                  		or.b	d0,1(a0)
0001B6D6 4EF9 0001 0502             		jmp	DisplaySprite
0001B6DC                            ; ===========================================================================
0001B6DC 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001B6E0 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001B6E4 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001B6E8 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001B6EC                            ; ===========================================================================
0001B6EC                            
0001B6EC                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001B6EC 3029 0008                  		move.w	8(a1),d0
0001B6F0 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001B6F4 6500                       		bcs.s	loc_17F38
0001B6F6 317C FE80 0012             		move.w	#-$180,$12(a0)
0001B6FC 317C 0060 0010             		move.w	#$60,$10(a0)
0001B702 5428 0025                  		addq.b	#2,$25(a0)
0001B706                            
0001B706                            loc_17F38:
0001B706 6100 F974                  		bsr.w	BossMove
0001B70A 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001B710 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B716                            
0001B716                            loc_17F48:
0001B716 4A28 003D                  		tst.b	$3D(a0)
0001B71A 6600                       		bne.s	loc_17F8E
0001B71C 4A28 0022                  		tst.b	$22(a0)
0001B720 6B00                       		bmi.s	loc_17F92
0001B722 4A28 0020                  		tst.b	$20(a0)
0001B726 6600                       		bne.s	locret_17F8C
0001B728 4A28 003E                  		tst.b	$3E(a0)
0001B72C 6600                       		bne.s	loc_17F70
0001B72E 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B734 303C 00AC                  		move.w	#$AC,d0
0001B738 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l
0001B73E                            
0001B73E                            loc_17F70:
0001B73E 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001B742 7000                       		moveq	#0,d0
0001B744 4A51                       		tst.w	(a1)
0001B746 6600                       		bne.s	loc_17F7E
0001B748 303C 0EEE                  		move.w	#$EEE,d0
0001B74C                            
0001B74C                            loc_17F7E:
0001B74C 3280                       		move.w	d0,(a1)
0001B74E 5328 003E                  		subq.b	#1,$3E(a0)
0001B752 6600                       		bne.s	locret_17F8C
0001B754 117C 000F 0020             		move.b	#$F,$20(a0)
0001B75A                            
0001B75A                            locret_17F8C:
0001B75A 4E75                       		rts	
0001B75C                            ; ===========================================================================
0001B75C                            
0001B75C                            loc_17F8E:				; XREF: loc_17F48
0001B75C 6000 F8DC                  		bra.w	BossDefeated
0001B760                            ; ===========================================================================
0001B760                            
0001B760                            loc_17F92:				; XREF: loc_17F48
0001B760 7064                       		moveq	#100,d0
0001B762 6100 0000                  		bsr.w	AddPoints
0001B766 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B76C 4E75                       		rts	
0001B76E                            ; ===========================================================================
0001B76E                            
0001B76E                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001B76E 70FE                       		moveq	#-2,d0
0001B770 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001B776 6500                       		bcs.s	loc_17FB6
0001B778 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001B77E 4268 0010                  		clr.w	$10(a0)
0001B782 5240                       		addq.w	#1,d0
0001B784                            
0001B784                            loc_17FB6:
0001B784 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001B78A 6E00                       		bgt.s	loc_17FCA
0001B78C 317C 0500 0038             		move.w	#$500,$38(a0)
0001B792 4268 0012                  		clr.w	$12(a0)
0001B796 5240                       		addq.w	#1,d0
0001B798                            
0001B798                            loc_17FCA:
0001B798 6600                       		bne.s	loc_17FDC
0001B79A 317C 0140 0010             		move.w	#$140,$10(a0)
0001B7A0 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B7A6 5428 0025                  		addq.b	#2,$25(a0)
0001B7AA                            
0001B7AA                            loc_17FDC:
0001B7AA 6000 FF5A                  		bra.w	loc_17F38
0001B7AE                            ; ===========================================================================
0001B7AE                            
0001B7AE                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001B7AE 70FE                       		moveq	#-2,d0
0001B7B0 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001B7B6 6500                       		bcs.s	loc_17FF6
0001B7B8 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001B7BE 4268 0010                  		clr.w	$10(a0)
0001B7C2 5240                       		addq.w	#1,d0
0001B7C4                            
0001B7C4                            loc_17FF6:
0001B7C4 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001B7CA 6E00                       		bgt.s	loc_1800A
0001B7CC 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001B7D2 4268 0012                  		clr.w	$12(a0)
0001B7D6 5240                       		addq.w	#1,d0
0001B7D8                            
0001B7D8                            loc_1800A:
0001B7D8 6600                       		bne.s	loc_1801A
0001B7DA 317C FE80 0012             		move.w	#-$180,$12(a0)
0001B7E0 5428 0025                  		addq.b	#2,$25(a0)
0001B7E4 4228 003F                  		clr.b	$3F(a0)
0001B7E8                            
0001B7E8                            loc_1801A:
0001B7E8 6000 FF1C                  		bra.w	loc_17F38
0001B7EC                            ; ===========================================================================
0001B7EC                            
0001B7EC                            loc_1801E:				; XREF: Obj77_ShipIndex
0001B7EC 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001B7F2 6E00                       		bgt.s	loc_1804E
0001B7F4 317C 0100 0038             		move.w	#$100,$38(a0)
0001B7FA 317C 0140 0010             		move.w	#$140,$10(a0)
0001B800 317C FF80 0012             		move.w	#-$80,$12(a0)
0001B806 4A28 003D                  		tst.b	$3D(a0)
0001B80A 6700                       		beq.s	loc_18046
0001B80C E1E8 0010                  		asl	$10(a0)
0001B810 E1E8 0012                  		asl	$12(a0)
0001B814                            
0001B814                            loc_18046:
0001B814 5428 0025                  		addq.b	#2,$25(a0)
0001B818 6000 FEEC                  		bra.w	loc_17F38
0001B81C                            ; ===========================================================================
0001B81C                            
0001B81C                            loc_1804E:
0001B81C 08E8 0000 0022             		bset	#0,$22(a0)
0001B822 5428 003F                  		addq.b	#2,$3F(a0)
0001B826 1028 003F                  		move.b	$3F(a0),d0
0001B82A 4EB9 0000 3798             		jsr	(CalcSine).l
0001B830 4A41                       		tst.w	d1
0001B832 6A00                       		bpl.s	loc_1806C
0001B834 08A8 0000 0022             		bclr	#0,$22(a0)
0001B83A                            
0001B83A                            loc_1806C:
0001B83A E840                       		asr.w	#4,d0
0001B83C 4840                       		swap	d0
0001B83E 4240                       		clr.w	d0
0001B840 D0A8 0030                  		add.l	$30(a0),d0
0001B844 4840                       		swap	d0
0001B846 3140 0008                  		move.w	d0,8(a0)
0001B84A 3028 0012                  		move.w	$12(a0),d0
0001B84E 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001B852 9268 000C                  		sub.w	$C(a0),d1
0001B856 6500                       		bcs.s	loc_180A2
0001B858 0441 0048                  		subi.w	#$48,d1
0001B85C 6500                       		bcs.s	loc_180A2
0001B85E E240                       		asr.w	#1,d0
0001B860 0441 0028                  		subi.w	#$28,d1
0001B864 6500                       		bcs.s	loc_180A2
0001B866 E240                       		asr.w	#1,d0
0001B868 0441 0028                  		subi.w	#$28,d1
0001B86C 6500                       		bcs.s	loc_180A2
0001B86E 7000                       		moveq	#0,d0
0001B870                            
0001B870                            loc_180A2:
0001B870 48C0                       		ext.l	d0
0001B872 E180                       		asl.l	#8,d0
0001B874 4A28 003D                  		tst.b	$3D(a0)
0001B878 6700                       		beq.s	loc_180AE
0001B87A D080                       		add.l	d0,d0
0001B87C                            
0001B87C                            loc_180AE:
0001B87C D1A8 0038                  		add.l	d0,$38(a0)
0001B880 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001B886 6000 FE8E                  		bra.w	loc_17F48
0001B88A                            ; ===========================================================================
0001B88A                            
0001B88A                            loc_180BC:				; XREF: Obj77_ShipIndex
0001B88A 70FE                       		moveq	#-2,d0
0001B88C 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B892 6500                       		bcs.s	loc_180D2
0001B894 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B89A 4268 0010                  		clr.w	$10(a0)
0001B89E 5240                       		addq.w	#1,d0
0001B8A0                            
0001B8A0                            loc_180D2:
0001B8A0 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B8A6 6E00                       		bgt.s	loc_180E6
0001B8A8 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B8AE 4268 0012                  		clr.w	$12(a0)
0001B8B2 5240                       		addq.w	#1,d0
0001B8B4                            
0001B8B4                            loc_180E6:
0001B8B4 6600                       		bne.s	loc_180F2
0001B8B6 5428 0025                  		addq.b	#2,$25(a0)
0001B8BA 08A8 0000 0022             		bclr	#0,$22(a0)
0001B8C0                            
0001B8C0                            loc_180F2:
0001B8C0 6000 FE44                  		bra.w	loc_17F38
0001B8C4                            ; ===========================================================================
0001B8C4                            
0001B8C4                            loc_180F6:				; XREF: Obj77_ShipIndex
0001B8C4 4A28 003D                  		tst.b	$3D(a0)
0001B8C8 6600                       		bne.s	loc_18112
0001B8CA 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001B8D0 6D00                       		blt.s	loc_18126
0001B8D2 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001B8D8 6E00                       		bgt.s	loc_18126
0001B8DA 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B8E0                            
0001B8E0                            loc_18112:
0001B8E0 303C 0082                  		move.w	#$82,d0
0001B8E4 4EB9 0000 19E4             		jsr	(PlaySound).l	; play LZ music
0001B8EA 08E8 0000 0022             		bset	#0,$22(a0)
0001B8F0 5428 0025                  		addq.b	#2,$25(a0)
0001B8F4                            
0001B8F4                            loc_18126:
0001B8F4 6000 FE10                  		bra.w	loc_17F38
0001B8F8                            ; ===========================================================================
0001B8F8                            
0001B8F8                            loc_1812A:				; XREF: Obj77_ShipIndex
0001B8F8 4A28 003D                  		tst.b	$3D(a0)
0001B8FC 6600                       		bne.s	loc_18136
0001B8FE 5328 003C                  		subq.b	#1,$3C(a0)
0001B902 6600                       		bne.s	loc_1814E
0001B904                            
0001B904                            loc_18136:
0001B904 4228 003C                  		clr.b	$3C(a0)
0001B908 317C 0400 0010             		move.w	#$400,$10(a0)
0001B90E 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B914 4228 003D                  		clr.b	$3D(a0)
0001B918 5428 0025                  		addq.b	#2,$25(a0)
0001B91C                            
0001B91C                            loc_1814E:
0001B91C 6000 FDE8                  		bra.w	loc_17F38
0001B920                            ; ===========================================================================
0001B920                            
0001B920                            loc_18152:				; XREF: Obj77_ShipIndex
0001B920 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001B926 6400                       		bcc.s	loc_18160
0001B928 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B92C 6000                       		bra.s	loc_18166
0001B92E                            ; ===========================================================================
0001B92E                            
0001B92E                            loc_18160:
0001B92E 4A28 0001                  		tst.b	1(a0)
0001B932 6A00                       		bpl.s	Obj77_ShipDel
0001B934                            
0001B934                            loc_18166:
0001B934 6000 FDD0                  		bra.w	loc_17F38
0001B938                            ; ===========================================================================
0001B938                            
0001B938                            Obj77_ShipDel:
0001B938 4EF9 0001 053E             		jmp	DeleteObject
0001B93E                            ; ===========================================================================
0001B93E                            
0001B93E                            Obj77_FaceMain:				; XREF: Obj77_Index
0001B93E 2268 0034                  		movea.l	$34(a0),a1
0001B942 1011                       		move.b	(a1),d0
0001B944 B010                       		cmp.b	(a0),d0
0001B946 6600                       		bne.s	Obj77_FaceDel
0001B948 7000                       		moveq	#0,d0
0001B94A 1029 0025                  		move.b	$25(a1),d0
0001B94E 7201                       		moveq	#1,d1
0001B950 4A28 003D                  		tst.b	$3D(a0)
0001B954 6700                       		beq.s	loc_1818C
0001B956 720A                       		moveq	#$A,d1
0001B958 6000                       		bra.s	loc_181A0
0001B95A                            ; ===========================================================================
0001B95A                            
0001B95A                            loc_1818C:
0001B95A 4A29 0020                  		tst.b	$20(a1)
0001B95E 6600                       		bne.s	loc_18196
0001B960 7205                       		moveq	#5,d1
0001B962 6000                       		bra.s	loc_181A0
0001B964                            ; ===========================================================================
0001B964                            
0001B964                            loc_18196:
0001B964 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B96A 6500                       		bcs.s	loc_181A0
0001B96C 7204                       		moveq	#4,d1
0001B96E                            
0001B96E                            loc_181A0:
0001B96E 1141 001C                  		move.b	d1,$1C(a0)
0001B972 0C00 000E                  		cmpi.b	#$E,d0
0001B976 6600                       		bne.s	loc_181B6
0001B978 117C 0006 001C             		move.b	#6,$1C(a0)
0001B97E 4A28 0001                  		tst.b	1(a0)
0001B982 6A00                       		bpl.s	Obj77_FaceDel
0001B984                            
0001B984                            loc_181B6:
0001B984 6000                       		bra.s	Obj77_Display
0001B986                            ; ===========================================================================
0001B986                            
0001B986                            Obj77_FaceDel:
0001B986 4EF9 0001 053E             		jmp	DeleteObject
0001B98C                            ; ===========================================================================
0001B98C                            
0001B98C                            Obj77_FlameMain:			; XREF: Obj77_Index
0001B98C 117C 0007 001C             		move.b	#7,$1C(a0)
0001B992 2268 0034                  		movea.l	$34(a0),a1
0001B996 1011                       		move.b	(a1),d0
0001B998 B010                       		cmp.b	(a0),d0
0001B99A 6600                       		bne.s	Obj77_FlameDel
0001B99C 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001B9A2 6600                       		bne.s	loc_181F0
0001B9A4 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B9AA 4A28 0001                  		tst.b	1(a0)
0001B9AE 6A00                       		bpl.s	Obj77_FlameDel
0001B9B0 6000                       		bra.s	loc_181F0
0001B9B2                            ; ===========================================================================
0001B9B2 4A69 0010                  		tst.w	$10(a1)
0001B9B6 6700                       		beq.s	loc_181F0
0001B9B8 117C 0008 001C             		move.b	#8,$1C(a0)
0001B9BE                            
0001B9BE                            loc_181F0:
0001B9BE 6000                       		bra.s	Obj77_Display
0001B9C0                            ; ===========================================================================
0001B9C0                            
0001B9C0                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001B9C0 4EF9 0001 053E             		jmp	DeleteObject
0001B9C6                            ; ===========================================================================
0001B9C6                            
0001B9C6                            Obj77_Display:
0001B9C6 43F9 0001 B48C             		lea	(Ani_Eggman).l,a1
0001B9CC 4EB9 0000 D0AC             		jsr	AnimateSprite
0001B9D2 2268 0034                  		movea.l	$34(a0),a1
0001B9D6 3169 0008 0008             		move.w	8(a1),8(a0)
0001B9DC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B9E2 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B9E8 7003                       		moveq	#3,d0
0001B9EA C028 0022                  		and.b	$22(a0),d0
0001B9EE 0228 00FC 0001             		andi.b	#-4,1(a0)
0001B9F4 8128 0001                  		or.b	d0,1(a0)
0001B9F8 4EF9 0001 0502             		jmp	DisplaySprite
0001B9FE                            ; ===========================================================================
0001B9FE                            ; ---------------------------------------------------------------------------
0001B9FE                            ; Object 73 - Eggman (MZ)
0001B9FE                            ; ---------------------------------------------------------------------------
0001B9FE                            
0001B9FE                            Obj73:					; XREF: Obj_Index
0001B9FE 7000                       		moveq	#0,d0
0001BA00 1028 0024                  		move.b	$24(a0),d0
0001BA04 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001BA08 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001BA0C                            ; ===========================================================================
0001BA0C 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001BA0E 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001BA10 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001BA12 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001BA14 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001BA16                            
0001BA16 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001BA19 0401 04                    		dc.b 4,	1, 4
0001BA1C 0607 04                    		dc.b 6,	7, 4
0001BA1F 0800 03                    		dc.b 8,	0, 3
0001BA22                            ; ===========================================================================
0001BA22                            
0001BA22                            Obj73_Main:				; XREF: Obj73_Index
0001BA22 3168 0008 0030             		move.w	8(a0),$30(a0)
0001BA28 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BA2E 117C 000F 0020             		move.b	#$F,$20(a0)
0001BA34 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001BA3A 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001BA3E 2248                       		movea.l	a0,a1
0001BA40 7203                       		moveq	#3,d1
0001BA42 6000                       		bra.s	Obj73_LoadBoss
0001BA44                            ; ===========================================================================
0001BA44                            
0001BA44                            Obj73_Loop:
0001BA44 4EB9 0001 099E             		jsr	SingleObjLoad2
0001BA4A 6600                       		bne.s	Obj73_ShipMain
0001BA4C 12BC 0073                  		move.b	#$73,0(a1)
0001BA50 3368 0008 0008             		move.w	8(a0),8(a1)
0001BA56 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BA5C                            
0001BA5C                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001BA5C 08A8 0000 0022             		bclr	#0,$22(a0)
0001BA62 4229 0025                  		clr.b	$25(a1)
0001BA66 135A 0024                  		move.b	(a2)+,$24(a1)
0001BA6A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001BA6E 135A 0018                  		move.b	(a2)+,$18(a1)
0001BA72 237C 0001 B4DC 0004        		move.l	#Map_Eggman,4(a1)
0001BA7A 337C 0400 0002             		move.w	#$400,2(a1)
0001BA80 137C 0004 0001             		move.b	#4,1(a1)
0001BA86 137C 0020 0019             		move.b	#$20,$19(a1)
0001BA8C 2348 0034                  		move.l	a0,$34(a1)
0001BA90 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001BA94                            
0001BA94                            Obj73_ShipMain:
0001BA94 7000                       		moveq	#0,d0
0001BA96 1028 0025                  		move.b	$25(a0),d0
0001BA9A 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001BA9E 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001BAA2 43F9 0001 B48C             		lea	(Ani_Eggman).l,a1
0001BAA8 4EB9 0000 D0AC             		jsr	AnimateSprite
0001BAAE 7003                       		moveq	#3,d0
0001BAB0 C028 0022                  		and.b	$22(a0),d0
0001BAB4 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001BABA 8128 0001                  		or.b	d0,1(a0)
0001BABE 4EF9 0001 0502             		jmp	DisplaySprite
0001BAC4                            ; ===========================================================================
0001BAC4 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001BAC6 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001BAC8 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001BACA 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001BACC 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001BACE                            ; ===========================================================================
0001BACE                            
0001BACE                            loc_18302:				; XREF: Obj73_ShipIndex
0001BACE 1028 003F                  		move.b	$3F(a0),d0
0001BAD2 5428 003F                  		addq.b	#2,$3F(a0)
0001BAD6 4EB9 0000 3798             		jsr	(CalcSine).l
0001BADC E440                       		asr.w	#2,d0
0001BADE 3140 0012                  		move.w	d0,$12(a0)
0001BAE2 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BAE8 6100 F592                  		bsr.w	BossMove
0001BAEC 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001BAF2 6600                       		bne.s	loc_18334
0001BAF4 5428 0025                  		addq.b	#2,$25(a0)
0001BAF8 4228 0028                  		clr.b	$28(a0)
0001BAFC 42A8 0010                  		clr.l	$10(a0)
0001BB00                            
0001BB00                            loc_18334:
0001BB00 4EB9 0000 3772             		jsr	(RandomNumber).l
0001BB06 1140 0034                  		move.b	d0,$34(a0)
0001BB0A                            
0001BB0A                            loc_1833E:
0001BB0A 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001BB10 3168 0030 0008             		move.w	$30(a0),8(a0)
0001BB16 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001BB1C 6400                       		bcc.s	locret_18390
0001BB1E 4A28 0022                  		tst.b	$22(a0)
0001BB22 6B00                       		bmi.s	loc_18392
0001BB24 4A28 0020                  		tst.b	$20(a0)
0001BB28 6600                       		bne.s	locret_18390
0001BB2A 4A28 003E                  		tst.b	$3E(a0)
0001BB2E 6600                       		bne.s	loc_18374
0001BB30 117C 0028 003E             		move.b	#$28,$3E(a0)
0001BB36 303C 00AC                  		move.w	#$AC,d0
0001BB3A 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BB40                            
0001BB40                            loc_18374:
0001BB40 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001BB44 7000                       		moveq	#0,d0
0001BB46 4A51                       		tst.w	(a1)
0001BB48 6600                       		bne.s	loc_18382
0001BB4A 303C 0EEE                  		move.w	#$EEE,d0
0001BB4E                            
0001BB4E                            loc_18382:
0001BB4E 3280                       		move.w	d0,(a1)
0001BB50 5328 003E                  		subq.b	#1,$3E(a0)
0001BB54 6600                       		bne.s	locret_18390
0001BB56 117C 000F 0020             		move.b	#$F,$20(a0)
0001BB5C                            
0001BB5C                            locret_18390:
0001BB5C 4E75                       		rts	
0001BB5E                            ; ===========================================================================
0001BB5E                            
0001BB5E                            loc_18392:				; XREF: loc_1833E
0001BB5E 7064                       		moveq	#100,d0
0001BB60 6100 0000                  		bsr.w	AddPoints
0001BB64 117C 0004 0025             		move.b	#4,$25(a0)
0001BB6A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001BB70 4268 0010                  		clr.w	$10(a0)
0001BB74 4E75                       		rts	
0001BB76                            ; ===========================================================================
0001BB76                            
0001BB76                            loc_183AA:				; XREF: Obj73_ShipIndex
0001BB76 7000                       		moveq	#0,d0
0001BB78 1028 0028                  		move.b	$28(a0),d0
0001BB7C 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001BB80 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001BB84 0228 0006 0028             		andi.b	#6,$28(a0)
0001BB8A 6000 FF7E                  		bra.w	loc_1833E
0001BB8E                            ; ===========================================================================
0001BB8E 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001BB90 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001BB92 0000                       		dc.w loc_183CA-off_183C2
0001BB94 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001BB96                            ; ===========================================================================
0001BB96                            
0001BB96                            loc_183CA:				; XREF: off_183C2
0001BB96 4A68 0010                  		tst.w	$10(a0)
0001BB9A 6600                       		bne.s	loc_183FE
0001BB9C 7040                       		moveq	#$40,d0
0001BB9E 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001BBA4 6700                       		beq.s	loc_183E6
0001BBA6 6500                       		bcs.s	loc_183DE
0001BBA8 4440                       		neg.w	d0
0001BBAA                            
0001BBAA                            loc_183DE:
0001BBAA 3140 0012                  		move.w	d0,$12(a0)
0001BBAE 6000 F4CC                  		bra.w	BossMove
0001BBB2                            ; ===========================================================================
0001BBB2                            
0001BBB2                            loc_183E6:
0001BBB2 317C 0200 0010             		move.w	#$200,$10(a0)
0001BBB8 317C 0100 0012             		move.w	#$100,$12(a0)
0001BBBE 0828 0000 0022             		btst	#0,$22(a0)
0001BBC4 6600                       		bne.s	loc_183FE
0001BBC6 4468 0010                  		neg.w	$10(a0)
0001BBCA                            
0001BBCA                            loc_183FE:
0001BBCA 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001BBD0 6400                       		bcc.s	Obj73_MakeLava
0001BBD2 6100 F4A8                  		bsr.w	BossMove
0001BBD6 5968 0012                  		subq.w	#4,$12(a0)
0001BBDA                            
0001BBDA                            Obj73_MakeLava:
0001BBDA 5328 0034                  		subq.b	#1,$34(a0)
0001BBDE 6400                       		bcc.s	loc_1845C
0001BBE0 4EB9 0001 0988             		jsr	SingleObjLoad
0001BBE6 6600                       		bne.s	loc_1844A
0001BBE8 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001BBEC 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001BBF2 4EB9 0000 3772             		jsr	(RandomNumber).l
0001BBF8 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001BBFE 80FC 0050                  		divu.w	#$50,d0
0001BC02 4840                       		swap	d0
0001BC04 0640 1878                  		addi.w	#$1878,d0
0001BC08 3340 0008                  		move.w	d0,8(a1)
0001BC0C EE09                       		lsr.b	#7,d1
0001BC0E 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001BC14                            
0001BC14                            loc_1844A:
0001BC14 4EB9 0000 3772             		jsr	(RandomNumber).l
0001BC1A 0200 001F                  		andi.b	#$1F,d0
0001BC1E 0600 0040                  		addi.b	#$40,d0
0001BC22 1140 0034                  		move.b	d0,$34(a0)
0001BC26                            
0001BC26                            loc_1845C:
0001BC26 0828 0000 0022             		btst	#0,$22(a0)
0001BC2C 6700                       		beq.s	loc_18474
0001BC2E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001BC34 6D00                       		blt.s	locret_1849C
0001BC36 317C 1910 0030             		move.w	#$1910,$30(a0)
0001BC3C 6000                       		bra.s	loc_18482
0001BC3E                            ; ===========================================================================
0001BC3E                            
0001BC3E                            loc_18474:
0001BC3E 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001BC44 6E00                       		bgt.s	locret_1849C
0001BC46 317C 1830 0030             		move.w	#$1830,$30(a0)
0001BC4C                            
0001BC4C                            loc_18482:
0001BC4C 4268 0010                  		clr.w	$10(a0)
0001BC50 317C FE80 0012             		move.w	#-$180,$12(a0)
0001BC56 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001BC5C 6400                       		bcc.s	loc_18498
0001BC5E 4468 0012                  		neg.w	$12(a0)
0001BC62                            
0001BC62                            loc_18498:
0001BC62 5428 0028                  		addq.b	#2,$28(a0)
0001BC66                            
0001BC66                            locret_1849C:
0001BC66 4E75                       		rts	
0001BC68                            ; ===========================================================================
0001BC68                            
0001BC68                            Obj73_MakeLava2:			; XREF: off_183C2
0001BC68 6100 F412                  		bsr.w	BossMove
0001BC6C 3028 0038                  		move.w	$38(a0),d0
0001BC70 0440 022C                  		subi.w	#$22C,d0
0001BC74 6E00                       		bgt.s	locret_184F4
0001BC76 303C 022C                  		move.w	#$22C,d0
0001BC7A 4A68 0012                  		tst.w	$12(a0)
0001BC7E 6700                       		beq.s	loc_184EA
0001BC80 4268 0012                  		clr.w	$12(a0)
0001BC84 317C 0050 003C             		move.w	#$50,$3C(a0)
0001BC8A 0868 0000 0022             		bchg	#0,$22(a0)
0001BC90 4EB9 0001 0988             		jsr	SingleObjLoad
0001BC96 6600                       		bne.s	loc_184EA
0001BC98 3368 0030 0008             		move.w	$30(a0),8(a1)
0001BC9E 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001BCA4 0669 0018 000C             		addi.w	#$18,$C(a1)
0001BCAA 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001BCAE 137C 0001 0028             		move.b	#1,$28(a1)
0001BCB4                            
0001BCB4                            loc_184EA:
0001BCB4 5368 003C                  		subq.w	#1,$3C(a0)
0001BCB8 6600                       		bne.s	locret_184F4
0001BCBA 5428 0028                  		addq.b	#2,$28(a0)
0001BCBE                            
0001BCBE                            locret_184F4:
0001BCBE 4E75                       		rts	
0001BCC0                            ; ===========================================================================
0001BCC0                            
0001BCC0                            loc_184F6:				; XREF: Obj73_ShipIndex
0001BCC0 5368 003C                  		subq.w	#1,$3C(a0)
0001BCC4 6B00                       		bmi.s	loc_18500
0001BCC6 6000 F372                  		bra.w	BossDefeated
0001BCCA                            ; ===========================================================================
0001BCCA                            
0001BCCA                            loc_18500:
0001BCCA 08E8 0000 0022             		bset	#0,$22(a0)
0001BCD0 08A8 0007 0022             		bclr	#7,$22(a0)
0001BCD6 4268 0010                  		clr.w	$10(a0)
0001BCDA 5428 0025                  		addq.b	#2,$25(a0)
0001BCDE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001BCE4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001BCE8 6600                       		bne.s	locret_1852A
0001BCEA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001BCF0 4268 0012                  		clr.w	$12(a0)
0001BCF4                            
0001BCF4                            locret_1852A:
0001BCF4 4E75                       		rts	
0001BCF6                            ; ===========================================================================
0001BCF6                            
0001BCF6                            loc_1852C:				; XREF: Obj73_ShipIndex
0001BCF6 5268 003C                  		addq.w	#1,$3C(a0)
0001BCFA 6700                       		beq.s	loc_18544
0001BCFC 6A00                       		bpl.s	loc_1854E
0001BCFE 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001BD04 6400                       		bcc.s	loc_18544
0001BD06 0668 0018 0012             		addi.w	#$18,$12(a0)
0001BD0C 6000                       		bra.s	loc_1857A
0001BD0E                            ; ===========================================================================
0001BD0E                            
0001BD0E                            loc_18544:
0001BD0E 4268 0012                  		clr.w	$12(a0)
0001BD12 4268 003C                  		clr.w	$3C(a0)
0001BD16 6000                       		bra.s	loc_1857A
0001BD18                            ; ===========================================================================
0001BD18                            
0001BD18                            loc_1854E:
0001BD18 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001BD1E 6500                       		bcs.s	loc_18566
0001BD20 6700                       		beq.s	loc_1856C
0001BD22 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001BD28 6500                       		bcs.s	loc_1857A
0001BD2A 5428 0025                  		addq.b	#2,$25(a0)
0001BD2E 6000                       		bra.s	loc_1857A
0001BD30                            ; ===========================================================================
0001BD30                            
0001BD30                            loc_18566:
0001BD30 5168 0012                  		subq.w	#8,$12(a0)
0001BD34 6000                       		bra.s	loc_1857A
0001BD36                            ; ===========================================================================
0001BD36                            
0001BD36                            loc_1856C:
0001BD36 4268 0012                  		clr.w	$12(a0)
0001BD3A 303C 0083                  		move.w	#$83,d0
0001BD3E 4EB9 0000 19E4             		jsr	(PlaySound).l	; play MZ music
0001BD44                            
0001BD44                            loc_1857A:
0001BD44 6100 F336                  		bsr.w	BossMove
0001BD48 6000 FDC0                  		bra.w	loc_1833E
0001BD4C                            ; ===========================================================================
0001BD4C                            
0001BD4C                            loc_18582:				; XREF: Obj73_ShipIndex
0001BD4C 317C 0500 0010             		move.w	#$500,$10(a0)
0001BD52 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001BD58 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001BD5E 6400                       		bcc.s	loc_1859C
0001BD60 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001BD64 6000                       		bra.s	loc_185A2
0001BD66                            ; ===========================================================================
0001BD66                            
0001BD66                            loc_1859C:
0001BD66 4A28 0001                  		tst.b	1(a0)
0001BD6A 6A00                       		bpl.s	Obj73_ShipDel
0001BD6C                            
0001BD6C                            loc_185A2:
0001BD6C 6100 F30E                  		bsr.w	BossMove
0001BD70 6000 FD98                  		bra.w	loc_1833E
0001BD74                            ; ===========================================================================
0001BD74                            
0001BD74                            Obj73_ShipDel:
0001BD74 4EF9 0001 053E             		jmp	DeleteObject
0001BD7A                            ; ===========================================================================
0001BD7A                            
0001BD7A                            Obj73_FaceMain:				; XREF: Obj73_Index
0001BD7A 7000                       		moveq	#0,d0
0001BD7C 7201                       		moveq	#1,d1
0001BD7E 2268 0034                  		movea.l	$34(a0),a1
0001BD82 1029 0025                  		move.b	$25(a1),d0
0001BD86 5540                       		subq.w	#2,d0
0001BD88 6600                       		bne.s	loc_185D2
0001BD8A 0829 0001 0028             		btst	#1,$28(a1)
0001BD90 6700                       		beq.s	loc_185DA
0001BD92 4A69 0012                  		tst.w	$12(a1)
0001BD96 6600                       		bne.s	loc_185DA
0001BD98 7204                       		moveq	#4,d1
0001BD9A 6000                       		bra.s	loc_185EE
0001BD9C                            ; ===========================================================================
0001BD9C                            
0001BD9C                            loc_185D2:
0001BD9C 5500                       		subq.b	#2,d0
0001BD9E 6B00                       		bmi.s	loc_185DA
0001BDA0 720A                       		moveq	#$A,d1
0001BDA2 6000                       		bra.s	loc_185EE
0001BDA4                            ; ===========================================================================
0001BDA4                            
0001BDA4                            loc_185DA:
0001BDA4 4A29 0020                  		tst.b	$20(a1)
0001BDA8 6600                       		bne.s	loc_185E4
0001BDAA 7205                       		moveq	#5,d1
0001BDAC 6000                       		bra.s	loc_185EE
0001BDAE                            ; ===========================================================================
0001BDAE                            
0001BDAE                            loc_185E4:
0001BDAE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001BDB4 6500                       		bcs.s	loc_185EE
0001BDB6 7204                       		moveq	#4,d1
0001BDB8                            
0001BDB8                            loc_185EE:
0001BDB8 1141 001C                  		move.b	d1,$1C(a0)
0001BDBC 5900                       		subq.b	#4,d0
0001BDBE 6600                       		bne.s	loc_18602
0001BDC0 117C 0006 001C             		move.b	#6,$1C(a0)
0001BDC6 4A28 0001                  		tst.b	1(a0)
0001BDCA 6A00                       		bpl.s	Obj73_FaceDel
0001BDCC                            
0001BDCC                            loc_18602:
0001BDCC 6000                       		bra.s	Obj73_Display
0001BDCE                            ; ===========================================================================
0001BDCE                            
0001BDCE                            Obj73_FaceDel:
0001BDCE 4EF9 0001 053E             		jmp	DeleteObject
0001BDD4                            ; ===========================================================================
0001BDD4                            
0001BDD4                            Obj73_FlameMain:			; XREF: Obj73_Index
0001BDD4 117C 0007 001C             		move.b	#7,$1C(a0)
0001BDDA 2268 0034                  		movea.l	$34(a0),a1
0001BDDE 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001BDE4 6D00                       		blt.s	loc_1862A
0001BDE6 117C 000B 001C             		move.b	#$B,$1C(a0)
0001BDEC 4A28 0001                  		tst.b	1(a0)
0001BDF0 6A00                       		bpl.s	Obj73_FlameDel
0001BDF2 6000                       		bra.s	loc_18636
0001BDF4                            ; ===========================================================================
0001BDF4                            
0001BDF4                            loc_1862A:
0001BDF4 4A69 0010                  		tst.w	$10(a1)
0001BDF8 6700                       		beq.s	loc_18636
0001BDFA 117C 0008 001C             		move.b	#8,$1C(a0)
0001BE00                            
0001BE00                            loc_18636:
0001BE00 6000                       		bra.s	Obj73_Display
0001BE02                            ; ===========================================================================
0001BE02                            
0001BE02                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001BE02 4EF9 0001 053E             		jmp	DeleteObject
0001BE08                            ; ===========================================================================
0001BE08                            
0001BE08                            Obj73_Display:
0001BE08 43F9 0001 B48C             		lea	(Ani_Eggman).l,a1
0001BE0E 4EB9 0000 D0AC             		jsr	AnimateSprite
0001BE14                            
0001BE14                            loc_1864A:
0001BE14 2268 0034                  		movea.l	$34(a0),a1
0001BE18 3169 0008 0008             		move.w	8(a1),8(a0)
0001BE1E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BE24 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001BE2A 7003                       		moveq	#3,d0
0001BE2C C028 0022                  		and.b	$22(a0),d0
0001BE30 0228 00FC 0001             		andi.b	#-4,1(a0)
0001BE36 8128 0001                  		or.b	d0,1(a0)
0001BE3A 4EF9 0001 0502             		jmp	DisplaySprite
0001BE40                            ; ===========================================================================
0001BE40                            
0001BE40                            Obj73_TubeMain:				; XREF: Obj73_Index
0001BE40 2268 0034                  		movea.l	$34(a0),a1
0001BE44 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001BE4A 6600                       		bne.s	loc_18688
0001BE4C 4A28 0001                  		tst.b	1(a0)
0001BE50 6A00                       		bpl.s	Obj73_TubeDel
0001BE52                            
0001BE52                            loc_18688:
0001BE52 217C 0001 B5A4 0004        		move.l	#Map_BossItems,4(a0)
0001BE5A 317C 246C 0002             		move.w	#$246C,2(a0)
0001BE60 117C 0004 001A             		move.b	#4,$1A(a0)
0001BE66 60AC                       		bra.s	loc_1864A
0001BE68                            ; ===========================================================================
0001BE68                            
0001BE68                            Obj73_TubeDel:
0001BE68 4EF9 0001 053E             		jmp	DeleteObject
0001BE6E                            ; ===========================================================================
0001BE6E                            ; ---------------------------------------------------------------------------
0001BE6E                            ; Object 74 - lava that	Eggman drops (MZ)
0001BE6E                            ; ---------------------------------------------------------------------------
0001BE6E                            
0001BE6E                            Obj74:					; XREF: Obj_Index
0001BE6E 7000                       		moveq	#0,d0
0001BE70 1028 0024                  		move.b	$24(a0),d0
0001BE74 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001BE78 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001BE7C 4EF9 0001 0502             		jmp	DisplaySprite
0001BE82                            ; ===========================================================================
0001BE82 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001BE84 0000                       		dc.w Obj74_Action-Obj74_Index
0001BE86 0000                       		dc.w loc_18886-Obj74_Index
0001BE88 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001BE8A                            ; ===========================================================================
0001BE8A                            
0001BE8A                            Obj74_Main:				; XREF: Obj74_Index
0001BE8A 117C 0008 0016             		move.b	#8,$16(a0)
0001BE90 117C 0008 0017             		move.b	#8,$17(a0)
0001BE96 217C 0000 E0F2 0004        		move.l	#Map_obj14,4(a0)
0001BE9E 317C 0345 0002             		move.w	#$345,2(a0)
0001BEA4 117C 0004 0001             		move.b	#4,1(a0)
0001BEAA 117C 0005 0018             		move.b	#5,$18(a0)
0001BEB0 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BEB6 117C 0008 0019             		move.b	#8,$19(a0)
0001BEBC 5428 0024                  		addq.b	#2,$24(a0)
0001BEC0 4A28 0028                  		tst.b	$28(a0)
0001BEC4 6600                       		bne.s	loc_1870A
0001BEC6 117C 008B 0020             		move.b	#$8B,$20(a0)
0001BECC 5428 0024                  		addq.b	#2,$24(a0)
0001BED0 6000 0000                  		bra.w	loc_18886
0001BED4                            ; ===========================================================================
0001BED4                            
0001BED4                            loc_1870A:
0001BED4 117C 001E 0029             		move.b	#$1E,$29(a0)
0001BEDA 303C 00AE                  		move.w	#$AE,d0
0001BEDE 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play lava sound
0001BEE4                            
0001BEE4                            Obj74_Action:				; XREF: Obj74_Index
0001BEE4 7000                       		moveq	#0,d0
0001BEE6 1028 0025                  		move.b	$25(a0),d0
0001BEEA 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001BEEE 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001BEF2 4EB9 0001 04DC             		jsr	SpeedToPos
0001BEF8 43F9 0001 13BC             		lea	(Ani_obj14).l,a1
0001BEFE 4EB9 0000 D0AC             		jsr	AnimateSprite
0001BF04 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001BF0A 6200                       		bhi.s	Obj74_Delete
0001BF0C 4E75                       		rts	
0001BF0E                            ; ===========================================================================
0001BF0E                            
0001BF0E                            Obj74_Delete:
0001BF0E 4EF9 0001 053E             		jmp	DeleteObject
0001BF14                            ; ===========================================================================
0001BF14 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001BF16 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001BF18 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001BF1A 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001BF1C                            ; ===========================================================================
0001BF1C                            
0001BF1C                            Obj74_Drop:				; XREF: Obj74_Index2
0001BF1C 08E8 0001 0022             		bset	#1,$22(a0)
0001BF22 5328 0029                  		subq.b	#1,$29(a0)
0001BF26 6A00                       		bpl.s	locret_18780
0001BF28 117C 008B 0020             		move.b	#$8B,$20(a0)
0001BF2E 4228 0028                  		clr.b	$28(a0)
0001BF32 0668 0018 0012             		addi.w	#$18,$12(a0)
0001BF38 08A8 0001 0022             		bclr	#1,$22(a0)
0001BF3E 6100 C4C8                  		bsr.w	ObjHitFloor
0001BF42 4A41                       		tst.w	d1
0001BF44 6A00                       		bpl.s	locret_18780
0001BF46 5428 0025                  		addq.b	#2,$25(a0)
0001BF4A                            
0001BF4A                            locret_18780:
0001BF4A 4E75                       		rts	
0001BF4C                            ; ===========================================================================
0001BF4C                            
0001BF4C                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001BF4C 5568 000C                  		subq.w	#2,$C(a0)
0001BF50 08E8 0007 0002             		bset	#7,2(a0)
0001BF56 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001BF5C 4268 0012                  		clr.w	$12(a0)
0001BF60 3168 0008 0030             		move.w	8(a0),$30(a0)
0001BF66 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BF6C 117C 0003 0029             		move.b	#3,$29(a0)
0001BF72 4EB9 0001 099E             		jsr	SingleObjLoad2
0001BF78 6600                       		bne.s	loc_187CA
0001BF7A 47D1                       		lea	(a1),a3
0001BF7C 45D0                       		lea	(a0),a2
0001BF7E 7003                       		moveq	#3,d0
0001BF80                            
0001BF80                            Obj74_Loop:
0001BF80 26DA                       		move.l	(a2)+,(a3)+
0001BF82 26DA                       		move.l	(a2)+,(a3)+
0001BF84 26DA                       		move.l	(a2)+,(a3)+
0001BF86 26DA                       		move.l	(a2)+,(a3)+
0001BF88 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001BF8C                            
0001BF8C 4469 0010                  		neg.w	$10(a1)
0001BF90 5429 0025                  		addq.b	#2,$25(a1)
0001BF94                            
0001BF94                            loc_187CA:
0001BF94 5428 0025                  		addq.b	#2,$25(a0)
0001BF98 4E75                       		rts	
0001BF9A                            
0001BF9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF9A                            
0001BF9A                            
0001BF9A                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001BF9A 4EB9 0001 099E             		jsr	SingleObjLoad2
0001BFA0 6600                       		bne.s	locret_187EE
0001BFA2 3368 0008 0008             		move.w	8(a0),8(a1)
0001BFA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BFAE 12BC 0074                  		move.b	#$74,(a1)
0001BFB2 337C 0067 0028             		move.w	#$67,$28(a1)
0001BFB8                            
0001BFB8                            locret_187EE:
0001BFB8 4E75                       		rts	
0001BFBA                            ; End of function Obj74_Duplicate2
0001BFBA                            
0001BFBA                            ; ===========================================================================
0001BFBA                            
0001BFBA                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001BFBA 6100 C44C                  		bsr.w	ObjHitFloor
0001BFBE 4A41                       		tst.w	d1
0001BFC0 6A00                       		bpl.s	loc_18826
0001BFC2 3028 0008                  		move.w	8(a0),d0
0001BFC6 0C40 1940                  		cmpi.w	#$1940,d0
0001BFCA 6E00                       		bgt.s	loc_1882C
0001BFCC 3228 0030                  		move.w	$30(a0),d1
0001BFD0 B240                       		cmp.w	d0,d1
0001BFD2 6700                       		beq.s	loc_1881E
0001BFD4 0240 0010                  		andi.w	#$10,d0
0001BFD8 0241 0010                  		andi.w	#$10,d1
0001BFDC B240                       		cmp.w	d0,d1
0001BFDE 6700                       		beq.s	loc_1881E
0001BFE0 61B8                       		bsr.s	Obj74_Duplicate2
0001BFE2 3168 0008 0032             		move.w	8(a0),$32(a0)
0001BFE8                            
0001BFE8                            loc_1881E:
0001BFE8 3168 0008 0030             		move.w	8(a0),$30(a0)
0001BFEE 4E75                       		rts	
0001BFF0                            ; ===========================================================================
0001BFF0                            
0001BFF0                            loc_18826:
0001BFF0 5428 0025                  		addq.b	#2,$25(a0)
0001BFF4 4E75                       		rts	
0001BFF6                            ; ===========================================================================
0001BFF6                            
0001BFF6                            loc_1882C:
0001BFF6 5428 0024                  		addq.b	#2,$24(a0)
0001BFFA 4E75                       		rts	
0001BFFC                            ; ===========================================================================
0001BFFC                            
0001BFFC                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001BFFC 08A8 0001 0022             		bclr	#1,$22(a0)
0001C002 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001C008 3028 0008                  		move.w	8(a0),d0
0001C00C 9068 0032                  		sub.w	$32(a0),d0
0001C010 6A00                       		bpl.s	loc_1884A
0001C012 4440                       		neg.w	d0
0001C014                            
0001C014                            loc_1884A:
0001C014 0C40 0012                  		cmpi.w	#$12,d0
0001C018 6600                       		bne.s	loc_18856
0001C01A 08A8 0007 0002             		bclr	#7,2(a0)
0001C020                            
0001C020                            loc_18856:
0001C020 6100 C3E6                  		bsr.w	ObjHitFloor
0001C024 4A41                       		tst.w	d1
0001C026 6A00                       		bpl.s	locret_1887E
0001C028 5328 0029                  		subq.b	#1,$29(a0)
0001C02C 6700                       		beq.s	Obj74_Delete2
0001C02E 4268 0012                  		clr.w	$12(a0)
0001C032 3168 0032 0008             		move.w	$32(a0),8(a0)
0001C038 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001C03E 08E8 0007 0002             		bset	#7,2(a0)
0001C044 5528 0025                  		subq.b	#2,$25(a0)
0001C048                            
0001C048                            locret_1887E:
0001C048 4E75                       		rts	
0001C04A                            ; ===========================================================================
0001C04A                            
0001C04A                            Obj74_Delete2:
0001C04A 4EF9 0001 053E             		jmp	DeleteObject
0001C050                            ; ===========================================================================
0001C050                            
0001C050                            loc_18886:				; XREF: Obj74_Index
0001C050 08E8 0007 0002             		bset	#7,2(a0)
0001C056 5328 0029                  		subq.b	#1,$29(a0)
0001C05A 6600                       		bne.s	Obj74_Animate
0001C05C 117C 0001 001C             		move.b	#1,$1C(a0)
0001C062 5968 000C                  		subq.w	#4,$C(a0)
0001C066 4228 0020                  		clr.b	$20(a0)
0001C06A                            
0001C06A                            Obj74_Animate:
0001C06A 43F9 0001 13BC             		lea	(Ani_obj14).l,a1
0001C070 4EF9 0000 D0AC             		jmp	AnimateSprite
0001C076                            ; ===========================================================================
0001C076                            
0001C076                            Obj74_Delete3:				; XREF: Obj74_Index
0001C076 4EF9 0001 053E             		jmp	DeleteObject
0001C07C                            ; ===========================================================================
0001C07C                            
0001C07C                            Obj7A_Delete:
0001C07C 4EF9 0001 053E             		jmp	DeleteObject
0001C082                            ; ===========================================================================
0001C082                            ; ---------------------------------------------------------------------------
0001C082                            ; Object 7A - Eggman (SLZ)
0001C082                            ; ---------------------------------------------------------------------------
0001C082                            
0001C082                            Obj7A:					; XREF: Obj_Index
0001C082 7000                       		moveq	#0,d0
0001C084 1028 0024                  		move.b	$24(a0),d0
0001C088 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001C08C 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001C090                            ; ===========================================================================
0001C090 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001C092 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001C094 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001C096 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001C098 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001C09A                            
0001C09A 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001C09D 0401 04                    		dc.b 4,	1, 4
0001C0A0 0607 04                    		dc.b 6,	7, 4
0001C0A3 0800 03                    		dc.b 8,	0, 3
0001C0A6                            ; ===========================================================================
0001C0A6                            
0001C0A6                            Obj7A_Main:				; XREF: Obj7A_Index
0001C0A6 317C 2188 0008             		move.w	#$2188,8(a0)
0001C0AC 317C 0228 000C             		move.w	#$228,$C(a0)
0001C0B2 3168 0008 0030             		move.w	8(a0),$30(a0)
0001C0B8 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001C0BE 117C 000F 0020             		move.b	#$F,$20(a0)
0001C0C4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001C0CA 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001C0CE 2248                       		movea.l	a0,a1
0001C0D0 7203                       		moveq	#3,d1
0001C0D2 6000                       		bra.s	Obj7A_LoadBoss
0001C0D4                            ; ===========================================================================
0001C0D4                            
0001C0D4                            Obj7A_Loop:
0001C0D4 4EB9 0001 099E             		jsr	SingleObjLoad2
0001C0DA 6600                       		bne.s	loc_1895C
0001C0DC 12BC 007A                  		move.b	#$7A,0(a1)
0001C0E0 3368 0008 0008             		move.w	8(a0),8(a1)
0001C0E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C0EC                            
0001C0EC                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001C0EC 08A8 0000 0022             		bclr	#0,$22(a0)
0001C0F2 4229 0025                  		clr.b	$25(a1)
0001C0F6 135A 0024                  		move.b	(a2)+,$24(a1)
0001C0FA 135A 001C                  		move.b	(a2)+,$1C(a1)
0001C0FE 135A 0018                  		move.b	(a2)+,$18(a1)
0001C102 237C 0001 B4DC 0004        		move.l	#Map_Eggman,4(a1)
0001C10A 337C 0400 0002             		move.w	#$400,2(a1)
0001C110 137C 0004 0001             		move.b	#4,1(a1)
0001C116 137C 0020 0019             		move.b	#$20,$19(a1)
0001C11C 2348 0034                  		move.l	a0,$34(a1)
0001C120 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001C124                            
0001C124                            loc_1895C:
0001C124 43F8 D040                  		lea	($FFFFD040).w,a1
0001C128 45E8 002A                  		lea	$2A(a0),a2
0001C12C 705E                       		moveq	#$5E,d0
0001C12E 723E                       		moveq	#$3E,d1
0001C130                            
0001C130                            loc_18968:
0001C130 B011                       		cmp.b	(a1),d0
0001C132 6600                       		bne.s	loc_18974
0001C134 4A29 0028                  		tst.b	$28(a1)
0001C138 6700                       		beq.s	loc_18974
0001C13A 34C9                       		move.w	a1,(a2)+
0001C13C                            
0001C13C                            loc_18974:
0001C13C D2FC 0040                  		adda.w	#$40,a1
0001C140 51C9 FFEE                  		dbf	d1,loc_18968
0001C144                            
0001C144                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001C144 7000                       		moveq	#0,d0
0001C146 1028 0025                  		move.b	$25(a0),d0
0001C14A 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001C14E 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001C152 43F9 0001 B48C             		lea	(Ani_Eggman).l,a1
0001C158 4EB9 0000 D0AC             		jsr	AnimateSprite
0001C15E 7003                       		moveq	#3,d0
0001C160 C028 0022                  		and.b	$22(a0),d0
0001C164 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001C16A 8128 0001                  		or.b	d0,1(a0)
0001C16E 4EF9 0001 0502             		jmp	DisplaySprite
0001C174                            ; ===========================================================================
0001C174 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001C176 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001C178 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001C17A 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001C17C 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001C17E 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001C180                            ; ===========================================================================
0001C180                            
0001C180                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001C180 317C FF00 0010             		move.w	#-$100,$10(a0)
0001C186 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001C18C 6400                       		bcc.s	loc_189CA
0001C18E 5428 0025                  		addq.b	#2,$25(a0)
0001C192                            
0001C192                            loc_189CA:
0001C192 6100 EEE8                  		bsr.w	BossMove
0001C196 1028 003F                  		move.b	$3F(a0),d0
0001C19A 5428 003F                  		addq.b	#2,$3F(a0)
0001C19E 4EB9 0000 3798             		jsr	(CalcSine).l
0001C1A4 EC40                       		asr.w	#6,d0
0001C1A6 D068 0038                  		add.w	$38(a0),d0
0001C1AA 3140 000C                  		move.w	d0,$C(a0)
0001C1AE 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C1B4 6000                       		bra.s	loc_189FE
0001C1B6                            ; ===========================================================================
0001C1B6                            
0001C1B6                            loc_189EE:
0001C1B6 6100 EEC4                  		bsr.w	BossMove
0001C1BA 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001C1C0 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C1C6                            
0001C1C6                            loc_189FE:
0001C1C6 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001C1CC 6400                       		bcc.s	locret_18A44
0001C1CE 4A28 0022                  		tst.b	$22(a0)
0001C1D2 6B00                       		bmi.s	loc_18A46
0001C1D4 4A28 0020                  		tst.b	$20(a0)
0001C1D8 6600                       		bne.s	locret_18A44
0001C1DA 4A28 003E                  		tst.b	$3E(a0)
0001C1DE 6600                       		bne.s	loc_18A28
0001C1E0 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C1E6 303C 00AC                  		move.w	#$AC,d0
0001C1EA 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C1F0                            
0001C1F0                            loc_18A28:
0001C1F0 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001C1F4 7000                       		moveq	#0,d0
0001C1F6 4A51                       		tst.w	(a1)
0001C1F8 6600                       		bne.s	loc_18A36
0001C1FA 303C 0EEE                  		move.w	#$EEE,d0
0001C1FE                            
0001C1FE                            loc_18A36:
0001C1FE 3280                       		move.w	d0,(a1)
0001C200 5328 003E                  		subq.b	#1,$3E(a0)
0001C204 6600                       		bne.s	locret_18A44
0001C206 117C 000F 0020             		move.b	#$F,$20(a0)
0001C20C                            
0001C20C                            locret_18A44:
0001C20C 4E75                       		rts	
0001C20E                            ; ===========================================================================
0001C20E                            
0001C20E                            loc_18A46:
0001C20E 7064                       		moveq	#100,d0
0001C210 6100 0000                  		bsr.w	AddPoints
0001C214 117C 0006 0025             		move.b	#6,$25(a0)
0001C21A 117C 0078 003C             		move.b	#$78,$3C(a0)
0001C220 4268 0010                  		clr.w	$10(a0)
0001C224 4E75                       		rts	
0001C226                            ; ===========================================================================
0001C226                            
0001C226                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001C226 3028 0030                  		move.w	$30(a0),d0
0001C22A 317C 0200 0010             		move.w	#$200,$10(a0)
0001C230 0828 0000 0022             		btst	#0,$22(a0)
0001C236 6600                       		bne.s	loc_18A7C
0001C238 4468 0010                  		neg.w	$10(a0)
0001C23C 0C40 2008                  		cmpi.w	#$2008,d0
0001C240 6E00                       		bgt.s	loc_18A88
0001C242 6000                       		bra.s	loc_18A82
0001C244                            ; ===========================================================================
0001C244                            
0001C244                            loc_18A7C:
0001C244 0C40 2138                  		cmpi.w	#$2138,d0
0001C248 6D00                       		blt.s	loc_18A88
0001C24A                            
0001C24A                            loc_18A82:
0001C24A 0868 0000 0022             		bchg	#0,$22(a0)
0001C250                            
0001C250                            loc_18A88:
0001C250 3028 0008                  		move.w	8(a0),d0
0001C254 72FF                       		moveq	#-1,d1
0001C256 7402                       		moveq	#2,d2
0001C258 45E8 002A                  		lea	$2A(a0),a2
0001C25C 7828                       		moveq	#$28,d4
0001C25E 4A68 0010                  		tst.w	$10(a0)
0001C262 6A00                       		bpl.s	loc_18A9E
0001C264 4444                       		neg.w	d4
0001C266                            
0001C266                            loc_18A9E:
0001C266 321A                       		move.w	(a2)+,d1
0001C268 2641                       		movea.l	d1,a3
0001C26A 082B 0003 0022             		btst	#3,$22(a3)
0001C270 6600                       		bne.s	loc_18AB4
0001C272 362B 0008                  		move.w	8(a3),d3
0001C276 D644                       		add.w	d4,d3
0001C278 9640                       		sub.w	d0,d3
0001C27A 6700                       		beq.s	loc_18AC0
0001C27C                            
0001C27C                            loc_18AB4:
0001C27C 51CA FFE8                  		dbf	d2,loc_18A9E
0001C280                            
0001C280 1142 0028                  		move.b	d2,$28(a0)
0001C284 6000 FF0C                  		bra.w	loc_189CA
0001C288                            ; ===========================================================================
0001C288                            
0001C288                            loc_18AC0:
0001C288 1142 0028                  		move.b	d2,$28(a0)
0001C28C 5428 0025                  		addq.b	#2,$25(a0)
0001C290 117C 0028 003C             		move.b	#$28,$3C(a0)
0001C296 6000 FEFA                  		bra.w	loc_189CA
0001C29A                            ; ===========================================================================
0001C29A                            
0001C29A                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001C29A 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001C2A0 6600                       		bne.s	loc_18B36
0001C2A2 70FF                       		moveq	#-1,d0
0001C2A4 1028 0028                  		move.b	$28(a0),d0
0001C2A8 4880                       		ext.w	d0
0001C2AA 6B00                       		bmi.s	loc_18B40
0001C2AC 5540                       		subq.w	#2,d0
0001C2AE 4440                       		neg.w	d0
0001C2B0 D040                       		add.w	d0,d0
0001C2B2 43E8 002A                  		lea	$2A(a0),a1
0001C2B6 3031 0000                  		move.w	(a1,d0.w),d0
0001C2BA 2440                       		movea.l	d0,a2
0001C2BC 43F8 D040                  		lea	($FFFFD040).w,a1
0001C2C0 723E                       		moveq	#$3E,d1
0001C2C2                            
0001C2C2                            loc_18AFA:
0001C2C2 B0A9 003C                  		cmp.l	$3C(a1),d0
0001C2C6 6700                       		beq.s	loc_18B40
0001C2C8 D2FC 0040                  		adda.w	#$40,a1
0001C2CC 51C9 FFF4                  		dbf	d1,loc_18AFA
0001C2D0                            
0001C2D0 2F08                       		move.l	a0,-(sp)
0001C2D2 41D2                       		lea	(a2),a0
0001C2D4 4EB9 0001 099E             		jsr	SingleObjLoad2
0001C2DA 205F                       		movea.l	(sp)+,a0
0001C2DC 6600                       		bne.s	loc_18B40
0001C2DE 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001C2E2 3368 0008 0008             		move.w	8(a0),8(a1)
0001C2E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C2EE 0669 0020 000C             		addi.w	#$20,$C(a1)
0001C2F4 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001C2FA 234A 003C                  		move.l	a2,$3C(a1)
0001C2FE                            
0001C2FE                            loc_18B36:
0001C2FE 5328 003C                  		subq.b	#1,$3C(a0)
0001C302 6700                       		beq.s	loc_18B40
0001C304 6000 FEC0                  		bra.w	loc_189FE
0001C308                            ; ===========================================================================
0001C308                            
0001C308                            loc_18B40:
0001C308 5528 0025                  		subq.b	#2,$25(a0)
0001C30C 6000 FE84                  		bra.w	loc_189CA
0001C310                            ; ===========================================================================
0001C310                            
0001C310                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001C310 5328 003C                  		subq.b	#1,$3C(a0)
0001C314 6B00                       		bmi.s	loc_18B52
0001C316 6000 ED22                  		bra.w	BossDefeated
0001C31A                            ; ===========================================================================
0001C31A                            
0001C31A                            loc_18B52:
0001C31A 5428 0025                  		addq.b	#2,$25(a0)
0001C31E 4268 0012                  		clr.w	$12(a0)
0001C322 08E8 0000 0022             		bset	#0,$22(a0)
0001C328 08A8 0007 0022             		bclr	#7,$22(a0)
0001C32E 4268 0010                  		clr.w	$10(a0)
0001C332 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001C338 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001C33C 6600                       		bne.s	loc_18B7C
0001C33E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001C344                            
0001C344                            loc_18B7C:
0001C344 6000 FE80                  		bra.w	loc_189FE
0001C348                            ; ===========================================================================
0001C348                            
0001C348                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001C348 5228 003C                  		addq.b	#1,$3C(a0)
0001C34C 6700                       		beq.s	loc_18B90
0001C34E 6A00                       		bpl.s	loc_18B96
0001C350 0668 0018 0012             		addi.w	#$18,$12(a0)
0001C356 6000                       		bra.s	loc_18BC2
0001C358                            ; ===========================================================================
0001C358                            
0001C358                            loc_18B90:
0001C358 4268 0012                  		clr.w	$12(a0)
0001C35C 6000                       		bra.s	loc_18BC2
0001C35E                            ; ===========================================================================
0001C35E                            
0001C35E                            loc_18B96:
0001C35E 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001C364 6500                       		bcs.s	loc_18BAE
0001C366 6700                       		beq.s	loc_18BB4
0001C368 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001C36E 6500                       		bcs.s	loc_18BC2
0001C370 5428 0025                  		addq.b	#2,$25(a0)
0001C374 6000                       		bra.s	loc_18BC2
0001C376                            ; ===========================================================================
0001C376                            
0001C376                            loc_18BAE:
0001C376 5168 0012                  		subq.w	#8,$12(a0)
0001C37A 6000                       		bra.s	loc_18BC2
0001C37C                            ; ===========================================================================
0001C37C                            
0001C37C                            loc_18BB4:
0001C37C 4268 0012                  		clr.w	$12(a0)
0001C380 303C 0084                  		move.w	#$84,d0
0001C384 4EB9 0000 19E4             		jsr	(PlaySound).l	; play SLZ music
0001C38A                            
0001C38A                            loc_18BC2:
0001C38A 6000 FE2A                  		bra.w	loc_189EE
0001C38E                            ; ===========================================================================
0001C38E                            
0001C38E                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001C38E 317C 0400 0010             		move.w	#$400,$10(a0)
0001C394 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001C39A 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001C3A0 6400                       		bcc.s	loc_18BE0
0001C3A2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001C3A6 6000                       		bra.s	loc_18BE8
0001C3A8                            ; ===========================================================================
0001C3A8                            
0001C3A8                            loc_18BE0:
0001C3A8 4A28 0001                  		tst.b	1(a0)
0001C3AC 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001C3B0                            
0001C3B0                            loc_18BE8:
0001C3B0 6100 ECCA                  		bsr.w	BossMove
0001C3B4 6000 FDDC                  		bra.w	loc_189CA
0001C3B8                            ; ===========================================================================
0001C3B8                            
0001C3B8                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001C3B8 7000                       		moveq	#0,d0
0001C3BA 7201                       		moveq	#1,d1
0001C3BC 2268 0034                  		movea.l	$34(a0),a1
0001C3C0 1029 0025                  		move.b	$25(a1),d0
0001C3C4 0C00 0006                  		cmpi.b	#6,d0
0001C3C8 6B00                       		bmi.s	loc_18C06
0001C3CA 720A                       		moveq	#$A,d1
0001C3CC 6000                       		bra.s	loc_18C1A
0001C3CE                            ; ===========================================================================
0001C3CE                            
0001C3CE                            loc_18C06:
0001C3CE 4A29 0020                  		tst.b	$20(a1)
0001C3D2 6600                       		bne.s	loc_18C10
0001C3D4 7205                       		moveq	#5,d1
0001C3D6 6000                       		bra.s	loc_18C1A
0001C3D8                            ; ===========================================================================
0001C3D8                            
0001C3D8                            loc_18C10:
0001C3D8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001C3DE 6500                       		bcs.s	loc_18C1A
0001C3E0 7204                       		moveq	#4,d1
0001C3E2                            
0001C3E2                            loc_18C1A:
0001C3E2 1141 001C                  		move.b	d1,$1C(a0)
0001C3E6 0C00 000A                  		cmpi.b	#$A,d0
0001C3EA 6600                       		bne.s	loc_18C32
0001C3EC 117C 0006 001C             		move.b	#6,$1C(a0)
0001C3F2 4A28 0001                  		tst.b	1(a0)
0001C3F6 6A00 FC84                  		bpl.w	Obj7A_Delete
0001C3FA                            
0001C3FA                            loc_18C32:
0001C3FA 6000                       		bra.s	loc_18C6C
0001C3FC                            ; ===========================================================================
0001C3FC                            
0001C3FC                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001C3FC 117C 0008 001C             		move.b	#8,$1C(a0)
0001C402 2268 0034                  		movea.l	$34(a0),a1
0001C406 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001C40C 6600                       		bne.s	loc_18C56
0001C40E 4A28 0001                  		tst.b	1(a0)
0001C412 6A00 FC68                  		bpl.w	Obj7A_Delete
0001C416 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C41C 6000                       		bra.s	loc_18C6C
0001C41E                            ; ===========================================================================
0001C41E                            
0001C41E                            loc_18C56:
0001C41E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001C424 6E00                       		bgt.s	loc_18C6C
0001C426 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001C42C 6D00                       		blt.s	loc_18C6C
0001C42E 117C 0007 001C             		move.b	#7,$1C(a0)
0001C434                            
0001C434                            loc_18C6C:
0001C434 43F9 0001 B48C             		lea	(Ani_Eggman).l,a1
0001C43A 4EB9 0000 D0AC             		jsr	AnimateSprite
0001C440                            
0001C440                            loc_18C78:
0001C440 2268 0034                  		movea.l	$34(a0),a1
0001C444 3169 0008 0008             		move.w	8(a1),8(a0)
0001C44A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C450 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C456 7003                       		moveq	#3,d0
0001C458 C028 0022                  		and.b	$22(a0),d0
0001C45C 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C462 8128 0001                  		or.b	d0,1(a0)
0001C466 4EF9 0001 0502             		jmp	DisplaySprite
0001C46C                            ; ===========================================================================
0001C46C                            
0001C46C                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001C46C 2268 0034                  		movea.l	$34(a0),a1
0001C470 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001C476 6600                       		bne.s	loc_18CB8
0001C478 4A28 0001                  		tst.b	1(a0)
0001C47C 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001C480                            
0001C480                            loc_18CB8:
0001C480 217C 0001 B5A4 0004        		move.l	#Map_BossItems,4(a0)
0001C488 317C 246C 0002             		move.w	#$246C,2(a0)
0001C48E 117C 0003 001A             		move.b	#3,$1A(a0)
0001C494 60AA                       		bra.s	loc_18C78
0001C496                            ; ===========================================================================
0001C496                            ; ---------------------------------------------------------------------------
0001C496                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001C496                            ; ---------------------------------------------------------------------------
0001C496                            
0001C496                            Obj7B:					; XREF: Obj_Index
0001C496 7000                       		moveq	#0,d0
0001C498 1028 0024                  		move.b	$24(a0),d0
0001C49C 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001C4A0 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001C4A4 3028 0030                  		move.w	$30(a0),d0
0001C4A8 0240 FF80                  		andi.w	#$FF80,d0
0001C4AC 3238 F700                  		move.w	($FFFFF700).w,d1
0001C4B0 0441 0080                  		subi.w	#$80,d1
0001C4B4 0241 FF80                  		andi.w	#$FF80,d1
0001C4B8 9041                       		sub.w	d1,d0
0001C4BA 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001C4BE 0C40 0280                  		cmpi.w	#$280,d0
0001C4C2 6200 FBB8                  		bhi.w	Obj7A_Delete
0001C4C6 4EF9 0001 0502             		jmp	DisplaySprite
0001C4CC                            ; ===========================================================================
0001C4CC 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001C4CE 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001C4D0 0000                       		dc.w loc_18DC6-Obj7B_Index
0001C4D2 0000                       		dc.w loc_18EAA-Obj7B_Index
0001C4D4 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001C4D6 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001C4D8                            ; ===========================================================================
0001C4D8                            
0001C4D8                            Obj7B_Main:				; XREF: Obj7B_Index
0001C4D8 217C 0001 49F0 0004        		move.l	#Map_obj5Ea,4(a0)
0001C4E0 317C 0518 0002             		move.w	#$518,2(a0)
0001C4E6 117C 0001 001A             		move.b	#1,$1A(a0)
0001C4EC 0028 0004 0001             		ori.b	#4,1(a0)
0001C4F2 117C 0004 0018             		move.b	#4,$18(a0)
0001C4F8 117C 008B 0020             		move.b	#$8B,$20(a0)
0001C4FE 117C 000C 0019             		move.b	#$C,$19(a0)
0001C504 2268 003C                  		movea.l	$3C(a0),a1
0001C508 3169 0008 0030             		move.w	8(a1),$30(a0)
0001C50E 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001C514 08E8 0000 0022             		bset	#0,$22(a0)
0001C51A 3028 0008                  		move.w	8(a0),d0
0001C51E B069 0008                  		cmp.w	8(a1),d0
0001C522 6E00                       		bgt.s	loc_18D68
0001C524 08A8 0000 0022             		bclr	#0,$22(a0)
0001C52A 117C 0002 003A             		move.b	#2,$3A(a0)
0001C530                            
0001C530                            loc_18D68:
0001C530 5428 0024                  		addq.b	#2,$24(a0)
0001C534                            
0001C534                            Obj7B_Fall:				; XREF: Obj7B_Index
0001C534 4EB9 0001 0484             		jsr	ObjectFall
0001C53A 2268 003C                  		movea.l	$3C(a0),a1
0001C53E 45F9 0000 0000             		lea	(word_19018).l,a2
0001C544 7000                       		moveq	#0,d0
0001C546 1029 001A                  		move.b	$1A(a1),d0
0001C54A 3228 0008                  		move.w	8(a0),d1
0001C54E 9268 0030                  		sub.w	$30(a0),d1
0001C552 6400                       		bcc.s	loc_18D8E
0001C554 5440                       		addq.w	#2,d0
0001C556                            
0001C556                            loc_18D8E:
0001C556 D040                       		add.w	d0,d0
0001C558 3228 0034                  		move.w	$34(a0),d1
0001C55C D272 0000                  		add.w	(a2,d0.w),d1
0001C560 B268 000C                  		cmp.w	$C(a0),d1
0001C564 6E00                       		bgt.s	locret_18DC4
0001C566 2268 003C                  		movea.l	$3C(a0),a1
0001C56A 7202                       		moveq	#2,d1
0001C56C 0828 0000 0022             		btst	#0,$22(a0)
0001C572 6700                       		beq.s	loc_18DAE
0001C574 7200                       		moveq	#0,d1
0001C576                            
0001C576                            loc_18DAE:
0001C576 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001C57C 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001C582 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001C588 6000 0000                  		bra.w	loc_18FA2
0001C58C                            ; ===========================================================================
0001C58C                            
0001C58C                            locret_18DC4:
0001C58C 4E75                       		rts	
0001C58E                            ; ===========================================================================
0001C58E                            
0001C58E                            loc_18DC6:				; XREF: Obj7B_Index
0001C58E 2268 003C                  		movea.l	$3C(a0),a1
0001C592 7000                       		moveq	#0,d0
0001C594 1028 003A                  		move.b	$3A(a0),d0
0001C598 9029 003A                  		sub.b	$3A(a1),d0
0001C59C 6700                       		beq.s	loc_18E2A
0001C59E 6400                       		bcc.s	loc_18DDA
0001C5A0 4400                       		neg.b	d0
0001C5A2                            
0001C5A2                            loc_18DDA:
0001C5A2 323C F7E8                  		move.w	#-$818,d1
0001C5A6 343C FEEC                  		move.w	#-$114,d2
0001C5AA 0C00 0001                  		cmpi.b	#1,d0
0001C5AE 6700                       		beq.s	loc_18E00
0001C5B0 323C F6A0                  		move.w	#-$960,d1
0001C5B4 343C FF0C                  		move.w	#-$F4,d2
0001C5B8 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001C5BE 6D00                       		blt.s	loc_18E00
0001C5C0 323C F5E0                  		move.w	#-$A20,d1
0001C5C4 343C FF80                  		move.w	#-$80,d2
0001C5C8                            
0001C5C8                            loc_18E00:
0001C5C8 3141 0012                  		move.w	d1,$12(a0)
0001C5CC 3142 0010                  		move.w	d2,$10(a0)
0001C5D0 3028 0008                  		move.w	8(a0),d0
0001C5D4 9068 0030                  		sub.w	$30(a0),d0
0001C5D8 6400                       		bcc.s	loc_18E16
0001C5DA 4468 0010                  		neg.w	$10(a0)
0001C5DE                            
0001C5DE                            loc_18E16:
0001C5DE 117C 0001 001A             		move.b	#1,$1A(a0)
0001C5E4 317C 0020 0028             		move.w	#$20,$28(a0)
0001C5EA 5428 0024                  		addq.b	#2,$24(a0)
0001C5EE 6000 0000                  		bra.w	loc_18EAA
0001C5F2                            ; ===========================================================================
0001C5F2                            
0001C5F2                            loc_18E2A:				; XREF: loc_18DC6
0001C5F2 45F9 0000 0000             		lea	(word_19018).l,a2
0001C5F8 7000                       		moveq	#0,d0
0001C5FA 1029 001A                  		move.b	$1A(a1),d0
0001C5FE 343C 0028                  		move.w	#$28,d2
0001C602 3228 0008                  		move.w	8(a0),d1
0001C606 9268 0030                  		sub.w	$30(a0),d1
0001C60A 6400                       		bcc.s	loc_18E48
0001C60C 4442                       		neg.w	d2
0001C60E 5440                       		addq.w	#2,d0
0001C610                            
0001C610                            loc_18E48:
0001C610 D040                       		add.w	d0,d0
0001C612 3228 0034                  		move.w	$34(a0),d1
0001C616 D272 0000                  		add.w	(a2,d0.w),d1
0001C61A 3141 000C                  		move.w	d1,$C(a0)
0001C61E D468 0030                  		add.w	$30(a0),d2
0001C622 3142 0008                  		move.w	d2,8(a0)
0001C626 4268 000E                  		clr.w	$E(a0)
0001C62A 4268 000A                  		clr.w	$A(a0)
0001C62E 5368 0028                  		subq.w	#1,$28(a0)
0001C632 6600                       		bne.s	loc_18E7A
0001C634 317C 0020 0028             		move.w	#$20,$28(a0)
0001C63A 117C 0008 0024             		move.b	#8,$24(a0)
0001C640 4E75                       		rts	
0001C642                            ; ===========================================================================
0001C642                            
0001C642                            loc_18E7A:
0001C642 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001C648 6600                       		bne.s	loc_18E88
0001C64A 117C 0005 001F             		move.b	#5,$1F(a0)
0001C650                            
0001C650                            loc_18E88:
0001C650 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001C656 6600                       		bne.s	loc_18E96
0001C658 117C 0002 001F             		move.b	#2,$1F(a0)
0001C65E                            
0001C65E                            loc_18E96:
0001C65E 5328 001E                  		subq.b	#1,$1E(a0)
0001C662 6E00                       		bgt.s	locret_18EA8
0001C664 0868 0000 001A             		bchg	#0,$1A(a0)
0001C66A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001C670                            
0001C670                            locret_18EA8:
0001C670 4E75                       		rts	
0001C672                            ; ===========================================================================
0001C672                            
0001C672                            loc_18EAA:				; XREF: Obj7B_Index
0001C672 43F8 D040                  		lea	($FFFFD040).w,a1
0001C676 707A                       		moveq	#$7A,d0
0001C678 7240                       		moveq	#$40,d1
0001C67A 743E                       		moveq	#$3E,d2
0001C67C                            
0001C67C                            loc_18EB4:
0001C67C B011                       		cmp.b	(a1),d0
0001C67E 6700                       		beq.s	loc_18EC0
0001C680 D2C1                       		adda.w	d1,a1
0001C682 51CA FFF8                  		dbf	d2,loc_18EB4
0001C686                            
0001C686 6000                       		bra.s	loc_18F38
0001C688                            ; ===========================================================================
0001C688                            
0001C688                            loc_18EC0:
0001C688 3029 0008                  		move.w	8(a1),d0
0001C68C 3229 000C                  		move.w	$C(a1),d1
0001C690 3428 0008                  		move.w	8(a0),d2
0001C694 3628 000C                  		move.w	$C(a0),d3
0001C698 45FA 0000                  		lea	byte_19022(pc),a2
0001C69C 47FA 0000                  		lea	byte_19026(pc),a3
0001C6A0 181A                       		move.b	(a2)+,d4
0001C6A2 4884                       		ext.w	d4
0001C6A4 D044                       		add.w	d4,d0
0001C6A6 181B                       		move.b	(a3)+,d4
0001C6A8 4884                       		ext.w	d4
0001C6AA D444                       		add.w	d4,d2
0001C6AC B440                       		cmp.w	d0,d2
0001C6AE 6500                       		bcs.s	loc_18F38
0001C6B0 181A                       		move.b	(a2)+,d4
0001C6B2 4884                       		ext.w	d4
0001C6B4 D044                       		add.w	d4,d0
0001C6B6 181B                       		move.b	(a3)+,d4
0001C6B8 4884                       		ext.w	d4
0001C6BA D444                       		add.w	d4,d2
0001C6BC B042                       		cmp.w	d2,d0
0001C6BE 6500                       		bcs.s	loc_18F38
0001C6C0 181A                       		move.b	(a2)+,d4
0001C6C2 4884                       		ext.w	d4
0001C6C4 D244                       		add.w	d4,d1
0001C6C6 181B                       		move.b	(a3)+,d4
0001C6C8 4884                       		ext.w	d4
0001C6CA D644                       		add.w	d4,d3
0001C6CC B641                       		cmp.w	d1,d3
0001C6CE 6500                       		bcs.s	loc_18F38
0001C6D0 181A                       		move.b	(a2)+,d4
0001C6D2 4884                       		ext.w	d4
0001C6D4 D244                       		add.w	d4,d1
0001C6D6 181B                       		move.b	(a3)+,d4
0001C6D8 4884                       		ext.w	d4
0001C6DA D644                       		add.w	d4,d3
0001C6DC B243                       		cmp.w	d3,d1
0001C6DE 6500                       		bcs.s	loc_18F38
0001C6E0 5428 0024                  		addq.b	#2,$24(a0)
0001C6E4 4268 0028                  		clr.w	$28(a0)
0001C6E8 4229 0020                  		clr.b	$20(a1)
0001C6EC 5329 0021                  		subq.b	#1,$21(a1)
0001C6F0 6600                       		bne.s	loc_18F38
0001C6F2 08E9 0007 0022             		bset	#7,$22(a1)
0001C6F8 4268 0010                  		clr.w	$10(a0)
0001C6FC 4268 0012                  		clr.w	$12(a0)
0001C700                            
0001C700                            loc_18F38:
0001C700 4A68 0012                  		tst.w	$12(a0)
0001C704 6A00                       		bpl.s	loc_18F5C
0001C706 4EB9 0001 0484             		jsr	ObjectFall
0001C70C 3028 0034                  		move.w	$34(a0),d0
0001C710 0440 002F                  		subi.w	#$2F,d0
0001C714 B068 000C                  		cmp.w	$C(a0),d0
0001C718 6E00                       		bgt.s	loc_18F58
0001C71A 4EB9 0001 0484             		jsr	ObjectFall
0001C720                            
0001C720                            loc_18F58:
0001C720 6000 FF20                  		bra.w	loc_18E7A
0001C724                            ; ===========================================================================
0001C724                            
0001C724                            loc_18F5C:
0001C724 4EB9 0001 0484             		jsr	ObjectFall
0001C72A 2268 003C                  		movea.l	$3C(a0),a1
0001C72E 45F9 0000 0000             		lea	(word_19018).l,a2
0001C734 7000                       		moveq	#0,d0
0001C736 1029 001A                  		move.b	$1A(a1),d0
0001C73A 3228 0008                  		move.w	8(a0),d1
0001C73E 9268 0030                  		sub.w	$30(a0),d1
0001C742 6400                       		bcc.s	loc_18F7E
0001C744 5440                       		addq.w	#2,d0
0001C746                            
0001C746                            loc_18F7E:
0001C746 D040                       		add.w	d0,d0
0001C748 3228 0034                  		move.w	$34(a0),d1
0001C74C D272 0000                  		add.w	(a2,d0.w),d1
0001C750 B268 000C                  		cmp.w	$C(a0),d1
0001C754 6ECA                       		bgt.s	loc_18F58
0001C756 2268 003C                  		movea.l	$3C(a0),a1
0001C75A 7202                       		moveq	#2,d1
0001C75C 4A68 0010                  		tst.w	$10(a0)
0001C760 6B00                       		bmi.s	loc_18F9C
0001C762 7200                       		moveq	#0,d1
0001C764                            
0001C764                            loc_18F9C:
0001C764 317C 0000 0028             		move.w	#0,$28(a0)
0001C76A                            
0001C76A                            loc_18FA2:
0001C76A 1341 003A                  		move.b	d1,$3A(a1)
0001C76E 1141 003A                  		move.b	d1,$3A(a0)
0001C772 B229 001A                  		cmp.b	$1A(a1),d1
0001C776 6700                       		beq.s	loc_19008
0001C778 08A9 0003 0022             		bclr	#3,$22(a1)
0001C77E 6700                       		beq.s	loc_19008
0001C780 4229 0025                  		clr.b	$25(a1)
0001C784 137C 0002 0024             		move.b	#2,$24(a1)
0001C78A 45F8 D000                  		lea	($FFFFD000).w,a2
0001C78E 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001C794 446A 0012                  		neg.w	$12(a2)
0001C798 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001C79E 6600                       		bne.s	loc_18FDC
0001C7A0 E0EA 0012                  		asr	$12(a2)
0001C7A4                            
0001C7A4                            loc_18FDC:
0001C7A4 08EA 0001 0022             		bset	#1,$22(a2)
0001C7AA 08AA 0003 0022             		bclr	#3,$22(a2)
0001C7B0 422A 003C                  		clr.b	$3C(a2)
0001C7B4 2F08                       		move.l	a0,-(sp)
0001C7B6 41D2                       		lea	(a2),a0
0001C7B8 4EBA 9FDA                  		jsr	Obj01_ChkRoll
0001C7BC 205F                       		movea.l	(sp)+,a0
0001C7BE 157C 0002 0024             		move.b	#2,$24(a2)
0001C7C4 303C 00CC                  		move.w	#$CC,d0
0001C7C8 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001C7CE                            
0001C7CE                            loc_19008:
0001C7CE 4268 0010                  		clr.w	$10(a0)
0001C7D2 4268 0012                  		clr.w	$12(a0)
0001C7D6 5428 0024                  		addq.b	#2,$24(a0)
0001C7DA 6000 FE66                  		bra.w	loc_18E7A
0001C7DE                            ; ===========================================================================
0001C7DE FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001C7E8                            		even
0001C7E8 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001C7EC                            		even
0001C7EC 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001C7F0                            		even
0001C7F0                            ; ===========================================================================
0001C7F0                            
0001C7F0                            Obj7B_Explode:				; XREF: Obj7B_Index
0001C7F0 10BC 003F                  		move.b	#$3F,(a0)
0001C7F4 4228 0024                  		clr.b	$24(a0)
0001C7F8 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001C7FE 6700                       		beq.s	Obj7B_MakeFrag
0001C800 4E75                       		rts	
0001C802                            ; ===========================================================================
0001C802                            
0001C802                            Obj7B_MakeFrag:
0001C802 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001C808 7203                       		moveq	#3,d1
0001C80A 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001C80E                            
0001C80E                            Obj7B_Loop:
0001C80E 4EB9 0001 0988             		jsr	SingleObjLoad
0001C814 6600                       		bne.s	loc_1909A
0001C816 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001C81A 137C 000A 0024             		move.b	#$A,$24(a1)
0001C820 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001C828 137C 0003 0018             		move.b	#3,$18(a1)
0001C82E 337C 0518 0002             		move.w	#$518,2(a1)
0001C834 3368 0008 0008             		move.w	8(a0),8(a1)
0001C83A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C840 335A 0010                  		move.w	(a2)+,$10(a1)
0001C844 335A 0012                  		move.w	(a2)+,$12(a1)
0001C848 137C 0098 0020             		move.b	#$98,$20(a1)
0001C84E 0029 0004 0001             		ori.b	#4,1(a1)
0001C854 08E9 0007 0001             		bset	#7,1(a1)
0001C85A 137C 000C 0019             		move.b	#$C,$19(a1)
0001C860                            
0001C860                            loc_1909A:
0001C860 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C864                            
0001C864 4E75                       		rts	
0001C866                            ; ===========================================================================
0001C866 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001C86A FF60 FDC0                  		dc.w $FF60, $FDC0
0001C86E 0100 FCC0                  		dc.w $100, $FCC0
0001C872 00A0 FDC0                  		dc.w $A0, $FDC0
0001C876                            ; ===========================================================================
0001C876                            
0001C876                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001C876 4EB9 0001 04DC             		jsr	SpeedToPos
0001C87C 3168 0008 0030             		move.w	8(a0),$30(a0)
0001C882 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001C888 0668 0018 0012             		addi.w	#$18,$12(a0)
0001C88E 7004                       		moveq	#4,d0
0001C890 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001C894 E448                       		lsr.w	#2,d0
0001C896 1140 001A                  		move.b	d0,$1A(a0)
0001C89A 4A28 0001                  		tst.b	1(a0)
0001C89E 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001C8A2 4E75                       		rts	
0001C8A4                            ; ===========================================================================
0001C8A4                            ; ---------------------------------------------------------------------------
0001C8A4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C8A4                            ; ---------------------------------------------------------------------------
0001C8A4                            Map_obj7B:
0001C8A4                            	include "_maps\obj7B.asm"
0001C8A4                            ; ---------------------------------------------------------------------------
0001C8A4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C8A4                            ; ---------------------------------------------------------------------------
0001C8A4 0000                       		dc.w byte_190E2-Map_obj7B
0001C8A6 0000                       		dc.w byte_190E8-Map_obj7B
0001C8A8 01                         byte_190E2:	dc.b 1
0001C8A9 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C8AE 01                         byte_190E8:	dc.b 1
0001C8AF FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C8B4                            		even
0001C8B4                            		even
0001C8B4                            
0001C8B4                            ; ===========================================================================
0001C8B4                            ; ---------------------------------------------------------------------------
0001C8B4                            ; Object 75 - Eggman (SYZ)
0001C8B4                            ; ---------------------------------------------------------------------------
0001C8B4                            
0001C8B4                            Obj75:					; XREF: Obj_Index
0001C8B4 7000                       		moveq	#0,d0
0001C8B6 1028 0024                  		move.b	$24(a0),d0
0001C8BA 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C8BE 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C8C2                            ; ===========================================================================
0001C8C2 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C8C4 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C8C6 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C8C8 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C8CA 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C8CC                            
0001C8CC 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001C8CF 0401 05                    		dc.b 4,	1, 5
0001C8D2 0607 05                    		dc.b 6,	7, 5
0001C8D5 0800 05                    		dc.b 8,	0, 5
0001C8D8                            ; ===========================================================================
0001C8D8                            
0001C8D8                            Obj75_Main:				; XREF: Obj75_Index
0001C8D8 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001C8DE 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001C8E4 3168 0008 0030             		move.w	8(a0),$30(a0)
0001C8EA 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001C8F0 117C 000F 0020             		move.b	#$F,$20(a0)
0001C8F6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001C8FC 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001C900 2248                       		movea.l	a0,a1
0001C902 7203                       		moveq	#3,d1
0001C904 6000                       		bra.s	Obj75_LoadBoss
0001C906                            ; ===========================================================================
0001C906                            
0001C906                            Obj75_Loop:
0001C906 4EB9 0001 099E             		jsr	SingleObjLoad2
0001C90C 6600                       		bne.s	Obj75_ShipMain
0001C90E 12BC 0075                  		move.b	#$75,(a1)
0001C912 3368 0008 0008             		move.w	8(a0),8(a1)
0001C918 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C91E                            
0001C91E                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001C91E 08A8 0000 0022             		bclr	#0,$22(a0)
0001C924 4229 0025                  		clr.b	$25(a1)
0001C928 135A 0024                  		move.b	(a2)+,$24(a1)
0001C92C 135A 001C                  		move.b	(a2)+,$1C(a1)
0001C930 135A 0018                  		move.b	(a2)+,$18(a1)
0001C934 237C 0001 B4DC 0004        		move.l	#Map_Eggman,4(a1)
0001C93C 337C 0400 0002             		move.w	#$400,2(a1)
0001C942 137C 0004 0001             		move.b	#4,1(a1)
0001C948 137C 0020 0019             		move.b	#$20,$19(a1)
0001C94E 2348 0034                  		move.l	a0,$34(a1)
0001C952 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C956                            
0001C956                            Obj75_ShipMain:				; XREF: Obj75_Index
0001C956 7000                       		moveq	#0,d0
0001C958 1028 0025                  		move.b	$25(a0),d0
0001C95C 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C960 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C964 43F9 0001 B48C             		lea	(Ani_Eggman).l,a1
0001C96A 4EB9 0000 D0AC             		jsr	AnimateSprite
0001C970 7003                       		moveq	#3,d0
0001C972 C028 0022                  		and.b	$22(a0),d0
0001C976 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001C97C 8128 0001                  		or.b	d0,1(a0)
0001C980 4EF9 0001 0502             		jmp	DisplaySprite
0001C986                            ; ===========================================================================
0001C986 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C98A 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C98E 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C992                            ; ===========================================================================
0001C992                            
0001C992                            loc_191CC:				; XREF: Obj75_ShipIndex
0001C992 317C FF00 0010             		move.w	#-$100,$10(a0)
0001C998 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C99E 6400                       		bcc.s	loc_191DE
0001C9A0 5428 0025                  		addq.b	#2,$25(a0)
0001C9A4                            
0001C9A4                            loc_191DE:
0001C9A4 1028 003F                  		move.b	$3F(a0),d0
0001C9A8 5428 003F                  		addq.b	#2,$3F(a0)
0001C9AC 4EB9 0000 3798             		jsr	(CalcSine).l
0001C9B2 E440                       		asr.w	#2,d0
0001C9B4 3140 0012                  		move.w	d0,$12(a0)
0001C9B8                            
0001C9B8                            loc_191F2:
0001C9B8 6100 E6C2                  		bsr.w	BossMove
0001C9BC 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001C9C2 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C9C8                            
0001C9C8                            loc_19202:
0001C9C8 3028 0008                  		move.w	8(a0),d0
0001C9CC 0440 2C00                  		subi.w	#$2C00,d0
0001C9D0 EA48                       		lsr.w	#5,d0
0001C9D2 1140 0034                  		move.b	d0,$34(a0)
0001C9D6 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001C9DC 6400                       		bcc.s	locret_19256
0001C9DE 4A28 0022                  		tst.b	$22(a0)
0001C9E2 6B00                       		bmi.s	loc_19258
0001C9E4 4A28 0020                  		tst.b	$20(a0)
0001C9E8 6600                       		bne.s	locret_19256
0001C9EA 4A28 003E                  		tst.b	$3E(a0)
0001C9EE 6600                       		bne.s	loc_1923A
0001C9F0 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C9F6 303C 00AC                  		move.w	#$AC,d0
0001C9FA 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001CA00                            
0001CA00                            loc_1923A:
0001CA00 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001CA04 7000                       		moveq	#0,d0
0001CA06 4A51                       		tst.w	(a1)
0001CA08 6600                       		bne.s	loc_19248
0001CA0A 303C 0EEE                  		move.w	#$EEE,d0
0001CA0E                            
0001CA0E                            loc_19248:
0001CA0E 3280                       		move.w	d0,(a1)
0001CA10 5328 003E                  		subq.b	#1,$3E(a0)
0001CA14 6600                       		bne.s	locret_19256
0001CA16 117C 000F 0020             		move.b	#$F,$20(a0)
0001CA1C                            
0001CA1C                            locret_19256:
0001CA1C 4E75                       		rts	
0001CA1E                            ; ===========================================================================
0001CA1E                            
0001CA1E                            loc_19258:				; XREF: loc_19202
0001CA1E 7064                       		moveq	#100,d0
0001CA20 6100 0000                  		bsr.w	AddPoints
0001CA24 117C 0006 0025             		move.b	#6,$25(a0)
0001CA2A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001CA30 4268 0010                  		clr.w	$10(a0)
0001CA34 4E75                       		rts	
0001CA36                            ; ===========================================================================
0001CA36                            
0001CA36                            loc_19270:				; XREF: Obj75_ShipIndex
0001CA36 3028 0030                  		move.w	$30(a0),d0
0001CA3A 317C 0140 0010             		move.w	#$140,$10(a0)
0001CA40 0828 0000 0022             		btst	#0,$22(a0)
0001CA46 6600                       		bne.s	loc_1928E
0001CA48 4468 0010                  		neg.w	$10(a0)
0001CA4C 0C40 2C08                  		cmpi.w	#$2C08,d0
0001CA50 6E00                       		bgt.s	loc_1929E
0001CA52 6000                       		bra.s	loc_19294
0001CA54                            ; ===========================================================================
0001CA54                            
0001CA54                            loc_1928E:
0001CA54 0C40 2D38                  		cmpi.w	#$2D38,d0
0001CA58 6D00                       		blt.s	loc_1929E
0001CA5A                            
0001CA5A                            loc_19294:
0001CA5A 0868 0000 0022             		bchg	#0,$22(a0)
0001CA60 4228 003D                  		clr.b	$3D(a0)
0001CA64                            
0001CA64                            loc_1929E:
0001CA64 0440 2C10                  		subi.w	#$2C10,d0
0001CA68 0240 001F                  		andi.w	#$1F,d0
0001CA6C 0440 001F                  		subi.w	#$1F,d0
0001CA70 6A00                       		bpl.s	loc_192AE
0001CA72 4440                       		neg.w	d0
0001CA74                            
0001CA74                            loc_192AE:
0001CA74 5340                       		subq.w	#1,d0
0001CA76 6E00                       		bgt.s	loc_192E8
0001CA78 4A28 003D                  		tst.b	$3D(a0)
0001CA7C 6600                       		bne.s	loc_192E8
0001CA7E 3238 D008                  		move.w	($FFFFD008).w,d1
0001CA82 0441 2C00                  		subi.w	#$2C00,d1
0001CA86 EA41                       		asr.w	#5,d1
0001CA88 B228 0034                  		cmp.b	$34(a0),d1
0001CA8C 6600                       		bne.s	loc_192E8
0001CA8E 7000                       		moveq	#0,d0
0001CA90 1028 0034                  		move.b	$34(a0),d0
0001CA94 EB40                       		asl.w	#5,d0
0001CA96 0640 2C10                  		addi.w	#$2C10,d0
0001CA9A 3140 0030                  		move.w	d0,$30(a0)
0001CA9E 6100 0000                  		bsr.w	Obj75_FindBlocks
0001CAA2 5428 0025                  		addq.b	#2,$25(a0)
0001CAA6 4268 0028                  		clr.w	$28(a0)
0001CAAA 4268 0010                  		clr.w	$10(a0)
0001CAAE                            
0001CAAE                            loc_192E8:
0001CAAE 6000 FEF4                  		bra.w	loc_191DE
0001CAB2                            ; ===========================================================================
0001CAB2                            
0001CAB2                            loc_192EC:				; XREF: Obj75_ShipIndex
0001CAB2 7000                       		moveq	#0,d0
0001CAB4 1028 0028                  		move.b	$28(a0),d0
0001CAB8 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001CABC 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001CAC0                            ; ===========================================================================
0001CAC0 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001CAC2 0000                       		dc.w loc_19348-off_192FA
0001CAC4 0000                       		dc.w loc_1938E-off_192FA
0001CAC6 0000                       		dc.w loc_193D0-off_192FA
0001CAC8                            ; ===========================================================================
0001CAC8                            
0001CAC8                            loc_19302:				; XREF: off_192FA
0001CAC8 317C 0180 0012             		move.w	#$180,$12(a0)
0001CACE 3028 0038                  		move.w	$38(a0),d0
0001CAD2 0C40 0556                  		cmpi.w	#$556,d0
0001CAD6 6500                       		bcs.s	loc_19344
0001CAD8 317C 0556 0038             		move.w	#$556,$38(a0)
0001CADE 4268 003C                  		clr.w	$3C(a0)
0001CAE2 70FF                       		moveq	#-1,d0
0001CAE4 3028 0036                  		move.w	$36(a0),d0
0001CAE8 6700                       		beq.s	loc_1933C
0001CAEA 2240                       		movea.l	d0,a1
0001CAEC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CAF2 117C 00FF 0029             		move.b	#-1,$29(a0)
0001CAF8 2348 0034                  		move.l	a0,$34(a1)
0001CAFC 317C 0032 003C             		move.w	#$32,$3C(a0)
0001CB02                            
0001CB02                            loc_1933C:
0001CB02 4268 0012                  		clr.w	$12(a0)
0001CB06 5428 0028                  		addq.b	#2,$28(a0)
0001CB0A                            
0001CB0A                            loc_19344:
0001CB0A 6000 FEAC                  		bra.w	loc_191F2
0001CB0E                            ; ===========================================================================
0001CB0E                            
0001CB0E                            loc_19348:				; XREF: off_192FA
0001CB0E 5368 003C                  		subq.w	#1,$3C(a0)
0001CB12 6A00                       		bpl.s	loc_19366
0001CB14 5428 0028                  		addq.b	#2,$28(a0)
0001CB18 317C F800 0012             		move.w	#-$800,$12(a0)
0001CB1E 4A68 0036                  		tst.w	$36(a0)
0001CB22 6600                       		bne.s	loc_19362
0001CB24 E0E8 0012                  		asr	$12(a0)
0001CB28                            
0001CB28                            loc_19362:
0001CB28 7000                       		moveq	#0,d0
0001CB2A 6000                       		bra.s	loc_1937C
0001CB2C                            ; ===========================================================================
0001CB2C                            
0001CB2C                            loc_19366:
0001CB2C 7000                       		moveq	#0,d0
0001CB2E 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001CB34 6E00                       		bgt.s	loc_1937C
0001CB36 7002                       		moveq	#2,d0
0001CB38 0828 0001 003D             		btst	#1,$3D(a0)
0001CB3E 6700                       		beq.s	loc_1937C
0001CB40 4440                       		neg.w	d0
0001CB42                            
0001CB42                            loc_1937C:
0001CB42 D068 0038                  		add.w	$38(a0),d0
0001CB46 3140 000C                  		move.w	d0,$C(a0)
0001CB4A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001CB50 6000 FE76                  		bra.w	loc_19202
0001CB54                            ; ===========================================================================
0001CB54                            
0001CB54                            loc_1938E:				; XREF: off_192FA
0001CB54 303C 04DA                  		move.w	#$4DA,d0
0001CB58 4A68 0036                  		tst.w	$36(a0)
0001CB5C 6700                       		beq.s	loc_1939C
0001CB5E 0440 0018                  		subi.w	#$18,d0
0001CB62                            
0001CB62                            loc_1939C:
0001CB62 B068 0038                  		cmp.w	$38(a0),d0
0001CB66 6D00                       		blt.s	loc_193BE
0001CB68 317C 0008 003C             		move.w	#8,$3C(a0)
0001CB6E 4A68 0036                  		tst.w	$36(a0)
0001CB72 6700                       		beq.s	loc_193B4
0001CB74 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001CB7A                            
0001CB7A                            loc_193B4:
0001CB7A 5428 0028                  		addq.b	#2,$28(a0)
0001CB7E 4268 0012                  		clr.w	$12(a0)
0001CB82 6000                       		bra.s	loc_193CC
0001CB84                            ; ===========================================================================
0001CB84                            
0001CB84                            loc_193BE:
0001CB84 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001CB8A 6C00                       		bge.s	loc_193CC
0001CB8C 0668 000C 0012             		addi.w	#$C,$12(a0)
0001CB92                            
0001CB92                            loc_193CC:
0001CB92 6000 FE24                  		bra.w	loc_191F2
0001CB96                            ; ===========================================================================
0001CB96                            
0001CB96                            loc_193D0:				; XREF: off_192FA
0001CB96 5368 003C                  		subq.w	#1,$3C(a0)
0001CB9A 6E00                       		bgt.s	loc_19406
0001CB9C 6B00                       		bmi.s	loc_193EE
0001CB9E 70FF                       		moveq	#-1,d0
0001CBA0 3028 0036                  		move.w	$36(a0),d0
0001CBA4 6700                       		beq.s	loc_193E8
0001CBA6 2240                       		movea.l	d0,a1
0001CBA8 137C 000A 0029             		move.b	#$A,$29(a1)
0001CBAE                            
0001CBAE                            loc_193E8:
0001CBAE 4268 0036                  		clr.w	$36(a0)
0001CBB2 6000                       		bra.s	loc_19406
0001CBB4                            ; ===========================================================================
0001CBB4                            
0001CBB4                            loc_193EE:
0001CBB4 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001CBBA 6600                       		bne.s	loc_19406
0001CBBC 4228 0029                  		clr.b	$29(a0)
0001CBC0 5528 0025                  		subq.b	#2,$25(a0)
0001CBC4 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001CBCA 6000                       		bra.s	loc_19446
0001CBCC                            ; ===========================================================================
0001CBCC                            
0001CBCC                            loc_19406:
0001CBCC 7001                       		moveq	#1,d0
0001CBCE 4A68 0036                  		tst.w	$36(a0)
0001CBD2 6700                       		beq.s	loc_19410
0001CBD4 7002                       		moveq	#2,d0
0001CBD6                            
0001CBD6                            loc_19410:
0001CBD6 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001CBDC 6700                       		beq.s	loc_19424
0001CBDE 6D00                       		blt.s	loc_1941C
0001CBE0 4440                       		neg.w	d0
0001CBE2                            
0001CBE2                            loc_1941C:
0001CBE2 4A68 0036                  		tst.w	$36(a0)
0001CBE6 D168 0038                  		add.w	d0,$38(a0)
0001CBEA                            
0001CBEA                            loc_19424:
0001CBEA 7000                       		moveq	#0,d0
0001CBEC 4A68 0036                  		tst.w	$36(a0)
0001CBF0 6700                       		beq.s	loc_19438
0001CBF2 7002                       		moveq	#2,d0
0001CBF4 0828 0000 003D             		btst	#0,$3D(a0)
0001CBFA 6700                       		beq.s	loc_19438
0001CBFC 4440                       		neg.w	d0
0001CBFE                            
0001CBFE                            loc_19438:
0001CBFE D068 0038                  		add.w	$38(a0),d0
0001CC02 3140 000C                  		move.w	d0,$C(a0)
0001CC06 3168 0030 0008             		move.w	$30(a0),8(a0)
0001CC0C                            
0001CC0C                            loc_19446:
0001CC0C 6000 FDBA                  		bra.w	loc_19202
0001CC10                            
0001CC10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC10                            
0001CC10                            
0001CC10                            Obj75_FindBlocks:			; XREF: loc_192AE
0001CC10 4268 0036                  		clr.w	$36(a0)
0001CC14 43F8 D040                  		lea	($FFFFD040).w,a1
0001CC18 703E                       		moveq	#$3E,d0
0001CC1A 7276                       		moveq	#$76,d1
0001CC1C 1428 0034                  		move.b	$34(a0),d2
0001CC20                            
0001CC20                            Obj75_FindLoop:
0001CC20 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001CC22 6600                       		bne.s	loc_1946A	; if not, branch
0001CC24 B429 0028                  		cmp.b	$28(a1),d2
0001CC28 6600                       		bne.s	loc_1946A
0001CC2A 3149 0036                  		move.w	a1,$36(a0)
0001CC2E 6000                       		bra.s	locret_19472
0001CC30                            ; ===========================================================================
0001CC30                            
0001CC30                            loc_1946A:
0001CC30 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001CC34 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001CC38                            
0001CC38                            locret_19472:
0001CC38 4E75                       		rts	
0001CC3A                            ; End of function Obj75_FindBlocks
0001CC3A                            
0001CC3A                            ; ===========================================================================
0001CC3A                            
0001CC3A                            loc_19474:				; XREF: Obj75_ShipIndex
0001CC3A 5368 003C                  		subq.w	#1,$3C(a0)
0001CC3E 6B00                       		bmi.s	loc_1947E
0001CC40 6000 E3F8                  		bra.w	BossDefeated
0001CC44                            ; ===========================================================================
0001CC44                            
0001CC44                            loc_1947E:
0001CC44 5428 0025                  		addq.b	#2,$25(a0)
0001CC48 4268 0012                  		clr.w	$12(a0)
0001CC4C 08E8 0000 0022             		bset	#0,$22(a0)
0001CC52 08A8 0007 0022             		bclr	#7,$22(a0)
0001CC58 4268 0010                  		clr.w	$10(a0)
0001CC5C 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001CC62 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001CC66 6600                       		bne.s	loc_194A8
0001CC68 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001CC6E                            
0001CC6E                            loc_194A8:
0001CC6E 6000 FD58                  		bra.w	loc_19202
0001CC72                            ; ===========================================================================
0001CC72                            
0001CC72                            loc_194AC:				; XREF: Obj75_ShipIndex
0001CC72 5268 003C                  		addq.w	#1,$3C(a0)
0001CC76 6700                       		beq.s	loc_194BC
0001CC78 6A00                       		bpl.s	loc_194C2
0001CC7A 0668 0018 0012             		addi.w	#$18,$12(a0)
0001CC80 6000                       		bra.s	loc_194EE
0001CC82                            ; ===========================================================================
0001CC82                            
0001CC82                            loc_194BC:
0001CC82 4268 0012                  		clr.w	$12(a0)
0001CC86 6000                       		bra.s	loc_194EE
0001CC88                            ; ===========================================================================
0001CC88                            
0001CC88                            loc_194C2:
0001CC88 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001CC8E 6500                       		bcs.s	loc_194DA
0001CC90 6700                       		beq.s	loc_194E0
0001CC92 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001CC98 6500                       		bcs.s	loc_194EE
0001CC9A 5428 0025                  		addq.b	#2,$25(a0)
0001CC9E 6000                       		bra.s	loc_194EE
0001CCA0                            ; ===========================================================================
0001CCA0                            
0001CCA0                            loc_194DA:
0001CCA0 5168 0012                  		subq.w	#8,$12(a0)
0001CCA4 6000                       		bra.s	loc_194EE
0001CCA6                            ; ===========================================================================
0001CCA6                            
0001CCA6                            loc_194E0:
0001CCA6 4268 0012                  		clr.w	$12(a0)
0001CCAA 303C 0085                  		move.w	#$85,d0
0001CCAE 4EB9 0000 19E4             		jsr	(PlaySound).l	; play SYZ music
0001CCB4                            
0001CCB4                            loc_194EE:
0001CCB4 6000 FD02                  		bra.w	loc_191F2
0001CCB8                            ; ===========================================================================
0001CCB8                            
0001CCB8                            loc_194F2:				; XREF: Obj75_ShipIndex
0001CCB8 317C 0400 0010             		move.w	#$400,$10(a0)
0001CCBE 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001CCC4 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001CCCA 6400                       		bcc.s	loc_1950C
0001CCCC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001CCD0 6000                       		bra.s	loc_19512
0001CCD2                            ; ===========================================================================
0001CCD2                            
0001CCD2                            loc_1950C:
0001CCD2 4A28 0001                  		tst.b	1(a0)
0001CCD6 6A00                       		bpl.s	Obj75_ShipDelete
0001CCD8                            
0001CCD8                            loc_19512:
0001CCD8 6100 E3A2                  		bsr.w	BossMove
0001CCDC 6000 FCC6                  		bra.w	loc_191DE
0001CCE0                            ; ===========================================================================
0001CCE0                            
0001CCE0                            Obj75_ShipDelete:
0001CCE0 4EF9 0001 053E             		jmp	DeleteObject
0001CCE6                            ; ===========================================================================
0001CCE6                            
0001CCE6                            Obj75_FaceMain:				; XREF: Obj75_Index
0001CCE6 7201                       		moveq	#1,d1
0001CCE8 2268 0034                  		movea.l	$34(a0),a1
0001CCEC 7000                       		moveq	#0,d0
0001CCEE 1029 0025                  		move.b	$25(a1),d0
0001CCF2 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001CCF6 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001CCFA 1141 001C                  		move.b	d1,$1C(a0)
0001CCFE 1010                       		move.b	(a0),d0
0001CD00 B011                       		cmp.b	(a1),d0
0001CD02 6600                       		bne.s	Obj75_FaceDelete
0001CD04 6000                       		bra.s	loc_195BE
0001CD06                            ; ===========================================================================
0001CD06                            
0001CD06                            Obj75_FaceDelete:
0001CD06 4EF9 0001 053E             		jmp	DeleteObject
0001CD0C                            ; ===========================================================================
0001CD0C 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001CD10 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001CD14 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001CD18                            ; ===========================================================================
0001CD18                            
0001CD18                            loc_19552:				; XREF: off_19546
0001CD18 720A                       		moveq	#$A,d1
0001CD1A 4E75                       		rts	
0001CD1C                            ; ===========================================================================
0001CD1C                            
0001CD1C                            loc_19556:				; XREF: off_19546
0001CD1C 7206                       		moveq	#6,d1
0001CD1E 4E75                       		rts	
0001CD20                            ; ===========================================================================
0001CD20                            
0001CD20                            loc_1955A:				; XREF: off_19546
0001CD20 7000                       		moveq	#0,d0
0001CD22 1029 0028                  		move.b	$28(a1),d0
0001CD26 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001CD2A 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001CD2E                            ; ===========================================================================
0001CD2E 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001CD32 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001CD36                            ; ===========================================================================
0001CD36                            
0001CD36                            loc_19570:				; XREF: off_19568
0001CD36 6000                       		bra.s	loc_19574
0001CD38                            ; ===========================================================================
0001CD38                            
0001CD38                            loc_19572:				; XREF: off_19568
0001CD38 7206                       		moveq	#6,d1
0001CD3A                            
0001CD3A                            loc_19574:				; XREF: off_19546
0001CD3A 4A29 0020                  		tst.b	$20(a1)
0001CD3E 6600                       		bne.s	loc_1957E
0001CD40 7205                       		moveq	#5,d1
0001CD42 4E75                       		rts	
0001CD44                            ; ===========================================================================
0001CD44                            
0001CD44                            loc_1957E:
0001CD44 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001CD4A 6500                       		bcs.s	locret_19588
0001CD4C 7204                       		moveq	#4,d1
0001CD4E                            
0001CD4E                            locret_19588:
0001CD4E 4E75                       		rts	
0001CD50                            ; ===========================================================================
0001CD50                            
0001CD50                            Obj75_FlameMain:			; XREF: Obj75_Index
0001CD50 117C 0007 001C             		move.b	#7,$1C(a0)
0001CD56 2268 0034                  		movea.l	$34(a0),a1
0001CD5A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001CD60 6600                       		bne.s	loc_195AA
0001CD62 117C 000B 001C             		move.b	#$B,$1C(a0)
0001CD68 4A28 0001                  		tst.b	1(a0)
0001CD6C 6A00                       		bpl.s	Obj75_FlameDelete
0001CD6E 6000                       		bra.s	loc_195B6
0001CD70                            ; ===========================================================================
0001CD70                            
0001CD70                            loc_195AA:
0001CD70 4A69 0010                  		tst.w	$10(a1)
0001CD74 6700                       		beq.s	loc_195B6
0001CD76 117C 0008 001C             		move.b	#8,$1C(a0)
0001CD7C                            
0001CD7C                            loc_195B6:
0001CD7C 6000                       		bra.s	loc_195BE
0001CD7E                            ; ===========================================================================
0001CD7E                            
0001CD7E                            Obj75_FlameDelete:
0001CD7E 4EF9 0001 053E             		jmp	DeleteObject
0001CD84                            ; ===========================================================================
0001CD84                            
0001CD84                            loc_195BE:
0001CD84 43F9 0001 B48C             		lea	(Ani_Eggman).l,a1
0001CD8A 4EB9 0000 D0AC             		jsr	AnimateSprite
0001CD90 2268 0034                  		movea.l	$34(a0),a1
0001CD94 3169 0008 0008             		move.w	8(a1),8(a0)
0001CD9A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001CDA0                            
0001CDA0                            loc_195DA:
0001CDA0 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001CDA6 7003                       		moveq	#3,d0
0001CDA8 C028 0022                  		and.b	$22(a0),d0
0001CDAC 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001CDB2 8128 0001                  		or.b	d0,1(a0)
0001CDB6 4EF9 0001 0502             		jmp	DisplaySprite
0001CDBC                            ; ===========================================================================
0001CDBC                            
0001CDBC                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001CDBC 217C 0001 B5A4 0004        		move.l	#Map_BossItems,4(a0)
0001CDC4 317C 246C 0002             		move.w	#$246C,2(a0)
0001CDCA 117C 0005 001A             		move.b	#5,$1A(a0)
0001CDD0 2268 0034                  		movea.l	$34(a0),a1
0001CDD4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001CDDA 6600                       		bne.s	loc_1961C
0001CDDC 4A28 0001                  		tst.b	1(a0)
0001CDE0 6A00                       		bpl.s	Obj75_SpikeDelete
0001CDE2                            
0001CDE2                            loc_1961C:
0001CDE2 3169 0008 0008             		move.w	8(a1),8(a0)
0001CDE8 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001CDEE 3028 003C                  		move.w	$3C(a0),d0
0001CDF2 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001CDF8 6600                       		bne.s	loc_19652
0001CDFA 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001CE00 6700                       		beq.s	loc_1964C
0001CE02 4A29 0028                  		tst.b	$28(a1)
0001CE06 6600                       		bne.s	loc_19658
0001CE08 0C40 0094                  		cmpi.w	#$94,d0
0001CE0C 6C00                       		bge.s	loc_19658
0001CE0E 5E40                       		addq.w	#7,d0
0001CE10 6000                       		bra.s	loc_19658
0001CE12                            ; ===========================================================================
0001CE12                            
0001CE12                            loc_1964C:
0001CE12 4A69 003C                  		tst.w	$3C(a1)
0001CE16 6A00                       		bpl.s	loc_19658
0001CE18                            
0001CE18                            loc_19652:
0001CE18 4A40                       		tst.w	d0
0001CE1A 6F00                       		ble.s	loc_19658
0001CE1C 5B40                       		subq.w	#5,d0
0001CE1E                            
0001CE1E                            loc_19658:
0001CE1E 3140 003C                  		move.w	d0,$3C(a0)
0001CE22 E440                       		asr.w	#2,d0
0001CE24 D168 000C                  		add.w	d0,$C(a0)
0001CE28 117C 0008 0019             		move.b	#8,$19(a0)
0001CE2E 117C 000C 0016             		move.b	#$C,$16(a0)
0001CE34 4228 0020                  		clr.b	$20(a0)
0001CE38 2268 0034                  		movea.l	$34(a0),a1
0001CE3C 4A29 0020                  		tst.b	$20(a1)
0001CE40 6700                       		beq.s	loc_19688
0001CE42 4A29 0029                  		tst.b	$29(a1)
0001CE46 6600                       		bne.s	loc_19688
0001CE48 117C 0084 0020             		move.b	#$84,$20(a0)
0001CE4E                            
0001CE4E                            loc_19688:
0001CE4E 6000 FF50                  		bra.w	loc_195DA
0001CE52                            ; ===========================================================================
0001CE52                            
0001CE52                            Obj75_SpikeDelete:
0001CE52 4EF9 0001 053E             		jmp	DeleteObject
0001CE58                            ; ===========================================================================
0001CE58                            ; ---------------------------------------------------------------------------
0001CE58                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001CE58                            ; ---------------------------------------------------------------------------
0001CE58                            
0001CE58                            Obj76:					; XREF: Obj_Index
0001CE58 7000                       		moveq	#0,d0
0001CE5A 1028 0024                  		move.b	$24(a0),d0
0001CE5E 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001CE62 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001CE66                            ; ===========================================================================
0001CE66 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001CE68 0000                       		dc.w Obj76_Action-Obj76_Index
0001CE6A 0000                       		dc.w loc_19762-Obj76_Index
0001CE6C                            ; ===========================================================================
0001CE6C                            
0001CE6C                            Obj76_Main:				; XREF: Obj76_Index
0001CE6C 7800                       		moveq	#0,d4
0001CE6E 3A3C 2C10                  		move.w	#$2C10,d5
0001CE72 7C09                       		moveq	#9,d6
0001CE74 43D0                       		lea	(a0),a1
0001CE76 6000                       		bra.s	Obj76_MakeBlock
0001CE78                            ; ===========================================================================
0001CE78                            
0001CE78                            Obj76_Loop:
0001CE78 4EB9 0001 0988             		jsr	SingleObjLoad
0001CE7E 6600                       		bne.s	Obj76_ExitLoop
0001CE80                            
0001CE80                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001CE80 12BC 0076                  		move.b	#$76,(a1)
0001CE84 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001CE8C 337C 4000 0002             		move.w	#$4000,2(a1)
0001CE92 137C 0004 0001             		move.b	#4,1(a1)
0001CE98 137C 0010 0019             		move.b	#$10,$19(a1)
0001CE9E 137C 0010 0016             		move.b	#$10,$16(a1)
0001CEA4 137C 0003 0018             		move.b	#3,$18(a1)
0001CEAA 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001CEAE 337C 0582 000C             		move.w	#$582,$C(a1)
0001CEB4 3344 0028                  		move.w	d4,$28(a1)
0001CEB8 0644 0101                  		addi.w	#$101,d4
0001CEBC 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001CEC0 5429 0024                  		addq.b	#2,$24(a1)
0001CEC4 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001CEC8                            
0001CEC8                            Obj76_ExitLoop:
0001CEC8 4E75                       		rts	
0001CECA                            ; ===========================================================================
0001CECA                            
0001CECA                            Obj76_Action:				; XREF: Obj76_Index
0001CECA 1028 0029                  		move.b	$29(a0),d0
0001CECE B028 0028                  		cmp.b	$28(a0),d0
0001CED2 6700                       		beq.s	Obj76_Solid
0001CED4 4A00                       		tst.b	d0
0001CED6 6B00                       		bmi.s	loc_19718
0001CED8                            
0001CED8                            loc_19712:
0001CED8 6100 0000                  		bsr.w	Obj76_Break
0001CEDC 6000                       		bra.s	Obj76_Display
0001CEDE                            ; ===========================================================================
0001CEDE                            
0001CEDE                            loc_19718:
0001CEDE 2268 0034                  		movea.l	$34(a0),a1
0001CEE2 4A29 0021                  		tst.b	$21(a1)
0001CEE6 67F0                       		beq.s	loc_19712
0001CEE8 3169 0008 0008             		move.w	8(a1),8(a0)
0001CEEE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001CEF4 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001CEFA B2C8                       		cmpa.w	a0,a1
0001CEFC 6500                       		bcs.s	Obj76_Display
0001CEFE 3029 0012                  		move.w	$12(a1),d0
0001CF02 48C0                       		ext.l	d0
0001CF04 E080                       		asr.l	#8,d0
0001CF06 D168 000C                  		add.w	d0,$C(a0)
0001CF0A 6000                       		bra.s	Obj76_Display
0001CF0C                            ; ===========================================================================
0001CF0C                            
0001CF0C                            Obj76_Solid:				; XREF: Obj76_Action
0001CF0C 323C 001B                  		move.w	#$1B,d1
0001CF10 343C 0010                  		move.w	#$10,d2
0001CF14 363C 0011                  		move.w	#$11,d3
0001CF18 3828 0008                  		move.w	8(a0),d4
0001CF1C 4EB9 0001 29EE             		jsr	SolidObject
0001CF22                            
0001CF22                            Obj76_Display:				; XREF: Obj76_Action
0001CF22 4EF9 0001 0502             		jmp	DisplaySprite
0001CF28                            ; ===========================================================================
0001CF28                            
0001CF28                            loc_19762:				; XREF: Obj76_Index
0001CF28 4A28 0001                  		tst.b	1(a0)
0001CF2C 6A00                       		bpl.s	Obj76_Delete
0001CF2E 4EB9 0001 0484             		jsr	ObjectFall
0001CF34 4EF9 0001 0502             		jmp	DisplaySprite
0001CF3A                            ; ===========================================================================
0001CF3A                            
0001CF3A                            Obj76_Delete:
0001CF3A 4EF9 0001 053E             		jmp	DeleteObject
0001CF40                            
0001CF40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF40                            
0001CF40                            
0001CF40                            Obj76_Break:				; XREF: Obj76_Action
0001CF40 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001CF44 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001CF48 7801                       		moveq	#1,d4
0001CF4A 7203                       		moveq	#3,d1
0001CF4C 7438                       		moveq	#$38,d2
0001CF4E 5428 0024                  		addq.b	#2,$24(a0)
0001CF52 117C 0008 0019             		move.b	#8,$19(a0)
0001CF58 117C 0008 0016             		move.b	#8,$16(a0)
0001CF5E 43D0                       		lea	(a0),a1
0001CF60 6000                       		bra.s	Obj76_MakeFrag
0001CF62                            ; ===========================================================================
0001CF62                            
0001CF62                            Obj76_LoopFrag:
0001CF62 4EB9 0001 099E             		jsr	SingleObjLoad2
0001CF68 6600                       		bne.s	loc_197D4
0001CF6A                            
0001CF6A                            Obj76_MakeFrag:
0001CF6A 45D0                       		lea	(a0),a2
0001CF6C 47D1                       		lea	(a1),a3
0001CF6E 7603                       		moveq	#3,d3
0001CF70                            
0001CF70                            loc_197AA:
0001CF70 26DA                       		move.l	(a2)+,(a3)+
0001CF72 26DA                       		move.l	(a2)+,(a3)+
0001CF74 26DA                       		move.l	(a2)+,(a3)+
0001CF76 26DA                       		move.l	(a2)+,(a3)+
0001CF78 51CB FFF6                  		dbf	d3,loc_197AA
0001CF7C                            
0001CF7C 335C 0010                  		move.w	(a4)+,$10(a1)
0001CF80 335C 0012                  		move.w	(a4)+,$12(a1)
0001CF84 361D                       		move.w	(a5)+,d3
0001CF86 D769 0008                  		add.w	d3,8(a1)
0001CF8A 361D                       		move.w	(a5)+,d3
0001CF8C D769 000C                  		add.w	d3,$C(a1)
0001CF90 1344 001A                  		move.b	d4,$1A(a1)
0001CF94 5244                       		addq.w	#1,d4
0001CF96 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001CF9A                            
0001CF9A                            loc_197D4:
0001CF9A 303C 00CB                  		move.w	#$CB,d0
0001CF9E 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play smashing sound
0001CFA4                            ; End of function Obj76_Break
0001CFA4                            
0001CFA4                            ; ===========================================================================
0001CFA4 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001CFA8 0180 FE00                  		dc.w $180, $FE00
0001CFAC FF00 FF00                  		dc.w $FF00, $FF00
0001CFB0 0100 FF00                  		dc.w $100, $FF00
0001CFB4 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001CFB8 0010 0000                  		dc.w $10, 0
0001CFBC 0000 0010                  		dc.w 0,	$10
0001CFC0 0010 0010                  		dc.w $10, $10
0001CFC4                            ; ---------------------------------------------------------------------------
0001CFC4                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001CFC4                            ; ---------------------------------------------------------------------------
0001CFC4                            Map_obj76:
0001CFC4                            	include "_maps\obj76.asm"
0001CFC4                            ; ---------------------------------------------------------------------------
0001CFC4                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001CFC4                            ; ---------------------------------------------------------------------------
0001CFC4 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001CFC8 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001CFCC 0000                       		dc.w byte_19826-Map_obj76
0001CFCE 02                         byte_19808:	dc.b 2
0001CFCF F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001CFD4 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001CFD9 00                         		dc.b 0
0001CFDA 01                         byte_19814:	dc.b 1
0001CFDB F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001CFE0 01                         byte_1981A:	dc.b 1
0001CFE1 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001CFE6 01                         byte_19820:	dc.b 1
0001CFE7 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001CFEC 01                         byte_19826:	dc.b 1
0001CFED F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001CFF2                            		even
0001CFF2                            		even
0001CFF2                            
0001CFF2                            ; ===========================================================================
0001CFF2                            
0001CFF2                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001CFF2 4EF9 0001 053E             		jmp	DeleteObject
0001CFF8                            ; ===========================================================================
0001CFF8                            ; ---------------------------------------------------------------------------
0001CFF8                            ; Object 82 - Eggman (SBZ2)
0001CFF8                            ; ---------------------------------------------------------------------------
0001CFF8                            
0001CFF8                            Obj82:					; XREF: Obj_Index
0001CFF8 7000                       		moveq	#0,d0
0001CFFA 1028 0024                  		move.b	$24(a0),d0
0001CFFE 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001D002 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001D006                            ; ===========================================================================
0001D006 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001D008 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001D00A 0000                       		dc.w Obj82_Switch-Obj82_Index
0001D00C                            
0001D00C 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001D00F 0400 03                    		dc.b 4,	0, 3
0001D012                            ; ===========================================================================
0001D012                            
0001D012                            Obj82_Main:				; XREF: Obj82_Index
0001D012 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001D016 317C 2160 0008             		move.w	#$2160,8(a0)
0001D01C 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001D022 117C 000F 0020             		move.b	#$F,$20(a0)
0001D028 117C 0010 0021             		move.b	#$10,$21(a0)
0001D02E 08A8 0000 0022             		bclr	#0,$22(a0)
0001D034 4228 0025                  		clr.b	$25(a0)
0001D038 115A 0024                  		move.b	(a2)+,$24(a0)
0001D03C 115A 001C                  		move.b	(a2)+,$1C(a0)
0001D040 115A 0018                  		move.b	(a2)+,$18(a0)
0001D044 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001D04C 317C 0400 0002             		move.w	#$400,2(a0)
0001D052 117C 0004 0001             		move.b	#4,1(a0)
0001D058 08E8 0007 0001             		bset	#7,1(a0)
0001D05E 117C 0020 0019             		move.b	#$20,$19(a0)
0001D064 4EB9 0001 099E             		jsr	SingleObjLoad2
0001D06A 6600                       		bne.s	Obj82_Eggman
0001D06C 2348 0034                  		move.l	a0,$34(a1)
0001D070 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001D074 337C 2130 0008             		move.w	#$2130,8(a1)
0001D07A 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001D080 4228 0025                  		clr.b	$25(a0)
0001D084 135A 0024                  		move.b	(a2)+,$24(a1)
0001D088 135A 001C                  		move.b	(a2)+,$1C(a1)
0001D08C 135A 0018                  		move.b	(a2)+,$18(a1)
0001D090 237C 0000 EC22 0004        		move.l	#Map_obj32,4(a1)
0001D098 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001D09E 137C 0004 0001             		move.b	#4,1(a1)
0001D0A4 08E9 0007 0001             		bset	#7,1(a1)
0001D0AA 137C 0010 0019             		move.b	#$10,$19(a1)
0001D0B0 137C 0000 001A             		move.b	#0,$1A(a1)
0001D0B6                            
0001D0B6                            Obj82_Eggman:				; XREF: Obj82_Index
0001D0B6 7000                       		moveq	#0,d0
0001D0B8 1028 0025                  		move.b	$25(a0),d0
0001D0BC 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001D0C0 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001D0C4 43FA 0000                  		lea	Ani_obj82(pc),a1
0001D0C8 4EB9 0000 D0AC             		jsr	AnimateSprite
0001D0CE 4EF9 0001 0502             		jmp	DisplaySprite
0001D0D4                            ; ===========================================================================
0001D0D4 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001D0D6 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001D0D8 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001D0DA 0000                       		dc.w loc_19934-Obj82_EggIndex
0001D0DC                            ; ===========================================================================
0001D0DC                            
0001D0DC                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001D0DC 3028 0008                  		move.w	8(a0),d0
0001D0E0 9078 D008                  		sub.w	($FFFFD008).w,d0
0001D0E4 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001D0E8 6400                       		bcc.s	loc_19934	; if not, branch
0001D0EA 5428 0025                  		addq.b	#2,$25(a0)
0001D0EE 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001D0F4 117C 0001 001C             		move.b	#1,$1C(a0)
0001D0FA                            
0001D0FA                            loc_19934:				; XREF: Obj82_EggIndex
0001D0FA 4EF9 0001 04DC             		jmp	SpeedToPos
0001D100                            ; ===========================================================================
0001D100                            
0001D100                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001D100 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001D104 6600                       		bne.s	loc_19954	; if time remains, branch
0001D106 5428 0025                  		addq.b	#2,$25(a0)
0001D10A 117C 0002 001C             		move.b	#2,$1C(a0)
0001D110 5868 000C                  		addq.w	#4,$C(a0)
0001D114 317C 000F 003C             		move.w	#15,$3C(a0)
0001D11A                            
0001D11A                            loc_19954:
0001D11A 60DE                       		bra.s	loc_19934
0001D11C                            ; ===========================================================================
0001D11C                            
0001D11C                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001D11C 5368 003C                  		subq.w	#1,$3C(a0)
0001D120 6E00                       		bgt.s	loc_199D0
0001D122 6600                       		bne.s	loc_1996A
0001D124 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001D12A 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001D130                            
0001D130                            loc_1996A:
0001D130 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001D136 6E00                       		bgt.s	loc_19976
0001D138 4268 0010                  		clr.w	$10(a0)
0001D13C                            
0001D13C                            loc_19976:
0001D13C 0668 0024 0012             		addi.w	#$24,$12(a0)
0001D142 4A68 0012                  		tst.w	$12(a0)
0001D146 6B00                       		bmi.s	Obj82_FindBlocks
0001D148 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001D14E 6500                       		bcs.s	Obj82_FindBlocks
0001D150 317C 5357 0028             		move.w	#$5357,$28(a0)
0001D156 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001D15C 6500                       		bcs.s	Obj82_FindBlocks
0001D15E 317C 059B 000C             		move.w	#$59B,$C(a0)
0001D164 4268 0012                  		clr.w	$12(a0)
0001D168                            
0001D168                            Obj82_FindBlocks:
0001D168 3028 0010                  		move.w	$10(a0),d0
0001D16C 8068 0012                  		or.w	$12(a0),d0
0001D170 6600                       		bne.s	loc_199D0
0001D172 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001D176 703E                       		moveq	#$3E,d0
0001D178 7240                       		moveq	#$40,d1
0001D17A                            
0001D17A                            Obj82_FindLoop:	
0001D17A D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001D17C 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001D180 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001D184                            
0001D184 6600                       		bne.s	loc_199D0
0001D186 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001D18C 5428 0025                  		addq.b	#2,$25(a0)
0001D190 117C 0001 001C             		move.b	#1,$1C(a0)
0001D196                            
0001D196                            loc_199D0:
0001D196 6000 FF62                  		bra.w	loc_19934
0001D19A                            ; ===========================================================================
0001D19A                            
0001D19A                            Obj82_Switch:				; XREF: Obj82_Index
0001D19A 7000                       		moveq	#0,d0
0001D19C 1028 0025                  		move.b	$25(a0),d0
0001D1A0 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001D1A4 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001D1A8                            ; ===========================================================================
0001D1A8 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001D1AA 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001D1AC                            ; ===========================================================================
0001D1AC                            
0001D1AC                            loc_199E6:				; XREF: Obj82_SwIndex
0001D1AC 2268 0034                  		movea.l	$34(a0),a1
0001D1B0 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001D1B6 6600                       		bne.s	Obj82_SwDisplay
0001D1B8 117C 0001 001A             		move.b	#1,$1A(a0)
0001D1BE 5428 0025                  		addq.b	#2,$25(a0)
0001D1C2                            
0001D1C2                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001D1C2 4EF9 0001 0502             		jmp	DisplaySprite
0001D1C8                            ; ===========================================================================
0001D1C8                            Ani_obj82:
0001D1C8                            	include "_anim\obj82.asm"
0001D1C8                            ; ---------------------------------------------------------------------------
0001D1C8                            ; Animation script - Eggman (SBZ2)
0001D1C8                            ; ---------------------------------------------------------------------------
0001D1C8 0000                       		dc.w byte_19A10-Ani_obj82
0001D1CA 0000                       		dc.w byte_19A14-Ani_obj82
0001D1CC 0000                       		dc.w byte_19A18-Ani_obj82
0001D1CE 0000                       		dc.w byte_19A20-Ani_obj82
0001D1D0 0000                       		dc.w byte_19A24-Ani_obj82
0001D1D2 0000                       		dc.w byte_19A2A-Ani_obj82
0001D1D4 0000                       		dc.w byte_19A30-Ani_obj82
0001D1D6 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001D1DA 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001D1DE 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001D1E6 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001D1EA 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001D1F0 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001D1F6 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001D1FA                            		even
0001D1FA                            		even
0001D1FA                            
0001D1FA                            ; ---------------------------------------------------------------------------
0001D1FA                            ; Sprite mappings - Eggman (SBZ2)
0001D1FA                            ; ---------------------------------------------------------------------------
0001D1FA                            Map_obj82:
0001D1FA                            	include "_maps\obj82.asm"
0001D1FA                            ; ---------------------------------------------------------------------------
0001D1FA                            ; Sprite mappings - Eggman (SBZ2)
0001D1FA                            ; ---------------------------------------------------------------------------
0001D1FA 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001D1FE 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001D202 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001D206 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001D20A 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001D20E 0000                       		dc.w byte_19B4F-Map_obj82
0001D210 03                         byte_19A4A:	dc.b 3
0001D211 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001D216 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001D21B 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001D220 04                         byte_19A5A:	dc.b 4
0001D221 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001D226 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001D22B 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001D230 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001D235 00                         		dc.b 0
0001D236 04                         byte_19A70:	dc.b 4
0001D237 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001D23C E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001D241 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001D246 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001D24B 00                         		dc.b 0
0001D24C 04                         byte_19A86:	dc.b 4
0001D24D F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001D252 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001D257 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001D25C EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001D261 00                         		dc.b 0
0001D262 04                         byte_19A9C:	dc.b 4
0001D263 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001D268 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001D26D 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001D272 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001D277 00                         		dc.b 0
0001D278 04                         byte_19AB2:	dc.b 4
0001D279 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001D27E E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001D283 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001D288 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001D28D 00                         		dc.b 0
0001D28E 07                         byte_19AC8:	dc.b 7
0001D28F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001D294 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001D299 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001D29E 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001D2A3 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001D2A8 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001D2AD F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001D2B2 05                         byte_19AEC:	dc.b 5
0001D2B3 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001D2B8 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001D2BD 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001D2C2 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001D2C7 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001D2CC 06                         byte_19B06:	dc.b 6
0001D2CD EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001D2D2 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001D2D7 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001D2DC 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001D2E1 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001D2E6 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001D2EB 00                         		dc.b 0
0001D2EC 08                         byte_19B26:	dc.b 8
0001D2ED E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001D2F2 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001D2F7 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001D2FC 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001D301 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001D306 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001D30B 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001D310 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001D315 03                         byte_19B4F:	dc.b 3
0001D316 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001D31B F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001D320 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001D326 00                         		even
0001D326 00                         		even
0001D326                            
0001D326                            ; ===========================================================================
0001D326                            ; ---------------------------------------------------------------------------
0001D326                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001D326                            ; ---------------------------------------------------------------------------
0001D326                            
0001D326                            Obj83:					; XREF: Obj_Index
0001D326 7000                       		moveq	#0,d0
0001D328 1028 0024                  		move.b	$24(a0),d0
0001D32C 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001D330 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001D334                            ; ===========================================================================
0001D334 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001D336 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001D338 0000                       		dc.w loc_19C36-Obj83_Index
0001D33A 0000                       		dc.w loc_19C62-Obj83_Index
0001D33C 0000                       		dc.w loc_19C72-Obj83_Index
0001D33E 0000                       		dc.w loc_19C80-Obj83_Index
0001D340                            ; ===========================================================================
0001D340                            
0001D340                            Obj83_Main:				; XREF: Obj83_Index
0001D340 317C 2080 0008             		move.w	#$2080,8(a0)
0001D346 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001D34C 117C 0080 0019             		move.b	#$80,$19(a0)
0001D352 117C 0010 0016             		move.b	#$10,$16(a0)
0001D358 117C 0004 0001             		move.b	#4,1(a0)
0001D35E 08E8 0007 0001             		bset	#7,1(a0)
0001D364 7800                       		moveq	#0,d4
0001D366 3A3C 2010                  		move.w	#$2010,d5
0001D36A 7C07                       		moveq	#7,d6
0001D36C 45E8 0030                  		lea	$30(a0),a2
0001D370                            
0001D370                            Obj83_MakeBlock:
0001D370 4EB9 0001 0988             		jsr	SingleObjLoad
0001D376 6600                       		bne.s	Obj83_ExitMake
0001D378 34C9                       		move.w	a1,(a2)+
0001D37A 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001D37E 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001D386 337C 4518 0002             		move.w	#$4518,2(a1)
0001D38C 137C 0004 0001             		move.b	#4,1(a1)
0001D392 137C 0010 0019             		move.b	#$10,$19(a1)
0001D398 137C 0010 0016             		move.b	#$10,$16(a1)
0001D39E 137C 0003 0018             		move.b	#3,$18(a1)
0001D3A4 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001D3A8 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001D3AE 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001D3B2 137C 0008 0024             		move.b	#8,$24(a1)
0001D3B8 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001D3BC                            
0001D3BC                            Obj83_ExitMake:
0001D3BC 5428 0024                  		addq.b	#2,$24(a0)
0001D3C0 4E75                       		rts	
0001D3C2                            ; ===========================================================================
0001D3C2                            
0001D3C2                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001D3C2 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001D3C8 6600                       		bne.s	Obj83_Solid	; if not, branch
0001D3CA 4228 001A                  		clr.b	$1A(a0)
0001D3CE 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001D3D2                            
0001D3D2                            Obj83_Solid:
0001D3D2 7000                       		moveq	#0,d0
0001D3D4 1028 001A                  		move.b	$1A(a0),d0
0001D3D8 4400                       		neg.b	d0
0001D3DA 4880                       		ext.w	d0
0001D3DC 5040                       		addq.w	#8,d0
0001D3DE E940                       		asl.w	#4,d0
0001D3E0 383C 2100                  		move.w	#$2100,d4
0001D3E4 9840                       		sub.w	d0,d4
0001D3E6 1140 0019                  		move.b	d0,$19(a0)
0001D3EA 3144 0008                  		move.w	d4,8(a0)
0001D3EE 720B                       		moveq	#$B,d1
0001D3F0 D240                       		add.w	d0,d1
0001D3F2 7410                       		moveq	#$10,d2
0001D3F4 7611                       		moveq	#$11,d3
0001D3F6 4EF9 0001 29EE             		jmp	SolidObject
0001D3FC                            ; ===========================================================================
0001D3FC                            
0001D3FC                            loc_19C36:				; XREF: Obj83_Index
0001D3FC 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001D402 6400                       		bcc.s	Obj83_Solid2
0001D404 70FF                       		moveq	#-1,d0
0001D406 1028 001A                  		move.b	$1A(a0),d0
0001D40A 4880                       		ext.w	d0
0001D40C D040                       		add.w	d0,d0
0001D40E 3030 0030                  		move.w	$30(a0,d0.w),d0
0001D412 2240                       		movea.l	d0,a1
0001D414 337C 474F 0028             		move.w	#$474F,$28(a1)
0001D41A 5228 001A                  		addq.b	#1,$1A(a0)
0001D41E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001D424 6700                       		beq.s	loc_19C62
0001D426                            
0001D426                            Obj83_Solid2:
0001D426 60AA                       		bra.s	Obj83_Solid
0001D428                            ; ===========================================================================
0001D428                            
0001D428                            loc_19C62:				; XREF: Obj83_Index
0001D428 08A8 0003 0022             		bclr	#3,$22(a0)
0001D42E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001D434 6000 FBBC                  		bra.w	loc_1982C
0001D438                            ; ===========================================================================
0001D438                            
0001D438                            loc_19C72:				; XREF: Obj83_Index
0001D438 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001D43E 6700                       		beq.s	Obj83_Break	; if yes, branch
0001D440 4EF9 0001 0502             		jmp	DisplaySprite
0001D446                            ; ===========================================================================
0001D446                            
0001D446                            loc_19C80:				; XREF: Obj83_Index
0001D446 4A28 0001                  		tst.b	1(a0)
0001D44A 6A00 FBA6                  		bpl.w	loc_1982C
0001D44E 4EB9 0001 0484             		jsr	ObjectFall
0001D454 4EF9 0001 0502             		jmp	DisplaySprite
0001D45A                            ; ===========================================================================
0001D45A                            
0001D45A                            Obj83_Break:				; XREF: loc_19C72
0001D45A 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001D45E 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001D462 7801                       		moveq	#1,d4
0001D464 7203                       		moveq	#3,d1
0001D466 7438                       		moveq	#$38,d2
0001D468 5428 0024                  		addq.b	#2,$24(a0)
0001D46C 117C 0008 0019             		move.b	#8,$19(a0)
0001D472 117C 0008 0016             		move.b	#8,$16(a0)
0001D478 43D0                       		lea	(a0),a1
0001D47A 6000                       		bra.s	Obj83_MakeFrag
0001D47C                            ; ===========================================================================
0001D47C                            
0001D47C                            Obj83_LoopFrag:
0001D47C 4EB9 0001 099E             		jsr	SingleObjLoad2
0001D482 6600                       		bne.s	Obj83_BreakSnd
0001D484                            
0001D484                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001D484 45D0                       		lea	(a0),a2
0001D486 47D1                       		lea	(a1),a3
0001D488 7603                       		moveq	#3,d3
0001D48A                            
0001D48A                            loc_19CC4:
0001D48A 26DA                       		move.l	(a2)+,(a3)+
0001D48C 26DA                       		move.l	(a2)+,(a3)+
0001D48E 26DA                       		move.l	(a2)+,(a3)+
0001D490 26DA                       		move.l	(a2)+,(a3)+
0001D492 51CB FFF6                  		dbf	d3,loc_19CC4
0001D496                            
0001D496 335C 0012                  		move.w	(a4)+,$12(a1)
0001D49A 361D                       		move.w	(a5)+,d3
0001D49C D769 0008                  		add.w	d3,8(a1)
0001D4A0 361D                       		move.w	(a5)+,d3
0001D4A2 D769 000C                  		add.w	d3,$C(a1)
0001D4A6 1344 001A                  		move.b	d4,$1A(a1)
0001D4AA 5244                       		addq.w	#1,d4
0001D4AC 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001D4B0                            
0001D4B0                            Obj83_BreakSnd:
0001D4B0 303C 00CB                  		move.w	#$CB,d0
0001D4B4 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play smashing sound
0001D4BA 4EF9 0001 0502             		jmp	DisplaySprite
0001D4C0                            ; ===========================================================================
0001D4C0 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001D4C4 0120 00C0                  		dc.w $120, $C0
0001D4C8 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001D4CC 0010 0000                  		dc.w $10, 0
0001D4D0 0000 0010                  		dc.w 0,	$10
0001D4D4 0010 0010                  		dc.w $10, $10
0001D4D8                            ; ---------------------------------------------------------------------------
0001D4D8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001D4D8                            ; ---------------------------------------------------------------------------
0001D4D8                            Map_obj83:
0001D4D8                            	include "_maps\obj83.asm"
0001D4D8                            ; ---------------------------------------------------------------------------
0001D4D8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001D4D8                            ; ---------------------------------------------------------------------------
0001D4D8 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001D4DC 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001D4E0 0000                       		dc.w byte_19D46-Map_obj83
0001D4E2 01                         byte_19D1C:	dc.b 1
0001D4E3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001D4E8 02                         byte_19D22:	dc.b 2
0001D4E9 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001D4EE F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001D4F3 00                         		dc.b 0
0001D4F4 02                         byte_19D2E:	dc.b 2
0001D4F5 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001D4FA F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001D4FF 00                         		dc.b 0
0001D500 02                         byte_19D3A:	dc.b 2
0001D501 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001D506 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001D50B 00                         		dc.b 0
0001D50C 02                         byte_19D46:	dc.b 2
0001D50D F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001D512 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001D518 00                         		even
0001D518 00                         		even
0001D518                            
0001D518                            ; ===========================================================================
0001D518                            ; ---------------------------------------------------------------------------
0001D518                            ; Object 85 - Eggman (FZ)
0001D518                            ; ---------------------------------------------------------------------------
0001D518                            
0001D518                            Obj85_Delete:
0001D518 4EF9 0001 053E             		jmp	DeleteObject
0001D51E                            ; ===========================================================================
0001D51E                            
0001D51E                            Obj85:					; XREF: Obj_Index
0001D51E 7000                       		moveq	#0,d0
0001D520 1028 0024                  		move.b	$24(a0),d0
0001D524 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001D528 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001D52C                            ; ===========================================================================
0001D52C 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001D52E 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001D530 0000                       		dc.w loc_1A38E-Obj85_Index
0001D532 0000                       		dc.w loc_1A346-Obj85_Index
0001D534 0000                       		dc.w loc_1A2C6-Obj85_Index
0001D536 0000                       		dc.w loc_1A3AC-Obj85_Index
0001D538 0000                       		dc.w loc_1A264-Obj85_Index
0001D53A                            
0001D53A 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001D540 0001 D1FA                  		dc.l Map_obj82		; mappings pointer
0001D544 25B0 0590 0300             		dc.w $25B0, $590, $300
0001D54A 0000 0000                  		dc.l Map_obj84
0001D54E 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001D554 0000 0000                  		dc.l Map_FZBoss
0001D558 26E0 0596 0470             		dc.w $26E0, $596, $470
0001D55E 0001 D1FA                  		dc.l Map_obj82
0001D562 26E0 0596 0400             		dc.w $26E0, $596, $400
0001D568 0001 B4DC                  		dc.l Map_Eggman
0001D56C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001D572 0001 B4DC                  		dc.l Map_Eggman
0001D576                            
0001D576 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001D57B 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001D580 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001D585 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001D58A 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001D58F 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001D594                            ; ===========================================================================
0001D594                            
0001D594                            Obj85_Main:				; XREF: Obj85_Index
0001D594 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001D598 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001D59C 2248                       		movea.l	a0,a1
0001D59E 7205                       		moveq	#5,d1
0001D5A0 6000                       		bra.s	Obj85_LoadBoss
0001D5A2                            ; ===========================================================================
0001D5A2                            
0001D5A2                            Obj85_Loop:
0001D5A2 4EB9 0001 099E             		jsr	SingleObjLoad2
0001D5A8 6600                       		bne.s	loc_19E20
0001D5AA                            
0001D5AA                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001D5AA 12BC 0085                  		move.b	#$85,(a1)
0001D5AE 335A 0008                  		move.w	(a2)+,8(a1)
0001D5B2 335A 000C                  		move.w	(a2)+,$C(a1)
0001D5B6 335A 0002                  		move.w	(a2)+,2(a1)
0001D5BA 235A 0004                  		move.l	(a2)+,4(a1)
0001D5BE 135B 0024                  		move.b	(a3)+,$24(a1)
0001D5C2 135B 001C                  		move.b	(a3)+,$1C(a1)
0001D5C6 135B 0018                  		move.b	(a3)+,$18(a1)
0001D5CA 135B 0017                  		move.b	(a3)+,$17(a1)
0001D5CE 135B 0016                  		move.b	(a3)+,$16(a1)
0001D5D2 137C 0004 0001             		move.b	#4,1(a1)
0001D5D8 08E8 0007 0001             		bset	#7,1(a0)
0001D5DE 2348 0034                  		move.l	a0,$34(a1)
0001D5E2 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001D5E6                            
0001D5E6                            loc_19E20:
0001D5E6 45E8 0036                  		lea	$36(a0),a2
0001D5EA 4EB9 0001 0988             		jsr	SingleObjLoad
0001D5F0 6600                       		bne.s	loc_19E5A
0001D5F2 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001D5F6 3489                       		move.w	a1,(a2)
0001D5F8 2348 0034                  		move.l	a0,$34(a1)
0001D5FC 45E8 0038                  		lea	$38(a0),a2
0001D600 7400                       		moveq	#0,d2
0001D602 7203                       		moveq	#3,d1
0001D604                            
0001D604                            loc_19E3E:
0001D604 4EB9 0001 099E             		jsr	SingleObjLoad2
0001D60A 6600                       		bne.s	loc_19E5A
0001D60C 34C9                       		move.w	a1,(a2)+
0001D60E 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001D612 2348 0034                  		move.l	a0,$34(a1)
0001D616 1342 0028                  		move.b	d2,$28(a1)
0001D61A 5442                       		addq.w	#2,d2
0001D61C 51C9 FFE6                  		dbf	d1,loc_19E3E
0001D620                            
0001D620                            loc_19E5A:
0001D620 317C 0000 0034             		move.w	#0,$34(a0)
0001D626 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001D62C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D632                            
0001D632                            Obj85_Eggman:				; XREF: Obj85_Index
0001D632 7000                       		moveq	#0,d0
0001D634 1028 0034                  		move.b	$34(a0),d0
0001D638 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001D63C 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001D640 4EF9 0001 0502             		jmp	DisplaySprite
0001D646                            ; ===========================================================================
0001D646 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001D64A 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001D64E 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001D652 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001D656                            ; ===========================================================================
0001D656                            
0001D656                            loc_19E90:				; XREF: off_19E80
0001D656 4AB8 F680                  		tst.l	($FFFFF680).w
0001D65A 6600                       		bne.s	loc_19EA2
0001D65C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001D662 6500                       		bcs.s	loc_19EA2
0001D664 5428 0034                  		addq.b	#2,$34(a0)
0001D668                            
0001D668                            loc_19EA2:
0001D668 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001D66C 4E75                       		rts	
0001D66E                            ; ===========================================================================
0001D66E                            
0001D66E                            loc_19EA8:				; XREF: off_19E80
0001D66E 4A68 0030                  		tst.w	$30(a0)
0001D672 6A00                       		bpl.s	loc_19F10
0001D674 4268 0030                  		clr.w	$30(a0)
0001D678 4EB9 0000 3772             		jsr	(RandomNumber).l
0001D67E 0240 000C                  		andi.w	#$C,d0
0001D682 3200                       		move.w	d0,d1
0001D684 5441                       		addq.w	#2,d1
0001D686 4A80                       		tst.l	d0
0001D688 6A00                       		bpl.s	loc_19EC6
0001D68A C141                       		exg	d1,d0
0001D68C                            
0001D68C                            loc_19EC6:
0001D68C 43FA 0000                  		lea	word_19FD6(pc),a1
0001D690 3031 0000                  		move.w	(a1,d0.w),d0
0001D694 3231 1000                  		move.w	(a1,d1.w),d1
0001D698 3140 0030                  		move.w	d0,$30(a0)
0001D69C 74FF                       		moveq	#-1,d2
0001D69E 3430 0038                  		move.w	$38(a0,d0.w),d2
0001D6A2 2242                       		movea.l	d2,a1
0001D6A4 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D6AA 337C FFFF 0030             		move.w	#-1,$30(a1)
0001D6B0 3430 1038                  		move.w	$38(a0,d1.w),d2
0001D6B4 2242                       		movea.l	d2,a1
0001D6B6 137C 0001 0029             		move.b	#1,$29(a1)
0001D6BC 337C 0000 0030             		move.w	#0,$30(a1)
0001D6C2 317C 0001 0032             		move.w	#1,$32(a0)
0001D6C8 4228 0035                  		clr.b	$35(a0)
0001D6CC 303C 00B7                  		move.w	#$B7,d0
0001D6D0 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001D6D6                            
0001D6D6                            loc_19F10:
0001D6D6 4A68 0032                  		tst.w	$32(a0)
0001D6DA 6B00 0000                  		bmi.w	loc_19FA6
0001D6DE 08A8 0000 0022             		bclr	#0,$22(a0)
0001D6E4 3038 D008                  		move.w	($FFFFD008).w,d0
0001D6E8 9068 0008                  		sub.w	8(a0),d0
0001D6EC 6500                       		bcs.s	loc_19F2E
0001D6EE 08E8 0000 0022             		bset	#0,$22(a0)
0001D6F4                            
0001D6F4                            loc_19F2E:
0001D6F4 323C 002B                  		move.w	#$2B,d1
0001D6F8 343C 0014                  		move.w	#$14,d2
0001D6FC 363C 0014                  		move.w	#$14,d3
0001D700 3828 0008                  		move.w	8(a0),d4
0001D704 4EB9 0001 29EE             		jsr	SolidObject
0001D70A 4A44                       		tst.w	d4
0001D70C 6E00                       		bgt.s	loc_19F50
0001D70E                            
0001D70E                            loc_19F48:
0001D70E 4A28 0035                  		tst.b	$35(a0)
0001D712 6600                       		bne.s	loc_19F88
0001D714 6000                       		bra.s	loc_19F96
0001D716                            ; ===========================================================================
0001D716                            
0001D716                            loc_19F50:
0001D716 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001D71A 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001D720 66EC                       		bne.s	loc_19F48
0001D722 303C 0300                  		move.w	#$300,d0
0001D726 0828 0000 0022             		btst	#0,$22(a0)
0001D72C 6600                       		bne.s	loc_19F6A
0001D72E 4440                       		neg.w	d0
0001D730                            
0001D730                            loc_19F6A:
0001D730 31C0 D010                  		move.w	d0,($FFFFD010).w
0001D734 4A28 0035                  		tst.b	$35(a0)
0001D738 6600                       		bne.s	loc_19F88
0001D73A 5328 0021                  		subq.b	#1,$21(a0)
0001D73E 117C 0064 0035             		move.b	#$64,$35(a0)
0001D744 303C 00AC                  		move.w	#$AC,d0
0001D748 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001D74E                            
0001D74E                            loc_19F88:
0001D74E 5328 0035                  		subq.b	#1,$35(a0)
0001D752 6700                       		beq.s	loc_19F96
0001D754 117C 0003 001C             		move.b	#3,$1C(a0)
0001D75A 6000                       		bra.s	loc_19F9C
0001D75C                            ; ===========================================================================
0001D75C                            
0001D75C                            loc_19F96:
0001D75C 117C 0001 001C             		move.b	#1,$1C(a0)
0001D762                            
0001D762                            loc_19F9C:
0001D762 43FA FA64                  		lea	Ani_obj82(pc),a1
0001D766 4EF9 0000 D0AC             		jmp	AnimateSprite
0001D76C                            ; ===========================================================================
0001D76C                            
0001D76C                            loc_19FA6:
0001D76C 4A28 0021                  		tst.b	$21(a0)
0001D770 6700                       		beq.s	loc_19FBC
0001D772 5428 0034                  		addq.b	#2,$34(a0)
0001D776 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D77C 4268 0032                  		clr.w	$32(a0)
0001D780 4E75                       		rts	
0001D782                            ; ===========================================================================
0001D782                            
0001D782                            loc_19FBC:
0001D782 117C 0006 0034             		move.b	#6,$34(a0)
0001D788 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001D78E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001D794 117C 0014 0016             		move.b	#$14,$16(a0)
0001D79A 4E75                       		rts	
0001D79C                            ; ===========================================================================
0001D79C 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001D7AC                            ; ===========================================================================
0001D7AC                            
0001D7AC                            loc_19FE6:				; XREF: off_19E80
0001D7AC 70FF                       		moveq	#-1,d0
0001D7AE 3028 0036                  		move.w	$36(a0),d0
0001D7B2 2240                       		movea.l	d0,a1
0001D7B4 4A68 0030                  		tst.w	$30(a0)
0001D7B8 6A00                       		bpl.s	loc_1A000
0001D7BA 4268 0030                  		clr.w	$30(a0)
0001D7BE 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D7C4 6100                       		bsr.s	loc_1A020
0001D7C6                            
0001D7C6                            loc_1A000:
0001D7C6 700F                       		moveq	#$F,d0
0001D7C8 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001D7CC 6600                       		bne.s	loc_1A00A
0001D7CE 6100                       		bsr.s	loc_1A020
0001D7D0                            
0001D7D0                            loc_1A00A:
0001D7D0 4A68 0032                  		tst.w	$32(a0)
0001D7D4 6700                       		beq.s	locret_1A01E
0001D7D6 5528 0034                  		subq.b	#2,$34(a0)
0001D7DA 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D7E0 4268 0032                  		clr.w	$32(a0)
0001D7E4                            
0001D7E4                            locret_1A01E:
0001D7E4 4E75                       		rts	
0001D7E6                            ; ===========================================================================
0001D7E6                            
0001D7E6                            loc_1A020:
0001D7E6 303C 00B1                  		move.w	#$B1,d0
0001D7EA 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play electricity sound
0001D7F0                            ; ===========================================================================
0001D7F0                            
0001D7F0                            loc_1A02A:				; XREF: off_19E80
0001D7F0 117C 0030 0017             		move.b	#$30,$17(a0)
0001D7F6 08E8 0000 0022             		bset	#0,$22(a0)
0001D7FC 4EB9 0001 04DC             		jsr	SpeedToPos
0001D802 117C 0006 001A             		move.b	#6,$1A(a0)
0001D808 0668 0010 0012             		addi.w	#$10,$12(a0)
0001D80E 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001D814 6500                       		bcs.s	loc_1A070
0001D816 317C 059C 000C             		move.w	#$59C,$C(a0)
0001D81C 5428 0034                  		addq.b	#2,$34(a0)
0001D820 117C 0020 0017             		move.b	#$20,$17(a0)
0001D826 317C 0100 0010             		move.w	#$100,$10(a0)
0001D82C 317C FF00 0012             		move.w	#-$100,$12(a0)
0001D832 5438 F742                  		addq.b	#2,($FFFFF742).w
0001D836                            
0001D836                            loc_1A070:
0001D836 6000 0000                  		bra.w	loc_1A166
0001D83A                            ; ===========================================================================
0001D83A                            
0001D83A                            loc_1A074:				; XREF: off_19E80
0001D83A 08E8 0000 0022             		bset	#0,$22(a0)
0001D840 117C 0004 001C             		move.b	#4,$1C(a0)
0001D846 4EB9 0001 04DC             		jsr	SpeedToPos
0001D84C 0668 0010 0012             		addi.w	#$10,$12(a0)
0001D852 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001D858 6500                       		bcs.s	loc_1A09A
0001D85A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001D860                            
0001D860                            loc_1A09A:
0001D860 317C 0400 0010             		move.w	#$400,$10(a0)
0001D866 3028 0008                  		move.w	8(a0),d0
0001D86A 9078 D008                  		sub.w	($FFFFD008).w,d0
0001D86E 6A00                       		bpl.s	loc_1A0B4
0001D870 317C 0500 0010             		move.w	#$500,$10(a0)
0001D876 6000 0000                  		bra.w	loc_1A0F2
0001D87A                            ; ===========================================================================
0001D87A                            
0001D87A                            loc_1A0B4:
0001D87A 0440 0070                  		subi.w	#$70,d0
0001D87E 6500                       		bcs.s	loc_1A0F2
0001D880 0468 0100 0010             		subi.w	#$100,$10(a0)
0001D886 5140                       		subq.w	#8,d0
0001D888 6500                       		bcs.s	loc_1A0F2
0001D88A 0468 0100 0010             		subi.w	#$100,$10(a0)
0001D890 5140                       		subq.w	#8,d0
0001D892 6500                       		bcs.s	loc_1A0F2
0001D894 0468 0080 0010             		subi.w	#$80,$10(a0)
0001D89A 5140                       		subq.w	#8,d0
0001D89C 6500                       		bcs.s	loc_1A0F2
0001D89E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001D8A4 5140                       		subq.w	#8,d0
0001D8A6 6500                       		bcs.s	loc_1A0F2
0001D8A8 0468 0080 0010             		subi.w	#$80,$10(a0)
0001D8AE 0440 0038                  		subi.w	#$38,d0
0001D8B2 6500                       		bcs.s	loc_1A0F2
0001D8B4 4268 0010                  		clr.w	$10(a0)
0001D8B8                            
0001D8B8                            loc_1A0F2:
0001D8B8 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001D8BE 6500                       		bcs.s	loc_1A110
0001D8C0 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001D8C6 317C 0240 0010             		move.w	#$240,$10(a0)
0001D8CC 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001D8D2 5428 0034                  		addq.b	#2,$34(a0)
0001D8D6                            
0001D8D6                            loc_1A110:
0001D8D6 6000                       		bra.s	loc_1A15C
0001D8D8                            ; ===========================================================================
0001D8D8                            
0001D8D8                            loc_1A112:				; XREF: off_19E80
0001D8D8 4EB9 0001 04DC             		jsr	SpeedToPos
0001D8DE 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001D8E4 6500                       		bcs.s	loc_1A124
0001D8E6 4268 0010                  		clr.w	$10(a0)
0001D8EA                            
0001D8EA                            loc_1A124:
0001D8EA 0668 0034 0012             		addi.w	#$34,$12(a0)
0001D8F0 4A68 0012                  		tst.w	$12(a0)
0001D8F4 6B00                       		bmi.s	loc_1A142
0001D8F6 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001D8FC 6500                       		bcs.s	loc_1A142
0001D8FE 317C 0592 000C             		move.w	#$592,$C(a0)
0001D904 4268 0012                  		clr.w	$12(a0)
0001D908                            
0001D908                            loc_1A142:
0001D908 3028 0010                  		move.w	$10(a0),d0
0001D90C 8068 0012                  		or.w	$12(a0),d0
0001D910 6600                       		bne.s	loc_1A15C
0001D912 5428 0034                  		addq.b	#2,$34(a0)
0001D916 317C FE80 0012             		move.w	#-$180,$12(a0)
0001D91C 117C 0001 0021             		move.b	#1,$21(a0)
0001D922                            
0001D922                            loc_1A15C:
0001D922 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001D926 4EB9 0000 D0AC             		jsr	AnimateSprite
0001D92C                            
0001D92C                            loc_1A166:
0001D92C 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001D932 6C00                       		bge.s	loc_1A172
0001D934 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001D938                            
0001D938                            loc_1A172:
0001D938 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D93E 6C00                       		bge.s	locret_1A190
0001D940 323C 001B                  		move.w	#$1B,d1
0001D944 343C 0070                  		move.w	#$70,d2
0001D948 363C 0071                  		move.w	#$71,d3
0001D94C 3828 0008                  		move.w	8(a0),d4
0001D950 4EF9 0001 29EE             		jmp	SolidObject
0001D956                            ; ===========================================================================
0001D956                            
0001D956                            locret_1A190:
0001D956 4E75                       		rts	
0001D958                            ; ===========================================================================
0001D958                            
0001D958                            loc_1A192:				; XREF: off_19E80
0001D958 217C 0001 B4DC 0004        		move.l	#Map_Eggman,4(a0)
0001D960 317C 0400 0002             		move.w	#$400,2(a0)
0001D966 117C 0000 001C             		move.b	#0,$1C(a0)
0001D96C 08E8 0000 0022             		bset	#0,$22(a0)
0001D972 4EB9 0001 04DC             		jsr	SpeedToPos
0001D978 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001D97E 6400                       		bcc.s	loc_1A1D0
0001D980 317C 0180 0010             		move.w	#$180,$10(a0)
0001D986 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001D98C 117C 000F 0020             		move.b	#$F,$20(a0)
0001D992 5428 0034                  		addq.b	#2,$34(a0)
0001D996                            
0001D996                            loc_1A1D0:
0001D996 6000 FF8A                  		bra.w	loc_1A15C
0001D99A                            ; ===========================================================================
0001D99A                            
0001D99A                            loc_1A1D4:				; XREF: off_19E80
0001D99A 08E8 0000 0022             		bset	#0,$22(a0)
0001D9A0 4EB9 0001 04DC             		jsr	SpeedToPos
0001D9A6 4A68 0030                  		tst.w	$30(a0)
0001D9AA 6600                       		bne.s	loc_1A1FC
0001D9AC 4A28 0020                  		tst.b	$20(a0)
0001D9B0 6600                       		bne.s	loc_1A216
0001D9B2 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D9B8 303C 00AC                  		move.w	#$AC,d0
0001D9BC 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001D9C2                            
0001D9C2                            loc_1A1FC:
0001D9C2 5368 0030                  		subq.w	#1,$30(a0)
0001D9C6 6600                       		bne.s	loc_1A216
0001D9C8 4A28 0022                  		tst.b	$22(a0)
0001D9CC 6A00                       		bpl.s	loc_1A210
0001D9CE 317C 0060 0012             		move.w	#$60,$12(a0)
0001D9D4 6000                       		bra.s	loc_1A216
0001D9D6                            ; ===========================================================================
0001D9D6                            
0001D9D6                            loc_1A210:
0001D9D6 117C 000F 0020             		move.b	#$F,$20(a0)
0001D9DC                            
0001D9DC                            loc_1A216:
0001D9DC 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001D9E2 6D00                       		blt.s	loc_1A23A
0001D9E4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001D9EA 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001D9F0 4278 D014                  		clr.w	($FFFFD014).w
0001D9F4 4A68 0012                  		tst.w	$12(a0)
0001D9F8 6A00                       		bpl.s	loc_1A248
0001D9FA 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001DA00                            
0001DA00                            loc_1A23A:
0001DA00 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001DA06 6D00                       		blt.s	loc_1A248
0001DA08 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001DA0E                            
0001DA0E                            loc_1A248:
0001DA0E 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001DA14 6500                       		bcs.s	loc_1A260
0001DA16 4A28 0001                  		tst.b	1(a0)
0001DA1A 6B00                       		bmi.s	loc_1A260
0001DA1C 11FC 0018 FF94             		move.b	#$18,($FFFFFF94).w
0001DA22 6000 FAF4                  		bra.w	Obj85_Delete
0001DA26                            ; ===========================================================================
0001DA26                            
0001DA26                            loc_1A260:
0001DA26 6000 FEFA                  		bra.w	loc_1A15C
0001DA2A                            ; ===========================================================================
0001DA2A                            
0001DA2A                            loc_1A264:				; XREF: Obj85_Index
0001DA2A 2268 0034                  		movea.l	$34(a0),a1
0001DA2E 1011                       		move.b	(a1),d0
0001DA30 B010                       		cmp.b	(a0),d0
0001DA32 6600 FAE4                  		bne.w	Obj85_Delete
0001DA36 117C 0007 001C             		move.b	#7,$1C(a0)
0001DA3C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001DA42 6C00                       		bge.s	loc_1A280
0001DA44 6000                       		bra.s	loc_1A2A6
0001DA46                            ; ===========================================================================
0001DA46                            
0001DA46                            loc_1A280:
0001DA46 4A69 0010                  		tst.w	$10(a1)
0001DA4A 6700                       		beq.s	loc_1A28C
0001DA4C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001DA52                            
0001DA52                            loc_1A28C:
0001DA52 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001DA56 4EB9 0000 D0AC             		jsr	AnimateSprite
0001DA5C                            
0001DA5C                            loc_1A296:
0001DA5C 2268 0034                  		movea.l	$34(a0),a1
0001DA60 3169 0008 0008             		move.w	8(a1),8(a0)
0001DA66 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001DA6C                            
0001DA6C                            loc_1A2A6:
0001DA6C 2268 0034                  		movea.l	$34(a0),a1
0001DA70 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001DA76 7003                       		moveq	#3,d0
0001DA78 C028 0022                  		and.b	$22(a0),d0
0001DA7C 0228 00FC 0001             		andi.b	#-4,1(a0)
0001DA82 8128 0001                  		or.b	d0,1(a0)
0001DA86 4EF9 0001 0502             		jmp	DisplaySprite
0001DA8C                            ; ===========================================================================
0001DA8C                            
0001DA8C                            loc_1A2C6:				; XREF: Obj85_Index
0001DA8C 2268 0034                  		movea.l	$34(a0),a1
0001DA90 1011                       		move.b	(a1),d0
0001DA92 B010                       		cmp.b	(a0),d0
0001DA94 6600 FA82                  		bne.w	Obj85_Delete
0001DA98 0CA9 0001 B4DC 0004        		cmpi.l	#Map_Eggman,4(a1)
0001DAA0 6700                       		beq.s	loc_1A2E4
0001DAA2 117C 000A 001A             		move.b	#$A,$1A(a0)
0001DAA8 60C2                       		bra.s	loc_1A2A6
0001DAAA                            ; ===========================================================================
0001DAAA                            
0001DAAA                            loc_1A2E4:
0001DAAA 117C 0001 001C             		move.b	#1,$1C(a0)
0001DAB0 4A29 0021                  		tst.b	$21(a1)
0001DAB4 6F00                       		ble.s	loc_1A312
0001DAB6 117C 0006 001C             		move.b	#6,$1C(a0)
0001DABC 217C 0001 B4DC 0004        		move.l	#Map_Eggman,4(a0)
0001DAC4 317C 0400 0002             		move.w	#$400,2(a0)
0001DACA 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001DACE 4EB9 0000 D0AC             		jsr	AnimateSprite
0001DAD4 6000 FF86                  		bra.w	loc_1A296
0001DAD8                            ; ===========================================================================
0001DAD8                            
0001DAD8                            loc_1A312:
0001DAD8 4A28 0001                  		tst.b	1(a0)
0001DADC 6A00 FA3A                  		bpl.w	Obj85_Delete
0001DAE0 6100 D558                  		bsr.w	BossDefeated
0001DAE4 117C 0002 0018             		move.b	#2,$18(a0)
0001DAEA 117C 0000 001C             		move.b	#0,$1C(a0)
0001DAF0 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001DAF8 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001DAFE 43FA 0000                  		lea	Ani_obj85(pc),a1
0001DB02 4EB9 0000 D0AC             		jsr	AnimateSprite
0001DB08 6000 FF52                  		bra.w	loc_1A296
0001DB0C                            ; ===========================================================================
0001DB0C                            
0001DB0C                            loc_1A346:				; XREF: Obj85_Index
0001DB0C 08E8 0000 0022             		bset	#0,$22(a0)
0001DB12 2268 0034                  		movea.l	$34(a0),a1
0001DB16 0CA9 0001 B4DC 0004        		cmpi.l	#Map_Eggman,4(a1)
0001DB1E 6700                       		beq.s	loc_1A35E
0001DB20 6000 FF4A                  		bra.w	loc_1A2A6
0001DB24                            ; ===========================================================================
0001DB24                            
0001DB24                            loc_1A35E:
0001DB24 3169 0008 0008             		move.w	8(a1),8(a0)
0001DB2A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001DB30 4A28 001E                  		tst.b	$1E(a0)
0001DB34 6600                       		bne.s	loc_1A376
0001DB36 117C 0014 001E             		move.b	#$14,$1E(a0)
0001DB3C                            
0001DB3C                            loc_1A376:
0001DB3C 5328 001E                  		subq.b	#1,$1E(a0)
0001DB40 6E00                       		bgt.s	loc_1A38A
0001DB42 5228 001A                  		addq.b	#1,$1A(a0)
0001DB46 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001DB4C 6E00 F9CA                  		bgt.w	Obj85_Delete
0001DB50                            
0001DB50                            loc_1A38A:
0001DB50 6000 FF0A                  		bra.w	loc_1A296
0001DB54                            ; ===========================================================================
0001DB54                            
0001DB54                            loc_1A38E:				; XREF: Obj85_Index
0001DB54 117C 000B 001A             		move.b	#$B,$1A(a0)
0001DB5A 3038 D008                  		move.w	($FFFFD008).w,d0
0001DB5E 9068 0008                  		sub.w	8(a0),d0
0001DB62 6500                       		bcs.s	loc_1A3A6
0001DB64 4A28 0001                  		tst.b	1(a0)
0001DB68 6A00 F9AE                  		bpl.w	Obj85_Delete
0001DB6C                            
0001DB6C                            loc_1A3A6:
0001DB6C 4EF9 0001 0502             		jmp	DisplaySprite
0001DB72                            ; ===========================================================================
0001DB72                            
0001DB72                            loc_1A3AC:				; XREF: Obj85_Index
0001DB72 117C 0000 001A             		move.b	#0,$1A(a0)
0001DB78 08E8 0000 0022             		bset	#0,$22(a0)
0001DB7E 2268 0034                  		movea.l	$34(a0),a1
0001DB82 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001DB88 6600                       		bne.s	loc_1A3D0
0001DB8A 0CA9 0001 B4DC 0004        		cmpi.l	#Map_Eggman,4(a1)
0001DB92 6700 F984                  		beq.w	Obj85_Delete
0001DB96                            
0001DB96                            loc_1A3D0:
0001DB96 6000 FED4                  		bra.w	loc_1A2A6
0001DB9A                            ; ===========================================================================
0001DB9A                            Ani_obj85:
0001DB9A                            	include "_anim\obj85.asm"
0001DB9A                            ; ---------------------------------------------------------------------------
0001DB9A                            ; Animation script - Eggman (FZ)
0001DB9A                            ; ---------------------------------------------------------------------------
0001DB9A 0000                       		dc.w byte_1A3D6-Ani_obj85
0001DB9C 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001DBA0                            		even
0001DBA0                            		even
0001DBA0                            
0001DBA0                            Map_Eggman2:
0001DBA0                            	include "_maps\Eggman2.asm"
0001DBA0                            ; ---------------------------------------------------------------------------
0001DBA0                            ; Sprite mappings - Eggman (FZ)
0001DBA0                            ; ---------------------------------------------------------------------------
0001DBA0 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001DBA2 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001DBA4 06                         byte_1A3DE:	dc.b 6
0001DBA5 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001DBAA EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001DBAF EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001DBB4 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001DBB9 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001DBBE 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001DBC3 06                         byte_1A3FD:	dc.b 6
0001DBC4 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001DBC9 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001DBCE EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001DBD3 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001DBD8 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001DBDD 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001DBE2                            		even
0001DBE2                            		even
0001DBE2                            
0001DBE2                            Map_FZBoss:
0001DBE2                            	include "_maps\FZ boss.asm"
0001DBE2                            ; ---------------------------------------------------------------------------
0001DBE2                            ; Sprite mappings - boss (FZ)
0001DBE2                            ; ---------------------------------------------------------------------------
0001DBE2 0000                       		dc.w byte_1A422-Map_FZBoss
0001DBE4 0000                       		dc.w byte_1A42D-Map_FZBoss
0001DBE6 0000                       		dc.w byte_1A43D-Map_FZBoss
0001DBE8 02                         byte_1A422:	dc.b 2
0001DBE9 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001DBEE 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001DBF3 03                         byte_1A42D:	dc.b 3
0001DBF4 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001DBF9 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001DBFE 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001DC03 02                         byte_1A43D:	dc.b 2
0001DC04 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001DC09 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001DC0E                            		even
0001DC0E                            		even
0001DC0E                            
0001DC0E                            ; ===========================================================================
0001DC0E                            
0001DC0E                            Obj84_Delete:
0001DC0E 4EF9 0001 053E             		jmp	DeleteObject
0001DC14                            ; ===========================================================================
0001DC14                            ; ---------------------------------------------------------------------------
0001DC14                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001DC14                            ; ---------------------------------------------------------------------------
0001DC14                            
0001DC14                            Obj84:					; XREF: Obj_Index
0001DC14 7000                       		moveq	#0,d0
0001DC16 1028 0024                  		move.b	$24(a0),d0
0001DC1A 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001DC1E 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001DC22                            ; ===========================================================================
0001DC22 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001DC24 0000                       		dc.w loc_1A4CE-Obj84_Index
0001DC26 0000                       		dc.w loc_1A57E-Obj84_Index
0001DC28                            
0001DC28 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001DC2C 2550 0620                  		dc.w $2550, $620
0001DC30 2490 04C0                  		dc.w $2490, $4C0
0001DC34 2510 04C0                  		dc.w $2510, $4C0
0001DC38                            ; ===========================================================================
0001DC38                            
0001DC38                            Obj84_Main:				; XREF: Obj84_Index
0001DC38 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001DC3C 7000                       		moveq	#0,d0
0001DC3E 1028 0028                  		move.b	$28(a0),d0
0001DC42 D040                       		add.w	d0,d0
0001DC44 D2C0                       		adda.w	d0,a1
0001DC46 117C 0004 0001             		move.b	#4,1(a0)
0001DC4C 08E8 0007 0001             		bset	#7,1(a0)
0001DC52 08E8 0004 0001             		bset	#4,1(a0)
0001DC58 317C 0300 0002             		move.w	#$300,2(a0)
0001DC5E 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001DC66 3159 0008                  		move.w	(a1)+,8(a0)
0001DC6A 3151 000C                  		move.w	(a1),$C(a0)
0001DC6E 3159 0038                  		move.w	(a1)+,$38(a0)
0001DC72 117C 0020 0016             		move.b	#$20,$16(a0)
0001DC78 117C 0060 0017             		move.b	#$60,$17(a0)
0001DC7E 117C 0020 0019             		move.b	#$20,$19(a0)
0001DC84 117C 0060 0016             		move.b	#$60,$16(a0)
0001DC8A 117C 0003 0018             		move.b	#3,$18(a0)
0001DC90 5428 0024                  		addq.b	#2,$24(a0)
0001DC94                            
0001DC94                            loc_1A4CE:				; XREF: Obj84_Index
0001DC94 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001DC9A 6F00                       		ble.s	loc_1A4DC
0001DC9C 08E8 0001 0001             		bset	#1,1(a0)
0001DCA2                            
0001DCA2                            loc_1A4DC:
0001DCA2 42A8 003C                  		clr.l	$3C(a0)
0001DCA6 4A28 0029                  		tst.b	$29(a0)
0001DCAA 6700                       		beq.s	loc_1A4EA
0001DCAC 5428 0024                  		addq.b	#2,$24(a0)
0001DCB0                            
0001DCB0                            loc_1A4EA:
0001DCB0 2028 003C                  		move.l	$3C(a0),d0
0001DCB4 2228 0038                  		move.l	$38(a0),d1
0001DCB8 D280                       		add.l	d0,d1
0001DCBA 4841                       		swap	d1
0001DCBC 3141 000C                  		move.w	d1,$C(a0)
0001DCC0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001DCC6 6600                       		bne.s	loc_1A524
0001DCC8 4A68 0030                  		tst.w	$30(a0)
0001DCCC 6A00                       		bpl.s	loc_1A524
0001DCCE 70F6                       		moveq	#-$A,d0
0001DCD0 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001DCD6 6F00                       		ble.s	loc_1A514
0001DCD8 700E                       		moveq	#$E,d0
0001DCDA                            
0001DCDA                            loc_1A514:
0001DCDA D240                       		add.w	d0,d1
0001DCDC 2268 0034                  		movea.l	$34(a0),a1
0001DCE0 3341 000C                  		move.w	d1,$C(a1)
0001DCE4 3368 0008 0008             		move.w	8(a0),8(a1)
0001DCEA                            
0001DCEA                            loc_1A524:
0001DCEA 323C 002B                  		move.w	#$2B,d1
0001DCEE 343C 0060                  		move.w	#$60,d2
0001DCF2 363C 0061                  		move.w	#$61,d3
0001DCF6 3828 0008                  		move.w	8(a0),d4
0001DCFA 4EB9 0001 29EE             		jsr	SolidObject
0001DD00 7000                       		moveq	#0,d0
0001DD02 3228 003C                  		move.w	$3C(a0),d1
0001DD06 6A00                       		bpl.s	loc_1A550
0001DD08 4441                       		neg.w	d1
0001DD0A 5141                       		subq.w	#8,d1
0001DD0C 6500                       		bcs.s	loc_1A55C
0001DD0E 5200                       		addq.b	#1,d0
0001DD10 E841                       		asr.w	#4,d1
0001DD12 D041                       		add.w	d1,d0
0001DD14 6000                       		bra.s	loc_1A55C
0001DD16                            ; ===========================================================================
0001DD16                            
0001DD16                            loc_1A550:
0001DD16 0441 0027                  		subi.w	#$27,d1
0001DD1A 6500                       		bcs.s	loc_1A55C
0001DD1C 5200                       		addq.b	#1,d0
0001DD1E E841                       		asr.w	#4,d1
0001DD20 D041                       		add.w	d1,d0
0001DD22                            
0001DD22                            loc_1A55C:
0001DD22 1140 001A                  		move.b	d0,$1A(a0)
0001DD26 3038 D008                  		move.w	($FFFFD008).w,d0
0001DD2A 9068 0008                  		sub.w	8(a0),d0
0001DD2E 6B00                       		bmi.s	loc_1A578
0001DD30 0440 0140                  		subi.w	#$140,d0
0001DD34 6B00                       		bmi.s	loc_1A578
0001DD36 4A28 0001                  		tst.b	1(a0)
0001DD3A 6A00 FED2                  		bpl.w	Obj84_Delete
0001DD3E                            
0001DD3E                            loc_1A578:
0001DD3E 4EF9 0001 0502             		jmp	DisplaySprite
0001DD44                            ; ===========================================================================
0001DD44                            
0001DD44                            loc_1A57E:				; XREF: Obj84_Index
0001DD44 7000                       		moveq	#0,d0
0001DD46 1028 0028                  		move.b	$28(a0),d0
0001DD4A 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001DD4E 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001DD52 6000 FF5C                  		bra.w	loc_1A4EA
0001DD56                            ; ===========================================================================
0001DD56 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001DD58 0000                       		dc.w loc_1A598-off_1A590
0001DD5A 0000                       		dc.w loc_1A604-off_1A590
0001DD5C 0000                       		dc.w loc_1A604-off_1A590
0001DD5E                            ; ===========================================================================
0001DD5E                            
0001DD5E                            loc_1A598:				; XREF: off_1A590
0001DD5E 4A28 0029                  		tst.b	$29(a0)
0001DD62 6600                       		bne.s	loc_1A5D4
0001DD64 2268 0034                  		movea.l	$34(a0),a1
0001DD68 4A29 0021                  		tst.b	$21(a1)
0001DD6C 6600                       		bne.s	loc_1A5B4
0001DD6E 6100 D2CA                  		bsr.w	BossDefeated
0001DD72 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001DD7A                            
0001DD7A                            loc_1A5B4:
0001DD7A 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001DD82 6400                       		bcc.s	locret_1A602
0001DD84 42A8 003C                  		clr.l	$3C(a0)
0001DD88 2268 0034                  		movea.l	$34(a0),a1
0001DD8C 5369 0032                  		subq.w	#1,$32(a1)
0001DD90 4269 0030                  		clr.w	$30(a1)
0001DD94 5528 0024                  		subq.b	#2,$24(a0)
0001DD98 4E75                       		rts	
0001DD9A                            ; ===========================================================================
0001DD9A                            
0001DD9A                            loc_1A5D4:
0001DD9A 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001DDA0 6C00                       		bge.s	loc_1A5E4
0001DDA2 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001DDAA                            
0001DDAA                            loc_1A5E4:
0001DDAA 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001DDB2 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001DDB8 6E00                       		bgt.s	locret_1A602
0001DDBA 4268 003E                  		clr.w	$3E(a0)
0001DDBE 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001DDC4 4228 0029                  		clr.b	$29(a0)
0001DDC8                            
0001DDC8                            locret_1A602:
0001DDC8 4E75                       		rts	
0001DDCA                            ; ===========================================================================
0001DDCA                            
0001DDCA                            loc_1A604:				; XREF: off_1A590
0001DDCA 08E8 0001 0001             		bset	#1,1(a0)
0001DDD0 4A28 0029                  		tst.b	$29(a0)
0001DDD4 6600                       		bne.s	loc_1A646
0001DDD6 2268 0034                  		movea.l	$34(a0),a1
0001DDDA 4A29 0021                  		tst.b	$21(a1)
0001DDDE 6600                       		bne.s	loc_1A626
0001DDE0 6100 D258                  		bsr.w	BossDefeated
0001DDE4 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001DDEC                            
0001DDEC                            loc_1A626:
0001DDEC 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001DDF4 6400                       		bcc.s	locret_1A674
0001DDF6 42A8 003C                  		clr.l	$3C(a0)
0001DDFA 2268 0034                  		movea.l	$34(a0),a1
0001DDFE 5369 0032                  		subq.w	#1,$32(a1)
0001DE02 4269 0030                  		clr.w	$30(a1)
0001DE06 5528 0024                  		subq.b	#2,$24(a0)
0001DE0A 4E75                       		rts	
0001DE0C                            ; ===========================================================================
0001DE0C                            
0001DE0C                            loc_1A646:
0001DE0C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001DE12 6D00                       		blt.s	loc_1A656
0001DE14 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001DE1C                            
0001DE1C                            loc_1A656:
0001DE1C 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001DE24 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001DE2A 6D00                       		blt.s	locret_1A674
0001DE2C 4268 003E                  		clr.w	$3E(a0)
0001DE30 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001DE36 4228 0029                  		clr.b	$29(a0)
0001DE3A                            
0001DE3A                            locret_1A674:
0001DE3A 4E75                       		rts	
0001DE3C                            ; ===========================================================================
0001DE3C                            ; ---------------------------------------------------------------------------
0001DE3C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001DE3C                            ; ---------------------------------------------------------------------------
0001DE3C                            Map_obj84:
0001DE3C                            	include "_maps\obj84.asm"
0001DE3C                            ; ---------------------------------------------------------------------------
0001DE3C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001DE3C                            ; ---------------------------------------------------------------------------
0001DE3C 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001DE40 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001DE44 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001DE48 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001DE4C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001DE50 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001DE54 06                         byte_1A68E:	dc.b 6
0001DE55 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001DE5A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001DE5F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001DE64 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001DE69 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001DE6E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001DE73 08                         byte_1A6AD:	dc.b 8
0001DE74 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001DE79 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001DE7E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001DE83 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001DE88 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001DE8D B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001DE92 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001DE97 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001DE9C 0A                         byte_1A6D6:	dc.b $A
0001DE9D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001DEA2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001DEA7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001DEAC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001DEB1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001DEB6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001DEBB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001DEC0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001DEC5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001DECA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001DECF 0C                         byte_1A709:	dc.b $C
0001DED0 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001DED5 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001DEDA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001DEDF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001DEE4 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001DEE9 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001DEEE D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001DEF3 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001DEF8 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001DEFD F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001DF02 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001DF07 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001DF0C 0D                         byte_1A746:	dc.b $D
0001DF0D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001DF12 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001DF17 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001DF1C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001DF21 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001DF26 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001DF2B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001DF30 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001DF35 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001DF3A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001DF3F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001DF44 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001DF49 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001DF4E 0E                         byte_1A788:	dc.b $E
0001DF4F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001DF54 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001DF59 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001DF5E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001DF63 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001DF68 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001DF6D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001DF72 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001DF77 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001DF7C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001DF81 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001DF86 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001DF8B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001DF90 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001DF95 02                         byte_1A7CF:	dc.b 2
0001DF96 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001DF9B 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001DFA0                            		even
0001DFA0                            		even
0001DFA0                            
0001DFA0                            ; ===========================================================================
0001DFA0                            ; ---------------------------------------------------------------------------
0001DFA0                            ; Object 86 - energy balls (FZ)
0001DFA0                            ; ---------------------------------------------------------------------------
0001DFA0                            
0001DFA0                            Obj86:					; XREF: Obj_Index
0001DFA0 7000                       		moveq	#0,d0
0001DFA2 1028 0024                  		move.b	$24(a0),d0
0001DFA6 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001DFAA 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001DFAE                            ; ===========================================================================
0001DFAE 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001DFB0 0000                       		dc.w Obj86_Generator-Obj86_Index
0001DFB2 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001DFB4 0000                       		dc.w loc_1A962-Obj86_Index
0001DFB6 0000                       		dc.w loc_1A982-Obj86_Index
0001DFB8                            ; ===========================================================================
0001DFB8                            
0001DFB8                            Obj86_Main:				; XREF: Obj86_Index
0001DFB8 317C 2588 0008             		move.w	#$2588,8(a0)
0001DFBE 317C 053C 000C             		move.w	#$53C,$C(a0)
0001DFC4 317C 0300 0002             		move.w	#$300,2(a0)
0001DFCA 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001DFD2 117C 0000 001C             		move.b	#0,$1C(a0)
0001DFD8 117C 0003 0018             		move.b	#3,$18(a0)
0001DFDE 117C 0008 0017             		move.b	#8,$17(a0)
0001DFE4 117C 0008 0016             		move.b	#8,$16(a0)
0001DFEA 117C 0004 0001             		move.b	#4,1(a0)
0001DFF0 08E8 0007 0001             		bset	#7,1(a0)
0001DFF6 5428 0024                  		addq.b	#2,$24(a0)
0001DFFA                            
0001DFFA                            Obj86_Generator:			; XREF: Obj86_Index
0001DFFA 2268 0034                  		movea.l	$34(a0),a1
0001DFFE 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001E004 6600                       		bne.s	loc_1A850
0001E006 10BC 003F                  		move.b	#$3F,(a0)
0001E00A 117C 0000 0024             		move.b	#0,$24(a0)
0001E010 4EF9 0001 0502             		jmp	DisplaySprite
0001E016                            ; ===========================================================================
0001E016                            
0001E016                            loc_1A850:
0001E016 117C 0000 001C             		move.b	#0,$1C(a0)
0001E01C 4A28 0029                  		tst.b	$29(a0)
0001E020 6700                       		beq.s	loc_1A86C
0001E022 5428 0024                  		addq.b	#2,$24(a0)
0001E026 117C 0001 001C             		move.b	#1,$1C(a0)
0001E02C 117C 003E 0028             		move.b	#$3E,$28(a0)
0001E032                            
0001E032                            loc_1A86C:
0001E032 323C 0013                  		move.w	#$13,d1
0001E036 343C 0008                  		move.w	#8,d2
0001E03A 363C 0011                  		move.w	#$11,d3
0001E03E 3828 0008                  		move.w	8(a0),d4
0001E042 4EB9 0001 29EE             		jsr	SolidObject
0001E048 3038 D008                  		move.w	($FFFFD008).w,d0
0001E04C 9068 0008                  		sub.w	8(a0),d0
0001E050 6B00                       		bmi.s	loc_1A89A
0001E052 0440 0140                  		subi.w	#$140,d0
0001E056 6B00                       		bmi.s	loc_1A89A
0001E058 4A28 0001                  		tst.b	1(a0)
0001E05C 6A00 FBB0                  		bpl.w	Obj84_Delete
0001E060                            
0001E060                            loc_1A89A:
0001E060 43FA 0000                  		lea	Ani_obj86(pc),a1
0001E064 4EB9 0000 D0AC             		jsr	AnimateSprite
0001E06A 4EF9 0001 0502             		jmp	DisplaySprite
0001E070                            ; ===========================================================================
0001E070                            
0001E070                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001E070 4A28 0029                  		tst.b	$29(a0)
0001E074 6700 0000                  		beq.w	loc_1A954
0001E078 4228 0029                  		clr.b	$29(a0)
0001E07C D068 0030                  		add.w	$30(a0),d0
0001E080 0240 001E                  		andi.w	#$1E,d0
0001E084 D4C0                       		adda.w	d0,a2
0001E086 5868 0030                  		addq.w	#4,$30(a0)
0001E08A 4268 0032                  		clr.w	$32(a0)
0001E08E 7403                       		moveq	#3,d2
0001E090                            
0001E090                            Obj86_Loop:
0001E090 4EB9 0001 099E             		jsr	SingleObjLoad2
0001E096 6600 0000                  		bne.w	loc_1A954
0001E09A 12BC 0086                  		move.b	#$86,(a1)
0001E09E 3368 0008 0008             		move.w	8(a0),8(a1)
0001E0A4 337C 053C 000C             		move.w	#$53C,$C(a1)
0001E0AA 137C 0008 0024             		move.b	#8,$24(a1)
0001E0B0 337C 2300 0002             		move.w	#$2300,2(a1)
0001E0B6 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001E0BE 137C 000C 0016             		move.b	#$C,$16(a1)
0001E0C4 137C 000C 0017             		move.b	#$C,$17(a1)
0001E0CA 137C 0000 0020             		move.b	#0,$20(a1)
0001E0D0 137C 0003 0018             		move.b	#3,$18(a1)
0001E0D6 337C 003E 0028             		move.w	#$3E,$28(a1)
0001E0DC 137C 0004 0001             		move.b	#4,1(a1)
0001E0E2 08E9 0007 0001             		bset	#7,1(a1)
0001E0E8 2348 0034                  		move.l	a0,$34(a1)
0001E0EC 4EB9 0000 3772             		jsr	(RandomNumber).l
0001E0F2 3228 0032                  		move.w	$32(a0),d1
0001E0F6 C3FC FFB1                  		muls.w	#-$4F,d1
0001E0FA 0641 2578                  		addi.w	#$2578,d1
0001E0FE 0240 001F                  		andi.w	#$1F,d0
0001E102 0440 0010                  		subi.w	#$10,d0
0001E106 D041                       		add.w	d1,d0
0001E108 3340 0030                  		move.w	d0,$30(a1)
0001E10C 5268 0032                  		addq.w	#1,$32(a0)
0001E110 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001E116 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001E11A                            
0001E11A                            loc_1A954:
0001E11A 4A68 0032                  		tst.w	$32(a0)
0001E11E 6600                       		bne.s	loc_1A95E
0001E120 5428 0024                  		addq.b	#2,$24(a0)
0001E124                            
0001E124                            loc_1A95E:
0001E124 6000 FF0C                  		bra.w	loc_1A86C
0001E128                            ; ===========================================================================
0001E128                            
0001E128                            loc_1A962:				; XREF: Obj86_Index
0001E128 117C 0002 001C             		move.b	#2,$1C(a0)
0001E12E 4A68 0038                  		tst.w	$38(a0)
0001E132 6600                       		bne.s	loc_1A97E
0001E134 117C 0002 0024             		move.b	#2,$24(a0)
0001E13A 2268 0034                  		movea.l	$34(a0),a1
0001E13E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001E144                            
0001E144                            loc_1A97E:
0001E144 6000 FEEC                  		bra.w	loc_1A86C
0001E148                            ; ===========================================================================
0001E148                            
0001E148                            loc_1A982:				; XREF: Obj86_Index
0001E148 7000                       		moveq	#0,d0
0001E14A 1028 0025                  		move.b	$25(a0),d0
0001E14E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001E152 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001E156 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001E15A 4EB9 0000 D0AC             		jsr	AnimateSprite
0001E160 4EF9 0001 0502             		jmp	DisplaySprite
0001E166                            ; ===========================================================================
0001E166 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001E168 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001E16A 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001E16C                            ; ===========================================================================
0001E16C                            
0001E16C                            loc_1A9A6:				; XREF: Obj86_Index2
0001E16C 3028 0030                  		move.w	$30(a0),d0
0001E170 9068 0008                  		sub.w	8(a0),d0
0001E174 E940                       		asl.w	#4,d0
0001E176 3140 0010                  		move.w	d0,$10(a0)
0001E17A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001E180 5428 0025                  		addq.b	#2,$25(a0)
0001E184 4E75                       		rts	
0001E186                            ; ===========================================================================
0001E186                            
0001E186                            loc_1A9C0:				; XREF: Obj86_Index2
0001E186 4A68 0010                  		tst.w	$10(a0)
0001E18A 6700                       		beq.s	loc_1A9E6
0001E18C 4EB9 0001 04DC             		jsr	SpeedToPos
0001E192 3028 0008                  		move.w	8(a0),d0
0001E196 9068 0030                  		sub.w	$30(a0),d0
0001E19A 6400                       		bcc.s	loc_1A9E6
0001E19C 4268 0010                  		clr.w	$10(a0)
0001E1A0 D168 0008                  		add.w	d0,8(a0)
0001E1A4 2268 0034                  		movea.l	$34(a0),a1
0001E1A8 5369 0032                  		subq.w	#1,$32(a1)
0001E1AC                            
0001E1AC                            loc_1A9E6:
0001E1AC 117C 0000 001C             		move.b	#0,$1C(a0)
0001E1B2 5368 0028                  		subq.w	#1,$28(a0)
0001E1B6 6600                       		bne.s	locret_1AA1C
0001E1B8 5428 0025                  		addq.b	#2,$25(a0)
0001E1BC 117C 0001 001C             		move.b	#1,$1C(a0)
0001E1C2 117C 009A 0020             		move.b	#$9A,$20(a0)
0001E1C8 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001E1CE 7000                       		moveq	#0,d0
0001E1D0 3038 D008                  		move.w	($FFFFD008).w,d0
0001E1D4 9068 0008                  		sub.w	8(a0),d0
0001E1D8 3140 0010                  		move.w	d0,$10(a0)
0001E1DC 317C 0140 0012             		move.w	#$140,$12(a0)
0001E1E2                            
0001E1E2                            locret_1AA1C:
0001E1E2 4E75                       		rts	
0001E1E4                            ; ===========================================================================
0001E1E4                            
0001E1E4                            loc_1AA1E:				; XREF: Obj86_Index2
0001E1E4 4EB9 0001 04DC             		jsr	SpeedToPos
0001E1EA 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001E1F0 6400                       		bcc.s	loc_1AA34
0001E1F2 5368 0028                  		subq.w	#1,$28(a0)
0001E1F6 6700                       		beq.s	loc_1AA34
0001E1F8 4E75                       		rts	
0001E1FA                            ; ===========================================================================
0001E1FA                            
0001E1FA                            loc_1AA34:
0001E1FA 2268 0034                  		movea.l	$34(a0),a1
0001E1FE 5369 0038                  		subq.w	#1,$38(a1)
0001E202 6000 FA0A                  		bra.w	Obj84_Delete
0001E206                            ; ===========================================================================
0001E206                            Ani_obj86:
0001E206                            	include "_anim\obj86.asm"
0001E206                            ; ---------------------------------------------------------------------------
0001E206                            ; Animation script - energy ball launcher (FZ)
0001E206                            ; ---------------------------------------------------------------------------
0001E206 0000                       		dc.w byte_1AA46-Ani_obj86
0001E208 0000                       		dc.w byte_1AA4A-Ani_obj86
0001E20A 0000                       		dc.w byte_1AA50-Ani_obj86
0001E20C 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001E210 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001E216 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001E21C                            		even
0001E21C                            		even
0001E21C                            
0001E21C                            ; ---------------------------------------------------------------------------
0001E21C                            ; Sprite mappings - energy ball	launcher (FZ)
0001E21C                            ; ---------------------------------------------------------------------------
0001E21C                            Map_obj86:
0001E21C                            	include "_maps\obj86.asm"
0001E21C                            ; ---------------------------------------------------------------------------
0001E21C                            ; Sprite mappings - energy ball	launcher (FZ)
0001E21C                            ; ---------------------------------------------------------------------------
0001E21C 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001E220 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001E224 01                         byte_1AA5E:	dc.b 1
0001E225 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001E22A 01                         byte_1AA64:	dc.b 1
0001E22B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001E230 01                         byte_1AA6A:	dc.b 1
0001E231 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001E236 01                         byte_1AA70:	dc.b 1
0001E237 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001E23C                            		even
0001E23C                            		even
0001E23C                            
0001E23C                            Ani_obj86a:
0001E23C                            	include "_anim\obj86a.asm"
0001E23C                            ; ---------------------------------------------------------------------------
0001E23C                            ; Animation script - energy balls (FZ)
0001E23C                            ; ---------------------------------------------------------------------------
0001E23C 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001E23E 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001E240 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001E24F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001E25E 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001E262 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001E26C                            		even
0001E26C                            		even
0001E26C                            
0001E26C                            ; ---------------------------------------------------------------------------
0001E26C                            ; Sprite mappings - energy balls (FZ)
0001E26C                            ; ---------------------------------------------------------------------------
0001E26C                            Map_obj86a:
0001E26C                            	include "_maps\obj86a.asm"
0001E26C                            ; ---------------------------------------------------------------------------
0001E26C                            ; Sprite mappings - energy balls (FZ)
0001E26C                            ; ---------------------------------------------------------------------------
0001E26C 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001E270 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001E274 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001E278 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001E27C 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001E280 0000                       		dc.w byte_1AB20-Map_obj86a
0001E282 02                         byte_1AABC:	dc.b 2
0001E283 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001E288 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001E28D 02                         byte_1AAC7:	dc.b 2
0001E28E F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001E293 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001E298 02                         byte_1AAD2:	dc.b 2
0001E299 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001E29E 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001E2A3 02                         byte_1AADD:	dc.b 2
0001E2A4 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001E2A9 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001E2AE 02                         byte_1AAE8:	dc.b 2
0001E2AF F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001E2B4 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001E2B9 02                         byte_1AAF3:	dc.b 2
0001E2BA F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001E2BF F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001E2C4 01                         byte_1AAFE:	dc.b 1
0001E2C5 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001E2CA 01                         byte_1AB04:	dc.b 1
0001E2CB F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001E2D0 02                         byte_1AB0A:	dc.b 2
0001E2D1 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001E2D6 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001E2DB 02                         byte_1AB15:	dc.b 2
0001E2DC F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001E2E1 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001E2E6 00                         byte_1AB20:	dc.b 0
0001E2E8 00                         		even
0001E2E8 00                         		even
0001E2E8                            
0001E2E8                            ; ===========================================================================
0001E2E8                            ; ---------------------------------------------------------------------------
0001E2E8                            ; Object 3E - prison capsule
0001E2E8                            ; ---------------------------------------------------------------------------
0001E2E8                            
0001E2E8                            Obj3E:					; XREF: Obj_Index
0001E2E8 7000                       		moveq	#0,d0
0001E2EA 1028 0024                  		move.b	$24(a0),d0
0001E2EE 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001E2F2 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001E2F6 3028 0008                  		move.w	8(a0),d0
0001E2FA 0240 FF80                  		andi.w	#$FF80,d0
0001E2FE 3238 F700                  		move.w	($FFFFF700).w,d1
0001E302 0441 0080                  		subi.w	#$80,d1
0001E306 0241 FF80                  		andi.w	#$FF80,d1
0001E30A 9041                       		sub.w	d1,d0
0001E30C 0C40 0280                  		cmpi.w	#$280,d0
0001E310 6200                       		bhi.s	Obj3E_Delete
0001E312 4EF9 0001 0502             		jmp	DisplaySprite
0001E318                            ; ===========================================================================
0001E318                            
0001E318                            Obj3E_Delete:
0001E318 4EF9 0001 053E             		jmp	DeleteObject
0001E31E                            ; ===========================================================================
0001E31E 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001E320 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001E322 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001E324 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001E326 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001E328 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001E32A 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001E32C 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001E32E                            
0001E32E 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001E332 040C 0501                  		dc.b 4,	$C, 5, 1
0001E336 0610 0403                  		dc.b 6,	$10, 4,	3
0001E33A 0810 0305                  		dc.b 8,	$10, 3,	5
0001E33E                            ; ===========================================================================
0001E33E                            
0001E33E                            Obj3E_Main:				; XREF: Obj3E_Index
0001E33E 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001E346 317C 049D 0002             		move.w	#$49D,2(a0)
0001E34C 117C 0004 0001             		move.b	#4,1(a0)
0001E352 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001E358 7000                       		moveq	#0,d0
0001E35A 1028 0028                  		move.b	$28(a0),d0
0001E35E E548                       		lsl.w	#2,d0
0001E360 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001E364 1159 0024                  		move.b	(a1)+,$24(a0)
0001E368 1159 0019                  		move.b	(a1)+,$19(a0)
0001E36C 1159 0018                  		move.b	(a1)+,$18(a0)
0001E370 1159 001A                  		move.b	(a1)+,$1A(a0)
0001E374 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001E378 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001E37A 117C 0006 0020             		move.b	#6,$20(a0)
0001E380 117C 0008 0021             		move.b	#8,$21(a0)
0001E386                            
0001E386                            Obj3E_Not02:
0001E386 4E75                       		rts	
0001E388                            ; ===========================================================================
0001E388                            
0001E388                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001E388 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001E38E 6700                       		beq.s	Obj3E_ChkOpened
0001E390 323C 002B                  		move.w	#$2B,d1
0001E394 343C 0018                  		move.w	#$18,d2
0001E398 363C 0018                  		move.w	#$18,d3
0001E39C 3828 0008                  		move.w	8(a0),d4
0001E3A0 4EF9 0001 29EE             		jmp	SolidObject
0001E3A6                            ; ===========================================================================
0001E3A6                            
0001E3A6                            Obj3E_ChkOpened:
0001E3A6 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001E3AA 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001E3AC 4228 0025                  		clr.b	$25(a0)
0001E3B0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001E3B6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001E3BC                            
0001E3BC                            Obj3E_DoOpen:
0001E3BC 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001E3C2 4E75                       		rts	
0001E3C4                            ; ===========================================================================
0001E3C4                            
0001E3C4                            Obj3E_Switched:				; XREF: Obj3E_Index
0001E3C4 323C 0017                  		move.w	#$17,d1
0001E3C8 343C 0008                  		move.w	#8,d2
0001E3CC 363C 0008                  		move.w	#8,d3
0001E3D0 3828 0008                  		move.w	8(a0),d4
0001E3D4 4EB9 0001 29EE             		jsr	SolidObject
0001E3DA 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001E3E0 4EB9 0000 D0AC             		jsr	AnimateSprite
0001E3E6 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001E3EC 4A28 0025                  		tst.b	$25(a0)
0001E3F0 6700                       		beq.s	locret_1AC60
0001E3F2 5068 000C                  		addq.w	#8,$C(a0)
0001E3F6 117C 000A 0024             		move.b	#$A,$24(a0)
0001E3FC 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001E402 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001E406 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001E40A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001E410 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001E416 4228 0025                  		clr.b	$25(a0)
0001E41A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001E420 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001E426                            
0001E426                            locret_1AC60:
0001E426 4E75                       		rts	
0001E428                            ; ===========================================================================
0001E428                            
0001E428                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001E428 7007                       		moveq	#7,d0
0001E42A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001E42E 6600                       		bne.s	loc_1ACA0
0001E430 4EB9 0001 0988             		jsr	SingleObjLoad
0001E436 6600                       		bne.s	loc_1ACA0
0001E438 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001E43C 3368 0008 0008             		move.w	8(a0),8(a1)
0001E442 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001E448 4EB9 0000 3772             		jsr	(RandomNumber).l
0001E44E 7200                       		moveq	#0,d1
0001E450 1200                       		move.b	d0,d1
0001E452 E409                       		lsr.b	#2,d1
0001E454 0441 0020                  		subi.w	#$20,d1
0001E458 D369 0008                  		add.w	d1,8(a1)
0001E45C E048                       		lsr.w	#8,d0
0001E45E E608                       		lsr.b	#3,d0
0001E460 D169 000C                  		add.w	d0,$C(a1)
0001E464                            
0001E464                            loc_1ACA0:
0001E464 5368 001E                  		subq.w	#1,$1E(a0)
0001E468 6700                       		beq.s	Obj3E_MakeAnimal
0001E46A 4E75                       		rts	
0001E46C                            ; ===========================================================================
0001E46C                            
0001E46C                            Obj3E_MakeAnimal:
0001E46C 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001E472 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001E478 117C 0006 001A             		move.b	#6,$1A(a0)
0001E47E 317C 0096 001E             		move.w	#$96,$1E(a0)
0001E484 0668 0020 000C             		addi.w	#$20,$C(a0)
0001E48A 7C07                       		moveq	#7,d6
0001E48C 3A3C 009A                  		move.w	#$9A,d5
0001E490 78E4                       		moveq	#-$1C,d4
0001E492                            
0001E492                            Obj3E_Loop:
0001E492 4EB9 0001 0988             		jsr	SingleObjLoad
0001E498 6600                       		bne.s	locret_1ACF8
0001E49A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001E49E 3368 0008 0008             		move.w	8(a0),8(a1)
0001E4A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001E4AA D969 0008                  		add.w	d4,8(a1)
0001E4AE 5E44                       		addq.w	#7,d4
0001E4B0 3345 0036                  		move.w	d5,$36(a1)
0001E4B4 5145                       		subq.w	#8,d5
0001E4B6 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001E4BA                            
0001E4BA                            locret_1ACF8:
0001E4BA 4E75                       		rts	
0001E4BC                            ; ===========================================================================
0001E4BC                            
0001E4BC                            Obj3E_Animals:				; XREF: Obj3E_Index
0001E4BC 7007                       		moveq	#7,d0
0001E4BE C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001E4C2 6600                       		bne.s	loc_1AD38
0001E4C4 4EB9 0001 0988             		jsr	SingleObjLoad
0001E4CA 6600                       		bne.s	loc_1AD38
0001E4CC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001E4D0 3368 0008 0008             		move.w	8(a0),8(a1)
0001E4D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001E4DC 4EB9 0000 3772             		jsr	(RandomNumber).l
0001E4E2 0240 001F                  		andi.w	#$1F,d0
0001E4E6 5D40                       		subq.w	#6,d0
0001E4E8 4A41                       		tst.w	d1
0001E4EA 6A00                       		bpl.s	loc_1AD2E
0001E4EC 4440                       		neg.w	d0
0001E4EE                            
0001E4EE                            loc_1AD2E:
0001E4EE D169 0008                  		add.w	d0,8(a1)
0001E4F2 337C 000C 0036             		move.w	#$C,$36(a1)
0001E4F8                            
0001E4F8                            loc_1AD38:
0001E4F8 5368 001E                  		subq.w	#1,$1E(a0)
0001E4FC 6600                       		bne.s	locret_1AD48
0001E4FE 5428 0024                  		addq.b	#2,$24(a0)
0001E502 317C 00B4 001E             		move.w	#180,$1E(a0)
0001E508                            
0001E508                            locret_1AD48:
0001E508 4E75                       		rts	
0001E50A                            ; ===========================================================================
0001E50A                            
0001E50A                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001E50A 703E                       		moveq	#$3E,d0
0001E50C 7228                       		moveq	#$28,d1
0001E50E 7440                       		moveq	#$40,d2
0001E510 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001E514                            
0001E514                            Obj3E_FindObj28:
0001E514 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001E516 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001E518 D2C2                       		adda.w	d2,a1		; next object RAM
0001E51A 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001E51E                            
0001E51E 4EB9 0001 1B8E             		jsr	GotThroughAct
0001E524 4EF9 0001 053E             		jmp	DeleteObject
0001E52A                            ; ===========================================================================
0001E52A                            
0001E52A                            Obj3E_Obj28Found:
0001E52A 4E75                       		rts	
0001E52C                            ; ===========================================================================
0001E52C                            Ani_obj3E:
0001E52C                            	include "_anim\obj3E.asm"
0001E52C                            ; ---------------------------------------------------------------------------
0001E52C                            ; Animation script - prison capsule
0001E52C                            ; ---------------------------------------------------------------------------
0001E52C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001E52E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001E530 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001E534                            		even
0001E534                            		even
0001E534                            
0001E534                            ; ---------------------------------------------------------------------------
0001E534                            ; Sprite mappings - prison capsule
0001E534                            ; ---------------------------------------------------------------------------
0001E534                            Map_obj3E:
0001E534                            	include "_maps\obj3E.asm"
0001E534                            ; ---------------------------------------------------------------------------
0001E534                            ; Sprite mappings - prison capsule
0001E534                            ; ---------------------------------------------------------------------------
0001E534 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001E538 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001E53C 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001E540 0000                       		dc.w byte_1ADE2-Map_obj3E
0001E542 07                         byte_1AD82:	dc.b 7
0001E543 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001E548 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001E54D E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001E552 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001E557 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001E55C 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E561 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E566 01                         byte_1ADA6:	dc.b 1
0001E567 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001E56C 06                         byte_1ADAC:	dc.b 6
0001E56D 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001E572 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001E577 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001E57C 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001E581 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E586 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E58B 01                         byte_1ADCB:	dc.b 1
0001E58C F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001E591 02                         byte_1ADD1:	dc.b 2
0001E592 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001E597 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001E59C 01                         byte_1ADDC:	dc.b 1
0001E59D F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001E5A2 00                         byte_1ADE2:	dc.b 0
0001E5A4 00                         		even
0001E5A4 00                         		even
0001E5A4                            
0001E5A4                            ; ---------------------------------------------------------------------------
0001E5A4                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001E5A4                            ; ---------------------------------------------------------------------------
0001E5A4                            
0001E5A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E5A4                            
0001E5A4                            
0001E5A4                            TouchResponse:				; XREF: Obj01
0001E5A4 4E71                       		nop	
0001E5A6 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001E5AA 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001E5AE 5142                       		subq.w	#8,d2
0001E5B0 7A00                       		moveq	#0,d5
0001E5B2 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001E5B6 5705                       		subq.b	#3,d5
0001E5B8 9645                       		sub.w	d5,d3
0001E5BA 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001E5C0 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001E5C2 0643 000C                  		addi.w	#$C,d3
0001E5C6 7A0A                       		moveq	#$A,d5
0001E5C8                            
0001E5C8                            Touch_NoDuck:
0001E5C8 383C 0010                  		move.w	#$10,d4
0001E5CC DA45                       		add.w	d5,d5
0001E5CE 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001E5D2 3C3C 005F                  		move.w	#$5F,d6
0001E5D6                            
0001E5D6                            Touch_Loop:
0001E5D6 4A29 0001                  		tst.b	1(a1)
0001E5DA 6A00                       		bpl.s	Touch_NextObj
0001E5DC 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001E5E0 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001E5E2                            
0001E5E2                            Touch_NextObj:
0001E5E2 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001E5E6 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001E5EA                            
0001E5EA 7000                       		moveq	#0,d0
0001E5EC 4E75                       		rts	
0001E5EE                            ; ===========================================================================
0001E5EE 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001E5F0 0C14                       		dc.b   $C, $14
0001E5F2 140C                       		dc.b  $14,  $C
0001E5F4 0410                       		dc.b	4, $10
0001E5F6 0C12                       		dc.b   $C, $12
0001E5F8 1010                       		dc.b  $10, $10
0001E5FA 0606                       		dc.b	6,   6
0001E5FC 180C                       		dc.b  $18,  $C
0001E5FE 0C10                       		dc.b   $C, $10
0001E600 3030                       		dc.b  $30, $30
0001E602                            ;		dc.b  $10,  $C
0001E602 0808                       		dc.b	8,   8
0001E604 1410                       		dc.b  $14, $10
0001E606 1408                       		dc.b  $14,   8
0001E608 0E0E                       		dc.b   $E,  $E
0001E60A 1818                       		dc.b  $18, $18
0001E60C 2810                       		dc.b  $28, $10
0001E60E 1018                       		dc.b  $10, $18
0001E610 0810                       		dc.b	8, $10
0001E612 2070                       		dc.b  $20, $70
0001E614 4020                       		dc.b  $40, $20
0001E616 8020                       		dc.b  $80, $20
0001E618 2020                       		dc.b  $20, $20
0001E61A 0808                       		dc.b	8,   8
0001E61C 0404                       		dc.b	4,   4
0001E61E 2008                       		dc.b  $20,   8
0001E620 0C0C                       		dc.b   $C,  $C
0001E622 0804                       		dc.b	8,   4
0001E624 1804                       		dc.b  $18,   4
0001E626 2804                       		dc.b  $28,   4
0001E628 0408                       		dc.b	4,   8
0001E62A 0418                       		dc.b	4, $18
0001E62C 0428                       		dc.b	4, $28
0001E62E 0420                       		dc.b	4, $20
0001E630 1818                       		dc.b  $18, $18
0001E632 0C18                       		dc.b   $C, $18
0001E634 4808                       		dc.b  $48,   8
0001E636                            ; ===========================================================================
0001E636                            
0001E636                            Touch_Height:				; XREF: TouchResponse
0001E636 0240 003F                  		andi.w	#$3F,d0
0001E63A D040                       		add.w	d0,d0
0001E63C 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001E640 7200                       		moveq	#0,d1
0001E642 121A                       		move.b	(a2)+,d1
0001E644 3029 0008                  		move.w	8(a1),d0
0001E648 9041                       		sub.w	d1,d0
0001E64A 9042                       		sub.w	d2,d0
0001E64C 6400                       		bcc.s	loc_1AE98
0001E64E D241                       		add.w	d1,d1
0001E650 D041                       		add.w	d1,d0
0001E652 6500                       		bcs.s	Touch_Width
0001E654 6000 FF8C                  		bra.w	Touch_NextObj
0001E658                            ; ===========================================================================
0001E658                            
0001E658                            loc_1AE98:
0001E658 B044                       		cmp.w	d4,d0
0001E65A 6200 FF86                  		bhi.w	Touch_NextObj
0001E65E                            
0001E65E                            Touch_Width:
0001E65E 7200                       		moveq	#0,d1
0001E660 121A                       		move.b	(a2)+,d1
0001E662 3029 000C                  		move.w	$C(a1),d0
0001E666 9041                       		sub.w	d1,d0
0001E668 9043                       		sub.w	d3,d0
0001E66A 6400                       		bcc.s	loc_1AEB6
0001E66C D241                       		add.w	d1,d1
0001E66E D240                       		add.w	d0,d1
0001E670 6500                       		bcs.s	Touch_ChkValue
0001E672 6000 FF6E                  		bra.w	Touch_NextObj
0001E676                            ; ===========================================================================
0001E676                            
0001E676                            loc_1AEB6:
0001E676 B045                       		cmp.w	d5,d0
0001E678 6200 FF68                  		bhi.w	Touch_NextObj
0001E67C                            
0001E67C                            Touch_ChkValue:
0001E67C 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001E680 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001E684 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001E688 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001E68C 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001E690 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001E692 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001E696                            
0001E696                            ; touch	response is $40-$7F
0001E696                            
0001E696 1029 0020                  		move.b	$20(a1),d0
0001E69A 0200 003F                  		andi.b	#$3F,d0
0001E69E 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001E6A2 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001E6A4 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001E6AA 6400 0000                  		bcc.w	locret_1AEF2
0001E6AE 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001E6B2                            
0001E6B2                            locret_1AEF2:
0001E6B2 4E75                       		rts	
0001E6B4                            ; ===========================================================================
0001E6B4                            
0001E6B4                            Touch_Monitor:
0001E6B4 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001E6B8 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001E6BA 3028 000C                  		move.w	$C(a0),d0
0001E6BE 0440 0010                  		subi.w	#$10,d0
0001E6C2 B069 000C                  		cmp.w	$C(a1),d0
0001E6C6 6500                       		bcs.s	locret_1AF2E
0001E6C8 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001E6CC 337C FE80 0012             		move.w	#-$180,$12(a1)
0001E6D2 4A29 0025                  		tst.b	$25(a1)
0001E6D6 6600                       		bne.s	locret_1AF2E
0001E6D8 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001E6DC 4E75                       		rts	
0001E6DE                            ; ===========================================================================
0001E6DE                            
0001E6DE                            loc_1AF1E:
0001E6DE 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001E6E4 6600                       		bne.s	locret_1AF2E
0001E6E6 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001E6EA 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001E6EE                            
0001E6EE                            locret_1AF2E:
0001E6EE 4E75                       		rts	
0001E6F0                            ; ===========================================================================
0001E6F0                            
0001E6F0                            Touch_Enemy:				; XREF: Touch_ChkValue
0001E6F0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001E6F4 6600                       		bne.s	loc_1AF40	; if yes, branch
0001E6F6 0C28 001F 001C             		cmpi.b	#$1F,$1C(a0)	; is Sonic spindashing?
0001E6FC 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
0001E700 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001E706 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001E70A                            
0001E70A                            loc_1AF40:
0001E70A 4A29 0021                  		tst.b	$21(a1)
0001E70E 6700                       		beq.s	Touch_KillEnemy
0001E710 4468 0010                  		neg.w	$10(a0)
0001E714 4468 0012                  		neg.w	$12(a0)
0001E718 E0E8 0010                  		asr	$10(a0)
0001E71C E0E8 0012                  		asr	$12(a0)
0001E720 137C 0000 0020             		move.b	#0,$20(a1)
0001E726 5329 0021                  		subq.b	#1,$21(a1)
0001E72A 6600                       		bne.s	locret_1AF68
0001E72C 08E9 0007 0022             		bset	#7,$22(a1)
0001E732                            
0001E732                            locret_1AF68:
0001E732 4E75                       		rts	
0001E734                            ; ===========================================================================
0001E734                            
0001E734                            Touch_KillEnemy:
0001E734 08E9 0007 0022             		bset	#7,$22(a1)
0001E73A 7000                       		moveq	#0,d0
0001E73C 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001E740 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001E744 0C40 0006                  		cmpi.w	#6,d0
0001E748 6500                       		bcs.s	loc_1AF82
0001E74A 7006                       		moveq	#6,d0
0001E74C                            
0001E74C                            loc_1AF82:
0001E74C 3340 003E                  		move.w	d0,$3E(a1)
0001E750 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001E754 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001E75A 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001E75C 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E760 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E766                            
0001E766                            loc_1AF9C:
0001E766 6100 0000                  		bsr.w	AddPoints
0001E76A 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001E76E 137C 0000 0024             		move.b	#0,$24(a1)
0001E774 4A68 0012                  		tst.w	$12(a0)
0001E778 6B00                       		bmi.s	loc_1AFC2
0001E77A 3028 000C                  		move.w	$C(a0),d0
0001E77E B069 000C                  		cmp.w	$C(a1),d0
0001E782 6400                       		bcc.s	loc_1AFCA
0001E784 4468 0012                  		neg.w	$12(a0)
0001E788 4E75                       		rts	
0001E78A                            ; ===========================================================================
0001E78A                            
0001E78A                            loc_1AFC2:
0001E78A 0668 0100 0012             		addi.w	#$100,$12(a0)
0001E790 4E75                       		rts	
0001E792                            ; ===========================================================================
0001E792                            
0001E792                            loc_1AFCA:
0001E792 0468 0100 0012             		subi.w	#$100,$12(a0)
0001E798 4E75                       		rts	
0001E79A                            ; ===========================================================================
0001E79A 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001E7A2                            ; ===========================================================================
0001E7A2                            
0001E7A2                            loc_1AFDA:				; XREF: Touch_CatKiller
0001E7A2 08E9 0007 0022             		bset	#7,$22(a1)
0001E7A8                            
0001E7A8                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001E7A8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001E7AC 6700                       		beq.s	Touch_Hurt	; if not, branch
0001E7AE                            
0001E7AE                            loc_1AFE6:				; XREF: Touch_Hurt
0001E7AE 70FF                       		moveq	#-1,d0
0001E7B0 4E75                       		rts	
0001E7B2                            ; ===========================================================================
0001E7B2                            
0001E7B2                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001E7B2 4E71                       		nop	
0001E7B4 4A68 0030                  		tst.w	$30(a0)
0001E7B8 66F4                       		bne.s	loc_1AFE6
0001E7BA 2449                       		movea.l	a1,a2
0001E7BC                            
0001E7BC                            ; End of function TouchResponse
0001E7BC                            ; continue straight to HurtSonic
0001E7BC                            
0001E7BC                            ; ---------------------------------------------------------------------------
0001E7BC                            ; Hurting Sonic	subroutine
0001E7BC                            ; ---------------------------------------------------------------------------
0001E7BC                            
0001E7BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E7BC                            
0001E7BC                            
0001E7BC                            HurtSonic:
0001E7BC 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001E7C0 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001E7C2 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001E7C6 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001E7CA 4EB9 0001 0988             		jsr	SingleObjLoad
0001E7D0 6600                       		bne.s	Hurt_Shield
0001E7D2 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001E7D6 3368 0008 0008             		move.w	8(a0),8(a1)
0001E7DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001E7E2                            
0001E7E2                            Hurt_Shield:
0001E7E2 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001E7E8 117C 0004 0024             		move.b	#4,$24(a0)
0001E7EE 6100 856E                  		bsr.w	Sonic_ResetOnFloor
0001E7F2 08E8 0001 0022             		bset	#1,$22(a0)
0001E7F8 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001E7FE 317C FE00 0010             		move.w	#-$200,$10(a0)
0001E804 0828 0006 0022             		btst	#6,$22(a0)
0001E80A 6700                       		beq.s	Hurt_Reverse
0001E80C 317C FE00 0012             		move.w	#-$200,$12(a0)
0001E812 317C FF00 0010             		move.w	#-$100,$10(a0)
0001E818                            
0001E818                            Hurt_Reverse:
0001E818 3028 0008                  		move.w	8(a0),d0
0001E81C B06A 0008                  		cmp.w	8(a2),d0
0001E820 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001E822 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001E826                            
0001E826                            Hurt_ChkSpikes:
0001E826 117C 0000 0039             		move.b	#0,$39(a0)	; clear spindash flag
0001E82C 317C 0000 0014             		move.w	#0,$14(a0)
0001E832 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001E838 317C 0078 0030             		move.w	#$78,$30(a0)
0001E83E 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001E842 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001E846 6600                       		bne.s	Hurt_Sound	; if not, branch
0001E848 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001E84C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001E84E 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001E852                            
0001E852                            Hurt_Sound:
0001E852 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l
0001E858 70FF                       		moveq	#-1,d0
0001E85A 4E75                       		rts	
0001E85C                            ; ===========================================================================
0001E85C                            
0001E85C                            Hurt_NoRings:
0001E85C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001E860 6600 FF80                  		bne.w	Hurt_Shield	; if yes, branch
0001E864                            ; End of function HurtSonic
0001E864                            
0001E864                            ; ---------------------------------------------------------------------------
0001E864                            ; Subroutine to	kill Sonic
0001E864                            ; ---------------------------------------------------------------------------
0001E864                            
0001E864                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E864                            
0001E864                            
0001E864                            KillSonic:
0001E864 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001E868 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001E86A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001E870 117C 0006 0024             		move.b	#6,$24(a0)
0001E876 6100 84E6                  		bsr.w	Sonic_ResetOnFloor
0001E87A 08E8 0001 0022             		bset	#1,$22(a0)
0001E880 317C F900 0012             		move.w	#-$700,$12(a0)
0001E886 317C 0000 0010             		move.w	#0,$10(a0)
0001E88C 317C 0000 0014             		move.w	#0,$14(a0)
0001E892 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001E898 117C 0018 001C             		move.b	#$18,$1C(a0)
0001E89E 08E8 0007 0002             		bset	#7,2(a0)
0001E8A4 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001E8A8 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001E8AC 6600                       		bne.s	Kill_Sound
0001E8AE 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001E8B2                            
0001E8B2                            Kill_Sound:
0001E8B2 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l
0001E8B8                            
0001E8B8                            Kill_NoDeath:
0001E8B8 70FF                       		moveq	#-1,d0
0001E8BA 4E75                       		rts	
0001E8BC                            ; End of function KillSonic
0001E8BC                            
0001E8BC                            
0001E8BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8BC                            
0001E8BC                            
0001E8BC                            Touch_Special:				; XREF: Touch_ChkValue
0001E8BC 1229 0020                  		move.b	$20(a1),d1
0001E8C0 0201 003F                  		andi.b	#$3F,d1
0001E8C4 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001E8C8 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001E8CA 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001E8CE 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001E8D0 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001E8D4 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001E8D6 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001E8DA 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001E8DC 4E75                       		rts	
0001E8DE                            ; ===========================================================================
0001E8DE                            
0001E8DE                            Touch_CatKiller:			; XREF: Touch_Special
0001E8DE 6000 FEC2                  		bra.w	loc_1AFDA
0001E8E2                            ; ===========================================================================
0001E8E2                            
0001E8E2                            Touch_Yadrin:				; XREF: Touch_Special
0001E8E2 9A40                       		sub.w	d0,d5
0001E8E4 0C45 0008                  		cmpi.w	#8,d5
0001E8E8 6400                       		bcc.s	loc_1B144
0001E8EA 3029 0008                  		move.w	8(a1),d0
0001E8EE 5940                       		subq.w	#4,d0
0001E8F0 0829 0000 0022             		btst	#0,$22(a1)
0001E8F6 6700                       		beq.s	loc_1B130
0001E8F8 0440 0010                  		subi.w	#$10,d0
0001E8FC                            
0001E8FC                            loc_1B130:
0001E8FC 9042                       		sub.w	d2,d0
0001E8FE 6400                       		bcc.s	loc_1B13C
0001E900 0640 0018                  		addi.w	#$18,d0
0001E904 6500                       		bcs.s	loc_1B140
0001E906 6000                       		bra.s	loc_1B144
0001E908                            ; ===========================================================================
0001E908                            
0001E908                            loc_1B13C:
0001E908 B044                       		cmp.w	d4,d0
0001E90A 6200                       		bhi.s	loc_1B144
0001E90C                            
0001E90C                            loc_1B140:
0001E90C 6000 FE9A                  		bra.w	Touch_ChkHurt
0001E910                            ; ===========================================================================
0001E910                            
0001E910                            loc_1B144:
0001E910 6000 FDDE                  		bra.w	Touch_Enemy
0001E914                            ; ===========================================================================
0001E914                            
0001E914                            Touch_D7orE1:				; XREF: Touch_Special
0001E914 5229 0021                  		addq.b	#1,$21(a1)
0001E918 4E75                       		rts	
0001E91A                            ; End of function Touch_Special
0001E91A                            
0001E91A                            ; ---------------------------------------------------------------------------
0001E91A                            ; Subroutine to	show the special stage layout
0001E91A                            ; ---------------------------------------------------------------------------
0001E91A                            
0001E91A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E91A                            
0001E91A                            
0001E91A                            SS_ShowLayout:				; XREF: SpecialStage
0001E91A 6100 0000                  		bsr.w	SS_AniWallsRings
0001E91E 6100 0000                  		bsr.w	SS_AniItems
0001E922 3F05                       		move.w	d5,-(sp)
0001E924 43F8 8000                  		lea	($FFFF8000).w,a1
0001E928 1038 F780                  		move.b	($FFFFF780).w,d0
0001E92C 0200 00FC                  		andi.b	#$FC,d0
0001E930 4EB9 0000 3798             		jsr	(CalcSine).l
0001E936 3800                       		move.w	d0,d4
0001E938 3A01                       		move.w	d1,d5
0001E93A C9FC 0018                  		muls.w	#$18,d4
0001E93E CBFC 0018                  		muls.w	#$18,d5
0001E942 7400                       		moveq	#0,d2
0001E944 3438 F700                  		move.w	($FFFFF700).w,d2
0001E948 84FC 0018                  		divu.w	#$18,d2
0001E94C 4842                       		swap	d2
0001E94E 4442                       		neg.w	d2
0001E950 0642 FF4C                  		addi.w	#-$B4,d2
0001E954 7600                       		moveq	#0,d3
0001E956 3638 F704                  		move.w	($FFFFF704).w,d3
0001E95A 86FC 0018                  		divu.w	#$18,d3
0001E95E 4843                       		swap	d3
0001E960 4443                       		neg.w	d3
0001E962 0643 FF4C                  		addi.w	#-$B4,d3
0001E966 3E3C 000F                  		move.w	#$F,d7
0001E96A                            
0001E96A                            loc_1B19E:
0001E96A 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E96E 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E972 4440                       		neg.w	d0
0001E974 C3C2                       		muls.w	d2,d1
0001E976 C1C3                       		muls.w	d3,d0
0001E978 2C00                       		move.l	d0,d6
0001E97A DC81                       		add.l	d1,d6
0001E97C 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E980 C1C2                       		muls.w	d2,d0
0001E982 C3C3                       		muls.w	d3,d1
0001E984 D280                       		add.l	d0,d1
0001E986 2406                       		move.l	d6,d2
0001E988 3C3C 000F                  		move.w	#$F,d6
0001E98C                            
0001E98C                            loc_1B1C0:
0001E98C 2002                       		move.l	d2,d0
0001E98E E080                       		asr.l	#8,d0
0001E990 32C0                       		move.w	d0,(a1)+
0001E992 2001                       		move.l	d1,d0
0001E994 E080                       		asr.l	#8,d0
0001E996 32C0                       		move.w	d0,(a1)+
0001E998 D485                       		add.l	d5,d2
0001E99A D284                       		add.l	d4,d1
0001E99C 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E9A0                            
0001E9A0 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E9A4 0643 0018                  		addi.w	#$18,d3
0001E9A8 51CF FFC0                  		dbf	d7,loc_1B19E
0001E9AC                            
0001E9AC 3A1F                       		move.w	(sp)+,d5
0001E9AE 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E9B4 7000                       		moveq	#0,d0
0001E9B6 3038 F704                  		move.w	($FFFFF704).w,d0
0001E9BA 80FC 0018                  		divu.w	#$18,d0
0001E9BE C0FC 0080                  		mulu.w	#$80,d0
0001E9C2 D1C0                       		adda.l	d0,a0
0001E9C4 7000                       		moveq	#0,d0
0001E9C6 3038 F700                  		move.w	($FFFFF700).w,d0
0001E9CA 80FC 0018                  		divu.w	#$18,d0
0001E9CE D0C0                       		adda.w	d0,a0
0001E9D0 49F8 8000                  		lea	($FFFF8000).w,a4
0001E9D4 3E3C 000F                  		move.w	#$F,d7
0001E9D8                            
0001E9D8                            loc_1B20C:
0001E9D8 3C3C 000F                  		move.w	#$F,d6
0001E9DC                            
0001E9DC                            loc_1B210:
0001E9DC 7000                       		moveq	#0,d0
0001E9DE 1018                       		move.b	(a0)+,d0
0001E9E0 6700                       		beq.s	loc_1B268
0001E9E2 0C00 004E                  		cmpi.b	#$4E,d0
0001E9E6 6200                       		bhi.s	loc_1B268
0001E9E8 3614                       		move.w	(a4),d3
0001E9EA 0643 0120                  		addi.w	#$120,d3
0001E9EE 0C43 0070                  		cmpi.w	#$70,d3
0001E9F2 6500                       		bcs.s	loc_1B268
0001E9F4 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E9F8 6400                       		bcc.s	loc_1B268
0001E9FA 342C 0002                  		move.w	2(a4),d2
0001E9FE 0642 00F0                  		addi.w	#$F0,d2
0001EA02 0C42 0070                  		cmpi.w	#$70,d2
0001EA06 6500                       		bcs.s	loc_1B268
0001EA08 0C42 0170                  		cmpi.w	#$170,d2
0001EA0C 6400                       		bcc.s	loc_1B268
0001EA0E 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001EA14 E748                       		lsl.w	#3,d0
0001EA16 4BF5 0000                  		lea	(a5,d0.w),a5
0001EA1A 225D                       		movea.l	(a5)+,a1
0001EA1C 321D                       		move.w	(a5)+,d1
0001EA1E D241                       		add.w	d1,d1
0001EA20 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001EA24 365D                       		movea.w	(a5)+,a3
0001EA26 7200                       		moveq	#0,d1
0001EA28 1219                       		move.b	(a1)+,d1
0001EA2A 5301                       		subq.b	#1,d1
0001EA2C 6B00                       		bmi.s	loc_1B268
0001EA2E 4EB9 0001 0660             		jsr	sub_D762
0001EA34                            
0001EA34                            loc_1B268:
0001EA34 584C                       		addq.w	#4,a4
0001EA36 51CE FFA4                  		dbf	d6,loc_1B210
0001EA3A                            
0001EA3A 41E8 0070                  		lea	$70(a0),a0
0001EA3E 51CF FF98                  		dbf	d7,loc_1B20C
0001EA42                            
0001EA42 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001EA46 0C05 0050                  		cmpi.b	#$50,d5
0001EA4A 6700                       		beq.s	loc_1B288
0001EA4C 24BC 0000 0000             		move.l	#0,(a2)
0001EA52 4E75                       		rts	
0001EA54                            ; ===========================================================================
0001EA54                            
0001EA54                            loc_1B288:
0001EA54 157C 0000 FFFB             		move.b	#0,-5(a2)
0001EA5A 4E75                       		rts	
0001EA5C                            ; End of function SS_ShowLayout
0001EA5C                            
0001EA5C                            ; ---------------------------------------------------------------------------
0001EA5C                            ; Subroutine to	animate	walls and rings	in the special stage
0001EA5C                            ; ---------------------------------------------------------------------------
0001EA5C                            
0001EA5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA5C                            
0001EA5C                            
0001EA5C                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001EA5C 43F9 00FF 400C             		lea	($FF400C).l,a1
0001EA62 7000                       		moveq	#0,d0
0001EA64 1038 F780                  		move.b	($FFFFF780).w,d0
0001EA68 E408                       		lsr.b	#2,d0
0001EA6A 0240 000F                  		andi.w	#$F,d0
0001EA6E 7223                       		moveq	#$23,d1
0001EA70                            
0001EA70                            loc_1B2A4:
0001EA70 3280                       		move.w	d0,(a1)
0001EA72 5049                       		addq.w	#8,a1
0001EA74 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001EA78                            
0001EA78 43F9 00FF 4005             		lea	($FF4005).l,a1
0001EA7E 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001EA82 6A00                       		bpl.s	loc_1B2C8
0001EA84 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001EA8A 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001EA8E 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001EA94                            
0001EA94                            loc_1B2C8:
0001EA94 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001EA9A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001EA9E 6A00                       		bpl.s	loc_1B2E4
0001EAA0 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001EAA6 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001EAAA 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001EAB0                            
0001EAB0                            loc_1B2E4:
0001EAB0 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001EAB4 1340 0138                  		move.b	d0,$138(a1)
0001EAB8 1340 0160                  		move.b	d0,$160(a1)
0001EABC 1340 0148                  		move.b	d0,$148(a1)
0001EAC0 1340 0150                  		move.b	d0,$150(a1)
0001EAC4 1340 01D8                  		move.b	d0,$1D8(a1)
0001EAC8 1340 01E0                  		move.b	d0,$1E0(a1)
0001EACC 1340 01E8                  		move.b	d0,$1E8(a1)
0001EAD0 1340 01F0                  		move.b	d0,$1F0(a1)
0001EAD4 1340 01F8                  		move.b	d0,$1F8(a1)
0001EAD8 1340 0200                  		move.b	d0,$200(a1)
0001EADC 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001EAE0 6A00                       		bpl.s	loc_1B326
0001EAE2 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001EAE8 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001EAEC 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001EAF2                            
0001EAF2                            loc_1B326:
0001EAF2 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001EAF6 1340 0168                  		move.b	d0,$168(a1)
0001EAFA 1340 0170                  		move.b	d0,$170(a1)
0001EAFE 1340 0178                  		move.b	d0,$178(a1)
0001EB02 1340 0180                  		move.b	d0,$180(a1)
0001EB06 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001EB0A 6A00                       		bpl.s	loc_1B350
0001EB0C 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001EB12 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001EB16 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001EB1C                            
0001EB1C                            loc_1B350:
0001EB1C 43F9 00FF 4016             		lea	($FF4016).l,a1
0001EB22 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001EB28 7000                       		moveq	#0,d0
0001EB2A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001EB2E D040                       		add.w	d0,d0
0001EB30 41F0 0000                  		lea	(a0,d0.w),a0
0001EB34 3290                       		move.w	(a0),(a1)
0001EB36 3368 0002 0008             		move.w	2(a0),8(a1)
0001EB3C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001EB42 3368 0006 0018             		move.w	6(a0),$18(a1)
0001EB48 3368 0008 0020             		move.w	8(a0),$20(a1)
0001EB4E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001EB54 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001EB5A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001EB60 D0FC 0020                  		adda.w	#$20,a0
0001EB64 D2FC 0048                  		adda.w	#$48,a1
0001EB68 3290                       		move.w	(a0),(a1)
0001EB6A 3368 0002 0008             		move.w	2(a0),8(a1)
0001EB70 3368 0004 0010             		move.w	4(a0),$10(a1)
0001EB76 3368 0006 0018             		move.w	6(a0),$18(a1)
0001EB7C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001EB82 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001EB88 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001EB8E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001EB94 D0FC 0020                  		adda.w	#$20,a0
0001EB98 D2FC 0048                  		adda.w	#$48,a1
0001EB9C 3290                       		move.w	(a0),(a1)
0001EB9E 3368 0002 0008             		move.w	2(a0),8(a1)
0001EBA4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001EBAA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001EBB0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001EBB6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001EBBC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001EBC2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001EBC8 D0FC 0020                  		adda.w	#$20,a0
0001EBCC D2FC 0048                  		adda.w	#$48,a1
0001EBD0 3290                       		move.w	(a0),(a1)
0001EBD2 3368 0002 0008             		move.w	2(a0),8(a1)
0001EBD8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001EBDE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001EBE4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001EBEA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001EBF0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001EBF6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001EBFC D0FC 0020                  		adda.w	#$20,a0
0001EC00 D2FC 0048                  		adda.w	#$48,a1
0001EC04 4E75                       		rts	
0001EC06                            ; End of function SS_AniWallsRings
0001EC06                            
0001EC06                            ; ===========================================================================
0001EC06 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001EC16 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001EC26 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001EC36 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001EC46 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001EC56 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001EC66 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001EC76 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001EC86                            ; ---------------------------------------------------------------------------
0001EC86                            ; Subroutine to	remove items when you collect them in the special stage
0001EC86                            ; ---------------------------------------------------------------------------
0001EC86                            
0001EC86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC86                            
0001EC86                            
0001EC86                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001EC86 45F9 00FF 4400             		lea	($FF4400).l,a2
0001EC8C 303C 001F                  		move.w	#$1F,d0
0001EC90                            
0001EC90                            loc_1B4C4:
0001EC90 4A12                       		tst.b	(a2)
0001EC92 6700                       		beq.s	locret_1B4CE
0001EC94 504A                       		addq.w	#8,a2
0001EC96 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001EC9A                            
0001EC9A                            locret_1B4CE:
0001EC9A 4E75                       		rts	
0001EC9C                            ; End of function SS_RemoveCollectedItem
0001EC9C                            
0001EC9C                            ; ---------------------------------------------------------------------------
0001EC9C                            ; Subroutine to	animate	special	stage items when you touch them
0001EC9C                            ; ---------------------------------------------------------------------------
0001EC9C                            
0001EC9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC9C                            
0001EC9C                            
0001EC9C                            SS_AniItems:				; XREF: SS_ShowLayout
0001EC9C 41F9 00FF 4400             		lea	($FF4400).l,a0
0001ECA2 3E3C 001F                  		move.w	#$1F,d7
0001ECA6                            
0001ECA6                            loc_1B4DA:
0001ECA6 7000                       		moveq	#0,d0
0001ECA8 1010                       		move.b	(a0),d0
0001ECAA 6700                       		beq.s	loc_1B4E8
0001ECAC E548                       		lsl.w	#2,d0
0001ECAE 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001ECB2 4E91                       		jsr	(a1)
0001ECB4                            
0001ECB4                            loc_1B4E8:
0001ECB4 5048                       		addq.w	#8,a0
0001ECB6                            
0001ECB6                            loc_1B4EA:
0001ECB6 51CF FFEE                  		dbf	d7,loc_1B4DA
0001ECBA                            
0001ECBA 4E75                       		rts	
0001ECBC                            ; End of function SS_AniItems
0001ECBC                            
0001ECBC                            ; ===========================================================================
0001ECBC 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001ECC0 0000 0000                  		dc.l SS_AniBumper
0001ECC4 0000 0000                  		dc.l SS_Ani1Up
0001ECC8 0000 0000                  		dc.l SS_AniReverse
0001ECCC 0000 0000                  		dc.l SS_AniEmeraldSparks
0001ECD0 0000 0000                  		dc.l SS_AniGlassBlock
0001ECD4                            ; ===========================================================================
0001ECD4                            
0001ECD4                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001ECD4 5328 0002                  		subq.b	#1,2(a0)
0001ECD8 6A00                       		bpl.s	locret_1B530
0001ECDA 117C 0005 0002             		move.b	#5,2(a0)
0001ECE0 7000                       		moveq	#0,d0
0001ECE2 1028 0003                  		move.b	3(a0),d0
0001ECE6 5228 0003                  		addq.b	#1,3(a0)
0001ECEA 2268 0004                  		movea.l	4(a0),a1
0001ECEE 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001ECF2 1280                       		move.b	d0,(a1)
0001ECF4 6600                       		bne.s	locret_1B530
0001ECF6 4290                       		clr.l	(a0)
0001ECF8 42A8 0004                  		clr.l	4(a0)
0001ECFC                            
0001ECFC                            locret_1B530:
0001ECFC 4E75                       		rts	
0001ECFE                            ; ===========================================================================
0001ECFE 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001ED04                            ; ===========================================================================
0001ED04                            
0001ED04                            SS_AniBumper:				; XREF: SS_AniIndex
0001ED04 5328 0002                  		subq.b	#1,2(a0)
0001ED08 6A00                       		bpl.s	locret_1B566
0001ED0A 117C 0007 0002             		move.b	#7,2(a0)
0001ED10 7000                       		moveq	#0,d0
0001ED12 1028 0003                  		move.b	3(a0),d0
0001ED16 5228 0003                  		addq.b	#1,3(a0)
0001ED1A 2268 0004                  		movea.l	4(a0),a1
0001ED1E 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001ED22 6600                       		bne.s	loc_1B564
0001ED24 4290                       		clr.l	(a0)
0001ED26 42A8 0004                  		clr.l	4(a0)
0001ED2A 12BC 0025                  		move.b	#$25,(a1)
0001ED2E 4E75                       		rts	
0001ED30                            ; ===========================================================================
0001ED30                            
0001ED30                            loc_1B564:
0001ED30 1280                       		move.b	d0,(a1)
0001ED32                            
0001ED32                            locret_1B566:
0001ED32 4E75                       		rts	
0001ED34                            ; ===========================================================================
0001ED34 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001ED3A                            ; ===========================================================================
0001ED3A                            
0001ED3A                            SS_Ani1Up:				; XREF: SS_AniIndex
0001ED3A 5328 0002                  		subq.b	#1,2(a0)
0001ED3E 6A00                       		bpl.s	locret_1B596
0001ED40 117C 0005 0002             		move.b	#5,2(a0)
0001ED46 7000                       		moveq	#0,d0
0001ED48 1028 0003                  		move.b	3(a0),d0
0001ED4C 5228 0003                  		addq.b	#1,3(a0)
0001ED50 2268 0004                  		movea.l	4(a0),a1
0001ED54 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001ED58 1280                       		move.b	d0,(a1)
0001ED5A 6600                       		bne.s	locret_1B596
0001ED5C 4290                       		clr.l	(a0)
0001ED5E 42A8 0004                  		clr.l	4(a0)
0001ED62                            
0001ED62                            locret_1B596:
0001ED62 4E75                       		rts	
0001ED64                            ; ===========================================================================
0001ED64 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001ED6A                            ; ===========================================================================
0001ED6A                            
0001ED6A                            SS_AniReverse:				; XREF: SS_AniIndex
0001ED6A 5328 0002                  		subq.b	#1,2(a0)
0001ED6E 6A00                       		bpl.s	locret_1B5CC
0001ED70 117C 0007 0002             		move.b	#7,2(a0)
0001ED76 7000                       		moveq	#0,d0
0001ED78 1028 0003                  		move.b	3(a0),d0
0001ED7C 5228 0003                  		addq.b	#1,3(a0)
0001ED80 2268 0004                  		movea.l	4(a0),a1
0001ED84 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001ED88 6600                       		bne.s	loc_1B5CA
0001ED8A 4290                       		clr.l	(a0)
0001ED8C 42A8 0004                  		clr.l	4(a0)
0001ED90 12BC 002B                  		move.b	#$2B,(a1)
0001ED94 4E75                       		rts	
0001ED96                            ; ===========================================================================
0001ED96                            
0001ED96                            loc_1B5CA:
0001ED96 1280                       		move.b	d0,(a1)
0001ED98                            
0001ED98                            locret_1B5CC:
0001ED98 4E75                       		rts	
0001ED9A                            ; ===========================================================================
0001ED9A 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001EDA0                            ; ===========================================================================
0001EDA0                            
0001EDA0                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001EDA0 5328 0002                  		subq.b	#1,2(a0)
0001EDA4 6A00                       		bpl.s	locret_1B60C
0001EDA6 117C 0005 0002             		move.b	#5,2(a0)
0001EDAC 7000                       		moveq	#0,d0
0001EDAE 1028 0003                  		move.b	3(a0),d0
0001EDB2 5228 0003                  		addq.b	#1,3(a0)
0001EDB6 2268 0004                  		movea.l	4(a0),a1
0001EDBA 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001EDBE 1280                       		move.b	d0,(a1)
0001EDC0 6600                       		bne.s	locret_1B60C
0001EDC2 4290                       		clr.l	(a0)
0001EDC4 42A8 0004                  		clr.l	4(a0)
0001EDC8 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001EDCE 303C 00A8                  		move.w	#$A8,d0
0001EDD2 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001EDD8                            
0001EDD8                            locret_1B60C:
0001EDD8 4E75                       		rts	
0001EDDA                            ; ===========================================================================
0001EDDA 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001EDE0                            ; ===========================================================================
0001EDE0                            
0001EDE0                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001EDE0 5328 0002                  		subq.b	#1,2(a0)
0001EDE4 6A00                       		bpl.s	locret_1B640
0001EDE6 117C 0001 0002             		move.b	#1,2(a0)
0001EDEC 7000                       		moveq	#0,d0
0001EDEE 1028 0003                  		move.b	3(a0),d0
0001EDF2 5228 0003                  		addq.b	#1,3(a0)
0001EDF6 2268 0004                  		movea.l	4(a0),a1
0001EDFA 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001EDFE 1280                       		move.b	d0,(a1)
0001EE00 6600                       		bne.s	locret_1B640
0001EE02 12A8 0004                  		move.b	4(a0),(a1)
0001EE06 4290                       		clr.l	(a0)
0001EE08 42A8 0004                  		clr.l	4(a0)
0001EE0C                            
0001EE0C                            locret_1B640:
0001EE0C 4E75                       		rts	
0001EE0E                            ; ===========================================================================
0001EE0E 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001EE18                            ; ---------------------------------------------------------------------------
0001EE18                            ; Special stage	layout pointers
0001EE18                            ; ---------------------------------------------------------------------------
0001EE18                            SS_LayoutIndex:
0001EE18                            	include "_inc\Special stage layout pointers.asm"
0001EE18                            ; ---------------------------------------------------------------------------
0001EE18                            ; Special stage	layout pointers
0001EE18                            ; ---------------------------------------------------------------------------
0001EE18 0000 0000                  	dc.l SS_1
0001EE1C 0000 0000                  	dc.l SS_2
0001EE20 0000 0000                  	dc.l SS_3
0001EE24 0000 0000                  	dc.l SS_4
0001EE28 0000 0000                  	dc.l SS_5
0001EE2C 0000 0000                  	dc.l SS_6
0001EE30                            	even
0001EE30                            	even
0001EE30                            
0001EE30                            ; ---------------------------------------------------------------------------
0001EE30                            ; Special stage	start locations
0001EE30                            ; ---------------------------------------------------------------------------
0001EE30                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001EE48                            		even
0001EE48                            
0001EE48                            ; ---------------------------------------------------------------------------
0001EE48                            ; Subroutine to	load special stage layout
0001EE48                            ; ---------------------------------------------------------------------------
0001EE48                            
0001EE48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE48                            
0001EE48                            
0001EE48                            SS_Load:				; XREF: SpecialStage
0001EE48 7000                       		moveq	#0,d0
0001EE4A 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001EE4E 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001EE52 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001EE58 6500                       		bcs.s	SS_ChkEmldNum
0001EE5A 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001EE60                            
0001EE60                            SS_ChkEmldNum:
0001EE60 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001EE66 6700                       		beq.s	SS_LoadData	; if yes, branch
0001EE68 7200                       		moveq	#0,d1
0001EE6A 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001EE6E 5301                       		subq.b	#1,d1
0001EE70 6500                       		bcs.s	SS_LoadData
0001EE72 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001EE76                            
0001EE76                            SS_ChkEmldLoop:	
0001EE76 B033 1000                  		cmp.b	(a3,d1.w),d0
0001EE7A 6600                       		bne.s	SS_ChkEmldRepeat
0001EE7C 60CA                       		bra.s	SS_Load
0001EE7E                            ; ===========================================================================
0001EE7E                            
0001EE7E                            SS_ChkEmldRepeat:
0001EE7E 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001EE82                            
0001EE82                            SS_LoadData:
0001EE82 E548                       		lsl.w	#2,d0
0001EE84 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001EE88 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001EE8C 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001EE90 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001EE94 43F9 00FF 4000             		lea	($FF4000).l,a1
0001EE9A 303C 0000                  		move.w	#0,d0
0001EE9E 4EB9 0000 1F40             		jsr	(EniDec).l
0001EEA4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EEAA 303C 0FFF                  		move.w	#$FFF,d0
0001EEAE                            
0001EEAE                            SS_ClrRAM3:
0001EEAE 4299                       		clr.l	(a1)+
0001EEB0 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001EEB4                            
0001EEB4 43F9 00FF 1020             		lea	($FF1020).l,a1
0001EEBA 41F9 00FF 4000             		lea	($FF4000).l,a0
0001EEC0 723F                       		moveq	#$3F,d1
0001EEC2                            
0001EEC2                            loc_1B6F6:
0001EEC2 743F                       		moveq	#$3F,d2
0001EEC4                            
0001EEC4                            loc_1B6F8:
0001EEC4 12D8                       		move.b	(a0)+,(a1)+
0001EEC6 51CA FFFC                  		dbf	d2,loc_1B6F8
0001EECA                            
0001EECA 43E9 0040                  		lea	$40(a1),a1
0001EECE 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001EED2                            
0001EED2 43F9 00FF 4008             		lea	($FF4008).l,a1
0001EED8 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001EEDE 724D                       		moveq	#$4D,d1
0001EEE0                            
0001EEE0                            loc_1B714:
0001EEE0 22D8                       		move.l	(a0)+,(a1)+
0001EEE2 32FC 0000                  		move.w	#0,(a1)+
0001EEE6 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001EEEC 32D8                       		move.w	(a0)+,(a1)+
0001EEEE 51C9 FFF0                  		dbf	d1,loc_1B714
0001EEF2                            
0001EEF2 43F9 00FF 4400             		lea	($FF4400).l,a1
0001EEF8 323C 003F                  		move.w	#$3F,d1
0001EEFC                            
0001EEFC                            loc_1B730:
0001EEFC                            
0001EEFC 4299                       		clr.l	(a1)+
0001EEFE 51C9 FFFC                  		dbf	d1,loc_1B730
0001EF02                            
0001EF02 4E75                       		rts	
0001EF04                            ; End of function SS_Load
0001EF04                            
0001EF04                            ; ===========================================================================
0001EF04                            ; ---------------------------------------------------------------------------
0001EF04                            ; Special stage	mappings and VRAM pointers
0001EF04                            ; ---------------------------------------------------------------------------
0001EF04                            SS_MapIndex:
0001EF04                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001EF04                            ; ---------------------------------------------------------------------------
0001EF04                            ; Special stage	mappings and VRAM pointers
0001EF04                            ; ---------------------------------------------------------------------------
0001EF04 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001EF08 0142                       	dc.w $142		; VRAM setting
0001EF0A 0000 0000                  	dc.l Map_SSWalls
0001EF0E 0142                       	dc.w $142
0001EF10 0000 0000                  	dc.l Map_SSWalls
0001EF14 0142                       	dc.w $142
0001EF16 0000 0000                  	dc.l Map_SSWalls
0001EF1A 0142                       	dc.w $142
0001EF1C 0000 0000                  	dc.l Map_SSWalls
0001EF20 0142                       	dc.w $142
0001EF22 0000 0000                  	dc.l Map_SSWalls
0001EF26 0142                       	dc.w $142
0001EF28 0000 0000                  	dc.l Map_SSWalls
0001EF2C 0142                       	dc.w $142
0001EF2E 0000 0000                  	dc.l Map_SSWalls
0001EF32 0142                       	dc.w $142
0001EF34 0000 0000                  	dc.l Map_SSWalls
0001EF38 0142                       	dc.w $142
0001EF3A 0000 0000                  	dc.l Map_SSWalls
0001EF3E 2142                       	dc.w $2142
0001EF40 0000 0000                  	dc.l Map_SSWalls
0001EF44 2142                       	dc.w $2142
0001EF46 0000 0000                  	dc.l Map_SSWalls
0001EF4A 2142                       	dc.w $2142
0001EF4C 0000 0000                  	dc.l Map_SSWalls
0001EF50 2142                       	dc.w $2142
0001EF52 0000 0000                  	dc.l Map_SSWalls
0001EF56 2142                       	dc.w $2142
0001EF58 0000 0000                  	dc.l Map_SSWalls
0001EF5C 2142                       	dc.w $2142
0001EF5E 0000 0000                  	dc.l Map_SSWalls
0001EF62 2142                       	dc.w $2142
0001EF64 0000 0000                  	dc.l Map_SSWalls
0001EF68 2142                       	dc.w $2142
0001EF6A 0000 0000                  	dc.l Map_SSWalls
0001EF6E 2142                       	dc.w $2142
0001EF70 0000 0000                  	dc.l Map_SSWalls
0001EF74 4142                       	dc.w $4142
0001EF76 0000 0000                  	dc.l Map_SSWalls
0001EF7A 4142                       	dc.w $4142
0001EF7C 0000 0000                  	dc.l Map_SSWalls
0001EF80 4142                       	dc.w $4142
0001EF82 0000 0000                  	dc.l Map_SSWalls
0001EF86 4142                       	dc.w $4142
0001EF88 0000 0000                  	dc.l Map_SSWalls
0001EF8C 4142                       	dc.w $4142
0001EF8E 0000 0000                  	dc.l Map_SSWalls
0001EF92 4142                       	dc.w $4142
0001EF94 0000 0000                  	dc.l Map_SSWalls
0001EF98 4142                       	dc.w $4142
0001EF9A 0000 0000                  	dc.l Map_SSWalls
0001EF9E 4142                       	dc.w $4142
0001EFA0 0000 0000                  	dc.l Map_SSWalls
0001EFA4 4142                       	dc.w $4142
0001EFA6 0000 0000                  	dc.l Map_SSWalls
0001EFAA 6142                       	dc.w $6142
0001EFAC 0000 0000                  	dc.l Map_SSWalls
0001EFB0 6142                       	dc.w $6142
0001EFB2 0000 0000                  	dc.l Map_SSWalls
0001EFB6 6142                       	dc.w $6142
0001EFB8 0000 0000                  	dc.l Map_SSWalls
0001EFBC 6142                       	dc.w $6142
0001EFBE 0000 0000                  	dc.l Map_SSWalls
0001EFC2 6142                       	dc.w $6142
0001EFC4 0000 0000                  	dc.l Map_SSWalls
0001EFC8 6142                       	dc.w $6142
0001EFCA 0000 0000                  	dc.l Map_SSWalls
0001EFCE 6142                       	dc.w $6142
0001EFD0 0000 0000                  	dc.l Map_SSWalls
0001EFD4 6142                       	dc.w $6142
0001EFD6 0000 0000                  	dc.l Map_SSWalls
0001EFDA 6142                       	dc.w $6142
0001EFDC 0001 1A06                  	dc.l Map_obj47
0001EFE0 023B                       	dc.w $23B
0001EFE2 0000 0000                  	dc.l Map_SS_R
0001EFE6 0570                       	dc.w $570
0001EFE8 0000 0000                  	dc.l Map_SS_R
0001EFEC 0251                       	dc.w $251
0001EFEE 0000 0000                  	dc.l Map_SS_R
0001EFF2 0370                       	dc.w $370
0001EFF4 0000 0000                  	dc.l Map_SS_Up
0001EFF8 0263                       	dc.w $263
0001EFFA 0000 0000                  	dc.l Map_SS_Down
0001EFFE 0263                       	dc.w $263
0001F000 0000 0000                  	dc.l Map_SS_R
0001F004 22F0                       	dc.w $22F0
0001F006 0000 0000                  	dc.l Map_SS_Glass
0001F00A 0470                       	dc.w $470
0001F00C 0000 0000                  	dc.l Map_SS_Glass
0001F010 05F0                       	dc.w $5F0
0001F012 0000 0000                  	dc.l Map_SS_Glass
0001F016 65F0                       	dc.w $65F0
0001F018 0000 0000                  	dc.l Map_SS_Glass
0001F01C 25F0                       	dc.w $25F0
0001F01E 0000 0000                  	dc.l Map_SS_Glass
0001F022 45F0                       	dc.w $45F0
0001F024 0000 0000                  	dc.l Map_SS_R
0001F028 02F0                       	dc.w $2F0
0001F02A 0101 1A06                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001F02E 023B                       	dc.w $23B
0001F030 0201 1A06                  	dc.l Map_obj47+$2000000
0001F034 023B                       	dc.w $23B
0001F036 0000 0000                  	dc.l Map_SS_R
0001F03A 0797                       	dc.w $797
0001F03C 0000 0000                  	dc.l Map_SS_R
0001F040 07A0                       	dc.w $7A0
0001F042 0000 0000                  	dc.l Map_SS_R
0001F046 07A9                       	dc.w $7A9
0001F048 0000 0000                  	dc.l Map_SS_R
0001F04C 0797                       	dc.w $797
0001F04E 0000 0000                  	dc.l Map_SS_R
0001F052 07A0                       	dc.w $7A0
0001F054 0000 0000                  	dc.l Map_SS_R
0001F058 07A9                       	dc.w $7A9
0001F05A 0000 C842                  	dc.l Map_obj25
0001F05E 27B2                       	dc.w $27B2
0001F060 0000 0000                  	dc.l Map_SS_Chaos3
0001F064 0770                       	dc.w $770
0001F066 0000 0000                  	dc.l Map_SS_Chaos3
0001F06A 2770                       	dc.w $2770
0001F06C 0000 0000                  	dc.l Map_SS_Chaos3
0001F070 4770                       	dc.w $4770
0001F072 0000 0000                  	dc.l Map_SS_Chaos3
0001F076 6770                       	dc.w $6770
0001F078 0000 0000                  	dc.l Map_SS_Chaos1
0001F07C 0770                       	dc.w $770
0001F07E 0000 0000                  	dc.l Map_SS_Chaos2
0001F082 0770                       	dc.w $770
0001F084 0000 0000                  	dc.l Map_SS_R
0001F088 04F0                       	dc.w $4F0
0001F08A 0400 C842                  	dc.l Map_obj25+$4000000
0001F08E 27B2                       	dc.w $27B2
0001F090 0500 C842                  	dc.l Map_obj25+$5000000
0001F094 27B2                       	dc.w $27B2
0001F096 0600 C842                  	dc.l Map_obj25+$6000000
0001F09A 27B2                       	dc.w $27B2
0001F09C 0700 C842                  	dc.l Map_obj25+$7000000
0001F0A0 27B2                       	dc.w $27B2
0001F0A2 0000 0000                  	dc.l Map_SS_Glass
0001F0A6 23F0                       	dc.w $23F0
0001F0A8 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001F0AC 23F0                       	dc.w $23F0
0001F0AE 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001F0B2 23F0                       	dc.w $23F0
0001F0B4 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001F0B8 23F0                       	dc.w $23F0
0001F0BA 0000 0000                  	dc.l Map_SS_R+$2000000
0001F0BE 04F0                       	dc.w $4F0
0001F0C0 0000 0000                  	dc.l Map_SS_Glass
0001F0C4 05F0                       	dc.w $5F0
0001F0C6 0000 0000                  	dc.l Map_SS_Glass
0001F0CA 65F0                       	dc.w $65F0
0001F0CC 0000 0000                  	dc.l Map_SS_Glass
0001F0D0 25F0                       	dc.w $25F0
0001F0D2 0000 0000                  	dc.l Map_SS_Glass
0001F0D6 45F0                       	dc.w $45F0
0001F0D6 45F0                       	dc.w $45F0
0001F0D8                            
0001F0D8                            ; ---------------------------------------------------------------------------
0001F0D8                            ; Sprite mappings - special stage "R" block
0001F0D8                            ; ---------------------------------------------------------------------------
0001F0D8                            Map_SS_R:
0001F0D8                            	include "_maps\SSRblock.asm"
0001F0D8                            ; ---------------------------------------------------------------------------
0001F0D8                            ; Sprite mappings - special stage "R" block
0001F0D8                            ; ---------------------------------------------------------------------------
0001F0D8 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001F0DC 0000                       		dc.w byte_1B91E-Map_SS_R
0001F0DE 01                         byte_1B912:	dc.b 1
0001F0DF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F0E4 01                         byte_1B918:	dc.b 1
0001F0E5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001F0EA 00                         byte_1B91E:	dc.b 0
0001F0EC 00                         		even
0001F0EC 00                         		even
0001F0EC                            
0001F0EC                            ; ---------------------------------------------------------------------------
0001F0EC                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001F0EC                            ; ---------------------------------------------------------------------------
0001F0EC                            Map_SS_Glass:
0001F0EC                            	include "_maps\SSglassblock.asm"
0001F0EC                            ; ---------------------------------------------------------------------------
0001F0EC                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001F0EC                            ; ---------------------------------------------------------------------------
0001F0EC 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001F0F0 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001F0F4 01                         byte_1B928:	dc.b 1
0001F0F5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F0FA 01                         byte_1B92E:	dc.b 1
0001F0FB F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001F100 01                         byte_1B934:	dc.b 1
0001F101 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001F106 01                         byte_1B93A:	dc.b 1
0001F107 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001F10C                            		even
0001F10C                            		even
0001F10C                            
0001F10C                            ; ---------------------------------------------------------------------------
0001F10C                            ; Sprite mappings - special stage "UP" block
0001F10C                            ; ---------------------------------------------------------------------------
0001F10C                            Map_SS_Up:
0001F10C                            	include "_maps\SSUPblock.asm"
0001F10C                            ; ---------------------------------------------------------------------------
0001F10C                            ; Sprite mappings - special stage "UP" block
0001F10C                            ; ---------------------------------------------------------------------------
0001F10C 0000                       		dc.w byte_1B944-Map_SS_Up
0001F10E 0000                       		dc.w byte_1B94A-Map_SS_Up
0001F110 01                         byte_1B944:	dc.b 1
0001F111 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001F116 01                         byte_1B94A:	dc.b 1
0001F117 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001F11C                            		even
0001F11C                            		even
0001F11C                            
0001F11C                            ; ---------------------------------------------------------------------------
0001F11C                            ; Sprite mappings - special stage "DOWN" block
0001F11C                            ; ---------------------------------------------------------------------------
0001F11C                            Map_SS_Down:
0001F11C                            	include "_maps\SSDOWNblock.asm"
0001F11C                            ; ---------------------------------------------------------------------------
0001F11C                            ; Sprite mappings - special stage "DOWN" block
0001F11C                            ; ---------------------------------------------------------------------------
0001F11C 0000                       		dc.w byte_1B954-Map_SS_Down
0001F11E 0000                       		dc.w byte_1B95A-Map_SS_Down
0001F120 01                         byte_1B954:	dc.b 1
0001F121 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001F126 01                         byte_1B95A:	dc.b 1
0001F127 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001F12C                            		even
0001F12C                            		even
0001F12C                            
0001F12C                            ; ---------------------------------------------------------------------------
0001F12C                            ; Sprite mappings - special stage chaos	emeralds
0001F12C                            ; ---------------------------------------------------------------------------
0001F12C 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001F12E 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001F130 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001F132 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001F134 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001F136 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001F138 01                         byte_1B96C:	dc.b 1
0001F139 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001F13E 01                         byte_1B972:	dc.b 1
0001F13F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001F144 01                         byte_1B978:	dc.b 1
0001F145 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001F14A 01                         byte_1B97E:	dc.b 1
0001F14B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001F150                            		even
0001F150                            ; ===========================================================================
0001F150                            ; ---------------------------------------------------------------------------
0001F150                            ; Object 09 - Sonic (special stage)
0001F150                            ; ---------------------------------------------------------------------------
0001F150                            
0001F150                            Obj09:					; XREF: Obj_Index
0001F150 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001F154 6700                       		beq.s	Obj09_Normal	; if not, branch
0001F156 6100 0000                  		bsr.w	SS_FixCamera
0001F15A 6000 0000                  		bra.w	DebugMode
0001F15E                            ; ===========================================================================
0001F15E                            
0001F15E                            Obj09_Normal:
0001F15E 7000                       		moveq	#0,d0
0001F160 1028 0024                  		move.b	$24(a0),d0
0001F164 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001F168 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001F16C                            ; ===========================================================================
0001F16C 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001F16E 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001F170 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001F172 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001F174                            ; ===========================================================================
0001F174                            
0001F174                            Obj09_Main:				; XREF: Obj09_Index
0001F174 5428 0024                  		addq.b	#2,$24(a0)
0001F178 117C 000E 0016             		move.b	#$E,$16(a0)
0001F17E 117C 0007 0017             		move.b	#7,$17(a0)
0001F184 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001F18C 0C38 0001 FF9C             		cmpi.b	#1,($FFFFFF9C).w
0001F192 6700                       		beq.s	Obj09_Main_Windy
0001F194 317C 0780 0002             		move.w	#$780,2(a0)
0001F19A 6000                       		bra.s	Cont4
0001F19C                            
0001F19C                            Obj09_Main_Windy:
0001F19C 317C 2780 0002             		move.w	#$2780,2(a0)
0001F1A2                            
0001F1A2                            Cont4:
0001F1A2 117C 0004 0001             		move.b	#4,1(a0)
0001F1A8 117C 0000 0018             		move.b	#0,$18(a0)
0001F1AE 117C 0002 001C             		move.b	#2,$1C(a0)
0001F1B4 08E8 0002 0022             		bset	#2,$22(a0)
0001F1BA 08E8 0001 0022             		bset	#1,$22(a0)
0001F1C0                            
0001F1C0                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001F1C0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001F1C4 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001F1C6 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001F1CC 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001F1CE 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001F1D4                            
0001F1D4                            Obj09_NoDebug:
0001F1D4 117C 0000 0030             		move.b	#0,$30(a0)
0001F1DA 7000                       		moveq	#0,d0
0001F1DC 1028 0022                  		move.b	$22(a0),d0
0001F1E0 0240 0002                  		andi.w	#2,d0
0001F1E4 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001F1E8 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001F1EC 4EBA 801C                  		jsr	LoadSonicDynPLC
0001F1F0 4EF9 0001 0502             		jmp	DisplaySprite
0001F1F6                            ; ===========================================================================
0001F1F6 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001F1F8 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001F1FA                            ; ===========================================================================
0001F1FA                            
0001F1FA                            Obj09_OnWall:				; XREF: Obj09_Modes
0001F1FA 6100 0000                  		bsr.w	Obj09_Jump
0001F1FE 6100 0000                  		bsr.w	Obj09_Move
0001F202 6100 0000                  		bsr.w	Obj09_Fall
0001F206 6000                       		bra.s	Obj09_Display
0001F208                            ; ===========================================================================
0001F208                            
0001F208                            Obj09_InAir:				; XREF: Obj09_Modes
0001F208 6100 0000                  		bsr.w	nullsub_2
0001F20C 6100 0000                  		bsr.w	Obj09_Move
0001F210 6100 0000                  		bsr.w	Obj09_Fall
0001F214                            
0001F214                            Obj09_Display:				; XREF: Obj09_OnWall
0001F214 6100 0000                  		bsr.w	Obj09_ChkItems
0001F218 6100 0000                  		bsr.w	Obj09_ChkItems2
0001F21C 4EB9 0001 04DC             		jsr	SpeedToPos
0001F222 6100 0000                  		bsr.w	SS_FixCamera
0001F226 3038 F780                  		move.w	($FFFFF780).w,d0
0001F22A D078 F782                  		add.w	($FFFFF782).w,d0
0001F22E 31C0 F780                  		move.w	d0,($FFFFF780).w
0001F232 4EB9 0001 6F7E             		jsr	Sonic_Animate
0001F238 4E75                       		rts	
0001F23A                            
0001F23A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F23A                            
0001F23A                            
0001F23A                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001F23A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001F240 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001F242 6100 0000                  		bsr.w	Obj09_MoveLeft
0001F246                            
0001F246                            Obj09_ChkRight:
0001F246 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001F24C 6700                       		beq.s	loc_1BA78	; if not, branch
0001F24E 6100 0000                  		bsr.w	Obj09_MoveRight
0001F252                            
0001F252                            loc_1BA78:
0001F252 1038 F602                  		move.b	($FFFFF602).w,d0
0001F256 0200 000C                  		andi.b	#$C,d0
0001F25A 6600                       		bne.s	loc_1BAA8
0001F25C 3028 0014                  		move.w	$14(a0),d0
0001F260 6700                       		beq.s	loc_1BAA8
0001F262 6B00                       		bmi.s	loc_1BA9A
0001F264 0440 000C                  		subi.w	#$C,d0
0001F268 6400                       		bcc.s	loc_1BA94
0001F26A 303C 0000                  		move.w	#0,d0
0001F26E                            
0001F26E                            loc_1BA94:
0001F26E 3140 0014                  		move.w	d0,$14(a0)
0001F272 6000                       		bra.s	loc_1BAA8
0001F274                            ; ===========================================================================
0001F274                            
0001F274                            loc_1BA9A:
0001F274 0640 000C                  		addi.w	#$C,d0
0001F278 6400                       		bcc.s	loc_1BAA4
0001F27A 303C 0000                  		move.w	#0,d0
0001F27E                            
0001F27E                            loc_1BAA4:
0001F27E 3140 0014                  		move.w	d0,$14(a0)
0001F282                            
0001F282                            loc_1BAA8:
0001F282 1038 F780                  		move.b	($FFFFF780).w,d0
0001F286 0600 0020                  		addi.b	#$20,d0
0001F28A 0200 00C0                  		andi.b	#$C0,d0
0001F28E 4400                       		neg.b	d0
0001F290 4EB9 0000 3798             		jsr	(CalcSine).l
0001F296 C3E8 0014                  		muls.w	$14(a0),d1
0001F29A D3A8 0008                  		add.l	d1,8(a0)
0001F29E C1E8 0014                  		muls.w	$14(a0),d0
0001F2A2 D1A8 000C                  		add.l	d0,$C(a0)
0001F2A6 48E7 C000                  		movem.l	d0-d1,-(sp)
0001F2AA 2428 000C                  		move.l	$C(a0),d2
0001F2AE 2628 0008                  		move.l	8(a0),d3
0001F2B2 6100 0000                  		bsr.w	sub_1BCE8
0001F2B6 6700                       		beq.s	loc_1BAF2
0001F2B8 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001F2BC 93A8 0008                  		sub.l	d1,8(a0)
0001F2C0 91A8 000C                  		sub.l	d0,$C(a0)
0001F2C4 317C 0000 0014             		move.w	#0,$14(a0)
0001F2CA 4E75                       		rts	
0001F2CC                            ; ===========================================================================
0001F2CC                            
0001F2CC                            loc_1BAF2:
0001F2CC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001F2D0 4E75                       		rts	
0001F2D2                            ; End of function Obj09_Move
0001F2D2                            
0001F2D2                            
0001F2D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2D2                            
0001F2D2                            
0001F2D2                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001F2D2 08E8 0000 0022             		bset	#0,$22(a0)
0001F2D8 3028 0014                  		move.w	$14(a0),d0
0001F2DC 6700                       		beq.s	loc_1BB06
0001F2DE 6A00                       		bpl.s	loc_1BB1A
0001F2E0                            
0001F2E0                            loc_1BB06:
0001F2E0 0440 000C                  		subi.w	#$C,d0
0001F2E4 0C40 F800                  		cmpi.w	#-$800,d0
0001F2E8 6E00                       		bgt.s	loc_1BB14
0001F2EA 303C F800                  		move.w	#-$800,d0
0001F2EE                            
0001F2EE                            loc_1BB14:
0001F2EE 3140 0014                  		move.w	d0,$14(a0)
0001F2F2 4E75                       		rts	
0001F2F4                            ; ===========================================================================
0001F2F4                            
0001F2F4                            loc_1BB1A:
0001F2F4 0440 0040                  		subi.w	#$40,d0
0001F2F8 6400                       		bcc.s	loc_1BB22
0001F2FA 4E71                       		nop	
0001F2FC                            
0001F2FC                            loc_1BB22:
0001F2FC 3140 0014                  		move.w	d0,$14(a0)
0001F300 4E75                       		rts	
0001F302                            ; End of function Obj09_MoveLeft
0001F302                            
0001F302                            
0001F302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F302                            
0001F302                            
0001F302                            Obj09_MoveRight:			; XREF: Obj09_Move
0001F302 08A8 0000 0022             		bclr	#0,$22(a0)
0001F308 3028 0014                  		move.w	$14(a0),d0
0001F30C 6B00                       		bmi.s	loc_1BB48
0001F30E 0640 000C                  		addi.w	#$C,d0
0001F312 0C40 0800                  		cmpi.w	#$800,d0
0001F316 6D00                       		blt.s	loc_1BB42
0001F318 303C 0800                  		move.w	#$800,d0
0001F31C                            
0001F31C                            loc_1BB42:
0001F31C 3140 0014                  		move.w	d0,$14(a0)
0001F320 6000                       		bra.s	locret_1BB54
0001F322                            ; ===========================================================================
0001F322                            
0001F322                            loc_1BB48:
0001F322 0640 0040                  		addi.w	#$40,d0
0001F326 6400                       		bcc.s	loc_1BB50
0001F328 4E71                       		nop	
0001F32A                            
0001F32A                            loc_1BB50:
0001F32A 3140 0014                  		move.w	d0,$14(a0)
0001F32E                            
0001F32E                            locret_1BB54:
0001F32E 4E75                       		rts	
0001F330                            ; End of function Obj09_MoveRight
0001F330                            
0001F330                            
0001F330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F330                            
0001F330                            
0001F330                            Obj09_Jump:				; XREF: Obj09_OnWall
0001F330 1038 F603                  		move.b	($FFFFF603).w,d0
0001F334 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001F338 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001F33A 1038 F780                  		move.b	($FFFFF780).w,d0
0001F33E 0200 00FC                  		andi.b	#$FC,d0
0001F342 4400                       		neg.b	d0
0001F344 0400 0040                  		subi.b	#$40,d0
0001F348 4EB9 0000 3798             		jsr	(CalcSine).l
0001F34E C3FC 0680                  		muls.w	#$680,d1
0001F352 E081                       		asr.l	#8,d1
0001F354 3141 0010                  		move.w	d1,$10(a0)
0001F358 C1FC 0680                  		muls.w	#$680,d0
0001F35C E080                       		asr.l	#8,d0
0001F35E 3140 0012                  		move.w	d0,$12(a0)
0001F362 08E8 0001 0022             		bset	#1,$22(a0)
0001F368 303C 00A0                  		move.w	#$A0,d0
0001F36C 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play jumping sound
0001F372                            
0001F372                            Obj09_NoJump:
0001F372 4E75                       		rts	
0001F374                            ; End of function Obj09_Jump
0001F374                            
0001F374                            
0001F374                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F374                            
0001F374                            
0001F374                            nullsub_2:				; XREF: Obj09_InAir
0001F374 4E75                       		rts	
0001F376                            ; End of function nullsub_2
0001F376                            
0001F376                            ; ===========================================================================
0001F376                            ; ---------------------------------------------------------------------------
0001F376                            ; unused subroutine to limit Sonic's upward vertical speed
0001F376                            ; ---------------------------------------------------------------------------
0001F376 323C FC00                  		move.w	#-$400,d1
0001F37A B268 0012                  		cmp.w	$12(a0),d1
0001F37E 6F00                       		ble.s	locret_1BBB4
0001F380 1038 F602                  		move.b	($FFFFF602).w,d0
0001F384 0200 0070                  		andi.b	#$70,d0
0001F388 6600                       		bne.s	locret_1BBB4
0001F38A 3141 0012                  		move.w	d1,$12(a0)
0001F38E                            
0001F38E                            locret_1BBB4:
0001F38E 4E75                       		rts	
0001F390                            ; ---------------------------------------------------------------------------
0001F390                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001F390                            ; ---------------------------------------------------------------------------
0001F390                            
0001F390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F390                            
0001F390                            
0001F390                            SS_FixCamera:				; XREF: Obj09
0001F390 3428 000C                  		move.w	$C(a0),d2
0001F394 3628 0008                  		move.w	8(a0),d3
0001F398 3038 F700                  		move.w	($FFFFF700).w,d0
0001F39C 0443 00A0                  		subi.w	#$A0,d3
0001F3A0 6500                       		bcs.s	loc_1BBCE
0001F3A2 9043                       		sub.w	d3,d0
0001F3A4 9178 F700                  		sub.w	d0,($FFFFF700).w
0001F3A8                            
0001F3A8                            loc_1BBCE:
0001F3A8 3038 F704                  		move.w	($FFFFF704).w,d0
0001F3AC 0442 0070                  		subi.w	#$70,d2
0001F3B0 6500                       		bcs.s	locret_1BBDE
0001F3B2 9042                       		sub.w	d2,d0
0001F3B4 9178 F704                  		sub.w	d0,($FFFFF704).w
0001F3B8                            
0001F3B8                            locret_1BBDE:
0001F3B8 4E75                       		rts	
0001F3BA                            ; End of function SS_FixCamera
0001F3BA                            
0001F3BA                            ; ===========================================================================
0001F3BA                            
0001F3BA                            Obj09_ExitStage:			; XREF: Obj09_Index
0001F3BA 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001F3C0 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001F3C6 6600                       		bne.s	loc_1BBF4
0001F3C8 11FC 000C FF94             		move.b	#$C,($FFFFFF94).w
0001F3CE                            
0001F3CE                            loc_1BBF4:
0001F3CE 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001F3D4 6D00                       		blt.s	loc_1BC12
0001F3D6 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001F3DC 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001F3E2 5428 0024                  		addq.b	#2,$24(a0)
0001F3E6 317C 003C 0038             		move.w	#$3C,$38(a0)
0001F3EC                            
0001F3EC                            loc_1BC12:
0001F3EC 3038 F780                  		move.w	($FFFFF780).w,d0
0001F3F0 D078 F782                  		add.w	($FFFFF782).w,d0
0001F3F4 31C0 F780                  		move.w	d0,($FFFFF780).w
0001F3F8 4EB9 0001 6F7E             		jsr	Sonic_Animate
0001F3FE 4EB9 0001 720A             		jsr	LoadSonicDynPLC
0001F404 6100 FF8A                  		bsr.w	SS_FixCamera
0001F408 4EF9 0001 0502             		jmp	DisplaySprite
0001F40E                            ; ===========================================================================
0001F40E                            
0001F40E                            Obj09_Exit2:				; XREF: Obj09_Index
0001F40E 5368 0038                  		subq.w	#1,$38(a0)
0001F412 6600                       		bne.s	loc_1BC40
0001F414 11FC 000C FF94             		move.b	#$C,($FFFFFF94).w
0001F41A                            
0001F41A                            loc_1BC40:
0001F41A 4EB9 0001 6F7E             		jsr	Sonic_Animate
0001F420 4EB9 0001 720A             		jsr	LoadSonicDynPLC
0001F426 6100 FF68                  		bsr.w	SS_FixCamera
0001F42A 4EF9 0001 0502             		jmp	DisplaySprite
0001F430                            
0001F430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F430                            
0001F430                            
0001F430                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001F430 2428 000C                  		move.l	$C(a0),d2
0001F434 2628 0008                  		move.l	8(a0),d3
0001F438 1038 F780                  		move.b	($FFFFF780).w,d0
0001F43C 0200 00FC                  		andi.b	#$FC,d0
0001F440 4EB9 0000 3798             		jsr	(CalcSine).l
0001F446 3828 0010                  		move.w	$10(a0),d4
0001F44A 48C4                       		ext.l	d4
0001F44C E184                       		asl.l	#8,d4
0001F44E C1FC 002A                  		muls.w	#$2A,d0
0001F452 D084                       		add.l	d4,d0
0001F454 3828 0012                  		move.w	$12(a0),d4
0001F458 48C4                       		ext.l	d4
0001F45A E184                       		asl.l	#8,d4
0001F45C C3FC 002A                  		muls.w	#$2A,d1
0001F460 D284                       		add.l	d4,d1
0001F462 D680                       		add.l	d0,d3
0001F464 6100 0000                  		bsr.w	sub_1BCE8
0001F468 6700                       		beq.s	loc_1BCB0
0001F46A 9680                       		sub.l	d0,d3
0001F46C 7000                       		moveq	#0,d0
0001F46E 3140 0010                  		move.w	d0,$10(a0)
0001F472 08A8 0001 0022             		bclr	#1,$22(a0)
0001F478 D481                       		add.l	d1,d2
0001F47A 6100 0000                  		bsr.w	sub_1BCE8
0001F47E 6700                       		beq.s	loc_1BCC6
0001F480 9481                       		sub.l	d1,d2
0001F482 7200                       		moveq	#0,d1
0001F484 3141 0012                  		move.w	d1,$12(a0)
0001F488 4E75                       		rts	
0001F48A                            ; ===========================================================================
0001F48A                            
0001F48A                            loc_1BCB0:
0001F48A D481                       		add.l	d1,d2
0001F48C 6100 0000                  		bsr.w	sub_1BCE8
0001F490 6700                       		beq.s	loc_1BCD4
0001F492 9481                       		sub.l	d1,d2
0001F494 7200                       		moveq	#0,d1
0001F496 3141 0012                  		move.w	d1,$12(a0)
0001F49A 08A8 0001 0022             		bclr	#1,$22(a0)
0001F4A0                            
0001F4A0                            loc_1BCC6:
0001F4A0 E080                       		asr.l	#8,d0
0001F4A2 E081                       		asr.l	#8,d1
0001F4A4 3140 0010                  		move.w	d0,$10(a0)
0001F4A8 3141 0012                  		move.w	d1,$12(a0)
0001F4AC 4E75                       		rts	
0001F4AE                            ; ===========================================================================
0001F4AE                            
0001F4AE                            loc_1BCD4:
0001F4AE E080                       		asr.l	#8,d0
0001F4B0 E081                       		asr.l	#8,d1
0001F4B2 3140 0010                  		move.w	d0,$10(a0)
0001F4B6 3141 0012                  		move.w	d1,$12(a0)
0001F4BA 08E8 0001 0022             		bset	#1,$22(a0)
0001F4C0 4E75                       		rts	
0001F4C2                            ; End of function Obj09_Fall
0001F4C2                            
0001F4C2                            
0001F4C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F4C2                            
0001F4C2                            
0001F4C2                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001F4C2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F4C8 7800                       		moveq	#0,d4
0001F4CA 4842                       		swap	d2
0001F4CC 3802                       		move.w	d2,d4
0001F4CE 4842                       		swap	d2
0001F4D0 0644 0044                  		addi.w	#$44,d4
0001F4D4 88FC 0018                  		divu.w	#$18,d4
0001F4D8 C8FC 0080                  		mulu.w	#$80,d4
0001F4DC D3C4                       		adda.l	d4,a1
0001F4DE 7800                       		moveq	#0,d4
0001F4E0 4843                       		swap	d3
0001F4E2 3803                       		move.w	d3,d4
0001F4E4 4843                       		swap	d3
0001F4E6 0644 0014                  		addi.w	#$14,d4
0001F4EA 88FC 0018                  		divu.w	#$18,d4
0001F4EE D2C4                       		adda.w	d4,a1
0001F4F0 7A00                       		moveq	#0,d5
0001F4F2 1819                       		move.b	(a1)+,d4
0001F4F4 6100                       		bsr.s	sub_1BD30
0001F4F6 1819                       		move.b	(a1)+,d4
0001F4F8 6100                       		bsr.s	sub_1BD30
0001F4FA D2FC 007E                  		adda.w	#$7E,a1
0001F4FE 1819                       		move.b	(a1)+,d4
0001F500 6100                       		bsr.s	sub_1BD30
0001F502 1819                       		move.b	(a1)+,d4
0001F504 6100                       		bsr.s	sub_1BD30
0001F506 4A05                       		tst.b	d5
0001F508 4E75                       		rts	
0001F50A                            ; End of function sub_1BCE8
0001F50A                            
0001F50A                            
0001F50A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F50A                            
0001F50A                            
0001F50A                            sub_1BD30:				; XREF: sub_1BCE8
0001F50A 6700                       		beq.s	locret_1BD44
0001F50C 0C04 0028                  		cmpi.b	#$28,d4
0001F510 6700                       		beq.s	locret_1BD44
0001F512 0C04 003A                  		cmpi.b	#$3A,d4
0001F516 6500                       		bcs.s	loc_1BD46
0001F518 0C04 004B                  		cmpi.b	#$4B,d4
0001F51C 6400                       		bcc.s	loc_1BD46
0001F51E                            
0001F51E                            locret_1BD44:
0001F51E 4E75                       		rts	
0001F520                            ; ===========================================================================
0001F520                            
0001F520                            loc_1BD46:
0001F520 1144 0030                  		move.b	d4,$30(a0)
0001F524 2149 0032                  		move.l	a1,$32(a0)
0001F528 7AFF                       		moveq	#-1,d5
0001F52A 4E75                       		rts	
0001F52C                            ; End of function sub_1BD30
0001F52C                            
0001F52C                            
0001F52C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F52C                            
0001F52C                            
0001F52C                            Obj09_ChkItems:				; XREF: Obj09_Display
0001F52C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F532 7800                       		moveq	#0,d4
0001F534 3828 000C                  		move.w	$C(a0),d4
0001F538 0644 0050                  		addi.w	#$50,d4
0001F53C 88FC 0018                  		divu.w	#$18,d4
0001F540 C8FC 0080                  		mulu.w	#$80,d4
0001F544 D3C4                       		adda.l	d4,a1
0001F546 7800                       		moveq	#0,d4
0001F548 3828 0008                  		move.w	8(a0),d4
0001F54C 0644 0020                  		addi.w	#$20,d4
0001F550 88FC 0018                  		divu.w	#$18,d4
0001F554 D2C4                       		adda.w	d4,a1
0001F556 1811                       		move.b	(a1),d4
0001F558 6600                       		bne.s	Obj09_ChkCont
0001F55A 4A28 003A                  		tst.b	$3A(a0)
0001F55E 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F562 7800                       		moveq	#0,d4
0001F564 4E75                       		rts	
0001F566                            ; ===========================================================================
0001F566                            
0001F566                            Obj09_ChkCont:
0001F566 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F56A 6600                       		bne.s	Obj09_Chk1Up
0001F56C 6100 F718                  		bsr.w	SS_RemoveCollectedItem
0001F570 6600                       		bne.s	Obj09_GetCont
0001F572 14BC 0001                  		move.b	#1,(a2)
0001F576 2549 0004                  		move.l	a1,4(a2)
0001F57A                            
0001F57A                            Obj09_GetCont:
0001F57A 4EB9 0000 C466             		jsr	CollectRing
0001F580 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001F586 6500                       		bcs.s	Obj09_NoCont
0001F588 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001F58E 6600                       		bne.s	Obj09_NoCont
0001F590 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001F594 303C 00BF                  		move.w	#$BF,d0
0001F598 4EB9 0000 19E4             		jsr	(PlaySound).l	; play extra continue sound
0001F59E                            
0001F59E                            Obj09_NoCont:
0001F59E 7800                       		moveq	#0,d4
0001F5A0 4E75                       		rts	
0001F5A2                            ; ===========================================================================
0001F5A2                            
0001F5A2                            Obj09_Chk1Up:
0001F5A2 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F5A6 6600                       		bne.s	Obj09_ChkEmer
0001F5A8 6100 F6DC                  		bsr.w	SS_RemoveCollectedItem
0001F5AC 6600                       		bne.s	Obj09_Get1Up
0001F5AE 14BC 0003                  		move.b	#3,(a2)
0001F5B2 2549 0004                  		move.l	a1,4(a2)
0001F5B6                            
0001F5B6                            Obj09_Get1Up:
0001F5B6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001F5BA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001F5BE 303C 0088                  		move.w	#$88,d0
0001F5C2 4EB9 0000 19E4             		jsr	(PlaySound).l	; play extra life music
0001F5C8 7800                       		moveq	#0,d4
0001F5CA 4E75                       		rts	
0001F5CC                            ; ===========================================================================
0001F5CC                            
0001F5CC                            Obj09_ChkEmer:
0001F5CC 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F5D0 6500                       		bcs.s	Obj09_ChkGhost
0001F5D2 0C04 0040                  		cmpi.b	#$40,d4
0001F5D6 6200                       		bhi.s	Obj09_ChkGhost
0001F5D8 6100 F6AC                  		bsr.w	SS_RemoveCollectedItem
0001F5DC 6600                       		bne.s	Obj09_GetEmer
0001F5DE 14BC 0005                  		move.b	#5,(a2)
0001F5E2 2549 0004                  		move.l	a1,4(a2)
0001F5E6                            
0001F5E6                            Obj09_GetEmer:
0001F5E6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001F5EC 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F5EE 0404 003B                  		subi.b	#$3B,d4
0001F5F2 7000                       		moveq	#0,d0
0001F5F4 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001F5F8 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001F5FC 1584 0000                  		move.b	d4,(a2,d0.w)
0001F600 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001F604                            
0001F604                            Obj09_NoEmer:
0001F604 303C 0093                  		move.w	#$93,d0
0001F608 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play emerald music
0001F60E 7800                       		moveq	#0,d4
0001F610 4E75                       		rts	
0001F612                            ; ===========================================================================
0001F612                            
0001F612                            Obj09_ChkGhost:
0001F612 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F616 6600                       		bne.s	Obj09_ChkGhostTag
0001F618 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F61E                            
0001F61E                            Obj09_ChkGhostTag:
0001F61E 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F622 6600                       		bne.s	Obj09_NoGhost
0001F624 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F62A 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F62C 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F632                            
0001F632                            Obj09_NoGhost:
0001F632 78FF                       		moveq	#-1,d4
0001F634 4E75                       		rts	
0001F636                            ; ===========================================================================
0001F636                            
0001F636                            Obj09_MakeGhostSolid:
0001F636 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F63C 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F63E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F644 723F                       		moveq	#$3F,d1
0001F646                            
0001F646                            Obj09_GhostLoop2:
0001F646 743F                       		moveq	#$3F,d2
0001F648                            
0001F648                            Obj09_GhostLoop:
0001F648 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F64C 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F64E 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F652                            
0001F652                            Obj09_NoReplace:
0001F652 5249                       		addq.w	#1,a1
0001F654 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F658 43E9 0040                  		lea	$40(a1),a1
0001F65C 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F660                            
0001F660                            Obj09_GhostNotSolid:
0001F660 4228 003A                  		clr.b	$3A(a0)
0001F664 7800                       		moveq	#0,d4
0001F666 4E75                       		rts	
0001F668                            ; End of function Obj09_ChkItems
0001F668                            
0001F668                            
0001F668                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F668                            
0001F668                            
0001F668                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001F668 1028 0030                  		move.b	$30(a0),d0
0001F66C 6600                       		bne.s	Obj09_ChkBumper
0001F66E 5328 0036                  		subq.b	#1,$36(a0)
0001F672 6A00                       		bpl.s	loc_1BEA0
0001F674 117C 0000 0036             		move.b	#0,$36(a0)
0001F67A                            
0001F67A                            loc_1BEA0:
0001F67A 5328 0037                  		subq.b	#1,$37(a0)
0001F67E 6A00                       		bpl.s	locret_1BEAC
0001F680 117C 0000 0037             		move.b	#0,$37(a0)
0001F686                            
0001F686                            locret_1BEAC:
0001F686 4E75                       		rts	
0001F688                            ; ===========================================================================
0001F688                            
0001F688                            Obj09_ChkBumper:
0001F688 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F68C 6600                       		bne.s	Obj09_GOAL
0001F68E 2228 0032                  		move.l	$32(a0),d1
0001F692 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F698 3401                       		move.w	d1,d2
0001F69A 0241 007F                  		andi.w	#$7F,d1
0001F69E C2FC 0018                  		mulu.w	#$18,d1
0001F6A2 0441 0014                  		subi.w	#$14,d1
0001F6A6 EE4A                       		lsr.w	#7,d2
0001F6A8 0242 007F                  		andi.w	#$7F,d2
0001F6AC C4FC 0018                  		mulu.w	#$18,d2
0001F6B0 0442 0044                  		subi.w	#$44,d2
0001F6B4 9268 0008                  		sub.w	8(a0),d1
0001F6B8 9468 000C                  		sub.w	$C(a0),d2
0001F6BC 4EB9 0000 3A66             		jsr	(CalcAngle).l
0001F6C2 4EB9 0000 3798             		jsr	(CalcSine).l
0001F6C8 C3FC F900                  		muls.w	#-$700,d1
0001F6CC E081                       		asr.l	#8,d1
0001F6CE 3141 0010                  		move.w	d1,$10(a0)
0001F6D2 C1FC F900                  		muls.w	#-$700,d0
0001F6D6 E080                       		asr.l	#8,d0
0001F6D8 3140 0012                  		move.w	d0,$12(a0)
0001F6DC 08E8 0001 0022             		bset	#1,$22(a0)
0001F6E2 6100 F5A2                  		bsr.w	SS_RemoveCollectedItem
0001F6E6 6600                       		bne.s	Obj09_BumpSnd
0001F6E8 14BC 0002                  		move.b	#2,(a2)
0001F6EC 2028 0032                  		move.l	$32(a0),d0
0001F6F0 5380                       		subq.l	#1,d0
0001F6F2 2540 0004                  		move.l	d0,4(a2)
0001F6F6                            
0001F6F6                            Obj09_BumpSnd:
0001F6F6 303C 00FC                  		move.w	#$FC,d0
0001F6FA 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play bumper sound
0001F700                            ; ===========================================================================
0001F700                            
0001F700                            Obj09_GOAL:
0001F700 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F704 6600                       		bne.s	Obj09_UPblock
0001F706 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001F70A 303C 00A8                  		move.w	#$A8,d0		; change item
0001F70E 4EB9 0000 1A0C             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001F714 4E75                       		rts	
0001F716                            ; ===========================================================================
0001F716                            
0001F716                            Obj09_UPblock:
0001F716 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F71A 6600                       		bne.s	Obj09_DOWNblock
0001F71C 4A28 0036                  		tst.b	$36(a0)
0001F720 6600 0000                  		bne.w	Obj09_NoGlass
0001F724 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F72A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F730 6700                       		beq.s	Obj09_UPsnd
0001F732 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001F736 2268 0032                  		movea.l	$32(a0),a1
0001F73A 5389                       		subq.l	#1,a1
0001F73C 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F740                            
0001F740                            Obj09_UPsnd:
0001F740 303C 00A9                  		move.w	#$A9,d0
0001F744 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001F74A                            ; ===========================================================================
0001F74A                            
0001F74A                            Obj09_DOWNblock:
0001F74A 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F74E 6600                       		bne.s	Obj09_Rblock
0001F750 4A28 0036                  		tst.b	$36(a0)
0001F754 6600 0000                  		bne.w	Obj09_NoGlass
0001F758 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F75E 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F764 6600                       		bne.s	Obj09_DOWNsnd
0001F766 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001F76A 2268 0032                  		movea.l	$32(a0),a1
0001F76E 5389                       		subq.l	#1,a1
0001F770 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F774                            
0001F774                            Obj09_DOWNsnd:
0001F774 303C 00A9                  		move.w	#$A9,d0
0001F778 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001F77E                            ; ===========================================================================
0001F77E                            
0001F77E                            Obj09_Rblock:
0001F77E 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F782 6600                       		bne.s	Obj09_ChkGlass
0001F784 4A28 0037                  		tst.b	$37(a0)
0001F788 6600 0000                  		bne.w	Obj09_NoGlass
0001F78C 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F792 6100 F4F2                  		bsr.w	SS_RemoveCollectedItem
0001F796 6600                       		bne.s	Obj09_RevStage
0001F798 14BC 0004                  		move.b	#4,(a2)
0001F79C 2028 0032                  		move.l	$32(a0),d0
0001F7A0 5380                       		subq.l	#1,d0
0001F7A2 2540 0004                  		move.l	d0,4(a2)
0001F7A6                            
0001F7A6                            Obj09_RevStage:
0001F7A6 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001F7AA 303C 00A9                  		move.w	#$A9,d0
0001F7AE 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play sound
0001F7B4                            ; ===========================================================================
0001F7B4                            
0001F7B4                            Obj09_ChkGlass:
0001F7B4 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F7B8 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F7BA 0C00 002E                  		cmpi.b	#$2E,d0
0001F7BE 6700                       		beq.s	Obj09_Glass
0001F7C0 0C00 002F                  		cmpi.b	#$2F,d0
0001F7C4 6700                       		beq.s	Obj09_Glass
0001F7C6 0C00 0030                  		cmpi.b	#$30,d0
0001F7CA 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F7CC                            
0001F7CC                            Obj09_Glass:
0001F7CC 6100 F4B8                  		bsr.w	SS_RemoveCollectedItem
0001F7D0 6600                       		bne.s	Obj09_GlassSnd
0001F7D2 14BC 0006                  		move.b	#6,(a2)
0001F7D6 2268 0032                  		movea.l	$32(a0),a1
0001F7DA 5389                       		subq.l	#1,a1
0001F7DC 2549 0004                  		move.l	a1,4(a2)
0001F7E0 1011                       		move.b	(a1),d0
0001F7E2 5200                       		addq.b	#1,d0		; change glass type when touched
0001F7E4 0C00 0030                  		cmpi.b	#$30,d0
0001F7E8 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F7EA 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F7EC                            
0001F7EC                            Obj09_GlassUpdate:
0001F7EC 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F7F0                            
0001F7F0                            Obj09_GlassSnd:
0001F7F0 303C 00BA                  		move.w	#$BA,d0
0001F7F4 4EF9 0000 1A0C             		jmp	(PlaySound_Special).l ;	play glass block sound
0001F7FA                            ; ===========================================================================
0001F7FA                            
0001F7FA                            Obj09_NoGlass:
0001F7FA 4E75                       		rts	
0001F7FC                            ; End of function Obj09_ChkItems2
0001F7FC                            
0001F7FC                            ; ===========================================================================
0001F7FC                            ; ---------------------------------------------------------------------------
0001F7FC                            ; Object 10 - Misc.
0001F7FC                            ; ---------------------------------------------------------------------------
0001F7FC                            
0001F7FC                            Obj10:					; XREF: Obj_Index
0001F7FC 0C38 0050 FF94             		cmpi.b	#$50,($FFFFFF94).w
0001F802 6700 0000                  		beq	Obj10_SelChar
0001F806 0C38 0001 FFBA             		cmpi.b	#1,($FFFFFFBA).w
0001F80C 6700 0000                  		beq	Obj10_SndTest
0001F810 0C38 0001 FF9A             		cmpi.b	#1,($FFFFFF9A).w
0001F816 6700 0000                  		beq.w	Obj10_LS
0001F81A 0C38 0048 FF94             		cmpi.b	#$48,($FFFFFF94).w
0001F820 6700 0000                  		beq.w	Obj10_Xulpico
0001F824 0C38 003C FF94             		cmpi.b	#$3C,($FFFFFF94).w
0001F82A 6700 0000                  		beq.w	Obj10_Xulpico
0001F82E 0C38 0040 FF94             		cmpi.b	#$40,($FFFFFF94).w
0001F834 6700 0000                  		beq.w	Obj10_Xulpico
0001F838 0C38 0001 FF9A             		cmpi.b	#1,($FFFFFF9A).w
0001F83E 6700 0000                  		beq.w	Obj10_LS
0001F842 0C38 0004 FF94             		cmpi.b	#4,($FFFFFF94).w
0001F848 6700 0000                  		beq.w	Obj10_Return
0001F84C 7000                       		moveq	#0,d0
0001F84E 1028 0024                  		move.b	$24(a0),d0
0001F852 323B 0000                  		move.w	Obj10_Index(pc,d0.w),d1
0001F856 4EBB 1000                  		jsr	Obj10_Index(pc,d1.w)
0001F85A 4EF9 0001 0502             		jmp	DisplaySprite
0001F860                            ; ===========================================================================
0001F860 0000                       Obj10_Index:	dc.w Obj10_Main-Obj10_Index
0001F862 0000                       		dc.w Obj10_First-Obj10_Index
0001F864 0000                       		dc.w Obj10_Second-Obj10_Index
0001F866 0000                       		dc.w Obj10_Third-Obj10_Index
0001F868 0000                       		dc.w Obj10_Fourth-Obj10_Index
0001F86A                            ; ===========================================================================
0001F86A                            
0001F86A                            Obj10_Main:				; XREF: Obj21_Main
0001F86A 317C 0150 0032             		move.w	#$150,$32(a0)		;Timer 1
0001F870 11FC 001F FF92             		move.b	#$1F,($FFFFFF92).w	;Timer 2
0001F876 11FC 0024 FFA0             		move.b	#$24,($FFFFFFA0).w	;Timer 3
0001F87C 5428 0024                  		addq.b	#2,$24(a0)		;go to next routine
0001F880 317C 0090 0008             		move.w	#$90,8(a0)		;x position
0001F886 317C 0108 000A             		move.w	#$108,$A(a0)		;y position
0001F88C 217C 0000 0000 0004        		move.l	#Map_obj10,4(a0)	;Maps
0001F894 317C 0310 0002             		move.w	#$310,2(a0)		;VRAM position
0001F89A 117C 0004 0001             		move.b	#4,1(a0)
0001F8A0 117C 0000 0018             		move.b	#0,$18(a0)
0001F8A6                            Obj10_Display:
0001F8A6 43F9 0000 0000             		lea	(Ani_obj10).l,a1
0001F8AC 4EB9 0000 D0AC             		jsr	AnimateSprite
0001F8B2 4EF9 0001 0502             		jmp	DisplaySprite
0001F8B8 4E75                       		rts
0001F8BA                            
0001F8BA                            Obj10_First:
0001F8BA 5368 0032                  		subq.w	#1,$32(a0)
0001F8BE 6700                       		beq.s	Next_Func
0001F8C0 117C 0000 001C             		move.b	#$0,$1C(a0)	; use normal animation
0001F8C6 4EBA FFDE                  		jsr	Obj10_Display
0001F8CA 317C 0500 0010             		move.w	#$500,$10(a0)	; make the object have a speed which moves it up quickly
0001F8D0 4EF9 0001 04DC             		jmp	SpeedToPos	
0001F8D6 4E75                       		rts
0001F8D8                            Next_Func:
0001F8D8 5428 0024                  		addq.b	#2,$24(a0)
0001F8DC 4E75                       		rts
0001F8DE                            Obj10_Second:
0001F8DE 5338 FF92                  		subq.b	#1,($FFFFFF92).w
0001F8E2 67F4                       		beq.s	Next_Func
0001F8E4 11FC 0001 FF90             		move.b	#1,($FFFFFF90).w
0001F8EA 117C 0001 001C             		move.b	#$1,$1C(a0)	; use "jumping" animation
0001F8F0 4EBA FFB4                  		jsr	Obj10_Display
0001F8F4 317C 0500 0010             		move.w	#$500,$10(a0)	; make the object have a speed which moves it up quickly
0001F8FA 317C FC00 0012             		move.w	#-$400,$12(a0)	; make the object have a speed which moves it up quickly
0001F900 4EF9 0001 04DC             		jmp	SpeedToPos	; update the object's position (move the object)
0001F906 4E75                       		rts
0001F908                            Obj10_Third:
0001F908 4238 FF92                  		clr.b	($FFFFFF92).w
0001F90C 5338 FFA0                  		subq.b	#1,($FFFFFFA0).w
0001F910 67C6                       		beq.s	Next_Func
0001F912 4EBA FF92                  		jsr	Obj10_Display
0001F916 317C 0700 0010             		move.w	#$700,$10(a0)	; make the object have a speed which moves it up quickly
0001F91C 317C 0400 0012             		move.w	#$400,$12(a0)	; make the object have a speed which moves it down quickly
0001F922 4EF9 0001 04DC             		jmp	SpeedToPos	; update the object's position (move the object)
0001F928 4E75                       		rts
0001F92A                            Obj10_Fourth:
0001F92A 4238 FFA0                  		clr.b	($FFFFFFA0).w
0001F92E 0C78 095A D008             		cmpi.w	#$95A,($FFFFD008).w
0001F934 6500                       		bcs.s	Almost_Complete_Surf
0001F936 337C 0500 0012             		move.w	#$500,$12(a1)	; move Sonic upwards
0001F93C                            Obj10_Return:
0001F93C 4EF9 0001 053E             		jmp	DeleteObject
0001F942 4E75                       		rts
0001F944                            Almost_Complete_Surf:
0001F944 117C 0002 001C             		move.b	#$2,$1C(a0)	; use normal animation
0001F94A 4EBA FF5A                  		jsr	Obj10_Display
0001F94E 317C 0400 0010             		move.w	#$400,$10(a0)	; make the object have a speed which moves it up quickly
0001F954 317C 0000 0012             		move.w	#$0,$12(a0)	; make the object have a speed which moves it down quickly
0001F95A 4EF9 0001 04DC             		jmp	SpeedToPos	; update the object's position (move the object)
0001F960 4E75                       		rts
0001F962                            ; ===========================================================================
0001F962                            
0001F962                            Obj10_SelChar:
0001F962 7000                       		moveq	#0,d0
0001F964 1028 0024                  		move.b	$24(a0),d0
0001F968 323B 0000                  		move.w	Obj10_SelChar_Index(pc,d0.w),d1
0001F96C 4EFB 1000                  		jmp	Obj10_SelChar_Index(pc,d1.w)
0001F970                            ; ===========================================================================
0001F970 0000                       Obj10_SelChar_Index:	dc.w Obj10_SelChar_Main-Obj10_SelChar_Index
0001F972 0000                       			dc.w Obj10_SelChar_Func-Obj10_SelChar_Index
0001F974                            ; ===========================================================================
0001F974                            
0001F974                            Obj10_SelChar_Main:				; XREF: Obj21_Main
0001F974 5428 0024                  		addq.b	#2,$24(a0)			;go to next routine
0001F978 317C 0090 0008             		move.w	#$0090,8(a0)			;x position
0001F97E 317C 00A8 000A             		move.w	#$B0-8,$A(a0)			;y position
0001F984 217C 0000 0000 0004        		move.l	#Map_obj10_selchar,4(a0)	;Maps
0001F98C 317C 65A0 0002             		move.w	#$65A0,2(a0)			;VRAM position
0001F992 117C 0001 0018             		move.b	#1,$18(a0)
0001F998 117C 0000 0010             		move.b	#0,$10(a0)
0001F99E                            
0001F99E                            Obj10_SelChar_Func:
0001F99E 0838 0001 F605             		btst	#1,($FFFFF605).w 	 ; is button down pressed?
0001F9A4 6600                       		bne.s	Obj10_SelChar_down	 ; if yes, branch
0001F9A6 0838 0000 F605             		btst	#0,($FFFFF605).w 	 ; is button up pressed?
0001F9AC 6600                       		bne.s	Obj10_SelChar_up	 ; if yes, branch
0001F9AE 4EB9 0000 0000             		jsr	Obj10_SelChar_Display
0001F9B4 4E75                       		rts
0001F9B6                            
0001F9B6                            Obj10_SelChar_down:
0001F9B6 0C28 0001 0010             		cmpi.b	#1,$10(a0)
0001F9BC 6700 0000                  		beq	Obj10_SelChar_Return
0001F9C0 5228 0010                  		add.b	#1,$10(a0)
0001F9C4 5068 000A                  		add.w	#$8,$A(a0)
0001F9C8 5238 FF9C                  		add.b	#1,($FFFFFF9C).w
0001F9CC 4EB9 0000 0000             		jsr	Obj10_SelChar_Display
0001F9D2 4E75                       		rts
0001F9D4                            
0001F9D4                            Obj10_SelChar_up:
0001F9D4 0C28 0000 0010             		cmpi.b	#0,$10(a0)
0001F9DA 6700                       		beq.s	Obj10_SelChar_Return
0001F9DC 5328 0010                  		sub.b	#1,$10(a0)
0001F9E0 5338 FF9C                  		sub.b	#1,($FFFFFF9C).w
0001F9E4 5168 000A                  		sub.w	#$8,$A(a0)
0001F9E8 4EB9 0000 0000             		jsr	Obj10_SelChar_Display
0001F9EE                            
0001F9EE                            Obj10_SelChar_Return:
0001F9EE 4E75                       		rts
0001F9F0                            
0001F9F0                            Obj10_SelChar_Display:
0001F9F0 4EF9 0001 0502             		jmp	DisplaySprite
0001F9F6                            
0001F9F6                            ; ===========================================================================
0001F9F6                            
0001F9F6                            Obj10_SndTest:
0001F9F6 7000                       		moveq	#0,d0
0001F9F8 1028 0024                  		move.b	$24(a0),d0
0001F9FC 323B 0000                  		move.w	Obj10_SndTest_Index(pc,d0.w),d1
0001FA00 4EFB 1000                  		jmp	Obj10_SndTest_Index(pc,d1.w)
0001FA04                            ; ===========================================================================
0001FA04 0000                       Obj10_SndTest_Index:	dc.w Obj10_SndTest_Main-Obj10_SndTest_Index
0001FA06 0000                       			dc.w Obj10_SndTest_Func-Obj10_SndTest_Index
0001FA08                            ; ===========================================================================
0001FA08                            
0001FA08                            Obj10_SndTest_Main:				; XREF: Obj21_Main
0001FA08 5428 0024                  		addq.b	#2,$24(a0)			;go to next routine
0001FA0C 317C 0120 0008             		move.w	#$120,8(a0)			;x position
0001FA12 317C 00F0 000A             		move.w	#$F0,$A(a0)			;y position
0001FA18 217C 0000 0000 0004        		move.l	#M_SOUNDTEST,4(a0)		;Maps
0001FA20 317C 65A0 0002             		move.w	#$65A0,2(a0)			;VRAM position
0001FA26 117C 0001 0018             		move.b	#1,$18(a0)
0001FA2C 4BF9 0000 0000             		lea	(Music_Table).l,a5
0001FA32                            
0001FA32                            Obj10_SndTest_Func:
0001FA32 0838 0003 F605             		btst	#3,($FFFFF605).w 	 ; is button right pressed?
0001FA38 6600                       		bne.s	Obj10_SndTest_Right	 ; if yes, branch
0001FA3A 0838 0002 F605             		btst	#2,($FFFFF605).w 	 ; is button left pressed?
0001FA40 6600                       		bne.s	Obj10_SndTest_Left	 ; if yes, branch
0001FA42                            ;		btst	#1,($FFFFF605).w 	 ; is button down pressed?
0001FA42                            ;		bne.s	Obj10_SndTest_down	 ; if yes, branch
0001FA42                            ;		btst	#0,($FFFFF605).w 	 ; is button up pressed?
0001FA42                            ;		bne.s	Obj10_SndTest_up	 ; if yes, branch
0001FA42 0838 0006 F605             		btst	#6,($FFFFF605).w 	 ; is button A pressed?
0001FA48 6600                       		bne.s	Obj10_SndTest_Do	 ; if yes, branch
0001FA4A 0838 0005 F605             		btst	#5,($FFFFF605).w 	 ; is button C pressed?
0001FA50 6600                       		bne.s	Obj10_SndTest_Do	 ; if yes, branch
0001FA52 0838 0004 F605             		btst	#4,($FFFFF605).w 	 ; is button B pressed?
0001FA58 6600                       		bne.s	Obj10_SndTest_Do	 ; if yes, branch
0001FA5A 4EB9 0000 0000             		jsr	Obj10_SndTest_Display
0001FA60 4E75                       		rts
0001FA62                            
0001FA62                            Obj10_SndTest_Do:
0001FA62 4280                       		clr.l	d0
0001FA64 1015                       		move.b	(a5),d0
0001FA66 4EB8 19E4                  		jsr	PlaySound
0001FA6A 4EB9 0000 0000             		jsr	Obj10_SndTest_Display
0001FA70 4E75                       		rts
0001FA72                            
0001FA72                            Obj10_SndTest_down:
0001FA72 0668 0010 000A             		add.w	#$10,$A(a0)
0001FA78 4EB9 0000 0000             		jsr	Obj10_SndTest_Display
0001FA7E 4E75                       		rts
0001FA80                            
0001FA80                            Obj10_SndTest_up:
0001FA80 0468 0010 000A             		sub.w	#$10,$A(a0)
0001FA86 4EB9 0000 0000             		jsr	Obj10_SndTest_Display
0001FA8C 4E75                       		rts
0001FA8E                            
0001FA8E                            Obj10_SndTest_Right:
0001FA8E 0C28 0018 001A             		cmpi.b	#25-1,$1A(a0)
0001FA94 6500                       		bcs.s	Obj10_SndTest_Right_OK
0001FA96 4EF9 0000 0000             		jmp	Obj10_SndTest_Display		
0001FA9C                            
0001FA9C                            Obj10_SndTest_Right_OK:
0001FA9C 4BED 0001                  		lea	$01(a5),a5
0001FAA0 5228 001A                  		add.b	#1,$1A(a0)
0001FAA4 4EB9 0000 0000             		jsr	Obj10_SndTest_Display
0001FAAA 4E75                       		rts
0001FAAC                            
0001FAAC                            Obj10_SndTest_Left:
0001FAAC 0C28 0001 001A             		cmpi.b	#2-1,$1A(a0)
0001FAB2 6500                       		bcs.s	Obj10_SndTest_Display
0001FAB4 4BED FFFF                  		lea	-$01(a5),a5
0001FAB8 5328 001A                  		sub.b	#1,$1A(a0)
0001FABC 4EB9 0000 0000             		jsr	Obj10_SndTest_Display
0001FAC2 4E75                       		rts
0001FAC4                            
0001FAC4                            Obj10_SndTest_Display:
0001FAC4 4EF9 0001 0502             		jmp	DisplaySprite
0001FACA                            
0001FACA                            
0001FACA 8285 8687 8889             Music_Table:	dc.b	$82,	$85,	$86,	$87,	$88,	$89
0001FAD0 8A8B 8C8E 8F90             		dc.b	$8A,	$8B,	$8C,	$8E,	$8F,	$90
0001FAD6 9192 9394 9598             		dc.b	$91,	$92,	$93,	$94,	$95,	$98
0001FADC 9B9C 9D9E 9F9A             		dc.b	$9B,	$9C,	$9D,	$9E,	$9F,	$9A
0001FAE2                            		even
0001FAE2                            
0001FAE2                            ; ===========================================================================
0001FAE2                            
0001FAE2                            Obj10_Xulpico:
0001FAE2 7000                       		moveq	#0,d0
0001FAE4 1028 0024                  		move.b	$24(a0),d0
0001FAE8 323B 0000                  		move.w	Obj10_Xulpico_Index(pc,d0.w),d1
0001FAEC 4EFB 1000                  		jmp	Obj10_Xulpico_Index(pc,d1.w)
0001FAF0                            ; ===========================================================================
0001FAF0 0000                       Obj10_Xulpico_Index:	dc.w Obj10_Xulpico_Main-Obj10_Xulpico_Index
0001FAF2 0000                       			dc.w Obj10_Xulpico_Func-Obj10_Xulpico_Index
0001FAF4                            ; ===========================================================================
0001FAF4                            
0001FAF4                            Obj10_Xulpico_Main:				; XREF: Obj21_Main
0001FAF4 5428 0024                  		addq.b	#2,$24(a0)			;go to next routine
0001FAF8 317C 0120 0008             		move.w	#$120,8(a0)			;x position
0001FAFE 317C 00F0 000A             		move.w	#$F0,$A(a0)			;y position
0001FB04 217C 0000 0000 0004        		move.l	#Map_obj10_Xulpico,4(a0)	;Maps
0001FB0C 0C38 0040 FF94             		cmpi.b	#$40,($FFFFFF94).w
0001FB12 6700                       		beq.s	Obj10_Xulpico_Mode40
0001FB14 317C 20A6 0002             		move.w	#$20A6,2(a0)			;VRAM position
0001FB1A 4EF9 0000 0000             		jmp	Obj10_Xulpico_Cont
0001FB20                            
0001FB20                            Obj10_Xulpico_Mode40:
0001FB20 317C 00A6 0002             		move.w	#$A6,2(a0)			;VRAM position
0001FB26                            
0001FB26                            Obj10_Xulpico_Cont:
0001FB26 117C 0001 0018             		move.b	#1,$18(a0)
0001FB2C 43F9 0000 0000             		lea	(Ani_obj10_Xulpico).l,a1
0001FB32 4EB9 0000 D0AC             		jsr	AnimateSprite
0001FB38                            
0001FB38                            Obj10_Xulpico_Func:
0001FB38 4EB9 0000 0000             		jsr	Obj10_Xulpico_Display
0001FB3E 4E75                       		rts
0001FB40                            Obj10_Xulpico_Display:
0001FB40 43F9 0000 0000             		lea	(Ani_obj10_Xulpico).l,a1
0001FB46 4EB9 0000 D0AC             		jsr	AnimateSprite
0001FB4C 4EF9 0001 0502             		jmp	DisplaySprite
0001FB52 4E75                       		rts
0001FB54                            Obj10_Xulpico_Animate:
0001FB54 4EF9 0001 0502             		jmp	DisplaySprite
0001FB5A                            
0001FB5A                            Obj10_LS:
0001FB5A 7000                       		moveq	#0,d0
0001FB5C 1028 0024                  		move.b	$24(a0),d0
0001FB60 323B 0000                  		move.w	Obj10_LS_Index(pc,d0.w),d1
0001FB64 4EFB 1000                  		jmp	Obj10_LS_Index(pc,d1.w)
0001FB68                            ; ===========================================================================
0001FB68 0000                       Obj10_LS_Index:	dc.w Obj10_LS_Main-Obj10_LS_Index
0001FB6A 0000                       		dc.w Obj10_LS_Func-Obj10_LS_Index
0001FB6C                            ; ===========================================================================
0001FB6C                            
0001FB6C                            Obj10_LS_Main:				; XREF: Obj21_Main
0001FB6C 5428 0024                  		addq.b	#2,$24(a0)			;go to next routine
0001FB70 317C 00FA 0008             		move.w	#$FA,8(a0)			;x position
0001FB76 317C 00B0 000A             		move.w	#$B0,$A(a0)			;y position
0001FB7C 217C 0000 0000 0004        		move.l	#Map_obj10_LS,4(a0)		;Maps
0001FB84 317C 2300 0002             		move.w	#$2300,2(a0)			;VRAM position
0001FB8A 117C 0000 0018             		move.b	#0,$18(a0)
0001FB90                            
0001FB90                            Obj10_LS_Func:
0001FB90 4EB9 0000 0000             		jsr	Obj10_LS_Display
0001FB96 4E75                       		rts
0001FB98                            
0001FB98                            Obj10_LS_Display:
0001FB98 43F9 0000 0000             		lea	(Ani_obj10_LS).l,a1
0001FB9E 4EB9 0000 D0AC             		jsr	AnimateSprite
0001FBA4 4EF9 0001 0502             		jmp	DisplaySprite
0001FBAA 4E75                       		rts
0001FBAC                            ; ---------------------------------------------------------------------------
0001FBAC                            ; Sprite mappings
0001FBAC                            ; ---------------------------------------------------------------------------
0001FBAC                            Map_Obj10_SelChar:
0001FBAC                            	include	"_maps\obj10_SelChar.asm"
0001FBAC                            ; --------------------------------------------------------------------------------
0001FBAC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001FBAC                            ; --------------------------------------------------------------------------------
0001FBAC                            
0001FBAC                            SME_5ZoM1:	
0001FBAC 0000                       		dc.w SME_5ZoM1_2-SME_5ZoM1	
0001FBAE 01                         SME_5ZoM1_2:	dc.b 1	
0001FBAF E000 000D F8               		dc.b $E0, 0, 0, $D, $F8	
0001FBB4                            		even
0001FBB4                            		even
0001FBB4                            	even
0001FBB4                            Map_obj10_Xulpico:
0001FBB4                            	include "xulpico\sprite\maps.asm"
0001FBB4                            ; --------------------------------------------------------------------------------
0001FBB4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001FBB4                            ; --------------------------------------------------------------------------------
0001FBB4                            
0001FBB4                            SME_jWCX2:	
0001FBB4 0000 0000                  		dc.w SME_jWCX2_A-SME_jWCX2, SME_jWCX2_74-SME_jWCX2	
0001FBB8 0000 0000                  		dc.w SME_jWCX2_115-SME_jWCX2, SME_jWCX2_1B6-SME_jWCX2	
0001FBBC 0000                       		dc.w SME_jWCX2_257-SME_jWCX2	
0001FBBE 15                         SME_jWCX2_A:	dc.b $15	
0001FBBF 0100 0000 F1               		dc.b 1, 0, 0, 0, $F1	
0001FBC4 0100 0001 F9               		dc.b 1, 0, 0, 1, $F9	
0001FBC9 0100 0002 01               		dc.b 1, 0, 0, 2, 1	
0001FBCE 0100 0003 09               		dc.b 1, 0, 0, 3, 9	
0001FBD3 0100 0004 11               		dc.b 1, 0, 0, 4, $11	
0001FBD8 0100 0005 19               		dc.b 1, 0, 0, 5, $19	
0001FBDD F900 0006 F1               		dc.b $F9, 0, 0, 6, $F1	
0001FBE2 F900 0007 F9               		dc.b $F9, 0, 0, 7, $F9	
0001FBE7 F900 0008 01               		dc.b $F9, 0, 0, 8, 1	
0001FBEC F900 0009 09               		dc.b $F9, 0, 0, 9, 9	
0001FBF1 F100 000A F9               		dc.b $F1, 0, 0, $A, $F9	
0001FBF6 F100 000B 01               		dc.b $F1, 0, 0, $B, 1	
0001FBFB E900 000C F9               		dc.b $E9, 0, 0, $C, $F9	
0001FC00 E900 000D 01               		dc.b $E9, 0, 0, $D, 1	
0001FC05 E100 000E F1               		dc.b $E1, 0, 0, $E, $F1	
0001FC0A E100 000F F9               		dc.b $E1, 0, 0, $F, $F9	
0001FC0F E100 0010 01               		dc.b $E1, 0, 0, $10, 1	
0001FC14 E100 0011 09               		dc.b $E1, 0, 0, $11, 9	
0001FC19 D900 0012 F9               		dc.b $D9, 0, 0, $12, $F9	
0001FC1E D900 0013 01               		dc.b $D9, 0, 0, $13, 1	
0001FC23 D900 0014 09               		dc.b $D9, 0, 0, $14, 9	
0001FC28 20                         SME_jWCX2_74:	dc.b $20	
0001FC29 F900 0015 F1               		dc.b $F9, 0, 0, $15, $F1	
0001FC2E F900 0016 F9               		dc.b $F9, 0, 0, $16, $F9	
0001FC33 F900 0017 01               		dc.b $F9, 0, 0, $17, 1	
0001FC38 F900 0018 09               		dc.b $F9, 0, 0, $18, 9	
0001FC3D F900 0019 11               		dc.b $F9, 0, 0, $19, $11	
0001FC42 F900 001A 19               		dc.b $F9, 0, 0, $1A, $19	
0001FC47 F100 001B F1               		dc.b $F1, 0, 0, $1B, $F1	
0001FC4C F100 001C F9               		dc.b $F1, 0, 0, $1C, $F9	
0001FC51 F100 001D 01               		dc.b $F1, 0, 0, $1D, 1	
0001FC56 F100 001E 09               		dc.b $F1, 0, 0, $1E, 9	
0001FC5B F100 001F 11               		dc.b $F1, 0, 0, $1F, $11	
0001FC60 F100 0020 19               		dc.b $F1, 0, 0, $20, $19	
0001FC65 E900 0021 F1               		dc.b $E9, 0, 0, $21, $F1	
0001FC6A E900 0022 F9               		dc.b $E9, 0, 0, $22, $F9	
0001FC6F E900 0023 01               		dc.b $E9, 0, 0, $23, 1	
0001FC74 E900 0024 09               		dc.b $E9, 0, 0, $24, 9	
0001FC79 E900 0025 11               		dc.b $E9, 0, 0, $25, $11	
0001FC7E E900 0026 19               		dc.b $E9, 0, 0, $26, $19	
0001FC83 E100 0027 F1               		dc.b $E1, 0, 0, $27, $F1	
0001FC88 E100 0028 F9               		dc.b $E1, 0, 0, $28, $F9	
0001FC8D E100 0029 01               		dc.b $E1, 0, 0, $29, 1	
0001FC92 E100 002A 09               		dc.b $E1, 0, 0, $2A, 9	
0001FC97 E100 002B 11               		dc.b $E1, 0, 0, $2B, $11	
0001FC9C E100 002C 19               		dc.b $E1, 0, 0, $2C, $19	
0001FCA1 D900 002D F1               		dc.b $D9, 0, 0, $2D, $F1	
0001FCA6 D900 002E F9               		dc.b $D9, 0, 0, $2E, $F9	
0001FCAB D900 002F 01               		dc.b $D9, 0, 0, $2F, 1	
0001FCB0 D900 0030 09               		dc.b $D9, 0, 0, $30, 9	
0001FCB5 D900 0031 11               		dc.b $D9, 0, 0, $31, $11	
0001FCBA D900 0032 19               		dc.b $D9, 0, 0, $32, $19	
0001FCBF 010C 0000 F1               		dc.b 1, $C, 0, 0, $F1	
0001FCC4 0104 0004 11               		dc.b 1, 4, 0, 4, $11	
0001FCC9 20                         SME_jWCX2_115:	dc.b $20	
0001FCCA F900 0033 F1               		dc.b $F9, 0, 0, $33, $F1	
0001FCCF F900 0034 F9               		dc.b $F9, 0, 0, $34, $F9	
0001FCD4 F900 0035 01               		dc.b $F9, 0, 0, $35, 1	
0001FCD9 F900 0036 09               		dc.b $F9, 0, 0, $36, 9	
0001FCDE F900 0037 11               		dc.b $F9, 0, 0, $37, $11	
0001FCE3 F900 0038 19               		dc.b $F9, 0, 0, $38, $19	
0001FCE8 F100 0039 F1               		dc.b $F1, 0, 0, $39, $F1	
0001FCED F100 003A F9               		dc.b $F1, 0, 0, $3A, $F9	
0001FCF2 F100 003B 01               		dc.b $F1, 0, 0, $3B, 1	
0001FCF7 F100 003C 09               		dc.b $F1, 0, 0, $3C, 9	
0001FCFC F100 003D 11               		dc.b $F1, 0, 0, $3D, $11	
0001FD01 F100 003E 19               		dc.b $F1, 0, 0, $3E, $19	
0001FD06 E900 003F F1               		dc.b $E9, 0, 0, $3F, $F1	
0001FD0B E900 0040 F9               		dc.b $E9, 0, 0, $40, $F9	
0001FD10 E900 0041 01               		dc.b $E9, 0, 0, $41, 1	
0001FD15 E900 0042 09               		dc.b $E9, 0, 0, $42, 9	
0001FD1A E900 0043 11               		dc.b $E9, 0, 0, $43, $11	
0001FD1F E900 0044 19               		dc.b $E9, 0, 0, $44, $19	
0001FD24 E100 0045 F1               		dc.b $E1, 0, 0, $45, $F1	
0001FD29 E100 0046 F9               		dc.b $E1, 0, 0, $46, $F9	
0001FD2E E100 0047 01               		dc.b $E1, 0, 0, $47, 1	
0001FD33 E100 0048 09               		dc.b $E1, 0, 0, $48, 9	
0001FD38 E100 0049 11               		dc.b $E1, 0, 0, $49, $11	
0001FD3D E100 004A 19               		dc.b $E1, 0, 0, $4A, $19	
0001FD42 D900 004B F1               		dc.b $D9, 0, 0, $4B, $F1	
0001FD47 D900 004C F9               		dc.b $D9, 0, 0, $4C, $F9	
0001FD4C D900 004D 01               		dc.b $D9, 0, 0, $4D, 1	
0001FD51 D900 004E 09               		dc.b $D9, 0, 0, $4E, 9	
0001FD56 D900 004F 11               		dc.b $D9, 0, 0, $4F, $11	
0001FD5B D900 0050 19               		dc.b $D9, 0, 0, $50, $19	
0001FD60 010C 0000 F1               		dc.b 1, $C, 0, 0, $F1	
0001FD65 0104 0004 11               		dc.b 1, 4, 0, 4, $11	
0001FD6A 20                         SME_jWCX2_1B6:	dc.b $20	
0001FD6B F900 0051 F1               		dc.b $F9, 0, 0, $51, $F1	
0001FD70 F900 0052 F9               		dc.b $F9, 0, 0, $52, $F9	
0001FD75 F900 0053 01               		dc.b $F9, 0, 0, $53, 1	
0001FD7A F900 0054 09               		dc.b $F9, 0, 0, $54, 9	
0001FD7F F900 0055 11               		dc.b $F9, 0, 0, $55, $11	
0001FD84 F900 0056 19               		dc.b $F9, 0, 0, $56, $19	
0001FD89 F100 0057 F1               		dc.b $F1, 0, 0, $57, $F1	
0001FD8E F100 0058 F9               		dc.b $F1, 0, 0, $58, $F9	
0001FD93 F100 0059 01               		dc.b $F1, 0, 0, $59, 1	
0001FD98 F100 005A 09               		dc.b $F1, 0, 0, $5A, 9	
0001FD9D F100 005B 11               		dc.b $F1, 0, 0, $5B, $11	
0001FDA2 F100 005C 19               		dc.b $F1, 0, 0, $5C, $19	
0001FDA7 E900 005D F1               		dc.b $E9, 0, 0, $5D, $F1	
0001FDAC E900 005E F9               		dc.b $E9, 0, 0, $5E, $F9	
0001FDB1 E900 005F 01               		dc.b $E9, 0, 0, $5F, 1	
0001FDB6 E900 0060 09               		dc.b $E9, 0, 0, $60, 9	
0001FDBB E900 0061 11               		dc.b $E9, 0, 0, $61, $11	
0001FDC0 E900 0062 19               		dc.b $E9, 0, 0, $62, $19	
0001FDC5 E100 0063 F1               		dc.b $E1, 0, 0, $63, $F1	
0001FDCA E100 0064 F9               		dc.b $E1, 0, 0, $64, $F9	
0001FDCF E100 0065 01               		dc.b $E1, 0, 0, $65, 1	
0001FDD4 E100 0066 09               		dc.b $E1, 0, 0, $66, 9	
0001FDD9 E100 0067 11               		dc.b $E1, 0, 0, $67, $11	
0001FDDE E100 0068 19               		dc.b $E1, 0, 0, $68, $19	
0001FDE3 D900 0069 F1               		dc.b $D9, 0, 0, $69, $F1	
0001FDE8 D900 006A F9               		dc.b $D9, 0, 0, $6A, $F9	
0001FDED D900 006B 01               		dc.b $D9, 0, 0, $6B, 1	
0001FDF2 D900 006C 09               		dc.b $D9, 0, 0, $6C, 9	
0001FDF7 D900 006D 11               		dc.b $D9, 0, 0, $6D, $11	
0001FDFC D900 006E 19               		dc.b $D9, 0, 0, $6E, $19	
0001FE01 010C 0000 F1               		dc.b 1, $C, 0, 0, $F1	
0001FE06 0104 0004 11               		dc.b 1, 4, 0, 4, $11	
0001FE0B 20                         SME_jWCX2_257:	dc.b $20	
0001FE0C F900 006F F1               		dc.b $F9, 0, 0, $6F, $F1	
0001FE11 F900 0070 F9               		dc.b $F9, 0, 0, $70, $F9	
0001FE16 F900 0071 01               		dc.b $F9, 0, 0, $71, 1	
0001FE1B F900 0072 09               		dc.b $F9, 0, 0, $72, 9	
0001FE20 F900 0073 11               		dc.b $F9, 0, 0, $73, $11	
0001FE25 F900 0074 19               		dc.b $F9, 0, 0, $74, $19	
0001FE2A F100 0075 F1               		dc.b $F1, 0, 0, $75, $F1	
0001FE2F F100 0076 F9               		dc.b $F1, 0, 0, $76, $F9	
0001FE34 F100 0077 01               		dc.b $F1, 0, 0, $77, 1	
0001FE39 F100 0078 09               		dc.b $F1, 0, 0, $78, 9	
0001FE3E F100 0079 11               		dc.b $F1, 0, 0, $79, $11	
0001FE43 F100 007A 19               		dc.b $F1, 0, 0, $7A, $19	
0001FE48 E900 007B F1               		dc.b $E9, 0, 0, $7B, $F1	
0001FE4D E900 007C F9               		dc.b $E9, 0, 0, $7C, $F9	
0001FE52 E900 007D 01               		dc.b $E9, 0, 0, $7D, 1	
0001FE57 E900 007E 09               		dc.b $E9, 0, 0, $7E, 9	
0001FE5C E900 007F 11               		dc.b $E9, 0, 0, $7F, $11	
0001FE61 E900 0080 19               		dc.b $E9, 0, 0, $80, $19	
0001FE66 E100 0081 F1               		dc.b $E1, 0, 0, $81, $F1	
0001FE6B E100 0082 F9               		dc.b $E1, 0, 0, $82, $F9	
0001FE70 E100 0083 01               		dc.b $E1, 0, 0, $83, 1	
0001FE75 E100 0084 09               		dc.b $E1, 0, 0, $84, 9	
0001FE7A E100 0085 11               		dc.b $E1, 0, 0, $85, $11	
0001FE7F E100 0086 19               		dc.b $E1, 0, 0, $86, $19	
0001FE84 D900 0087 F1               		dc.b $D9, 0, 0, $87, $F1	
0001FE89 D900 0088 F9               		dc.b $D9, 0, 0, $88, $F9	
0001FE8E D900 0089 01               		dc.b $D9, 0, 0, $89, 1	
0001FE93 D900 008A 09               		dc.b $D9, 0, 0, $8A, 9	
0001FE98 D900 008B 11               		dc.b $D9, 0, 0, $8B, $11	
0001FE9D D900 008C 19               		dc.b $D9, 0, 0, $8C, $19	
0001FEA2 010C 0000 F1               		dc.b 1, $C, 0, 0, $F1	
0001FEA7 0104 0004 11               		dc.b 1, 4, 0, 4, $11	
0001FEAC                            		even
0001FEAC                            		even
0001FEAC                            Ani_obj10_Xulpico:
0001FEAC                            	include "_anim\xulpico.asm"
0001FEAC 0000                       		dc.w Anim_Xulpico-Ani_obj10_Xulpico
0001FEAE 0700 0102 0304 0304 0304+  Anim_Xulpico:	dc.b 7,	0, 1, 2, 3, 4, 3, 4, 3, 4, $FF
0001FEBA 00                         		even
0001FEBA 00                         		even
0001FEBA                            Ani_obj10_LS:
0001FEBA                            	include "_anim\ls.asm"
0001FEBA                            ; ---------------------------------------------------------------------------
0001FEBA                            ; Animation script - Level Select Sprite
0001FEBA                            ; ---------------------------------------------------------------------------
0001FEBA 0000                       		dc.w Sec1-Ani_obj10_LS
0001FEBC 0700 0102 0304 0506 0708+  Sec1:		dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $B, $FF
0001FECA                            		even
0001FECA                            		even
0001FECA                            Map_obj10_LS:
0001FECA                            	include "_maps\ls.asm"
0001FECA                            ; --------------------------------------------------------------------------------
0001FECA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001FECA                            ; --------------------------------------------------------------------------------
0001FECA                            
0001FECA                            SME__f22F:	
0001FECA 0000 0000                  		dc.w SME__f22F_18-SME__f22F, SME__f22F_6E-SME__f22F	
0001FECE 0000 0000                  		dc.w SME__f22F_C4-SME__f22F, SME__f22F_11A-SME__f22F	
0001FED2 0000 0000                  		dc.w SME__f22F_170-SME__f22F, SME__f22F_1C6-SME__f22F	
0001FED6 0000 0000                  		dc.w SME__f22F_21C-SME__f22F, SME__f22F_272-SME__f22F	
0001FEDA 0000 0000                  		dc.w SME__f22F_2C8-SME__f22F, SME__f22F_31E-SME__f22F	
0001FEDE 0000 0000                  		dc.w SME__f22F_374-SME__f22F, SME__f22F_3CA-SME__f22F	
0001FEE2 11                         SME__f22F_18:	dc.b $11	
0001FEE3 E000 0002 F8               		dc.b $E0, 0, 0, 2, $F8	
0001FEE8 E000 0001 00               		dc.b $E0, 0, 0, 1, 0	
0001FEED E000 0005 08               		dc.b $E0, 0, 0, 5, 8	
0001FEF2 E000 0001 10               		dc.b $E0, 0, 0, 1, $10	
0001FEF7 E000 0002 18               		dc.b $E0, 0, 0, 2, $18	
0001FEFC E000 0003 28               		dc.b $E0, 0, 0, 3, $28	
0001FF01 E000 0001 30               		dc.b $E0, 0, 0, 1, $30	
0001FF06 E000 0002 38               		dc.b $E0, 0, 0, 2, $38	
0001FF0B E000 0001 40               		dc.b $E0, 0, 0, 1, $40	
0001FF10 E000 0000 48               		dc.b $E0, 0, 0, 0, $48	
0001FF15 E000 0004 50               		dc.b $E0, 0, 0, 4, $50	
0001FF1A E508 0006 D8               		dc.b $E5, 8, 0, 6, $D8	
0001FF1F DD08 0009 D8               		dc.b $DD, 8, 0, 9, $D8	
0001FF24 D508 000C D8               		dc.b $D5, 8, 0, $C, $D8	
0001FF29 E508 0006 60               		dc.b $E5, 8, 0, 6, $60	
0001FF2E DD08 0009 60               		dc.b $DD, 8, 0, 9, $60	
0001FF33 D508 000C 60               		dc.b $D5, 8, 0, $C, $60	
0001FF38 11                         SME__f22F_6E:	dc.b $11	
0001FF39 D800 0002 F8               		dc.b $D8, 0, 0, 2, $F8	
0001FF3E E000 0001 00               		dc.b $E0, 0, 0, 1, 0	
0001FF43 E000 0005 08               		dc.b $E0, 0, 0, 5, 8	
0001FF48 E000 0001 10               		dc.b $E0, 0, 0, 1, $10	
0001FF4D E000 0002 18               		dc.b $E0, 0, 0, 2, $18	
0001FF52 E000 0003 28               		dc.b $E0, 0, 0, 3, $28	
0001FF57 E000 0001 30               		dc.b $E0, 0, 0, 1, $30	
0001FF5C E000 0002 38               		dc.b $E0, 0, 0, 2, $38	
0001FF61 E000 0001 40               		dc.b $E0, 0, 0, 1, $40	
0001FF66 E000 0000 48               		dc.b $E0, 0, 0, 0, $48	
0001FF6B E000 0004 50               		dc.b $E0, 0, 0, 4, $50	
0001FF70 E508 0006 D8               		dc.b $E5, 8, 0, 6, $D8	
0001FF75 DD08 0009 D8               		dc.b $DD, 8, 0, 9, $D8	
0001FF7A D508 000C D8               		dc.b $D5, 8, 0, $C, $D8	
0001FF7F E508 0006 60               		dc.b $E5, 8, 0, 6, $60	
0001FF84 DD08 0009 60               		dc.b $DD, 8, 0, 9, $60	
0001FF89 D508 000C 60               		dc.b $D5, 8, 0, $C, $60	
0001FF8E 11                         SME__f22F_C4:	dc.b $11	
0001FF8F E000 0002 F8               		dc.b $E0, 0, 0, 2, $F8	
0001FF94 D800 0001 00               		dc.b $D8, 0, 0, 1, 0	
0001FF99 E000 0005 08               		dc.b $E0, 0, 0, 5, 8	
0001FF9E E000 0001 10               		dc.b $E0, 0, 0, 1, $10	
0001FFA3 E000 0002 18               		dc.b $E0, 0, 0, 2, $18	
0001FFA8 E000 0003 28               		dc.b $E0, 0, 0, 3, $28	
0001FFAD E000 0001 30               		dc.b $E0, 0, 0, 1, $30	
0001FFB2 E000 0002 38               		dc.b $E0, 0, 0, 2, $38	
0001FFB7 E000 0001 40               		dc.b $E0, 0, 0, 1, $40	
0001FFBC E000 0000 48               		dc.b $E0, 0, 0, 0, $48	
0001FFC1 E000 0004 50               		dc.b $E0, 0, 0, 4, $50	
0001FFC6 E508 0006 D8               		dc.b $E5, 8, 0, 6, $D8	
0001FFCB DD08 0009 D8               		dc.b $DD, 8, 0, 9, $D8	
0001FFD0 D508 000C D8               		dc.b $D5, 8, 0, $C, $D8	
0001FFD5 E508 0006 60               		dc.b $E5, 8, 0, 6, $60	
0001FFDA DD08 0009 60               		dc.b $DD, 8, 0, 9, $60	
0001FFDF D508 000C 60               		dc.b $D5, 8, 0, $C, $60	
0001FFE4 11                         SME__f22F_11A:	dc.b $11	
0001FFE5 E000 0002 F8               		dc.b $E0, 0, 0, 2, $F8	
0001FFEA E000 0001 00               		dc.b $E0, 0, 0, 1, 0	
0001FFEF D800 0005 08               		dc.b $D8, 0, 0, 5, 8	
0001FFF4 E000 0001 10               		dc.b $E0, 0, 0, 1, $10	
0001FFF9 E000 0002 18               		dc.b $E0, 0, 0, 2, $18	
0001FFFE E000 0003 28               		dc.b $E0, 0, 0, 3, $28	
00020003 E000 0001 30               		dc.b $E0, 0, 0, 1, $30	
00020008 E000 0002 38               		dc.b $E0, 0, 0, 2, $38	
0002000D E000 0001 40               		dc.b $E0, 0, 0, 1, $40	
00020012 E000 0000 48               		dc.b $E0, 0, 0, 0, $48	
00020017 E000 0004 50               		dc.b $E0, 0, 0, 4, $50	
0002001C E508 0006 D8               		dc.b $E5, 8, 0, 6, $D8	
00020021 DD08 0009 D8               		dc.b $DD, 8, 0, 9, $D8	
00020026 D508 000C D8               		dc.b $D5, 8, 0, $C, $D8	
0002002B E508 0006 60               		dc.b $E5, 8, 0, 6, $60	
00020030 DD08 0009 60               		dc.b $DD, 8, 0, 9, $60	
00020035 D508 000C 60               		dc.b $D5, 8, 0, $C, $60	
0002003A 11                         SME__f22F_170:	dc.b $11	
0002003B E000 0002 F8               		dc.b $E0, 0, 0, 2, $F8	
00020040 E000 0001 00               		dc.b $E0, 0, 0, 1, 0	
00020045 E000 0005 08               		dc.b $E0, 0, 0, 5, 8	
0002004A D800 0001 10               		dc.b $D8, 0, 0, 1, $10	
0002004F E000 0002 18               		dc.b $E0, 0, 0, 2, $18	
00020054 E000 0003 28               		dc.b $E0, 0, 0, 3, $28	
00020059 E000 0001 30               		dc.b $E0, 0, 0, 1, $30	
0002005E E000 0002 38               		dc.b $E0, 0, 0, 2, $38	
00020063 E000 0001 40               		dc.b $E0, 0, 0, 1, $40	
00020068 E000 0000 48               		dc.b $E0, 0, 0, 0, $48	
0002006D E000 0004 50               		dc.b $E0, 0, 0, 4, $50	
00020072 E508 0006 D8               		dc.b $E5, 8, 0, 6, $D8	
00020077 DD08 0009 D8               		dc.b $DD, 8, 0, 9, $D8	
0002007C D508 000C D8               		dc.b $D5, 8, 0, $C, $D8	
00020081 E508 0006 60               		dc.b $E5, 8, 0, 6, $60	
00020086 DD08 0009 60               		dc.b $DD, 8, 0, 9, $60	
0002008B D508 000C 60               		dc.b $D5, 8, 0, $C, $60	
00020090 11                         SME__f22F_1C6:	dc.b $11	
00020091 E000 0002 F8               		dc.b $E0, 0, 0, 2, $F8	
00020096 E000 0001 00               		dc.b $E0, 0, 0, 1, 0	
0002009B E000 0005 08               		dc.b $E0, 0, 0, 5, 8	
000200A0 E000 0001 10               		dc.b $E0, 0, 0, 1, $10	
000200A5 D800 0002 18               		dc.b $D8, 0, 0, 2, $18	
000200AA E000 0003 28               		dc.b $E0, 0, 0, 3, $28	
000200AF E000 0001 30               		dc.b $E0, 0, 0, 1, $30	
000200B4 E000 0002 38               		dc.b $E0, 0, 0, 2, $38	
000200B9 E000 0001 40               		dc.b $E0, 0, 0, 1, $40	
000200BE E000 0000 48               		dc.b $E0, 0, 0, 0, $48	
000200C3 E000 0004 50               		dc.b $E0, 0, 0, 4, $50	
000200C8 E508 0006 D8               		dc.b $E5, 8, 0, 6, $D8	
000200CD DD08 0009 D8               		dc.b $DD, 8, 0, 9, $D8	
000200D2 D508 000C D8               		dc.b $D5, 8, 0, $C, $D8	
000200D7 E508 0006 60               		dc.b $E5, 8, 0, 6, $60	
000200DC DD08 0009 60               		dc.b $DD, 8, 0, 9, $60	
000200E1 D508 000C 60               		dc.b $D5, 8, 0, $C, $60	
000200E6 11                         SME__f22F_21C:	dc.b $11	
000200E7 E000 0002 F8               		dc.b $E0, 0, 0, 2, $F8	
000200EC E000 0001 00               		dc.b $E0, 0, 0, 1, 0	
000200F1 E000 0005 08               		dc.b $E0, 0, 0, 5, 8	
000200F6 E000 0001 10               		dc.b $E0, 0, 0, 1, $10	
000200FB E000 0002 18               		dc.b $E0, 0, 0, 2, $18	
00020100 D800 0003 28               		dc.b $D8, 0, 0, 3, $28	
00020105 E000 0001 30               		dc.b $E0, 0, 0, 1, $30	
0002010A E000 0002 38               		dc.b $E0, 0, 0, 2, $38	
0002010F E000 0001 40               		dc.b $E0, 0, 0, 1, $40	
00020114 E000 0000 48               		dc.b $E0, 0, 0, 0, $48	
00020119 E000 0004 50               		dc.b $E0, 0, 0, 4, $50	
0002011E E508 0006 D8               		dc.b $E5, 8, 0, 6, $D8	
00020123 DD08 0009 D8               		dc.b $DD, 8, 0, 9, $D8	
00020128 D508 000C D8               		dc.b $D5, 8, 0, $C, $D8	
0002012D E508 0006 60               		dc.b $E5, 8, 0, 6, $60	
00020132 DD08 0009 60               		dc.b $DD, 8, 0, 9, $60	
00020137 D508 000C 60               		dc.b $D5, 8, 0, $C, $60	
0002013C 11                         SME__f22F_272:	dc.b $11	
0002013D E000 0002 F8               		dc.b $E0, 0, 0, 2, $F8	
00020142 E000 0001 00               		dc.b $E0, 0, 0, 1, 0	
00020147 E000 0005 08               		dc.b $E0, 0, 0, 5, 8	
0002014C E000 0001 10               		dc.b $E0, 0, 0, 1, $10	
00020151 E000 0002 18               		dc.b $E0, 0, 0, 2, $18	
00020156 E000 0003 28               		dc.b $E0, 0, 0, 3, $28	
0002015B D800 0001 30               		dc.b $D8, 0, 0, 1, $30	
00020160 E000 0002 38               		dc.b $E0, 0, 0, 2, $38	
00020165 E000 0001 40               		dc.b $E0, 0, 0, 1, $40	
0002016A E000 0000 48               		dc.b $E0, 0, 0, 0, $48	
0002016F E000 0004 50               		dc.b $E0, 0, 0, 4, $50	
00020174 E508 0006 D8               		dc.b $E5, 8, 0, 6, $D8	
00020179 DD08 0009 D8               		dc.b $DD, 8, 0, 9, $D8	
0002017E D508 000C D8               		dc.b $D5, 8, 0, $C, $D8	
00020183 E508 0006 60               		dc.b $E5, 8, 0, 6, $60	
00020188 DD08 0009 60               		dc.b $DD, 8, 0, 9, $60	
0002018D D508 000C 60               		dc.b $D5, 8, 0, $C, $60	
00020192 11                         SME__f22F_2C8:	dc.b $11	
00020193 E000 0002 F8               		dc.b $E0, 0, 0, 2, $F8	
00020198 E000 0001 00               		dc.b $E0, 0, 0, 1, 0	
0002019D E000 0005 08               		dc.b $E0, 0, 0, 5, 8	
000201A2 E000 0001 10               		dc.b $E0, 0, 0, 1, $10	
000201A7 E000 0002 18               		dc.b $E0, 0, 0, 2, $18	
000201AC E000 0003 28               		dc.b $E0, 0, 0, 3, $28	
000201B1 E000 0001 30               		dc.b $E0, 0, 0, 1, $30	
000201B6 D800 0002 38               		dc.b $D8, 0, 0, 2, $38	
000201BB E000 0001 40               		dc.b $E0, 0, 0, 1, $40	
000201C0 E000 0000 48               		dc.b $E0, 0, 0, 0, $48	
000201C5 E000 0004 50               		dc.b $E0, 0, 0, 4, $50	
000201CA E508 0006 D8               		dc.b $E5, 8, 0, 6, $D8	
000201CF DD08 0009 D8               		dc.b $DD, 8, 0, 9, $D8	
000201D4 D508 000C D8               		dc.b $D5, 8, 0, $C, $D8	
000201D9 E508 0006 60               		dc.b $E5, 8, 0, 6, $60	
000201DE DD08 0009 60               		dc.b $DD, 8, 0, 9, $60	
000201E3 D508 000C 60               		dc.b $D5, 8, 0, $C, $60	
000201E8 11                         SME__f22F_31E:	dc.b $11	
000201E9 E000 0002 F8               		dc.b $E0, 0, 0, 2, $F8	
000201EE E000 0001 00               		dc.b $E0, 0, 0, 1, 0	
000201F3 E000 0005 08               		dc.b $E0, 0, 0, 5, 8	
000201F8 E000 0001 10               		dc.b $E0, 0, 0, 1, $10	
000201FD E000 0002 18               		dc.b $E0, 0, 0, 2, $18	
00020202 E000 0003 28               		dc.b $E0, 0, 0, 3, $28	
00020207 E000 0001 30               		dc.b $E0, 0, 0, 1, $30	
0002020C E000 0002 38               		dc.b $E0, 0, 0, 2, $38	
00020211 D800 0001 40               		dc.b $D8, 0, 0, 1, $40	
00020216 E000 0000 48               		dc.b $E0, 0, 0, 0, $48	
0002021B E000 0004 50               		dc.b $E0, 0, 0, 4, $50	
00020220 E508 0006 D8               		dc.b $E5, 8, 0, 6, $D8	
00020225 DD08 0009 D8               		dc.b $DD, 8, 0, 9, $D8	
0002022A D508 000C D8               		dc.b $D5, 8, 0, $C, $D8	
0002022F E508 0006 60               		dc.b $E5, 8, 0, 6, $60	
00020234 DD08 0009 60               		dc.b $DD, 8, 0, 9, $60	
00020239 D508 000C 60               		dc.b $D5, 8, 0, $C, $60	
0002023E 11                         SME__f22F_374:	dc.b $11	
0002023F E000 0002 F8               		dc.b $E0, 0, 0, 2, $F8	
00020244 E000 0001 00               		dc.b $E0, 0, 0, 1, 0	
00020249 E000 0005 08               		dc.b $E0, 0, 0, 5, 8	
0002024E E000 0001 10               		dc.b $E0, 0, 0, 1, $10	
00020253 E000 0002 18               		dc.b $E0, 0, 0, 2, $18	
00020258 E000 0003 28               		dc.b $E0, 0, 0, 3, $28	
0002025D E000 0001 30               		dc.b $E0, 0, 0, 1, $30	
00020262 E000 0002 38               		dc.b $E0, 0, 0, 2, $38	
00020267 E000 0001 40               		dc.b $E0, 0, 0, 1, $40	
0002026C D800 0000 48               		dc.b $D8, 0, 0, 0, $48	
00020271 E000 0004 50               		dc.b $E0, 0, 0, 4, $50	
00020276 E508 0006 D8               		dc.b $E5, 8, 0, 6, $D8	
0002027B DD08 0009 D8               		dc.b $DD, 8, 0, 9, $D8	
00020280 D508 000C D8               		dc.b $D5, 8, 0, $C, $D8	
00020285 E508 0006 60               		dc.b $E5, 8, 0, 6, $60	
0002028A DD08 0009 60               		dc.b $DD, 8, 0, 9, $60	
0002028F D508 000C 60               		dc.b $D5, 8, 0, $C, $60	
00020294 11                         SME__f22F_3CA:	dc.b $11	
00020295 E000 0002 F8               		dc.b $E0, 0, 0, 2, $F8	
0002029A E000 0001 00               		dc.b $E0, 0, 0, 1, 0	
0002029F E000 0005 08               		dc.b $E0, 0, 0, 5, 8	
000202A4 E000 0001 10               		dc.b $E0, 0, 0, 1, $10	
000202A9 E000 0002 18               		dc.b $E0, 0, 0, 2, $18	
000202AE E000 0003 28               		dc.b $E0, 0, 0, 3, $28	
000202B3 E000 0001 30               		dc.b $E0, 0, 0, 1, $30	
000202B8 E000 0002 38               		dc.b $E0, 0, 0, 2, $38	
000202BD E000 0001 40               		dc.b $E0, 0, 0, 1, $40	
000202C2 E000 0000 48               		dc.b $E0, 0, 0, 0, $48	
000202C7 D800 0004 50               		dc.b $D8, 0, 0, 4, $50	
000202CC E508 0006 D8               		dc.b $E5, 8, 0, 6, $D8	
000202D1 DD08 0009 D8               		dc.b $DD, 8, 0, 9, $D8	
000202D6 D508 000C D8               		dc.b $D5, 8, 0, $C, $D8	
000202DB E508 0006 60               		dc.b $E5, 8, 0, 6, $60	
000202E0 DD08 0009 60               		dc.b $DD, 8, 0, 9, $60	
000202E5 D508 000C 60               		dc.b $D5, 8, 0, $C, $60	
000202EA                            		even
000202EA                            		even
000202EA                            M_SOUNDTEST:
000202EA                            	include "_maps\SOUNDTEST.asm"
000202EA                            ; --------------------------------------------------------------------------------
000202EA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000202EA                            ; --------------------------------------------------------------------------------
000202EA                            
000202EA                            SME_7Cli6:	
000202EA 0000 0000                  		dc.w SME_7Cli6_32-SME_7Cli6, SME_7Cli6_38-SME_7Cli6	
000202EE 0000 0000                  		dc.w SME_7Cli6_43-SME_7Cli6, SME_7Cli6_4E-SME_7Cli6	
000202F2 0000 0000                  		dc.w SME_7Cli6_59-SME_7Cli6, SME_7Cli6_64-SME_7Cli6	
000202F6 0000 0000                  		dc.w SME_7Cli6_6F-SME_7Cli6, SME_7Cli6_7A-SME_7Cli6	
000202FA 0000 0000                  		dc.w SME_7Cli6_85-SME_7Cli6, SME_7Cli6_90-SME_7Cli6	
000202FE 0000 0000                  		dc.w SME_7Cli6_9B-SME_7Cli6, SME_7Cli6_A6-SME_7Cli6	
00020302 0000 0000                  		dc.w SME_7Cli6_AC-SME_7Cli6, SME_7Cli6_B7-SME_7Cli6	
00020306 0000 0000                  		dc.w SME_7Cli6_C2-SME_7Cli6, SME_7Cli6_CD-SME_7Cli6	
0002030A 0000 0000                  		dc.w SME_7Cli6_D8-SME_7Cli6, SME_7Cli6_E3-SME_7Cli6	
0002030E 0000 0000                  		dc.w SME_7Cli6_EE-SME_7Cli6, SME_7Cli6_F9-SME_7Cli6	
00020312 0000 0000                  		dc.w SME_7Cli6_104-SME_7Cli6, SME_7Cli6_10F-SME_7Cli6	
00020316 0000 0000                  		dc.w SME_7Cli6_11A-SME_7Cli6, SME_7Cli6_125-SME_7Cli6	
0002031A 0000                       		dc.w SME_7Cli6_130-SME_7Cli6	
0002031C 01                         SME_7Cli6_32:	dc.b 1	
0002031D E004 0010 F8               		dc.b $E0, 4, 0, $10, $F8	
00020322 02                         SME_7Cli6_38:	dc.b 2	
00020323 E000 0010 F8               		dc.b $E0, 0, 0, $10, $F8	
00020328 E000 0012 00               		dc.b $E0, 0, 0, $12, 0	
0002032D 02                         SME_7Cli6_43:	dc.b 2	
0002032E E000 0010 F8               		dc.b $E0, 0, 0, $10, $F8	
00020333 E000 0013 00               		dc.b $E0, 0, 0, $13, 0	
00020338 02                         SME_7Cli6_4E:	dc.b 2	
00020339 E000 0010 F8               		dc.b $E0, 0, 0, $10, $F8	
0002033E E000 0014 00               		dc.b $E0, 0, 0, $14, 0	
00020343 02                         SME_7Cli6_59:	dc.b 2	
00020344 E000 0010 F8               		dc.b $E0, 0, 0, $10, $F8	
00020349 E000 0015 00               		dc.b $E0, 0, 0, $15, 0	
0002034E 02                         SME_7Cli6_64:	dc.b 2	
0002034F E000 0010 F8               		dc.b $E0, 0, 0, $10, $F8	
00020354 E000 0016 00               		dc.b $E0, 0, 0, $16, 0	
00020359 02                         SME_7Cli6_6F:	dc.b 2	
0002035A E000 0010 F8               		dc.b $E0, 0, 0, $10, $F8	
0002035F E000 0017 00               		dc.b $E0, 0, 0, $17, 0	
00020364 02                         SME_7Cli6_7A:	dc.b 2	
00020365 E000 0010 F8               		dc.b $E0, 0, 0, $10, $F8	
0002036A E000 0018 00               		dc.b $E0, 0, 0, $18, 0	
0002036F 02                         SME_7Cli6_85:	dc.b 2	
00020370 E000 0010 F8               		dc.b $E0, 0, 0, $10, $F8	
00020375 E000 0019 00               		dc.b $E0, 0, 0, $19, 0	
0002037A 02                         SME_7Cli6_90:	dc.b 2	
0002037B E000 0011 F8               		dc.b $E0, 0, 0, $11, $F8	
00020380 E000 0010 00               		dc.b $E0, 0, 0, $10, 0	
00020385 02                         SME_7Cli6_9B:	dc.b 2	
00020386 E000 0011 F8               		dc.b $E0, 0, 0, $11, $F8	
0002038B E000 0011 00               		dc.b $E0, 0, 0, $11, 0	
00020390 01                         SME_7Cli6_A6:	dc.b 1	
00020391 E004 0011 F8               		dc.b $E0, 4, 0, $11, $F8	
00020396 02                         SME_7Cli6_AC:	dc.b 2	
00020397 E000 0011 F8               		dc.b $E0, 0, 0, $11, $F8	
0002039C E000 0013 00               		dc.b $E0, 0, 0, $13, 0	
000203A1 02                         SME_7Cli6_B7:	dc.b 2	
000203A2 E000 0011 F8               		dc.b $E0, 0, 0, $11, $F8	
000203A7 E000 0014 00               		dc.b $E0, 0, 0, $14, 0	
000203AC 02                         SME_7Cli6_C2:	dc.b 2	
000203AD E000 0011 F8               		dc.b $E0, 0, 0, $11, $F8	
000203B2 E000 0015 00               		dc.b $E0, 0, 0, $15, 0	
000203B7 02                         SME_7Cli6_CD:	dc.b 2	
000203B8 E000 0011 F8               		dc.b $E0, 0, 0, $11, $F8	
000203BD E000 0016 00               		dc.b $E0, 0, 0, $16, 0	
000203C2 02                         SME_7Cli6_D8:	dc.b 2	
000203C3 E000 0011 F8               		dc.b $E0, 0, 0, $11, $F8	
000203C8 E000 0017 00               		dc.b $E0, 0, 0, $17, 0	
000203CD 02                         SME_7Cli6_E3:	dc.b 2	
000203CE E000 0011 F8               		dc.b $E0, 0, 0, $11, $F8	
000203D3 E000 0018 00               		dc.b $E0, 0, 0, $18, 0	
000203D8 02                         SME_7Cli6_EE:	dc.b 2	
000203D9 E000 0011 F8               		dc.b $E0, 0, 0, $11, $F8	
000203DE E000 0019 00               		dc.b $E0, 0, 0, $19, 0	
000203E3 02                         SME_7Cli6_F9:	dc.b 2	
000203E4 E000 0012 F8               		dc.b $E0, 0, 0, $12, $F8	
000203E9 E000 0010 00               		dc.b $E0, 0, 0, $10, 0	
000203EE 02                         SME_7Cli6_104:	dc.b 2	
000203EF E000 0012 F8               		dc.b $E0, 0, 0, $12, $F8	
000203F4 E000 0011 00               		dc.b $E0, 0, 0, $11, 0	
000203F9 02                         SME_7Cli6_10F:	dc.b 2	
000203FA E000 0012 F8               		dc.b $E0, 0, 0, $12, $F8	
000203FF E000 0012 00               		dc.b $E0, 0, 0, $12, 0	
00020404 02                         SME_7Cli6_11A:	dc.b 2	
00020405 E000 0012 F8               		dc.b $E0, 0, 0, $12, $F8	
0002040A E000 0013 00               		dc.b $E0, 0, 0, $13, 0	
0002040F 02                         SME_7Cli6_125:	dc.b 2	
00020410 E000 0012 F8               		dc.b $E0, 0, 0, $12, $F8	
00020415 E000 0014 00               		dc.b $E0, 0, 0, $14, 0	
0002041A 02                         SME_7Cli6_130:	dc.b 2	
0002041B E000 0012 F8               		dc.b $E0, 0, 0, $12, $F8	
00020420 E000 0015 00               		dc.b $E0, 0, 0, $15, 0	
00020426 00                         		even
00020426 00                         		even
00020426                            Map_obj10:
00020426                            	include "_maps\obj10.asm"
00020426                            ; --------------------------------------------------------------------------------
00020426                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00020426                            ; --------------------------------------------------------------------------------
00020426                            
00020426                            SME_kZekA:	
00020426 0000 0000                  		dc.w SME_kZekA_14-SME_kZekA, SME_kZekA_A6-SME_kZekA	
0002042A 0000 0000                  		dc.w SME_kZekA_142-SME_kZekA, SME_kZekA_1F2-SME_kZekA	
0002042E 0000 0000                  		dc.w SME_kZekA_298-SME_kZekA, SME_kZekA_32F-SME_kZekA	
00020432 0000 0000                  		dc.w SME_kZekA_3A8-SME_kZekA, SME_kZekA_408-SME_kZekA	
00020436 0000 0000                  		dc.w SME_kZekA_468-SME_kZekA, SME_kZekA_4CD-SME_kZekA	
0002043A 1D                         SME_kZekA_14:	dc.b $1D	
0002043B 1C00 0000 E1               		dc.b $1C, 0, 0, 0, $E1	
00020440 1C00 0001 E9               		dc.b $1C, 0, 0, 1, $E9	
00020445 1C00 0002 F1               		dc.b $1C, 0, 0, 2, $F1	
0002044A 1C00 0003 F9               		dc.b $1C, 0, 0, 3, $F9	
0002044F 1C00 0004 01               		dc.b $1C, 0, 0, 4, 1	
00020454 1C00 0005 09               		dc.b $1C, 0, 0, 5, 9	
00020459 1C00 0006 11               		dc.b $1C, 0, 0, 6, $11	
0002045E 1C00 0007 19               		dc.b $1C, 0, 0, 7, $19	
00020463 1400 0008 E1               		dc.b $14, 0, 0, 8, $E1	
00020468 1400 0009 E9               		dc.b $14, 0, 0, 9, $E9	
0002046D 1400 000A F1               		dc.b $14, 0, 0, $A, $F1	
00020472 1400 000B F9               		dc.b $14, 0, 0, $B, $F9	
00020477 1400 000C 01               		dc.b $14, 0, 0, $C, 1	
0002047C 1400 000D 11               		dc.b $14, 0, 0, $D, $11	
00020481 1400 000E 19               		dc.b $14, 0, 0, $E, $19	
00020486 0C00 000F E1               		dc.b $C, 0, 0, $F, $E1	
0002048B 0C00 0010 E9               		dc.b $C, 0, 0, $10, $E9	
00020490 0C00 0011 F1               		dc.b $C, 0, 0, $11, $F1	
00020495 0C00 0012 F9               		dc.b $C, 0, 0, $12, $F9	
0002049A 0C00 0013 01               		dc.b $C, 0, 0, $13, 1	
0002049F 0400 0014 E9               		dc.b 4, 0, 0, $14, $E9	
000204A4 0400 0015 F1               		dc.b 4, 0, 0, $15, $F1	
000204A9 0400 0016 F9               		dc.b 4, 0, 0, $16, $F9	
000204AE 0400 0017 01               		dc.b 4, 0, 0, $17, 1	
000204B3 FC00 0018 E9               		dc.b $FC, 0, 0, $18, $E9	
000204B8 FC00 0019 F1               		dc.b $FC, 0, 0, $19, $F1	
000204BD FC00 001A F9               		dc.b $FC, 0, 0, $1A, $F9	
000204C2 F400 001B E9               		dc.b $F4, 0, 0, $1B, $E9	
000204C7 F400 001C F1               		dc.b $F4, 0, 0, $1C, $F1	
000204CC 1F                         SME_kZekA_A6:	dc.b $1F	
000204CD 1B00 001D E1               		dc.b $1B, 0, 0, $1D, $E1	
000204D2 1B00 001E E9               		dc.b $1B, 0, 0, $1E, $E9	
000204D7 1B00 001F F1               		dc.b $1B, 0, 0, $1F, $F1	
000204DC 1B00 0020 F9               		dc.b $1B, 0, 0, $20, $F9	
000204E1 1B00 0021 01               		dc.b $1B, 0, 0, $21, 1	
000204E6 1B00 0022 09               		dc.b $1B, 0, 0, $22, 9	
000204EB 1B00 0023 11               		dc.b $1B, 0, 0, $23, $11	
000204F0 1B00 0024 19               		dc.b $1B, 0, 0, $24, $19	
000204F5 1300 0025 E1               		dc.b $13, 0, 0, $25, $E1	
000204FA 1300 0026 E9               		dc.b $13, 0, 0, $26, $E9	
000204FF 1300 0027 F1               		dc.b $13, 0, 0, $27, $F1	
00020504 1300 0028 F9               		dc.b $13, 0, 0, $28, $F9	
00020509 1300 0029 01               		dc.b $13, 0, 0, $29, 1	
0002050E 1300 002A 09               		dc.b $13, 0, 0, $2A, 9	
00020513 1300 002B 11               		dc.b $13, 0, 0, $2B, $11	
00020518 1300 002C 19               		dc.b $13, 0, 0, $2C, $19	
0002051D 0B00 002D E1               		dc.b $B, 0, 0, $2D, $E1	
00020522 0B00 002E E9               		dc.b $B, 0, 0, $2E, $E9	
00020527 0B00 002F F1               		dc.b $B, 0, 0, $2F, $F1	
0002052C 0B00 0030 F9               		dc.b $B, 0, 0, $30, $F9	
00020531 0B00 0031 01               		dc.b $B, 0, 0, $31, 1	
00020536 0300 0032 E9               		dc.b 3, 0, 0, $32, $E9	
0002053B 0300 0033 F1               		dc.b 3, 0, 0, $33, $F1	
00020540 0300 0034 F9               		dc.b 3, 0, 0, $34, $F9	
00020545 0300 0035 01               		dc.b 3, 0, 0, $35, 1	
0002054A FB00 0036 E9               		dc.b $FB, 0, 0, $36, $E9	
0002054F FB00 0037 F1               		dc.b $FB, 0, 0, $37, $F1	
00020554 FB00 0038 F9               		dc.b $FB, 0, 0, $38, $F9	
00020559 F300 0039 E9               		dc.b $F3, 0, 0, $39, $E9	
0002055E F300 003A F1               		dc.b $F3, 0, 0, $3A, $F1	
00020563 F300 003B F9               		dc.b $F3, 0, 0, $3B, $F9	
00020568 23                         SME_kZekA_142:	dc.b $23	
00020569 1A00 003C E1               		dc.b $1A, 0, 0, $3C, $E1	
0002056E 1A00 003D E9               		dc.b $1A, 0, 0, $3D, $E9	
00020573 1A00 003E F1               		dc.b $1A, 0, 0, $3E, $F1	
00020578 1A00 003F F9               		dc.b $1A, 0, 0, $3F, $F9	
0002057D 1A00 0040 01               		dc.b $1A, 0, 0, $40, 1	
00020582 1A00 0041 09               		dc.b $1A, 0, 0, $41, 9	
00020587 1A00 0042 11               		dc.b $1A, 0, 0, $42, $11	
0002058C 1A00 0043 19               		dc.b $1A, 0, 0, $43, $19	
00020591 1200 0044 E1               		dc.b $12, 0, 0, $44, $E1	
00020596 1200 0045 E9               		dc.b $12, 0, 0, $45, $E9	
0002059B 1200 0046 F1               		dc.b $12, 0, 0, $46, $F1	
000205A0 1200 0047 F9               		dc.b $12, 0, 0, $47, $F9	
000205A5 1200 0048 01               		dc.b $12, 0, 0, $48, 1	
000205AA 1200 0049 09               		dc.b $12, 0, 0, $49, 9	
000205AF 1200 004A 11               		dc.b $12, 0, 0, $4A, $11	
000205B4 1200 004B 19               		dc.b $12, 0, 0, $4B, $19	
000205B9 0A00 004C E1               		dc.b $A, 0, 0, $4C, $E1	
000205BE 0A00 004D E9               		dc.b $A, 0, 0, $4D, $E9	
000205C3 0A00 004E F1               		dc.b $A, 0, 0, $4E, $F1	
000205C8 0A00 004F F9               		dc.b $A, 0, 0, $4F, $F9	
000205CD 0A00 0050 01               		dc.b $A, 0, 0, $50, 1	
000205D2 0A00 0051 19               		dc.b $A, 0, 0, $51, $19	
000205D7 0200 0052 E1               		dc.b 2, 0, 0, $52, $E1	
000205DC 0200 0053 E9               		dc.b 2, 0, 0, $53, $E9	
000205E1 0200 0054 F1               		dc.b 2, 0, 0, $54, $F1	
000205E6 0200 0055 F9               		dc.b 2, 0, 0, $55, $F9	
000205EB 0200 0056 01               		dc.b 2, 0, 0, $56, 1	
000205F0 FA00 0057 E1               		dc.b $FA, 0, 0, $57, $E1	
000205F5 FA00 0058 E9               		dc.b $FA, 0, 0, $58, $E9	
000205FA FA00 0059 F1               		dc.b $FA, 0, 0, $59, $F1	
000205FF FA00 005A F9               		dc.b $FA, 0, 0, $5A, $F9	
00020604 F200 005B E1               		dc.b $F2, 0, 0, $5B, $E1	
00020609 F200 005C E9               		dc.b $F2, 0, 0, $5C, $E9	
0002060E F200 005D F1               		dc.b $F2, 0, 0, $5D, $F1	
00020613 F200 005E F9               		dc.b $F2, 0, 0, $5E, $F9	
00020618 21                         SME_kZekA_1F2:	dc.b $21	
00020619 1A00 005F E1               		dc.b $1A, 0, 0, $5F, $E1	
0002061E 1A00 0060 E9               		dc.b $1A, 0, 0, $60, $E9	
00020623 1A00 0061 F1               		dc.b $1A, 0, 0, $61, $F1	
00020628 1A00 0062 F9               		dc.b $1A, 0, 0, $62, $F9	
0002062D 1A00 0063 01               		dc.b $1A, 0, 0, $63, 1	
00020632 1A00 0064 09               		dc.b $1A, 0, 0, $64, 9	
00020637 1A00 0065 11               		dc.b $1A, 0, 0, $65, $11	
0002063C 1A00 0066 19               		dc.b $1A, 0, 0, $66, $19	
00020641 1200 0067 E1               		dc.b $12, 0, 0, $67, $E1	
00020646 1200 0068 E9               		dc.b $12, 0, 0, $68, $E9	
0002064B 1200 0069 F1               		dc.b $12, 0, 0, $69, $F1	
00020650 1200 006A F9               		dc.b $12, 0, 0, $6A, $F9	
00020655 1200 006B 01               		dc.b $12, 0, 0, $6B, 1	
0002065A 1200 006C 09               		dc.b $12, 0, 0, $6C, 9	
0002065F 1200 006D 11               		dc.b $12, 0, 0, $6D, $11	
00020664 1200 006E 19               		dc.b $12, 0, 0, $6E, $19	
00020669 0A00 006F E1               		dc.b $A, 0, 0, $6F, $E1	
0002066E 0A00 0070 E9               		dc.b $A, 0, 0, $70, $E9	
00020673 0A00 0071 F1               		dc.b $A, 0, 0, $71, $F1	
00020678 0A00 0072 F9               		dc.b $A, 0, 0, $72, $F9	
0002067D 0A00 0073 01               		dc.b $A, 0, 0, $73, 1	
00020682 0200 0074 E9               		dc.b 2, 0, 0, $74, $E9	
00020687 0200 0075 F1               		dc.b 2, 0, 0, $75, $F1	
0002068C 0200 0076 F9               		dc.b 2, 0, 0, $76, $F9	
00020691 0200 0077 01               		dc.b 2, 0, 0, $77, 1	
00020696 FA00 0078 E1               		dc.b $FA, 0, 0, $78, $E1	
0002069B FA00 0079 E9               		dc.b $FA, 0, 0, $79, $E9	
000206A0 FA00 007A F1               		dc.b $FA, 0, 0, $7A, $F1	
000206A5 FA00 007B F9               		dc.b $FA, 0, 0, $7B, $F9	
000206AA FA00 007C 01               		dc.b $FA, 0, 0, $7C, 1	
000206AF F200 007D E9               		dc.b $F2, 0, 0, $7D, $E9	
000206B4 F200 007E F1               		dc.b $F2, 0, 0, $7E, $F1	
000206B9 F200 007F F9               		dc.b $F2, 0, 0, $7F, $F9	
000206BE 1E                         SME_kZekA_298:	dc.b $1E	
000206BF 1900 0080 E1               		dc.b $19, 0, 0, $80, $E1	
000206C4 1900 0081 E9               		dc.b $19, 0, 0, $81, $E9	
000206C9 1900 0082 F1               		dc.b $19, 0, 0, $82, $F1	
000206CE 1900 0083 F9               		dc.b $19, 0, 0, $83, $F9	
000206D3 1900 0084 01               		dc.b $19, 0, 0, $84, 1	
000206D8 1900 0085 09               		dc.b $19, 0, 0, $85, 9	
000206DD 1900 0086 11               		dc.b $19, 0, 0, $86, $11	
000206E2 1900 0087 19               		dc.b $19, 0, 0, $87, $19	
000206E7 1100 0088 E1               		dc.b $11, 0, 0, $88, $E1	
000206EC 1100 0089 E9               		dc.b $11, 0, 0, $89, $E9	
000206F1 1100 008A F1               		dc.b $11, 0, 0, $8A, $F1	
000206F6 1100 008B F9               		dc.b $11, 0, 0, $8B, $F9	
000206FB 1100 008C 01               		dc.b $11, 0, 0, $8C, 1	
00020700 1100 008D 09               		dc.b $11, 0, 0, $8D, 9	
00020705 1100 008E 11               		dc.b $11, 0, 0, $8E, $11	
0002070A 1100 008F 19               		dc.b $11, 0, 0, $8F, $19	
0002070F 0900 0090 E9               		dc.b 9, 0, 0, $90, $E9	
00020714 0900 0091 F1               		dc.b 9, 0, 0, $91, $F1	
00020719 0900 0092 F9               		dc.b 9, 0, 0, $92, $F9	
0002071E 0100 0093 E9               		dc.b 1, 0, 0, $93, $E9	
00020723 0100 0094 F1               		dc.b 1, 0, 0, $94, $F1	
00020728 0100 0095 F9               		dc.b 1, 0, 0, $95, $F9	
0002072D 0100 0096 01               		dc.b 1, 0, 0, $96, 1	
00020732 F900 0097 E9               		dc.b $F9, 0, 0, $97, $E9	
00020737 F900 0098 F1               		dc.b $F9, 0, 0, $98, $F1	
0002073C F900 0099 F9               		dc.b $F9, 0, 0, $99, $F9	
00020741 F900 009A 01               		dc.b $F9, 0, 0, $9A, 1	
00020746 F100 009B E9               		dc.b $F1, 0, 0, $9B, $E9	
0002074B F100 009C F1               		dc.b $F1, 0, 0, $9C, $F1	
00020750 F100 009D F9               		dc.b $F1, 0, 0, $9D, $F9	
00020755 18                         SME_kZekA_32F:	dc.b $18	
00020756 1B00 009E EF               		dc.b $1B, 0, 0, $9E, $EF	
0002075B 1B00 009F F7               		dc.b $1B, 0, 0, $9F, $F7	
00020760 1B00 00A0 07               		dc.b $1B, 0, 0, $A0, 7	
00020765 1300 00A1 EF               		dc.b $13, 0, 0, $A1, $EF	
0002076A 1300 00A2 F7               		dc.b $13, 0, 0, $A2, $F7	
0002076F 1300 00A3 FF               		dc.b $13, 0, 0, $A3, $FF	
00020774 1300 00A4 07               		dc.b $13, 0, 0, $A4, 7	
00020779 1300 00A5 0F               		dc.b $13, 0, 0, $A5, $F	
0002077E 0B00 00A6 F7               		dc.b $B, 0, 0, $A6, $F7	
00020783 0B00 00A7 FF               		dc.b $B, 0, 0, $A7, $FF	
00020788 0B00 00A8 07               		dc.b $B, 0, 0, $A8, 7	
0002078D 0B00 00A9 0F               		dc.b $B, 0, 0, $A9, $F	
00020792 0300 00AA EF               		dc.b 3, 0, 0, $AA, $EF	
00020797 0300 00AB F7               		dc.b 3, 0, 0, $AB, $F7	
0002079C 0300 00AC FF               		dc.b 3, 0, 0, $AC, $FF	
000207A1 0300 00AD 07               		dc.b 3, 0, 0, $AD, 7	
000207A6 FB00 00AE EF               		dc.b $FB, 0, 0, $AE, $EF	
000207AB FB00 00AF F7               		dc.b $FB, 0, 0, $AF, $F7	
000207B0 FB00 00B0 FF               		dc.b $FB, 0, 0, $B0, $FF	
000207B5 FB00 00B1 07               		dc.b $FB, 0, 0, $B1, 7	
000207BA F300 00B2 F7               		dc.b $F3, 0, 0, $B2, $F7	
000207BF F300 00B3 FF               		dc.b $F3, 0, 0, $B3, $FF	
000207C4 F300 00B4 07               		dc.b $F3, 0, 0, $B4, 7	
000207C9 F300 00B5 0F               		dc.b $F3, 0, 0, $B5, $F	
000207CE 13                         SME_kZekA_3A8:	dc.b $13	
000207CF 1D00 00B6 E1               		dc.b $1D, 0, 0, $B6, $E1	
000207D4 1D00 00B7 E9               		dc.b $1D, 0, 0, $B7, $E9	
000207D9 1D00 00B8 F1               		dc.b $1D, 0, 0, $B8, $F1	
000207DE 1D00 00B9 F9               		dc.b $1D, 0, 0, $B9, $F9	
000207E3 1500 00BA E1               		dc.b $15, 0, 0, $BA, $E1	
000207E8 1500 00BB E9               		dc.b $15, 0, 0, $BB, $E9	
000207ED 1500 00BC F1               		dc.b $15, 0, 0, $BC, $F1	
000207F2 1500 00BD F9               		dc.b $15, 0, 0, $BD, $F9	
000207F7 0D00 00BE E1               		dc.b $D, 0, 0, $BE, $E1	
000207FC 0D00 00BF E9               		dc.b $D, 0, 0, $BF, $E9	
00020801 0D00 00C0 F1               		dc.b $D, 0, 0, $C0, $F1	
00020806 0D00 00C1 F9               		dc.b $D, 0, 0, $C1, $F9	
0002080B 0500 00C2 E1               		dc.b 5, 0, 0, $C2, $E1	
00020810 0500 00C3 E9               		dc.b 5, 0, 0, $C3, $E9	
00020815 0500 00C4 F1               		dc.b 5, 0, 0, $C4, $F1	
0002081A 0500 00C5 F9               		dc.b 5, 0, 0, $C5, $F9	
0002081F FD00 00C6 E9               		dc.b $FD, 0, 0, $C6, $E9	
00020824 FD00 00C7 F1               		dc.b $FD, 0, 0, $C7, $F1	
00020829 FD00 00C8 F9               		dc.b $FD, 0, 0, $C8, $F9	
0002082E 13                         SME_kZekA_408:	dc.b $13	
0002082F 1D00 00C9 E1               		dc.b $1D, 0, 0, $C9, $E1	
00020834 1D00 00CA E9               		dc.b $1D, 0, 0, $CA, $E9	
00020839 1D00 00CB F1               		dc.b $1D, 0, 0, $CB, $F1	
0002083E 1D00 00CC F9               		dc.b $1D, 0, 0, $CC, $F9	
00020843 1500 00CD E1               		dc.b $15, 0, 0, $CD, $E1	
00020848 1500 00CE E9               		dc.b $15, 0, 0, $CE, $E9	
0002084D 1500 00CF F1               		dc.b $15, 0, 0, $CF, $F1	
00020852 1500 00D0 F9               		dc.b $15, 0, 0, $D0, $F9	
00020857 0D00 00D1 E1               		dc.b $D, 0, 0, $D1, $E1	
0002085C 0D00 00D2 E9               		dc.b $D, 0, 0, $D2, $E9	
00020861 0D00 00D3 F1               		dc.b $D, 0, 0, $D3, $F1	
00020866 0D00 00D4 F9               		dc.b $D, 0, 0, $D4, $F9	
0002086B 0500 00D5 E1               		dc.b 5, 0, 0, $D5, $E1	
00020870 0500 00D6 E9               		dc.b 5, 0, 0, $D6, $E9	
00020875 0500 00D7 F1               		dc.b 5, 0, 0, $D7, $F1	
0002087A 0500 00D8 F9               		dc.b 5, 0, 0, $D8, $F9	
0002087F FD00 00D9 E9               		dc.b $FD, 0, 0, $D9, $E9	
00020884 FD00 00DA F1               		dc.b $FD, 0, 0, $DA, $F1	
00020889 FD00 00DB F9               		dc.b $FD, 0, 0, $DB, $F9	
0002088E 14                         SME_kZekA_468:	dc.b $14	
0002088F 1D00 00DC E2               		dc.b $1D, 0, 0, $DC, $E2	
00020894 1D00 00DD EA               		dc.b $1D, 0, 0, $DD, $EA	
00020899 1D00 00DE F2               		dc.b $1D, 0, 0, $DE, $F2	
0002089E 1D00 00DF FA               		dc.b $1D, 0, 0, $DF, $FA	
000208A3 1500 00E0 E2               		dc.b $15, 0, 0, $E0, $E2	
000208A8 1500 00E1 EA               		dc.b $15, 0, 0, $E1, $EA	
000208AD 1500 00E2 F2               		dc.b $15, 0, 0, $E2, $F2	
000208B2 1500 00E3 FA               		dc.b $15, 0, 0, $E3, $FA	
000208B7 0D00 00E4 E2               		dc.b $D, 0, 0, $E4, $E2	
000208BC 0D00 00E5 EA               		dc.b $D, 0, 0, $E5, $EA	
000208C1 0D00 00E6 F2               		dc.b $D, 0, 0, $E6, $F2	
000208C6 0D00 00E7 FA               		dc.b $D, 0, 0, $E7, $FA	
000208CB 0500 00E8 E2               		dc.b 5, 0, 0, $E8, $E2	
000208D0 0500 00E9 EA               		dc.b 5, 0, 0, $E9, $EA	
000208D5 0500 00EA F2               		dc.b 5, 0, 0, $EA, $F2	
000208DA 0500 00EB FA               		dc.b 5, 0, 0, $EB, $FA	
000208DF FD00 00EC E2               		dc.b $FD, 0, 0, $EC, $E2	
000208E4 FD00 00ED EA               		dc.b $FD, 0, 0, $ED, $EA	
000208E9 FD00 00EE F2               		dc.b $FD, 0, 0, $EE, $F2	
000208EE FD00 00EF FA               		dc.b $FD, 0, 0, $EF, $FA	
000208F3 13                         SME_kZekA_4CD:	dc.b $13	
000208F4 1D00 00F0 E1               		dc.b $1D, 0, 0, $F0, $E1	
000208F9 1D00 00F1 E9               		dc.b $1D, 0, 0, $F1, $E9	
000208FE 1D00 00F2 F1               		dc.b $1D, 0, 0, $F2, $F1	
00020903 1D00 00F3 F9               		dc.b $1D, 0, 0, $F3, $F9	
00020908 1500 00F4 E1               		dc.b $15, 0, 0, $F4, $E1	
0002090D 1500 00F5 E9               		dc.b $15, 0, 0, $F5, $E9	
00020912 1500 00F6 F1               		dc.b $15, 0, 0, $F6, $F1	
00020917 1500 00F7 F9               		dc.b $15, 0, 0, $F7, $F9	
0002091C 0D00 00F8 E1               		dc.b $D, 0, 0, $F8, $E1	
00020921 0D00 00F9 E9               		dc.b $D, 0, 0, $F9, $E9	
00020926 0D00 00FA F1               		dc.b $D, 0, 0, $FA, $F1	
0002092B 0D00 00FB F9               		dc.b $D, 0, 0, $FB, $F9	
00020930 0500 00FC E1               		dc.b 5, 0, 0, $FC, $E1	
00020935 0500 00FD E9               		dc.b 5, 0, 0, $FD, $E9	
0002093A 0500 00FE F1               		dc.b 5, 0, 0, $FE, $F1	
0002093F 0500 00FF F9               		dc.b 5, 0, 0, $FF, $F9	
00020944 FD00 0100 E9               		dc.b $FD, 0, 1, 0, $E9	
00020949 FD00 0101 F1               		dc.b $FD, 0, 1, 1, $F1	
0002094E FD00 0102 F9               		dc.b $FD, 0, 1, 2, $F9	
00020954 00                         		even
00020954 00                         		even
00020954                            Ani_obj10:
00020954                            	include "_anim\obj10.asm"
00020954                            ; ---------------------------------------------------------------------------
00020954                            ; Animation script - Sonic Surf
00020954                            ; ---------------------------------------------------------------------------
00020954 0000                       		dc.w Surf_Normal-Ani_obj10
00020956 0000                       		dc.w Surf_Jump-Ani_obj10
00020958 0000                       		dc.w Surf_Run-Ani_obj10
0002095A 0900 0102 0304 0302 01FF+  Surf_Normal:	dc.b ($13/$2), 0, 1, 2, 3, 4, 3, 2, 1, $FF, 0
00020965 FF05 FF                    Surf_Jump:	dc.b $FF, 5, $FF
00020968 FF06 0708 09FF FFFF        Surf_Run:	dc.b $FF, 6, 7, 8, 9, $FF, $FF, $FF
00020970                            		even
00020970                            		even
00020970                            
00020970                            ; ---------------------------------------------------------------------------
00020970                            ; Subroutine to move rings to sonic
00020970                            ; ---------------------------------------------------------------------------
00020970                            Magnetizar:
00020970 0C38 0001 FE2C             		cmpi.b  #1,($FFFFFE2C).w		; check Sonic has The shield
00020976 6600 0000                  		bne     Magnet_Ignore			; If yes goto magnetize_rings code
0002097A 3038 D008                  		move.w	($FFFFD008).w,d0		; load sonic's X possision
0002097E 9068 0008                  		sub.w	$8(a0),d0			; minus Ring's X possision
00020982 3238 D00C                  		move.w	($FFFFD00C).w,d1		; load sonic's Y possision
00020986 9268 000C                  		sub.w	$C(a0),d1			; minus Ring's Y possision
0002098A 0828 0000 002F             		btst	#0,$2F(a0)			; has Ring been magnetized?
00020990 6600                       		bne.s	MR_CheckRemove			; if so, branch
00020992 6000 0000                  		bra.w	MR_CheckMagnet			; check ring's distance
00020996                            
00020996                            Magnet_Ignore:
00020996 4E75                       		rts					; return
00020998                            
00020998                            ; ===========================================================================
00020998                            ; Check Ring For Magnetize
00020998                            ; ===========================================================================
00020998                            
00020998                            MR_CheckMagnet:
00020998 0C40 0060                  		cmp.w	#$60,d0				; is ring out of range by 60 pixels on the left?
0002099C 6C00 0000                  		bge.w	MR_Resume_Rings			; if so, resume Ring's normal function
000209A0 0C40 FFA0                  		cmp.w	#-$60,d0			; is ring out of range by 60 pixels on the Right?
000209A4 6F00 0000                  		ble.w	MR_Resume_Rings			; if so, resume Ring's normal function
000209A8 0C41 0060                  		cmp.w	#$60,d1				; is ring out of range by 60 pixels Below?
000209AC 6C00 0000                  		bge.w	MR_Resume_Rings			; if so, resume Ring's normal function
000209B0 0C41 FFA0                  		cmp.w	#-$60,d1			; is ring out of range by 60 pixels Above?
000209B4 6F00 0000                  		ble.w	MR_Resume_Rings			; if so, resume Ring's normal function
000209B8                            
000209B8 08E8 0000 002F             		bset	#0,$2F(a0)			; set Ring as magnetized
000209BE 08A8 0001 002F             		bclr	#1,$2F(a0)
000209C4 6000                       		bra.s	SetRing_MoveLR		
000209C6                            
000209C6                            ; ===========================================================================
000209C6                            ; Check Ring For Demagnetize
000209C6                            ; ===========================================================================
000209C6                            
000209C6                            MR_CheckRemove:
000209C6 0C40 00C0                  		cmp.w	#$C0,d0				; is ring out of range by C0 pixels on the left?		
000209CA 6C00 0000                  		bge.w	MR_DemagetizeRing		; if so, spawn Ring
000209CE 0C40 FF40                  		cmp.w	#-$C0,d0			; is ring out of range by C0 pixels on the Right?
000209D2 6F00 0000                  		ble.w	MR_DemagetizeRing		; if so, spawn Ring
000209D6 0C41 00C0                  		cmp.w	#$C0,d1				; is ring out of range by C0 pixels Below?
000209DA 6C00 0000                  		bge.w	MR_DemagetizeRing		; if so, spawn Ring
000209DE 0C41 FF40                  		cmp.w	#-$C0,d1			; is ring out of range by C0 pixels Above?
000209E2 6F00 0000                  		ble.w	MR_DemagetizeRing		; if so, spawn Ring
000209E6                            
000209E6 08A8 0001 002F             		bclr	#1,$2F(a0)
000209EC 6000                       		bra.s	SetRing_MoveLR
000209EE                            
000209EE                            ; ===========================================================================
000209EE                            ; Set Ring Delete
000209EE                            ; ===========================================================================
000209EE                            
000209EE                            MR_DemagetizeRing:
000209EE 4EB9 0001 053E             		jsr	(DeleteObject).l		; delete Ring
000209F4 08E8 0001 002F             		bset	#1,$2F(a0)
000209FA                            
000209FA                            ; ===========================================================================
000209FA                            ; Magnetize Ring Left/Right
000209FA                            ; ===========================================================================
000209FA                            
000209FA                            SetRing_MoveLR:
000209FA 363C 0080                  		move.w	#$0080,d3			; set ring speed increase
000209FE 4A40                       		tst.w	d0				; is the ring to the left of sonic?
00020A00 6D00                       		blt.s	MoveRing_Right1			; if so, branch
00020A02                            
00020A02                            ; ===========================================================================
00020A02                            ; Left
00020A02                            
00020A02                            MoveRing_Left1:
00020A02 4A68 0010                  		tst.w	$10(a0)				; is ring moving left?
00020A06 6E00                       		bgt.s	MoveRing_Left2			; if so, branch
00020A08 363C 00A0                  		move.w	#$00A0,d3			; if not, set new speed increase
00020A0C                            
00020A0C                            MoveRing_Left2:	
00020A0C D768 0010                  		add.w	d3,$10(a0)			; move ring left
00020A10 6000                       		bra.s	SetRing_MoveUD			; start Up and Down functions
00020A12                            
00020A12                            ; ===========================================================================
00020A12                            ; Right
00020A12                            
00020A12                            MoveRing_Right1:	
00020A12 4A68 0010                  		tst.w	$10(a0)				; is ring moving right?
00020A16 6D00                       		blt.s	MoveRing_Right2			; if so, branch
00020A18 363C 00A0                  		move.w	#$00A0,d3			; if not, set new speed increase
00020A1C                            
00020A1C                            MoveRing_Right2:	
00020A1C 9768 0010                  		sub.w	d3,$10(a0)			; move ring Right
00020A20                            
00020A20                            ; ===========================================================================
00020A20                            ; Magnetize Ring Up/Down
00020A20                            ; ===========================================================================
00020A20                            
00020A20                            SetRing_MoveUD:
00020A20 363C 0080                  		move.w	#$0080,d3			; set ring speed increase
00020A24 4A41                       		tst.w	d1				; is the ring above sonic?
00020A26 6D00                       		blt.s	MoveRing_Up1			; if so, branch
00020A28                            
00020A28                            ; ===========================================================================
00020A28                            ; Down
00020A28                            
00020A28                            MoveRing_Down1:
00020A28 4A68 0012                  		tst.w	$12(a0)				; is ring moving down?
00020A2C 6E00                       		bgt.s	MoveRing_Down2			; if so, branch
00020A2E 363C 00A0                  		move.w	#$00A0,d3			; if not, set new speed increase
00020A32                            
00020A32                            MoveRing_Down2:	
00020A32 D768 0012                  		add.w	d3,$12(a0)			; move ring down
00020A36 4EF9 0001 04DC             		jmp	SpeedToPos			; start Possision Update
00020A3C                            
00020A3C                            ; ===========================================================================
00020A3C                            ; Up
00020A3C                            
00020A3C                            MoveRing_Up1:
00020A3C 4A68 0012                  		tst.w	$12(a0)				; is ring moving Up?
00020A40 6D00                       		blt.s	MoveRing_Up2			; if so, branch
00020A42 363C 00A0                  		move.w	#$00A0,d3			; if not, set new speed increase
00020A46                            	
00020A46                            MoveRing_Up2:
00020A46 9768 0012                  		sub.w	d3,$12(a0)			; move ring Up
00020A4A 4EF9 0001 04DC             		jmp	SpeedToPos			; start Possision Update
00020A50                            
00020A50                            ; ===========================================================================
00020A50                            ; Finish Ring
00020A50                            ; ===========================================================================
00020A50                            
00020A50                            MR_Resume_Rings:
00020A50 0828 0000 002F             		btst	#0,$2F(a0)			; has Ring been magnetized?
00020A56 6700                       		beq.s	MR_FinishRing			; if not, branch
00020A58 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w		; set ring frame rate
00020A5E 08E8 0001 002F             		bset	#1,$2F(a0)
00020A64 4EF9 0000 C57C             		jmp	Obj37_Bounce			; set ring to bounce
00020A6A                            	
00020A6A                            MR_FinishRing:	
00020A6A 08E8 0001 002F             		bset	#1,$2F(a0)
00020A70 4E75                       		rts		
00020A72                            ; ===========================================================================
00020A72                            
00020A72                            ; ---------------------------------------------------------------------------
00020A72                            ; Subroutine to	animate	level graphics
00020A72                            ; ---------------------------------------------------------------------------
00020A72                            
00020A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A72                            
00020A72                            
00020A72                            AniArt_Load:				; XREF: Demo_Time; loc_F54
00020A72 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00020A76 6600                       		bne.s	AniArt_Pause	; if yes, branch
00020A78 4DF9 00C0 0000             		lea	($C00000).l,a6
00020A7E 6100 0000                  		bsr.w	AniArt_GiantRing
00020A82 4EB9 0000 0000             		jsr	HudUpdate
00020A88 7000                       		moveq	#0,d0
00020A8A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00020A8E D040                       		add.w	d0,d0
00020A90 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
00020A94 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
00020A98                            ; ===========================================================================
00020A98                            
00020A98                            AniArt_Pause:
00020A98 4E75                       		rts	
00020A9A                            ; End of function AniArt_Load
00020A9A                            
00020A9A                            ; ===========================================================================
00020A9A 0000 0000                  AniArt_Index:	dc.w AniArt_Menu-AniArt_Index, AniArt_none-AniArt_Index
00020A9E 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
00020AA2 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
00020AA6 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_none-AniArt_Index
00020AAA 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_none-AniArt_Index
00020AAE                            ; ===========================================================================
00020AAE                            ; ---------------------------------------------------------------------------
00020AAE                            ; Animated pattern routine - Main Menu
00020AAE                            ; ---------------------------------------------------------------------------
00020AAE                            
00020AAE                            AniArt_Menu:
00020AAE 0C38 0020 FF94             		cmpi.b	#$20,($FFFFFF94).w
00020AB4 6700 0000                  		beq	AniArt_Menu_Okay
00020AB8 0C78 1040 F700             		cmpi.w	#$1040,($FFFFF700).w
00020ABE 6500 0000                  		bcs	Aniart_AHZ_Normal
00020AC2 4EB9 0000 0000             		jsr	Aniart_AHZ_Parallax1
00020AC8 4EB9 0000 0000             		jsr	Aniart_AHZ_Parallax2
00020ACE 4EB9 0000 0000             		jsr	Aniart_AHZ_Parallax3
00020AD4 4E75                       		rts
00020AD6                            
00020AD6                            Aniart_AHZ_Parallax3:
00020AD6 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port address to a5
00020ADC 4DED 0004                  		lea	$04(a5),a6				; load VDP address port address to a6
00020AE0 49FA 0000                  		lea	AniGHZPar3(pc),a4			; load animated tile frames address
00020AE4 3038 F708                  		move.w	($FFFFF708).w,d0			; load screen's X position
00020AE8 D040                       		add.w	d0,d0					; multiply by 2
00020AEA D040                       		add.w	d0,d0					; multiply by 2
00020AEC D040                       		add.w	d0,d0					; multiply by 2
00020AEE D040                       		add.w	d0,d0					; multiply by 2
00020AF0 4440                       		neg.w	d0					; negate to negative (for opposite direction)
00020AF2 0240 00E0                  		andi.w	#$00E0,d0				; keep in multiples of 20 and in range of 100 (100 / 20 = 8 tiles)
00020AF6 D8C0                       		adda.w	d0,a4					; add to frame address (To get the address of the correct tile frame)
00020B02                            ;		move.l	#$40200000,(a6)				; set VDP mode and address (to the first tile we made)
00020B02 2A9C                       		move.l	(a4)+,(a5)				; Dump tile to V-Ram space
00020B04 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B06 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B08 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B0A 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B0C 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B0E 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B10 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B12 4E75                       		rts						; return
00020B14                            Aniart_AHZ_Parallax2:
00020B14 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port address to a5
00020B1A 4DED 0004                  		lea	$04(a5),a6				; load VDP address port address to a6
00020B1E 49FA 0000                  		lea	AniGHZPar2(pc),a4			; load animated tile frames address
00020B22 3038 F708                  		move.w	($FFFFF708).w,d0			; load screen's X position
00020B26 D040                       		add.w	d0,d0					; multiply by 2
00020B28 D040                       		add.w	d0,d0					; multiply by 2
00020B2A D040                       		add.w	d0,d0					; multiply by 2
00020B2C D040                       		add.w	d0,d0					; multiply by 2
00020B2E 4440                       		neg.w	d0					; negate to negative (for opposite direction)
00020B30 0240 00E0                  		andi.w	#$00E0,d0				; keep in multiples of 20 and in range of 100 (100 / 20 = 8 tiles)
00020B34 D8C0                       		adda.w	d0,a4					; add to frame address (To get the address of the correct tile frame)
00020B40                            ;		move.l	#$40200000,(a6)				; set VDP mode and address (to the first tile we made)
00020B40 2A9C                       		move.l	(a4)+,(a5)				; Dump tile to V-Ram space
00020B42 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B44 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B46 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B48 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B4A 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B4C 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B4E 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B50 4E75                       		rts						; return
00020B52                            
00020B52                            Aniart_AHZ_Parallax1:
00020B52 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port address to a5
00020B58 4DED 0004                  		lea	$04(a5),a6				; load VDP address port address to a6
00020B5C 49FA 0000                  		lea	AniGHZPar(pc),a4			; load animated tile frames address
00020B60 3038 F700                  		move.w	($FFFFF700).w,d0			; load screen's X position
00020B64 D040                       		add.w	d0,d0					; multiply by 2
00020B66 D040                       		add.w	d0,d0					; multiply by 2
00020B68 D040                       		add.w	d0,d0					; multiply by 2
00020B6A D040                       		add.w	d0,d0		5 49			; multiply by 2
00020B6C D040                       		add.w	d0,d0					; multiply by 2
00020B6E D040                       		add.w	d0,d0					; multiply by 2
00020B70 D040                       		add.w	d0,d0					; multiply by 2
00020B72 D040                       		add.w	d0,d0					; multiply by 2
00020B74 D040                       		add.w	d0,d0					; multiply by 2
00020B76 D040                       		add.w	d0,d0					; multiply by 2
00020B78 4440                       		neg.w	d0					; negate to negative (for opposite direction)
00020B7A 0240 00E0                  		andi.w	#$00E0,d0				; keep in multiples of 20 and in range of 100 (100 / 20 = 8 tiles)
00020B7E D8C0                       		adda.w	d0,a4					; add to frame address (To get the address of the correct tile frame)
00020B8A                            ;		move.l	#$40200000,(a6)				; set VDP mode and address (to the first tile we made)
00020B8A 2A9C                       		move.l	(a4)+,(a5)				; Dump tile to V-Ram space
00020B8C 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B8E 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B90 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B92 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B94 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B96 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B98 2A9C                       		move.l	(a4)+,(a5)				; ''
00020B9A 4E75                       		rts						; return
00020B9C                            
00020B9C                            Aniart_AHZ_Normal:
00020B9C 4EB9 0000 0000             		jsr	Aniart_AHZ_2
00020BAC 45F9 0000 0000             		lea	(Uncflows1),a2
00020BB2 303C 0003                  		move.w	#3,d0
00020BB6 4EB8 1C28                  		jsr	LoadUncArt		
00020BBA 0C38 0010 FFB3             		cmpi.b	#$10,($FFFFFFB3).w
00020BC0 6500 0000                  		bcs	AniArt_AHZ_Return
00020BCE 45F9 0000 0000             		lea	(Uncflows2),a2
00020BD4 303C 0003                  		move.w	#3,d0
00020BD8 4EB8 1C28                  		jsr	LoadUncArt		
00020BDC 0C38 0010 FFB4             		cmpi.b	#$10,($FFFFFFB4).w
00020BE2 6500 0000                  		bcs	AniArt_AHZ_Return_2
00020BF0 45F9 0000 0000             		lea	(Uncflows1),a2
00020BF6 303C 0003                  		move.w	#3,d0
00020BFA 4EB8 1C28                  		jsr	LoadUncArt		
00020BFE 0C38 0010 FFB5             		cmpi.b	#$10,($FFFFFFB5).w
00020C04 6500 0000                  		bcs	AniArt_AHZ_Return_3
00020C12 45F9 0000 0000             		lea	(Uncflows3),a2
00020C18 303C 0003                  		move.w	#3,d0
00020C1C 4EB8 1C28                  		jsr	LoadUncArt		
00020C20 0C38 0010 FFB6             		cmpi.b	#$10,($FFFFFFB6).w
00020C26 6500 0000                  		bcs	AniArt_AHZ_Return_4
00020C2A 4238 FFB3                  		clr.b	($FFFFFFB3).w
00020C2E 4278 FFB4                  		clr.w	($FFFFFFB4).w
00020C32 4238 FFB6                  		clr.b	($FFFFFFB6).w
00020C36 4E75                       		rts
00020C38                            
00020C38                            AniArt_AHZ_Return:	
00020C38 5238 FFB3                  		add.b	#1,($FFFFFFB3).w
00020C3C 4E75                       		rts
00020C3E                            
00020C3E                            AniArt_AHZ_Return_2:	
00020C3E 5238 FFB4                  		add.b	#1,($FFFFFFB4).w
00020C42 4E75                       		rts
00020C44                            
00020C44                            AniArt_AHZ_Return_3:	
00020C44 5238 FFB5                  		add.b	#1,($FFFFFFB5).w
00020C48 4E75                       		rts
00020C4A                            
00020C4A                            AniArt_AHZ_Return_4:	
00020C4A 5238 FFB6                  		add.b	#1,($FFFFFFB6).w
00020C4E 4E75                       		rts
00020C50                            
00020C50                            Aniart_AHZ_2:
00020C5A 45F9 0000 0000             		lea	(AHZ_Flower_2_1),a2
00020C60 303C 000F                  		move.w	#$F,d0
00020C64 4EB8 1C28                  		jsr	LoadUncArt		
00020C68 0C38 0008 FFB7             		cmpi.b	#$8,($FFFFFFB7).w
00020C6E 6500 0000                  		bcs	AniArt_GHZ_Return
00020C72                            ;		vram	$A0
00020C72                            ;		lea	(Ahz_Flower_2_2),a2
00020C72                            ;		move.w	#$F,d0
00020C72                            ;		jsr	LoadUncArt		
00020C72                            ;		cmpi.b	#$8,($FFFFFFB4).w
00020C72                            ;		bcs	AniArt_GHZ_Return_2
00020C72 4238 FFB7                  		clr.b	($FFFFFFB7).w
00020C76 4238 FFB8                  		clr.b	($FFFFFFB8).w
00020C7A 4E75                       		rts
00020C7C                            
00020C7C                            AniArt_GHZ_Return:	
00020C7C 5238 FFB7                  		add.b	#1,($FFFFFFB7).w
00020C80 4E75                       		rts
00020C82                            
00020C82                            AniArt_GHZ_Return_2:	
00020C82 5238 FFB8                  		add.b	#1,($FFFFFFB8).w
00020C86 4E75                       		rts
00020C88                            
00020C88                            AniArt_Menu_Okay:
00020C88 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port address to a5
00020C8E 4DED 0004                  		lea	$04(a5),a6				; load VDP address port address to a6
00020C92 49FA 0000                  		lea	AniStars(pc),a4				; load animated tile frames address
00020C96 3038 F708                  		move.w	($FFFFF708).w,d0			; load screen's X position
00020C9A D040                       		add.w	d0,d0					; multiply by 2
00020C9C D040                       		add.w	d0,d0					; multiply by 2
00020C9E D040                       		add.w	d0,d0					; multiply by 2
00020CA0 D040                       		add.w	d0,d0					; multiply by 2
00020CA2 4440                       		neg.w	d0					; negate to negative (for opposite direction)
00020CA4 0240 00E0                  		andi.w	#$00E0,d0				; keep in multiples of 20 and in range of 100 (100 / 20 = 8 tiles)
00020CA8 D8C0                       		adda.w	d0,a4					; add to frame address (To get the address of the correct tile frame)
00020CAA 2CBC 4020 0000             		move.l	#$40200000,(a6)				; set VDP mode and address (to the first tile we made)
00020CB0 2A9C                       		move.l	(a4)+,(a5)				; Dump tile to V-Ram space
00020CB2 2A9C                       		move.l	(a4)+,(a5)				; ''
00020CB4 2A9C                       		move.l	(a4)+,(a5)				; ''
00020CB6 2A9C                       		move.l	(a4)+,(a5)				; ''
00020CB8 2A9C                       		move.l	(a4)+,(a5)				; ''
00020CBA 2A9C                       		move.l	(a4)+,(a5)				; ''
00020CBC 2A9C                       		move.l	(a4)+,(a5)				; ''
00020CBE 2A9C                       		move.l	(a4)+,(a5)				; ''
00020CC0 4E75                       		rts						; return
00020CC2                            
00020CC2                            ; ---------------------------------------------------------------------------
00020CC2                            AniArt_SBZ:
00020CC2 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port address to a5
00020CC8 4DED 0004                  		lea	$04(a5),a6				; load VDP address port address to a6
00020CCC 49FA 0000                  		lea	AniPillars(pc),a4			; load animated tile frames address
00020CD0 3038 F708                  		move.w	($FFFFF708).w,d0			; load screen's X position
00020CD4 D040                       		add.w	d0,d0					; multiply by 2
00020CD6 D040                       		add.w	d0,d0					; multiply by 2
00020CD8 D040                       		add.w	d0,d0					; multiply by 2
00020CDA D040                       		add.w	d0,d0					; multiply by 2
00020CDC 4440                       		neg.w	d0					; negate to negative (for opposite direction)
00020CDE 0240 00F0                  		andi.w	#$00F0,d0				; keep in multiples of 20 and in range of 100 (100 / 20 = 8 tiles)
00020CE2 D040                       		add.w	d0,d0					; multiply by 2
00020CE4 D8C0                       		adda.w	d0,a4					; add to frame address (To get the address of the correct tile frame)
00020CF0                            ;		move.l	#$40200000,(a6)				; set VDP mode and address (to the first tile we made)
00020CF0 2A9C                       		move.l	(a4)+,(a5)				; Dump tile to V-Ram space
00020CF2 2A9C                       		move.l	(a4)+,(a5)				; ''
00020CF4 2A9C                       		move.l	(a4)+,(a5)				; ''
00020CF6 2A9C                       		move.l	(a4)+,(a5)				; ''
00020CF8 2A9C                       		move.l	(a4)+,(a5)				; ''
00020CFA 2A9C                       		move.l	(a4)+,(a5)				; ''
00020CFC 2A9C                       		move.l	(a4)+,(a5)				; ''
00020CFE 2A9C                       		move.l	(a4)+,(a5)				; ''
00020D00 2A9C                       		move.l	(a4)+,(a5)				; Dump tile to V-Ram space
00020D02 2A9C                       		move.l	(a4)+,(a5)				; ''
00020D04 2A9C                       		move.l	(a4)+,(a5)				; ''
00020D06 2A9C                       		move.l	(a4)+,(a5)				; ''
00020D08 2A9C                       		move.l	(a4)+,(a5)				; ''
00020D0A 2A9C                       		move.l	(a4)+,(a5)				; ''
00020D0C 2A9C                       		move.l	(a4)+,(a5)				; ''
00020D0E 2A9C                       		move.l	(a4)+,(a5)				; ''
00020D10 4E75                       		rts						; return
00020D12                            
00020D12                            AniStars:	incbin	"artunc\menustar.bin"
00020E12                            		even
00020E12                            AniPillars:	incbin	"artunc\pillars.bin"
00020F12                            		incbin	"artunc\pillars_2.bin"
00021012                            		even
00021012                            UncFlows1:	incbin	"artunc\ahzflower.bin"
00021092                            		even
00021092                            UncFlows2:	incbin	"artunc\ahzflower2.bin"
00021112                            		even
00021112                            UncFlows3:	incbin	"artunc\ahzflower3.bin"
00021192                            		even
00021192                            AHZ_Flower_2_1:
00021192                            		incbin	"artunc\ahzflower_2.bin"
00021392                            		even
00021392                            AHZ_Flower_2_2:
00021392                            		incbin	"artunc\ahzflower_21.bin"
00021592                            		even
00021592                            
00021592                            AniGHZPar:
00021592                            		incbin	"artunc\GHZ_ParallaxBoss.bin"
00021692                            		even
00021692                            
00021692                            AniGHZPar2:
00021692                            		incbin	"artunc\GHZ_ParallaxBoss_2.bin"
00021792                            		even
00021792                            
00021792                            AniGHZPar3:
00021792                            		incbin	"artunc\GHZ_ParallaxBoss_3.bin"
00021892                            		even
00021892                            ; ---------------------------------------------------------------------------
00021892                            ; Animated pattern routine - Marble
00021892                            ; ---------------------------------------------------------------------------
00021892                            
00021892                            AniArt_MZ:				; XREF: AniArt_Index
00021892 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
00021896 6A00                       		bpl.s	loc_1C150
00021898 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0002189E 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
000218A4 7000                       		moveq	#0,d0
000218A6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
000218AA 5200                       		addq.b	#1,d0
000218AC 0C00 0003                  		cmpi.b	#3,d0
000218B0 6600                       		bne.s	loc_1C134
000218B2 7000                       		moveq	#0,d0
000218B4                            
000218B4                            loc_1C134:
000218B4 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
000218B8 C0FC 0100                  		mulu.w	#$100,d0
000218BC D2C0                       		adda.w	d0,a1
000218BE 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
000218C8 323C 0007                  		move.w	#7,d1
000218CC 6100 0000                  		bsr.w	LoadTiles
000218D0                            
000218D0                            loc_1C150:
000218D0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
000218D4 6A00                       		bpl.s	loc_1C1AE
000218D6 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
000218DC 7000                       		moveq	#0,d0
000218DE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
000218E2 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
000218E8 EE58                       		ror.w	#7,d0
000218EA D8C0                       		adda.w	d0,a4
000218EC 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
000218F6 7600                       		moveq	#0,d3
000218F8 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
000218FC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00021900 1638 FE68                  		move.b	($FFFFFE68).w,d3
00021904 343C 0003                  		move.w	#3,d2
00021908                            
00021908                            loc_1C188:
00021908 3003                       		move.w	d3,d0
0002190A D040                       		add.w	d0,d0
0002190C 0240 001E                  		andi.w	#$1E,d0
00021910 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
00021916 3033 0000                  		move.w	(a3,d0.w),d0
0002191A 47F3 0000                  		lea	(a3,d0.w),a3
0002191E 224C                       		movea.l	a4,a1
00021920 323C 001F                  		move.w	#$1F,d1
00021924 4E93                       		jsr	(a3)
00021926 5843                       		addq.w	#4,d3
00021928 51CA FFDE                  		dbf	d2,loc_1C188
0002192C 4E75                       		rts	
0002192E                            ; ===========================================================================
0002192E                            
0002192E                            loc_1C1AE:
0002192E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
00021932 6A00 0000                  		bpl.w	locret_1C1EA
00021936 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0002193C 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
00021942 7000                       		moveq	#0,d0
00021944 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
00021948 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0002194C 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
00021952 C0FC 00C0                  		mulu.w	#$C0,d0
00021956 D2C0                       		adda.w	d0,a1
00021958 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
00021962 323C 0005                  		move.w	#5,d1
00021966 6000 0000                  		bra.w	LoadTiles
0002196A                            ; ===========================================================================
0002196A                            
0002196A                            locret_1C1EA:
0002196A 4E75                       		rts	
0002196C                            	
0002196C                            ; ===========================================================================
0002196C                            ; ---------------------------------------------------------------------------
0002196C                            ; Animated pattern routine - ending sequence
0002196C                            ; ---------------------------------------------------------------------------
0002196C                            
0002196C                            AniArt_Ending:				; XREF: AniArt_Index
0002196C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00021970 6A00                       		bpl.s	loc_1C2F4
00021972 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
00021978 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0002197E 45F8 9400                  		lea	($FFFF9400).w,a2
00021982 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
00021986 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0002198A 0240 0001                  		andi.w	#1,d0
0002198E 6700                       		beq.s	loc_1C2CE
00021990 43E9 0200                  		lea	$200(a1),a1
00021994 45EA 0200                  		lea	$200(a2),a2
00021998                            
00021998                            loc_1C2CE:
00021998 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
000219A2 323C 000F                  		move.w	#$F,d1
000219A6 6100 0000                  		bsr.w	LoadTiles
000219AA 224A                       		movea.l	a2,a1
000219AC 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
000219B6 323C 000F                  		move.w	#$F,d1
000219BA 6000 0000                  		bra.w	LoadTiles
000219BE                            ; ===========================================================================
000219BE                            
000219BE                            loc_1C2F4:
000219BE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
000219C2 6A00                       		bpl.s	loc_1C33C
000219C4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
000219CA 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
000219CE 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
000219D2 0240 0007                  		andi.w	#7,d0
000219D6 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
000219DA EF48                       		lsl.w	#7,d0
000219DC 3200                       		move.w	d0,d1
000219DE D040                       		add.w	d0,d0
000219E0 D041                       		add.w	d1,d0
000219E2 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
000219EC 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
000219F2 43F1 0000                  		lea	(a1,d0.w),a1
000219F6 323C 000B                  		move.w	#$B,d1
000219FA 6000 0000                  		bra.w	LoadTiles
000219FE                            ; ===========================================================================
000219FE 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
00021A06                            ; ===========================================================================
00021A06                            
00021A06                            loc_1C33C:
00021A06 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
00021A0A 6A00                       		bpl.s	loc_1C37A
00021A0C 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
00021A12 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
00021A16 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
00021A1A 0240 0003                  		andi.w	#3,d0
00021A1E 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
00021A22 E148                       		lsl.w	#8,d0
00021A24 D040                       		add.w	d0,d0
00021A26 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
00021A30 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
00021A34 43F1 0000                  		lea	(a1,d0.w),a1
00021A38 323C 000F                  		move.w	#$F,d1
00021A3C 6000 0000                  		bra.w	LoadTiles
00021A40                            ; ===========================================================================
00021A40 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
00021A44                            ; ===========================================================================
00021A44                            
00021A44                            loc_1C37A:
00021A44 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
00021A48 6A00                       		bpl.s	locret_1C3B4
00021A4A 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
00021A50 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
00021A54 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
00021A58 0240 0003                  		andi.w	#3,d0
00021A5C 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
00021A60 E148                       		lsl.w	#8,d0
00021A62 D040                       		add.w	d0,d0
00021A64 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
00021A6E 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
00021A72 43F1 0000                  		lea	(a1,d0.w),a1
00021A76 323C 000F                  		move.w	#$F,d1
00021A7A 6000 0000                  		bra.w	LoadTiles
00021A7E                            ; ===========================================================================
00021A7E                            
00021A7E                            locret_1C3B4:
00021A7E 4E75                       		rts	
00021A80                            ; ===========================================================================
00021A80                            
00021A80                            AniArt_none:				; XREF: AniArt_Index
00021A80 4E75                       		rts	
00021A82                            
00021A82                            ; ---------------------------------------------------------------------------
00021A82                            ; Subroutine to	load (d1 - 1) 8x8 tiles
00021A82                            ; ---------------------------------------------------------------------------
00021A82                            
00021A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021A82                            
00021A82                            
00021A82                            LoadTiles:
00021A82 2C99                       		move.l	(a1)+,(a6)
00021A84 2C99                       		move.l	(a1)+,(a6)
00021A86 2C99                       		move.l	(a1)+,(a6)
00021A88 2C99                       		move.l	(a1)+,(a6)
00021A8A 2C99                       		move.l	(a1)+,(a6)
00021A8C 2C99                       		move.l	(a1)+,(a6)
00021A8E 2C99                       		move.l	(a1)+,(a6)
00021A90 2C99                       		move.l	(a1)+,(a6)
00021A92 51C9 FFEE                  		dbf	d1,LoadTiles
00021A96 4E75                       		rts	
00021A98                            ; End of function LoadTiles
00021A98                            
00021A98                            ; ===========================================================================
00021A98                            ; ---------------------------------------------------------------------------
00021A98                            ; Animated pattern routine - more Marble Zone
00021A98                            ; ---------------------------------------------------------------------------
00021A98 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
00021A9C 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
00021AA0 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
00021AA4 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
00021AA8 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
00021AAC 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
00021AB0 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
00021AB4 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
00021AB8                            ; ===========================================================================
00021AB8                            
00021AB8                            loc_1C3EE:				; XREF: AniArt_MZextra
00021AB8 2C91                       		move.l	(a1),(a6)
00021ABA 43E9 0010                  		lea	$10(a1),a1
00021ABE 51C9 FFF8                  		dbf	d1,loc_1C3EE
00021AC2 4E75                       		rts	
00021AC4                            ; ===========================================================================
00021AC4                            
00021AC4                            loc_1C3FA:				; XREF: AniArt_MZextra
00021AC4 2029 0002                  		move.l	2(a1),d0
00021AC8 1029 0001                  		move.b	1(a1),d0
00021ACC E098                       		ror.l	#8,d0
00021ACE 2C80                       		move.l	d0,(a6)
00021AD0 43E9 0010                  		lea	$10(a1),a1
00021AD4 51C9 FFEE                  		dbf	d1,loc_1C3FA
00021AD8 4E75                       		rts	
00021ADA                            ; ===========================================================================
00021ADA                            
00021ADA                            loc_1C410:				; XREF: AniArt_MZextra
00021ADA 2CA9 0002                  		move.l	2(a1),(a6)
00021ADE 43E9 0010                  		lea	$10(a1),a1
00021AE2 51C9 FFF6                  		dbf	d1,loc_1C410
00021AE6 4E75                       		rts	
00021AE8                            ; ===========================================================================
00021AE8                            
00021AE8                            loc_1C41E:				; XREF: AniArt_MZextra
00021AE8 2029 0004                  		move.l	4(a1),d0
00021AEC 1029 0003                  		move.b	3(a1),d0
00021AF0 E098                       		ror.l	#8,d0
00021AF2 2C80                       		move.l	d0,(a6)
00021AF4 43E9 0010                  		lea	$10(a1),a1
00021AF8 51C9 FFEE                  		dbf	d1,loc_1C41E
00021AFC 4E75                       		rts	
00021AFE                            ; ===========================================================================
00021AFE                            
00021AFE                            loc_1C434:				; XREF: AniArt_MZextra
00021AFE 2CA9 0004                  		move.l	4(a1),(a6)
00021B02 43E9 0010                  		lea	$10(a1),a1
00021B06 51C9 FFF6                  		dbf	d1,loc_1C434
00021B0A 4E75                       		rts	
00021B0C                            ; ===========================================================================
00021B0C                            
00021B0C                            loc_1C442:				; XREF: AniArt_MZextra
00021B0C 2029 0006                  		move.l	6(a1),d0
00021B10 1029 0005                  		move.b	5(a1),d0
00021B14 E098                       		ror.l	#8,d0
00021B16 2C80                       		move.l	d0,(a6)
00021B18 43E9 0010                  		lea	$10(a1),a1
00021B1C 51C9 FFEE                  		dbf	d1,loc_1C442
00021B20 4E75                       		rts	
00021B22                            ; ===========================================================================
00021B22                            
00021B22                            loc_1C458:				; XREF: AniArt_MZextra
00021B22 2CA9 0006                  		move.l	6(a1),(a6)
00021B26 43E9 0010                  		lea	$10(a1),a1
00021B2A 51C9 FFF6                  		dbf	d1,loc_1C458
00021B2E 4E75                       		rts	
00021B30                            ; ===========================================================================
00021B30                            
00021B30                            loc_1C466:				; XREF: AniArt_MZextra
00021B30 2029 0008                  		move.l	8(a1),d0
00021B34 1029 0007                  		move.b	7(a1),d0
00021B38 E098                       		ror.l	#8,d0
00021B3A 2C80                       		move.l	d0,(a6)
00021B3C 43E9 0010                  		lea	$10(a1),a1
00021B40 51C9 FFEE                  		dbf	d1,loc_1C466
00021B44 4E75                       		rts	
00021B46                            ; ===========================================================================
00021B46                            
00021B46                            loc_1C47C:				; XREF: AniArt_MZextra
00021B46 2CA9 0008                  		move.l	8(a1),(a6)
00021B4A 43E9 0010                  		lea	$10(a1),a1
00021B4E 51C9 FFF6                  		dbf	d1,loc_1C47C
00021B52 4E75                       		rts	
00021B54                            ; ===========================================================================
00021B54                            
00021B54                            loc_1C48A:				; XREF: AniArt_MZextra
00021B54 2029 000A                  		move.l	$A(a1),d0
00021B58 1029 0009                  		move.b	9(a1),d0
00021B5C E098                       		ror.l	#8,d0
00021B5E 2C80                       		move.l	d0,(a6)
00021B60 43E9 0010                  		lea	$10(a1),a1
00021B64 51C9 FFEE                  		dbf	d1,loc_1C48A
00021B68 4E75                       		rts	
00021B6A                            ; ===========================================================================
00021B6A                            
00021B6A                            loc_1C4A0:				; XREF: AniArt_MZextra
00021B6A 2CA9 000A                  		move.l	$A(a1),(a6)
00021B6E 43E9 0010                  		lea	$10(a1),a1
00021B72 51C9 FFF6                  		dbf	d1,loc_1C4A0
00021B76 4E75                       		rts	
00021B78                            ; ===========================================================================
00021B78                            
00021B78                            loc_1C4AE:				; XREF: AniArt_MZextra
00021B78 2029 000C                  		move.l	$C(a1),d0
00021B7C 1029 000B                  		move.b	$B(a1),d0
00021B80 E098                       		ror.l	#8,d0
00021B82 2C80                       		move.l	d0,(a6)
00021B84 43E9 0010                  		lea	$10(a1),a1
00021B88 51C9 FFEE                  		dbf	d1,loc_1C4AE
00021B8C 4E75                       		rts	
00021B8E                            ; ===========================================================================
00021B8E                            
00021B8E                            loc_1C4C4:				; XREF: AniArt_MZextra
00021B8E 2CA9 000C                  		move.l	$C(a1),(a6)
00021B92 43E9 0010                  		lea	$10(a1),a1
00021B96 51C9 FFF6                  		dbf	d1,loc_1C4C4
00021B9A 4E75                       		rts	
00021B9C                            ; ===========================================================================
00021B9C                            
00021B9C                            loc_1C4D2:				; XREF: AniArt_MZextra
00021B9C 2029 000C                  		move.l	$C(a1),d0
00021BA0 E198                       		rol.l	#8,d0
00021BA2 1011                       		move.b	0(a1),d0
00021BA4 2C80                       		move.l	d0,(a6)
00021BA6 43E9 0010                  		lea	$10(a1),a1
00021BAA 51C9 FFF0                  		dbf	d1,loc_1C4D2
00021BAE 4E75                       		rts	
00021BB0                            ; ===========================================================================
00021BB0                            
00021BB0                            loc_1C4E8:				; XREF: AniArt_MZextra
00021BB0 3CA9 000E                  		move.w	$E(a1),(a6)
00021BB4 3C91                       		move.w	0(a1),(a6)
00021BB6 43E9 0010                  		lea	$10(a1),a1
00021BBA 51C9 FFF4                  		dbf	d1,loc_1C4E8
00021BBE 4E75                       		rts	
00021BC0                            ; ===========================================================================
00021BC0                            
00021BC0                            loc_1C4FA:				; XREF: AniArt_MZextra
00021BC0 2011                       		move.l	0(a1),d0
00021BC2 1029 000F                  		move.b	$F(a1),d0
00021BC6 E098                       		ror.l	#8,d0
00021BC8 2C80                       		move.l	d0,(a6)
00021BCA 43E9 0010                  		lea	$10(a1),a1
00021BCE 51C9 FFF0                  		dbf	d1,loc_1C4FA
00021BD2 4E75                       		rts	
00021BD4                            
00021BD4                            ; ---------------------------------------------------------------------------
00021BD4                            ; Animated pattern routine - giant ring
00021BD4                            ; ---------------------------------------------------------------------------
00021BD4                            
00021BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021BD4                            
00021BD4                            
00021BD4                            AniArt_GiantRing:			; XREF: AniArt_Load
00021BD4 4A78 F7BE                  		tst.w	($FFFFF7BE).w
00021BD8 6600                       		bne.s	loc_1C518
00021BDA 4E75                       		rts	
00021BDC                            ; ===========================================================================
00021BDC                            
00021BDC                            loc_1C518:
00021BDC 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
00021BE2 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
00021BE8 7000                       		moveq	#0,d0
00021BEA 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
00021BEE 43F1 0000                  		lea	(a1,d0.w),a1
00021BF2 0640 92C0                  		addi.w	#$92C0,d0		;8000
00021BF6 E588                       		lsl.l	#2,d0
00021BF8 E448                       		lsr.w	#2,d0
00021BFA 0040 4000                  		ori.w	#$4000,d0
00021BFE 4840                       		swap	d0
00021C00 2D40 0004                  		move.l	d0,4(a6)
00021C04 323C 000D                  		move.w	#$D,d1
00021C08 6000 FE78                  		bra.w	LoadTiles
00021C0C                            ; End of function AniArt_GiantRing
00021C0C                            
00021C0C                            ; ===========================================================================
00021C0C                            ; ---------------------------------------------------------------------------
00021C0C                            ; Object 21 - SCORE, TIME, RINGS
00021C0C                            ; ---------------------------------------------------------------------------
00021C0C                            
00021C0C                            Obj21:					; XREF: Obj_Index
00021C0C 0C38 0009 FE10             		cmpi.b	#9,($FFFFFE10).w
00021C12 6600 0000                  		bne	Obj21_Okay
00021C16 4E75                       		rts
00021C18                            
00021C18                            Obj21_Okay:
00021C18 7000                       		moveq	#0,d0
00021C1A 1028 0024                  		move.b	$24(a0),d0
00021C1E 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
00021C22 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
00021C26                            ; ===========================================================================
00021C26 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
00021C28 0000                       		dc.w Obj21_Start-Obj21_Index
00021C2A                            ; ===========================================================================
00021C2A                            
00021C2A                            Obj21_Main:				; XREF: Obj21_Main
00021C2A 5428 0024                  		addq.b	#2,$24(a0)
00021C2E 317C 0000 0008             		move.w	#$0,8(a0)
00021C34 317C 0108 000A             		move.w	#$108,$A(a0)
00021C3A 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0) ; ...
00021C42 317C 06CA 0002             		move.w	#$6CA,2(a0)
00021C48 117C 0000 0001             		move.b	#0,1(a0)
00021C4E 117C 0000 0018             		move.b	#0,$18(a0)
00021C54                            
00021C54                            Obj21_Start:				; XREF: Obj21_Main
00021C54 0C78 0000 FE10             		cmpi.w	#0000,($FFFFFE10).w
00021C5A 6600                       		bne.s	Obj21_ForcePos
00021C5C 0C68 0090 0008             		cmpi.w	#$90,8(a0)
00021C62 6700                       		beq.b	Obj21_Flash
00021C64 0C78 0000 FE10             		cmpi.w	#0000,($FFFFFE10).w
00021C6A 6600                       		bne.s	Obj21_NoPauseMov
00021C6C 0C38 0001 FF98             		cmpi.b	#1,($FFFFFF98).w
00021C72 6700                       		beq.s	Obj21_NoPauseMov
00021C74 4EF9 0000 0000             		jmp	Obj21_Display
00021C7A                            
00021C7A                            Obj21_NoPauseMov:
00021C7A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w 	;lock	controls
00021C80 5868 0008                  		addq.w	#4,8(a0)
00021C84 6000                       		bra.s	Obj21_Display
00021C86                            
00021C86                            Obj21_ForcePos:
00021C86 317C 0090 0008             		move.w	#$90,8(a0)
00021C8C                            Obj21_Flash:
00021C8C 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
00021C90 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
00021C94 6700                       		beq.s	Obj21_Flash2	; if not, branch
00021C96 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
00021C9A 4EF9 0001 0502             		jmp	DisplaySprite
00021CA0                            ; ===========================================================================
00021CA0                            
00021CA0                            Obj21_Flash2:
00021CA0 7000                       		moveq	#0,d0
00021CA2 0838 0003 FE05             		btst	#3,($FFFFFE05).w
00021CA8 6600                       		bne.s	Obj21_Display
00021CAA 5240                       		addq.w	#1,d0		; make ring counter flash red
00021CAC 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
00021CB2 6600                       		bne.s	Obj21_Display	; if not, branch
00021CB4 5440                       		addq.w	#2,d0		; make time counter flash red
00021CB6                            
00021CB6                            Obj21_Display:
00021CB6 1140 001A                  		move.b	d0,$1A(a0)
00021CBA 4EF9 0001 0502             		jmp	DisplaySprite
00021CC0                            ; ===========================================================================
00021CC0                            ; ---------------------------------------------------------------------------
00021CC0                            ; Sprite mappings - SCORE, TIME, RINGS
00021CC0                            ; ---------------------------------------------------------------------------
00021CC0                            Map_obj21:
00021CC0                            	include "_maps\obj21.asm"
00021CC0                            ; --------------------------------------------------------------------------------
00021CC0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00021CC0                            ; --------------------------------------------------------------------------------
00021CC0                            
00021CC0                            SME_x1WxL:	
00021CC0 0000 0000                  		dc.w SME_x1WxL_8-SME_x1WxL, SME_x1WxL_40-SME_x1WxL	
00021CC4 0000 0000                  		dc.w SME_x1WxL_6E-SME_x1WxL, SME_x1WxL_A6-SME_x1WxL	
00021CC8 0B                         SME_x1WxL_8:	dc.b $B	
00021CC9 800D 8000 F8               		dc.b $80, $D, $80, 0, $F8	
00021CCE 800D 8018 20               		dc.b $80, $D, $80, $18, $20	
00021CD3 800D 8020 40               		dc.b $80, $D, $80, $20, $40	
00021CD8 300D 8010 F8               		dc.b $30, $D, $80, $10, $F8	
00021CDD 300D 8028 20               		dc.b $30, $D, $80, $28, $20	
00021CE2 900D 8008 F8               		dc.b $90, $D, $80, 8, $F8	
00021CE7 9001 8000 18               		dc.b $90, 1, $80, 0, $18	
00021CEC 9009 8030 2A               		dc.b $90, 9, $80, $30, $2A	
00021CF1 4005 810A 00               		dc.b $40, 5, $81, $A, 0	
00021CF6 400D 810E 10               		dc.b $40, $D, $81, $E, $10	
00021CFB 8001 0016 18               		dc.b $80, 1, 0, $16, $18	
00021D00 09                         SME_x1WxL_40:	dc.b 9	
00021D01 800D 8000 F8               		dc.b $80, $D, $80, 0, $F8	
00021D06 800D 8018 20               		dc.b $80, $D, $80, $18, $20	
00021D0B 800D 8020 40               		dc.b $80, $D, $80, $20, $40	
00021D10 300D 8010 F8               		dc.b $30, $D, $80, $10, $F8	
00021D15 300D 8028 20               		dc.b $30, $D, $80, $28, $20	
00021D1A 8F09 8030 2A               		dc.b $8F, 9, $80, $30, $2A	
00021D1F 4005 810A 00               		dc.b $40, 5, $81, $A, 0	
00021D24 400D 810E 10               		dc.b $40, $D, $81, $E, $10	
00021D29 8001 0016 18               		dc.b $80, 1, 0, $16, $18	
00021D2E 0B                         SME_x1WxL_6E:	dc.b $B	
00021D2F 800D 8000 F8               		dc.b $80, $D, $80, 0, $F8	
00021D34 800D 8018 20               		dc.b $80, $D, $80, $18, $20	
00021D39 800D 8020 40               		dc.b $80, $D, $80, $20, $40	
00021D3E 300D 8010 F8               		dc.b $30, $D, $80, $10, $F8	
00021D43 300D 8028 20               		dc.b $30, $D, $80, $28, $20	
00021D48 900D 8008 F8               		dc.b $90, $D, $80, 8, $F8	
00021D4D 9001 8000 18               		dc.b $90, 1, $80, 0, $18	
00021D52 9009 8030 2A               		dc.b $90, 9, $80, $30, $2A	
00021D57 4005 810A 00               		dc.b $40, 5, $81, $A, 0	
00021D5C 400D 810E 10               		dc.b $40, $D, $81, $E, $10	
00021D61 8001 0016 18               		dc.b $80, 1, 0, $16, $18	
00021D66 09                         SME_x1WxL_A6:	dc.b 9	
00021D67 800D 8000 F8               		dc.b $80, $D, $80, 0, $F8	
00021D6C 800D 8018 20               		dc.b $80, $D, $80, $18, $20	
00021D71 800D 8020 40               		dc.b $80, $D, $80, $20, $40	
00021D76 300D 8010 F8               		dc.b $30, $D, $80, $10, $F8	
00021D7B 300D 8028 20               		dc.b $30, $D, $80, $28, $20	
00021D80 8F09 8030 2A               		dc.b $8F, 9, $80, $30, $2A	
00021D85 4005 810A 00               		dc.b $40, 5, $81, $A, 0	
00021D8A 400D 810E 10               		dc.b $40, $D, $81, $E, $10	
00021D8F 8001 0016 18               		dc.b $80, 1, 0, $16, $18	
00021D94                            		even
00021D94                            		even
00021D94                            
00021D94                            ; ---------------------------------------------------------------------------
00021D94                            ; Add points subroutine
00021D94                            ; ---------------------------------------------------------------------------
00021D94                            
00021D94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021D94                            
00021D94                            
00021D94                            AddPoints:
00021D94 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
00021D9A 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
00021D9E 47F8 FE26                  		lea	($FFFFFE26).w,a3
00021DA2 D193                       		add.l	d0,(a3)		; add d0*10 to the score
00021DA4 223C 000F 423F             		move.l	#999999,d1
00021DAA B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
00021DAC 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
00021DB0 2681                       		move.l	d1,(a3)		; reset	score to #999999
00021DB2 2481                       		move.l	d1,(a2)
00021DB4                            
00021DB4                            loc_1C6AC:
00021DB4 2013                       		move.l	(a3),d0
00021DB6 B092                       		cmp.l	(a2),d0
00021DB8 6500 0000                  		bcs.w	locret_1C6B6
00021DBC 2480                       		move.l	d0,(a2)
00021DBE                            
00021DBE                            locret_1C6B6:
00021DBE 4E75                       		rts	
00021DC0                            ; End of function AddPoints
00021DC0                            
00021DC0                            ; ---------------------------------------------------------------------------
00021DC0                            ; Subroutine to	update the HUD
00021DC0                            ; ---------------------------------------------------------------------------
00021DC0                            
00021DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021DC0                            
00021DC0                            
00021DC0                            HudUpdate:
00021DC0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
00021DC4 6600 0000                  		bne.w	HudDebug	; if yes, branch
00021DC8 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
00021DCC 6700                       		beq.s	Hud_ChkRings	; if not, branch
00021DCE 4238 FE1F                  		clr.b	($FFFFFE1F).w
00021DD2 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
00021DD8 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
00021DDC 6100 0000                  		bsr.w	Hud_Score
00021DE0                            
00021DE0                            Hud_ChkRings:
00021DE0 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
00021DE4 6700                       		beq.s	Hud_ChkTime	; if not, branch
00021DE6 6A00                       		bpl.s	loc_1C6E4
00021DE8 6100 0000                  		bsr.w	Hud_LoadZero
00021DEC                            
00021DEC                            loc_1C6E4:
00021DEC 4238 FE1D                  		clr.b	($FFFFFE1D).w
00021DF0 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
00021DF6 7200                       		moveq	#0,d1
00021DF8 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
00021DFC 6100 0000                  		bsr.w	Hud_Rings
00021E00                            
00021E00                            Hud_ChkTime:
00021E00 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
00021E04 6700                       		beq.s	Hud_ChkLives	; if not, branch
00021E06 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00021E0A 6600                       		bne.s	Hud_ChkLives	; if yes, branch
00021E0C 43F8 FE22                  		lea	($FFFFFE22).w,a1
00021E10 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
00021E16 6700                       		beq.s	TimeOver	; if yes, branch
00021E18 5221                       		addq.b	#1,-(a1)
00021E1A 0C11 003C                  		cmpi.b	#60,(a1)
00021E1E 6500                       		bcs.s	Hud_ChkLives
00021E20 12BC 0000                  		move.b	#0,(a1)
00021E24 5221                       		addq.b	#1,-(a1)
00021E26 0C11 003C                  		cmpi.b	#60,(a1)
00021E2A 6500                       		bcs.s	loc_1C734
00021E2C 12BC 0000                  		move.b	#0,(a1)
00021E30 5221                       		addq.b	#1,-(a1)
00021E32 0C11 0009                  		cmpi.b	#9,(a1)
00021E36 6500                       		bcs.s	loc_1C734
00021E38 12BC 0009                  		move.b	#9,(a1)
00021E3C                            
00021E3C                            loc_1C734:
00021E3C 203C 5E40 0003             		move.l	#$5E400003,d0
00021E42 7200                       		moveq	#0,d1
00021E44 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
00021E48 6100 0000                  		bsr.w	Hud_Mins
00021E4C 203C 5EC0 0003             		move.l	#$5EC00003,d0
00021E52 7200                       		moveq	#0,d1
00021E54 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
00021E58 6100 0000                  		bsr.w	Hud_Secs
00021E5C                            
00021E5C                            Hud_ChkLives:
00021E5C 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
00021E60 6700                       		beq.s	Hud_ChkBonus	; if not, branch
00021E62 4238 FE1C                  		clr.b	($FFFFFE1C).w
00021E66 6100 0000                  		bsr.w	Hud_Lives
00021E6A                            
00021E6A                            Hud_ChkBonus:
00021E6A 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
00021E6E 6700                       		beq.s	Hud_End		; if not, branch
00021E70 4238 F7D6                  		clr.b	($FFFFF7D6).w
00021E74 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
00021E7E 7200                       		moveq	#0,d1
00021E80 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
00021E84 6100 0000                  		bsr.w	Hud_TimeRingBonus
00021E88 7200                       		moveq	#0,d1
00021E8A 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
00021E8E 6100 0000                  		bsr.w	Hud_TimeRingBonus
00021E92                            
00021E92                            Hud_End:
00021E92 4E75                       		rts	
00021E94                            ; ===========================================================================
00021E94                            
00021E94                            TimeOver:				; XREF: Hud_ChkTime
00021E94 4238 FE1E                  		clr.b	($FFFFFE1E).w
00021E98 41F8 D000                  		lea	($FFFFD000).w,a0
00021E9C 2448                       		movea.l	a0,a2
00021E9E 6100 C9C4                  		bsr.w	KillSonic
00021EA2 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
00021EA8 4E75                       		rts	
00021EAA                            ; ===========================================================================
00021EAA                            
00021EAA                            HudDebug:				; XREF: HudUpdate
00021EAA 6100 0000                  		bsr.w	HudDb_XY
00021EAE 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
00021EB2 6700                       		beq.s	HudDb_ObjCount	; if not, branch
00021EB4 6A00                       		bpl.s	HudDb_Rings
00021EB6 6100 0000                  		bsr.w	Hud_LoadZero
00021EBA                            
00021EBA                            HudDb_Rings:
00021EBA 4238 FE1D                  		clr.b	($FFFFFE1D).w
00021EBE 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
00021EC4 7200                       		moveq	#0,d1
00021EC6 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
00021ECA 6100 0000                  		bsr.w	Hud_Rings
00021ECE                            
00021ECE                            HudDb_ObjCount:
00021ECE 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
00021ED4 7200                       		moveq	#0,d1
00021ED6 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
00021EDA 6100 0000                  		bsr.w	Hud_Secs
00021EDE 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
00021EE2 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
00021EE4 4238 FE1C                  		clr.b	($FFFFFE1C).w
00021EE8 6100 0000                  		bsr.w	Hud_Lives
00021EEC                            
00021EEC                            HudDb_ChkBonus:
00021EEC 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
00021EF0 6700                       		beq.s	HudDb_End	; if not, branch
00021EF2 4238 F7D6                  		clr.b	($FFFFF7D6).w
00021EF6 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
00021F00 7200                       		moveq	#0,d1
00021F02 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
00021F06 6100 0000                  		bsr.w	Hud_TimeRingBonus
00021F0A 7200                       		moveq	#0,d1
00021F0C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
00021F10 6100 0000                  		bsr.w	Hud_TimeRingBonus
00021F14                            
00021F14                            HudDb_End:
00021F14 4E75                       		rts	
00021F16                            ; End of function HudUpdate
00021F16                            
00021F16                            ; ---------------------------------------------------------------------------
00021F16                            ; Subroutine to	load "0" on the	HUD
00021F16                            ; ---------------------------------------------------------------------------
00021F16                            
00021F16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021F16                            
00021F16                            
00021F16                            Hud_LoadZero:				; XREF: HudUpdate
00021F16 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
00021F20 45FA 0000                  		lea	Hud_TilesZero(pc),a2
00021F24 343C 0002                  		move.w	#2,d2
00021F28 6000                       		bra.s	loc_1C83E
00021F2A                            ; End of function Hud_LoadZero
00021F2A                            
00021F2A                            ; ---------------------------------------------------------------------------
00021F2A                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
00021F2A                            ; ---------------------------------------------------------------------------
00021F2A                            
00021F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021F2A                            
00021F2A                            
00021F2A                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
00021F2A 4DF9 00C0 0000             		lea	($C00000).l,a6
00021F30 6100 0000                  		bsr.w	Hud_Lives
00021F34 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
00021F3E 45FA 0000                  		lea	Hud_TilesBase(pc),a2
00021F42 343C 000E                  		move.w	#$E,d2
00021F46                            
00021F46                            loc_1C83E:				; XREF: Hud_LoadZero
00021F46 43FA 0000                  		lea	Art_Hud(pc),a1
00021F4A                            
00021F4A                            loc_1C842:
00021F4A 323C 000F                  		move.w	#$F,d1
00021F4E 101A                       		move.b	(a2)+,d0
00021F50 6B00                       		bmi.s	loc_1C85E
00021F52 4880                       		ext.w	d0
00021F54 EB48                       		lsl.w	#5,d0
00021F56 47F1 0000                  		lea	(a1,d0.w),a3
00021F5A                            
00021F5A                            loc_1C852:
00021F5A 2C9B                       		move.l	(a3)+,(a6)
00021F5C 51C9 FFFC                  		dbf	d1,loc_1C852
00021F60                            
00021F60                            loc_1C858:
00021F60 51CA FFE8                  		dbf	d2,loc_1C842
00021F64                            
00021F64 4E75                       		rts	
00021F66                            ; ===========================================================================
00021F66                            
00021F66                            loc_1C85E:
00021F66 2CBC 0000 0000             		move.l	#0,(a6)
00021F6C 51C9 FFF8                  		dbf	d1,loc_1C85E
00021F70                            
00021F70 60EE                       		bra.s	loc_1C858
00021F72                            ; End of function Hud_Base
00021F72                            
00021F72                            ; ===========================================================================
00021F72 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
00021F7E FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
00021F82                            ; ---------------------------------------------------------------------------
00021F82                            ; Subroutine to	load debug mode	numbers	patterns
00021F82                            ; ---------------------------------------------------------------------------
00021F82                            
00021F82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021F82                            
00021F82                            
00021F82                            HudDb_XY:				; XREF: HudDebug
00021F82 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
00021F8C 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
00021F90 4841                       		swap	d1
00021F92 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
00021F96 6100                       		bsr.s	HudDb_XY2
00021F98 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
00021F9C 4841                       		swap	d1
00021F9E 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
00021FA2                            ; End of function HudDb_XY
00021FA2                            
00021FA2                            
00021FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021FA2                            
00021FA2                            
00021FA2                            HudDb_XY2:
00021FA2 7C07                       		moveq	#7,d6
00021FA4 43F9 0000 0BF2             		lea	(Art_Text2).l,a1
00021FAA                            
00021FAA                            HudDb_XYLoop:
00021FAA E959                       		rol.w	#4,d1
00021FAC 3401                       		move.w	d1,d2
00021FAE 0242 000F                  		andi.w	#$F,d2
00021FB2 0C42 000A                  		cmpi.w	#$A,d2
00021FB6 6500                       		bcs.s	loc_1C8B2
00021FB8 5E42                       		addq.w	#7,d2
00021FBA                            
00021FBA                            loc_1C8B2:
00021FBA EB4A                       		lsl.w	#5,d2
00021FBC 47F1 2000                  		lea	(a1,d2.w),a3
00021FC0 2C9B                       		move.l	(a3)+,(a6)
00021FC2 2C9B                       		move.l	(a3)+,(a6)
00021FC4 2C9B                       		move.l	(a3)+,(a6)
00021FC6 2C9B                       		move.l	(a3)+,(a6)
00021FC8 2C9B                       		move.l	(a3)+,(a6)
00021FCA 2C9B                       		move.l	(a3)+,(a6)
00021FCC 2C9B                       		move.l	(a3)+,(a6)
00021FCE 2C9B                       		move.l	(a3)+,(a6)
00021FD0 4841                       		swap	d1
00021FD2 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
00021FD6                            
00021FD6 4E75                       		rts	
00021FD8                            ; End of function HudDb_XY2
00021FD8                            
00021FD8                            ; ---------------------------------------------------------------------------
00021FD8                            ; Subroutine to	load rings numbers patterns
00021FD8                            ; ---------------------------------------------------------------------------
00021FD8                            
00021FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021FD8                            
00021FD8                            
00021FD8                            Hud_Rings:				; XREF: HudUpdate
00021FD8 45F9 0000 0000             		lea	(Hud_100).l,a2
00021FDE 7C02                       		moveq	#2,d6
00021FE0 6000                       		bra.s	Hud_LoadArt
00021FE2                            
00021FE2                            ; ---------------------------------------------------------------------------
00021FE2                            ; Subroutine to	load score numbers patterns
00021FE2                            ; ---------------------------------------------------------------------------
00021FE2                            
00021FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021FE2                            
00021FE2                            
00021FE2                            Hud_Score:				; XREF: HudUpdate
00021FE2 45F9 0000 0000             		lea	(Hud_100000).l,a2
00021FE8 7C05                       		moveq	#5,d6
00021FEA                            
00021FEA                            Hud_LoadArt:
00021FEA 7800                       		moveq	#0,d4
00021FEC 43FA 0000                  		lea	Art_Hud(pc),a1
00021FF0                            
00021FF0                            Hud_ScoreLoop:
00021FF0 7400                       		moveq	#0,d2
00021FF2 261A                       		move.l	(a2)+,d3
00021FF4                            
00021FF4                            loc_1C8EC:
00021FF4 9283                       		sub.l	d3,d1
00021FF6 6500                       		bcs.s	loc_1C8F4
00021FF8 5242                       		addq.w	#1,d2
00021FFA 60F8                       		bra.s	loc_1C8EC
00021FFC                            ; ===========================================================================
00021FFC                            
00021FFC                            loc_1C8F4:
00021FFC D283                       		add.l	d3,d1
00021FFE 4A42                       		tst.w	d2
00022000 6700                       		beq.s	loc_1C8FE
00022002 383C 0001                  		move.w	#1,d4
00022006                            
00022006                            loc_1C8FE:
00022006 4A44                       		tst.w	d4
00022008 6700                       		beq.s	loc_1C92C
0002200A ED4A                       		lsl.w	#6,d2
0002200C 2D40 0004                  		move.l	d0,4(a6)
00022010 47F1 2000                  		lea	(a1,d2.w),a3
00022014 2C9B                       		move.l	(a3)+,(a6)
00022016 2C9B                       		move.l	(a3)+,(a6)
00022018 2C9B                       		move.l	(a3)+,(a6)
0002201A 2C9B                       		move.l	(a3)+,(a6)
0002201C 2C9B                       		move.l	(a3)+,(a6)
0002201E 2C9B                       		move.l	(a3)+,(a6)
00022020 2C9B                       		move.l	(a3)+,(a6)
00022022 2C9B                       		move.l	(a3)+,(a6)
00022024 2C9B                       		move.l	(a3)+,(a6)
00022026 2C9B                       		move.l	(a3)+,(a6)
00022028 2C9B                       		move.l	(a3)+,(a6)
0002202A 2C9B                       		move.l	(a3)+,(a6)
0002202C 2C9B                       		move.l	(a3)+,(a6)
0002202E 2C9B                       		move.l	(a3)+,(a6)
00022030 2C9B                       		move.l	(a3)+,(a6)
00022032 2C9B                       		move.l	(a3)+,(a6)
00022034                            
00022034                            loc_1C92C:
00022034 0680 0040 0000             		addi.l	#$400000,d0
0002203A 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0002203E                            
0002203E 4E75                       		rts	
00022040                            ; End of function Hud_Score
00022040                            
00022040                            ; ---------------------------------------------------------------------------
00022040                            ; Subroutine to	load countdown numbers on the continue screen
00022040                            ; ---------------------------------------------------------------------------
00022040                            
00022040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022040                            
00022040                            
00022040                            ContScrCounter:				; XREF: ContinueScreen
00022040 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0002204A 4DF9 00C0 0000             		lea	($C00000).l,a6
00022050 45F9 0000 0000             		lea	(Hud_10).l,a2
00022056 7C01                       		moveq	#1,d6
00022058 7800                       		moveq	#0,d4
0002205A 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0002205E                            
0002205E                            ContScr_Loop:
0002205E 7400                       		moveq	#0,d2
00022060 261A                       		move.l	(a2)+,d3
00022062                            
00022062                            loc_1C95A:
00022062 9283                       		sub.l	d3,d1
00022064 6500                       		bcs.s	loc_1C962
00022066 5242                       		addq.w	#1,d2
00022068 60F8                       		bra.s	loc_1C95A
0002206A                            ; ===========================================================================
0002206A                            
0002206A                            loc_1C962:
0002206A D283                       		add.l	d3,d1
0002206C ED4A                       		lsl.w	#6,d2
0002206E 47F1 2000                  		lea	(a1,d2.w),a3
00022072 2C9B                       		move.l	(a3)+,(a6)
00022074 2C9B                       		move.l	(a3)+,(a6)
00022076 2C9B                       		move.l	(a3)+,(a6)
00022078 2C9B                       		move.l	(a3)+,(a6)
0002207A 2C9B                       		move.l	(a3)+,(a6)
0002207C 2C9B                       		move.l	(a3)+,(a6)
0002207E 2C9B                       		move.l	(a3)+,(a6)
00022080 2C9B                       		move.l	(a3)+,(a6)
00022082 2C9B                       		move.l	(a3)+,(a6)
00022084 2C9B                       		move.l	(a3)+,(a6)
00022086 2C9B                       		move.l	(a3)+,(a6)
00022088 2C9B                       		move.l	(a3)+,(a6)
0002208A 2C9B                       		move.l	(a3)+,(a6)
0002208C 2C9B                       		move.l	(a3)+,(a6)
0002208E 2C9B                       		move.l	(a3)+,(a6)
00022090 2C9B                       		move.l	(a3)+,(a6)
00022092 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
00022096                            
00022096 4E75                       		rts	
00022098                            ; End of function ContScrCounter
00022098                            
00022098                            ; ===========================================================================
00022098                            ; ---------------------------------------------------------------------------
00022098                            ; HUD counter sizes
00022098                            ; ---------------------------------------------------------------------------
00022098 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0002209C 0000 2710                  Hud_10000:	dc.l 10000
000220A0 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
000220A4 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
000220A8 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
000220AC 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
000220B0                            
000220B0                            ; ---------------------------------------------------------------------------
000220B0                            ; Subroutine to	load time numbers patterns
000220B0                            ; ---------------------------------------------------------------------------
000220B0                            
000220B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000220B0                            
000220B0                            
000220B0                            Hud_Mins:				; XREF: Hud_ChkTime
000220B0 45F9 0002 20AC             		lea	(Hud_1).l,a2
000220B6 7C00                       		moveq	#0,d6
000220B8 6000                       		bra.s	loc_1C9BA
000220BA                            ; End of function Hud_Mins
000220BA                            
000220BA                            
000220BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000220BA                            
000220BA                            
000220BA                            Hud_Secs:				; XREF: Hud_ChkTime
000220BA 45F9 0002 20A8             		lea	(Hud_10).l,a2
000220C0 7C01                       		moveq	#1,d6
000220C2                            
000220C2                            loc_1C9BA:
000220C2 7800                       		moveq	#0,d4
000220C4 43FA 0000                  		lea	Art_Hud(pc),a1
000220C8                            
000220C8                            Hud_TimeLoop:
000220C8 7400                       		moveq	#0,d2
000220CA 261A                       		move.l	(a2)+,d3
000220CC                            
000220CC                            loc_1C9C4:
000220CC 9283                       		sub.l	d3,d1
000220CE 6500                       		bcs.s	loc_1C9CC
000220D0 5242                       		addq.w	#1,d2
000220D2 60F8                       		bra.s	loc_1C9C4
000220D4                            ; ===========================================================================
000220D4                            
000220D4                            loc_1C9CC:
000220D4 D283                       		add.l	d3,d1
000220D6 4A42                       		tst.w	d2
000220D8 6700                       		beq.s	loc_1C9D6
000220DA 383C 0001                  		move.w	#1,d4
000220DE                            
000220DE                            loc_1C9D6:
000220DE ED4A                       		lsl.w	#6,d2
000220E0 2D40 0004                  		move.l	d0,4(a6)
000220E4 47F1 2000                  		lea	(a1,d2.w),a3
000220E8 2C9B                       		move.l	(a3)+,(a6)
000220EA 2C9B                       		move.l	(a3)+,(a6)
000220EC 2C9B                       		move.l	(a3)+,(a6)
000220EE 2C9B                       		move.l	(a3)+,(a6)
000220F0 2C9B                       		move.l	(a3)+,(a6)
000220F2 2C9B                       		move.l	(a3)+,(a6)
000220F4 2C9B                       		move.l	(a3)+,(a6)
000220F6 2C9B                       		move.l	(a3)+,(a6)
000220F8 2C9B                       		move.l	(a3)+,(a6)
000220FA 2C9B                       		move.l	(a3)+,(a6)
000220FC 2C9B                       		move.l	(a3)+,(a6)
000220FE 2C9B                       		move.l	(a3)+,(a6)
00022100 2C9B                       		move.l	(a3)+,(a6)
00022102 2C9B                       		move.l	(a3)+,(a6)
00022104 2C9B                       		move.l	(a3)+,(a6)
00022106 2C9B                       		move.l	(a3)+,(a6)
00022108 0680 0040 0000             		addi.l	#$400000,d0
0002210E 51CE FFB8                  		dbf	d6,Hud_TimeLoop
00022112                            
00022112 4E75                       		rts	
00022114                            ; End of function Hud_Secs
00022114                            
00022114                            ; ---------------------------------------------------------------------------
00022114                            ; Subroutine to	load time/ring bonus numbers patterns
00022114                            ; ---------------------------------------------------------------------------
00022114                            
00022114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022114                            
00022114                            
00022114                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
00022114 45F9 0002 20A0             		lea	(Hud_1000).l,a2
0002211A 7C03                       		moveq	#3,d6
0002211C 7800                       		moveq	#0,d4
0002211E 43FA 0000                  		lea	Art_Hud(pc),a1
00022122                            
00022122                            Hud_BonusLoop:
00022122 7400                       		moveq	#0,d2
00022124 261A                       		move.l	(a2)+,d3
00022126                            
00022126                            loc_1CA1E:
00022126 9283                       		sub.l	d3,d1
00022128 6500                       		bcs.s	loc_1CA26
0002212A 5242                       		addq.w	#1,d2
0002212C 60F8                       		bra.s	loc_1CA1E
0002212E                            ; ===========================================================================
0002212E                            
0002212E                            loc_1CA26:
0002212E D283                       		add.l	d3,d1
00022130 4A42                       		tst.w	d2
00022132 6700                       		beq.s	loc_1CA30
00022134 383C 0001                  		move.w	#1,d4
00022138                            
00022138                            loc_1CA30:
00022138 4A44                       		tst.w	d4
0002213A 6700                       		beq.s	Hud_ClrBonus
0002213C ED4A                       		lsl.w	#6,d2
0002213E 47F1 2000                  		lea	(a1,d2.w),a3
00022142 2C9B                       		move.l	(a3)+,(a6)
00022144 2C9B                       		move.l	(a3)+,(a6)
00022146 2C9B                       		move.l	(a3)+,(a6)
00022148 2C9B                       		move.l	(a3)+,(a6)
0002214A 2C9B                       		move.l	(a3)+,(a6)
0002214C 2C9B                       		move.l	(a3)+,(a6)
0002214E 2C9B                       		move.l	(a3)+,(a6)
00022150 2C9B                       		move.l	(a3)+,(a6)
00022152 2C9B                       		move.l	(a3)+,(a6)
00022154 2C9B                       		move.l	(a3)+,(a6)
00022156 2C9B                       		move.l	(a3)+,(a6)
00022158 2C9B                       		move.l	(a3)+,(a6)
0002215A 2C9B                       		move.l	(a3)+,(a6)
0002215C 2C9B                       		move.l	(a3)+,(a6)
0002215E 2C9B                       		move.l	(a3)+,(a6)
00022160 2C9B                       		move.l	(a3)+,(a6)
00022162                            
00022162                            loc_1CA5A:
00022162 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
00022166                            
00022166 4E75                       		rts	
00022168                            ; ===========================================================================
00022168                            
00022168                            Hud_ClrBonus:
00022168 7A0F                       		moveq	#$F,d5
0002216A                            
0002216A                            Hud_ClrBonusLoop:
0002216A 2CBC 0000 0000             		move.l	#0,(a6)
00022170 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
00022174                            
00022174 60EC                       		bra.s	loc_1CA5A
00022176                            ; End of function Hud_TimeRingBonus
00022176                            
00022176                            ; ---------------------------------------------------------------------------
00022176                            ; Subroutine to	load uncompressed lives	counter	patterns
00022176                            ; ---------------------------------------------------------------------------
00022176                            
00022176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022176                            
00022176                            
00022176                            Hud_Lives:				; XREF: Hud_ChkLives
00022176 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0002217C 7200                       		moveq	#0,d1
0002217E 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
00022182 45F9 0002 20A8             		lea	(Hud_10).l,a2
00022188 7C01                       		moveq	#1,d6
0002218A 7800                       		moveq	#0,d4
0002218C 43FA 0000                  		lea	Art_LivesNums(pc),a1
00022190                            
00022190                            Hud_LivesLoop:
00022190 2D40 0004                  		move.l	d0,4(a6)
00022194 7400                       		moveq	#0,d2
00022196 261A                       		move.l	(a2)+,d3
00022198                            
00022198                            loc_1CA90:
00022198 9283                       		sub.l	d3,d1
0002219A 6500                       		bcs.s	loc_1CA98
0002219C 5242                       		addq.w	#1,d2
0002219E 60F8                       		bra.s	loc_1CA90
000221A0                            ; ===========================================================================
000221A0                            
000221A0                            loc_1CA98:
000221A0 D283                       		add.l	d3,d1
000221A2 4A42                       		tst.w	d2
000221A4 6700                       		beq.s	loc_1CAA2
000221A6 383C 0001                  		move.w	#1,d4
000221AA                            
000221AA                            loc_1CAA2:
000221AA 4A44                       		tst.w	d4
000221AC 6700                       		beq.s	Hud_ClrLives
000221AE                            
000221AE                            loc_1CAA6:
000221AE EB4A                       		lsl.w	#5,d2
000221B0 47F1 2000                  		lea	(a1,d2.w),a3
000221B4 2C9B                       		move.l	(a3)+,(a6)
000221B6 2C9B                       		move.l	(a3)+,(a6)
000221B8 2C9B                       		move.l	(a3)+,(a6)
000221BA 2C9B                       		move.l	(a3)+,(a6)
000221BC 2C9B                       		move.l	(a3)+,(a6)
000221BE 2C9B                       		move.l	(a3)+,(a6)
000221C0 2C9B                       		move.l	(a3)+,(a6)
000221C2 2C9B                       		move.l	(a3)+,(a6)
000221C4                            
000221C4                            loc_1CABC:
000221C4 0680 0040 0000             		addi.l	#$400000,d0
000221CA 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
000221CE                            
000221CE 4E75                       		rts	
000221D0                            ; ===========================================================================
000221D0                            
000221D0                            Hud_ClrLives:
000221D0 4A46                       		tst.w	d6
000221D2 67DA                       		beq.s	loc_1CAA6
000221D4 7A07                       		moveq	#7,d5
000221D6                            
000221D6                            Hud_ClrLivesLoop:
000221D6 2CBC 0000 0000             		move.l	#0,(a6)
000221DC 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
000221E0 60E2                       		bra.s	loc_1CABC
000221E2                            ; End of function Hud_Lives
000221E2                            
000221E2                            ; ===========================================================================
000221E2                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
000224E2                            		even
000224E2                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
00022622                            		even
00022622                            ; ===========================================================================
00022622                            ; ---------------------------------------------------------------------------
00022622                            ; When debug mode is currently in use
00022622                            ; ---------------------------------------------------------------------------
00022622                            
00022622                            DebugMode:				; XREF: Obj01; Obj09
00022622 7000                       		moveq	#0,d0
00022624 1038 FE08                  		move.b	($FFFFFE08).w,d0
00022628 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0002262C 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00022630                            ; ===========================================================================
00022630 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
00022632 0000                       		dc.w Debug_Skip-Debug_Index
00022634                            ; ===========================================================================
00022634                            Debug_Main:				; XREF: Debug_Index
00022634 5438 FE08                  		addq.b	#2,($FFFFFE08).w
00022638 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0002263E 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
00022644 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0002264A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00022650 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00022656 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0002265C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00022662 117C 0000 001A             		move.b	#0,$1A(a0)
00022668 117C 0000 001C             		move.b	#0,$1C(a0)
0002266E 0C38 0010 FF94             		cmpi.b	#$10,($FFFFFF94).w ; is	game mode = $10	(special stage)?
00022674 6600                       		bne.s	Debug_Zone	; if not, branch
00022676 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0002267C 7006                       		moveq	#6,d0		; use 6th debug	item list
0002267E 6000                       		bra.s	Debug_UseList
00022680                            ; ===========================================================================
00022680                            
00022680                            Debug_Zone:
00022680                            
00022680 0C38 0001 FFA5             		cmpi.b	#1,($FFFFFFA5).w
00022686 6700                       		beq.s	ClearFly
00022688 4EF9 0000 0000             		jmp	Debug_Cont
0002268E                            
0002268E                            ClearFly:
0002268E 11FC 003C D01A             		move.b	#$3C,($FFFFD01A).w
00022694 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
0002269A 11FC 0001 D022             		move.b	#1,($FFFFD022).w
000226A0                            
000226A0                            Debug_Cont:
000226A0 7000                       		moveq	#0,d0
000226A2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000226A6                            
000226A6                            Debug_UseList:
000226A6 45F9 0000 0000             		lea	(DebugList).l,a2
000226AC D040                       		add.w	d0,d0
000226AE D4F2 0000                  		adda.w	(a2,d0.w),a2
000226B2 3C1A                       		move.w	(a2)+,d6
000226B4 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
000226B8 6200                       		bhi.s	loc_1CF9E
000226BA 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
000226C0                            
000226C0                            loc_1CF9E:
000226C0 6100 0000                  		bsr.w	Debug_ShowItem
000226C4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
000226CA 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
000226D0                            
000226D0                            Debug_Skip:				; XREF: Debug_Index
000226D0 7006                       		moveq	#6,d0
000226D2 0C38 0010 FF94             		cmpi.b	#$10,($FFFFFF94).w
000226D8 6700                       		beq.s	loc_1CFBE
000226DA 7000                       		moveq	#0,d0
000226DC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000226E0                            
000226E0                            loc_1CFBE:
000226E0 45F9 0000 0000             		lea	(DebugList).l,a2
000226E6 D040                       		add.w	d0,d0
000226E8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000226EC 3C1A                       		move.w	(a2)+,d6
000226EE 6100 0000                  		bsr.w	Debug_Control
000226F2 4EF9 0001 0502             		jmp	DisplaySprite
000226F8                            
000226F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000226F8                            
000226F8                            
000226F8                            Debug_Control:
000226F8 7800                       		moveq	#0,d4
000226FA 323C 0001                  		move.w	#1,d1
000226FE 1838 F605                  		move.b	($FFFFF605).w,d4
00022702 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
00022706 6600                       		bne.s	loc_1D018	; if yes, branch
00022708 1038 F604                  		move.b	($FFFFF604).w,d0
0002270C 0240 000F                  		andi.w	#$F,d0
00022710 6600                       		bne.s	loc_1D000
00022712 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
00022718 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0002271E 6000 0000                  		bra.w	Debug_BackItem
00022722                            ; ===========================================================================
00022722                            
00022722                            loc_1D000:
00022722 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
00022726 6600                       		bne.s	loc_1D01C
00022728 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0002272E 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
00022732 6600                       		bne.s	loc_1D018
00022734 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0002273A                            
0002273A                            loc_1D018:
0002273A 1838 F604                  		move.b	($FFFFF604).w,d4
0002273E                            
0002273E                            loc_1D01C:
0002273E 7200                       		moveq	#0,d1
00022740 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
00022744 5241                       		addq.w	#1,d1
00022746 4841                       		swap	d1
00022748 E881                       		asr.l	#4,d1
0002274A 2428 000C                  		move.l	$C(a0),d2
0002274E 2628 0008                  		move.l	8(a0),d3
00022752 0804 0000                  		btst	#0,d4		; is up	being pressed?
00022756 6700                       		beq.s	loc_1D03C	; if not, branch
00022758 9481                       		sub.l	d1,d2
0002275A 6400                       		bcc.s	loc_1D03C
0002275C 7400                       		moveq	#0,d2
0002275E                            
0002275E                            loc_1D03C:
0002275E 0804 0001                  		btst	#1,d4		; is down being	pressed?
00022762 6700                       		beq.s	loc_1D052	; if not, branch
00022764 D481                       		add.l	d1,d2
00022766 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0002276C 6500                       		bcs.s	loc_1D052
0002276E 243C 07FF 0000             		move.l	#$7FF0000,d2
00022774                            
00022774                            loc_1D052:
00022774 0804 0002                  		btst	#2,d4
00022778 6700                       		beq.s	loc_1D05E
0002277A 9681                       		sub.l	d1,d3
0002277C 6400                       		bcc.s	loc_1D05E
0002277E 7600                       		moveq	#0,d3
00022780                            
00022780                            loc_1D05E:
00022780 0804 0003                  		btst	#3,d4
00022784 6700                       		beq.s	loc_1D066
00022786 D681                       		add.l	d1,d3
00022788                            
00022788                            loc_1D066:
00022788 2142 000C                  		move.l	d2,$C(a0)
0002278C 2143 0008                  		move.l	d3,8(a0)
00022790                            
00022790                            Debug_BackItem:
00022790 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00022796 6700                       		beq.s	Debug_MakeItem	; if not, branch
00022798 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0002279E 6700                       		beq.s	Debug_NextItem	; if not, branch
000227A0 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
000227A4 6400                       		bcc.s	Debug_NoLoop
000227A6 DD38 FE06                  		add.b	d6,($FFFFFE06).w
000227AA 6000                       		bra.s	Debug_NoLoop
000227AC                            ; ===========================================================================
000227AC                            
000227AC                            Debug_NextItem:
000227AC 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000227B2 6700                       		beq.s	Debug_MakeItem	; if not, branch
000227B4 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
000227B8 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
000227BC 6200                       		bhi.s	Debug_NoLoop
000227BE 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
000227C4                            
000227C4                            Debug_NoLoop:
000227C4 6000 0000                  		bra.w	Debug_ShowItem
000227C8                            ; ===========================================================================
000227C8                            
000227C8                            Debug_MakeItem:
000227C8 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000227CE 6700                       		beq.s	Debug_Exit	; if not, branch
000227D0 4EB9 0001 0988             		jsr	SingleObjLoad
000227D6 6600                       		bne.s	Debug_Exit
000227D8 3368 0008 0008             		move.w	8(a0),8(a1)
000227DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000227E4 12A8 0004                  		move.b	4(a0),0(a1)	; create object
000227E8 1368 0001 0001             		move.b	1(a0),1(a1)
000227EE 1368 0001 0022             		move.b	1(a0),$22(a1)
000227F4 0229 007F 0022             		andi.b	#$7F,$22(a1)
000227FA 7000                       		moveq	#0,d0
000227FC 1038 FE06                  		move.b	($FFFFFE06).w,d0
00022800 E748                       		lsl.w	#3,d0
00022802 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
00022808 4E75                       		rts	
0002280A                            ; ===========================================================================
0002280A                            
0002280A                            Debug_Exit:
0002280A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
00022810 6700 0000                  		beq.w	Debug_DoNothing	; if not, branch
00022814 7000                       		moveq	#0,d0
00022816 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0002281A 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
00022822 7000                       		moveq	#0,d0
00022824 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00022828 31C0 D014                  		move.w	d0,($FFFFD014).w
0002282C 31C0 D012                  		move.w	d0,($FFFFD012).w
00022830 0C38 0001 FF9C             		cmpi.b	#1,($FFFFFF9C).w
00022836 6700                       		beq.s	Debug_Exit_Windy
00022838 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0002283E 6000                       		bra.s	Cont5
00022840                            
00022840                            Debug_Exit_Windy:
00022840 31FC 2780 D002             		move.w	#$2780,($FFFFD002).w
00022846                            
00022846                            Cont5:
00022846 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0002284A 3140 000A                  		move.w	d0,$A(a0)
0002284E 3140 000E                  		move.w	d0,$E(a0)
00022852 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
00022858 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0002285E 0C38 0010 FF94             		cmpi.b	#$10,($FFFFFF94).w ; are you in	the special stage?
00022864 6600                       		bne.s	Debug_DoNothing	; if not, branch
00022866 4278 F780                  		clr.w	($FFFFF780).w
0002286A 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
00022870 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
00022878 0C38 0001 FF9C             		cmpi.b	#1,($FFFFFF9C).w
0002287E 6700                       		beq.s	Debug_Exit_Windy_2
00022880 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
00022886 6000                       		bra.s	Cont6
00022888                            
00022888                            Debug_Exit_Windy_2:
00022888 31FC 2780 D002             		move.w	#$2780,($FFFFD002).w
0002288E                            
0002288E                            Cont6:
0002288E 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
00022894 08F8 0002 D022             		bset	#2,($FFFFD022).w
0002289A 08F8 0001 D022             		bset	#1,($FFFFD022).w
000228A0                            
000228A0                            Debug_DoNothing:
000228A0 4E75                       		rts	
000228A2                            ; End of function Debug_Control
000228A2                            
000228A2                            
000228A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000228A2                            
000228A2                            
000228A2                            Debug_ShowItem:				; XREF: Debug_Main
000228A2 7000                       		moveq	#0,d0
000228A4 1038 FE06                  		move.b	($FFFFFE06).w,d0
000228A8 E748                       		lsl.w	#3,d0
000228AA 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
000228B0 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
000228B6 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
000228BC 4E75                       		rts	
000228BE                            ; End of function Debug_ShowItem
000228BE                            
000228BE                            ; ===========================================================================
000228BE                            ; ---------------------------------------------------------------------------
000228BE                            ; Debug	list pointers
000228BE                            ; ---------------------------------------------------------------------------
000228BE                            DebugList:
000228BE                            	include "_inc\Debug list pointers.asm"
000228BE                            ; ---------------------------------------------------------------------------
000228BE                            ; Debug	list pointers
000228BE                            ; ---------------------------------------------------------------------------
000228BE 0000                       	dc.w Debug_GHZ-DebugList
000228C0 0000                       	dc.w Debug_LZ-DebugList
000228C2 0000                       	dc.w Debug_MZ-DebugList
000228C4 0000                       	dc.w Debug_SLZ-DebugList
000228C6 0000                       	dc.w Debug_SYZ-DebugList
000228C8 0000                       	dc.w Debug_SBZ-DebugList
000228CA 0000                       	dc.w Debug_Ending-DebugList
000228CC 0000                       	dc.w Debug_ABZ-DebugList
000228CE 0000                       	dc.w Debug_IC-DebugList
000228D0 0000                       	dc.w Debug_IC-DebugList
000228D0 0000                       	dc.w Debug_IC-DebugList
000228D2                            
000228D2                            ; ---------------------------------------------------------------------------
000228D2                            ; Debug	list - Green Hill
000228D2                            ; ---------------------------------------------------------------------------
000228D2                            Debug_GHZ:
000228D2                            	include "_inc\Debug list - GHZ.asm"
000228D2                            ; ---------------------------------------------------------------------------
000228D2                            ; Debug	list - Green Hill
000228D2                            ; ---------------------------------------------------------------------------
000228D2 0010                       	dc.w $10			; number of items in list
000228D4 2500 C842                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
000228D8 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
000228DC 2600 CE50                  	dc.l Map_obj26+$26000000
000228E0 0000 0680                  	dc.b 0,	0, 6, $80
000228E4 1F00 BF42                  	dc.l Map_obj1F+$1F000000
000228E8 0000 0400                  	dc.b 0,	0, 4, 0
000228EC 2200 C222                  	dc.l Map_obj22+$22000000
000228F0 0000 0444                  	dc.b 0,	0, 4, $44
000228F4 2B00 D952                  	dc.l Map_obj2B+$2B000000
000228F8 0000 047B                  	dc.b 0,	0, 4, $7B
000228FC 3600 FEB6                  	dc.l Map_obj36+$36000000
00022900 0000 051B                  	dc.b 0,	0, 5, $1B
00022904 1800 A85E                  	dc.l Map_obj18+$18000000
00022908 0000 4000                  	dc.b 0,	0, $40,	0
0002290C 3B00 FFDC                  	dc.l Map_obj3B+$3B000000
00022910 0000 63D0                  	dc.b 0,	0, $63,	$D0
00022914 4001 266E                  	dc.l Map_obj40+$40000000
00022918 0000 04F0                  	dc.b 0,	0, 4, $F0
0002291C 4101 0C16                  	dc.l Map_obj41+$41000000
00022920 0000 0523                  	dc.b 0,	0, 5, $23
00022924 4201 0E3C                  	dc.l Map_obj42+$42000000
00022928 0000 249B                  	dc.b 0,	0, $24,	$9B
0002292C 4401 114A                  	dc.l Map_obj44+$44000000
00022930 0000 434C                  	dc.b 0,	0, $43,	$4C
00022934 1900 A98E                  	dc.l Map_obj48+$19000000
00022938 0000 43AA                  	dc.b 0,	0, $43,	$AA
0002293C 7901 A8D8                  	dc.l Map_obj79+$79000000
00022940 0100 07A0                  	dc.b 1,	0, 7, $A0
00022944 4B00 C882                  	dc.l Map_obj4B+$4B000000
00022948 0000 2400                  	dc.b 0,	0, $24,	0
0002294C 7D01 AA28                  	dc.l Map_obj7D+$7D000000
00022950 0101 84B6                  	dc.b 1,	1, $84,	$B6
00022954                            	even
00022954                            	even
00022954                            
00022954                            ; ---------------------------------------------------------------------------
00022954                            ; Debug	list - Labyrinth
00022954                            ; ---------------------------------------------------------------------------
00022954                            Debug_LZ:
00022954                            	include "_inc\Debug list - LZ.asm"
00022954                            ; ---------------------------------------------------------------------------
00022954                            ; Debug	list - Labyrinth
00022954                            ; ---------------------------------------------------------------------------
00022954 0019                       	dc.w $19
00022956 2500 C842                  	dc.l Map_obj25+$25000000
0002295A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002295E 2600 CE50                  	dc.l Map_obj26+$26000000
00022962 0000 0680                  	dc.b 0,	0, 6, $80
00022966 4101 0C16                  	dc.l Map_obj41+$41000000
0002296A 0000 0523                  	dc.b 0,	0, 5, $23
0002296E 2C00 D9F8                  	dc.l Map_obj2C+$2C000000
00022972 0800 2486                  	dc.b 8,	0, $24,	$86
00022976 2D00 DBE4                  	dc.l Map_obj2D+$2D000000
0002297A 0002 84A6                  	dc.b 0,	2, $84,	$A6
0002297E 1601 4F98                  	dc.l Map_obj16+$16000000
00022982 0000 03CC                  	dc.b 0,	0, 3, $CC
00022986 1601 4F98                  	dc.l Map_obj16+$16000000
0002298A 0203 03CC                  	dc.b 2,	3, 3, $CC
0002298E 3300 F062                  	dc.l Map_obj33+$33000000
00022992 0000 43DE                  	dc.b 0,	0, $43,	$DE
00022996 3200 EC22                  	dc.l Map_obj32+$32000000
0002299A 0000 0513                  	dc.b 0,	0, 5, $13
0002299E 3600 FEB6                  	dc.l Map_obj36+$36000000
000229A2 0000 051B                  	dc.b 0,	0, 5, $1B
000229A6 5201 30BA                  	dc.l Map_obj52a+$52000000
000229AA 0400 43BC                  	dc.b 4,	0, $43,	$BC
000229AE 6101 51C0                  	dc.l Map_obj61+$61000000
000229B2 0100 43E6                  	dc.b 1,	0, $43,	$E6
000229B6 6101 51C0                  	dc.l Map_obj61+$61000000
000229BA 1301 43E6                  	dc.b $13, 1, $43, $E6
000229BE 6101 51C0                  	dc.l Map_obj61+$61000000
000229C2 0500 43E6                  	dc.b 5,	0, $43,	$E6
000229C6 6201 5314                  	dc.l Map_obj62+$62000000
000229CA 0000 443E                  	dc.b 0,	0, $44,	$3E
000229CE 6101 51C0                  	dc.l Map_obj61+$61000000
000229D2 2702 43E6                  	dc.b $27, 2, $43, $E6
000229D6 6101 51C0                  	dc.l Map_obj61+$61000000
000229DA 3003 43E6                  	dc.b $30, 3, $43, $E6
000229DE 6301 5672                  	dc.l Map_obj63+$63000000
000229E2 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
000229E6 6001 4EE2                  	dc.l Map_obj60+$60000000
000229EA 0000 0467                  	dc.b 0,	0, 4, $67
000229EE 6401 59B8                  	dc.l Map_obj64+$64000000
000229F2 8413 8348                  	dc.b $84, $13, $83, $48
000229F6 6501 5B40                  	dc.l Map_obj65+$65000000
000229FA 0202 C259                  	dc.b 2,	2, $C2,	$59
000229FE 6501 5B40                  	dc.l Map_obj65+$65000000
00022A02 0909 C259                  	dc.b 9,	9, $C2,	$59
00022A06 0B01 4332                  	dc.l Map_obj0B+$B000000
00022A0A 0000 43DE                  	dc.b 0,	0, $43,	$DE
00022A0E 0C01 4402                  	dc.l Map_obj0C+$C000000
00022A12 0200 4328                  	dc.b 2,	0, $43,	$28
00022A16 7901 A8D8                  	dc.l Map_obj79+$79000000
00022A1A 0100 07A0                  	dc.b 1,	0, 7, $A0
00022A1E                            	even
00022A1E                            	even
00022A1E                            
00022A1E                            ; ---------------------------------------------------------------------------
00022A1E                            ; Debug	list - Marble
00022A1E                            ; ---------------------------------------------------------------------------
00022A1E                            Debug_MZ:
00022A1E                            	include "_inc\Debug list - MZ.asm"
00022A1E                            ; ---------------------------------------------------------------------------
00022A1E                            ; Debug	list - Marble
00022A1E                            ; ---------------------------------------------------------------------------
00022A1E 0012                       	dc.w $12
00022A20 2500 C842                  	dc.l Map_obj25+$25000000
00022A24 0000 27B2                  	dc.b 0,	0, $27,	$B2
00022A28 2600 CE50                  	dc.l Map_obj26+$26000000
00022A2C 0000 0680                  	dc.b 0,	0, 6, $80
00022A30 2200 C222                  	dc.l Map_obj22+$22000000
00022A34 0000 0444                  	dc.b 0,	0, 4, $44
00022A38 3600 FEB6                  	dc.l Map_obj36+$36000000
00022A3C 0000 051B                  	dc.b 0,	0, 5, $1B
00022A40 4101 0C16                  	dc.l Map_obj41+$41000000
00022A44 0000 0523                  	dc.b 0,	0, 5, $23
00022A48 1300 E0F2                  	dc.l Map_obj14+$13000000
00022A4C 0000 0345                  	dc.b 0,	0, 3, $45
00022A50 4601 17FC                  	dc.l Map_obj46+$46000000
00022A54 0000 4000                  	dc.b 0,	0, $40,	0
00022A58 4C01 214C                  	dc.l Map_obj4C+$4C000000
00022A5C 0000 63A8                  	dc.b 0,	0, $63,	$A8
00022A60 4E01 2430                  	dc.l Map_obj4E+$4E000000
00022A64 0000 63A8                  	dc.b 0,	0, $63,	$A8
00022A68 3300 F062                  	dc.l Map_obj33+$33000000
00022A6C 0000 42B8                  	dc.b 0,	0, $42,	$B8
00022A70 5001 2946                  	dc.l Map_obj50+$50000000
00022A74 0000 247B                  	dc.b 0,	0, $24,	$7B
00022A78 5101 2DEE                  	dc.l Map_obj51+$51000000
00022A7C 0000 42B8                  	dc.b 0,	0, $42,	$B8
00022A80 5201 3064                  	dc.l Map_obj52+$52000000
00022A84 0000 02B8                  	dc.b 0,	0, 2, $B8
00022A88 5300 AF26                  	dc.l Map_obj53+$53000000
00022A8C 0000 62B8                  	dc.b 0,	0, $62,	$B8
00022A90 5401 2112                  	dc.l Map_obj54+$54000000
00022A94 0000 8680                  	dc.b 0,	0, $86,	$80
00022A98 5501 3258                  	dc.l Map_obj55+$55000000
00022A9C 0000 04B8                  	dc.b 0,	0, 4, $B8
00022AA0 7801 A552                  	dc.l Map_obj78+$78000000
00022AA4 0000 24FF                  	dc.b 0,	0, $24,	$FF
00022AA8 7901 A8D8                  	dc.l Map_obj79+$79000000
00022AAC 0100 07A0                  	dc.b 1,	0, 7, $A0
00022AB0                            	even
00022AB0                            	even
00022AB0                            
00022AB0                            ; ---------------------------------------------------------------------------
00022AB0                            ; Debug	list - Star Light
00022AB0                            ; ---------------------------------------------------------------------------
00022AB0                            Debug_SLZ:
00022AB0                            	include "_inc\Debug list - SLZ.asm"
00022AB0                            ; ---------------------------------------------------------------------------
00022AB0                            ; Debug	list - Star Light
00022AB0                            ; ---------------------------------------------------------------------------
00022AB0 000F                       	dc.w $F
00022AB2 2500 C842                  	dc.l Map_obj25+$25000000
00022AB6 0000 27B2                  	dc.b 0,	0, $27,	$B2
00022ABA 2600 CE50                  	dc.l Map_obj26+$26000000
00022ABE 0000 0680                  	dc.b 0,	0, 6, $80
00022AC2 5901 3D5A                  	dc.l Map_obj59+$59000000
00022AC6 0000 4000                  	dc.b 0,	0, $40,	0
00022ACA 5300 AF26                  	dc.l Map_obj53+$53000000
00022ACE 0002 44E0                  	dc.b 0,	2, $44,	$E0
00022AD2 1800 A8D6                  	dc.l Map_obj18b+$18000000
00022AD6 0000 4000                  	dc.b 0,	0, $40,	0
00022ADA 5A01 3E94                  	dc.l Map_obj5A+$5A000000
00022ADE 0000 4000                  	dc.b 0,	0, $40,	0
00022AE2 5B01 404C                  	dc.l Map_obj5B+$5B000000
00022AE6 0000 4000                  	dc.b 0,	0, $40,	0
00022AEA 5D01 461C                  	dc.l Map_obj5D+$5D000000
00022AEE 0000 43A0                  	dc.b 0,	0, $43,	$A0
00022AF2 5E01 49AE                  	dc.l Map_obj5E+$5E000000
00022AF6 0000 0374                  	dc.b 0,	0, 3, $74
00022AFA 4101 0C16                  	dc.l Map_obj41+$41000000
00022AFE 0000 0523                  	dc.b 0,	0, 5, $23
00022B02 1300 E0F2                  	dc.l Map_obj14+$13000000
00022B06 0000 0480                  	dc.b 0,	0, 4, $80
00022B0A 1C00 B036                  	dc.l Map_obj1C+$1C000000
00022B0E 0000 44D8                  	dc.b 0,	0, $44,	$D8
00022B12 5F01 4C2C                  	dc.l Map_obj5F+$5F000000
00022B16 0000 0400                  	dc.b 0,	0, 4, 0
00022B1A 6001 4EE2                  	dc.l Map_obj60+$60000000
00022B1E 0000 2429                  	dc.b 0,	0, $24,	$29
00022B22 7901 A8D8                  	dc.l Map_obj79+$79000000
00022B26 0100 07A0                  	dc.b 1,	0, 7, $A0
00022B2A                            	even
00022B2A                            	even
00022B2A                            
00022B2A                            ; ---------------------------------------------------------------------------
00022B2A                            ; Debug	list - Spring Yard
00022B2A                            ; ---------------------------------------------------------------------------
00022B2A                            Debug_SYZ:
00022B2A                            	include "_inc\Debug list - SYZ.asm"
00022B2A                            ; ---------------------------------------------------------------------------
00022B2A                            ; Debug	list - Spring Yard
00022B2A                            ; ---------------------------------------------------------------------------
00022B2A 000F                       	dc.w $F
00022B2C 2500 C842                  	dc.l Map_obj25+$25000000
00022B30 0000 27B2                  	dc.b 0,	0, $27,	$B2
00022B34 2600 CE50                  	dc.l Map_obj26+$26000000
00022B38 0000 0680                  	dc.b 0,	0, 6, $80
00022B3C 3600 FEB6                  	dc.l Map_obj36+$36000000
00022B40 0000 051B                  	dc.b 0,	0, 5, $1B
00022B44 4101 0C16                  	dc.l Map_obj41+$41000000
00022B48 0000 0523                  	dc.b 0,	0, 5, $23
00022B4C 4301 109C                  	dc.l Map_obj43+$43000000
00022B50 0000 04B8                  	dc.b 0,	0, 4, $B8
00022B54 1201 187A                  	dc.l Map_obj12+$12000000
00022B58 0000 0000                  	dc.b 0,	0, 0, 0
00022B5C 4701 1A06                  	dc.l Map_obj47+$47000000
00022B60 0000 0380                  	dc.b 0,	0, 3, $80
00022B64 1F00 BF42                  	dc.l Map_obj1F+$1F000000
00022B68 0000 0400                  	dc.b 0,	0, 4, 0
00022B6C 2200 C222                  	dc.l Map_obj22+$22000000
00022B70 0000 0444                  	dc.b 0,	0, 4, $44
00022B74 5001 2946                  	dc.l Map_obj50+$50000000
00022B78 0000 247B                  	dc.b 0,	0, $24,	$7B
00022B7C 1800 A8C4                  	dc.l Map_obj18a+$18000000
00022B80 0000 4000                  	dc.b 0,	0, $40,	0
00022B84 5601 371A                  	dc.l Map_obj56+$56000000
00022B88 0000 4000                  	dc.b 0,	0, $40,	0
00022B8C 3200 EC22                  	dc.l Map_obj32+$32000000
00022B90 0000 0513                  	dc.b 0,	0, 5, $13
00022B94 7801 A552                  	dc.l Map_obj78+$78000000
00022B98 0000 24FF                  	dc.b 0,	0, $24,	$FF
00022B9C 7901 A8D8                  	dc.l Map_obj79+$79000000
00022BA0 0100 07A0                  	dc.b 1,	0, 7, $A0
00022BA4                            	even
00022BA4                            	even
00022BA4                            
00022BA4                            ; ---------------------------------------------------------------------------
00022BA4                            ; Debug	list - Scrap Brain
00022BA4                            ; ---------------------------------------------------------------------------
00022BA4                            Debug_SBZ:
00022BA4                            	include "_inc\Debug list - SBZ.asm"
00022BA4                            ; ---------------------------------------------------------------------------
00022BA4                            ; Debug	list - Scrap Brain
00022BA4                            ; ---------------------------------------------------------------------------
00022BA4 001D                       	dc.w $1D
00022BA6 2500 C842                  	dc.l Map_obj25+$25000000
00022BAA 0000 27B2                  	dc.b 0,	0, $27,	$B2
00022BAE 2600 CE50                  	dc.l Map_obj26+$26000000
00022BB2 0000 0680                  	dc.b 0,	0, 6, $80
00022BB6 5F01 4C2C                  	dc.l Map_obj5F+$5F000000
00022BBA 0000 0400                  	dc.b 0,	0, 4, 0
00022BBE 6001 4EE2                  	dc.l Map_obj60+$60000000
00022BC2 0000 0429                  	dc.b 0,	0, 4, $29
00022BC6 7801 A552                  	dc.l Map_obj78+$78000000
00022BCA 0000 22B0                  	dc.b 0,	0, $22,	$B0
00022BCE 1501 3AB6                  	dc.l Map_obj15b+$15000000
00022BD2 0702 4391                  	dc.b 7,	2, $43,	$91
00022BD6 6701 8C74                  	dc.l Map_obj67+$67000000
00022BDA E000 C344                  	dc.b $E0, 0, $C3, $44
00022BDE 5201 3064                  	dc.l Map_obj52+$52000000
00022BE2 2802 22C0                  	dc.b $28, 2, $22, $C0
00022BE6 3200 EC22                  	dc.l Map_obj32+$32000000
00022BEA 0000 0513                  	dc.b 0,	0, 5, $13
00022BEE 6901 8ECE                  	dc.l Map_obj69+$69000000
00022BF2 0300 4492                  	dc.b 3,	0, $44,	$92
00022BF6 6901 8F28                  	dc.l Map_obj69a+$69000000
00022BFA 8300 04DF                  	dc.b $83, 0, 4,	$DF
00022BFE 6A01 9186                  	dc.l Map_obj6A+$6A000000
00022C02 0200 43B5                  	dc.b 2,	0, $43,	$B5
00022C06 5300 AF26                  	dc.l Map_obj53+$53000000
00022C0A 0000 43F5                  	dc.b 0,	0, $43,	$F5
00022C0E 5201 3064                  	dc.l Map_obj52+$52000000
00022C12 3903 4460                  	dc.b $39, 3, $44, $60
00022C16 6B01 9556                  	dc.l Map_obj6B+$6B000000
00022C1A 0000 22C0                  	dc.b 0,	0, $22,	$C0
00022C1E 2A00 B1CC                  	dc.l Map_obj2A+$2A000000
00022C22 0000 42E8                  	dc.b 0,	0, $42,	$E8
00022C26 6B01 9556                  	dc.l Map_obj6B+$6B000000
00022C2A 1301 22C0                  	dc.b $13, 1, $22, $C0
00022C2E 6A01 9186                  	dc.l Map_obj6A+$6A000000
00022C32 0100 43B5                  	dc.b 1,	0, $43,	$B5
00022C36 6B01 9556                  	dc.l Map_obj6B+$6B000000
00022C3A 2401 22C0                  	dc.b $24, 1, $22, $C0
00022C3E 6A01 9186                  	dc.l Map_obj6A+$6A000000
00022C42 0402 43B5                  	dc.b 4,	2, $43,	$B5
00022C46 6B01 9556                  	dc.l Map_obj6B+$6B000000
00022C4A 3401 22C0                  	dc.b $34, 1, $22, $C0
00022C4E 6C01 9718                  	dc.l Map_obj6C+$6C000000
00022C52 0000 44C3                  	dc.b 0,	0, $44,	$C3
00022C56 6D01 14EC                  	dc.l Map_obj6D+$6D000000
00022C5A 6400 83D9                  	dc.b $64, 0, $83, $D9
00022C5E 6D01 14EC                  	dc.l Map_obj6D+$6D000000
00022C62 640B 83D9                  	dc.b $64, $B, $83, $D9
00022C66 6E01 97CE                  	dc.l Map_obj6E+$6E000000
00022C6A 0400 047E                  	dc.b 4,	0, 4, $7E
00022C6E 7001 9BDA                  	dc.l Map_obj70+$70000000
00022C72 0000 42F0                  	dc.b 0,	0, $42,	$F0
00022C76 7101 44C2                  	dc.l Map_obj71+$71000000
00022C7A 1100 8680                  	dc.b $11, 0, $86, $80
00022C7E 1E00 B5D0                  	dc.l Map_obj1E+$1E000000
00022C82 0400 2302                  	dc.b 4,	0, $23,	2
00022C86 7901 A8D8                  	dc.l Map_obj79+$79000000
00022C8A 0100 07A0                  	dc.b 1,	0, 7, $A0
00022C8E                            	even
00022C8E                            	even
00022C8E                            
00022C8E                            ; ---------------------------------------------------------------------------
00022C8E                            ; Debug	list - ending sequence / special stage
00022C8E                            ; ---------------------------------------------------------------------------
00022C8E                            Debug_Ending:
00022C8E                            	include "_inc\Debug list - Ending and SS.asm"
00022C8E                            ; ---------------------------------------------------------------------------
00022C8E                            ; Debug	list - ending sequence / special stage
00022C8E                            ; ---------------------------------------------------------------------------
00022C8E 000D                       	dc.w $D
00022C90 2500 C842                  	dc.l Map_obj25+$25000000
00022C94 0000 27B2                  	dc.b 0,	0, $27,	$B2
00022C98 4701 1A06                  	dc.l Map_obj47+$47000000
00022C9C 0000 0380                  	dc.b 0,	0, 3, $80
00022CA0 2800 B994                  	dc.l Map_obj28a+$28000000
00022CA4 0A00 05A0                  	dc.b $A, 0, 5, $A0
00022CA8 2800 B994                  	dc.l Map_obj28a+$28000000
00022CAC 0B00 05A0                  	dc.b $B, 0, 5, $A0
00022CB0 2800 B994                  	dc.l Map_obj28a+$28000000
00022CB4 0C00 05A0                  	dc.b $C, 0, 5, $A0
00022CB8 2800 B80C                  	dc.l Map_obj28+$28000000
00022CBC 0D00 0553                  	dc.b $D, 0, 5, $53
00022CC0 2800 B80C                  	dc.l Map_obj28+$28000000
00022CC4 0E00 0553                  	dc.b $E, 0, 5, $53
00022CC8 2800 B80C                  	dc.l Map_obj28+$28000000
00022CCC 0F00 0573                  	dc.b $F, 0, 5, $73
00022CD0 2800 B80C                  	dc.l Map_obj28+$28000000
00022CD4 1000 0573                  	dc.b $10, 0, 5,	$73
00022CD8 2800 B994                  	dc.l Map_obj28a+$28000000
00022CDC 1100 0585                  	dc.b $11, 0, 5,	$85
00022CE0 2800 BB1C                  	dc.l Map_obj28b+$28000000
00022CE4 1200 0593                  	dc.b $12, 0, 5,	$93
00022CE8 2800 B994                  	dc.l Map_obj28a+$28000000
00022CEC 1300 0565                  	dc.b $13, 0, 5,	$65
00022CF0 2800 BB1C                  	dc.l Map_obj28b+$28000000
00022CF4 1400 05B3                  	dc.b $14, 0, 5,	$B3
00022CF8                            	even
00022CF8                            	even
00022CF8                            
00022CF8                            ; ---------------------------------------------------------------------------
00022CF8                            ; Debug	list - Alpha Beta
00022CF8                            ; ---------------------------------------------------------------------------
00022CF8                            Debug_ABZ:
00022CF8                            	include "_inc\Debug list - ABZ.asm"
00022CF8                            ; ---------------------------------------------------------------------------
00022CF8                            ; Debug	list - Alpha Beta
00022CF8                            ; ---------------------------------------------------------------------------
00022CF8 0003                       	dc.w 3
00022CFA 2500 C842                  	dc.l Map_obj25+$25000000
00022CFE 0000 27B2                  	dc.b 0,	0, $27,	$B2
00022D02 2600 CE50                  	dc.l Map_obj26+$26000000
00022D06 0000 0680                  	dc.b 0,	0, 6, $80
00022D0A 7901 A8D8                  	dc.l Map_obj79+$79000000
00022D0E 0100 07A0                  	dc.b 1,	0, 7, $A0
00022D12                            	even
00022D12                            	even
00022D12                            
00022D12                            ; ---------------------------------------------------------------------------
00022D12                            ; Debug	list - Ice Cap
00022D12                            ; ---------------------------------------------------------------------------
00022D12                            Debug_IC:
00022D12                            	include "_inc\Debug list - IC.asm"
00022D12                            ; ---------------------------------------------------------------------------
00022D12                            ; Debug	list - Alpha Beta
00022D12                            ; ---------------------------------------------------------------------------
00022D12 0003                       	dc.w 3
00022D14 2500 C842                  	dc.l Map_obj25+$25000000
00022D18 0000 27B2                  	dc.b 0,	0, $27,	$B2
00022D1C 2600 CE50                  	dc.l Map_obj26+$26000000
00022D20 0000 0680                  	dc.b 0,	0, 6, $80
00022D24 7901 A8D8                  	dc.l Map_obj79+$79000000
00022D28 0100 07A0                  	dc.b 1,	0, 7, $A0
00022D2C                            	even
00022D2C                            	even
00022D2C                            
00022D2C                            ; ---------------------------------------------------------------------------
00022D2C                            ; Main level load blocks
00022D2C                            ; ---------------------------------------------------------------------------
00022D2C                            MainLoadBlocks:
00022D2C                            	include "_inc\Main level load blocks.asm"
00022D2C                            ; ---------------------------------------------------------------------------
00022D2C                            ; Main level load blocks
00022D2C                            ;
00022D2C                            ; ===FORMAT===
00022D2C                            ; level	patterns + (1st	PLC num	* 10^6)
00022D2C                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
00022D2C                            ; 256x256 mappings
00022D2C                            ; blank, music (unused), pal index (unused), pal index
00022D2C                            ; ---------------------------------------------------------------------------
00022D2C 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
00022D30 0000 0000                  	dc.l Blk16_GHZ+$5000000
00022D34 0000 0000                  	dc.l Blk256_GHZ
00022D38 0081 0404                  	dc.b 0,	$81, 4,	4
00022D3C 0000 0000                  	dc.l Nem_LZ+$6000000
00022D40 0000 0000                  	dc.l Blk16_LZ+$7000000
00022D44 0000 0000                  	dc.l Blk256_LZ
00022D48 0082 0505                  	dc.b 0,	$82, 5,	5
00022D4C 0000 0000                  	dc.l Nem_MZ+$8000000
00022D50 0000 0000                  	dc.l Blk16_MZ+$9000000
00022D54 0000 0000                  	dc.l Blk256_MZ
00022D58 0083 0606                  	dc.b 0,	$83, 6,	6
00022D5C 0000 0000                  	dc.l Nem_SLZ+$A000000
00022D60 0000 0000                  	dc.l Blk16_SLZ+$B000000
00022D64 0000 0000                  	dc.l Blk256_SLZ
00022D68 0084 0707                  	dc.b 0,	$84, 7,	7
00022D6C 0000 0000                  	dc.l Nem_SYZ+$C000000
00022D70 0000 0000                  	dc.l Blk16_SYZ+$D000000
00022D74 0000 0000                  	dc.l Blk256_SYZ
00022D78 0085 0808                  	dc.b 0,	$85, 8,	8
00022D7C 0000 0000                  	dc.l Nem_SBZ+$E000000
00022D80 0000 0000                  	dc.l Blk16_SBZ+$F000000
00022D84 0000 0000                  	dc.l Blk256_SBZ
00022D88 0086 0909                  	dc.b 0,	$86, 9,	9
00022D8C 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
00022D90 0000 0000                  	dc.l Blk16_GHZ
00022D94 0000 0000                  	dc.l Blk256_GHZ
00022D98 0086 1313                  	dc.b 0,	$86, $13, $13
00022D9C 0000 0000                  	dc.l Nem_ABZ+$20000000
00022DA0 0000 0000                  	dc.l Blk16_ABZ+$21000000
00022DA4 0000 0000                  	dc.l Blk256_ABZ
00022DA8 008C 1414                  	dc.b 0,	$8C, $14, $14
00022DAC 0000 0000                  	dc.l Nem_IC+$23000000
00022DB0 0000 0000                  	dc.l Blk16_IC+$24000000
00022DB4 0000 0000                  	dc.l Blk256_IC
00022DB8 0081 1D1D                  	dc.b 0,	$81, $1D, $1D	;$1D
00022DBC 0000 0000                  	dc.l Nem_SZ+$2A000000
00022DC0 0000 0000                  	dc.l Blk16_SZ+$2B000000
00022DC4 0000 0000                  	dc.l Blk256_SZ
00022DC8 008C 1422                  	dc.b 0,	$8C, $14, $22
00022DCC                            	even
00022DCC                            	even
00022DCC                            
00022DCC                            ; ---------------------------------------------------------------------------
00022DCC                            ; Pattern load cues
00022DCC                            ; ---------------------------------------------------------------------------
00022DCC                            ArtLoadCues:
00022DCC                            	include "_inc\Pattern load cues.asm"
00022DCC                            ;NOTES: IDs 26 and 27 used by Resize_GHZ1!!
00022DCC                            
00022DCC                            ; ---------------------------------------------------------------------------
00022DCC                            ; Pattern load cues - index
00022DCC                            ; ---------------------------------------------------------------------------
00022DCC 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues				;1
00022DD0 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues				;3
00022DD4 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues					;5
00022DD8 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues					;7
00022DDC 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues					;9
00022DE0 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues					;B
00022DE4 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues					;D
00022DE8 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues					;F
00022DEC 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues				;11
00022DF0 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues				;13
00022DF4 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues			;15
00022DF8 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues			;17
00022DFC 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues			;19
00022E00 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues			;1B
00022E04 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues				;1D
00022E08 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues				;1F
00022E0C 0000 0000 0000             	dc.w PLC_ABZ-ArtLoadCues, PLC_ABZ2-ArtLoadCues, PLC_ABZAnimals-ArtLoadCues	;22
00022E12 0000 0000 0000             	dc.w PLC_IC-ArtLoadCues, PLC_IC2-ArtLoadCues, PLC_ICAnimals-ArtLoadCues		;25
00022E18 0000 0000                  	dc.w PLC_GHZ_Main1-ArtLoadCues, PLC_GHZ_Main2-ArtLoadCues			;27
00022E1C 0000                       	dc.w PLC_GotThrough-ArtLoadCues							;28
00022E1E 0000                       	dc.w PLC_GHZALONE-ArtLoadCues							;29
00022E20 0000 0000 0000             	dc.w PLC_SZ-ArtLoadCues, PLC_SZ2-ArtLoadCues, PLC_ICAnimals-ArtLoadCues		;2C
00022E26                            
00022E26 0000                       PLC_GotThrough:	dc.w 0
00022E28 0000 0000                  		dc.l Nem_GTA
00022E2C B000                       		dc.w $B000
00022E2E                            
00022E2E 0000                       PLC_GHZALONE:	dc.w 0
00022E30 0000 0000                  		dc.l Nem_GHZ_boss
00022E34 54A0                       		dc.w ($02A5*$20)
00022E36                            ; ---------------------------------------------------------------------------
00022E36                            ; Pattern load cues - standard block 1
00022E36                            ; ---------------------------------------------------------------------------
00022E36 0005                       PLC_Main:	dc.w 5
00022E38 0000 0000                  		dc.l Nem_Psb
00022E3C 6200                       		dc.w $310*$20
00022E3E 0000 0000                  		dc.l Nem_Lamp		; lamppost
00022E42 D800                       		dc.w $D800
00022E44 0000 0000                  		dc.l Nem_Hud		; HUD
00022E48 D940                       		dc.w $D940
00022E4A 0000 0000                  		dc.l Nem_Lives		; lives	counter
00022E4E FA80                       		dc.w $FA80
00022E50 0000 0000                  		dc.l Nem_Ring		; rings
00022E54 F640                       		dc.w $F640
00022E56 0000 0000                  		dc.l Nem_Points		; points from enemy
00022E5A F2E0                       		dc.w $F2E0
00022E5C                            ; ---------------------------------------------------------------------------
00022E5C                            ; Pattern load cues - standard block 2
00022E5C                            ; ---------------------------------------------------------------------------
00022E5C 0003                       PLC_Main2:	dc.w 3
00022E5E 0000 0000                  		dc.l Nem_Monitors	; monitors
00022E62 D000                       		dc.w $D000
00022E64 0000 0000                  		dc.l Nem_Shield		; shield
00022E68 A820                       		dc.w $A820
00022E6A 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
00022E6E AB80                       		dc.w $AB80
00022E70 0000 0000                  		dc.l Nem_Coins
00022E74 ADC0                       		dc.w ($56E*$20)
00022E76                            ; ---------------------------------------------------------------------------
00022E76                            ; Pattern load cues - explosion
00022E76                            ; ---------------------------------------------------------------------------
00022E76 0000                       PLC_Explode:	dc.w 0
00022E78 0000 0000                  		dc.l Nem_Explode	; explosion
00022E7C B400                       		dc.w $B400
00022E7E                            ; ---------------------------------------------------------------------------
00022E7E                            ; Pattern load cues - game/time	over
00022E7E                            ; ---------------------------------------------------------------------------
00022E7E 0000                       PLC_GameOver:	dc.w 0
00022E80 0000 0000                  		dc.l Nem_GameOver	; game/time over
00022E84 ABC0                       		dc.w $ABC0
00022E86                            ; ---------------------------------------------------------------------------
00022E86                            ; Pattern load cues - Green Hill
00022E86                            ; ---------------------------------------------------------------------------
00022E86 0000                       PLC_GHZ:	dc.w 0
00022E88 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
00022E8C 0000                       		dc.w 0
00022E8E                            
00022E8E 0000                       PLC_GHZ2:	dc.w 0
00022E90 0000 0000                  		dc.l Nem_MotoFusion	; motofusion enemy
00022E94 8600                       		dc.w $430*$20
00022E96                            ;		dc.l Nem_Surf		; Surf patterns
00022E96                            ;		dc.w ($310*$20)
00022E96                            
00022E96 0005                       PLC_GHZ_Main1:	dc.w 5
00022E98 0000 0000                  		dc.l Nem_Bumper		; bumper
00022E9C 9000                       		dc.w $9000
00022E9E 0000 0000                  		dc.l Nem_MotoFusion	; motofusion enemy
00022EA2 8600                       		dc.w $430*$20
00022EA4 0000 0000                  		dc.l Nem_PplRock	; purple rock
00022EA8 7A00                       		dc.w $7A00
00022EAA 0000 0000                  		dc.l Nem_Spikes		; spikes
00022EAE A360                       		dc.w $A360
00022EB0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00022EB4 A460                       		dc.w $A460
00022EB6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00022EBA A660                       		dc.w $A660
00022EBC                            
00022EBC 0006                       PLC_GHZ_Main2:	dc.w 6
00022EBE 0000 0000                  		dc.l Nem_Swing		; swinging platform
00022EC2 7000                       		dc.w $7000
00022EC4 0000 0000                  		dc.l Nem_Splats
00022EC8 8260                       		dc.w ($413*$20)
00022ECA 0000 0000                  		dc.l Nem_Bridge		; bridge
00022ECE 71C0                       		dc.w $71C0
00022ED0 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
00022ED4 7300                       		dc.w $7300
00022ED6 0000 0000                  		dc.l Nem_Ball		; giant	ball
00022EDA 7540                       		dc.w $7540
00022EDC 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
00022EE0 A1E0                       		dc.w $A1E0
00022EE2 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
00022EE6 6980                       		dc.w $6980
00022EE8                            ; ---------------------------------------------------------------------------
00022EE8                            ; Pattern load cues - Labyrinth
00022EE8                            ; ---------------------------------------------------------------------------
00022EE8 0004                       PLC_LZ:		dc.w 4
00022EEA 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
00022EEE 0000                       		dc.w 0
00022EF0                            ;		dc.l Nem_LzBlock1	; block
00022EF0                            ;		dc.w $3C00
00022EF0                            ;		dc.l Nem_LzBlock2	; blocks
00022EF0                            ;		dc.w $3E00
00022EF0 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
00022EF4 4B20                       		dc.w $4B20
00022EF6 0000 0000                  		dc.l Nem_Water		; water	surface
00022EFA 6000                       		dc.w $6000
00022EFC                            ;		dc.l Nem_LzSpikeBall	; spiked ball
00022EFC                            ;		dc.w $6200
00022EFC                            ;		dc.l Nem_FlapDoor	; flapping door
00022EFC                            ;		dc.w $6500
00022EFC 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
00022F00 6900                       		dc.w $6900
00022F02                            ;		dc.l Nem_LzBlock3	; block
00022F02                            ;		dc.w $7780
00022F02 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
00022F06 7880                       		dc.w $7880
00022F08                            ;		dc.l Nem_Harpoon	; harpoon
00022F08                            ;		dc.w $7980
00022F08                            ;		dc.l Nem_Burrobot	; burrobot enemy
00022F08                            ;		dc.w $94C0
00022F08 0005                       PLC_LZ2:	dc.w 5
00022F0A 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
00022F0E 7BC0                       		dc.w $7BC0
00022F10                            ;		dc.l Nem_LzDoor2	; large	horizontal door
00022F10                            ;		dc.w $7CC0
00022F10                            ;		dc.l Nem_LzWheel	; wheel
00022F10                            ;		dc.w $7EC0
00022F10                            ;		dc.l Nem_Gargoyle	; gargoyle head
00022F10                            ;		dc.w $5D20
00022F10 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
00022F14 8800                       		dc.w $8800
00022F16                            ;		dc.l Nem_LzPlatfm	; rising platform
00022F16                            ;		dc.w $89E0
00022F16                            ;		dc.l Nem_Orbinaut	; orbinaut enemy
00022F16                            ;		dc.w $8CE0
00022F16                            ;		dc.l Nem_Jaws		; jaws enemy
00022F16                            ;		dc.w $90C0
00022F16 0000 0000                  		dc.l Nem_LzSwitch	; switch
00022F1A A1E0                       		dc.w $A1E0
00022F1C                            ;		dc.l Nem_Cork		; cork block
00022F1C                            ;		dc.w $A000
00022F1C 0000 0000                  		dc.l Nem_Spikes		; spikes
00022F20 A360                       		dc.w $A360
00022F22 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00022F26 A460                       		dc.w $A460
00022F28 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00022F2C A660                       		dc.w $A660
00022F2E                            ; ---------------------------------------------------------------------------
00022F2E                            ; Pattern load cues - Marble
00022F2E                            ; ---------------------------------------------------------------------------
00022F2E 0009                       PLC_MZ:		dc.w 9
00022F30 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
00022F34 0000                       		dc.w 0
00022F36 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
00022F3A 6000                       		dc.w $6000
00022F3C 0000 0000                  		dc.l Nem_MzFire		; fireballs
00022F40 68A0                       		dc.w $68A0
00022F42 0000 0000                  		dc.l Nem_Swing		; swinging platform
00022F46 7000                       		dc.w $7000
00022F48 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
00022F4C 71C0                       		dc.w $71C0
00022F4E 0000 0000                  		dc.l Nem_Lava		; lava
00022F52 7500                       		dc.w $7500
00022F54 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
00022F58 8880                       		dc.w $8880
00022F5A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
00022F5E 8F60                       		dc.w $8F60
00022F60 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
00022F64 9700                       		dc.w $9700
00022F66 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
00022F6A 9FE0                       		dc.w $9FE0
00022F6C 0004                       PLC_MZ2:	dc.w 4
00022F6E 0000 0000                  		dc.l Nem_MzSwitch	; switch
00022F72 A260                       		dc.w $A260
00022F74 0000 0000                  		dc.l Nem_Spikes		; spikes
00022F78 A360                       		dc.w $A360
00022F7A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00022F7E A460                       		dc.w $A460
00022F80 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00022F84 A660                       		dc.w $A660
00022F86 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
00022F8A 5700                       		dc.w $5700
00022F8C                            ; ---------------------------------------------------------------------------
00022F8C                            ; Pattern load cues - Alpha Beta
00022F8C                            ; ---------------------------------------------------------------------------
00022F8C 0000                       PLC_ABZ:	dc.w 0
00022F8E 0000 0000                  		dc.l Nem_ABZ		; ABZ main patterns
00022F92 0000                       		dc.w 0
00022F94 0003                       PLC_ABZ2:	dc.w 3
00022F96 0000 0000                  		dc.l Nem_MzSwitch	; switch
00022F9A A260                       		dc.w $A260
00022F9C 0000 0000                  		dc.l Nem_Spikes		; spikes
00022FA0 A360                       		dc.w $A360
00022FA2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00022FA6 A460                       		dc.w $A460
00022FA8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00022FAC A660                       		dc.w $A660
00022FAE                            ; ---------------------------------------------------------------------------
00022FAE                            ; Pattern load cues - Special Zone
00022FAE                            ; ---------------------------------------------------------------------------
00022FAE 0000                       PLC_SZ:		dc.w 0
00022FB0 0000 0000                  		dc.l Nem_SZ		; SZ main patterns
00022FB4 0000                       		dc.w 0
00022FB6 0000                       PLC_SZ2:	dc.w 0
00022FB8 0000 0000                  		dc.l Nem_SSEmerald
00022FBC ADC0                       		dc.w ($56E*$20)
00022FBE                            ; ---------------------------------------------------------------------------
00022FBE                            ; Pattern load cues - Star Light
00022FBE                            ; ---------------------------------------------------------------------------
00022FBE 0008                       PLC_SLZ:	dc.w 8
00022FC0 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
00022FC4 0000                       		dc.w 0
00022FC6 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
00022FCA 8000                       		dc.w $8000
00022FCC 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
00022FD0 8520                       		dc.w $8520
00022FD2 0000 0000                  		dc.l Nem_MzFire		; fireballs
00022FD6 9000                       		dc.w $9000
00022FD8 0000 0000                  		dc.l Nem_SlzBlock	; block
00022FDC 9C00                       		dc.w $9C00
00022FDE 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
00022FE2 A260                       		dc.w $A260
00022FE4 0000 0000                  		dc.l Nem_Spikes		; spikes
00022FE8 A360                       		dc.w $A360
00022FEA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00022FEE A460                       		dc.w $A460
00022FF0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00022FF4 A660                       		dc.w $A660
00022FF6 0004                       PLC_SLZ2:	dc.w 4
00022FF8 0000 0000                  		dc.l Nem_Seesaw		; seesaw
00022FFC 6E80                       		dc.w $6E80
00022FFE                            ;		dc.l Nem_Fan		; fan
00022FFE                            ;		dc.w $7400
00022FFE 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
00023002 7980                       		dc.w $7980
00023004 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
00023008 7B80                       		dc.w $7B80
0002300A 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0002300E 9B00                       		dc.w $9B00
00023010 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
00023014 9E00                       		dc.w $9E00
00023016                            ; ---------------------------------------------------------------------------
00023016                            ; Pattern load cues - Ice Cap
00023016                            ; ---------------------------------------------------------------------------
00023016 0000                       PLC_IC:		dc.w 0
00023018 0000 0000                  		dc.l Nem_IC		; ABZ main patterns
0002301C 0000                       		dc.w 0
0002301E 0003                       PLC_IC2:	dc.w 3
00023020 0000 0000                  		dc.l Nem_MzSwitch	; switch
00023024 A260                       		dc.w $A260
00023026 0000 0000                  		dc.l Nem_Spikes		; spikes
0002302A A360                       		dc.w $A360
0002302C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00023030 A460                       		dc.w $A460
00023032 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00023036 A660                       		dc.w $A660
00023038                            ; ---------------------------------------------------------------------------
00023038                            ; Pattern load cues - Spring Yard
00023038                            ; ---------------------------------------------------------------------------
00023038 0004                       PLC_SYZ:	dc.w 4
0002303A 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0002303E 0000                       		dc.w 0
00023040 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
00023044 8000                       		dc.w $8000
00023046 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0002304A 8880                       		dc.w $8880
0002304C 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
00023050 8F60                       		dc.w $8F60
00023052 0000 0000                  		dc.l Nem_Roller		; roller enemy
00023056 9700                       		dc.w $9700
00023058 0007                       PLC_SYZ2:	dc.w 7
0002305A 0000 0000                  		dc.l Nem_Bumper		; bumper
0002305E 7000                       		dc.w $7000
00023060 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
00023064 72C0                       		dc.w $72C0
00023066 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0002306A 7740                       		dc.w $7740
0002306C 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
00023070 9FE0                       		dc.w $9FE0
00023072 0000 0000                  		dc.l Nem_LzSwitch	; switch
00023076 A1E0                       		dc.w $A1E0
00023078 0000 0000                  		dc.l Nem_Spikes		; spikes
0002307C A360                       		dc.w $A360
0002307E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00023082 A460                       		dc.w $A460
00023084 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00023088 A660                       		dc.w $A660
0002308A                            ; ---------------------------------------------------------------------------
0002308A                            ; Pattern load cues - Scrap Brain
0002308A                            ; ---------------------------------------------------------------------------
0002308A 0000                       PLC_SBZ:	dc.w $0
0002308C 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
00023090 0000                       		dc.w 0
00023092 0002                       PLC_SBZ2:	dc.w $2
00023094 0000 0000                  		dc.l Nem_Spikes		; spikes
00023098 A360                       		dc.w $A360
0002309A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002309E A460                       		dc.w $A460
000230A0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
000230A4 A660                       		dc.w $A660
000230A6                            ; ---------------------------------------------------------------------------
000230A6                            ; Pattern load cues - title card
000230A6                            ; ---------------------------------------------------------------------------
000230A6 0000                       PLC_TitleCard:	dc.w 0
000230A8 0000 0000                  		dc.l Nem_TitleCard
000230AC B000                       		dc.w $B000
000230AE                            ; ---------------------------------------------------------------------------
000230AE                            ; Pattern load cues - act 3 boss
000230AE                            ; ---------------------------------------------------------------------------
000230AE 0004                       PLC_Boss:	dc.w 4
000230B0 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
000230B4 8000                       		dc.w $8000
000230B6 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
000230BA 8D80                       		dc.w $8D80
000230BC 0000 0000                  		dc.l Nem_Prison		; prison capsule
000230C0 93A0                       		dc.w $93A0
000230C2 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
000230C6 A300                       		dc.w $A300
000230C8 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
000230CC A300                       		dc.w $A300
000230CE 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
000230D2 A540                       		dc.w $A540
000230D4                            ; ---------------------------------------------------------------------------
000230D4                            ; Pattern load cues - act 1/2 signpost
000230D4                            ; ---------------------------------------------------------------------------
000230D4 0001                       PLC_Signpost:	dc.w 1
000230D6 0000 0000                  		dc.l Nem_SignPost	; signpost
000230DA D000                       		dc.w $D000
000230DC 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
000230E0 96C0                       		dc.w $96C0
000230E2                            ; ---------------------------------------------------------------------------
000230E2                            ; Pattern load cues - beta special stage warp effect
000230E2                            ; ---------------------------------------------------------------------------
000230E2 0000                       PLC_Warp:	dc.w 0
000230E4 0000 0000                  		dc.l Nem_Warp
000230E8 A820                       		dc.w $A820
000230EA                            ; ---------------------------------------------------------------------------
000230EA                            ; Pattern load cues - special stage
000230EA                            ; ---------------------------------------------------------------------------
000230EA 0010                       PLC_SpeStage:	dc.w $10
000230EC 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
000230F0 0000                       		dc.w 0
000230F2 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
000230F6 0A20                       		dc.w $A20
000230F8 0000 0000                  		dc.l Nem_SSWalls	; walls
000230FC 2840                       		dc.w $2840
000230FE 0000 0000                  		dc.l Nem_Bumper		; bumper
00023102 4760                       		dc.w $4760
00023104 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
00023108 4A20                       		dc.w $4A20
0002310A 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0002310E 4C60                       		dc.w $4C60
00023110 0000 0000                  		dc.l Nem_SSRBlock	; R block
00023114 5E00                       		dc.w $5E00
00023116 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0002311A 6E00                       		dc.w $6E00
0002311C 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
00023120 7E00                       		dc.w $7E00
00023122 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
00023126 8E00                       		dc.w $8E00
00023128 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0002312C 9E00                       		dc.w $9E00
0002312E 0000 0000                  		dc.l Nem_SSWBlock	; W block
00023132 AE00                       		dc.w $AE00
00023134 0000 0000                  		dc.l Nem_SSGlass	; glass	block
00023138 BE00                       		dc.w $BE00
0002313A 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0002313E EE00                       		dc.w $EE00
00023140 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
00023144 F2E0                       		dc.w $F2E0
00023146 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0002314A F400                       		dc.w $F400
0002314C 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
00023150 F520                       		dc.w $F520
00023152 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
00023156 F2E0                       		dc.w $F2E0
00023158 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0002315C F400                       		dc.w $F400
0002315E 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
00023162 F520                       		dc.w $F520
00023164                            ; ---------------------------------------------------------------------------
00023164                            ; Pattern load cues - GHZ animals
00023164                            ; ---------------------------------------------------------------------------
00023164 0001                       PLC_GHZAnimals:	dc.w 1
00023166 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0002316A B000                       		dc.w $B000
0002316C 0000 0000                  		dc.l Nem_Flicky		; flicky
00023170 B240                       		dc.w $B240
00023172                            ; ---------------------------------------------------------------------------
00023172                            ; Pattern load cues - LZ animals
00023172                            ; ---------------------------------------------------------------------------
00023172 0001                       PLC_LZAnimals:	dc.w 1
00023174 0000 0000                  		dc.l Nem_BlackBird	; blackbird
00023178 B000                       		dc.w $B000
0002317A 0000 0000                  		dc.l Nem_Seal		; seal
0002317E B240                       		dc.w $B240
00023180                            ; ---------------------------------------------------------------------------
00023180                            ; Pattern load cues - MZ animals
00023180                            ; ---------------------------------------------------------------------------
00023180 0001                       PLC_MZAnimals:	dc.w 1
00023182 0000 0000                  		dc.l Nem_Squirrel	; squirrel
00023186 B000                       		dc.w $B000
00023188 0000 0000                  		dc.l Nem_Seal		; seal
0002318C B240                       		dc.w $B240
0002318E                            ; ---------------------------------------------------------------------------
0002318E                            ; Pattern load cues - MZ animals
0002318E                            ; ---------------------------------------------------------------------------
0002318E 0001                       PLC_ABZAnimals:	dc.w 1
00023190 0000 0000                  		dc.l Nem_Squirrel	; squirrel
00023194 B000                       		dc.w $B000
00023196 0000 0000                  		dc.l Nem_Seal		; seal
0002319A B240                       		dc.w $B240
0002319C                            ; ---------------------------------------------------------------------------
0002319C                            ; Pattern load cues - SLZ animals
0002319C                            ; ---------------------------------------------------------------------------
0002319C 0001                       PLC_SLZAnimals:	dc.w 1
0002319E 0000 0000                  		dc.l Nem_Pig		; pig
000231A2 B000                       		dc.w $B000
000231A4 0000 0000                  		dc.l Nem_Flicky		; flicky
000231A8 B240                       		dc.w $B240
000231AA                            ; ---------------------------------------------------------------------------
000231AA                            ; Pattern load cues - IC animals
000231AA                            ; ---------------------------------------------------------------------------
000231AA 0001                       PLC_ICAnimals:	dc.w 1
000231AC 0000 0000                  		dc.l Nem_Pig		; pig
000231B0 B000                       		dc.w $B000
000231B2 0000 0000                  		dc.l Nem_Flicky		; flicky
000231B6 B240                       		dc.w $B240
000231B8                            ; ---------------------------------------------------------------------------
000231B8                            ; Pattern load cues - SYZ animals
000231B8                            ; ---------------------------------------------------------------------------
000231B8 0001                       PLC_SYZAnimals:	dc.w 1
000231BA 0000 0000                  		dc.l Nem_Pig		; pig
000231BE B000                       		dc.w $B000
000231C0 0000 0000                  		dc.l Nem_Chicken	; chicken
000231C4 B240                       		dc.w $B240
000231C6                            ; ---------------------------------------------------------------------------
000231C6                            ; Pattern load cues - SBZ animals
000231C6                            ; ---------------------------------------------------------------------------
000231C6 0001                       PLC_SBZAnimals:	dc.w 1
000231C8 0000 0000                  		dc.l Nem_Rabbit		; rabbit
000231CC B000                       		dc.w $B000
000231CE 0000 0000                  		dc.l Nem_Chicken	; chicken
000231D2 B240                       		dc.w $B240
000231D4                            ; ---------------------------------------------------------------------------
000231D4                            ; Pattern load cues - special stage results screen
000231D4                            ; ---------------------------------------------------------------------------
000231D4 0001                       PLC_SpeStResult:dc.w 1
000231D6 0000 0000                  		dc.l Nem_ResultEm	; emeralds
000231DA A820                       		dc.w $A820
000231DC 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
000231E0 AA20                       		dc.w $AA20
000231E2                            ; ---------------------------------------------------------------------------
000231E2                            ; Pattern load cues - ending sequence
000231E2                            ; ---------------------------------------------------------------------------
000231E2 000E                       PLC_Ending:	dc.w $E
000231E4 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
000231E8 0000                       		dc.w 0
000231EA 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
000231EE 39A0                       		dc.w $39A0
000231F0 0000 0000                  		dc.l Nem_Stalk		; flower stalk
000231F4 6B00                       		dc.w $6B00
000231F6 0000 0000                  		dc.l Nem_EndFlower	; flowers
000231FA 7400                       		dc.w $7400
000231FC 0000 0000                  		dc.l Nem_EndEm		; emeralds
00023200 78A0                       		dc.w $78A0
00023202 0000 0000                  		dc.l Nem_EndSonic	; Sonic
00023206 7C20                       		dc.w $7C20
00023208 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0002320C A480                       		dc.w $A480
0002320E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
00023212 AA60                       		dc.w $AA60
00023214 0000 0000                  		dc.l Nem_Chicken	; chicken
00023218 ACA0                       		dc.w $ACA0
0002321A 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0002321E AE60                       		dc.w $AE60
00023220 0000 0000                  		dc.l Nem_Seal		; seal
00023224 B0A0                       		dc.w $B0A0
00023226 0000 0000                  		dc.l Nem_Pig		; pig
0002322A B260                       		dc.w $B260
0002322C 0000 0000                  		dc.l Nem_Flicky		; flicky
00023230 B4A0                       		dc.w $B4A0
00023232 0000 0000                  		dc.l Nem_Squirrel	; squirrel
00023236 B660                       		dc.w $B660
00023238 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0002323C B8A0                       		dc.w $B8A0
0002323E                            ; ---------------------------------------------------------------------------
0002323E                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0002323E                            ; ---------------------------------------------------------------------------
0002323E 0002                       PLC_TryAgain:	dc.w 2
00023240 0000 0000                  		dc.l Nem_EndEm		; emeralds
00023244 78A0                       		dc.w $78A0
00023246 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0002324A 7C20                       		dc.w $7C20
0002324C 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
00023250 B400                       		dc.w $B400
00023252                            ; ---------------------------------------------------------------------------
00023252                            ; Pattern load cues - Eggman on SBZ 2
00023252                            ; ---------------------------------------------------------------------------
00023252 0002                       PLC_EggmanSBZ2:	dc.w 2
00023254 0000 0000                  		dc.l Nem_SbzBlock	; block
00023258 A300                       		dc.w $A300
0002325A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0002325E 8000                       		dc.w $8000
00023260 0000 0000                  		dc.l Nem_LzSwitch	; switch
00023264 9400                       		dc.w $9400
00023266                            ; ---------------------------------------------------------------------------
00023266                            ; Pattern load cues - final boss
00023266                            ; ---------------------------------------------------------------------------
00023266 0004                       PLC_FZBoss:	dc.w 4
00023268 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0002326C 7400                       		dc.w $7400
0002326E 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
00023272 6000                       		dc.w $6000
00023274 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
00023278 8000                       		dc.w $8000
0002327A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0002327E 8E00                       		dc.w $8E00
00023280 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
00023284 A540                       		dc.w $A540
00023286                            		even
00023286                            		even
00023286                            		even
00023286                            
00023286                            Art_Xulpico:	incbin	"Xulpico/fondo/Tiles.bin"
0002355A 00                         		even
0002355A                            Map_Xulpico:	incbin	"Xulpico/fondo/Maps.bin"
000235B0 00                         		even
000235B0                            Pal_Xulpico:	incbin	"Xulpico/fondo/Palette.bin"
000235D0                            		even
000235D0                            Nem_XulSpr:	incbin	xulpico\sprite\tiles.bin	
00023A76                            		even
00023A76                            Nem_psb:	incbin	artnem\psb.bin	
00023B1A                            		even
00023B1A                            Nem_Presents:	incbin	artnem\titlescreen.bin	
00024006                            		even
00024006                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0002411A                            		even
0002411A                            Eni_Presents:	incbin	misc\ttl.bin		
000241DA                            		even
000241DA                            Eni_TITLEFG:	incbin	mapeni\titlefg.bin
000242E6 00                         		even
000242E6                            Nem_TITLEFG:	incbin	artnem\titlefg.bin
000253CA 00                         		even
000253CA                            Eni_SSRGBG:	incbin	mapeni\ssrgbg.bin
00025468 00                         		even
00025468                            Nem_SSRGBG:	incbin	artnem\ssrgbg.bin
00025B06                            		even
00025B06                            Nem_LevSelBg:	incbin	artnem\levselbg.bin
0002614A                            		even
0002614A                            Eni_LevSelBg:	incbin	mapeni\levselbg.bin
0002623A                            		even
0002623A                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000262F8                            		even
000262F8                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000267A0                            		even
000267A0                            ; ---------------------------------------------------------------------------
000267A0                            ; Sprite mappings - Sonic
000267A0                            ; ---------------------------------------------------------------------------
000267A0                            Map_Sonic:
000267A0                            	include "_maps\Sonic.asm"
000267A0                            ; --------------------------------------------------------------------------------
000267A0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000267A0                            ; --------------------------------------------------------------------------------
000267A0                            
000267A0                            SME_qKg3U:	
000267A0 0000 0000                  		dc.w SME_qKg3U_BC-SME_qKg3U, SME_qKg3U_BD-SME_qKg3U	
000267A4 0000 0000                  		dc.w SME_qKg3U_D2-SME_qKg3U, SME_qKg3U_E2-SME_qKg3U	
000267A8 0000 0000                  		dc.w SME_qKg3U_F2-SME_qKg3U, SME_qKg3U_102-SME_qKg3U	
000267AC 0000 0000                  		dc.w SME_qKg3U_112-SME_qKg3U, SME_qKg3U_127-SME_qKg3U	
000267B0 0000 0000                  		dc.w SME_qKg3U_132-SME_qKg3U, SME_qKg3U_13D-SME_qKg3U	
000267B4 0000 0000                  		dc.w SME_qKg3U_152-SME_qKg3U, SME_qKg3U_15D-SME_qKg3U	
000267B8 0000 0000                  		dc.w SME_qKg3U_16D-SME_qKg3U, SME_qKg3U_187-SME_qKg3U	
000267BC 0000 0000                  		dc.w SME_qKg3U_1A6-SME_qKg3U, SME_qKg3U_1BB-SME_qKg3U	
000267C0 0000 0000                  		dc.w SME_qKg3U_1D5-SME_qKg3U, SME_qKg3U_1EA-SME_qKg3U	
000267C4 0000 0000                  		dc.w SME_qKg3U_204-SME_qKg3U, SME_qKg3U_219-SME_qKg3U	
000267C8 0000 0000                  		dc.w SME_qKg3U_224-SME_qKg3U, SME_qKg3U_22F-SME_qKg3U	
000267CC 0000 0000                  		dc.w SME_qKg3U_244-SME_qKg3U, SME_qKg3U_24F-SME_qKg3U	
000267D0 0000 0000                  		dc.w SME_qKg3U_25F-SME_qKg3U, SME_qKg3U_27E-SME_qKg3U	
000267D4 0000 0000                  		dc.w SME_qKg3U_29D-SME_qKg3U, SME_qKg3U_2B2-SME_qKg3U	
000267D8 0000 0000                  		dc.w SME_qKg3U_2CC-SME_qKg3U, SME_qKg3U_2E1-SME_qKg3U	
000267DC 0000 0000                  		dc.w SME_qKg3U_2FB-SME_qKg3U, SME_qKg3U_306-SME_qKg3U	
000267E0 0000 0000                  		dc.w SME_qKg3U_311-SME_qKg3U, SME_qKg3U_31C-SME_qKg3U	
000267E4 0000 0000                  		dc.w SME_qKg3U_327-SME_qKg3U, SME_qKg3U_33C-SME_qKg3U	
000267E8 0000 0000                  		dc.w SME_qKg3U_34C-SME_qKg3U, SME_qKg3U_361-SME_qKg3U	
000267EC 0000 0000                  		dc.w SME_qKg3U_371-SME_qKg3U, SME_qKg3U_37C-SME_qKg3U	
000267F0 0000 0000                  		dc.w SME_qKg3U_387-SME_qKg3U, SME_qKg3U_392-SME_qKg3U	
000267F4 0000 0000                  		dc.w SME_qKg3U_39D-SME_qKg3U, SME_qKg3U_3B2-SME_qKg3U	
000267F8 0000 0000                  		dc.w SME_qKg3U_3BD-SME_qKg3U, SME_qKg3U_3D2-SME_qKg3U	
000267FC 0000 0000                  		dc.w SME_qKg3U_3DD-SME_qKg3U, SME_qKg3U_3E3-SME_qKg3U	
00026800 0000 0000                  		dc.w SME_qKg3U_3E9-SME_qKg3U, SME_qKg3U_3EF-SME_qKg3U	
00026804 0000 0000                  		dc.w SME_qKg3U_3F5-SME_qKg3U, SME_qKg3U_3FB-SME_qKg3U	
00026808 0000 0000                  		dc.w SME_qKg3U_406-SME_qKg3U, SME_qKg3U_40C-SME_qKg3U	
0002680C 0000 0000                  		dc.w SME_qKg3U_417-SME_qKg3U, SME_qKg3U_41D-SME_qKg3U	
00026810 0000 0000                  		dc.w SME_qKg3U_428-SME_qKg3U, SME_qKg3U_43D-SME_qKg3U	
00026814 0000 0000                  		dc.w SME_qKg3U_452-SME_qKg3U, SME_qKg3U_462-SME_qKg3U	
00026818 0000 0000                  		dc.w SME_qKg3U_472-SME_qKg3U, SME_qKg3U_482-SME_qKg3U	
0002681C 0000 0000                  		dc.w SME_qKg3U_48D-SME_qKg3U, SME_qKg3U_49D-SME_qKg3U	
00026820 0000 0000                  		dc.w SME_qKg3U_4AD-SME_qKg3U, SME_qKg3U_4BD-SME_qKg3U	
00026824 0000 0000                  		dc.w SME_qKg3U_4D2-SME_qKg3U, SME_qKg3U_4E7-SME_qKg3U	
00026828 0000 0000                  		dc.w SME_qKg3U_501-SME_qKg3U, SME_qKg3U_51B-SME_qKg3U	
0002682C 0000 0000                  		dc.w SME_qKg3U_526-SME_qKg3U, SME_qKg3U_536-SME_qKg3U	
00026830 0000 0000                  		dc.w SME_qKg3U_541-SME_qKg3U, SME_qKg3U_551-SME_qKg3U	
00026834 0000 0000                  		dc.w SME_qKg3U_55C-SME_qKg3U, SME_qKg3U_56C-SME_qKg3U	
00026838 0000 0000                  		dc.w SME_qKg3U_57C-SME_qKg3U, SME_qKg3U_596-SME_qKg3U	
0002683C 0000 0000                  		dc.w SME_qKg3U_5B0-SME_qKg3U, SME_qKg3U_5BB-SME_qKg3U	
00026840 0000 0000                  		dc.w SME_qKg3U_5CB-SME_qKg3U, SME_qKg3U_5D1-SME_qKg3U	
00026844 0000 0000                  		dc.w SME_qKg3U_5D7-SME_qKg3U, SME_qKg3U_5DD-SME_qKg3U	
00026848 0000 0000                  		dc.w SME_qKg3U_5ED-SME_qKg3U, SME_qKg3U_5FD-SME_qKg3U	
0002684C 0000 0000                  		dc.w SME_qKg3U_60D-SME_qKg3U, SME_qKg3U_61D-SME_qKg3U	
00026850 0000 0000                  		dc.w SME_qKg3U_628-SME_qKg3U, SME_qKg3U_62E-SME_qKg3U	
00026854 0000 0000                  		dc.w SME_qKg3U_634-SME_qKg3U, SME_qKg3U_63A-SME_qKg3U	
00026858 0000 0000                  		dc.w SME_qKg3U_640-SME_qKg3U, SME_qKg3U_646-SME_qKg3U	
0002685C 00                         SME_qKg3U_BC:	dc.b 0	
0002685D 04                         SME_qKg3U_BD:	dc.b 4	
0002685E EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00026863 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00026868 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
0002686D 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00026872 03                         SME_qKg3U_D2:	dc.b 3	
00026873 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00026878 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
0002687D 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00026882 03                         SME_qKg3U_E2:	dc.b 3	
00026883 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00026888 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
0002688D 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00026892 03                         SME_qKg3U_F2:	dc.b 3	
00026893 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00026898 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
0002689D 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000268A2 03                         SME_qKg3U_102:	dc.b 3	
000268A3 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
000268A8 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
000268AD 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000268B2 04                         SME_qKg3U_112:	dc.b 4	
000268B3 EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC	
000268B8 FB09 0008 EC               		dc.b $FB, 9, 0, 8, $EC	
000268BD FB06 000E 04               		dc.b $FB, 6, 0, $E, 4	
000268C2 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC	
000268C7 02                         SME_qKg3U_127:	dc.b 2	
000268C8 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
000268CD FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5	
000268D2 02                         SME_qKg3U_132:	dc.b 2	
000268D3 ED09 0000 F3               		dc.b $ED, 9, 0, 0, $F3	
000268D8 FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3	
000268DD 04                         SME_qKg3U_13D:	dc.b 4	
000268DE EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
000268E3 FB09 0006 EC               		dc.b $FB, 9, 0, 6, $EC	
000268E8 FB06 000C 04               		dc.b $FB, 6, 0, $C, 4	
000268ED 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC	
000268F2 02                         SME_qKg3U_152:	dc.b 2	
000268F3 EC09 0000 F3               		dc.b $EC, 9, 0, 0, $F3	
000268F8 FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB	
000268FD 03                         SME_qKg3U_15D:	dc.b 3	
000268FE ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC	
00026903 FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4	
00026908 0509 000C F4               		dc.b 5, 9, 0, $C, $F4	
0002690D 05                         SME_qKg3U_16D:	dc.b 5	
0002690E EB09 0000 EB               		dc.b $EB, 9, 0, 0, $EB	
00026913 EB06 0006 03               		dc.b $EB, 6, 0, 6, 3	
00026918 FB08 000C EB               		dc.b $FB, 8, 0, $C, $EB	
0002691D 0309 000F F3               		dc.b 3, 9, 0, $F, $F3	
00026922 1300 0015 FB               		dc.b $13, 0, 0, $15, $FB	
00026927 06                         SME_qKg3U_187:	dc.b 6	
00026928 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002692D EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
00026932 FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC	
00026937 0409 000C F4               		dc.b 4, 9, 0, $C, $F4	
0002693C FC05 0012 0C               		dc.b $FC, 5, 0, $12, $C	
00026941 F400 0016 14               		dc.b $F4, 0, 0, $16, $14	
00026946 04                         SME_qKg3U_1A6:	dc.b 4	
00026947 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
0002694C ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00026951 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5	
00026956 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD	
0002695B 05                         SME_qKg3U_1BB:	dc.b 5	
0002695C EB09 0000 EB               		dc.b $EB, 9, 0, 0, $EB	
00026961 EB05 0006 03               		dc.b $EB, 5, 0, 6, 3	
00026966 FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3	
0002696B 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3	
00026970 1304 0015 FB               		dc.b $13, 4, 0, $15, $FB	
00026975 04                         SME_qKg3U_1D5:	dc.b 4	
00026976 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002697B EC01 0006 04               		dc.b $EC, 1, 0, 6, 4	
00026980 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
00026985 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC	
0002698A 05                         SME_qKg3U_1EA:	dc.b 5	
0002698B ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00026990 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00026995 FD00 0008 ED               		dc.b $FD, 0, 0, 8, $ED	
0002699A FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5	
0002699F 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD	
000269A4 04                         SME_qKg3U_204:	dc.b 4	
000269A5 F407 0000 EB               		dc.b $F4, 7, 0, 0, $EB	
000269AA EC09 0008 FB               		dc.b $EC, 9, 0, 8, $FB	
000269AF FC04 000E FB               		dc.b $FC, 4, 0, $E, $FB	
000269B4 0409 0010 FB               		dc.b 4, 9, 0, $10, $FB	
000269B9 02                         SME_qKg3U_219:	dc.b 2	
000269BA F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
000269BF EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
000269C4 02                         SME_qKg3U_224:	dc.b 2	
000269C5 F406 0000 ED               		dc.b $F4, 6, 0, 0, $ED	
000269CA F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD	
000269CF 04                         SME_qKg3U_22F:	dc.b 4	
000269D0 F406 0000 EB               		dc.b $F4, 6, 0, 0, $EB	
000269D5 EC09 0006 FB               		dc.b $EC, 9, 0, 6, $FB	
000269DA FC04 000C FB               		dc.b $FC, 4, 0, $C, $FB	
000269DF 0409 000E FB               		dc.b 4, 9, 0, $E, $FB	
000269E4 02                         SME_qKg3U_244:	dc.b 2	
000269E5 F406 0000 EC               		dc.b $F4, 6, 0, 0, $EC	
000269EA F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC	
000269EF 03                         SME_qKg3U_24F:	dc.b 3	
000269F0 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000269F5 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
000269FA F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
000269FF 06                         SME_qKg3U_25F:	dc.b 6	
00026A00 FD06 0000 EB               		dc.b $FD, 6, 0, 0, $EB	
00026A05 ED04 0006 F3               		dc.b $ED, 4, 0, 6, $F3	
00026A0A F504 0008 EB               		dc.b $F5, 4, 0, 8, $EB	
00026A0F F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB	
00026A14 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB	
00026A19 FD00 0014 13               		dc.b $FD, 0, 0, $14, $13	
00026A1E 06                         SME_qKg3U_27E:	dc.b 6	
00026A1F FC06 0000 EC               		dc.b $FC, 6, 0, 0, $EC	
00026A24 E408 0006 F4               		dc.b $E4, 8, 0, 6, $F4	
00026A29 EC04 0009 FC               		dc.b $EC, 4, 0, 9, $FC	
00026A2E F404 000B EC               		dc.b $F4, 4, 0, $B, $EC	
00026A33 F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC	
00026A38 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC	
00026A3D 04                         SME_qKg3U_29D:	dc.b 4	
00026A3E FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
00026A43 F304 0006 ED               		dc.b $F3, 4, 0, 6, $ED	
00026A48 EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD	
00026A4D 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
00026A52 05                         SME_qKg3U_2B2:	dc.b 5	
00026A53 FD06 0000 EB               		dc.b $FD, 6, 0, 0, $EB	
00026A58 ED08 0006 F3               		dc.b $ED, 8, 0, 6, $F3	
00026A5D F504 0009 EB               		dc.b $F5, 4, 0, 9, $EB	
00026A62 F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB	
00026A67 0508 0013 FB               		dc.b 5, 8, 0, $13, $FB	
00026A6C 04                         SME_qKg3U_2CC:	dc.b 4	
00026A6D FC06 0000 EC               		dc.b $FC, 6, 0, 0, $EC	
00026A72 F404 0006 EC               		dc.b $F4, 4, 0, 6, $EC	
00026A77 EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC	
00026A7C 0404 0011 FC               		dc.b 4, 4, 0, $11, $FC	
00026A81 05                         SME_qKg3U_2E1:	dc.b 5	
00026A82 FB06 0000 ED               		dc.b $FB, 6, 0, 0, $ED	
00026A87 EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD	
00026A8C F304 000F ED               		dc.b $F3, 4, 0, $F, $ED	
00026A91 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
00026A96 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD	
00026A9B 02                         SME_qKg3U_2FB:	dc.b 2	
00026A9C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026AA1 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026AA6 02                         SME_qKg3U_306:	dc.b 2	
00026AA7 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026AAC FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026AB1 02                         SME_qKg3U_311:	dc.b 2	
00026AB2 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026AB7 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026ABC 02                         SME_qKg3U_31C:	dc.b 2	
00026ABD EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00026AC2 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00026AC7 04                         SME_qKg3U_327:	dc.b 4	
00026AC8 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026ACD EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026AD2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00026AD7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00026ADC 03                         SME_qKg3U_33C:	dc.b 3	
00026ADD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026AE2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026AE7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00026AEC 04                         SME_qKg3U_34C:	dc.b 4	
00026AED EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026AF2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026AF7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00026AFC FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00026B01 03                         SME_qKg3U_361:	dc.b 3	
00026B02 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00026B07 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026B0C FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00026B11 02                         SME_qKg3U_371:	dc.b 2	
00026B12 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026B17 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026B1C 02                         SME_qKg3U_37C:	dc.b 2	
00026B1D F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026B22 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026B27 02                         SME_qKg3U_387:	dc.b 2	
00026B28 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026B2D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026B32 02                         SME_qKg3U_392:	dc.b 2	
00026B33 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00026B38 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00026B3D 04                         SME_qKg3U_39D:	dc.b 4	
00026B3E FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
00026B43 F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026B48 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026B4D 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00026B52 02                         SME_qKg3U_3B2:	dc.b 2	
00026B53 F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
00026B58 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026B5D 04                         SME_qKg3U_3BD:	dc.b 4	
00026B5E FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
00026B63 F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00026B68 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026B6D 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00026B72 02                         SME_qKg3U_3D2:	dc.b 2	
00026B73 F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
00026B78 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00026B7D 01                         SME_qKg3U_3DD:	dc.b 1	
00026B7E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026B83 01                         SME_qKg3U_3E3:	dc.b 1	
00026B84 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026B89 01                         SME_qKg3U_3E9:	dc.b 1	
00026B8A F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026B8F 01                         SME_qKg3U_3EF:	dc.b 1	
00026B90 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026B95 01                         SME_qKg3U_3F5:	dc.b 1	
00026B96 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026B9B 02                         SME_qKg3U_3FB:	dc.b 2	
00026B9C F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00026BA1 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
00026BA6 01                         SME_qKg3U_406:	dc.b 1	
00026BA7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026BAC 02                         SME_qKg3U_40C:	dc.b 2	
00026BAD EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00026BB2 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00026BB7 01                         SME_qKg3U_417:	dc.b 1	
00026BB8 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00026BBD 02                         SME_qKg3U_41D:	dc.b 2	
00026BBE ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00026BC3 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
00026BC8 04                         SME_qKg3U_428:	dc.b 4	
00026BC9 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00026BCE FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
00026BD3 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
00026BD8 0500 0010 E8               		dc.b 5, 0, 0, $10, $E8	
00026BDD 04                         SME_qKg3U_43D:	dc.b 4	
00026BDE F404 0000 FC               		dc.b $F4, 4, 0, 0, $FC	
00026BE3 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4	
00026BE8 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4	
00026BED 0400 000D EC               		dc.b 4, 0, 0, $D, $EC	
00026BF2 03                         SME_qKg3U_452:	dc.b 3	
00026BF3 EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00026BF8 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00026BFD F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
00026C02 03                         SME_qKg3U_462:	dc.b 3	
00026C03 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00026C08 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
00026C0D 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00026C12 03                         SME_qKg3U_472:	dc.b 3	
00026C13 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00026C18 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00026C1D 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026C22 02                         SME_qKg3U_482:	dc.b 2	
00026C23 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8	
00026C28 F40A 0800 00               		dc.b $F4, $A, 8, 0, 0	
00026C2D 03                         SME_qKg3U_48D:	dc.b 3	
00026C2E F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4	
00026C33 FC00 0008 04               		dc.b $FC, 0, 0, 8, 4	
00026C38 040C 0009 EC               		dc.b 4, $C, 0, 9, $EC	
00026C3D 03                         SME_qKg3U_49D:	dc.b 3	
00026C3E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00026C43 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00026C48 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00026C4D 03                         SME_qKg3U_4AD:	dc.b 3	
00026C4E E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0	
00026C53 0804 000C F8               		dc.b 8, 4, 0, $C, $F8	
00026C58 1000 000E F8               		dc.b $10, 0, 0, $E, $F8	
00026C5D 04                         SME_qKg3U_4BD:	dc.b 4	
00026C5E F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00026C63 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00026C68 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00026C6D F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00026C72 04                         SME_qKg3U_4D2:	dc.b 4	
00026C73 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00026C78 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00026C7D F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00026C82 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00026C87 05                         SME_qKg3U_4E7:	dc.b 5	
00026C88 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00026C8D F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00026C92 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00026C97 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00026C9C 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00026CA1 05                         SME_qKg3U_501:	dc.b 5	
00026CA2 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00026CA7 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00026CAC 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00026CB1 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00026CB6 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00026CBB 02                         SME_qKg3U_51B:	dc.b 2	
00026CBC ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026CC1 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00026CC6 03                         SME_qKg3U_526:	dc.b 3	
00026CC7 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00026CCC 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00026CD1 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00026CD6 02                         SME_qKg3U_536:	dc.b 2	
00026CD7 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00026CDC 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00026CE1 03                         SME_qKg3U_541:	dc.b 3	
00026CE2 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00026CE7 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00026CEC 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00026CF1 02                         SME_qKg3U_551:	dc.b 2	
00026CF2 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00026CF7 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00026CFC 03                         SME_qKg3U_55C:	dc.b 3	
00026CFD EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00026D02 0405 0009 F8               		dc.b 4, 5, 0, 9, $F8	
00026D07 E400 000D F8               		dc.b $E4, 0, 0, $D, $F8	
00026D0C 03                         SME_qKg3U_56C:	dc.b 3	
00026D0D E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00026D12 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00026D17 F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4	
00026D1C 05                         SME_qKg3U_57C:	dc.b 5	
00026D1D E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00026D22 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00026D27 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00026D2C 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
00026D31 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
00026D36 05                         SME_qKg3U_596:	dc.b 5	
00026D37 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00026D3C E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00026D41 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00026D46 080C 0010 F4               		dc.b 8, $C, 0, $10, $F4	
00026D4B 1000 0014 F4               		dc.b $10, 0, 0, $14, $F4	
00026D50 02                         SME_qKg3U_5B0:	dc.b 2	
00026D51 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00026D56 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
00026D5B 03                         SME_qKg3U_5BB:	dc.b 3	
00026D5C EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00026D61 F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0	
00026D66 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8	
00026D6B 01                         SME_qKg3U_5CB:	dc.b 1	
00026D6C F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00026D71 01                         SME_qKg3U_5D1:	dc.b 1	
00026D72 F406 0000 F8               		dc.b $F4, 6, 0, 0, $F8	
00026D77 01                         SME_qKg3U_5D7:	dc.b 1	
00026D78 F801 0000 FC               		dc.b $F8, 1, 0, 0, $FC	
00026D7D 03                         SME_qKg3U_5DD:	dc.b 3	
00026D7E F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4	
00026D83 FC05 0808 04               		dc.b $FC, 5, 8, 8, 4	
00026D88 0408 080C EC               		dc.b 4, 8, 8, $C, $EC	
00026D8D 03                         SME_qKg3U_5ED:	dc.b 3	
00026D8E F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00026D93 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00026D98 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00026D9D 03                         SME_qKg3U_5FD:	dc.b 3	
00026D9E F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC	
00026DA3 F801 000C 0C               		dc.b $F8, 1, 0, $C, $C	
00026DA8 080C 000E F4               		dc.b 8, $C, 0, $E, $F4	
00026DAD 03                         SME_qKg3U_60D:	dc.b 3	
00026DAE EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00026DB3 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00026DB8 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00026DBD 02                         SME_qKg3U_61D:	dc.b 2	
00026DBE F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00026DC3 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00026DC8 01                         SME_qKg3U_628:	dc.b 1	
00026DC9 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DCE 01                         SME_qKg3U_62E:	dc.b 1	
00026DCF F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DD4 01                         SME_qKg3U_634:	dc.b 1	
00026DD5 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DDA 01                         SME_qKg3U_63A:	dc.b 1	
00026DDB F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DE0 01                         SME_qKg3U_640:	dc.b 1	
00026DE1 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DE6 01                         SME_qKg3U_646:	dc.b 1	
00026DE7 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026DEC                            		even
00026DEC                            		even
00026DEC                            
00026DEC                            ; ---------------------------------------------------------------------------
00026DEC                            ; Uncompressed graphics	loading	array for Sonic
00026DEC                            ; ---------------------------------------------------------------------------
00026DEC                            SonicDynPLC:
00026DEC                            	include "_inc\Sonic dynamic pattern load cues.asm"
00026DEC                            ; ---------------------------------------------------------------------------
00026DEC                            ; Uncompressed graphics	loading	array for Sonic
00026DEC                            ; ---------------------------------------------------------------------------
00026DEC 0000                       		dc.w SonPLC_Blank-SonicDynPLC
00026DEE 0000                       		dc.w SonPLC_Stand-SonicDynPLC
00026DF0 0000                       		dc.w SonPLC_Wait1-SonicDynPLC
00026DF2 0000                       		dc.w SonPLC_Wait2-SonicDynPLC
00026DF4 0000                       		dc.w SonPLC_Wait3-SonicDynPLC
00026DF6 0000                       		dc.w SonPLC_LookUp-SonicDynPLC
00026DF8 0000                       		dc.w SonPLC_Walk11-SonicDynPLC
00026DFA 0000                       		dc.w SonPLC_Walk12-SonicDynPLC
00026DFC 0000                       		dc.w SonPLC_Walk13-SonicDynPLC
00026DFE 0000                       		dc.w SonPLC_Walk14-SonicDynPLC
00026E00 0000                       		dc.w SonPLC_Walk15-SonicDynPLC
00026E02 0000                       		dc.w SonPLC_Walk16-SonicDynPLC
00026E04 0000                       		dc.w SonPLC_Walk21-SonicDynPLC
00026E06 0000                       		dc.w SonPLC_Walk22-SonicDynPLC
00026E08 0000                       		dc.w SonPLC_Walk23-SonicDynPLC
00026E0A 0000                       		dc.w SonPLC_Walk24-SonicDynPLC
00026E0C 0000                       		dc.w SonPLC_Walk25-SonicDynPLC
00026E0E 0000                       		dc.w SonPLC_Walk26-SonicDynPLC
00026E10 0000                       		dc.w SonPLC_Walk31-SonicDynPLC
00026E12 0000                       		dc.w SonPLC_Walk32-SonicDynPLC
00026E14 0000                       		dc.w SonPLC_Walk33-SonicDynPLC
00026E16 0000                       		dc.w SonPLC_Walk34-SonicDynPLC
00026E18 0000                       		dc.w SonPLC_Walk35-SonicDynPLC
00026E1A 0000                       		dc.w SonPLC_Walk36-SonicDynPLC
00026E1C 0000                       		dc.w SonPLC_Walk41-SonicDynPLC
00026E1E 0000                       		dc.w SonPLC_Walk42-SonicDynPLC
00026E20 0000                       		dc.w SonPLC_Walk43-SonicDynPLC
00026E22 0000                       		dc.w SonPLC_Walk44-SonicDynPLC
00026E24 0000                       		dc.w SonPLC_Walk45-SonicDynPLC
00026E26 0000                       		dc.w SonPLC_Walk46-SonicDynPLC
00026E28 0000                       		dc.w SonPLC_Run11-SonicDynPLC
00026E2A 0000                       		dc.w SonPLC_Run12-SonicDynPLC
00026E2C 0000                       		dc.w SonPLC_Run13-SonicDynPLC
00026E2E 0000                       		dc.w SonPLC_Run14-SonicDynPLC
00026E30 0000                       		dc.w SonPLC_Run21-SonicDynPLC
00026E32 0000                       		dc.w SonPLC_Run22-SonicDynPLC
00026E34 0000                       		dc.w SonPLC_Run23-SonicDynPLC
00026E36 0000                       		dc.w SonPLC_Run24-SonicDynPLC
00026E38 0000                       		dc.w SonPLC_Run31-SonicDynPLC
00026E3A 0000                       		dc.w SonPLC_Run32-SonicDynPLC
00026E3C 0000                       		dc.w SonPLC_Run33-SonicDynPLC
00026E3E 0000                       		dc.w SonPLC_Run34-SonicDynPLC
00026E40 0000                       		dc.w SonPLC_Run41-SonicDynPLC
00026E42 0000                       		dc.w SonPLC_Run42-SonicDynPLC
00026E44 0000                       		dc.w SonPLC_Run43-SonicDynPLC
00026E46 0000                       		dc.w SonPLC_Run44-SonicDynPLC
00026E48 0000                       		dc.w SonPLC_Roll1-SonicDynPLC
00026E4A 0000                       		dc.w SonPLC_Roll2-SonicDynPLC
00026E4C 0000                       		dc.w SonPLC_Roll3-SonicDynPLC
00026E4E 0000                       		dc.w SonPLC_Roll4-SonicDynPLC
00026E50 0000                       		dc.w SonPLC_Roll5-SonicDynPLC
00026E52 0000                       		dc.w SonPLC_Warp1-SonicDynPLC
00026E54 0000                       		dc.w SonPLC_Warp2-SonicDynPLC
00026E56 0000                       		dc.w SonPLC_Warp3-SonicDynPLC
00026E58 0000                       		dc.w SonPLC_Warp4-SonicDynPLC
00026E5A 0000                       		dc.w SonPLC_Stop1-SonicDynPLC
00026E5C 0000                       		dc.w SonPLC_Stop2-SonicDynPLC
00026E5E 0000                       		dc.w SonPLC_Duck-SonicDynPLC
00026E60 0000                       		dc.w SonPLC_Balance1-SonicDynPLC
00026E62 0000                       		dc.w SonPLC_Balance2-SonicDynPLC
00026E64 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00026E66 0000                       		dc.w SonPLC_Float2-SonicDynPLC
00026E68 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00026E6A 0000                       		dc.w SonPLC_Float4-SonicDynPLC
00026E6C 0000                       		dc.w SonPLC_Spring-SonicDynPLC
00026E6E 0000                       		dc.w SonPLC_Hang1-SonicDynPLC
00026E70 0000                       		dc.w SonPLC_Hang2-SonicDynPLC
00026E72 0000                       		dc.w SonPLC_Leap1-SonicDynPLC
00026E74 0000                       		dc.w SonPLC_Leap2-SonicDynPLC
00026E76 0000                       		dc.w SonPLC_Push1-SonicDynPLC
00026E78 0000                       		dc.w SonPLC_Push2-SonicDynPLC
00026E7A 0000                       		dc.w SonPLC_Push3-SonicDynPLC
00026E7C 0000                       		dc.w SonPLC_Push4-SonicDynPLC
00026E7E 0000                       		dc.w SonPLC_Slide-SonicDynPLC
00026E80 0000                       		dc.w SonPLC_BblUnk-SonicDynPLC
00026E82 0000                       		dc.w SonPLC_Death1-SonicDynPLC
00026E84 0000                       		dc.w SonPLC_Drown-SonicDynPLC
00026E86 0000                       		dc.w SonPLC_Burnt-SonicDynPLC
00026E88 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC
00026E8A 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC
00026E8C 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC
00026E8E 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC
00026E90 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC
00026E92 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00026E94 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00026E96 0000                       		dc.w SonPLC_Injury1-SonicDynPLC
00026E98 0000                       		dc.w SonPLC_Bubble-SonicDynPLC
00026E9A 0000                       		dc.w SonPLC_Injury2-SonicDynPLC
00026E9C 0000                       		dc.w SonPLC_SpinDash1-SonicDynPLC	;58
00026E9E 0000                       		dc.w SonPLC_SpinDash2-SonicDynPLC	;59
00026EA0 0000                       		dc.w SonPLC_SpinDash3-SonicDynPLC	;5A
00026EA2 0000                       		dc.w SonPLC_SpinDash4-SonicDynPLC	;5B
00026EA4 0000                       		dc.w SonPLC_SpinDash5-SonicDynPLC	;5C
00026EA6 0000                       		dc.w SonPLC_SpinDash6-SonicDynPLC	;5D
00026EA8 00                         SonPLC_Blank:	dc.b 0
00026EA9 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
00026EB2 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
00026EB9 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
00026EC0 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
00026EC7 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
00026ECE 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
00026ED7 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
00026EDC 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
00026EE1 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
00026EEA 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
00026EEF 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
00026EF6 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
00026F01 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
00026F0E 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
00026F17 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
00026F22 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
00026F2B 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
00026F36 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
00026F3F 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
00026F44 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
00026F49 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
00026F52 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
00026F57 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
00026F5E 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
00026F6B 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
00026F78 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
00026F81 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
00026F8C 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
00026F95 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
00026FA0 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
00026FA5 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
00026FAA 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
00026FAF 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
00026FB4 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
00026FBD 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
00026FC4 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
00026FCD 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
00026FD4 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
00026FD9 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
00026FDE 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
00026FE3 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
00026FE8 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
00026FF1 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
00026FF6 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
00026FFF 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
00027004 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
00027007 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
0002700A 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
0002700D 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
00027010 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
00027013 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
00027018 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
0002701B 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
00027020 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
00027023 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
00027028 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
00027031 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
0002703A 0323 5B23 5EF3 61          SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
00027041 03B3 7173 7D00 71          SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
00027048 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
0002704F 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
00027052 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
00027059 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
00027060 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
00027067 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
00027070 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
00027079 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
00027084 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
0002708F 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
00027094 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
0002709B 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
000270A0 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
000270A7 0254 40B4 46               SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
000270AC 0384 5234 5B04 5F          SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
000270B3 0374 6014 68B4 6A          SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
000270BA 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
000270C5 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
000270D0 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
000270D5 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
000270DC 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
000270DF 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
000270E2 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
000270E5 03B4 D214 DE34 E0          SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
000270EC 0354 E4B4 EA10 6D          SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
000270F3 02F4 F625 06               SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
000270F8 01F5 10                    SonPLC_SpinDash1:	dc.b 1, $F5, $10	; 01 F 510
000270FB 01F5 20                    SonPLC_SpinDash2:	dc.b 1, $F5, $20	; 01 F 520
000270FE 01F5 30                    SonPLC_SpinDash3:	dc.b 1, $F5, $30	; 01 F 530
00027101 01F5 40                    SonPLC_SpinDash4:	dc.b 1, $F5, $40	; 01 F 540
00027104 01F5 50                    SonPLC_SpinDash5:	dc.b 1, $F5, $50	; 01 F 550
00027107 01F5 60                    SonPLC_SpinDash6:	dc.b 1, $F5, $60	; 01 F 560
0002710A                            		even
0002710A                            		even
0002710A                            
0002710A                            ; ---------------------------------------------------------------------------
0002710A                            ; Uncompressed graphics
0002710A                            ; ---------------------------------------------------------------------------
0002710A                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00031F40                            		even
00031F40                            Art_ASCII:	incbin	artunc\ascii.bin	; ascii font
00032AA0                            		even
00032AA0                            ; ---------------------------------------------------------------------------
00032AA0                            ; Compressed graphics - various
00032AA0                            ; ---------------------------------------------------------------------------
00032AA0                            Nem_Title:	incbin	artnem\8x8titlebg.bin	; Title Screen's Bg
000333D4                            		even
000333D4                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000334D8                            		even
000334D8                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00033512                            		even
00033512                            Nem_Shield:	incbin	artnem\shield.bin	; shield
000336A8                            		even
000336A8                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003375E                            		even
0003375E                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00033868                            		even
00033868                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
000338BA                            		even
000338BA                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00033B02                            		even
00033B02                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00033C88                            		even
00033C88                            Nem_LS:		incbin	artnem\ls.bin		; level select sprite
00033DC8 00                         		even
00033DC8                            ; ---------------------------------------------------------------------------
00033DC8                            ; Sprite mappings - walls of the special stage
00033DC8                            ; ---------------------------------------------------------------------------
00033DC8                            Map_SSWalls:
00033DC8                            	include "_maps\SSwalls.asm"
00033DC8                            ; ---------------------------------------------------------------------------
00033DC8                            ; Sprite mappings - walls of the special stage
00033DC8                            ; ---------------------------------------------------------------------------
00033DC8 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00033DCC 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00033DD0 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00033DD4 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00033DD8 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00033DDC 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00033DE0 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00033DE4 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00033DE8 01                         byte_2C584:	dc.b 1
00033DE9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00033DEE 01                         byte_2C58A:	dc.b 1
00033DEF F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00033DF4 01                         byte_2C590:	dc.b 1
00033DF5 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00033DFA 01                         byte_2C596:	dc.b 1
00033DFB F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00033E00 01                         byte_2C59C:	dc.b 1
00033E01 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00033E06 01                         byte_2C5A2:	dc.b 1
00033E07 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00033E0C 01                         byte_2C5A8:	dc.b 1
00033E0D F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00033E12 01                         byte_2C5AE:	dc.b 1
00033E13 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00033E18 01                         byte_2C5B4:	dc.b 1
00033E19 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00033E1E 01                         byte_2C5BA:	dc.b 1
00033E1F F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00033E24 01                         byte_2C5C0:	dc.b 1
00033E25 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00033E2A 01                         byte_2C5C6:	dc.b 1
00033E2B F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00033E30 01                         byte_2C5CC:	dc.b 1
00033E31 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00033E36 01                         byte_2C5D2:	dc.b 1
00033E37 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00033E3C 01                         byte_2C5D8:	dc.b 1
00033E3D F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00033E42 01                         byte_2C5DE:	dc.b 1
00033E43 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00033E48                            		even
00033E48                            		even
00033E48                            ; ---------------------------------------------------------------------------
00033E48                            ; Compressed graphics - special stage
00033E48                            ; ---------------------------------------------------------------------------
00033E48                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00034780                            		even
00034780                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
000348B4                            		even
000348B4                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00035544                            		even
00035544                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00035844                            		even
00035844                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00035D38                            		even
00035D38                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00035E26                            		even
00035E26                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00035EF6                            		even
00035EF6                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00035FEC                            		even
00035FEC                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003604A                            		even
0003604A                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000360DC                            		even
000360DC                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0003619E                            		even
0003619E                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0003626C                            		even
0003626C                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00036338                            		even
00036338                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00036400                            		even
00036400                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000364CA                            		even
000364CA                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0003659A                            		even
0003659A                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0003678E                            		even
0003678E                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
000368F6                            		even
000368F6                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000369A6                            		even
000369A6                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00036A80                            		even
00036A80                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00036B04                            		even
00036B04                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00036C82                            		even
00036C82                            ; ---------------------------------------------------------------------------
00036C82                            ; Compressed graphics - GHZ stuff
00036C82                            ; ---------------------------------------------------------------------------
00036C82                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00036CCC                            		even
00036CCC                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00036DE6                            		even
00036DE6                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00036ED2                            		even
00036ED2                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00036F1A                            		even
00036F1A                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000370B8                            		even
000370B8                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00037134                            		even
00037134                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00037348                            		even
00037348                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00037474                            		even
00037474                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
000375F0 00                         		even
000375F0                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003768E                            		even
0003768E                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
000376EE                            		even
000376EE                            ; ---------------------------------------------------------------------------
000376EE                            ; Compressed graphics - LZ stuff
000376EE                            ; ---------------------------------------------------------------------------
000376EE                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00037812                            		even
00037812                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00038006                            		even
00038006                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00038186                            		even
00038186                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
000382F0                            		even
000382F0                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00038946                            		even
00038946                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
000389FC                            		even
000389FC                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00038A9E                            		even
00038A9E                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00038BFA                            		even
00038BFA                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00038C5E                            		even
00038C5E                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00038DB0                            		even
00038DB0                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00039292                            		even
00039292                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00039402                            		even
00039402                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000396BA                            		even
000396BA                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
000397F2                            		even
000397F2                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003991C                            		even
0003991C                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00039A2C                            		even
00039A2C                            ; ---------------------------------------------------------------------------
00039A2C                            ; Compressed graphics - MZ stuff
00039A2C                            ; ---------------------------------------------------------------------------
00039A2C                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00039CBA                            		even
00039CBA                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00039D78                            		even
00039D78                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00039E30                            		even
00039E30                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00039E84                            		even
00039E84                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003A162                            		even
0003A162                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0003AA78                            		even
0003AA78                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003ABDC                            		even
0003ABDC                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0003AC64                            		even
0003AC64                            ; ---------------------------------------------------------------------------
0003AC64                            ; Compressed graphics - SLZ stuff
0003AC64                            ; ---------------------------------------------------------------------------
0003AC64                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003AEA0                            		even
0003AEA0                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0003AFE6                            		even
0003AFE6                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003B22A                            		even
0003B22A                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003B28C                            		even
0003B28C                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003B36E                            		even
0003B36E                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003B550                            		even
0003B550                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003B65C                            		even
0003B65C                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003B700                            		even
0003B700                            ; ---------------------------------------------------------------------------
0003B700                            ; Compressed graphics - SYZ stuff
0003B700                            ; ---------------------------------------------------------------------------
0003B700                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003B864                            		even
0003B864                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003B8C6                            		even
0003B8C6                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003B9A8                            		even
0003B9A8                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003BC36                            		even
0003BC36                            ; ---------------------------------------------------------------------------
0003BC36                            ; Compressed graphics - SBZ stuff
0003BC36                            ; ---------------------------------------------------------------------------
0003BC36                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003BC8A                            		even
0003BC8A                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003BF26                            		even
0003BF26                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003C12A                            		even
0003C12A                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003C2C8                            		even
0003C2C8                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003C5F8                            		even
0003C5F8                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003C7D6                            		even
0003C7D6                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003C82E                            		even
0003C82E                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003C9AE                            		even
0003C9AE                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003CAAC                            		even
0003CAAC                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003CC38                            		even
0003CC38                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003CC88                            		even
0003CC88                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003CCE0                            		even
0003CCE0                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003CDDC                            		even
0003CDDC                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003CEF2                            		even
0003CEF2                            ; ---------------------------------------------------------------------------
0003CEF2                            ; Compressed graphics - enemies
0003CEF2                            ; ---------------------------------------------------------------------------
0003CEF2                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003D2B2                            		even
0003D2B2                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003D7A0                            		even
0003D7A0                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003DB46                            		even
0003DB46                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003DD2E                            		even
0003DD2E                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003E418                            		even
0003E418                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003E680                            		even
0003E680                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003E90A                            		even
0003E90A                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003EE2E                            		even
0003EE2E                            Nem_Motofusion:	incbin	artnem\motofusion.bin	; moto fusion
0003F2A8 00                         		even
0003F2A8                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003F8C6                            		even
0003F8C6                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003FCAE                            		even
0003FCAE                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003FFAA                            		even
0003FFAA                            Nem_Splats:	incbin	artnem\splats.bin	; splats
000401F2                            		even
000401F2                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0004048A                            		even
0004048A                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
00040668                            		even
00040668                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
000407D2                            		even
000407D2                            ; ---------------------------------------------------------------------------
000407D2                            ; Graphics - various
000407D2                            ; ---------------------------------------------------------------------------
000407D2                            Unc_Surf:	incbin	artunc\obj10.bin
00042832                            		even
00042832                            Nem_GTA:	incbin	artnem\GotThrough.bin
00042D88                            		even
00042D88                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00043314                            		even
00043314                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00043454                            		even
00043454                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00043510                            		even
00043510                            Nem_Ring:	incbin	artnem\rings.bin	; rings
000435C2                            		even
000435C2                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
00043A6C                            		even
00043A6C                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
000440D2                            		even
000440D2                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
00044182                            		even
00044182                            Nem_Coins:	incbin	artnem\obj02.bin	; points from destroyed enemy or object
000441EA 00                         		even
000441EA                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0004437C                            		even
0004437C                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0004448C 00                         		even
0004448C                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
00044564 00                         		even
00044564                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
000449E0                            		even
000449E0                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
00044AAC 00                         		even
00044AAC                            Unc_BigFlash:	incbin	artunc\rngflash.bin	; flash from giant ring
0004552C                            		even
0004552C                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0004582E                            		even
0004582E                            ; ---------------------------------------------------------------------------
0004582E                            ; Compressed graphics - continue screen
0004582E                            ; ---------------------------------------------------------------------------
0004582E                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00045ADE                            		even
00045ADE                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00045D18                            		even
00045D18                            ; ---------------------------------------------------------------------------
00045D18                            ; Compressed graphics - animals
00045D18                            ; ---------------------------------------------------------------------------
00045D18                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00045D7E 00                         		even
00045D7E                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00045DE4 00                         		even
00045DE4                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00045E4A 00                         		even
00045E4A                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00045EB0 00                         		even
00045EB0                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00045F16 00                         		even
00045F16                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00045F6C 00                         		even
00045F6C                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00045FD2 00                         		even
00045FD2                            ; ---------------------------------------------------------------------------
00045FD2                            ; Compressed graphics - primary patterns and block mappings
00045FD2                            ; ---------------------------------------------------------------------------
00045FD2                            Blk16_Title:	incbin	map16\titlebg.bin
00046210                            		even
00046210                            Blk256_Title:	incbin	map256\titlebg.bin
000463B4                            		even
000463B4                            Blk16_GHZ:	incbin	map16\ghz.bin
000469B2                            		even
000469B2                            Blk16_menu:	incbin	map16\menu.bin
000469D4                            		even
000469D4                            Nem_Menu:	incbin	artnem\8x8menu.bin
00046B24                            		even
00046B24                            Nem_GHZ_boss:	incbin	artnem\8x8ghzboss.bin
00047184                            		even
00047184                            Nem_GHZ_1st:	incbin	artnem\8x8ghz.bin	; GHZ primary patterns
0004A020                            		even
0004A020                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
0004B3C8                            		even
0004B3C8                            Blk256_GHZ:	incbin	map256\ghz.bin
0004C05E                            		even
0004C05E                            Blk256_Menu:	incbin	map256\menu.bin
0004C2CE                            		even
0004C2CE                            Blk16_LZ:	incbin	map16\lz.bin
0004C408                            		even
0004C408                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004E1C0                            		even
0004E1C0                            Blk256_LZ:	incbin	map256\lz.bin
0004E394                            		even
0004E394                            Blk16_MZ:	incbin	map16\mz.bin
0004EB12                            		even
0004EB12                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
00051266                            		even
00051266                            Blk256_MZ:	incbin	map256\mz.bin
00052D6A                            		even
00052D6A                            Blk16_SLZ:	incbin	map16\slz.bin
00052EC4                            		even
00052EC4                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
000538CE                            		even
000538CE                            Blk256_SLZ:	incbin	map256\slz.bin
00053AEA                            		even
00053AEA                            Blk16_SYZ:	incbin	map16\syz.bin
00053CC6                            		even
00053CC6                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000545CE                            		even
000545CE                            Blk256_SYZ:	incbin	map256\syz.bin
000548EE                            		even
000548EE                            Blk16_SBZ:	incbin	map16\sbz.bin
000556AC                            		even
000556AC                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
00057D92                            		even
00057D92                            Blk256_SBZ:	incbin	map256\sbz.bin
0005AA64                            		even
0005AA64                            Blk16_ABZ:	incbin	map16\abz.bin
0005AC88                            		even
0005AC88                            Nem_ABZ:	incbin	artnem\8x8abz.bin	; ABZ primary patterns
0005B50A                            		even
0005B50A                            Blk256_ABZ:	incbin	map256\abz.bin
0005B6A8                            		even
0005B6A8                            Blk16_IC:	incbin	map16\ic.bin
0005C02C                            		even
0005C02C                            Nem_IC:		incbin	artnem\8x8ic.bin	; IC primary patterns
0005FFF8                            		even
0005FFF8                            Blk256_IC:	incbin	map256\ic.bin
00062112                            		even
00062112                            Blk16_SZ:	incbin	map16\sz.bin
00062A96                            		even
00062A96                            Nem_sz:		incbin	artnem\8x8sz.bin	; SZ primary patterns
00066A62                            		even
00066A62                            Blk256_SZ:	incbin	map256\sz.bin
00068B4A                            		even
00068B4A                            ; ---------------------------------------------------------------------------
00068B4A                            ; Graphics - bosses and ending sequence
00068B4A                            ; ---------------------------------------------------------------------------
00068B4A                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000693AE                            		even
000693AE                            Unc_Hits:	incbin	artunc\bosshits.bin
000695CE                            		even
000695CE                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000698B8                            		even
000698B8                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006A13C                            		even
0006A13C                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006A968                            		even
0006A968                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006B0D0                            		even
0006B0D0                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006B650                            		even
0006B650                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0006B770                            		even
0006B770                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006B96E                            		even
0006B96E                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006CB4C                            		even
0006CB4C                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006D490                            		even
0006D490                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006D866                            		even
0006D866                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006DDF6                            		even
0006DDF6                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006E07E                            		even
0006E07E                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006E67C                            		even
0006E67C                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006E904                            		even
0006E904                            		incbin	misc\padding2.bin
0006EA08                            		even
0006EA08                            ; ---------------------------------------------------------------------------
0006EA08                            ; Collision data
0006EA08                            ; ---------------------------------------------------------------------------
0006EA08                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006EB08                            		even
0006EB08                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006FB08                            		even
0006FB08                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00070B08                            		even
00070B08                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00070C66                            		even
00070C66                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00070D02                            		even
00070D02                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00070E7A                            		even
00070E7A                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00070ED6                            		even
00070ED6                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00070F3C                            		even
00070F3C                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00071198                            		even
00071198                            Col_ABZ:	incbin	collide\abz.bin		; ABZ index
0007120A                            		even
0007120A                            Col_IC:		incbin	collide\IC.bin		; IC index
0007147A                            		even
0007147A                            Col_SZ:		incbin	collide\SZ.bin		; SZ index
000716EA                            		even
000716EA                            ; ---------------------------------------------------------------------------
000716EA                            ; Special layouts
000716EA                            ; ---------------------------------------------------------------------------
000716EA                            SS_1:		incbin	sslayout\1.bin
00071960 00                         		even
00071960                            SS_2:		incbin	sslayout\2.bin
00071D72                            		even
00071D72                            SS_3:		incbin	sslayout\3.bin
000720CE                            		even
000720CE                            SS_4:		incbin	sslayout\4.bin
000725A8                            		even
000725A8                            SS_5:		incbin	sslayout\5.bin
00072A7A                            		even
00072A7A                            SS_6:		incbin	sslayout\6.bin
00072D8A                            		even
00072D8A                            ; ---------------------------------------------------------------------------
00072D8A                            ; Animated uncompressed graphics
00072D8A                            ; ---------------------------------------------------------------------------
00072D8A                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00072F8A                            		even
00072F8A                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0007338A                            		even
0007338A                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0007380A                            		even
0007380A                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00073B0A                            		even
00073B0A                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0007410A                            		even
0007410A                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0007440A                            		even
0007440A                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00074E8A                            		even
00074E8A                            
00074E8A                            ; ---------------------------------------------------------------------------
00074E8A                            ; Level	layout index
00074E8A                            ; ---------------------------------------------------------------------------
00074E8A 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00074E90 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00074E96 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00074E9C 0000 0000 0000             		dc.w Level_GHZ4-Level_Index, Level_GHZbg-Level_Index, byte_68F88-Level_Index
00074EA2 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00074EA8 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00074EAE 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00074EB4 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00074EBA 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00074EC0 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00074EC6 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00074ECC 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00074ED2 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00074ED8 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00074EDE 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00074EE4 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00074EEA 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00074EF0 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00074EF6 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00074EFC 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00074F02 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00074F08 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00074F0E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00074F14 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00074F1A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00074F20 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00074F26 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00074F2C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00074F32 0000 0000 0000             		dc.w Level_ABZ1-Level_Index, Level_ABZbg-Level_Index, byte_6A320-Level_Index
00074F38 0000 0000 0000             		dc.w Level_ABZ2-Level_Index, Level_ABZbg-Level_Index, byte_6A320-Level_Index
00074F3E 0000 0000 0000             		dc.w Level_ABZ3-Level_Index, Level_ABZbg-Level_Index, byte_6A320-Level_Index
00074F44 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00074F4A 0000 0000 0000             		dc.w Level_IC1-Level_Index, Level_ICbg-Level_Index, byte_6A320-Level_Index
00074F50 0000 0000 0000             		dc.w Level_IC2-Level_Index, Level_ICbg-Level_Index, byte_6A320-Level_Index
00074F56 0000 0000 0000             		dc.w Level_IC3-Level_Index, Level_ICbg-Level_Index, byte_6A320-Level_Index
00074F5C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00074F62 0000 0000 0000             		dc.w Level_SZ1-Level_Index, Level_SZbg-Level_Index, byte_6A320-Level_Index
00074F68 0000 0000 0000             		dc.w Level_SZ2-Level_Index, Level_SZbg-Level_Index, byte_6A320-Level_Index
00074F6E 0000 0000 0000             		dc.w Level_SZ3-Level_Index, Level_SZbg-Level_Index, byte_6A320-Level_Index
00074F74 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00074F7A                            Level_GHZ1:	incbin	levels\ghz1.bin
00075054                            		even
00075054 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00075058                            Level_GHZ2:	incbin	levels\ghz2.bin
0007507E                            		even
0007507E 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00075082                            Level_GHZ3:	incbin	levels\ghz3.bin
00075098                            		even
00075098                            Level_GHZ4:	incbin	levels\ghz4.bin
000750AE                            		even
000750AE                            Level_GHZbg:	incbin	levels\ghzbg.bin
00075150                            		even
00075150 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00075154 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00075158                            
00075158                            Level_LZ1:	incbin	levels\lz1.bin
0007516E                            		even
0007516E                            Level_LZbg:	incbin	levels\lzbg.bin
000751AE                            		even
000751AE 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000751B2                            Level_LZ2:	incbin	levels\lz2.bin
0007524C                            		even
0007524C 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00075250                            Level_LZ3:	incbin	levels\lz3.bin
0007536A                            		even
0007536A 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007536E                            Level_SBZ3:	incbin	levels\sbz3.bin
00075384                            		even
00075384 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00075388                            
00075388                            Level_MZ1:	incbin	levels\mz1.bin
00075426                            		even
00075426                            Level_MZ1bg:	incbin	levels\mz1bg.bin
000754A0                            		even
000754A0                            Level_MZ2:	incbin	levels\mz2.bin
00075544                            		even
00075544                            Level_MZ2bg:	incbin	levels\mz2bg.bin
000755D6                            		even
000755D6 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
000755DA                            Level_MZ3:	incbin	levels\mz3.bin
000756BC                            		even
000756BC                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00075760                            		even
00075760 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00075764 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00075768                            
00075768                            Level_SLZ1:	incbin	levels\slz1.bin
00075852                            		even
00075852                            Level_SLZbg:	incbin	levels\slzbg.bin
000758CC                            		even
000758CC                            Level_SLZ2:	incbin	levels\slz2.bin
000759BC                            		even
000759BC                            Level_SLZ3:	incbin	levels\slz3.bin
00075AD6                            		even
00075AD6 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00075ADA                            
00075ADA                            Level_SYZ1:	incbin	levels\syz1.bin
00075B96                            		even
00075B96                            Level_SYZbg:	incbin	levels\syzbg.bin
00075BD0                            		even
00075BD0 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00075BD4                            Level_SYZ2:	incbin	levels\syz2.bin
00075CD8                            		even
00075CD8 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00075CDC                            Level_SYZ3:	incbin	levels\syz3.bin
00075E36                            		even
00075E36 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00075E3A 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00075E3E                            
00075E3E                            Level_SBZ1:	incbin	levels\sbz1.bin
00075EA0                            		even
00075EA0                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00075EDE                            		even
00075EDE                            Level_SBZ2:	incbin	levels\sbz2.bin
00075EF4                            		even
00075EF4                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00075F0A                            		even
00075F0A 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00075F0E 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00075F12                            Level_End:	incbin	levels\ending.bin
00075F32                            		even
00075F32 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00075F36                            Level_ABZ1:	incbin	levels\abz1.bin
00075FA8                            		even
00075FA8                            Level_ABZ2:	incbin	levels\abz2.bin
0007604A                            		even
0007604A                            Level_ABZ3:	incbin	levels\abz3.bin
0007612C                            		even
0007612C                            Level_ABZbg:	incbin	levels\abzbg.bin
000761F6                            		even
000761F6                            Level_IC1:	incbin	levels\ic1.bin
00076308                            		even
00076308                            Level_IC2:	incbin	levels\ic2.bin
000763F8                            		even
000763F8                            Level_IC3:	incbin	levels\ic3.bin
00076512                            		even
00076512                            Level_ICbg:	incbin	levels\icbg.bin
0007658C                            		even
0007658C                            Level_SZ1:	incbin	levels\SZ1.bin
0007669E                            		even
0007669E                            Level_SZ2:	incbin	levels\SZ2.bin
000767B0                            		even
000767B0                            Level_SZ3:	incbin	levels\SZ3.bin
000768C2                            		even
000768C2                            Level_SZbg:	incbin	levels\SZbg.bin
0007693C                            		even
0007693C                            ; ---------------------------------------------------------------------------
0007693C                            ; Animated uncompressed giant ring graphics
0007693C                            ; ---------------------------------------------------------------------------
0007693C                            Art_BigRing:	incbin	artunc\bigring.bin
0007757C                            		even
0007757C                            
0007757C                            		incbin	misc\padding3.bin
00077618                            		even
00077618                            
00077618                            ; ---------------------------------------------------------------------------
00077618                            ; Sprite locations index
00077618                            ; ---------------------------------------------------------------------------
00077618 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007761C 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077620 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077624 0000 0000                  		dc.w ObjPos_GHZ4-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077628 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007762C 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077630 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077634 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077638 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007763C 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077640 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077644 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077648 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007764C 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077650 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077654 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077658 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007765C 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077660 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077664 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077668 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007766C 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077670 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077674 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077678 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007767C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077680 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077684 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077688 0000 0000                  		dc.w ObjPos_ABZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007768C 0000 0000                  		dc.w ObjPos_ABZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077690 0000 0000                  		dc.w ObjPos_ABZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077694 0000 0000                  		dc.w ObjPos_ABZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00077698 0000 0000                  		dc.w ObjPos_IC1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007769C 0000 0000                  		dc.w ObjPos_IC2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000776A0 0000 0000                  		dc.w ObjPos_IC3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000776A4 0000 0000                  		dc.w ObjPos_IC1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000776A8 0000 0000                  		dc.w ObjPos_SZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000776AC 0000 0000                  		dc.w ObjPos_SZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000776B0 0000 0000                  		dc.w ObjPos_SZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000776B4 0000 0000                  		dc.w ObjPos_SZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000776B8                            
000776B8                            ObjPos_LZxpf_Index:
000776B8 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
000776BC 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
000776C0 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
000776C4 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
000776C8 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000776CE                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00077710                            		even
00077710                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00077740                            		even
00077740                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00077746                            		even
00077746                            ObjPos_GHZ4:	incbin	objpos\ghz4.bin
00077764                            		even
00077764                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007776A                            		even
0007776A                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00077AAC                            		even
00077AAC                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007808E                            		even
0007808E                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00078094                            		even
00078094                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000780C6                            		even
000780C6                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000780F8                            		even
000780F8                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007812A                            		even
0007812A                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007815C                            		even
0007815C                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000781A6                            		even
000781A6                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000781E4                            		even
000781E4                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00078550                            		even
00078550                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000789FA                            		even
000789FA                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00078F70                            		even
00078F70                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00078F7C                            		even
00078F7C                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000793E4                            		even
000793E4                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000799C6                            		even
000799C6                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00079E40                            		even
00079E40                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0007A3AA                            		even
0007A3AA                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0007A9B0                            		even
0007A9B0                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007AA82                            		even
0007AA82                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007AA88                            		even
0007AA88                            ObjPos_FZ:	incbin	objpos\fz.bin
0007AA9A                            		even
0007AA9A                            ObjPos_End:	incbin	objpos\ending.bin
0007ABF6                            		even
0007ABF6                            ObjPos_ABZ1:	incbin	objpos\abz1.bin
0007AC08                            		even
0007AC08                            ObjPos_ABZ2:	incbin	objpos\abz2.bin
0007AC0E                            		even
0007AC0E                            ObjPos_ABZ3:	incbin	objpos\abz3.bin
0007B184                            		even
0007B184                            ObjPos_IC1:	incbin	objpos\ic1.bin
0007B68E                            		even
0007B68E                            ObjPos_IC2:	incbin	objpos\ic2.bin
0007BAC0                            		even
0007BAC0                            ObjPos_IC3:	incbin	objpos\ic3.bin
0007C0A2                            		even
0007C0A2                            ObjPos_SZ1:	incbin	objpos\sz1.bin
0007C0EA                            		even
0007C0EA                            ObjPos_SZ2:	incbin	objpos\sz2.bin
0007C5F4                            		even
0007C5F4                            ObjPos_SZ3:	incbin	objpos\sz3.bin
0007CAFE                            		even
0007CAFE FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007CB04                            ; ---------------------------------------------------------------------------
0007CB04                            		incbin	misc\padding4.bin
0007D12E                            		even
0007D12E                            
0007D12E 0000                       		align $10
0007D130 0000 0000                  Go_SoundTypes:		dc.l SoundTypes		; XREF: Sound_Play
0007D134 0000 0000                  Go_SoundD0:		dc.l SoundD0Index	; XREF: Sound_D0toDF
0007D138 0000 0000                  Go_MusicIndex:		dc.l MusicIndex		; XREF: Sound_81to9F
0007D13C 0000 0000                  Go_MusicIndex_Xul:	dc.l MusicIndex_Xul	; XREF: Sound_81to9F
0007D140 0000 0000                  Go_MusicIndexFF:	dc.l MusicIndex_E5plus		; XREF: Sound_81to9F
0007D144 0000 0000                  Go_MusicIndex00:	dc.l MusicIndex_51toXX
0007D148 0000 0000                  Go_SoundIndex:		dc.l SoundIndex		; XREF: Sound_A0toCF
0007D14C 0000 0000                  off_719A0:		dc.l byte_71A94		; XREF: Sound_81to9F
0007D150 0000 0000                  Go_PSGIndex:		dc.l PSG_Index		; XREF: s
0007D154                            ; ---------------------------------------------------------------------------
0007D154                            ; PSG instruments used in music
0007D154                            ; ---------------------------------------------------------------------------
0007D154 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007D160 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007D16C 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007D178                            PSG1:		incbin	sound\psg1.bin
0007D18F                            PSG2:		incbin	sound\psg2.bin
0007D196                            PSG3:		incbin	sound\psg3.bin
0007D1A7                            PSG4:		incbin	sound\psg4.bin
0007D1B2                            PSG6:		incbin	sound\psg6.bin
0007D1C1                            PSG5:		incbin	sound\psg5.bin
0007D1EB                            PSG7:		incbin	sound\psg7.bin
0007D207                            PSG8:		incbin	sound\psg8.bin
0007D22F                            PSG9:		incbin	sound\psg9.bin
0007D240                            
0007D240 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007D248                            ; ---------------------------------------------------------------------------
0007D248                            ; Music	Pointers
0007D248                            ; ---------------------------------------------------------------------------
0007D248 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0007D250 0000 0000 0000 0000        		dc.l Music83, Music84
0007D258 0000 0000 0000 0000        		dc.l Music85, Music86
0007D260 0000 0000 0000 0000        		dc.l Music87, Music88
0007D268 0000 0000 0000 0000        		dc.l Music89, Music96
0007D270 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007D278 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007D280 0000 0000 0000 0000        		dc.l Music8F, Music90
0007D288 0000 0000 0000 0000        		dc.l Music91, Music92
0007D290 0000 0000 0000 0000        		dc.l Music93, Music94
0007D298 0000 0000 0000 0000        		dc.l Music95, Music96
0007D2A0 0000 0000 0000 0000        		dc.l Music98, Music98
0007D2A8 0000 0000 0000 0000        		dc.l Music99, Music9A
0007D2B0 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007D2B8 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007D2C0 0000 0000                  		dc.l Music9F
0007D2C4                            ; ---------------------------------------------------------------------------
0007D2C4                            ; Music	Pointers (Xulpico screen)
0007D2C4                            ; ---------------------------------------------------------------------------
0007D2C4 0000 0000 0000 0000        MusicIndex_Xul:	dc.l Music81, Music82
0007D2CC 0000 0000 0000 0000        		dc.l Music83, Music84
0007D2D4 0000 0000 0000 0000        		dc.l Music85, Music86
0007D2DC 0000 0000 0000 0000        		dc.l Music87, Music88
0007D2E4 0000 0000 0000 0000        		dc.l Music89, Music8A
0007D2EC 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007D2F4 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007D2FC 0000 0000 0000 0000        		dc.l Music8F, Music90
0007D304 0000 0000 0000 0000        		dc.l Music91, Music92
0007D30C 0000 0000 0000 0000        		dc.l Music93, Music94
0007D314 0000 0000 0000 0000        		dc.l Music95, Music96
0007D31C 0000 0000 0000 0000        		dc.l Music97, Music98
0007D324 0000 0000 0000 0000        		dc.l Music99, Music9A
0007D32C 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007D334 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007D33C 0000 0000                  		dc.l Music9F
0007D340                            ; ---------------------------------------------------------------------------
0007D340                            ; Music	Pointers  01 to XX
0007D340                            ; ---------------------------------------------------------------------------
0007D340 0000 0000 0000 0000        MusicIndex_51toXX:	dc.l Music01, Music02
0007D348 0000 0000 0000 0000        		dc.l Music03, Music04
0007D350 0000 0000 0000 0000        		dc.l Music05, Music06
0007D358 0000 0000 0000 0000        		dc.l Music07, Music08
0007D360 0000 0000 0000 0000        		dc.l Music09, Music0A
0007D368 0000 0000 0000 0000        		dc.l Music0B, Music0C
0007D370 0000 0000 0000 0000        		dc.l Music0D, Music0E
0007D378 0000 0000 0000 0000        		dc.l Music0F, Music10
0007D380 0000 0000 0000 0000        		dc.l Music11, Music12
0007D388 0000 0000 0000 0000        		dc.l Music13, Music14
0007D390 0000 0000 0000 0000        		dc.l Music15, Music16
0007D398 0000 0000 0000 0000        		dc.l Music17, Music18
0007D3A0 0000 0000 0000 0000        		dc.l Music19, Music1A
0007D3A8 0000 0000 0000 0000        		dc.l Music1B, Music1C
0007D3B0 0000 0000 0000 0000        		dc.l Music1D, Music1E
0007D3B8 0000 0000 0000 0000        		dc.l Music1F, Music20
0007D3C0 0000 0000 0000 0000        		dc.l Music21, Music22
0007D3C8 0000 0000 0000 0000        		dc.l Music23, Music24
0007D3D0 0000 0000 0000 0000        		dc.l Music25, Music26
0007D3D8 0000 0000 0000 0000        		dc.l Music27, Music28
0007D3E0 0000 0000 0000 0000        		dc.l Music29, Music2A
0007D3E8 0000 0000 0000 0000        		dc.l Music2B, Music2C
0007D3F0 0000 0000 0000 0000        		dc.l Music2D, Music2E
0007D3F8 0000 0000 0000 0000        		dc.l Music2F, Music30
0007D400 0000 0000 0000 0000        		dc.l Music31, Music32
0007D408 0000 0000 0000 0000        		dc.l Music33, Music34
0007D410 0000 0000 0000 0000        		dc.l Music35, Music36
0007D418 0000 0000 0000 0000        		dc.l Music37, Music38
0007D420 0000 0000 0000 0000        		dc.l Music39, Music3A
0007D428 0000 0000 0000 0000        		dc.l Music3B, Music3C
0007D430 0000 0000 0000 0000        		dc.l Music3D, Music3E
0007D438 0000 0000 0000 0000        		dc.l Music3F, Music40
0007D440 0000 0000 0000 0000        		dc.l Music41, Music42
0007D448 0000 0000 0000 0000        		dc.l Music43, Music44
0007D450 0000 0000 0000 0000        		dc.l Music45, Music46
0007D458 0000 0000 0000 0000        		dc.l Music47, Music48
0007D460 0000 0000 0000 0000        		dc.l Music49, Music4A
0007D468 0000 0000 0000 0000        		dc.l Music4B, Music4C
0007D470 0000 0000 0000 0000        		dc.l Music4D, Music4E
0007D478 0000 0000 0000 0000        		dc.l Music4F, Music50
0007D480 0000 0000 0000 0000        		dc.l Music51, Music52
0007D488 0000 0000 0000 0000        		dc.l Music53, Music54
0007D490 0000 0000 0000 0000        		dc.l Music55, Music56
0007D498 0000 0000 0000 0000        		dc.l Music57, Music58
0007D4A0 0000 0000 0000 0000        		dc.l Music59, Music5A
0007D4A8 0000 0000 0000 0000        		dc.l Music5B, Music5C
0007D4B0 0000 0000 0000 0000        		dc.l Music5D, Music5E
0007D4B8 0000 0000 0000 0000        		dc.l Music5F, Music60
0007D4C0 0000 0000 0000 0000        		dc.l Music61, Music62
0007D4C8 0000 0000 0000 0000        		dc.l Music63, Music64
0007D4D0 0000 0000 0000 0000        		dc.l Music65, Music66
0007D4D8 0000 0000 0000 0000        		dc.l Music67, Music68
0007D4E0 0000 0000 0000 0000        		dc.l Music69, Music6A
0007D4E8 0000 0000 0000 0000        		dc.l Music6B, Music6C
0007D4F0 0000 0000 0000 0000        		dc.l Music6D, Music6E
0007D4F8 0000 0000 0000 0000        		dc.l Music6F, Music70
0007D500 0000 0000 0000 0000        		dc.l Music71, Music72
0007D508 0000 0000 0000 0000        		dc.l Music73, Music74
0007D510 0000 0000 0000 0000        		dc.l Music75, Music76
0007D518 0000 0000 0000 0000        		dc.l Music77, Music78
0007D520 0000 0000 0000 0000        		dc.l Music79, Music7A
0007D528 0000 0000 0000 0000        		dc.l Music7B, Music7C
0007D530 0000 0000 0000 0000        		dc.l Music7D, Music7E
0007D538 0000 0000                  		dc.l Music7F
0007D53C                            ; ---------------------------------------------------------------------------
0007D53C                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0007D53C                            ; ---------------------------------------------------------------------------
0007D53C 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D54C 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D55C 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D56C 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D57C 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D58C 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D59C 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D5AC 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D5BC 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D5CC 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D5DC 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D5EC 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D5FC 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D60C 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D61C 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007D62C 9090 9090 9090 9090 9090+                  dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90, $90
0007D63C                            
0007D63C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D63C                            
0007D63C                            
0007D63C                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007D63C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007D644 4E71                       		nop	
0007D646 4E71                       		nop	
0007D648 4E71                       		nop	
0007D64A                            
0007D64A                            loc_71B5A:
0007D64A 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007D652 66F6                       		bne.s	loc_71B5A
0007D654                            
0007D654 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007D65C 6700                       		beq.s	loc_71B82
0007D65E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007D666 4E71                       		nop	
0007D668 4E71                       		nop	
0007D66A 4E71                       		nop	
0007D66C 4E71                       		nop	
0007D66E 4E71                       		nop	
0007D670 60CA                       		bra.s	sub_71B4C
0007D672                            ; ===========================================================================
0007D672                            
0007D672                            loc_71B82:
0007D672 4DF9 00FF F000             		lea	($FFF000).l,a6
0007D678 422E 000E                  		clr.b	$E(a6)
0007D67C 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007D680 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007D684 532E 0001                  		subq.b	#1,1(a6)
0007D688 6600                       		bne.s	loc_71B9E
0007D68A 4EBA 0000                  		jsr	sub_7260C(pc)
0007D68E                            
0007D68E                            loc_71B9E:
0007D68E 102E 0004                  		move.b	4(a6),d0
0007D692 6700                       		beq.s	loc_71BA8
0007D694 4EBA 0000                  		jsr	sub_72504(pc)
0007D698                            
0007D698                            loc_71BA8:
0007D698 4A2E 0024                  		tst.b	$24(a6)
0007D69C 6700                       		beq.s	loc_71BB2
0007D69E 4EBA 0000                  		jsr	sub_7267C(pc)
0007D6A2                            
0007D6A2                            loc_71BB2:
0007D6A2 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007D6A6 6700                       		beq.s	loc_71BBC	; if not, branch
0007D6A8 4EBA 0000                  		jsr	Sound_Play(pc)
0007D6AC                            
0007D6AC                            loc_71BBC:
0007D6AC 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007D6B2 6700                       		beq.s	loc_71BC8
0007D6B4 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007D6B8                            
0007D6B8                            loc_71BC8:
0007D6B8 4A38 C901                  		tst.b	($FFFFC901).w
0007D6BC 6700                       		beq.s	@cont
0007D6BE 5338 C901                  		subq.b	#1,($FFFFC901).w
0007D6C2                            		
0007D6C2                            @cont:
0007D6C2 4BEE 0040                  		lea	$40(a6),a5
0007D6C6 4A15                       		tst.b	(a5)
0007D6C8 6A00                       		bpl.s	loc_71BD4
0007D6CA 4EBA 0000                  		jsr	sub_71C4E(pc)
0007D6CE                            
0007D6CE                            loc_71BD4:
0007D6CE 422E 0008                  		clr.b	8(a6)
0007D6D2 7E05                       		moveq	#5,d7
0007D6D4                            
0007D6D4                            loc_71BDA:
0007D6D4 DAFC 0030                  		adda.w	#$30,a5
0007D6D8 4A15                       		tst.b	(a5)
0007D6DA 6A00                       		bpl.s	loc_71BE6
0007D6DC 4EBA 0000                  		jsr	sub_71CCA(pc)
0007D6E0                            
0007D6E0                            loc_71BE6:
0007D6E0 51CF FFF2                  		dbf	d7,loc_71BDA
0007D6E4                            
0007D6E4 7E02                       		moveq	#2,d7
0007D6E6                            
0007D6E6                            loc_71BEC:
0007D6E6 DAFC 0030                  		adda.w	#$30,a5
0007D6EA 4A15                       		tst.b	(a5)
0007D6EC 6A00                       		bpl.s	loc_71BF8
0007D6EE 4EBA 0000                  		jsr	sub_72850(pc)
0007D6F2                            
0007D6F2                            loc_71BF8:
0007D6F2 51CF FFF2                  		dbf	d7,loc_71BEC
0007D6F6                            
0007D6F6 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007D6FC 7E02                       		moveq	#2,d7
0007D6FE                            
0007D6FE                            loc_71C04:
0007D6FE DAFC 0030                  		adda.w	#$30,a5
0007D702 4A15                       		tst.b	(a5)
0007D704 6A00                       		bpl.s	loc_71C10
0007D706 4EBA 0000                  		jsr	sub_71CCA(pc)
0007D70A                            
0007D70A                            loc_71C10:
0007D70A 51CF FFF2                  		dbf	d7,loc_71C04
0007D70E                            
0007D70E 7E02                       		moveq	#2,d7
0007D710                            
0007D710                            loc_71C16:
0007D710 DAFC 0030                  		adda.w	#$30,a5
0007D714 4A15                       		tst.b	(a5)
0007D716 6A00                       		bpl.s	loc_71C22
0007D718 4EBA 0000                  		jsr	sub_72850(pc)
0007D71C                            
0007D71C                            loc_71C22:
0007D71C 51CF FFF2                  		dbf	d7,loc_71C16
0007D720 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007D726 DAFC 0030                  		adda.w	#$30,a5
0007D72A 4A15                       		tst.b	(a5)
0007D72C 6A00                       		bpl.s	loc_71C38
0007D72E 4EBA 0000                  		jsr	sub_71CCA(pc)
0007D732                            
0007D732                            loc_71C38:
0007D732 DAFC 0030                  		adda.w	#$30,a5
0007D736 4A15                       		tst.b	(a5)
0007D738 6A00                       		bpl.s	loc_71C44
0007D73A 4EBA 0000                  		jsr	sub_72850(pc)
0007D73E                            
0007D73E                            loc_71C44:
0007D73E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007D746 4E75                       		rts	
0007D748                            ; End of function sub_71B4C
0007D748                            
0007D748                            
0007D748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D748                            
0007D748                            
0007D748                            sub_71C4E:				; XREF: sub_71B4C
0007D748 532D 000E                  		subq.b	#1,$E(a5)
0007D74C 6600                       		bne.s	locret_71CAA
0007D74E 1D7C 0080 0008             		move.b	#$80,8(a6)
0007D754 286D 0004                  		movea.l	4(a5),a4
0007D758                            
0007D758                            loc_71C5E:
0007D758 7A00                       		moveq	#0,d5
0007D75A 1A1C                       		move.b	(a4)+,d5
0007D75C 0C05 00E0                  		cmpi.b	#-$20,d5
0007D760 6500                       		bcs.s	loc_71C6E
0007D762 4EBA 0000                  		jsr	sub_72A5A(pc)
0007D766 60F0                       		bra.s	loc_71C5E
0007D768                            ; ===========================================================================
0007D768                            
0007D768                            loc_71C6E:
0007D768 4A05                       		tst.b	d5
0007D76A 6A00                       		bpl.s	loc_71C84
0007D76C 1B45 0010                  		move.b	d5,$10(a5)
0007D770 1A1C                       		move.b	(a4)+,d5
0007D772 6A00                       		bpl.s	loc_71C84
0007D774 534C                       		subq.w	#1,a4
0007D776 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007D77C 6000                       		bra.s	loc_71C88
0007D77E                            ; ===========================================================================
0007D77E                            
0007D77E                            loc_71C84:
0007D77E 4EBA 0000                  		jsr	sub_71D40(pc)
0007D782                            
0007D782                            loc_71C88:
0007D782 2B4C 0004                  		move.l	a4,4(a5)
0007D786 0815 0002                  		btst	#2,(a5)
0007D78A 6600                       		bne.s	locret_71CAA
0007D78C 7000                       		moveq	#0,d0
0007D78E 102D 0010                  		move.b	$10(a5),d0
0007D792 0C00 0080                  		cmpi.b	#$80,d0
0007D796 6700                       		beq.s	locret_71CAA
0007D798 0C39 0001 00A0 1FFA        		cmpi.b  #$01,($A01FFA).l
0007D7A0 6700                               beq.s   locret_71CAA
0007D7A2 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007D7A8                            
0007D7A8                            locret_71CAA:
0007D7A8 4E75                       		rts	
0007D7AA                            ; ===========================================================================
0007D7AA                            
0007D7AA                            
0007D7AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D7AA                            
0007D7AA                            
0007D7AA                            sub_71CCA:				; XREF: sub_71B4C
0007D7AA 532D 000E                  		subq.b	#1,$E(a5)
0007D7AE 6600                       		bne.s	loc_71CE0
0007D7B0 0895 0004                  		bclr	#4,(a5)
0007D7B4 4EBA 0000                  		jsr	sub_71CEC(pc)
0007D7B8 4EBA 0000                  		jsr	sub_71E18(pc)
0007D7BC 6000 0000                  		bra.w	loc_726E2
0007D7C0                            ; ===========================================================================
0007D7C0                            
0007D7C0                            loc_71CE0:
0007D7C0 4EBA 0000                  		jsr	sub_71D9E(pc)
0007D7C4 4EBA 0000                  		jsr	sub_71DC6(pc)
0007D7C8 6000 0000                  		bra.w	loc_71E24
0007D7CC                            ; End of function sub_71CCA
0007D7CC                            
0007D7CC                            
0007D7CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D7CC                            
0007D7CC                            
0007D7CC                            sub_71CEC:				; XREF: sub_71CCA
0007D7CC 286D 0004                  		movea.l	4(a5),a4
0007D7D0 0895 0001                  		bclr	#1,(a5)
0007D7D4                            
0007D7D4                            loc_71CF4:
0007D7D4 7A00                       		moveq	#0,d5
0007D7D6 1A1C                       		move.b	(a4)+,d5
0007D7D8 0C05 00E0                  		cmpi.b	#-$20,d5
0007D7DC 6500                       		bcs.s	loc_71D04
0007D7DE 4EBA 0000                  		jsr	sub_72A5A(pc)
0007D7E2 60F0                       		bra.s	loc_71CF4
0007D7E4                            ; ===========================================================================
0007D7E4                            
0007D7E4                            loc_71D04:
0007D7E4 4EBA 0000                  		jsr	sub_726FE(pc)
0007D7E8 4A05                       		tst.b	d5
0007D7EA 6A00                       		bpl.s	loc_71D1A
0007D7EC 4EBA 0000                  		jsr	sub_71D22(pc)
0007D7F0 1A1C                       		move.b	(a4)+,d5
0007D7F2 6A00                       		bpl.s	loc_71D1A
0007D7F4 534C                       		subq.w	#1,a4
0007D7F6 6000 0000                  		bra.w	sub_71D60
0007D7FA                            ; ===========================================================================
0007D7FA                            
0007D7FA                            loc_71D1A:
0007D7FA 4EBA 0000                  		jsr	sub_71D40(pc)
0007D7FE 6000 0000                  		bra.w	sub_71D60
0007D802                            ; End of function sub_71CEC
0007D802                            
0007D802                            
0007D802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D802                            
0007D802                            
0007D802                            sub_71D22:				; XREF: sub_71CEC
0007D802 0405 0080                  		subi.b	#$80,d5
0007D806 6700                       		beq.s	loc_71D58
0007D808 DA2D 0008                  		add.b	8(a5),d5
0007D80C 0245 007F                  		andi.w	#$7F,d5
0007D810 E34D                       		lsl.w	#1,d5
0007D812 4EB8 18EA                  		jsr	ChkFMCh
0007D816 4E75                       	        rts
0007D818                            ; End of function sub_71D22
0007D818                            LoadNoteData:
0007D818 41FA 0000                  		lea	word_72790(pc),a0
0007D81C 4E75                       		rts
0007D81E                            
0007D81E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D81E                            
0007D81E                            
0007D81E                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007D81E 1005                       		move.b	d5,d0
0007D820 122D 0002                  		move.b	2(a5),d1
0007D824                            
0007D824                            loc_71D46:
0007D824 5301                       		subq.b	#1,d1
0007D826 6700                       		beq.s	loc_71D4E
0007D828 D005                       		add.b	d5,d0
0007D82A 60F8                       		bra.s	loc_71D46
0007D82C                            ; ===========================================================================
0007D82C                            
0007D82C                            loc_71D4E:
0007D82C 1B40 000F                  		move.b	d0,$F(a5)
0007D830 1B40 000E                  		move.b	d0,$E(a5)
0007D834 4E75                       		rts	
0007D836                            ; End of function sub_71D40
0007D836                            
0007D836                            ; ===========================================================================
0007D836                            
0007D836                            loc_71D58:				; XREF: sub_71D22
0007D836 08D5 0001                  		bset	#1,(a5)
0007D83A 426D 0010                  		clr.w	$10(a5)
0007D83E                            
0007D83E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D83E                            
0007D83E                            
0007D83E                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007D83E 2B4C 0004                  		move.l	a4,4(a5)
0007D842 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007D848 0815 0004                  		btst	#4,(a5)
0007D84C 6600                       		bne.s	locret_71D9C
0007D84E 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007D854 422D 000C                  		clr.b	$C(a5)
0007D858 0815 0003                  		btst	#3,(a5)
0007D85C 6700                       		beq.s	locret_71D9C
0007D85E 206D 0014                  		movea.l	$14(a5),a0
0007D862 1B58 0018                  		move.b	(a0)+,$18(a5)
0007D866 1B58 0019                  		move.b	(a0)+,$19(a5)
0007D86A 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007D86E 1018                       		move.b	(a0)+,d0
0007D870 E208                       		lsr.b	#1,d0
0007D872 1B40 001B                  		move.b	d0,$1B(a5)
0007D876 426D 001C                  		clr.w	$1C(a5)
0007D87A                            
0007D87A                            locret_71D9C:
0007D87A 4E75                       		rts	
0007D87C                            ; End of function sub_71D60
0007D87C                            
0007D87C                            
0007D87C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D87C                            
0007D87C                            
0007D87C                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007D87C 4A2D 0012                  		tst.b	$12(a5)
0007D880 6700                       		beq.s	locret_71DC4
0007D882 532D 0012                  		subq.b	#1,$12(a5)
0007D886 6600                       		bne.s	locret_71DC4
0007D888 08D5 0001                  		bset	#1,(a5)
0007D88C 4A2D 0001                  		tst.b	1(a5)
0007D890 6B00 0000                  		bmi.w	loc_71DBE
0007D894 4EBA 0000                  		jsr	sub_726FE(pc)
0007D898 584F                       		addq.w	#4,sp
0007D89A 4E75                       		rts	
0007D89C                            ; ===========================================================================
0007D89C                            
0007D89C                            loc_71DBE:
0007D89C 4EBA 0000                  		jsr	sub_729A0(pc)
0007D8A0 584F                       		addq.w	#4,sp
0007D8A2                            
0007D8A2                            locret_71DC4:
0007D8A2 4E75                       		rts	
0007D8A4                            ; End of function sub_71D9E
0007D8A4                            
0007D8A4                            
0007D8A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D8A4                            
0007D8A4                            
0007D8A4                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007D8A4 584F                       		addq.w	#4,sp
0007D8A6 0815 0003                  		btst	#3,(a5)
0007D8AA 6700                       		beq.s	locret_71E16
0007D8AC 4A2D 0018                  		tst.b	$18(a5)
0007D8B0 6700                       		beq.s	loc_71DDA
0007D8B2 532D 0018                  		subq.b	#1,$18(a5)
0007D8B6 4E75                       		rts	
0007D8B8                            ; ===========================================================================
0007D8B8                            
0007D8B8                            loc_71DDA:
0007D8B8 532D 0019                  		subq.b	#1,$19(a5)
0007D8BC 6700                       		beq.s	loc_71DE2
0007D8BE 4E75                       		rts	
0007D8C0                            ; ===========================================================================
0007D8C0                            
0007D8C0                            loc_71DE2:
0007D8C0 206D 0014                  		movea.l	$14(a5),a0
0007D8C4 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007D8CA 4A2D 001B                  		tst.b	$1B(a5)
0007D8CE 6600                       		bne.s	loc_71DFE
0007D8D0 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007D8D6 442D 001A                  		neg.b	$1A(a5)
0007D8DA 4E75                       		rts	
0007D8DC                            ; ===========================================================================
0007D8DC                            
0007D8DC                            loc_71DFE:
0007D8DC 532D 001B                  		subq.b	#1,$1B(a5)
0007D8E0 1C2D 001A                  		move.b	$1A(a5),d6
0007D8E4 4886                       		ext.w	d6
0007D8E6 DC6D 001C                  		add.w	$1C(a5),d6
0007D8EA 3B46 001C                  		move.w	d6,$1C(a5)
0007D8EE DC6D 0010                  		add.w	$10(a5),d6
0007D8F2 594F                       		subq.w	#4,sp
0007D8F4                            
0007D8F4                            locret_71E16:
0007D8F4 4E75                       		rts	
0007D8F6                            ; End of function sub_71DC6
0007D8F6                            
0007D8F6                            
0007D8F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D8F6                            
0007D8F6                            
0007D8F6                            sub_71E18:				; XREF: sub_71CCA
0007D8F6 0815 0001                  		btst	#1,(a5)
0007D8FA 6600                       		bne.s	locret_71E48
0007D8FC 3C2D 0010                  		move.w	$10(a5),d6
0007D900 6700                       		beq.s	loc_71E4A
0007D902                            
0007D902                            loc_71E24:				; XREF: sub_71CCA
0007D902 102D 001E                  		move.b	$1E(a5),d0
0007D906 4880                       		ext.w	d0
0007D908 DC40                       		add.w	d0,d6
0007D90A 0815 0002                  		btst	#2,(a5)
0007D90E 6600                       		bne.s	locret_71E48
0007D910 3206                       		move.w	d6,d1
0007D912 E049                       		lsr.w	#8,d1
0007D914 103C 00A4                  		move.b	#-$5C,d0
0007D918 4EBA 0000                  		jsr	sub_72722(pc)
0007D91C 1206                       		move.b	d6,d1
0007D91E 103C 00A0                  		move.b	#-$60,d0
0007D922 4EBA 0000                  		jsr	sub_72722(pc)
0007D926                            
0007D926                            locret_71E48:
0007D926 4E75                       		rts	
0007D928                            ; ===========================================================================
0007D928                            
0007D928                            loc_71E4A:
0007D928 08D5 0001                  		bset	#1,(a5)
0007D92C 4E75                       		rts	
0007D92E                            ; End of function sub_71E18
0007D92E                            
0007D92E                            ; ===========================================================================
0007D92E                            
0007D92E                            loc_71E50:				; XREF: sub_71B4C
0007D92E 6B00                       		bmi.s	loc_71E94
0007D930 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007D936 6700 0000                  		beq.w	loc_71EFE
0007D93A 1D7C 0002 0003             		move.b	#2,3(a6)
0007D940 7602                       		moveq	#2,d3
0007D942 103C 00B4                  		move.b	#-$4C,d0
0007D946 7200                       		moveq	#0,d1
0007D948                            
0007D948                            loc_71E6A:
0007D948 4EBA 0000                  		jsr	sub_7272E(pc)
0007D94C 4EBA 0000                  		jsr	sub_72764(pc)
0007D950 5200                       		addq.b	#1,d0
0007D952 51CB FFF4                  		dbf	d3,loc_71E6A
0007D956                            
0007D956 7602                       		moveq	#2,d3
0007D958 7028                       		moveq	#$28,d0
0007D95A                            
0007D95A                            loc_71E7C:
0007D95A 1203                       		move.b	d3,d1
0007D95C 4EBA 0000                  		jsr	sub_7272E(pc)
0007D960 5801                       		addq.b	#4,d1
0007D962 4EBA 0000                  		jsr	sub_7272E(pc)
0007D966 51CB FFF2                  		dbf	d3,loc_71E7C
0007D96A                            
0007D96A 4EBA 0000                  		jsr	sub_729B6(pc)
0007D96E 6000 FDCE                  		bra.w	loc_71C44
0007D972                            ; ===========================================================================
0007D972                            
0007D972                            loc_71E94:				; XREF: loc_71E50
0007D972 422E 0003                  		clr.b	3(a6)
0007D976 7630                       		moveq	#$30,d3
0007D978 4BEE 0040                  		lea	$40(a6),a5
0007D97C 7806                       		moveq	#6,d4
0007D97E                            
0007D97E                            loc_71EA0:
0007D97E 0815 0007                  		btst	#7,(a5)
0007D982 6700                       		beq.s	loc_71EB8
0007D984 0815 0002                  		btst	#2,(a5)
0007D988 6600                       		bne.s	loc_71EB8
0007D98A 103C 00B4                  		move.b	#-$4C,d0
0007D98E 122D 000A                  		move.b	$A(a5),d1
0007D992 4EBA 0000                  		jsr	sub_72722(pc)
0007D996                            
0007D996                            loc_71EB8:
0007D996 DAC3                       		adda.w	d3,a5
0007D998 51CC FFE4                  		dbf	d4,loc_71EA0
0007D99C                            
0007D99C 4BEE 0220                  		lea	$220(a6),a5
0007D9A0 7802                       		moveq	#2,d4
0007D9A2                            
0007D9A2                            loc_71EC4:
0007D9A2 0815 0007                  		btst	#7,(a5)
0007D9A6 6700                       		beq.s	loc_71EDC
0007D9A8 0815 0002                  		btst	#2,(a5)
0007D9AC 6600                       		bne.s	loc_71EDC
0007D9AE 103C 00B4                  		move.b	#-$4C,d0
0007D9B2 122D 000A                  		move.b	$A(a5),d1
0007D9B6 4EBA 0000                  		jsr	sub_72722(pc)
0007D9BA                            
0007D9BA                            loc_71EDC:
0007D9BA DAC3                       		adda.w	d3,a5
0007D9BC 51CC FFE4                  		dbf	d4,loc_71EC4
0007D9C0                            
0007D9C0 4BEE 0340                  		lea	$340(a6),a5
0007D9C4 0815 0007                  		btst	#7,(a5)
0007D9C8 6700                       		beq.s	loc_71EFE
0007D9CA 0815 0002                  		btst	#2,(a5)
0007D9CE 6600                       		bne.s	loc_71EFE
0007D9D0 103C 00B4                  		move.b	#-$4C,d0
0007D9D4 122D 000A                  		move.b	$A(a5),d1
0007D9D8 4EBA 0000                  		jsr	sub_72722(pc)
0007D9DC                            
0007D9DC                            loc_71EFE:
0007D9DC 6000 FD60                  		bra.w	loc_71C44
0007D9E0                            
0007D9E0                            ; ---------------------------------------------------------------------------
0007D9E0                            ; Subroutine to	play a sound or	music track
0007D9E0                            ; ---------------------------------------------------------------------------
0007D9E0                            
0007D9E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D9E0                            
0007D9E0                            
0007D9E0                            Sound_Play:				; XREF: sub_71B4C
0007D9E0 2079 0007 D130             		movea.l	(Go_SoundTypes).l,a0
0007D9E6 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007D9EA 1616                       		move.b	0(a6),d3
0007D9EC 7802                       		moveq	#2,d4
0007D9EE                            
0007D9EE                            loc_71F12:
0007D9EE 1011                       		move.b	(a1),d0		; move track number to d0
0007D9F0 1200                       		move.b	d0,d1
0007D9F2 4219                       		clr.b	(a1)+
0007D9F4 0400 0081                  		subi.b	#$81,d0
0007D9F8 6500                       		bcs.s	loc_71F3E
0007D9FA 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007DA00 6700                       		beq.s	loc_71F2C
0007DA02 1D41 000A                  		move.b	d1,$A(a6)
0007DA06 6000                       		bra.s	loc_71F3E
0007DA08                            ; ===========================================================================
0007DA08                            
0007DA08                            loc_71F2C:
0007DA08 0240 007F                  		andi.w	#$7F,d0
0007DA0C 1430 0000                  		move.b	(a0,d0.w),d2
0007DA10 B403                       		cmp.b	d3,d2
0007DA12 6500                       		bcs.s	loc_71F3E
0007DA14 1602                       		move.b	d2,d3
0007DA16 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007DA1A                            
0007DA1A                            loc_71F3E:
0007DA1A 51CC FFD2                  		dbf	d4,loc_71F12
0007DA1E                            
0007DA1E 4A03                       		tst.b	d3
0007DA20 6B00                       		bmi.s	locret_71F4A
0007DA22 1C83                       		move.b	d3,0(a6)
0007DA24                            
0007DA24                            locret_71F4A:
0007DA24 4E75                       		rts	
0007DA26                            ; End of function Sound_Play
0007DA26                            
0007DA26                            
0007DA26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA26                            
0007DA26                            
0007DA26                            Sound_ChkValue:				; XREF: sub_71B4C
0007DA26 7E00                       		moveq	#0,d7
0007DA28 1E2E 0009                  		move.b	9(a6),d7
0007DA2C 6700 0000                  		beq.w	Sound_E4
0007DA30 6A00                       		bpl.s	locret_71F8C
0007DA32 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007DA38 0C38 0001 FF99             		cmpi.b  #$01,($FFFFFF99).w
0007DA3E 6600                       		bne.s   Load81to9F
0007DA40 4EF9 0000 0000             		jmp     Sound_ChkValueFor00
0007DA46                            Load81to9F:
0007DA46 0C07 009F                  		cmpi.b	#$9F,d7
0007DA4A 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007DA4E                            ContinueSound_ChkValue:
0007DA4E 0C07 00A0                  		cmpi.b	#$A0,d7
0007DA52 6500 0000                  		bcs.w	locret_71F8C
0007DA56 0C07 00CF                  		cmpi.b	#$CF,d7
0007DA5A 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007DA5E 0C07 00D0                  		cmpi.b	#$D0,d7
0007DA62 6500 0000                  		bcs.w	locret_71F8C
0007DA66 0C07 00D1                  		cmpi.b	#$D1,d7
0007DA6A 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007DA6E 0C07 00DF                  		cmp.b	#$DF,d7
0007DA72 6300 0000                  		bls.w		Sound_D1toDF
0007DA76 0C07 00E4                  		cmpi.b	#$E4,d7
0007DA7A 6300 0000                  		bls.w	Sound_E0toE4	; sound	$E0-$E4
0007DA7E 0C07 00FA                  		cmpi.b	#$FA,d7
0007DA82 6300 0000                  		bls.w	Sound_E5toFA
0007DA86 0C07 00FF                  		cmpi.b  #$FF,d7
0007DA8A 6300 0000                  		bls.w   Sound_FBtoFF
0007DA8E                            locret_71F8C:
0007DA8E 4E75                       		rts
0007DA90                            ; ===========================================================================
0007DA90                            
0007DA90                            Sound_E0toE4:				; XREF: Sound_ChkValue
0007DA90 0407 00E0                  		subi.b	#$E0,d7
0007DA94 E54F                       		lsl.w	#2,d7
0007DA96 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007DA9A                            
0007DA9A                            Sound_FBtoFF:				; XREF: Sound_ChkValue
0007DA9A 0407 00FB                  		subi.b	#$FB,d7
0007DA9E E54F                       		lsl.w	#2,d7
0007DAA0 4EFB 7000                  		jmp	Sound_Voice_Index(pc,d7.w)
0007DAA4                            ; ===========================================================================
0007DAA4                            
0007DAA4                            Sound_ExIndex:
0007DAA4 6000 0000                  		bra.w	Sound_E0
0007DAA8                            ; ===========================================================================
0007DAA8 6000 0000                  		bra.w	Sound_E1
0007DAAC                            ; ===========================================================================
0007DAAC 6000 0000                  		bra.w	Sound_E2
0007DAB0                            ; ===========================================================================
0007DAB0 6000 0000                  		bra.w	Sound_E3
0007DAB4                            ; ===========================================================================
0007DAB4 6000 0000                  		bra.w	Sound_E4
0007DAB8                            ; ===========================================================================
0007DAB8                            Sound_Voice_Index:
0007DAB8 6000 0000                                  bra.w   Sound_FB
0007DABC                            ; ===========================================================================
0007DABC 6000 0000                                  bra.w   Sound_FC
0007DAC0                            ; ===========================================================================
0007DAC0 6000 0000                                  bra.w   Sound_FD
0007DAC4                            ; ===========================================================================
0007DAC4 6000 0000                                  bra.w   Sound_FE
0007DAC8                            ; ===========================================================================
0007DAC8 6000 0000                                  bra.w   Sound_FF
0007DACC                            ; ===========================================================================
0007DACC                            ; ---------------------------------------------------------------------------
0007DACC                            ; Chen Cheeeeeen
0007DACC                            ; ---------------------------------------------------------------------------
0007DACC                            Sound_FB:
0007DACC 103C 00D9                                  move.b  #$D9,d0
0007DAD0 6100 0000                                  bsr.w   JmpPlayDAC
0007DAD4 4E75                                       rts
0007DAD6                            ; ---------------------------------------------------------------------------
0007DAD6                            ; Bumper
0007DAD6                            ; ---------------------------------------------------------------------------
0007DAD6                            Sound_FC:
0007DAD6 103C 00D8                                  move.b  #$D8,d0
0007DADA 6100 0000                                  bsr.w   JmpPlayDAC
0007DADE 4E75                                       rts
0007DAE0                            ; ---------------------------------------------------------------------------
0007DAE0                            ; Reproduzir o sample "Yes!"
0007DAE0                            ; ---------------------------------------------------------------------------
0007DAE0                            Sound_FD:
0007DAE0 103C 00D8                                  move.b  #$D8,d0
0007DAE4 6100 0000                                  bsr.w   JmpPlayDAC
0007DAE8 0C39 0002 FFFF FFAB        				cmpi.b  #2,(Current_Character).l     ; Checar se o personagem atual é o Knuckles
0007DAF0 6600                                       bne.s   Yes_Sonic         ; Se não for, reproduzir o "YES!" do Sonic
0007DAF2 4E75                                       rts
0007DAF4                            
0007DAF4                            Yes_Sonic:
0007DAF4 103C 00D8                                  move.b  #$D8,d0
0007DAF8 6100 0000                                  bsr.w   JmpPlayDAC
0007DAFC 4E75                                       rts
0007DAFE                            ; ---------------------------------------------------------------------------
0007DAFE                            ; Reproduzir o sample "Okay!"
0007DAFE                            ; ---------------------------------------------------------------------------
0007DAFE                            Sound_FE:
0007DAFE 103C 00D8                                  move.b  #$D8,d0
0007DB02 6100 0000                                  bsr.w   JmpPlayDAC
0007DB06 4E75                                       rts
0007DB08                            ; ---------------------------------------------------------------------------
0007DB08                            ; Reproduzir o sample "All right!"
0007DB08                            ; ---------------------------------------------------------------------------
0007DB08                            Sound_FF:
0007DB08 103C 00D8                                  move.b  #$D8,d0
0007DB0C 6100 0000                                  bsr.w   JmpPlayDAC
0007DB10 4E75                                       rts
0007DB12                            
0007DB12                            ; ---------------------------------------------------------------------------
0007DB12                            JmpPlayDAC:
0007DB12 4EF8 18E2                                  jmp     PlayDAC
0007DB16                            ; ---------------------------------------------------------------------------
0007DB16                            ; ---------------------------------------------------------------------------
0007DB16                            ; Play "Say-gaa" PCM sound
0007DB16                            ; ---------------------------------------------------------------------------
0007DB16                            
0007DB16                            Sound_E1:				  
0007DB16 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007DB1C 263C 0000 D4B6             		move.l	#$D4B6,d3			; Load the size of the SEGA PCM sample into d3 
0007DB22 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007DB2A                            
0007DB2A                            PlayPCM_Loop:	  
0007DB2A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007DB30 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007DB34 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007DB38 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007DB3A 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007DB3C 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007DB40 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007DB46 4EB8 1740                  		jsr	Joypad_Read			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007DB4A 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007DB50 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007DB52 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007DB54                            
0007DB54                            return_PlayPCM: 
0007DB54 584F                       		addq.w	#4,sp 
0007DB56 4E75                       		rts	
0007DB58                            ; ===========================================================================
0007DB58                            ; ---------------------------------------------------------------------------
0007DB58                            ; Play music track $81-$9F
0007DB58                            ; ---------------------------------------------------------------------------
0007DB58                            
0007DB58                            Sound_ChkValueFor00:
0007DB58 0C07 00FF                  		cmpi.b  #$FF,d7 ; $FF = Last slot for musics in index $00 - $7F ($FF = $7F)
0007DB5C 6300 0000                  		bls.w   Sound_81to9F
0007DB60 4E75                       		rts
0007DB62                            		
0007DB62                            Sound_E5toFA:
0007DB62 11FC 0001 FFFD             		move.b  #$01,($FFFFFFFD).w
0007DB68 0407 0064                  		sub.b   #$64,d7
0007DB6C 4EF9 0000 0000             		jmp     Sound_81to9F
0007DB72                            Sound_81to9F:				; XREF: Sound_ChkValue
0007DB72 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007DB76 6600                       		bne.s	loc_72024	; if not, branch
0007DB78 4A2E 0027                  		tst.b	$27(a6)
0007DB7C 6600 0000                  		bne.w	loc_721B6
0007DB80 4BEE 0040                  		lea	$40(a6),a5
0007DB84 7009                       		moveq	#9,d0
0007DB86                            
0007DB86                            loc_71FE6:
0007DB86 0895 0002                  		bclr	#2,(a5)
0007DB8A DAFC 0030                  		adda.w	#$30,a5
0007DB8E 51C8 FFF6                  		dbf	d0,loc_71FE6
0007DB92                            
0007DB92 4BEE 0220                  		lea	$220(a6),a5
0007DB96 7005                       		moveq	#5,d0
0007DB98                            
0007DB98                            loc_71FF8:
0007DB98 0895 0007                  		bclr	#7,(a5)
0007DB9C DAFC 0030                  		adda.w	#$30,a5
0007DBA0 51C8 FFF6                  		dbf	d0,loc_71FF8
0007DBA4 4216                       		clr.b	0(a6)
0007DBA6 204E                       		movea.l	a6,a0
0007DBA8 43EE 03A0                  		lea	$3A0(a6),a1
0007DBAC 303C 0087                  		move.w	#$87,d0
0007DBB0                            
0007DBB0                            loc_72012:
0007DBB0 22D8                       		move.l	(a0)+,(a1)+
0007DBB2 51C8 FFFC                  		dbf	d0,loc_72012
0007DBB6                            
0007DBB6 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007DBBC 4216                       		clr.b	0(a6)
0007DBBE 6000                       		bra.s	loc_7202C
0007DBC0                            ; ===========================================================================
0007DBC0                            
0007DBC0                            loc_72024:
0007DBC0 422E 0027                  		clr.b	$27(a6)
0007DBC4 422E 0026                  		clr.b	$26(a6)
0007DBC8                            
0007DBC8                            loc_7202C:
0007DBC8 4EBA 0000                  		jsr	sub_725CA(pc)
0007DBCC 2879 0007 D14C             		movea.l	(off_719A0).l,a4
0007DBD2 0407 0081                  		subi.b	#$81,d7
0007DBD6 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007DBDC 0C38 003C FF94             		cmpi.b	#$3C,($FFFFFF94).w
0007DBE2 6700                       		beq.s	M_Xulpico
0007DBE4 2879 0007 D138             		movea.l	(Go_MusicIndex).l,a4
0007DBEA 4EF9 0000 0000             		jmp	M_Xulpico_End
0007DBF0                            
0007DBF0                            M_Xulpico:
0007DBF0 2879 0007 D13C             		movea.l	(Go_MusicIndex_Xul).l,a4
0007DBF6                            
0007DBF6                            M_Xulpico_End:
0007DBF6 0C38 0001 FFFD             		cmpi.b  #$01,($FFFFFFFD).w
0007DBFC 6600                       		bne.s   CheckSounds00to80
0007DBFE 2879 0007 D140             		movea.l	(Go_MusicIndexFF).l,a4
0007DC04 4EF9 0000 0000             		jmp     NormalIndexLoad
0007DC0A                            CheckSounds00to80:
0007DC0A 0C38 0001 FF99             		cmpi.b  #$01,($FFFFFF99).w
0007DC10 6600                       		bne.s   NormalIndexLoad
0007DC12 2879 0007 D144             		movea.l	(Go_MusicIndex00).l,a4		
0007DC18                            NormalIndexLoad:
0007DC18 4238 FF99                  		clr.b   ($FFFFFF99).w
0007DC1C E54F                       		lsl.w	#2,d7
0007DC1E 2874 7000                  		movea.l	(a4,d7.w),a4
0007DC22 7000                       		moveq	#0,d0
0007DC24 3014                       		move.w	(a4),d0
0007DC26 D08C                       		add.l	a4,d0
0007DC28 2D40 0018                  		move.l	d0,$18(a6)
0007DC2C 102C 0005                  		move.b	5(a4),d0
0007DC30 1D40 0028                  		move.b	d0,$28(a6)
0007DC34 4A2E 002A                  		tst.b	$2A(a6)
0007DC38 6700                       		beq.s	loc_72068
0007DC3A 102E 0029                  		move.b	$29(a6),d0
0007DC3E                            
0007DC3E                            loc_72068:
0007DC3E                            ;		add.b	#$01,d0 ; Ajustar a velocidade das músicas do driver SMPS
0007DC3E 1D40 0002                  		move.b	d0,2(a6)
0007DC42 1D40 0001                  		move.b	d0,1(a6)
0007DC46 7200                       		moveq	#0,d1
0007DC48 264C                       		movea.l	a4,a3
0007DC4A 5C4C                       		addq.w	#6,a4
0007DC4C 7E00                       		moveq	#0,d7
0007DC4E 1E2B 0002                  		move.b	2(a3),d7
0007DC52 6700 0000                  		beq.w	loc_72114
0007DC56 5307                       		subq.b	#1,d7
0007DC58 123C 00C0                  		move.b	#-$40,d1
0007DC5C 182B 0004                  		move.b	4(a3),d4
0007DC60 7C30                       		moveq	#$30,d6
0007DC62 1A3C 0001                  		move.b	#1,d5
0007DC66 43EE 0040                  		lea	$40(a6),a1
0007DC6A 45FA 0000                  		lea	byte_721BA(pc),a2
0007DC6E                            
0007DC6E                            loc_72098:
0007DC6E 08D1 0007                  		bset	#7,(a1)
0007DC72 135A 0001                  		move.b	(a2)+,1(a1)
0007DC76 1344 0002                  		move.b	d4,2(a1)
0007DC7A 1346 000D                  		move.b	d6,$D(a1)
0007DC7E 1341 000A                  		move.b	d1,$A(a1)
0007DC82 1345 000E                  		move.b	d5,$E(a1)
0007DC86 7000                       		moveq	#0,d0
0007DC88 301C                       		move.w	(a4)+,d0
0007DC8A D08B                       		add.l	a3,d0
0007DC8C 2340 0004                  		move.l	d0,4(a1)
0007DC90 335C 0008                  		move.w	(a4)+,8(a1)
0007DC94 D2C6                       		adda.w	d6,a1
0007DC96 51CF FFD6                  		dbf	d7,loc_72098
0007DC9A 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007DCA0 6600                       		bne.s	loc_720D8
0007DCA2 702B                       		moveq	#$2B,d0
0007DCA4 7200                       		moveq	#0,d1
0007DCA6 4EBA 0000                  		jsr	sub_7272E(pc)
0007DCAA 6000 0000                  		bra.w	loc_72114
0007DCAE                            ; ===========================================================================
0007DCAE                            
0007DCAE                            loc_720D8:
0007DCAE 7028                       		moveq	#$28,d0
0007DCB0 7206                       		moveq	#6,d1
0007DCB2 4EBA 0000                  		jsr	sub_7272E(pc)
0007DCB6 103C 0042                  		move.b	#$42,d0
0007DCBA 727F                       		moveq	#$7F,d1
0007DCBC 4EBA 0000                  		jsr	sub_72764(pc)
0007DCC0 103C 004A                  		move.b	#$4A,d0
0007DCC4 727F                       		moveq	#$7F,d1
0007DCC6 4EBA 0000                  		jsr	sub_72764(pc)
0007DCCA 103C 0046                  		move.b	#$46,d0
0007DCCE 727F                       		moveq	#$7F,d1
0007DCD0 4EBA 0000                  		jsr	sub_72764(pc)
0007DCD4 103C 004E                  		move.b	#$4E,d0
0007DCD8 727F                       		moveq	#$7F,d1
0007DCDA 4EBA 0000                  		jsr	sub_72764(pc)
0007DCDE 103C 00B6                  		move.b	#-$4A,d0
0007DCE2 123C 00C0                  		move.b	#-$40,d1
0007DCE6 4EBA 0000                  		jsr	sub_72764(pc)
0007DCEA                            
0007DCEA                            loc_72114:
0007DCEA 7E00                       		moveq	#0,d7
0007DCEC 1E2B 0003                  		move.b	3(a3),d7
0007DCF0 6700                       		beq.s	loc_72154
0007DCF2 5307                       		subq.b	#1,d7
0007DCF4 43EE 0190                  		lea	$190(a6),a1
0007DCF8 45FA 0000                  		lea	byte_721C2(pc),a2
0007DCFC                            
0007DCFC                            loc_72126:
0007DCFC 08D1 0007                  		bset	#7,(a1)
0007DD00 135A 0001                  		move.b	(a2)+,1(a1)
0007DD04 1344 0002                  		move.b	d4,2(a1)
0007DD08 1346 000D                  		move.b	d6,$D(a1)
0007DD0C 1345 000E                  		move.b	d5,$E(a1)
0007DD10 7000                       		moveq	#0,d0
0007DD12 301C                       		move.w	(a4)+,d0
0007DD14 D08B                       		add.l	a3,d0
0007DD16 2340 0004                  		move.l	d0,4(a1)
0007DD1A 335C 0008                  		move.w	(a4)+,8(a1)
0007DD1E 101C                       		move.b	(a4)+,d0
0007DD20 135C 000B                  		move.b	(a4)+,$B(a1)
0007DD24 D2C6                       		adda.w	d6,a1
0007DD26 51CF FFD4                  		dbf	d7,loc_72126
0007DD2A                            
0007DD2A                            loc_72154:
0007DD2A 43EE 0220                  		lea	$220(a6),a1
0007DD2E 7E05                       		moveq	#5,d7
0007DD30                            
0007DD30                            loc_7215A:
0007DD30 4A11                       		tst.b	(a1)
0007DD32 6A00 0000                  		bpl.w	loc_7217C
0007DD36 7000                       		moveq	#0,d0
0007DD38 1029 0001                  		move.b	1(a1),d0
0007DD3C 6B00                       		bmi.s	loc_7216E
0007DD3E 5500                       		subq.b	#2,d0
0007DD40 E508                       		lsl.b	#2,d0
0007DD42 6000                       		bra.s	loc_72170
0007DD44                            ; ===========================================================================
0007DD44                            
0007DD44                            loc_7216E:
0007DD44 E608                       		lsr.b	#3,d0
0007DD46                            
0007DD46                            loc_72170:
0007DD46 41FA 0000                  		lea	dword_722CC(pc),a0
0007DD4A 2070 0000                  		movea.l	(a0,d0.w),a0
0007DD4E 08D0 0002                  		bset	#2,(a0)
0007DD52                            
0007DD52                            loc_7217C:
0007DD52 D2C6                       		adda.w	d6,a1
0007DD54 51CF FFDA                  		dbf	d7,loc_7215A
0007DD58                            
0007DD58 4A6E 0340                  		tst.w	$340(a6)
0007DD5C 6A00                       		bpl.s	loc_7218E
0007DD5E 08EE 0002 0100             		bset	#2,$100(a6)
0007DD64                            
0007DD64                            loc_7218E:
0007DD64 4A6E 0370                  		tst.w	$370(a6)
0007DD68 6A00                       		bpl.s	loc_7219A
0007DD6A 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007DD70                            
0007DD70                            loc_7219A:
0007DD70 4BEE 0070                  		lea	$70(a6),a5
0007DD74 7805                       		moveq	#5,d4
0007DD76                            
0007DD76                            loc_721A0:
0007DD76 4EBA 0000                  		jsr	sub_726FE(pc)
0007DD7A DAC6                       		adda.w	d6,a5
0007DD7C 51CC FFF8                  		dbf	d4,loc_721A0
0007DD80 7802                       		moveq	#2,d4
0007DD82                            
0007DD82                            loc_721AC:
0007DD82 4EBA 0000                  		jsr	sub_729A0(pc)
0007DD86 DAC6                       		adda.w	d6,a5
0007DD88 51CC FFF8                  		dbf	d4,loc_721AC
0007DD8C                            
0007DD8C                            loc_721B6:
0007DD8C 584F                       		addq.w	#4,sp
0007DD8E 4E75                       		rts	
0007DD90                            ; ===========================================================================
0007DD90 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007DD98                            		even
0007DD98 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007DD9C                            		even
0007DD9C                            ; ===========================================================================
0007DD9C                            ; ---------------------------------------------------------------------------
0007DD9C                            ; Play normal sound effect
0007DD9C                            ; ---------------------------------------------------------------------------
0007DD9C                            
0007DD9C                            Sound_D1toDF:
0007DD9C 4A2E 0027                  		tst.b	$27(a6)
0007DDA0 6600 0000                  		bne.w	loc_722C6
0007DDA4 4A2E 0004                  		tst.b	4(a6)
0007DDA8 6600 0000                  		bne.w	loc_722C6
0007DDAC 4A2E 0024                  		tst.b	$24(a6)
0007DDB0 6600 0000                  		bne.w	loc_722C6
0007DDB4 4238 C900                  		clr.b	($FFFFC900).w
0007DDB8 0C07 00D1                  		cmp.b	#$D1,d7		; is this the spindash sound?
0007DDBC 6600                       		bne.s	@cont3	; if not, branch
0007DDBE 3F00                       		move.w	d0,-(sp)
0007DDC0 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
0007DDC4 4A38 C901                  		tst.b	($FFFFC901).w	; is the spindash timer active?
0007DDC8 6600                       		bne.s	@cont1		; if it is, branch
0007DDCA 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
0007DDCE                            		
0007DDCE                            @cont1:
0007DDCE 5200                       		addq.b	#1,d0
0007DDD0 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
0007DDD4 6400                       		bcc.s	@cont2		; if it has, branch
0007DDD6 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
0007DDDA                            		
0007DDDA                            @cont2:
0007DDDA 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
0007DDE0 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
0007DDE6 301F                       		move.w	(sp)+,d0
0007DDE8                            		
0007DDE8                            @cont3:
0007DDE8 2079 0007 D148             		movea.l	(Go_SoundIndex).l,a0
0007DDEE 0407 00A1                  		sub.b	#$A1,d7
0007DDF2 6000 0000                  		bra	SoundEffects_Common
0007DDF6                            
0007DDF6                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007DDF6 4A2E 0027                  		tst.b	$27(a6)
0007DDFA 6600 0000                  		bne.w	loc_722C6
0007DDFE 4A2E 0004                  		tst.b	4(a6)
0007DE02 6600 0000                  		bne.w	loc_722C6
0007DE06 4A2E 0024                  		tst.b	$24(a6)
0007DE0A 6600 0000                  		bne.w	loc_722C6
0007DE0E 4238 C900                  		clr.b	($FFFFC900).w
0007DE12 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007DE16 6600                       		bne.s	Sound_notB5	; if not, branch
0007DE18 4A2E 002B                  		tst.b	$2B(a6)
0007DE1C 6600                       		bne.s	loc_721EE
0007DE1E 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007DE22                            
0007DE22                            loc_721EE:
0007DE22 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007DE28                            
0007DE28                            Sound_notB5:
0007DE28 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007DE2C 6600                       		bne.s	Sound_notA7	; if not, branch
0007DE2E 4A2E 002C                  		tst.b	$2C(a6)
0007DE32 6600 0000                  		bne.w	locret_722C4
0007DE36 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007DE3C                            
0007DE3C                            Sound_notA7:
0007DE3C 2079 0007 D148             		movea.l	(Go_SoundIndex).l,a0
0007DE42 0407 00A0                  		subi.b	#$A0,d7
0007DE46                            
0007DE46                            SoundEffects_Common:		
0007DE46 E54F                       		lsl.w	#2,d7
0007DE48 2670 7000                  		movea.l	(a0,d7.w),a3
0007DE4C 224B                       		movea.l	a3,a1
0007DE4E 7200                       		moveq	#0,d1
0007DE50 3219                       		move.w	(a1)+,d1
0007DE52 D28B                       		add.l	a3,d1
0007DE54 1A19                       		move.b	(a1)+,d5
0007DE56 1E19                       		move.b	(a1)+,d7
0007DE58 5307                       		subq.b	#1,d7
0007DE5A 7C30                       		moveq	#$30,d6
0007DE5C                            
0007DE5C                            loc_72228:
0007DE5C 7600                       		moveq	#0,d3
0007DE5E 1629 0001                  		move.b	1(a1),d3
0007DE62 1803                       		move.b	d3,d4
0007DE64 6B00                       		bmi.s	loc_72244
0007DE66 5543                       		subq.w	#2,d3
0007DE68 E54B                       		lsl.w	#2,d3
0007DE6A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007DE6E 2A75 3000                  		movea.l	(a5,d3.w),a5
0007DE72 08D5 0002                  		bset	#2,(a5)
0007DE76 6000                       		bra.s	loc_7226E
0007DE78                            ; ===========================================================================
0007DE78                            
0007DE78                            loc_72244:
0007DE78 E64B                       		lsr.w	#3,d3
0007DE7A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007DE7E 2A75 3000                  		movea.l	(a5,d3.w),a5
0007DE82 08D5 0002                  		bset	#2,(a5)
0007DE86 0C04 00C0                  		cmpi.b	#$C0,d4
0007DE8A 6600                       		bne.s	loc_7226E
0007DE8C 1004                       		move.b	d4,d0
0007DE8E 0000 001F                  		ori.b	#$1F,d0
0007DE92 13C0 00C0 0011             		move.b	d0,($C00011).l
0007DE98 0840 0005                  		bchg	#5,d0
0007DE9C 13C0 00C0 0011             		move.b	d0,($C00011).l
0007DEA2                            
0007DEA2                            loc_7226E:
0007DEA2 4BFA 0000                  		lea	dword_722EC(pc),a5
0007DEA6 2A75 3000                  		movea.l	(a5,d3.w),a5
0007DEAA                            		;movea.l	dword_722EC(pc,d3.w),a5
0007DEAA 244D                       		movea.l	a5,a2
0007DEAC 700B                       		moveq	#$B,d0
0007DEAE                            
0007DEAE                            loc_72276:
0007DEAE 429A                       		clr.l	(a2)+
0007DEB0 51C8 FFFC                  		dbf	d0,loc_72276
0007DEB4                            
0007DEB4 3A99                       		move.w	(a1)+,(a5)
0007DEB6 1B45 0002                  		move.b	d5,2(a5)
0007DEBA 7000                       		moveq	#0,d0
0007DEBC 3019                       		move.w	(a1)+,d0
0007DEBE D08B                       		add.l	a3,d0
0007DEC0 2B40 0004                  		move.l	d0,4(a5)
0007DEC4 3B59 0008                  		move.w	(a1)+,8(a5)
0007DEC8 4A38 C900                  		tst.b	($FFFFC900).w	; is the spindash sound playing?
0007DECC 6700                       		beq.s	@cont		; if not, branch
0007DECE 3F00                       		move.w	d0,-(sp)
0007DED0 1038 C902                  		move.b	($FFFFC902).w,d0
0007DED4 D12D 0008                  		add.b	d0,8(a5)
0007DED8 301F                       		move.w	(sp)+,d0
0007DEDA                            		
0007DEDA                            @cont:
0007DEDA 1B7C 0001 000E             		move.b	#1,$E(a5)
0007DEE0 1B46 000D                  		move.b	d6,$D(a5)
0007DEE4 4A04                       		tst.b	d4
0007DEE6 6B00                       		bmi.s	loc_722A8
0007DEE8 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007DEEE 2B41 0020                  		move.l	d1,$20(a5)
0007DEF2                            
0007DEF2                            loc_722A8:
0007DEF2 51CF FF68                  		dbf	d7,loc_72228
0007DEF6                            
0007DEF6 4A2E 0250                  		tst.b	$250(a6)
0007DEFA 6A00                       		bpl.s	loc_722B8
0007DEFC 08EE 0002 0340             		bset	#2,$340(a6)
0007DF02                            
0007DF02                            loc_722B8:
0007DF02 4A2E 0310                  		tst.b	$310(a6)
0007DF06 6A00                       		bpl.s	locret_722C4
0007DF08 08EE 0002 0370             		bset	#2,$370(a6)
0007DF0E                            
0007DF0E                            locret_722C4:
0007DF0E 4E75                       		rts	
0007DF10                            ; ===========================================================================
0007DF10                            
0007DF10                            loc_722C6:
0007DF10 4216                       		clr.b	0(a6)
0007DF12 4E75                       		rts	
0007DF14                            ; ===========================================================================
0007DF14 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007DF18 0000 0000                  		dc.l 0
0007DF1C 00FF F100                  		dc.l $FFF100
0007DF20 00FF F130                  		dc.l $FFF130
0007DF24 00FF F190                  		dc.l $FFF190
0007DF28 00FF F1C0                  		dc.l $FFF1C0
0007DF2C 00FF F1F0                  		dc.l $FFF1F0
0007DF30 00FF F1F0                  		dc.l $FFF1F0
0007DF34 00FF F220                  dword_722EC:	dc.l $FFF220
0007DF38 0000 0000                  		dc.l 0
0007DF3C 00FF F250                  		dc.l $FFF250
0007DF40 00FF F280                  		dc.l $FFF280
0007DF44 00FF F2B0                  		dc.l $FFF2B0
0007DF48 00FF F2E0                  		dc.l $FFF2E0
0007DF4C 00FF F310                  		dc.l $FFF310
0007DF50 00FF F310                  		dc.l $FFF310
0007DF54                            ; ===========================================================================
0007DF54                            ; ---------------------------------------------------------------------------
0007DF54                            ; Play GHZ waterfall sound
0007DF54                            ; ---------------------------------------------------------------------------
0007DF54                            
0007DF54                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007DF54 4A2E 0027                  		tst.b	$27(a6)
0007DF58 6600 0000                  		bne.w	locret_723C6
0007DF5C 4A2E 0004                  		tst.b	4(a6)
0007DF60 6600 0000                  		bne.w	locret_723C6
0007DF64 4A2E 0024                  		tst.b	$24(a6)
0007DF68 6600 0000                  		bne.w	locret_723C6
0007DF6C 2079 0007 D134             		movea.l	(Go_SoundD0).l,a0
0007DF72 0407 00D0                  		subi.b	#$D0,d7
0007DF76 E54F                       		lsl.w	#2,d7
0007DF78 2670 7000                  		movea.l	(a0,d7.w),a3
0007DF7C 224B                       		movea.l	a3,a1
0007DF7E 7000                       		moveq	#0,d0
0007DF80 3019                       		move.w	(a1)+,d0
0007DF82 D08B                       		add.l	a3,d0
0007DF84 2D40 0020                  		move.l	d0,$20(a6)
0007DF88 1A19                       		move.b	(a1)+,d5
0007DF8A 1E19                       		move.b	(a1)+,d7
0007DF8C 5307                       		subq.b	#1,d7
0007DF8E 7C30                       		moveq	#$30,d6
0007DF90                            
0007DF90                            loc_72348:
0007DF90 1829 0001                  		move.b	1(a1),d4
0007DF94 6B00                       		bmi.s	loc_7235A
0007DF96 08EE 0002 0100             		bset	#2,$100(a6)
0007DF9C 4BEE 0340                  		lea	$340(a6),a5
0007DFA0 6000                       		bra.s	loc_72364
0007DFA2                            ; ===========================================================================
0007DFA2                            
0007DFA2                            loc_7235A:
0007DFA2 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007DFA8 4BEE 0370                  		lea	$370(a6),a5
0007DFAC                            
0007DFAC                            loc_72364:
0007DFAC 244D                       		movea.l	a5,a2
0007DFAE 700B                       		moveq	#$B,d0
0007DFB0                            
0007DFB0                            loc_72368:
0007DFB0 429A                       		clr.l	(a2)+
0007DFB2 51C8 FFFC                  		dbf	d0,loc_72368
0007DFB6                            
0007DFB6 3A99                       		move.w	(a1)+,(a5)
0007DFB8 1B45 0002                  		move.b	d5,2(a5)
0007DFBC 7000                       		moveq	#0,d0
0007DFBE 3019                       		move.w	(a1)+,d0
0007DFC0 D08B                       		add.l	a3,d0
0007DFC2 2B40 0004                  		move.l	d0,4(a5)
0007DFC6 3B59 0008                  		move.w	(a1)+,8(a5)
0007DFCA 1B7C 0001 000E             		move.b	#1,$E(a5)
0007DFD0 1B46 000D                  		move.b	d6,$D(a5)
0007DFD4 4A04                       		tst.b	d4
0007DFD6 6B00                       		bmi.s	loc_72396
0007DFD8 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007DFDE                            
0007DFDE                            loc_72396:
0007DFDE 51CF FFB0                  		dbf	d7,loc_72348
0007DFE2                            
0007DFE2 4A2E 0250                  		tst.b	$250(a6)
0007DFE6 6A00                       		bpl.s	loc_723A6
0007DFE8 08EE 0002 0340             		bset	#2,$340(a6)
0007DFEE                            
0007DFEE                            loc_723A6:
0007DFEE 4A2E 0310                  		tst.b	$310(a6)
0007DFF2 6A00                       		bpl.s	locret_723C6
0007DFF4 08EE 0002 0370             		bset	#2,$370(a6)
0007DFFA 0004 001F                  		ori.b	#$1F,d4
0007DFFE 13C4 00C0 0011             		move.b	d4,($C00011).l
0007E004 0844 0005                  		bchg	#5,d4
0007E008 13C4 00C0 0011             		move.b	d4,($C00011).l
0007E00E                            
0007E00E                            locret_723C6:
0007E00E 4E75                       		rts	
0007E010                            ; End of function Sound_ChkValue
0007E010                            
0007E010                            ; ===========================================================================
0007E010 00FF F100                  		dc.l $FFF100
0007E014 00FF F1F0                  		dc.l $FFF1F0
0007E018 00FF F250                  		dc.l $FFF250
0007E01C 00FF F310                  		dc.l $FFF310
0007E020 00FF F340                  		dc.l $FFF340
0007E024 00FF F370                  		dc.l $FFF370
0007E028                            
0007E028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E028                            
0007E028                            
0007E028                            Snd_FadeOut1:				; XREF: Sound_E0
0007E028 4216                       		clr.b	0(a6)
0007E02A 4BEE 0220                  		lea	$220(a6),a5
0007E02E 7E05                       		moveq	#5,d7
0007E030                            
0007E030                            loc_723EA:
0007E030 4A15                       		tst.b	(a5)
0007E032 6A00 0000                  		bpl.w	loc_72472
0007E036 0895 0007                  		bclr	#7,(a5)
0007E03A 7600                       		moveq	#0,d3
0007E03C 162D 0001                  		move.b	1(a5),d3
0007E040 6B00                       		bmi.s	loc_7243C
0007E042 4EBA 0000                  		jsr	sub_726FE(pc)
0007E046 0C03 0004                  		cmpi.b	#4,d3
0007E04A 6600                       		bne.s	loc_72416
0007E04C 4A2E 0340                  		tst.b	$340(a6)
0007E050 6A00                       		bpl.s	loc_72416
0007E052 4BEE 0340                  		lea	$340(a6),a5
0007E056 226E 0020                  		movea.l	$20(a6),a1
0007E05A 6000                       		bra.s	loc_72428
0007E05C                            ; ===========================================================================
0007E05C                            
0007E05C                            loc_72416:
0007E05C 5503                       		subq.b	#2,d3
0007E05E E50B                       		lsl.b	#2,d3
0007E060 41FA FEB2                  		lea	dword_722CC(pc),a0
0007E064 264D                       		movea.l	a5,a3
0007E066 2A70 3000                  		movea.l	(a0,d3.w),a5
0007E06A 226E 0018                  		movea.l	$18(a6),a1
0007E06E                            
0007E06E                            loc_72428:
0007E06E 0895 0002                  		bclr	#2,(a5)
0007E072 08D5 0001                  		bset	#1,(a5)
0007E076 102D 000B                  		move.b	$B(a5),d0
0007E07A 4EBA 0000                  		jsr	sub_72C4E(pc)
0007E07E 2A4B                       		movea.l	a3,a5
0007E080 6000                       		bra.s	loc_72472
0007E082                            ; ===========================================================================
0007E082                            
0007E082                            loc_7243C:
0007E082 4EBA 0000                  		jsr	sub_729A0(pc)
0007E086 41EE 0370                  		lea	$370(a6),a0
0007E08A 0C03 00E0                  		cmpi.b	#$E0,d3
0007E08E 6700                       		beq.s	loc_7245A
0007E090 0C03 00C0                  		cmpi.b	#$C0,d3
0007E094 6700                       		beq.s	loc_7245A
0007E096 E60B                       		lsr.b	#3,d3
0007E098 41FA FE7A                  		lea	dword_722CC(pc),a0
0007E09C 2070 3000                  		movea.l	(a0,d3.w),a0
0007E0A0                            
0007E0A0                            loc_7245A:
0007E0A0 0890 0002                  		bclr	#2,(a0)
0007E0A4 08D0 0001                  		bset	#1,(a0)
0007E0A8 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007E0AE 6600                       		bne.s	loc_72472
0007E0B0 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007E0B8                            
0007E0B8                            loc_72472:
0007E0B8 DAFC 0030                  		adda.w	#$30,a5
0007E0BC 51CF FF72                  		dbf	d7,loc_723EA
0007E0C0                            
0007E0C0 4E75                       		rts	
0007E0C2                            ; End of function Snd_FadeOut1
0007E0C2                            
0007E0C2                            
0007E0C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E0C2                            
0007E0C2                            
0007E0C2                            Snd_FadeOut2:				; XREF: Sound_E0
0007E0C2 4BEE 0340                  		lea	$340(a6),a5
0007E0C6 4A15                       		tst.b	(a5)
0007E0C8 6A00                       		bpl.s	loc_724AE
0007E0CA 0895 0007                  		bclr	#7,(a5)
0007E0CE 0815 0002                  		btst	#2,(a5)
0007E0D2 6600                       		bne.s	loc_724AE
0007E0D4 4EBA 0000                  		jsr	loc_7270A(pc)
0007E0D8 4BEE 0100                  		lea	$100(a6),a5
0007E0DC 0895 0002                  		bclr	#2,(a5)
0007E0E0 08D5 0001                  		bset	#1,(a5)
0007E0E4 4A15                       		tst.b	(a5)
0007E0E6 6A00                       		bpl.s	loc_724AE
0007E0E8 226E 0018                  		movea.l	$18(a6),a1
0007E0EC 102D 000B                  		move.b	$B(a5),d0
0007E0F0 4EBA 0000                  		jsr	sub_72C4E(pc)
0007E0F4                            
0007E0F4                            loc_724AE:
0007E0F4 4BEE 0370                  		lea	$370(a6),a5
0007E0F8 4A15                       		tst.b	(a5)
0007E0FA 6A00                       		bpl.s	locret_724E4
0007E0FC 0895 0007                  		bclr	#7,(a5)
0007E100 0815 0002                  		btst	#2,(a5)
0007E104 6600                       		bne.s	locret_724E4
0007E106 4EBA 0000                  		jsr	loc_729A6(pc)
0007E10A 4BEE 01F0                  		lea	$1F0(a6),a5
0007E10E 0895 0002                  		bclr	#2,(a5)
0007E112 08D5 0001                  		bset	#1,(a5)
0007E116 4A15                       		tst.b	(a5)
0007E118 6A00                       		bpl.s	locret_724E4
0007E11A 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007E120 6600                       		bne.s	locret_724E4
0007E122 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007E12A                            
0007E12A                            locret_724E4:
0007E12A 4E75                       		rts	
0007E12C                            ; End of function Snd_FadeOut2
0007E12C                            
0007E12C                            ; ===========================================================================
0007E12C                            ; ---------------------------------------------------------------------------
0007E12C                            ; Fade out music
0007E12C                            ; ---------------------------------------------------------------------------
0007E12C                            
0007E12C                            Sound_E0:				; XREF: Sound_ExIndex
0007E12C 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007E130 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007E134 1D7C 0003 0006             		move.b	#3,6(a6)
0007E13A 1D7C 0028 0004             		move.b	#$28,4(a6)
0007E140 422E 0040                  		clr.b	$40(a6)
0007E144 422E 002A                  		clr.b	$2A(a6)
0007E148 4E75                       		rts	
0007E14A                            
0007E14A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E14A                            
0007E14A                            
0007E14A                            sub_72504:				; XREF: sub_71B4C
0007E14A 102E 0006                  		move.b	6(a6),d0
0007E14E 6700                       		beq.s	loc_72510
0007E150 532E 0006                  		subq.b	#1,6(a6)
0007E154 4E75                       		rts	
0007E156                            ; ===========================================================================
0007E156                            
0007E156                            loc_72510:
0007E156 532E 0004                  		subq.b	#1,4(a6)
0007E15A 6700 0000                  		beq.w	Sound_E4
0007E15E 1D7C 0003 0006             		move.b	#3,6(a6)
0007E164 4BEE 0070                  		lea	$70(a6),a5
0007E168 7E05                       		moveq	#5,d7
0007E16A                            
0007E16A                            loc_72524:
0007E16A 4A15                       		tst.b	(a5)
0007E16C 6A00                       		bpl.s	loc_72538
0007E16E 522D 0009                  		addq.b	#1,9(a5)
0007E172 6A00                       		bpl.s	loc_72534
0007E174 0895 0007                  		bclr	#7,(a5)
0007E178 6000                       		bra.s	loc_72538
0007E17A                            ; ===========================================================================
0007E17A                            
0007E17A                            loc_72534:
0007E17A 4EBA 0000                  		jsr	sub_72CB4(pc)
0007E17E                            
0007E17E                            loc_72538:
0007E17E DAFC 0030                  		adda.w	#$30,a5
0007E182 51CF FFE6                  		dbf	d7,loc_72524
0007E186                            
0007E186 7E02                       		moveq	#2,d7
0007E188                            
0007E188                            loc_72542:
0007E188 4A15                       		tst.b	(a5)
0007E18A 6A00                       		bpl.s	loc_72560
0007E18C 522D 0009                  		addq.b	#1,9(a5)
0007E190 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007E196 6500                       		bcs.s	loc_72558
0007E198 0895 0007                  		bclr	#7,(a5)
0007E19C 6000                       		bra.s	loc_72560
0007E19E                            ; ===========================================================================
0007E19E                            
0007E19E                            loc_72558:
0007E19E 1C2D 0009                  		move.b	9(a5),d6
0007E1A2 4EBA 0000                  		jsr	sub_7296A(pc)
0007E1A6                            
0007E1A6                            loc_72560:
0007E1A6 DAFC 0030                  		adda.w	#$30,a5
0007E1AA 51CF FFDC                  		dbf	d7,loc_72542
0007E1AE                            
0007E1AE 4E75                       		rts	
0007E1B0                            ; End of function sub_72504
0007E1B0                            
0007E1B0                            
0007E1B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E1B0                            
0007E1B0                            
0007E1B0                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007E1B0 7602                       		moveq	#2,d3
0007E1B2 7028                       		moveq	#$28,d0
0007E1B4                            
0007E1B4                            loc_7256E:
0007E1B4 1203                       		move.b	d3,d1
0007E1B6 4EBA 0000                  		jsr	sub_7272E(pc)
0007E1BA 5801                       		addq.b	#4,d1
0007E1BC 4EBA 0000                  		jsr	sub_7272E(pc)
0007E1C0 51CB FFF2                  		dbf	d3,loc_7256E
0007E1C4                            
0007E1C4 7040                       		moveq	#$40,d0
0007E1C6 727F                       		moveq	#$7F,d1
0007E1C8 7802                       		moveq	#2,d4
0007E1CA                            
0007E1CA                            loc_72584:
0007E1CA 7603                       		moveq	#3,d3
0007E1CC                            
0007E1CC                            loc_72586:
0007E1CC 4EBA 0000                  		jsr	sub_7272E(pc)
0007E1D0 4EBA 0000                  		jsr	sub_72764(pc)
0007E1D4 5840                       		addq.w	#4,d0
0007E1D6 51CB FFF4                  		dbf	d3,loc_72586
0007E1DA                            
0007E1DA 0400 000F                  		subi.b	#$F,d0
0007E1DE 51CC FFEA                  		dbf	d4,loc_72584
0007E1E2                            
0007E1E2 4E75                       		rts	
0007E1E4                            ; End of function sub_7256A
0007E1E4                            
0007E1E4                            ; ===========================================================================
0007E1E4                            ; ---------------------------------------------------------------------------
0007E1E4                            ; Stop music
0007E1E4                            ; ---------------------------------------------------------------------------
0007E1E4                            
0007E1E4                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007E1E4 702B                       		moveq	#$2B,d0
0007E1E6 123C 0080                  		move.b	#$80,d1
0007E1EA 4EBA 0000                  		jsr	sub_7272E(pc)
0007E1EE 7027                       		moveq	#$27,d0
0007E1F0 7200                       		moveq	#0,d1
0007E1F2 4EBA 0000                  		jsr	sub_7272E(pc)
0007E1F6 204E                       		movea.l	a6,a0
0007E1F8 303C 00E3                  		move.w	#$E3,d0
0007E1FC                            
0007E1FC                            loc_725B6:
0007E1FC 4298                       		clr.l	(a0)+
0007E1FE 51C8 FFFC                  		dbf	d0,loc_725B6
0007E202                            
0007E202 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007E208 4EBA FFA6                  		jsr	sub_7256A(pc)
0007E20C 6000 0000                  		bra.w	sub_729B6
0007E210                            
0007E210                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E210                            
0007E210                            
0007E210                            sub_725CA:				; XREF: Sound_ChkValue
0007E210 204E                       		movea.l	a6,a0
0007E212 1216                       		move.b	0(a6),d1
0007E214 142E 0027                  		move.b	$27(a6),d2
0007E218 162E 002A                  		move.b	$2A(a6),d3
0007E21C 182E 0026                  		move.b	$26(a6),d4
0007E220 3A2E 000A                  		move.w	$A(a6),d5
0007E224 303C 0087                  		move.w	#$87,d0
0007E228                            
0007E228                            loc_725E4:
0007E228 4298                       		clr.l	(a0)+
0007E22A 51C8 FFFC                  		dbf	d0,loc_725E4
0007E22E                            
0007E22E 1C81                       		move.b	d1,0(a6)
0007E230 1D42 0027                  		move.b	d2,$27(a6)
0007E234 1D43 002A                  		move.b	d3,$2A(a6)
0007E238 1D44 0026                  		move.b	d4,$26(a6)
0007E23C 3D45 000A                  		move.w	d5,$A(a6)
0007E240 1D7C 0080 0009             		move.b	#$80,9(a6)
0007E246 4EBA FF68                  		jsr	sub_7256A(pc)
0007E24A 6000 0000                  		bra.w	sub_729B6
0007E24E                            ; End of function sub_725CA
0007E24E                            
0007E24E                            
0007E24E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E24E                            
0007E24E                            
0007E24E                            sub_7260C:				; XREF: sub_71B4C
0007E24E 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007E254 41EE 004E                  		lea	$4E(a6),a0
0007E258 7030                       		moveq	#$30,d0
0007E25A 7209                       		moveq	#9,d1
0007E25C                            
0007E25C                            loc_7261A:
0007E25C 5210                       		addq.b	#1,(a0)
0007E25E D0C0                       		adda.w	d0,a0
0007E260 51C9 FFFA                  		dbf	d1,loc_7261A
0007E264                            
0007E264 4E75                       		rts	
0007E266                            ; End of function sub_7260C
0007E266                            
0007E266                            ; ===========================================================================
0007E266                            ; ---------------------------------------------------------------------------
0007E266                            ; Speed	up music
0007E266                            ; ---------------------------------------------------------------------------
0007E266                            
0007E266                            Sound_E2:				; XREF: Sound_ExIndex
0007E266 4A2E 0027                  		tst.b	$27(a6)
0007E26A 6600                       		bne.s	loc_7263E
0007E26C 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007E272 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007E278 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007E27E 4E75                       		rts	
0007E280                            ; ===========================================================================
0007E280                            
0007E280                            loc_7263E:
0007E280 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007E286 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007E28C 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007E292 4E75                       		rts	
0007E294                            ; ===========================================================================
0007E294                            ; ---------------------------------------------------------------------------
0007E294                            ; Change music back to normal speed
0007E294                            ; ---------------------------------------------------------------------------
0007E294                            
0007E294                            Sound_E3:				; XREF: Sound_ExIndex
0007E294 4A2E 0027                  		tst.b	$27(a6)
0007E298 6600                       		bne.s	loc_7266A
0007E29A 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007E2A0 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007E2A6 422E 002A                  		clr.b	$2A(a6)
0007E2AA 4E75                       		rts	
0007E2AC                            ; ===========================================================================
0007E2AC                            
0007E2AC                            loc_7266A:
0007E2AC 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007E2B2 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007E2B8 422E 03CA                  		clr.b	$3CA(a6)
0007E2BC 4E75                       		rts	
0007E2BE                            
0007E2BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E2BE                            
0007E2BE                            
0007E2BE                            sub_7267C:				; XREF: sub_71B4C
0007E2BE 4A2E 0025                  		tst.b	$25(a6)
0007E2C2 6700                       		beq.s	loc_72688
0007E2C4 532E 0025                  		subq.b	#1,$25(a6)
0007E2C8 4E75                       		rts	
0007E2CA                            ; ===========================================================================
0007E2CA                            
0007E2CA                            loc_72688:
0007E2CA 4A2E 0026                  		tst.b	$26(a6)
0007E2CE 6700                       		beq.s	loc_726D6
0007E2D0 532E 0026                  		subq.b	#1,$26(a6)
0007E2D4 1D7C 0002 0025             		move.b	#2,$25(a6)
0007E2DA 4BEE 0070                  		lea	$70(a6),a5
0007E2DE 7E05                       		moveq	#5,d7
0007E2E0                            
0007E2E0                            loc_7269E:
0007E2E0 4A15                       		tst.b	(a5)
0007E2E2 6A00                       		bpl.s	loc_726AA
0007E2E4 532D 0009                  		subq.b	#1,9(a5)
0007E2E8 4EBA 0000                  		jsr	sub_72CB4(pc)
0007E2EC                            
0007E2EC                            loc_726AA:
0007E2EC DAFC 0030                  		adda.w	#$30,a5
0007E2F0 51CF FFEE                  		dbf	d7,loc_7269E
0007E2F4 7E02                       		moveq	#2,d7
0007E2F6                            
0007E2F6                            loc_726B4:
0007E2F6 4A15                       		tst.b	(a5)
0007E2F8 6A00                       		bpl.s	loc_726CC
0007E2FA 532D 0009                  		subq.b	#1,9(a5)
0007E2FE 1C2D 0009                  		move.b	9(a5),d6
0007E302 0C06 0010                  		cmpi.b	#$10,d6
0007E306 6500                       		bcs.s	loc_726C8
0007E308 7C0F                       		moveq	#$F,d6
0007E30A                            
0007E30A                            loc_726C8:
0007E30A 4EBA 0000                  		jsr	sub_7296A(pc)
0007E30E                            
0007E30E                            loc_726CC:
0007E30E DAFC 0030                  		adda.w	#$30,a5
0007E312 51CF FFE2                  		dbf	d7,loc_726B4
0007E316 4E75                       		rts	
0007E318                            ; ===========================================================================
0007E318                            
0007E318                            loc_726D6:
0007E318 08AE 0002 0040             		bclr	#2,$40(a6)
0007E31E 422E 0024                  		clr.b	$24(a6)
0007E322 4E75                       		rts	
0007E324                            ; End of function sub_7267C
0007E324                            
0007E324                            ; ===========================================================================
0007E324                            
0007E324                            loc_726E2:				; XREF: sub_71CCA
0007E324 0815 0001                  		btst	#1,(a5)
0007E328 6600                       		bne.s	locret_726FC
0007E32A 0815 0002                  		btst	#2,(a5)
0007E32E 6600                       		bne.s	locret_726FC
0007E330 7028                       		moveq	#$28,d0
0007E332 122D 0001                  		move.b	1(a5),d1
0007E336 0001 00F0                  		ori.b	#-$10,d1
0007E33A 6000 0000                  		bra.w	sub_7272E
0007E33E                            ; ===========================================================================
0007E33E                            
0007E33E                            locret_726FC:
0007E33E 4E75                       		rts	
0007E340                            
0007E340                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E340                            
0007E340                            
0007E340                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0007E340 0815 0004                  		btst	#4,(a5)
0007E344 6600                       		bne.s	locret_72714
0007E346 0815 0002                  		btst	#2,(a5)
0007E34A 6600                       		bne.s	locret_72714
0007E34C                            
0007E34C                            loc_7270A:				; XREF: Snd_FadeOut2
0007E34C 7028                       		moveq	#$28,d0
0007E34E 122D 0001                  		move.b	1(a5),d1
0007E352 6000 0000                  		bra.w	sub_7272E
0007E356                            ; ===========================================================================
0007E356                            
0007E356                            locret_72714:
0007E356 4E75                       		rts	
0007E358                            ; End of function sub_726FE
0007E358                            
0007E358                            ; ===========================================================================
0007E358                            
0007E358                            loc_72716:				; XREF: sub_72A5A
0007E358 0815 0002                  		btst	#2,(a5)
0007E35C 6600                       		bne.s	locret_72720
0007E35E 6000 0000                  		bra.w	sub_72722
0007E362                            ; ===========================================================================
0007E362                            
0007E362                            locret_72720:
0007E362 4E75                       		rts	
0007E364                            
0007E364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E364                            
0007E364                            
0007E364                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007E364 082D 0002 0001             		btst	#2,1(a5)
0007E36A 6600                       		bne.s	loc_7275A
0007E36C D02D 0001                  		add.b	1(a5),d0
0007E370                            ; End of function sub_72722
0007E370                            
0007E370                            
0007E370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E370                            
0007E370                            
0007E370                            sub_7272E:				; XREF: loc_71E6A
0007E370 1439 00A0 4000             		move.b	($A04000).l,d2
0007E376 0802 0007                  		btst	#7,d2
0007E37A 66F4                       		bne.s	sub_7272E
0007E37C 13C0 00A0 4000             		move.b	d0,($A04000).l
0007E382 4E71                       		nop	
0007E384 4E71                       		nop	
0007E386 4E71                       		nop	
0007E388                            
0007E388                            loc_72746:
0007E388 1439 00A0 4000             		move.b	($A04000).l,d2
0007E38E 0802 0007                  		btst	#7,d2
0007E392 66F4                       		bne.s	loc_72746
0007E394                            
0007E394 13C1 00A0 4001             		move.b	d1,($A04001).l
0007E39A 4E75                       		rts	
0007E39C                            ; End of function sub_7272E
0007E39C                            
0007E39C                            ; ===========================================================================
0007E39C                            
0007E39C                            loc_7275A:				; XREF: sub_72722
0007E39C 142D 0001                  		move.b	1(a5),d2
0007E3A0 0882 0002                  		bclr	#2,d2
0007E3A4 D002                       		add.b	d2,d0
0007E3A6                            
0007E3A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E3A6                            
0007E3A6                            
0007E3A6                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007E3A6 1439 00A0 4000             		move.b	($A04000).l,d2
0007E3AC 0802 0007                  		btst	#7,d2
0007E3B0 66F4                       		bne.s	sub_72764
0007E3B2 13C0 00A0 4002             		move.b	d0,($A04002).l
0007E3B8 4E71                       		nop	
0007E3BA 4E71                       		nop	
0007E3BC 4E71                       		nop	
0007E3BE                            
0007E3BE                            loc_7277C:
0007E3BE 1439 00A0 4000             		move.b	($A04000).l,d2
0007E3C4 0802 0007                  		btst	#7,d2
0007E3C8 66F4                       		bne.s	loc_7277C
0007E3CA                            
0007E3CA 13C1 00A0 4003             		move.b	d1,($A04003).l
0007E3D0 4E75                       		rts	
0007E3D2                            ; End of function sub_72764
0007E3D2                            
0007E3D2                            ; ===========================================================================
0007E3D2 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007E3E4 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007E3F6 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007E406 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007E416 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007E426 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007E436 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007E446 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007E456 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007E466 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007E476 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007E486 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007E492                            
0007E492                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E492                            
0007E492                            
0007E492                            sub_72850:				; XREF: sub_71B4C
0007E492 532D 000E                  		subq.b	#1,$E(a5)
0007E496 6600                       		bne.s	loc_72866
0007E498 0895 0004                  		bclr	#4,(a5)
0007E49C 4EBA 0000                  		jsr	sub_72878(pc)
0007E4A0 4EBA 0000                  		jsr	sub_728DC(pc)
0007E4A4 6000 0000                  		bra.w	loc_7292E
0007E4A8                            ; ===========================================================================
0007E4A8                            
0007E4A8                            loc_72866:
0007E4A8 4EBA F3D2                  		jsr	sub_71D9E(pc)
0007E4AC 4EBA 0000                  		jsr	sub_72926(pc)
0007E4B0 4EBA F3F2                  		jsr	sub_71DC6(pc)
0007E4B4 4EBA 0000                  		jsr	sub_728E2(pc)
0007E4B8 4E75                       		rts	
0007E4BA                            ; End of function sub_72850
0007E4BA                            
0007E4BA                            
0007E4BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E4BA                            
0007E4BA                            
0007E4BA                            sub_72878:				; XREF: sub_72850
0007E4BA 0895 0001                  		bclr	#1,(a5)
0007E4BE 286D 0004                  		movea.l	4(a5),a4
0007E4C2                            
0007E4C2                            loc_72880:
0007E4C2 7A00                       		moveq	#0,d5
0007E4C4 1A1C                       		move.b	(a4)+,d5
0007E4C6 0C05 00E0                  		cmpi.b	#$E0,d5
0007E4CA 6500                       		bcs.s	loc_72890
0007E4CC 4EBA 0000                  		jsr	sub_72A5A(pc)
0007E4D0 60F0                       		bra.s	loc_72880
0007E4D2                            ; ===========================================================================
0007E4D2                            
0007E4D2                            loc_72890:
0007E4D2 4A05                       		tst.b	d5
0007E4D4 6A00                       		bpl.s	loc_728A4
0007E4D6 4EBA 0000                  		jsr	sub_728AC(pc)
0007E4DA 1A1C                       		move.b	(a4)+,d5
0007E4DC 4A05                       		tst.b	d5
0007E4DE 6A00                       		bpl.s	loc_728A4
0007E4E0 534C                       		subq.w	#1,a4
0007E4E2 6000 F35A                  		bra.w	sub_71D60
0007E4E6                            ; ===========================================================================
0007E4E6                            
0007E4E6                            loc_728A4:
0007E4E6 4EBA F336                  		jsr	sub_71D40(pc)
0007E4EA 6000 F352                  		bra.w	sub_71D60
0007E4EE                            ; End of function sub_72878
0007E4EE                            
0007E4EE                            
0007E4EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E4EE                            
0007E4EE                            
0007E4EE                            sub_728AC:				; XREF: sub_72878
0007E4EE 0405 0081                  		subi.b	#$81,d5
0007E4F2 6500                       		bcs.s	loc_728CA
0007E4F4 DA2D 0008                  		add.b	8(a5),d5
0007E4F8 0245 007F                  		andi.w	#$7F,d5
0007E4FC E34D                       		lsl.w	#1,d5
0007E4FE BBFC 00FF F190             		cmp.l	#$FFF190,a5
0007E504 6600                       		bne.s	ChkPSG2
0007E506 31C5 FFCA                  		move.w	d5,($FFFFFFCA).w
0007E50A 4A38 FFD5                  		tst.b	($FFFFFFD5).w
0007E50E 6600                       		bne.s	DontPlayThisPSGChannel
0007E510                            ChkPSG2:
0007E510 BBFC 00FF F1C0             		cmp.l	#$FFF1C0,a5
0007E516 6600                       		bne.s	ContinuePlayPSG
0007E518 31C5 FFCC                  		move.w	d5,($FFFFFFCC).w
0007E51C 4A38 FFD6                  		tst.b	($FFFFFFD6).w
0007E520 6600                       		bne.s	DontPlayThisPSGChannel
0007E522                            ContinuePlayPSG:
0007E522 41FA 0000                  		lea	word_729CE(pc),a0
0007E526 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007E52C 6000 F310                  		bra.w	sub_71D60
0007E530                            DontPlayThisPSGChannel:
0007E530 DBFC 0000 0010             		adda.l	#$10,a5
0007E536 4255                       		clr.w	(a5)
0007E538 9BFC 0000 0010             		suba.l	#$10,a5
0007E53E 4E75                       		rts
0007E540                            ; ===========================================================================
0007E540                            
0007E540                            loc_728CA:
0007E540 08D5 0001                  		bset	#1,(a5)
0007E544 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007E54A 4EBA F2F2                  		jsr	sub_71D60(pc)
0007E54E 6000 0000                  		bra.w	sub_729A0
0007E552                            ; End of function sub_728AC
0007E552                            
0007E552                            
0007E552                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E552                            
0007E552                            
0007E552                            sub_728DC:				; XREF: sub_72850
0007E552 3C2D 0010                  		move.w	$10(a5),d6
0007E556 6B00                       		bmi.s	loc_72920
0007E558                            ; End of function sub_728DC
0007E558                            
0007E558                            
0007E558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E558                            
0007E558                            
0007E558                            sub_728E2:				; XREF: sub_72850
0007E558 102D 001E                  		move.b	$1E(a5),d0
0007E55C 4880                       		ext.w	d0
0007E55E DC40                       		add.w	d0,d6
0007E560 0815 0002                  		btst	#2,(a5)
0007E564 6600                       		bne.s	locret_7291E
0007E566 0815 0001                  		btst	#1,(a5)
0007E56A 6600                       		bne.s	locret_7291E
0007E56C 102D 0001                  		move.b	1(a5),d0
0007E570 0C00 00E0                  		cmpi.b	#$E0,d0
0007E574 6600                       		bne.s	loc_72904
0007E576 103C 00C0                  		move.b	#$C0,d0
0007E57A                            
0007E57A                            loc_72904:
0007E57A 3206                       		move.w	d6,d1
0007E57C 0201 000F                  		andi.b	#$F,d1
0007E580 8001                       		or.b	d1,d0
0007E582 E84E                       		lsr.w	#4,d6
0007E584 0206 003F                  		andi.b	#$3F,d6
0007E588 13C0 00C0 0011             		move.b	d0,($C00011).l
0007E58E 13C6 00C0 0011             		move.b	d6,($C00011).l
0007E594                            
0007E594                            locret_7291E:
0007E594 4E75                       		rts	
0007E596                            ; End of function sub_728E2
0007E596                            
0007E596                            ; ===========================================================================
0007E596                            
0007E596                            loc_72920:				; XREF: sub_728DC
0007E596 08D5 0001                  		bset	#1,(a5)
0007E59A 4E75                       		rts	
0007E59C                            
0007E59C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E59C                            
0007E59C                            
0007E59C                            sub_72926:				; XREF: sub_72850
0007E59C 4A2D 000B                  		tst.b	$B(a5)
0007E5A0 6700 0000                  		beq.w	locret_7298A
0007E5A4                            
0007E5A4                            loc_7292E:				; XREF: sub_72850
0007E5A4 1C2D 0009                  		move.b	9(a5),d6
0007E5A8 7000                       		moveq	#0,d0
0007E5AA 102D 000B                  		move.b	$B(a5),d0
0007E5AE 6700                       		beq.s	sub_7296A
0007E5B0 2079 0007 D150             		movea.l	(Go_PSGIndex).l,a0
0007E5B6 5340                       		subq.w	#1,d0
0007E5B8 E548                       		lsl.w	#2,d0
0007E5BA 2070 0000                  		movea.l	(a0,d0.w),a0
0007E5BE 102D 000C                  		move.b	$C(a5),d0
0007E5C2 1030 0000                  		move.b	(a0,d0.w),d0
0007E5C6 522D 000C                  		addq.b	#1,$C(a5)
0007E5CA 0800 0007                  		btst	#7,d0
0007E5CE 6700                       		beq.s	loc_72960
0007E5D0 0C00 0080                  		cmpi.b	#$80,d0
0007E5D4 6700                       		beq.s	loc_7299A
0007E5D6                            
0007E5D6                            loc_72960:
0007E5D6 DC40                       		add.w	d0,d6
0007E5D8 0C06 0010                  		cmpi.b	#$10,d6
0007E5DC 6500                       		bcs.s	sub_7296A
0007E5DE 7C0F                       		moveq	#$F,d6
0007E5E0                            ; End of function sub_72926
0007E5E0                            
0007E5E0                            
0007E5E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E5E0                            
0007E5E0                            
0007E5E0                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007E5E0 0815 0001                  		btst	#1,(a5)
0007E5E4 6600                       		bne.s	locret_7298A
0007E5E6 0815 0002                  		btst	#2,(a5)
0007E5EA 6600                       		bne.s	locret_7298A
0007E5EC 0815 0004                  		btst	#4,(a5)
0007E5F0 6600                       		bne.s	loc_7298C
0007E5F2                            
0007E5F2                            loc_7297C:
0007E5F2 8C2D 0001                  		or.b	1(a5),d6
0007E5F6 0606 0010                  		addi.b	#$10,d6
0007E5FA 13C6 00C0 0011             		move.b	d6,($C00011).l
0007E600                            
0007E600                            locret_7298A:
0007E600 4E75                       		rts	
0007E602                            ; ===========================================================================
0007E602                            
0007E602                            loc_7298C:
0007E602 4A2D 0013                  		tst.b	$13(a5)
0007E606 67EA                       		beq.s	loc_7297C
0007E608 4A2D 0012                  		tst.b	$12(a5)
0007E60C 66E4                       		bne.s	loc_7297C
0007E60E 4E75                       		rts	
0007E610                            ; End of function sub_7296A
0007E610                            
0007E610                            ; ===========================================================================
0007E610                            
0007E610                            loc_7299A:				; XREF: sub_72926
0007E610 532D 000C                  		subq.b	#1,$C(a5)
0007E614 4E75                       		rts	
0007E616                            
0007E616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E616                            
0007E616                            
0007E616                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007E616 0815 0002                  		btst	#2,(a5)
0007E61A 6600                       		bne.s	locret_729B4
0007E61C                            
0007E61C                            loc_729A6:				; XREF: Snd_FadeOut2
0007E61C 102D 0001                  		move.b	1(a5),d0
0007E620 0000 001F                  		ori.b	#$1F,d0
0007E624 13C0 00C0 0011             		move.b	d0,($C00011).l
0007E62A                            
0007E62A                            locret_729B4:
0007E62A 4E75                       		rts	
0007E62C                            ; End of function sub_729A0
0007E62C                            
0007E62C                            
0007E62C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E62C                            
0007E62C                            
0007E62C                            sub_729B6:				; XREF: loc_71E7C
0007E62C 41F9 00C0 0011             		lea	($C00011).l,a0
0007E632 10BC 009F                  		move.b	#$9F,(a0)
0007E636 10BC 00BF                  		move.b	#$BF,(a0)
0007E63A 10BC 00DF                  		move.b	#$DF,(a0)
0007E63E 10BC 00FF                  		move.b	#$FF,(a0)
0007E642 4E75                       		rts	
0007E644                            ; End of function sub_729B6
0007E644                            
0007E644                            ; ===========================================================================
0007E644 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007E656 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007E668 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0007E67C 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0007E690 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007E6A4 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007E6B8 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007E6CC 0011 0000                  		dc.w $11, 0
0007E6D0                            
0007E6D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E6D0                            
0007E6D0                            
0007E6D0                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007E6D0 0445 00E0                  		subi.w	#$E0,d5
0007E6D4 E54D                       		lsl.w	#2,d5
0007E6D6 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007E6DA                            ; End of function sub_72A5A
0007E6DA                            
0007E6DA                            ; ===========================================================================
0007E6DA                            
0007E6DA                            loc_72A64:
0007E6DA 6000 0000                  		bra.w	loc_72ACC
0007E6DE                            ; ===========================================================================
0007E6DE 6000 0000                  		bra.w	loc_72AEC
0007E6E2                            ; ===========================================================================
0007E6E2 6000 0000                  		bra.w	loc_72AF2
0007E6E6                            ; ===========================================================================
0007E6E6 6000 0000                  		bra.w	loc_72AF8
0007E6EA                            ; ===========================================================================
0007E6EA 6000 0000                  		bra.w	loc_72B14
0007E6EE                            ; ===========================================================================
0007E6EE 6000 0000                  		bra.w	loc_72B9E
0007E6F2                            ; ===========================================================================
0007E6F2 6000 0000                  		bra.w	loc_72BA4
0007E6F6                            ; ===========================================================================
0007E6F6 6000 0000                  		bra.w	loc_72BAE
0007E6FA                            ; ===========================================================================
0007E6FA 6000 0000                  		bra.w	loc_72BB4
0007E6FE                            ; ===========================================================================
0007E6FE 6000 0000                  		bra.w	loc_72BBE
0007E702                            ; ===========================================================================
0007E702 6000 0000                  		bra.w	loc_72BC6
0007E706                            ; ===========================================================================
0007E706 6000 0000                  		bra.w	loc_72BD0
0007E70A                            ; ===========================================================================
0007E70A 6000 0000                  		bra.w	loc_72BE6
0007E70E                            ; ===========================================================================
0007E70E 6000 0000                  		bra.w	loc_72BEE
0007E712                            ; ===========================================================================
0007E712 6000 0000                  		bra.w	loc_72BF4
0007E716                            ; ===========================================================================
0007E716 6000 0000                  		bra.w	loc_72C26
0007E71A                            ; ===========================================================================
0007E71A 6000 0000                  		bra.w	loc_72D30
0007E71E                            ; ===========================================================================
0007E71E 6000 0000                  		bra.w	loc_72D52
0007E722                            ; ===========================================================================
0007E722 6000 0000                  		bra.w	loc_72D58
0007E726                            ; ===========================================================================
0007E726 6000 0000                  		bra.w	loc_72E06
0007E72A                            ; ===========================================================================
0007E72A 6000 0000                  		bra.w	loc_72E20
0007E72E                            ; ===========================================================================
0007E72E 6000 0000                  		bra.w	loc_72E26
0007E732                            ; ===========================================================================
0007E732 6000 0000                  		bra.w	loc_72E2C
0007E736                            ; ===========================================================================
0007E736 6000 0000                  		bra.w	loc_72E38
0007E73A                            ; ===========================================================================
0007E73A 6000 0000                  		bra.w	loc_72E52
0007E73E                            ; ===========================================================================
0007E73E 6000 0000                  		bra.w	loc_72E64
0007E742                            ; ===========================================================================
0007E742                            
0007E742                            loc_72ACC:				; XREF: loc_72A64
0007E742 121C                       		move.b	(a4)+,d1
0007E744 4A2D 0001                  		tst.b	1(a5)
0007E748 6B00                       		bmi.s	locret_72AEA
0007E74A 102D 000A                  		move.b	$A(a5),d0
0007E74E 0200 0037                  		andi.b	#$37,d0
0007E752 8200                       		or.b	d0,d1
0007E754 1B41 000A                  		move.b	d1,$A(a5)
0007E758 103C 00B4                  		move.b	#$B4,d0
0007E75C 6000 FBFA                  		bra.w	loc_72716
0007E760                            ; ===========================================================================
0007E760                            
0007E760                            locret_72AEA:
0007E760 4E75                       		rts	
0007E762                            ; ===========================================================================
0007E762                            
0007E762                            loc_72AEC:				; XREF: loc_72A64
0007E762 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007E766 4E75                       		rts	
0007E768                            ; ===========================================================================
0007E768                            
0007E768                            loc_72AF2:				; XREF: loc_72A64
0007E768 1D5C 0007                  		move.b	(a4)+,7(a6)
0007E76C 4E75                       		rts	
0007E76E                            ; ===========================================================================
0007E76E                            
0007E76E                            loc_72AF8:				; XREF: loc_72A64
0007E76E 7000                       		moveq	#0,d0
0007E770 102D 000D                  		move.b	$D(a5),d0
0007E774 2875 0000                  		movea.l	(a5,d0.w),a4
0007E778 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007E780 544C                       		addq.w	#2,a4
0007E782 5800                       		addq.b	#4,d0
0007E784 1B40 000D                  		move.b	d0,$D(a5)
0007E788 4E75                       		rts	
0007E78A                            ; ===========================================================================
0007E78A                            
0007E78A                            loc_72B14:				; XREF: loc_72A64
0007E78A 204E                       		movea.l	a6,a0
0007E78C 43EE 03A0                  		lea	$3A0(a6),a1
0007E790 303C 0087                  		move.w	#$87,d0
0007E794                            
0007E794                            loc_72B1E:
0007E794 20D9                       		move.l	(a1)+,(a0)+
0007E796 51C8 FFFC                  		dbf	d0,loc_72B1E
0007E79A                            
0007E79A 08EE 0002 0040             		bset	#2,$40(a6)
0007E7A0 264D                       		movea.l	a5,a3
0007E7A2 1C3C 0028                  		move.b	#$28,d6
0007E7A6 9C2E 0026                  		sub.b	$26(a6),d6
0007E7AA 7E05                       		moveq	#5,d7
0007E7AC 4BEE 0070                  		lea	$70(a6),a5
0007E7B0                            
0007E7B0                            loc_72B3A:
0007E7B0 0815 0007                  		btst	#7,(a5)
0007E7B4 6700                       		beq.s	loc_72B5C
0007E7B6 08D5 0001                  		bset	#1,(a5)
0007E7BA DD2D 0009                  		add.b	d6,9(a5)
0007E7BE 0815 0002                  		btst	#2,(a5)
0007E7C2 6600                       		bne.s	loc_72B5C
0007E7C4 7000                       		moveq	#0,d0
0007E7C6 102D 000B                  		move.b	$B(a5),d0
0007E7CA 226E 0018                  		movea.l	$18(a6),a1
0007E7CE 4EBA 0000                  		jsr	sub_72C4E(pc)
0007E7D2                            
0007E7D2                            loc_72B5C:
0007E7D2 DAFC 0030                  		adda.w	#$30,a5
0007E7D6 51CF FFD8                  		dbf	d7,loc_72B3A
0007E7DA                            
0007E7DA 7E02                       		moveq	#2,d7
0007E7DC                            
0007E7DC                            loc_72B66:
0007E7DC 0815 0007                  		btst	#7,(a5)
0007E7E0 6700                       		beq.s	loc_72B78
0007E7E2 08D5 0001                  		bset	#1,(a5)
0007E7E6 4EBA FE2E                  		jsr	sub_729A0(pc)
0007E7EA DD2D 0009                  		add.b	d6,9(a5)
0007E7EE                            
0007E7EE                            loc_72B78:
0007E7EE DAFC 0030                  		adda.w	#$30,a5
0007E7F2 51CF FFE8                  		dbf	d7,loc_72B66
0007E7F6 2A4B                       		movea.l	a3,a5
0007E7F8 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007E7FE 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007E804 422E 0027                  		clr.b	$27(a6)
0007E808 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007E810 504F                       		addq.w	#8,sp
0007E812 4E75                       		rts	
0007E814                            ; ===========================================================================
0007E814                            
0007E814                            loc_72B9E:				; XREF: loc_72A64
0007E814 1B5C 0002                  		move.b	(a4)+,2(a5)
0007E818 4E75                       		rts	
0007E81A                            ; ===========================================================================
0007E81A                            
0007E81A                            loc_72BA4:				; XREF: loc_72A64
0007E81A 101C                       		move.b	(a4)+,d0
0007E81C D12D 0009                  		add.b	d0,9(a5)
0007E820 6000 0000                  		bra.w	sub_72CB4
0007E824                            ; ===========================================================================
0007E824                            
0007E824                            loc_72BAE:				; XREF: loc_72A64
0007E824 08D5 0004                  		bset	#4,(a5)
0007E828 4E75                       		rts	
0007E82A                            ; ===========================================================================
0007E82A                            
0007E82A                            loc_72BB4:				; XREF: loc_72A64
0007E82A 1B54 0012                  		move.b	(a4),$12(a5)
0007E82E 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007E832 4E75                       		rts	
0007E834                            ; ===========================================================================
0007E834                            
0007E834                            loc_72BBE:				; XREF: loc_72A64
0007E834 101C                       		move.b	(a4)+,d0
0007E836 D12D 0008                  		add.b	d0,8(a5)
0007E83A 4E75                       		rts	
0007E83C                            ; ===========================================================================
0007E83C                            
0007E83C                            loc_72BC6:				; XREF: loc_72A64
0007E83C 1D54 0002                  		move.b	(a4),2(a6)
0007E840 1D5C 0001                  		move.b	(a4)+,1(a6)
0007E844 4E75                       		rts	
0007E846                            ; ===========================================================================
0007E846                            
0007E846                            loc_72BD0:				; XREF: loc_72A64
0007E846 41EE 0040                  		lea	$40(a6),a0
0007E84A 101C                       		move.b	(a4)+,d0
0007E84C 7230                       		moveq	#$30,d1
0007E84E 7409                       		moveq	#9,d2
0007E850                            
0007E850                            loc_72BDA:
0007E850 1140 0002                  		move.b	d0,2(a0)
0007E854 D0C1                       		adda.w	d1,a0
0007E856 51CA FFF8                  		dbf	d2,loc_72BDA
0007E85A                            
0007E85A 4E75                       		rts	
0007E85C                            ; ===========================================================================
0007E85C                            
0007E85C                            loc_72BE6:				; XREF: loc_72A64
0007E85C 101C                       		move.b	(a4)+,d0
0007E85E D12D 0009                  		add.b	d0,9(a5)
0007E862 4E75                       		rts	
0007E864                            ; ===========================================================================
0007E864                            
0007E864                            loc_72BEE:				; XREF: loc_72A64
0007E864 422E 002C                  		clr.b	$2C(a6)
0007E868 4E75                       		rts	
0007E86A                            ; ===========================================================================
0007E86A                            
0007E86A                            loc_72BF4:				; XREF: loc_72A64
0007E86A 0895 0007                  		bclr	#7,(a5)
0007E86E 0895 0004                  		bclr	#4,(a5)
0007E872 4EBA FACC                  		jsr	sub_726FE(pc)
0007E876 4A2E 0250                  		tst.b	$250(a6)
0007E87A 6B00                       		bmi.s	loc_72C22
0007E87C 264D                       		movea.l	a5,a3
0007E87E 4BEE 0100                  		lea	$100(a6),a5
0007E882 226E 0018                  		movea.l	$18(a6),a1
0007E886 0895 0002                  		bclr	#2,(a5)
0007E88A 08D5 0001                  		bset	#1,(a5)
0007E88E 102D 000B                  		move.b	$B(a5),d0
0007E892 4EBA 0000                  		jsr	sub_72C4E(pc)
0007E896 2A4B                       		movea.l	a3,a5
0007E898                            
0007E898                            loc_72C22:
0007E898 504F                       		addq.w	#8,sp
0007E89A 4E75                       		rts	
0007E89C                            ; ===========================================================================
0007E89C                            
0007E89C                            loc_72C26:				; XREF: loc_72A64
0007E89C 7000                       		moveq	#0,d0
0007E89E 101C                       		move.b	(a4)+,d0
0007E8A0 1B40 000B                  		move.b	d0,$B(a5)
0007E8A4 0815 0002                  		btst	#2,(a5)
0007E8A8 6600 0000                  		bne.w	locret_72CAA
0007E8AC 226E 0018                  		movea.l	$18(a6),a1
0007E8B0 4A2E 000E                  		tst.b	$E(a6)
0007E8B4 6700                       		beq.s	sub_72C4E
0007E8B6 226D 0020                  		movea.l	$20(a5),a1
0007E8BA 4A2E 000E                  		tst.b	$E(a6)
0007E8BE 6B00                       		bmi.s	sub_72C4E
0007E8C0 226E 0020                  		movea.l	$20(a6),a1
0007E8C4                            
0007E8C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E8C4                            
0007E8C4                            
0007E8C4                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007E8C4 5340                       		subq.w	#1,d0
0007E8C6 6B00                       		bmi.s	loc_72C5C
0007E8C8 323C 0019                  		move.w	#$19,d1
0007E8CC                            
0007E8CC                            loc_72C56:
0007E8CC D2C1                       		adda.w	d1,a1
0007E8CE 51C8 FFFC                  		dbf	d0,loc_72C56
0007E8D2                            
0007E8D2                            loc_72C5C:
0007E8D2 1219                       		move.b	(a1)+,d1
0007E8D4 1B41 001F                  		move.b	d1,$1F(a5)
0007E8D8 1801                       		move.b	d1,d4
0007E8DA 103C 00B0                  		move.b	#$B0,d0
0007E8DE 4EBA FA84                  		jsr	sub_72722(pc)
0007E8E2 45FA 0000                  		lea	byte_72D18(pc),a2
0007E8E6 7613                       		moveq	#$13,d3
0007E8E8                            
0007E8E8                            loc_72C72:
0007E8E8 101A                       		move.b	(a2)+,d0
0007E8EA 1219                       		move.b	(a1)+,d1
0007E8EC 4EBA FA76                  		jsr	sub_72722(pc)
0007E8F0 51CB FFF6                  		dbf	d3,loc_72C72
0007E8F4 7A03                       		moveq	#3,d5
0007E8F6 0244 0007                  		andi.w	#7,d4
0007E8FA 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007E8FE 162D 0009                  		move.b	9(a5),d3
0007E902                            
0007E902                            loc_72C8C:
0007E902 101A                       		move.b	(a2)+,d0
0007E904 1219                       		move.b	(a1)+,d1
0007E906 E20C                       		lsr.b	#1,d4
0007E908 6400                       		bcc.s	loc_72C96
0007E90A D203                       		add.b	d3,d1
0007E90C                            
0007E90C                            loc_72C96:
0007E90C 4EBA FA56                  		jsr	sub_72722(pc)
0007E910 51CD FFF0                  		dbf	d5,loc_72C8C
0007E914 103C 00B4                  		move.b	#$B4,d0
0007E918 122D 000A                  		move.b	$A(a5),d1
0007E91C 4EBA FA46                  		jsr	sub_72722(pc)
0007E920                            
0007E920                            locret_72CAA:
0007E920 4E75                       		rts	
0007E922                            ; End of function sub_72C4E
0007E922                            
0007E922                            ; ===========================================================================
0007E922 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007E92A                            
0007E92A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007E92A                            
0007E92A                            
0007E92A                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007E92A 0815 0002                  		btst	#2,(a5)
0007E92E 6600                       		bne.s	locret_72D16
0007E930 7000                       		moveq	#0,d0
0007E932 102D 000B                  		move.b	$B(a5),d0
0007E936 226E 0018                  		movea.l	$18(a6),a1
0007E93A 4A2E 000E                  		tst.b	$E(a6)
0007E93E 6700                       		beq.s	loc_72CD8
0007E940 226E 0020                  		movea.l	$20(a6),a1
0007E944 4A2E 000E                  		tst.b	$E(a6)
0007E948 6B00                       		bmi.s	loc_72CD8
0007E94A 226E 0020                  		movea.l	$20(a6),a1
0007E94E                            
0007E94E                            loc_72CD8:
0007E94E 5340                       		subq.w	#1,d0
0007E950 6B00                       		bmi.s	loc_72CE6
0007E952 323C 0019                  		move.w	#$19,d1
0007E956                            
0007E956                            loc_72CE0:
0007E956 D2C1                       		adda.w	d1,a1
0007E958 51C8 FFFC                  		dbf	d0,loc_72CE0
0007E95C                            
0007E95C                            loc_72CE6:
0007E95C D2FC 0015                  		adda.w	#$15,a1
0007E960 45FA 0000                  		lea	byte_72D2C(pc),a2
0007E964 102D 001F                  		move.b	$1F(a5),d0
0007E968 0240 0007                  		andi.w	#7,d0
0007E96C 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007E970 162D 0009                  		move.b	9(a5),d3
0007E974 6B00                       		bmi.s	locret_72D16
0007E976 7A03                       		moveq	#3,d5
0007E978                            
0007E978                            loc_72D02:
0007E978 101A                       		move.b	(a2)+,d0
0007E97A 1219                       		move.b	(a1)+,d1
0007E97C E20C                       		lsr.b	#1,d4
0007E97E 6400                       		bcc.s	loc_72D12
0007E980 D203                       		add.b	d3,d1
0007E982 6500                       		bcs.s	loc_72D12
0007E984 4EBA F9DE                  		jsr	sub_72722(pc)
0007E988                            
0007E988                            loc_72D12:
0007E988 51CD FFEE                  		dbf	d5,loc_72D02
0007E98C                            
0007E98C                            locret_72D16:
0007E98C 4E75                       		rts	
0007E98E                            ; End of function sub_72CB4
0007E98E                            
0007E98E                            ; ===========================================================================
0007E98E 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007E998 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007E9A2 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007E9A6                            ; ===========================================================================
0007E9A6                            
0007E9A6                            loc_72D30:				; XREF: loc_72A64
0007E9A6 08D5 0003                  		bset	#3,(a5)
0007E9AA 2B4C 0014                  		move.l	a4,$14(a5)
0007E9AE 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007E9B2 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007E9B6 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007E9BA 101C                       		move.b	(a4)+,d0
0007E9BC E208                       		lsr.b	#1,d0
0007E9BE 1B40 001B                  		move.b	d0,$1B(a5)
0007E9C2 426D 001C                  		clr.w	$1C(a5)
0007E9C6 4E75                       		rts	
0007E9C8                            ; ===========================================================================
0007E9C8                            
0007E9C8                            loc_72D52:				; XREF: loc_72A64
0007E9C8 08D5 0003                  		bset	#3,(a5)
0007E9CC 4E75                       		rts	
0007E9CE                            ; ===========================================================================
0007E9CE                            
0007E9CE                            loc_72D58:				; XREF: loc_72A64
0007E9CE 0895 0007                  		bclr	#7,(a5)
0007E9D2 0895 0004                  		bclr	#4,(a5)
0007E9D6 4A2D 0001                  		tst.b	1(a5)
0007E9DA 6B00                       		bmi.s	loc_72D74
0007E9DC 4A2E 0008                  		tst.b	8(a6)
0007E9E0 6B00 0000                  		bmi.w	loc_72E02
0007E9E4 4EBA F95A                  		jsr	sub_726FE(pc)
0007E9E8 6000                       		bra.s	loc_72D78
0007E9EA                            ; ===========================================================================
0007E9EA                            
0007E9EA                            loc_72D74:
0007E9EA 4EBA FC2A                  		jsr	sub_729A0(pc)
0007E9EE                            
0007E9EE                            loc_72D78:
0007E9EE 4A2E 000E                  		tst.b	$E(a6)
0007E9F2 6A00 0000                  		bpl.w	loc_72E02
0007E9F6 4216                       		clr.b	0(a6)
0007E9F8 7000                       		moveq	#0,d0
0007E9FA 102D 0001                  		move.b	1(a5),d0
0007E9FE 6B00                       		bmi.s	loc_72DCC
0007EA00 41FA F512                  		lea	dword_722CC(pc),a0
0007EA04 264D                       		movea.l	a5,a3
0007EA06 0C00 0004                  		cmpi.b	#4,d0
0007EA0A 6600                       		bne.s	loc_72DA8
0007EA0C 4A2E 0340                  		tst.b	$340(a6)
0007EA10 6A00                       		bpl.s	loc_72DA8
0007EA12 4BEE 0340                  		lea	$340(a6),a5
0007EA16 226E 0020                  		movea.l	$20(a6),a1
0007EA1A 6000                       		bra.s	loc_72DB8
0007EA1C                            ; ===========================================================================
0007EA1C                            
0007EA1C                            loc_72DA8:
0007EA1C 5500                       		subq.b	#2,d0
0007EA1E E508                       		lsl.b	#2,d0
0007EA20 2A70 0000                  		movea.l	(a0,d0.w),a5
0007EA24 4A15                       		tst.b	(a5)
0007EA26 6A00                       		bpl.s	loc_72DC8
0007EA28 226E 0018                  		movea.l	$18(a6),a1
0007EA2C                            
0007EA2C                            loc_72DB8:
0007EA2C 0895 0002                  		bclr	#2,(a5)
0007EA30 08D5 0001                  		bset	#1,(a5)
0007EA34 102D 000B                  		move.b	$B(a5),d0
0007EA38 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007EA3C                            
0007EA3C                            loc_72DC8:
0007EA3C 2A4B                       		movea.l	a3,a5
0007EA3E 6000                       		bra.s	loc_72E02
0007EA40                            ; ===========================================================================
0007EA40                            
0007EA40                            loc_72DCC:
0007EA40 41EE 0370                  		lea	$370(a6),a0
0007EA44 4A10                       		tst.b	(a0)
0007EA46 6A00                       		bpl.s	loc_72DE0
0007EA48 0C00 00E0                  		cmpi.b	#$E0,d0
0007EA4C 6700                       		beq.s	loc_72DEA
0007EA4E 0C00 00C0                  		cmpi.b	#$C0,d0
0007EA52 6700                       		beq.s	loc_72DEA
0007EA54                            
0007EA54                            loc_72DE0:
0007EA54 41FA F4BE                  		lea	dword_722CC(pc),a0
0007EA58 E608                       		lsr.b	#3,d0
0007EA5A 2070 0000                  		movea.l	(a0,d0.w),a0
0007EA5E                            
0007EA5E                            loc_72DEA:
0007EA5E 0890 0002                  		bclr	#2,(a0)
0007EA62 08D0 0001                  		bset	#1,(a0)
0007EA66 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007EA6C 6600                       		bne.s	loc_72E02
0007EA6E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007EA76                            
0007EA76                            loc_72E02:
0007EA76 504F                       		addq.w	#8,sp
0007EA78 4E75                       		rts	
0007EA7A                            ; ===========================================================================
0007EA7A                            
0007EA7A                            loc_72E06:				; XREF: loc_72A64
0007EA7A 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007EA80 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007EA84 0815 0002                  		btst	#2,(a5)
0007EA88 6600                       		bne.s	locret_72E1E
0007EA8A 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0007EA92                            
0007EA92                            locret_72E1E:
0007EA92 4E75                       		rts	
0007EA94                            ; ===========================================================================
0007EA94                            
0007EA94                            loc_72E20:				; XREF: loc_72A64
0007EA94 0895 0003                  		bclr	#3,(a5)
0007EA98 4E75                       		rts	
0007EA9A                            ; ===========================================================================
0007EA9A                            
0007EA9A                            loc_72E26:				; XREF: loc_72A64
0007EA9A 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007EA9E 4E75                       		rts	
0007EAA0                            ; ===========================================================================
0007EAA0                            
0007EAA0                            loc_72E2C:				; XREF: loc_72A64
0007EAA0 101C                       		move.b	(a4)+,d0
0007EAA2 E148                       		lsl.w	#8,d0
0007EAA4 101C                       		move.b	(a4)+,d0
0007EAA6 D8C0                       		adda.w	d0,a4
0007EAA8 534C                       		subq.w	#1,a4
0007EAAA 4E75                       		rts	
0007EAAC                            ; ===========================================================================
0007EAAC                            
0007EAAC                            loc_72E38:				; XREF: loc_72A64
0007EAAC 7000                       		moveq	#0,d0
0007EAAE 101C                       		move.b	(a4)+,d0
0007EAB0 121C                       		move.b	(a4)+,d1
0007EAB2 4A35 0024                  		tst.b	$24(a5,d0.w)
0007EAB6 6600                       		bne.s	loc_72E48
0007EAB8 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007EABC                            
0007EABC                            loc_72E48:
0007EABC 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007EAC0 66DE                       		bne.s	loc_72E2C
0007EAC2 544C                       		addq.w	#2,a4
0007EAC4 4E75                       		rts	
0007EAC6                            ; ===========================================================================
0007EAC6                            
0007EAC6                            loc_72E52:				; XREF: loc_72A64
0007EAC6 7000                       		moveq	#0,d0
0007EAC8 102D 000D                  		move.b	$D(a5),d0
0007EACC 5900                       		subq.b	#4,d0
0007EACE 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007EAD2 1B40 000D                  		move.b	d0,$D(a5)
0007EAD6 60C8                       		bra.s	loc_72E2C
0007EAD8                            ; ===========================================================================
0007EAD8                            
0007EAD8                            loc_72E64:				; XREF: loc_72A64
0007EAD8 103C 0088                  		move.b	#$88,d0
0007EADC 123C 000F                  		move.b	#$F,d1
0007EAE0 4EBA F88E                  		jsr	sub_7272E(pc)
0007EAE4 103C 008C                  		move.b	#$8C,d0
0007EAE8 123C 000F                  		move.b	#$F,d1
0007EAEC 6000 F882                  		bra.w	sub_7272E
0007EAF0                            ; ===========================================================================
0007EAF0                            Kos_Z80:	incbin	sound\z80.bin
0007EDA0 00                         		even
0007EDA0                            Music01:
0007EDA0                            		incbin	sound\music01.bin
0007F470 00                         		even
0007F470                            Music02:
0007F470                            Music03:
0007F470                            Music04:
0007F470                            Music05:
0007F470                            Music06:
0007F470                            Music07:
0007F470                            Music08:
0007F470                            Music09:
0007F470                            Music0A:
0007F470                            Music0B:
0007F470                            Music0C:
0007F470                            Music0D:
0007F470                            Music0E:
0007F470                            Music0F:
0007F470                            Music10:
0007F470                            Music11:
0007F470                            Music12:
0007F470                            Music13:
0007F470                            Music14:
0007F470                            Music15:
0007F470                            Music16:
0007F470                            Music17:
0007F470                            Music18:
0007F470                            Music19:
0007F470                            Music1A:
0007F470                            Music1B:
0007F470                            Music1C:
0007F470                            Music1D:
0007F470                            Music1E:
0007F470                            Music1F:
0007F470                            Music20:
0007F470                            Music21:
0007F470                            Music22:
0007F470                            Music23:
0007F470                            Music24:
0007F470                            Music25:
0007F470                            Music26:
0007F470                            Music27:
0007F470                            Music28:
0007F470                            Music29:
0007F470                            Music2A:
0007F470                            Music2B:
0007F470                            Music2C:
0007F470                            Music2D:
0007F470                            Music2E:
0007F470                            Music2F:
0007F470                            Music30:
0007F470                            Music31:
0007F470                            Music32:
0007F470                            Music33:
0007F470                            Music34:
0007F470                            Music35:
0007F470                            Music36:
0007F470                            Music37:
0007F470                            Music38:
0007F470                            Music39:
0007F470                            Music3A:
0007F470                            Music3B:
0007F470                            Music3C:
0007F470                            Music3D:
0007F470                            Music3E:
0007F470                            Music3F:
0007F470                            Music40:
0007F470                            Music41:
0007F470                            Music42:
0007F470                            Music43:
0007F470                            Music44:
0007F470                            Music45:
0007F470                            Music46:
0007F470                            Music47:
0007F470                            Music48:
0007F470                            Music49:
0007F470                            Music4A:
0007F470                            Music4B:
0007F470                            Music4C:
0007F470                            Music4D:
0007F470                            Music4E:
0007F470                            Music4F:
0007F470                            Music50:
0007F470                            Music51:
0007F470                            Music52:
0007F470                            Music53:
0007F470                            Music54:
0007F470                            Music55:
0007F470                            Music56:
0007F470                            Music57:
0007F470                            Music58:
0007F470                            Music59:
0007F470                            Music5A:
0007F470                            Music5B:
0007F470                            Music5C:
0007F470                            Music5D:
0007F470                            Music5E:
0007F470                            Music5F:
0007F470                            Music60:
0007F470                            Music61:
0007F470                            Music62:
0007F470                            Music63:
0007F470                            Music64:
0007F470                            Music65:
0007F470                            Music66:
0007F470                            Music67:
0007F470                            Music68:
0007F470                            Music69:
0007F470                            Music6A:
0007F470                            Music6B:
0007F470                            Music6C:
0007F470                            Music6D:
0007F470                            Music6E:
0007F470                            Music6F:
0007F470                            Music70:
0007F470                            Music71:
0007F470                            Music72:
0007F470                            Music73:
0007F470                            Music74:
0007F470                            Music75:
0007F470                            Music76:
0007F470                            Music77:
0007F470                            Music78:
0007F470                            Music79:
0007F470                            Music7A:
0007F470                            Music7B:
0007F470                            Music7C:
0007F470                            Music7D:
0007F470                            Music7E:
0007F470                            Music7F:
0007F470                            MusicE5:
0007F470                            MusicE6:
0007F470                            MusicE7:
0007F470                            MusicE8:
0007F470                            MusicE9:
0007F470                            MusicEA:
0007F470                            MusicEB:
0007F470                            MusicEC:
0007F470                            MusicED:
0007F470                            MusicEE:
0007F470                            MusicEF:
0007F470                            MusicF0:
0007F470                            MusicF1:
0007F470                            MusicF2:
0007F470                            MusicF3:
0007F470                            MusicF4:
0007F470                            MusicF5:
0007F470                            MusicF6:
0007F470                            MusicF7:
0007F470                            MusicF8:
0007F470                            MusicF9:
0007F470                            MusicFA:
0007F470                            MusicFB:
0007F470                            MusicFC:
0007F470                            MusicFD:
0007F470                            MusicFE:
0007F470                            MusicFF:
0007F470                            Music81:	incbin	sound\music01.bin
0007FB40 00                         		even
0007FB40                            Music82:	incbin	sound\music82.bin
0008025E                            		even
0008025E                            Music83:	incbin	sound\music82.bin
0008097C                            		even
0008097C                            Music84:	incbin	sound\music84.bin
00080DEA                            		even
00080DEA                            Music85:	incbin	sound\music85.bin
00081B56 00                         		even
00081B56                            Music86:	include	sound\music86.asm
00081B56                            ; =============================================================================================
00081B56                            ; Project Name:		dp
00081B56                            ; Created:		5th June 2010
00081B56                            ; ---------------------------------------------------------------------------------------------
00081B56                            ; ASM'd using S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00081B56                            ; =============================================================================================
00081B56                            
00081B56                            dp_Header:
00081B56 0000                       	smpsHeaderVoice	dp_Voices
00081B58 0603                       	smpsHeaderChan	$06,	$03
00081B5A 0200                       	smpsHeaderTempo	$02,	$00
00081B5C                            
00081B5C 0000 0000                  	smpsHeaderDAC	dp_DAC
00081B60 0000 0018                  	smpsHeaderFM	dp_FM1,	smpsPitch00,	$18
00081B64 0000 F418                  	smpsHeaderFM	dp_FM2,	smpsPitch01lo,	$18
00081B68 0000 000D                  	smpsHeaderFM	dp_FM3,	smpsPitch00,	$0D
00081B6C 0000 0910                  	smpsHeaderFM	dp_FM4,	smpsPitch00+$09,	$10
00081B70 0000 000A                  	smpsHeaderFM	dp_FM5,	smpsPitch00,	$0A
00081B74 0000 F404 0000             	smpsHeaderPSG	dp_PSG1,	smpsPitch01lo,	$04,	$00
00081B7A 0000 F407 0000             	smpsHeaderPSG	dp_PSG2,	smpsPitch01lo,	$07,	$00
00081B80 0000 2300 0000             	smpsHeaderPSG	dp_PSG3,	smpsPitch02hi+$0B,	$00,	$00
00081B86 B98B 00BF CB8B 00BF        	dc.b		nAb4,	nBb0,	$00,	$bf,	nD6,	nBb0,	$00,	$bf
00081B8E D68B 00BF                  	dc.b		nCs7,	nBb0,	$00,	$bf
00081B92 E88B                       	smpsNoteFill	$8B
00081B94 00BF                       	dc.b		$00,	$bf
00081B96                            
00081B96                            ; DAC Data
00081B96                            dp_DAC:
00081B96                            dp_Loop01:
00081B96                            
00081B96 AA12 8112 820C 8106 810C+  	dc.b	$AA, $12, $81, $12, $82, $0C, $81, $06, $81, $0C, $81, $12, $82, $0C
00081BA4 AA12 8112 820C 8106 810C+  	dc.b	$AA, $12, $81, $12, $82, $0C, $81, $06, $81, $0C, $81, $12, $82, $0C
00081BB2 AA12 8112 820C 8106 810C+  	dc.b	$AA, $12, $81, $12, $82, $0C, $81, $06, $81, $0C, $81, $12, $82, $0C
00081BC0 AA12 8112 820C 8106 810C+  	dc.b	$AA, $12, $81, $12, $82, $0C, $81, $06, $81, $0C, $81, $12, $82, $0C
00081BCE AA12 8112 820C 8106 810C+  	dc.b	$AA, $12, $81, $12, $82, $0C, $81, $06, $81, $0C, $81, $12, $82, $0C
00081BDC AA12 8112 820C 8106 810C+  	dc.b	$AA, $12, $81, $12, $82, $0C, $81, $06, $81, $0C, $81, $12, $82, $0C
00081BEA AA12 8112 820C 8106 810C+  	dc.b	$AA, $12, $81, $12, $82, $0C, $81, $06, $81, $0C, $81, $12, $82, $0C
00081BF8 AA12 8112 820C 8106 810C+  	dc.b	$AA, $12, $81, $12, $82, $0C, $81, $06, $81, $0C, $86, $06, $86, $06, $86, $06, $82, $0C
00081C0A F6FF 8A                    	smpsJump	dp_Loop01
00081C0D                            ; FM1 Data
00081C0D                            dp_FM1:
00081C0D F800 00                    	smpsCall	dp_Call01
00081C10                            
00081C10                            dp_Call01:
00081C10 EF01                       	smpsFMvoice	$01
00081C12 E0C0                       	smpsPan		panCentre,	$00
00081C14 F001 0103 05               	smpsModSet	$01,	$01,	$03,	$05
00081C19                            dp_Loop02:
00081C19 B830 B718 B6B4 30B6        	dc.b		nG4,	$30,	nFs4,	$18,	nF4,	nEb4,	$30,	nF4
00081C21 18B7                       	dc.b		$18,	nFs4
00081C23 F700 03FF F2               	smpsLoop	$00,	$03,	dp_Loop02
00081C28 B830 C4C3 B7               	dc.b		nG4,	$30,	nG5,	nFs5,	nFs4
00081C2D F6FF EA                    	smpsJump	dp_Loop02
00081C30                            
00081C30                            ; FM2 Data
00081C30                            dp_FM2:
00081C30 F8FF DE                    	smpsCall	dp_Call01
00081C33                            
00081C33                            ; FM3 Data
00081C33                            dp_FM3:
00081C33 EF02                       	smpsFMvoice	$02
00081C35 E080                       	smpsPan		panLeft,	$00
00081C37                            dp_Loop03:
00081C37 9760 E7                    	dc.b		nBb1,	$60,	smpsNoAttack
00081C3A F700 06FF F9               	smpsLoop	$00,	$06,	dp_Loop03
00081C3F 9796                       	dc.b		nBb1,	nA1
00081C41 F6FF F4                    	smpsJump	dp_Loop03
00081C44                            
00081C44                            ; FM4 Data
00081C44                            dp_FM4:
00081C44 EF02                       	smpsFMvoice	$02
00081C46 E040                       	smpsPan		panRight,	$00
00081C48 F6FF ED                    	smpsJump	dp_Loop03
00081C4B                            
00081C4B                            ; FM5 Data
00081C4B                            dp_FM5:
00081C4B EF03                       	smpsFMvoice	$03
00081C4D E0C0                       	smpsPan		panCentre,	$00
00081C4F                            dp_Jump01:
00081C4F AC06 800C B806 8030        	dc.b		nG3,	$06,	nRst,	$0C,	nG4,	$06,	nRst,	$30
00081C57 8018 8060                  	dc.b		nRst,	$18,	nRst,	$60
00081C5B EF04                       	smpsFMvoice	$04
00081C5D E918                       	smpsAlterPitch	$18
00081C5F E619                       	smpsAlterVol	$19
00081C61 B303 AFAC AF               	dc.b		nD4,	$03,	nBb3,	nG3,	nBb3
00081C66 E6FC                       	smpsAlterVol	$FC
00081C68 B4AF ACAF                  	dc.b		nEb4,	nBb3,	nG3,	nBb3
00081C6C E6FC                       	smpsAlterVol	$FC
00081C6E B5AF ACAF                  	dc.b		nE4,	nBb3,	nG3,	nBb3
00081C72 E6FC                       	smpsAlterVol	$FC
00081C74 B4AF ACAF                  	dc.b		nEb4,	nBb3,	nG3,	nBb3
00081C78 E6FC                       	smpsAlterVol	$FC
00081C7A B3AF ACAF                  	dc.b		nD4,	nBb3,	nG3,	nBb3
00081C7E E6FC                       	smpsAlterVol	$FC
00081C80 B4AF ACAF                  	dc.b		nEb4,	nBb3,	nG3,	nBb3
00081C84 E6FD                       	smpsAlterVol	$FD
00081C86 B5AF ACAF                  	dc.b		nE4,	nBb3,	nG3,	nBb3
00081C8A E6FE                       	smpsAlterVol	$FE
00081C8C B6AF ACAF B7AF ACAF        	dc.b		nF4,	nBb3,	nG3,	nBb3,	nFs4,	nBb3,	nG3,	nBb3
00081C94 E602                       	smpsAlterVol	$02
00081C96 B4AF ACAF                  	dc.b		nEb4,	nBb3,	nG3,	nBb3
00081C9A E603                       	smpsAlterVol	$03
00081C9C B5AF ACAF                  	dc.b		nE4,	nBb3,	nG3,	nBb3
00081CA0 E604                       	smpsAlterVol	$04
00081CA2 B4AF ACAF                  	dc.b		nEb4,	nBb3,	nG3,	nBb3
00081CA6 E604                       	smpsAlterVol	$04
00081CA8 B3AF ACAF                  	dc.b		nD4,	nBb3,	nG3,	nBb3
00081CAC E604                       	smpsAlterVol	$04
00081CAE B4AF ACAF                  	dc.b		nEb4,	nBb3,	nG3,	nBb3
00081CB2 E604                       	smpsAlterVol	$04
00081CB4 B6AF ACAF                  	dc.b		nF4,	nBb3,	nG3,	nBb3
00081CB8 E604                       	smpsAlterVol	$04
00081CBA B7AF ACAF                  	dc.b		nFs4,	nBb3,	nG3,	nBb3
00081CBE EF03                       	smpsFMvoice	$03
00081CC0 E9E8                       	smpsAlterPitch	$E8
00081CC2 E6E7                       	smpsAlterVol	$E7
00081CC4 AC06 800C B806 8030        	dc.b		nG3,	$06,	nRst,	$0C,	nG4,	$06,	nRst,	$30
00081CCC 8018 8060 AC06 800C        	dc.b		nRst,	$18,	nRst,	$60,	nG3,	$06,	nRst,	$0C
00081CD4 B806 8030 8018             	dc.b		nG4,	$06,	nRst,	$30,	nRst,	$18
00081CDA EF04                       	smpsFMvoice	$04
00081CDC E918                       	smpsAlterPitch	$18
00081CDE E614                       	smpsAlterVol	$14
00081CE0 9F03 A3A6 A9               	dc.b		nFs2,	$03,	nBb2,	nCs3,	nE3
00081CE5 E6FA                       	smpsAlterVol	$FA
00081CE7 ABAF B2B5                  	dc.b		nFs3,	nBb3,	nCs4,	nE4
00081CEB E6FA                       	smpsAlterVol	$FA
00081CED ABAF B2B5                  	dc.b		nFs3,	nBb3,	nCs4,	nE4
00081CF1 E6FA                       	smpsAlterVol	$FA
00081CF3 B7BB BEC1 C3C1 BEBB        	dc.b		nFs4,	nBb4,	nCs5,	nE5,	nFs5,	nE5,	nCs5,	nBb4
00081CFB E606                       	smpsAlterVol	$06
00081CFD B7B5 B2AF                  	dc.b		nFs4,	nE4,	nCs4,	nBb3
00081D01 E606                       	smpsAlterVol	$06
00081D03 ABA9 A6A3                  	dc.b		nFs3,	nE3,	nCs3,	nBb2
00081D07 E606                       	smpsAlterVol	$06
00081D09 9FA3 A6AB                  	dc.b		nFs2,	nBb2,	nCs3,	nFs3
00081D0D EF03                       	smpsFMvoice	$03
00081D0F E9E8                       	smpsAlterPitch	$E8
00081D11 E6EC                       	smpsAlterVol	$EC
00081D13 F6FF 3A                    	smpsJump	dp_Jump01
00081D16                            
00081D16                            ; PSG1 Data
00081D16                            dp_PSG1:
00081D16 F502                       	smpsPSGvoice	$02
00081D18 F800 00                    	smpsCall	dp_Call02
00081D1B                            
00081D1B                            dp_Call02:
00081D1B 8060 8060 B303 AFAC        	dc.b		nRst,	$60,	nRst,	$60,	nD4,	$03,	nBb3,	nG3
00081D23 AFB4 AFAC AF               	dc.b		nBb3,	nEb4,	nBb3,	nG3,	nBb3
00081D28 ECFF                       	smpsSetVol	$FF
00081D2A B5AF ACAF B4AF ACAF        	dc.b		nE4,	nBb3,	nG3,	nBb3,	nEb4,	nBb3,	nG3,	nBb3
00081D32 ECFF                       	smpsSetVol	$FF
00081D34 B3AF ACAF B4AF ACAF        	dc.b		nD4,	nBb3,	nG3,	nBb3,	nEb4,	nBb3,	nG3,	nBb3
00081D3C ECFF                       	smpsSetVol	$FF
00081D3E B5AF ACAF B6AF ACAF        	dc.b		nE4,	nBb3,	nG3,	nBb3,	nF4,	nBb3,	nG3,	nBb3
00081D46 B7AF ACAF B4AF ACAF        	dc.b		nFs4,	nBb3,	nG3,	nBb3,	nEb4,	nBb3,	nG3,	nBb3
00081D4E EC01                       	smpsSetVol	$01
00081D50 B5AF ACAF B4AF ACAF        	dc.b		nE4,	nBb3,	nG3,	nBb3,	nEb4,	nBb3,	nG3,	nBb3
00081D58 EC01                       	smpsSetVol	$01
00081D5A B3AF ACAF B4AF ACAF        	dc.b		nD4,	nBb3,	nG3,	nBb3,	nEb4,	nBb3,	nG3,	nBb3
00081D62 EC01                       	smpsSetVol	$01
00081D64 B6AF ACAF B7AF ACAF        	dc.b		nF4,	nBb3,	nG3,	nBb3,	nFs4,	nBb3,	nG3,	nBb3
00081D6C 8060 8060 8060 9F03        	dc.b		nRst,	$60,	nRst,	$60,	nRst,	$60,	nFs2,	$03
00081D74 A3A6 A9                    	dc.b		nBb2,	nCs3,	nE3
00081D77 ECFF                       	smpsSetVol	$FF
00081D79 ABAF B2B5                  	dc.b		nFs3,	nBb3,	nCs4,	nE4
00081D7D ECFF                       	smpsSetVol	$FF
00081D7F ABAF B2B5                  	dc.b		nFs3,	nBb3,	nCs4,	nE4
00081D83 ECFF                       	smpsSetVol	$FF
00081D85 B7BB BEC1 C3C1 BEBB        	dc.b		nFs4,	nBb4,	nCs5,	nE5,	nFs5,	nE5,	nCs5,	nBb4
00081D8D EC01                       	smpsSetVol	$01
00081D8F B7B5 B2AF                  	dc.b		nFs4,	nE4,	nCs4,	nBb3
00081D93 EC01                       	smpsSetVol	$01
00081D95 ABA9 A6A3                  	dc.b		nFs3,	nE3,	nCs3,	nBb2
00081D99 EC01                       	smpsSetVol	$01
00081D9B 9FA3 A6AB                  	dc.b		nFs2,	nBb2,	nCs3,	nFs3
00081D9F F6FF 7A                    	smpsJump	dp_Call02
00081DA2                            
00081DA2                            ; PSG2 Data
00081DA2                            dp_PSG2:
00081DA2 F001 0102 05               	smpsModSet	$01,	$01,	$02,	$05
00081DA7 F502                       	smpsPSGvoice	$02
00081DA9 8003                       	dc.b		nRst,	$03
00081DAB F8FF 6E                    	smpsCall	dp_Call02
00081DAE                            
00081DAE                            ; PSG3 Data
00081DAE                            dp_PSG3:
00081DAE F3E7                       	smpsPSGform	$E7
00081DB0                            dp_Jump02:
00081DB0 F504                       	smpsPSGvoice	$04
00081DB2                            dp_Loop04:
00081DB2 B10C                       	dc.b		nC4,	$0C
00081DB4 EC04                       	smpsSetVol	$04
00081DB6 F509                       	smpsPSGvoice	$09
00081DB8 B1                         	dc.b		nC4
00081DB9 ECFE                       	smpsSetVol	$FE
00081DBB B1                         	dc.b		nC4
00081DBC EC02                       	smpsSetVol	$02
00081DBE B1                         	dc.b		nC4
00081DBF ECFC                       	smpsSetVol	$FC
00081DC1 F700 02FF ED               	smpsLoop	$00,	$02,	dp_Loop04
00081DC6 F6FF E8                    	smpsJump	dp_Jump02
00081DC9                            dp_Jump03:
00081DC9 8B06 800C 8B06 8018        	dc.b		nBb0,	$06,	nRst,	$0C,	nBb0,	$06,	nRst,	$18
00081DD1 8B06 8B80 8B80 18          	dc.b		nBb0,	$06,	nBb0,	nRst,	nBb0,	nRst,	$18
00081DD8 F6FF EF                    	smpsJump	dp_Jump03
00081DDB                            dp_Jump04:
00081DDB 9624 8C0C 8024 8C0C        	dc.b		nA1,	$24,	nB0,	$0C,	nRst,	$24,	nB0,	$0C
00081DE3 F6FF F6                    	smpsJump	dp_Jump04
00081DE6                            dp_Loop05:
00081DE6 9660                       	dc.b		nA1,	$60
00081DE8 F700 07FF FA               	smpsLoop	$00,	$07,	dp_Loop05
00081DED 3012 8506 8687 800C        	dc.b		$30,	$12,	nE0,	$06,	nF0,	nFs0,	nRst,	$0C
00081DF5 F6FF EF                    	smpsJump	dp_Loop05
00081DF8                            dp_Jump05:
00081DF8 8960                       	dc.b		nAb0,	$60
00081DFA F6FF FC                    	smpsJump	dp_Jump05
00081DFD                            
00081DFD                            dp_Voices:
00081DFD 380A 7030 001F 1F1F 1F12+  	dc.b		$38,$0A,$70,$30,$00,$1F,$1F,$1F,$1F,$12,$0E,$0A,$0A,$00,$04,$04
00081E0D 0326 2626 2824 2D12 80     	dc.b		$03,$26,$26,$26,$28,$24,$2D,$12,$80;			Voice 00
00081E16 0D40 501B 7F4E 5F5F 5F07+  	dc.b		$0D,$40,$50,$1B,$7F,$4E,$5F,$5F,$5F,$07,$1F,$02,$0D,$05,$07,$00
00081E26 0765 0808 0700 8080 80     	dc.b		$07,$65,$08,$08,$07,$00,$80,$80,$80;			Voice 01
00081E2F 0734 7402 011F 1F1F 1F0A+  	dc.b		$07,$34,$74,$02,$01,$1F,$1F,$1F,$1F,$0A,$0A,$05,$03,$00,$00,$00
00081E3F 0037 3727 278A 8A80 80     	dc.b		$00,$37,$37,$27,$27,$8A,$8A,$80,$80;			Voice 02
00081E48 3D37 7404 34DF 0A4A 4A04+  	dc.b		$3D,$37,$74,$04,$34,$DF,$0A,$4A,$4A,$04,$0F,$0F,$02,$01,$03,$00
00081E58 0320 1313 131C 8585 85     	dc.b		$03,$20,$13,$13,$13,$1C,$85,$85,$85;			Voice 03
00081E61 2C35 7635 361F 1D1F 1C03+  	dc.b		$2C,$35,$76,$35,$36,$1F,$1D,$1F,$1C,$03,$0A,$03,$0A,$02,$02,$02
00081E71 02A3 77A3 771E 8028        	dc.b		$02,$A3,$77,$A3,$77,$1E,$80,$28;			Voice 04
00081E7A 00                         	even
00081E7A 00                         	even
00081E7A                            		even
00081E7A                            Music87:	incbin	sound\music87.bin
00082060                            		even
00082060                            Music88:	incbin	sound\music88.bin
0008214E                            		even
0008214E                            Music89:	incbin	sound\music89.bin
00082D44 00                         		even
00082D44                            Music8A:	incbin	sound\music89.bin
0008393A 00                         		even
0008393A                            Music8B:	incbin	sound\music8B.bin
00083BD4                            		even
00083BD4                            Music8C:	incbin	sound\music8C.bin
000840BE                            		even
000840BE                            Music8D:	incbin	sound\music8D.bin
000842DA                            		even
000842DA                            Music8E:	include	sound\music8E.asm
000842DA                            ; =============================================================================================
000842DA                            ; Project Name:		pico
000842DA                            ; Created:		8th March 2011
000842DA                            ; ---------------------------------------------------------------------------------------------
000842DA                            ; ASM'd using S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
000842DA                            ; =============================================================================================
000842DA                            
000842DA                            pico_Header:
000842DA 0000                       	smpsHeaderVoice	pico_Voices
000842DC 0603                       	smpsHeaderChan	$06,	$03
000842DE 0106                       	smpsHeaderTempo	$01,	$06
000842E0                            
000842E0 0000 0000                  	smpsHeaderDAC	pico_DAC
000842E4 0000 0C12                  	smpsHeaderFM	pico_FM1,	smpsPitch01hi,	$12
000842E8 0000 0C16                  	smpsHeaderFM	pico_FM2,	smpsPitch01hi,	$16
000842EC 0000 0C16                  	smpsHeaderFM	pico_FM3,	smpsPitch01hi,	$16
000842F0 0000 0C16                  	smpsHeaderFM	pico_FM4,	smpsPitch01hi,	$16
000842F4 0000 0C1A                  	smpsHeaderFM	pico_FM5,	smpsPitch01hi,	$1A
000842F8 0000 F403 000C             	smpsHeaderPSG	pico_PSG1,	smpsPitch01lo,	$03,	$0C
000842FE 0000 F403 000C             	smpsHeaderPSG	pico_PSG2,	smpsPitch01lo,	$03,	$0C
00084304 0000 0005 000C             	smpsHeaderPSG	pico_PSG3,	smpsPitch00,	$05,	$0C
0008430A F2                         	smpsStop
0008430B F2                         	smpsStop
0008430C                            
0008430C                            ; DAC Data
0008430C                            pico_DAC:
0008430C 8206 8181 8281 8182        	dc.b		dSnare,	$06,	dKick,	dKick,	dSnare,	dKick,	dKick,	dSnare
00084314 8182 8181 8281 8182        	dc.b		dKick,	dSnare,	dKick,	dKick,	dSnare,	dKick,	dKick,	dSnare
0008431C 8101 8081 8180 8186        	dc.b		dKick,	$01,	nRst,	dKick,	dKick,	nRst,	dKick,	$86
00084324 068C 8C86 8C8C 868C        	dc.b		$06,	$8C,	$8C,	$86,	$8C,	$8C,	$86,	$8C
0008432C 8C82                       	dc.b		$8C,	dSnare
0008432E F2                         	smpsStop
0008432F                            
0008432F                            ; FM1 Data
0008432F                            pico_FM1:
0008432F EF02                       	smpsFMvoice	$02
00084331 8805 8001 9405 8001        	dc.b		nG0,	$05,	nRst,	$01,	nG1,	$05,	nRst,	$01
00084339 8805 8001 8F05 8007        	dc.b		nG0,	$05,	nRst,	$01,	nD1,	$05,	nRst,	$07
00084341 9405 8001 8805 8007        	dc.b		nG1,	$05,	nRst,	$01,	nG0,	$05,	nRst,	$07
00084349 8A05 8001 9605 8001        	dc.b		nA0,	$05,	nRst,	$01,	nA1,	$05,	nRst,	$01
00084351 8A05 8001 9105 8007        	dc.b		nA0,	$05,	nRst,	$01,	nE1,	$05,	nRst,	$07
00084359 9605 8001 8A05 8007        	dc.b		nA1,	$05,	nRst,	$01,	nA0,	$05,	nRst,	$07
00084361 8F05 8001 9B05 8001        	dc.b		nD1,	$05,	nRst,	$01,	nD2,	$05,	nRst,	$01
00084369 8F05 8001 9105 8001        	dc.b		nD1,	$05,	nRst,	$01,	nE1,	$05,	nRst,	$01
00084371 9D05 8001 9105 8001        	dc.b		nE2,	$05,	nRst,	$01,	nE1,	$05,	nRst,	$01
00084379 9405 8001 A005 8001        	dc.b		nG1,	$05,	nRst,	$01,	nG2,	$05,	nRst,	$01
00084381 9405 8001 965F 8001        	dc.b		nG1,	$05,	nRst,	$01,	nA1,	$5F,	nRst,	$01
00084389 F2                         	smpsStop
0008438A                            
0008438A                            ; FM2 Data
0008438A                            pico_FM2:
0008438A E103                       	smpsAlterNote	$03
0008438C EF01                       	smpsFMvoice	$01
0008438E                            pico_Jump01:
0008438E A706 A7A7 A707 8005        	dc.b		nD3,	$06,	nD3,	nD3,	nD3,	$07,	nRst,	$05
00084396 A707 8005 A905 8007        	dc.b		nD3,	$07,	nRst,	$05,	nE3,	$05,	nRst,	$07
0008439E A905 8007 A907 8005        	dc.b		nE3,	$05,	nRst,	$07,	nE3,	$07,	nRst,	$05
000843A6 A911 8001 AC05 800D        	dc.b		nE3,	$11,	nRst,	$01,	nG3,	$05,	nRst,	$0D
000843AE AE05 800D B111 8001        	dc.b		nA3,	$05,	nRst,	$0D,	nC4,	$11,	nRst,	$01
000843B6 B35F 8001                  	dc.b		nD4,	$5F,	nRst,	$01
000843BA F2                         	smpsStop
000843BB                            
000843BB                            ; FM3 Data
000843BB                            pico_FM3:
000843BB E1FF                       	smpsAlterNote	$FF
000843BD EF00                       	smpsFMvoice	$00
000843BF A506 A5A5 A480 A480        	dc.b		nC3,	$06,	nC3,	nC3,	nB2,	nRst,	nB2,	nRst
000843C7 A780 06A7 0680 06A6        	dc.b		nD3,	nRst,	$06,	nD3,	$06,	nRst,	$06,	nCs3
000843CF 0680 A611 8001 A905        	dc.b		$06,	nRst,	nCs3,	$11,	nRst,	$01,	nE3,	$05
000843D7 800D AB05 800D AE11        	dc.b		nRst,	$0D,	nFs3,	$05,	nRst,	$0D,	nA3,	$11
000843DF 8001 B05F 8001             	dc.b		nRst,	$01,	nB3,	$5F,	nRst,	$01
000843E5 F2                         	smpsStop
000843E6                            
000843E6                            ; FM4 Data
000843E6                            pico_FM4:
000843E6 E101                       	smpsAlterNote	$01
000843E8 EF00                       	smpsFMvoice	$00
000843EA                            pico_Jump02:
000843EA A006 A0A0 A080 A080        	dc.b		nG2,	$06,	nG2,	nG2,	nG2,	nRst,	nG2,	nRst
000843F2 A280 A203 8009 A205        	dc.b		nA2,	nRst,	nA2,	$03,	nRst,	$09,	nA2,	$05
000843FA 8007 A211 8001 A505        	dc.b		nRst,	$07,	nA2,	$11,	nRst,	$01,	nC3,	$05
00084402 800D A705 800D AA11        	dc.b		nRst,	$0D,	nD3,	$05,	nRst,	$0D,	nF3,	$11
0008440A 8001 AC5F 8001             	dc.b		nRst,	$01,	nG3,	$5F,	nRst,	$01
00084410 F2                         	smpsStop
00084411                            
00084411                            ; FM5 Data
00084411                            pico_FM5:
00084411 E1FD                       	smpsAlterNote	$FD
00084413 F503                       	smpsPSGvoice	$03
00084415 8001                       	dc.b		nRst,	$01
00084417 EF00                       	smpsFMvoice	$00
00084419 F6FF 73                    	smpsJump	pico_Jump01
0008441C F2                         	smpsStop
0008441D                            
0008441D                            ; PSG1 Data
0008441D                            pico_PSG1:
0008441D E101                       	smpsAlterNote	$01
0008441F F503                       	smpsPSGvoice	$03
00084421 F6FF 6B                    	smpsJump	pico_Jump01
00084424 EF00                       	smpsFMvoice	$00
00084426 A706 A7A7 A705 8007        	dc.b		nD3,	$06,	nD3,	nD3,	nD3,	$05,	nRst,	$07
0008442E A705 8007 A903 8009        	dc.b		nD3,	$05,	nRst,	$07,	nE3,	$03,	nRst,	$09
00084436 A903 8009 A905 8007        	dc.b		nE3,	$03,	nRst,	$09,	nE3,	$05,	nRst,	$07
0008443E A911 8001 AC05 800D        	dc.b		nE3,	$11,	nRst,	$01,	nG3,	$05,	nRst,	$0D
00084446 AE05 800D B111 8001        	dc.b		nA3,	$05,	nRst,	$0D,	nC4,	$11,	nRst,	$01
0008444E B35F 8001                  	dc.b		nD4,	$5F,	nRst,	$01
00084452 F2                         	smpsStop
00084453                            
00084453                            ; PSG2 Data
00084453                            pico_PSG2:
00084453 E1FF                       	smpsAlterNote	$FF
00084455 EF00                       	smpsFMvoice	$00
00084457 F503                       	smpsPSGvoice	$03
00084459 F6FF 8F                    	smpsJump	pico_Jump02
0008445C F2                         	smpsStop
0008445D                            
0008445D                            ; PSG3 Data
0008445D                            pico_PSG3:
0008445D F502                       	smpsPSGvoice	$02
0008445F F3E7                       	smpsPSGform	$E7
00084461 D406 D4D4 D405 8007        	dc.b		nB6,	$06,	nB6,	nB6,	nB6,	$05,	nRst,	$07
00084469 D405 8007 D403 8009        	dc.b		nB6,	$05,	nRst,	$07,	nB6,	$03,	nRst,	$09
00084471 D403 8009 D405 8007        	dc.b		nB6,	$03,	nRst,	$09,	nB6,	$05,	nRst,	$07
00084479 D411 8001 D405 800D        	dc.b		nB6,	$11,	nRst,	$01,	nB6,	$05,	nRst,	$0D
00084481 D405 800D D411 8001        	dc.b		nB6,	$05,	nRst,	$0D,	nB6,	$11,	nRst,	$01
00084489 D45F 8001                  	dc.b		nB6,	$5F,	nRst,	$01
0008448D F2                         	smpsStop
0008448E                            
0008448E                            pico_Voices:
0008448E 3D01 0101 0194 1919 190F+  	dc.b		$3D,$01,$01,$01,$01,$94,$19,$19,$19,$0F,$0D,$0D,$0D,$07,$04,$04
0008449E 0425 1A1A 1A15 8080 80     	dc.b		$04,$25,$1A,$1A,$1A,$15,$80,$80,$80;			Voice 00
000844A7 3C71 723F 348D 529F 1F09+  	dc.b		$3C,$71,$72,$3F,$34,$8D,$52,$9F,$1F,$09,$00,$00,$0D,$00,$00,$00
000844B7 0023 0802 F715 801D 87     	dc.b		$00,$23,$08,$02,$F7,$15,$80,$1D,$87;			Voice 01
000844C0 2871 0030 011F 1F1D 1F13+  	dc.b		$28,$71,$00,$30,$01,$1F,$1F,$1D,$1F,$13,$13,$06,$05,$03,$03,$02
000844D0 054F 4F2F 3F0E 141E 80     	dc.b		$05,$4F,$4F,$2F,$3F,$0E,$14,$1E,$80;			Voice 02
000844D9 80                         	dc.b		$80;			Voice 03
000844DA                            	even
000844DA                            	even
000844DA                            		even
000844DA                            Music8F:	incbin	sound\music8F.bin
0008462A                            		even
0008462A                            Music90:	incbin	sound\music90.bin
00084788                            		even
00084788                            Music91:	incbin	sound\music91.bin
00085A56                            		even
00085A56                            Music92:	incbin	sound\music92.bin
00085B80                            		even
00085B80                            Music93:	incbin	sound\music93.bin
00085C4E                            		even
00085C4E                            Music94:	include	sound\music94.asm
00085C4E                            ; Name: Labyrinth Zone
00085C4E                            ; Author: Trox
00085C4E                            
00085C4E                            Lab_Header:
00085C4E 0000                       	smpsHeaderVoice	Lab_Voices
00085C50 0603                       	smpsHeaderChan	$06,	$03
00085C52 0102                       	smpsHeaderTempo	$01,	$02
00085C54                            
00085C54 0000 0000                  	smpsHeaderDAC	Lab_DAC
00085C58 0000 0010                  	smpsHeaderFM	Lab_FM1,	smpsPitch00,	$10
00085C5C 0000 0010                  	smpsHeaderFM	Lab_FM2,	smpsPitch00,	$10
00085C60 0000 0010                  	smpsHeaderFM	Lab_FM3,	smpsPitch00,	$10
00085C64 0000 0010                  	smpsHeaderFM	Lab_FM4,	smpsPitch00,	$10
00085C68 0000 0010                  	smpsHeaderFM	Lab_FM5,	smpsPitch00,	$10
00085C6C 0000 DC00 0000             	smpsHeaderPSG	Lab_PSG1,	smpsPitch03lo,	$00,	$00
00085C72 0000 DC00 0000             	smpsHeaderPSG	Lab_PSG2,	smpsPitch03lo,	$00,	$00
00085C78 0000 0B00 0000             	smpsHeaderPSG	Lab_PSG3,	smpsPitch00+$0B,	$00,	$00
00085C7E                            
00085C7E                            ; FM1 Data
00085C7E                            Lab_FM1:
00085C7E E0C0                       	smpsPan		panCentre,	$00
00085C80 EF00                       	smpsFMvoice	$00
00085C82 C432 800A C007 C280        	dc.b		nG5,	$32,	nRst,	$0A,	nEb5,	$07,	nF5,	nRst
00085C8A 03C0 8007 BD2B 0480        	dc.b		$03,	nEb5,	nRst,	$07,	nC5,	$2B,	$04,	nRst
00085C92 06C0 0480 03C2 0780        	dc.b		$06,	nEb5,	$04,	nRst,	$03,	nF5,	$07,	nRst
00085C9A 06C4 3280 0AC0 07C2        	dc.b		$06,	nG5,	$32,	nRst,	$0A,	nEb5,	$07,	nF5
00085CA2 8003 C080 07BD 2B04        	dc.b		nRst,	$03,	nEb5,	nRst,	$07,	nC5,	$2B,	$04
00085CAA 8006 C004 8003 BD07        	dc.b		nRst,	$06,	nEb5,	$04,	nRst,	$03,	nC5,	$07
00085CB2 8003 BD80 07BD 03BB        	dc.b		nRst,	$03,	nC5,	nRst,	$07,	nC5,	$03,	nBb4
00085CBA 0480 06B8 07C0 0380        	dc.b		$04,	nRst,	$06,	nG4,	$07,	nEb5,	$03,	nRst
00085CC2 07C2 8003 C2C0 0480        	dc.b		$07,	nF5,	nRst,	$03,	nF5,	nEb5,	$04,	nRst
00085CCA 06B8 07BB 0380 07BD        	dc.b		$06,	nG4,	$07,	nBb4,	$03,	nRst,	$07,	nC5
00085CD2 3280 1EBD 0380 07BD        	dc.b		$32,	nRst,	$1E,	nC5,	$03,	nRst,	$07,	nC5
00085CDA 03BB 0480 06B8 07C0        	dc.b		$03,	nBb4,	$04,	nRst,	$06,	nG4,	$07,	nEb5
00085CE2 0380 07C2 8003 C2C0        	dc.b		$03,	nRst,	$07,	nF5,	nRst,	$03,	nF5,	nEb5
00085CEA 0480 06B8 07BB 0380        	dc.b		$04,	nRst,	$06,	nG4,	$07,	nBb4,	$03,	nRst
00085CF2 07BD 3280 1EC9 0A03        	dc.b		$07,	nC5,	$32,	nRst,	$1E,	nC6,	$0A,	$03
00085CFA C70A C407 C00A C2C2        	dc.b		nBb5,	$0A,	nG5,	$07,	nEb5,	$0A,	nF5,	nF5
00085D02 03C0 0AC2 07C4 0AC2        	dc.b		$03,	nEb5,	$0A,	nF5,	$07,	nG5,	$0A,	nF5
00085D0A C203 C00A BD07 C00A        	dc.b		nF5,	$03,	nEb5,	$0A,	nC5,	$07,	nEb5,	$0A
00085D12 C2C2 03C0 04BD 03C0        	dc.b		nF5,	nF5,	$03,	nEb5,	$04,	nC5,	$03,	nEb5
00085D1A C207 C40A C9C9 03C7        	dc.b		nF5,	$07,	nG5,	$0A,	nC6,	nC6,	$03,	nBb5
00085D22 0AC4 07C0 0AC2 C203        	dc.b		$0A,	nG5,	$07,	nEb5,	$0A,	nF5,	nF5,	$03
00085D2A C00A C207 C40A C2C2        	dc.b		nEb5,	$0A,	nF5,	$07,	nG5,	$0A,	nF5,	nF5
00085D32 03C0 0ABD 07C0 0AC2        	dc.b		$03,	nEb5,	$0A,	nC5,	$07,	nEb5,	$0A,	nF5
00085D3A C203 C004 BD03 C0C2        	dc.b		nF5,	$03,	nEb5,	$04,	nC5,	$03,	nEb5,	nF5
00085D42 07C4 0A03                  	dc.b		$07,	nG5,	$0A,	$03
00085D46 F6FF 36                    	smpsJump	Lab_FM1
00085D49                            
00085D49                            ; FM2 Data
00085D49                            Lab_FM2:
00085D49 E0C0                       	smpsPan		panCentre,	$00
00085D4B EF01                       	smpsFMvoice	$01
00085D4D A50A A8AA AB07 AC03        	dc.b		nC3,	$0A,	nEb3,	nF3,	nFs3,	$07,	nG3,	$03
00085D55 8007 AC03 A20A A3A4        	dc.b		nRst,	$07,	nG3,	$03,	nA2,	$0A,	nBb2,	nB2
00085D5D A5A8 AAAB 07AC 0380        	dc.b		nC3,	nEb3,	nF3,	nFs3,	$07,	nG3,	$03,	nRst
00085D65 07AC 03A2 0AA3 A4A5        	dc.b		$07,	nG3,	$03,	nA2,	$0A,	nBb2,	nB2,	nC3
00085D6D A8AA AB07 AC03 8007        	dc.b		nEb3,	nF3,	nFs3,	$07,	nG3,	$03,	nRst,	$07
00085D75 AC03 A20A A3A4 A5A8        	dc.b		nG3,	$03,	nA2,	$0A,	nBb2,	nB2,	nC3,	nEb3
00085D7D AAAB 07AC 0380 07AC        	dc.b		nF3,	nFs3,	$07,	nG3,	$03,	nRst,	$07,	nG3
00085D85 03A2 0AA3 A4A5 A8AA        	dc.b		$03,	nA2,	$0A,	nBb2,	nB2,	nC3,	nEb3,	nF3
00085D8D AB07 AC03 8007 AC03        	dc.b		nFs3,	$07,	nG3,	$03,	nRst,	$07,	nG3,	$03
00085D95 A20A A3A4 A5A8 AAAB        	dc.b		nA2,	$0A,	nBb2,	nB2,	nC3,	nEb3,	nF3,	nFs3
00085D9D 07AC 0380 07AC 03A2        	dc.b		$07,	nG3,	$03,	nRst,	$07,	nG3,	$03,	nA2
00085DA5 0AA3 A4A5 A8AA AB07        	dc.b		$0A,	nBb2,	nB2,	nC3,	nEb3,	nF3,	nFs3,	$07
00085DAD AC03 8007 AC03 A20A        	dc.b		nG3,	$03,	nRst,	$07,	nG3,	$03,	nA2,	$0A
00085DB5 A3A4 A5A8 AAAB 07AC        	dc.b		nBb2,	nB2,	nC3,	nEb3,	nF3,	nFs3,	$07,	nG3
00085DBD 0380 07AC 03A2 0AA3        	dc.b		$03,	nRst,	$07,	nG3,	$03,	nA2,	$0A,	nBb2
00085DC5 A4A5 A5A5 A504 0303        	dc.b		nB2,	nC3,	nC3,	nC3,	nC3,	$04,	$03,	$03
00085DCD A30A 0A0A 0403 03A1        	dc.b		nBb2,	$0A,	$0A,	$0A,	$04,	$03,	$03,	nAb2
00085DD5 0A0A 0A04 0303 A00A        	dc.b		$0A,	$0A,	$0A,	$04,	$03,	$03,	nG2,	$0A
00085DDD 0A0A 0403 03A5 0A0A        	dc.b		$0A,	$0A,	$04,	$03,	$03,	nC3,	$0A,	$0A
00085DE5 0A04 0303 A30A 0A0A        	dc.b		$0A,	$04,	$03,	$03,	nBb2,	$0A,	$0A,	$0A
00085DED 0403 03                    	dc.b		$04,	$03,	$03
00085DF0 EF00                       	smpsFMvoice	$00
00085DF2 A10A                       	dc.b		nAb2,	$0A
00085DF4 EF01                       	smpsFMvoice	$01
00085DF6 0A0A 0403 03A0 0A0A        	dc.b		$0A,	$0A,	$04,	$03,	$03,	nG2,	$0A,	$0A
00085DFE A104 0303 A304 0303        	dc.b		nAb2,	$04,	$03,	$03,	nBb2,	$04,	$03,	$03
00085E06 F6FF 41                    	smpsJump	Lab_FM2
00085E09                            
00085E09                            ; FM3 Data
00085E09                            Lab_FM3:
00085E09 806E                       	dc.b		nRst,	$6E
00085E0B E0C0                       	smpsPan		panCentre,	$00
00085E0D EF00                       	smpsFMvoice	$00
00085E0F BD04 C003 C2C4 04C2        	dc.b		nC5,	$04,	nEb5,	$03,	nF5,	nG5,	$04,	nF5
00085E17 03C0 BD04 C003 BDBB        	dc.b		$03,	nEb5,	nC5,	$04,	nEb5,	$03,	nC5,	nBb4
00085E1F 04BD 03BB B804 BB03        	dc.b		$04,	nC5,	$03,	nBb4,	nG4,	$04,	nBb4,	$03
00085E27 B880 6EBD 04C0 03C2        	dc.b		nG4,	nRst,	$6E,	nC5,	$04,	nEb5,	$03,	nF5
00085E2F C404 C203 C0BD 04C0        	dc.b		nG5,	$04,	nF5,	$03,	nEb5,	nC5,	$04,	nEb5
00085E37 03BD BB04 BD03 BBB8        	dc.b		$03,	nC5,	nBb4,	$04,	nC5,	$03,	nBb4,	nG4
00085E3F 04BB 03B8 807F C403        	dc.b		$04,	nBb4,	$03,	nG4,	nRst,	$7F,	nG5,	$03
00085E47 8007 C403 8007 C403        	dc.b		nRst,	$07,	nG5,	$03,	nRst,	$07,	nG5,	$03
00085E4F 807F 0AC4 0380 07C4        	dc.b		nRst,	$7F,	$0A,	nG5,	$03,	nRst,	$07,	nG5
00085E57 0380 07C4 0380 7F7F        	dc.b		$03,	nRst,	$07,	nG5,	$03,	nRst,	$7F,	$7F
00085E5F 4C                         	dc.b		$4C
00085E60 F6FF A7                    	smpsJump	Lab_FM3
00085E63                            
00085E63                            ; FM4 Data
00085E63                            Lab_FM4:
00085E63 E60E                       	smpsAlterVol	$0E
00085E65 0A                         	dc.b		$0A
00085E66 F6FF A1                    	smpsJump	Lab_FM3
00085E69                            
00085E69                            ; FM5 Data
00085E69                            Lab_FM5:
00085E69 0A                         	dc.b		$0A
00085E6A E60E                       	smpsAlterVol	$0E
00085E6C F6FE 10                    	smpsJump	Lab_FM1
00085E6F                            
00085E6F                            ; PSG1 Data
00085E6F                            Lab_PSG1:
00085E6F F504                       	smpsPSGvoice	$04
00085E71 C904 8006                  	dc.b		nC6,	$04,	nRst,	$06	
00085E75 E603                       	smpsAlterVol	$03
00085E77 C904 8006                  	dc.b		nC6,	$04,	nRst,	$06
00085E7B C904 8006                  	dc.b		nC6,	$04,	nRst,	$06
00085E7F E603                       	smpsAlterVol	$03
00085E81 C904 8006                  	dc.b		nC6,	$04,	nRst,	$06
00085E85 E603                       	smpsAlterVol	$03
00085E87 C904 8006                  	dc.b		nC6,	$04,	nRst,	$06
00085E8B E603                       	smpsAlterVol	$03
00085E8D C904 8006                  	dc.b		nC6,	$04,	nRst,	$06
00085E91 E603                       	smpsAlterVol	$03
00085E93 C904 8006                  	dc.b		nC6,	$04,	nRst,	$06
00085E97 E603                       	smpsAlterVol	$03
00085E99 C904 8056                  	dc.b		nC6,	$04,	nRst,	$56
00085E9D E6EE                       	smpsAlterVol	-$12
00085E9F C904 8006                  	dc.b		nC6,	$04,	nRst,	$06
00085EA3 E603                       	smpsAlterVol	$03
00085EA5 C904 8006                  	dc.b		nC6,	$04,	nRst,	$06
00085EA9 C904 8006                  	dc.b		nC6,	$04,	nRst,	$06
00085EAD E603                       	smpsAlterVol	$03
00085EAF C904 8006                  	dc.b		nC6,	$04,	nRst,	$06
00085EB3 E603                       	smpsAlterVol	$03
00085EB5 C904 8006                  	dc.b		nC6,	$04,	nRst,	$06
00085EB9 E603                       	smpsAlterVol	$03
00085EBB C904 8006                  	dc.b		nC6,	$04,	nRst,	$06
00085EBF E603                       	smpsAlterVol	$03
00085EC1 C904 8006                  	dc.b		nC6,	$04,	nRst,	$06
00085EC5 E603                       	smpsAlterVol	$03
00085EC7 C904 807F                  	dc.b		nC6,	$04,	nRst,	$7F
00085ECB E6EE                       	smpsAlterVol	-$12
00085ECD 7F7F 7F7F 5B               	dc.b		$7F,	$7F,	$7F,	$7F,	$5B
00085ED2 F6FF 9B                    	smpsJump	Lab_PSG1
00085ED5                            
00085ED5                            ; PSG2 Data
00085ED5                            Lab_PSG2:
00085ED5 03                         	dc.b		$03
00085ED6 E603                       	smpsAlterVol	$03
00085ED8 F6FF 95                    	smpsJump	Lab_PSG1
00085EDB                            
00085EDB                            ; PSG3 Data
00085EDB                            Lab_PSG3:
00085EDB F3E7                       	smpsPSGform	$E7
00085EDD                            Lab_Jump01:
00085EDD F502                       	smpsPSGvoice	$02
00085EDF D105 80                    	dc.b		nAb6,	$05,	nRst
00085EE2 F501                       	smpsPSGvoice	$01
00085EE4 D180                       	dc.b		nAb6,	nRst
00085EE6 F502                       	smpsPSGvoice	$02
00085EE8 D180                       	dc.b		nAb6,	nRst
00085EEA F501                       	smpsPSGvoice	$01
00085EEC D180                       	dc.b		nAb6,	nRst
00085EEE F502                       	smpsPSGvoice	$02
00085EF0 D180                       	dc.b		nAb6,	nRst
00085EF2 F501                       	smpsPSGvoice	$01
00085EF4 D180                       	dc.b		nAb6,	nRst
00085EF6 F502                       	smpsPSGvoice	$02
00085EF8 D180                       	dc.b		nAb6,	nRst
00085EFA F501                       	smpsPSGvoice	$01
00085EFC D180                       	dc.b		nAb6,	nRst
00085EFE F502                       	smpsPSGvoice	$02
00085F00 D180                       	dc.b		nAb6,	nRst
00085F02 F501                       	smpsPSGvoice	$01
00085F04 D180                       	dc.b		nAb6,	nRst
00085F06 F502                       	smpsPSGvoice	$02
00085F08 D180                       	dc.b		nAb6,	nRst
00085F0A F501                       	smpsPSGvoice	$01
00085F0C D180                       	dc.b		nAb6,	nRst
00085F0E F502                       	smpsPSGvoice	$02
00085F10 D180                       	dc.b		nAb6,	nRst
00085F12 F501                       	smpsPSGvoice	$01
00085F14 D180                       	dc.b		nAb6,	nRst
00085F16 F502                       	smpsPSGvoice	$02
00085F18 D180                       	dc.b		nAb6,	nRst
00085F1A F501                       	smpsPSGvoice	$01
00085F1C D180                       	dc.b		nAb6,	nRst
00085F1E F502                       	smpsPSGvoice	$02
00085F20 D180                       	dc.b		nAb6,	nRst
00085F22 F501                       	smpsPSGvoice	$01
00085F24 D180                       	dc.b		nAb6,	nRst
00085F26 F502                       	smpsPSGvoice	$02
00085F28 D180                       	dc.b		nAb6,	nRst
00085F2A F501                       	smpsPSGvoice	$01
00085F2C D180                       	dc.b		nAb6,	nRst
00085F2E F502                       	smpsPSGvoice	$02
00085F30 D180                       	dc.b		nAb6,	nRst
00085F32 F501                       	smpsPSGvoice	$01
00085F34 D180                       	dc.b		nAb6,	nRst
00085F36 F502                       	smpsPSGvoice	$02
00085F38 D180                       	dc.b		nAb6,	nRst
00085F3A F501                       	smpsPSGvoice	$01
00085F3C D180                       	dc.b		nAb6,	nRst
00085F3E F502                       	smpsPSGvoice	$02
00085F40 D180                       	dc.b		nAb6,	nRst
00085F42 F501                       	smpsPSGvoice	$01
00085F44 D180                       	dc.b		nAb6,	nRst
00085F46 F502                       	smpsPSGvoice	$02
00085F48 D180                       	dc.b		nAb6,	nRst
00085F4A F501                       	smpsPSGvoice	$01
00085F4C D180                       	dc.b		nAb6,	nRst
00085F4E F502                       	smpsPSGvoice	$02
00085F50 D180                       	dc.b		nAb6,	nRst
00085F52 F501                       	smpsPSGvoice	$01
00085F54 D180                       	dc.b		nAb6,	nRst
00085F56 F502                       	smpsPSGvoice	$02
00085F58 D180                       	dc.b		nAb6,	nRst
00085F5A F501                       	smpsPSGvoice	$01
00085F5C D180                       	dc.b		nAb6,	nRst
00085F5E F502                       	smpsPSGvoice	$02
00085F60 D180                       	dc.b		nAb6,	nRst
00085F62 F501                       	smpsPSGvoice	$01
00085F64 D180                       	dc.b		nAb6,	nRst
00085F66 F502                       	smpsPSGvoice	$02
00085F68 D180                       	dc.b		nAb6,	nRst
00085F6A F501                       	smpsPSGvoice	$01
00085F6C D180                       	dc.b		nAb6,	nRst
00085F6E F502                       	smpsPSGvoice	$02
00085F70 D180                       	dc.b		nAb6,	nRst
00085F72 F501                       	smpsPSGvoice	$01
00085F74 D180                       	dc.b		nAb6,	nRst
00085F76 F502                       	smpsPSGvoice	$02
00085F78 D180                       	dc.b		nAb6,	nRst
00085F7A F501                       	smpsPSGvoice	$01
00085F7C D180                       	dc.b		nAb6,	nRst
00085F7E F502                       	smpsPSGvoice	$02
00085F80 D180                       	dc.b		nAb6,	nRst
00085F82 F501                       	smpsPSGvoice	$01
00085F84 D180                       	dc.b		nAb6,	nRst
00085F86 F502                       	smpsPSGvoice	$02
00085F88 D180                       	dc.b		nAb6,	nRst
00085F8A F501                       	smpsPSGvoice	$01
00085F8C D180                       	dc.b		nAb6,	nRst
00085F8E F502                       	smpsPSGvoice	$02
00085F90 D180                       	dc.b		nAb6,	nRst
00085F92 F501                       	smpsPSGvoice	$01
00085F94 D180                       	dc.b		nAb6,	nRst
00085F96 F502                       	smpsPSGvoice	$02
00085F98 D180                       	dc.b		nAb6,	nRst
00085F9A F501                       	smpsPSGvoice	$01
00085F9C D180                       	dc.b		nAb6,	nRst
00085F9E F502                       	smpsPSGvoice	$02
00085FA0 D180                       	dc.b		nAb6,	nRst
00085FA2 F501                       	smpsPSGvoice	$01
00085FA4 D180                       	dc.b		nAb6,	nRst
00085FA6 F502                       	smpsPSGvoice	$02
00085FA8 D180                       	dc.b		nAb6,	nRst
00085FAA F501                       	smpsPSGvoice	$01
00085FAC D180                       	dc.b		nAb6,	nRst
00085FAE F502                       	smpsPSGvoice	$02
00085FB0 D180                       	dc.b		nAb6,	nRst
00085FB2 F501                       	smpsPSGvoice	$01
00085FB4 D180                       	dc.b		nAb6,	nRst
00085FB6 F502                       	smpsPSGvoice	$02
00085FB8 D180                       	dc.b		nAb6,	nRst
00085FBA F501                       	smpsPSGvoice	$01
00085FBC D180                       	dc.b		nAb6,	nRst
00085FBE F502                       	smpsPSGvoice	$02
00085FC0 D180                       	dc.b		nAb6,	nRst
00085FC2 F501                       	smpsPSGvoice	$01
00085FC4 D180                       	dc.b		nAb6,	nRst
00085FC6 F502                       	smpsPSGvoice	$02
00085FC8 D180                       	dc.b		nAb6,	nRst
00085FCA F501                       	smpsPSGvoice	$01
00085FCC D180                       	dc.b		nAb6,	nRst
00085FCE F502                       	smpsPSGvoice	$02
00085FD0 D180                       	dc.b		nAb6,	nRst
00085FD2 F501                       	smpsPSGvoice	$01
00085FD4 D180                       	dc.b		nAb6,	nRst
00085FD6 F502                       	smpsPSGvoice	$02
00085FD8 D180                       	dc.b		nAb6,	nRst
00085FDA F501                       	smpsPSGvoice	$01
00085FDC D180                       	dc.b		nAb6,	nRst
00085FDE F502                       	smpsPSGvoice	$02
00085FE0 D180                       	dc.b		nAb6,	nRst
00085FE2 F501                       	smpsPSGvoice	$01
00085FE4 D180                       	dc.b		nAb6,	nRst
00085FE6 F502                       	smpsPSGvoice	$02
00085FE8 D180 D104 0303 0580        	dc.b		nAb6,	nRst,	nAb6,	$04,	$03,	$03,	$05,	nRst
00085FF0 05                         	dc.b		$05
00085FF1 F501                       	smpsPSGvoice	$01
00085FF3 D180                       	dc.b		nAb6,	nRst
00085FF5 F502                       	smpsPSGvoice	$02
00085FF7 D180 D104 0303 0580        	dc.b		nAb6,	nRst,	nAb6,	$04,	$03,	$03,	$05,	nRst
00085FFF 05                         	dc.b		$05
00086000 F501                       	smpsPSGvoice	$01
00086002 D180                       	dc.b		nAb6,	nRst
00086004 F502                       	smpsPSGvoice	$02
00086006 D180 D104 0303 0580        	dc.b		nAb6,	nRst,	nAb6,	$04,	$03,	$03,	$05,	nRst
0008600E 05                         	dc.b		$05
0008600F F501                       	smpsPSGvoice	$01
00086011 D180                       	dc.b		nAb6,	nRst
00086013 F502                       	smpsPSGvoice	$02
00086015 D180 D104 0303 0580        	dc.b		nAb6,	nRst,	nAb6,	$04,	$03,	$03,	$05,	nRst
0008601D 05                         	dc.b		$05
0008601E F501                       	smpsPSGvoice	$01
00086020 D180                       	dc.b		nAb6,	nRst
00086022 F502                       	smpsPSGvoice	$02
00086024 D180 D104 0303 0580        	dc.b		nAb6,	nRst,	nAb6,	$04,	$03,	$03,	$05,	nRst
0008602C 05                         	dc.b		$05
0008602D F501                       	smpsPSGvoice	$01
0008602F D180                       	dc.b		nAb6,	nRst
00086031 F502                       	smpsPSGvoice	$02
00086033 D180 D104 0303 0580        	dc.b		nAb6,	nRst,	nAb6,	$04,	$03,	$03,	$05,	nRst
0008603B 05                         	dc.b		$05
0008603C F501                       	smpsPSGvoice	$01
0008603E D180                       	dc.b		nAb6,	nRst
00086040 F502                       	smpsPSGvoice	$02
00086042 D180 D104 0303 0580        	dc.b		nAb6,	nRst,	nAb6,	$04,	$03,	$03,	$05,	nRst
0008604A 05                         	dc.b		$05
0008604B F501                       	smpsPSGvoice	$01
0008604D D180                       	dc.b		nAb6,	nRst
0008604F F502                       	smpsPSGvoice	$02
00086051 D180 D104 0380 03          	dc.b		nAb6,	nRst,	nAb6,	$04,	$03,	nRst,	$03
00086058 F6FE 83                    	smpsJump	Lab_Jump01
0008605B                            
0008605B                            ; DAC Data
0008605B                            Lab_DAC:
0008605B E0C0                       	smpsPan		panCentre,	$00
0008605D 8105 8082 8081 8082        	dc.b		dKick,	$05,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
00086065 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
0008606D 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
00086075 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
0008607D 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
00086085 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
0008608D 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
00086095 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
0008609D 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
000860A5 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
000860AD 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
000860B5 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
000860BD 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
000860C5 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
000860CD 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
000860D5 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
000860DD 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
000860E5 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
000860ED 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
000860F5 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
000860FD 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
00086105 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
0008610D 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
00086115 8081 8082 8081 8082        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	dKick,	nRst,	dSnare
0008611D 80                         	dc.b		nRst
0008611E F6FF 3B                    	smpsJump	Lab_DAC
00086121                            
00086121                            Lab_Voices:
00086121 0734 7432 711F 1F1F 1F0A+  	dc.b		$07,$34,$74,$32,$71,$1F,$1F,$1F,$1F,$0A,$0A,$05,$03,$00,$00,$00 
00086131 003F 3F2F 2F8A 8A80 80     	dc.b		$00,$3F,$3F,$2F,$2F,$8A,$8A,$80,$80
0008613A 2036 3530 31DF DF9F 9F07+  	dc.b		$20,$36,$35,$30,$31,$DF,$DF,$9F,$9F,$07,$06,$09,$06,$07,$06,$06
0008614A 0820 1010 F819 3713 80     	dc.b		$08,$20,$10,$10,$F8,$19,$37,$13,$80
00086153 4372 6561 7465 6420 6279+  	dc.b	'Created by Trox.'
00086164 00                         	even
00086164 00                         	even
00086164                            		even
00086164                            Music95:	include	sound\music95.asm
00086164                            ; =============================================================================================
00086164                            ; Project Name:		Jungle
00086164                            ; Created:		19th July 2011
00086164                            ; ---------------------------------------------------------------------------------------------
00086164                            ; ASM'd using S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00086164                            ; =============================================================================================
00086164                            
00086164                            Jungle_Header:
00086164 0000                       	smpsHeaderVoice	Jungle_Voices
00086166 0603                       	smpsHeaderChan	$06,	$03
00086168 0122                       	smpsHeaderTempo	$01,	$22
0008616A                            
0008616A 0000 0000                  	smpsHeaderDAC	Jungle_DAC
0008616E 0000 0010                  	smpsHeaderFM	Jungle_FM1,	smpsPitch00,	$10
00086172 0000 0010                  	smpsHeaderFM	Jungle_FM2,	smpsPitch00,	$10
00086176 0000 0010                  	smpsHeaderFM	Jungle_FM3,	smpsPitch00,	$10
0008617A 0000 0010                  	smpsHeaderFM	Jungle_FM4,	smpsPitch00,	$10
0008617E 0000 0010                  	smpsHeaderFM	Jungle_FM5,	smpsPitch00,	$10
00086182 0000 DC00 0000             	smpsHeaderPSG	Jungle_PSG1,	smpsPitch03lo,	$00,	$00
00086188 0000 DC00 0000             	smpsHeaderPSG	Jungle_PSG2,	smpsPitch03lo,	$00,	$00
0008618E 0000 0B00 0000             	smpsHeaderPSG	Jungle_PSG3,	smpsPitch00+$0B,	$00,	$00
00086194                            
00086194                            ; FM1 Data
00086194                            Jungle_FM1:
00086194 8014                       	dc.b		nRst,	$14
00086196 E0C0                       	smpsPan		panCentre,	$00
00086198 EF00                       	smpsFMvoice	$00
0008619A C307 800D BF0E C306        	dc.b		nFs5,	$07,	nRst,	$0D,	nD5,	$0E,	nFs5,	$06
000861A2 800E C306 800E BF06        	dc.b		nRst,	$0E,	nFs5,	$06,	nRst,	$0E,	nD5,	$06
000861AA 800E BF06 800E BA06        	dc.b		nRst,	$0E,	nD5,	$06,	nRst,	$0E,	nA4,	$06
000861B2 0780 0DB8 0780 0DB8        	dc.b		$07,	nRst,	$0D,	nG4,	$07,	nRst,	$0D,	nG4
000861BA 0780 0DBC 0780 BC06        	dc.b		$07,	nRst,	$0D,	nB4,	$07,	nRst,	nB4,	$06
000861C2 800E BA06 800E             	dc.b		nRst,	$0E,	nA4,	$06,	nRst,	$0E	
000861C8 EF01                       	smpsFMvoice	$01
000861CA E60A                       	smpsaltervol	$0A
000861CC BA06                       	dc.b		nA4,	$06
000861CE B707 80B3 06BA 0780        	dc.b		nFs4,	$07,	nRst,	nD4,	$06,	nA4,	$07,	nRst
000861D6 BA06 BC07 80BA 0680        	dc.b		nA4,	$06,	nB4,	$07,	nRst,	nA4,	$06,	nRst
000861DE 14                         	dc.b		$14	
000861DF EF00                       	smpsFMvoice	$00
000861E1 E6F6                       	smpsaltervol	-$0A
000861E3 B8BC BFC3 BA0E 06          	dc.b		nG4,	nB4,	nD5,	nFs5,	nA4,	$0E,	$06
000861EA 800E BC06 0780 0DBC        	dc.b		nRst,	$0E,	nB4,	$06,	$07,	nRst,	$0D,	nB4
000861F2 0780 0DBC 0780 0DBC        	dc.b		$07,	nRst,	$0D,	nB4,	$07,	nRst,	$0D,	nB4
000861FA 0780 0DBC 0780 BE06        	dc.b		$07,	nRst,	$0D,	nB4,	$07,	nRst,	nCs5,	$06
00086202 EF01                       	smpsFMvoice	$01
00086204 E60A                       	smpsaltervol	$0A
00086206 800E BF06 C107 80C3        	dc.b		nRst,	$0E,	nD5,	$06,	nE5,	$07,	nRst,	nFs5
0008620E 06C1 0780 BE06 BA07        	dc.b		$06,	nE5,	$07,	nRst,	nCs5,	$06,	nA4,	$07
00086216 80B7 06                    	dc.b		nRst,	nFs4,	$06
00086219 EF00                       	smpsFMvoice	$00
0008621B E6F6                       	smpsaltervol	-$0A
0008621D 8014                       	dc.b		nRst,	$14	
0008621F C307 80                    	dc.b		nFs5,	$07,	nRst
00086222 0DBF 0EC3 0680 0EC3        	dc.b		$0D,	nD5,	$0E,	nFs5,	$06,	nRst,	$0E,	nFs5
0008622A 0680 0EBF 0680 0EBF        	dc.b		$06,	nRst,	$0E,	nD5,	$06,	nRst,	$0E,	nD5
00086232 0680 0E                    	dc.b		$06,	nRst,	$0E	
00086235 BA06 0780 0D               	dc.b		nA4,	$06,	$07,	nRst,	$0D
0008623A B807 800D B807 800D        	dc.b		nG4,	$07,	nRst,	$0D,	nG4,	$07,	nRst,	$0D
00086242 BC07 80BC 0680 0EBA        	dc.b		nB4,	$07,	nRst,	nB4,	$06,	nRst,	$0E,	nA4
0008624A 0680 0E                    	dc.b		$06,	nRst,	$0E	
0008624D EF01                       	smpsFMvoice	$01
0008624F E60A                       	smpsaltervol	$0A
00086251 BA06 B707 80               	dc.b		nA4,	$06,	nFs4,	$07,	nRst
00086256 B306 BA07 80BA 06BC        	dc.b		nD4,	$06,	nA4,	$07,	nRst,	nA4,	$06,	nB4
0008625E 0780 BA06 8014             	dc.b		$07,	nRst,	nA4,	$06,	nRst,	$14	
00086264 EF00                       	smpsFMvoice	$00
00086266 E6F6                       	smpsaltervol	-$0A
00086268 B8BC                       	dc.b		nG4,	nB4
0008626A BFC3 BA0E 0680 0EBC        	dc.b		nD5,	nFs5,	nA4,	$0E,	$06,	nRst,	$0E,	nB4
00086272 0607 800D BC07 800D        	dc.b		$06,	$07,	nRst,	$0D,	nB4,	$07,	nRst,	$0D
0008627A BC07 800D B50E 060E        	dc.b		nB4,	$07,	nRst,	$0D,	nE4,	$0E,	$06,	$0E
00086282 BA2E                       	dc.b		nA4,	$2E	
00086284 EF01                       	smpsFMvoice	$01
00086286 E60A                       	smpsaltervol	$0A
00086288 A707 80AB 0680             	dc.b		nD3,	$07,	nRst,	nFs3,	$06,	nRst
0008628E 01AE 0780 06B7 C407        	dc.b		$01,	nA3,	$07,	nRst,	$06,	nFs4,	nG5,	$07
00086296 800D C407 800D C407        	dc.b		nRst,	$0D,	nG5,	$07,	nRst,	$0D,	nG5,	$07
0008629E 800D BF07 80BC 0680        	dc.b		nRst,	$0D,	nD5,	$07,	nRst,	nB4,	$06,	nRst
000862A6 0EC4 0680 0EC4 06C8        	dc.b		$0E,	nG5,	$06,	nRst,	$0E,	nG5,	$06,	nB5
000862AE 0780 0DC4 0780 1BC3        	dc.b		$07,	nRst,	$0D,	nG5,	$07,	nRst,	$1B,	nFs5
000862B6 0680 0EC3 06C6 0780        	dc.b		$06,	nRst,	$0E,	nFs5,	$06,	nA5,	$07,	nRst
000862BE 0DBF 0780 C31A B314        	dc.b		$0D,	nD5,	$07,	nRst,	nFs5,	$1A,	nD4,	$14
000862C6 B5B7 B8C4 0780 0DC4        	dc.b		nE4,	nFs4,	nG4,	nG5,	$07,	nRst,	$0D,	nG5
000862CE 0780 0DBF 0780 BC06        	dc.b		$07,	nRst,	$0D,	nD5,	$07,	nRst,	nB4,	$06
000862D6 800E BF06 800E BF06        	dc.b		nRst,	$0E,	nD5,	$06,	nRst,	$0E,	nD5,	$06
000862DE 0780 0DBF 0780 0DC1        	dc.b		$07,	nRst,	$0D,	nD5,	$07,	nRst,	$0D,	nE5
000862E6 0780 49C1 0780 C106        	dc.b		$07,	nRst,	$49,	nE5,	$07,	nRst,	nE5,	$06
000862EE 800E C12E                  	dc.b		nRst,	$0E,	nE5,	$2E
000862F2 EF00                       	smpsFMvoice	$00
000862F4 E6F6                       	smpsaltervol	-$0A
000862F6 F6FE 9C                    	smpsJump	Jungle_FM1
000862F9                            
000862F9                            ; FM2 Data
000862F9                            Jungle_FM2:
000862F9 E0C0                       	smpsPan		panCentre,	$00
000862FB EF04                       	smpsFMvoice	$04
000862FD A70E A206 A407 80A7        	dc.b		nD3,	$0E,	nA2,	$06,	nB2,	$07,	nRst,	nD3
00086305 06A2 0780 A406 800E        	dc.b		$06,	nA2,	$07,	nRst,	nB2,	$06,	nRst,	$0E
0008630D A714 0680 0EA7 0680        	dc.b		nD3,	$14,	$06,	nRst,	$0E,	nD3,	$06,	nRst
00086315 0EA9 06AB 0780 0DAC        	dc.b		$0E,	nE3,	$06,	nFs3,	$07,	nRst,	$0D,	nG3
0008631D 0780 0DAC 0780 AC06        	dc.b		$07,	nRst,	$0D,	nG3,	$07,	nRst,	nG3,	$06
00086325 AD07 800D AD07 80AE        	dc.b		nAb3,	$07,	nRst,	$0D,	nAb3,	$07,	nRst,	nA3
0008632D 0680 0EAE 0607 800D        	dc.b		$06,	nRst,	$0E,	nA3,	$06,	$07,	nRst,	$0D
00086335 A207 80A2 06A4 0780        	dc.b		nA2,	$07,	nRst,	nA2,	$06,	nB2,	$07,	nRst
0008633D A206 AC0E A706 AC07        	dc.b		nA2,	$06,	nG3,	$0E,	nD3,	$06,	nG3,	$07
00086345 80A7 14A9 06AC 0780        	dc.b		nRst,	nD3,	$14,	nE3,	$06,	nG3,	$07,	nRst
0008634D 0DAB 0EA4 06AB 0780        	dc.b		$0D,	nFs3,	$0E,	nB2,	$06,	nFs3,	$07,	nRst
00086355 A406 800E A606 A707        	dc.b		nB2,	$06,	nRst,	$0E,	nCs3,	$06,	nD3,	$07
0008635D 800D A907 800D A907        	dc.b		nRst,	$0D,	nE3,	$07,	nRst,	$0D,	nE3,	$07
00086365 800D A907 800D A907        	dc.b		nRst,	$0D,	nE3,	$07,	nRst,	$0D,	nE3,	$07
0008636D 8006 AE07 800E A906        	dc.b		nRst,	$06,	nA3,	$07,	nRst,	$0E,	nE3,	$06
00086375 B20E B006 AE0E AC06        	dc.b		nCs4,	$0E,	nB3,	$06,	nA3,	$0E,	nG3,	$06
0008637D A907 80A2 06A7 0EA2        	dc.b		nE3,	$07,	nRst,	nA2,	$06,	nD3,	$0E,	nA2
00086385 06A4 0780 A706 A207        	dc.b		$06,	nB2,	$07,	nRst,	nD3,	$06,	nA2,	$07
0008638D 80A4 0680 0EA7 1406        	dc.b		nRst,	nB2,	$06,	nRst,	$0E,	nD3,	$14,	$06
00086395 800E A706 800E A906        	dc.b		nRst,	$0E,	nD3,	$06,	nRst,	$0E,	nE3,	$06
0008639D AB07 800D AC07 800D        	dc.b		nFs3,	$07,	nRst,	$0D,	nG3,	$07,	nRst,	$0D
000863A5 AC07 80AC 06AD 0780        	dc.b		nG3,	$07,	nRst,	nG3,	$06,	nAb3,	$07,	nRst
000863AD 0DAD 0780 AE06 800E        	dc.b		$0D,	nAb3,	$07,	nRst,	nA3,	$06,	nRst,	$0E
000863B5 AE06 0780 0DA2 0780        	dc.b		nA3,	$06,	$07,	nRst,	$0D,	nA2,	$07,	nRst
000863BD A206 A407 80A2 06AC        	dc.b		nA2,	$06,	nB2,	$07,	nRst,	nA2,	$06,	nG3
000863C5 0EA7 06AC 0780 A714        	dc.b		$0E,	nD3,	$06,	nG3,	$07,	nRst,	nD3,	$14
000863CD A906 AC07 800D AB0E        	dc.b		nE3,	$06,	nG3,	$07,	nRst,	$0D,	nFs3,	$0E
000863D5 A406 AB07 80A4 0680        	dc.b		nB2,	$06,	nFs3,	$07,	nRst,	nB2,	$06,	nRst
000863DD 0EA6 06A7 0780 0DA9        	dc.b		$0E,	nCs3,	$06,	nD3,	$07,	nRst,	$0D,	nE3
000863E5 0780 A706 A907 80A9        	dc.b		$07,	nRst,	nD3,	$06,	nE3,	$07,	nRst,	nE3
000863ED 06AE 0780 A206 A407        	dc.b		$06,	nA3,	$07,	nRst,	nA2,	$06,	nB2,	$07
000863F5 80A6 06A7 0780 0DA2        	dc.b		nRst,	nCs3,	$06,	nD3,	$07,	nRst,	$0D,	nA2
000863FD 0780 0DA7 0780 A706        	dc.b		$07,	nRst,	$0D,	nD3,	$07,	nRst,	nD3,	$06
00086405 A907 80AB 06AC 14A7        	dc.b		nE3,	$07,	nRst,	nFs3,	$06,	nG3,	$14,	nD3
0008640D A9A7 ACAB A9A7 A7A2        	dc.b		nE3,	nD3,	nG3,	nFs3,	nE3,	nD3,	nD3,	nA2
00086415 A4A2 A7A6 A4A2 ACA7        	dc.b		nB2,	nA2,	nD3,	nCs3,	nB2,	nA2,	nG3,	nD3
0008641D A9A7 ACAB A9A7 AE07        	dc.b		nE3,	nD3,	nG3,	nFs3,	nE3,	nD3,	nA3,	$07
00086425 800D A207 80A3 06A4        	dc.b		nRst,	$0D,	nA2,	$07,	nRst,	nBb2,	$06,	nB2
0008642D 0780 A306 A207 800D        	dc.b		$07,	nRst,	nBb2,	$06,	nA2,	$07,	nRst,	$0D
00086435 AE07 80A2 0680 0EA2        	dc.b		nA3,	$07,	nRst,	nA2,	$06,	nRst,	$0E,	nA2
0008643D 06A4 0780 0DA6 0780        	dc.b		$06,	nB2,	$07,	nRst,	$0D,	nCs3,	$07,	nRst
00086445 0D                         	dc.b		$0D
00086446 F6FE B1                    	smpsJump	Jungle_FM2
00086449                            
00086449                            ; FM3 Data
00086449                            Jungle_FM3:
00086449 E0C0                       	smpsPan		panCentre,	$00
0008644B                            
0008644B                            Jungle_Call_xD:
0008644B 8014                       	dc.b		nRst,	$14
0008644D EF00                       	smpsFMvoice	$00
0008644F C607 800D C30E C606        	dc.b		nA5,	$07,	nRst,	$0D,	nFs5,	$0E,	nA5,	$06
00086457 800E C806 800E C306        	dc.b		nRst,	$0E,	nB5,	$06,	nRst,	$0E,	nFs5,	$06
0008645F 800E C306 800E C106        	dc.b		nRst,	$0E,	nFs5,	$06,	nRst,	$0E,	nE5,	$06
00086467 BF07 800D BC07 800D        	dc.b		nD5,	$07,	nRst,	$0D,	nB4,	$07,	nRst,	$0D
0008646F BF07 80BF 06C1 0780        	dc.b		nD5,	$07,	nRst,	nD5,	$06,	nE5,	$07,	nRst
00086477 C306 800E C132 8010        	dc.b		nFs5,	$06,	nRst,	$0E,	nE5,	$32,	nRst,	$10
0008647F 28BC 14BF C8C6 C30E        	dc.b		$28,	nB4,	$14,	nD5,	nB5,	nA5,	nFs5,	$0E
00086487 BF06 800E C106 C307        	dc.b		nD5,	$06,	nRst,	$0E,	nE5,	$06,	nFs5,	$07
0008648F 800D C407 800D C407        	dc.b		nRst,	$0D,	nG5,	$07,	nRst,	$0D,	nG5,	$07
00086497 800D C507 800D C507        	dc.b		nRst,	$0D,	nAb5,	$07,	nRst,	$0D,	nAb5,	$07
0008649F 80C6 3280 1028 C607        	dc.b		nRst,	nA5,	$32,	nRst,	$10,	$28,	nA5,	$07
000864A7 800D C30E C606 800E        	dc.b		nRst,	$0D,	nFs5,	$0E,	nA5,	$06,	nRst,	$0E
000864AF C806 800E C306 800E        	dc.b		nB5,	$06,	nRst,	$0E,	nFs5,	$06,	nRst,	$0E
000864B7 C306 800E C106 BF07        	dc.b		nFs5,	$06,	nRst,	$0E,	nE5,	$06,	nD5,	$07
000864BF 800D BC07 800D BF07        	dc.b		nRst,	$0D,	nB4,	$07,	nRst,	$0D,	nD5,	$07
000864C7 80BF 06C1 0780 C306        	dc.b		nRst,	nD5,	$06,	nE5,	$07,	nRst,	nFs5,	$06
000864CF 800E C132 8010 28BC        	dc.b		nRst,	$0E,	nE5,	$32,	nRst,	$10,	$28,	nB4
000864D7 14BF C8C6 C30E BF06        	dc.b		$14,	nD5,	nB5,	nA5,	nFs5,	$0E,	nD5,	$06
000864DF 800E C106 C307 800D        	dc.b		nRst,	$0E,	nE5,	$06,	nFs5,	$07,	nRst,	$0D
000864E7 C107 800D C107 80C1        	dc.b		nE5,	$07,	nRst,	$0D,	nE5,	$07,	nRst,	nE5
000864EF 06BA 0EBC 06BE 0EBF        	dc.b		$06,	nA4,	$0E,	nB4,	$06,	nCs5,	$0E,	nD5
000864F7 3280 1028 C704 C403        	dc.b		$32,	nRst,	$10,	$28,	nBb5,	$04,	nG5,	$03
000864FF 800D C704 C403 800D        	dc.b		nRst,	$0D,	nBb5,	$04,	nG5,	$03,	nRst,	$0D
00086507 C404 BF03 8007 C403        	dc.b		nG5,	$04,	nD5,	$03,	nRst,	$07,	nG5,	$03
0008650F BF80 0EC4 03C8 800E        	dc.b		nD5,	nRst,	$0E,	nG5,	$03,	nB5,	nRst,	$0E
00086517 C403 C8C8 04CB 0380        	dc.b		nG5,	$03,	nB5,	nB5,	$04,	nD6,	$03,	nRst
0008651F 0DC4 04C8 0380 1BC3        	dc.b		$0D,	nG5,	$04,	nB5,	$03,	nRst,	$1B,	nFs5
00086527 03C6 800E C303 C6C6        	dc.b		$03,	nA5,	nRst,	$0E,	nFs5,	$03,	nA5,	nA5
0008652F 04CB 0380 0DC6 04C3        	dc.b		$04,	nD6,	$03,	nRst,	$0D,	nA5,	$04,	nFs5
00086537 0380 07C3 03C6 C304        	dc.b		$03,	nRst,	$07,	nFs5,	$03,	nA5,	nFs5,	$04
0008653F C603 C3C6 04C3 03C6        	dc.b		nA5,	$03,	nFs5,	nA5,	$04,	nFs5,	$03,	nA5
00086547 C304 C603 C3C6 04C3        	dc.b		nFs5,	$04,	nA5,	$03,	nFs5,	nA5,	$04,	nFs5
0008654F 03C6 C304 C603 C3C6        	dc.b		$03,	nA5,	nFs5,	$04,	nA5,	$03,	nFs5,	nA5
00086557 04C3 03C6 C304 C603        	dc.b		$04,	nFs5,	$03,	nA5,	nFs5,	$04,	nA5,	$03
0008655F C3C6 04C3 03C6 8014        	dc.b		nFs5,	nA5,	$04,	nFs5,	$03,	nA5,	nRst,	$14
00086567 C704 C403 800D C704        	dc.b		nBb5,	$04,	nG5,	$03,	nRst,	$0D,	nBb5,	$04
0008656F C403 800D C404 BF03        	dc.b		nG5,	$03,	nRst,	$0D,	nG5,	$04,	nD5,	$03
00086577 8007 C403 BF80 0EC4        	dc.b		nRst,	$07,	nG5,	$03,	nD5,	nRst,	$0E,	nG5
0008657F 0680 0EC4 06C6 0780        	dc.b		$06,	nRst,	$0E,	nG5,	$06,	nA5,	$07,	nRst
00086587 0DC8 0780 0DC6 0780        	dc.b		$0D,	nB5,	$07,	nRst,	$0D,	nA5,	$07,	nRst
0008658F 1414 140D C607 80C8        	dc.b		$14,	$14,	$14,	$0D,	nA5,	$07,	nRst,	nB5
00086597 0680 0EC6 2E               	dc.b		$06,	nRst,	$0E,	nA5,	$2E
0008659C F6FE AD                    	smpsJump	Jungle_Call_xD
0008659F                            
0008659F                            ; FM4 Data
0008659F                            Jungle_FM4:
0008659F E601                       	smpsaltervol	$01
000865A1 E080                       	smpsPan		panLeft,	$00
000865A3 01                         	dc.b		$01
000865A4 F6FE A5                    	smpsJump	Jungle_Call_xD
000865A7                            
000865A7                            ; FM5 Data
000865A7                            Jungle_FM5:
000865A7 E601                       	smpsaltervol	$01
000865A9 E040                       	smpsPan		panRight,	$00
000865AB 02                         	dc.b		$02
000865AC F6FE 9D                    	smpsJump	Jungle_Call_xD
000865AF                            
000865AF                            ; PSG1 Data
000865AF                            Jungle_PSG1:
000865AF 807F 7F7F 7F7F 7F7F        	dc.b		nRst,	$7F,	$7F,	$7F,	$7F,	$7F,	$7F,	$7F
000865B7 7F7F 7F7F 7F7F 7F7F        	dc.b		$7F,	$7F,	$7F,	$7F,	$7F,	$7F,	$7F,	$7F
000865BF 0F                         	dc.b		$0F
000865C0 F6FF ED                    	smpsJump	Jungle_PSG1
000865C3                            
000865C3                            ; PSG2 Data
000865C3                            Jungle_PSG2:
000865C3 807F 7F7F 7F7F 7F7F        	dc.b		nRst,	$7F,	$7F,	$7F,	$7F,	$7F,	$7F,	$7F
000865CB 7F7F 7F7F 7F7F 7F7F        	dc.b		$7F,	$7F,	$7F,	$7F,	$7F,	$7F,	$7F,	$7F
000865D3 0F                         	dc.b		$0F
000865D4 F6FF ED                    	smpsJump	Jungle_PSG2
000865D7                            
000865D7                            ; PSG3 Data
000865D7                            Jungle_PSG3:
000865D7 F3E7                       	smpsPSGform	$E7
000865D9                            Jungle_Jump01:
000865D9 807F 7F7F 7F7F 7F7F        	dc.b		nRst,	$7F,	$7F,	$7F,	$7F,	$7F,	$7F,	$7F
000865E1 7F7F 7F7F 7F7F 7F7F        	dc.b		$7F,	$7F,	$7F,	$7F,	$7F,	$7F,	$7F,	$7F
000865E9 0F                         	dc.b		$0F
000865EA F6FF ED                    	smpsJump	Jungle_Jump01
000865ED                            
000865ED                            ; DAC Data
000865ED                            Jungle_DAC:
000865ED E0C0                       	smpsPan		panCentre,	$00
000865EF 8107 8081 0682 0780        	dc.b		dKick,	$07,	nRst,	dKick,	$06,	dSnare,	$07,	nRst
000865F7 8106 0780 0781 0682        	dc.b		dKick,	$06,	$07,	nRst,	$07,	dKick,	$06,	dSnare
000865FF 0780 8106 0780 0781        	dc.b		$07,	nRst,	dKick,	$06,	$07,	nRst,	$07,	dKick
00086607 0682 0780 8106 0780        	dc.b		$06,	dSnare,	$07,	nRst,	dKick,	$06,	$07,	nRst
0008660F 0781 0682 0780 8106        	dc.b		$07,	dKick,	$06,	dSnare,	$07,	nRst,	dKick,	$06
00086617 0780 0781 0682 0780        	dc.b		$07,	nRst,	$07,	dKick,	$06,	dSnare,	$07,	nRst
0008661F 8106 0780 0781 0682        	dc.b		dKick,	$06,	$07,	nRst,	$07,	dKick,	$06,	dSnare
00086627 0780 8106 0780 0781        	dc.b		$07,	nRst,	dKick,	$06,	$07,	nRst,	$07,	dKick
0008662F 0682 0780 8106 0780        	dc.b		$06,	dSnare,	$07,	nRst,	dKick,	$06,	$07,	nRst
00086637 0781 0682 0780 8106        	dc.b		$07,	dKick,	$06,	dSnare,	$07,	nRst,	dKick,	$06
0008663F 0780 0781 0682 0780        	dc.b		$07,	nRst,	$07,	dKick,	$06,	dSnare,	$07,	nRst
00086647 8106 0780 0781 0682        	dc.b		dKick,	$06,	$07,	nRst,	$07,	dKick,	$06,	dSnare
0008664F 0780 8106 0780 0781        	dc.b		$07,	nRst,	dKick,	$06,	$07,	nRst,	$07,	dKick
00086657 0682 0780 8106 0780        	dc.b		$06,	dSnare,	$07,	nRst,	dKick,	$06,	$07,	nRst
0008665F 0781 0682 0780 8106        	dc.b		$07,	dKick,	$06,	dSnare,	$07,	nRst,	dKick,	$06
00086667 0780 0781 0682 0780        	dc.b		$07,	nRst,	$07,	dKick,	$06,	dSnare,	$07,	nRst
0008666F 8106 0780 0781 0682        	dc.b		dKick,	$06,	$07,	nRst,	$07,	dKick,	$06,	dSnare
00086677 0780 8106 0780 0781        	dc.b		$07,	nRst,	dKick,	$06,	$07,	nRst,	$07,	dKick
0008667F 0682 0780 8106 0780        	dc.b		$06,	dSnare,	$07,	nRst,	dKick,	$06,	$07,	nRst
00086687 0781 0682 0780 8106        	dc.b		$07,	dKick,	$06,	dSnare,	$07,	nRst,	dKick,	$06
0008668F 0780 0781 0682 0780        	dc.b		$07,	nRst,	$07,	dKick,	$06,	dSnare,	$07,	nRst
00086697 8106 0780 0781 0682        	dc.b		dKick,	$06,	$07,	nRst,	$07,	dKick,	$06,	dSnare
0008669F 0780 8106 0780 0781        	dc.b		$07,	nRst,	dKick,	$06,	$07,	nRst,	$07,	dKick
000866A7 0682 0780 8106 0780        	dc.b		$06,	dSnare,	$07,	nRst,	dKick,	$06,	$07,	nRst
000866AF 0781 0682 0780 8106        	dc.b		$07,	dKick,	$06,	dSnare,	$07,	nRst,	dKick,	$06
000866B7 0780 0781 0682 0780        	dc.b		$07,	nRst,	$07,	dKick,	$06,	dSnare,	$07,	nRst
000866BF 8106 0780 0781 0682        	dc.b		dKick,	$06,	$07,	nRst,	$07,	dKick,	$06,	dSnare
000866C7 0780 8106 0780 0781        	dc.b		$07,	nRst,	dKick,	$06,	$07,	nRst,	$07,	dKick
000866CF 0682 0780 8106 0780        	dc.b		$06,	dSnare,	$07,	nRst,	dKick,	$06,	$07,	nRst
000866D7 0781 0682 0780 8106        	dc.b		$07,	dKick,	$06,	dSnare,	$07,	nRst,	dKick,	$06
000866DF 0780 0781 0682 0780        	dc.b		$07,	nRst,	$07,	dKick,	$06,	dSnare,	$07,	nRst
000866E7 8106 0780 0781 0682        	dc.b		dKick,	$06,	$07,	nRst,	$07,	dKick,	$06,	dSnare
000866EF 0780 8106 0780 0781        	dc.b		$07,	nRst,	dKick,	$06,	$07,	nRst,	$07,	dKick
000866F7 0682 0780 8106 0780        	dc.b		$06,	dSnare,	$07,	nRst,	dKick,	$06,	$07,	nRst
000866FF 0781 0682 0780 8106        	dc.b		$07,	dKick,	$06,	dSnare,	$07,	nRst,	dKick,	$06
00086707 0780 0781 0682 0780        	dc.b		$07,	nRst,	$07,	dKick,	$06,	dSnare,	$07,	nRst
0008670F 8106 0780 0781 0682        	dc.b		dKick,	$06,	$07,	nRst,	$07,	dKick,	$06,	dSnare
00086717 0780 8106 0780 0781        	dc.b		$07,	nRst,	dKick,	$06,	$07,	nRst,	$07,	dKick
0008671F 0682 0780 8106 0780        	dc.b		$06,	dSnare,	$07,	nRst,	dKick,	$06,	$07,	nRst
00086727 0781 0682 0707 0681        	dc.b		$07,	dKick,	$06,	dSnare,	$07,	$07,	$06,	dKick
0008672F 0780 8106 8207 8081        	dc.b		$07,	nRst,	dKick,	$06,	dSnare,	$07,	nRst,	dKick
00086737 0607 8007 8106 8207        	dc.b		$06,	$07,	nRst,	$07,	dKick,	$06,	dSnare,	$07
0008673F 8081 0607 8007 8106        	dc.b		nRst,	dKick,	$06,	$07,	nRst,	$07,	dKick,	$06
00086747 8207 8081 0607 8007        	dc.b		dSnare,	$07,	nRst,	dKick,	$06,	$07,	nRst,	$07
0008674F 8106 8207 8081 0607        	dc.b		dKick,	$06,	dSnare,	$07,	nRst,	dKick,	$06,	$07
00086757 8007 8106 8207 8081        	dc.b		nRst,	$07,	dKick,	$06,	dSnare,	$07,	nRst,	dKick
0008675F 0607 8007 8106 8207        	dc.b		$06,	$07,	nRst,	$07,	dKick,	$06,	dSnare,	$07
00086767 8081 0607 8007 8106        	dc.b		nRst,	dKick,	$06,	$07,	nRst,	$07,	dKick,	$06
0008676F 8207 8081 0607 8007        	dc.b		dSnare,	$07,	nRst,	dKick,	$06,	$07,	nRst,	$07
00086777 8106 8207 8081 0607        	dc.b		dKick,	$06,	dSnare,	$07,	nRst,	dKick,	$06,	$07
0008677F 8007 8106 8207 8081        	dc.b		nRst,	$07,	dKick,	$06,	dSnare,	$07,	nRst,	dKick
00086787 0607 8007 8106 8207        	dc.b		$06,	$07,	nRst,	$07,	dKick,	$06,	dSnare,	$07
0008678F 8081 0607 8007 8106        	dc.b		nRst,	dKick,	$06,	$07,	nRst,	$07,	dKick,	$06
00086797 8207 8081 0607 8007        	dc.b		dSnare,	$07,	nRst,	dKick,	$06,	$07,	nRst,	$07
0008679F 8106 8207 8081 0682        	dc.b		dKick,	$06,	dSnare,	$07,	nRst,	dKick,	$06,	dSnare
000867A7 0780 0D81 0780 0D81        	dc.b		$07,	nRst,	$0D,	dKick,	$07,	nRst,	$0D,	dKick
000867AF 0780 0D81 0780 0D82        	dc.b		$07,	nRst,	$0D,	dKick,	$07,	nRst,	$0D,	dSnare
000867B7 0707 0607 0706 0707        	dc.b		$07,	$07,	$06,	$07,	$07,	$06,	$07,	$07
000867BF 0607 0706                  	dc.b		$06,	$07,	$07,	$06
000867C3 F6FE 28                    	smpsJump	Jungle_DAC
000867C6                            
000867C6                            Jungle_Voices:
000867C6 390D 0102 019F 1F1F 5F0A+  	dc.b		$39,$0D,$01,$02,$01,$9F,$1F,$1F,$5F,$0A,$09,$09,$04,$08,$07,$07
000867D6 0724 2424 2822 2624 05     	dc.b		$07,$24,$24,$24,$28,$22,$26,$24,$05;			00
000867DF 1C73 7233 3294 9994 9908+  	dc.b		$1C,$73,$72,$33,$32,$94,$99,$94,$99,$08,$0A,$08,$0A,$00,$05,$00
000867EF 053F 4F3F 4F1E 8019 00     	dc.b		$05,$3F,$4F,$3F,$4F,$1E,$80,$19,$00;			01
000867F8 0734 7432 711F 1F1F 1F0A+  	dc.b		$07,$34,$74,$32,$71,$1F,$1F,$1F,$1F,$0A,$0A,$05,$03,$00,$00,$00
00086808 003F 3F2F 2F8A 8A80 80     	dc.b		$00,$3F,$3F,$2F,$2F,$8A,$8A,$80,$80;			Voice 02
00086811 1C73 7233 3294 9994 9908+  	dc.b		$1C,$73,$72,$33,$32,$94,$99,$94,$99,$08,$0A,$08,$0A,$00,$05,$00
00086821 053F 4F3F 4F1E 8019 80     	dc.b		$05,$3F,$4F,$3F,$4F,$1E,$80,$19,$80;			Voice 03
0008682A 2036 3530 31DF DF9F 9F07+  	dc.b		$20,$36,$35,$30,$31,$DF,$DF,$9F,$9F,$07,$06,$09,$06,$07,$06,$06
0008683A 0820 1010 F819 3713 80     	dc.b		$08,$20,$10,$10,$F8,$19,$37,$13,$80;			Voice 04
00086844 00                         	even
00086844 00                         	even
00086844                            		even
00086844                            Music96:	incbin	sound\music96.bin
00087A7C                            		even
00087A7C                            Music97:	incbin	sound\music97.bin
00088070                            		even
00088070                            Music98:	incbin	sound\music98.bin
00088F84                            		even
00088F84                            Music99:	include	sound\music99.asm
00088F84                            ; =============================================================================================
00088F84                            ; Project Name:		CNZ
00088F84                            ; Created:		5th March 2011
00088F84                            ; ---------------------------------------------------------------------------------------------
00088F84                            ; ASM'd using S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00088F84                            ; =============================================================================================
00088F84                            
00088F84                            CNZ_Header:
00088F84 0000                       	smpsHeaderVoice	CNZ_Voices
00088F86 0603                       	smpsHeaderChan	$06,	$03
00088F88 0306                       	smpsHeaderTempo	$03,	$06
00088F8A                            
00088F8A 0000 0000                  	smpsHeaderDAC	CNZ_DAC
00088F8E 0000 1808                  	smpsHeaderFM	CNZ_FM1,	smpsPitch02hi,	$08
00088F92 0000 000A                  	smpsHeaderFM	CNZ_FM2,	smpsPitch00,	$0A
00088F96 0000 0012                  	smpsHeaderFM	CNZ_FM3,	smpsPitch00,	$12
00088F9A 0000 0012                  	smpsHeaderFM	CNZ_FM4,	smpsPitch00,	$12
00088F9E 0000 000F                  	smpsHeaderFM	CNZ_FM5,	smpsPitch00,	$0F
00088FA2 0000 E805 0000             	smpsHeaderPSG	CNZ_PSG1,	smpsPitch02lo,	$05,	$00
00088FA8 0000 E805 0000             	smpsHeaderPSG	CNZ_PSG2,	smpsPitch02lo,	$05,	$00
00088FAE 0000 0004 0000             	smpsHeaderPSG	CNZ_PSG3,	smpsPitch00,	$04,	$00
00088FB4                            
00088FB4                            ; FM1 Data
00088FB4                            CNZ_FM1:
00088FB4 EF00                       	smpsFMvoice	$00
00088FB6 8018                       	dc.b		nRst,	$18
00088FB8                            CNZ_Jump01:
00088FB8 A506 99A5 99A5 99A5        	dc.b		nC3,	$06,	nC2,	nC3,	nC2,	nC3,	nC2,	nC3
00088FC0 9980 9404 8002 9704        	dc.b		nC2,	nRst,	nG1,	$04,	nRst,	$02,	nBb1,	$04
00088FC8 9506 9404 8002 A002        	dc.b		nAb1,	$06,	nG1,	$04,	nRst,	$02,	nG2,	$02
00088FD0 9406 9698 9906 9896        	dc.b		nG1,	$06,	nA1,	nB1,	nC2,	$06,	nB1,	nA1
00088FD8 9499 9499 9B9D 9B99        	dc.b		nG1,	nC2,	nG1,	nC2,	nD2,	nE2,	nD2,	nC2
00088FE0 9891 9395 9196 969D        	dc.b		nB1,	nE1,	nFs1,	nAb1,	nE1,	nA1,	nA1,	nE2
00088FE8 9D96 9899 9695 9799        	dc.b		nE2,	nA1,	nB1,	nC2,	nA1,	nAb1,	nBb1,	nC2
00088FF0 9B9C 0402 9506 9995        	dc.b		nD2,	nEb2,	$04,	$02,	nAb1,	$06,	nC2,	nAb1
00088FF8 9999 9B9C 9D04 0291        	dc.b		nC2,	nC2,	nD2,	nEb2,	nE2,	$04,	$02,	nE1
00089000 0693 9596 9694 9492        	dc.b		$06,	nFs1,	nAb1,	nA1,	nA1,	nG1,	nG1,	nF1
00089008 9992 9680 9980 9980        	dc.b		nC2,	nF1,	nA1,	nRst,	nC2,	nRst,	nC2,	nRst
00089010 9E80 9E95 0C06 8004        	dc.b		nF2,	nRst,	nF2,	nAb1,	$0C,	$06,	nRst,	$04
00089018 9404 8002 A09E 069D        	dc.b		nG1,	$04,	nRst,	$02,	nG2,	nF2,	$06,	nE2
00089020 9B99 0402 9106 9293        	dc.b		nD2,	nC2,	$04,	$02,	nE1,	$06,	nF1,	nFs1
00089028 9498 999B 9D98 9593        	dc.b		nG1,	nB1,	nC2,	nD2,	nE2,	nB1,	nAb1,	nFs1
00089030 9198 9D91 9698 9998        	dc.b		nE1,	nB1,	nE2,	nE1,	nA1,	nB1,	nC2,	nB1
00089038 9699 9D96 9597 9997        	dc.b		nA1,	nC2,	nE2,	nA1,	nAb1,	nBb1,	nC2,	nBb1
00089040 9596 9798 9998 999B        	dc.b		nAb1,	nA1,	nBb1,	nB1,	nC2,	nB1,	nC2,	nD2
00089048 9D04 0298 0691 9596        	dc.b		nE2,	$04,	$02,	nB1,	$06,	nE1,	nAb1,	nA1
00089050 9899 9D9E 0496 0897        	dc.b		nB1,	nC2,	nE2,	nF2,	$04,	nA1,	$08,	nBb1
00089058 0698 8099 8099 809E        	dc.b		$06,	nB1,	nRst,	nC2,	nRst,	nC2,	nRst,	nF2
00089060 809E                       	dc.b		nRst,	nF2
00089062 E604                       	smpsAlterVol	$04
00089064 8099 8099 809E 809E        	dc.b		nRst,	nC2,	nRst,	nC2,	nRst,	nF2,	nRst,	nF2
0008906C E6FC                       	smpsAlterVol	$FC
0008906E 8099 8099 809E 809E        	dc.b		nRst,	nC2,	nRst,	nC2,	nRst,	nF2,	nRst,	nF2
00089076 0499 0280 1899 0280        	dc.b		$04,	nC2,	$02,	nRst,	$18,	nC2,	$02,	nRst
0008907E 9998 0696 94               	dc.b		nC2,	nB1,	$06,	nA1,	nG1
00089083 F6FF 33                    	smpsJump	CNZ_Jump01
00089086                            
00089086                            ; FM3 Data
00089086                            CNZ_FM3:
00089086 EF02                       	smpsFMvoice	$02
00089088 E080                       	smpsPan		panLeft,	$00
0008908A 8018                       	dc.b		nRst,	$18
0008908C                            CNZ_Jump02:
0008908C EF02                       	smpsFMvoice	$02
0008908E 8006 C480 C480 C480        	dc.b		nRst,	$06,	nG5,	nRst,	nG5,	nRst,	nG5,	nRst
00089096 C480 C202 8004 C204        	dc.b		nG5,	nRst,	nF5,	$02,	nRst,	$04,	nF5,	$04
0008909E 0280 04C2 0280 18          	dc.b		$02,	nRst,	$04,	nF5,	$02,	nRst,	$18
000890A5 F800 00                    	smpsCall	CNZ_Call01
000890A8 EF01                       	smpsFMvoice	$01
000890AA E9F4                       	smpsAlterPitch	$F4
000890AC E6FC                       	smpsAlterVol	$FC
000890AE F800 00                    	smpsCall	CNZ_Call02
000890B1 CD18 CB0C CD06 CBC9        	dc.b		nE6,	$18,	nD6,	$0C,	nE6,	$06,	nD6,	nC6
000890B9 18CE 8006 C480 C480        	dc.b		$18,	nF6,	nRst,	$06,	nG5,	nRst,	nG5,	nRst
000890C1 C680 C6                    	dc.b		nA5,	nRst,	nA5
000890C4 E604                       	smpsAlterVol	$04
000890C6 80C4 80C4 80C6 80C6        	dc.b		nRst,	nG5,	nRst,	nG5,	nRst,	nA5,	nRst,	nA5
000890CE E6FC                       	smpsAlterVol	$FC
000890D0 80C4 80C4 80C6 0C04        	dc.b		nRst,	nG5,	nRst,	nG5,	nRst,	nA5,	$0C,	$04
000890D8 C402 8030                  	dc.b		nG5,	$02,	nRst,	$30
000890DC E90C                       	smpsAlterPitch	$0C
000890DE E604                       	smpsAlterVol	$04
000890E0 F6FF AA                    	smpsJump	CNZ_Jump02
000890E3                            
000890E3                            CNZ_Call01:
000890E3 8006 B802 8008 B802        	dc.b		nRst,	$06,	nG4,	$02,	nRst,	$08,	nG4,	$02
000890EB 8006 B808 8002 B806        	dc.b		nRst,	$06,	nG4,	$08,	nRst,	$02,	nG4,	$06
000890F3 8002 B804 0280 06B9        	dc.b		nRst,	$02,	nG4,	$04,	$02,	nRst,	$06,	nAb4
000890FB 0280 08B9 0280 06B9        	dc.b		$02,	nRst,	$08,	nAb4,	$02,	nRst,	$06,	nAb4
00089103 0880 02B9 0680 02B9        	dc.b		$08,	nRst,	$02,	nAb4,	$06,	nRst,	$02,	nAb4
0008910B 0402 8006 BA02 8008        	dc.b		$04,	$02,	nRst,	$06,	nA4,	$02,	nRst,	$08
00089113 BA02 8006 BA08 8002        	dc.b		nA4,	$02,	nRst,	$06,	nA4,	$08,	nRst,	$02
0008911B BA06 8002 BA04 0280        	dc.b		nA4,	$06,	nRst,	$02,	nA4,	$04,	$02,	nRst
00089123 06B9 0280 08B9 0280        	dc.b		$06,	nAb4,	$02,	nRst,	$08,	nAb4,	$02,	nRst
0008912B 06B9 0880 02B9 0680        	dc.b		$06,	nAb4,	$08,	nRst,	$02,	nAb4,	$06,	nRst
00089133 02B9 0402 8006 B802        	dc.b		$02,	nAb4,	$04,	$02,	nRst,	$06,	nG4,	$02
0008913B 8008 B802 8006 B908        	dc.b		nRst,	$08,	nG4,	$02,	nRst,	$06,	nAb4,	$08
00089143 8002 B906 8002 B904        	dc.b		nRst,	$02,	nAb4,	$06,	nRst,	$02,	nAb4,	$04
0008914B 0280 06BA 0280 08BA        	dc.b		$02,	nRst,	$06,	nA4,	$02,	nRst,	$08,	nA4
00089153 0280 06BA 0880 02BA        	dc.b		$02,	nRst,	$06,	nA4,	$08,	nRst,	$02,	nA4
0008915B 0680 02BA 0402 8006        	dc.b		$06,	nRst,	$02,	nA4,	$04,	$02,	nRst,	$06
00089163 B880 B880 BA80 BABD        	dc.b		nG4,	nRst,	nG4,	nRst,	nA4,	nRst,	nA4,	nC5
0008916B 0C06 04BC 0280 18          	dc.b		$0C,	$06,	$04,	nB4,	$02,	nRst,	$18
00089172 E3                         	smpsReturn
00089173                            
00089173                            CNZ_Call02:
00089173 8006 CD02 8008 CD02        	dc.b		nRst,	$06,	nE6,	$02,	nRst,	$08,	nE6,	$02
0008917B 8006 CD06 CE04 CD02        	dc.b		nRst,	$06,	nE6,	$06,	nF6,	$04,	nE6,	$02
00089183 800C 8006 CB02 8008        	dc.b		nRst,	$0C,	nRst,	$06,	nD6,	$02,	nRst,	$08
0008918B CB02 8006 CB06 CD04        	dc.b		nD6,	$02,	nRst,	$06,	nD6,	$06,	nE6,	$04
00089193 CB02 800C 8006 C902        	dc.b		nD6,	$02,	nRst,	$0C,	nRst,	$06,	nC6,	$02
0008919B 8008 C902 8006 C906        	dc.b		nRst,	$08,	nC6,	$02,	nRst,	$06,	nC6,	$06
000891A3 CB04 C902 800C 8006        	dc.b		nD6,	$04,	nC6,	$02,	nRst,	$0C,	nRst,	$06
000891AB C902 8008 C902 8006        	dc.b		nC6,	$02,	nRst,	$08,	nC6,	$02,	nRst,	$06
000891B3 C906 CB04 C902 800C        	dc.b		nC6,	$06,	nD6,	$04,	nC6,	$02,	nRst,	$0C
000891BB E3                         	smpsReturn
000891BC                            
000891BC                            ; FM4 Data
000891BC                            CNZ_FM4:
000891BC EF02                       	smpsFMvoice	$02
000891BE E040                       	smpsPan		panRight,	$00
000891C0 8018                       	dc.b		nRst,	$18
000891C2                            CNZ_Jump03:
000891C2 EF02                       	smpsFMvoice	$02
000891C4 8006 C080 C080 C080        	dc.b		nRst,	$06,	nEb5,	nRst,	nEb5,	nRst,	nEb5,	nRst
000891CC C080 BF02 8004 BF04        	dc.b		nEb5,	nRst,	nD5,	$02,	nRst,	$04,	nD5,	$04
000891D4 0280 04BF 0280 18          	dc.b		$02,	nRst,	$04,	nD5,	$02,	nRst,	$18
000891DB F800 00                    	smpsCall	CNZ_Call03
000891DE EF01                       	smpsFMvoice	$01
000891E0 E9F4                       	smpsAlterPitch	$F4
000891E2 E6FC                       	smpsAlterVol	$FC
000891E4 F800 00                    	smpsCall	CNZ_Call04
000891E7 C918 C80C C906 C8C6        	dc.b		nC6,	$18,	nB5,	$0C,	nC6,	$06,	nB5,	nA5
000891EF 18C9 8006 C180 C180        	dc.b		$18,	nC6,	nRst,	$06,	nE5,	nRst,	nE5,	nRst
000891F7 C280 C2                    	dc.b		nF5,	nRst,	nF5
000891FA E604                       	smpsAlterVol	$04
000891FC 80C1 80C1 80C2 80C2        	dc.b		nRst,	nE5,	nRst,	nE5,	nRst,	nF5,	nRst,	nF5
00089204 E6FC                       	smpsAlterVol	$FC
00089206 80C1 80C1 80C2 0C04        	dc.b		nRst,	nE5,	nRst,	nE5,	nRst,	nF5,	$0C,	$04
0008920E C102 8030                  	dc.b		nE5,	$02,	nRst,	$30
00089212 E90C                       	smpsAlterPitch	$0C
00089214 E604                       	smpsAlterVol	$04
00089216 F6FF AA                    	smpsJump	CNZ_Jump03
00089219                            
00089219                            CNZ_Call03:
00089219 8006 B502 8008 B502        	dc.b		nRst,	$06,	nE4,	$02,	nRst,	$08,	nE4,	$02
00089221 8006 B508 8002 B506        	dc.b		nRst,	$06,	nE4,	$08,	nRst,	$02,	nE4,	$06
00089229 8002 B504 02               	dc.b		nRst,	$02,	nE4,	$04,	$02
0008922E F700 03FF E7               	smpsLoop	$00,	$03,	CNZ_Call03
00089233 8006 B402 8008 B402        	dc.b		nRst,	$06,	nEb4,	$02,	nRst,	$08,	nEb4,	$02
0008923B 8006 B408 8002 B406        	dc.b		nRst,	$06,	nEb4,	$08,	nRst,	$02,	nEb4,	$06
00089243 8002 B404 0280 06B5        	dc.b		nRst,	$02,	nEb4,	$04,	$02,	nRst,	$06,	nE4
0008924B 0280 08B5 0280 06B5        	dc.b		$02,	nRst,	$08,	nE4,	$02,	nRst,	$06,	nE4
00089253 0880 02B5 0680 02B5        	dc.b		$08,	nRst,	$02,	nE4,	$06,	nRst,	$02,	nE4
0008925B 0402 8006 B502 8008        	dc.b		$04,	$02,	nRst,	$06,	nE4,	$02,	nRst,	$08
00089263 B502 8006 B608 8002        	dc.b		nE4,	$02,	nRst,	$06,	nF4,	$08,	nRst,	$02
0008926B B606 8002 B604 0280        	dc.b		nF4,	$06,	nRst,	$02,	nF4,	$04,	$02,	nRst
00089273 06B5 80B5 80B6 80B6        	dc.b		$06,	nE4,	nRst,	nE4,	nRst,	nF4,	nRst,	nF4
0008927B B90C 0604 B802 8018        	dc.b		nAb4,	$0C,	$06,	$04,	nG4,	$02,	nRst,	$18
00089283 E3                         	smpsReturn
00089284                            
00089284                            CNZ_Call04:
00089284 8006 C902 8008 C902        	dc.b		nRst,	$06,	nC6,	$02,	nRst,	$08,	nC6,	$02
0008928C 8006 C906 CB04 C902        	dc.b		nRst,	$06,	nC6,	$06,	nD6,	$04,	nC6,	$02
00089294 800C 8006 C802 8008        	dc.b		nRst,	$0C,	nRst,	$06,	nB5,	$02,	nRst,	$08
0008929C C802 8006 C806 C904        	dc.b		nB5,	$02,	nRst,	$06,	nB5,	$06,	nC6,	$04
000892A4 C802 800C 8006 C602        	dc.b		nB5,	$02,	nRst,	$0C,	nRst,	$06,	nA5,	$02
000892AC 8008 C602 8006 C606        	dc.b		nRst,	$08,	nA5,	$02,	nRst,	$06,	nA5,	$06
000892B4 C804 C602 800C 8006        	dc.b		nB5,	$04,	nA5,	$02,	nRst,	$0C,	nRst,	$06
000892BC C502 8008 C502 8006        	dc.b		nAb5,	$02,	nRst,	$08,	nAb5,	$02,	nRst,	$06
000892C4 C506 C704 C502 800C        	dc.b		nAb5,	$06,	nBb5,	$04,	nAb5,	$02,	nRst,	$0C
000892CC E3                         	smpsReturn
000892CD                            
000892CD                            ; FM2 Data
000892CD                            CNZ_FM2:
000892CD EF01                       	smpsFMvoice	$01
000892CF F01C 0106 04               	smpsModSet	$1C,	$01,	$06,	$04
000892D4 8018                       	dc.b		nRst,	$18
000892D6                            CNZ_Jump04:
000892D6 EF01                       	smpsFMvoice	$01
000892D8 8006 C00C BD02 8004        	dc.b		nRst,	$06,	nEb5,	$0C,	nC5,	$02,	nRst,	$04
000892E0 C3C2 0280 04C0 0280        	dc.b		nFs5,	nF5,	$02,	nRst,	$04,	nEb5,	$02,	nRst
000892E8 04BD 0880 06B8 0280        	dc.b		$04,	nC5,	$08,	nRst,	$06,	nG4,	$02,	nRst
000892F0 04BB B902 8004 B802        	dc.b		$04,	nBb4,	nAb4,	$02,	nRst,	$04,	nG4,	$02
000892F8 800C B504 8002 B504        	dc.b		nRst,	$0C,	nE4,	$04,	nRst,	$02,	nE4,	$04
00089300 8002 B518 8006 B504        	dc.b		nRst,	$02,	nE4,	$18,	nRst,	$06,	nE4,	$04
00089308 8002 B604 B508 B904        	dc.b		nRst,	$02,	nF4,	$04,	nE4,	$08,	nAb4,	$04
00089310 0280 04B5 1A80 06B5        	dc.b		$02,	nRst,	$04,	nE4,	$1A,	nRst,	$06,	nE4
00089318 BA04 0280 04B5 02B1        	dc.b		nA4,	$04,	$02,	nRst,	$04,	nE4,	$02,	nC4
00089320 1280 06B1 0480 02B3        	dc.b		$12,	nRst,	$06,	nC4,	$04,	nRst,	$02,	nD4
00089328 04B1 02B4 06B3 04B1        	dc.b		$04,	nC4,	$02,	nEb4,	$06,	nD4,	$04,	nC4
00089330 2680 06B5 0480 02B6        	dc.b		$26,	nRst,	$06,	nE4,	$04,	nRst,	$02,	nF4
00089338 0480 02B5 0480 02B9        	dc.b		$04,	nRst,	$02,	nE4,	$04,	nRst,	$02,	nAb4
00089340 0402 8004 B50E 8006        	dc.b		$04,	$02,	nRst,	$04,	nE4,	$0E,	nRst,	$06
00089348 BA0C BC04 BA02 BD0C        	dc.b		nA4,	$0C,	nB4,	$04,	nA4,	$02,	nC5,	$0C
00089350 8006 BA02 8004 B80C        	dc.b		nRst,	$06,	nA4,	$02,	nRst,	$04,	nG4,	$0C
00089358 B5B1 B3B4 B604 B402        	dc.b		nE4,	nC4,	nD4,	nEb4,	nF4,	$04,	nEb4,	$02
00089360 B604 B802 8010 AC02        	dc.b		nF4,	$04,	nG4,	$02,	nRst,	$10,	nG3,	$02
00089368 AE04 B102 B518 8006        	dc.b		nA3,	$04,	nC4,	$02,	nE4,	$18,	nRst,	$06
00089370 B504 8002 B604 B508        	dc.b		nE4,	$04,	nRst,	$02,	nF4,	$04,	nE4,	$08
00089378 B904 0280 04B5 1A80        	dc.b		nAb4,	$04,	$02,	nRst,	$04,	nE4,	$1A,	nRst
00089380 06B5 BA04 0280 04B5        	dc.b		$06,	nE4,	nA4,	$04,	$02,	nRst,	$04,	nE4
00089388 02B1 1280 06B1 0480        	dc.b		$02,	nC4,	$12,	nRst,	$06,	nC4,	$04,	nRst
00089390 02B3 04B1 02B4 06B3        	dc.b		$02,	nD4,	$04,	nC4,	$02,	nEb4,	$06,	nD4
00089398 04B1 2680 06B5 0480        	dc.b		$04,	nC4,	$26,	nRst,	$06,	nE4,	$04,	nRst
000893A0 02B6 0480 02B5 0480        	dc.b		$02,	nF4,	$04,	nRst,	$02,	nE4,	$04,	nRst
000893A8 02B9 0402 8004 B50E        	dc.b		$02,	nAb4,	$04,	$02,	nRst,	$04,	nE4,	$0E
000893B0 8006 BA0C BC04 BA02        	dc.b		nRst,	$06,	nA4,	$0C,	nB4,	$04,	nA4,	$02
000893B8 BD0C 8006 BA02 8004        	dc.b		nC5,	$0C,	nRst,	$06,	nA4,	$02,	nRst,	$04
000893C0 B80C B5B1 B306             	dc.b		nG4,	$0C,	nE4,	nC4,	nD4,	$06
000893C6 E604                       	smpsAlterVol	$04
000893C8 BA02 8004 B80C B5B1        	dc.b		nA4,	$02,	nRst,	$04,	nG4,	$0C,	nE4,	nC4
000893D0 B306                       	dc.b		nD4,	$06
000893D2 E6FC                       	smpsAlterVol	$FC
000893D4 BA02 8004 B80C B5B1        	dc.b		nA4,	$02,	nRst,	$04,	nG4,	$0C,	nE4,	nC4
000893DC B30A B102 8030             	dc.b		nD4,	$0A,	nC4,	$02,	nRst,	$30
000893E2 F6FE F2                    	smpsJump	CNZ_Jump04
000893E5                            
000893E5                            ; FM5 Data
000893E5                            CNZ_FM5:
000893E5 EF01                       	smpsFMvoice	$01
000893E7 8018                       	dc.b		nRst,	$18
000893E9 F01C 0106 04               	smpsModSet	$1C,	$01,	$06,	$04
000893EE                            CNZ_Jump05:
000893EE EF01                       	smpsFMvoice	$01
000893F0 8006 BD0C B802 8004        	dc.b		nRst,	$06,	nC5,	$0C,	nG4,	$02,	nRst,	$04
000893F8 C0BF 0280 04BD 0280        	dc.b		nEb5,	nD5,	$02,	nRst,	$04,	nC5,	$02,	nRst
00089400 04B8 0880 06B3 0280        	dc.b		$04,	nG4,	$08,	nRst,	$06,	nD4,	$02,	nRst
00089408 04B6 B402 8004 B302        	dc.b		$04,	nF4,	nEb4,	$02,	nRst,	$04,	nD4,	$02
00089410 800C AE04 8002 B004        	dc.b		nRst,	$0C,	nA3,	$04,	nRst,	$02,	nB3,	$04
00089418 8002 B118 8006 B104        	dc.b		nRst,	$02,	nC4,	$18,	nRst,	$06,	nC4,	$04
00089420 8002 B304 B108 B504        	dc.b		nRst,	$02,	nD4,	$04,	nC4,	$08,	nE4,	$04
00089428 B502 8004 B01A 8006        	dc.b		nE4,	$02,	nRst,	$04,	nB3,	$1A,	nRst,	$06
00089430 B0B5 0402 8004 B102        	dc.b		nB3,	nE4,	$04,	$02,	nRst,	$04,	nC4,	$02
00089438 AE12 8006 AE04 8002        	dc.b		nA3,	$12,	nRst,	$06,	nA3,	$04,	nRst,	$02
00089440 B004 AE02 B106 AF04        	dc.b		nB3,	$04,	nA3,	$02,	nC4,	$06,	nBb3,	$04
00089448 AD26 8006 B104 8002        	dc.b		nAb3,	$26,	nRst,	$06,	nC4,	$04,	nRst,	$02
00089450 B304 8002 B104 8002        	dc.b		nD4,	$04,	nRst,	$02,	nC4,	$04,	nRst,	$02
00089458 B504 B502 8004 B00E        	dc.b		nE4,	$04,	nE4,	$02,	nRst,	$04,	nB3,	$0E
00089460 8006 B50C B804 B502        	dc.b		nRst,	$06,	nE4,	$0C,	nG4,	$04,	nE4,	$02
00089468 BA0C 8006 B602 8004        	dc.b		nA4,	$0C,	nRst,	$06,	nF4,	$02,	nRst,	$04
00089470 B50C B1AE B0B1 B304        	dc.b		nE4,	$0C,	nC4,	nA3,	nB3,	nC4,	nD4,	$04
00089478 B102 B304 B302 8010        	dc.b		nC4,	$02,	nD4,	$04,	nD4,	$02,	nRst,	$10
00089480 A702 A904 AC02 B118        	dc.b		nD3,	$02,	nE3,	$04,	nG3,	$02,	nC4,	$18
00089488 8006 B104 8002 B304        	dc.b		nRst,	$06,	nC4,	$04,	nRst,	$02,	nD4,	$04
00089490 B108 B504 B502 8004        	dc.b		nC4,	$08,	nE4,	$04,	nE4,	$02,	nRst,	$04
00089498 B01A 8006 B0B5 0402        	dc.b		nB3,	$1A,	nRst,	$06,	nB3,	nE4,	$04,	$02
000894A0 8004 B102 AE12 8006        	dc.b		nRst,	$04,	nC4,	$02,	nA3,	$12,	nRst,	$06
000894A8 AE04 8002 B004 AE02        	dc.b		nA3,	$04,	nRst,	$02,	nB3,	$04,	nA3,	$02
000894B0 B106 AF04 AD26 8006        	dc.b		nC4,	$06,	nBb3,	$04,	nAb3,	$26,	nRst,	$06
000894B8 B104 8002 B304 8002        	dc.b		nC4,	$04,	nRst,	$02,	nD4,	$04,	nRst,	$02
000894C0 B104 8002 B504 B502        	dc.b		nC4,	$04,	nRst,	$02,	nE4,	$04,	nE4,	$02
000894C8 8004 B00E 8006 B50C        	dc.b		nRst,	$04,	nB3,	$0E,	nRst,	$06,	nE4,	$0C
000894D0 B804 B502 BA0C 8006        	dc.b		nG4,	$04,	nE4,	$02,	nA4,	$0C,	nRst,	$06
000894D8 B602 8004 B50C B1AE        	dc.b		nF4,	$02,	nRst,	$04,	nE4,	$0C,	nC4,	nA3
000894E0 B006                       	dc.b		nB3,	$06
000894E2 E604                       	smpsAlterVol	$04
000894E4 B602 8004 B50C B1AE        	dc.b		nF4,	$02,	nRst,	$04,	nE4,	$0C,	nC4,	nA3
000894EC B006                       	dc.b		nB3,	$06
000894EE E6F8                       	smpsAlterVol	$F8
000894F0 B602 8004 B50C B1AE        	dc.b		nF4,	$02,	nRst,	$04,	nE4,	$0C,	nC4,	nA3
000894F8 AA0A A902 8030             	dc.b		nF3,	$0A,	nE3,	$02,	nRst,	$30
000894FE E604                       	smpsAlterVol	$04
00089500 F6FE EC                    	smpsJump	CNZ_Jump05
00089503                            
00089503                            ; PSG1 Data
00089503                            CNZ_PSG1:
00089503 8018                       	dc.b		nRst,	$18
00089505                            CNZ_Jump06:
00089505 8006 B80C B402 8004        	dc.b		nRst,	$06,	nG4,	$0C,	nEb4,	$02,	nRst,	$04
0008950D BAB9 0280 04B8 0280        	dc.b		nA4,	nAb4,	$02,	nRst,	$04,	nG4,	$02,	nRst
00089515 04B4 0880 06B0 0280        	dc.b		$04,	nEb4,	$08,	nRst,	$06,	nB3,	$02,	nRst
0008951D 04B3 B102 8004 B002        	dc.b		$04,	nD4,	nC4,	$02,	nRst,	$04,	nB3,	$02
00089525 8018                       	dc.b		nRst,	$18
00089527 F501                       	smpsPSGvoice	$01
00089529 ECFF                       	smpsSetVol	$FF
0008952B F8FB B6                    	smpsCall	CNZ_Call01
0008952E EC01                       	smpsSetVol	$01
00089530 F500                       	smpsPSGvoice	$00
00089532 E9E8                       	smpsAlterPitch	$E8
00089534 F8FC 3D                    	smpsCall	CNZ_Call02
00089537 E918                       	smpsAlterPitch	$18
00089539 EC02                       	smpsSetVol	$02
0008953B B518 B30C B506 B3B1        	dc.b		nE4,	$18,	nD4,	$0C,	nE4,	$06,	nD4,	nC4
00089543 18B6                       	dc.b		$18,	nF4
00089545 ECFE                       	smpsSetVol	$FE
00089547 8006 B880 B880 BA80        	dc.b		nRst,	$06,	nG4,	nRst,	nG4,	nRst,	nA4,	nRst
0008954F BA                         	dc.b		nA4
00089550 EC03                       	smpsSetVol	$03
00089552 C40C C1BD BF06 80          	dc.b		nG5,	$0C,	nE5,	nC5,	nD5,	$06,	nRst
00089559 ECFC                       	smpsSetVol	$FC
0008955B 80B8 80B8 80BA 0C04        	dc.b		nRst,	nG4,	nRst,	nG4,	nRst,	nA4,	$0C,	$04
00089563 B802 8030                  	dc.b		nG4,	$02,	nRst,	$30
00089567 EC01                       	smpsSetVol	$01
00089569 F6FF 9A                    	smpsJump	CNZ_Jump06
0008956C                            
0008956C                            ; PSG2 Data
0008956C                            CNZ_PSG2:
0008956C 8018                       	dc.b		nRst,	$18
0008956E                            CNZ_Jump07:
0008956E 8006 C00C BD02 8004        	dc.b		nRst,	$06,	nEb5,	$0C,	nC5,	$02,	nRst,	$04
00089576 C3C2 0280 04C0 0280        	dc.b		nFs5,	nF5,	$02,	nRst,	$04,	nEb5,	$02,	nRst
0008957E 04BD 0880 06B8 0280        	dc.b		$04,	nC5,	$08,	nRst,	$06,	nG4,	$02,	nRst
00089586 04BB B902 8004 B802        	dc.b		$04,	nBb4,	nAb4,	$02,	nRst,	$04,	nG4,	$02
0008958E 8018                       	dc.b		nRst,	$18
00089590 F501                       	smpsPSGvoice	$01
00089592 ECFF                       	smpsSetVol	$FF
00089594 F8FC 83                    	smpsCall	CNZ_Call03
00089597 EC01                       	smpsSetVol	$01
00089599 F500                       	smpsPSGvoice	$00
0008959B E9E8                       	smpsAlterPitch	$E8
0008959D F8FC E5                    	smpsCall	CNZ_Call04
000895A0 E918                       	smpsAlterPitch	$18
000895A2 EC02                       	smpsSetVol	$02
000895A4 B118 B00C B106 B0AE        	dc.b		nC4,	$18,	nB3,	$0C,	nC4,	$06,	nB3,	nA3
000895AC 18B1                       	dc.b		$18,	nC4
000895AE ECFE                       	smpsSetVol	$FE
000895B0 8006 B580 B580 B680        	dc.b		nRst,	$06,	nE4,	nRst,	nE4,	nRst,	nF4,	nRst
000895B8 B6                         	dc.b		nF4
000895B9 EC03                       	smpsSetVol	$03
000895BB 80B1 80B1 80B1 80B1        	dc.b		nRst,	nC4,	nRst,	nC4,	nRst,	nC4,	nRst,	nC4
000895C3 ECFC                       	smpsSetVol	$FC
000895C5 80B1 80B1 80B1 0C04        	dc.b		nRst,	nC4,	nRst,	nC4,	nRst,	nC4,	$0C,	$04
000895CD B102                       	dc.b		nC4,	$02
000895CF EC01                       	smpsSetVol	$01
000895D1 8030                       	dc.b		nRst,	$30
000895D3 F6FF 99                    	smpsJump	CNZ_Jump07
000895D6 F2                         	smpsStop
000895D7                            
000895D7                            ; PSG3 Data
000895D7                            CNZ_PSG3:
000895D7 F3E7                       	smpsPSGform	$E7
000895D9 8018                       	dc.b		nRst,	$18
000895DB                            CNZ_Loop01:
000895DB F800 00                    	smpsCall	CNZ_Call05
000895DE F701 07FF F9               	smpsLoop	$01,	$07,	CNZ_Loop01
000895E3 0402 0402                  	dc.b		$04,	$02,	$04,	$02
000895E7                            CNZ_Loop02:
000895E7 F800 00                    	smpsCall	CNZ_Call05
000895EA F701 1FFF F9               	smpsLoop	$01,	$1F,	CNZ_Loop02
000895EF 0402 0402                  	dc.b		$04,	$02,	$04,	$02
000895F3                            CNZ_Loop03:
000895F3 F800 00                    	smpsCall	CNZ_Call05
000895F6 F701 24FF F9               	smpsLoop	$01,	$24,	CNZ_Loop03
000895FB 8030                       	dc.b		nRst,	$30
000895FD F6FF DC                    	smpsJump	CNZ_Loop01
00089600                            
00089600                            CNZ_Call05:
00089600 F501                       	smpsPSGvoice	$01
00089602 C606                       	dc.b		nA5,	$06
00089604 F502                       	smpsPSGvoice	$02
00089606 ECFF                       	smpsSetVol	$FF
00089608 04                         	dc.b		$04
00089609 F501                       	smpsPSGvoice	$01
0008960B EC01                       	smpsSetVol	$01
0008960D 02                         	dc.b		$02
0008960E E3                         	smpsReturn
0008960F                            
0008960F                            ; DAC Data
0008960F                            CNZ_DAC:
0008960F 8106 8181 0482 0206        	dc.b		dKick,	$06,	dKick,	dKick,	$04,	dSnare,	$02,	$06
00089617                            CNZ_Loop04:
00089617 8106 82                    	dc.b		dKick,	$06,	dSnare
0008961A F700 04FF F9               	smpsLoop	$00,	$04,	CNZ_Loop04
0008961F 8106 8282 0406 0681        	dc.b		dKick,	$06,	dSnare,	dSnare,	$04,	$06,	$06,	dKick
00089627 0206 0682                  	dc.b		$02,	$06,	$06,	dSnare
0008962B                            CNZ_Loop05:
0008962B 8182                       	dc.b		dKick,	dSnare
0008962D F700 1CFF FA               	smpsLoop	$00,	$1C,	CNZ_Loop05
00089632 8182 8204 0606 8102        	dc.b		dKick,	dSnare,	dSnare,	$04,	$06,	$06,	dKick,	$02
0008963A 0606 82                    	dc.b		$06,	$06,	dSnare
0008963D                            CNZ_Loop06:
0008963D 8182                       	dc.b		dKick,	dSnare
0008963F F700 20FF FA               	smpsLoop	$00,	$20,	CNZ_Loop06
00089644 8182 8182 8182 8204        	dc.b		dKick,	dSnare,	dKick,	dSnare,	dKick,	dSnare,	dSnare,	$04
0008964C 0602 8028 8202 06          	dc.b		$06,	$02,	nRst,	$28,	dSnare,	$02,	$06
00089653 F6FF C2                    	smpsJump	CNZ_Loop04
00089656                            
00089656                            CNZ_Voices:
00089656 3A20 2360 011E 1F1F 1F0A+  	dc.b		$3A,$20,$23,$60,$01,$1E,$1F,$1F,$1F,$0A,$0A,$0B,$0A,$05,$07,$0A
00089666 08A4 8596 7821 2528 00     	dc.b		$08,$A4,$85,$96,$78,$21,$25,$28,$00;			Voice 00
0008966F 3A32 5632 428D 4F15 5206+  	dc.b		$3A,$32,$56,$32,$42,$8D,$4F,$15,$52,$06,$08,$07,$04,$02,$00,$00
0008967F 0018 1828 2819 202A 00     	dc.b		$00,$18,$18,$28,$28,$19,$20,$2A,$00;			Voice 01
00089688 2C61 0301 335F 945F 9405+  	dc.b		$2C,$61,$03,$01,$33,$5F,$94,$5F,$94,$05,$05,$05,$07,$02,$02,$02
00089698 021F 6F1F AF1E 801E 80     	dc.b		$02,$1F,$6F,$1F,$AF,$1E,$80,$1E,$80;			Voice 02
000896A1 00                         	dc.b		$00;			Voice 03
000896A2                            	even
000896A2                            	even
000896A2                            		even
000896A2                            Music9A:	incbin	sound\music9A.bin
0008B084                            		even
0008B084                            Music9B:	include	sound\music9B.asm
0008B084                            ; =============================================================================================
0008B084                            ; Project Name:		SS_SS
0008B084                            ; Created:		19th July 2011
0008B084                            ; ---------------------------------------------------------------------------------------------
0008B084                            ; ASM'd using S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
0008B084                            ; =============================================================================================
0008B084                            
0008B084                            SS_SS_Header:
0008B084 0000                       	smpsHeaderVoice	SS_SS_Voices
0008B086 0603                       	smpsHeaderChan	$06,	$03
0008B088 0102                       	smpsHeaderTempo	$01,	$02
0008B08A                            
0008B08A 0000 0000                  	smpsHeaderDAC	SS_SS_DAC
0008B08E 0000 0010                  	smpsHeaderFM	SS_SS_FM1,	smpsPitch00,	$10
0008B092 0000 0010                  	smpsHeaderFM	SS_SS_FM2,	smpsPitch00,	$10
0008B096 0000 0010                  	smpsHeaderFM	SS_SS_FM3,	smpsPitch00,	$10
0008B09A 0000 0010                  	smpsHeaderFM	SS_SS_FM4,	smpsPitch00,	$10
0008B09E 0000 0010                  	smpsHeaderFM	SS_SS_FM5,	smpsPitch00,	$10
0008B0A2 0000 DC00 0000             	smpsHeaderPSG	SS_SS_PSG1,	smpsPitch03lo,	$00,	$00
0008B0A8 0000 DC00 0000             	smpsHeaderPSG	SS_SS_PSG2,	smpsPitch03lo,	$00,	$00
0008B0AE 0000 0B00 0000             	smpsHeaderPSG	SS_SS_PSG3,	smpsPitch00+$0B,	$00,	$00
0008B0B4                            
0008B0B4                            ; FM1 Data
0008B0B4                            SS_SS_FM1:
0008B0B4 E0C0                       	smpsPan		panCentre,	$00
0008B0B6 EF01                       	smpsFMvoice	$01
0008B0B8 A402 80A4 80AB 80AB        	dc.b		nB2,	$02,	nRst,	nB2,	nRst,	nFs3,	nRst,	nFs3
0008B0C0 80A9 80A9 80AB 80AB        	dc.b		nRst,	nE3,	nRst,	nE3,	nRst,	nFs3,	nRst,	nFs3
0008B0C8 80B0 80B0 80AB 80AB        	dc.b		nRst,	nB3,	nRst,	nB3,	nRst,	nFs3,	nRst,	nFs3
0008B0D0 80A9 80A9 80AB 80AB        	dc.b		nRst,	nE3,	nRst,	nE3,	nRst,	nFs3,	nRst,	nFs3
0008B0D8 80A4 80A4 80AB 80AB        	dc.b		nRst,	nB2,	nRst,	nB2,	nRst,	nFs3,	nRst,	nFs3
0008B0E0 80A9 80A9 80AB 80AB        	dc.b		nRst,	nE3,	nRst,	nE3,	nRst,	nFs3,	nRst,	nFs3
0008B0E8 80A2 80A2 80A9 80A9        	dc.b		nRst,	nA2,	nRst,	nA2,	nRst,	nE3,	nRst,	nE3
0008B0F0 80A7 80A7 80A9 80A9        	dc.b		nRst,	nD3,	nRst,	nD3,	nRst,	nE3,	nRst,	nE3
0008B0F8 80                         	dc.b		nRst
0008B0F9 F6FF B9                    	smpsJump	SS_SS_FM1
0008B0FC                            
0008B0FC                            ; FM2 Data
0008B0FC                            SS_SS_FM2:
0008B0FC E0C0                       	smpsPan		panCentre,	$00
0008B0FE                            
0008B0FE                            SS_SS_Sequence_xD:
0008B0FE EF00                       	smpsFMvoice	$00
0008B100 807F 01                    	dc.b		nRst,	$7F,	$01
0008B103 B704 B3B5 B3B7 B0B9        	dc.b		nFs4,	$04,	nD4,	nE4,	nD4,	nFs4,	nB3,	nAb4
0008B10B B380 BFBE BC80 0CBC        	dc.b		nD4,	nRst,	nD5,	nCs5,	nB4,	nRst,	$0C,	nB4
0008B113 0480 B3B5 B0BA 8008        	dc.b		$04,	nRst,	nD4,	nE4,	nB3,	nA4,	nRst,	$08
0008B11B BA04 80B3 B5B0 BAB0        	dc.b		nA4,	$04,	nRst,	nD4,	nE4,	nB3,	nA4,	nB3
0008B123 B580 B7B3 B5B3 B7B0        	dc.b		nE4,	nRst,	nFs4,	nD4,	nE4,	nD4,	nFs4,	nB3
0008B12B B9B3 80BF BEBC BE80        	dc.b		nAb4,	nD4,	nRst,	nD5,	nCs5,	nB4,	nCs5,	nRst
0008B133 08BC 0480 B3B5 B0BA        	dc.b		$08,	nB4,	$04,	nRst,	nD4,	nE4,	nB3,	nA4
0008B13B 8008 BA04 80B3 B5B0        	dc.b		nRst,	$08,	nA4,	$04,	nRst,	nD4,	nE4,	nB3
0008B143 BAB0 B580 08B7 04BA        	dc.b		nA4,	nB3,	nE4,	nRst,	$08,	nFs4,	$04,	nA4
0008B14B B3BA B780 B3BC B780        	dc.b		nD4,	nA4,	nFs4,	nRst,	nD4,	nB4,	nFs4,	nRst
0008B153 B7BA B3BF BEBC B3BA        	dc.b		nFs4,	nA4,	nD4,	nD5,	nCs5,	nB4,	nD4,	nA4
0008B15B B3BA B780 B3BC B780        	dc.b		nD4,	nA4,	nFs4,	nRst,	nD4,	nB4,	nFs4,	nRst
0008B163 B2BA B2B7 B580 B7BA        	dc.b		nCs4,	nA4,	nCs4,	nFs4,	nE4,	nRst,	nFs4,	nA4
0008B16B B3BA B7B7 B5BC B7BC        	dc.b		nD4,	nA4,	nFs4,	nFs4,	nE4,	nB4,	nFs4,	nB4
0008B173 B7BA B380 B3BF B780        	dc.b		nFs4,	nA4,	nD4,	nRst,	nD4,	nD5,	nFs4,	nRst
0008B17B B7BE B780 B7BC B780        	dc.b		nFs4,	nCs5,	nFs4,	nRst,	nFs4,	nB4,	nFs4,	nRst
0008B183 B5B7 B5BA B5B0 0880        	dc.b		nE4,	nFs4,	nE4,	nA4,	nE4,	nB3,	$08,	nRst
0008B18B 04B2 0880 04B3 2480        	dc.b		$04,	nCs4,	$08,	nRst,	$04,	nD4,	$24,	nRst
0008B193 04BA 1C80 04B9 1C80        	dc.b		$04,	nA4,	$1C,	nRst,	$04,	nAb4,	$1C,	nRst
0008B19B 04B0 0880 04B2 8008        	dc.b		$04,	nB3,	$08,	nRst,	$04,	nCs4,	nRst,	$08
0008B1A3 B324 8004                  	dc.b		nD4,	$24,	nRst,	$04
0008B1A7 EF02                       	smpsFMvoice	$02
0008B1A9 C6C5 C4C3                  	dc.b		nA5,	nAb5,	nG5,	nFs5
0008B1AD C2C1 C0BF BEBD BCBB        	dc.b		nF5,	nE5,	nEb5,	nD5,	nCs5,	nC5,	nB4,	nBb4
0008B1B5 BAB9 B8B7                  	dc.b		nA4,	nAb4,	nG4,	nFs4
0008B1B9 EF00                       	smpsFMvoice	$00
0008B1BB B008                       	dc.b		nB3,	$08	
0008B1BD 8004                       	dc.b		nRst,	$04
0008B1BF B208 8004 B324 8004        	dc.b		nCs4,	$08,	nRst,	$04,	nD4,	$24,	nRst,	$04
0008B1C7 BA1C 8004 B91C 8004        	dc.b		nA4,	$1C,	nRst,	$04,	nAb4,	$1C,	nRst,	$04
0008B1CF B008 8004 B780 08B3        	dc.b		nB3,	$08,	nRst,	$04,	nFs4,	nRst,	$08,	nD4
0008B1D7 2480 04                    	dc.b		$24,	nRst,	$04
0008B1DA EF02                       	smpsFMvoice	$02
0008B1DC B7B8 B9BA BB               	dc.b		nFs4,	nG4,	nAb4,	nA4,	nBb4
0008B1E1 BCBD BEBF C0C1 C2C3        	dc.b		nB4,	nC5,	nCs5,	nD5,	nEb5,	nE5,	nF5,	nFs5
0008B1E9 1C80 0C                    	dc.b		$1C,	nRst,	$0C	
0008B1EC EF00                       	smpsFMvoice	$00
0008B1EE BC18 BF10 BE               	dc.b		nB4,	$18,	nD5,	$10,	nCs5
0008B1F3 18BA B510                  	dc.b		$18,	nA4,	nE4,	$10
0008B1F7 F6FF 03                    	smpsJump	SS_SS_FM2
0008B1FA                            
0008B1FA                            ; FM3 Data
0008B1FA                            SS_SS_FM3:
0008B1FA E0C0                       	smpsPan		panCentre,	$00
0008B1FC                            
0008B1FC                            SS_Fm3xD:
0008B1FC 807F 01                    	dc.b		nRst,	$7F,	$01
0008B1FF EF00                       	smpsFMvoice	$00
0008B201 BC04 B0B9 B0BA B3B5        	dc.b		nB4,	$04,	nB3,	nAb4,	nB3,	nA4,	nD4,	nE4
0008B209 B080 B7B5 B380 0CB7        	dc.b		nB3,	nRst,	nFs4,	nE4,	nD4,	nRst,	$0C,	nFs4
0008B211 0480 B0B9 B3B7 8008        	dc.b		$04,	nRst,	nB3,	nAb4,	nD4,	nFs4,	nRst,	$08
0008B219 B704 80B0 B9B3 B7B3        	dc.b		nFs4,	$04,	nRst,	nB3,	nAb4,	nD4,	nFs4,	nD4
0008B221 B980 BCB0 B9B0 BAB3        	dc.b		nAb4,	nRst,	nB4,	nB3,	nAb4,	nB3,	nA4,	nD4
0008B229 B5B0 80B7 B5B3 B580        	dc.b		nE4,	nB3,	nRst,	nFs4,	nE4,	nD4,	nE4,	nRst
0008B231 08B7 0480 B0B9 B3B7        	dc.b		$08,	nFs4,	$04,	nRst,	nB3,	nAb4,	nD4,	nFs4
0008B239 8008 B704 80B0 B9B3        	dc.b		nRst,	$08,	nFs4,	$04,	nRst,	nB3,	nAb4,	nD4
0008B241 B7B3 B980 08B3 04BF        	dc.b		nFs4,	nD4,	nAb4,	nRst,	$08,	nD4,	$04,	nD5
0008B249 B7BE B380 B7BA B380        	dc.b		nFs4,	nCs5,	nD4,	nRst,	nFs4,	nA4,	nD4,	nRst
0008B251 B3BE B7B7 B5B3 B7BF        	dc.b		nD4,	nCs5,	nFs4,	nFs4,	nE4,	nD4,	nFs4,	nD5
0008B259 B7BE B380 B7BA B380        	dc.b		nFs4,	nCs5,	nD4,	nRst,	nFs4,	nA4,	nD4,	nRst
0008B261 B5B7 B5BA B280 B3BF        	dc.b		nE4,	nFs4,	nE4,	nA4,	nCs4,	nRst,	nD4,	nD5
0008B269 B7BE B3BF BEB3 B3BA        	dc.b		nFs4,	nCs5,	nD4,	nD5,	nCs5,	nD4,	nD4,	nA4
0008B271 B3BE B780 B7BA B380        	dc.b		nD4,	nCs5,	nFs4,	nRst,	nFs4,	nA4,	nD4,	nRst
0008B279 B3BA B380 B3BA B380        	dc.b		nD4,	nA4,	nD4,	nRst,	nD4,	nA4,	nD4,	nRst
0008B281 B2BA B2B7 B2B7 0880        	dc.b		nCs4,	nA4,	nCs4,	nFs4,	nCs4,	nFs4,	$08,	nRst
0008B289 04B7 0880 04B7 2480        	dc.b		$04,	nFs4,	$08,	nRst,	$04,	nFs4,	$24,	nRst
0008B291 04B7 1C80 04B5 1C80        	dc.b		$04,	nFs4,	$1C,	nRst,	$04,	nE4,	$1C,	nRst
0008B299 04B7 0880 04B7 8008        	dc.b		$04,	nFs4,	$08,	nRst,	$04,	nFs4,	nRst,	$08
0008B2A1 B724 8044 B708 8004        	dc.b		nFs4,	$24,	nRst,	$44,	nFs4,	$08,	nRst,	$04
0008B2A9 B708 8004 B724 8004        	dc.b		nFs4,	$08,	nRst,	$04,	nFs4,	$24,	nRst,	$04
0008B2B1 B71C 8004 B51C 8004        	dc.b		nFs4,	$1C,	nRst,	$04,	nE4,	$1C,	nRst,	$04
0008B2B9 B708 8004 B280 08B7        	dc.b		nFs4,	$08,	nRst,	$04,	nCs4,	nRst,	$08,	nFs4
0008B2C1 2480 44B7 1880 68          	dc.b		$24,	nRst,	$44,	nFs4,	$18,	nRst,	$68
0008B2C8 F6FF 30                    	smpsJump	SS_SS_FM3
0008B2CB                            
0008B2CB                            ; FM4 Data
0008B2CB                            SS_SS_FM4:
0008B2CB E605                       	smpsaltervol	$05
0008B2CD E080                       	smpsPan		panLeft,	$00
0008B2CF 01                         	dc.b		$01
0008B2D0 F6FF 2A                    	smpsJump	SS_Fm3xD
0008B2D3                            
0008B2D3                            ; FM5 Data
0008B2D3                            SS_SS_FM5:
0008B2D3 E605                       	smpsaltervol	$05
0008B2D5 E040                       	smpsPan		panRight,	$00
0008B2D7 02                         	dc.b		$02
0008B2D8 F6FE 24                    	smpsJump	SS_SS_Sequence_xD
0008B2DB                            
0008B2DB                            ; PSG1 Data
0008B2DB                            SS_SS_PSG1:
0008B2DB 02                         	dc.b		$02
0008B2DC E605                       	smpsaltervol	$05
0008B2DE F504                       	smpspsgvoice	$04
0008B2E0                            SS_PSG1_xD:
0008B2E0 807F 01                    	dc.b		nRst,	$7F,	$01
0008B2E3 E080                       	smpsPan		panLeft,	$00
0008B2E5 B704 B3B5 B3B7 B0B9        	dc.b		nFs4,	$04,	nD4,	nE4,	nD4,	nFs4,	nB3,	nAb4
0008B2ED B380 BFBE BC80 0CBC        	dc.b		nD4,	nRst,	nD5,	nCs5,	nB4,	nRst,	$0C,	nB4
0008B2F5 0480 B3B5 B0BA 8008        	dc.b		$04,	nRst,	nD4,	nE4,	nB3,	nA4,	nRst,	$08
0008B2FD BA04 80B3 B5B0 BAB0        	dc.b		nA4,	$04,	nRst,	nD4,	nE4,	nB3,	nA4,	nB3
0008B305 B580 B7B3 B5B3 B7B0        	dc.b		nE4,	nRst,	nFs4,	nD4,	nE4,	nD4,	nFs4,	nB3
0008B30D B9B3 80BF BEBC BE80        	dc.b		nAb4,	nD4,	nRst,	nD5,	nCs5,	nB4,	nCs5,	nRst
0008B315 08BC 0480 B3B5 B0BA        	dc.b		$08,	nB4,	$04,	nRst,	nD4,	nE4,	nB3,	nA4
0008B31D 8008 BA04 80B3 B5B0        	dc.b		nRst,	$08,	nA4,	$04,	nRst,	nD4,	nE4,	nB3
0008B325 BAB0 B580 08B7 04BA        	dc.b		nA4,	nB3,	nE4,	nRst,	$08,	nFs4,	$04,	nA4
0008B32D B3BA B780 B3BC B780        	dc.b		nD4,	nA4,	nFs4,	nRst,	nD4,	nB4,	nFs4,	nRst
0008B335 B7BA B3BF BEBC B3BA        	dc.b		nFs4,	nA4,	nD4,	nD5,	nCs5,	nB4,	nD4,	nA4
0008B33D B3BA B780 B3BC B780        	dc.b		nD4,	nA4,	nFs4,	nRst,	nD4,	nB4,	nFs4,	nRst
0008B345 B2BA B2B7 B580 B7BA        	dc.b		nCs4,	nA4,	nCs4,	nFs4,	nE4,	nRst,	nFs4,	nA4
0008B34D B3BA B7B7 B5BC B7BC        	dc.b		nD4,	nA4,	nFs4,	nFs4,	nE4,	nB4,	nFs4,	nB4
0008B355 B7BA B380 B3BF B780        	dc.b		nFs4,	nA4,	nD4,	nRst,	nD4,	nD5,	nFs4,	nRst
0008B35D B7BE B780 B7BC B780        	dc.b		nFs4,	nCs5,	nFs4,	nRst,	nFs4,	nB4,	nFs4,	nRst
0008B365 B5B7 B5BA B5B0 0880        	dc.b		nE4,	nFs4,	nE4,	nA4,	nE4,	nB3,	$08,	nRst
0008B36D 04B2 0880 04B3 2480        	dc.b		$04,	nCs4,	$08,	nRst,	$04,	nD4,	$24,	nRst
0008B375 04BA 1C80 04B9 1C80        	dc.b		$04,	nA4,	$1C,	nRst,	$04,	nAb4,	$1C,	nRst
0008B37D 04B0 0880 04B2 8008        	dc.b		$04,	nB3,	$08,	nRst,	$04,	nCs4,	nRst,	$08
0008B385 B324 8004                  	dc.b		nD4,	$24,	nRst,	$04
0008B389 8080 8080                  	dc.b		nrst,	nrst,	nrst,	nrst
0008B38D 8080 8080 8080 8080        	dc.b		nrst,	nrst,	nrst,	nrst,	nrst,	nrst,	nrst,	nrst
0008B395 8080 8080                  	dc.b		nrst,	nrst,	nrst,	nrst
0008B399 B008                       	dc.b		nB3,	$08	
0008B39B 8004                       	dc.b		nRst,	$04
0008B39D B208 8004 B324 8004        	dc.b		nCs4,	$08,	nRst,	$04,	nD4,	$24,	nRst,	$04
0008B3A5 BA1C 8004 B91C 8004        	dc.b		nA4,	$1C,	nRst,	$04,	nAb4,	$1C,	nRst,	$04
0008B3AD B008 8004 B780 08B3        	dc.b		nB3,	$08,	nRst,	$04,	nFs4,	nRst,	$08,	nD4
0008B3B5 2480 04                    	dc.b		$24,	nRst,	$04
0008B3B8 8080 8080 80               	dc.b		nrst,	nrst,	nrst,	nrst,	nrst
0008B3BD 8080 8080 8080 8080        	dc.b		nrst,	nrst,	nrst,	nrst,	nrst,	nrst,	nrst,	nrst
0008B3C5 1C80 0C                    	dc.b		$1C,	nRst,	$0C	
0008B3C8 BC18 BF10 BE               	dc.b		nB4,	$18,	nD5,	$10,	nCs5
0008B3CD 18BA B510                  	dc.b		$18,	nA4,	nE4,	$10
0008B3D1 F6FF 0D                    	smpsjump	SS_psg1_xd
0008B3D4 F2                         	smpsStop
0008B3D5                            
0008B3D5                            ; PSG2 Data
0008B3D5                            SS_SS_PSG2:
0008B3D5 8001                       	dc.b		nRst,	$01
0008B3D7 F2                         	smpsStop
0008B3D8                            
0008B3D8                            ; PSG3 Data
0008B3D8                            SS_SS_PSG3:
0008B3D8 F3E7                       	smpsPSGform	$E7
0008B3DA 8001                       	dc.b		nRst,	$01
0008B3DC F2                         	smpsStop
0008B3DD                            
0008B3DD                            ; DAC Data
0008B3DD                            SS_SS_DAC:
0008B3DD E0C0                       	smpsPan		panCentre,	$00
0008B3DF 8104 8082 800C 8204        	dc.b		dKick,	$04,	nRst,	dSnare,	nRst,	$0C,	dSnare,	$04
0008B3E7 800C 8204 800C 8204        	dc.b		nRst,	$0C,	dSnare,	$04,	nRst,	$0C,	dSnare,	$04
0008B3EF 8181 8082 800C 8204        	dc.b		dKick,	dKick,	nRst,	dSnare,	nRst,	$0C,	dSnare,	$04
0008B3F7 8081 8082 800C 8204        	dc.b		nRst,	dKick,	nRst,	dSnare,	nRst,	$0C,	dSnare,	$04
0008B3FF 81                         	dc.b		dKick
0008B400 F6FF DB                    	smpsJump	SS_SS_DAC
0008B403                            
0008B403                            SS_SS_Voices:
0008B403 390D 0102 019F 1F1F 5F0A+  	dc.b		$39,$0D,$01,$02,$01,$9F,$1F,$1F,$5F,$0A,$09,$09,$04,$08,$07,$07
0008B413 0724 2424 2822 2624 05     	dc.b		$07,$24,$24,$24,$28,$22,$26,$24,$05;			Voice 00
0008B41C 2036 3530 31DF DF9F 9F07+  	dc.b		$20,$36,$35,$30,$31,$DF,$DF,$9F,$9F,$07,$06,$09,$06,$07,$06,$06
0008B42C 0820 1010 F819 3713 80     	dc.b		$08,$20,$10,$10,$F8,$19,$37,$13,$80;			Voice 01
0008B435 3433 01DE D49B 5F1F 1F04+  	dc.b		$34,$33,$01,$DE,$D4,$9B,$5F,$1F,$1F,$04,$07,$07,$08,$00,$00,$00
0008B445 00F6 F7E4 F716 1121 06     	dc.b		$00,$F6,$F7,$E4,$F7,$16,$11,$21,$06;			Voice 02
0008B44E                            	even
0008B44E                            	even
0008B44E                            		even
0008B44E                            Music9C:	incbin	sound\music9C.bin
0008B84A 00                         		even
0008B84A                            Music9D:	incbin	sound\music9D.bin
0008BB98                            		even
0008BB98                            Music9E:	incbin	sound\music9E.bin
0008C39C                            		even
0008C39C                            Music9F:	incbin	sound\music9F.bin
0008C9EA                            		even
0008C9EA                            MusicIndex_E5plus:	
0008C9EA 0007 F470 0007 F470                        dc.l MusicE5, MusicE6
0008C9F2 0007 F470 0007 F470        		dc.l MusicE7, MusicE8
0008C9FA 0007 F470 0007 F470        		dc.l MusicE9, MusicEA
0008CA02 0007 F470 0007 F470        		dc.l MusicEB, MusicEC
0008CA0A 0007 F470 0007 F470        		dc.l MusicED, MusicEE
0008CA12 0007 F470 0007 F470        		dc.l MusicEF, MusicF0
0008CA1A 0007 F470 0007 F470        		dc.l MusicF1, MusicF2
0008CA22 0007 F470 0007 F470        		dc.l MusicF3, MusicF4
0008CA2A 0007 F470 0007 F470                        dc.l MusicF5, MusicF6
0008CA32 0007 F470 0007 F470        		dc.l MusicF7, MusicF8
0008CA3A 0007 F470 0007 F470        		dc.l MusicF9, MusicFA
0008CA42 0007 F470 0007 F470        		dc.l MusicFB, MusicFC
0008CA4A 0007 F470 0007 F470        		dc.l MusicFD, MusicFE
0008CA52 0007 F470                  		dc.l MusicFF
0008CA56                            ; ---------------------------------------------------------------------------
0008CA56                            ; Sound	effect pointers
0008CA56                            ; ---------------------------------------------------------------------------
0008CA56 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0008CA62 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0008CA6E 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0008CA7A 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0008CA86 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0008CA92 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0008CA9E 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0008CAAA 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0008CAB6 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0008CAC2 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0008CACE 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
0008CADA 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
0008CAE6 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0008CAF2 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0008CAFE 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0008CB0A 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
0008CB16 0000 0000                  		dc.l SoundD1
0008CB1A 0000 0000                  SoundD0Index:	dc.l SoundD0
0008CB1E                            SoundA0:	incbin	sound\soundA0.bin
0008CB34                            		even
0008CB34                            SoundA1:	incbin	sound\soundA1.bin
0008CB5E                            		even
0008CB5E                            SoundA2:	incbin	sound\soundA2.bin
0008CB7E                            		even
0008CB7E                            SoundA3:	incbin	sound\soundA3.bin
0008CBB0                            		even
0008CBB0                            SoundA4:	incbin	sound\soundA4.bin
0008CBE6                            		even
0008CBE6                            SoundA5:	incbin	sound\soundA5.bin
0008CC12                            		even
0008CC12                            SoundA6:	incbin	sound\soundA6.bin
0008CC42                            		even
0008CC42                            SoundA7:	incbin	sound\soundA7.bin
0008CC72                            		even
0008CC72                            SoundA8:	incbin	sound\soundA8.bin
0008CCA6                            		even
0008CCA6                            SoundA9:	incbin	sound\soundA9.bin
0008CCB8                            		even
0008CCB8                            SoundAA:	incbin	sound\soundAA.bin
0008CCFA                            		even
0008CCFA                            SoundAB:	incbin	sound\soundAB.bin
0008CD1A                            		even
0008CD1A                            SoundAC:	incbin	sound\soundAC.bin
0008CD4E                            		even
0008CD4E                            SoundAD:	incbin	sound\soundAD.bin
0008CD84                            		even
0008CD84                            SoundAE:	incbin	sound\soundAE.bin
0008CDCE                            		even
0008CDCE                            SoundAF:	incbin	sound\soundAF.bin
0008CDFC                            		even
0008CDFC                            SoundB0:	incbin	sound\soundB0.bin
0008CE2E                            		even
0008CE2E                            SoundB1:	incbin	sound\soundB1.bin
0008CE5A                            		even
0008CE5A                            SoundB2:	incbin	sound\soundB2.bin
0008CEAA                            		even
0008CEAA                            SoundB3:	incbin	sound\soundB3.bin
0008CEF4                            		even
0008CEF4                            SoundB4:	include	sound\soundB4.asm
0008CEF4                            ; =============================================================================================
0008CEF4                            ; Project Name:		sad
0008CEF4                            ; Created:		29th January 2011
0008CEF4                            ; ---------------------------------------------------------------------------------------------
0008CEF4                            ; ASM'd using S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
0008CEF4                            ; =============================================================================================
0008CEF4                            
0008CEF4                            sad_Header:
0008CEF4 0000                       	smpsHeaderVoice	sad_Voices
0008CEF6 0603                       	smpsHeaderChan	$06,	$03
0008CEF8 0206                       	smpsHeaderTempo	$02,	$06
0008CEFA                            
0008CEFA 0000 0000                  	smpsHeaderDAC	sad_DAC
0008CEFE 0000 0012                  	smpsHeaderFM	sad_FM1,	smpsPitch00,	$12
0008CF02 0000 F40D                  	smpsHeaderFM	sad_FM2,	smpsPitch01lo,	$0D
0008CF06 0000 F40A                  	smpsHeaderFM	sad_FM3,	smpsPitch01lo,	$0A
0008CF0A 0000 F40F                  	smpsHeaderFM	sad_FM4,	smpsPitch01lo,	$0F
0008CF0E 0000 0012                  	smpsHeaderFM	sad_FM5,	smpsPitch00,	$12
0008CF12 0000 D003 0005             	smpsHeaderPSG	sad_PSG1,	smpsPitch04lo,	$03,	$05
0008CF18 0000 DC06 0005             	smpsHeaderPSG	sad_PSG2,	smpsPitch03lo,	$06,	$05
0008CF1E 0000 DC00 0004             	smpsHeaderPSG	sad_PSG3,	smpsPitch03lo,	$00,	$04
0008CF24                            
0008CF24                            ; FM5 Data
0008CF24                            sad_FM5:
0008CF24                            ; FM1 Data
0008CF24                            sad_FM1:
0008CF24                            ; FM2 Data
0008CF24                            sad_FM2:
0008CF24                            ; FM3 Data
0008CF24                            sad_FM3:
0008CF24                            ; FM4 Data
0008CF24                            sad_FM4:
0008CF24                            ; PSG1 Data
0008CF24                            sad_PSG1:
0008CF24                            
0008CF24                            ; PSG2 Data
0008CF24                            sad_PSG2:
0008CF24                            
0008CF24                            ; PSG3 Data
0008CF24                            sad_PSG3:
0008CF24 F2                         	smpsStop
0008CF25                            
0008CF25                            ; DAC Data
0008CF25                            sad_DAC:
0008CF25 D8                         	dc.b		$D8
0008CF26 F2                         	smpsStop
0008CF27                            sad_Voices:
0008CF27 00                         	dc.b		$00;			Voice 00
0008CF28                            	even
0008CF28                            	even
0008CF28                            		even
0008CF28                            SoundB5:	incbin	sound\soundB5.bin
0008CF56                            		even
0008CF56                            SoundB6:	incbin	sound\soundB6.bin
0008CF74                            		even
0008CF74                            SoundB7:	incbin	sound\soundB7.bin
0008CFB0                            		even
0008CFB0                            SoundB8:	incbin	sound\soundB8.bin
0008CFCE                            		even
0008CFCE                            SoundB9:	incbin	sound\soundB9.bin
0008D032                            		even
0008D032                            SoundBA:	incbin	sound\soundBA.bin
0008D05A                            		even
0008D05A                            SoundBB:	incbin	sound\soundBB.bin
0008D086                            		even
0008D086                            SoundBC:	incbin	sound\soundBC.bin
0008D0C8                            		even
0008D0C8                            SoundBD:	incbin	sound\soundBD.bin
0008D11C                            		even
0008D11C                            SoundBE:	incbin	sound\soundBE.bin
0008D156                            		even
0008D156                            SoundBF:	incbin	sound\soundBF.bin
0008D1C8                            		even
0008D1C8                            SoundC0:	incbin	sound\soundC0.bin
0008D1F6                            		even
0008D1F6                            SoundC1:	incbin	sound\soundC1.bin
0008D230                            		even
0008D230                            SoundC2:	incbin	sound\soundC2.bin
0008D25A                            		even
0008D25A                            SoundC3:	incbin	sound\soundC3.bin
0008D2D4                            		even
0008D2D4                            SoundC4:	incbin	sound\soundC4.bin
0008D2FC                            		even
0008D2FC                            SoundC5:	incbin	sound\soundC5.bin
0008D364                            		even
0008D364                            SoundC6:	incbin	sound\soundC6.bin
0008D3A6                            		even
0008D3A6                            SoundC7:	incbin	sound\soundC7.bin
0008D3D4                            		even
0008D3D4                            SoundC8:	incbin	sound\soundC8.bin
0008D3E6                            		even
0008D3E6                            SoundC9:	incbin	sound\soundC9.bin
0008D414                            		even
0008D414                            SoundCA:	incbin	sound\soundCA.bin
0008D442                            		even
0008D442                            SoundCB:	incbin	sound\soundCB.bin
0008D48E                            		even
0008D48E                            SoundCC:	incbin	sound\soundCC.bin
0008D4EA 00                         		even
0008D4EA                            SoundCD:	incbin	sound\soundCD.bin
0008D4F8                            		even
0008D4F8                            SoundCE:	incbin	sound\soundCE.bin
0008D526                            		even
0008D526                            SoundCF:	incbin	sound\soundCF.bin
0008D55E                            		even
0008D55E                            SoundD0:	incbin	sound\soundD0.bin
0008D598                            		even
0008D598                            SoundD1:	incbin	sound\soundD1.bin
0008D5D4                            		even
0008D5D4                            SegaPCM:	incbin	sound\segapcm.bin
00093F4C                            		even
00093F4C                            Art_Dust:	incbin	artunc\spindust.bin
0009588C                            		even
0009588C                            
0009588C                            ; S1HL DAC samples banks:
0009588C                            		align $A0000
000A0000                                    incbin 'DAC_Banks\S1HLDACBank.bin'
000AFF54 0000 0000 0000 0000 0000+                  align $B0000
000B0000                                    incbin 'DAC_Banks\S1HLDACBank2.bin'
000BFFF2 0000 0000 0000 0000 0000+                  align $C0000
000C0000                                    incbin 'DAC_Banks\S1HLDACBank3.bin'
000D0000                                           align $D0000
000D0000                                    incbin 'DAC_Banks\S1HLDACBank4.bin'
000DD56B                                          align $E0000
000E0000                                    incbin 'DAC_Banks\Myown.bin'
000EA65E                            
000EA65E                                    include '_inc\PCMTest.asm'
000EA65E                            MusicTest:
000EA65E                            ;		include	'WetFlame.asm'
000EA65E 4E75                       		rts
000EA65E 4E75                       		rts
000EA660                            	include	'_inc\xulpico.asm'
000EA660 103C 00E4                  Xulpico:			move.b	#$E4,d0
000EA664 4EB8 1A0C                  			jsr	PlaySound_Special              	; Stop the music
000EA668 4EB8 1E00                  			jsr	ClearPLC			; Clear the PLC
000EA66C 4EB8 2738                  			jsr	Pal_FadeFrom			; Fade out
000EA670 46FC 2700                  			move	#$2700,sr
000EA674                            
000EA674 4DF9 00C0 0004             Xulpico_SetupVDP:	lea	($C00004).l,a6			; Setup teh VDP
000EA67A 3CBC 8004                  			move.w	#$8004,(a6)			; Mode register 1 setting
000EA67E 3CBC 8230                  			move.w	#$8230,(a6)			; Map Plane A setting
000EA682 3CBC 8407                  			move.w	#$8407,(a6)			; Map Plane B setting
000EA686 3CBC 9001                  			move.w	#$9001,(a6)			; Plane size setting
000EA68A 3CBC 9200                  			move.w	#$9200,(a6)			; Window vertical position
000EA68E 3CBC 8B03                  			move.w	#$8B03,(a6)			; Mode register 3 setting
000EA692 3CBC 8720                  			move.w	#$8720,(a6)			; Backdrop color setting
000EA696 4238 F64E                  			clr.b	($FFFFF64E).w
000EA69A 4EB8 1810                  			jsr	ClearScreen			; Clear the actual screen
000EA69E 43F8 D000                  			lea	($FFFFD000).w,a1		; Clear $FFD000-$FFD7FF
000EA6A2 7000                       			moveq	#0,d0
000EA6A4 323C 07FF                  			move.w	#$7FF,d1
000EA6A8                            
000EA6A8                            Xulpico_ClrObjRam:
000EA6A8 22C0                       			move.l	d0,(a1)+
000EA6AA 51C9 FFFC                  			dbf	d1,Xulpico_ClrObjRam
000EA6AE                            				
000EA6AE 23FC 4000 0000 00C0 0004   Xulpico_Art:		move.l	#$40000000,($C00004).l		; Load art
000EA6B8 41F9 0002 3286             			lea	(Art_Xulpico).l,a0
000EA6BE 4EB8 1C44                  			jsr	NemDec
000EA6C2 23FC 54C0 0000 00C0 0004   			move.l	#$54C00000,($C00004).l
000EA6CC 41F9 0002 35D0             			lea	(Nem_XulSpr).l,a0
000EA6D2 4EB8 1C44                  			jsr	NemDec
000EA6D6                            				
000EA6D6                            Xulpico_Mappings:
000EA6D6 43F9 00FF 0000             			lea	($FF0000).l,a1			; Load screen mappings
000EA6DC 41F9 0002 355A             			lea	(Map_Xulpico).l,a0
000EA6E2 303C 0000                  			move.w	#0,d0
000EA6E6 4EB8 1F40                  			jsr	EniDec
000EA6EA                            				
000EA6EA 43F9 00FF 0000             Xulpico_ShowOnVDP:	lea	($FF0000).l,a1			; Show screen
000EA6F0 203C 6000 0003             			move.l	#$60000003,d0			; Location
000EA6F6 7227                       			moveq	#$27,d1
000EA6F8 741B                       			moveq	#$1B,d2
000EA6FA 4EB8 1B78                  			jsr	ShowVDPGraphics				
000EA6FE                            
000EA6FE 2A3C 4000 0003             			move.l	#$40000003,d5
000EA704 43F9 0000 0000             			lea	(Xulpico_ASCII),a1
000EA70A 363C 0580                  			move.w	#$580,d3
000EA70E 4EB8 1964                  			jsr	LoadASCII
000EA712                            				
000EA712                            Xulpico_Palette:	
000EA712 43F9 0002 35B0             			lea	(Pal_Xulpico).l,a1		; Load palette
000EA718 45F8 FB80                  			lea	($FFFFFB80).w,a2
000EA71C 103C 0040                  			move.b	#$40,d0
000EA720 24D9                       Xulpico_PalLoop:		move.l	(a1)+,(a2)+
000EA722 4A40                       			tst.w	d0
000EA724 6700                       			beq.s	Xulpico_Music
000EA726 5340                       			sub.w	#1,d0
000EA728 60F6                       			bra.s	Xulpico_PalLoop
000EA72A                            				
000EA72A 303C 0097                  Xulpico_Music:		move.w	#$97,d0		; Play music
000EA72E 4EB8 19E4                  			jsr	PlaySound
000EA732 7019                       			moveq	#$19,d0		; load Sonic's pallet
000EA734 4EB8 29E0                  			jsr	PalLoad1			
000EA738                            Xulpico_LoadObj:	
000EA738 4EB8 2694                  			jsr	Pal_Fadeto
000EA73C 11FC 0010 D000             			move.b	#$10,($FFFFD000).w ; load your object
000EA742 4EB9 0001 0202             			jsr	ObjectsLoad
000EA748 4EB9 0001 055C             			jsr	BuildSprites
000EA74E                            ; ---------------------------------------------------------------------------------------------------------------------
000EA74E 11FC 0002 F62A             Xulpico_Loop:		move.b	#2,($FFFFF62A).w		; Function 2 in vInt
000EA754 4EB8 3766                  			jsr	DelayProgram			; Run delay program
000EA758 4EB9 0001 0202             			jsr	ObjectsLoad
000EA75E 4EB9 0001 055C             			jsr	BuildSprites
000EA764 0238 0080 F605             			andi.b	#$80,($FFFFF605).w		; is Start button pressed?
000EA76A 67E2                       			beq.s	Xulpico_Loop			; if not, loop
000EA76C                            ;			jmp	Xulpico_Loop
000EA76C                            Xulpico_Next:
000EA76C 11FC 0004 F600             			move.b	#4,($FFFFF600).w ; go to next screen
000EA772 4E75                       			rts
000EA772 4E75                       			rts
000EA774                            	include	'_inc\ssrg.asm'
000EA774                            ; SSRG Splash Screen by HCKTROX and DeoxysKyogre
000EA774                            
000EA774 103C 00E4                  SSRGScreen:			move.b	#$E4,d0
000EA778 4EB8 1A0C                  				jsr	Playsound_special               ; Stop music
000EA77C 4EB8 1E00                  				jsr	ClearPLC			; Clear PLCs
000EA780 4EB8 2738                  				jsr	Pal_FadeFrom			; Fade out previous palette
000EA784 46FC 2700                  				move	#$2700,sr
000EA788 4EB8 189E                  				jsr	SoundDriverLoad
000EA78C                            
000EA78C 4DF9 00C0 0004             SSRGScreen_VDP:			lea	($C00004).l,a6			; Setup VDP
000EA792 3CBC 8004                  				move.w	#$8004,(a6)
000EA796 3CBC 8230                  				move.w	#$8230,(a6)
000EA79A 3CBC 8407                  				move.w	#$8407,(a6)
000EA79E 3CBC 9001                  				move.w	#$9001,(a6)
000EA7A2 3CBC 9200                  				move.w	#$9200,(a6)
000EA7A6 3CBC 8B03                  				move.w	#$8B03,(a6)
000EA7AA 3CBC 8720                  				move.w	#$8720,(a6)
000EA7AE 4238 F64E                  				clr.b	($FFFFF64E).w
000EA7B2 4EB8 1810                  				jsr	ClearScreen			; Clear screen
000EA7B6 43F8 D000                  				lea	($FFFFD000).w,a1
000EA7BA 7000                       				moveq	#0,d0
000EA7BC 323C 07FF                  				move.w	#$7FF,d1
000EA7C0                            
000EA7C0                            SSRG_ClrObjRam:
000EA7C0 22C0                       				move.l	d0,(a1)+
000EA7C2 51C9 FFFC                  				dbf	d1,SSRG_ClrObjRam
000EA7C6                            			
000EA7C6 23FC 4000 0000 00C0 0004   SSRGScreen_Art:			move.l	#$40000000,($C00004).l		; Load art
000EA7D0 41F9 0002 5468             				lea	(Nem_SSRGBG).l,a0
000EA7D6 4EB8 1C44                  				jsr	NemDec
000EA7DA                            				
000EA7DA 43F9 00FF 0000             SSRGScreen_Mappings:		lea	($FF0000).l,a1			; Load screen mappings
000EA7E0 41F9 0002 53CA             				lea	(Eni_SSRGBG).l,a0
000EA7E6 303C 0000                  				move.w	#0,d0
000EA7EA 4EB8 1F40                  				jsr	EniDec
000EA7EE                            				
000EA7EE 43F9 00FF 0000             SSRGScreen_ShowOnVDP:		lea	($FF0000).l,a1			; Show screen
000EA7F4 203C 4000 0003             				move.l	#$40000003,d0
000EA7FA 7227                       				moveq	#$27,d1
000EA7FC 741B                       				moveq	#$1B,d2
000EA7FE 4EB8 1B78                  				jsr	ShowVDPGraphics				
000EA802                            				
000EA802 43F9 0000 36E6             SSRGScreen_Palette:		lea	(Pal_SSRGBG).l,a1		; Load palette
000EA808 45F8 FB80                  				lea	($FFFFFB80).w,a2
000EA80C 103C 0040                  				move.b	#$40,d0
000EA810 24D9                       SSRGScreen_PalLoop:		move.l	(a1)+,(a2)+
000EA812 4A40                       				tst.w	d0
000EA814 6700                       				beq.s	SSRGScreen_Music
000EA816 5340                       				sub.w	#1,d0
000EA818 60F6                       				bra.s	SSRGScreen_PalLoop
000EA81A                            				
000EA81A 303C 0081                  SSRGScreen_Music:		move.w	#$81,d0				; Play music
000EA81E 4EB8 19E4                  				jsr	PlaySound
000EA822 4EB8 2694                  				jsr	Pal_FadeTo			; Fade palette in
000EA826                            
000EA826                            ; ---------------------------------------------------------------------------------------------------------------------
000EA826 11FC 0002 F62A             SSRGScreen_Loop:		move.b	#2,($FFFFF62A).w		; Function 2 in vInt
000EA82C 4EB8 3766                  				jsr	DelayProgram			; Run delay program
000EA830 0238 0080 F605             				andi.b	#$80,($FFFFF605).w		; is Start button pressed?
000EA836 67EE                       				beq.s	SSRGScreen_Loop			; if not, loop
000EA838                            
000EA838                            SSRGScreen_Next:
000EA838 4278 F600                  				clr.w	($FFFFF600).w
000EA83C 11FC 0004 FF94             				move.b	#4,($FFFFFF94).w ; go to next screen
000EA842 4E75                       				rts	
000EA844                            				
000EA844                            ; ---------------------------------------------------------------------------------------------------------------------
000EA844                            ; ---------------------------------------------------------------------------------------------------------------------
000EA844                            	include	'_inc\ROMInfo.asm'
000EA844                            Go_To_PalRegion:
000EA844 11FC 0001 FFA3             				move.b	#1,($FFFFFFA3).w
000EA84A 11FC 0030 FF94             				move.b	#$30,($FFFFFF94).w
000EA850 4E75                       				rts	
000EA852                            ROMInfo:
000EA852 103C 00E4                  				move.b	#$E4,d0		;E4
000EA856 0C38 0001 FFA3             				cmpi.b	#1,($FFFFFFA3).w
000EA85C 6700                       				beq.s	SkipCheck
000EA85E 0839 0006 00A1 0001        				btst	#6,($A10001).l		; Is NTSC?
000EA866 6600 FFDC                  				bne.w	Go_to_PalRegion
000EA86A                            SkipCheck:
000EA86A 4EB8 1A0C                  				jsr	Playsound_special               ; Stop music
000EA86E 4EB8 1E00                  				jsr	ClearPLC			; Clear PLCs
000EA872 4EB8 2738                  				jsr	Pal_FadeFrom			; Fade out previous palette
000EA876 4EB8 189E                  				jsr	SoundDriverLoad
000EA87A 46FC 2700                  				move	#$2700,sr
000EA87E                            
000EA87E 4DF9 00C0 0004             ROMInfoScreen_VDP:		lea	($C00004).l,a6			; Setup VDP
000EA884 3CBC 8004                  				move.w	#$8004,(a6)
000EA888 3CBC 8230                  				move.w	#$8230,(a6)
000EA88C 3CBC 8407                  				move.w	#$8407,(a6)
000EA890 3CBC 9001                  				move.w	#$9001,(a6)
000EA894 3CBC 9200                  				move.w	#$9200,(a6)
000EA898 3CBC 8B03                  				move.w	#$8B03,(a6)
000EA89C                            ;				move.w	#$8C00,(a6)		; H res 32 cells, no interlace, S/H enabled
000EA89C 3CBC 8720                  				move.w	#$8720,(a6)
000EA8A0 4238 F64E                  				clr.b	($FFFFF64E).w
000EA8A4 4EB8 1810                  				jsr	ClearScreen			; Clear screen
000EA8A8 43F8 D000                  				lea	($FFFFD000).w,a1
000EA8AC 7000                       				moveq	#0,d0
000EA8AE 323C 07FF                  				move.w	#$7FF,d1
000EA8B2                            
000EA8B2                            ROMInfo_ClrObjRam:
000EA8B2 22C0                       				move.l	d0,(a1)+
000EA8B4 51C9 FFFC                  				dbf	d1,ROMInfo_ClrObjRam
000EA8B8                            				
000EA8B8 23FC 7400 0002 00C0 0004   ROMInfoScreen_Art:		move.l	#$74000002,($C00004).l		;Localizacion en VRAM a usar
000EA8C2 45F9 0003 1F40             				lea	(Art_ASCII),a2			;Poner arte en memoria xd
000EA8C8 303C 005A                  				move.w	#$5A,d0				;Cantidad de bytes (hex) / $20
000EA8CC 4EB8 1C28                  				jsr	LoadUncArt			;Cargar el arte a VRAM
000EA8D0 23FC 54C0 0000 00C0 0004   				move.l	#$54C00000,($C00004).l
000EA8DA 41F9 0002 35D0             				lea	(Nem_XulSpr).l,a0
000EA8E0 4EB8 1C44                  				jsr	NemDec
000EA8E4                            				
000EA8E4                            ROMInfoScreen_Mappings:
000EA8E4 2A3C 4000 0003             				move.l	#$40000003,d5
000EA8EA 0C38 0030 FF94             				cmpi.b	#$30,($FFFFFF94).w
000EA8F0 6700                       				beq.s	Message_PALREG
000EA8F2 0C38 0034 FF94             				cmpi.b	#$34,($FFFFFF94).w
000EA8F8 6700                       				beq.s	Message_Warning
000EA8FA 0C38 0038 FF94             				cmpi.b	#$38,($FFFFFF94).w
000EA900 6700                       				beq.s	Message_Lang
000EA902 0C38 0040 FF94             				cmpi.b	#$40,($FFFFFF94).w
000EA908 6700                       				beq.s	Message_Saav
000EA90A 43F9 0000 0000             				lea	(ROMInfo_ASCII),a1
000EA910 4EF9 0000 0000             				jmp	ROMInfoScreen_Mappings_Cont
000EA916                            Message_Saav:
000EA916 43F9 0000 0000             				lea	(PICO_ASCII),a1
000EA91C 4EF9 0000 0000             				jmp	ROMInfoScreen_Mappings_Cont2
000EA922                            Message_PALREG:
000EA922 43F9 0000 0000             				lea	(PALREG_ASCII),a1
000EA928 4EF9 0000 0000             				jmp	ROMInfoScreen_Mappings_Cont
000EA92E                            Message_Lang:
000EA92E 43F9 0000 0000             				lea	(Lang_ASCII),a1
000EA934 4EF9 0000 0000             				jmp	ROMInfoScreen_Mappings_Cont
000EA93A                            Message_Warning:
000EA93A 43F9 0000 0000             				lea	(Warning_ASCII),a1
000EA940                            				
000EA940                            ROMInfoScreen_Mappings_Cont:
000EA940 363C 6580                  				move.w	#$6580,d3
000EA944 4EB8 1964                  				jsr	LoadASCII
000EA948 4EF9 0000 0000             				jmp	ROMInfoScreen_ShowOnVDP
000EA94E                            				
000EA94E                            ROMInfoScreen_Mappings_Cont2:
000EA94E 363C 2580                  				move.w	#$2580,d3
000EA952 4EB8 1964                  				jsr	LoadASCII
000EA956                            
000EA956                            ROMInfoScreen_ShowOnVDP:	
000EA956 31FC FFF6 F632             				move.w	#-$A,($FFFFF632).w
000EA95C 3038 F60C                  				move.w	($FFFFF60C).w,d0
000EA960 0000 0040                  				ori.b	#$40,d0
000EA964 33C0 00C0 0004             				move.w	d0,($C00004).l
000EA96A 31FC 0000 B080             				move.w	#0,($FFFFFB000+$80).w
000EA970                            ROMInfoScreen_Palette:
000EA970 43F8 FB80                  				lea	($FFFFFB80).w,a1
000EA974 7000                       				moveq	#0,d0
000EA976 323C 001F                  				move.w	#$1F,d1
000EA97A                            
000EA97A                            ROMInfo_ClrPallet:
000EA97A 22C0                       				move.l	d0,(a1)+
000EA97C 51C9 FFFC                  				dbf	d1,ROMInfo_ClrPallet ; fill pallet with 0	(black)
000EA980 0C38 0040 FF94             				cmpi.b	#$40,($FFFFFF94).w
000EA986 6700                       				beq.s	ROMInfo_Pal2
000EA988 7016                       				moveq	#$16,d0
000EA98A 4EB8 29FC                  				jsr	PalLoad2
000EA98E 7016                       				moveq	#$16,d0
000EA990 4EB8 29E0                  				jsr	PalLoad1
000EA994 4EB8 2694                  				jsr	Pal_FadeTo
000EA998 7016                       				moveq	#$16,d0
000EA99A 4EB8 29E0                  				jsr	PalLoad1
000EA99E 7016                       				moveq	#$16,d0
000EA9A0 4EB8 29FC                  				jsr	PalLoad2
000EA9A4 4EF9 0000 0000             				jmp	ROMInfoScreen_LoadObj
000EA9AA                            
000EA9AA                            ROMInfo_Pal2:
000EA9AA 701A                       				moveq	#$1A,d0
000EA9AC 4EB8 29FC                  				jsr	PalLoad2
000EA9B0 7003                       				moveq	#3,d0
000EA9B2 4EB8 29FC                  				jsr	PalLoad2
000EA9B6 701A                       				moveq	#$1A,d0
000EA9B8 4EB8 29E0                  				jsr	PalLoad1
000EA9BC 7003                       				moveq	#3,d0
000EA9BE 4EB8 29E0                  				jsr	PalLoad1
000EA9C2 4EB8 2694                  				jsr	Pal_FadeTo
000EA9C6 7003                       				moveq	#3,d0
000EA9C8 4EB8 29E0                  				jsr	PalLoad1
000EA9CC 701A                       				moveq	#$1A,d0
000EA9CE 4EB8 29E0                  				jsr	PalLoad1
000EA9D2 7003                       				moveq	#3,d0
000EA9D4 4EB8 29FC                  				jsr	PalLoad2
000EA9D8 701A                       				moveq	#$1A,d0
000EA9DA 4EB8 29FC                  				jsr	PalLoad2
000EA9DE                            		
000EA9DE                            ROMInfoScreen_LoadObj:
000EA9DE 0C38 0040 FF94             				cmpi.b	#$40,($FFFFFF94).w
000EA9E4 6600                       				bne.s	ROMInfoScreen_Loop
000EA9E6 11FC 0010 D080             				move.b	#$10,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000EA9EC 4EB9 0001 0202             				jsr	ObjectsLoad
000EA9F2 4EB9 0001 055C             				jsr	BuildSprites
000EA9F8                            ; ---------------------------------------------------------------------------------------------------------------------
000EA9F8 11FC 0002 F62A             ROMInfoScreen_Loop:		move.b	#2,($FFFFF62A).w		; Function 2 in vInt
000EA9FE 4EB8 3766                  				jsr	DelayProgram			; Run delay program
000EAA02 0C38 0030 FF94             				cmpi.b	#$30,($FFFFFF94).w
000EAA08 67EE                       				beq.s	ROMInfoScreen_Loop
000EAA0A 0C38 0040 FF94             				cmpi.b	#$40,($FFFFFF94).w
000EAA10 6600                       				bne.s	ROMINfoScreen_Loop_NoObj
000EAA12 4EB9 0001 0202             				jsr	ObjectsLoad
000EAA18 4EB9 0001 055C             				jsr	BuildSprites
000EAA1E                            ROMInfoScreen_Loop_NoObj:
000EAA1E 0238 0080 F605             				andi.b	#$80,($FFFFF605).w		; is Start button pressed?
000EAA24 67D2                       				beq.s	ROMInfoScreen_Loop		; if not, loop
000EAA26                            
000EAA26                            ROMInfoScreen_Next:
000EAA26 4278 F600                  				clr.w	($FFFFF600).w
000EAA2A 0C38 0038 FF94             				cmpi.b	#$38,($FFFFFF94).w
000EAA30 6700                       				beq.s	Go_Warn
000EAA32 0C38 0028 FF94             				cmpi.b	#$28,($FFFFFF94).w
000EAA38 6700                       				beq.s	Go_Lang
000EAA3A 11FC 0004 FF94             				move.b	#4,($FFFFFF94).w ; go to next screen
000EAA40 4E75                       				rts	
000EAA42                            Go_Warn:
000EAA42 11FC 0034 FF94             				move.b	#$34,($FFFFFF94).w
000EAA48 4E75                       				rts				
000EAA4A                            Go_lang:
000EAA4A 11FC 0038 FF94             				move.b	#$38,($FFFFFF94).w
000EAA50 4E75                       				rts	
000EAA50 4E75                       				rts	
000EAA52                            	include	'_inc\ASCII texts.asm'
000EAA52                            LevSel_ASCII:
000EAA52 FF                         		dc.b $FF
000EAA53 FF                         		dc.b $FF
000EAA54 FF                         		dc.b $FF
000EAA55 FF                         		dc.b $FF
000EAA56 FF                         		dc.b $FF
000EAA57 5A4F 4E45 2049 4420 2020+  		dc.b "ZONE ID                           ACT ID",$FF
000EAA80 FF                         		dc.b $FF
000EAA81 2020 2030 3020 2020 2020+  		dc.b "   00                               00",$FF
000EAAA8 2020 2030 3120 2020 2020+  		dc.b "   01                               01",$FF
000EAACF 2020 2030 3220 2020 2020+  		dc.b "   02                               02",$FF
000EAAF6 2020 2030 3320 2020 2020+  		dc.b "   03                               03",$FF
000EAB1D 2020 2030 34FF             		dc.b "   04",$FF
000EAB23 2020 2030 35FF             		dc.b "   05",$FF
000EAB29 2020 2030 36FF             		dc.b "   06",$FF
000EAB2F 2020 2030 37FF             		dc.b "   07",$FF
000EAB35 2020 2030 38FF             		dc.b "   08",$FF
000EAB3B 2020 2030 39FF             		dc.b "   09",$FF
000EAB41 2020 2030 41FF             		dc.b "   0A",$FF
000EAB47 2020 2030 42FF             		dc.b "   0B",$FF
000EAB4D 2020 2030 43FF             		dc.b "   0C",$FF
000EAB53 2020 2030 44FF             		dc.b "   0D",$FF
000EAB59 2020 2030 45FF             		dc.b "   0E",$FF
000EAB5F 2020 2030 46FF             		dc.b "   0F",$FF
000EAB65 2020 2047 414D 4520 4D4F+  		dc.b "   GAME MODES",$FF
000EAB73 FF                         		dc.b $FF
000EAB74 2020 204C 4556 454C 2052+  		dc.b "   LEVEL RAM = $FFFE10 = $XXXX",$FF
000EAB93 FF                         		dc.b $FF
000EAB94 FF                         		dc.b $FF
000EAB95 4D41 524B 4559 4A45 5354+  		dc.b "MARKEYJESTER SUCKS  ",$FF
000EABAA 2D20 4F52 444F 5341 4C50+  		dc.b "- ORDOSALPHA TOO",$FF
000EABBB 2D20 414E 4420 414C 4C20+  		dc.b "- AND ALL THE FUCKIN' SPITEFUL PEOPLE",$FF
000EABE1 2D20 5355 434B 2044 4943+  		dc.b "- SUCK DICK, MOTHERFUCKERS!",$FF
000EABFD                            
000EABFD 00                         		dc.b 0
000EABFE                            		even
000EABFE                            
000EABFE                            
000EABFE                            TitleSCR_ASCII:
000EABFE 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EAC27 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EAC50 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EAC79 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EACA2 FF                         		dc.b $FF
000EACA3 FF                         		dc.b $FF
000EACA4 FF                         		dc.b $FF
000EACA5 FF                         		dc.b $FF
000EACA6 FF                         		dc.b $FF
000EACA7 FF                         		dc.b $FF
000EACA8 FF                         		dc.b $FF
000EACA9 FF                         		dc.b $FF
000EACAA FF                         		dc.b $FF
000EACAB FF                         		dc.b $FF
000EACAC FF                         		dc.b $FF
000EACAD FF                         		dc.b $FF
000EACAE 2020 2020 2020 2020 2020+  		dc.b "           *** DEBUG MODE ***           ",$FF
000EACD7 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EAD00 2020 2020 2020 2020 2020+  		dc.b "           A: LEVEL SELECT              ",$FF
000EAD29 2020 2020 2020 2020 2020+  		dc.b "           B: SOUND TEST                ",$FF
000EAD52 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EAD7B 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EADA4 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EADCD 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EADF6 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EAE1F 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EAE48 2020 2020 2020 2020 2020+  		dc.b "            Romhack by Trox             ",$FF
000EAE71                            
000EAE71 00                         		dc.b 0
000EAE72                            		even
000EAE72                            SELCHAR_ASCII:
000EAE72 FF                         		dc.b $FF
000EAE73 2020 534F 4E49 43FF        		dc.b "  SONIC",$FF
000EAE7B 2020 5749 4E44 59FF        		dc.b "  WINDY",$FF
000EAE83 FF                         		dc.b $FF
000EAE84 FF                         		dc.b $FF
000EAE85 FF                         		dc.b $FF
000EAE86 FF                         		dc.b $FF
000EAE87 FF                         		dc.b $FF
000EAE88 2043 4841 5241 4354 4552+  		dc.b " CHARACTER SELECT",$FF
000EAE9A FF                         		dc.b $FF
000EAE9B FF                         		dc.b $FF
000EAE9C FF                         		dc.b $FF
000EAE9D FF                         		dc.b $FF
000EAE9E FF                         		dc.b $FF
000EAE9F FF                         		dc.b $FF
000EAEA0 FF                         		dc.b $FF
000EAEA1 FF                         		dc.b $FF
000EAEA2 FF                         		dc.b $FF
000EAEA3 FF                         		dc.b $FF
000EAEA4 FF                         		dc.b $FF
000EAEA5 FF                         		dc.b $FF
000EAEA6 FF                         		dc.b $FF
000EAEA7 FF                         		dc.b $FF
000EAEA8 FF                         		dc.b $FF
000EAEA9 FF                         		dc.b $FF
000EAEAA 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EAED3 FF                         		dc.b $FF
000EAED4                            
000EAED4 00                         		dc.b 0
000EAED6 00                         		even
000EAED6                            ROMInfo_ASCII:
000EAED6 FF                         		dc.b $FF
000EAED7 2020 2020 2020 2D20 2D20+  		dc.b "      - - - SONIC ALPHAOMEGA - - -",$FF
000EAEFA FF                         		dc.b $FF
000EAEFB FF                         		dc.b $FF
000EAEFC 4C6F 6361 6C20 5469 746C+  		dc.b "Local Title: SONIC ALPHAOMEGA           ",$FF
000EAF25 FF                         		dc.b $FF
000EAF26 496E 7465 726E 6174 2E20+  		dc.b "Internat. Title: SONIC ALPHAOMEGA           ",$FF
000EAF53 FF                         		dc.b $FF
000EAF54 524F 4D20 5369 7A65 3A20+  		dc.b "ROM Size: $FFFFF",$FF
000EAF65 FF                         		dc.b $FF
000EAF66 5265 6769 6F6E 3A20 4A55+  		dc.b "Region: JU",$FF
000EAF71 FF                         		dc.b $FF
000EAF72 2D2D 2D2D 2D2D 2D2D 2D2D+  		dc.b "-------------",$FF
000EAF80 FF                         		dc.b $FF
000EAF81 4275 696C 6420 6461 7465+  		dc.b "Build date: \#_day-\#_month-2011 \#_hours:\#_minutes:\#_seconds",$FF
000EAFA0 FF                         		dc.b $FF
000EAFA1 524F 4D20 4E75 6D62 6572+  		dc.b "ROM Number: 58th ROM",$FF
000EAFB6 FF                         		dc.b $FF
000EAFB7 5665 7273 696F 6E3A 2031+  		dc.b "Version: 1.0. Private release",$FF
000EAFD5 2020 2020 2020 2020 2020+  		dc.b "                  ",$FF
000EAFE8 2020 2020 2020 2020 2020+  		dc.b "                 ",$FF
000EAFFA FF                         		dc.b $FF
000EAFFB FF                         		dc.b $FF
000EAFFC FF                         		dc.b $FF
000EAFFD FF                         		dc.b $FF
000EAFFE 2020 2020 2020 2020 2020+  		dc.b "                                       ",$FF
000EB026 2020 2020 2020 2020 2020+  		dc.b "                     Romhack by HCKTROX",$FF
000EB04E                            
000EB04E 00                         		dc.b 0
000EB050 00                         		even
000EB050                            SoundTest_ASCII:
000EB050 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB079 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB0A2 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB0CB 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB0F4 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB11D 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB146 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB16F 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB198 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB1C1 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB1EA 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB213 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB23C 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB265 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB28E 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB2B7 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB2E0 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB309 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB332 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB35B 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB384 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB3AD 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB3D6 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB3FF 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB428 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB451 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB47A 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB4A3 4646 4646 4646 4646 4646+  		dc.b "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",$FF
000EB4CC                            
000EB4CC 00                         		dc.b 0
000EB4CE 00                         		even
000EB4CE                            PALREG_ASCII:
000EB4CE FF                         		dc.b $FF
000EB4CF 2020 2020 2020 2D20 2D20+  		dc.b "      - - - SONIC ALPHAOMEGA - - -",$FF
000EB4F2 FF                         		dc.b $FF
000EB4F3 FF                         		dc.b $FF
000EB4F4 FF                         		dc.b $FF
000EB4F5 FF                         		dc.b $FF
000EB4F6 FF                         		dc.b $FF
000EB4F7 FF                         		dc.b $FF
000EB4F8 FF                         		dc.b $FF
000EB4F9 FF                         		dc.b $FF
000EB4FA FF                         		dc.b $FF
000EB4FB FF                         		dc.b $FF
000EB4FC 2020 2020 2020 5041 4C20+  		dc.b "      PAL REGIONS ARE NOT ALLOWED",$FF
000EB51E FF                         		dc.b $FF
000EB51F FF                         		dc.b $FF
000EB520 FF                         		dc.b $FF
000EB521 FF                         		dc.b $FF
000EB522 FF                         		dc.b $FF
000EB523 FF                         		dc.b $FF
000EB524 2020 2020 2020 2020 2020+  		dc.b "                  ",$FF
000EB537 2020 2020 2020 2020 2020+  		dc.b "                 ",$FF
000EB549 FF                         		dc.b $FF
000EB54A FF                         		dc.b $FF
000EB54B FF                         		dc.b $FF
000EB54C FF                         		dc.b $FF
000EB54D 2020 2020 2020 2020 2020+  		dc.b "                                       ",$FF
000EB575 FF                         		dc.b $FF
000EB576                            
000EB576 00                         		dc.b 0
000EB578 00                         		even
000EB578                            Warning_ASCII_Spa:
000EB578 FF                         		dc.b $FF
000EB579 2020 2020 2020 2D20 2D20+  		dc.b "      - - - SONIC ALPHAOMEGA - - -",$FF
000EB59C FF                         		dc.b $FF
000EB59D FF                         		dc.b $FF
000EB59E 6941 6476 6572 7465 6E63+  		dc.b "iAdvertencia!",$FF
000EB5AC FF                         		dc.b $FF
000EB5AD 4573 7465 206A 7565 676F+  		dc.b "Este juego no es oficial. Esto significa",$FF
000EB5D6 7175 6520 6573 7465 206A+  		dc.b "que este juego no ha sido creado por o",$FF
000EB5FD 6261 6A6F 2053 4547 4120+  		dc.b "bajo SEGA Enterprises.",$FF
000EB614 FF                         		dc.b $FF
000EB615 4573 7465 206A 7565 676F+  		dc.b "Este juego esta basado en codigo y datos",$FF
000EB63E 6465 6C20 6A75 6567 6F20+  		dc.b "del juego original Sonic The Hedgehog,",$FF
000EB665 6372 6561 646F 2070 6F72+  		dc.b "creado por Sonic Team.",$FF
000EB67C FF                         		dc.b $FF
000EB67D FF                         		dc.b $FF
000EB67E 5345 4741 2073 6520 7265+  		dc.b "SEGA se reserva todos los derechos de",$FF
000EB6A4 656C 2063 6F64 6967 6F2C+  		dc.b "el codigo, datos y otros originales,",$FF
000EB6C9 6D69 656E 7472 6173 2071+  		dc.b "mientras que todo este contenido nuevo",$FF
000EB6F0 6861 2073 6964 6F20 6372+  		dc.b "ha sido creado por nosotros.",$FF
000EB70D FF                         		dc.b $FF
000EB70E FF                         		dc.b $FF
000EB70F FF                         		dc.b $FF
000EB710 FF                         		dc.b $FF
000EB711 FF                         		dc.b $FF
000EB712 FF                         		dc.b $FF
000EB713 FF                         		dc.b $FF
000EB714 FF                         		dc.b $FF
000EB715 2020 2020 202D 202D 202D+  		dc.b "     - - - PRESS START BUTTON - - -     ",$FF
000EB73E                            
000EB73E 00                         		dc.b 0
000EB740 00                         		even
000EB740                            
000EB740                            Warning_ASCII:
000EB740 FF                         		dc.b $FF
000EB741 2020 2020 2020 2020 2D20+  		dc.b "        - - - SONIC VS MARIO - - -",$FF
000EB764 FF                         		dc.b $FF
000EB765 FF                         		dc.b $FF
000EB766 4F76 6572 776F 726C 64FF   		dc.b "Overworld",$FF
000EB770 FF                         		dc.b $FF
000EB771 5765 2772 6520 736F 7272+  		dc.b "We're sorry, but the content that",$FF
000EB793 796F 7520 7761 6E74 2074+  		dc.b "you want to acceed was already taken",$FF
000EB7B8 6279 206F 7468 6572 2068+  		dc.b "by other hack.",$FF
000EB7C7 FF                         		dc.b $FF
000EB7C8 536F 7272 7920 7468 6520+  		dc.b "Sorry the inconvenience.",$FF
000EB7E1 FF                         		dc.b $FF
000EB7E2 FF                         		dc.b $FF
000EB7E3 FF                         		dc.b $FF
000EB7E4 FF                         		dc.b $FF
000EB7E5 FF                         		dc.b $FF
000EB7E6 FF                         		dc.b $FF
000EB7E7 FF                         		dc.b $FF
000EB7E8 2020 2020 202D 202D 202D+  		dc.b "     - - - PRESS START BUTTON - - -     ",$FF
000EB811                            
000EB811 00                         		dc.b 0
000EB812                            		even
000EB812                            
000EB812                            Warning_ASCII_Prev:
000EB812 FF                         		dc.b $FF
000EB813 2020 2020 2020 2D20 2D20+  		dc.b "      - - - SONIC ALPHAOMEGA - - -",$FF
000EB836 FF                         		dc.b $FF
000EB837 FF                         		dc.b $FF
000EB838 5761 726E 696E 6721 FF     		dc.b "Warning!",$FF
000EB841 FF                         		dc.b $FF
000EB842 5468 6973 2067 616D 6520+  		dc.b "This game is unofficial. This means,",$FF
000EB867 7468 6973 2067 616D 6520+  		dc.b "this game is not created by or under",$FF
000EB88C 5345 4741 2045 6E74 6572+  		dc.b "SEGA Enterprises.",$FF
000EB89E FF                         		dc.b $FF
000EB89F 5468 6973 2067 616D 6520+  		dc.b "This game is based on heavily modified",$FF
000EB8C6 636F 6465 2061 6E64 2064+  		dc.b "code and data from the original game",$FF
000EB8EB 536F 6E69 6320 5468 6520+  		dc.b "Sonic The Hedgehog, created by",$FF
000EB90A 536F 6E69 6320 5465 616D+  		dc.b "Sonic Team.",$FF
000EB916 FF                         		dc.b $FF
000EB917 5345 4741 2052 6574 6169+  		dc.b "SEGA Retains rights to the original",$FF
000EB93B 636F 6465 2C20 6461 7461+  		dc.b "code, data, and others, while all the",$FF
000EB961 6E65 7720 636F 6E74 656E+  		dc.b "new content on this game is created by",$FF
000EB988 7573 2EFF                  		dc.b "us.",$FF
000EB98C FF                         		dc.b $FF
000EB98D FF                         		dc.b $FF
000EB98E FF                         		dc.b $FF
000EB98F FF                         		dc.b $FF
000EB990 FF                         		dc.b $FF
000EB991 FF                         		dc.b $FF
000EB992 FF                         		dc.b $FF
000EB993 2020 2020 202D 202D 202D+  		dc.b "     - - - PRESS START BUTTON - - -     ",$FF
000EB9BC                            
000EB9BC 00                         		dc.b 0
000EB9BE 00                         		even
000EB9BE                            
000EB9BE                            Lang_ASCII:
000EB9BE FF                         		dc.b $FF
000EB9BF 2020 2020 2020 2D20 2D20+  		dc.b "      - - - SONIC ALPHAOMEGA - - -",$FF
000EB9E2 FF                         		dc.b $FF
000EB9E3 FF                         		dc.b $FF
000EB9E4 2020 2020 5345 4C45 4354+  		dc.b "    SELECT LANG / SELECCIONA IDIOMA",$FF
000EBA08 FF                         		dc.b $FF
000EBA09 FF                         		dc.b $FF
000EBA0A FF                         		dc.b $FF
000EBA0B FF                         		dc.b $FF
000EBA0C FF                         		dc.b $FF
000EBA0D FF                         		dc.b $FF
000EBA0E FF                         		dc.b $FF
000EBA0F FF                         		dc.b $FF
000EBA10 2020 2020 2020 203D 3D3D+  		dc.b "       =========       =========",$FF
000EBA31 2020 2020 2020 203D 4553+  		dc.b "       =ESPANOL=       =ENGLISH=",$FF
000EBA52 2020 2020 2020 203D 3D3D+  		dc.b "       =========       =========",$FF
000EBA73 FF                         		dc.b $FF
000EBA74 FF                         		dc.b $FF
000EBA75 FF                         		dc.b $FF
000EBA76 FF                         		dc.b $FF
000EBA77 FF                         		dc.b $FF
000EBA78 FF                         		dc.b $FF
000EBA79 FF                         		dc.b $FF
000EBA7A FF                         		dc.b $FF
000EBA7B FF                         		dc.b $FF
000EBA7C FF                         		dc.b $FF
000EBA7D FF                         		dc.b $FF
000EBA7E                            
000EBA7E 00                         		dc.b 0
000EBA80 00                         		even
000EBA80                            Xulpico_ASCII:
000EBA80 FF                         		dc.b $FF
000EBA81 2020 2020 2020 2020 2020+  		dc.b "               HELLO WORLD",$FF
000EBA9C 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBAC5 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBAEE 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBB17 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBB40 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBB69 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBB92 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBBBB 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBBE4 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBC0D 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBC36 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBC5F 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBC88 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBCB1 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBCDA 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBD03 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBD2C 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBD55 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBD7E 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBDA7 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBDD0 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBDF9 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBE22 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBE4B 2020 2020 2020 2020 2020+  		dc.b "                                        ",$FF
000EBE74                            
000EBE74 00                         		dc.b 0
000EBE76 00                         		even
000EBE76                            pico_ASCII:
000EBE76 FF                         		dc.b $FF
000EBE77 FF                         		dc.b $FF
000EBE78 FF                         		dc.b $FF
000EBE79 FF                         		dc.b $FF
000EBE7A FF                         		dc.b $FF
000EBE7B FF                         		dc.b $FF
000EBE7C FF                         		dc.b $FF
000EBE7D FF                         		dc.b $FF
000EBE7E FF                         		dc.b $FF
000EBE7F FF                         		dc.b $FF
000EBE80 FF                         		dc.b $FF
000EBE81 FF                         		dc.b $FF
000EBE82 FF                         		dc.b $FF
000EBE83 FF                         		dc.b $FF
000EBE84 FF                         		dc.b $FF
000EBE85 FF                         		dc.b $FF
000EBE86 FF                         		dc.b $FF
000EBE87 2053 4141 5645 4452 4120+  		dc.b " SAAVEDRA GAY REQL Y LA CONCHETUMARE!!!",$FF
000EBEAF FF                         		dc.b $FF
000EBEB0 2020 2020 2020 2020 2020+  		dc.b "                 CHUPALO",$FF
000EBEC9 FF                         		dc.b $FF
000EBECA FF                         		dc.b $FF
000EBECB FF                         		dc.b $FF
000EBECC FF                         		dc.b $FF
000EBECD FF                         		dc.b $FF
000EBECE FF                         		dc.b $FF
000EBECF FF                         		dc.b $FF
000EBED0                            
000EBED0 00                         		dc.b 0
000EBED2 00                         		even
000EBED2                            Checksum_ASCII:
000EBED2 5772 6F6E 6720 4368 6563+  		dc.b "Wrong Checksum!",$FF
000EBEE2                            
000EBEE2 00                         		dc.b 0
000EBEE4 00                         		even
000EBEE4                            LS_ASCII:
000EBEE4 FF                         		dc.b $FF
000EBEE5 FF                         		dc.b $FF
000EBEE6 FF                         		dc.b $FF
000EBEE7 FF                         		dc.b $FF
000EBEE8 FF                         		dc.b $FF
000EBEE9 FF                         		dc.b $FF
000EBEEA FF                         		dc.b $FF
000EBEEB FF                         		dc.b $FF
000EBEEC FF                         		dc.b $FF
000EBEED FF                         		dc.b $FF
000EBEEE FF                         		dc.b $FF
000EBEEF FF                         		dc.b $FF
000EBEF0 FF                         		dc.b $FF
000EBEF1 FF                         		dc.b $FF
000EBEF2 FF                         		dc.b $FF
000EBEF3 FF                         		dc.b $FF
000EBEF4 FF                         		dc.b $FF
000EBEF5 FF                         		dc.b $FF
000EBEF6 FF                         		dc.b $FF
000EBEF7 FF                         		dc.b $FF
000EBEF8 FF                         		dc.b $FF
000EBEF9 FF                         		dc.b $FF
000EBEFA FF                         		dc.b $FF
000EBEFB FF                         		dc.b $FF
000EBEFC FF                         		dc.b $FF
000EBEFD FF                         		dc.b $FF
000EBEFE 2020 2020 2020 2D20 2D20+  		dc.b "      - - - SONIC ALPHAOMEGA - - -",$FF
000EBF21                            
000EBF21 00                         		dc.b 0
000EBF22                            		even
000EBF22                            		even
000EBF22                            	include	'_inc\Cheat_Image1.asm'
000EBF22 =0000008C                  Cheat1Screen_MusicID		EQU	$8C				; Music to play
000EBF22 =00000004                  Cheat1Screen_NxtScr		EQU	$04				; Screen mode to go to next (Title Screen)
000EBF22 =000000FF                  Cheat1Screen_Wait		EQU	$FF				; Time to wait
000EBF22                            
000EBF22                            ; ---------------------------------------------------------------------------------------------------------------------
000EBF22 103C 00E4                  Cheat1Screen:			move.b	#$E4,d0
000EBF26 4EB8 1A0C                  				jsr	Playsound_special               ; Stop music
000EBF2A 4EB8 1E00                  				jsr	ClearPLC			; Clear PLCs
000EBF2E 4EB8 2738                  				jsr	Pal_FadeFrom			; Fade out previous palette
000EBF32 46FC 2700                  				move	#$2700,sr
000EBF36 4EB8 189E                  				jsr	SoundDriverLoad
000EBF3A                            
000EBF3A 4DF9 00C0 0004             Cheat1Screen_VDP:		lea	($C00004).l,a6			; Setup VDP
000EBF40 3CBC 8004                  				move.w	#$8004,(a6)
000EBF44 3CBC 8230                  				move.w	#$8230,(a6)
000EBF48 3CBC 8407                  				move.w	#$8407,(a6)
000EBF4C 3CBC 9001                  				move.w	#$9001,(a6)
000EBF50 3CBC 9200                  				move.w	#$9200,(a6)
000EBF54 3CBC 8B03                  				move.w	#$8B03,(a6)
000EBF58 3CBC 8720                  				move.w	#$8720,(a6)
000EBF5C 4238 F64E                  				clr.b	($FFFFF64E).w
000EBF60 4EB8 1810                  				jsr	ClearScreen			; Clear screen
000EBF64                            				
000EBF64 23FC 4000 0000 00C0 0004   Cheat1Screen_Art:		move.l	#$40000000,($C00004).l		; Load art
000EBF6E 41F9 0000 0000             				lea	(Art_Cheat1Screen).l,a0
000EBF74 4EB8 1C44                  				jsr	NemDec
000EBF78                            				
000EBF78 43F9 00FF 0000             Cheat1Screen_Mappings:		lea	($FF0000).l,a1			; Load screen mappings
000EBF7E 41F9 0000 0000             				lea	(Map_Cheat1Screen).l,a0
000EBF84 303C 0000                  				move.w	#0,d0
000EBF88 4EB8 1F40                  				jsr	EniDec
000EBF8C                            				
000EBF8C 43F9 00FF 0000             Cheat1Screen_ShowOnVDP:		lea	($FF0000).l,a1			; Show screen
000EBF92 203C 4000 0003             				move.l	#$40000003,d0
000EBF98 7227                       				moveq	#$27,d1
000EBF9A 741B                       				moveq	#$1B,d2
000EBF9C 4EB8 1B78                  				jsr	ShowVDPGraphics				
000EBFA0                            				
000EBFA0 43F9 0000 0000             Cheat1Screen_Palette:		lea	(Pal_Cheat1Screen).l,a1		; Load palette
000EBFA6 45F8 FB80                  				lea	($FFFFFB80).w,a2
000EBFAA 103C 0040                  				move.b	#$40,d0
000EBFAE 24D9                       Cheat1Screen_PalLoop:		move.l	(a1)+,(a2)+
000EBFB0 4A40                       				tst.w	d0
000EBFB2 6700                       				beq.s	Cheat1Screen_Music
000EBFB4 5340                       				sub.w	#1,d0
000EBFB6 60F6                       				bra.s	Cheat1Screen_PalLoop
000EBFB8                            				
000EBFB8 303C 008C                  Cheat1Screen_Music:		move.w	#Cheat1Screen_MusicID,d0		; Play music
000EBFBC 4EB8 19E4                  				jsr	PlaySound
000EBFC0                            				
000EBFC0 31FC 00FF F614             Cheat1Screen_SetWait:		move.w	#Cheat1Screen_Wait,($FFFFF614).w	; Wait time
000EBFC6 4EB8 2694                  				jsr	Pal_FadeTo			; Fade palette in
000EBFCA                            
000EBFCA                            ; ---------------------------------------------------------------------------------------------------------------------
000EBFCA 11FC 0002 F62A             Cheat1Screen_Loop:		move.b	#2,($FFFFF62A).w		; Function 2 in vInt
000EBFD0 4EB8 3766                  				jsr	DelayProgram			; Run delay program
000EBFD4                            ;				tst.w	($FFFFF614).w			; Test wait time
000EBFD4                            ;				beq.s	Cheat1Screen_Next			; is it over? branch
000EBFD4 0238 0080 F605             				andi.b	#$80,($FFFFF605).w		; is Start button pressed?
000EBFDA 67EE                       				beq.s	Cheat1Screen_Loop			; if not, loop
000EBFDC                            
000EBFDC                            Cheat1Screen_Next:
000EBFDC 4278 F600                  				clr.w	($FFFFF600).w
000EBFE0 11FC 0004 FF94             				move.b	#Cheat1Screen_NxtScr,($FFFFFF94).w ; go to next screen
000EBFE6 4E75                       				rts	
000EBFE8                            				
000EBFE8                            ; ---------------------------------------------------------------------------------------------------------------------
000EBFE8                            Art_Cheat1Screen:			incbin	"Cheat1/Tiles.bin"
000EC91C 00                         				even
000EC91C                            Map_Cheat1Screen:			incbin	"Cheat1/Maps.bin"
000ECA28                            				even
000ECA28                            Pal_Cheat1Screen:			incbin	"Cheat1/Palette.bin"
000ECA48                            				even
000ECA48                            				even
000ECA48                            	include '_inc\SoundTest.asm'
000ECA48                            SoundTest:
000ECA48 103C 00E4                  				move.b	#$E4,d0
000ECA4C 4EB8 1A0C                  				jsr	Playsound_special               ; Stop music
000ECA50 4EB8 1E00                  				jsr	ClearPLC			; Clear PLCs
000ECA54 46FC 2700                  				move	#$2700,sr
000ECA58 11FC 0001 FFBA             				move.b	#1,($FFFFFFBA).w
000ECA5E                            
000ECA5E 4DF9 00C0 0004             SoundTestScreen_VDP:		lea	($C00004).l,a6			; Setup VDP
000ECA64 3CBC 8004                  				move.w	#$8004,(a6)
000ECA68 3CBC 8230                  				move.w	#$8230,(a6)
000ECA6C 3CBC 8407                  				move.w	#$8407,(a6)
000ECA70 3CBC 9001                  				move.w	#$9001,(a6)
000ECA74 3CBC 9200                  				move.w	#$9200,(a6)
000ECA78 3CBC 8B03                  				move.w	#$8B03,(a6)
000ECA7C 3CBC 8720                  				move.w	#$8720,(a6)
000ECA80 4238 F64E                  				clr.b	($FFFFF64E).w
000ECA84 4EB8 1810                  				jsr	ClearScreen			; Clear screen
000ECA88 43F8 D000                  				lea	($FFFFD000).w,a1
000ECA8C 7000                       				moveq	#0,d0
000ECA8E 323C 07FF                  				move.w	#$7FF,d1
000ECA92                            
000ECA92                            SoundTest_ClrObjRam:
000ECA92 22C0                       				move.l	d0,(a1)+
000ECA94 51C9 FFFC                  				dbf	d1,SoundTest_ClrObjRam
000ECA98                            				
000ECA98 23FC 7400 0002 00C0 0004   SoundTestScreen_Art:		move.l	#$74000002,($C00004).l
000ECAA2 45F9 0003 1F40             				lea	(Art_ASCII),a2
000ECAA8 303C 005A                  				move.w	#$5A,d0
000ECAAC 4EB8 1C28                  				jsr	LoadUncArt
000ECAB0                            SoundTestScreen_Palette:
000ECAB0 43F8 FB80                  				lea	($FFFFFB80).w,a1
000ECAB4 7000                       				moveq	#0,d0
000ECAB6 323C 001F                  				move.w	#$1F,d1
000ECABA                            
000ECABA                            SoundTest_ClrPallet:
000ECABA 22C0                       				move.l	d0,(a1)+
000ECABC 51C9 FFFC                  				dbf	d1,SoundTest_ClrPallet ; fill pallet with 0	(black)
000ECAC0 7016                       				moveq	#$16,d0
000ECAC2 4EB8 29E0                  				jsr	PalLoad1
000ECAC6 4EB8 2694                  				jsr	Pal_FadeTo
000ECACA                            	
000ECACA                            SoundTestScreen_LoadObj:
000ECACA 11FC 0010 D080             				move.b	#$10,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000ECAD0 4EB9 0001 0202             				jsr	ObjectsLoad
000ECAD6 4EB9 0001 055C             				jsr	BuildSprites
000ECADC 7019                       				moveq	#$19,d0		; load Sonic's pallet
000ECADE 4EB8 29FC                  				jsr	PalLoad2				
000ECAE2                            ; ---------------------------------------------------------------------------------------------------------------------
000ECAE2 11FC 0002 F62A             SoundTestScreen_Loop:		move.b	#2,($FFFFF62A).w		; Function 2 in vInt
000ECAE8 4EB8 3766                  				jsr	DelayProgram			; Run delay program
000ECAEC 4EB9 0001 0202             				jsr	ObjectsLoad
000ECAF2 4EB9 0001 055C             				jsr	BuildSprites
000ECAF8 0238 0080 F605             				andi.b	#$80,($FFFFF605).w		; is Start button pressed?
000ECAFE 67E2                       				beq.s	SoundTestScreen_Loop		; if not, loop
000ECB00                            SoundTestScreen_Next:
000ECB00 11FC 0000 FFBA             				move.b	#0,($FFFFFFBA).w
000ECB06 11FC 0004 FF94             				move.b	#4,($FFFFFF94).w
000ECB0C 4E75                       				rts
000ECB0E                            ; ---------------------------------------------------------------------------------------------------------------------
000ECB0E                            ; ---------------------------------------------------------------------------------------------------------------------
000ECB0E                            	include '_inc\Selchar.asm'
000ECB0E                            BasicSelChar:
000ECB0E 103C 00E4                  			move.b	#$E4,d0
000ECB12 4EB8 1A0C                  			jsr	PlaySound_Special              	; Stop music
000ECB16 4EB8 1E00                  			jsr	ClearPLC			; Clear PLCs
000ECB1A 4238 FF9C                  			clr.b	($FFFFFF9C).w
000ECB1E 4EB8 2738                  			jsr	Pal_FadeFrom			; Fade out previous palette
000ECB22 46FC 2700                  			move	#$2700,sr
000ECB26                            
000ECB26 4DF9 00C0 0004             selchar_VDP:		lea	($C00004).l,a6			; Setup VDP
000ECB2C 3CBC 8004                  			move.w	#$8004,(a6)
000ECB30 3CBC 8230                  			move.w	#$8230,(a6)
000ECB34 3CBC 8407                  			move.w	#$8407,(a6)
000ECB38 3CBC 9001                  			move.w	#$9001,(a6)
000ECB3C 3CBC 9200                  			move.w	#$9200,(a6)
000ECB40 3CBC 8B03                  			move.w	#$8B03,(a6)
000ECB44 3CBC 8720                  			move.w	#$8720,(a6)
000ECB48 4238 F64E                  			clr.b	($FFFFF64E).w
000ECB4C 4EB8 1810                  			jsr	ClearScreen			; Clear screen
000ECB50 43F8 D000                  			lea	($FFFFD000).w,a1		; Clear $FFD000-$FFD7FF
000ECB54 7000                       			moveq	#0,d0
000ECB56 323C 07FF                  			move.w	#$7FF,d1
000ECB5A                            
000ECB5A                            selchar_ClrObjRam:
000ECB5A 22C0                       			move.l	d0,(a1)+
000ECB5C 51C9 FFFC                  			dbf	d1,selchar_ClrObjRam
000ECB60                            				
000ECB60                            selchar_Art:
000ECB60 23FC 7400 0002 00C0 0004   			move.l	#$74000002,($C00004).l		;Localizacion en VRAM a usar
000ECB6A 45F9 0003 1F40             			lea	(Art_ASCII),a2			;Poner arte en memoria xd
000ECB70 303C 005A                  			move.w	#$5A,d0				;Cantidad de bytes (hex) / $20
000ECB74 4EB8 1C28                  			jsr	LoadUncArt			;Cargar el arte a VRAM				
000ECB78                            
000ECB78                            selchar_Mappings:
000ECB78 2A3C 4000 0003             			move.l	#$40000003,d5
000ECB7E 43FA E2F2                  			lea	(SELCHAR_ASCII),a1
000ECB82 363C 6580                  			move.w	#$6580,d3
000ECB86 4EB8 1964                  			jsr	LoadASCII
000ECB8A                            				
000ECB8A                            selchar_ShowOnVDP:	
000ECB8A 31FC FFF6 F632             			move.w	#-$A,($FFFFF632).w
000ECB90 3038 F60C                  			move.w	($FFFFF60C).w,d0
000ECB94 0000 0040                  			ori.b	#$40,d0
000ECB98 33C0 00C0 0004             			move.w	d0,($C00004).l
000ECB9E 31FC 0000 B080             			move.w	#0,($FFFFFB000+$80).w
000ECBA4                            				
000ECBA4                            selchar_Palette:
000ECBA4 43F8 FB80                  			lea	($FFFFFB80).w,a1
000ECBA8 7000                       			moveq	#0,d0
000ECBAA 323C 001F                  			move.w	#$1F,d1
000ECBAE                            
000ECBAE                            selchar_ClrPallet:
000ECBAE 22C0                       			move.l	d0,(a1)+
000ECBB0 51C9 FFFC                  			dbf	d1,selchar_ClrPallet ; fill pallet with 0	(black)
000ECBB4                            
000ECBB4                            selchar_LoadObj:	
000ECBB4 11FC 0010 D080             			move.b	#$10,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000ECBBA 4EB9 0001 0202             			jsr	ObjectsLoad
000ECBC0 4EB9 0001 055C             			jsr	BuildSprites
000ECBC6 7019                       			moveq	#$19,d0		; load Sonic's pallet
000ECBC8 4EB8 29FC                  			jsr	PalLoad2				
000ECBCC 7016                       			moveq	#$16,d0
000ECBCE 4EB8 29FC                  			jsr	PalLoad2
000ECBD2                            ;			jsr	Pal_FadeTo
000ECBD2                            ; ---------------------------------------------------------------------------------------------------------------------
000ECBD2 11FC 0002 F62A             selchar_Loop:		move.b	#2,($FFFFF62A).w		; Function 2 in vInt
000ECBD8 4EB8 3766                  			jsr	DelayProgram			; Run delay program
000ECBDC 4EB9 0001 0202             			jsr	ObjectsLoad
000ECBE2 4EB9 0001 055C             			jsr	BuildSprites
000ECBE8                            
000ECBE8 0838 0006 F605             			btst	#6,($FFFFF605).w 		; is button A pressed?
000ECBEE 6600                       			bne.s	Selchar_Next			; if yes, branch
000ECBF0                            
000ECBF0 0238 0080 F605             			andi.b	#$80,($FFFFF605).w		; is Start button pressed?
000ECBF6 67DA                       			beq.s	selchar_Loop			; if not, loop
000ECBF8                            ;			jmp	selchar_Loop
000ECBF8                            selchar_Next:
000ECBF8 11FC 000C FF94             			move.b	#$0C,($FFFFFF94).w ; go to next screen
000ECBFE 4E75                       			rts
000ECBFE 4E75                       			rts
000ECC00                            	include	'_inc\LevSel.asm'
000ECC00                            LevelSel:
000ECC00 103C 009A                  				move.b	#$9A,d0
000ECC04 4EB8 1A0C                  				jsr	Playsound_special               ; Stop music
000ECC08 4EB8 1E00                  				jsr	ClearPLC			; Clear PLCs
000ECC0C 46FC 2700                  				move	#$2700,sr
000ECC10 11FC 0001 FF9A             				move.b	#1,($FFFFFF9A).w
000ECC16 4238 FFAD                  				clr.b	($FFFFFFAD).w
000ECC1A 4278 FE10                  				clr.w	($FFFFFE10).w
000ECC1E                            
000ECC1E 4DF9 00C0 0004             LevSelScreen_VDP:		lea	($C00004).l,a6			; Setup VDP
000ECC24 3CBC 8004                  				move.w	#$8004,(a6)
000ECC28 3CBC 8230                  				move.w	#$8230,(a6)
000ECC2C 3CBC 8407                  				move.w	#$8407,(a6)
000ECC30 3CBC 9001                  				move.w	#$9001,(a6)
000ECC34 3CBC 9200                  				move.w	#$9200,(a6)
000ECC38 3CBC 8B03                  				move.w	#$8B03,(a6)
000ECC3C 3CBC 8720                  				move.w	#$8720,(a6)
000ECC40 4238 F64E                  				clr.b	($FFFFF64E).w
000ECC44 4EB8 1810                  				jsr	ClearScreen			; Clear screen
000ECC48 43F8 D000                  				lea	($FFFFD000).w,a1
000ECC4C 7000                       				moveq	#0,d0
000ECC4E 323C 07FF                  				move.w	#$7FF,d1
000ECC52                            
000ECC52                            LevSel_ClrObjRam:
000ECC52 22C0                       				move.l	d0,(a1)+
000ECC54 51C9 FFFC                  				dbf	d1,LevSel_ClrObjRam
000ECC58 11FC 0000 FE30             				move.b	#0,($FFFFFE30).w ; clear lamppost counter
000ECC5E                            
000ECC5E                            				
000ECC5E 23FC 7400 0002 00C0 0004   LevSelScreen_Art:		move.l	#$74000002,($C00004).l
000ECC68 45F9 0003 1F40             				lea	(Art_ASCII),a2
000ECC6E 303C 005A                  				move.w	#$5A,d0
000ECC72 4EB8 1C28                  				jsr	LoadUncArt
000ECC76 23FC 6000 0001 00C0 0004   				move.l	#$60000001,($C00004).l
000ECC80 41F9 0003 3C88             				lea	(Nem_Ls).l,a0 ;	load Sonic title screen	patterns
000ECC86 4EB8 1C44                  				jsr	NemDec
000ECC8A 103C 0001                  				move.b	#$01,d0
000ECC8E 4EB8 19E4                  				jsr	PlaySound
000ECC92                            
000ECC92                            LevSel_Mappings:
000ECC92 2A3C 4000 0003             				move.l	#$40000003,d5
000ECC98 43FA DDB8                  				lea	(LevSel_ASCII),a1
000ECC9C 363C 6580                  				move.w	#$6580,d3
000ECCA0 4EB8 1964                  				jsr	LoadASCII
000ECCA4                            				
000ECCA4                            LevSel_ShowOnVDP:	
000ECCA4 31FC FFF6 F632             				move.w	#-$A,($FFFFF632).w
000ECCAA 3038 F60C                  				move.w	($FFFFF60C).w,d0
000ECCAE 0000 0040                  				ori.b	#$40,d0
000ECCB2 33C0 00C0 0004             				move.w	d0,($C00004).l
000ECCB8 31FC 0000 B080             				move.w	#0,($FFFFFB000+$80).w
000ECCBE                            
000ECCBE                            LevSelScreen_Palette:
000ECCBE 43F8 FB80                  				lea	($FFFFFB80).w,a1
000ECCC2 7000                       				moveq	#0,d0
000ECCC4 323C 001F                  				move.w	#$1F,d1
000ECCC8                            
000ECCC8                            LevSel_ClrPallet:
000ECCC8 22C0                       				move.l	d0,(a1)+
000ECCCA 51C9 FFFC                  				dbf	d1,LevSel_ClrPallet ; fill pallet with 0	(black)
000ECCCE 11FC 0010 D080             				move.b	#$10,($FFFFD080).w ; load "LEVEL SELECT"	object
000ECCD4 11FC 000F D000             				move.b	#$0F,($FFFFD000).w ; load cursor object
000ECCDA 4EB9 0001 0202             				jsr	ObjectsLoad
000ECCE0 4EB9 0001 055C             				jsr	BuildSprites
000ECCE6 7016                       				moveq	#$16,d0
000ECCE8 4EB8 29E0                  				jsr	PalLoad1
000ECCEC 7019                       				moveq	#$19,d0		; load Sonic's pallet
000ECCEE 4EB8 29E0                  				jsr	PalLoad1
000ECCF2 4EB8 2694                  				jsr	Pal_FadeTo
000ECCF6                            ; ---------------------------------------------------------------------------------------------------------------------
000ECCF6 11FC 0002 F62A             LevSelScreen_Loop:		move.b	#2,($FFFFF62A).w		; Function 2 in vInt
000ECCFC 4EB8 3766                  				jsr	DelayProgram			; Run delay program
000ECD00 4EB9 0001 0202             				jsr	ObjectsLoad
000ECD06 4EB9 0001 055C             				jsr	BuildSprites
000ECD0C 0C38 0001 FF9B             				cmpi.b	#1,($FFFFFF9B).w
000ECD12 6700 0000                  				beq	LevSel_Enter
000ECD16 0238 0080 F605             				andi.b	#$80,($FFFFF605).w		; is Start button pressed?
000ECD1C 67D8                       				beq.s	LevSelScreen_Loop		; if not, loop
000ECD1E                            LevSelScreen_Next:
000ECD1E 0C38 0010 D010             				cmpi.b	#$10,($FFFFD010).w
000ECD24 6700 0000                  				beq	LevSelScreen_GoToX
000ECD28 11FC 0000 D000             				move.b	#$00,($FFFFD000).w
000ECD2E 4BF8 D0C0                  				lea	($FFFFD0C0).w,a5
000ECD32 1ABC 000F                  				move.b	#$0F,0(a5)
000ECD36 1B7C 0001 0028             				move.b	#1,$28(a5)
000ECD3C 4EFA FFB8                  				jmp	LevSelScreen_Loop
000ECD40 4E75                       				rts
000ECD42                            
000ECD42                            LevSelScreen_GoToX:
000ECD42 11FC 0020 FF94             				move.b	#$20,($FFFFFF94).w
000ECD48 4E75                       				rts
000ECD4A                            
000ECD4A                            LevSel_Enter:
000ECD4A 4238 FF9B                  				clr.b	($FFFFFF9B).w
000ECD4E 11FC 0000 FF9A             				move.b	#0,($FFFFFF9A).w
000ECD54 11FC 0050 FF94             				move.b	#$50,($FFFFFF94).w
000ECD5A 11FC 0003 FE12             				move.b	#3,($FFFFFE12).w ; set lives to	3
000ECD60 7000                       				moveq	#0,d0
000ECD62 31C0 FE20                  				move.w	d0,($FFFFFE20).w ; clear rings
000ECD66 21C0 FE22                  				move.l	d0,($FFFFFE22).w ; clear time
000ECD6A 21C0 FE26                  				move.l	d0,($FFFFFE26).w ; clear score
000ECD6E 11C0 FE16                  				move.b	d0,($FFFFFE16).w ; clear special stage number
000ECD72 11C0 FE57                  				move.b	d0,($FFFFFE57).w ; clear emeralds
000ECD76 21C0 FE58                  				move.l	d0,($FFFFFE58).w ; clear emeralds
000ECD7A 21C0 FE5C                  				move.l	d0,($FFFFFE5C).w ; clear emeralds
000ECD7E 11C0 FE18                  				move.b	d0,($FFFFFE18).w ; clear continues
000ECD82 103C 00E0                  				move.b	#$E0,d0
000ECD86 4EB8 1A0C                  				jsr	PlaySound_Special           		
000ECD8A 4E75                       				rts
000ECD8C                            
000ECD8C                            ; ---------------------------------------------------------------------------------------------------------------------
000ECD8C                            ; ---------------------------------------------------------------------------------------------------------------------
000ECD8C                            	include	'_inc\wtflame.asm'
000ECD8C                            Wetflame_Main:
000ECD8C 103C 00E4                  		move.b	#$E4, d0
000ECD90 4EB8 19E4                  		jsr	PlaySound	; Stop the music.
000ECD94                            		
000ECD94                            		; Clear everything. (Code provided by Sonic65.)
000ECD94                            WTF_ClearEverything:
000ECD94 4EB8 1E00                  		jsr	ClearPLC
000ECD98 4EB8 2738                  		jsr	Pal_FadeFrom
000ECD9C 4238 F64E                  		clr.b	($FFFFF64E).w
000ECDA0 46FC 2700                  		move.w	#$2700, sr		; Disable interrupts.
000ECDA4 3038 F60C                  		move.w	($FFFFF60C).w, d0
000ECDA8 3200                       		move.w	d0, d1
000ECDAA 0200 00BF                  		andi.b	#$BF, d0
000ECDAE 33C0 00C0 0004             		move.w	d0, ($C00004).l
000ECDB4 4EB8 1810                  		jsr	ClearScreen
000ECDB8                            		
000ECDB8                            		; Clear various zone data.
000ECDB8 4278 FE10                  		clr.w	($FFFFFE10).w		; Level/Act numbers.
000ECDBC                            		
000ECDBC                            ; --------------------------------------------------------------
000ECDBC                            		
000ECDBC                            		
000ECDBC                            		; More clearing.
000ECDBC 7000                       		moveq	#0, d0
000ECDBE 4BF9 00C0 0004             		lea	($C00004).l, a5		; VRAM control port.
000ECDC4 4DF9 00C0 0000             		lea	($C00000).l, a6		; VRAM data port.
000ECDCA 2ABC 4000 0000             		move.l	#$40000000, (a5)	; Clear VRAM.
000ECDD0 323C 3FFF                  		move.w	#$3FFF, d1		; $4000 DWORDs to clear.
000ECDD4                            		
000ECDD4                            WTF_ClrVRAM:
000ECDD4 2C80                       		move.l	d0, (a6)
000ECDD6 51C9 FFFC                  		dbf	d1, WTF_ClrVRAM
000ECDDA                            		
000ECDDA 43F8 CC00                  		lea	($FFFFCC00).w, a1
000ECDDE 323C 00DF                  		move.w	#$DF, d1
000ECDE2                            		
000ECDE2                            WTF_ClrScroll:
000ECDE2 22C0                       		move.l	d0, (a1)+
000ECDE4 51C9 FFFC                  		dbf	d1, WTF_ClrScroll	; Clear the scroll data.
000ECDE8                            		
000ECDE8 43F8 D000                  		lea	($FFFFD000).w, a1
000ECDEC 323C 0800                  		move.w	#$800, d1
000ECDF0                            		
000ECDF0                            WTF_ClrObjects:
000ECDF0 22C0                       		move.l	d0, (a1)+
000ECDF2 51C9 FFFC                  		dbf	d1, WTF_ClrObjects	; Clear the object data.
000ECDF6                            		
000ECDF6                            ; --------------------------------------------------------------
000ECDF6                            		
000ECDF6                            		; Load the C64 character set.
000ECDF6 7002                       		moveq	#$2, d0			; Color: $2
000ECDF8 4EB9 0000 0000             		jsr	C64_charset_load
000ECDFE                            		
000ECDFE                            ; --------------------------------------------------------------
000ECDFE                            		
000ECDFE                            		; Set up the scroll plane.
000ECDFE 3ABC 9001                  		move.w	#$9001, (a5)		; Scroll size: 64x32
000ECE02 3E3C FF1F                  		move.w	#-225, d7		; Start at -225 so the first line can be loaded.
000ECE06 2ABC 4000 0010             		move.l	#$40000010, (a5)
000ECE0C 3C87                       		move.w	d7, (a6)
000ECE0E                            		
000ECE0E                            ; --------------------------------------------------------------
000ECE0E                            		
000ECE0E                            		; Reserved registers:
000ECE0E                            		; - d4: Frame counter.
000ECE0E                            		; - d5: Current scroll line.
000ECE0E                            		; - d6: Wetflame TL;DR line counter.
000ECE0E                            		; - d7: Current VScroll value.
000ECE0E                            		; - a1: Wetflame_TLDR address.
000ECE0E                            		
000ECE0E                            		; Load the palette.
000ECE0E 2ABC C004 0000             		move.l	#$C0040000, (a5)	; Palette 0, Index 2.
000ECE14 3CBC 0EEE                  		move.w	#$0EEE, (a6)
000ECE18                            		
000ECE18                            		; Pick a random Wetflame TL;DR.
000ECE18                            ;		move.w	($FFFFFE0E).w,d0
000ECE18                            ;		andi.w	#$1F,d0
000ECE18 7000                       		move.l	#0,d0
000ECE1A                            		
000ECE1A                            		; Load the TL;DR's address.
000ECE1A 43F9 0000 0000             		lea	(TLDR_Table), a1
000ECE20 E548                       		lsl.w	#2, d0
000ECE22 2271 0000                  		movea.l	(a1,d0.w),a1
000ECE26                            		
000ECE26                            		; Initialize the TL;DR variables.
000ECE26 3C19                       		move.w	(a1)+, d6	; Number of lines for the TL;DR.
000ECE28 7A01                       		moveq	#1, d5		; Current scroll line.
000ECE2A 7800                       		moveq	#0, d4		; Frame counter.
000ECE2C                            		
000ECE2C                            		; Enable the display.
000ECE2C 33FC 8164 00C0 0004        		move.w	#$8164, ($C00004).l
000ECE34                            		
000ECE34                            ; --------------------------------------------------------------
000ECE34                            		
000ECE34                            		; Start of Wetflame!
000ECE34                            		; TODO: Replace with Sonic65's PCM driver.
000ECE34                            		
000ECE34                            		; Note: Interrupts are disabled due to a conflict
000ECE34                            		; with the text scrolling if Labyrinth Zone was the
000ECE34                            		; active zone when a Wetflame monitor was broken.
000ECE34                            		;move.w	#$2000, sr
000ECE34                            		
000ECE34                            WTF_scroll_loop:
000ECE34                            		
000ECE34                            		; VBlank routine by Sik.
000ECE34                            VBlank_Wait_1:
000ECE34                            		; Wait for current VBlank to exit.
000ECE34 3039 00C0 0004             		move.w	($C00004).l, d0
000ECE3A 0800 0003                  		btst.l	#3, d0
000ECE3E 66F4                       		bne.s	VBlank_Wait_1
000ECE40                            
000ECE40                            VBlank_Wait_2:
000ECE40                            		; Wait for next VBlank to start.
000ECE40 3039 00C0 0004             		move.w	($C00004).l, d0
000ECE46 0800 0003                  		btst.l	#3, d0
000ECE4A 67F4                       		beq.s	VBlank_Wait_2
000ECE4C                            		
000ECE4C                            		; Next frame.
000ECE4C 5244                       		addq	#1, d4		; Frame counter.
000ECE4E 0804 0000                  		btst	#0, d4		; Update on even frames only.
000ECE52 66E0                       		bne.s	WTF_scroll_loop
000ECE54                            		
000ECE54                            		; Next frame. Update the VScroll.
000ECE54 5247                       		addq	#1, d7
000ECE56 2ABC 4000 0010             		move.l	#$40000010, (a5)
000ECE5C 3C87                       		move.w	d7, (a6)
000ECE5E                            		
000ECE5E                            		; Check if a scroll line needs to be written.
000ECE5E 3007                       		move.w	d7, d0
000ECE60 0200 0007                  		andi.b	#7, d0
000ECE64 66CE                       		bne.s	WTF_scroll_loop
000ECE66                            		
000ECE66                            		; VScroll is a multiple of 8.
000ECE66 2005                       		move.l	d5, d0		; Set up the Scroll A write address.
000ECE68 EF48                       		lsl.w	#7, d0		; Shift left by 7 bits. (64 cells horizontally, times two.)
000ECE6A 0040 4000                  		ori.w	#$4000, d0	; Part of Scroll A's VRAM address.
000ECE6E 4840                       		swap	d0		; Swap the words in d0.
000ECE70 0000 0003                  		ori.b	#$3, d0		; Part of Scroll A's VRAM address.
000ECE74 2A80                       		move.l	d0, (a5)	; Set the VRAM address.
000ECE76                            		
000ECE76                            		; Increment the scroll line for next time.
000ECE76 5245                       		addq	#1, d5		; Next scroll line.
000ECE78 0245 001F                  		andi	#$1F, d5	; 32 scroll lines.
000ECE7C                            		
000ECE7C                            		; Check if the TL;DR is completely offscreen.
000ECE7C 0C46 FFDD                  		cmpi.w	#-35, d6
000ECE80 6700                       		beq.s	WTF_finished
000ECE82                            		
000ECE82                            		; Check if there are any more lines to write.
000ECE82 0C46 0000                  		cmpi.w	#0, d6
000ECE86 6F00                       		ble.s	WTF_write_blank_line
000ECE88                            		
000ECE88                            		; Write a line of text.
000ECE88                            		; d0 == column; d1 == data.
000ECE88 7027                       		moveq	#39, d0		; 40 columns.
000ECE8A 7200                       		moveq	#0, d1		; Clear the data register.
000ECE8C                            		
000ECE8C                            TLDR_Load:
000ECE8C                            		; Load a character from the TL;DR.
000ECE8C 1219                       		move.b	(a1)+, d1
000ECE8E 3C81                       		move.w	d1, (a6)	; Write the character to VRAM.
000ECE90 51C8 FFFA                  		dbf	d0, TLDR_Load	; Next column.
000ECE94 5346                       		subq	#1, d6		; Decrement the line counter.
000ECE96 609C                       		bra.s	WTF_scroll_loop
000ECE98                            		
000ECE98                            WTF_write_blank_line:
000ECE98                            		; Write a blank line to VRAM.
000ECE98                            		; d0 == column; d1 == data.
000ECE98 700F                       		moveq	#$F, d0		; 64 columns, four at a time.
000ECE9A 7200                       		moveq	#0, d1		; Clear the data register.
000ECE9C 5346                       		subq	#1, d6		; Decrement the line counter.
000ECE9E                            		
000ECE9E                            WTF_write_blank_line_loop:
000ECE9E 2C81                       		move.l	d1, (a6)	; Write the blank characters to VRAM.
000ECEA0 2C81                       		move.l	d1, (a6)	; Write the blank characters to VRAM.
000ECEA2 51C8 FFFA                  		dbf	d0, WTF_write_blank_line_loop
000ECEA6 608C                       		bra.s	WTF_scroll_loop
000ECEA8                            		
000ECEA8                            ; --------------------------------------------------------------
000ECEA8                            		
000ECEA8                            WTF_finished:
000ECEA8                            		; Finished scrolling. Lose the game.
000ECEA8 11FC 0004 FF94             		move.b	#4,($FFFFFF94).w
000ECEAE 4E75                       		rts		
000ECEB0                            		
000ECEB0                            ; ===========================================================================
000ECEB0                            		
000ECEB0                            		; Data for the TL;DR screen.
000ECEB0                            		include _inc\C64_charset.asm
000ECEB0                            C64_charset_load:
000ECEB0                            	; Load the text characters into VRAM.
000ECEB0                            	; d0 == color to use.
000ECEB0                            	; Starting address: $0000 (tile 0)
000ECEB0 41F9 00C0 0004             	lea	($C00004), a0
000ECEB6 43F9 00C0 0000             	lea	($C00000), a1
000ECEBC 20BC 4000 0000             	move.l	#$40000000, (a0); Base address: $0000
000ECEC2                            	
000ECEC2                            	; Make sure d0 is within range.
000ECEC2 0200 000F                  	and.b	#$F, d0
000ECEC6                            	
000ECEC6                            	; Number of characters: $80
000ECEC6 727F                       	moveq	#$7F, d1
000ECEC8                            	
000ECEC8                            	; Load the address of the characters table.
000ECEC8 45F9 0000 0000             	lea	(C64_charset), a2
000ECECE                            	
000ECECE                            C64_charset_load_char_loop:
000ECECE                            		; d2 == row number.
000ECECE 7407                       		moveq	#7, d2
000ECED0                            		
000ECED0                            C64_charset_load_char_row_loop:
000ECED0 7600                       			moveq	#0, d3		; d3 == current row video data.
000ECED2 181A                       			move.b	(a2)+, d4	; d4 == current character byte.
000ECED4 7A07                       			moveq	#7, d5		; d5 == current column.
000ECED6                            			
000ECED6                            C64_charset_load_char_col_loop:
000ECED6                            				; Test the MSB of the low byte.
000ECED6 0804 0007                  				btst	#7, d4
000ECEDA 6700                       				beq.s	.no_pixel
000ECEDC                            				
000ECEDC                            				; Pixel is set.
000ECEDC 8680                       				or.l	d0, d3
000ECEDE                            				
000ECEDE                            .no_pixel:
000ECEDE E98B                       				lsl.l	#4, d3	; Left-shift the current video data.
000ECEE0 D844                       				add.w	d4, d4	; Left-shift the character data.
000ECEE2                            				
000ECEE2                            				; Next column.
000ECEE2 51CD FFF2                  				dbf	d5, C64_charset_load_char_col_loop
000ECEE6                            			
000ECEE6                            			; Send the row to VRAM.
000ECEE6 2283                       			move.l	d3, (a1)
000ECEE8                            			
000ECEE8                            			; Next row.
000ECEE8 51CA FFE6                  			dbf	d2, C64_charset_load_char_row_loop
000ECEEC                            		
000ECEEC                            		; Next character.
000ECEEC 51C9 FFE0                  		dbf	d1, C64_charset_load_char_loop
000ECEF0                            	
000ECEF0                            	; Finished loading the character data into VRAM.
000ECEF0 4E75                       	rts
000ECEF2                            
000ECEF2                            C64_charset:
000ECEF2                            		; $00 - $0F
000ECEF2 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; NULL
000ECEFA 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; âº [TODO]
000ECF02 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â» [TODO]
000ECF0A 367F 7F7F 3E1C 0800        		dc.l	$367F7F7F, $3E1C0800	; â¥
000ECF12 081C 3E7F 3E1C 0800        		dc.l	$081C3E7F, $3E1C0800	; â¦
000ECF1A 1818 6666 1818 3C00        		dc.l	$18186666, $18183C00	; â£
000ECF22 081C 3E7F 7F1C 3E00        		dc.l	$081C3E7F, $7F1C3E00	; â 
000ECF2A 003C 7E7E 7E7E 3C00        		dc.l	$003C7E7E, $7E7E3C00	; â¢
000ECF32 FFC3 8181 8181 C3FF        		dc.l	$FFC38181, $8181C3FF	; â
000ECF3A 003C 7E66 667E 3C00        		dc.l	$003C7E66, $667E3C00	; â
000ECF42 FFC3 8199 9981 C3FF        		dc.l	$FFC38199, $9981C3FF	; â
000ECF4A 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â [TODO]
000ECF52 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â [TODO]
000ECF5A 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; âª [TODO]
000ECF62 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â« [TODO]
000ECF6A 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â¼ [TODO]
000ECF72                            		
000ECF72                            		; $10 - $1F
000ECF72 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; âº [TODO]
000ECF7A 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â [TODO]
000ECF82 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â [TODO]
000ECF8A 6666 6666 0000 6600        		dc.l	$66666666, $00006600	; â¼
000ECF92 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; Â¶ [TODO]
000ECF9A 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; Â§ [TODO]
000ECFA2 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â¬ [TODO]
000ECFAA 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â¨ [TODO]
000ECFB2 0018 3C7E 1818 1818        		dc.l	$00183C7E, $18181818	; â
000ECFBA 0018 1818 187E 3C18        		dc.l	$00181818, $187E3C18	; â
000ECFC2 0004 067F 7F06 0400        		dc.l	$0004067F, $7F060400	; â
000ECFCA 0010 307F 7F30 1000        		dc.l	$0010307F, $7F301000	; â
000ECFD2 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â [TODO]
000ECFDA 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â [TODO]
000ECFE2 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â² [TODO]
000ECFEA 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â¼ [TODO]
000ECFF2                            		
000ECFF2                            		; $20 - $2F
000ECFF2 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; Space
000ECFFA 1818 1818 0000 1800        		dc.l	$18181818, $00001800	; !
000ED002 6666 6600 0000 0000        		dc.l	$66666600, $00000000	; "
000ED00A 6666 FF66 FF66 6600        		dc.l	$6666FF66, $FF666600	; #
000ED012 183E 603C 067C 1800        		dc.l	$183E603C, $067C1800	; $
000ED01A 6266 0C18 3066 4600        		dc.l	$62660C18, $30664600	; %
000ED022 3C66 3C38 6766 3F00        		dc.l	$3C663C38, $67663F00	; &
000ED02A 060C 1800 0000 0000        		dc.l	$060C1800, $00000000	; '
000ED032 0C18 3030 3018 0C00        		dc.l	$0C183030, $30180C00	; (
000ED03A 3018 0C0C 0C18 3000        		dc.l	$30180C0C, $0C183000	; )
000ED042 0066 3CFF 3C66 0000        		dc.l	$00663CFF, $3C660000	; *
000ED04A 0018 187E 1818 0000        		dc.l	$0018187E, $18180000	; +
000ED052 0000 0000 001C 1C30        		dc.l	$00000000, $001C1C30	; ,
000ED05A 0000 007E 0000 0000        		dc.l	$0000007E, $00000000	; -
000ED062 0000 0000 0018 1800        		dc.l	$00000000, $00181800	; .
000ED06A 0003 060C 1830 6000        		dc.l	$0003060C, $18306000	; /
000ED072                            		
000ED072                            		; $30 - $3F
000ED072 3C66 6E76 6666 3C00        		dc.l	$3C666E76, $66663C00	; 0
000ED07A 1818 3818 1818 7E00        		dc.l	$18183818, $18187E00	; 1
000ED082 3C66 060C 3060 7E00        		dc.l	$3C66060C, $30607E00	; 2
000ED08A 3C66 061C 0666 3C00        		dc.l	$3C66061C, $06663C00	; 3
000ED092 060E 1E66 7F06 0600        		dc.l	$060E1E66, $7F060600	; 4
000ED09A 7E60 7C06 0666 3C00        		dc.l	$7E607C06, $06663C00	; 5
000ED0A2 3C66 607C 6666 3C00        		dc.l	$3C66607C, $66663C00	; 6
000ED0AA 7E66 0C18 1818 1800        		dc.l	$7E660C18, $18181800	; 7
000ED0B2 3C66 663C 6666 3C00        		dc.l	$3C66663C, $66663C00	; 8
000ED0BA 3C66 663E 0666 3C00        		dc.l	$3C66663E, $06663C00	; 9
000ED0C2 0000 1800 0018 0000        		dc.l	$00001800, $00180000	; :
000ED0CA 0000 1800 0018 1830        		dc.l	$00001800, $00181830	; ;
000ED0D2 0E18 3060 3018 0E00        		dc.l	$0E183060, $30180E00	; <
000ED0DA 0000 7E00 7E00 0000        		dc.l	$00007E00, $7E000000	; =
000ED0E2 7018 0C06 0C18 7000        		dc.l	$70180C06, $0C187000	; >
000ED0EA 3C66 060C 1800 1800        		dc.l	$3C66060C, $18001800	; ?
000ED0F2                            		
000ED0F2                            		; $40 - $4F
000ED0F2 3C66 6E6E 6062 3C00        		dc.l	$3C666E6E, $60623C00	; @
000ED0FA 183C 667E 6666 6600        		dc.l	$183C667E, $66666600	; A
000ED102 7C66 667C 6666 7C00        		dc.l	$7C66667C, $66667C00	; B
000ED10A 3C66 6060 6066 3C00        		dc.l	$3C666060, $60663C00	; C
000ED112 786C 6666 666C 7800        		dc.l	$786C6666, $666C7800	; D
000ED11A 7E60 6078 6060 7E00        		dc.l	$7E606078, $60607E00	; E
000ED122 7E60 6078 6060 6000        		dc.l	$7E606078, $60606000	; F
000ED12A 3C66 606E 6666 3C00        		dc.l	$3C66606E, $66663C00	; G
000ED132 6666 667E 6666 6600        		dc.l	$6666667E, $66666600	; H
000ED13A 3C18 1818 1818 3C00        		dc.l	$3C181818, $18183C00	; I
000ED142 1E0C 0C0C 0C6C 3800        		dc.l	$1E0C0C0C, $0C6C3800	; J
000ED14A 666C 7870 786C 6600        		dc.l	$666C7870, $786C6600	; K
000ED152 6060 6060 6060 7E00        		dc.l	$60606060, $60607E00	; L
000ED15A 6377 7F6B 6363 6300        		dc.l	$63777F6B, $63636300	; M
000ED162 6676 7E7E 6E66 6600        		dc.l	$66767E7E, $6E666600	; N
000ED16A 3C66 6666 6666 3C00        		dc.l	$3C666666, $66663C00	; O
000ED172                            		
000ED172                            		; $50 - $5F
000ED172 7C66 667C 6060 6000        		dc.l	$7C66667C, $60606000	; P
000ED17A 3C66 6666 663C 0E00        		dc.l	$3C666666, $663C0E00	; Q
000ED182 7C66 667C 786C 6600        		dc.l	$7C66667C, $786C6600	; R
000ED18A 3C66 603C 0666 3C00        		dc.l	$3C66603C, $06663C00	; S
000ED192 7E18 1818 1818 1800        		dc.l	$7E181818, $18181800	; T
000ED19A 6666 6666 6666 3C00        		dc.l	$66666666, $66663C00	; U
000ED1A2 6666 6666 663C 1800        		dc.l	$66666666, $663C1800	; V
000ED1AA 6363 636B 7F77 6300        		dc.l	$6363636B, $7F776300	; W
000ED1B2 6666 3C18 3C66 6600        		dc.l	$66663C18, $3C666600	; X
000ED1BA 6666 663C 1818 1800        		dc.l	$6666663C, $18181800	; Y
000ED1C2 7E06 0C18 3060 7E00        		dc.l	$7E060C18, $30607E00	; Z
000ED1CA 3C30 3030 3030 3C00        		dc.l	$3C303030, $30303C00	; [
000ED1D2 0060 3018 0C06 0300        		dc.l	$00603018, $0C060300	; Backslash
000ED1DA 3C0C 0C0C 0C0C 3C00        		dc.l	$3C0C0C0C, $0C0C3C00	; ]
000ED1E2 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; ^ [TODO]
000ED1EA 0000 0000 0000 00FF        		dc.l	$00000000, $000000FF	; _
000ED1F2                            		
000ED1F2                            		; $60 - $6F
000ED1F2 6030 1800 0000 0000        		dc.l	$60301800, $00000000	; `
000ED1FA 0000 3C06 3E66 3E00        		dc.l	$00003C06, $3E663E00	; a
000ED202 0060 607C 6666 7C00        		dc.l	$0060607C, $66667C00	; b
000ED20A 0000 3C60 6060 3C00        		dc.l	$00003C60, $60603C00	; c
000ED212 0006 063E 6666 3E00        		dc.l	$0006063E, $66663E00	; d
000ED21A 0000 3C66 7E60 3C00        		dc.l	$00003C66, $7E603C00	; e
000ED222 000E 183E 1818 1800        		dc.l	$000E183E, $18181800	; f
000ED22A 0000 3E66 663E 067C        		dc.l	$00003E66, $663E067C	; g
000ED232 0060 607C 6666 6600        		dc.l	$0060607C, $66666600	; h
000ED23A 0018 0038 1818 3C00        		dc.l	$00180038, $18183C00	; i
000ED242 0006 0006 0606 063C        		dc.l	$00060006, $0606063C	; j
000ED24A 0060 606C 786C 6600        		dc.l	$0060606C, $786C6600	; k
000ED252 0038 1818 1818 3C00        		dc.l	$00381818, $18183C00	; l
000ED25A 0000 667F 7F6B 6300        		dc.l	$0000667F, $7F6B6300	; m
000ED262 0000 7C66 6666 6600        		dc.l	$00007C66, $66666600	; n
000ED26A 0000 3C66 6666 3C00        		dc.l	$00003C66, $66663C00	; o
000ED272                            		
000ED272                            		; $70 - $7F
000ED272 0000 7C66 667C 6060        		dc.l	$00007C66, $667C6060	; p
000ED27A 0000 3E66 663E 0606        		dc.l	$00003E66, $663E0606	; q
000ED282 0000 7C66 6060 6000        		dc.l	$00007C66, $60606000	; r
000ED28A 0000 3E60 3C06 7C00        		dc.l	$00003E60, $3C067C00	; s
000ED292 0018 7E18 1818 0E00        		dc.l	$00187E18, $18180E00 	; t
000ED29A 0000 6666 6666 3E00        		dc.l	$00006666, $66663E00	; u
000ED2A2 0000 6666 663C 1800        		dc.l	$00006666, $663C1800	; v
000ED2AA 0000 636B 7F3E 3600        		dc.l	$0000636B, $7F3E3600	; w
000ED2B2 0000 663C 183C 6600        		dc.l	$0000663C, $183C6600	; x
000ED2BA 0000 6666 663E 0C78        		dc.l	$00006666, $663E0C78	; y
000ED2C2 0000 7E0C 1830 7E00        		dc.l	$00007E0C, $18307E00	; z
000ED2CA 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; { [TODO]
000ED2D2 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; | [TODO]
000ED2DA 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; } [TODO]
000ED2E2 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; ~ [TODO]
000ED2EA 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â [TODO]
000ED2EA 0000 0000 0000 0000        		dc.l	$00000000, $00000000	; â [TODO]
000ED2F2                            		include	_inc\tldr.asm
000ED2F2                            		even
000ED2F2                            
000ED2F2                            TLDR_Table:
000ED2F2 0000 0000                  		dc.l	Wetflame_TLDR_0001
000ED2F6                            		even
000ED2F6                            TLDR_Table_End:
000ED2F6                            
000ED2F6                            
000ED2F6                            
000ED2F6                            ; Wetflame TL;DR's.
000ED2F6                            
000ED2F6                            		; "What really bothers me about Retro", 2009/07/13
000ED2F6                            		; See http://sonicresearch.org/forums/index.php?showtopic=1373&view=findpost&p=12319
000ED2F6                            Wetflame_TLDR_0001:
000ED2F6 0000                       		dc.w	(Wetflame_TLDR_0001_END-Wetflame_TLDR_0001-2) / 40
000ED2F8                            		
000ED2F8 2020 2020 203D 203D 203D+  		dc.b	"     = = =  SONIC ALPHAOMEGA  = = =     "
000ED320 2020 2020 2020 2020 2020+  		dc.b	"                                        "
000ED348 2020 2020 2020 2020 2020+  		dc.b	"                                        "
000ED370 2020 2020 2020 2020 2020+  		dc.b	"                                        "
000ED398 2020 2020 2020 2020 2020+  		dc.b	"                                        "
000ED3C0 2020 2020 2020 2020 2020+  		dc.b	"                                        "
000ED3E8 2020 2020 2020 2020 2020+  		dc.b	"                                        "
000ED410 5468 6973 2073 7563 6B73+  		dc.b	"This sucks.                             "
000ED438                            		even
000ED438                            Wetflame_TLDR_0001_END:
000ED438                            
000ED438                            
000ED438                            		
000ED438                            ; ===========================================================================
000ED438                            
000ED438                            
000ED438                            ; end of 'ROM'
000ED438                            EndOfRom:
000ED438                            
000ED438                            
